<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>TensorFlow2.0（12）：模型保存与序列化 - 奥辰</title>
<link>http://www.cnblogs.com/chenhuabin/p/12089452.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenhuabin/p/12089452.html</guid>
<description>[unable to retrieve full-text content]模型训练好之后，我们就要想办法将其持久化保存下来，不然关机或者程序退出后模型就不复存在了。本文介绍两种持久化保存模型的方法。</description>
<pubDate>Mon, 23 Dec 2019 23:11:00 +0000</pubDate>
<dc:creator>奥辰</dc:creator>
<dc:identifier>http://www.cnblogs.com/chenhuabin/p/12089452.html</dc:identifier>
</item>
<item>
<title>跳槽驱动工作 - 虫师</title>
<link>http://www.cnblogs.com/fnng/p/12089260.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fnng/p/12089260.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/311516/201912/311516-20191224004141510-1847235027.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最近各大互联网公司裁员消息频出，这几天被知乎上面 “如何看待马蜂窝裁员40%”，“如何看待腾讯裁员7000人员” 等问题刷屏。&lt;/p&gt;
&lt;p&gt;还有一个裁员名单被疯狂转载。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/311516/201912/311516-20191224004204598-1444839527.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这些裁员消息真假先放一边，俗话说无风不起浪，至少行业里面释放的信号是不太好的。&lt;/p&gt;
&lt;p&gt;不管你是主动跳槽，还是被动离职，每年的年初都是换工作高峰期。就算你所在的公司很稳定，或者你刚躲过了裁员名单，我觉得你也有必要早做准备。不然，你哪一天失业了还一脸懵圈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/311516/201912/311516-20191224004217765-1286973237.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;随着工作经验越长市场能匹配你的职位越少，比如一个工作1~2年的测试，市场上有大把的测试岗位可以匹配，一个15年工作经验的测试能再找一份合适的工作并不容易。&lt;/p&gt;
&lt;p&gt;如何应对瞬息万变的互联网行业呢？答案是 跳槽驱动工作，what ? 每天都想着跳槽，这是对公司的不忠，这是不对的。但其实这是对公司和自己的最大忠诚，因为这样的心态才能更努力的投入到工作，更有主动的迎接挑战。反过来想，假设你问一个应聘者打算在这个公司干几年，如果他回答是&quot;一辈子&quot;，仔细想想是不是很恐怖？打算把公司当养老的地儿了才会想着干一辈子。&lt;/p&gt;
&lt;p&gt;那么接下来如何面向跳槽工作？&lt;/p&gt;
&lt;h2 id=&quot;第一步&quot;&gt;第一步&lt;/h2&gt;
&lt;p&gt;你要知道你的目标是跳槽，所以，你要先罗列一下你想要跳槽的公司，这个目标不能太高，也不能太低，比如，你学历一般，目前在一个不知名的小公司，做着毫无影响力的项目，目标是Google、Facebook这样的公司，显然目标不能定的太高了。但也不能把目标定的太低，比如跳槽一个可以涨500块钱的公司，这就没意思了，只要老板心不算太黑，年底给你涨500元问题不大的，没必要通过跳槽实现。所以，你要选择一/多个适中的目标公司。&lt;/p&gt;
&lt;h2 id=&quot;第二步&quot;&gt;第二步&lt;/h2&gt;
&lt;p&gt;分析目标公司的招聘要求。学历不够啊，那能否提升一下学历，编程语言不会啊！那么就开始制定学习计划，自动化测试，性能测试都需要制定学习计划。&lt;/p&gt;
&lt;h2 id=&quot;第三步&quot;&gt;第三步&lt;/h2&gt;
&lt;p&gt;光学习是不够的，你要把学到的技术变成工作经验，同样一份工作有些看到的都是机会，有些人看到的都是限制。比如，时常有同学抱怨，“我们公司也不做自动化也不做性能，在这儿呆着没学不到东西没发展。” ，但这不是机会么？就是因为流程不完善，技术落后，你才有更多机会把学到的技术应用到的工作中，但是，要会分析抓重点，找出当前工作中最需要改进和提升的地方。&lt;/p&gt;
&lt;p&gt;把学到的技术变成工作经验，才能在跳槽时产生真正的价值。&lt;/p&gt;
&lt;h2 id=&quot;第四步&quot;&gt;第四步&lt;/h2&gt;
&lt;p&gt;你要多出去面试，你需要半年或一年出去面试一次，然后总结经验，还有哪些不足，面试是检验你能力的唯一标准，而且它还可以补充你的鸡血，让你在接下来的一段时间更有动力工作。&lt;/p&gt;
&lt;p&gt;你可以选择和目前差不多的公司，或者比现在公司好一些试试，至少保证能过简历筛选，否则你就得不到面试机会。&lt;/p&gt;
&lt;p&gt;但是，千万不要因为面试的公司比现在的工资高了一丢丢，你就打算跳槽过去。你要考虑跳槽的成本，过于频繁影响职业发展，缺少某一领域业务的积累，年龄越大越要控制跳槽的频率。&lt;/p&gt;
&lt;h2 id=&quot;第五步&quot;&gt;第五步&lt;/h2&gt;
&lt;p&gt;也许，你已经成功入职了满意的目标公司，但不要太高兴，你需要继续面向跳槽工作。你需要回到 第一步 重新规划目标公司。&lt;/p&gt;
&lt;p&gt;照我这种方法，失业是不可能失业的，这辈子都不可以失业，除非他们能和你一样，但这怎么可能呢？我还不是也没做到以上五步？哈哈！&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 16:43:00 +0000</pubDate>
<dc:creator>虫师</dc:creator>
<og:description>跳槽驱动工作，五步立于不败之地！</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/fnng/p/12089260.html</dc:identifier>
</item>
<item>
<title>【ASP.NET Core学习】远程过程调用 - gRPC使用 - WilsonPan</title>
<link>http://www.cnblogs.com/WilsonPan/p/12000796.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/WilsonPan/p/12000796.html</guid>
<description>&lt;div class=&quot;ws-content&quot; readability=&quot;18&quot;&gt;
&lt;p&gt; 本文介绍在gRPC使用，将从下面几个方面介绍&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/WilsonPan/p/12000796.html#whatIsPPC&quot;&gt;什么是RPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/WilsonPan/p/12000796.html#whenToNeed&quot;&gt;什么时候需要RPC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/WilsonPan/p/12000796.html#howToUsed&quot;&gt;如何使用gRPC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p id=&quot;whatIsPPC&quot; class=&quot;ws-title&quot;&gt;什么是RPC&lt;/p&gt;
&lt;div class=&quot;ws-content&quot; readability=&quot;44.240506329114&quot;&gt;
&lt;p&gt;RPC是Remote Procedure Call简称，翻译过来是远程过程调用。它是一个进程间的通讯技术，基于Client-Server模式，让程序像调用本地方法一样使用，而无需去关系它细节如何实现。&lt;/p&gt;
&lt;p&gt;上面是我的理解，怕理解有错或者表达不准确，下面引用维基百科&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot; target=&quot;_blank&quot;&gt;维基百科&lt;/a&gt; a remote procedure call (RPC) is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction&lt;/p&gt;
&lt;p&gt;网上找到一个图，比较形象描述RPC调用过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/413875/201912/413875-20191213163116462-787687310.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;p id=&quot;whenToNeed&quot; class=&quot;ws-title&quot;&gt;什么时候需要RPC&lt;/p&gt;
&lt;div class=&quot;ws-content&quot; readability=&quot;47&quot;&gt;
&lt;p&gt;RPC是解决进程间通讯（可以是同一个服务器，也可以是不同服务器的进程间，但是通常是内网的不同服务器之间进程通讯）。 &lt;/p&gt;
&lt;p&gt;解决进程间通信，Web Api也是可以解决，为什么还需要RPC？我认为可以从下面几点&lt;/p&gt;
&lt;p&gt;1. Web Api是基于HTTP，RPC可以是HTTP，也可以是TCP，甚至基于Socket，RPC框架通常都是隐藏通讯细节，让我们无感知使用&lt;/p&gt;
&lt;p&gt;2. Web Api 通常基于JSON格式，XML格式，这种格式易读性强，但是随之带来就是传输过程需要把数据的元数据也带进去传输&lt;/p&gt;
&lt;p&gt;3. Web Api更多应用场景是提供方定义好接口，由客户端按需调用，RPC通常需要调用方和提供方沟通一起定义接口&lt;/p&gt;
&lt;p&gt;所以PRC更多是使用以下场景&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;对通讯性能要求较高&lt;/li&gt;
&lt;li&gt;微服务&lt;/li&gt;
&lt;li&gt;点到点通讯&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p id=&quot;howToUsed&quot; class=&quot;ws-title&quot;&gt;gRPC使用&lt;/p&gt;
&lt;div class=&quot;ws-content&quot; readability=&quot;82&quot;&gt;
&lt;p&gt; gRPC是Google开源的高性能RPC框架，有以下几个特点&lt;/p&gt;
&lt;ol readability=&quot;1.5&quot;&gt;&lt;li&gt;现代高性能轻量级 RPC 框架。&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;协定优先 API 开发，默认使用protobuf，允许与语言无关的实现。（这里涉及两点，1.面向接口开发，依赖抽象而不是具体，2. 可以不同语言实现协作）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;使用 Protobuf 二进制序列化减少对网络的使用。（减少网络传输）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;可用于多种语言的工具，以生成强类型服务器和客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;支持客户端、服务器和双向流式处理调用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;下面开始介绍如何在Net Core上使用gRPC&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、安装dotnet-gRPC工具（用于引用protobuf文件，生成客户端/服务端代码）&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet tool install dotnet-grpc &lt;strong&gt;-g&lt;/strong&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;二、新建一个protobuf文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
syntax = &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;proto3&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

option csharp_namespace &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;gRPC.Services&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;

package sms;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The greeting service definition.&lt;/span&gt;
&lt;span&gt;service SmsSender {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Sends a greeting&lt;/span&gt;
&lt;span&gt;  rpc SendSms (SmsRequest) returns (SmsResponse);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The request message containing the user's name.&lt;/span&gt;
&lt;span&gt;message SmsRequest {
  &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; tel = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; content = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; The response message containing the greetings.&lt;/span&gt;
&lt;span&gt;message SmsResponse {
  int32 code &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;string&lt;/span&gt; message = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;三、新建一个服务端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 新建一个gRPC工程&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet &lt;span&gt;new&lt;/span&gt; grpc -n gRPC.Services
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. 引入步骤二生成的protobuf文件（可以使用通配符引入多个protobuf文件）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet-grpc add-file ..\gRPC.Protos\*.proto -s Serve
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3. 新建服务类&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SmsService : SmsSender.SmsSenderBase
{
    &lt;/span&gt;&lt;span&gt;private&lt;/span&gt; &lt;span&gt;readonly&lt;/span&gt; ILogger&amp;lt;SmsService&amp;gt;&lt;span&gt; _logger;
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; SmsService(ILogger&amp;lt;SmsService&amp;gt;&lt;span&gt; logger)
    {
        _logger &lt;/span&gt;=&lt;span&gt; logger;
    }

    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;override&lt;/span&gt; Task&amp;lt;SmsResponse&amp;gt;&lt;span&gt; SendSms(SmsRequest request, ServerCallContext context)
    {
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; Task.FromResult(&lt;span&gt;new&lt;/span&gt;&lt;span&gt; SmsResponse
        {
            Code &lt;/span&gt;= &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
            Message &lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;发送成功&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
        });
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SmsSender 是生成工具生成的服务端代码&lt;/p&gt;
&lt;p&gt;4. 配置grpc服务类终结点&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
app.UseEndpoints(endpoints =&amp;gt;&lt;span&gt;
{
    endpoints.MapGrpcService&lt;/span&gt;&amp;lt;SmsService&amp;gt;&lt;span&gt;();
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;四、新建客户端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 1. 新建控制台程序&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet &lt;span&gt;new&lt;/span&gt; console -n gRPC.Client
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2. 添加包（Google.Protobuf）&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet add package Google.Protobuf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3. 引入步骤二生成的protobuf文件（可以使用通配符引入多个protobuf文件）,注意：这里需要生成是客户端代码，当然也可以用Both参数生成&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
dotnet-grpc add-file ..\gRPC.Protos\*.proto -s Client
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;五、运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 运行服务端&lt;/p&gt;
&lt;p&gt;2. 启动客户端&lt;/p&gt;
&lt;p&gt;客户端输出下面信息&lt;/p&gt;
&lt;p&gt;{&quot;Code&quot;:1,&quot;Message&quot;:&quot;\u53D1\u9001\u6210\u529F&quot;}&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;六、小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;gRPC的生命周期&lt;/p&gt;
&lt;p&gt;Client（发送请求） -&amp;gt; Client stub(压缩/解压) -&amp;gt; Client RPC Transfer(发送/接收） -&amp;gt; Server RPC Transfer(接收/发送) -&amp;gt; Server stub(解压/压缩) -&amp;gt; Server （处理响应）&lt;/p&gt;
&lt;p&gt;gPRC帮我们隐藏中间的环节，只剩下两头的代码（俗称业务逻辑代码）&lt;/p&gt;
&lt;p&gt;protobuf它是一种可序列化的数据结构，但它更重要是定义接口，让服务端和客户端能分离出来&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ws-copyright&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;转发请标明出处：https://www.cnblogs.com/WilsonPan/p/12000796.html&lt;/p&gt;
&lt;p&gt;示例代码：https://github.com/WilsonPan/AspNetCoreExamples/tree/master/gRPC&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 23 Dec 2019 16:39:00 +0000</pubDate>
<dc:creator>WilsonPan</dc:creator>
<og:description>【ASP.NET Core学习】 介绍在gRPC使用，将从从（What）什么是RPC，（When）什么时候需要使用RPC，（How）如何使用gRPC。 RPC是Remote Procedure Ca</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/WilsonPan/p/12000796.html</dc:identifier>
</item>
<item>
<title>反射之深入理解Constructor原理 - Java知识学堂</title>
<link>http://www.cnblogs.com/ferryman/p/12089210.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/ferryman/p/12089210.html</guid>
<description>[unable to retrieve full-text content]知其然，知其所以然 0. 前言 在上一篇《反射从入门到精通之深入了解Class类》，我们深入分析了一下 Class 类的原理。在本篇文章，我们分析一下 Constructor 使用方法的原理。 1. Constructor 通过反射调用构造函数有两种方法： 调用无参构造函数：Class.newIns</description>
<pubDate>Mon, 23 Dec 2019 16:10:00 +0000</pubDate>
<dc:creator>Java知识学堂</dc:creator>
<dc:identifier>https://www.cnblogs.com/ferryman/p/12089210.html</dc:identifier>
</item>
<item>
<title>聊一聊分库分表及它生产的一些概念 - BuddyYuan</title>
<link>http://www.cnblogs.com/buddy-yuan/p/12089178.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/buddy-yuan/p/12089178.html</guid>
<description>&lt;h4 id=&quot;为什么要分库分表&quot;&gt;为什么要分库分表？&lt;/h4&gt;
&lt;p&gt;随着近些年信息化大跃进，各行各业无纸化办公产生了大量的数据，而越来越多的数据存入了数据库中。当使用&lt;code&gt;MySQL&lt;/code&gt;数据库的时候，单表超出了2000万数据量就会出现性能上的分水岭。并且物理服务器的CPU、内存、存储、连接数等资源有限，某个时段大量连接同时执行操作，会导致数据库在处理上遇到性能瓶颈。为了解决这个问题，行业先驱门充分发扬了&lt;code&gt;分而治之&lt;/code&gt;的思想，对大表进行分割，然后实施更好的控制和管理，同时使用多台机器的CPU、内存、存储，提供更好的性能。而&lt;code&gt;分而治之&lt;/code&gt;则有两种方式：&lt;code&gt;垂直拆分&lt;/code&gt;和&lt;code&gt;水平拆分&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;垂直拆分&quot;&gt;垂直拆分&lt;/h4&gt;
&lt;p&gt;垂直拆分分为&lt;code&gt;垂直分库&lt;/code&gt;和&lt;code&gt;垂直分表&lt;/code&gt;。先说说&lt;code&gt;垂直分库&lt;/code&gt;。垂直分库其实是一种简单逻辑分割。比如我们的数据库中有商品表Products、还有对订单表Orders，还有积分表Scores。接下来我们就可以创建三个数据库，一个数据库存放商品，一个数据库存放订单，一个数据库存放积分。如下图所示：&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/23/16f33421636bb4a4?w=848&amp;amp;h=456&amp;amp;f=png&amp;amp;s=36905&quot; alt=&quot;垂直分库&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;垂直分库&lt;/code&gt;有一个优点，他能够根据业务场景进行孵化，比如某一单一场景只用到某2-3张表，基本上应用和数据库可以拆分出来做成相应的服务。&lt;/p&gt;
&lt;p&gt;再来说说&lt;code&gt;垂直分表&lt;/code&gt;，比较适用于那种字段比较多的表，假设我们一张表有100个字段，我们分析了一下当前业务执行的SQL语句，有20个字段是经常使用的，而另外80个字段使用比较少。这样我们就可以把20个字段放在主表里面，我们在创建一个辅助表，存放另外80个字段。当然主表和辅助表都是有主键的。他们通过主键进行关联合并，就可以凑成100个字段的表。&lt;br/&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/23/16f33421f358af17?w=1093&amp;amp;h=640&amp;amp;f=png&amp;amp;s=26278&quot; alt=&quot;垂直分表&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;垂直分表&lt;/code&gt;可以解决&lt;code&gt;跨页&lt;/code&gt;的问题。在Oracle中叫行链接。怎么理解呢？就是你字段少的情况下，原本一行数据只需要存在一个页里面就行了，但是字段多的情况就存不下了，就需要跨页。这样就会造成额外寻址，造成性能上的开销。另外将这么长的一行数据载到内存中，往往是几个页面，结果咱们经常只访问其中的几个字段，对内存也是一个极大的开销。所以为了让内存缓存更多数据，减少磁盘I/O，&lt;code&gt;垂直分表&lt;/code&gt;就是很好的手段。&lt;/p&gt;
&lt;p&gt;总体来说：&lt;code&gt;垂直拆分&lt;/code&gt;有以下优点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;跟随业务进行分割，和最近流行的微服务概念相似，方便解耦之后的管理及扩展。&lt;/li&gt;
&lt;li&gt;高并发的场景下，垂直拆分使用多台服务器的CPU、I/O、内存能提升性能，同时对单机数据库连接数、一些资源限制也得到了提升。&lt;/li&gt;
&lt;li&gt;能实现冷热数据的分离。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;垂直拆分&lt;/code&gt;的缺点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;部分业务表无法join，应用层需要很大的改造，只能通过聚合的方式来实现。增加了开发的难度。&lt;/li&gt;
&lt;li&gt;当单库中的表数据量增大的时候依然没有得到有效的解决。&lt;/li&gt;
&lt;li&gt;分布式事务也是一个难题。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;水平拆分&quot;&gt;水平拆分&lt;/h4&gt;
&lt;p&gt;当某张表数据量达到一定的程度的时候，前面曾说过MySQL单表出现2000万以上数据就会出现性能上的分水岭。此时发现没有办法根据业务规则再进行拆分了，就会导致单库上的读写性能出现瓶颈。此时就只能进行水平拆分了。&lt;/p&gt;
&lt;p&gt;水平拆分又分为&lt;code&gt;库内分表&lt;/code&gt;和&lt;code&gt;分库分表&lt;/code&gt;。先说说&lt;code&gt;库内分表&lt;/code&gt;。假设当我们的Orders表达到了5000万行记录的时候，非常影响数据库的读写效率，怎么办呢？我们可以考虑按照订单编号的order_id进行rang分区,就是把订单编号在1-1000万的放在order1表中，将编号在1000万-2000万的放在order2中，以此类推，每个表中存放1000万数据。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/23/16f33421d288f163?w=2056&amp;amp;h=1112&amp;amp;f=png&amp;amp;s=107823&quot; alt=&quot;库内分表&quot;/&gt;&lt;/p&gt;
&lt;p&gt;虽然我们可以通过&lt;code&gt;库内分表&lt;/code&gt;把单表的容量固定在1000万，但是这些表的数据仍然存放在一个库内，使用的是该主机的CPU、IO、内存。单库的连接数也有限制。并不能完全的降低系统的压力。此时，我们就要考虑另外一种技术叫&lt;code&gt;分库分表&lt;/code&gt;。分库分表在库内分表的基础上，将分的表挪动到不同的主机和数据库上。可以充分的使用其他主机的CPU、内存和IO资源。并且分库之后，单库的连接数限制也不在成为瓶颈。但是“成也萧何败也萧何”，如果你执行一个扫描不带分片键，则需要在每个库上查一遍。刚刚我们按照order_id分成了5个库，但是我们查询是name='AAA'的条件并且不带order_id字段时，它并不知道在哪个分片上查，则会创建5个连接，然后每个库都检索一遍。这种广播查询则会造成连接数增多。因为它需要在每个库上都创立连接。如果是高并发的系统，执行这种广播查询，系统的thread很快就会告警。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/12/23/16f334219786cd9d?w=2468&amp;amp;h=1732&amp;amp;f=png&amp;amp;s=165826&quot; alt=&quot;分库分表&quot;/&gt;&lt;/p&gt;
&lt;p&gt;总体来说：&lt;code&gt;水平拆分&lt;/code&gt;的优点有以下：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;水平扩展能无线扩展。不存在某个库某个表过大的情况。&lt;/li&gt;
&lt;li&gt;能够较好的应对高并发，同时可以将热点数据打散。&lt;/li&gt;
&lt;li&gt;应用侧的改动较小，不需要根据业务来拆分。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;水平拆分&lt;/code&gt;的缺点：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;路由是个问题，需要增加一层路由的计算，而且像前面说的一样，不带分片键查询会产生广播SQL。&lt;/li&gt;
&lt;li&gt;跨库join的性能比较差。&lt;/li&gt;
&lt;li&gt;需要处理分布式事务的一致性问题。&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;一起使用&quot;&gt;一起使用&lt;/h4&gt;
&lt;p&gt;当前我们的系统，&lt;code&gt;垂直拆分&lt;/code&gt;和&lt;code&gt;水平拆分&lt;/code&gt;都在使用，&lt;code&gt;垂直拆分&lt;/code&gt;主要是做业务上的分割，把业务的各个子系统都规划好，能解耦就解耦。而垂直拆分之后。我们再做水平分库分表。通过取模算法将大表数据拆到若干个库中。&lt;/p&gt;
&lt;h4 id=&quot;逻辑库和物理库&quot;&gt;逻辑库和物理库&lt;/h4&gt;
&lt;p&gt;介绍了上述的分库分表，我们有必要说一下几个概念，一个是&lt;code&gt;逻辑库&lt;/code&gt;和&lt;code&gt;物理库&lt;/code&gt;的概念。我们还是拿水平拆分中的&lt;code&gt;分库分表&lt;/code&gt;来说。我们在物理层面，将一个库的数据分割到了5个数据库中。这5个数据库就是&lt;code&gt;物理库&lt;/code&gt;，而它们对上层应用的展现则是一个库。这个对上层展现的库就叫&lt;code&gt;逻辑库&lt;/code&gt;。逻辑库对应用层是透明的。应用不需要了解底层的情况，直接使用就行了。&lt;/p&gt;
&lt;h4 id=&quot;逻辑表和物理表&quot;&gt;逻辑表和物理表&lt;/h4&gt;
&lt;p&gt;还是拿水平拆分中的&lt;code&gt;分库分表&lt;/code&gt;来说，orders表总共被分成了5份，分别在底层是orders_1~5。这底层的5个表就是物理表。但是对应用层面来说，只有orders表。这就是&lt;code&gt;逻辑表&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;总结：这一篇主要是讲述一些分库分表之后的概念。需要加深一些理解，因为我们的项目也才是刚刚开始拆分，所以有写的不对的地方还希望小伙伴们提出意见指正。&lt;/p&gt;
&lt;h4 id=&quot;参考文档&quot;&gt;参考文档：&lt;/h4&gt;
</description>
<pubDate>Mon, 23 Dec 2019 15:58:00 +0000</pubDate>
<dc:creator>BuddyYuan</dc:creator>
<og:description>为什么要分库分表？ 随着近些年信息化大跃进，各行各业无纸化办公产生了大量的数据，而越来越多的数据存入了数据库中。当使用 数据库的时候，单表超出了2000万数据量就会出现性能上的分水岭。并且物理服务器的</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/buddy-yuan/p/12089178.html</dc:identifier>
</item>
<item>
<title>浅谈接口（学习过程） - dawa大娃bigbaby</title>
<link>http://www.cnblogs.com/bigbaby/p/12089107.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/bigbaby/p/12089107.html</guid>
<description>&lt;h2 id=&quot;浅谈接口&quot;&gt;浅谈接口&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;2019年12月23日23:40:57 （记录我的学习过程）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;为什么我会接触这个&quot;&gt;1.为什么我会接触这个？&lt;/h4&gt;
&lt;p&gt;项目组组长推荐：我们先自行学习一下接口（HTTP接口）&lt;/p&gt;
&lt;h4 id=&quot;提到接口我的第一印象&quot;&gt;2.提到接口，我的第一印象&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;陌生&lt;/li&gt;
&lt;li&gt;熟悉又陌生&lt;/li&gt;
&lt;li&gt;需要开始接触，了解学习&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;自我描述接口是什么&quot;&gt;3.自我描述：接口是什么？&lt;/h4&gt;
&lt;p&gt;1.举个例子来说：前台和后台进行数据交互（前后端分离架构），前台开发前台的，后台开发后台的，但是前台开发的是使用的模拟数据，又前台定义好数据接口（json格式），将接口定义好，写出接口文档，交接给后台程序员，后台程序员处理数据之后将数据转换成接口描述的格式，来传递给前台使用。我之前用过的layUI前端框架，在做数据渲染的时候，自己定义一个json格式的文件就把数据模拟出来了。后台只需要通过springmvc返回值的时候返回定义好的json格式的数据就可以了，这就是我印象中的接口格式。&lt;/p&gt;
&lt;p&gt;2.A系统访问B系统，比如淘宝买东西，最后调用的是支付宝付款，这就是调用了支付宝的支付接口。博客什么的调用了天气的接口，能够直接快速使用，这些也都是接口。&lt;/p&gt;
&lt;p&gt;3.对于我们公司的系统来说，我们开发的是核心系统，核心业务流程，但是呢外围又有很多的子系统是和我们的核心系统进行业务关联的，如CMS系统，财务系统，等等财务系统的数据传输给核心系统的时候，也是需要定义好确定的接口来完成数据的传递。这些也是接口&lt;/p&gt;
&lt;p&gt;4.举例很容易，但是接口到底是什么呢？对于一个开发人员来说，对于接口这个概念，我们需要了解到什么程度？怎么去使用接口完成开发工作呢？&lt;/p&gt;
&lt;p&gt;5.etc....&lt;/p&gt;
&lt;h4 id=&quot;官方那么接口到底是什么&quot;&gt;官方：那么，接口到底是什么？&lt;/h4&gt;
&lt;p&gt;我们就需要查阅一些资料了&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;在查阅资料的过程中我整理了一个思维导图&quot;&gt;在查阅资料的过程中，我整理了一个思维导图&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464573/201912/1464573-20191223233707129-263236945.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;HTTP，TCP，JSON，这是我们学习HTTP接口的三发银弹&lt;/p&gt;
&lt;p&gt;经过我的了解：学习HTTP接口，就是在学HTTP协议，对于这个协议，相必大家都不陌生。张嘴闭嘴就是POST，Get请求，状态码：2--，3--，4--，5-- 我们都经常见也都背诵的很熟。有系统的查阅过文档吗？哈哈。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview
https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;http是什么&quot;&gt;HTTP是什么？&lt;/h4&gt;
&lt;p&gt;超文本传输协议？在哪里见过？浏览器访问网站的时候，域名前面默认的都是HTTP吧，那么HTTP是什么呢？&lt;/p&gt;
&lt;p&gt;Http协议是建立在TCP协议基础之上的，当浏览器需要从服务器获取网页数据的时候，会发出一次Http请求。Http会通过TCP建立起一个到服务器的连接通道，当本次请求需要的数据完毕后，Http会立即将TCP连接断开，这个过程是很短的。所以Http连接是一种短连接，是一种无状态的连接。&lt;br/&gt;HTTP协议的主要特点可概括如下：&lt;br/&gt;1.支持客户/服务器模式。&lt;br/&gt;2.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。&lt;br/&gt;3.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。&lt;br/&gt;4.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。&lt;br/&gt;5.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。&lt;/p&gt;
&lt;p&gt;这个HTTP不是我们今天关注的重点，这些基础知识还请自行补充。&lt;/p&gt;
&lt;h4 id=&quot;tcp是什么&quot;&gt;TCP是什么？&lt;/h4&gt;
&lt;p&gt;看到上面说HTTP是基于TCP协议基础之上的，那么TCP是什么呢？提到TCP，大家想到的还是三次握手？反正我是这样。。就知道三次握手，缺不知道为了什么握手了，惭愧惭愧。&lt;/p&gt;
&lt;p&gt;传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 [1] 定义。&lt;br/&gt;TCP旨在适应支持多网络应用的分层协议层次结构。 连接到不同但互连的计算机通信网络的主计算机中的成对进程之间依靠TCP提供可靠的通信服务。TCP假设它可以从较低级别的协议获得简单的，可能不可靠的数据报服务。 原则上，TCP应该能够在从硬线连接到分组交换或电路交换网络的各种通信系统之上操作。&lt;/p&gt;
&lt;p&gt;好吧，内容比较官方，引用自：百度百科，其他参考资料：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;https://en.wikipedia.org/wiki/TCP
https://developer.mozilla.org/en-US/search?q=TCP&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;json是什么&quot;&gt;JSON是什么？&lt;/h4&gt;
&lt;p&gt;JSON是JavaScript Object Notation的缩写，它是一种数据交换格式。&lt;/p&gt;
&lt;p&gt;在JSON出现之前，大家一直用XML来传递数据。因为XML是一种纯文本格式，所以它适合在网络上交换数据。XML本身不算复杂，但是，加上DTD、XSD、XPath、XSLT等一大堆复杂的规范以后，任何正常的软件开发人员碰到XML都会感觉头大了，最后大家发现，即使你努力钻研几个月，也未必搞得清楚XML的规范。终于，在2002年的一天，道格拉斯·克罗克福特（DouglasCrockford）同学为了拯救深陷水深火热同时又被某几个巨型软件企业长期愚弄的软件工程师，发明了JSON这种超轻量级的数据交换格式。道格拉斯同学长期担任雅虎的高级架构师，自然钟情于JavaScript。他设计的JSON实际上是JavaScript的一个子集。&lt;/p&gt;
&lt;p&gt;在JSON中，一共就这么几种数据类型：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;number：和JavaScript的number完全一致；&lt;/li&gt;
&lt;li&gt;boolean：就是JavaScript的true或false；&lt;/li&gt;
&lt;li&gt;string：就是JavaScript的string；&lt;/li&gt;
&lt;li&gt;null：就是JavaScript的null；&lt;/li&gt;
&lt;li&gt;array：就是JavaScript的Array表示方式——[]；&lt;/li&gt;
&lt;li&gt;object：就是JavaScript的{ ... }表示方式。&lt;/li&gt;
&lt;li&gt;以及上面的任意组合。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;并且，JSON还定死了字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号&quot;&quot;，Object的键也必须用双引号&quot;&quot;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
  &quot;name&quot;: &quot;小明&quot;,
  &quot;age&quot;: 14,
  &quot;gender&quot;: true,
  &quot;height&quot;: 1.65,
  &quot;grade&quot;: null,
  &quot;middle-school&quot;: &quot;\&quot;W3C\&quot; Middle School&quot;,
  &quot;skills&quot;: [
    &quot;JavaScript&quot;,
    &quot;Java&quot;,
    &quot;Python&quot;,
    &quot;Lisp&quot;
  ]
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;接口是什么呢&quot;&gt;接口是什么呢？&lt;/h4&gt;
&lt;p&gt;In computing, an interface is a shared boundary across which two or more separate components of a computer system exchange information. The exchange can be between software, computer hardware, peripheral devices, humans, and combinations of these.[1] Some computer hardware devices, such as a touchscreen, can both send and receive data through the interface, while others such as a mouse or microphone may only provide an interface to send data to a given system.[2]&lt;/p&gt;
&lt;p&gt;在计算中，接口是一个共享边界，计算机系统的两个或多个单独组件在该共享边界上交换信息。 可以在软件，计算机硬件，外围设备，人员以及这些的组合之间进行交换。[1] 某些计算机硬件设备（例如触摸屏）可以通过该接口发送和接收数据，而其他计算机硬件设备（例如鼠标或麦克风）可能仅提供将数据发送到给定系统的接口。[2]&lt;/p&gt;
&lt;p&gt;参考：wiki &lt;a href=&quot;https://en.wikipedia.org/wiki/Interface_(computing)&quot; class=&quot;uri&quot;&gt;https://en.wikipedia.org/wiki/Interface_(computing)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;我们这里着重介绍的是，HTTP接口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;http接口&quot;&gt;HTTP接口&lt;/h4&gt;
&lt;p&gt;还是没说什么是HTTP接口？&lt;/p&gt;
&lt;p&gt;不要管那些花里胡哨的，本质就是一个接口，作用就是基于http协议进行远程通信。&lt;/p&gt;
&lt;h4 id=&quot;接口和接口文档长什么样呢&quot;&gt;接口和接口文档长什么样呢？&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464573/201912/1464573-20191223233823160-2089302734.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464573/201912/1464573-20191223233831970-1879708450.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464573/201912/1464573-20191223233837269-1514196740.png&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1464573/201912/1464573-20191223233841977-1489491814.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://blog.csdn.net/qq_41961113/article/details/80347341&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/qq_41961113/article/details/80347341&lt;/a&gt;&lt;br/&gt;还可以参考阿里云啊，网易云啊，腾讯啊，微信啊等提供的官网API接口文档。&lt;/p&gt;
&lt;p&gt;写完这些，我还是比较蒙蔽的，还是只是其然，不知其所以然，为什么呢，因为啊，我还没有在实际开发中用到接口。所以，不去用，你永远想象不到他能干什么。所以说，在学习阶段，找几个实战案例来学习一下，会对这个东西的应用稍微明确一点。我便搜集了一下开发案例来供自己参考。&lt;/p&gt;
&lt;h4 id=&quot;http接口开发与调用案例&quot;&gt;http接口开发与调用案例&lt;/h4&gt;
&lt;p&gt;参考实战案例:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;http接口开发与调用案例&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/quwenzhe/article/details/53156030&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/quwenzhe/article/details/53156030&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http+json 格式的接口开发实践与思考&lt;br/&gt;&lt;a href=&quot;https://blog.csdn.net/xiongyouqiang/article/details/79248446&quot; class=&quot;uri&quot;&gt;https://blog.csdn.net/xiongyouqiang/article/details/79248446&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;短信接口说明书&lt;br/&gt;&lt;a href=&quot;http://www.inolink.com/connhttp.html&quot; class=&quot;uri&quot;&gt;http://www.inolink.com/connhttp.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;http开发过程中使用到的工具&quot;&gt;http开发过程中使用到的工具&lt;/h4&gt;
&lt;p&gt;当然这些工具，是从他们实战开发的实例中，get到的~&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;postman （这个我真的用过。哈哈）&lt;/li&gt;
&lt;li&gt;getman&lt;/li&gt;
&lt;li&gt;小幺鸡&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;我写这个，不代表我会了。我也会和我的同事，朋友们一起讨论这个知识点，相互学习，相互补充，共同把知识相辅相成的学到自己的脑袋里。&lt;/p&gt;
&lt;h3 id=&quot;总结一下&quot;&gt;总结一下：&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;HTTP协议&lt;/li&gt;
&lt;li&gt;TCP协议&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;不要管那些花里胡哨的，本质就是一个接口，作用就是基于http协议进行远程通信。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 23 Dec 2019 15:39:00 +0000</pubDate>
<dc:creator>dawa大娃bigbaby</dc:creator>
<og:description>浅谈接口 2019年12月23日23:40:57 （记录我的学习过程） 1.为什么我会接触这个？ 项目组组长推荐：我们先自行学习一下接口（HTTP接口） 2.提到接口，我的第一印象 1. 陌生 2.</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/bigbaby/p/12089107.html</dc:identifier>
</item>
<item>
<title>Docker 容器数据卷 - CN丶Moti</title>
<link>http://www.cnblogs.com/cnmoti/p/12088972.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cnmoti/p/12088972.html</guid>
<description>&lt;p&gt;Docker容器产生的数据，如果不通过docker commit生成新的镜像，使数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。&lt;/p&gt;
&lt;p&gt;为了能保存数据在docker中我们使用卷。目的就是为了让容器内的数据吃持久化.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据卷的介绍&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷&lt;/p&gt;
&lt;h4&gt;特点：&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;数据卷可在容器之间共享或重用数据&lt;/li&gt;
&lt;li&gt;卷中的更改可以直接生效&lt;/li&gt;
&lt;li&gt;数据卷中的更改不会包含在镜像的更新中&lt;/li&gt;
&lt;li&gt;数据卷的生命周期一直持续到没有容器使用它为止&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;容器内添加数据卷&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;方法一: 使用 -v 命令&lt;/h4&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;# 双向读写权限
docker run -it -v /宿主机目录:/容器内目录 镜像名称
# 宿主机可读写,容器只读
docker run -it -v /宿主机目录:/容器内目录:ro 镜像名称&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果 :&lt;/p&gt;
&lt;p&gt;先在宿主机创建&lt;code&gt;host_share&lt;/code&gt;目录&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-352&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-53.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;# 执行命令 docker run -it -v /宿主机目录:/容器内目录 镜像名称
docker run -it -v /host_share:/container_share centos&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;进入容器内部,发现container_share文件夹成功创建&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-353&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-54-1024x221.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;按Ctrl+P+Q暂时退出容器(容器不关闭)&lt;/p&gt;
&lt;h5&gt;检查数据卷是否挂载成功&lt;/h5&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;# 查看容器内部信息
docker inspect 容器ID&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-354&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-55-1024x229.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;img class=&quot;wp-image-356&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-57.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;测试数据是否共享&lt;/h5&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-355&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-56-1024x433.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;测试容器停止后,主机修改的数据是否同步&lt;/h5&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-357&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-58-1024x479.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;方法二: 使用DockerFile添加&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;出于可移植和分享的考虑，用-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现。&lt;/p&gt;
&lt;p&gt;由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。下面介绍使用 DockerFile 添加数据卷&lt;/p&gt;
&lt;h5&gt;宿主机根目录下新建mydocker并进入,新建一个mydockerfile文件,编辑&lt;/h5&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;FROM centos
VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]
CMD echo &quot;finished,--------success!&quot;
CMD /bin/bash&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]&lt;/code&gt;通过这种方法可以在容器中添加多个数据卷,对应的宿主机共享地址会默认设置&lt;/p&gt;
&lt;h5&gt;使用build命令将当前的 mydockerfile 生成镜像&lt;/h5&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;# docker build -f DockerFIle绝对路径 -t 命名空间/镜像名称 .
# 注意 . 不要忘了
docker build -f /mydocker/mydockerfile -t moti/centos .&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-358&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-59.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;运行容器并进入,发现两个数据卷目录已经成功创建&lt;/h5&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-359&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-60-1024x86.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h5&gt;Ctrl+P+Q暂时退出(不停止容器),使用docker inspect 容器ID查看数据卷的相关信息&lt;/h5&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-360&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-61-1024x427.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;红框勾选的就是在宿主机的对应路径&lt;/p&gt;
&lt;h5&gt;测试数据共享是否实现&lt;/h5&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-361&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-62-1024x302.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;数据卷容器&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器&lt;/p&gt;
&lt;h4&gt;容器之间传递数据共享&lt;/h4&gt;
&lt;p&gt;先创建一个容器c1,在dataVolumeContainer1添加共享数据c1.txt&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-362&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-63-1024x212.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建容器c2继承自c1,查看 dataVolumeContainer1 里面的文件,并在 dataVolumeContainer1 中添加c2.txt&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-363&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-64-1024x215.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;创建容器c3继承自c1,查看 dataVolumeContainer1 里面的文件,并在 dataVolumeContainer1 中添加c3.txt&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-364&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-65-1024x240.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;删除c1容器,查看c2和c3中的文件是否有变化(原来有c1.txt c2.txt c3.txt共三个文件)&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-365&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-66-1024x362.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以发现,c1删除,对c2,c3是不影响的,那么c2与c3会不会共享文件?&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-366&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-67.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可以看到,尽管c1删除了但是c2和c3仍然是数据共享的,那么删除c2,查看c3的数据有没有什么变化&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;wp-image-367&quot; src=&quot;http://xuewei.world:8000/wp-content/uploads/2019/12/image-68-1024x139.png&quot; alt=&quot;&quot; height=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;has-text-color has-background has-very-light-gray-color has-vivid-red-background-color&quot;&gt;结论:容器之间配置信息的传递,数据卷的生命周期会一直持续到没有容器使用它为止&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 14:58:00 +0000</pubDate>
<dc:creator>CN丶Moti</dc:creator>
<og:description>前提 Docker容器产生的数据，如果不通过docker commit生成新的镜像，使数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。 为了能保存数据在docker中我们使用卷。目</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/cnmoti/p/12088972.html</dc:identifier>
</item>
<item>
<title>微信支付之二维码支付(native) - 奋斗的阿北</title>
<link>http://www.cnblogs.com/xbei-HoJe/p/12088931.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/xbei-HoJe/p/12088931.html</guid>
<description>&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;em&gt;HoJe&lt;/em&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;男孩子你要加油阿&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;toc&quot; id=&quot;tocid_0&quot;&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/xbei-HoJe/p/12088931.html#h&quot;&gt;准备材料&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/xbei-HoJe/p/12088931.html#h-1&quot;&gt;微信支付需要的参数&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/xbei-HoJe/p/12088931.html#h-2&quot;&gt;统一下单&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/xbei-HoJe/p/12088931.html#h-3&quot;&gt;二维码&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/xbei-HoJe/p/12088931.html#h-4&quot;&gt;回调接口&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;toc_item&quot;&gt;&lt;span class=&quot;toc_left&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/xbei-HoJe/p/12088931.html#h-5&quot;&gt;用到的工具类&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;h&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 准备材料&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;首先肯定是要有微信的开发文档&lt;br/&gt;&lt;a href=&quot;https://pay.weixin.qq.com/wiki/doc/api/index.html&quot;&gt;开发文档地址&lt;/a&gt;&lt;br/&gt;再然后就是一些必的参数&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FhnAZXIidrhJJ4OahwkBq-SkcUhB&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;br/&gt;注意:回调地址异步接收微信支付结果通知的回调地址，通知url必须为外网可访问的url，不能携带参数。

&lt;p&gt;再然后就是微信的SDK&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FqD64CPofXrtYYz3E7udXLQmUric&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;h3 id=&quot;h-1&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 微信支付需要的参数&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;上面的开发文档你肯定看熟了吧,流程肯定会了吧,代码怎么写呢?先来看看需要哪些参数吧.&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FpX7D7JlbUlnIcCOXqGNnB7rfnVk&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/Fs5w0FubCpc1xPK5mk8RHp8_KEtI&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FsP4ksdRkb2tNR4c5U8_hfPuzXxT&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;p&gt;好了知道流程了知道需要哪些参数了那咱们动手吧!&lt;/p&gt;
&lt;h3 id=&quot;h-2&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 统一下单&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;首页你得有统一下单是url:https://api.mch.weixin.qq.com/pay/unifiedorder&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@Controller&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 2&lt;/span&gt;&lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/wxpay&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 3&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;WXpayController&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 4&lt;/span&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;@Autowired&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; PayOrderService payOrderService;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/nativePay&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Map&amp;lt;String, String&amp;gt; &lt;span class=&quot;hljs-title&quot;&gt;createQRCode&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response, String orderid)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;        PayOrderDO payOrderDO = &lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;.payOrderService.getOder(orderid);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;        Map&amp;lt;String, String&amp;gt; request_data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;            Map&amp;lt;String, String&amp;gt; data = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, String&amp;gt;();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;appid&quot;&lt;/span&gt;, WxConstants.APP_ID);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;mch_id&quot;&lt;/span&gt;,WxConstants.PARTNER);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;body&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;测试&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;out_trade_no&quot;&lt;/span&gt;,orderid);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;nonce_str&quot;&lt;/span&gt;, UuidUtil.get32UUID());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;            BigDecimal payMoney = payOrderDO.getPayMoney();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;            BigDecimal bigDecimal = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BigDecimal(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;            BigDecimal amount = payMoney.multiply(bigDecimal).setScale(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, BigDecimal.ROUND_DOWN);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;total_fee&quot;&lt;/span&gt;, String.valueOf(amount));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;spbill_create_ip&quot;&lt;/span&gt;, IPUtils.getIpAddr(request));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;trade_type&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;NATIVE&quot;&lt;/span&gt;);  &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;notify_url&quot;&lt;/span&gt;, WxConstants.NOTIFY_URL);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;product_id&quot;&lt;/span&gt;,orderid ); &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;            String sign = createSign(data, WxConstants.PARTNER_KEY, WxConstants.CHARSET);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;            data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;sign&quot;&lt;/span&gt;, sign);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;            String xml = WXPayUtil.generateSignedXml(data, WxConstants.PARTNER_KEY);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;request - XML：&quot;&lt;/span&gt; + xml);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;            String resultXML = HttpsClientUtil.doPost(WxConstants.BAUSE_URL, xml);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result - XML：&quot;&lt;/span&gt; + resultXML);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;                Map&amp;lt;String,String&amp;gt; result_map = xmlToMap(resultXML);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;                String return_msg = result_map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;return_msg&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;                String return_code = result_map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;return_code&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;                String result_code = result_map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result_code&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt; != result_map &amp;amp;&amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;.equals(return_code) &amp;amp;&amp;amp; &lt;span class=&quot;hljs-string&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;.equals(result_code)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;48&lt;/span&gt;                    request_data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;, result_map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;code_url&quot;&lt;/span&gt;));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;49&lt;/span&gt;                }&lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;50&lt;/span&gt;                request_data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;51&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;52&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;53&lt;/span&gt;        }&lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e){&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;54&lt;/span&gt;            request_data.put(&lt;span class=&quot;hljs-string&quot;&gt;&quot;url&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;55&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;56&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; request_data;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;57&lt;/span&gt;    }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;本人自己写的也可能不是很完美欢迎你们指出 送上更完美的demo 谢谢!!!&lt;/p&gt;
&lt;h3 id=&quot;h-3&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 二维码&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;QR码是一种矩阵码，或二维空间的条码，1994年由日本Denso-Wave公司发明。QR是英文Quick Response的缩写，即快速反应的意思，源自发明者希望QR码可让其内容快速被解码。QR码常见於日本，并为目前日本最流行的二维空间条码。QR码比普通条码可储存更多资料，亦无需像普通条码般在扫描时需直线对准扫描器。&lt;br/&gt;QR码呈正方形，只有黑白两色。在4个角落的其中3个，印有较小，像「回」字的的正方图案。这3个是供解码软体作定位用的图案，使用者无需对准，无论以任何角度扫描，资料仍可正确被读取。&lt;br/&gt;QR Code条码的特点&lt;br/&gt;1．高密度编码，信息容量大： 　　&lt;br/&gt;可容纳多达1850个大写字母或2710个数字或1108个字节，或500多个汉字，比普通条码信息容量约高几十倍。 　　&lt;br/&gt;2．编码范围广： 　　&lt;br/&gt;该条码可以把图片、声音、文字、签字、指纹等可以数字化的信息进行编码，用条码表示出来；可以表示多种语言文字；可表示图像数据。 　　&lt;br/&gt;3．容错能力强，具有纠错功能： 　　&lt;br/&gt;这使得二维条码因穿孔、污损等引起局部损坏时，照样可以正确得到识读，损毁面积达50%仍可恢复信息。 　　&lt;br/&gt;4．译码可靠性高： 　　&lt;br/&gt;它比普通条码译码错误率百万分之二要低得多，误码率不超过千万分之一。 　　&lt;br/&gt;5．可引入加密措施： 　　&lt;br/&gt;保密性、防伪性好。 　　&lt;br/&gt;6．成本低，易制作，持久耐用。&lt;br/&gt;本人百度粘贴的阿!!!&lt;br/&gt;废话不多说了微信二维码支付关键不就是个二维码嘛!&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FnfwGwzWs83T19rnMYxZmRNPhg_6&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;br/&gt;当统一下单成功了返回的结果&quot;code_url&quot;就是我们要的二维码的链接&lt;br/&gt;有很多种生成二位码的方法我知道的就两种&lt;br/&gt;1丶第一种是前端的js插件QRious&lt;br/&gt;&lt;a href=&quot;https://github.com/neocotic/qrious&quot;&gt;下载链接没有找到更好的抱歉了各位&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.bootcdn.cn/qrious/&quot;&gt;下这是一个在线的地址&lt;/a&gt;&lt;br/&gt;&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FhCiYGVmsFXHGvhN1gs_wLV6atGX&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;br/&gt;使用该二维码生成插件需要在页面中引入qrious.js文件。&lt;br/&gt;&lt;code&gt;&amp;lt;script src=&quot;https://cdn.bootcss.com/qrious/4.0.2/qrious.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;br/&gt;使用一个img元素来作为二维码图片的容器。&lt;br/&gt;&lt;code&gt;&amp;lt;img id=&quot;qr&quot;&amp;gt;&amp;lt;/img&amp;gt;&lt;/code&gt;&lt;br/&gt;可以通过QRious()方法来实例化一个对象实例。

&lt;pre&gt;
&lt;code class=&quot;javascript language-javascript hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;() &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; qr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; QRious({&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;element&lt;/span&gt;: &lt;span class=&quot;hljs-built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;hljs-string&quot;&gt;'qr'&lt;/span&gt;),&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;    &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;hljs-string&quot;&gt;'http://www.baidu.com/'&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;  })&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;})()&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;效果如图&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FpX4xJBvvfrxcPJ9aZKtSZqmzsI4&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;br/&gt;好了前端代码怎么写看你怎么做了&lt;br/&gt;2丶Zxing是Google提供的关于条码（一维码、二维码）的解析工具，提供了二维码的生成与解析的方法，现在我简单介绍一下使用Java利用Zxing生成与解析二维码&lt;br/&gt;这种方法得写一个工具类百度网上有的我是用的QRious就不多说了

&lt;h3 id=&quot;h-4&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 回调接口&lt;/span&gt;&lt;/h3&gt;
&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/Fog7uYBKqipi1PzMYpNPAMm-VIEF&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;&lt;br/&gt;我踩的坑阿!&lt;br/&gt;注意:&lt;br/&gt;1丶回调url必须得填写正确要不然微信访问不到会一直调用,就是支付成功后微信异步通知我们的服务器地址加项目加路径.&lt;br/&gt;2丶一定要验证签名,要不然微信不知道是那个商户的会觉得不合法.&lt;br/&gt;3丶给微信的数据一定是xml格式的,要不然微信解析不到就会一直调用(这就是微信比支付宝坑的地方)&lt;br/&gt;话不多说上代码

&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 5&lt;/span&gt;    &lt;span class=&quot;hljs-meta&quot;&gt;@RequestMapping&lt;/span&gt;(value = &lt;span class=&quot;hljs-string&quot;&gt;&quot;/notify&quot;&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;wxPayCallBack&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request, HttpServletResponse response)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;            InputStream inStream = request.getInputStream();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;            ByteArrayOutputStream outSteam = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[] buffer = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;byte&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;1024&lt;/span&gt;];&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; ((len = inStream.read(buffer)) != -&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;                outSteam.write(buffer, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, len);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;14&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;            outSteam.close();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;            inStream.close();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;            String result = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String(outSteam.toByteArray(), WxConstants.CHARSET);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;            Map&amp;lt;String, String&amp;gt; map = xmlToMap(result);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;            &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (WXPayUtil.isSignatureValid(map, WxConstants.PARTNER_KEY)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;                 logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;微信支付成功回调&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;                String resXml = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-string&quot;&gt;&quot;SUCCESS&quot;&lt;/span&gt;.equals((String) map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;result_code&quot;&lt;/span&gt;))) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;                    String orderNo = (String) map.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;out_trade_no&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;                    logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;微信订单号{}付款成功&quot;&lt;/span&gt;,orderNo);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;                    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;                    resXml = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;xml&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;return_code&amp;gt;&amp;lt;![CDATA[SUCCESS]]&amp;gt;&amp;lt;/return_code&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;return_msg&amp;gt;&amp;lt;![CDATA[OK]]&amp;gt;&amp;lt;/return_msg&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/xml&amp;gt; &quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;                } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;                    logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;支付失败,错误信息：{}&quot;&lt;/span&gt;,packageParams.get(&lt;span class=&quot;hljs-string&quot;&gt;&quot;err_code&quot;&lt;/span&gt;));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;                    resXml = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;xml&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;return_code&amp;gt;&amp;lt;![CDATA[FAIL]]&amp;gt;&amp;lt;/return_code&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;return_msg&amp;gt;&amp;lt;![CDATA[报文为空]]&amp;gt;&amp;lt;/return_msg&amp;gt;&quot;&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;lt;/xml&amp;gt; &quot;&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;                &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;                BufferedOutputStream out = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BufferedOutputStream(response.getOutputStream());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;                out.write(resXml.getBytes());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;                out.flush();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;                out.close();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;            } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;                System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;通知签名验证失败&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;48&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;49&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;50&lt;/span&gt;           e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;51&lt;/span&gt;           logger.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;通知签名验证失败&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;52&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;53&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;54&lt;/span&gt;    }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;h-5&quot;&gt;&lt;span&gt;&lt;span&gt;.&lt;/span&gt; 用到的工具类&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;1丶32位字符串&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;UuidUtil&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;2&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;3&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;get32UUID&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;4&lt;/span&gt;        String uuid = UUID.randomUUID().toString().trim().replaceAll(&lt;span class=&quot;hljs-string&quot;&gt;&quot;-&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;5&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; uuid;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;6&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;7&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;2丶获取用户的终端ip&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 6&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;IPUtils&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 7&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Logger logger = LoggerFactory.getLogger(IPUtils.class);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 8&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;15&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;getIpAddr&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(HttpServletRequest request)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;16&lt;/span&gt;        String ip = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;17&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;18&lt;/span&gt;            ip = request.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;x-forwarded-for&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;19&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isEmpty(ip) || &lt;span class=&quot;hljs-string&quot;&gt;&quot;unknown&quot;&lt;/span&gt;.equalsIgnoreCase(ip)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;20&lt;/span&gt;                ip = request.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Proxy-Client-IP&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;21&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isEmpty(ip) || ip.length() == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; || &lt;span class=&quot;hljs-string&quot;&gt;&quot;unknown&quot;&lt;/span&gt;.equalsIgnoreCase(ip)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;                ip = request.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;WL-Proxy-Client-IP&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isEmpty(ip) || &lt;span class=&quot;hljs-string&quot;&gt;&quot;unknown&quot;&lt;/span&gt;.equalsIgnoreCase(ip)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;                ip = request.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_CLIENT_IP&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isEmpty(ip) || &lt;span class=&quot;hljs-string&quot;&gt;&quot;unknown&quot;&lt;/span&gt;.equalsIgnoreCase(ip)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;                ip = request.getHeader(&lt;span class=&quot;hljs-string&quot;&gt;&quot;HTTP_X_FORWARDED_FOR&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (StringUtils.isEmpty(ip) || &lt;span class=&quot;hljs-string&quot;&gt;&quot;unknown&quot;&lt;/span&gt;.equalsIgnoreCase(ip)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;                ip = request.getRemoteAddr();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;            logger.error(&lt;span class=&quot;hljs-string&quot;&gt;&quot;IPUtils ERROR &quot;&lt;/span&gt;, e);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(StringUtils.isEmpty(ip) &amp;amp;&amp;amp; ip.length() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;15&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt;(ip.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;                ip = ip.substring(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, ip.indexOf(&lt;span class=&quot;hljs-string&quot;&gt;&quot;,&quot;&lt;/span&gt;));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; ip;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;48&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3丶生成签名&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 9&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;createSign&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, String&amp;gt; data, String key, String charset)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;10&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; createSign(data, key, WXPayConstants.SignType.MD5, charset);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;11&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;13&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;22&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;createSign&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;String, String&amp;gt; data, String key, WXPayConstants.SignType signType, String charset)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;23&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;24&lt;/span&gt;        Set&amp;lt;String&amp;gt; keySet = data.keySet();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;25&lt;/span&gt;        String[] keyArray = keySet.toArray(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String[keySet.size()]);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;26&lt;/span&gt;        Arrays.sort(keyArray);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;27&lt;/span&gt;        StringBuilder sb = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;28&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String k : keyArray) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;29&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (k.equals(WXPayConstants.FIELD_SIGN)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;30&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;continue&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;31&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;32&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (data.get(k).trim().length() &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;){&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;33&lt;/span&gt;                sb.append(k).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;=&quot;&lt;/span&gt;).append(data.get(k).trim()).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;34&lt;/span&gt;            } &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;35&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;36&lt;/span&gt;        sb.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;key=&quot;&lt;/span&gt;).append(key);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;37&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;38&lt;/span&gt;        String str = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; String(sb.toString().getBytes(charset));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;39&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (WXPayConstants.SignType.MD5.equals(signType)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;40&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; MD5(sb.toString()).toUpperCase();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;41&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (WXPayConstants.SignType.HMACSHA256.equals(signType)) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;42&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; HMACSHA256(sb.toString(), key);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;43&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;44&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; Exception(String.format(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Invalid sign_type: %s&quot;&lt;/span&gt;, signType));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;45&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;46&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;47&lt;/span&gt;}&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;4丶http请求的工具 实际没有用到很多方法有的是退款需要用到的&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;java language-java hljs&quot;&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  1&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;HttpsClientUtil&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;  9&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; PoolingHttpClientConnectionManager connMgr;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 10&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; RequestConfig requestConfig;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 11&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; MAX_TIMEOUT = &lt;span class=&quot;hljs-number&quot;&gt;7000&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 12&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 13&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 14&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 15&lt;/span&gt;        connMgr = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; PoolingHttpClientConnectionManager();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 16&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 17&lt;/span&gt;        connMgr.setMaxTotal(&lt;span class=&quot;hljs-number&quot;&gt;100&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 18&lt;/span&gt;        connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 19&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 20&lt;/span&gt;        RequestConfig.Builder configBuilder = RequestConfig.custom();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 21&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 22&lt;/span&gt;        configBuilder.setConnectTimeout(MAX_TIMEOUT);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 23&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 24&lt;/span&gt;        configBuilder.setSocketTimeout(MAX_TIMEOUT);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 25&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 26&lt;/span&gt;        configBuilder.setConnectionRequestTimeout(MAX_TIMEOUT);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 27&lt;/span&gt;        &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 28&lt;/span&gt;        configBuilder.setStaleConnectionCheckEnabled(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 29&lt;/span&gt;        requestConfig = configBuilder.build();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 30&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 31&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 32&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 38&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String url)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 39&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; doGet(url, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt;());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 40&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 41&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 42&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 49&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String url, Map&amp;lt;String, Object&amp;gt; params)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 50&lt;/span&gt;        String apiUrl = url;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 51&lt;/span&gt;        StringBuffer param = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringBuffer();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 52&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 53&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (String key : params.keySet()) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 54&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 55&lt;/span&gt;                param.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;?&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 56&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 57&lt;/span&gt;                param.append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 58&lt;/span&gt;            param.append(key).append(&lt;span class=&quot;hljs-string&quot;&gt;&quot;=&quot;&lt;/span&gt;).append(params.get(key));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 59&lt;/span&gt;            i++;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 60&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 61&lt;/span&gt;        apiUrl += param;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 62&lt;/span&gt;        String result = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 63&lt;/span&gt;        HttpClient httpclient = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; DefaultHttpClient();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 64&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 65&lt;/span&gt;            HttpGet httpPost = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpGet(apiUrl);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 66&lt;/span&gt;            HttpResponse response = httpclient.execute(httpPost);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 67&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; statusCode = response.getStatusLine().getStatusCode();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 68&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 69&lt;/span&gt;            System.out.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;执行状态码 : &quot;&lt;/span&gt; + statusCode);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 70&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 71&lt;/span&gt;            HttpEntity entity = response.getEntity();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 72&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (entity != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 73&lt;/span&gt;                InputStream instream = entity.getContent();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 74&lt;/span&gt;                result = IOUtils.toString(instream);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 75&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 76&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 77&lt;/span&gt;            e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 78&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 79&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; result;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 80&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 81&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 82&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 88&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String apiUrl)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 89&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; doPost(apiUrl, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;String, Object&amp;gt;());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 90&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 91&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 92&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt; 99&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String apiUrl, Map&amp;lt;String, Object&amp;gt; params)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;100&lt;/span&gt;        CloseableHttpClient httpClient = HttpClients.createDefault();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;101&lt;/span&gt;        String httpStr = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;102&lt;/span&gt;        HttpPost httpPost = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpPost(apiUrl);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;103&lt;/span&gt;        CloseableHttpResponse response = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;104&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;105&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;106&lt;/span&gt;            httpPost.setConfig(requestConfig);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;107&lt;/span&gt;            List&amp;lt;NameValuePair&amp;gt; pairList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(params.size());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;108&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Object&amp;gt; entry : params.entrySet()) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;109&lt;/span&gt;                NameValuePair pair = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BasicNameValuePair(entry.getKey(), entry&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;110&lt;/span&gt;                        .getValue().toString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;111&lt;/span&gt;                pairList.add(pair);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;112&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;113&lt;/span&gt;            httpPost.setEntity(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UrlEncodedFormEntity(pairList, Charset.forName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;)));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;114&lt;/span&gt;            response = httpClient.execute(httpPost);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;115&lt;/span&gt;            System.out.println(response.toString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;116&lt;/span&gt;            HttpEntity entity = response.getEntity();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;117&lt;/span&gt;            httpStr = EntityUtils.toString(entity, &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;118&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;119&lt;/span&gt;            e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;120&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;121&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;122&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;123&lt;/span&gt;                    EntityUtils.consume(response.getEntity());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;124&lt;/span&gt;                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;125&lt;/span&gt;                    e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;126&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;127&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;128&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;129&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; httpStr;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;130&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;131&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;132&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;139&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;doPost&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String apiUrl, Object json)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;140&lt;/span&gt;        CloseableHttpClient httpClient = HttpClients.createDefault();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;141&lt;/span&gt;        String httpStr = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;142&lt;/span&gt;        HttpPost httpPost = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpPost(apiUrl);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;143&lt;/span&gt;        CloseableHttpResponse response = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;144&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;145&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;146&lt;/span&gt;            httpPost.setConfig(requestConfig);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;147&lt;/span&gt;            StringEntity stringEntity = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringEntity(json.toString(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;148&lt;/span&gt;            stringEntity.setContentEncoding(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;149&lt;/span&gt;            stringEntity.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;150&lt;/span&gt;            httpPost.setEntity(stringEntity);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;151&lt;/span&gt;            response = httpClient.execute(httpPost);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;152&lt;/span&gt;            HttpEntity entity = response.getEntity();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;153&lt;/span&gt;            System.out.println(response.getStatusLine().getStatusCode());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;154&lt;/span&gt;            httpStr = EntityUtils.toString(entity, &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;155&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;156&lt;/span&gt;            e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;157&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;158&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;159&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;160&lt;/span&gt;                    EntityUtils.consume(response.getEntity());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;161&lt;/span&gt;                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;162&lt;/span&gt;                    e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;163&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;164&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;165&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;166&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; httpStr;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;167&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;168&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;169&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;176&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;doPostSSL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String apiUrl, Map&amp;lt;String, Object&amp;gt; params)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;177&lt;/span&gt;        CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(createSSLConnSocketFactory()).setConnectionManager(connMgr).setDefaultRequestConfig(requestConfig).build();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;178&lt;/span&gt;        HttpPost httpPost = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpPost(apiUrl);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;179&lt;/span&gt;        CloseableHttpResponse response = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;180&lt;/span&gt;        String httpStr = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;181&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;182&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;183&lt;/span&gt;            httpPost.setConfig(requestConfig);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;184&lt;/span&gt;            List&amp;lt;NameValuePair&amp;gt; pairList = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;NameValuePair&amp;gt;(params.size());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;185&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;String, Object&amp;gt; entry : params.entrySet()) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;186&lt;/span&gt;                NameValuePair pair = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; BasicNameValuePair(entry.getKey(), entry&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;187&lt;/span&gt;                        .getValue().toString());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;188&lt;/span&gt;                pairList.add(pair);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;189&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;190&lt;/span&gt;            httpPost.setEntity(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; UrlEncodedFormEntity(pairList, Charset.forName(&lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;)));&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;191&lt;/span&gt;            response = httpClient.execute(httpPost);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;192&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; statusCode = response.getStatusLine().getStatusCode();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;193&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (statusCode != HttpStatus.SC_OK) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;194&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;195&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;196&lt;/span&gt;            HttpEntity entity = response.getEntity();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;197&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (entity == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;198&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;199&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;200&lt;/span&gt;            httpStr = EntityUtils.toString(entity, &lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;201&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;202&lt;/span&gt;            e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;203&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;204&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;205&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;206&lt;/span&gt;                    EntityUtils.consume(response.getEntity());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;207&lt;/span&gt;                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;208&lt;/span&gt;                    e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;209&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;210&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;211&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;212&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; httpStr;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;213&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;214&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;215&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;222&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;hljs-title&quot;&gt;doPostSSL&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String apiUrl, Object json)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;223&lt;/span&gt;        CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(createSSLConnSocketFactory()).setConnectionManager(connMgr).setDefaultRequestConfig(requestConfig).build();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;224&lt;/span&gt;        HttpPost httpPost = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; HttpPost(apiUrl);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;225&lt;/span&gt;        CloseableHttpResponse response = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;226&lt;/span&gt;        String httpStr = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;227&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;228&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;229&lt;/span&gt;            httpPost.setConfig(requestConfig);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;230&lt;/span&gt;            StringEntity stringEntity = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; StringEntity(json.toString(), &lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;231&lt;/span&gt;            stringEntity.setContentEncoding(&lt;span class=&quot;hljs-string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;232&lt;/span&gt;            stringEntity.setContentType(&lt;span class=&quot;hljs-string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;233&lt;/span&gt;            httpPost.setEntity(stringEntity);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;234&lt;/span&gt;            response = httpClient.execute(httpPost);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;235&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; statusCode = response.getStatusLine().getStatusCode();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;236&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (statusCode != HttpStatus.SC_OK) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;237&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;238&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;239&lt;/span&gt;            HttpEntity entity = response.getEntity();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;240&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (entity == &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;241&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;242&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;243&lt;/span&gt;            httpStr = EntityUtils.toString(entity, &lt;span class=&quot;hljs-string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;244&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;245&lt;/span&gt;            e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;246&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;247&lt;/span&gt;            &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response != &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;248&lt;/span&gt;                &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;249&lt;/span&gt;                    EntityUtils.consume(response.getEntity());&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;250&lt;/span&gt;                } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;251&lt;/span&gt;                    e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;252&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;253&lt;/span&gt;            }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;254&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;255&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; httpStr;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;256&lt;/span&gt;    }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;257&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;258&lt;/span&gt;    &lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;263&lt;/span&gt;    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; SSLConnectionSocketFactory &lt;span class=&quot;hljs-title&quot;&gt;createSSLConnSocketFactory&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;264&lt;/span&gt;        SSLConnectionSocketFactory sslsf = &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;265&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;266&lt;/span&gt;            SSLContext sslContext = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SSLContextBuilder().loadTrustMaterial(&lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; TrustStrategy() {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;267&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;268&lt;/span&gt;                &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;isTrusted&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(X509Certificate[] chain, String authType)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; CertificateException &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;269&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;270&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;271&lt;/span&gt;            }).build();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;272&lt;/span&gt;            sslsf = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SSLConnectionSocketFactory(sslContext, &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; X509HostnameVerifier() {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;273&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;274&lt;/span&gt;                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;275&lt;/span&gt;                &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String arg0, SSLSession arg1)&lt;/span&gt; &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;276&lt;/span&gt;                    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;277&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;278&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;279&lt;/span&gt;                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;280&lt;/span&gt;                &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String host, SSLSocket ssl)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;281&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;282&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;283&lt;/span&gt;                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;284&lt;/span&gt;                &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String host, X509Certificate cert)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; SSLException &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;285&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;286&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;287&lt;/span&gt;                &lt;span class=&quot;hljs-meta&quot;&gt;@Override&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;288&lt;/span&gt;                &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String host, String[] cns, String[] subjectAlts)&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;throws&lt;/span&gt; SSLException &lt;/span&gt;{&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;289&lt;/span&gt;                }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;290&lt;/span&gt;            });&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;291&lt;/span&gt;        } &lt;span class=&quot;hljs-keyword&quot;&gt;catch&lt;/span&gt; (GeneralSecurityException e) {&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;292&lt;/span&gt;            e.printStackTrace();&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;293&lt;/span&gt;        }&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;294&lt;/span&gt;        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sslsf;&lt;br/&gt;&lt;span class=&quot;linenum hljs-number&quot;&gt;295&lt;/span&gt;    }&lt;br/&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;我这个人比较懒还有查询,退款,jsapi支付,H5支付慢慢更新总结.&lt;br/&gt;今天就到这里了,拜拜&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://q2p8xcg7i.bkt.clouddn.com/FrEKPNBSX6kcCCPr2Y1ZFMc9_y89&quot; alt=&quot;&quot; title=&quot;&quot;/&gt;</description>
<pubDate>Mon, 23 Dec 2019 14:50:00 +0000</pubDate>
<dc:creator>奋斗的阿北</dc:creator>
<og:description>HoJe男孩子你要加油阿 准备材料微信支付需要的参数统一下单二维码回调接口用到的工具类 . 准备材料 首先肯定是要有微信的开发文档开发文档地址再然后就是一些必的参数注意:回调地址异步接收微信支付结果通</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/xbei-HoJe/p/12088931.html</dc:identifier>
</item>
<item>
<title>JVM内存结构划分 - boardMan</title>
<link>http://www.cnblogs.com/CodeMLB/p/12088837.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CodeMLB/p/12088837.html</guid>
<description>&lt;h2 id=&quot;数据区域划分&quot;&gt;数据区域划分&lt;/h2&gt;
&lt;p&gt;运行时内存区域划分：程序计数器、虚拟机栈、本地方法栈、堆、方法区&lt;/p&gt;
&lt;h3 id=&quot;程序计数器&quot;&gt;程序计数器&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;线程私有&lt;/li&gt;
&lt;li&gt;通过寄存器实现&lt;/li&gt;
&lt;li&gt;不会存在运行溢出&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;当前线程所执行的行号指示器,记住下一条JVM指令的执行地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;虚拟机栈&quot;&gt;虚拟机栈&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;垃圾回收不涉及栈内存&lt;/li&gt;
&lt;li&gt;栈内存是线程私有的,可以理解为线程运行需要的内存空间&lt;/li&gt;
&lt;li&gt;栈由栈帧组成，每个栈帧代表一个方法执行时需要的内存(参数,局部变量,返回地址)&lt;/li&gt;
&lt;li&gt;每个线程只能有一个活动栈帧,对应着当前正在执行的那个方法&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;栈内存分配过大只能支撑一定的递归调用,并不会影响运行速度,还可能减少线程数量(因为物理内存是一定的)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;本地方法栈&quot;&gt;本地方法栈&lt;/h3&gt;
&lt;p&gt;为运行本地方法时分配的内存(HotSpot把虚拟机栈和本地方法栈合二为一了)&lt;/p&gt;
&lt;h3 id=&quot;堆&quot;&gt;堆&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;有垃圾回收机制&lt;/li&gt;
&lt;li&gt;线程共享,需要考虑线程安全问题&lt;/li&gt;
&lt;li&gt;存储的都是对象的实例(通过new关键字创建的对象)&lt;/li&gt;
&lt;li&gt;从内存分配的角度来说:堆中可以划分出多个线程私有的分配缓冲区(TLAB),以提升对象分配时的效率&lt;/li&gt;
&lt;li&gt;Java堆可以处于物理上不连续的内存空间,但在逻辑上应该视为连续的(但是对于比如数组这种大对象,可能会要求连续的内存空间)&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;方法区&quot;&gt;方法区&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;线程共享区&lt;/li&gt;
&lt;li&gt;存储已被虚拟机加载的类型信息,常量,静态变量,即时编译器编译后的代码缓存&lt;/li&gt;
&lt;li&gt;在虚拟机启动时被创建,逻辑上属于堆的一部分(不同JVM实现的方式不同)
&lt;ul&gt;&lt;li&gt;JDK1.6使用永久代(PerGen)作为方法区的实现&lt;/li&gt;
&lt;li&gt;JDK1.8使用元空间(Metaspace)对方法区进行实现(包含Class ClassLoader 常量池三个部分,放在直接内存中)StringTable放在堆中(有助于垃圾回收管理)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;使用场景:如Spring Mybatis使用的动态加载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;运行时常量池&quot;&gt;运行时常量池&lt;/h4&gt;
&lt;p&gt;运行时常量池是方法区的一部分&lt;br/&gt;二进制字节码内容:类基本信息\常量池表\类方法定义,包含了虚拟机指令&lt;br/&gt;其中,常量池表中存放编译期间生成的各种&lt;strong&gt;字面量&lt;/strong&gt;(比如各种基本数据类型)与&lt;strong&gt;符号引用&lt;/strong&gt;(比如,类名\方法名\参数类型),这部分内容将在类加载后存放到方法区的运行时常量池中,并把符号地址变为真实地址&lt;/p&gt;
&lt;h4 id=&quot;stringtable&quot;&gt;StringTable&lt;/h4&gt;
&lt;p&gt;类似于hashTable结构,不能自动扩容&lt;br/&gt;常量池中的字符串只是符号,第一次使用时才变为对象&lt;br/&gt;利用串池机制,避免重复创建字符对象&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;案例&lt;br/&gt;字符串拼接的原理是编译期优化&lt;br/&gt;字符串拼接原理是StringBuilder(JDK1.8)&lt;br/&gt;使用intern()方法,主动将串池中还没有的字符串对象放入串池&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;// StringTable [ &quot;a&quot;, &quot;b&quot; ,&quot;ab&quot; ]  hashtable 结构，不能扩容
public class Demo1_22 {
    // 常量池中的信息，都会被加载到运行时常量池中， 这时 a b ab 都是常量池中的符号，还没有变为 java 字符串对象
    // ldc #2 会把 a 符号变为 &quot;a&quot; 字符串对象
    // ldc #3 会把 b 符号变为 &quot;b&quot; 字符串对象
    // ldc #4 会把 ab 符号变为 &quot;ab&quot; 字符串对象

    public static void main(String[] args) {
        String s1 = &quot;a&quot;; // 懒惰的
        String s2 = &quot;b&quot;;
        String s3 = &quot;ab&quot;;
        String s4 = s1 + s2; // new StringBuilder().append(&quot;a&quot;).append(&quot;b&quot;).toString()  new String(&quot;ab&quot;)
        String s5 = &quot;a&quot; + &quot;b&quot;;  // javac 在编译期间的优化，结果已经在编译期确定为ab

        System.out.println(s3 == s5);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;JDK1.7以后,利用intern()方法,会将字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池， 会把串池中的对象返回;而JDK1.6调用intern()方法,是将对象拷贝一份到串池中,指向堆中的对象本身引用并不不改变&lt;/p&gt;
&lt;pre class=&quot;java&quot;&gt;
&lt;code&gt;
public class Demo1_23 {

    //  [&quot;ab&quot;, &quot;a&quot;, &quot;b&quot;]
    public static void main(String[] args) {
        demo1();
        demo2();
    }

    static void demo1() {
        // 串池中事前没有&quot;ab&quot;,intern()之后,s返回的是串池中的对象
        String s = new String(&quot;a&quot;) + new String(&quot;b&quot;);

        String s1 = s.intern();

        System.out.println(s == &quot;ab&quot;);  // true
        System.out.println(s1 == &quot;ab&quot;);     //true
    }

    static void demo2() {
        // 串池中事前已有&quot;ab&quot;,s返回的仍是堆中的对象
        String x = &quot;ab&quot;;
        String s = new String(&quot;a&quot;) + new String(&quot;b&quot;);

        // 堆  new String(&quot;a&quot;)   new String(&quot;b&quot;) new String(&quot;ab&quot;)
        String s2 = s.intern(); // 将这个字符串对象尝试放入串池，如果有则并不会放入，如果没有则放入串池， 会把串池中的对象返回

        System.out.println( s2 == x);   // true
        System.out.println( s == x );   //false
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;位置&lt;br/&gt;JDK1.6时,StringTable放在元空间内,属于永久代的位置,但是StringTable占用内存容易触发full gc耗时较久;JDK1.7以后将StringTable放在堆内存中,随着内存占用增大首先触发minor gc,耗时较短.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;直接内存&quot;&gt;直接内存&lt;/h3&gt;
&lt;p&gt;使用Native函数直接分配堆外内存,然后通过Java堆里的DirectByteBuffer对象作为引用对这块内存的引用进行操作.&lt;br/&gt;原理说明:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;使用Unsafe对象完成直接内存的分配和回收,回收时需要主动调用freeMemory方法&lt;br/&gt;ByteBuffer的实现类内部使用了Cleaner(虚引用)来监测ByteBuffer(BB)对象,一旦BB对象被垃圾回收,会有ReferenceHandler线程通过Cleaner方法调用freeMemory来释放内存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建新对象说明&quot;&gt;创建新对象说明&lt;/h2&gt;
&lt;p&gt;HotSpot虚拟机在Java堆中对象分配、布局和访问的过程&lt;/p&gt;
&lt;h3 id=&quot;对象的创建&quot;&gt;对象的创建&lt;/h3&gt;
&lt;ol readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;new字节码指令&lt;br/&gt;虚拟机遇到new字节码指令时，首先检查能否在常量池中定位到一个类的符号引用，并检查该符号引用的来是否已被加载、解析和初始化。如果没有，则执行相应的类加载过程。&lt;br/&gt;类加载检查后，虚拟机为新生对象分配内存&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;内存分配&lt;br/&gt;对象所需的内存大小在类加载过程中可以确定，在Java虚拟机中为对象划分内存时有两种方式：&lt;strong&gt;指针碰撞&lt;/strong&gt;、&lt;strong&gt;空闲列表&lt;/strong&gt;&lt;br/&gt;&lt;strong&gt;指针碰撞&lt;/strong&gt;： 利用一个&lt;strong&gt;指针&lt;/strong&gt;作为&lt;strong&gt;已用内存&lt;/strong&gt;和&lt;strong&gt;未用内存&lt;/strong&gt;的分界点的&lt;strong&gt;指示器&lt;/strong&gt;，内存分配就仅仅是指针的移动。优点在于不会造成内存碎片化，但是速度较慢&lt;br/&gt;&lt;strong&gt;空闲列表&lt;/strong&gt;：虚拟机维护一个&lt;strong&gt;内存使用记录表&lt;/strong&gt;，使用时，从空闲的内存区域直接划分一块足够大的空间给对象实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;内存分配的线程安全问题&lt;br/&gt;划分可用空间后仍要考虑并发情况下对内存的使用，有两种方式解决内存冲突的问题：&lt;strong&gt;CAS&lt;/strong&gt;配上失败重试、&lt;strong&gt;TLAB&lt;/strong&gt;本地线程分配缓冲&lt;br/&gt;&lt;strong&gt;TLAB&lt;/strong&gt;：把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配了一小块内存空间&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;对象的内存布局&quot;&gt;对象的内存布局&lt;/h3&gt;
&lt;p&gt;对象在堆内存中的布局可以划分为三个部分：&lt;strong&gt;对象头&lt;/strong&gt;、&lt;strong&gt;实例数据&lt;/strong&gt;、&lt;strong&gt;对齐填充&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;对象头&quot;&gt;对象头&lt;/h4&gt;
&lt;p&gt;对象头中包含两类信息：&lt;strong&gt;Mark Word&lt;/strong&gt;、&lt;strong&gt;类型指针&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Mark Word&lt;br/&gt;存储对象自身运行时数据，考虑到虚拟机的空间效率，被设计成一个动态定义的数据结构，即根据对象的状态复用自己的存储空间（数据长度在32位和64位虚拟机上分别为32个比特和64个比特）&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;类型指针&lt;br/&gt;对象中指向它类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例（不是所有虚拟机都必须在对象数据上保留类型指针）此外，如果对象是一个数组，对象头中还必须拥有一块记录数据长度的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;实例数据&quot;&gt;实例数据&lt;/h4&gt;
&lt;p&gt;即程序代码里定义的各种类型的字段内容，包括从父类继承的或子类中定义的字段。各类数据存储是按照一定顺序的（long/double、ints...），而宽度相同的字段总是被分配到一起存放，所以父类中定义的变量可能会出现在子类之前。&lt;/p&gt;
&lt;h4 id=&quot;对齐填充&quot;&gt;对齐填充&lt;/h4&gt;
&lt;p&gt;占位符，无特殊意义&lt;br/&gt;HotSpot虚拟机的自动内存管理系统要求对象的起始地址必须是8字节的整倍数，若有些对象的对象头和示例数据内存设计不是8的倍数，则需要利用占位符来进行填充。&lt;/p&gt;
&lt;h3 id=&quot;对象的访问定位&quot;&gt;对象的访问定位&lt;/h3&gt;
&lt;p&gt;Java程序通过reference数据操作对上的具体对象，主流的访问方式有两种：&lt;strong&gt;句柄&lt;/strong&gt;、&lt;strong&gt;直接指针&lt;/strong&gt;&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;句柄&lt;br/&gt;Java堆中可能划分出一块内存作为句柄池。reference中存储对象的句柄地址，句柄中包含对象的实例数据和类型数据的具体地址信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;直接指针&lt;br/&gt;Java堆中对象的布局需要考虑如何放置类型数据的相关信息（如访问信息）。reference中存储的直接就是对象地址，如果只访问对象本身，就不要多一次间接访问的开销&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;优缺点&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;使用句柄访问， reference数据只需关乎句柄地址，当对象被回收或移动后只需改变句柄中的实例数据指针，而reference本身不用修改&lt;br/&gt;使用直接指针省去了一次指针定位的时间开销，速度更快，由于Java中对象的访问相当频繁，所以效果可观。&lt;br/&gt;HotSpot使用直接指针的方式&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Mon, 23 Dec 2019 14:29:00 +0000</pubDate>
<dc:creator>boardMan</dc:creator>
<og:description>JVM内存结构划分 'JVM内存结构划分' '数据区域划分' '程序计数器' '虚拟机栈' '本地方法栈' '堆' '方法区' '运行时常量池' 'StringTable' '直接内存' '创建新对象</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/CodeMLB/p/12088837.html</dc:identifier>
</item>
<item>
<title>51.Qt-使用ajax获取ashx接口的post数据 - NQian</title>
<link>http://www.cnblogs.com/lifexy/p/12088454.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/lifexy/p/12088454.html</guid>
<description>&lt;p&gt;&lt;span&gt;由于当前C++项目需要使用ajax库去post调用ashx接口,接口地址如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201912/1182576-20191223211516652-1351196420.png&quot; alt=&quot;&quot; width=&quot;521&quot; height=&quot;217&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;需要传递的参数如下:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201912/1182576-20191223211524359-1808552255.png&quot; alt=&quot;&quot; width=&quot;583&quot; height=&quot;185&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后&lt;span&gt;发现qml比较好调用ajax.js库&lt;/span&gt;,所以本章通过C++界面去获取qml方法来实现调用ashx接口&lt;span&gt;&lt;strong&gt;(以一个C++界面demo程序为例)&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt; 1.&lt;/span&gt;&lt;span&gt;抓post数据&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;通过网页获取到的post数据如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201912/1182576-20191223211542935-1149671519.png&quot; alt=&quot;&quot; width=&quot;782&quot; height=&quot;214&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;所以查询20191121~20191122期间时则填入内容: &quot;deptCode=021&amp;amp;startDate=20191121&amp;amp;endDate=20191122&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2.&lt;/span&gt;&lt;span&gt;导入ajax.js库&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;ajax.js文件如下所示:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; GET&lt;/span&gt;&lt;span&gt;
function &lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;(url, success, failure)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xhr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLHttpRequest;
    xhr.open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;GET&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
    xhr.onreadystatechange &lt;/span&gt;=&lt;span&gt; function() {
        handleResponse(xhr, success, failure);
    }
    xhr.send();
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; POST&lt;/span&gt;&lt;span&gt;
function post(url, arg, success, failure)
{
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; xhr = &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XMLHttpRequest;
    xhr.open(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;POST&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, url);
    xhr.setRequestHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Length&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, arg.length);
    xhr.setRequestHeader(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Content-Type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;application/x-www-form-urlencoded;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;);  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用POST的时候一定要有这句&lt;/span&gt;&lt;span&gt;
    xhr.onreadystatechange &lt;/span&gt;=&lt;span&gt; function() {
        handleResponse(xhr, success, failure);
    }
    xhr.send(arg);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 处理返回值&lt;/span&gt;&lt;span&gt;
function handleResponse(xhr, success, failure){
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (xhr.readyState ==&lt;span&gt; XMLHttpRequest.DONE) {
        &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (xhr.status ==  &lt;span&gt;200&lt;/span&gt;&lt;span&gt;){
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (success != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; success !=&lt;span&gt; undefined)
            {
                &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; result =&lt;span&gt; xhr.responseText;
                &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
                    success(result, JSON.parse(result));
                }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt;(e){
                    success(result, {});
                }
            }
        }
        &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt;{
            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (failure != &lt;span&gt;null&lt;/span&gt; &amp;amp;&amp;amp; failure !=&lt;span&gt; undefined)
                failure(xhr.responseText, xhr.status);
        }
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;3.写main.qml&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
import QtQuick &lt;span&gt;2.3&lt;/span&gt;&lt;span&gt;
import QtQuick.Window &lt;/span&gt;&lt;span&gt;2.2&lt;/span&gt;&lt;span&gt;
import &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ajax.js&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &lt;span&gt;as&lt;/span&gt;&lt;span&gt; Ajax
Item {
    &lt;/span&gt;&lt;span&gt;
    function getWrenchTools(deptCode,startDate,endDate) {
        console.log(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Got message:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, deptCode,startDate,endDate) &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打印参数数据&lt;/span&gt;
&lt;span&gt;
Ajax.post(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;http://10.194.102.253/WLPTService/Pages/Tools/GetNLToolsByDeptCode.ashx&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;deptCode=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+deptCode+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;startDate=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+startDate+&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;amp;endDate=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;+endDate+&lt;span&gt;&quot;&quot;&lt;/span&gt;&lt;span&gt;,
                  Widget.invokeFunc);

}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;这里表示定义一个getWrenchTools()方法,当post成功并返回数据时,则调用Widget.invokeFunc()回调函数&lt;span&gt;(Widget: 该qml对应的C++类,后面会讲怎么捆绑的)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;4.widget界面如下&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201912/1182576-20191223211843499-460576492.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;然后写widget.h&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;#ifndef WIDGET_H
&lt;/span&gt;&lt;span&gt;#define&lt;/span&gt; WIDGET_H&lt;span&gt;
 
#include &lt;/span&gt;&amp;lt;QWidget&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QString&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QDebug&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QTimer&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QQmlApplicationEngine&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QQmlComponent&amp;gt;
&lt;span&gt;namespace&lt;/span&gt;&lt;span&gt; Ui {
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt; widget;
}
 
&lt;/span&gt;&lt;span&gt;class&lt;/span&gt; widget : &lt;span&gt;public&lt;/span&gt;&lt;span&gt; QWidget
{
    Q_OBJECT
 
    QQmlApplicationEngine engine;
    QObject &lt;/span&gt;*engineObject;      &lt;span&gt;//&lt;/span&gt;&lt;span&gt;指向运行的qml对象&lt;/span&gt;
 
&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
    &lt;/span&gt;&lt;span&gt;explicit&lt;/span&gt; widget(QWidget *parent = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;~&lt;span&gt;widget();
 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt;:
    Ui::widget &lt;/span&gt;*&lt;span&gt;ui;
 
&lt;/span&gt;&lt;span&gt;public&lt;/span&gt;&lt;span&gt;:
     Q_INVOKABLE &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; invokeFunc(QVariant data1,QVariant data2);   
 
&lt;/span&gt;&lt;span&gt;private&lt;/span&gt;&lt;span&gt; slots:
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; on_pushButton_clicked();
};
 
&lt;/span&gt;&lt;span&gt;#endif&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; WIDGET_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;写widget.cpp&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
#include &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;widget.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ui_widget.h&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QTimer&amp;gt;&lt;span&gt;
#include &lt;/span&gt;&amp;lt;QQmlContext&amp;gt;&lt;span&gt;
widget::widget(QWidget &lt;/span&gt;*&lt;span&gt;parent) :
    QWidget(parent),
    ui(&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Ui::widget)
{
 
    ui&lt;/span&gt;-&amp;gt;setupUi(&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
 
    engine.rootContext()&lt;/span&gt;-&amp;gt;setContextProperty(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Widget&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;,&lt;span&gt;this&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    //&lt;/span&gt;&lt;span&gt;将QML中的Widget变量指向为当前类.从而使QML和widget类连接起来&lt;/span&gt;
&lt;span&gt; 
    engineObject &lt;/span&gt;= QQmlComponent(&amp;amp;engine, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;qrc:/main.qml&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;).create();        &lt;span&gt;//&lt;/span&gt;&lt;span&gt;创建qml并获取运行中的qml对象&lt;/span&gt;
&lt;span&gt;}
 
widget::&lt;/span&gt;~&lt;span&gt;widget()
{
    &lt;/span&gt;&lt;span&gt;delete&lt;/span&gt;&lt;span&gt; ui;
}
 
 
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; widget::invokeFunc(QVariant data1,QVariant data2)
{
    ui&lt;/span&gt;-&amp;gt;plainTextEdit-&amp;gt;&lt;span&gt;setPlainText(data1.toString());
 
}
 
&lt;/span&gt;&lt;span&gt;void&lt;/span&gt;&lt;span&gt; widget::on_pushButton_clicked()
{
     QVariant depatment&lt;/span&gt;= &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;021&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
     QVariant start&lt;/span&gt;= ui-&amp;gt;start-&amp;gt;&lt;span&gt;text();
     QVariant end &lt;/span&gt;= ui-&amp;gt;end-&amp;gt;text();    &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;结束日期&quot;&lt;/span&gt;
&lt;span&gt; 
     QMetaObject::invokeMethod(engineObject, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;getWrenchTools&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,Q_ARG(QVariant, depatment)\
                             ,Q_ARG(QVariant, start),Q_ARG(QVariant, end));
 
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;engine.rootContext()-&amp;gt;setContextProperty(&quot;Widget&quot;,this)的作用:&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;span&gt;将QML中的Widget变量指向为当前类.从而使&lt;span&gt;QML和widget类连接起来&lt;/span&gt;, 然后&lt;strong&gt;&lt;span&gt;main.qml&lt;/span&gt;&lt;/strong&gt;如果post成功则调用当前类的&lt;span&gt;invokeFunc(QVariant data1,QVariant data2)&lt;/span&gt;方法,从而实现数据返回.&lt;/span&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;当按下同步按钮时,则调用on_pushButton_clicked():&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;由于engineObject指向运行中的qml对象,然后我们通过&lt;strong&gt;&lt;span&gt;invokeMethod()&lt;/span&gt;&lt;/strong&gt;就可以方便的请求调用&lt;span&gt;qml对象中的getWrenchTools()&lt;/span&gt;函数.从而&lt;span&gt;实现post请求&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;点击同步后,效果如下&lt;/span&gt;&lt;span&gt;&lt;span&gt;所示(然后可&lt;/span&gt;&lt;span&gt;以&lt;/span&gt;&lt;span&gt;参考&lt;/span&gt;&lt;strong&gt;&lt;span&gt;&lt;a id=&quot;cb_post_title_url&quot; class=&quot;postTitle2&quot; href=&quot;https://www.cnblogs.com/lifexy/p/11930436.html&quot;&gt;&lt;span&gt;50.Qt-QJsonDocument读写json&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/strong&gt;来提取数据&lt;span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1182576/201912/1182576-20191223212022022-1160463060.png&quot; alt=&quot;&quot; width=&quot;634&quot; height=&quot;524&quot;/&gt;&lt;/span&gt;&lt;/p&gt;






&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 13:25:00 +0000</pubDate>
<dc:creator>NQian</dc:creator>
<og:description>由于当前C++项目需要使用ajax库去post调用ashx接口,接口地址如下所示: 需要传递的参数如下: 然后发现qml比较好调用ajax.js库,所以本章通过C++界面去获取qml方法来实现调用as</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cnblogs.com/lifexy/p/12088454.html</dc:identifier>
</item>
</channel>
</rss>