<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>Spring boot入门（三）：SpringBoot集成结合AdminLTE(Freemarker)，利用generate自动生成代码，利用DataTable和PageHelper进行分页显示 - 天生吾材</title>
<link>http://www.cnblogs.com/dz-boss/p/10129211.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dz-boss/p/10129211.html</guid>
<description>&lt;p&gt;　　关于SpringBoot和PageHelper，前篇博客已经介绍过&lt;a title=&quot;Spring boot入门（二）：Spring boot集成MySql,Mybatis和PageHelper插件&quot; href=&quot;https://www.cnblogs.com/dz-boss/p/10119193.html&quot; target=&quot;_blank&quot;&gt;Spring boot入门（二）：Spring boot集成MySql,Mybatis和PageHelper插件&lt;/a&gt;，前篇博客大致讲述了SpringBoot如何集成Mybatis和Pagehelper,但是没有做出实际的范例，本篇博客是连接上一篇写的。通过AdminLTE前端框架，利用DataTable和PageHelper进行分页显示，通过对用户列表的增删改查操作，演示DataTable和PageHelper的使用。&lt;/p&gt;
&lt;p&gt;（1）AdminLTE介绍&lt;/p&gt;
&lt;p&gt;　　AdminLTE是一个完全响应管理模板。基于Bootstrap3框架，易定制模板。适合多种屏幕分辨率，从小型移动设备到大型台式机。内置了多个页面，包括仪表盘、邮箱、日历、锁屏、登录及注册、404错误、500错误等页面。具体介绍见官方网站：&lt;a href=&quot;https://adminlte.io/&quot; target=&quot;_blank&quot;&gt;https://adminlte.io/&lt;/a&gt;，我们可以直接从此网站下载该模板，其外观如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201812/1147108-20181216225103190-911025586.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（2）SpringBoot后台集成AdminLTE&lt;/p&gt;
&lt;p&gt;　　首先在官网下载AdminLTE模板，然后将此模板的全部文件拷贝到项目下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201812/1147108-20181216225620859-1802069950.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　拷贝后，将AdminLTE文件进行了拆分，其中base里面是AdminLTE自带的所有js包和css文件，main中是AdminLTE主页面渲染页面，index是入口。这么做的目的：直接将base通过FreeMarker中宏的形式引入到index入口页面中，那么所有的js文件将一直曾在最底层的页面下，在后期的其它页面的开发中，不需要再次引入js包，避免js包混乱。&lt;/p&gt;
&lt;p&gt;　　启动项目：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201812/1147108-20181216230108222-155720664.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　（3）配置generate&lt;/p&gt;
&lt;p&gt;　　generate的介绍比较多，此处直接介绍配置的步骤及代码&lt;/p&gt;
&lt;p&gt;　　编写generatorConfig.xml文件，并放在templates根目录下，若放在其它目录中，则需要在pom.xml中配置路径，否则，编译的时候无法通过。具体错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;[ERROR] Failed to execute goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.5:generate (default-cli) on project edu: configfile D:\8_Project\learn\edu\src\main\resources\generatorConfig.xml does not exist -&amp;gt; [Help 1]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;[ERROR] 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;[ERROR] Re-run Maven using the -X switch to enable full debug logging.
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;[ERROR] 
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;[ERROR] For more information about the errors and possible solutions, please read the following articles:
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;generatorConfig.xml的脚本如下，&lt;span&gt;&lt;strong&gt;其中targetProject的路径需要曾在，否则会报错&lt;/strong&gt;&lt;/span&gt;，参考https://blog.csdn.net/hh680821/article/details/79051870&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;&amp;lt;?&lt;/span&gt;&lt;span&gt;xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;?&amp;gt;&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE generatorConfiguration
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generatorConfiguration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;    &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt; &amp;lt;properties resource=&quot;application.properties&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt; 
&lt;span&gt; 9&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;context &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;Mysql&quot;&lt;/span&gt;&lt;span&gt; targetRuntime&lt;/span&gt;&lt;span&gt;=&quot;MyBatis3Simple&quot;&lt;/span&gt;&lt;span&gt; defaultModelType&lt;/span&gt;&lt;span&gt;=&quot;flat&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;属性配置  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;beginningDelimiter&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;`&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;12&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;endingDelimiter&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;`&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;13&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;去除注释  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;commentGenerator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suppressAllComments&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;commentGenerator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;如果mapper接口需要实现其它接口，那么需要配置MapperPlugin，value中是实现的接口或类名  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;18&lt;/span&gt;        &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;plugin &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;mappers&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;com.tswc.edu.utils.MyMapper&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;20&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;plugin&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;21&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;一定要放在plugin下面，否则报错  &lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;commentGenerator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;23&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;property &lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;=&quot;suppressAllComments&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;24&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;commentGenerator&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;数据库连接池&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;26&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;jdbcConnection &lt;/span&gt;&lt;span&gt;driverClass&lt;/span&gt;&lt;span&gt;=&quot;com.mysql.jdbc.Driver&quot;&lt;/span&gt;
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                        connectionURL&lt;/span&gt;&lt;span&gt;=&quot;jdbc:mysql://localhost:3306/edu&quot;&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                        userId&lt;/span&gt;&lt;span&gt;=&quot;root&quot;&lt;/span&gt;
&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                        password&lt;/span&gt;&lt;span&gt;=&quot;123456&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;jdbcConnection&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;31&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;自动生成实体类&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;32&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;javaModelGenerator &lt;/span&gt;&lt;span&gt;targetPackage&lt;/span&gt;&lt;span&gt;=&quot;generator&quot;&lt;/span&gt;&lt;span&gt; targetProject&lt;/span&gt;&lt;span&gt;=&quot;src/main/java&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;自动生成map接口&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;34&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;sqlMapGenerator &lt;/span&gt;&lt;span&gt;targetPackage&lt;/span&gt;&lt;span&gt;=&quot;generator&quot;&lt;/span&gt;&lt;span&gt; targetProject&lt;/span&gt;&lt;span&gt;=&quot;src/main/java&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;35&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;自动生成mybatis的xml文件&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;36&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;javaClientGenerator &lt;/span&gt;&lt;span&gt;targetPackage&lt;/span&gt;&lt;span&gt;=&quot;generator&quot;&lt;/span&gt;&lt;span&gt; targetProject&lt;/span&gt;&lt;span&gt;=&quot;src/main/java&quot;&lt;/span&gt;
&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                             type&lt;/span&gt;&lt;span&gt;=&quot;XMLMAPPER&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;38&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;数据库表名，此处如果需要去掉某个自带函数，需要添加参数&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;39&lt;/span&gt;         &lt;span&gt;&amp;lt;!--&lt;/span&gt;&lt;span&gt;1，schema：数据库的schema；
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt; &lt;span&gt;        2，catalog：数据库的catalog；
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;        5，enableInsert（默认true）：指定是否生成insert语句；
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;        13，modelType：参考context元素的defaultModelType，相当于覆盖；
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；&lt;/span&gt;&lt;span&gt;--&amp;gt;&lt;/span&gt;
&lt;span&gt;55&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;tableName&lt;/span&gt;&lt;span&gt;=&quot;t_user&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;56&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;generatedKey &lt;/span&gt;&lt;span&gt;column&lt;/span&gt;&lt;span&gt;=&quot;id&quot;&lt;/span&gt;&lt;span&gt; sqlStatement&lt;/span&gt;&lt;span&gt;=&quot;Mysql&quot;&lt;/span&gt;&lt;span&gt; identity&lt;/span&gt;&lt;span&gt;=&quot;true&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt;57&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; 
&lt;span&gt;59&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;context&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;60&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;generatorConfiguration&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假设产生此错误：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;[ERROR] Failed to execute goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.5:generate (default-cli) on project edu: XML Parser Error on line 60: 元素类型为 &quot;context&quot; 的内容必须匹配 &quot;(property*,plugin*,commentGenerator?,(connectionFactory|jdbcConnection),javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+)&quot;。 -&amp;gt; [Help 1]
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;[ERROR] 
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;[ERROR] Re-run Maven using the -X switch to enable full debug logging.
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;[ERROR] 
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt; &lt;span&gt;[ERROR] For more information about the errors and possible solutions, please read the following articles:
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;原因就是：generate中，标签都是有顺序的，此类错误就是标签的顺序存在问题&lt;/p&gt;
&lt;p&gt;此时，xml文件以及配置结束，需要在idea中配置启动操作：mybatis-generator:generate，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201812/1147108-20181216231822105-1599156531.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）DataTable的使用&lt;/p&gt;
&lt;p&gt;DataTable是一款简单易用的分页插件，基于JQuery写的，里面提供了丰富的分页参数，主要通过Ajax实现数据的前后端传输&lt;/p&gt;
&lt;p&gt;首先引入js和css包：&lt;/p&gt;
&lt;p&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css&quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;script src=&quot;https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;
&lt;p&gt;其外，还需要格式化相关提示文字，一般命名为：language.json&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;53&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;{
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;    &quot;sEmptyTable&quot;:       &quot;没有相关数据&quot;,
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;    &quot;sInfo&quot;:             &quot;从 _START_ 到  _END_ 条记录 总记录数为 _TOTAL_ 条&quot;,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;    &quot;sInfoEmpty&quot;:        &quot;记录数为0&quot;,
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;    &quot;sInfoFiltered&quot;:     &quot;(全部记录数 _MAX_ 条)&quot;,
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;    &quot;sInfoPostFix&quot;:      &quot;&quot;,
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;    &quot;sInfoThousands&quot;:      &quot;,&quot;,
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;    &quot;sLengthMenu&quot;:       &quot;显示 _MENU_ 条&quot;,
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;    &quot;sLoadingRecords&quot;:     &quot;正在加载...&quot;,
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;    &quot;sProcessing&quot;:       &quot;正在获取数据，请稍候...&quot;,
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;    &quot;sSearch&quot;:           &quot;搜索&quot;,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;    &quot;sZeroRecords&quot;:      &quot;没有您要搜索的内容&quot;,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;    &quot;oPaginate&quot;: {
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        &quot;sFirst&quot;:        &quot;首页&quot;,
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;        &quot;sPrevious&quot;:     &quot;上一页&quot;,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;        &quot;sNext&quot;:         &quot;下一页&quot;,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;        &quot;sLast&quot;:         &quot;尾页&quot;,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;        &quot;sJump&quot;:     &quot;跳转&quot;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;    },
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;    &quot;oAria&quot;: {
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        &quot;sSortAscending&quot;:  &quot;: 以升序排序&quot;,
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;        &quot;sSortDescending&quot;: &quot;: 以降序排序&quot;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;具体的实现方式如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;78&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;var user_tab;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;        var user_list_param;
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;        $(function () {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;            var url=&quot;/admin/user/listPage&quot;;
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt;            user_list_setParm();
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt;            user_tab = $('#user_tab').DataTable({
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                &quot;fnDrawCallback&quot;: function () {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt;                },
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;                 &quot;dom&quot;: '&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;top&lt;/span&gt;&lt;span&gt;&quot;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;rt&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;bottom&lt;/span&gt;&lt;span&gt;&quot;flp&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;&quot;clear&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;',
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;                //&quot;ordering&quot;:false,//是否排序
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; &lt;span&gt;                &quot;processing&quot;: true,
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; &lt;span&gt;                &quot;searching&quot;: false,
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;                &quot;serverSide&quot;: true,   //启用服务器端分页
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;                &quot;order&quot;: [[ 5, &quot;asc&quot; ]],//默认排序字段
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;                &quot;bInfo&quot;: true,
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;                &quot;bAutoWidth&quot;: false,
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;                &quot;scrollX&quot;: true,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;                &quot;scrollCollapse&quot;: false,
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;                /*fixedColumns:   {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;                    leftColumns: 0,
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;                    rightColumns: 1
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;                },*/
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; &lt;span&gt;                &quot;language&quot;:{&quot;url&quot;:&quot;/plugins/datatables/language.json&quot;},
&lt;/span&gt;&lt;span&gt;24&lt;/span&gt; &lt;span&gt;                &quot;ajax&quot;:{&quot;url&quot;:url,&quot;data&quot;:user_list_param,&quot;type&quot;:&quot;post&quot;},
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;                &quot;columns&quot;:[
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt;                    {&quot;data&quot;:&quot;id&quot;},
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt;                    {&quot;data&quot;:null},
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt;                    {&quot;data&quot;:&quot;userName&quot;},
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt;                    {&quot;data&quot;:&quot;password&quot;},
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt;                    {&quot;data&quot;:&quot;trueName&quot;},
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;                    {&quot;data&quot;:&quot;createTime&quot;},
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;                    {&quot;data&quot;:&quot;id&quot;}
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;                ],
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;                &quot;columnDefs&quot; : [
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt; &lt;span&gt;                        targets: 0,
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; &lt;span&gt;                        data: null,
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;                        orderable:false,
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; &lt;span&gt;                        render: function (data) {
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;                             return '&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;userCheckbox&quot;&lt;/span&gt;&lt;span&gt; value&lt;/span&gt;&lt;span&gt;=&quot;'+data+'&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;';
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt; &lt;span&gt;                        targets: 1,
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt; &lt;span&gt;                        data: null,
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;                        orderable:false,
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt; &lt;span&gt;                        render: function (data) {
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt; &lt;span&gt;                            No=No+1;
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt; &lt;span&gt;                            return No;
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;                        &quot;targets&quot; : -1,
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;                        &quot;data&quot; : null,
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;                        orderable:false,
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; &lt;span&gt;                        &quot;render&quot; : function(data) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt; &lt;span&gt;                            var data = &quot;'&quot;+data+&quot;'&quot;;
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;                             var btn1='&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-xs btn-warning&quot;&lt;/span&gt;&lt;span&gt;  target&lt;/span&gt;&lt;span&gt;=&quot;modal&quot;&lt;/span&gt;&lt;span&gt; modal&lt;/span&gt;&lt;span&gt;=&quot;hg&quot;&lt;/span&gt;&lt;span&gt; href&lt;/span&gt;&lt;span&gt;=&quot;&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa fa-edit&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;修改&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;';
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;                             var btn2 = '&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;a &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-xs btn-danger&quot;&lt;/span&gt;&lt;span&gt;  target&lt;/span&gt;&lt;span&gt;=&quot;modal&quot;&lt;/span&gt;&lt;span&gt; modal&lt;/span&gt;&lt;span&gt;=&quot;hg&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;user_list_delete('+data+')&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa fa-remove&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;删除&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;a&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt; &lt;span&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;';
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt; &lt;span&gt;                            return btn1+btn2;
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; &lt;span&gt;                ]
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;            }).on('preXhr.dt', function ( e, settings, data ) {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;                No=0;
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;            }).on('xhr.dt', function(e, settings, json, xhr) {
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;         });
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里面需要说明的：&lt;/p&gt;
&lt;p&gt;a.如果开启排序，那么后端接受参数的方式：&lt;/p&gt;
&lt;pre&gt;
@RequestParam(value = &quot;order[0][column]&quot;, required = false) Integer orderIndex
&lt;/pre&gt;
&lt;pre&gt;
@RequestParam(value = &quot;order[0][dir]&quot;, required = false) String orderDir&lt;br/&gt;其中orderIndex为排序的字段，而orderDir为排序的方式（升序或者降序）。orderIndex中是前端table中字段的列号，所以通畅，还需要在后台初始化一个数组，然后再数组中取实际需要排序的字段，例如：
&lt;/pre&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt;   String[] cols = {&quot;&quot;, &quot;&quot;, &quot;user_name&quot;, &quot;password&quot;, &quot;true_name&quot;, &quot;create_time&quot;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;   Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt; result = userService.listPage((start / pageSize) + 1, pageSize,  cols[orderIndex], orderDir);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;b.一般在对列表进行了增删改查后，需要重新刷新列表，而此时，大多数情况下，想列表保持当前页面刷新，那么需要使用函数&lt;/p&gt;
&lt;pre&gt;
user_tab.draw(false);&lt;br/&gt;其中user_tab为table的JQuery对象,如果不需要保持此页面，去掉false即可。&lt;/pre&gt;
&lt;p&gt;c.需要冻结某列的时候，需要使用到fixedColumns函数，可以使用on进行函数回调，使用dom，进行页面统计文字的显示位置&quot;dom&quot;: '&amp;lt;&quot;top&quot;i&amp;gt;rt&amp;lt;&quot;bottom&quot;flp&amp;gt;&amp;lt;&quot;clear&quot;&amp;gt;',&lt;/p&gt;
&lt;p&gt; （5）PageHelper后台分页的编写&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;50&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;  &lt;span&gt;public&lt;/span&gt; Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt; listPage(&lt;span&gt;int&lt;/span&gt; pageCurrent, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageSize, String userName, String trueName, String cols, String orderDir) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;         Example example = &lt;span&gt;new&lt;/span&gt; Example(TUser.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         Criteria criteria =&lt;span&gt; example.createCriteria();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         ExampleUtils.getLikeExample(criteria, &quot;userName&quot;&lt;span&gt;, userName);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;         ExampleUtils.getLikeExample(criteria, &quot;trueName&quot;&lt;span&gt;, trueName);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;         example.setOrderByClause(cols + &quot; &quot; +&lt;span&gt; orderDir);
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;example.orderBy(cols+&quot; &quot;+orderDir);&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt; result = &lt;span&gt;new&lt;/span&gt; Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;        PageHelper.startPage(pageCurrent, pageSize);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         List&amp;lt;TUser&amp;gt; tUsers =&lt;span&gt; userMapper.selectByExample(example);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         PageInfo&amp;lt;TUser&amp;gt; pageInfo = &lt;span&gt;new&lt;/span&gt; PageInfo&amp;lt;TUser&amp;gt;&lt;span&gt;(tUsers, pageSize);
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;         Page&amp;lt;TUser&amp;gt; resultData = &lt;span&gt;new&lt;/span&gt; Page&amp;lt;TUser&amp;gt;((&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) pageInfo.getTotal(), pageInfo.getPages(), pageCurrent, pageSize, tUsers);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        result.setResultData(resultData);
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         result.setErrCode(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         result.setStatus(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于，需要配个DataTable,所以需要重新编写page类，保证字段的一致性，这里就放弃了PageHelper自带的PageInfo，实际上，这2个类中，字段类型基本一致，区别不大。&lt;/p&gt;
&lt;p&gt;（6）.其它具体的代码&lt;/p&gt;
&lt;p&gt;前端ftl:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;61&quot;&gt;&lt;img id=&quot;code_img_closed_53646374-da8a-46e2-a00b-9c59426df028&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_53646374-da8a-46e2-a00b-9c59426df028&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_53646374-da8a-46e2-a00b-9c59426df028&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;117&quot;&gt;
&lt;pre&gt;
&lt;span&gt;  1&lt;/span&gt; &lt;span&gt;&amp;lt;!&lt;/span&gt;&lt;span&gt;DOCTYPE html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  2&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;html &lt;/span&gt;&lt;span&gt;lang&lt;/span&gt;&lt;span&gt;=&quot;en&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  3&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  4&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;meta &lt;/span&gt;&lt;span&gt;charset&lt;/span&gt;&lt;span&gt;=&quot;UTF-8&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  5&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户列表&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  6&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;head&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  7&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  8&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;box-body&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;  9&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 10&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;form &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-horizontal&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 11&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;user_list_repeatApply&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;user_list_repeatApply&quot;&lt;/span&gt;&lt;span&gt; type&lt;/span&gt;&lt;span&gt;=&quot;reset&quot;&lt;/span&gt;&lt;span&gt;  style&lt;/span&gt;&lt;span&gt;=&quot;display:none;&quot;&lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;
&lt;span&gt; 12&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;form-group clearfix&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 13&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-1  control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登录名称&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 14&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 15&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;input-sm form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;user_list_user_name&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;user_list_user_name&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入登录名称...&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 16&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 17&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;label &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-1  control-label&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;label&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 18&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;div &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;col-md-2&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 19&lt;/span&gt;                         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;input-sm form-control&quot;&lt;/span&gt;&lt;span&gt; id&lt;/span&gt;&lt;span&gt;=&quot;user_list_true_name&quot;&lt;/span&gt;&lt;span&gt; name&lt;/span&gt;&lt;span&gt;=&quot;user_list_true_name&quot;&lt;/span&gt;&lt;span&gt; placeholder&lt;/span&gt;&lt;span&gt;=&quot;请输入用户名...&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 20&lt;/span&gt;                     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 21&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;user_list_query();&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-sm btn-primary&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa fa-search&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;搜索&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 22&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;user_list_add();&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-sm btn-success&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa fa-square-o&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;增加&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 23&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;user_list_delete('1');&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-sm btn-danger&quot;&lt;/span&gt; &lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;i &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&quot;fa fa-remove&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;i&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;删除&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 24&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;button  &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;button&quot;&lt;/span&gt;&lt;span&gt; onclick&lt;/span&gt;&lt;span&gt;=&quot;user_list_reset();&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;btn btn-sm btn-default&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;重置&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;button&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 25&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 26&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;form&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 27&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 28&lt;/span&gt;         &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;table &lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;=&quot;user_tab&quot;&lt;/span&gt;&lt;span&gt; class&lt;/span&gt;&lt;span&gt;=&quot;table table-striped table-bordered table-hover&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 29&lt;/span&gt;             &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 30&lt;/span&gt;                 &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 31&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span&gt;input &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;checkbox&quot;&lt;/span&gt;&lt;span&gt; title&lt;/span&gt;&lt;span&gt;=&quot;全选&quot;&lt;/span&gt; &lt;span&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 32&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;序号&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 33&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登录名称&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 34&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;登录密码&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 35&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;用户名&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 36&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;加入时间&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 37&lt;/span&gt;                     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;操作&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;th&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 38&lt;/span&gt;                 &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;tr&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 39&lt;/span&gt;             &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;thead&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 40&lt;/span&gt;         &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;table&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 41&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;div&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 42&lt;/span&gt;     &lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script  &lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;=&quot;text/javascript&quot;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt; 43&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; user_tab;
&lt;/span&gt;&lt;span&gt; 44&lt;/span&gt;         &lt;span&gt;var&lt;/span&gt;&lt;span&gt; user_list_param;
&lt;/span&gt;&lt;span&gt; 45&lt;/span&gt; &lt;span&gt;        $(&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 46&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; url&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/admin/user/listPage&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 47&lt;/span&gt; &lt;span&gt;            user_list_setParm();
&lt;/span&gt;&lt;span&gt; 48&lt;/span&gt; &lt;span&gt;            user_tab &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;#user_tab&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).DataTable({
&lt;/span&gt;&lt;span&gt; 49&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;fnDrawCallback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; () {
&lt;/span&gt;&lt;span&gt; 50&lt;/span&gt; &lt;span&gt;                },
&lt;/span&gt;&lt;span&gt; 51&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;dom&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;&quot;top&quot;i&amp;gt;rt&amp;lt;&quot;bottom&quot;flp&amp;gt;&amp;lt;&quot;clear&quot;&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 52&lt;/span&gt;                 &lt;span&gt;//&lt;/span&gt;&lt;span&gt;&quot;ordering&quot;:false,//是否排序&lt;/span&gt;
&lt;span&gt; 53&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;processing&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 54&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;searching&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 55&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;serverSide&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,   &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;启用服务器端分页&lt;/span&gt;
&lt;span&gt; 56&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;order&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: [[ &lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;asc&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; ]],&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;默认排序字段&lt;/span&gt;
&lt;span&gt; 57&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bInfo&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 58&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;bAutoWidth&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 59&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scrollX&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 60&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;scrollCollapse&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 61&lt;/span&gt;                 &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;fixedColumns:   {
&lt;/span&gt;&lt;span&gt; 62&lt;/span&gt; &lt;span&gt;                    leftColumns: 0,
&lt;/span&gt;&lt;span&gt; 63&lt;/span&gt; &lt;span&gt;                    rightColumns: 1
&lt;/span&gt;&lt;span&gt; 64&lt;/span&gt; &lt;span&gt;                },&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt; 65&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;language&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/plugins/datatables/language.json&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 66&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;ajax&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:{&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:url,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:user_list_param,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;post&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 67&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;columns&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:[
&lt;/span&gt;&lt;span&gt; 68&lt;/span&gt; &lt;span&gt;                    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 69&lt;/span&gt; &lt;span&gt;                    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 70&lt;/span&gt; &lt;span&gt;                    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;userName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 71&lt;/span&gt; &lt;span&gt;                    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;password&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 72&lt;/span&gt; &lt;span&gt;                    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;trueName&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 73&lt;/span&gt; &lt;span&gt;                    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;createTime&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;},
&lt;/span&gt;&lt;span&gt; 74&lt;/span&gt; &lt;span&gt;                    {&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt; 75&lt;/span&gt; &lt;span&gt;                ],
&lt;/span&gt;&lt;span&gt; 76&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;columnDefs&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : [
&lt;/span&gt;&lt;span&gt; 77&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 78&lt;/span&gt; &lt;span&gt;                        targets: &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 79&lt;/span&gt; &lt;span&gt;                        data: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 80&lt;/span&gt; &lt;span&gt;                        orderable:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 81&lt;/span&gt; &lt;span&gt;                        render: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt; 82&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;input type=&quot;checkbox&quot; class=&quot;userCheckbox&quot; value=&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;/&amp;gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 83&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 84&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt; 85&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 86&lt;/span&gt; &lt;span&gt;                        targets: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 87&lt;/span&gt; &lt;span&gt;                        data: &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 88&lt;/span&gt; &lt;span&gt;                        orderable:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 89&lt;/span&gt; &lt;span&gt;                        render: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt; 90&lt;/span&gt; &lt;span&gt;                            No&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;No&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 91&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; No;
&lt;/span&gt;&lt;span&gt; 92&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt; 93&lt;/span&gt; &lt;span&gt;                    },
&lt;/span&gt;&lt;span&gt; 94&lt;/span&gt; &lt;span&gt;                    {
&lt;/span&gt;&lt;span&gt; 95&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;targets&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : &lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 96&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : &lt;/span&gt;&lt;span&gt;null&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 97&lt;/span&gt; &lt;span&gt;                        orderable:&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt; 98&lt;/span&gt;                         &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;render&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(data) {
&lt;/span&gt;&lt;span&gt; 99&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; data &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; btn1&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;btn btn-xs btn-warning&quot;  target=&quot;modal&quot; modal=&quot;hg&quot; href=&quot;&quot;&amp;gt;&amp;lt;i class=&quot;fa fa-edit&quot;&amp;gt;&amp;lt;/i&amp;gt;修改&amp;lt;/a&amp;gt; &amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;101&lt;/span&gt;                             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; btn2 &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;a class=&quot;btn btn-xs btn-danger&quot;  target=&quot;modal&quot; modal=&quot;hg&quot; onclick=&quot;user_list_delete(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)&quot;&amp;gt;&amp;lt;i class=&quot;fa fa-remove&quot;&amp;gt;&amp;lt;/i&amp;gt;删除&amp;lt;/a&amp;gt; &amp;amp;nbsp;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;102&lt;/span&gt;                             &lt;span&gt;return&lt;/span&gt;&lt;span&gt; btn1&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;btn2;
&lt;/span&gt;&lt;span&gt;103&lt;/span&gt; &lt;span&gt;                        }
&lt;/span&gt;&lt;span&gt;104&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;105&lt;/span&gt; &lt;span&gt;                ]
&lt;/span&gt;&lt;span&gt;106&lt;/span&gt; &lt;span&gt;            }).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;preXhr.dt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; ( e, settings, data ) {
&lt;/span&gt;&lt;span&gt;107&lt;/span&gt; &lt;span&gt;                No&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;108&lt;/span&gt; &lt;span&gt;            }).on(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xhr.dt&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(e, settings, json, xhr) {
&lt;/span&gt;&lt;span&gt;109&lt;/span&gt; &lt;span&gt;            });
&lt;/span&gt;&lt;span&gt;110&lt;/span&gt; &lt;span&gt;        });
&lt;/span&gt;&lt;span&gt;111&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;搜索框内容重置&lt;/span&gt;
&lt;span&gt;112&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; user_list_reset() {
&lt;/span&gt;&lt;span&gt;113&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;input[name='user_list_repeatApply']&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).click();
&lt;/span&gt;&lt;span&gt;114&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;115&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;增加&lt;/span&gt;
&lt;span&gt;116&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; user_list_add() {
&lt;/span&gt;&lt;span&gt;117&lt;/span&gt; 
&lt;span&gt;118&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;119&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除&lt;/span&gt;
&lt;span&gt;120&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; user_list_delete(param) {
&lt;/span&gt;&lt;span&gt;121&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; href &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;122&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; title &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;警告！ 所选取的数据将会被删除！&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;123&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; cb;
&lt;/span&gt;&lt;span&gt;124&lt;/span&gt;             &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(param&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;125&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt;&lt;span&gt; checkNum &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input:checkbox[class=&quot;userCheckbox&quot;]:checked&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;).length;
&lt;/span&gt;&lt;span&gt;126&lt;/span&gt;                 &lt;span&gt;var&lt;/span&gt;&lt;span&gt; checkVal &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;[];
&lt;/span&gt;&lt;span&gt;127&lt;/span&gt;                 &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(checkNum&lt;/span&gt;&lt;span&gt;==&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;128&lt;/span&gt; &lt;span&gt;                    alertMsg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;请选择数据&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;warning&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;129&lt;/span&gt;                     &lt;span&gt;return&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;130&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;131&lt;/span&gt; &lt;span&gt;                $.each($(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;input:checkbox[class=&quot;userCheckbox&quot;]:checked&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;),&lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt;(){
&lt;/span&gt;&lt;span&gt;132&lt;/span&gt; &lt;span&gt;                    checkVal.push($(&lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;).val());
&lt;/span&gt;&lt;span&gt;133&lt;/span&gt; &lt;span&gt;                });
&lt;/span&gt;&lt;span&gt;134&lt;/span&gt; &lt;span&gt;                cb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user_list_delete_data('&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;checkVal&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;135&lt;/span&gt; &lt;span&gt;            } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;136&lt;/span&gt; &lt;span&gt;                cb &lt;/span&gt;&lt;span&gt;=&lt;/span&gt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user_list_delete_one_data('&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;param&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;');&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;137&lt;/span&gt; &lt;span&gt;            }
&lt;/span&gt;&lt;span&gt;138&lt;/span&gt; &lt;span&gt;            $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#smModal&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).attr(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;action&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,href).attr(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;callback&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, cb).find(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.modal-body&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).html(title).end().modal(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;show&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;139&lt;/span&gt;             &lt;span&gt;//&lt;/span&gt;&lt;span&gt;$(&quot;#smModal&quot;).modal(&quot;show&quot;);&lt;/span&gt;
&lt;span&gt;140&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;141&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; user_list_delete_data(checkVal) {
&lt;/span&gt;&lt;span&gt;142&lt;/span&gt; 
&lt;span&gt;143&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; options &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;144&lt;/span&gt; &lt;span&gt;                url:  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/admin/user/delete?checkVal=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;checkVal,
&lt;/span&gt;&lt;span&gt;145&lt;/span&gt; &lt;span&gt;                type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;146&lt;/span&gt; &lt;span&gt;                dataType: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;147&lt;/span&gt; &lt;span&gt;                success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;148&lt;/span&gt;                     &lt;span&gt;if&lt;/span&gt;&lt;span&gt;(data&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;149&lt;/span&gt; &lt;span&gt;                        user_tab.draw(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;150&lt;/span&gt; &lt;span&gt;                        alertMsg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;成功删除&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;data&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;条记录&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;151&lt;/span&gt; &lt;span&gt;                    } &lt;/span&gt;&lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;152&lt;/span&gt; &lt;span&gt;                        alertMsg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;删除失败&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;danger&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;153&lt;/span&gt; &lt;span&gt;                    }
&lt;/span&gt;&lt;span&gt;154&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;155&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;156&lt;/span&gt; &lt;span&gt;            $.ajax(options);
&lt;/span&gt;&lt;span&gt;157&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;158&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; user_list_delete_one_data(id) {
&lt;/span&gt;&lt;span&gt;159&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; options &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;160&lt;/span&gt; &lt;span&gt;                url:  &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;/admin/user/deleteOne?id=&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;id,
&lt;/span&gt;&lt;span&gt;161&lt;/span&gt; &lt;span&gt;                type: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;get&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;162&lt;/span&gt; &lt;span&gt;                dataType: &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;text&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;163&lt;/span&gt; &lt;span&gt;                success: &lt;/span&gt;&lt;span&gt;function&lt;/span&gt;&lt;span&gt; (data) {
&lt;/span&gt;&lt;span&gt;164&lt;/span&gt; &lt;span&gt;                    user_tab.draw(&lt;/span&gt;&lt;span&gt;false&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;165&lt;/span&gt; &lt;span&gt;                    alertMsg(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&amp;lt;p&amp;gt;删除成功&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;success&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;166&lt;/span&gt; &lt;span&gt;                }
&lt;/span&gt;&lt;span&gt;167&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;168&lt;/span&gt; &lt;span&gt;            $.ajax(options);
&lt;/span&gt;&lt;span&gt;169&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;170&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;搜索&lt;/span&gt;
&lt;span&gt;171&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; user_list_query() {
&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;            user_list_setParm();
&lt;/span&gt;&lt;span&gt;173&lt;/span&gt; &lt;span&gt;            user_tab.settings()[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;].ajax.data &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; user_list_param;
&lt;/span&gt;&lt;span&gt;174&lt;/span&gt; &lt;span&gt;            user_tab.ajax.reload();
&lt;/span&gt;&lt;span&gt;175&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;176&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;动态拼接参数&lt;/span&gt;
&lt;span&gt;177&lt;/span&gt;         &lt;span&gt;function&lt;/span&gt;&lt;span&gt; user_list_setParm() {
&lt;/span&gt;&lt;span&gt;178&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; user_list_user_name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#user_list_user_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;179&lt;/span&gt;             &lt;span&gt;var&lt;/span&gt;&lt;span&gt; user_list_true_name &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; $(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#user_list_true_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).val();
&lt;/span&gt;&lt;span&gt;180&lt;/span&gt; &lt;span&gt;            user_list_param &lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;181&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user_list_user_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : user_list_user_name,
&lt;/span&gt;&lt;span&gt;182&lt;/span&gt;                 &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;user_list_true_name&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt; : user_list_true_name
&lt;/span&gt;&lt;span&gt;183&lt;/span&gt; &lt;span&gt;            };
&lt;/span&gt;&lt;span&gt;184&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;185&lt;/span&gt;     &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;186&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;body&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;187&lt;/span&gt; &lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;html&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;后台类：&lt;/p&gt;
&lt;p&gt;控制层&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43.5&quot;&gt;&lt;img id=&quot;code_img_closed_8db89e4e-4e13-4fb9-9b2e-748872d6f859&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_8db89e4e-4e13-4fb9-9b2e-748872d6f859&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_8db89e4e-4e13-4fb9-9b2e-748872d6f859&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;82&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.tswc.edu.controller;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * @ProjectName: edu
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @Package: com.tswc.edu.controller
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * @ClassName: UserContraller
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * @Author: DengZeng
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * @Description: ${description}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @Date: 2018/12/15 15:37
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Version: 1.0
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.entity.TUser;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.service.UserService;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.utils.Page;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.utils.PageBean;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.utils.Result;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Controller;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMapping;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestMethod;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.RequestParam;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.web.bind.annotation.ResponseBody;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;25&lt;/span&gt; &lt;span&gt; * 用户管理
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;27&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; UserContraller
&lt;/span&gt;&lt;span&gt;28&lt;/span&gt; &lt;span&gt; * @create 2018-12-15 15:37
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;30&lt;/span&gt; @RequestMapping(value = &quot;/admin/user&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt;@Controller
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserContraller {
&lt;/span&gt;&lt;span&gt;33&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserService userService;
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; 
&lt;span&gt;36&lt;/span&gt;     @RequestMapping(value = &quot;/list&quot;&lt;span&gt;)
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; list() {
&lt;/span&gt;&lt;span&gt;38&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt; 
&lt;span&gt;40&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;用户列表&lt;/span&gt;
&lt;span&gt;41&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;     @RequestMapping(value = &quot;/listPage&quot;, method =&lt;span&gt; RequestMethod.POST)
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; PageBean&amp;lt;TUser&amp;gt; listPage(@RequestParam(value = &quot;start&quot;, defaultValue = &quot;1&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; start,
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;                                     @RequestParam(value = &quot;length&quot;, defaultValue = &quot;10&quot;) &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageSize,
&lt;/span&gt;&lt;span&gt;45&lt;/span&gt;                                     @RequestParam(value = &quot;user_list_user_name&quot;&lt;span&gt;) String userName,
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt;                                     @RequestParam(value = &quot;user_list_true_name&quot;&lt;span&gt;) String trueName,
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;                                     @RequestParam(value = &quot;order[0][column]&quot;, required = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) Integer orderIndex,
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;                                     @RequestParam(value = &quot;order[0][dir]&quot;, required = &lt;span&gt;false&lt;/span&gt;&lt;span&gt;) String orderDir) {
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         String[] cols = {&quot;&quot;, &quot;&quot;, &quot;user_name&quot;, &quot;password&quot;, &quot;true_name&quot;, &quot;create_time&quot;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt;         Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt; result = userService.listPage((start / pageSize) + 1&lt;span&gt;, pageSize, userName, trueName, cols[orderIndex], orderDir);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (result.isStatus()) {
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; PageBean&amp;lt;TUser&amp;gt;&lt;span&gt;(result.getResultData());
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; PageBean&amp;lt;TUser&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;56&lt;/span&gt; 
&lt;span&gt;57&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除所选择的的数据&lt;/span&gt;
&lt;span&gt;58&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;     @RequestMapping(value = &quot;/delete&quot;, method =&lt;span&gt; RequestMethod.GET)
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt; delete(@RequestParam(value = &quot;checkVal&quot;&lt;span&gt;) String[] ids) {
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;int&lt;/span&gt; result = 0&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt;         result =&lt;span&gt; userService.delete(ids);
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;64&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; 
&lt;span&gt;66&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt;删除一条数据&lt;/span&gt;
&lt;span&gt;67&lt;/span&gt; &lt;span&gt;    @ResponseBody
&lt;/span&gt;&lt;span&gt;68&lt;/span&gt;     @RequestMapping(value = &quot;/deleteOne&quot;, method =&lt;span&gt; RequestMethod.GET)
&lt;/span&gt;&lt;span&gt;69&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt; deleteOne(@RequestParam(value = &quot;id&quot;&lt;span&gt;) String id) {
&lt;/span&gt;&lt;span&gt;70&lt;/span&gt; &lt;span&gt;        userService.deleteOne(id);
&lt;/span&gt;&lt;span&gt;71&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;72&lt;/span&gt; 
&lt;span&gt;73&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;服务层&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40.5&quot;&gt;&lt;img id=&quot;code_img_closed_6822563c-2360-490d-bb2b-b8657ac1d54b&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_6822563c-2360-490d-bb2b-b8657ac1d54b&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_6822563c-2360-490d-bb2b-b8657ac1d54b&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;76&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.tswc.edu.service;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt; &lt;span&gt; * @ProjectName: edu
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt; * @Package: com.tswc.edu.service
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; &lt;span&gt; * @ClassName: UserService
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; &lt;span&gt; * @Author: DengZeng
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt; * @Description: ${description}
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt; &lt;span&gt; * @Date: 2018/12/15 21:25
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt; * @Version: 1.0
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;  &lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt; 
&lt;span&gt;12&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.github.pagehelper.PageHelper;
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.github.pagehelper.PageInfo;
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.entity.TUser;
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.mapper.UserMapper;
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.utils.ExampleUtils;
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.utils.Page;
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.utils.Result;
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.beans.factory.annotation.Autowired;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; org.springframework.stereotype.Service;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tk.mybatis.mapper.entity.Example;
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; tk.mybatis.mapper.entity.Example.Criteria;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt; 
&lt;span&gt;24&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.Arrays;
&lt;/span&gt;&lt;span&gt;25&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; java.util.List;
&lt;/span&gt;&lt;span&gt;26&lt;/span&gt; 
&lt;span&gt;27&lt;/span&gt; &lt;span&gt;/**&lt;/span&gt;
&lt;span&gt;28&lt;/span&gt; &lt;span&gt; * 用户管理服务层
&lt;/span&gt;&lt;span&gt;29&lt;/span&gt; &lt;span&gt; *
&lt;/span&gt;&lt;span&gt;30&lt;/span&gt; &lt;span&gt; * &lt;/span&gt;&lt;span&gt;@author&lt;/span&gt;&lt;span&gt; UserService
&lt;/span&gt;&lt;span&gt;31&lt;/span&gt; &lt;span&gt; * @create 2018-12-15 21:25
&lt;/span&gt;&lt;span&gt;32&lt;/span&gt; &lt;span&gt; *&lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
&lt;span&gt;33&lt;/span&gt; &lt;span&gt;@Service
&lt;/span&gt;&lt;span&gt;34&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; UserService {
&lt;/span&gt;&lt;span&gt;35&lt;/span&gt; &lt;span&gt;    @Autowired
&lt;/span&gt;&lt;span&gt;36&lt;/span&gt;     &lt;span&gt;private&lt;/span&gt;&lt;span&gt; UserMapper userMapper;
&lt;/span&gt;&lt;span&gt;37&lt;/span&gt; 
&lt;span&gt;38&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt; listPage(&lt;span&gt;int&lt;/span&gt; pageCurrent, &lt;span&gt;int&lt;/span&gt;&lt;span&gt; pageSize, String userName, String trueName, String cols, String orderDir) {
&lt;/span&gt;&lt;span&gt;39&lt;/span&gt;         Example example = &lt;span&gt;new&lt;/span&gt; Example(TUser.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;40&lt;/span&gt;         Criteria criteria =&lt;span&gt; example.createCriteria();
&lt;/span&gt;&lt;span&gt;41&lt;/span&gt;         ExampleUtils.getLikeExample(criteria, &quot;userName&quot;&lt;span&gt;, userName);
&lt;/span&gt;&lt;span&gt;42&lt;/span&gt;         ExampleUtils.getLikeExample(criteria, &quot;trueName&quot;&lt;span&gt;, trueName);
&lt;/span&gt;&lt;span&gt;43&lt;/span&gt;         example.setOrderByClause(cols + &quot; &quot; +&lt;span&gt; orderDir);
&lt;/span&gt;&lt;span&gt;44&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt;example.orderBy(cols+&quot; &quot;+orderDir);&lt;/span&gt;
&lt;span&gt;45&lt;/span&gt;         Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt; result = &lt;span&gt;new&lt;/span&gt; Result&amp;lt;Page&amp;lt;TUser&amp;gt;&amp;gt;&lt;span&gt;();
&lt;/span&gt;&lt;span&gt;46&lt;/span&gt; &lt;span&gt;        PageHelper.startPage(pageCurrent, pageSize);
&lt;/span&gt;&lt;span&gt;47&lt;/span&gt;         List&amp;lt;TUser&amp;gt; tUsers =&lt;span&gt; userMapper.selectByExample(example);
&lt;/span&gt;&lt;span&gt;48&lt;/span&gt;         PageInfo&amp;lt;TUser&amp;gt; pageInfo = &lt;span&gt;new&lt;/span&gt; PageInfo&amp;lt;TUser&amp;gt;&lt;span&gt;(tUsers, pageSize);
&lt;/span&gt;&lt;span&gt;49&lt;/span&gt;         Page&amp;lt;TUser&amp;gt; resultData = &lt;span&gt;new&lt;/span&gt; Page&amp;lt;TUser&amp;gt;((&lt;span&gt;int&lt;/span&gt;&lt;span&gt;) pageInfo.getTotal(), pageInfo.getPages(), pageCurrent, pageSize, tUsers);
&lt;/span&gt;&lt;span&gt;50&lt;/span&gt; &lt;span&gt;        result.setResultData(resultData);
&lt;/span&gt;&lt;span&gt;51&lt;/span&gt;         result.setErrCode(0&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;52&lt;/span&gt;         result.setStatus(&lt;span&gt;true&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;53&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; result;
&lt;/span&gt;&lt;span&gt;54&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;55&lt;/span&gt; 
&lt;span&gt;56&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;int&lt;/span&gt;&lt;span&gt; delete(String[] ids) {
&lt;/span&gt;&lt;span&gt;57&lt;/span&gt;         List&amp;lt;String&amp;gt; idList =&lt;span&gt; Arrays.asList(ids);
&lt;/span&gt;&lt;span&gt;58&lt;/span&gt;         Example example = &lt;span&gt;new&lt;/span&gt; Example(TUser.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;59&lt;/span&gt;         Criteria criteria =&lt;span&gt; example.createCriteria();
&lt;/span&gt;&lt;span&gt;60&lt;/span&gt;         criteria.andIn(&quot;id&quot;&lt;span&gt;, idList);
&lt;/span&gt;&lt;span&gt;61&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt;&lt;span&gt; userMapper.deleteByExample(example);
&lt;/span&gt;&lt;span&gt;62&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;63&lt;/span&gt; 
&lt;span&gt;64&lt;/span&gt;     &lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; deleteOne(String id) {
&lt;/span&gt;&lt;span&gt;65&lt;/span&gt; &lt;span&gt;        userMapper.deleteByPrimaryKey(id);
&lt;/span&gt;&lt;span&gt;66&lt;/span&gt; &lt;span&gt;    }
&lt;/span&gt;&lt;span&gt;67&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Mapper接口&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;31.5&quot;&gt;&lt;img id=&quot;code_img_closed_57579f11-cc9b-4347-b656-df2d2b6b38b7&quot; class=&quot;code_img_closed&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif&quot; alt=&quot;&quot;/&gt;&lt;img id=&quot;code_img_opened_57579f11-cc9b-4347-b656-df2d2b6b38b7&quot; class=&quot;code_img_opened&quot; src=&quot;https://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif&quot; alt=&quot;&quot;/&gt;&lt;div id=&quot;cnblogs_code_open_57579f11-cc9b-4347-b656-df2d2b6b38b7&quot; class=&quot;cnblogs_code_hide&quot; readability=&quot;58&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;package&lt;/span&gt;&lt;span&gt; com.tswc.edu.mapper;
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; 
&lt;span&gt;3&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.entity.TUser;
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;import&lt;/span&gt;&lt;span&gt; com.tswc.edu.utils.MyMapper;
&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; 
&lt;span&gt;6&lt;/span&gt; &lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt; UserMapper &lt;span&gt;extends&lt;/span&gt; MyMapper&amp;lt;TUser&amp;gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;span class=&quot;cnblogs_code_collapse&quot;&gt;View Code&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;（7）.最终效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1147108/201812/1147108-20181216234507023-1019307374.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 16 Dec 2018 15:47:00 +0000</pubDate>
<dc:creator>天生吾材</dc:creator>
<og:description>关于SpringBoot和PageHelper，前篇博客已经介绍过Spring boot入门（二）：Spring boot集成MySql,Mybatis和PageHelper插件，前篇博客大致讲述了S</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dz-boss/p/10129211.html</dc:identifier>
</item>
<item>
<title>记录一则xtts测试遇到的诡异现象 - AlfredZhao</title>
<link>http://www.cnblogs.com/jyzhao/p/10129186.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/jyzhao/p/10129186.html</guid>
<description>&lt;p&gt;&lt;strong&gt;背景：&lt;/strong&gt;在一次xtts的测试中遇到因源库数据文件名称包含特殊字符导致表空间全量备份缺失文件，之所以说是诡异现象，是因为xtts的全备日志不报任何错误，在恢复阶段才发现缺少文件，这个缺陷比较隐晦，尤其在迁移的表空间较多的场景下，不注意的话很难第一时间发现。&lt;br/&gt;&lt;strong&gt;环境：&lt;/strong&gt;客户环境是AIX 6.1 + Oracle 10.2.0.3，使用xtts脚本2.0版本，本文在测试环境OEL 5.7 + Oracle 10.2.0.5 下，使用xtts脚本3.0实验，同样可以重现这个现象，说明是普遍现象。&lt;/p&gt;

&lt;p&gt;查询本次测试迁移的表空间对应数据文件信息：&lt;br/&gt;set lines 180&lt;br/&gt;col file_name for a55&lt;br/&gt;select file_id, file_name, status, online_status from dba_data_files where tablespace_name in ('DBS_D_JINGYU','DBS_I_JINGYU');&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SYS@orcl&amp;gt; select file_id, file_name, status, online_status from dba_data_files where tablespace_name in ('DBS_D_JINGYU','DBS_I_JINGYU');

   FILE_ID FILE_NAME                                               STATUS    ONLINE_
---------- ------------------------------------------------------- --------- -------
         5 /oradata/orcl/dbs_d_jingyu01.dbf                        AVAILABLE ONLINE
         6 /oradata/orcl/dbs_i_jingyu01.dbf                        AVAILABLE ONLINE
         7 /oradata/orcl/dbs_d_jingyu02.dbf                        AVAILABLE ONLINE
         8 /oradata/orcl/dbs_d_jingyu03.dbf                        AVAILABLE ONLINE
         9 /oradata/orcl/dbs_d_jingyu04.dbf                        AVAILABLE ONLINE
        10 /oradata/orcl/dbs_d_jingyu05.dbf                        AVAILABLE ONLINE
        11 /oradata/orcl/dbs_d_jingyu06.dbf                        AVAILABLE ONLINE
        12 /oradata/orcl/dbs_d_jingyu07.dbf                        AVAILABLE ONLINE
        13 /oradata/orcl/dbs_d_jingyu08.dbf                        AVAILABLE ONLINE
        14 /oradata/orcl/                                          AVAILABLE ONLINE
            dbs_d_jingyu09.dbf

        15 /oradata/orcl/                                          AVAILABLE ONLINE
           dbs_d_jingyu10.dbf


11 rows selected.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;发现14和15号文件本身名字就包含特殊字符，导致显示发生折行。&lt;/p&gt;

&lt;p&gt;此时直接测试xtts备份，就会发现虽然日志不会有任何报错，但实际上备份跑完之后，发现dbs_d_jingyu这个表空间整个都没有成功备份出来，只有其他表空间备份成功，比如我这里实验环境就是只有dbs_i_jingyu表空间的数据文件成功备份：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[oracle@db10 xtts]$ nohup sh full_backup.sh &amp;gt; full_backup.log &amp;amp;
[oracle@db10 src_backup]$ ls -lrth
total 31M
-rw-rw---- 1 ora10 1000 31M Dec 16 23:26 DBS_I_JINGYU_6.tf&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;需要处理名字含特殊符号的数据文件，我这里采用的方法是copy备份这些数据文件，然后停机（一般业务闲时操作影响应该也不大，看业务重要程度来决定）offline相关数据文件，切换到copy副本并恢复成功，最后online数据文件，核心步骤参考如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;RMAN&amp;gt;
backup as copy datafile 14 format '/oradata/orcl/dbs_d_jingyu09.dbf';  
backup as copy datafile 15 format '/oradata/orcl/dbs_d_jingyu10.dbf';  

list copy of datafile 14,15; 

--SQL&amp;gt;alter database datafile 14,15 offline;
sql 'alter database datafile 14,15 offline';

switch datafile 14,15 to copy;
recover datafile 14,15;

--SQL&amp;gt;alter database datafile 14,15 online;
sql 'alter database datafile 14,15 online';&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后查询本次测试迁移的表空间对应数据文件信息，已经显示正常，再次去xtts备份就可以正常备份出dbs_d_jingyu表空间的数据文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;附录：&lt;/strong&gt;&lt;br/&gt;本文的测试环境是通过在添加数据文件时，利用类似这样的不规范操作模拟实现的：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SYS@orcl&amp;gt; alter tablespace dbs_d_jingyu add datafile '/oradata/orcl/
  2  dbs_d_jingyu10.dbf' size 10M;

Tablespace altered.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;测试过这种情况下rman去备份是可以成功的，但xtts脚本备份就有问题，应该算是xtts的脚本缺陷，但是对于这类不规范的情况还是要尽可能避免。&lt;br/&gt;所以建议以后xtts的准备工作多加一项数据文件数量的检查比对，及早发现这类情况提前处置：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;select count(1) from dba_data_files where tablespace_name in ('DBS_D_JINGYU','DBS_I_JINGYU');&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;还有一个需要注意的地方，如果是后发现想进行增量处理未备份的数据文件，需要确保先把之前已经备份成功的文件保存好，因为实验中发现xtts如果重新跑full_backup.sh脚本会自动清空dfcopydir定义的目录。&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 15:47:00 +0000</pubDate>
<dc:creator>AlfredZhao</dc:creator>
<og:description>背景： 在一次xtts的测试中遇到因源库数据文件名称包含特殊字符导致表空间全量备份缺失文件，之所以说是诡异现象，是因为xtts的全备日志不报任何错误，在恢复阶段才发现缺少文件，这个缺陷比较隐晦，尤其在</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/jyzhao/p/10129186.html</dc:identifier>
</item>
<item>
<title>浅谈Java内存模型 - CodeBear</title>
<link>http://www.cnblogs.com/CodeBear/p/10129159.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/CodeBear/p/10129159.html</guid>
<description>&lt;p&gt;Java内存模型虽说是一个老生常谈的问题 ，也是大厂面试中绕不过的，甚至初级面试也会问到。但是真正要理解起来，还是相当困难，主要这个东西看不见，摸不着。网上已经有大量的博客，但是人家的终究是人家的，自己也要好好的去理解，去消化。今天我也来班门弄斧，说下Java内存模型。&lt;/p&gt;
&lt;p&gt;说到Java内存模型，不得不说到 计算机硬件方面的知识。&lt;/p&gt;
&lt;h3 id=&quot;计算机硬件体系&quot;&gt;计算机硬件体系&lt;/h3&gt;
&lt;p&gt;我们都知道CPU 和 内存是计算机中比较核心的两个东西，它们之间会频繁的交互，随着CPU发展越来越快，内存的读写的速度远远不如CPU的处理速度，所以CPU厂商在CPU上加了一个 高速缓存，用来缓解这种问题。我们在看CPU硬件参数的时候，也会看到有这样的参数：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-18b039f018ef35b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;br/&gt;一般高速缓存有3级：L1，L2，L3，CPU与内存的交互，就发生了变化，CPU不再与内存直接交互，CPU会先去L1中寻找数据，没有的话，再去L2中寻找，然后是L3，最后才去内存寻找（更准确的来说，应该是CPU中的寄存器去寻找）。&lt;/p&gt;
&lt;p&gt;我们可以画一张图来理解：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-4c930a5a91c776f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;看起来一切都很美好，但是随着科技的进步，CPU厂商们叒搞事了，推出了多核CPU，每个CPU上又有高速缓存，CPU与内存的交互就变成了下面这个样子：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-43ec825102485e4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这样就会引发一个问题：&lt;strong&gt;缓存不一致&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为什么会出现这个问题呢？&lt;/p&gt;
&lt;p&gt;CPU需要修改某个数据，是先去Cache中找，如果Cache中没有找到，会去内存中找，然后把数据复制到Cache中，下次就不需要再去内存中寻找了，然后进行修改操作。而修改操作的过程是这样的：在Cache里面修改数据，然后再把数据刷新到主内存。其他CPU需要读取数据，也是先去Cache中去寻找，如果找到了就不会去内存找了。&lt;/p&gt;
&lt;p&gt;所以当两个CPU的Cache同时都拥有某个数据，其中一个CPU修改了数据，另外一个CPU是无感知的，并不知道这个数据已经不是最新的了，它要读取数据还是从自己的Cache中读取，这样就导致了“&lt;strong&gt;缓存不一致&lt;/strong&gt;”。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;其实对于这样的描述并不是十分准确，因为计算、读取等操作都是在CPU的寄存器中进行的，这样的描述是为了让问题变得更简单，相信学过计算机体系的人应该非常清楚整个流程，在这里就简单的描述下。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解决这个问题的方法有很多，比如：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;总线加锁（此方法性能较低，现在已经不会再使用）&lt;/li&gt;
&lt;li&gt;MESI协议&lt;br/&gt;这是Intel提出的，MESI协议也是相当复杂，在这里我就简单的说下：当一个CPU修改了Cache中的数据，会通知其他缓存了这个数据的CPU，其他CPU会把Cache中这份数据的Cache Line置为无效，要读取数据的话，直接去内存中获取，不会再从Cache中获取了。&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;当然还有其他的解决方案，MESI协议是其中比较出名的。&lt;/p&gt;
&lt;h3 id=&quot;java线程与硬件处理器&quot;&gt;Java线程与硬件处理器&lt;/h3&gt;
&lt;p&gt;其实，我们在Java中开启一个线程，最终Java也会交给CPU去执行。&lt;br/&gt;具体的流程是：我们在使用Java线程，内部会调用操作系统(OS)的内核线程（Kernel-Level Thread），这种线程是操作系统内核（Kernel）直接支持的，内核通过调度器，对线程进行调度，并将线程交给各个CPU内核去处理。&lt;/p&gt;
&lt;p&gt;如下图所示：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-4d09e7e001b2cd39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;java内存模型&quot;&gt;Java内存模型&lt;/h3&gt;
&lt;p&gt;看到标题，大家肯定会想：我靠，难道上面说的都和Java内存模型没有关系吗，从这里才是真正介绍Java内存模型吗？其实，并不是，Java内存模型是一个抽象的概念，其实并不存在，它描述的是一种规范，最终Java程序都会交给CPU去运行，所以上面是计算机硬件体系是基础，有了上面的基础，才有了Java内存模型，或者说Java的内存模型就是利用了计算机硬件体系。&lt;/p&gt;
&lt;p&gt;还是从一张图来入手：&lt;br/&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-351ea149b40c6bed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;本地内存：存放的是 私有变量 和 主内存数据的副本。如果私有变量是基本数据类型，则直接存放在本地内存，如果是引用类型变量，存放的是引用（指针），实际的数据存放在主内存。本地内存是不共享的，只有属于它的线程可以访问。也有好多人把 本地内存 称之为 线程栈 或者 工作空间。&lt;/p&gt;
&lt;p&gt;主内存：存放的是共享的数据，所有线程都可以访问。当然它也有不少其他称呼，比如 堆内存，共享内存等等。&lt;/p&gt;
&lt;p&gt;Java内存模型规定了所有对共享变量的读写操作都必须在本地内存中进行，需要先从主内存中拿到数据，复制到本地内存，然后在本地内存中对数据进行修改，再刷新回主内存。&lt;/p&gt;
&lt;p&gt;通过前面的铺垫，我们应该认识到Java的执行最终还是会交给CPU去处理，但是Java的内存模型和硬件架构又不完全一致。对于硬件来说，只有CPU，Cache和主内存，并没有Java内存模型中本地内存（线程栈、工作空间）或者主内存（共享内存，堆内存）的概念，所以不管是Java内存模型中的本地内存，还是主内存的数据，最终都会存储在CPU（更准确的来说 是寄存器）、Cache、内存上。&lt;/p&gt;
&lt;p&gt;所以，Java内存模型和计算机硬件架构存在这样的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/15100432-986ad5bb48d8fb94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java内存模型就是为了解决多线程对共享数据的读写一致性问题。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;并发编程中三个重要特性&quot;&gt;并发编程中三个重要特性&lt;/h3&gt;
&lt;h4 id=&quot;原子性&quot;&gt;原子性：&lt;/h4&gt;
&lt;p&gt;不可分割，同生共死。&lt;br/&gt;i=1&lt;br/&gt;具有原子性，直接 在本地内存中进行赋值操作。&lt;/p&gt;
&lt;p&gt;i++;&lt;br/&gt;不具有原子性，有三个步骤&lt;br/&gt;1.把i读取出来(原子性)&lt;br/&gt;2.在本地内存中做自增运算(原子性)&lt;br/&gt;3.再把值写回i(原子性)&lt;/p&gt;
&lt;p&gt;多个原子性操作组合在一起，就不具有原子性了。&lt;/p&gt;
&lt;p&gt;一般情况下，基本数据类型的赋值，读取都是具有原子性的。&lt;/p&gt;
&lt;h4 id=&quot;可见性&quot;&gt;可见性&lt;/h4&gt;
&lt;p&gt;一个线程在本地内存中修改了共享内存的数据，对于其他持有该数据的线程是“不可见”的。&lt;/p&gt;
&lt;h4 id=&quot;有序性&quot;&gt;有序性&lt;/h4&gt;
&lt;p&gt;代码在运行的时候，执行顺序可能并不是严格从上到下执行的，会进行指令重排。&lt;br/&gt;根据CPU流水线作业，一般来说 简单的操作会先执行，复杂的操作后执行。&lt;br/&gt;指令重排会有两个规则：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;as-if-seria&lt;br/&gt;不管怎么重排序，单线程的执行结果不能发生改变。正是由于这个特性，在单线程中，程序员一般无需理会重排序带来的问题。&lt;/li&gt;
&lt;li&gt;happens-before
&lt;ol&gt;&lt;li&gt;程序次序规则&lt;br/&gt;一段代码在单线程中执行的结果是有序的（感觉就是as-if-seria原则）&lt;/li&gt;
&lt;li&gt;volatile规则（以后会花一整节内容介绍，这里不展开）&lt;/li&gt;
&lt;li&gt;锁定规则&lt;br/&gt;如果锁处于Lock的状态，必须等Unlock后，才能再次进行Lock操作。&lt;/li&gt;
&lt;li&gt;传递规则&lt;br/&gt;A happens-before B , B happens-before C，那么A happens-before C。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Java内存模型是个相当复杂的东西，我在这里可能还说不上是谈，只能说是“蜻蜓点水 ”般的介绍下。希望通过这篇文章，大家可以对Java模型有一个初步的了解。&lt;/p&gt;
&lt;p&gt;以后，我也会介绍Synchronized 和 volatile关键字等等，我可能会再次提到本节中涵盖的内容，并做进一步的补充说明。&lt;/p&gt;
&lt;p&gt;好了，本文的内容到这里就结束了，在写之前，已经做好心理准备了，可能需要花上半天时间，但是实际上远远不止半天，在写的过程中，翻阅了大量的文章，包括 知乎、博客园、简书 等等，发现 如果要“较真”“抬杠”的话，文章与文章之间也有有冲突的地方，甚至一篇文章中，也有前后矛盾的地方。我也不奢求本文中介绍的所有内容都是正确的。为了不误人子弟，如果大家发现有错误，希望可以及时向我提出，我也会尽快核实后修改。&lt;/p&gt;
&lt;p&gt;感谢大家可以看到最后，再见。&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 15:31:00 +0000</pubDate>
<dc:creator>CodeBear</dc:creator>
<og:description>Java内存模型虽说是一个老生常谈的问题 ，也是大厂面试中绕不过的，甚至初级面试也会问到。但是真正要理解起来，还是相当困难，主要这个东西看不见，摸不着。网上已经有大量的博客，但是人家的终究是人家的，自</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/CodeBear/p/10129159.html</dc:identifier>
</item>
<item>
<title>C++中类成员的访问控制权限 - icuic</title>
<link>http://www.cnblogs.com/outs/p/10128993.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/outs/p/10128993.html</guid>
<description>&lt;h2 id=&quot;引入三种访问控制符&quot;&gt;引入三种访问控制符&lt;/h2&gt;
&lt;p&gt;C++中，存在三种访问控制修饰符，它们分别是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;public // 公有成员&lt;/li&gt;
&lt;li&gt;protected // 保护成员&lt;/li&gt;
&lt;li&gt;private // 私有成员&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;术语&quot;&gt;术语&lt;/h2&gt;
&lt;p&gt;为了使文章容易理解，我们首先对以下术语作出说明：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;对象： 与类相对，对象是类的实例。&lt;/li&gt;
&lt;li&gt;派生类：与基类相对，派生类就是子类。&lt;/li&gt;
&lt;li&gt;继承：继承与派生是一个意思。继承偏重指出此过程中不变的部分，而派生则偏重于在原有基础上新增的部分。&lt;/li&gt;
&lt;li&gt;成员：类中成员变量和成员函数的统称。&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;对象的访问权限&quot;&gt;对象的访问权限&lt;/h2&gt;
&lt;p&gt;在以下的例子中，我们创建了一个简单的类。&lt;br/&gt;下面，我们就来探究一下，对于该类中被不同访问控制修饰符修饰的成员，该类的对象都有什么样的访问权限。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

class CBase
{
private:
    int a_base_private;
protected:
    int b_base_protected;
public:
    int c_base_public;
    
public: 
    CBase(){a_base_private = 1; b_base_protected = 2; c_base_public = 3;}
    ~CBase(){}

    int getA() const {return a_base_private;}       // OK, 类可以访问自身的所有成员
    int getB() const {return b_base_protected;}     // OK, 类可以访问自身的所有成员
    int getC() const {return c_base_public;}        // OK, 类可以访问自身的所有成员
};

int main()
{
    int tmp;
    CBase baseObj;
    
    //baseObj.a_base_private = 1;           // KO, 对象不能访问类的private成员
    //baseObj.b_base_protected = 1;         // KO, 对象不能访问类的protected成员
    baseObj.c_base_public = 1;              // OK, 对象可以访问类的public成员
    
    tmp = baseObj.getA();       // OK, 对象可以访问类的public成员
    tmp = baseObj.getB();       // OK, 对象可以访问类的public成员
    tmp = baseObj.getC();       // OK, 对象可以访问类的public成员
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;从以上实践中可以得出以下结论：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;类可以访问自身的所有成员，不论是private, protected 还是 public。&lt;/li&gt;
&lt;li&gt;对象只能访问类的public成员。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;友元的访问权限&quot;&gt;友元的访问权限&lt;/h2&gt;
&lt;p&gt;在以上例子的基础上，让我们来考虑一下，对于该类中被不同访问控制修饰符修饰的成员，该类的友元函数和友元类对这些成员都有什么样的访问权限。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

class CBase;
class CFriend;
void ClearBaseA(CBase &amp;amp;obj);

class CBase
{
friend  CFriend;                            // 声明CFriend为自己的友元类
friend  void ClearBaseB(CBase &amp;amp;obj);        // 声明ClearBaseA为自己的友元函数

private:
    int a_base_private;
protected:
    int b_base_protected;
public:
    int c_base_public;
    
public: 
    CBase(){a_base_private = 1; b_base_protected = 2; c_base_public = 3;}
    ~CBase(){}

    int getA() const {return a_base_private;}       // OK, 类可以访问自身的所有成员
    int getB() const {return b_base_protected;}     // OK, 类可以访问自身的所有成员
    int getC() const {return c_base_public;}        // OK, 类可以访问自身的所有成员
};

class CFriend
{
private:
    CBase obj;
    
public:
    CFriend(){}
    ~CFriend(){}
    
    int setBaseA(int f) {obj.a_base_private = f;}       // OK, 在友元类中，可以访问Base类的私有成员
    int getBaseA() const {return obj.getA();}
};

void ClearBaseB(CBase &amp;amp;obj)
{
    obj.b_base_protected = 0;           // OK, 在友元函数中，可以访问Base类的保护成员
}

int main()
{
    int tmp;
    CBase baseObj;
    CFriend friendObj;
    
    cout &amp;lt;&amp;lt; baseObj.getB() &amp;lt;&amp;lt; endl;     // 通过构造函数初始化为2
    ClearBaseB(baseObj);
    cout &amp;lt;&amp;lt; baseObj.getB() &amp;lt;&amp;lt; endl;     // 被友元函数给清0了
    
    cout &amp;lt;&amp;lt; friendObj.getBaseA() &amp;lt;&amp;lt; endl;   // 通过构造函数初始化为1
    friendObj.setBaseA(7);
    cout &amp;lt;&amp;lt; friendObj.getBaseA() &amp;lt;&amp;lt; endl;   // 被友元类给设置为了7
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由上例中可以看出，友元可以访问类中的private和protected成员，对于public成员，当然更是可以访问的了，虽然以上例子中并没有验证这一点。&lt;br/&gt;所以，我们可以得出以下结论：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;友元函数或友元类可以访问类中的所有成员。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;我们换一个角度，通过以下表格总结一下。&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;可访问&lt;/td&gt;
&lt;td&gt;可访问&lt;/td&gt;
&lt;td&gt;可访问&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;可访问&lt;/td&gt;
&lt;td&gt;不可访问&lt;/td&gt;
&lt;td&gt;可访问&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;可访问&lt;/td&gt;
&lt;td&gt;不可访问&lt;/td&gt;
&lt;td&gt;可访问&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;引入三种继承方式&quot;&gt;引入三种继承方式&lt;/h2&gt;
&lt;p&gt;在C++中，在继承的过程中，有以下三种继承方式，它们分别是：&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;public (公有继承)&lt;/li&gt;
&lt;li&gt;protected (保护继承)&lt;/li&gt;
&lt;li&gt;private (私有继承)&lt;br/&gt;这三个关键字与之前的三种访问控制修饰符刚好相同，但在这里，它们有不同的意义。&lt;/li&gt;
&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;对于public继承，基类中的成员的访问控制修饰符不作任何改动，原样继承到派生类中。&lt;br/&gt;也就是说，基类中的public成员，到了派生类中，仍然是派生类的public成员；基类中的protected成员，到了派生类中，仍然是protected成员；基类中的private成员，它对派生类不可见。&lt;/li&gt;
&lt;li&gt;对于protected继承，基类中的public成员，在派生类中被派生为protected成员；基类中的protected成员，在派生类中仍然是protected成员；基类中的private成员，在派生类不可见。&lt;/li&gt;
&lt;li&gt;对于private继承，基类中的public和protected成员，在派生类中，均被派生为了private成员；而基类中的private成员，对派生类不可见。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;public继承方式&quot;&gt;public继承方式&lt;/h2&gt;
&lt;p&gt;在第一个例子的基础之上，我们通过public方式继承出一个新的派生类。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

class CBase
{
private:
    int a_base_private;
protected:
    int b_base_protected;
public:
    int c_base_public;
    
public: 
    CBase(){a_base_private = 1; b_base_protected = 2; c_base_public = 3;}
    ~CBase(){}

    int getA() const {return a_base_private;}       // OK, 类可以访问自身的所有成员
    int getB() const {return b_base_protected;}     // OK, 类可以访问自身的所有成员
    int getC() const {return c_base_public;}        // OK, 类可以访问自身的所有成员
};

class CDerived:public CBase
{
private:
    int x_derived_private;
protected:
    int y_derived_protected;
public:
    int z_derived_private;
    
public:
    CDerived(){x_derived_private = 4; y_derived_protected = 5; z_derived_private = 6;}
    ~CDerived(){}
    
    //void setBaseA(int t){a_base_private = t;}     // KO, 派生类中不能访问基类的private成员
    void setBaseB(int t){b_base_protected = t;}     // OK, 派生类中可以访问基类的protected成员
    void setBaseC(int t){c_base_public = t;}        // OK, 派生类中可以访问基类的public成员  

    int getX() const {return x_derived_private;}
    int getY() const {return y_derived_protected;}
    int getZ() const {return z_derived_private;}
};

int main()
{
    CDerived derivedObj;
    
    //derivedObj.a_base_private = 1;            // KO, 基类中由private修饰的a_base_private，对派生类是不可见的，即使在派生类中都不能访问，更别提派生类对象了。 
    //derivedObj.b_base_protected = 1;          // KO, 对象不能访问类的protected成员(public方式继承的protected成员，在派生类中仍为protected成员)
    derivedObj.c_base_public = 1;               // OK, 对象可以访问类的public成员(public方式继承的public成员，在派生类中仍为public成员)
    
    cout &amp;lt;&amp;lt; derivedObj.getA() &amp;lt;&amp;lt; endl;      // OK, 对象可以访问类的public成员(public方式继承的public成员，在派生类中仍为public成员)
    derivedObj.setBaseB(8);                 // OK, 对象可以访问类的public成员
    cout &amp;lt;&amp;lt; derivedObj.getB() &amp;lt;&amp;lt; endl;      // OK, 对象可以访问类的public成员(public方式继承的public成员，在派生类中仍为public成员)
    derivedObj.setBaseC(9);                 // OK, 对象可以访问类的public成员
    cout &amp;lt;&amp;lt; derivedObj.getC() &amp;lt;&amp;lt; endl;      // OK, 对象可以访问类的public成员(public方式继承的public成员，在派生类中仍为public成员)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由以上例子可以看出：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;基类中的private, protected, public成员，经由public继承之后，在派生类中分别为不可见private, protected,public成员。&lt;/li&gt;
&lt;li&gt;派生类中不能访问基类的private成员，但可以访问基类的private和protected成员。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;protected继承方式&quot;&gt;protected继承方式&lt;/h2&gt;
&lt;p&gt;在第一个例子的基础之上，我们通过protected方式继承出一个新的派生类。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

class CBase
{
private:
    int a_base_private;
protected:
    int b_base_protected;
public:
    int c_base_public;
    
public: 
    CBase(){a_base_private = 1; b_base_protected = 2; c_base_public = 3;}
    ~CBase(){}

    int getA() const {return a_base_private;}       // OK, 类可以访问自身的所有成员
    int getB() const {return b_base_protected;}     // OK, 类可以访问自身的所有成员
    int getC() const {return c_base_public;}        // OK, 类可以访问自身的所有成员
};

class CDerived:protected CBase
{
private:
    int x_derived_private;
protected:
    int y_derived_protected;
public:
    int z_derived_private;
    
public:
    CDerived(){x_derived_private = 4; y_derived_protected = 5; z_derived_private = 6;}
    ~CDerived(){}

    //void setBaseA(int t){a_base_private = t;}     // KO, 派生类中不能访问基类的private成员
    void setBaseB(int t){b_base_protected = t;}     // OK, 派生类中可以访问基类的protected成员
    void setBaseC(int t){c_base_public = t;}        // OK, 派生类中可以访问基类的public成员

    int getX() const {return x_derived_private;}    // OK, 类可以访问自身的所有成员
    int getY() const {return y_derived_protected;}  // OK, 类可以访问自身的所有成员
    int getZ() const {return z_derived_private;}    // OK, 类可以访问自身的所有成员
};

int main()
{
    CDerived derivedObj;
    
    //derivedObj.a_base_private = 1;            // KO, 对象不能访问类的private成员(protected方式继承的private成员，在派生类中不可见)
    //derivedObj.b_base_protected = 1;          // KO, 对象不能访问类的protected成员(protected方式继承的protected成员，在派生类中仍为protected成员)
    //derivedObj.c_base_public = 1;             // KO, 对象不可以访问类的protected成员(protected方式继承的public成员，在派生类中成为protected成员)
    
    //cout &amp;lt;&amp;lt; derivedObj.getA() &amp;lt;&amp;lt; endl;        // KO, 对象不可以访问类的protected成员(protected方式继承的public成员，在派生类中成为protected成员)
    //cout &amp;lt;&amp;lt; derivedObj.getB() &amp;lt;&amp;lt; endl;        // KO, 对象不可以访问类的protected成员(protected方式继承的public成员，在派生类中成为protected成员)
    //cout &amp;lt;&amp;lt; derivedObj.getC() &amp;lt;&amp;lt; endl;        // KO, 对象不可以访问类的protected成员(protected方式继承的public成员，在派生类中成为protected成员)
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由以上例子可以看出：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;基类中的private, protected, public成员，经由protected继承之后，在派生类中分别为不可见private, protected,protected成员。&lt;/li&gt;
&lt;li&gt;派生类中不能访问基类的private成员，但可以访问基类的private和protected成员。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;private继承方式&quot;&gt;private继承方式&lt;/h2&gt;
&lt;p&gt;在第一个例子的基础之上，我们通过private方式继承出一个新的派生类。&lt;/p&gt;
&lt;pre class=&quot;cpp&quot;&gt;
&lt;code&gt;#include &amp;lt;iostream&amp;gt;

using namespace std;

class CBase
{
private:
    int a_base_private;
protected:
    int b_base_protected;
public:
    int c_base_public;
    
public: 
    CBase(){a_base_private = 1; b_base_protected = 2; c_base_public = 3;}
    ~CBase(){}

    int getA() const {return a_base_private;}       // OK, 类可以访问自身的所有成员
    int getB() const {return b_base_protected;}     // OK, 类可以访问自身的所有成员
    int getC() const {return c_base_public;}        // OK, 类可以访问自身的所有成员
};

class CDerived:private CBase
{
private:
    int x_derived_private;
protected:
    int y_derived_protected;
public:
    int z_derived_private;
    
public:
    CDerived(){x_derived_private = 4; y_derived_protected = 5; z_derived_private = 6;}
    ~CDerived(){}

    //void setBaseA(int t){a_base_private = t;}     // KO, 派生类中不能访问基类的private成员，因为其在派生类中不可见
    void setBaseB(int t){b_base_protected = t;}     // OK, 派生类中可以访问基类的protected成员
    void setBaseC(int t){c_base_public = t;}        // OK, 派生类中可以访问基类的public成员

    int getX() const {return x_derived_private;}    // OK, 类可以访问自身的所有成员
    int getY() const {return y_derived_protected;}  // OK, 类可以访问自身的所有成员
    int getZ() const {return z_derived_private;}    // OK, 类可以访问自身的所有成员
};

int main()
{
    CDerived derivedObj;
    
    //derivedObj.a_base_private = 1;            // KO, (private方式继承的private成员，在派生类中不可见)
    //derivedObj.b_base_protected = 1;          // KO, (private方式继承的protected成员，在派生类中不可见)
    //derivedObj.c_base_public = 1;             // KO, (private方式继承的public成员，在派生类中成为不可见)
    
    //cout &amp;lt;&amp;lt; derivedObj.getA() &amp;lt;&amp;lt; endl;        // KO, (private方式继承的public成员，在派生类中不可见)
    //cout &amp;lt;&amp;lt; derivedObj.getB() &amp;lt;&amp;lt; endl;        // KO, (private方式继承的public成员，在派生类中不可见)
    //cout &amp;lt;&amp;lt; derivedObj.getC() &amp;lt;&amp;lt; endl;        // KO, (private方式继承的public成员，在派生类中不可见)
    
    cout &amp;lt;&amp;lt; derivedObj.getX() &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; derivedObj.getY() &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; derivedObj.getZ() &amp;lt;&amp;lt; endl;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;由以上例子可以看出：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;基类中的private, protected, public成员，经由private继承之后，在派生类中均不可见。&lt;/li&gt;
&lt;li&gt;派生类中不能访问基类的private成员，但可以访问基类的private和protected成员。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;小结-1&quot;&gt;小结&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;不论何种继承方式，派生类都不能访问基类的private成员，它只能访问基类的public和protected成员。&lt;/li&gt;
&lt;li&gt;三种继承方式对不同访问控制符修饰的成员的影响如下表所示。&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;public&lt;/td&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;友元和类一样，可以访问类的所有成员。&lt;/li&gt;
&lt;li&gt;对象只能访问类的public成员。&lt;/li&gt;
&lt;li&gt;派生类只能访问基类的public和protected成员，而不能访问基类的private成员。&lt;/li&gt;
&lt;li&gt;对于派生出来的类，首先根据继承方式，确定基类各成员在经指定的继承方式继承后的访问控制权限(经继承后基类各成员是变成了public,protected还是private),然后根据第1、2、3点对各成员进行访问。&lt;/li&gt;
&lt;li&gt;经继承后，基类中的成员会根据继承方式，对各成员的访问控制符进行修改。修改之后，基类中的private成员对派生类不可见。&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
</description>
<pubDate>Sun, 16 Dec 2018 15:31:00 +0000</pubDate>
<dc:creator>icuic</dc:creator>
<og:description>引入三种访问控制符 C++中，存在三种访问控制修饰符，它们分别是： public // 公有成员 protected // 保护成员 private // 私有成员 术语 为了使文章容易理解，我们首先</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/outs/p/10128993.html</dc:identifier>
</item>
<item>
<title>空间数据可视化之ArcLayer详解 - 木的树</title>
<link>http://www.cnblogs.com/dojo-lzz/p/10129152.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dojo-lzz/p/10129152.html</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/412020/201812/412020-20181216232431861-1805359753.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;deck-overlay中&lt;/h3&gt;
&lt;p&gt;首先使用d3中的scaleQuantile将数据进行分类，scaleQuantile方法是d3中的一种数据分类方法（https://www.cnblogs.com/kidsitcn/p/7182274.html）&lt;br/&gt;https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/arc/counties.json&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img2018.cnblogs.com/blog/412020/201812/412020-20181216232544579-558386844.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;_getArcs({data, selectedFeature}) {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (!data || !&lt;span&gt;selectedFeature) {
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
    }

    const {flows, centroid} &lt;/span&gt;=&lt;span&gt; selectedFeature.properties;

    const arcs &lt;/span&gt;= Object.keys(flows).map(toId =&amp;gt;&lt;span&gt; {
      const f &lt;/span&gt;=&lt;span&gt; data[toId];
      &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; {
        source: centroid,
        target: f.properties.centroid,
        value: flows[toId]
      };
    });

    const scale &lt;/span&gt;=&lt;span&gt; scaleQuantile()
      .domain(arcs.map(a &lt;/span&gt;=&amp;gt;&lt;span&gt; Math.abs(a.value)))
      .range(inFlowColors.map((c, i) &lt;/span&gt;=&amp;gt;&lt;span&gt; i));

    arcs.forEach(a &lt;/span&gt;=&amp;gt;&lt;span&gt; {
      a.gain &lt;/span&gt;=&lt;span&gt; Math.sign(a.value);
      a.quantile &lt;/span&gt;=&lt;span&gt; scale(Math.abs(a.value));
    });

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; arcs;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;scaleQuantile是一种将连续的值转化成离散的方法，最终离散成这几种颜色分类&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/412020/201812/412020-20181216232655568-603978058.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;arc-layer中&lt;/h3&gt;
&lt;p&gt;这里还是使用了实例化的方法，先添加一堆实例化变量：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;49&quot;&gt;
&lt;pre&gt;
&lt;span&gt;initializeState() {
    const attributeManager &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getAttributeManager();

    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; eslint-disable max-len &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
    attributeManager.addInstanced({
      instancePositions: {
        size: &lt;/span&gt;4&lt;span&gt;,
        transition: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        accessor: [&lt;/span&gt;'getSourcePosition', 'getTargetPosition'&lt;span&gt;],
        update: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.calculateInstancePositions
      },
      instanceSourceColors: {
        size: &lt;/span&gt;4&lt;span&gt;,
        type: GL.UNSIGNED_BYTE,
        transition: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        accessor: &lt;/span&gt;'getSourceColor'&lt;span&gt;,
        update: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.calculateInstanceSourceColors
      },
      instanceTargetColors: {
        size: &lt;/span&gt;4&lt;span&gt;,
        type: GL.UNSIGNED_BYTE,
        transition: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        accessor: &lt;/span&gt;'getTargetColor'&lt;span&gt;,
        update: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.calculateInstanceTargetColors
      }
    });
    &lt;/span&gt;&lt;span&gt;/*&lt;/span&gt;&lt;span&gt; eslint-enable max-len &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;&lt;span&gt;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后是制作图形，这里使用50个点来模拟一条抛物线的效果&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;54&quot;&gt;
&lt;pre&gt;
&lt;span&gt;_getModel(gl) {
    let positions &lt;/span&gt;=&lt;span&gt; [];
    const NUM_SEGMENTS &lt;/span&gt;= 50; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 利用50个点来模拟曲线&lt;/span&gt;
    &lt;span&gt;/*&lt;/span&gt;&lt;span&gt;
     *  (0, -1)-------------_(1, -1)
     *       |          _,-&quot;  |
     *       o      _,-&quot;      o
     *       |  _,-&quot;          |
     *   (0, 1)&quot;-------------(1, 1)
     &lt;/span&gt;&lt;span&gt;*/&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt; (let i = 0; i &amp;lt; NUM_SEGMENTS; i++) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 使用三角带的方式来绘制三角形，同时这里的-1和1也是为了在绘制宽度的时候确定法向量的偏移&lt;/span&gt;
      positions = positions.concat([i, -1, 0, i, 1, 0&lt;span&gt;]);
    }

    const model &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; Model(
      gl,
      Object.assign({}, &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.getShaders(), {
        id: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props.id,
        geometry: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Geometry({
          drawMode: GL.TRIANGLE_STRIP,
          attributes: {
            positions: &lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt; Float32Array(positions)
          }
        }),
        isInstanced: &lt;/span&gt;&lt;span&gt;true&lt;/span&gt;&lt;span&gt;,
        shaderCache: &lt;/span&gt;&lt;span&gt;this&lt;/span&gt;.context.shaderCache &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 缓存着色器，我怀疑自己写的hexagon偏慢也跟这个有关系&lt;/span&gt;
      })&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 绘制物体，这里是5.x的版本在新的版本中还要设定instanceCount参数，来控制绘制实例的数量&lt;/span&gt;
&lt;span&gt;    );

    model.setUniforms({numSegments: NUM_SEGMENTS});

    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; model;
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面是计算一些实例变量，根据data的数量来控制，但是luma好像会默认给实例变量的数组分配大小，实际的value中有一些多余的空间，如果数据量小的话，可能绘制不出来；比如：data有22条线，按照如下计算，instancePositions可用的value就只有88个元素。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;45&quot;&gt;
&lt;pre&gt;
&lt;span&gt;calculateInstancePositions(attribute) {
    const {data, getSourcePosition, getTargetPosition} &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props;
    const {value, size} &lt;/span&gt;=&lt;span&gt; attribute;
    let i &lt;/span&gt;= 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (const object of data) {
      const sourcePosition &lt;/span&gt;=&lt;span&gt; getSourcePosition(object);
      const targetPosition &lt;/span&gt;=&lt;span&gt; getTargetPosition(object);
      value[i &lt;/span&gt;+ 0] = sourcePosition[0&lt;span&gt;];
      value[i &lt;/span&gt;+ 1] = sourcePosition[1&lt;span&gt;];
      value[i &lt;/span&gt;+ 2] = targetPosition[0&lt;span&gt;];
      value[i &lt;/span&gt;+ 3] = targetPosition[1&lt;span&gt;];
      i &lt;/span&gt;+=&lt;span&gt; size;
    }
  }

  calculateInstancePositions64Low(attribute) {
    const {data, getSourcePosition, getTargetPosition} &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props;
    const {value, size} &lt;/span&gt;=&lt;span&gt; attribute;
    let i &lt;/span&gt;= 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (const object of data) {
      const sourcePosition &lt;/span&gt;=&lt;span&gt; getSourcePosition(object);
      const targetPosition &lt;/span&gt;=&lt;span&gt; getTargetPosition(object);
      value[i &lt;/span&gt;+ 0] = fp64LowPart(sourcePosition[0&lt;span&gt;]);
      value[i &lt;/span&gt;+ 1] = fp64LowPart(sourcePosition[1&lt;span&gt;]);
      value[i &lt;/span&gt;+ 2] = fp64LowPart(targetPosition[0&lt;span&gt;]);
      value[i &lt;/span&gt;+ 3] = fp64LowPart(targetPosition[1&lt;span&gt;]);
      i &lt;/span&gt;+=&lt;span&gt; size;
    }
  }

  calculateInstanceSourceColors(attribute) {
    const {data, getSourceColor} &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props;
    const {value, size} &lt;/span&gt;=&lt;span&gt; attribute;
    let i &lt;/span&gt;= 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (const object of data) {
      const color &lt;/span&gt;=&lt;span&gt; getSourceColor(object);
      value[i &lt;/span&gt;+ 0] = color[0&lt;span&gt;];
      value[i &lt;/span&gt;+ 1] = color[1&lt;span&gt;];
      value[i &lt;/span&gt;+ 2] = color[2&lt;span&gt;];
      value[i &lt;/span&gt;+ 3] = isNaN(color[3]) ? 255 : color[3&lt;span&gt;];
      i &lt;/span&gt;+=&lt;span&gt; size;
    }
  }

  calculateInstanceTargetColors(attribute) {
    const {data, getTargetColor} &lt;/span&gt;= &lt;span&gt;this&lt;/span&gt;&lt;span&gt;.props;
    const {value, size} &lt;/span&gt;=&lt;span&gt; attribute;
    let i &lt;/span&gt;= 0&lt;span&gt;;
    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; (const object of data) {
      const color &lt;/span&gt;=&lt;span&gt; getTargetColor(object);
      value[i &lt;/span&gt;+ 0] = color[0&lt;span&gt;];
      value[i &lt;/span&gt;+ 1] = color[1&lt;span&gt;];
      value[i &lt;/span&gt;+ 2] = color[2&lt;span&gt;];
      value[i &lt;/span&gt;+ 3] = isNaN(color[3]) ? 255 : color[3&lt;span&gt;];
      i &lt;/span&gt;+=&lt;span&gt; size;
    }
  }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;着色器代码&lt;/h3&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;74&quot;&gt;
&lt;pre&gt;
#define SHADER_NAME arc-layer-vertex-&lt;span&gt;shader

attribute vec3 positions; &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 几何图形的坐标，同时这里面也编码了一些信息，x代表线段索引，y可以代表偏移方向&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 本次可用的一些实例变量&lt;/span&gt;
attribute vec4 instanceSourceColors;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 起点的颜色&lt;/span&gt;
attribute vec4 instanceTargetColors; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 终点的颜色&lt;/span&gt;
attribute vec4 instancePositions; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 前两个值记录了起点经纬度，后两个值记录了终点经纬度&lt;/span&gt;
&lt;span&gt;attribute vec3 instancePickingColors;

uniform &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; numSegments; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 抛物线的线段数量&lt;/span&gt;
uniform &lt;span&gt;float&lt;/span&gt; strokeWidth; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 线宽度&lt;/span&gt;
uniform &lt;span&gt;float&lt;/span&gt;&lt;span&gt; opacity;

varying vec4 vColor;

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; source和target是在3d空间中的单位，ratio代表本此线段在总线段数目的比值范围在0~1，返回值时抛物线高度的平方&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; 这里的方式决定高度单位与source/target的单位保持一致&lt;/span&gt;
&lt;span&gt;float&lt;/span&gt; paraboloid(vec2 source, vec2 target, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; ratio) {

  vec2 x &lt;/span&gt;= mix(source, target, ratio); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取该线段节点对应的直线位置&lt;/span&gt;
  vec2 center = mix(source, target, 0.5);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 取中心点，充分利用glsl内建函数，提升性能&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 抛物线的公式应该是y * y = (source - center)^2 - (x - center)^2;&lt;/span&gt;
  &lt;span&gt;float&lt;/span&gt; dSourceCenter =&lt;span&gt; distance(source, center);
  &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; dXCenter =&lt;span&gt; distance(x, center);
  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; (dSourceCenter + dXCenter) * (dSourceCenter -&lt;span&gt; dXCenter);
}

&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 在屏幕空间中计算偏移值，最后在反算到裁切空间，也就是ndc空间&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; offset_direction在position的y坐标中记录&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; offset vector by strokeWidth pixels&lt;/span&gt;&lt;span&gt;
//&lt;/span&gt;&lt;span&gt; offset_direction is -1 (left) or 1 (right)&lt;/span&gt;
vec2 getExtrusionOffset(vec2 line_clipspace, &lt;span&gt;float&lt;/span&gt;&lt;span&gt; offset_direction) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; normalized direction of the line&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; ndc空间中的坐标乘以屏幕宽高像素，转换成2维屏幕像素；然后归一化成单位向量&lt;/span&gt;
  vec2 dir_screenspace = normalize(line_clipspace *&lt;span&gt; project_uViewportSize);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; rotate by 90 degrees&lt;/span&gt;
  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 求法线向量&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 法向量乘以偏移方向乘以宽度一半获取在屏幕空间中的偏移值&lt;/span&gt;
  vec2 offset_screenspace = dir_screenspace * offset_direction * strokeWidth / 2.0&lt;span&gt;;
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将屏幕坐标反算到ndc空间&lt;/span&gt;
  vec2 offset_clipspace =&lt;span&gt; project_pixel_to_clipspace(offset_screenspace).xy;

  &lt;/span&gt;&lt;span&gt;return&lt;/span&gt; offset_clipspace; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回ndc空间的偏移量&lt;/span&gt;
&lt;span&gt;}

&lt;/span&gt;&lt;span&gt;float&lt;/span&gt; getSegmentRatio(&lt;span&gt;float&lt;/span&gt; index) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 返回线段索引在总线段数目中的比值，转换成0~1之间&lt;/span&gt;
  &lt;span&gt;return&lt;/span&gt; smoothstep(0.0, 1.0, index / (numSegments - 1.0&lt;span&gt;));
}

vec3 getPos(vec2 source, vec2 target, &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; segmentRatio) { &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取线段节点在三维空间中的位置&lt;/span&gt;
  &lt;span&gt;float&lt;/span&gt; vertex_height = paraboloid(source, target, segmentRatio); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取高度信息&lt;/span&gt;

  &lt;span&gt;return&lt;/span&gt;&lt;span&gt; vec3(
    mix(source, target, segmentRatio), &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取节点的x/y坐标&lt;/span&gt;
    sqrt(max(0.0, vertex_height))&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取节点的高度坐标&lt;/span&gt;
&lt;span&gt;  );
}

&lt;/span&gt;&lt;span&gt;void&lt;/span&gt; main(&lt;span&gt;void&lt;/span&gt;&lt;span&gt;) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 将insance中编码的起终点的经纬度分别转换成瓦片像素单位&lt;/span&gt;
  vec2 source =&lt;span&gt; project_position(instancePositions.xy);
  vec2 target &lt;/span&gt;=&lt;span&gt; project_position(instancePositions.zw);

  &lt;/span&gt;&lt;span&gt;float&lt;/span&gt; segmentIndex = positions.x;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 节点的线段索引&lt;/span&gt;
  &lt;span&gt;float&lt;/span&gt; segmentRatio =&lt;span&gt; getSegmentRatio(segmentIndex);
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; if it's the first point, use next - current as direction&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; otherwise use current - prev&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 这里处理方式比较巧妙，充分利用内建函数优势；&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; step(edge, x) 作用如： x&amp;gt;=edge ? 1.0 : 0.0&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 所以上面英文注释所说，如果是起点就使用next-curr，其他的都是用curr - prev&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt;float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));&lt;/span&gt;
  &lt;span&gt;float&lt;/span&gt; indexDir = mix(-1.0, 1.0, (segmentIndex &amp;lt;= 0.0 ? 1.0 : 0.0&lt;span&gt;));
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据indexDir获取下一段或者上一个线段节点的比值&lt;/span&gt;
  &lt;span&gt;float&lt;/span&gt; nextSegmentRatio = getSegmentRatio(segmentIndex +&lt;span&gt; indexDir);

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取两个节点的3维世界坐标并转化成ndc坐标&lt;/span&gt;
  vec3 currPos =&lt;span&gt; getPos(source, target, segmentRatio);
  vec3 nextPos &lt;/span&gt;=&lt;span&gt; getPos(source, target, nextSegmentRatio);
  vec4 curr &lt;/span&gt;= project_to_clipspace(vec4(currPos, 1.0&lt;span&gt;));
  vec4 next &lt;/span&gt;= project_to_clipspace(vec4(nextPos, 1.0&lt;span&gt;));

  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; extrude&lt;/span&gt;
  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 进行线宽拉伸，获取法线方向的偏移&lt;/span&gt;
  vec2 offset = getExtrusionOffset((next.xy - curr.xy) *&lt;span&gt; indexDir, positions.y);
  gl_Position &lt;/span&gt;= curr + vec4(offset, 0.0, 0.0); &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取最终节点的ndc位置&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; 根据线段节点位置计算颜色插值&lt;/span&gt;
  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio) / 255&lt;span&gt;.;
  vColor &lt;/span&gt;= vec4(color.rgb, color.a * opacity);&lt;span&gt;//&lt;/span&gt;&lt;span&gt; 获取最终颜色&lt;/span&gt;

  &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set color to be rendered to picking fbo (also used to check for selection highlight).&lt;/span&gt;
&lt;span&gt;  picking_setPickingColor(instancePickingColors);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 16 Dec 2018 15:29:00 +0000</pubDate>
<dc:creator>木的树</dc:creator>
<og:description>deck-overlay中 首先使用d3中的scaleQuantile将数据进行分类，scaleQuantile方法是d3中的一种数据分类方法（https://www.cnblogs.com/kids</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dojo-lzz/p/10129152.html</dc:identifier>
</item>
<item>
<title>TensorFlow的图切割模块——Graph Partitioner - DeepLearningStack</title>
<link>http://www.cnblogs.com/deep-learning-stacks/p/10054529.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/deep-learning-stacks/p/10054529.html</guid>
<description>&lt;div readability=&quot;9.82&quot;&gt;在经过TensorFlow的&lt;a href=&quot;https://www.cnblogs.com/deep-learning-stacks/p/9823486.html&quot; target=&quot;_blank&quot;&gt;Placer策略模块&lt;/a&gt;调整之后，下一步就是根据Placement信息对Graph做切割，然后分发到不同的Device上去执行的过程了。在对Graph做切割时，为了保证跨Device执行的逻辑与切割前一致并保证原图中Node节点之间的依赖关系不受到破坏，不但需要插入Send、Recv通信节点对，还需要维护相对复杂的Control Edge。这些功能被设计在了TensorFlow的Graph Partitioner模块中。从该模块的代码量和原理上看，其内容非常好理解，但在涉及到对含有while_loop、loop_contition、exit、enter、merge、switch等Control Flow Op的图做切割时，其处理就显得相对复杂。本篇主要介绍Graph Partitioner的整体过程和相关源码，但考虑到Control Flow Op相关的处理还需要一些前置知识，而这些前置知识在TensorFlow源码阅读与架构梳理系列中尚未完成书写，因此本篇暂时过滤掉对Control Flow Op相关逻辑的处理。&lt;/div&gt;

&lt;p&gt;顾名思义，Graph Partitioner是用来根据每个节点的Placement信息对原图做切割的，它主要包括三个核心步骤：&lt;/p&gt;
&lt;p&gt;1. 对原图的Placement信息做划分，产生多个子图Sub graph；&lt;/p&gt;
&lt;p&gt;2. 为具有跨Device依赖的节点对插入Send类和Recv类节点对；&lt;/p&gt;
&lt;p&gt;3. 插入必要的Control Edge&lt;/p&gt;
&lt;div readability=&quot;8.6966292134831&quot;&gt;一个完成了图切割的Graph可以在多个机器的分布式集群环境中执行，但是应当注意到在单机单卡时这一步骤也是必要的，因为TensorFlow是个异构框架，单机单卡也涉及到GPU和CPU之间的图切割。图切割的依据是Placement信息，如果想深入了解Placement模块相关内容，请参考本系列的这篇文章——《&lt;a href=&quot;https://www.cnblogs.com/deep-learning-stacks/p/9823486.html&quot; target=&quot;_blank&quot;&gt;TensorFlow中的Placement启发式算法模块——Placer&lt;/a&gt;》。&lt;/div&gt;
&lt;p&gt;Graph Partitioner模块十分通用，在单机单卡运行过程中，DirectSession会让Graph Partitioner根据不同的Device进行切割。而在分布式运行过程中，Graph Partitioner会被执行两次，一次是SplitByWorker，另一次是SplitByDevice。&lt;/p&gt;

&lt;p&gt;为了描述方便，特意将图切割过程分为以下几个子过程，整体流程如下图所示，图右边的文字是对每个过程的简短描述，本篇我们重点阐述标记为深色的子过程。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1437153/201812/1437153-20181216193228620-1056025753.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2&gt;第一步——分析构建Control Flow相关信息&lt;/h2&gt;
&lt;p&gt;这个过程在代码中是通过AddControlFlow函数实现的，由于改代码深度依赖于Control Flow Op的相关模块，且对于不含有Control Flow Op的Graph几乎什么都没有做，因此我们先忽略这个过程，等到对Control Flow模块做详细解读时再回过头来研究其在Graph Partitioner中的意义。&lt;/p&gt;
&lt;div readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;GraphInfo g_info;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (!&lt;span&gt;opts.control_flow_added) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add the &quot;code&quot; for distributed execution of control flow. Code is
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; added only for the frames that are placed on multiple devices. The
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; new graph is an equivalent transformation of the original graph and
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; has the property that it can be subsequently partitioned arbitrarily
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; (down to the level of individual device) for distributed execution.&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;   status = AddControlFlow(opts, g, &amp;amp;&lt;span&gt;g_info);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt; (!status.ok()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; status;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;第二步——构建Op的Input和Output Memory类型信息&lt;/h2&gt;
&lt;p&gt;在介绍这个过程之前，首先需要明确两种概念，他们是DeviceMemory和HostMemory。前者指的是计算设备的Memory类型，后者指的是CPU的Memory类型，它们在TensorFlow中被定义为Enum类型，代码如下所示。&lt;/p&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;1&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; MemoryType is used to describe whether input or output Tensors of
&lt;/span&gt;&lt;span&gt;2&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; an OpKernel should reside in &quot;Host memory&quot; (e.g., CPU memory) or
&lt;/span&gt;&lt;span&gt;3&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; &quot;Device&quot; Memory (CPU memory for CPU devices, GPU memory for GPU
&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;//&lt;/span&gt;&lt;span&gt; devices).&lt;/span&gt;
&lt;span&gt;5&lt;/span&gt; &lt;span&gt;enum&lt;/span&gt;&lt;span&gt; MemoryType {
&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;   DEVICE_MEMORY = &lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;   HOST_MEMORY = &lt;span&gt;1&lt;/span&gt;&lt;span&gt;,
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt; };
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;对Op的Input和Output Memory信息进行检索并构建缓存的函数是BuildMemoryDeviceInfo，该过程构建的信息对后面真正做图切割非常重要。因为TensorFlow的Op在注册时需要不但需要指定其在各个Device上的实现版本（比如CPU版本的Op和GPU版本的Op都是分别注册到系统中的），还需要指出其Input和Output Tensor的类型以及所使用的Memory类型，即使某个Op存在GPU上的实现，它的GPU版本也有可能需要在CPU上读入数据或输出结果。例如，GPU版本的Reshape Op注册代码如下。&lt;/p&gt;
&lt;div readability=&quot;15.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;#define&lt;/span&gt; REGISTER_GPU_KERNEL(type)                               \
&lt;span&gt; 2&lt;/span&gt;   REGISTER_KERNEL_BUILDER(Name(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Reshape&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)                       \
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt; &lt;span&gt;                              .Device(DEVICE_GPU)               \
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                               .HostMemory(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shape&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)              \
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;                               .TypeConstraint&amp;lt;type&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)        \
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;                               .TypeConstraint&amp;lt;int32&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tshape&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;), \
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt; &lt;span&gt;                          ReshapeOp);                           \
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;   REGISTER_KERNEL_BUILDER(Name(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Reshape&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)                       \
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt; &lt;span&gt;                              .Device(DEVICE_GPU)               \
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;                               .HostMemory(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;shape&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)              \
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;                               .TypeConstraint&amp;lt;type&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;T&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;)        \
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;                               .TypeConstraint&amp;lt;int64&amp;gt;(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Tshape&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;), \
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;                           ReshapeOp);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的宏显示，虽然Reshape Op确实在GPU上有注册的实现版本，但是它依然要使用HostMemory。另外，某些Tensor的类型也决定了其是否可以被放置到Device Memory上，一般情况下float类型的数据对于计算设备是非常友好的，而String类型就不是这样，所以在types.cc文件中规定了一些强制被放在HostMemory的数据类型，如下代码所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt;&lt;span&gt; DataTypeAlwaysOnHost(DataType dt) {
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Includes DT_STRING and DT_RESOURCE.&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;   &lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (dt) {
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DT_STRING:
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DT_STRING_REF:
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     &lt;span&gt;case&lt;/span&gt;&lt;span&gt; DT_RESOURCE:
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     &lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt; }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;TensorFlow的设计哲学认为，参与计算的Tensor应该被放在DeviceMemory上，而参与控制的Tensor应该放在HostMemory上。这样的设计思路虽然有一定道理，但也确实对一些case产生了负面的性能影响。在后面的过程中我们可以看到，Partition过程会根据每个Op的Input和Output Memory类型决定是否插入Send类和Recv类节点对，因此会经常遇到处于同一个Device上的两个节点也需要插入Send类和Recv类节点对的情况，显然这有可能带来性能下降。&lt;/p&gt;
&lt;h2&gt;第三步——对原图进行分析，并产出切割后的多个子图&lt;/h2&gt;
&lt;p&gt;在面两个步骤的准备工作完成之后，就可以进行图切割和Send类、Recv类节点对的插入，以及Control Edge的插入了，这个过程如下图所示。因为流程图绘制的比较简洁，我们将在下面对该图进行详细说明。&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1437153/201812/1437153-20181216201912238-1821794762.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;

&lt;p&gt;1.将原图中取出一个节点dst，根据其Device将其分配到对应的Sub Graph中，然后以dst节点为终点节点，沿着其接收Tensor的方向向输入节点src进行分析；&lt;/p&gt;
&lt;p&gt;2.Node之间的连接依靠的是Edge，因此对于dst来说需要根据其Input的Edge来分析src节点的位置，所以这里要获得dst的所有Input Edge；&lt;/p&gt;
&lt;p&gt;3.在逐个遍历分析Input Edge时，第一个要处理的就是src和dst处于同一个Device，但依然需要插入Send类和Recv类节点对的情况。根据第二步BuildMemoryDeviceInfo提供的信息，某些Op的注册和特殊之处确实会得到这种情况；&lt;/p&gt;
&lt;p&gt;4.如果决定需要插入Send类和Recv类节点对，那么优先考虑是否可以重用Recv节点，如果根据信息拼出的Key能够在缓存中搜索到该Recv Node，那么则取出重用。这种Recv Fusion是一种性能优化手段，能避免多次不必要的通信，真正做到达到一次通信多次使用的目的，下面的代码展示了这一个过程；&lt;/p&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Check whether there is already a send/recv pair transferring
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; the same tensor/control from the src to dst partition.&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;       &lt;span&gt;const&lt;/span&gt; &lt;span&gt;bool&lt;/span&gt; on_host =&lt;span&gt; IsDstInputOnHost(edge, g_info);
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;       DupRecvKey key{src-&amp;gt;id(), edge-&amp;gt;&lt;span&gt;src_output(), dst_graph, on_host};
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;       auto iter =&lt;span&gt; dup_recv.find(key);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (iter !=&lt;span&gt; dup_recv.end()) {
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; We found one. Reuse the data/control transferred already.&lt;/span&gt;
&lt;span&gt; 8&lt;/span&gt;         &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;&amp;amp; recv_node_name = iter-&amp;gt;second.recv-&amp;gt;&lt;span&gt;name();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (edge-&amp;gt;&lt;span&gt;IsControlEdge()) {
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;          AddInput(dst_def, recv_node_name, Graph::kControlSlot);
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;         } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;           AddInput(dst_def, recv_node_name, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt; &lt;span&gt;        ref_control_inputs.push_back(recv_node_name);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt; 
&lt;span&gt;16&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; We want the start_time for the recv to be the smallest of the start
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; times of it's consumers. So we update this whenever we use a recv,
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; and write it out to the attribute at the end of the subroutine&lt;/span&gt;
&lt;span&gt;19&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (iter-&amp;gt;second.start_time &amp;gt;&lt;span&gt; recv_start_time) {
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;           iter-&amp;gt;second.start_time =&lt;span&gt; recv_start_time;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;         &lt;span&gt;continue&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;       }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;5.如果缓存中没有找到可重用的节点，那么只能创建新的Send类和Recv类节点对了。插入通信节点对时需要考虑多种情况，有时插入Send和Recv节点就能完成任务，有时还需要插入Control Edge以保证依赖顺序，有时甚至还要插入一些其他的辅助节点。事实上，分成这三种逻辑处理已经覆盖任何情况了，后面一章将详细阐述这三种处理逻辑。&lt;/p&gt;
&lt;p&gt;第四步——必要的后处理&lt;/p&gt;
&lt;p&gt;这是一些收尾的工作，过程非常简单，比如完善Send和Recv节点的Incarnation信息，补全各个子图的version信息等，代码如下所示。&lt;/p&gt;
&lt;div readability=&quot;33.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;const&lt;/span&gt; FunctionLibraryDefinition* flib_def =&lt;span&gt; opts.flib_def;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt; (flib_def ==&lt;span&gt; nullptr) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     flib_def = &amp;amp;g-&amp;gt;&lt;span&gt;flib_def();
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt; &lt;span&gt;  }
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt; 
&lt;span&gt; 6&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set versions, function library and send/recv incarnation.&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;   &lt;span&gt;for&lt;/span&gt; (auto&amp;amp; it : *&lt;span&gt;partitions) {
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     GraphDef* gdef = &amp;amp;&lt;span&gt;it.second;
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     *gdef-&amp;gt;mutable_versions() = g-&amp;gt;&lt;span&gt;versions();
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Prune unreachable functions from `flib_def` before adding them to `gdef`.&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;     *gdef-&amp;gt;mutable_library() = flib_def-&amp;gt;ReachableDefinitions(*&lt;span&gt;gdef).ToProto();
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt; 
&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Traverse the graph to fill every send/recv op's incarnation
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; information.&lt;/span&gt;
&lt;span&gt;15&lt;/span&gt; &lt;span&gt;    SetIncarnation(opts, gdef);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;   }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在代码中，声明插入Send和Recv节点的代码段非常简单，如下所示。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Need to split edge by placing matching send/recv nodes on
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;       &lt;span&gt;//&lt;/span&gt;&lt;span&gt; the src/dst sides of the edge.&lt;/span&gt;
&lt;span&gt; 3&lt;/span&gt;       NodeDef* send =&lt;span&gt; AddSend(opts, g_info, src_graph, edge, send_from,
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;                               send_start_time, &amp;amp;&lt;span&gt;status);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (!status.ok()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; status;
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt; 
&lt;span&gt; 7&lt;/span&gt;       NodeDef* real_recv =&lt;span&gt; nullptr;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;       NodeDef* recv =
&lt;span&gt; 9&lt;/span&gt;           AddRecv(opts, g_info, dst_graph, edge, &amp;amp;real_recv, &amp;amp;&lt;span&gt;status);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (!status.ok()) &lt;span&gt;return&lt;/span&gt; status;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是对于不同的情况却有着丰富的处理逻辑，所以下面在展示示意图的同时，会将相关的代码段摘出来做展示。&lt;/p&gt;
&lt;h2&gt;在同一个Device上插入Send和Recv节点对&lt;/h2&gt;
&lt;p&gt;因为同一个Device上的Send和Recv节点在执行过程中实际上Memory Copy，而Recv的kernel又是异步的，所以需要有一种机制保证保证Recv一定要在Send之后执行，因此需要在Send和Recv之间插入一个Control Edge，从图的依赖上保证它们的执行顺序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1437153/201812/1437153-20181216223006077-646673836.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这个过程的关键是在插入Send和Recv节点之后，需要插入额外的Control Edge，代码如下。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Fix up the control flow edge.
&lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; NOTE(yuanbyu): 'real_recv' must be the real recv node.&lt;/span&gt;
&lt;span&gt;if&lt;/span&gt; (src_graph ==&lt;span&gt; dst_graph) {
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; For same device send/recv, add a control edge from send to recv.
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; This prevents the asynchronous recv kernel from being scheduled
  &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; before the data is available.&lt;/span&gt;
  AddInput(real_recv, send-&amp;gt;&lt;span&gt;name(), Graph::kControlSlot);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;33&quot;&gt;
&lt;h2&gt;跨Device根据DataFlow插入Send和Recv节点对&lt;/h2&gt;
&lt;p&gt;这是最容易理解的一种情况，Send节点需要插入到和src节点相同的Device上，Recv需要插入到和dst节点相同的Device上。并且为了减少不必要的通信开销，尽可能的重用Recv节点。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1437153/201812/1437153-20181216223439248-1354371163.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;该过程的关键在于复用Recv节点，前面在获取缓存时已经阐述过，这里不重复展示。&lt;/p&gt;
&lt;h2&gt;跨Device根据ControlFlow插入Send和Recv节点对 &lt;/h2&gt;
&lt;p&gt;当存在跨Device的Control Flow依赖时，问题变得相对复杂。因为Control Edge只是用作控制，它并不传输真正的Tensor，但在跨Device的情况下，必须要向dst所在的Device发送消息，让其知晓存在依赖控制。TensorFlow选择发送DummyConst的方式通知dst节点，具体而言，需要在src的Device上插入shape为0的DummyConst节点，然后将其作为Send的唯一输入，并将src节点作为它的Control Dependncy。另一方面，在dst的Device上插入Recv节点之后，还需要插入一个identity节点负责读取发送来的DummyConst，然后将Indentity作为dst的Control Dependency。如此一来，这种跨Device的依赖关系就可以被完全等价的表示出来。&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1437153/201812/1437153-20181216223653865-1295990209.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;这个过程的关键在于src端的DummyConst插入和dst端的Identity插入，这两部分的逻辑处理写在了两个地方。DummyConst和相关控制依赖的代码如下。&lt;/p&gt;
&lt;div readability=&quot;26.5&quot;&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;46&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;       &lt;span&gt;NodeDefBuilder::NodeOut send_from;
&lt;/span&gt;&lt;span&gt; 2&lt;/span&gt;       &lt;span&gt;if&lt;/span&gt; (edge-&amp;gt;&lt;span&gt;IsControlEdge()) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Insert a dummy const node that will generate a tiny
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; data element to be sent from send to recv.&lt;/span&gt;
&lt;span&gt; 5&lt;/span&gt;         VLOG(&lt;span&gt;1&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Send/Recv control: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; src-&amp;gt;assigned_device_name() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 6&lt;/span&gt;                 &amp;lt;&amp;lt; src-&amp;gt;name() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;] -&amp;gt; &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; &amp;lt;&amp;lt; dst-&amp;gt;assigned_device_name() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;span&gt; 7&lt;/span&gt;                 &amp;lt;&amp;lt; dst-&amp;gt;name() &amp;lt;&amp;lt; &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;         NodeDef* dummy = AddDummyConst(opts, src_graph, edge, &amp;amp;&lt;span&gt;status);
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt; (!status.ok()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; status;
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;         &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Set the start time for this dummy node.&lt;/span&gt;
&lt;span&gt;11&lt;/span&gt;         &lt;span&gt;if&lt;/span&gt;&lt;span&gt; (opts.scheduling_for_recvs) {
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;           AddNodeAttr(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_start_time&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, send_start_time, dummy);
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt; &lt;span&gt;        }
&lt;/span&gt;&lt;span&gt;14&lt;/span&gt;         AddInput(dummy, src-&amp;gt;&lt;span&gt;name(), Graph::kControlSlot);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;         send_from.Reset(dummy-&amp;gt;name(), &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, DT_FLOAT);
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;       } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;         send_from.Reset(src-&amp;gt;name(), edge-&amp;gt;&lt;span&gt;src_output(), EdgeType(edge));
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;       }
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Indentity即相关依赖的插入逻辑被写在了AddRecv中，下面展示了这个片段。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
&lt;span&gt; 1&lt;/span&gt;   &lt;span&gt;//&lt;/span&gt;&lt;span&gt; Add the cast node (from cast_dtype to dtype) or an Identity node.&lt;/span&gt;
&lt;span&gt; 2&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt; (dtype !=&lt;span&gt; cast_dtype) {
&lt;/span&gt;&lt;span&gt; 3&lt;/span&gt;     &lt;span&gt;const&lt;/span&gt; &lt;span&gt;string&lt;/span&gt; cast_op = (host_memory) ? &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;_HostCast&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt; : &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Cast&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt; 4&lt;/span&gt;     NodeDefBuilder cast_builder(opts.new_name(src-&amp;gt;&lt;span&gt;name()), cast_op);
&lt;/span&gt;&lt;span&gt; 5&lt;/span&gt;     cast_builder.Attr(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;DstT&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, dtype);
&lt;/span&gt;&lt;span&gt; 6&lt;/span&gt;     cast_builder.Device(dst-&amp;gt;&lt;span&gt;assigned_device_name())
&lt;/span&gt;&lt;span&gt; 7&lt;/span&gt;         .Input(recv-&amp;gt;name(), &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, cast_dtype);
&lt;/span&gt;&lt;span&gt; 8&lt;/span&gt;     NodeDef* cast = gdef-&amp;gt;&lt;span&gt;add_node();
&lt;/span&gt;&lt;span&gt; 9&lt;/span&gt;     *status =&lt;span&gt; cast_builder.Finalize(cast);
&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!status-&amp;gt;ok()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nullptr;
&lt;/span&gt;&lt;span&gt;11&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; cast;
&lt;/span&gt;&lt;span&gt;12&lt;/span&gt;   } &lt;span&gt;else&lt;/span&gt; &lt;span&gt;if&lt;/span&gt; (edge-&amp;gt;&lt;span&gt;IsControlEdge()) {
&lt;/span&gt;&lt;span&gt;13&lt;/span&gt;     &lt;span&gt;//&lt;/span&gt;&lt;span&gt; An Identity is only needed for control edges.&lt;/span&gt;
&lt;span&gt;14&lt;/span&gt;     NodeDefBuilder id_builder(opts.new_name(src-&amp;gt;name()), &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;Identity&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;15&lt;/span&gt;     id_builder.Device(dst-&amp;gt;&lt;span&gt;assigned_device_name())
&lt;/span&gt;&lt;span&gt;16&lt;/span&gt;         .Input(recv-&amp;gt;name(), &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, cast_dtype);
&lt;/span&gt;&lt;span&gt;17&lt;/span&gt;     NodeDef* id = gdef-&amp;gt;&lt;span&gt;add_node();
&lt;/span&gt;&lt;span&gt;18&lt;/span&gt;     *status =&lt;span&gt; id_builder.Finalize(id);
&lt;/span&gt;&lt;span&gt;19&lt;/span&gt;     &lt;span&gt;if&lt;/span&gt; (!status-&amp;gt;ok()) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; nullptr;
&lt;/span&gt;&lt;span&gt;20&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; id;
&lt;/span&gt;&lt;span&gt;21&lt;/span&gt;   } &lt;span&gt;else&lt;/span&gt;&lt;span&gt; {
&lt;/span&gt;&lt;span&gt;22&lt;/span&gt;     &lt;span&gt;return&lt;/span&gt;&lt;span&gt; recv;
&lt;/span&gt;&lt;span&gt;23&lt;/span&gt;   }
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;TensorFlow支持通过使用bfloat16减少通信量，虽然bfloat16理论上是有损精度的，但是大量的实践证明这个精度损失是基本感知不到的。bfloat16的通信功能可以通过以下配置项打开，只要在创建Session时传入打开该功能的config即可。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:python;gutter:true;&quot;&gt;
graph_options = tf.GraphOptions(enable_bfloat16_sendrecv=True)
session_config = tf.ConfigProto(gpu_options=gpu_options)　　
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;而TensorFlow在底层插入bfloat的转换节点就是在Graph Partitioner的AddSend函数和AddRecv函数中插入的，但是这个转换只会在跨Device的Send和Recv前后插入，这也非常符合逻辑，因为处于同一个Device的Send和Recv本质上是本地的Memory Copy，其带宽非常高，所以通信并不是瓶颈，而插入两个转换节点只能带来额外的转换开销。&lt;/p&gt;

&lt;p&gt;本文介绍了TensorFlow中的图切割模块——Graph Partitioner。考虑到Graph Partitioner在处理含有Control Flow Op的Graph时具有更加复杂的逻辑，而本系列尚未完成Control Flow模块的编写，因此在梳理源码时只对一般情况作了详细阐述。事实上，仅仅是这些内容也已经可以让读者对TensorFlow的图切割过程有了较好的理解。无论是SplitByDevice还是SplitByWorker，Graph Partitioner作为TensorFlow的图切割模块都具有良好的模块化通用化特点，它的关键点在于如何保证切割后的多个子图和原图具有完全的逻辑等价性。Graph Partitioner能够正常工作的前提是Graph中的每个Node都具有了Device Placement信息，因此在一次Run过程中，Graph Partitioner是在Placer模块完成之后才进行的。今后我们在梳理单机多卡和分布式执行引擎时，我们还会看到Placer和Graph Partitioner的身影，这也是本系列中多次强调其重要性的原因。&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 16 Dec 2018 15:25:00 +0000</pubDate>
<dc:creator>DeepLearningStack</dc:creator>
<og:description>背景 [作者：DeepLearningStack，阿里巴巴算法工程师] 在经过TensorFlow的Placer策略模块调整之后，下一步就是根据Placement信息对Graph做切割，然后分发到不同</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/deep-learning-stacks/p/10054529.html</dc:identifier>
</item>
<item>
<title>mysql学习笔记（二）--查询语句的执行过程 - cfYu</title>
<link>http://www.cnblogs.com/cfYu/p/10129135.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/cfYu/p/10129135.html</guid>
<description>&lt;p&gt;最近在学习mysql实战45讲，觉得里面的内容很受用，做一些笔记记录下：&lt;/p&gt;
&lt;p&gt;首先是mysql的一个基础架构的解释，如下图：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1268416/201812/1268416-20181216172408960-1103121449.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;从上图我们可以清晰的看到，mysql的基础架构主要分为两个部分，一个是server层（负责大多数核心服务功能的实现），一个是存储引擎层（负责数据的存储与提取）。&lt;/p&gt;
&lt;p&gt;server层是跨存储引擎的，也就是说，当客户端执行一条查询语句时，必须经过server层，不管当前查询的表指定的存储引擎是INNODB还是MYISAM。&lt;/p&gt;
&lt;p&gt;server层主要包括以下几个部分：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;连接器&lt;/strong&gt;：管理与客户端的连接，包括建立以及维持连接。可以用以下命令连接mysql数据库：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;/span&gt; -h&lt;span&gt;$ip&lt;/span&gt; -P&lt;span&gt;$port&lt;/span&gt; -u&lt;span&gt;$user&lt;/span&gt; -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　连接又分为长连接与短连接。其实长连接是相对于通常的短连接而说的，也就是长时间保持客户端与服务端的连接状态。通常的短连接操作步骤是：连接-&amp;gt;数据传输-&amp;gt;关闭连接；而长连接通常就是：连接-&amp;gt;数据传输-&amp;gt;保持连接-&amp;gt;数据传输-&amp;gt;保持连接-&amp;gt;…………-&amp;gt;关闭连接；这就要求长连接在没有数据通信时，定时发送数据包，以维持连接状态，短连接在没有数据传输时直接关闭就行了。长连接主要用于在少数客户端与服务端的频繁通信，因为这时候如果用短连接频繁通信常会发生Socket出错，并且频繁创建Socket连接也是对资源的浪费。但是对于服务端来说，长连接也会耗费一定的资源，这是因mysql在执行过程中临时使用的内存是管理在连接对象里面的，这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是mysql异常重启了。需要专门的线程（unix下可以用进程管理）来负责维护连接状态。总之，长连接和短连接的选择要视情况而定。&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;查询缓存&lt;/strong&gt;：MySql查询缓存保留了查询返回给客户端的完整结果，当缓存命中的时候，服务器马上返回保存的结果(会先检查权限)，并跳过解析、优化和执行步骤。&lt;/p&gt;
&lt;p&gt;　　当mysql接收到查询请求时，会查询缓存是否命中，若命中，则直接返回查询结果，这里的key就是查询语句，value就是查询结果。在数据频繁更新的数据库中，查询缓存一般不建议使用，因为每当有表更新操作时，所有的缓存都会失效。可以通过设置query_cache_type=demand按需使用查询缓存，如：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;/span&gt;&amp;gt; select SQL_CACHE * from ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;     mysql8.0版本已将该功能去掉。&lt;/p&gt;
&lt;p&gt;缓存配置参数：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　&lt;img src=&quot;https://images0.cnblogs.com/i/572361/201407/061311427776870.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;　　query_cache_limit: MySQL能够缓存的最大结果,如果超出,则增加 Qcache_not_cached的值,并删除查询结果&lt;/p&gt;
&lt;p&gt;　　query_cache_min_res_unit: 分配内存块时的最小单位大小&lt;/p&gt;
&lt;p&gt;　　query_cache_size: 缓存使用的总内存空间大小,单位是字节,这个值必须是1024的整数倍,否则MySQL实际分配可能跟这个数值不同(感觉这个应该跟文件系统的blcok大小有关)&lt;/p&gt;
&lt;p&gt;　　query_cache_type: 是否打开缓存 OFF: 关闭 ON: 总是打开&lt;/p&gt;
&lt;p&gt;　　query_cache_wlock_invalidate: 如果某个数据表被锁住,是否仍然从缓存中返回数据,默认是OFF,表示仍然可以返回。&lt;/p&gt;
&lt;p&gt; （3）&lt;strong&gt;分析器&lt;/strong&gt;：对用户输入的查询语句进行词法分析、语法分析、语义分析、构造执行树。&lt;/p&gt;
&lt;p&gt;　　a）首先是解析器将查询分解成一个个标识，然后构造一颗“解析树”，解析器保证查询中的标识都是有效的，会检查其中的基本错误，比如字符串上面的引号没有闭合等。&lt;/p&gt;
&lt;p&gt;　　b）然后预处理器检查解析器生成的解析树，解决解析器无法解析的语义。比如，它会检查表和列名是否存在，检查名字和别名，保证没有歧义。最后，预处理器检查权限。&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;p&gt;　　a）以下代码为当我们查询一个不存在的列如k时，应该是在&lt;strong&gt;预处理器阶段&lt;/strong&gt;返回的错误；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
select * from T where k=1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;       b）以下代码就是在&lt;strong&gt;语法分析阶段&lt;/strong&gt;，mysql发现语句不对，报错：You have an error in your SQL syntax；&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;/span&gt;&amp;gt; elect * from t where ID=1&lt;span&gt;;

ERROR &lt;/span&gt;1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your &lt;span&gt;MySQL&lt;/span&gt; server version &lt;span&gt;for&lt;/span&gt; the right syntax to &lt;span&gt;use&lt;/span&gt; near 'elect * from t where ID=1' at line 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ps：语法检查阶段的具体顺序如下图：&lt;/p&gt;
&lt;p&gt;　　　　　　　　　　　　　　　　　　　　　　　　　　　　&lt;img src=&quot;https://img2018.cnblogs.com/blog/1268416/201812/1268416-20181216225154100-1166450069.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;（4）&lt;strong&gt;优化器&lt;/strong&gt;：优化器把解析树变成执行计划。一个查询通常可以有很多种执行方式，并且返回同样的结果，优化器的任务就是找到最好的方式。&lt;/p&gt;
&lt;p&gt;　　MySQL使用基于成本的优化器，它将尝试预测一个查询使用某种执行计划的成本，并选择其中成本最小的一个。最初，成本的最小单位是随机读取一个4K数据页的成本，后来成本计算公式变得更加复杂，并且引入了一些“因子”来估算某些操作的代价，如当执行一次where条件比较的成本。可以通过查询当前会话的last_query_cost的值来得知MySQL计算的当前查询的成本。&lt;/p&gt;
&lt;p&gt;　　有很多种原因会导致MySQL优化器选择错误的执行计划，比如：&lt;/p&gt;
&lt;p&gt;　　1. 统计信息不准确。&lt;/p&gt;
&lt;p&gt;　　2. 执行计划中的成本估算不等同于实际的执行计划的成本。&lt;/p&gt;
&lt;p&gt;　　3. MySQL的最优可能与你想的最优不一样。&lt;/p&gt;
&lt;p&gt;　　4. MySQL从不考虑其他并发的查询，这可能会影响当前查询的速度。&lt;/p&gt;
&lt;p&gt;　　5. MySQL也不是任何时候都是基于成本的优化，有时候也会基于一些固定的规则。&lt;/p&gt;
&lt;p&gt;　　6. MySQL不会考虑不受其控制的成本，例如执行存储过程或者用户自定义的函数的成本。&lt;/p&gt;
&lt;p&gt;（5）&lt;strong&gt;执行器&lt;/strong&gt;：对优化器生成的执行计划进行执行操作。&lt;/p&gt;
&lt;p&gt;　　在执行之前，会检查当前用户是否有查询权限，如果没有对应的权限，会报错如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;mysql&lt;/span&gt;&amp;gt; select * from T where ID=10&lt;span&gt;;

ERROR &lt;/span&gt;1142 (42000): SELECT command denied to user 'b'@'localhost' &lt;span&gt;for&lt;/span&gt; table 'T'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　这里有个疑问，为什么丁奇老师讲的是权限检查是在执行器阶段进行，而网上的很多资料都表明在分析器阶段进行权限检查？？？&lt;/p&gt;
&lt;p&gt;　　丁奇老师给出的回答是：有些时候，SQL语句要操作的表不只是SQL字面上那些。比如如果有个触发器，得在执行器阶段（过程中）才能确定。优化器阶段前是无能为力的。而通过实验，如下代码：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
mysql&amp;gt; select * from T where k=1&lt;/pre&gt;
&lt;pre&gt;
&lt;span&gt;ERROR 1142 (42000): SELECT command denied to user 'b'@'localhost' for table 'T'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;　　可以发现，在创建了一个没有select权限的用户之后，执行以下语句，报错的确是没有权限，按照丁奇老师的说法，这个语句应该是通过了分析器（预处理器检查每个列是否存在）阶段，进入了执行器阶段进行权限检查然后报错的，但其实这个语句在分析器阶段就会报错了，与丁奇老师说的在执行器阶段进行的权限检查其实是矛盾的，虽然丁奇老师给出的回答是：这个是一个安全方面的考虑。你想想一个用户如果没有查看这个表的权限，你是会告诉他字段不对还是没权限？如果告诉他字段不对，其实给的信息太多了，因为没权限的意思还包含了：没权限知道字段是否存在。但个人还是比较信服于在分析器阶段其实就已经进行了权限检查了。&lt;/p&gt;
&lt;p&gt;ps：结合丁奇老师以及网上的一些资料，会不会有可能进行了两次权限检查呢？？？查阅了一些资料，发现针对procedure 和 function 的create  和alter是一种特殊权限 ，他们是全局的。猜测可能是第一次是对表的权限检查，第二次在执行器阶段是进行特殊权限检查。&lt;/p&gt;
&lt;p&gt;　　最后就是调用存储引擎的api接口获取数据并返回给客户端了。&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 15:24:00 +0000</pubDate>
<dc:creator>cfYu</dc:creator>
<og:description>最近在学习mysql实战45讲，觉得里面的内容很受用，做一些笔记记录下： 首先是mysql的一个基础架构的解释，如下图： 从上图我们可以清晰的看到，mysql的基础架构主要分为两个部分，一个是serv</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/cfYu/p/10129135.html</dc:identifier>
</item>
<item>
<title>线程模拟售票问题 - 空对月</title>
<link>http://www.cnblogs.com/zhouguoshuai/p/10129106.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhouguoshuai/p/10129106.html</guid>
<description>&lt;p&gt;线程是我们学习Java知识中一个重要的难点，首先我们要明白两种创建线程的方法，其次在售票问题中我们要注意线程并发带来的线程安全问题。&lt;/p&gt;
&lt;p&gt;最后我们要明白几个重要的概念：&lt;/p&gt;
&lt;p&gt;①保证代码原子性：所谓代码原子性是指当a线程在执行某段代码块的时候，别的线程必须等待 ，直到a线程执行完才可以执行这段代码。&lt;/p&gt;
&lt;p&gt;②对象锁：java中处理线程同步的办法非常简单，只需要在你需要同步的代码块上加上语句：synchronized (object) {需要同步的代码块} ，即可。&lt;/p&gt;
&lt;p&gt;③获取线程名称的方法：Thread.currentThread().getName()。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;p&gt;package com.thread;&lt;/p&gt;
&lt;p&gt;public class ThreadShouPiao {&lt;/p&gt;
&lt;p&gt;/**&lt;br/&gt;* 功能：线程售票：解决线程并发带来的线程安全问题（保证代码的原子性）&lt;br/&gt;* 对象锁的概念&lt;br/&gt;*/&lt;br/&gt;public static void main(String[] args) {&lt;br/&gt;// TODO Auto-generated method stub&lt;br/&gt;//创建一个售票窗口对象&lt;br/&gt;ThreadWindowTicks twk=new ThreadWindowTicks();&lt;br/&gt;//创建三个线程，同时启用&lt;br/&gt;Thread th1=new Thread(twk);&lt;br/&gt;Thread th2=new Thread(twk);&lt;br/&gt;Thread th3=new Thread(twk);&lt;br/&gt;th1.start();&lt;br/&gt;th2.start();&lt;br/&gt;th3.start();&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;//窗口售票类&lt;br/&gt;class ThreadWindowTicks implements Runnable{&lt;/p&gt;&lt;p&gt;private int piao_num=2000;&lt;/p&gt;
&lt;p&gt;public void run() {&lt;br/&gt;// TODO Auto-generated method stub&lt;br/&gt;while(true){&lt;br/&gt;//要保证if else语句原子性（同步代码块）&lt;br/&gt;&lt;span&gt;synchronized (this)&lt;/span&gt; {//对象锁&lt;br/&gt;if(piao_num&amp;gt;0&amp;amp;&amp;amp;piao_num&amp;lt;=2000){&lt;br/&gt;System.out.println(&lt;span&gt;Thread.currentThread().getName()&lt;/span&gt;+&quot;卖第&quot;+piao_num+&quot;张票&quot;);&lt;br/&gt;try {&lt;br/&gt;Thread.sleep(1000);&lt;/p&gt;&lt;p&gt;} catch (InterruptedException e) {&lt;br/&gt;// TODO Auto-generated catch block&lt;br/&gt;e.printStackTrace();&lt;br/&gt;}&lt;br/&gt;piao_num--;&lt;br/&gt;}&lt;br/&gt;else {&lt;br/&gt;break;&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
</description>
<pubDate>Sun, 16 Dec 2018 15:14:00 +0000</pubDate>
<dc:creator>空对月</dc:creator>
<og:description>线程是我们学习Java知识中一个重要的难点，首先我们要明白两种创建线程的方法，其次在售票问题中我们要注意线程并发带来的线程安全问题。 最后我们要明白几个重要的概念： ①保证代码原子性：所谓代码原子性是</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhouguoshuai/p/10129106.html</dc:identifier>
</item>
<item>
<title>.net core i上 K8S(七).netcore程序的服务发现 - 老六代码</title>
<link>http://www.cnblogs.com/chenyishi/p/10129093.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/chenyishi/p/10129093.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/chenyishi/p/10121980.html&quot; target=&quot;_blank&quot;&gt;上一章&lt;/a&gt;我们分享了k8s的网络代理模式，今天我们来分享一下k8s中的服务发现。&lt;/p&gt;
&lt;h2&gt;1.环境变量模式的服务发现&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;k8s默认为我们提供了通过环境变量来实现服务发现的功能，前提是&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　1.需要service在pod之前创建&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　　2.适用于同一命名空间&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;1.1创建service&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@localhost ~]# &lt;span&gt;cat&lt;/span&gt; netcore-&lt;span&gt;service.yaml 
apiVersion: v1
kind: Service
metadata:
  name: netcore&lt;/span&gt;-&lt;span&gt;service
  labels:
    app: netcore
spec:
  ports:
  &lt;/span&gt;-&lt;span&gt; name: http
    protocol: TCP
    port: &lt;/span&gt;&lt;span&gt;1001&lt;/span&gt;&lt;span&gt;
    targetPort: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
    nodePort: &lt;/span&gt;&lt;span&gt;31111&lt;/span&gt;&lt;span&gt;
  selector:
    app: cys&lt;/span&gt;-&lt;span&gt;netcore
  type: NodePort&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
kubectl create -f netcore-service.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.2创建pod&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@localhost ~]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; netcore.yaml 
apiVersion: apps&lt;/span&gt;/&lt;span&gt;v1beta2
kind: Deployment
metadata:
  name: cys&lt;/span&gt;-&lt;span&gt;netcore
spec:
  replicas: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
  selector:
    matchLabels:
      app: cys&lt;/span&gt;-&lt;span&gt;netcore
  template:
    metadata:
      labels:
        app: cys&lt;/span&gt;-&lt;span&gt;netcore
    spec:
      containers:
      &lt;/span&gt;- name: cys-&lt;span&gt;netcore
        image: chenyishi&lt;/span&gt;/&lt;span&gt;webdocker_s_provider
        ports:
        &lt;/span&gt;- containerPort: &lt;span&gt;1000&lt;/span&gt;
        &lt;span&gt;env&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;- name: serverpo
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
kubectl create -f netcore.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;1.3验证&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033233/201812/1033233-20181216211804686-1442880410.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看环境变量&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033233/201812/1033233-20181216212034725-120836963.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们再以相同的方式再创建一组pod+service&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
[root@localhost ~]# &lt;span&gt;cat&lt;/span&gt;&lt;span&gt; netcore2.yaml 
apiVersion: apps&lt;/span&gt;/&lt;span&gt;v1beta2
kind: Deployment
metadata:
  name: cys&lt;/span&gt;-&lt;span&gt;netcore2
spec:
  replicas: &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
  selector:
    matchLabels:
      app: cys&lt;/span&gt;-&lt;span&gt;netcore2
  template:
    metadata:
      labels:
        app: cys&lt;/span&gt;-&lt;span&gt;netcore2
    spec:
      containers:
      &lt;/span&gt;- name: cys-&lt;span&gt;netcore2
        image: chenyishi&lt;/span&gt;/&lt;span&gt;webdocker_s_provider
        ports:
        &lt;/span&gt;- containerPort: &lt;span&gt;1000&lt;/span&gt;
        &lt;span&gt;env&lt;/span&gt;&lt;span&gt;:
        &lt;/span&gt;-&lt;span&gt; name: serverport
          value: &lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
[root@localhost ~]# &lt;span&gt;cat&lt;/span&gt; netcore-&lt;span&gt;service2.yaml 
apiVersion: v1
kind: Service
metadata:
  name: netcore&lt;/span&gt;-&lt;span&gt;service2
  labels:
    app: netcore2
spec:
  ports:
  &lt;/span&gt;-&lt;span&gt; name: http
    protocol: TCP
    port: &lt;/span&gt;&lt;span&gt;1002&lt;/span&gt;&lt;span&gt;
    targetPort: &lt;/span&gt;&lt;span&gt;1000&lt;/span&gt;&lt;span&gt;
    nodePort: &lt;/span&gt;&lt;span&gt;31112&lt;/span&gt;&lt;span&gt;
  selector:
    app: cys&lt;/span&gt;-&lt;span&gt;netcore2
  type: NodePort&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
kubectl create -f netcore-&lt;span&gt;service2.yaml
kubectl create &lt;/span&gt;-f netcore2.yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033233/201812/1033233-20181216213011255-124689871.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;查看env&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033233/201812/1033233-20181216213044677-674869877.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;我们进入容器，调用一下第一个service&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1033233/201812/1033233-20181216213318116-809660478.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;至此，我们证明了可以通过env使service互通&lt;/span&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 16 Dec 2018 15:11:00 +0000</pubDate>
<dc:creator>老六代码</dc:creator>
<og:description>上一章我们分享了k8s的网络代理模式，今天我们来分享一下k8s中的服务发现。 1.环境变量模式的服务发现 k8s默认为我们提供了通过环境变量来实现服务发现的功能，前提是 1.需要service在pod</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/chenyishi/p/10129093.html</dc:identifier>
</item>
<item>
<title>AI探索（四）NumPy库的使用 - 周希</title>
<link>http://www.cnblogs.com/zhouxihi/p/10117601.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/zhouxihi/p/10117601.html</guid>
<description>&lt;h3&gt;&lt;span&gt;&lt;strong&gt;NumPy(Numerical Python)&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;umPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;一个强大的N维数组对象 ndarray&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;广播功能函数&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;整合 C/C++/Fortran 代码的工具&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;线性代数、傅里叶变换、随机数生成等功能&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SciPy 是一个开源的 Python 算法库和数学工具包。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;创建一个 ndarray 只需调用 NumPy 的 array 函数即可：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;numpy.array(&lt;span&gt;object&lt;/span&gt;, dtype = None, copy = True, order = None, subok = False, ndmin = &lt;span&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181214084116744-1081805927.png&quot; alt=&quot;&quot; width=&quot;837&quot; height=&quot;303&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;示例1: 一维数组&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import numpy &lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

a &lt;/span&gt;= np.array([&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;])
print a&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;p&gt;&lt;span&gt;/usr/bin/python2.7 /Users/jackey/Documents/python/tensorflow/numpydemo.py&lt;/span&gt;&lt;br/&gt;&lt;span&gt;[1 2 3]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Process finished with exit code 0&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;示例2：二维数组&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import numpy &lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

a &lt;/span&gt;= np.array([[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;],[&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]])
print a&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;4&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;示例3：二维数组&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import numpy &lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

a &lt;/span&gt;= np.array([&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;],ndmin = &lt;span&gt;2&lt;/span&gt;&lt;span&gt;)
print a&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;示例4：二维数组&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
&lt;span&gt;import numpy as np

a = np.array([1,2,3],ndmin = 2, dtype = complex)
print a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/usr/bin/python2.7 /Users/jackey/Documents/python/tensorflow/numpydemo.py
[[1.+0.j 2.+0.j 3.+0.j]]

Process finished with exit code 0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;NumPy 数据类型&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;numpy 支持的数据类型比 Python 内置的类型要多很多，基本上可以和 C 语言的数据类型对应上，其中部分类型对应为 Python 内置的类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;下表列举了常用 NumPy 基本类型。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181214085112996-87375125.png&quot; alt=&quot;&quot; width=&quot;754&quot; height=&quot;743&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;数据类型对象（dtype）&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;numpy.dtype(&lt;span&gt;object&lt;/span&gt;, align, copy)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;object - 要转换为的数据类型对象&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;align - 如果为true， 填充字段使其类似C的结构体&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;copy - 复制dtype对象， 如果为false，则是对内置数据类型对象的引用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span&gt;示例：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
&lt;span&gt;# -*- coding: UTF-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

#使用标量类型
dt &lt;/span&gt;=&lt;span&gt; np.dtype(np.int32)
print(dt)

# int8, int16, int32, int64 四种数据类型可以使用字符串 &lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i2&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt; 代替
dt &lt;/span&gt;= np.dtype(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i8&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print(dt)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;输出：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
int32
int64

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;下面实例展示结构化数据类型的使用，类型字段和对应的实际类型将被创建&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
# -*- coding: UTF-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

dt &lt;/span&gt;= np.dtype([(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;,np.int8)])
print(dt)

a &lt;/span&gt;= np.array([(&lt;span&gt;10&lt;/span&gt;,),(&lt;span&gt;20&lt;/span&gt;,),(&lt;span&gt;30&lt;/span&gt;,)], dtype=&lt;span&gt;dt)
print(a)

print(a[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
[(&lt;/span&gt;&lt;span&gt;10&lt;/span&gt;,) (&lt;span&gt;20&lt;/span&gt;,) (&lt;span&gt;30&lt;/span&gt;&lt;span&gt;,)]
[&lt;/span&gt;&lt;span&gt;10&lt;/span&gt; &lt;span&gt;20&lt;/span&gt; &lt;span&gt;30&lt;/span&gt;&lt;span&gt;]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216215308726-270868065.png&quot; alt=&quot;&quot; width=&quot;723&quot; height=&quot;439&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;44&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

student &lt;/span&gt;= np.dtype([(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;marks&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;f4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)])
print(student)

a &lt;/span&gt;= np.array([(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;21&lt;/span&gt;,&lt;span&gt;50&lt;/span&gt;),(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;18&lt;/span&gt;,&lt;span&gt;75&lt;/span&gt;)], dtype=&lt;span&gt;student)
print(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;42&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;S20&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;age&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;marks&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;&amp;lt;f4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)]
[(&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;abc&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;21&lt;/span&gt;, &lt;span&gt;50&lt;/span&gt;.) (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;xyz&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;18&lt;/span&gt;, &lt;span&gt;75&lt;/span&gt;&lt;span&gt;.)]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Numpy数组&lt;/p&gt;
&lt;p&gt;NumPy 数组的维数称为秩（rank），一维数组的秩为 1，二维数组的秩为 2，以此类推。&lt;/p&gt;
&lt;p&gt;在 NumPy中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是 NumPy 中的轴（axis），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量——秩，就是数组的维数。&lt;/p&gt;
&lt;p&gt;很多时候可以声明 axis。axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作；axis=1，表示沿着第1轴进行操作，即对每一行进行操作。&lt;/p&gt;
&lt;p&gt;NumPy 的数组中比较重要 ndarray 对象属性有： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216220347902-1343670388.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ndarray.ndim用于返回数组的维数，等于秩&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

a &lt;/span&gt;= np.arange(&lt;span&gt;24&lt;/span&gt;&lt;span&gt;)   #a现在只有1个纬度
print(a.ndim)&lt;br/&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ndarray.shape&lt;/h3&gt;
&lt;p&gt;ndarray.shape 表示数组的维度，返回一个元组，这个元组的长度就是维度的数目，即 ndim 属性(秩)。比如，一个二维数组，其维度表示&quot;行数&quot;和&quot;列数&quot;。&lt;/p&gt;
&lt;p&gt;ndarray.shape 也可以用于调整数组大小。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;40&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

a &lt;/span&gt;= np.array([[&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;],[&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]])
print(a.shape)

a.shape &lt;/span&gt;= (&lt;span&gt;6&lt;/span&gt;,&lt;span&gt;1&lt;/span&gt;&lt;span&gt;)
print(a)

a.shape &lt;/span&gt;= (&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;6&lt;/span&gt;&lt;span&gt;)
print(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
(&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
[[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;span&gt;]]
[[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;5&lt;/span&gt; &lt;span&gt;6&lt;/span&gt;&lt;span&gt;]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ndarray.itemsize&lt;/h3&gt;
&lt;p&gt;ndarray.itemsize 以字节的形式返回数组中每一个元素的大小。&lt;/p&gt;
&lt;p&gt;例如，一个元素类型为 float64 的数组 itemsiz 属性值为 8(float64 占用 64 个 bits，每个字节长度为 8，所以 64/8，占用 8 个字节），又如，一个元素类型为 complex32 的数组 item 属性为 4（32/8）。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

x &lt;/span&gt;= np.array([&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;],dtype=&lt;span&gt;np.int8)
print(x)
print(x.itemsize)

y &lt;/span&gt;= np.array([&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;], dtype=&lt;span&gt;np.float64)
print(y)
print(y.itemsize)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt; &lt;span&gt;4&lt;/span&gt; &lt;span&gt;5&lt;/span&gt;&lt;span&gt;]
&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;. &lt;span&gt;2&lt;/span&gt;. &lt;span&gt;3&lt;/span&gt;. &lt;span&gt;4&lt;/span&gt;. &lt;span&gt;5&lt;/span&gt;&lt;span&gt;.]
&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span&gt;

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ndarray 数组除了可以使用底层 ndarray 构造器来创建外，也可以通过以下几种方式来创建。&lt;/p&gt;
&lt;p&gt;numpy.empty 方法用来创建一个指定形状（shape）、数据类型（dtype）且未初始化的数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
numpy.empty(shape, dtype = &lt;span&gt;float&lt;/span&gt;, order = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216223132736-5503095.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

x &lt;/span&gt;= np.empty([&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;], dtype=&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)
print(x)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[[                   &lt;/span&gt;&lt;span&gt;0&lt;/span&gt; -&lt;span&gt;9223363263373412019&lt;/span&gt;&lt;span&gt;]
 [     &lt;/span&gt;&lt;span&gt;140375703420932&lt;/span&gt;      &lt;span&gt;140375703442528&lt;/span&gt;&lt;span&gt;]
 [          &lt;/span&gt;&lt;span&gt;4345035248&lt;/span&gt;      &lt;span&gt;140375703442504&lt;/span&gt;&lt;span&gt;]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; − 数组元素为随机值，因为它们未初始化。&lt;/p&gt;

&lt;h3&gt;numpy.zeros&lt;/h3&gt;
&lt;p&gt;创建指定大小的数组，数组元素以 0 来填充：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
numpy.zeros(shape, dtype = &lt;span&gt;float&lt;/span&gt;, order = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216223656469-1633929774.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;41&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

# 默认为浮点数
x &lt;/span&gt;= np.zeros(&lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
print(x)

# 设置类型为整数
y &lt;/span&gt;= np.zeros((&lt;span&gt;5&lt;/span&gt;,), dtype=np.&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)
print(y)

# 自定义类型
z &lt;/span&gt;= np.zeros((&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;), dtype=[(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;x&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;, &lt;span&gt;'&lt;/span&gt;&lt;span&gt;i4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;), (&lt;span&gt;'&lt;/span&gt;&lt;span&gt;y&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;,&lt;span&gt;'&lt;/span&gt;&lt;span&gt;i4&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)])
print(z)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;37&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;. &lt;span&gt;0&lt;/span&gt;. &lt;span&gt;0&lt;/span&gt;. &lt;span&gt;0&lt;/span&gt;. &lt;span&gt;0&lt;/span&gt;&lt;span&gt;.]
[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;0&lt;/span&gt;&lt;span&gt;]
[[(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;) (&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)]
 [(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;) (&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;)]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;numpy.ones&lt;/h3&gt;
&lt;p&gt;创建指定形状的数组，数组元素以 1 来填充：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
numpy.ones(shape, dtype = None, order = &lt;span&gt;'&lt;/span&gt;&lt;span&gt;C&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216224146608-1641723733.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

# 默认为浮点数
x &lt;/span&gt;= np.ones(&lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
print(x)

# 自定义类型
x &lt;/span&gt;= np.ones([&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;],dtype=&lt;span&gt;int&lt;/span&gt;&lt;span&gt;)
print(x)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;. &lt;span&gt;1&lt;/span&gt;. &lt;span&gt;1&lt;/span&gt;. &lt;span&gt;1&lt;/span&gt;. &lt;span&gt;1&lt;/span&gt;&lt;span&gt;.]
[[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建标准正态分布数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

a &lt;/span&gt;= np.random.randn(&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;)
print(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[[&lt;/span&gt;-&lt;span&gt;0.16777072&lt;/span&gt;  &lt;span&gt;1.15536929&lt;/span&gt;  &lt;span&gt;0.15206009&lt;/span&gt;&lt;span&gt;]
 [ &lt;/span&gt;&lt;span&gt;0.36466659&lt;/span&gt;  &lt;span&gt;0.39643679&lt;/span&gt; -&lt;span&gt;1.06021005&lt;/span&gt;&lt;span&gt;]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建随机分布整数型数组。&lt;/p&gt;
&lt;p&gt;利用 randint([low,high],size) 创建一个整数型指定范围在 [low.high] 之间的数组：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

a &lt;/span&gt;= np.random.randint(&lt;span&gt;100&lt;/span&gt;,&lt;span&gt;200&lt;/span&gt;,(&lt;span&gt;3&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;))
print(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[[&lt;/span&gt;&lt;span&gt;172&lt;/span&gt; &lt;span&gt;166&lt;/span&gt; &lt;span&gt;115&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;191&lt;/span&gt; &lt;span&gt;126&lt;/span&gt; &lt;span&gt;165&lt;/span&gt;&lt;span&gt;]
 [&lt;/span&gt;&lt;span&gt;195&lt;/span&gt; &lt;span&gt;171&lt;/span&gt; &lt;span&gt;198&lt;/span&gt;&lt;span&gt;]]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;从已有的数组创建数组&lt;/h3&gt;
&lt;h3&gt;numpy.asarray&lt;/h3&gt;
&lt;p&gt;numpy.asarray 类似 numpy.array，但 numpy.asarray 只有三个，比 numpy.array 少两个。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
numpy.asarray(a, dtype = None, order = None)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216225237943-951659223.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;43&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

# 将列表转换为ndarray
x &lt;/span&gt;= [&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
a &lt;/span&gt;=&lt;span&gt; np.asarray(x)
print(a)

# 将元组列表转换为 ndarray
x &lt;/span&gt;= [(&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;),(&lt;span&gt;4&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;)]
a &lt;/span&gt;=&lt;span&gt; np.asarray(x)
print(a)

# 设置了dtype参数
x &lt;/span&gt;= [&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;2&lt;/span&gt;,&lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
a &lt;/span&gt;= np.asarray(x, dtype=&lt;span&gt;float&lt;/span&gt;&lt;span&gt;)
print(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;36&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt; &lt;span&gt;2&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;]
[(&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;) (&lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;)]
[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;. &lt;span&gt;2&lt;/span&gt;. &lt;span&gt;3&lt;/span&gt;&lt;span&gt;.]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;numpy.frombuffer&lt;/h3&gt;
&lt;p&gt;numpy.frombuffer 用于实现动态数组。&lt;/p&gt;
&lt;p&gt;numpy.frombuffer 接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
numpy.frombuffer(buffer, dtype = &lt;span&gt;float&lt;/span&gt;, count = -&lt;span&gt;1&lt;/span&gt;, offset = &lt;span&gt;0&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
注意：buffer 是字符串的时候，Python3 默认 str 是 Unicode 类型，所以要转成 bytestring 在原 str 前加上 b。
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216230157468-1180391940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

s &lt;/span&gt;= &lt;span&gt;'&lt;/span&gt;&lt;span&gt;Hello world!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;
a &lt;/span&gt;= np.frombuffer(s, dtype=&lt;span&gt;'&lt;/span&gt;&lt;span&gt;S1&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;)
print(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;H&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;e&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;w&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;o&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;r&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;l&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;d&lt;/span&gt;&lt;span&gt;'&lt;/span&gt; &lt;span&gt;'&lt;/span&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;numpy.fromiter&lt;/h3&gt;
&lt;p&gt;numpy.fromiter 方法从可迭代对象中建立 ndarray 对象，返回一维数组。&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
numpy.fromiter(iterable, dtype, count=-&lt;span&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1048098/201812/1048098-20181216230430247-1759591536.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
# -*- coding: utf-&lt;span&gt;8&lt;/span&gt; -*-&lt;span&gt;

import numpy &lt;/span&gt;&lt;span&gt;as&lt;/span&gt;&lt;span&gt; np

# 使用 range 函数创建列表对象
list &lt;/span&gt;= range(&lt;span&gt;5&lt;/span&gt;&lt;span&gt;)
it &lt;/span&gt;=&lt;span&gt; iter(list)

# 使用迭代器创建 ndarray
x &lt;/span&gt;= np.fromiter(it, dtype=&lt;span&gt;float&lt;/span&gt;&lt;span&gt;)
print(x)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
/usr/bin/python2.&lt;span&gt;7&lt;/span&gt; /Users/jackey/Documents/python/tensorflow/&lt;span&gt;numpydemo.py
[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;. &lt;span&gt;1&lt;/span&gt;. &lt;span&gt;2&lt;/span&gt;. &lt;span&gt;3&lt;/span&gt;. &lt;span&gt;4&lt;/span&gt;&lt;span&gt;.]

Process finished with exit code &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

</description>
<pubDate>Sun, 16 Dec 2018 15:06:00 +0000</pubDate>
<dc:creator>周希</dc:creator>
<og:description>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。 umPy 是一个运行速度非常快的数学库，</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/zhouxihi/p/10117601.html</dc:identifier>
</item>
</channel>
</rss>