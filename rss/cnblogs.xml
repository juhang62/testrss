<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=feed.cnblogs.com%2Fblog%2Fsitehome%2Frss&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://feed.cnblogs.com/blog/sitehome/rss" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dfeed.cnblogs.com%252Fblog%252Fsitehome%252Frss%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>博客园_首页</title>
<link></link>
<description>代码改变世界</description>
<item>
<title>出现过拟合与欠拟合的原因以及解决方案 - 控球强迫症</title>
<link>http://www.cnblogs.com/XDU-Lakers/p/10536101.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/XDU-Lakers/p/10536101.html</guid>
<description>&lt;p&gt;&lt;span&gt;在学习李宏毅机器学习的课程中，在第二课中遇到了两个概念：&lt;strong&gt;过拟合(overfitting)&lt;/strong&gt;和&lt;strong&gt;欠拟合(underfitting)，&lt;/strong&gt;老师对于这两个概念产生的原因以及解决方案没有提及太多，所以今天就让我们一起学习一下有关这两个名词的概念、如何避免等等。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1.过拟合(overfitting)和欠拟合(underfitting)的概念&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2.两个概念的图示&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3.产生的原因&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4.解决方案&lt;/span&gt;&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;span&gt;首先，让我们了解一下机器学习。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;机器学习的基本问题是&lt;strong&gt;利用模型对数据进行拟合&lt;/strong&gt;，学习的目的并非是对有限训练集进行正确预测，&lt;span&gt;而是对未曾在训练集合出现的样本能够正确预测&lt;/span&gt;。模型对训练集数据的误差称为&lt;strong&gt;经验误差&lt;/strong&gt;，对测试集数据的误差称为&lt;strong&gt;泛化误差&lt;/strong&gt;。模型对训练集以外样本的预测能力就称为模型的&lt;strong&gt;泛化能力&lt;/strong&gt;，追求这种泛化能力始终是机器学习的目标。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;1.过拟合(overfitting)和欠拟合(underfitting)的概念&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;过拟合(overfitting)&lt;/strong&gt;和&lt;strong&gt;欠拟合(underfitting)&lt;/strong&gt;是导致模型泛化能力不高的两种常见原因，都是模型学习能力与数据复杂度之间失配的结果。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;过拟合(overfitting)：&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;“过拟合”常常在模型学习能力过强的情况中出现，此时的模型学习能力太强，以至于将训练集单个样本自身的特点都能捕捉到，并将其认为是“一般规律”，同样这种情况也会导致模型泛化能力下降。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;欠拟合(underfitting)：&lt;/strong&gt;&lt;/strong&gt;“欠拟合”常常在模型学习能力较弱，而数据复杂度较高的情况出现，此时模型由于学习能力不足，无法学习到数据集中的“一般规律”，因而导致泛化能力弱。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;两者的区别：欠拟合在训练集和测试集上的性能都较差，而过拟合往往能较好地学习训练集数据的性质，而在测试集上的性能较差。在神经网络训练的过程中，&lt;span&gt;欠拟合主要表现为输出结果的高偏差，而过拟合主要表现为输出结果的高方差。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;2.两个概念的图示&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1179840/201903/1179840-20190315151339756-1611981361.png&quot; alt=&quot;&quot;/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;3.产生的原因&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span&gt;欠拟合(underfitting)：&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;span&gt;（1）模型复杂度过低 （2）&lt;/span&gt;&lt;span&gt;特征量过少&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;过拟合(overfitting)：&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）建模样本选取有误，如样本数量太少，选样方法错误，样本标签错误等，导致选取的样本数据不足以代表预定的分类规则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）样本噪音干扰过大，使得机器将部分噪音认为是特征从而扰乱了预设的分类规则&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）假设的模型无法合理存在，或者说是假设成立的条件实际并不成立&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）参数太多，模型复杂度过高&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（5）对于决策树模型，如果我们对于其生长没有合理的限制，其自由生长有可能使节点只包含单纯的事件数据(event)或非事件数据(no event)，使其虽然可以完美匹配（拟合）训练数据，但是无法适应其他数据集&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（6）对于神经网络模型：a)对样本数据可能存在分类决策面不唯一，随着学习的进行,，BP算法使权值可能收敛过于复杂的决策面；b)权值学习迭代次数足够多(Overtraining)，拟合了训练数据中的噪声和训练样例中没有代表性的特征&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;4.解决方案&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;解决欠拟合(underfitting)：&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（1）增加新特征，可以考虑加入进特征组合、高次特征，来增大假设空间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）添加多项式特征，这个在机器学习算法里面用的很普遍，例如将线性模型通过添加二次项或者三次项使模型泛化能力更强&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）减少正则化参数，正则化的目的是用来防止过拟合的，但是模型出现了欠拟合，则需要减少正则化参数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）使用非线性模型，比如核SVM 、决策树、深度学习等模型&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（5）调整模型的容量(capacity)，通俗地，模型的容量是指其拟合各种函数的能力&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（6）容量低的模型可能很难拟合训练集；使用集成学习方法，如Bagging ,将多个弱学习器Bagging&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;解决过拟合(overfitting)：&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;（1）正则化（Regularization）&lt;/span&gt;（L1和L2）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在模型训练的过程中，需要降低 loss 以达到提高 accuracy 的目的。此时，使用正则化之类的方法直接将权值的大小加入到 loss 里，在训练的时候限制权值变大。训练过程需要降低整体的 loss，这时候，一方面能降低实际输出与样本之间的误差，也能降低权值大小正则化方法包括 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-1-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;0&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-1&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-2&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-3&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-4&quot; class=&quot;mn&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 正则、 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-2-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;1&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-5&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-6&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-7&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-8&quot; class=&quot;mn&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;正则和 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-3-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-9&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-10&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-11&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-12&quot; class=&quot;mn&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 正则，而正则一般是在目标函数之后加上范数。&lt;strong&gt;&lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-6-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-38&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-39&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-40&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-41&quot; class=&quot;mn&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt; 范数是指向量各元素的平方和然后求平方根。可以使得 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-7-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-42&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-43&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-44&quot; class=&quot;mi&quot;&gt;W&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;W 的每个元素都很小，都接近于0，但不会让它等于0，而是接近于0。 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-8-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;L&amp;lt;/mi&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-45&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-46&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-47&quot; class=&quot;mi&quot;&gt;L&lt;span id=&quot;MathJax-Span-48&quot; class=&quot;mn&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;L2正则项起到使得参数 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-9-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-49&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-50&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-51&quot; class=&quot;mi&quot;&gt;W&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;W 变小加剧的效果，关于它为什么能防止过拟合简答的理解为：更小的参数值 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-10-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;mi&amp;gt;W&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-52&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-53&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-54&quot; class=&quot;mi&quot;&gt;W&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;意味着模型的复杂度更低，对训练数据的拟合刚刚好，不会过分拟合训练数据，从而使得不会过拟合，以提高模型的泛化能力。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（2）数据扩增，即增加训练数据样本&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;这是解决过拟合最有效的方法，只要给足够多的数据，让模型「看见」尽可能多的「例外情况」，它就会不断修正自己，从而得到更好的结果。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;那么问题来了，我们如何获取更多的数据？以下有这几种办法：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;　&lt;strong&gt;　1）从数据源头获取更多数据&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　2）根据当前数据集估计数据分布参数，使用该分布产生更多数据：这个一般不用，因为估计分布参数的过程也会代入抽样误差&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;　　3）数据增强（Data Augmentation）：通过一定规则扩充数据。如在物体分类问题里，物体在图像中的位置、姿态、尺度，整体图片明暗度等都不会影响分类结果。我们就可以通过图像平移、翻转、缩放、切割等手段将数据库成倍扩充&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（3）Dropout&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;在训练时，每次随机（如50%概率）忽略隐层的某些节点；这样，我们相当于随机从 &lt;span class=&quot;math inline&quot;&gt;&lt;span id=&quot;MathJax-Element-11-Frame&quot; class=&quot;MathJax&quot; data-mathml=&quot;&amp;lt;math xmlns=&amp;quot;http://www.w3.org/1998/Math/MathML&amp;quot;&amp;gt;&amp;lt;msup&amp;gt;&amp;lt;mn&amp;gt;2&amp;lt;/mn&amp;gt;&amp;lt;mi&amp;gt;n&amp;lt;/mi&amp;gt;&amp;lt;/msup&amp;gt;&amp;lt;/math&amp;gt;&quot;&gt;&lt;span id=&quot;MathJax-Span-55&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-56&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-57&quot; class=&quot;msubsup&quot;&gt;&lt;span id=&quot;MathJax-Span-58&quot; class=&quot;mn&quot;&gt;2&lt;span id=&quot;MathJax-Span-59&quot; class=&quot;mi&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;MJX_Assistive_MathML&quot;&gt;2n(n个神经元的网络) 个模型中采样选择模型&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;（4）Early stopping&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Early stopping便是一种迭代次数截断的方法来防止过拟合的方法，即在模型对训练数据集迭代收敛之前停止迭代来防止过拟合。具体做法是，在每一个Epoch结束时计算validation data的accuracy，当accuracy不再提高时，就停止训练。当然我们并不会在accuracy一降低的时候就停止训练，因为可能经过这个Epoch后，accuracy降低了，但是随后的Epoch又让accuracy又上去了，所以不能根据一两次的连续降低就判断不再提高。一般的做法是，在训练的过程中，记录到目前为止最好的validation accuracy，当连续10次Epoch（或者更多次）没达到最佳accuracy时，则可以认为accuracy不再提高了。此时便可以停止迭代了（Early Stopping）。这种策略也称为“No-improvement-in-n”，n即Epoch的次数，可以根据实际情况取，如10、20、30……&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;以上就是本次学习内容，欢迎大家交流讨论&lt;/p&gt;

</description>
<pubDate>Fri, 15 Mar 2019 07:23:00 +0000</pubDate>
<dc:creator>控球强迫症</dc:creator>
<og:description>在学习李宏毅机器学习的课程中，在第二课中遇到了两个概念：过拟合(overfitting)和欠拟合(underfitting)，老师对于这两个概念产生的原因以及解决方案没有提及太多，所以今天就让我们一起</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/XDU-Lakers/p/10536101.html</dc:identifier>
</item>
<item>
<title>【原创】如何用面向对象思想编写代码 - 杜俊强</title>
<link>http://www.cnblogs.com/dujq/p/10535738.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/dujq/p/10535738.html</guid>
<description>&lt;h2&gt;一、什么是面向对象&lt;/h2&gt;
&lt;p&gt;在用面向对象思想写代码之前，先了解一下什么是面向对象？&lt;/p&gt;
&lt;p&gt;个人理解：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向对象：把现实世界里的具体物体或者逻辑世界的逻辑物体，用抽象手段，把这些物体抽象成程序能够识别的类，使类具备物体的属性和行为，把物体与物体之间的关联转换成类与类之间的关联，用编程逻辑把这些关联表示出来设计成程序，也就是面向对象设计。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;什么样的设计才是面向对象的呢：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;符合封装、继承、多态特征的设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么要用面向对象：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过定义我们知道面向对象是用来解决物体与物体之间的关联的一种方式，除了这种方式还有很多其他方式比如面向过程。解决问题的方式很多，但是最好的只有一个，在代码的世界里我们不仅要考虑功能的实现，还要考虑后期的维护，用面向对象的思想编写代码&lt;/strong&gt;&lt;strong&gt;比其它方式，能让程序更好的维护。&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;二、如何用面向对象思想编写代码&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;抽象-----实现面向对象思想设计程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何抽象，抽象层次：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一层 抽象&lt;/strong&gt; ：把现实世界存在的物体或者逻辑物体通过抽象封装成一个具体类，体现了面向对象&lt;span&gt;&lt;strong&gt;封装&lt;/strong&gt;&lt;/span&gt;特征，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/669676/201903/669676-20190315103712584-705558883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;这两个类把现实世界具体动物转换成程序里的具体类或者实例类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二层 抽象 ：&lt;/strong&gt; 第二层抽象是必须的吗，不是的，因为第一层中不同的具体类之间有相同或相似部分，又有不同的部分，它们之间有联系，好像是一个事物呈现了多种形态，也就是一个事物&lt;strong&gt;&lt;span&gt;有变化&lt;/span&gt;，&lt;/strong&gt;才会有第二层抽象出现&lt;/p&gt;
&lt;p&gt;此时我们需要抽象出来相似部分，去封装成一个对象，然后被子类继承，这也体现了面向对象&lt;span&gt;&lt;strong&gt;继承&lt;/strong&gt;&lt;/span&gt;特征，子类中的方法也体现了面向对象&lt;strong&gt;&lt;span&gt;多态&lt;/span&gt;&lt;/strong&gt;特征，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/669676/201903/669676-20190315105503245-305087190.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;可能有人会问Car里和Cat里都有Run有相似部分不也可以抽象吗，我们不能这样做，因为现实世界Cat和Car之间没有任何联系，而面向对象只能抽象现实世界或或逻辑世界有关联的对象，然后解决这些关联对象间的逻辑处理。&lt;/p&gt;
&lt;p&gt;Cat和Car虽然有相似部分但是没有关联关系也就不存在逻辑关系，抽象在一起也没啥意义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以第二层抽象关键点在于判断具体对象间是否有关联关系或逻辑关系-----通过现实世界物体间是否有关联关系来决定具体对象是否有关联关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cat和Bird在现实世界都属于动物，他们之间是有关联的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三层 抽象&lt;/strong&gt; ： 对第二层抽象出来的相似部分进一步抽象。大家都知道相似部分是子类共用的一但变化所有的子类都将受到影响，此时我们需要对相似部分做抽象分离，通常把状态相关和行为相关分离，行为稳定的和行为不稳定的分离，粒度越细越好。&lt;/p&gt;
&lt;p&gt;粒度越细复杂度越高，此时需要复杂度和稳定性之间找个平衡点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四层 抽象：&lt;/strong&gt;  对子类变化进行抽象，相似的部分我们封装了，针对变化的部分，此时会考虑一些设计模式，来解决子类的变化问题，比如某个方法的内部实现用策略模式等。一般解决类结构变化是新增接口文件，解决类状态变化或者行为逻辑的变化直接修改即可。&lt;/p&gt;
&lt;p&gt;一般抽象到这一层应该就满足需求了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五层 抽象：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;......&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第N层 抽象：&lt;span&gt;最后每一个对象都符合面向对象的设计原则&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;三、如何判断一个对象是否合理&lt;/h2&gt;
&lt;p&gt;1、 如果对象只有一种呈现形态：也就是说程序里无论是什么时候我们就只使用对象一种实例，这个对象只要符合单一职责的原则就好了，不用再去抽象&lt;/p&gt;
&lt;p&gt;2、 如果对象有多种呈现形态：也就是说程序里我们根据不同的情景或者上下文会使用对象的不同呈现形态（实例），这个对象除了满足单一职责，还要考虑这个对象是否符合其它设计原则&lt;/p&gt;
&lt;h2&gt;四、面向对象的设计原则&lt;/h2&gt;
&lt;p&gt;为了让文章更完整我就补上了，很多博文都有讲解&lt;/p&gt;
&lt;p&gt;1、SRP-Single Responsibility Principle  单一职责原则&lt;/p&gt;
&lt;p&gt;2、OCP-Open Close Principle   开闭原则&lt;/p&gt;
&lt;p&gt;3、LSP-Liskov Substitution Principle  里氏替换原则&lt;/p&gt;
&lt;p&gt;4、DIP-Dependence Inversion Principle  依赖倒置原则&lt;/p&gt;
&lt;p&gt;5、ISP-Interface Segregation Principle   接口分离原则&lt;/p&gt;
&lt;p&gt;6、LOD-Law Of Demeter  最少知识原则（迪米特原则）&lt;/p&gt;
&lt;p&gt;7、CARP-Composite/Aggregate Reuse Principle 优先复用原则&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这些设计原则是为了判断抽象出来的对象是否合理，也就是说判断创建的类是否合理。程序符合这些原则就更加符合面向对象设计。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;单一职责原则是每个对象每个类需要满足的最基本原则，下面也谈下自己的理解&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;五、单一职责原则&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;为什么出现这一原则呢？我们经常会遇到以下情景：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;T负责两个不同的职责：职责P1，职责P2，当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障，也就是说职责P1和P2被耦合在了一起，导致程序很脆弱&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;作用：单一职责用来给对象瘦身的，类的结构瘦身，类的细节瘦身，把不属于它的职责彻底剥离&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;它包含两层意思：&lt;/p&gt;
&lt;p&gt;1、一个类只负责做属于它自己的事&lt;/p&gt;
&lt;p&gt;2、引起一个类变化的原因只能有一个，就是属于这个类的职责需求变化了&lt;/p&gt;
&lt;p&gt;单一职责不是说一个类只做一件事，这个类可以做多件事情，但是这些事情需要都属于这个类的职责，也就是说只做它该做的，不该做的就剥离。&lt;/p&gt;
&lt;p&gt;&lt;span&gt;如何判断一个类是否多于一个职责：&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;1、Information holder –该对象设计为存储对象并提供对象信息给其它对象。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;2、Structurer –该对象设计为维护对象和信息之间的关系&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;3、Service provider –该对象设计为处理工作并提供服务给其它对象&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;4、Controller –该对象设计为控制决策一系列负责的任务处理&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;5、 Coordinator--该对象不做任何决策处理工作，只是delegate工作到其它对象上&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;6、Interfacer--该对象设计为在系统的各个部分转化信息（或请求）&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;一个对象应该有且只有一个上面的职责&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;六、总结&lt;/h2&gt;
&lt;p&gt;面向对象整体设计思路：抽象----&amp;gt;具体对象----&amp;gt;变化----&amp;gt;对象的多种呈现形态----&amp;gt;抽象----&amp;gt;抽象----&amp;gt;符合设计原则----&amp;gt;单一职责具体对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;面向对象核心：针对变化进行抽象封装&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;备注：如若转载请说明文章出处&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 07:06:00 +0000</pubDate>
<dc:creator>杜俊强</dc:creator>
<og:description>如何用面向对象思想写代码，个人的一些体会</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/dujq/p/10535738.html</dc:identifier>
</item>
<item>
<title>文本超出隐藏显示省略号兼容问题 - 天地一扁舟</title>
<link>http://www.cnblogs.com/changzz/p/10537092.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/changzz/p/10537092.html</guid>
<description>&lt;p&gt;最近做一个项目的时候遇到一个css兼容性问题，就是限制文本副标题最多显示三行，隐藏超出部分并显示省略号，说实话，之前这种东西做了好多，一般都是用css去控制一下，css代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;display: box;
display: &lt;/span&gt;-webkit-&lt;span&gt;box;
&lt;/span&gt;-webkit-box-&lt;span&gt;orient: vertical;
&lt;/span&gt;-webkit-line-clamp: &lt;span&gt;3&lt;/span&gt;;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;限制三行&lt;/span&gt;
text-&lt;span&gt;overflow: ellipsis;
overflow: hidden;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是在文本容器上设置高度为行高的三倍，超出隐藏，然后利用 text-overflow: ellipsis; 属性去显示省略号，但是这有个问题就是这个属性兼容性不好，如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1438587/201903/1438587-20190315145503052-727503330.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;firfox和ie不支持，之前公司测试没注意这些细节，现在公司测试要求必须都显示省略号，想了一下，最后用js来实现，代码如下：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
$(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;.dealers-list-info&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;).each(function (i) {
    &lt;/span&gt;&lt;span&gt;var&lt;/span&gt; parentH = $(&lt;span&gt;this&lt;/span&gt;).height();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;父元素的高度&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; txtBox = $(&lt;span&gt;this&lt;/span&gt;).find(&lt;span&gt;'&lt;/span&gt;&lt;span&gt;p&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;span&gt;);
    &lt;/span&gt;&lt;span&gt;while&lt;/span&gt; (txtBox.outerHeight() &amp;gt; parentH) {&lt;span&gt;//&lt;/span&gt;&lt;span&gt;对比父元素和子元素的高度&lt;/span&gt;
        txtBox.text(txtBox.text().replace(/(\s)*([a-zA-Z0-&lt;span&gt;9&lt;/span&gt;]+|\W)(\.\.\.)?$/, &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;...&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;));
    };
});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;原理就是设置文本容器p标签父元素的高度为3倍行高然后不断对比文本容器p标签和文本容器父元素 .info的高度，如果p的高度大于 .info高度说明还是超出，就把p元素文本后三位用省略号代替直到文本容器p的高度等于 .info的高度说明刚好显示三行，循环结束。&lt;/p&gt;
&lt;p&gt;这种方法其实比较笨，如果文本过长的话会影响性能，想过让后端去截取文字，但是这是一个国际站，不同语言下的文字长度不同，所幸这个副标题文字也不会太多，暂且先用这种方法，等想到更好的方法了再更。。。&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 06:56:00 +0000</pubDate>
<dc:creator>天地一扁舟</dc:creator>
<og:description>最近做一个项目的时候遇到一个css兼容性问题，就是限制文本副标题最多显示三行，隐藏超出部分并显示省略号，说实话，之前这种东西做了好多，一般都是用css去控制一下，css代码如下： 就是在文本容器上设置</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/changzz/p/10537092.html</dc:identifier>
</item>
<item>
<title>iOS拍照图片旋转的问题 - 6度XZ</title>
<link>http://www.cnblogs.com/6duxz/p/10536757.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/6duxz/p/10536757.html</guid>
<description>&lt;p&gt;　　很久之前，遇到了这种情况，iOS某端拍照上传到服务器，其他iOS端从服务器下载该照片展示，发现图片逆时针旋转了90度。当时百度了一下，找到一段代码修正image方向，问题解决了，但没有深入理解底层原理。最近又遇到这个问题，还是同样的解决方案。但是codereview的时候同事问为什么这么写，就深入研究了一下。&lt;/p&gt;
&lt;p&gt;　　首先我们要知道image的imageOrientation属性。它是记录拍照时手机方向的，iOS默认横屏Home键在右侧为标准拍照姿势，imageOrientation为UIImageOrientationUp。知道了拍照时相机方向,展示的时候就能对照片就行仿射变换,让它能正确显示。&lt;/p&gt;
&lt;p&gt;　　看到这里，就可以直接去大神的深度分析文章了：&lt;a href=&quot;http://feihu.me/blog/2015/how-to-handle-image-orientation-on-iOS/&quot; target=&quot;_blank&quot;&gt;如何处理iOS中照片的方向&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;直观的解决方案&quot;&gt;直观的解决方案&lt;/h3&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;71&quot;&gt;
&lt;pre&gt;
- (UIImage *&lt;span&gt;)fixOrientation {

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; No-op if the orientation is already correct&lt;/span&gt;
    &lt;span&gt;if&lt;/span&gt; (self.imageOrientation == UIImageOrientationUp) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self;

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We need to calculate the proper transformation to make the image upright.
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; We do it in 2 steps: Rotate if Left/Right/Down, and then flip if Mirrored.&lt;/span&gt;
    CGAffineTransform transform =&lt;span&gt; CGAffineTransformIdentity;

    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (self.imageOrientation) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationDown:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationDownMirrored:
            transform &lt;/span&gt;=&lt;span&gt; CGAffineTransformTranslate(transform, self.size.width, self.size.height);
            transform &lt;/span&gt;=&lt;span&gt; CGAffineTransformRotate(transform, M_PI);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationLeft:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationLeftMirrored:
            transform &lt;/span&gt;= CGAffineTransformTranslate(transform, self.size.width, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            transform &lt;/span&gt;=&lt;span&gt; CGAffineTransformRotate(transform, M_PI_2);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationRight:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationRightMirrored:
            transform &lt;/span&gt;= CGAffineTransformTranslate(transform, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, self.size.height);
            transform &lt;/span&gt;= CGAffineTransformRotate(transform, -&lt;span&gt;M_PI_2);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationUp:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationUpMirrored:
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (self.imageOrientation) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationUpMirrored:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationDownMirrored:
            transform &lt;/span&gt;= CGAffineTransformTranslate(transform, self.size.width, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            transform &lt;/span&gt;= CGAffineTransformScale(transform, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationLeftMirrored:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationRightMirrored:
            transform &lt;/span&gt;= CGAffineTransformTranslate(transform, self.size.height, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;);
            transform &lt;/span&gt;= CGAffineTransformScale(transform, -&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;1&lt;/span&gt;&lt;span&gt;);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationUp:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationDown:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationLeft:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationRight:
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Now we draw the underlying CGImage into a new context, applying the transform
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; calculated above.&lt;/span&gt;
    CGContextRef ctx =&lt;span&gt; CGBitmapContextCreate(NULL, self.size.width, self.size.height,
                                             CGImageGetBitsPerComponent(self.CGImage), &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,
                                             CGImageGetColorSpace(self.CGImage),
                                             CGImageGetBitmapInfo(self.CGImage));
    CGContextConcatCTM(ctx, transform);
    &lt;/span&gt;&lt;span&gt;switch&lt;/span&gt;&lt;span&gt; (self.imageOrientation) {
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationLeft:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationLeftMirrored:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationRight:
        &lt;/span&gt;&lt;span&gt;case&lt;/span&gt;&lt;span&gt; UIImageOrientationRightMirrored:
            &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; Grr...&lt;/span&gt;
            CGContextDrawImage(ctx, CGRectMake(&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,self.size.height,self.size.width), self.CGImage);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;

        &lt;/span&gt;&lt;span&gt;default&lt;/span&gt;&lt;span&gt;:
            CGContextDrawImage(ctx, CGRectMake(&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;,&lt;span&gt;0&lt;/span&gt;&lt;span&gt;,self.size.width,self.size.height), self.CGImage);
            &lt;/span&gt;&lt;span&gt;break&lt;/span&gt;&lt;span&gt;;
    }

    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt; And now we just create a new UIImage from the drawing context&lt;/span&gt;
    CGImageRef cgimg =&lt;span&gt; CGBitmapContextCreateImage(ctx);
    UIImage &lt;/span&gt;*img =&lt;span&gt; [UIImage imageWithCGImage:cgimg];
    CGContextRelease(ctx);
    CGImageRelease(cgimg);
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; img;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码有些长，不过却非常直观。这里面涉及到图像矩阵变换的操作，理解起来可能稍稍有些困难，接下来，我会有另外一篇文章专门来介绍图像变换。现在，记住下面两点便能够很好的帮助理解：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;图像的原点在左下角&lt;/li&gt;
&lt;li&gt;矩阵变换时，后面的矩阵先作用，前面的矩阵后作用&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;以&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImageOrientationDown&lt;/code&gt;方向为例，&lt;img src=&quot;http://feihu.me/img/posts/orientation-UIImageOrientationDown.png&quot; alt=&quot;UIImageOrientationDown&quot;/&gt;，很明显它翻转了180度。那么对它的旋转需要两步，第一步是以左下方为原点旋转180度，(此时顺时针还是逆时针旋转效果一样)旋转后上图变为：&lt;img src=&quot;http://feihu.me/img/posts/orientation-transform-rotate.png&quot; alt=&quot;旋转180度后&quot;/&gt; 。用代码表示为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;transform &lt;span class=&quot;o&quot;&gt;= &lt;span class=&quot;n&quot;&gt;CGAffineTransformRotate&lt;span class=&quot;p&quot;&gt;(&lt;span class=&quot;n&quot;&gt;transform&lt;span class=&quot;p&quot;&gt;, &lt;span class=&quot;n&quot;&gt;M_PI&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;因为是以左下方为原点旋转的，所以整幅图被移到了第三象限。第二步需要将其平移至第一象限，向右上方进行平移即可。x方向上移动距离为图像的宽度，y方向上移动距离为图像的高度，所以平移后图像变为：&lt;img src=&quot;http://feihu.me/img/posts/orientation-transform-transition.png&quot; alt=&quot;平移后&quot;/&gt;。代码为：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;transform &lt;span class=&quot;o&quot;&gt;= &lt;span class=&quot;n&quot;&gt;CGAffineTransformTranslate&lt;span class=&quot;p&quot;&gt;(&lt;span class=&quot;n&quot;&gt;transform&lt;span class=&quot;p&quot;&gt;, &lt;span class=&quot;n&quot;&gt;self&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;size&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;width&lt;span class=&quot;p&quot;&gt;, &lt;span class=&quot;n&quot;&gt;self&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;size&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;height&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再加上我们前面所说的第二点，矩阵变换时，后面的矩阵先作用，前面的矩阵后作用，那么只需要将上面两步颠倒即可：&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;transform &lt;span class=&quot;o&quot;&gt;= &lt;span class=&quot;n&quot;&gt;CGAffineTransformTranslate&lt;span class=&quot;p&quot;&gt;(&lt;span class=&quot;n&quot;&gt;transform&lt;span class=&quot;p&quot;&gt;, &lt;span class=&quot;n&quot;&gt;self&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;size&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;width&lt;span class=&quot;p&quot;&gt;, &lt;span class=&quot;n&quot;&gt;self&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;size&lt;span class=&quot;p&quot;&gt;.&lt;span class=&quot;n&quot;&gt;height&lt;span class=&quot;p&quot;&gt;);
&lt;span class=&quot;n&quot;&gt;transform &lt;span class=&quot;o&quot;&gt;= &lt;span class=&quot;n&quot;&gt;CGAffineTransformRotate&lt;span class=&quot;p&quot;&gt;(&lt;span class=&quot;n&quot;&gt;transform&lt;span class=&quot;p&quot;&gt;, &lt;span class=&quot;n&quot;&gt;M_PI&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;其它的方向可以用完全一样的方法来分析，这里不再一一赘述。&lt;/p&gt;
&lt;h3 id=&quot;第二种简单的方法&quot;&gt;第二种简单的方法&lt;/h3&gt;
&lt;p&gt;第二种方法同样也是StackOverflow上的&lt;a href=&quot;http://stackoverflow.com/a/10611036/973315&quot;&gt;答案&lt;/a&gt;，没那么直观，但非常简单：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
- (UIImage *&lt;span&gt;)normalizedImage {
    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt; (self.imageOrientation == UIImageOrientationUp) &lt;span&gt;return&lt;/span&gt;&lt;span&gt; self; 

    UIGraphicsBeginImageContextWithOptions(self.size, NO, self.scale);
    [self drawInRect:(CGRect){&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;, &lt;span&gt;0&lt;/span&gt;&lt;span&gt;, self.size}];
    UIImage &lt;/span&gt;*normalizedImage =&lt;span&gt; UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; normalizedImage;
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里是利用了&lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;drawInRect&lt;/code&gt;方法，它会将图像绘制到画布上，并且已经考虑好了图像的方向，开发文档这样解释：&lt;/p&gt;

&lt;div class=&quot;cnblogs_code&quot; readability=&quot;39&quot;&gt;
&lt;pre&gt;
-&lt;span&gt;drawInRect:
Draws the entire image &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; the specified rectangle, scaling it &lt;span&gt;as&lt;/span&gt;&lt;span&gt; needed to fit.

Discussion
This method draws the entire image &lt;/span&gt;&lt;span&gt;in&lt;/span&gt; the current graphics context, respecting the image’s orientation setting. In the &lt;span&gt;default&lt;/span&gt; coordinate system, images are situated down and to the right of the origin of the specified rectangle. This method respects any transforms applied to the current graphics context, however.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第二个方法简单易于理解,我就采用了第二种解决方案。希望能帮到大家。&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;nc&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nl&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;mi&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;k&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;span class=&quot;c1&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;o&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;nb&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span class=&quot;p&quot;&gt;&lt;span class=&quot;n&quot;&gt;&lt;span/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</description>
<pubDate>Fri, 15 Mar 2019 06:13:00 +0000</pubDate>
<dc:creator>6度XZ</dc:creator>
<og:description>很久之前，遇到了这种情况，iOS某端拍照上传到服务器，其他iOS端从服务器下载该照片展示，发现图片逆时针旋转了90度。当时百度了一下，找到一段代码修正image方向，问题解决了，但没有深入理解底层原理</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/6duxz/p/10536757.html</dc:identifier>
</item>
<item>
<title>Redis 实战篇之搭建集群 - Esofar</title>
<link>http://www.cnblogs.com/esofar/p/10486621.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/esofar/p/10486621.html</guid>
<description>&lt;h2 id=&quot;redis-集群简介&quot;&gt;Redis 集群简介&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://redis.io/topics/cluster-spec&quot;&gt;Redis Cluster&lt;/a&gt; 即 Redis 集群，是 Redis 官方在 3.0 版本推出的一套分布式存储方案。完全去中心化，由多个节点组成，所有节点彼此互联。Redis 客户端可以直接连接任何一节点获取集群中的键值对，不需要中间代理，如果该节点不存在用户所指定的键值，其内部会自动把客户端重定向到键值所在的节点。&lt;/p&gt;
&lt;p&gt;Redis 集群是一个网状结构，每个节点都通过 TCP 连接跟其他每个节点连接。在一个有 N 个节点的集群中，每个节点都有 N-1 个流出的 TCP 连接，和 N-1 个流入的连接，这些 TCP 连接会永久保持。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/785976/201903/785976-20190306223745175-1867556088.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Redis Cluster 同其他分布式存储系统一样，主要具备以下两个功能：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据分区&lt;/strong&gt;&lt;br/&gt;Redis 集群会将用户数据分散保存至各个节点中，突破单机 Redis 内存最大存储容量。集群引入了 哈希槽&lt;code&gt;slot&lt;/code&gt;的概念，其搭建完成后会生 16384 个哈希槽&lt;code&gt;slot&lt;/code&gt;，同时会根据节点的数量大致均等的将 16384 个哈希槽映射到不同的节点上。当用户存储&lt;code&gt;key-value&lt;/code&gt;时，集群会先对&lt;code&gt;key&lt;/code&gt;进行 CRC16 校验然后对 16384 取模来决定&lt;code&gt;key-value&lt;/code&gt;放置哪个槽，从而实现自动分割数据到不同的节点上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据冗余&lt;/strong&gt;&lt;br/&gt;Redis 集群支持主从复制和故障恢复。集群使用了主从复制模型，每个主节点&lt;code&gt;master&lt;/code&gt;应至少有一个从节点&lt;code&gt;slave&lt;/code&gt;。假设某个主节点故障，其所有子节点会广播一个数据包给集群里的其他主节点来请求选票，一旦某个从节点收到了大多数主节点的回应，那么它就赢得了选举，被推选为主节点，负责处理之前旧的主节点负责的哈希槽。&lt;/p&gt;
&lt;blockquote readability=&quot;4.1538461538462&quot;&gt;
&lt;p&gt;关于 Redis Cluster 详细介绍以及实现原理请参见 &lt;a href=&quot;https://redis.io/topics/cluster-tutorial&quot;&gt;Redis Cluster 教程&lt;/a&gt; 和 &lt;a href=&quot;https://redis.io/topics/cluster-spec&quot;&gt;Redis Cluster 规范&lt;/a&gt;，在此不再赘述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;下载-安装-redis&quot;&gt;下载 &amp;amp; 安装 Redis&lt;/h2&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;实验环境信息&lt;br/&gt;Linux 版本：CentOS Linux release 7.4.1708&lt;br/&gt;Redis 版本：5.0.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先在服务器或虚拟机中安装一个单机 Redis，如果已安装可以跳过本节，未安装过的正好学习下。&lt;/p&gt;
&lt;p&gt;进入 Redis 待安装目录。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd /usr/local&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;下载、解压 Redis 源代码压缩包。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;wget http://download.redis.io/releases/redis-5.0.3.tar.gz
tar -zxvf redis-5.0.3.tar.gz&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;然后进入解压后的目录并使用 &lt;a href=&quot;http://www.gnu.org/software/make/&quot;&gt;make&lt;/a&gt; 命令执行编译安装 Redis。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd redis-5.0.3
make &amp;amp;&amp;amp; make install&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不要高兴，因为你极有可能会遇到因为 &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GCC&lt;/a&gt; 编译器未安装导致编译失败的情况。不要着急，请顺序执行如下命令。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum -y install gcc
make distclean 
make &amp;amp;&amp;amp; make install&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Redis 基于 C 语言开发，故编译源码需要 GCC（Linux下的一个编译器，这里需要用来编译&lt;code&gt;.c&lt;/code&gt;文件）的支持。如机器上未安装需要先执行命令&lt;code&gt;yum -y install gcc&lt;/code&gt;安装 GCC 编译工具，然后&lt;code&gt;make distclean&lt;/code&gt;清除之前生成的文件，最后&lt;code&gt;make &amp;amp;&amp;amp; make install&lt;/code&gt;重新编译安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最终出现类似下文输出则表示 Redis 安装成功。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;......
Hint: It's a good idea to run 'make test' ;)

    INSTALL install
    INSTALL install
    INSTALL install
    INSTALL install
    INSTALL install
make[1]: 离开目录“/usr/local/redis-5.0.3/src”&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如果源码编译无误且执行结果正确，&lt;code&gt;make install&lt;/code&gt;命令会将程序安装至系统预设的可执行文件存放路径，一般是&lt;code&gt;/usr/local/bin&lt;/code&gt;目录，可以通过如下终端输出确认。当然，也可以使用&lt;code&gt;make install PREFIX=&amp;lt;path&amp;gt;&lt;/code&gt;命令安装到指定路径。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost bin]# cd /usr/local/bin
[root@localhost bin]# ls -l
总用量 32672
-rwxr-xr-x. 1 root root 4367328 3月   6 06:11 redis-benchmark
-rwxr-xr-x. 1 root root 8092024 3月   6 06:11 redis-check-aof
-rwxr-xr-x. 1 root root 8092024 3月   6 06:11 redis-check-rdb
-rwxr-xr-x. 1 root root 4802696 3月   6 06:11 redis-cli
lrwxrwxrwx. 1 root root      12 3月   6 06:11 redis-sentinel -&amp;gt; redis-server
-rwxr-xr-x. 1 root root 8092024 3月   6 06:11 redis-server&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;至此，单机 Redis 安装完成。&lt;/p&gt;
&lt;h2 id=&quot;搭建-redis-集群&quot;&gt;搭建 Redis 集群&lt;/h2&gt;
&lt;p&gt;进入正题。&lt;/p&gt;
&lt;p&gt;依据 Redis Cluster 内部故障转移实现原理，Redis 集群至少需要 3 个主节点，而每个主节点至少有 1 从节点，因此搭建一个集群至少包含 6 个节点，三主三从，并且分别部署在不同机器上。&lt;/p&gt;
&lt;p&gt;条件有限，测试环境下我们只能在一台机器上创建一个伪集群，通过不同的 TCP 端口启动多个 Redis 实例，组成集群。&lt;/p&gt;
&lt;p&gt;目前 Redis Cluster 的搭建有两种方式：&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;手动方式搭建，即手动执行 cluster 命令，一步步完成搭建流程。&lt;/li&gt;
&lt;li&gt;自动方式搭建，即使用官方提供的集群管理工具快速搭建。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;两种方式原理一样，自动搭建方式只是将手动搭建方式中需要执行的 Redis 命令封装到了可执行程序。生产环境下推荐使用第二种方式，简单快捷，不易出错。不过本文实战演示两种方式都会提及。&lt;/p&gt;
&lt;h3 id=&quot;手动方式搭建&quot;&gt;手动方式搭建&lt;/h3&gt;
&lt;h4 id=&quot;启动节点&quot;&gt;启动节点&lt;/h4&gt;
&lt;p&gt;搭建集群的第一步就是要先把参与搭建集群的每个节点启动起来。&lt;/p&gt;
&lt;p&gt;由于我们这是在一台机器上模拟多个节点，可以预先规划下各个节点的属性：&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;7001&lt;/td&gt;
&lt;td&gt;主&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;/usr/local/redis-cluster/7001/redis.conf&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;7002&lt;/td&gt;
&lt;td&gt;主&lt;/td&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;/usr/local/redis-cluster/7002/redis.conf&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;7003&lt;/td&gt;
&lt;td&gt;主&lt;/td&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;/usr/local/redis-cluster/7003/redis.conf&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;8001&lt;/td&gt;
&lt;td&gt;从&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;/usr/local/redis-cluster/8001/redis.conf&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;8002&lt;/td&gt;
&lt;td&gt;从&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;/usr/local/redis-cluster/8002/redis.conf&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;8003&lt;/td&gt;
&lt;td&gt;从&lt;/td&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;/usr/local/redis-cluster/8003/redis.conf&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;根据上述规划，可以先通过如下命令创建各个节点启动配置文件的存放目录。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;mkdir /usr/local/redis-cluster
cd redis-cluster
mkdir -p 7001 7002 7003 8001 8002 8003&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;顺序执行如下行命令，进入 Redis 源码包目录并将默认配置文件&lt;code&gt;redis.conf&lt;/code&gt;分别复制到六个节点配置存放目录中，作为各自节点启动配置文件。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cd /usr/local/redis-5.0.3
cp redis.conf /usr/local/redis-cluster/7001 
cp redis.conf /usr/local/redis-cluster/7002
cp redis.conf /usr/local/redis-cluster/7003 
cp redis.conf /usr/local/redis-cluster/8001
cp redis.conf /usr/local/redis-cluster/8002 
cp redis.conf /usr/local/redis-cluster/8003&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来需要分别修改每个节点的配置文件。下面贴的是节点 A 的配置文件&lt;code&gt;/usr/local/redis-cluster/7001/redis.conf&lt;/code&gt;中启用或修改的一些必要参数。其他节点 B、C、D、E、F 参照修改，注意把涉及端口的地方修改成各自节点预先规划的即可。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bind 192.168.83.128                    # 设置当前节点主机地址       
port 7001                              # 设置客户端连接监听端口     
pidfile /var/run/redis_7001.pid        # 设置 Redis 实例 pid 文件       
daemonize yes                          # 以守护进程运行 Redis 实例     
cluster-enabled yes                    # 启用集群模式
cluster-node-timeout 15000             # 设置当前节点连接超时毫秒数
cluster-config-file nodes-7001.conf    # 设置当前节点集群配置文件路径&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;完成上述工作就可以通过如下几组命令启动待搭建集群中的 6 个节点了。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/usr/local/bin/redis-server /usr/local/redis-cluster/7001/redis.conf
/usr/local/bin/redis-server /usr/local/redis-cluster/7002/redis.conf
/usr/local/bin/redis-server /usr/local/redis-cluster/7003/redis.conf
/usr/local/bin/redis-server /usr/local/redis-cluster/8001/redis.conf
/usr/local/bin/redis-server /usr/local/redis-cluster/8002/redis.conf
/usr/local/bin/redis-server /usr/local/redis-cluster/8003/redis.conf&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;最后通过&lt;code&gt;ps -ef|grep redis&lt;/code&gt;命令确认各个节点服务是否已经正常运行。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost bin]# ps -ef|grep redis
root       5613      1  0 04:25 ?        00:00:00 /usr/local/bin/redis-server 127.0.0.1:7001 [cluster]
root       5650      1  0 04:26 ?        00:00:00 /usr/local/bin/redis-server 127.0.0.1:7002 [cluster]
root       5661      1  0 04:26 ?        00:00:00 /usr/local/bin/redis-server 127.0.0.1:7003 [cluster]
root       5672      1  0 04:27 ?        00:00:00 /usr/local/bin/redis-server 127.0.0.1:8001 [cluster]
root       5681      1  0 04:27 ?        00:00:00 /usr/local/bin/redis-server 127.0.0.1:8002 [cluster]
root       5690      1  0 04:27 ?        00:00:00 /usr/local/bin/redis-server 127.0.0.1:8003 [cluster]
root       5731   1311  0 04:28 pts/0    00:00:00 grep --color=auto redis&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上输出可以看出上面规划的 6 个节点都成功启动。&lt;/p&gt;
&lt;h4 id=&quot;节点握手&quot;&gt;节点握手&lt;/h4&gt;
&lt;p&gt;虽然上面 6 个节点都启用了群集支持，但默认情况下它们是不相互信任或者说没有联系的。节点握手就是在各个节点之间创建链接（每个节点与其他节点相连），形成一个完整的网格，即集群。&lt;/p&gt;
&lt;p&gt;节点握手的命令如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cluster meet ip port&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;但为了创建群集，不需要发送形成完整网格所需的所有 &lt;a href=&quot;https://redis.io/commands/cluster-meet&quot;&gt;cluster meet&lt;/a&gt; 命令。只要能发送足够的&lt;code&gt;cluster meet&lt;/code&gt;消息，可以让每个节点都可以通过一系列已知节点到达每个其他节点，缺失的链接将被自动创建。&lt;/p&gt;
&lt;p&gt;例如，如果我们通过&lt;code&gt;cluster meet&lt;/code&gt;将节点 A 与节点 B 连接起来，并将 B 与 C 连接起来，则 A 和 C 会自己找到握手方式并创建链接。&lt;/p&gt;
&lt;p&gt;我们的创建的 6 个节点可以通过 redis-cli 连接到 A 节点执行如下五组命令完成握手，生产环境需要将 IP &lt;code&gt;127.0.0.1&lt;/code&gt;替换成外网 IP。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cluster meet 127.0.0.1 7002
cluster meet 127.0.0.1 7003
cluster meet 127.0.0.1 8001
cluster meet 127.0.0.1 8002
cluster meet 127.0.0.1 8003&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上述命令正常执行输出结果如下。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost bin]# /usr/local/bin/redis-cli -p 7001
127.0.0.1:7001&amp;gt; cluster meet 127.0.0.1 7002
OK
127.0.0.1:7001&amp;gt; cluster meet 127.0.0.1 7003
OK
127.0.0.1:7001&amp;gt; cluster meet 127.0.0.1 8001
OK
127.0.0.1:7001&amp;gt; cluster meet 127.0.0.1 8002
OK
127.0.0.1:7001&amp;gt; cluster meet 127.0.0.1 8003
OK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;接下来可以通过 &lt;a href=&quot;https://redis.io/commands/cluster-nodes&quot;&gt;cluster nodes&lt;/a&gt; 命令查看节点之间 的链接状态。我随机找了两个节点 B 和 F 测试，输出结果如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost /]# /usr/local/bin/redis-cli -p 7002 cluster nodes
61e8c4ed8d1ff2a765a4dd2c3d300d8121d26e12 127.0.0.1:7001@17001 master - 0 1552220691885 4 connected
a8a41694f22977fda78863bdfb3fc03dd1fab1bd 127.0.0.1:8002@18002 master - 0 1552220691000 5 connected
51987c4b5530c81f2845bb9d521daf6d3dce3659 127.0.0.1:8001@18001 master - 0 1552220690878 3 connected
1b4b3741945d7fed472a1324aaaa6acaa1843ccb 127.0.0.1:7002@17002 myself,master - 0 1552220690000 1 connected
19147f56e679767bcebb8653262ff7f56ca072a8 127.0.0.1:7003@17003 master - 0 1552220691000 2 connected
ed6fd72e61b747af3705b210c7164bc68739303e 127.0.0.1:8003@18003 master - 0 1552220690000 0 connected
[root@localhost /]# /usr/local/bin/redis-cli -p 8002 cluster nodes
1b4b3741945d7fed472a1324aaaa6acaa1843ccb 127.0.0.1:7002@17002 master - 0 1552220700255 1 connected
ed6fd72e61b747af3705b210c7164bc68739303e 127.0.0.1:8003@18003 master - 0 1552220703281 0 connected
19147f56e679767bcebb8653262ff7f56ca072a8 127.0.0.1:7003@17003 master - 0 1552220700000 2 connected
a8a41694f22977fda78863bdfb3fc03dd1fab1bd 127.0.0.1:8002@18002 myself,master - 0 1552220701000 5 connected
61e8c4ed8d1ff2a765a4dd2c3d300d8121d26e12 127.0.0.1:7001@17001 master - 0 1552220702275 4 connected
51987c4b5530c81f2845bb9d521daf6d3dce3659 127.0.0.1:8001@18001 master - 0 1552220701265 3 connected&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;可以看到，节点 B 和节点 F 都已经分别和其他 5 个节点建立链接。&lt;/p&gt;
&lt;p&gt;至此，节点握手完成。&lt;/p&gt;
&lt;h4 id=&quot;分配槽位&quot;&gt;分配槽位&lt;/h4&gt;
&lt;p&gt;此时 Redis 集群还并没有处于上线状态，可以在任意一节点上执行 &lt;a href=&quot;https://redis.io/commands/cluster-info&quot;&gt;cluster info&lt;/a&gt; 命令来查看目前集群的运行状态。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost ~]# /usr/local/bin/redis-cli -p 7001 cluster info
cluster_state:fail
......&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面输出&lt;code&gt;cluster_state:fail&lt;/code&gt;表示当前集群处于下线状态。因为只有给集群中所有&lt;strong&gt;主节点&lt;/strong&gt;分配好槽位（即哈希槽&lt;code&gt;slot&lt;/code&gt;，本文第一小节有提及）集群才能上线。&lt;/p&gt;
&lt;p&gt;分配槽位的命令如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cluster addslots slot [slot ...]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据预先规划，这一步需要使用 &lt;a href=&quot;http://www.redis.cn/commands/cluster-addslots.html&quot;&gt;cluster addslots&lt;/a&gt; 命令手动将 16384 个哈希槽大致均等分配给&lt;strong&gt;主节点&lt;/strong&gt; A、B、C。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/usr/local/bin/redis-cli -p 7001 cluster addslots {0..5461}
/usr/local/bin/redis-cli -p 7002 cluster addslots {5462..10922}
/usr/local/bin/redis-cli -p 7003 cluster addslots {10923..16383}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;上面三组命令执行完毕，可以再次查看目前集群的一些运行参数。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost ~]# /usr/local/bin/redis-cli -p 7001 cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:5
cluster_my_epoch:4
cluster_stats_messages_ping_sent:11413
cluster_stats_messages_pong_sent:10509
cluster_stats_messages_meet_sent:11
cluster_stats_messages_sent:21933
cluster_stats_messages_ping_received:10509
cluster_stats_messages_pong_received:10535
cluster_stats_messages_received:21044&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;如上输出&lt;code&gt;cluster_state:ok&lt;/code&gt;证明 Redis 集群成功上线。&lt;/p&gt;
&lt;h4 id=&quot;主从复制&quot;&gt;主从复制&lt;/h4&gt;
&lt;p&gt;Redis 集群成功上线，不过还没有给主节点指定从节点，此时如果有一个节点故障，那么整个集群也就挂了，也就无法实现高可用。&lt;/p&gt;
&lt;p&gt;集群中需要使用 &lt;a href=&quot;https://redis.io/commands/cluster-replicate&quot;&gt;cluster replicate&lt;/a&gt; 命令手动给从节点配置主节点。&lt;/p&gt;
&lt;p&gt;集群复制命令如下：&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;cluster replicate node-id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;集群中各个节点的&lt;code&gt;node-id&lt;/code&gt;可以用&lt;code&gt;cluster nodes&lt;/code&gt;命令查看，如下输出&lt;code&gt;1b4b3741945d7fed472a1324aaaa6acaa1843ccb&lt;/code&gt;即是主节点 B 的&lt;code&gt;node-id&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost /]# /usr/local/bin/redis-cli -p 8002 cluster nodes
1b4b3741945d7fed472a1324aaaa6acaa1843ccb 127.0.0.1:7002@17002 master - 0 1552220700255 1 connected
ed6fd72e61b747af3705b210c7164bc68739303e 127.0.0.1:8003@18003 master - 0 1552220703281 0 connected
19147f56e679767bcebb8653262ff7f56ca072a8 127.0.0.1:7003@17003 master - 0 1552220700000 2 connected
a8a41694f22977fda78863bdfb3fc03dd1fab1bd 127.0.0.1:8002@18002 myself,master - 0 1552220701000 5 connected
61e8c4ed8d1ff2a765a4dd2c3d300d8121d26e12 127.0.0.1:7001@17001 master - 0 1552220702275 4 connected
51987c4b5530c81f2845bb9d521daf6d3dce3659 127.0.0.1:8001@18001 master - 0 1552220701265 3 connected&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;根据预先规划，A主D从；B主E从；C主F从。执行如下三组命令分别为从节点 D、E、F 指定其主节点，使群集可以自动完成主从复制。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/usr/local/bin/redis-cli -p 8001 cluster replicate 61e8c4ed8d1ff2a765a4dd2c3d300d8121d26e12
/usr/local/bin/redis-cli -p 8002 cluster replicate 1b4b3741945d7fed472a1324aaaa6acaa1843ccb
/usr/local/bin/redis-cli -p 8003 cluster replicate 19147f56e679767bcebb8653262ff7f56ca072a8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;命令执行成功后，我们便算以手动方式成功搭建了一个 Redis 集群。&lt;/p&gt;
&lt;p&gt;最后，再来查看一下集群中的节点信息。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost ~]# /usr/local/bin/redis-cli -p 8002 cluster nodes
1b4b3741945d7fed472a1324aaaa6acaa1843ccb 127.0.0.1:7002@17002 master - 0 1552233328337 1 connected 5462-10922
ed6fd72e61b747af3705b210c7164bc68739303e 127.0.0.1:8003@18003 slave 19147f56e679767bcebb8653262ff7f56ca072a8 0 1552233327000 2 connected
19147f56e679767bcebb8653262ff7f56ca072a8 127.0.0.1:7003@17003 master - 0 1552233325000 2 connected 10923-16383
a8a41694f22977fda78863bdfb3fc03dd1fab1bd 127.0.0.1:8002@18002 myself,slave 1b4b3741945d7fed472a1324aaaa6acaa1843ccb 0 1552233327000 5 connected
61e8c4ed8d1ff2a765a4dd2c3d300d8121d26e12 127.0.0.1:7001@17001 master - 0 1552233327327 4 connected 0-5461
51987c4b5530c81f2845bb9d521daf6d3dce3659 127.0.0.1:8001@18001 slave 61e8c4ed8d1ff2a765a4dd2c3d300d8121d26e12 0 1552233326320 4 connected&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;自动方式搭建&quot;&gt;自动方式搭建&lt;/h3&gt;
&lt;p&gt;Redis 3.0 版本之后官方发布了一个集群管理工具 redis-trib.rb，集成在 Redis 源码包的&lt;code&gt;src&lt;/code&gt;目录下。其封装了 Redis 提供的集群命令，使用简单、便捷。&lt;/p&gt;
&lt;p&gt;不过 redis-trib.rb 是 Redis 作者使用 Ruby 语言开发的，故使用该工具之前还需要先在机器上安装 Ruby 环境。后面作者可能意识到这个问题，Redis 5.0 版本开始便把这个工具集成到 redis-cli 中，以&lt;code&gt;--cluster&lt;/code&gt;参数提供使用，其中&lt;code&gt;create&lt;/code&gt;命令可以用来创建集群。&lt;/p&gt;
&lt;h4 id=&quot;启动节点-1&quot;&gt;启动节点&lt;/h4&gt;
&lt;p&gt;使用集群管理工具搭建集群之前，也是需要先把各个节点启动起来的。节点的启动方式请参见本文「手动方式创建」-「启动节点」一节，此处不再赘述。&lt;/p&gt;
&lt;h4 id=&quot;集群管理工具搭建&quot;&gt;集群管理工具搭建&lt;/h4&gt;
&lt;p&gt;如果您安装的 Redis 是 3.x 和 4.x 的版本可以使用 redis-trib.rb 搭建，不过之前需要安装 Ruby 环境。&lt;/p&gt;
&lt;p&gt;先使用 yum 安装 Ruby 环境以及其他依赖项。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;yum -y install ruby ruby-devel rubygems rpm-build&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;确认安装版本。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost redis-cluster]# ruby -v
ruby 2.0.0p648 (2015-12-16) [x86_64-linux]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;再使用 redis-trib.rb 脚本搭建集群，具体命令如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/usr/local/redis-5.0.3/src/redis-trib.rb create --replicas 1 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:8001 127.0.0.1:8002 127.0.0.1:8003&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;不过，本文实验环境使用的 Redis 版本是 5.0.3，所以我可以直接使用&lt;code&gt;redis-cli --cluster create&lt;/code&gt;命令搭建，具体命令如下所示。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;/usr/local/bin/redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:8001 127.0.0.1:8002 127.0.0.1:8003 --cluster-replicas 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;主节点在前，从节点在后。其中&lt;code&gt;--cluster-replicas&lt;/code&gt;参数用来指定一个主节点带有的从节点个数，如上&lt;code&gt;--cluster-replicas 1&lt;/code&gt;即表示 1 个主节点有 1 个从节点。&lt;/p&gt;
&lt;p&gt;命令执行成功会有类似如下输出。&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[root@localhost bin]# redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:8001 127.0.0.1:8002 127.0.0.1:8003 --cluster-replicas 1
&amp;gt;&amp;gt;&amp;gt; Performing hash slots allocation on 6 nodes...
Master[0] -&amp;gt; Slots 0 - 5460
Master[1] -&amp;gt; Slots 5461 - 10922
Master[2] -&amp;gt; Slots 10923 - 16383
Adding replica 127.0.0.1:8001 to 127.0.0.1:7001
Adding replica 127.0.0.1:8002 to 127.0.0.1:7002
Adding replica 127.0.0.1:8003 to 127.0.0.1:7003
&amp;gt;&amp;gt;&amp;gt; Trying to optimize slaves allocation for anti-affinity
[WARNING] Some slaves are in the same host as their master
M: 32f9819fc7d561bfa2b7189182200e86d9901b8a 127.0.0.1:7001
   slots:[0-5460] (5461 slots) master
M: cca0fbfa374bc175d481e68ee9ed13b65453e967 127.0.0.1:7002
   slots:[5461-10922] (5462 slots) master
M: 964cfa1c2dcfe36b6d3c63637f0d57ccb568354e 127.0.0.1:7003
   slots:[10923-16383] (5461 slots) master
S: 1b47b9e6e7a79523579b8d2ddcd5e708583ed317 127.0.0.1:8001
   replicates 32f9819fc7d561bfa2b7189182200e86d9901b8a
S: aba9330f3e70f26a8af4ced1b672fbcc7bc62d78 127.0.0.1:8002
   replicates cca0fbfa374bc175d481e68ee9ed13b65453e967
S: 254db0830cd764e075aa793144572d5fa3a398f0 127.0.0.1:8003
   replicates 964cfa1c2dcfe36b6d3c63637f0d57ccb568354e
Can I set the above configuration? (type 'yes' to accept): yes
&amp;gt;&amp;gt;&amp;gt; Nodes configuration updated
&amp;gt;&amp;gt;&amp;gt; Assign a different config epoch to each node
&amp;gt;&amp;gt;&amp;gt; Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join
...
&amp;gt;&amp;gt;&amp;gt; Performing Cluster Check (using node 127.0.0.1:7001)
M: 32f9819fc7d561bfa2b7189182200e86d9901b8a 127.0.0.1:7001
   slots:[0-5460] (5461 slots) master
   1 additional replica(s)
S: aba9330f3e70f26a8af4ced1b672fbcc7bc62d78 127.0.0.1:8002
   slots: (0 slots) slave
   replicates cca0fbfa374bc175d481e68ee9ed13b65453e967
S: 1b47b9e6e7a79523579b8d2ddcd5e708583ed317 127.0.0.1:8001
   slots: (0 slots) slave
   replicates 32f9819fc7d561bfa2b7189182200e86d9901b8a
S: 254db0830cd764e075aa793144572d5fa3a398f0 127.0.0.1:8003
   slots: (0 slots) slave
   replicates 964cfa1c2dcfe36b6d3c63637f0d57ccb568354e
M: cca0fbfa374bc175d481e68ee9ed13b65453e967 127.0.0.1:7002
   slots:[5461-10922] (5462 slots) master
   1 additional replica(s)
M: 964cfa1c2dcfe36b6d3c63637f0d57ccb568354e 127.0.0.1:7003
   slots:[10923-16383] (5461 slots) master
   1 additional replica(s)
[OK] All nodes agree about slots configuration.
&amp;gt;&amp;gt;&amp;gt; Check for open slots...
&amp;gt;&amp;gt;&amp;gt; Check slots coverage...
[OK] All 16384 slots covered.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;OK，搭建完成！一条命令搞定。&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 06:06:00 +0000</pubDate>
<dc:creator>Esofar</dc:creator>
<og:description>Redis 集群简介 'Redis Cluster' 即 Redis 集群，是 Redis 官方在 3.0 版本推出的一套分布式存储方案。完全去中心化，由多个节点组成，所有节点彼此互联。Redis 客</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/esofar/p/10486621.html</dc:identifier>
</item>
<item>
<title>Webpack 4教程 - 第六部分 增强开发时体验 - 葡萄城技术团队</title>
<link>http://www.cnblogs.com/powertoolsteam/p/10536629.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/powertoolsteam/p/10536629.html</guid>
<description>&lt;blockquote readability=&quot;6.5606694560669&quot;&gt;
&lt;p&gt;转载请注明出处：&lt;a href=&quot;https://www.grapecity.com.cn/&quot;&gt;葡萄城官网&lt;/a&gt;，葡萄城为开发者提供专业的开发工具、解决方案和服务，赋能开发者。&lt;br/&gt;原文出处：https://wanago.io/2018/08/06/webpack-4-course-part-six-increasing-development-experience&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天我们将介绍mode属性的development值。它会自动为你配置Webpack以简化开发过程。除此之外，我们还会介绍webpack-dev-server——包括模块热替换。开始吧！&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;开发体验优化的其中一步是让Webpack运行在watch模式下。试试webpack --watch。现在每当你对源码做出修改，Webpack会重新编译你的工程然后输出。&lt;strong&gt;webpack-dev-server&lt;/strong&gt;则做得更多。它不是把输出文件写到文件夹下，而是直接把它们写入内存。在构建完之后，输出可作为本地服务器资源被访问。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;运行 webpack-dev-server&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;首先是安装它。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:bash;gutter:true;&quot;&gt;
npm install webpack-dev-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt; &lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;然后是在你的&lt;strong&gt;package.json&lt;/strong&gt;文件中加入它：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
&quot;scripts&quot;: {
  &quot;build&quot;: &quot;webpack&quot;,
  &quot;start&quot;: &quot;webpack-dev-server&quot;
}
···

现在就可以使用`npm start`来启动它。你会看到下面的提示信息：
```bash
｢wds｣: Project is running at http://localhost:8080/
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;剩下的事情只是在浏览器中打开&lt;a href=&quot;http://localhost:8080/&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/&lt;/a&gt;了。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;模块热替换&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;为进一步优化你的开发体验，可以使用模块热替换，你甚至跳过刷页面的需求。比如，当你对某些样式做了修改，不必刷新整个页面就可以看到效果。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在&lt;a href=&quot;https://wanago.io/2018/07/23/webpack-4-course-part-three-working-with-plugins/&quot; target=&quot;_blank&quot;&gt;第四节教程&lt;/a&gt;我们曾使用了&lt;strong&gt;MiniCssExtractPlugin&lt;/strong&gt;。请注意，在写文本时，对&lt;strong&gt;MiniCssExtractPlugin&lt;/strong&gt;的热模块更新支持还没有实现。更多信息请可查看&lt;a href=&quot;https://github.com/webpack-contrib/mini-css-extract-plugin/issues/34&quot; target=&quot;_blank&quot;&gt;Github上的此issue&lt;/a&gt;。在当前开发环境，你可能需要使用的是style-loader。&lt;/p&gt;
&lt;p&gt;当你运行&lt;strong&gt;webpack-dev-server&lt;/strong&gt;时，它使用与正常构建时相同的配置文件。你可以在&lt;strong&gt;webpack.config.js&lt;/strong&gt;中加入一个叫&lt;strong&gt;devServer&lt;/strong&gt;的参数来进行额外的配置。我们需要它来开启&lt;strong&gt;模块热替换&lt;/strong&gt;。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// webpack.config.js
const webpack = require('webpack');

module.exports = {
  devServer: {
    hot: true
  },
  plugins: [
    new webpack.HotModuleReplacementPlugin()
  ]
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;注意，当开启 &lt;strong&gt;-hot&lt;/strong&gt; 标志以运行 &lt;strong&gt;webpack-dev-server&lt;/strong&gt; 时也会在plugins里加入&lt;strong&gt;HotModuleReplacementPlugin&lt;/strong&gt;。如果你添加了两次，可能会出现问题。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;这对于我们的&lt;strong&gt;CSS&lt;/strong&gt;调试是很有吸引力的。但当修改是JavaScript时，还需点额外步骤。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// index.js
import { divide } from &quot;./divide&quot;;

console.log(`6 / 2 = ${divide(6,2)}`);

if(module.hot) {
  module.hot.accept();
}
// divide.js
export function divide(a, b) {
  return a / b;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;运行module.hot.accept()会让模块可热替换。这同样适用于它引入的所有其他模块。上面的代码意味着，index.js中的accept()让divide模块能够被热替换。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;运行module.hot.accept()函数时可以传参，如果你感兴趣，请查看&lt;a href=&quot;https://webpack.js.org/api/hot-module-replacement/&quot; target=&quot;_blank&quot;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;当使用&lt;strong&gt;HotModuleReplacementPlugin&lt;/strong&gt;插件时，如果输出文件名中使用了&lt;strong&gt;chunkhash&lt;/strong&gt;字段，就可能会出现一些问题。这种情况下，只在开发环境下使用&lt;strong&gt;HotModuleReplacementPlugin&lt;/strong&gt;是个好主意（而且避免使用&lt;strong&gt;chunckhash&lt;/strong&gt;）。&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;41&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// webpack.config.js
const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const isDevServer = require.main.filename.includes('webpack-dev-server');
const plugins = [
  new HtmlWebpackPlugin({ template: './src/index.html' }),
];
if(isDevServer) {
  plugins.push(new webpack.HotModuleReplacementPlugin());
}

module.exports = {
  output: {
    filename: isDevServer ? '[name].bundle.js' : '[name].[chunkhash].bundle.js',
    path: path.resolve(__dirname, 'dist'),
  },
  plugins,
    devServer: {
      hot: true
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;webpack-serve&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;译者注：由于webpack-serve其实已经不再维护了。推荐仍然使用上面所说的webpack-dev-sever。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;mode: &quot;development&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;在&lt;a href=&quot;https://wanago.io/2018/07/30/webpack-4-course-part-five-built-in-optimization-for-production/&quot; target=&quot;_blank&quot;&gt;之前的课程&lt;/a&gt;，我们介绍了mode属性的production值。现在该轮到development了。让我们看看它为我们做了我们。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;DefinePlugin&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;如之前所说，这个插件允许你创建&lt;strong&gt;编译时&lt;/strong&gt;的全局常量。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;因为这个插件也在mode: produnction中使用，更多信息可查看&lt;a href=&quot;https://wanago.io/2018/07/30/webpack-4-course-part-five-built-in-optimization-for-production/&quot; target=&quot;_blank&quot;&gt;教程的第五部分&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这次它的值为process.env.NODE_ENV: JSON。stringify(&quot;development&quot;)：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
module.exports = {
  mode: &quot;development&quot;,
  // 使用 mode: &quot;development&quot; 会添加以下配置：
  plugins: [
    new webpack.DefinePlugin({
      &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;development&quot;)
    }),
  ]
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;NamedModulesPlugin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是在使用mode: &quot;development&quot;时默认加入的另一个插件。它在使用&lt;strong&gt;模块热替换&lt;/strong&gt;时很有用。有了&lt;strong&gt;NamedModulesPlugin&lt;/strong&gt;，我们能够看到被替换模块的相对路径。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
[WDS] App updated. Recompiling...
[WDS] App hot update...
[HMR] Checking for updates on the server...
[HMR] Updated modules:
[HMR]  - ./src/style.css
[HMR] App is up to date
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;否则我们只会看到一个id，而不是像./src/style.css这样的路径。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;NamedChunksPlugin&lt;/strong&gt;&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;它的左右和&lt;strong&gt;NamedModulesPlugin&lt;/strong&gt;类似。有了它，不仅模块能看到名字，chunk也能。当应用在浏览器中运行起来是，你可以在window.webpackJsonp属性中查看它们。&lt;/p&gt;
&lt;p align=&quot;left&quot;&gt;使用&lt;strong&gt;NamedModulesPlugin&lt;/strong&gt;和&lt;strong&gt;NamedChunksPlugin&lt;/strong&gt;的一个额外好处是,当添加和删除依赖时，打包不再需要使用模块的顺序id。因为这些id和名字会在最终的输出产物中使用，修改它们会导致文件哈希值的变化，即使这些文件使用的模块本身并没有改变。使用以上两个插件会帮助你处理浏览器的&lt;strong&gt;缓存&lt;/strong&gt;问题。让我们来比较一下代码：&lt;/p&gt;
&lt;p&gt;没使用&lt;strong&gt;NamedModulesPlugin&lt;/strong&gt;和&lt;strong&gt;NamedChunksPlugin&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// 输出产物
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[2],{
  /***/ 6:
  (...) // divide.js module output code

  /***/ 7:
  (...) // substract.js module output code
]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;使用了&lt;strong&gt;NamedModulesPlugin&lt;/strong&gt;和&lt;strong&gt;NamedChunksPlugin&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
(window[&quot;webpackJsonp&quot;] = window[&quot;webpackJsonp&quot;] || []).push([[&quot;utilities~main&quot;],{
  /***/ &quot;./src/utilities/divide.js&quot;:
  (...) // divide.js module output code

  /***/ &quot;./src/utilities/substract.js&quot;:
  (...) // substract.js module output code
]);
&lt;/pre&gt;&lt;/div&gt;
&lt;p align=&quot;left&quot;&gt;&lt;strong&gt;Devtool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了添加插件，设置mode: &quot;development&quot;还做了一件事，即通过设置devtool的值为eval开启了源码映射（Source Map）。　　&lt;/p&gt;
&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;brush:javascript;gutter:true;&quot;&gt;
// webpack.config.js
module.exports = {
  mode: &quot;development&quot;,
  // 使用 mode: &quot;development:&quot; 添加了以下配置
  devtool: &quot;eval&quot;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转译、压缩和打包你的代码能让你的用户有更好的体验。经过这些步骤之后，代码变得更精简和高效。而调试这样的代码则变得非常困难。因此，引入了源码映射（Source Map）。它们把输出后的的代码与源码对应起来。有了它，相对于浏览器真正运行的打包后的输出，你能看到其对应的源码，从而更加容易地使用调试工具和设置断点。我们会在接下来的课程中对源码映射做进一步介绍，但如果你需要现在就定制它，可查看&lt;a href=&quot;https://webpack.js.org/configuration/devtool/&quot; target=&quot;_blank&quot;&gt;它的文档&lt;/a&gt;。　　&lt;/p&gt;

&lt;p&gt;Webpack是开发现代Web应用的强大工具。它不仅让你优化生产环境的代码，而且还可以并定制，用以增强开发时的体验。这次我们介绍了如何运行开发时服务器，以及把mode属性设成development的一些作用。我们还学习使用了&lt;strong&gt;模块的热替换&lt;/strong&gt;。所有这些组合起来，能帮你更容易和更快地开发应用。　　&lt;/p&gt;

</description>
<pubDate>Fri, 15 Mar 2019 05:55:00 +0000</pubDate>
<dc:creator>葡萄城技术团队</dc:creator>
<og:description>今天我们将介绍mode属性的development值。它会自动为你配置Webpack以简化开发过程。除此之外，我们还会介绍webpack-dev-server——包括模块热替换。开始吧！</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/powertoolsteam/p/10536629.html</dc:identifier>
</item>
<item>
<title>拯救者Y720-gtx1050-window10-配置tensorflow-gpu环境 - 31415926535x</title>
<link>http://www.cnblogs.com/31415926535x/p/10536572.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/31415926535x/p/10536572.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/31415926535x/p/10536572.html&quot; class=&quot;uri&quot;&gt;https://www.cnblogs.com/31415926535x/p/10536572.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因为选修了数字图像这门课，，要做一个人脸识别的项目，和室友打算利用tensorflow来训练一个模型，，然后刚开始的环境配置就折腾了一天，，&lt;/p&gt;
&lt;p&gt;现在记录一下大致的流程和遇到的坑，，（只是简略的写写配置的要点，，具体的信息别的博客讲的很清楚了，，，&lt;/p&gt;
&lt;p&gt;最后的环境： win10x64 + gtx1050 + CUDA9.0 + cuDNN9.0 + Anaconda + &lt;strong&gt;Tensorflow1.9.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;英伟达官网你会发现1050不能使用它的CUDA，，但实际上是可以使用的，，后面可以看出算力大概是6.1，，&lt;/p&gt;

&lt;p&gt;只列出必要的流程以及我遇到的坑，，&lt;/p&gt;
&lt;p&gt;详细的安装过程参考别人的博客：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/haishiluoshen/article/details/83413568&quot;&gt;Win10+1050Ti配置Tensorflow教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_39290638/article/details/80045236&quot;&gt;Win10下Tensorflow(GPU版)安装趟坑实录&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wanyu416/p/9536853.html&quot;&gt;win10搭建tensorflow-gpu环境&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/gangeqian2/article/details/79358543&quot;&gt;tensorflow 安装GPU版本，个人总结，步骤比较详细&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/cxy7228484/article/details/84185412&quot;&gt;在Windows 10上安装TensorFlow并支持GPU的最佳方式（无需安装CUDA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/angzhangzhang123/article/details/79637346&quot;&gt;Win10+cuda8.0+cudnn5.1+tensorflow-gpu1.2.0+gtx1050ti，tensorflow环境搭建与配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hutao722/p/9583214.html&quot;&gt;tensorflow 使用CPU而不使用GPU的问题解决&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python配置&quot;&gt;Python配置&lt;/h2&gt;
&lt;p&gt;首先是Python的配置，，Python很简单就可以弄好了，，去&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;官网&lt;/a&gt;下载win的安装器，，点一点等一等就行了，，&lt;/p&gt;
&lt;h2 id=&quot;anaconda安装&quot;&gt;Anaconda安装&lt;/h2&gt;
&lt;p&gt;这个也是直接去官网下载安装就行了，，，安装的过程可能会很长，，所以要一直等，，会出现终端，，不要叉掉，，等就可以了，，，（貌似这玩意儿2个多G&lt;/p&gt;
&lt;h2 id=&quot;cuda9.0安装&quot;&gt;CUDA9.0安装&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.nvidia.com/cuda-90-download-archive&quot;&gt;CUDA9.0下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一个大坑！！！被这玩意坑了一次，，，&lt;/p&gt;
&lt;p&gt;首先，英伟达的官网你直接进去去下CUDA只显示最新版10.1，，，然后我就想着有新的就直接上新版本的算了，，，后来才发现Tensorflow到现在还不支持10.0的版本，，，最多只能用9.0的，，&lt;/p&gt;
&lt;p&gt;还有一个坑，，，选择的安装器是第一个(Base Installer)还有选择在线安装(exe(Network))，，，&lt;/p&gt;
&lt;p&gt;最后，，因为我的C盘不怎么空余了，，，所以就把这玩意装到了别的盘，，这样的话 &lt;strong&gt;系统环境变量&lt;/strong&gt; 得重新修改，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wanyu416/p/9536853.html&quot;&gt;参考博客1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/angzhangzhang123/article/details/79637346&quot;&gt;参考博客2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;都可以&lt;/p&gt;
&lt;h2 id=&quot;cudnn-v7.5.0-for-cuda-9.0&quot;&gt;cuDNN v7.5.0 for CUDA 9.0&lt;/h2&gt;
&lt;p&gt;这玩意也是一个坑，，，&lt;/p&gt;
&lt;p&gt;因为CUDA安装的是9.0版本的，，所以这玩意也只能装对应的版本，，，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;会要你注册账号，，最主要的是10.0版本的可以直接下载，，换成9.0的就得要梯子，，，惊了，，，&lt;/p&gt;
&lt;p&gt;下载好后解压，，把里面的那三个文件复制到cuda对应的文件夹里，，参考上面那几个博客的操作&lt;/p&gt;
&lt;h2 id=&quot;vs2017&quot;&gt;vs2017&lt;/h2&gt;
&lt;p&gt;看到网上有人说配置环境需要vs来编译什么的，，，因为我在之前就已经装好了vs2017，，所以就省略了这一步的安装，，没有测试不装会发生什么，，&lt;/p&gt;
&lt;h2 id=&quot;安装tensorflow-gpu--1.9.0-并测试&quot;&gt;安装Tensorflow-gpu--1.9.0 并测试&lt;/h2&gt;
&lt;p&gt;之前的所有东西都弄好后就可以安装 Tensorflow 了，，，&lt;/p&gt;
&lt;p&gt;打开 Anaconda Prompt&lt;/p&gt;
&lt;p&gt;因为地下室这里网还不错，，所以就没有去配置清华的镜像，，&lt;/p&gt;
&lt;p&gt;安装Tensorflow: &lt;code&gt;conda install tensorflow-gpu==1.9.0&lt;/code&gt; 因为现在(2019-3-15)Tensorflow已经是1.13.0版本了，，直接安装的话就会是最新版，，，不知道怎么回事，，最新版的话我这里在之后不会调用gpu来运行，，用这个版本之后就可以了（CUDA的锅？），，（也有可能是我在改变了其它的因素的原因，，，待验证&lt;/p&gt;
&lt;p&gt;&lt;del&gt;创建运行环境； &lt;code&gt;conda create -n tensorflow-gpu python=3.6&lt;/code&gt; 等待安装就行了，，&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;激活环境： &lt;code&gt;conda activate tensorflow-gpu&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;验证&quot;&gt;验证&lt;/h2&gt;
&lt;p&gt;然后打开python，，&lt;/p&gt;
&lt;h3 id=&quot;输入&quot;&gt;输入：&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import tensorflow as tf         //0
hello = tf.constant('hello')
sess = tf.Session()             //1
print(sess.run(hello))          //2
sess.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;在输完0代码之后，会停顿一会，，&lt;/li&gt;
&lt;li&gt;在输完1代码之后，会显示一些信息，，如果说有有关gpu的信息的话证明调用gpu成功，，否则的话只有一条cpu的信息，，可能之前的安装有问题，，重新安装试试，，（我就是因为这个重装了好几遍&lt;/li&gt;
&lt;li&gt;在输完2代码之后，显示 &lt;code&gt;b'hello'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;1的输出类似这样：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;2019-03-15 13:03:55.881573: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\platform\cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2
2019-03-15 13:03:56.695820: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1392] Found device 0 with properties:
name: GeForce GTX 1050 major: 6 minor: 1 memoryClockRate(GHz): 1.493
pciBusID: 0000:01:00.0
totalMemory: 2.00GiB freeMemory: 1.61GiB
2019-03-15 13:03:56.702429: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1471] Adding visible gpu devices: 0
2019-03-15 13:03:57.517589: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:952] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-03-15 13:03:57.521414: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:958]      0
2019-03-15 13:03:57.523379: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:971] 0:   N
2019-03-15 13:03:57.525486: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1084] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 1359 MB memory) -&amp;gt; physical GPU (device: 0, name: GeForce GTX 1050, pci bus id: 0000:01:00.0, compute capability: 6.1)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1028485/201903/1028485-20190315134928264-735455793.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;也可以这样验证&quot;&gt;&lt;a href=&quot;https://www.cnblogs.com/hutao722/p/9583214.html&quot;&gt;也可以这样验证：&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;会输出一长条的信息，，例如：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from tensorflow.python.client import device_lib
&amp;gt;&amp;gt;&amp;gt; print(device_lib.list_local_devices())
2019-03-15 13:13:03.527577: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1471] Adding visible gpu devices: 0
2019-03-15 13:13:03.545230: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:952] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-03-15 13:13:03.563464: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:958]      0 
2019-03-15 13:13:03.576112: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:971] 0:   N 
2019-03-15 13:13:03.587662: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1084] Created TensorFlow device (/device:GPU:0 with 1359 MB memory) -&amp;gt; physical GPU (device: 0, name: GeForce GTX 1050, pci bus id: 0000:01:00.0, compute capability: 6.1)
[name: &quot;/device:CPU:0&quot;
device_type: &quot;CPU&quot;
memory_limit: 268435456
locality {
}
incarnation: 5406329819980989395
, name: &quot;/device:GPU:0&quot;
device_type: &quot;GPU&quot;
memory_limit: 1425578393
locality {
  bus_id: 1
  links {
  }
}
incarnation: 3552327620198962820
physical_device_desc: &quot;device: 0, name: GeForce GTX 1050, pci bus id: 0000:01:00.0, compute capability: 6.1&quot;
]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1028485/201903/1028485-20190315134949105-834049286.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;如果失败的话（也就是只有cpu运算）就是这样：&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;[name: &quot;/device:CPU:0&quot;
device_type: &quot;CPU&quot;
memory_limit: 268435456
locality {
}&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;再或者这样&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/gangeqian2/article/details/79358543&quot;&gt;再或者这样：&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;python&quot;&gt;
&lt;code&gt;import tensorflow as tf
a = tf.constant([1.0, 2.0], name=&quot;a&quot;)
b = tf.constant([2.0, 3.0], name=&quot;b&quot;)
result = a + b
print(result)

sess = tf.InteractiveSession()
print(result.eval())
sees.close()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;正常情况下也会显示gpu等信息&lt;/p&gt;
&lt;pre class=&quot;js&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import tensorflow as tf
&amp;gt;&amp;gt;&amp;gt; a = tf.constant([1.0, 2.0], name=&quot;a&quot;)
&amp;gt;&amp;gt;&amp;gt; b = tf.constant([2.0, 3.0], name=&quot;b&quot;)
&amp;gt;&amp;gt;&amp;gt; result = a + b
&amp;gt;&amp;gt;&amp;gt; print(result)
Tensor(&quot;add_1:0&quot;, shape=(2,), dtype=float32)
&amp;gt;&amp;gt;&amp;gt; sess = tf.InteractiveSession()
2019-03-15 13:19:57.500304: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1471] Adding visible gpu devices: 0
2019-03-15 13:19:57.514303: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:952] Device interconnect StreamExecutor with strength 1 edge matrix:
2019-03-15 13:19:57.530082: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:958]      0 
2019-03-15 13:19:57.539267: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:971] 0:   N 
2019-03-15 13:19:57.547441: I C:\users\nwani\_bazel_nwani\ujdkfsks\execroot\org_tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1084] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 1359 MB memory) -&amp;gt; physical GPU (device: 0, name: GeForce GTX 1050, pci bus id: 0000:01:00.0, compute capability: 6.1)
&amp;gt;&amp;gt;&amp;gt; print(result.eval())
[3. 5.]&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;每次使用tensorflow时，，因为我们是在Anaconda的虚拟的一个环境里运行tensorflow+python，，所以要先激活环境：&lt;code&gt;conda activate tensorflow-gpu&lt;/code&gt;，，，（这么说先前直接安装的python不仅版本过高，，而且没用上）&lt;/p&gt;
&lt;p&gt;对了必须要在cmd里使用，，powershell貌似不行，，，进入powershell输入 &lt;code&gt;cmd&lt;/code&gt; 切换到cmd就行了，，，激活环境后前面会多一个环境名： &lt;code&gt;(tensorflow-gpu)&lt;/code&gt;，，这样再进入python等等，，，&lt;/p&gt;

&lt;p&gt;这样环境的配置基本就完了，，大概占了12个多G的存储空间，，，emmmm心疼硬盘ing&lt;/p&gt;
&lt;p&gt;从昨天晚上到今天上午，，折腾了几遍，，，最后还是弄好了，，，最怕的不是出各种各样的错误，，而是放弃吧，，，毕竟很多人都在弄这个，，会遇到一样的状况，，总会找到解决的方法的，，，&lt;/p&gt;
&lt;p&gt;(猜测：安装anaconda时，，发现里面有cuda了，，可能不需要安装cuda就可以，，留坑)&lt;br/&gt;(end)&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 05:50:00 +0000</pubDate>
<dc:creator>31415926535x</dc:creator>
<og:description>https://www.cnblogs.com/31415926535x/p/10536572.html 概述 因为选修了数字图像这门课，，要做一个人脸识别的项目，和室友打算利用tensorflow来</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/31415926535x/p/10536572.html</dc:identifier>
</item>
<item>
<title>躲不掉的 lambda 表达式 - 余同学的开发之路</title>
<link>http://www.cnblogs.com/YJK923/p/10536560.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/YJK923/p/10536560.html</guid>
<description>&lt;p&gt;lambda 表达式是 Java8 的新特性，虽说都发布很久了，但是不到万不得已是肯定不会研究这个的，现在就是那不得不学习的时候了。&lt;/p&gt;

&lt;p&gt;本文主要说一下什么 lambda 表达式、Java 中为什么要有 lambda 表达式以及 lambda 表达式的应用。&lt;/p&gt;

&lt;p&gt;在 Java 面向对象的思想中，我们知道函数是不能单独存在的，函数一般会作为某个对象的功能封装在对象之中，我们传递参数也不能传递一个函数。曾经 Java 也为此挣扎过，我们看下面这段代码，创建一个线程，输出一句话。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println(&quot;Hello World !&quot;);
            }
        }).start();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;有点基础应该都知道这是匿名内部类，但是你知道的，真正有效的代码就一行输出语句。其余代码基本没用，我们可以反过来想一下，我们创建线程是为了执行某一个任务，也就是某一个方法，那我们为何不直接传入一个方法呢？&lt;/p&gt;

&lt;p&gt;按照这个思路，我们可以这样写伪代码。&lt;/p&gt;

&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span&gt;new Thread(（某某任务）).start();&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好了，现在问题就出现了，如何去形容这个任务，或者说在 Java 中如何表示呢？lambda 表达式应运而生。&lt;/p&gt;

&lt;p&gt;一个函数，可能会有入参，函数要有函数体，于是就这样定义了 lambda 表达式 “（参数1，参数2）-&amp;gt; { 函数体 } ” 。&lt;/p&gt;

&lt;p&gt;但是吧，实际使用过程中，因为参数和函数体的不同，又有一些变种的写法，一个 lambda 表达式可以有零个或多个参数，参数之间用逗号相隔。空括号代表参数为空。&lt;/p&gt;

&lt;p&gt;lambda 表达式的主体可包含零条或多条语句，如果 lambda 表达式的主体只有一条语句，花括号 { } 可省略，否则必须包含在花括号 { } 中。&lt;/p&gt;

&lt;p&gt;OK，到这里我们就可以重写上面的线程了。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
new Thread(
            () -&amp;gt; System.out.println(&quot;Hello World &quot;)
          ).start();
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;说到这简单回忆一下什么是 lambda 表达式，曾经 Java 中不能直接把函数做参数，为了能行，创造了 lambda 表达式，可以把 lambda 表达式理解为一个功能块，只不过匿名罢了。&lt;/p&gt;

&lt;p&gt;其实 lambda 的出现是为了和函数式编程相呼应，函数式编程，就是用函数为主体来编程，把函数当成是代码的基本组成部分，就像变量一样。官方说法叫第一等公民。&lt;/p&gt;

&lt;p&gt;举个例子说明一下函数式编程的特点。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;38&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
计算如下表达式：
(1 + 2) * 3 - 4

传统的过程式编程，可能这样写（比较傻，为了演示效果）：
int a = 1 + 2;
int b = a * 3;
int c = b - 4;

函数式编程要求使用函数，我们可以把运算过程定义为不同的函数，然后写成下面这样：
int result = subtract(multiply(add(1,2), 3), 4);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;有点蒙，没关系，先理解 lambda 表达式的使用再说，lambda 表达式最常用的莫过于替换 Runnable 接口实现线程任务，还有什么用处呢？&lt;/p&gt;

&lt;p&gt;太难的不介绍，说一个比较简单的，用于列表的迭代。&lt;/p&gt;

&lt;p&gt;对一个列表的每一个元素进行操作，不使用 Lambda 表达式时如下：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;37&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5);
for (int element : numbers) {
    System.out.prinln(element);
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用 Lambda 表达式：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;36&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 2, 3, 4, 5);
numbers.forEach(x -&amp;gt; System.out.println(x));
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;重点在操作上，输入是 x ，然后对 x 进行输出操作。就线程和列表迭代来说，为什么他们能接收 lambda 表达式作为参数呢？我们看看 forEach 方法的参数内部是什么。&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;33&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
 * @since 1.8
 */
@FunctionalInterface
public interface Consumer&amp;lt;T&amp;gt; {

    /**
     * Performs this operation on the given argument.
     *
     * @param t the input argument
     */
    void accept(T t);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;是一个接口，而这个接口被定义为函数式接口，lambda 表达式可以替换功能接口，我们就来自定义一个函数式接口来演示一下。&lt;/p&gt;

&lt;p&gt;定义一个函数式接口：&lt;/p&gt;

&lt;div class=&quot;cnblogs_Highlighter&quot; readability=&quot;35&quot;&gt;
&lt;pre class=&quot;brush:java;gutter:true;&quot;&gt;
// 定义一个功能接口或叫函数式接口
@FunctionalInterface
public interface WorkerInterface {
    // 该接口中只能有一个抽象方法
    public void doSomeWork();
}

public class WorkerInterfaceTest {

    public static void execute(WorkerInterface worker) {
        worker.doSomeWork();
    }

    public static void main(String[] args) {

        // invoke doSomeWork using Annonymous class
        execute(new WorkerInterface() {
            @Override
            public void doSomeWork() {
                System.out.println(&quot;Worker invoked using Anonymous class&quot;);
            }
        });
        // invoke doSomeWork using Lambda expression
        execute(()-&amp;gt;{System.out.println(&quot;Worker invoked using Lambda expression&quot;);});
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;总结一下最开始提出的几个问题，lambda 表达式可以理解为是一个匿名的函数，我们可以通过 lambda 表达式来代替功能接口（比方说 Runnable 接口）。函数式编程是一种编程模式，Java 为了支持它而定义了 lambda 。lambda 的应用主要在替代功能接口，列表迭代，还有一些对集合的操作上。&lt;/p&gt;

&lt;p&gt;最后，能告诉我你现在使用 Lambda 表达式了吗，都是用在什么地方呢 ？&lt;/p&gt;

</description>
<pubDate>Fri, 15 Mar 2019 05:45:00 +0000</pubDate>
<dc:creator>余同学的开发之路</dc:creator>
<og:description>lambda 表达式是 Java8 的新特性，虽说都发布很久了，但是不到万不得已是肯定不会研究这个的，现在就是那不得不学习的时候了。 本文主要说一下什么 lambda 表达式、Java 中为什么要有</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/YJK923/p/10536560.html</dc:identifier>
</item>
<item>
<title>工厂方法模式 - 不该相遇在秋天</title>
<link>http://www.cnblogs.com/fengyumeng/p/10533519.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/fengyumeng/p/10533519.html</guid>
<description>&lt;h3&gt;神剑山庄铸剑&lt;/h3&gt;
&lt;p&gt;　　大家好，我是神剑山庄的铸剑师，名叫小赵，昨天入的职，在山庄里逛了一圈，熟悉了一下企业文化，今天就收到了任务，三少爷吩咐下来，要我们尽快打造三把神剑：倚天剑、游龙剑、轩辕剑，据说三少爷要去参加华山论剑。&lt;/p&gt;
&lt;p&gt;　　铸剑经理对我的印象很好，把这个任务安排给我做。&lt;/p&gt;
&lt;p&gt;　　此时，我正在思考怎么打造，思考ing....&lt;/p&gt;

&lt;p&gt;　　既然都是剑，那么就应该有共同的抽象，所以类图我觉得可以这样设计：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1181622/201903/1181622-20190314190045711-1104759883.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;好的，既然设计完成，那我就开始干活了：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;剑的抽象&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;interface&lt;/span&gt;&lt;span&gt; Sword {
    &lt;/span&gt;&lt;span&gt;void&lt;/span&gt; getName();&lt;span&gt;//&lt;/span&gt;&lt;span&gt;每把剑都有名字&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;倚天剑&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; YitianSword &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Sword {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getName() {
        System.out.println(&lt;/span&gt;&quot;倚天剑出世！&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;轩辕剑&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; XuanyuanSword &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Sword {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getName() {
        System.out.println(&lt;/span&gt;&quot;轩辕剑出世！&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;游龙剑&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; YoulongSword &lt;span&gt;implements&lt;/span&gt;&lt;span&gt; Sword {
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; getName() {
        System.out.println(&lt;/span&gt;&quot;游龙剑出世！&quot;&lt;span&gt;);
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;铸剑：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Sword yitian &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; YitianSword();
        Sword xuanyuan &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; XuanyuanSword();
        Sword youlong &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; YoulongSword();
        yitian.getName();
        xuanyuan.getName();
        youlong.getName();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;倚天剑出世！&lt;br/&gt;轩辕剑出世！&lt;br/&gt;游龙剑出世！&lt;/p&gt;

&lt;p&gt;当我拿着程序去给铸剑经理过目时，却被骂了一顿。。。&lt;/p&gt;
&lt;p&gt;“你是SB吗？铸个剑在室外铸！铸剑的过程都被所有人看到了！还搞的灰尘满天飞，赶紧的，滚去铸剑房干活去！”&lt;/p&gt;
&lt;p&gt;当我一脸懵逼的往铸剑房走时，后面经理又喷了一句话出来：“不许用共用的铸剑房，你自己收拾一个铸剑房去！”&lt;/p&gt;
&lt;p&gt;。。。。。。&lt;/p&gt;

&lt;h3&gt;铸剑房&lt;/h3&gt;
&lt;p&gt;　　OK，既然要在铸剑房里铸剑，那我也能做，不就是把铸剑的过程移到铸剑房里吗？No Problem！&lt;/p&gt;

&lt;p&gt;铸剑房：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;铸剑房&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; SwordFactory{
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &amp;lt;T &lt;span&gt;extends&lt;/span&gt; Sword&amp;gt; Sword createSword(Class&amp;lt;T&amp;gt;&lt;span&gt; c) {
        Sword sword &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            sword &lt;/span&gt;=&lt;span&gt; (Sword)Class.forName(c.getName()).newInstance();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;铸剑失败&quot;+&lt;span&gt;e.getMessage());
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sword;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;铸剑：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;34&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        Sword yitian &lt;/span&gt;= SwordFactory.createSword(YitianSword.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        Sword xuanyuan &lt;/span&gt;= SwordFactory.createSword(XuanyuanSword.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        Sword youlong &lt;/span&gt;= SwordFactory.createSword(YoulongSword.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        yitian.getName();
        xuanyuan.getName();
        youlong.getName();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;倚天剑出世！&lt;br/&gt;轩辕剑出世！&lt;br/&gt;游龙剑出世！&lt;/p&gt;

&lt;p&gt;然后，我又拿着程序去找经理过目了。&lt;/p&gt;
&lt;p&gt;这次经理的脸色要缓和许多。&lt;/p&gt;
&lt;p&gt;“小赵，你这个程序看起来是没有什么问题。但是，你不诚实。”&lt;/p&gt;
&lt;p&gt;“经理，我不明白您讲的是什么不诚实？”&lt;/p&gt;
&lt;p&gt;“你这个铸剑房顶多算个简单工厂，也叫做静态工厂模式，你入职面试的时候，说你学过六大设计原则，你这个铸剑房违背了开闭原则你不知道吗？假如说我要你打造一批飞刀暗器，都不属于剑这个类别，你这个铸剑房的怎么扩展？是不是得修改源码改动现有铸剑的逻辑？”&lt;/p&gt;
&lt;p&gt;“经理，我错了，我这就去改。”&lt;/p&gt;
&lt;p&gt;说罢，我立刻回到铸剑房进行思考&lt;/p&gt;

&lt;h3&gt;铸剑房工厂&lt;/h3&gt;
&lt;p&gt;　　事不过三，这次我铁了心一定要把这个架构设计好，这已经不仅仅是打造三把兵器的问题了，这是一个关于设计的问题。&lt;/p&gt;
&lt;p&gt;　　先画类图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1181622/201903/1181622-20190314205514011-2130681929.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;仔细检查了几遍，确实遵守了开闭原则，如果将来要打造什么飞刀暗器的，我就继承SwordFactory，重写createSword方法，或者是直接继承工厂抽象AbstractFactory新开一个铸剑房，都可以不修改原有的代码。&lt;/p&gt;

&lt;p&gt;好了，设计完成后，就敲代码吧：&lt;/p&gt;

&lt;p&gt;工厂抽象：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;33&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;铸剑房抽象&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &lt;span&gt;class&lt;/span&gt;&lt;span&gt; AbstractFactory {
    &lt;/span&gt;&lt;span&gt;//&lt;/span&gt;&lt;span&gt;打造剑的铸剑房工厂&lt;/span&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;abstract&lt;/span&gt; &amp;lt;T &lt;span&gt;extends&lt;/span&gt; Sword&amp;gt; Sword createSword(Class&amp;lt;T&amp;gt;&lt;span&gt; c);
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;工厂实现：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
&lt;span&gt;//&lt;/span&gt;&lt;span&gt;铸剑房&lt;/span&gt;
&lt;span&gt;public&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; SwordFactory &lt;span&gt;extends&lt;/span&gt;&lt;span&gt; AbstractFactory{
    @Override
    &lt;/span&gt;&lt;span&gt;public&lt;/span&gt; &amp;lt;T &lt;span&gt;extends&lt;/span&gt; Sword&amp;gt; Sword createSword(Class&amp;lt;T&amp;gt;&lt;span&gt; c) {
        Sword sword &lt;/span&gt;= &lt;span&gt;null&lt;/span&gt;&lt;span&gt;;
        &lt;/span&gt;&lt;span&gt;try&lt;/span&gt;&lt;span&gt;{
            sword &lt;/span&gt;=&lt;span&gt; (Sword)Class.forName(c.getName()).newInstance();
        }&lt;/span&gt;&lt;span&gt;catch&lt;/span&gt;&lt;span&gt; (Exception e){
            System.out.println(&lt;/span&gt;&quot;铸剑失败&quot;+&lt;span&gt;e.getMessage());
        }
        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; sword;
    }
}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;铸剑：&lt;/p&gt;
&lt;div class=&quot;cnblogs_code&quot; readability=&quot;35&quot;&gt;
&lt;pre&gt;
    &lt;span&gt;public&lt;/span&gt; &lt;span&gt;static&lt;/span&gt; &lt;span&gt;void&lt;/span&gt;&lt;span&gt; main(String[] args) {
        AbstractFactory factory &lt;/span&gt;= &lt;span&gt;new&lt;/span&gt;&lt;span&gt; SwordFactory();
        Sword yitian &lt;/span&gt;= factory.createSword(YitianSword.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        Sword xuanyuan &lt;/span&gt;= factory.createSword(XuanyuanSword.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        Sword youlong &lt;/span&gt;= factory.createSword(YoulongSword.&lt;span&gt;class&lt;/span&gt;&lt;span&gt;);
        yitian.getName();
        xuanyuan.getName();
        youlong.getName();
    }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;倚天剑出世！&lt;br/&gt;轩辕剑出世！&lt;br/&gt;游龙剑出世！&lt;/p&gt;
&lt;h3&gt;后话&lt;/h3&gt;
&lt;p&gt;　　后来，我打造出的三把神剑，为三少爷出尽了风头，华山论剑凯旋回庄之后，重重的赏了我。&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 05:30:00 +0000</pubDate>
<dc:creator>不该相遇在秋天</dc:creator>
<og:description>神剑山庄铸剑 大家好，我是神剑山庄的铸剑师，名叫小赵，昨天入的职，在山庄里逛了一圈，熟悉了一下企业文化，今天就收到了任务，三少爷吩咐下来，要我们尽快打造三把神剑：倚天剑、游龙剑、轩辕剑，据说三少爷要去</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/fengyumeng/p/10533519.html</dc:identifier>
</item>
<item>
<title>接口测试入门篇 - 秦无殇</title>
<link>http://www.cnblogs.com/webDepOfQWS/p/10535649.html</link>
<guid isPermaLink="true" >http://www.cnblogs.com/webDepOfQWS/p/10535649.html</guid>
<description>&lt;p&gt;1、什么是接口？&lt;/p&gt;
&lt;p&gt;接口是连接前台和后台的桥梁，前台通过接口调用后端已完成的功能，而无需关注内部的实现细节。借助于接口，可以实现前后台分离，各自完成开发工作后，进行联调，提高工作效率。&lt;/p&gt;
&lt;p&gt;2、接口的分类？&lt;/p&gt;
&lt;p&gt;GET，POST，PUT,DELETE&lt;/p&gt;
&lt;p&gt;3、接口的区别？&lt;/p&gt;
&lt;p&gt;GET与POST的区别&lt;/p&gt;
&lt;p&gt;答：GET的请求数据是在URL上，POST的请求数据是通过FROM表单。安全性：POST接口的比GET接口更安全。&lt;/p&gt;
&lt;p&gt;PUT和DELETE的区别&lt;/p&gt;
&lt;p&gt;答：PUT用于更新和创建资源；DELETE用于删除资源。&lt;/p&gt;
&lt;p&gt;4、接口测试流程？&lt;/p&gt;
&lt;p&gt;答：需求沟通》》制定测试方案》》设计测试用例》》准备测试环境》》执行测试用例》》缺陷跟踪与回归测试》》上线&lt;/p&gt;
&lt;p&gt;5、为什么要设计测试用例？&lt;/p&gt;
&lt;p&gt;答：理清测试思路，避免漏测；&lt;/p&gt;
&lt;p&gt;提高测试效率；&lt;/p&gt;
&lt;p&gt;跟进测试进度；&lt;/p&gt;
&lt;p&gt;告诉领导这件事情你做过（也可以避免出了问题后扯皮）；&lt;/p&gt;
&lt;p&gt;6、如何设计接口测试用例？&lt;/p&gt;
&lt;p&gt;答：主要从功能，业务逻辑，安全，异常，接口文档等方面入手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.1、功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接口的功能是否实现，比如调用创建集群接口能正常创建集群。&lt;/p&gt;
&lt;p&gt;接口的实现是否与接口文档一致。比如接口的参数与文档中描述的完全一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.2、业务逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接口的调用是否符合业务逻辑。比如支付的时候，需要上游提供订单号；创建集群快照的时候，要校验集群的状态是否可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.3、异常场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要分为参数异常和数据异常&lt;/p&gt;
&lt;p&gt;下面以一个简单的登录接口为例，正常的请求如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315131520525-1330526827.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关键字异常：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a.请求URL或body中包含Python JAVA等语言的关键字。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b.参数为空，比如下图中的参数usernam为空：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315122705369-1853652755.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;c.多参数或少参数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多参数，请求body中多了参数loginmode&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315123057532-1636037940.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;请求居然处理成功了，可见服务端并没有做校验。可以给开发同学提单了。&lt;/p&gt;
&lt;p&gt;少参数，删除username参数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315123322376-634557943.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台返回错误信息，这种情况是正常的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;d.参数不正确&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如我们把username改成userName&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315123700399-1654116565.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;后台给出了错误的提示信息，正常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据异常：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a.数据长度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315124423006-1936354222.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种情况，后台需要校验长度，而不是直接进行查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b.数据为空&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315124257113-952168326.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c.数据不正确&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/631850/201903/631850-20190315124337757-240770787.png&quot; alt=&quot;&quot;/&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; 6.3、安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要是header，cookie，唯一识别码等。&lt;/p&gt;
&lt;p&gt;比如我想创建一个集群，那我是不是要先登录呢。在接口测试的时候可以使用错误的token，或已过期的Token下发创建集群的请求并观察服务端的响应。&lt;/p&gt;
&lt;p&gt;创建集群，是不是只要登录了就能创建呢？答案显然不是的，有的用户只能查看的权限但无创建权限。那我们就可以使用只有查看权限的用户获取Token后再去下发创建集群的请求，看看结果如何。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于登录，用户的密码必须要加密后才能传输，否则也是不安全的。可以使用抓包工具进行查看。&lt;/p&gt;
&lt;p&gt;还有如果因密码错误导致的登录失败，后台的返回的错误信息是：密码不正确。这会降低暴力破解的难度，不安全。正确的提示信息应该是：用户名或者密码不正确。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.4、接口文档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接口的实现要和接口文档完全保持一致，方便前台或其他子系统调用。比如接口调用的使用的关键字是username，文档中写的确实usernmae，这是肯定不行的。&lt;/p&gt;
&lt;p&gt;接口的返回信息要清晰明确。&lt;/p&gt;

&lt;p&gt;7、接口测&lt;strong&gt;试工具的选&lt;/strong&gt;择&lt;/p&gt;
&lt;p&gt;postman：是谷歌浏览器的一款插件，非常强大好用。&lt;/p&gt;
&lt;p&gt;Fiddler：可以抓取接口信息，也可以进行接口测试，自动回复，mock等，很强大。&lt;/p&gt;
&lt;p&gt;假如在接口文档还未完成的情况让测试人员去做接口测试，这种情况下就可以使用Fiddler工具抓取接口信息再进行测试。无需等接口文档完成后。&lt;/p&gt;

&lt;p&gt;8、如何提供接口测试的效率？&lt;/p&gt;
&lt;p&gt;假如领导让你测试100个接口，你加班加点测试完成后，终于松了一口气。过几天，项目上线了，领导告诉你再去把接口回归测试一遍，这个时候你可能就比较头大了。有没有好的解决方案呢？答案就是API自动化&lt;/p&gt;
&lt;p&gt;推荐使用Python+unittest+requests完成测试频率高的接口自动化，如果有更成熟接口测试框架就更好了。一次编写，可多次使用。&lt;/p&gt;






</description>
<pubDate>Fri, 15 Mar 2019 05:16:00 +0000</pubDate>
<dc:creator>秦无殇</dc:creator>
<og:description>1、什么是接口？ 接口是连接前台和后台的桥梁，前台通过接口调用后端已完成的功能，而无需关注内部的实现细节。借助于接口，可以实现前后台分离，各自完成开发工作后，进行联调，提高工作效率。 2、接口的分类？</og:description>
<dc:language>zh-cn</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cnblogs.com/webDepOfQWS/p/10535649.html</dc:identifier>
</item>
</channel>
</rss>