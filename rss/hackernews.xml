<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Firefox Experiments I Would Have Liked to Try</title>
<link>http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html</link>
<guid isPermaLink="true" >http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html</guid>
<description>&lt;p&gt;I have been part of the Firefox Test Pilot team for several years. I had a long list of things I wanted to build. Some I didn’t personally want to build, but I thought they were interesting ideas. I didn’t get very far through this list at all, and now that &lt;a href=&quot;https://medium.com/firefox-test-pilot/adios-amigo-51bec2a00072&quot;&gt;Test Pilot is being retired&lt;/a&gt; I am unlikely to get to them in the future.&lt;/p&gt;
&lt;p&gt;Given this I feel I have to move this work out of my head, and publishing a list of ideas seems like an okay way to do that. Many of these ideas were inspired by something I saw in the wild, sometimes a complete product (envy on my part!), or the seed of an idea embedded in some other product.&lt;/p&gt;
&lt;p&gt;The experiments are a spread: some are little features that seem potentially useful. Others are features seen elsewhere that show promise from user research, but we could only ship them with confidence if we did our own analysis. Some of these are just ideas for how to explore an area more deeply, without a clear product in mind.&lt;/p&gt;
&lt;p&gt;Test Pilot’s purpose was to find things worth shipping in the browser, which means some of these experiments aren’t novel, but there is an underlying question: would people actually use it? We can look at competitors to get ideas, but we have to ship something ourselves if we want to analyze the benefit.&lt;/p&gt;
&lt;p&gt;Table of contents:&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;img alt=&quot;mockup of Sticky Reader Mode&quot; src=&quot;http://www.ianbicking.org/media/mockups/sticky-readable-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Give &lt;a href=&quot;https://support.mozilla.org/en-US/kb/firefox-reader-view-clutter-free-web-pages&quot;&gt;Reader Mode&lt;/a&gt; in Firefox a preference to make it per-domain sticky. E.g. if I use Reader Mode on nytimes.com and then if I visit an article on nytimes.com in the future it’ll automatically convert to reader mode. (The nytimes.com homepage would not be a candidate for that mode.)&lt;/p&gt;
&lt;p&gt;I made an experiment in &lt;a href=&quot;https://github.com/ianb/sticky-reader-mode&quot;&gt;&lt;code&gt;sticky-reader-mode&lt;/code&gt;&lt;/a&gt;, and I think it works really nicely. It changes the browsing experience significantly, and most importantly it doesn’t require frequent proactive engagement to change behavior. Lots of these proposed ideas are tools that require high engagement by the user, and if you don’t invoke the tool then they do nothing. In practice no one (myself included) remembers to invoke these tools. Once you click the preference on a site Sticky Reader Mode then you are opted in to this new experience with no further action required.&lt;/p&gt;
&lt;p&gt;There are a &lt;a href=&quot;https://github.com/ianb/sticky-reader-mode/issues/5&quot;&gt;bunch of similar add-ons&lt;/a&gt;. Sticky Reader Mode works a bit better than most because of its interface, and it will push you directly into Reader Mode without rendering the normal page. &lt;strong&gt;But&lt;/strong&gt; it does this by using APIs that are not public to normal WebExtensions. As a result it can’t be shipped outside Test Pilot, and can’t go in addons.mozilla.org. So… just trust me, it’s great.&lt;/p&gt;
&lt;p&gt;Recently I’ve come upon &lt;a href=&quot;https://brave.com/blog/speed-reader/&quot;&gt;Brave Speed Reader&lt;/a&gt; which is similar, but without per-site opt-in, and using machine learning to identify articles.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of a Cloud Browser&quot; src=&quot;http://www.ianbicking.org/media/mockups/cloud-browser-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Run a browser/user-agent in the cloud and use a mobile view as a kind of semantic or parsed view on that user agent (the phone would just control the browser that is hosted on the cloud). At its simplest we just take the page, simplify it in a few ways, and send it on - similar to what Opera Mini does. The approach lends itself to a variety of task-oriented representations of remote content.&lt;/p&gt;
&lt;p&gt;When I first wrote this down I had just stared at my phone while it took 30 seconds to show me a 404 page. The browser probably knew after a couple seconds that it was a 404 but it acted as a rendering engine and not a user agent, so the browser insisted on faithfully rendering the useless not found page.&lt;/p&gt;
&lt;p&gt;Obviously running a full browser instance in the cloud is resource hungry and finicky but I think we could ignore those issues while testing. Those are hard but solved operational issues.&lt;/p&gt;
&lt;p&gt;Prior art: Opera Mini does some of this. Puffin is specifically cloud rendering for mobile. Light Point does the same for security reasons.&lt;/p&gt;
&lt;p&gt;I later encountered &lt;a href=&quot;https://www.brow.sh&quot;&gt;brow.sh&lt;/a&gt; which is another interesting take on this (specifically with &lt;a href=&quot;https://html.brow.sh&quot;&gt;html.brow.sh&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This is a very big task, but I still believe there’s tremendous potential in it. Most of my concepts are not mobile-based, in part because I don’t like mobile, I don’t like myself when using a mobile device, and it’s not something I want to put my energy into. But I still like this idea.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of Modal Page Actions&quot; src=&quot;http://www.ianbicking.org/media/mockups/modal-page-actions-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This was tangentially inspired by &lt;a href=&quot;https://help.vivaldi.com/article/image-properties/&quot;&gt;Vivaldi’s Image Properties&lt;/a&gt;, not because of the interface, but thinking about how to fit high-information inspection tools into the browser.&lt;/p&gt;
&lt;p&gt;The idea: instead of context menus, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/user_interface/Page_actions&quot;&gt;page actions&lt;/a&gt;, or other interaction points that are part of the “chrome”, implement one overlay interface: the do-something-with-this-page interface. Might also be do-something-with-this-element (e.g. replacing the 7 image-related context menu items: View Image, Copy Image, Copy Image Location, Save Image As, Email Image, Set As Desktop Background, and View Image Info).&lt;/p&gt;
&lt;p&gt;The interface would be an overlay onto the page, similar to what happens when you start Screenshots:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screenshots interface&quot; src=&quot;http://www.ianbicking.org/media/mockups/screenshot-interface-example-small.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Everything that is now in the Page Action menu (the &lt;code&gt;...&lt;/code&gt; in the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; bar), or in the context menu, would be available here. Some items might have a richer interface, e.g., Send Tab To Device would show the devices directly instead of using a submenu. Bookmarking would include some inline &lt;span class=&quot;caps&quot;&gt;UI&lt;/span&gt; for managing the resulting bookmark, and so on.&lt;/p&gt;
&lt;p&gt;There was some pushback because of the &lt;a href=&quot;https://textslashplain.com/2017/01/14/the-line-of-death/&quot;&gt;line of death&lt;/a&gt; – that is, the idea all trusted content must clearly originate from the browser chrome, and not the content area. I do not believe in the Line of Death, it’s something users &lt;em&gt;could&lt;/em&gt; use to form trust, but I don’t believe they &lt;em&gt;do&lt;/em&gt; use it (further user research required).&lt;/p&gt;
&lt;p&gt;The general pattern is inspired by mobile interfaces which are typically much more modal than desktop interfaces. Modal interfaces have gotten a bad rap, I think somewhat undeserved: modal interfaces are also interfaces that guide you through processes, or ask you to explicitly dismiss the interface. It’s not unreasonable to expect someone to finish what they start.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of Find + 1&quot; src=&quot;http://www.ianbicking.org/media/mockups/find-plus-1-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We have find-in-page but what about find-in-anything-linked-from-this-page?&lt;/p&gt;
&lt;p&gt;Hit Cmd-Shift-F and you get an interface to do that. All the linked pages will be loaded in the background and as you search we show snippets of matching pages. Clicking on a snippet opens or focuses the tab and goes to where the search term was found.&lt;/p&gt;
&lt;p&gt;I started experimenting in &lt;a href=&quot;https://github.com/ianb/find-plus-one&quot;&gt;&lt;code&gt;find-plus-one&lt;/code&gt;&lt;/a&gt; and encountered some challenges: hidden tabs aren’t good workers, loading pages in the background takes a lot of grinding in Firefox, and most links on pages are stupid (e.g., I don’t want to search your Careers page). An important building block would be a way to identify the important (non-navigational) parts of a page. Maybe lighter-weight ways to load pages (in other projects I’ve used &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CSP&lt;/span&gt;&lt;/a&gt; injection). The Copy Keeper concept did come about while I experimented with this.&lt;/p&gt;
&lt;p&gt;A simpler implementation of this might simply do a text search of all your open tabs, which would be technically simpler and mostly an exercise in making a good representation of the results.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of Your Front Page&quot; src=&quot;http://www.ianbicking.org/media/mockups/your-front-page-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Create a front page of news from the sites you already visit. Like an &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; reader, but prepopulated with your history. This creates an immediate well-populated experience.&lt;/p&gt;
&lt;p&gt;My initial thought was to use ad hoc parsers for popular news sites, and at run an experiment with just a long whitelist of news providers.&lt;/p&gt;
&lt;p&gt;I got the feedback: why not just use &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;? Good question: I thought &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; was kind of passé, but I hadn’t looked for myself. I went on to do some analysis of &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;, and found it available for almost all news sites. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/RSS/Getting_Started/Syndicating#Adding_the_.3Clink.3E&quot;&gt;autodetection&lt;/a&gt; (&lt;code&gt;&amp;lt;link rel=alternate&amp;gt;&lt;/code&gt;) is &lt;em&gt;not&lt;/em&gt; as widely available, and it requires manual searching to find many feeds. Still &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; is a good way to get an up-to-date list of articles and their titles. Article content isn’t well represented and other article metadata is inaccurate or malformed (e.g., there are no useful tags). So using &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; would be very reasonable discovery mechanism, but an “&lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; reader” doesn’t seem like a good direction on the current web.&lt;/p&gt;

&lt;p&gt;This is bringing back old functionality from Page Shot, a project of mine which morphed into &lt;a href=&quot;https://screenshots.firefox.com&quot;&gt;Firefox Screenshots&lt;/a&gt;: save full &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; copies of pages. What used to be fairly novel is now well represented by several projects (e.g., &lt;a href=&quot;https://blog.webmemex.org/&quot;&gt;WebMemex&lt;/a&gt; or &lt;a href=&quot;https://worldbrain.io/&quot;&gt;World Brain Memex&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Unfortunately I have never been able to really make this kind of tool part of &lt;em&gt;my own&lt;/em&gt; day-to-day behavior, and I’ve become skeptical it can work for a general populace. But maybe there’s a way to package up this functionality that is more accessible, or happens more implicitly. I &lt;a href=&quot;https://github.com/ianb/pagearchive&quot;&gt;forked a version of Page Shot as pagearchive&lt;/a&gt; a while ago, with this in mind, but I haven’t (and likely won’t) come back to it.&lt;/p&gt;

&lt;p&gt;This isn’t really a product idea, but instead an approach to developing products.&lt;/p&gt;
&lt;p&gt;One can imagine many tools that directly interact or learn from the content of your browsing. There is both a privacy issue here and a privacy opportunity: looking at this data is creepy, but if the tools live in your user agent (that belongs to you and hosts your information locally) then it’s not so creepy.&lt;/p&gt;
&lt;p&gt;But it’s really hard to make experiments on this because you need a bunch of data. If you build a tool that starts watching your browsing then it will only slowly build up interesting information. The actual information that is already saved in browser history is interesting, but in my experience it is too limited and of poor quality. For instance, it is quite hard to build up a navigational path from the history when you use multiple tabs.&lt;/p&gt;
&lt;p&gt;A better iterative development approach would be one where you have a static set of all the information you might want, and you can apply tools to that information. If you find something good then later you can add new data collection to the browser, secure in the knowledge that it’s going to find interesting things.&lt;/p&gt;
&lt;p&gt;I spent quite a bit of effort on this, and produced &lt;a href=&quot;https://github.com/ianb/personal-history-archive&quot;&gt;`personal-history-archive&lt;/a&gt;. It’s something I still want to come back to. It’s a bit of a mess, because at various times it was retrofitted to collect historical information, or collect it on an ongoing basis, or collected it when driven by a script. I also tried to build tools in parallel for doing analysis on the resulting database.&lt;/p&gt;
&lt;p&gt;This is also a byproduct of experimentation with machine learning. I wanted to apply things I was learning to browser data, but the data I wanted wasn’t there. I spent all my time collecting and cleaning data, and ended up spending only a small amount of time analyzing the data. I suspect I’m not the only one who has done this.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of Navigational Breadcrumbs&quot; src=&quot;http://www.ianbicking.org/media/mockups/navigational-breadcrumbs-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;When I click on a link I lose the reminder of why I clicked on it. What on the previous page led me to click on this? Was I promised something? Are there sibling links that I might want to continue to directly instead of going back and selecting another link?&lt;/p&gt;
&lt;p&gt;This tool would give you additional information about the page you are on, how you got there, and given where you came from, where you might go next. Would this be a sidebar? Overlay content? In a popup? I’m not sure.&lt;/p&gt;
&lt;p&gt;Example: using this, if I click on a link from Reddit I will be able to see the title of the Reddit post (which usually doesn’t match the document title), and a link to comments on the page. If I follow a link from Twitter, I’ll be able to see the Tweet I came from.&lt;/p&gt;
&lt;p&gt;This could be interesting paired with link preview (like a tentative forward). Maybe the mobile browser &lt;a href=&quot;https://linkbubble.com/&quot;&gt;Linkbubbles&lt;/a&gt; (now integrated into Brave) has some ideas to offer.&lt;/p&gt;
&lt;p&gt;Technically this will use some of the techniques from Personal History Archive, which tracks link sources.&lt;/p&gt;
&lt;p&gt;This is based on the train of thought I wrote down &lt;a href=&quot;https://news.ycombinator.com/item?id=17702206&quot;&gt;in an &lt;span class=&quot;caps&quot;&gt;HN&lt;/span&gt; comment&lt;/a&gt; – itself a response to &lt;a href=&quot;https://www.reinterpretcast.com/open-hypermedia&quot;&gt;Freeing the Web from the Browser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I want to try this still, and have started a repo &lt;a href=&quot;https://github.com/ianb/crossnav&quot;&gt;&lt;code&gt;crossnav&lt;/code&gt;&lt;/a&gt; but haven’t put anything there yet. I think even some naive approaches could work, just trying to detect the &lt;em&gt;category&lt;/em&gt; of link and the &lt;em&gt;related&lt;/em&gt; links (e.g., on Reddit the category is other submissions, and the related links are things like comments).&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of Copy Keeper&quot; src=&quot;http://www.ianbicking.org/media/mockups/copy-keeper-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A notebook/logbook that is filled in every time you copy from a web page. When you copy it records (locally):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Text of selection&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; of selection&lt;/li&gt;
&lt;li&gt;Screenshot of the block element around the selection&lt;/li&gt;
&lt;li&gt;Text around selection&lt;/li&gt;
&lt;li&gt;Page &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; and nearest anchor/id&lt;/li&gt;
&lt;li&gt;Page title&lt;/li&gt;
&lt;li&gt;Datetime&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This overloads “copy” to mean “remember”.&lt;/p&gt;
&lt;p&gt;Clips would be searchable, and could be moved back to the clipboard in different forms (text, &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, image, bibliographical reference, source &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;). Maybe clips would be browsable in a sidebar (maybe the sidebar has to be open for copies to be collected), or clips could be browsed in a normal tab (Library-style).&lt;/p&gt;
&lt;p&gt;I created a prototype in &lt;a href=&quot;https://github.com/ianb/copy-keeper&quot;&gt;&lt;code&gt;copy-keeper&lt;/code&gt;&lt;/a&gt;. I thought it was interesting and usable, though whether it would actually get any use in practice I don’t know. It’s one of those tools that seems handy but requires effort, and as a result doesn’t get used.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of Change Scout&quot; src=&quot;http://www.ianbicking.org/media/mockups/change-scout-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;(Wherein I both steal a &lt;a href=&quot;https://www.businessinsider.com/mozilla-scout-voice-controlled-browser-2018-6&quot;&gt;name from another team&lt;/a&gt;, and turn it into a category…)&lt;/p&gt;
&lt;p&gt;Change Scout will monitor a page for you, and notify you when it changes. Did someone edit the document? Was there activity on an issue? Did an article get updated? Put Change Scout to track it and it will tell you what changes and when.&lt;/p&gt;
&lt;p&gt;It would monitor the page inside the browser, so it would have access to personalized and authenticated content. A key task would be finding ways to present changes in an interesting and compact way. In another experiment I tried some very simple change detection tools, and mostly end up frustrated (small changes look very large to naive algorithms).&lt;/p&gt;
&lt;h2/&gt;
&lt;p&gt;&lt;img alt=&quot;Tab Switcher mockup&quot; src=&quot;http://www.ianbicking.org/media/mockups/tab-switcher-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We take the exact &lt;span class=&quot;caps&quot;&gt;UI&lt;/span&gt; of the &lt;a href=&quot;https://github.com/mozilla/side-view&quot;&gt;Side View&lt;/a&gt; popup, but make it a tab switcher. “Recent Tabs” are the most recently focused tabs (weighted somewhat by how long you were on the tab), and then there’s the complete scrollable list. Clicking on an item simply focuses that tab. You can close tabs without focusing them.&lt;/p&gt;
&lt;p&gt;I made a prototype in &lt;a href=&quot;https://github.com/ianb/tab-switchr&quot;&gt;&lt;code&gt;tab-switchr&lt;/code&gt;&lt;/a&gt;. In it I also added some controls to close tabs, which was very useful for my periodic tab cleanups. Given that it was a proactive tool, I surprised myself by using it frequently. There’s work in Firefox to improve this, unrelated to anything I’ve done. It reminds me a bit of various &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/tree-style-tab/&quot;&gt;Tree-Style Tabs&lt;/a&gt;, which I both like because they make it easier to see my tabs, and dislike because I ultimately am settled on normal top-tabs. The popup interface is less radical but still provides many of the benefits.&lt;/p&gt;
&lt;p&gt;I should probably clean this up a little and publish it.&lt;/p&gt;

&lt;p&gt;Create your own &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; feed.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When you are on a page with some audio source, you can add the audio to your personal feed&lt;/li&gt;
&lt;li&gt;When on an article, you can generate an audio version that will be added to the feed&lt;/li&gt;
&lt;li&gt;You get an &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; feed with a random token to make it private (I don’t think podcast apps handle authentication well, but this requires research)&lt;/li&gt;
&lt;li&gt;Maybe you can just send/text the link to add it to your preferred podcast app&lt;/li&gt;
&lt;li&gt;If apps don’t accept &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; links very well, maybe something more complicated would be required. An app that just installs an &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; feed? We want to avoid the feed accidentally ending up in podcast directories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There’s a lot of low-rated bookmark managers in addons.mozilla.org and the Chrome Extension store. Let’s make our own low-rated bookmark manager!&lt;/p&gt;
&lt;p&gt;But seriously, this would anticipate updates to the Library and built-in bookmark manager, which are deficient.&lt;/p&gt;
&lt;p&gt;Some resources/ideas: &lt;em&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=17072803&quot;&gt;Comment with a few gripes&lt;/a&gt;&lt;/em&gt; &lt;a href=&quot;https://chrome.google.com/webstore/detail/bookmark-manager/gmlllbghnfkpflemihljekbapjopfjik?hl=en&quot;&gt;Google’s bookmark manager&lt;/a&gt; &lt;em&gt;&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/bookmarks-manager-and-viewer/?src=search&quot;&gt;Bookmark section on addons.mozilla.org&lt;/a&gt;&lt;/em&gt; &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/bookmarks-organizer/?src=search&quot;&gt;Bookmark organizers on addons.mozilla.org&lt;/a&gt; * &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/bookmarks&quot;&gt;Relevant WebExtension APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of the Extended Library&quot; src=&quot;http://www.ianbicking.org/media/mockups/extended-library-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The “Library” in Firefox is the combination history and bookmark browser you get if you use “Show all bookmarks” or “Show all history”.&lt;/p&gt;
&lt;p&gt;In this idea we present the user with a record of their &lt;strong&gt;assets&lt;/strong&gt;, wherever they are.&lt;/p&gt;
&lt;p&gt;This is like a history view (and would be built from history), but would use heuristics to pick out certain kinds of things: docs you’ve edited, screenshots you’ve taken, tickets you’ve opened, etc. We’d be trying hard to find long-lived documents in your history, instead of transitional navigation, articles, things you’ve gotten to from public indexes, etc.&lt;/p&gt;
&lt;p&gt;Automatically determining what should be tagged as a “library item” would be the hard part. But I think having an organic view of these items, regardless of underlying service, would be quite valuable. The browser has access to all your services, and it’s easy to forget what service hosts the thing you are thinking about.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;mockup of Text Mobile Screenshot&quot; src=&quot;http://www.ianbicking.org/media/mockups/text-mobile-screenshot-start.gif&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This tool will render the tab in a mobile factor (using the devtools &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Responsive_Design_Mode&quot;&gt;responsive design mode&lt;/a&gt;), take a full-page screenshot, and text the image and &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; to a given number. Probably it would only support texting to yourself.&lt;/p&gt;
&lt;p&gt;I’ve looked into this some, and getting the mobile view of a page is not entirely obvious and requires digging around deep in the browser. Devtools does some complicated stuff to display the mobile view. The rest is basic &lt;span class=&quot;caps&quot;&gt;UI&lt;/span&gt; flows and operational support.&lt;/p&gt;

&lt;p&gt;Emails the Reader Mode version of a site to yourself. In our research, people love to store things in Email, so why not?&lt;/p&gt;
&lt;p&gt;Though it lacks the simplicity of this concept, &lt;a href=&quot;https://github.com/mozilla/email-tabs&quot;&gt;Email Tabs&lt;/a&gt; contains this basic functionality. &lt;a href=&quot;https://www.emailthis.me/&quot;&gt;Email This&lt;/a&gt; does almost exactly this.&lt;/p&gt;

&lt;p&gt;An extension that finds and syncs your history between browsers (particularly between Chrome and Firefox).&lt;/p&gt;
&lt;p&gt;This would use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/history&quot;&gt;history WebExtension APIs&lt;/a&gt;. Maybe we could create a &lt;a href=&quot;https://en.wikipedia.org/wiki/Firefox_Sync&quot;&gt;Firefox Sync&lt;/a&gt; client in Chrome. Maybe it could be a general way to move things between browsers. Actual synchronization is hard, but creating read-only views into the data in another browser profile is much easier.&lt;/p&gt;
&lt;p&gt;Obviously there’s lots of work to synchronize this data between Firefox properties, and knowing the work involved this isn’t easy and often involves close work with the underlying platform. Without full access to the platform (like on Chrome) we’ll have to find ways to simplify the problem in order to make it feasible.&lt;/p&gt;

&lt;p&gt;Everyone (with an &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/accounts/&quot;&gt;FxA account&lt;/a&gt;) gets there own homepage on the web. It’s like Geocities! Or maybe closer to github.io.&lt;/p&gt;
&lt;p&gt;But more seriously, it would be programmatically accessible simple static hosting. Not just for you to write your own homepage, but an open way for applications to publish user content, without those applications themselves turning into hosting platforms. We’d absorb all the annoyances of hosting content (abuse, copyright, quotas, ops, financing) and let open source developers focus on enabling interesting content generation experiences for users on the open web.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ianbicking.org/blog/2019/01/we-need-open-hosting-platforms.html&quot;&gt;Here’s a general argument&lt;/a&gt; why I think this would be a useful thing for us to do. &lt;a href=&quot;https://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web/&quot;&gt;And another from Les Orchard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a proposal for user research:&lt;/p&gt;
&lt;p&gt;Electron apps are being shipped for many services, including services that don’t require any special system integration. E.g., Slack doesn’t require anything that a web browser can’t do. Spotify maybe catches some play/pause keys, but is very close to being a web site. Yet there is perceived value in having an app.&lt;/p&gt;
&lt;p&gt;The user research would focus on cases where the Electron app doesn’t have any/many special permissions. What gives the app value over the web page?&lt;/p&gt;
&lt;p&gt;The goal would be to understand the motivations and constraints of users, so we could consider ways to make the in-browser experience equally pleasant to the Electron app.&lt;/p&gt;

&lt;p&gt;Per my previous item: why do I have an &lt;a href=&quot;https://www.irccloud.com/&quot;&gt;IRCCloud&lt;/a&gt; app? Why do people use Slack apps? Maybe it’s just because they want to be able to switch into and out of those apps quickly.&lt;/p&gt;
&lt;p&gt;A proposed product solution: add a shortcut to any specific (pinned?) tab. Might be autocreated. Using the shortcut when the app is already selected will switch you back to your previous-selected tab. Switching to the tab without the shortcut will display a gentle reminder that the shortcut exists (so you can train yourself to start using it).&lt;/p&gt;
&lt;p&gt;To make it a little more fancy, I thought we might also be able to do a second related “preview” shortcut. This would let you peek into the window. I’m not sure what “peeking” means. Maybe we just show a popup with a screenshot of that other window.&lt;/p&gt;
&lt;p&gt;Maybe this should all just overload ⌘1/2/3 (maybe shift-⌘1/etc for peeking). Note these shortcuts do not currently have memory – you can switch &lt;em&gt;to&lt;/em&gt; the first tab with ⌘1, but you can’t switch back.&lt;/p&gt;
&lt;p&gt;This is one suggested solution to &lt;em&gt;Whatever Electron does for people&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I started some work in &lt;a href=&quot;https://github.com/ianb/quick-switch-extension&quot;&gt;&lt;code&gt;quick-switch-extension&lt;/code&gt;&lt;/a&gt;, but keyboard shortcuts were a bit wonky, and I couldn’t figure out useful additional functionality that would make it fun. Firefox (Nightly?) now has Ctrl-Tab functionality that takes you to recent tabs, mitigating this problem (though it is not nearly as predictable as what I propose here).&lt;/p&gt;

&lt;p&gt;Just Save saves a page. It’s like a bookmark. Or a remembering. Or an archive. Or all of those all at once.&lt;/p&gt;
&lt;p&gt;Just Save is a one-click operation, though a popup does show up (similar in function to Pocket) that would allow some additional annotation of your saved page.&lt;/p&gt;
&lt;p&gt;We save: 1. Link 2. Title 3. Standard metadata 4. Screenshot 5. Frozen version of page 6. Scroll position 7. The tab history 8. Remember the other open tabs, so if some of them are saved we offer later relations between them 9. Time the page was saved 10. Query terms that led to the page&lt;/p&gt;
&lt;p&gt;It’s like bookmarks, but purely focused on saving, while bookmarks do double-duty as a navigational tool. The tool encourages after-the-fact discovery and organization, not at-the-time-of-save choices.&lt;/p&gt;
&lt;p&gt;And of course there’s a way to find and manage your saved pages. This idea needs more exploration of &lt;em&gt;why&lt;/em&gt; you would return to a page or piece of information, and thus what we’d want to expose and surface from your history. We’ve &lt;a href=&quot;https://blog.mozilla.org/ux/2015/02/save-share-revisit/&quot;&gt;done research&lt;/a&gt;, but it’s really just a start.&lt;/p&gt;

&lt;p&gt;We have several &lt;a href=&quot;https://dxr.mozilla.org/mozilla-central/source/browser/components/search/searchplugins&quot;&gt;open search providers&lt;/a&gt;. How many exist out there? How many could we find in history?&lt;/p&gt;
&lt;p&gt;In theory &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/OpenSearch&quot;&gt;Open Search is an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt; where a user could do personalized search across many properties, though I’m not sure if any sufficient number of sites has enabled it.&lt;/p&gt;

&lt;p&gt;It’s &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/notes-by-firefox/&quot;&gt;Notes&lt;/a&gt;, but with &lt;a href=&quot;https://api.slack.com/slash-commands&quot;&gt;slash commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I other words it’s a document, but if you complete a line that begins with a &lt;code&gt;/&lt;/code&gt; then it will try to execute that command, appending or overwriting from that point.&lt;/p&gt;
&lt;p&gt;So for instance &lt;code&gt;/timestamp&lt;/code&gt; just replaces itself with a timestamp.&lt;/p&gt;
&lt;p&gt;Maybe &lt;code&gt;/page&lt;/code&gt; inserts the currently active tab. &lt;code&gt;/search foo&lt;/code&gt; puts search results into the document, but as editable (and followable) links. &lt;code&gt;/page save&lt;/code&gt; freezes the page as one big data link, and inserts that link into the note.&lt;/p&gt;
&lt;p&gt;It’s a little like Slack, but in document form, and with the browser as the context instead of a messaging platform. It’s a little like a notebook programming interface, but less structured and more document-like.&lt;/p&gt;
&lt;p&gt;The ability to edit the &lt;em&gt;output&lt;/em&gt; of commands is particularly interesting to me, and represents the kind of ad hoc information organizing that we all do regularly.&lt;/p&gt;
&lt;p&gt;I experimented some with this in Notes, and got it working a little bit, but working with CKEditor (that Notes is built on) was just awful and I couldn’t get anything to work well. Notes also has a very limited set of supported content (no images or links), which was problematic. Maybe it’s worth doing it from scratch (with &lt;a href=&quot;http://prosemirror.net/&quot;&gt;ProseMirror&lt;/a&gt; or &lt;a href=&quot;https://github.com/ianstormtaylor/slate&quot;&gt;Slate&lt;/a&gt;?)&lt;/p&gt;
&lt;p&gt;After I tried to mock this up, I realized that the underlying model is much too unclear in my mind. What’s this for? &lt;em&gt;When&lt;/em&gt; is it for? What would a list of commands look like?&lt;/p&gt;
&lt;p&gt;Another thing I realized while attempting a mockup is that there should be a rich but normalized way to represent pages and URLs and so forth. Often you’ll be referring to URLs of pages that are already open. You may want to open sets of pages, or see immediately which URLs are already open in a tab. A frozen version of a page should be clearly linked to the source of that page, which of course could be an open tab. There’s a lot of pieces to fit together here, both common nouns and verbs, all of which interact with the browser session itself.&lt;/p&gt;

&lt;p&gt;Automation and scripting for your browser: make demonstrations for your browser, give it a name, and you have a repeatable script.&lt;/p&gt;
&lt;p&gt;The scripts will happen in the browser itself, not via any backend or scraping tool. In case of failed expectations or changed sites, the script will halt and tell the user.&lt;/p&gt;
&lt;p&gt;Scripts could be as simple as “open a new tab pointing to this page every weekday at 9am”, or could involve clipping information, or just doing a navigational pattern before presenting the page to a user.&lt;/p&gt;
&lt;p&gt;There’s a huge amount of previous work in this area. I think the challenge here is to create something that &lt;em&gt;doesn’t&lt;/em&gt; look like a programming language displayed in a table.&lt;/p&gt;

&lt;p&gt;Sidekick is a sidebar interface to anything, or everything, contextually. Some things it might display:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Show you the state of your clipboard&lt;/li&gt;
&lt;li&gt;Show you how you got to the current tab (similar to &lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#navigational-breadcrumbs&quot;&gt;Navigational Breadcrumbs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Show you other items from the search query that kicked off the current tab&lt;/li&gt;
&lt;li&gt;Give quick navigation to nearby pages, given the referring page (e.g., the next link, or next set of links)&lt;/li&gt;
&lt;li&gt;Show you buttons to activate other tabs you are likely to switch to from the current tab&lt;/li&gt;
&lt;li&gt;Show shopping recommendations or other content-aware widgets&lt;/li&gt;
&lt;li&gt;Let you save little tidbits (text, links, etc), like an extended clipboard or notepad&lt;/li&gt;
&lt;li&gt;Show notifications you’ve recently received&lt;/li&gt;
&lt;li&gt;Peek into other tabs, or load them inline somewhat like &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/side-view/&quot;&gt;Side View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Checklists and todos&lt;/li&gt;
&lt;li&gt;Copy a bunch of links into the sidebar, then treat them like a todo/queue&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Possibly it could be treated like an extensible widget holder.&lt;/p&gt;
&lt;p&gt;From another perspective: this is like a continuous contextual feature recommender. I.e., it would try to answer the question: what’s the feature you could use right now?&lt;/p&gt;

&lt;p&gt;Generally in order to commit something to long-term memory you must revisit information later, ideally long enough that it’s a struggle.&lt;/p&gt;
&lt;p&gt;Is anything we see in a browser worth committing to long-term memory? Sometimes it feels like nothing is worth remembering, but that’s a kind of nihilism based on the shitty aspects of typical web browsing behavior.&lt;/p&gt;
&lt;p&gt;The interface would require some positive assertion: I want to know this. Probably you’d want to highlight the thing you’d “know”. Then, later, we’d want to come up with some challenge. We don’t need a “real” test that is verified by the browser, instead we simply need to ask some related question, then the user can say if they got it right or not (or remembered it or not).&lt;/p&gt;

&lt;p&gt;Reader mode is a bit spartan. Maybe it could be a bit nicer:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Pick up some styles or backgrounds from the hosting site&lt;/li&gt;
&lt;li&gt;Display images or other media differently or more prominently&lt;/li&gt;
&lt;li&gt;Add back some markup or layout that Readability erases&lt;/li&gt;
&lt;li&gt;Apply to some other kinds of sites that aren’t articles (e.g., a video site)&lt;/li&gt;
&lt;li&gt;A multicolumn version like &lt;a href=&quot;https://anoved.github.io/mcreadability/&quot;&gt;McReadability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inspired by &lt;a href=&quot;http://www.fullhn.com/&quot;&gt;Full Hacker News&lt;/a&gt; (&lt;a href=&quot;https://news.ycombinator.com/item?id=18132281&quot;&gt;comments&lt;/a&gt;): take a bunch of links (typically articles) and concatenate their content into one page.&lt;/p&gt;
&lt;p&gt;Implicitly this requires Reader Mode parsing of the pages, though that is relatively cheap for “normal” articles. Acquiring a list of pages is somewhat less clear. Getting a list of pages is a kind of news/&lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; question. Taking a page &lt;em&gt;like&lt;/em&gt; Hacker News and figuring out what the “real” links are is another approach that may be interesting. Lists of related links are everywhere, yet hard to formally define.&lt;/p&gt;
&lt;p&gt;This would work very nicely with complementary text summarization.&lt;/p&gt;
&lt;p&gt;Open question: is this actually an interesting or useful way to consume information?&lt;/p&gt;

&lt;p&gt;There’s an underlying concept here worth explaining:&lt;/p&gt;
&lt;p&gt;Feature develop receives a lot of skepticism. And it’s reasonable: there’s a lot of conceit in a feature, especially embedded in a large product. Are people going to use a product or not because of some little feature? Or maybe the larger challenge: can some feature actually change behavior? Every person has their own thing going on, people aren’t interested in our theories, and really not that many people are interested in browsers. Familiar functionality – the back button, bookmarks, the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; bar, etc. – are what they expect, what they came for, and what they will gravitate to. Everything I’ve written so far in this list are things &lt;em&gt;people won’t actually use&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A browser is particularly problematic because it’s so universal. It’s for sites and apps and articles. It’s for the young and the elderly, the experienced and not. It’s used for serious things, it’s used for concentration, and it’s used for dumb things and to avoid concentrating. How can you build a feature for everyone, targeting anything they might do? And if you build something, how can a person trust a new feature is really for &lt;em&gt;them&lt;/em&gt;, not some other person? People are right to be skeptical of the new!&lt;/p&gt;
&lt;p&gt;But we also know that most people regularly use more than one browser. Some people use Chrome for personal stuff, and Firefox for work. Some people do the exact opposite. Some people do their banking and finance in a specific browser. Some use a specific browser just for watching videos.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Which&lt;/em&gt; browser a person uses for which task is seemingly random. Maybe they were told to use a specific browser for one task, and then the other browser became the fallback. Maybe they once heard somewhere once that one browser was more secure. Maybe flash seemed broken on one browser when they were watching a video, and now a pattern has been set.&lt;/p&gt;
&lt;p&gt;This has long seemed like an opportunity to me. Market a browser that actually claims to be the right browser for some of these purposes! Firefox has &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/developer/&quot;&gt;Developer Edition&lt;/a&gt; and it’s been reasonably successful.&lt;/p&gt;
&lt;p&gt;This offers an opportunity for both Mozilla and Firefox users to agree on &lt;strong&gt;purpose&lt;/strong&gt;. What is Firefox for? Everything! Is this feature meant for &lt;em&gt;you&lt;/em&gt;? Unlikely! In a purpose-built browser both sides can agree what it’s trying to accomplish.&lt;/p&gt;
&lt;p&gt;This idea often gets poo-pooed for how much work it is, but I think it’s simpler than it seems. Here’s what a “new browser” means:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Something you can find and download from its own page or site&lt;/li&gt;
&lt;li&gt;It’s Firefox, but uses its own &lt;a href=&quot;https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data&quot;&gt;profile&lt;/a&gt;, keeping history/etc separate from other browser instances (including Firefox)&lt;/li&gt;
&lt;li&gt;It has its own name and icon, and probably a theme to make it obvious what browser you are in&lt;/li&gt;
&lt;li&gt;It comes with some browser extensions and prefs changed, making it more appropriate for the proposed use case&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The approach is heavy on marketing and build tools, and light on actual browser engineering.&lt;/p&gt;
&lt;p&gt;I also have gotten frequent feedback that &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/&quot;&gt;Multi-Account Containers&lt;/a&gt; should solve all these use cases, but that gets everything backwards. People already understand multiple browsers, and having completely new entry points to bring people to Firefox is a feature, not a bug.&lt;/p&gt;
&lt;p&gt;Sadly I think the time for this has passed, maybe in the market generally or maybe just for Mozilla. It would have been a very different approach to the browser.&lt;/p&gt;
&lt;p&gt;Some of us in the Test Pilot team had some good brainstorming around actual concepts too, which is where I actually get excited about the ideas:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#firefox-study&quot; id=&quot;firefox-study&quot;&gt;Firefox Study&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For students, studying.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Integrate note-taking tools&lt;/li&gt;
&lt;li&gt;Create project and class-based organizational tools, helping to organize tabs, bookmarks, and notes&lt;/li&gt;
&lt;li&gt;Tools to document and organize deadlines&lt;/li&gt;
&lt;li&gt;Citation generators&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I don’t know &lt;em&gt;what&lt;/em&gt; to do with online lectures and video, but it feels like there’s some meaningful improvements to be done in that space. Video-position-aware notetaking tools?&lt;/p&gt;
&lt;p&gt;I think the intentionality of opening a browser to study is a good thing. iPads are somewhat popular in education, and I suspect part of that is having a device that isn’t built around multitasking, and using an iPad means stepping away from regular computing.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#firefox-media&quot; id=&quot;firefox-media&quot;&gt;Firefox Media&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To watch videos. This requires very few features, but benefits from just being a separate profile, history, and icon.&lt;/p&gt;
&lt;p&gt;There’s a small number of features that might be useful:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Cross-service search (like &lt;a href=&quot;http://www.canistream.it/&quot;&gt;Can I Stream.it&lt;/a&gt; or &lt;a href=&quot;https://www.justwatch.com/&quot;&gt;JustWatch&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Search defaults to video search&lt;/li&gt;
&lt;li&gt;Cross-service queue&lt;/li&gt;
&lt;li&gt;Quick service-based navigation&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I realize it’s a lot like Roku in an app.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#firefox-for-finance&quot; id=&quot;firefox-for-finance&quot;&gt;Firefox for Finance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is really just about security.&lt;/p&gt;
&lt;p&gt;Funny story: people say they value security very highly. But if Mozilla wants to make changes in Firefox that increase security but break some sites – particularly insecure sites – people will then stop using Firefox. They value security highly, but still just below &lt;em&gt;anything at all breaking&lt;/em&gt;. This is very frustrating for us.&lt;/p&gt;
&lt;p&gt;At the same time, I kind of get it. I’m dorking around on the web and I click through to some dumb site, and I get a big ol’ warning or a blank page or some other weirdness. I didn’t even care about the page or its security, and here my browser is trying to make me care.&lt;/p&gt;
&lt;p&gt;That’s true some of the time, but not others. If you are using Firefox for Finance, or Firefox Super Secure, or whatever we might call it, then you really do care.&lt;/p&gt;
&lt;p&gt;There’s a second kind of security implied here as well: security from snooping eyes and on shared computers. &lt;a href=&quot;https://support.mozilla.org/en-US/kb/use-master-password-protect-stored-logins&quot;&gt;Firefox Master Password&lt;/a&gt; is a useful feature here. Generally there’s an opportunity for secure data at rest.&lt;/p&gt;
&lt;p&gt;This is also a vehicle for education in computer security, with an audience that we know is interested.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#firefox-low-bandwidth&quot; id=&quot;firefox-low-bandwidth&quot;&gt;Firefox Low Bandwidth&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Maybe we work with proxy services. Or just do lots of content blocking. In this browser we let content break (and give a control to load the full content), so long as you start out compact.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Cache content that isn’t really supposed to be cached&lt;/li&gt;
&lt;li&gt;Don’t load some kinds of content&lt;/li&gt;
&lt;li&gt;Block fonts and other seemingly-unimportant content&lt;/li&gt;
&lt;li&gt;Monitoring tools to see where bandwidth usage is going&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#firefox-for-kids&quot; id=&quot;firefox-for-kids&quot;&gt;Firefox for Kids&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sadly making things for kids is hard, because you are obliged to do all sorts of things if you claim to target children, but you don’t have to do anything if kids just happen to use your tool.&lt;/p&gt;
&lt;p&gt;There is an industry of tools in this area that I don’t fully understand, and I’d want to research before thinking about a feature list. But it seems like it comes down to three things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Blocking problematic content&lt;/li&gt;
&lt;li&gt;Encouraging positive content&lt;/li&gt;
&lt;li&gt;Monitoring tools for parents&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There’s something very uninspiring about that list, it feels like it’s long on negativity and short on positive engagement. Coming up with an answer to that is not a simple task.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#firefox-calm&quot; id=&quot;firefox-calm&quot;&gt;Firefox Calm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Inspired by a bunch of things:&lt;/p&gt;
&lt;p&gt;What would a calm Firefox experience look like? Or maybe it would be better to think about a calm presentation of the web. At some point I wrote out some short pitches:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Read without distraction: Read articles like they are articles, not interactive (and manipulative) experiences.&lt;/li&gt;
&lt;li&gt;Stay focused on one thing at a time: Instead of a giant list of tabs and alerts telling you what we aren’t doing, automatically focus on the one thing you are doing right now.&lt;/li&gt;
&lt;li&gt;Control your notifications: Instead of letting any site poke at you for any reason, notifications are kept to a minimum and batched.&lt;/li&gt;
&lt;li&gt;Focused writing: When you need to focus on what you are saying, not what people are saying to you, enter focused writing mode.&lt;/li&gt;
&lt;li&gt;Get updates without falling down a news hole: Avoid clickbait, don’t reload pages, just see updates from the sites you trust (relates to &lt;a href=&quot;http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html#your-front-page&quot;&gt;Your Front Page&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Pomodoro: let yourself get distracted… but only a little bit. The Pomodoro technique helps you switch between periods of focused work and letting yourself relax&lt;/li&gt;
&lt;li&gt;Don’t even ask: Do you want notifications from the news site you visited once? Do you want videos to autoplay? Of course not, and we’ll stop even asking.&lt;/li&gt;
&lt;li&gt;Suggestion-free browsing: Every page you look at isn’t an invitation to tell you what you should look at next. Remove suggested content, and do what &lt;span class=&quot;caps&quot;&gt;YOU&lt;/span&gt; want to do next. (&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/remove-youtube-s-suggestions/&quot;&gt;YouTube example&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not just the conclusion of this list, the conclusion of my work in this area…&lt;/p&gt;
&lt;p&gt;Some challenges in the design process:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Asking someone to &lt;em&gt;do&lt;/em&gt; something new is hard, and unlikely to happen. My previous post (&lt;a href=&quot;http://www.ianbicking.org/blog/2019/01/overengaged-knowledge-worker.html&quot;&gt;The Over-engaged Knowledge Worker&lt;/a&gt;) relates to this tension.&lt;/li&gt;
&lt;li&gt;… and yet a “problem” isn’t enough to get someone to do something either.&lt;/li&gt;
&lt;li&gt;If someone is consciously &lt;em&gt;and specifically&lt;/em&gt; doing some task, then there’s an opportunity.&lt;/li&gt;
&lt;li&gt;Creating wholistic solutions is unwelcome, unintuitively each thing that adds to the size of a solution &lt;em&gt;diminishes&lt;/em&gt; from the breadth of problems the solution can solve.&lt;/li&gt;
&lt;li&gt;… and yet, abstract solutions without any clear suggestion of what they solve aren’t great either!&lt;/li&gt;
&lt;li&gt;Figuring out how to package functionality is a big deal.&lt;/li&gt;
&lt;li&gt;Approaches that increase the density of information or choices are themselves somewhat burdensome.&lt;/li&gt;
&lt;li&gt;… and yet context-sensitive approaches are unpredictable and distracting compared to consistent (if dense) functionality.&lt;/li&gt;
&lt;li&gt;I still believe there’s a wealth of material in the &lt;em&gt;content&lt;/em&gt; of the pages people encounter. But it’s irregular and hard to understand, it takes concerted and long-term effort to do something here.&lt;/li&gt;
&lt;li&gt;Lots of the easy stuff, the roads well traveled, are still hard for a lot of people. Maybe this can be fixed by optimizing current &lt;span class=&quot;caps&quot;&gt;UI&lt;/span&gt;… but I think there’s still room for novel improvements to old ideas.&lt;/li&gt;
&lt;li&gt;User research is a really great place to start, but it’s not very prescriptive. It’s mostly problem-finding, not solution-finding.&lt;/li&gt;
&lt;li&gt;There’s some kinds of user research I wish I had access to, specifically really low level analysis of behavior. What’s in someone’s mind when they open a new tab, or reuse one? In what order do they scan the &lt;span class=&quot;caps&quot;&gt;UI&lt;/span&gt;? What are mental models of a &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;, of pages and how they change, in what order to people compose (mentally and physically) things they want to share… it feels like it can go on forever, and there would be a ton of detail in the results, but given all the other constraints these insights feel important.&lt;/li&gt;
&lt;li&gt;There’s so many variables in an experiment, that it’s hard to know what failures really means. Every experiment that offers a novel experience involves several choices, and any one choice can cause the experiment to fail.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;As Test Pilot comes to an end, I do find myself asking: is there room for qualitative improvements in desktop browser &lt;span class=&quot;caps&quot;&gt;UI&lt;/span&gt;? Desktop computing is waning. User expectations of a browser are calcified. The only time people make a choice is when something breaks, and the only way to win is to not break anything and hope you competitor &lt;em&gt;does&lt;/em&gt; break things.&lt;/p&gt;
&lt;p&gt;So, is there room for improvement? Of course there is! The millions of hours spent every day in Firefox alone… &lt;em&gt;this is actually important&lt;/em&gt;. Yes, a lot of things are at a local maximum, and we can A/B test little tweaks to get some suboptimal parts to &lt;em&gt;their&lt;/em&gt; local maximum. But I do not believe in any way that the browsers we know are the optimal container. The web is bigger than browsers, bigger than desktop or mobile or &lt;span class=&quot;caps&quot;&gt;VR&lt;/span&gt;, and a user agent can do unique things beyond any site or app.&lt;/p&gt;
&lt;p&gt;And yet…&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 20:04:20 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.ianbicking.org/blog/2019/03/firefox-experiments-i-would-have-liked.html</dc:identifier>
</item>
<item>
<title>Google Moves to Address Wage Equity, and Finds It’s Underpaying Many Men</title>
<link>https://www.nytimes.com/2019/03/04/technology/google-gender-pay-gap.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/03/04/technology/google-gender-pay-gap.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;SAN FRANCISCO — When Google conducted a study recently to determine whether the company was underpaying women and members of minority groups, it found, to the surprise of just about everyone, that men were paid less money than women for doing similar work.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The study, which disproportionately led to pay raises for thousands of men, is done every year, but the latest findings arrived as Google and other companies in Silicon Valley face increasing pressure to deal with gender issues in the workplace, from sexual harassment to wage discrimination.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Gender inequality is a radioactive topic at Google. The &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.theverge.com/2017/4/8/15229688/department-of-labor-google-gender-pay-gap&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Labor Department is investigating&lt;/a&gt; whether the company systematically underpays women. It has been sued by former employees who claim they were paid less than men with the same qualifications. And last fall, thousands of Google employees protested the way the company handles sexual harassment claims against top executives.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Critics said the results of the pay study could give a false impression. Company officials acknowledged that it did not address whether women were hired at a lower pay grade than men with similar qualifications.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Google seems to be advancing a “flawed and incomplete sense of equality” by making sure men and women receive similar salaries for similar work, said Joelle Emerson, chief executive of Paradigm, a consulting company that advises companies on strategies for increasing diversity. That is not the same as addressing “equity,” she said, which would involve examining the structural hurdles that women face as engineers.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Google has denied paying women less, and the company agreed that compensation among similar job titles was not by itself a complete measure of equity. A more difficult issue to solve — one that critics say Google often mismanages for women — is a human resources concept called leveling. Are employees assigned to the appropriate pay grade for their qualifications?&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The company said it was now trying to address the issue.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“Because leveling, performance ratings and promotion impact pay, this year we are undertaking a comprehensive review of these processes to make sure the outcomes are fair and equitable for all employees,” Lauren Barbato, Google’s lead analyst for pay equity, people analytics, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.blog.google/inside-google/company-announcements/ensuring-we-pay-fairly-and-equitably/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;wrote in a blog post&lt;/a&gt; made public on Monday.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;To set an employee’s salary, Google starts with an algorithm using factors like performance, location and job. Next, managers can consider subjective factors: Do they believe the employee has a strong future with the company? Is he or she being paid on a par with peers who make similar contributions? Managers must provide a rationale for the decision.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;While the pay bump is helpful, Google’s critics say it doesn’t come close to matching what a woman would make if she had been assigned to the appropriate pay grade in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Kelly Ellis, a former Google engineer and one of the plaintiffs in the gender-pay suit against the company, said in a legal filing that Google had hired her in 2010 as a Level 3 employee — the category for new software engineers who are recent college graduates — despite her four years of experience. Within a few weeks, a male engineer who had also graduated from college four years earlier was hired for Ms. Ellis’s team — as a Level 4 employee. That meant he received a higher salary and had more opportunities for bonuses, raises and stock compensation, according to the suit. Other men on the team whose qualifications were equal to or less than hers were also brought in at Level 4, the suit says.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 erfvjey0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2019/03/05/business/05GOOGLEPAY-2/05GOOGLEPAY-2-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2019/03/05/business/05GOOGLEPAY-2/05GOOGLEPAY-2-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2019/03/05/business/05GOOGLEPAY-2/05GOOGLEPAY-2-jumbo.jpg?quality=90&amp;amp;auto=webp 1024w,https://static01.nyt.com/images/2019/03/05/business/05GOOGLEPAY-2/05GOOGLEPAY-2-superJumbo.jpg?quality=90&amp;amp;auto=webp 2048w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2019/03/05/business/05GOOGLEPAY-2/05GOOGLEPAY-2-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-8i9d0s e13ogyst0&quot;&gt;Sundar Pichai, Google’s chief executive, at the opening of a new company office in Berlin in January.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Tobias Schwarz/Agence France-Presse — Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The claim could become a &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2017/09/14/technology/google-gender-pay-lawsuit.html?module=inline&quot; title=&quot;&quot;&gt;class-action suit representing more than 8,300 current and former female employees&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The pay study covered 91 percent of Google’s employees and compared their compensation — salaries, bonuses and company stock — within specific job types, job levels, performance and location.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;It was not possible to compare how racial minorities fared in terms of wage adjustments, Google said, because the United States is the only place where the global company tracks workers’ racial backgrounds.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In response to the study, Google gave $9.7 million in additional compensation to 10,677 employees for this year. Men account for about 69 percent of the company’s work force, but they received a higher percentage of the money. The exact number of men who got raises is unclear.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The company has done the study every year since 2012. At the end of 2017, it adjusted 228 employees’ salaries by a combined total of about $270,000. This year, new hires were included in the analysis for the first time, which Google said probably explained the big change in numbers.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Google’s work force, especially in leadership and high-paying technical roles, is overwhelmingly male and mostly white and Asian. Its efforts to increase diversity has touched off &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/03/09/technology/google-diversity-lawsuits.html?module=inline&quot; title=&quot;&quot;&gt;an internal culture war&lt;/a&gt;. In 2017, James Damore, a software engineer, wrote a widely circulated memo criticizing the company’s diversity programs. He argued that biological differences and not a lack of opportunity explained the shortage of women in upper-tier positions.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;When Google fired Mr. Damore, conservatives argued that the company was dominated by people with liberal political and social views. Mr. Damore &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/01/08/technology/google-memo-discrimination-lawsuit.html?module=inline&quot; title=&quot;&quot;&gt;sued&lt;/a&gt; Google, claiming it is biased against white men with conservative views. The matter has been moved to private arbitration. Its status is unclear.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Google’s parent company, Alphabet, said it had 98,771 employees at the end of 2018. The company declined to provide the number of Google employees, but Google is by far the largest part of the company.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Google informed employees about the findings of its latest pay study in January at a meeting called to discuss a memo about cost-cutting proposals that had been leaked publicly. The proposals, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.bloomberg.com/news/articles/2019-01-26/google-memo-on-cost-cuts-sparks-heated-debate-inside-company&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;reported earlier by Bloomberg&lt;/a&gt;, caused an uproar because they included ideas like slowing the pace at which Google promotes workers and eliminating some of its famous perks.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;At the meeting, Sundar Pichai, Google’s chief executive, played down the proposals as the product of brainstorming by members of the human resources staff and not things that senior managers were seriously considering, according to a video viewed by The New York Times.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But in an effort to demonstrate that Google was not skimping on wages, executives said at the meeting that the company had adjusted the pay of more employees than ever before. Ms. Barbato, who presented the findings, said that more men were underpaid was a “surprising trend that we didn’t expect.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 04 Mar 2019 17:27:18 +0000</pubDate>
<dc:creator>gatsby</dc:creator>
<og:url>https://www.nytimes.com/2019/03/04/technology/google-gender-pay-gap.html</og:url>
<og:type>article</og:type>
<og:title>Google Moves to Address Wage Equity, and Finds It’s Underpaying Many Men</og:title>
<og:image>https://static01.nyt.com/images/2019/03/05/business/05GOOGLEPAY-1/05GOOGLEPAY-1-facebookJumbo.jpg</og:image>
<og:description>After a recent study, the company gave raises to thousands of men after determining they were earning less than women in similar jobs.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/03/04/technology/google-gender-pay-gap.html</dc:identifier>
</item>
<item>
<title>Let’s Destroy Robocalls</title>
<link>https://www.nytimes.com/2019/03/01/opinion/robocall-scams.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/03/01/opinion/robocall-scams.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Congress may have found an issue that all Americans can rally around.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Stopping robocalls.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;All right — a little depressing that it can’t be world peace or affordable health care. But let’s take what we can get. If our elected officials could join hands and lead us into a world where phones are no longer an instrument of torture, maybe it’d give them enough confidence to march forward and, um, fund some bridge repair.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Everybody has always hated telemarketers, particularly the ones trying to sell some shady product. And now the miracles of technology let them follow you around all day. When I’m home, I feel as if I spend half my time blocking robocalls on our landline. Yet somehow a different number always pops up, with great news about opportunities to reinsure my nonexistent car at low prices or acquire a cost-free knee brace.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The knee brace thing is &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.cnbc.com/2017/10/27/beware-of-scammers-using-medicare-to-defraud-you.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;a scam&lt;/a&gt; to get money out of Medicare, but in order to figure that out you’d have to engage in conversation. People, do not ever talk on the phone with a stranger wielding free knee braces. This can be a life rule.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Things are at least as bad on mobile phones, which were the lucky recipients of &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.prnewswire.com/news-releases/nearly-48-billion-robocalls-made-in-2018-according-to-youmail-robocall-index-300782638.html&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;48 billion robocalls in the United States&lt;/a&gt; alone last year.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Congress has been trying to control the problem at least since 1991, when it passed the Telephone Consumer Protection Act. Remember 1991? “Dances With Wolves” won the Oscar for best picture. The Dow closed the year at 3,168. The point I’m trying to make is that it’s been a while.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;At the time the big problem was mainly telemarketers — actual people who dialed your actual number and tried to talk you into buying something. Under the T.C.P.A. you could put your name on a national “do not call” list. Some observers did worry about the part of the plan that required the list be maintained by the telemarketers themselves.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Whoops. In 2003 Congress gave the job to the Federal Trade Commission. Then-President George W. Bush signed the bill into law, rejoicing that from then on, when parents were reading to their children at night, they’d no longer be interrupted by “a stranger with a sales pitch.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Then robocalls really took over the world, and one person on the other side of the planet could push a few buttons and disrupt “Goodnight Moon” from coast to coast.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The F.T.C. kept saying it could take care of the problem. (“… you can count on us …”) Then the Federal Communications Commission created the Robocall Strike Force in 2016. Great name! Mediocre results.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;So here we are, tortured phone owners one and all. Perhaps, like me, you’ve accidentally blocked some of your friends without successfully getting rid of the woman with the free knee brace. Perhaps you were like Dr. Gary Pess, a hand surgeon who &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/05/06/your-money/robocalls-rise-illegal.html?module=inline&quot; title=&quot;&quot;&gt;told The Times’s Tara Siegel Bernard&lt;/a&gt; that he stopped answering any calls when he didn’t recognize the number and then discovered one of them was about a person with a severed thumb.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But good news! We’re getting some action. I know “Congress is working on a bill” is not as encouraging as, say, “Let me pour you a drink and change the subject.” But still.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In the House, Representative Frank Pallone of New Jersey has a proposal called Stopping Bad Robocalls, which certainly gets to the point. Pallone is the chairman of the Committee on Energy and Commerce and it’s fair to say he has a healthy chance of getting something done.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Things are more problematic in the Senate, which, as you may have noticed, is barely capable of getting its act together long enough to salute the flag. However, Democratic Senator Ed Markey of Massachusetts — the man who helped give us that Telephone Consumer Protection Act in 1991 — has teamed up with Republican Senator John Thune of South Dakota to sponsor a bipartisan plan. It’s called the Telephone Robocall Abuse Criminal Enforcement and Deterrence Act, which I certainly hope you noticed spells out Traced. (Or, O.K., Traceda if you wanted to be really technical.)&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The bill, Markey says, is “a perfect example” of lawmakers from opposite sides of the aisle getting together and “agreeing we don’t want our wireless devices in our pocket to be called by total strangers 10, 15 times a day.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Pretty low bar, yes? Perhaps someday we will see a liberal from California and a conservative from Arkansas get together to fight against people who throw beer bottles out of their car window when they’re in the passing lane on the highway.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But let’s not be cynical. Markey says, “If this bill can’t pass then no bill can pass,” and he’s probably right. You need to root him on, given that the other option is falling back in your chair and moaning, “No bill can pass.” Come on.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The idea is to make telephone companies try much harder to identify and block slimy robocalls. And to bring enforcement groups together to find new ways to prosecute the scammers. I know it doesn’t sound all that dramatic, but if you want people to stop calling you every day with offers to repay your student loans, it’s a better strategy than repeatedly screaming “I graduated in 1980!” into the phone.&lt;/p&gt;
&lt;p class=&quot;css-1psfkbx etfikam0&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Follow The New York Times Opinion section on&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.facebook.com/nytopinion&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Facebook&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;,&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://twitter.com/NYTOpinion&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Twitter (@NYTopinion)&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;and&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.instagram.com/nytopinion/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Instagram&lt;/em&gt;&lt;/a&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 04 Mar 2019 17:16:41 +0000</pubDate>
<dc:creator>howard941</dc:creator>
<og:url>https://www.nytimes.com/2019/03/01/opinion/robocall-scams.html</og:url>
<og:type>article</og:type>
<og:title>Opinion | Let’s Destroy Robocalls</og:title>
<og:image>https://static01.nyt.com/images/2019/03/01/opinion/01collinsWeb/01collinsWeb-facebookJumbo.jpg</og:image>
<og:description>Finally, something worse than Donald Trump.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/03/01/opinion/robocall-scams.html</dc:identifier>
</item>
<item>
<title>Building Fast Interpreters in Rust</title>
<link>https://blog.cloudflare.com/building-fast-interpreters-in-rust/</link>
<guid isPermaLink="true" >https://blog.cloudflare.com/building-fast-interpreters-in-rust/</guid>
<description>&lt;p&gt;In the &lt;a href=&quot;https://blog.cloudflare.com/how-we-made-firewall-rules/&quot;&gt;previous post&lt;/a&gt; we described the Firewall Rules architecture and how the different components are integrated together. We also mentioned that we created a configurable Rust library for writing and executing &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt;®-like filters in different parts of our stack written in Go, Lua, C, C++ and JavaScript Workers.&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;With a mixed set of requirements of performance, memory safety, low memory use, and the capability to be part of other products that we’re working on like Spectrum, Rust stood out as the strongest option.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/Y8Y9EP29sqJL8Sk6At1r_LIIjpAss1M_do2XaevXMH09FSX2VGk3YeVfHKvsMjT58PbklDw2W__C_7TrR24VKE0qtQ1llo_ZIQjJQC8EmOIrhRPLRJlB7qR0jSGAWsuYxChf7apl&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;We have now open-sourced this library under our Github account: &lt;a href=&quot;https://github.com/cloudflare/wirefilter&quot;&gt;https://github.com/cloudflare/wirefilter&lt;/a&gt;. This post will dive into its design, explain why we didn’t use a parser generator and how our execution engine balances security, runtime performance and compilation cost for the generated filters.&lt;/p&gt;
&lt;h2 id=&quot;parsing-wireshark-syntax&quot;&gt;Parsing Wireshark syntax&lt;/h2&gt;
&lt;p&gt;When building a custom Domain Specific Language (DSL), the first thing we need to be able to do is parse it. This should result in an intermediate representation (usually called an Abstract Syntax Tree) that can be inspected, traversed, analysed and, potentially, serialised.&lt;/p&gt;
&lt;p&gt;There are different ways to perform such conversion, such as:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Manual char-by-char parsing using state machines, regular expression and/or native string APIs.&lt;/li&gt;
&lt;li&gt;Parser combinators, which use higher-level functions to combine different parsers together (in Rust-land these are represented by &lt;a href=&quot;https://github.com/Geal/nom&quot;&gt;nom&lt;/a&gt;, &lt;a href=&quot;https://github.com/m4rw3r/chomp&quot;&gt;chomp&lt;/a&gt;, &lt;a href=&quot;https://github.com/Marwes/combine&quot;&gt;combine&lt;/a&gt; and &lt;a href=&quot;https://crates.io/keywords/parser-combinators&quot;&gt;others&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fully automated generators which, provided with a grammar, can generate a fully working parser for you (examples are &lt;a href=&quot;https://github.com/kevinmehall/rust-peg&quot;&gt;peg&lt;/a&gt;, &lt;a href=&quot;https://github.com/pest-parser/pest&quot;&gt;pest&lt;/a&gt;, &lt;a href=&quot;https://github.com/lalrpop/lalrpop&quot;&gt;LALRPOP&lt;/a&gt;, etc.).&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;wireshark-syntax&quot;&gt;Wireshark syntax&lt;/h3&gt;
&lt;p&gt;But before trying to figure out which approach would work best for us, let’s take a look at some of the simple &lt;a href=&quot;https://wiki.wireshark.org/DisplayFilters&quot;&gt;official Wireshark examples&lt;/a&gt;, to understand what we’re dealing with:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ip.len le 1500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;udp contains 81:60:03&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sip.To contains &quot;a1762&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.request.uri matches &quot;gl=se$&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eth.dst == ff:ff:ff:ff:ff:ff&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ip.addr == 192.168.0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipv6.addr == ::1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can see that the right hand side of a comparison can be a number, an IPv4 / IPv6 address, a set of bytes or a string. They are used interchangeably, without any special notion of a type, which is fine given that they are easily distinguishable… or are they?&lt;/p&gt;
&lt;p&gt;Let’s take a look at some &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6#Address_representation&quot;&gt;IPv6 forms&lt;/a&gt; on Wikipedia:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;2001:0db8:0000:0000:0000:ff00:0042:8329&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2001:db8:0:0:0:ff00:42:8329&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2001:db8::ff00:42:8329&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So IPv6 can be written as a set of up to 8 colon-separated hexadecimal numbers, each containing up to 4 digits with leading zeros omitted for convenience. This appears suspiciously similar to the syntax for byte sequences. Indeed, if we try writing out a sequence like &lt;code&gt;2f:31:32:33:34:35:36:37&lt;/code&gt;, it’s simultaneously a valid IPv6 and a byte sequence in terms of Wireshark syntax.&lt;/p&gt;
&lt;p&gt;There is no way of telling what this sequence actually represents without looking at the type of the field it’s being compared with, and if you try using this sequence in Wireshark, you’ll notice that it does just that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ipv6.addr == 2f:31:32:33:34:35:36:37&lt;/code&gt;: right hand side is parsed and used as an IPv6 address&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.request.uri == 2f:31:32:33:34:35:36:37&lt;/code&gt;: right hand side is parsed and used as a byte sequence (will match a URL &lt;code&gt;&quot;/1234567&quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Are there other examples of such ambiguities? Yup - for example, we can try using a single number with two decimal digits:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;tcp.port == 80&lt;/code&gt;: matches any traffic on the port 80 (HTTP)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http.file_data == 80&lt;/code&gt;: matches any HTTP request/response with body containing a single byte (0x80)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We could also do the same with ethernet address, defined as a separate type in Wireshark, but, for simplicity, we represent it as a regular byte sequence in our implementation, so there is no ambiguity here.&lt;/p&gt;
&lt;h3 id=&quot;choosing-a-parsing-approach&quot;&gt;Choosing a parsing approach&lt;/h3&gt;
&lt;p&gt;This is an interesting syntax design decision. It means that we need to store a mapping between field names and types ahead of time - a Scheme, as we call it - and use it for contextual parsing. This restriction also immediately rules out many if not most parser generators.&lt;/p&gt;
&lt;p&gt;We could still use one of the more sophisticated ones (like LALRPOP) that allow replacing the default regex-based lexer with your own custom code, but at that point we’re so close to having a full parser for our DSL that the complexity outweighs any benefits of using a black-box parser generator.&lt;/p&gt;
&lt;p&gt;Instead, we went with a manual parsing approach. While (for a good reason) this might sound scary in unsafe languages like C / C++, in Rust all strings are bounds checked by default. Rust also provides a rich string manipulation API, which we can use to build more complex helpers, eventually ending up with a full parser.&lt;/p&gt;
&lt;p&gt;This approach is, in fact, pretty similar to parser combinators in that the parser doesn’t have to keep state and only passes the unprocessed part of the input down to smaller, narrower scoped functions. Just as in parser combinators, the absence of mutable state also allows to easily test and maintain each of the parsers for different parts of the syntax independently of the others.&lt;/p&gt;
&lt;p&gt;Compared with popular parser combinator libraries in Rust, one of the differences is that our parsers are not standalone functions but rather types that implement common traits:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;pub trait Lex&amp;lt;'i&amp;gt;: Sized {
   fn lex(input: &amp;amp;'i str) -&amp;gt; LexResult&amp;lt;'i, Self&amp;gt;;
}
pub trait LexWith&amp;lt;'i, E&amp;gt;: Sized {
   fn lex_with(input: &amp;amp;'i str, extra: E) -&amp;gt; LexResult&amp;lt;'i, Self&amp;gt;;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;lex&lt;/code&gt; method or its contextual variant &lt;code&gt;lex_with&lt;/code&gt; can either return a successful pair of &lt;code&gt;(instance of the type, rest of input)&lt;/code&gt; or a pair of &lt;code&gt;(error kind, relevant input span)&lt;/code&gt;.&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/CobJy0tYtIKcdjyStyBikBfZbUW2_CmhqnSiaqnFRS9ce3FymaVnKMUJJKXeyPWGgwwPAiEPt4uu5RQ_fon7qDMRYD06IdyRG6U3iDYjQu__is3DNKlcXX4DG5uyij4pr1plELpG&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;The &lt;code&gt;Lex&lt;/code&gt; trait is used for target types that can be parsed independently of the context (like field names or literals), while &lt;code&gt;LexWith&lt;/code&gt; is used for types that need a &lt;code&gt;Scheme&lt;/code&gt; or a part of it to be parsed unambiguously.&lt;/p&gt;
&lt;p&gt;A bigger difference is that, instead of relying on higher-level functions for parser combinators, we use the usual imperative function call syntax. For example, when we want to perform sequential parsing, all we do is call several parsers in a row, using tuple destructuring for intermediate results:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let input = skip_space(input);
let (op, input) = CombinedExpr::lex_with(input, scheme)?;
let input = skip_space(input);
let input = expect(input, &quot;)&quot;)?;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And, when we want to try different alternatives, we can use native pattern matching and ignore the errors:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;if let Ok(input) = expect(input, &quot;(&quot;) {
   ...
   (SimpleExpr::Parenthesized(Box::new(op)), input)
} else if let Ok((op, input)) = UnaryOp::lex(input) {
   ...
} else {
   ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, when we want to automate parsing of some more complicated common cases - say, enums - Rust provides a powerful macro syntax:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;lex_enum!(#[repr(u8)] OrderingOp {
   &quot;eq&quot; | &quot;==&quot; =&amp;gt; Equal = EQUAL,
   &quot;ne&quot; | &quot;!=&quot; =&amp;gt; NotEqual = LESS | GREATER,
   &quot;ge&quot; | &quot;&amp;gt;=&quot; =&amp;gt; GreaterThanEqual = GREATER | EQUAL,
   &quot;le&quot; | &quot;&amp;lt;=&quot; =&amp;gt; LessThanEqual = LESS | EQUAL,
   &quot;gt&quot; | &quot;&amp;gt;&quot; =&amp;gt; GreaterThan = GREATER,
   &quot;lt&quot; | &quot;&amp;lt;&quot; =&amp;gt; LessThan = LESS,
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This gives an experience similar to parser generators, while still using native language syntax and keeping us in control of all the implementation details.&lt;/p&gt;
&lt;h2 id=&quot;execution-engine&quot;&gt;Execution engine&lt;/h2&gt;
&lt;p&gt;Because our grammar and operations are fairly simple, initially we used direct AST interpretation by requiring all nodes to implement a trait that includes an &lt;code&gt;execute&lt;/code&gt; method.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;trait Expr&amp;lt;'s&amp;gt; {
    fn execute(&amp;amp;self, ctx: &amp;amp;ExecutionContext&amp;lt;'s&amp;gt;) -&amp;gt; bool;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ExecutionContext&lt;/code&gt; is pretty similar to a &lt;code&gt;Scheme&lt;/code&gt;, but instead of mapping arbitrary field names to their types, it maps them to the runtime input values provided by the caller.&lt;/p&gt;
&lt;p&gt;As with &lt;code&gt;Scheme&lt;/code&gt;, initially &lt;code&gt;ExecutionContext&lt;/code&gt; used an internal &lt;code&gt;HashMap&lt;/code&gt; for registering these arbitrary &lt;code&gt;String&lt;/code&gt; -&amp;gt; &lt;code&gt;RhsValue&lt;/code&gt; mappings. During the &lt;code&gt;execute&lt;/code&gt; call, the AST implementation would evaluate itself recursively, and look up each field reference in this map, either returning a value or raising an error on missing slots and type mismatches.&lt;/p&gt;
&lt;p&gt;This worked well enough for an initial implementation, but using a &lt;code&gt;HashMap&lt;/code&gt; has a non-trivial cost which we would like to eliminate. We already used a more efficient hasher - &lt;code&gt;&lt;a href=&quot;https://github.com/servo/rust-fnv&quot;&gt;Fnv&lt;/a&gt;&lt;/code&gt; - because we are in control of all keys and so are not worried about hash DoS attacks, but there was still more we could do.&lt;/p&gt;
&lt;h3 id=&quot;speeding-up-field-access&quot;&gt;Speeding up field access&lt;/h3&gt;
&lt;p&gt;If we look at the data structures involved, we can see that the scheme is always well-defined in advance, and all our runtime values in the execution engine are expected to eventually match it, even if the order or a precise set of fields is not guaranteed:&lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/VzpLFLmR8eDHSde6iZ2g6MaO9qhQZcvMu8xdAQlZ4kEtZqnjE0Q-uS_4e1pXeEYaDR-jP-fd8gdB6Ug1w_UX9Y2wQq1dOrqKYoZSPSuyRnhb3oal3eH0p8wyKrRKKsXMdkMRhYCb&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;So what if we ditch the second map altogether and instead use a fixed-size array of values? Array indexing should be much cheaper than looking up in a map, so it might be well worth the effort.&lt;/p&gt;
&lt;p&gt;How can we do it? We already know the number of items (thanks to the predefined scheme) so we can use that for the size of the backing storage, and, in order to simulate &lt;code&gt;HashMap&lt;/code&gt; “holes” for unset values, we can wrap each item an &lt;code&gt;Option&amp;lt;...&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;pub struct ExecutionContext&amp;lt;'e&amp;gt; {
    scheme: &amp;amp;'e Scheme,
    values: Box&amp;lt;[Option&amp;lt;LhsValue&amp;lt;'e&amp;gt;&amp;gt;]&amp;gt;,
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The only missing piece is an index that could map both structures to each other. As you might remember, &lt;code&gt;Scheme&lt;/code&gt; still uses a &lt;code&gt;HashMap&lt;/code&gt; for field registration, and a &lt;code&gt;HashMap&lt;/code&gt; is normally expected to be randomised and indexed only by the predefined key.&lt;/p&gt;
&lt;p&gt;While we could wrap a value and an auto-incrementing index together into a custom struct, there is already a better solution: &lt;code&gt;&lt;a href=&quot;https://github.com/bluss/indexmap&quot;&gt;IndexMap&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;IndexMap&lt;/code&gt; is a drop-in replacement for a &lt;code&gt;HashMap&lt;/code&gt; that preserves ordering and provides a way to get an index of any element and vice versa - exactly what we needed.&lt;/p&gt;
&lt;p&gt;After replacing a &lt;code&gt;HashMap&lt;/code&gt; in the Scheme with &lt;code&gt;IndexMap&lt;/code&gt;, we can change parsing to resolve all the parsed field names to their indices in-place and store that in the AST:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl&amp;lt;'i, 's&amp;gt; LexWith&amp;lt;'i, &amp;amp;'s Scheme&amp;gt; for Field&amp;lt;'s&amp;gt; {
   fn lex_with(mut input: &amp;amp;'i str, scheme: &amp;amp;'s Scheme) -&amp;gt; LexResult&amp;lt;'i, Self&amp;gt; {
       ...
       let field = scheme
           .get_field_index(name)
           .map_err(|err| (LexErrorKind::UnknownField(err), name))?;
       Ok((field, input))
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After that, in the &lt;code&gt;ExecutionContext&lt;/code&gt; we allocate a fixed-size array and use these indices for resolving values during runtime:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl&amp;lt;'e&amp;gt; ExecutionContext&amp;lt;'e&amp;gt; {
   /// Creates an execution context associated with a given scheme.
   ///
   /// This scheme will be used for resolving any field names and indices.
   pub fn new&amp;lt;'s: 'e&amp;gt;(scheme: &amp;amp;'s Scheme) -&amp;gt; Self {
       ExecutionContext {
           scheme,
           values: vec![None; scheme.get_field_count()].into(),
       }
   }
   ...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This gave significant (~2x) speed ups on our standard benchmarks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Before:&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;
&lt;code&gt;test matching ... bench:       2,548 ns/iter (+/- 98)
test parsing  ... bench:     192,037 ns/iter (+/- 21,538)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;After&lt;strong&gt;:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;test matching ... bench:       1,227 ns/iter (+/- 29)
test parsing  ... bench:     197,574 ns/iter (+/- 16,568)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This change also improved the usability of our API, as any type errors are now detected and reported much earlier, when the values are just being set on the context, and not delayed until filter execution.&lt;/p&gt;
&lt;h3 id=&quot;-not-jit-compilation&quot;&gt;[not] JIT compilation&lt;/h3&gt;
&lt;p&gt;Of course, as with any respectable DSL, one of the other ideas we had from the beginning was “...at some point we’ll add native compilation to make everything super-fast, it’s just a matter of time...”.&lt;/p&gt;
&lt;p&gt;In practice, however, native compilation is a complicated matter, but not due to lack of tools.&lt;/p&gt;
&lt;p&gt;First of all, there is question of storage for the native code. We could compile each filter statically into some sort of a library and publish to a key-value store, but that would not be easy to maintain:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We would have to compile each filter to several platforms (x86-64, ARM, WASM, …).&lt;/li&gt;
&lt;li&gt;The overhead of native library formats would significantly outweigh the useful executable size, as most filters tend to be small.&lt;/li&gt;
&lt;li&gt;Each time we’d like to change our execution logic, whether to optimise it or to fix a bug, we would have to recompile and republish all the previously stored filters.&lt;/li&gt;
&lt;li&gt;Finally, even if/though we’re sure of the reliability of the chosen store, executing dynamically retrieved native code on the edge as-is is not something that can be taken lightly.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The usual flexible alternative that addresses most of these issues is Just-in-Time (JIT) compilation.&lt;/p&gt;
&lt;p&gt;When you compile code directly on the target machine, you get to re-verify the input (still expressed as a restricted DSL), you can compile it just for the current platform in-place, and you never need to republish the actual rules.&lt;/p&gt;
&lt;p&gt;Looks like a perfect fit? Not quite. As with any technology, there are tradeoffs, and you only get to choose those that make more sense for your use cases. JIT compilation is no exception.&lt;/p&gt;
&lt;p&gt;First of all, even though you’re not loading untrusted code over the network, you still need to generate it into the memory, mark that memory as executable and trust that it will always contain valid code and not garbage or something worse. Depending on your choice of libraries and complexity of the DSL, you might be willing to trust it or put heavy sandboxing around, but, either way, it’s a risk that one must explicitly be willing to take.&lt;/p&gt;
&lt;p&gt;Another issue is the cost of compilation itself. Usually, when measuring the speed of native code vs interpretation, the cost of compilation is not taken into the account because it happens out of the process.&lt;/p&gt;
&lt;p&gt;With JIT compilers though, it’s different as you’re now compiling things the moment they’re used and cache the native code only for a limited time. Turns out, generating native code can be rather expensive, so you must be absolutely sure that the compilation cost doesn’t offset any benefits you might gain from the native execution speedup.&lt;/p&gt;
&lt;p&gt;I’ve talked a bit more about this at &lt;a href=&quot;https://www.meetup.com/rust-atx/&quot;&gt;Rust Austin meetup&lt;/a&gt; and, I believe, this topic deserves a separate blog post so won’t go into much more details here, but feel free to check out the slides: &lt;a href=&quot;https://www.slideshare.net/RReverser/building-fast-interpreters-in-rust&quot;&gt;https://www.slideshare.net/RReverser/building-fast-interpreters-in-rust&lt;/a&gt;. Oh, and if you’re in Austin, you should pop into our office for the next meetup!&lt;/p&gt;
&lt;p&gt;Let’s get back to our original question: is there anything else we can do to get the best balance between security, runtime performance and compilation cost? Turns out, there is.&lt;/p&gt;
&lt;h4 id=&quot;dynamic-dispatch-and-closures-to-the-rescue&quot;&gt;Dynamic dispatch and closures to the rescue&lt;/h4&gt;
&lt;p&gt;Introducing &lt;code&gt;Fn&lt;/code&gt; trait!&lt;/p&gt;
&lt;p&gt;In Rust, the &lt;code&gt;Fn&lt;/code&gt; trait and friends (&lt;code&gt;FnMut&lt;/code&gt;, &lt;code&gt;FnOnce&lt;/code&gt;) are automatically implemented on eligible functions and closures. In case of a simple &lt;code&gt;Fn&lt;/code&gt; case the restriction is that they must not modify their captured environment and can only borrow from it.&lt;/p&gt;
&lt;p&gt;Normally, you would want to use it in generic contexts to support arbitrary callbacks with given argument and return types. This is important because in Rust, each function and closure implements a unique type and any generic usage would compile down to a specific call just to that function.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn just_call(me: impl Fn(), maybe: bool) {
  if maybe {
    me()
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Such behaviour (called static dispatch) is the default in Rust and is preferable for performance reasons.&lt;/p&gt;
&lt;p&gt;However, if we don’t know all the possible types at compile-time, Rust allows us to opt-in for a dynamic dispatch instead:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn just_call(me: &amp;amp;dyn Fn(), maybe: bool) {
  if maybe {
    me()
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Dynamically dispatched objects don't have a statically known size, because it depends on the implementation details of particular type being passed. They need to be passed as a reference or stored in a heap-allocated &lt;code&gt;Box&lt;/code&gt;, and then used just like in a generic implementation.&lt;/p&gt;
&lt;p&gt;In our case, this allows to create, return and store arbitrary closures, and later call them as regular functions:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;trait Expr&amp;lt;'s&amp;gt; {
    fn compile(self) -&amp;gt; CompiledExpr&amp;lt;'s&amp;gt;;
}

pub(crate) struct CompiledExpr&amp;lt;'s&amp;gt;(Box&amp;lt;dyn 's + Fn(&amp;amp;ExecutionContext&amp;lt;'s&amp;gt;) -&amp;gt; bool&amp;gt;);

impl&amp;lt;'s&amp;gt; CompiledExpr&amp;lt;'s&amp;gt; {
   /// Creates a compiled expression IR from a generic closure.
   pub(crate) fn new(closure: impl 's + Fn(&amp;amp;ExecutionContext&amp;lt;'s&amp;gt;) -&amp;gt; bool) -&amp;gt; Self {
       CompiledExpr(Box::new(closure))
   }

   /// Executes a filter against a provided context with values.
   pub fn execute(&amp;amp;self, ctx: &amp;amp;ExecutionContext&amp;lt;'s&amp;gt;) -&amp;gt; bool {
       self.0(ctx)
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The closure (an &lt;code&gt;Fn&lt;/code&gt; box) will also automatically include the environment data it needs for the execution.&lt;/p&gt;
&lt;img src=&quot;https://lh6.googleusercontent.com/dGo1Kg0FOu5hnfsoPBWtmFgFDr2NjXQsSneGdCkoSlcU56WQfkvHiocsExoGhtbNLCZMttbkJKlK6vIWt0cmLdSBaFiJWobQxAmwR5Rw-HyRIMG3-GnZh4XP5DDTkKntbbWEMtg8&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;This means that we can optimise the runtime data representation as part of the “compile” process without changing the AST or the parser. For example, when we wanted to optimise IP range checks by splitting them for different IP types, we could do that without having to modify any existing structures:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;RhsValues::Ip(ranges) =&amp;gt; {
   let mut v4 = Vec::new();
   let mut v6 = Vec::new();
   for range in ranges {
       match range.clone().into() {
           ExplicitIpRange::V4(range) =&amp;gt; v4.push(range),
           ExplicitIpRange::V6(range) =&amp;gt; v6.push(range),
       }
   }
   let v4 = RangeSet::from(v4);
   let v6 = RangeSet::from(v6);
   CompiledExpr::new(move |ctx| {
       match cast!(ctx.get_field_value_unchecked(field), Ip) {
           IpAddr::V4(addr) =&amp;gt; v4.contains(addr),
           IpAddr::V6(addr) =&amp;gt; v6.contains(addr),
       }
   })
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Moreover, boxed closures can be part of that captured environment, too. This means that we can convert each simple comparison into a closure, and then combine it with other closures, and keep going until we end up with a single top-level closure that can be invoked as a regular function to evaluate the entire filter expression.&lt;/p&gt;
&lt;p&gt;It’s &lt;s&gt;turtles&lt;/s&gt; closures all the way down:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let items = items
   .into_iter()
   .map(|item| item.compile())
   .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()
   .into_boxed_slice();

match op {
   CombiningOp::And =&amp;gt; {
       CompiledExpr::new(move |ctx| items.iter().all(|item| item.execute(ctx)))
   }
   CombiningOp::Or =&amp;gt; {
       CompiledExpr::new(move |ctx| items.iter().any(|item| item.execute(ctx)))
   }
   CombiningOp::Xor =&amp;gt; CompiledExpr::new(move |ctx| {
       items
           .iter()
           .fold(false, |acc, item| acc ^ item.execute(ctx))
   }),
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What’s nice about this approach is:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Our execution is no longer tied to the AST, and we can be as flexible with optimising the implementation and data representation as we want without affecting the parser-related parts of code or output format.&lt;/li&gt;
&lt;li&gt;Even though we initially “compile” each node to a single closure, in future we can pretty easily specialise certain combinations of expressions into their own closures and so improve execution speed for common cases. All that would be required is a separate &lt;code&gt;match&lt;/code&gt; branch returning a closure optimised for just that case.&lt;/li&gt;
&lt;li&gt;Compilation is very cheap compared to real code generation. While it might seem that allocating many small objects (one &lt;code&gt;Box&lt;/code&gt;ed closure per expression) is not very efficient and that it would be better to replace it with some sort of a memory pool, in practice we saw a negligible performance impact.&lt;/li&gt;
&lt;li&gt;No native code is generated at runtime, which means that we execute only code that was statically verified by Rust at compile-time and compiled down to a static function. All that we do at the runtime is call existing functions with different values.&lt;/li&gt;
&lt;li&gt;Execution turns out to be faster too. This initially came as a surprise, because dynamic dispatch is widely believed to be costly and we were worried that it would get slightly worse than AST interpretation. However, it showed an immediate ~10-15% runtime improvement in benchmarks and on real examples.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The only obvious downside is that each level of AST requires a separate dynamically-dispatched call instead of a single inlined code for the entire expression, like you would have even with a basic template JIT.&lt;/p&gt;
&lt;p&gt;Unfortunately, such output could be achieved only with real native code generation, and, for our case, the mentioned downsides and risks would outweigh runtime benefits, so we went with the safe &amp;amp; flexible closure approach.&lt;/p&gt;
&lt;h2 id=&quot;bonus-webassembly-support&quot;&gt;Bonus: WebAssembly support&lt;/h2&gt;
&lt;p&gt;As was mentioned earlier, we chose Rust as a safe high-level language that allows easy integration with other parts of our stack written in Go, C and Lua via C FFI. But Rust has one more target it invests in and supports exceptionally well: WebAssembly.&lt;/p&gt;
&lt;p&gt;Why would we be interested in that? Apart from the parts of the stack where our rules would run, and the API that publishes them, we also have users who like to write their own rules. To do that, they use a UI editor that allows either writing raw expressions in Wireshark syntax or as a WYSIWYG builder.&lt;/p&gt;
&lt;p&gt;We thought it would be great to expose the parser - the same one as we use on the backend - to the frontend JavaScript for a consistent real-time editing experience. And, honestly, we were just looking for an excuse to play with WASM support in Rust.&lt;/p&gt;
&lt;p&gt;WebAssembly could be targeted via regular C FFI, but in that case you would need to manually provide all the glue for the JavaScript side to hold and convert strings, arrays and objects forth and back.&lt;/p&gt;
&lt;p&gt;In Rust, this is all handled by &lt;a href=&quot;https://github.com/rustwasm/wasm-bindgen&quot;&gt;wasm-bindgen&lt;/a&gt;. While it provides various attributes and methods for direct conversions, the simplest way to get started is to activate the “serde” feature which will automatically convert types using &lt;code&gt;JSON.parse&lt;/code&gt;, &lt;code&gt;JSON.stringify&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://docs.serde.rs/serde_json/&quot;&gt;serde_json&lt;/a&gt;&lt;/code&gt; under the hood.&lt;/p&gt;
&lt;p&gt;In our case, creating a wrapper for the parser with only 20 lines of code was enough to get started and have all the WASM code + JavaScript glue required:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;#[wasm_bindgen]
pub struct Scheme(wirefilter::Scheme);

fn into_js_error(err: impl std::error::Error) -&amp;gt; JsValue {
   js_sys::Error::new(&amp;amp;err.to_string()).into()
}

#[wasm_bindgen]
impl Scheme {
   #[wasm_bindgen(constructor)]
   pub fn try_from(fields: &amp;amp;JsValue) -&amp;gt; Result&amp;lt;Scheme, JsValue&amp;gt; {
       fields.into_serde().map(Scheme).map_err(into_js_error)
   }

   pub fn parse(&amp;amp;self, s: &amp;amp;str) -&amp;gt; Result&amp;lt;JsValue, JsValue&amp;gt; {
       let filter = self.0.parse(s).map_err(into_js_error)?;
       JsValue::from_serde(&amp;amp;filter).map_err(into_js_error)
   }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And by using a higher-level tool called &lt;a href=&quot;https://github.com/rustwasm/wasm-pack&quot;&gt;wasm-pack&lt;/a&gt;, we also got automated npm package generation and publishing, for free.&lt;/p&gt;
&lt;p&gt;This is not used in the production UI yet because we still need to figure out some details for unsupported browsers, but it’s great to have all the tooling and packages ready with minimal efforts. Extending and reusing the same package, it should be even possible to run filters in Cloudflare Workers too (which &lt;a href=&quot;https://blog.cloudflare.com/webassembly-on-cloudflare-workers/&quot;&gt;also support WebAssembly&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;
&lt;p&gt;The code in the current state is already doing its job well in production and we’re happy to share it with the open-source Rust community.&lt;/p&gt;
&lt;p&gt;This is definitely not the end of the road though - we have many more fields to add, features to implement and planned optimisations to explore. If you find this sort of work interesting and would like to help us by working on firewalls, parsers or just any Rust projects at scale, give us a shout!&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 16:08:17 +0000</pubDate>
<dc:creator>mfrw</dc:creator>
<og:type>article</og:type>
<og:title>Building fast interpreters in Rust</og:title>
<og:description>In the previous post we described the Firewall Rules architecture and how the different components are integrated together. We created a configurable Rust library for writing and executing Wireshark®-like filters in different parts of our stack written in Go, Lua, C, C++ and JavaScript Workers.</og:description>
<og:url>https://blog.cloudflare.com/building-fast-interpreters-in-rust/</og:url>
<og:image>https://blog.cloudflare.com/content/images/2019/02/pasted-image-0.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.cloudflare.com/building-fast-interpreters-in-rust/</dc:identifier>
</item>
<item>
<title>TLDR Stock Options</title>
<link>https://tldroptions.io/</link>
<guid isPermaLink="true" >https://tldroptions.io/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://tldroptions.io/&quot;&gt;https://tldroptions.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19301570&quot;&gt;https://news.ycombinator.com/item?id=19301570&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 325&lt;/p&gt;
&lt;p&gt;# Comments: 151&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 14:40:25 +0000</pubDate>
<dc:creator>vinnyglennon</dc:creator>
<og:url>https://tldroptions.io</og:url>
<og:type>website</og:type>
<og:description>An easy tool to ballpark the value of startup options.</og:description>
<og:title>TLDR Stock Options</og:title>
<og:image>https://tldroptions.io/static/tldroptions.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://tldroptions.io/</dc:identifier>
</item>
<item>
<title>W3C approves WebAuthn as the web standard for password-free logins</title>
<link>https://venturebeat.com/2019/03/04/w3c-approves-webauthn-as-the-web-standard-for-password-free-logins/</link>
<guid isPermaLink="true" >https://venturebeat.com/2019/03/04/w3c-approves-webauthn-as-the-web-standard-for-password-free-logins/</guid>
<description>&lt;p&gt;The World Wide Web Consortium (&lt;a href=&quot;https://www.w3.org/&quot;&gt;W3C&lt;/a&gt;) today declared that the Web Authentication API (&lt;a href=&quot;https://www.w3.org/TR/webauthn/&quot;&gt;WebAuthn&lt;/a&gt;) is now an official web standard. First announced by the W3C and the &lt;a href=&quot;https://fidoalliance.org/&quot;&gt;FIDO Alliance&lt;/a&gt; in November 2015, WebAuthn is now an open standard for password-free logins on the web. It is supported by &lt;a href=&quot;https://www.w3.org/2000/09/dbwg/details?group=87227&amp;amp;order=org&amp;amp;public=1&quot;&gt;W3C contributors,&lt;/a&gt; including Airbnb, Alibaba, Apple, Google, IBM, Intel, Microsoft, Mozilla, PayPal, SoftBank, Tencent, and Yubico.&lt;/p&gt;
&lt;p&gt;The specification lets users log into online accounts using biometrics, mobile devices, and/or &lt;a href=&quot;https://venturebeat.com/2018/09/24/yubico-launches-new-lineup-of-multifactor-fido2-security-keys/&quot;&gt;FIDO security keys&lt;/a&gt;. WebAuthn is supported by Android and Windows 10. On the browser side, &lt;a href=&quot;https://venturebeat.com/2018/05/29/chrome-67-arrives-with-generic-sensor-api-and-bigint-support/&quot;&gt;Google Chrome&lt;/a&gt;, &lt;a href=&quot;https://venturebeat.com/2018/05/09/firefox-60-arrives-with-enterprise-support-web-authentication-and-faster-page-rendering-on-android/&quot;&gt;Mozilla Firefox&lt;/a&gt;, and &lt;a href=&quot;https://venturebeat.com/2018/05/31/microsoft-releases-new-windows-10-preview-with-sets-wireless-projection-edge-and-setup-improvements/&quot;&gt;Microsoft Edge&lt;/a&gt; all added support last year. Apple has supported WebAuthn &lt;a href=&quot;https://webkit.org/blog/8517/release-notes-for-safari-technology-preview-71/&quot;&gt;in preview versions of Safari&lt;/a&gt; since December.&lt;/p&gt;
&lt;h2&gt;Killing the password&lt;/h2&gt;
&lt;p&gt;“Now is the time for web services and businesses to adopt WebAuthn to move beyond vulnerable passwords and help web users improve the security of their online experiences,” W3C CEO Jeff Jaffe said in a statement. “W3C’s Recommendation establishes web-wide interoperability guidance, setting consistent expectations for web users and the sites they visit. W3C is working to implement this best practice on its own site.”&lt;/p&gt;
&lt;p&gt;Although the W3C hasn’t adopted its own creation yet, WebAuthn is already implemented on sites such as Dropbox, Facebook, GitHub, Salesforce, Stripe, and Twitter. Now that WebAuthn is an official standard, the hope is that other sites will jump on board as well, leading to more password-free logins across the web.&lt;/p&gt;
&lt;p&gt;But it’s not just the web. The FIDO Alliance wants to kill the password everywhere, a goal it has been working on for years and will likely still be working on for years to come.&lt;/p&gt;
&lt;h2&gt;FIDO2&lt;/h2&gt;
&lt;p&gt;W3C’s WebAuthn recommendation is a core component of the FIDO Alliance’s &lt;a href=&quot;https://fidoalliance.org/fido2/&quot;&gt;FIDO2&lt;/a&gt; set of specifications. FIDO2 is a standard that supports public key cryptography and multifactor authentication — specifically, the Universal Authentication Framework (UAF) and Universal Second Factor (U2F) protocols. To help spur adoption, the FIDO Alliance provides testing tools and &lt;a href=&quot;https://fidoalliance.org/certification/&quot;&gt;a certification program&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;FIDO2 attempts to address traditional authentication issues in four ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Security: FIDO2 cryptographic login credentials are unique across every website; biometrics or other secrets like passwords never leave the user’s device and are never stored on a server. This security model eliminates the risks of phishing, all forms of password theft, and replay attacks.&lt;/li&gt;
&lt;li&gt;Convenience: Users log in with simple methods such as fingerprint readers, cameras, FIDO security keys, or their personal mobile device.&lt;/li&gt;
&lt;li&gt;Privacy: Because FIDO keys are unique for each internet site, they cannot be used to track users across sites.&lt;/li&gt;
&lt;li&gt;Scalability: Websites can enable FIDO2 via an API call across all supported browsers and platforms on billions of devices consumers use every day.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;“The Web Authentication component of FIDO2 is now an official web standard from W3C, an important achievement that represents many years of industry collaboration to develop a practical solution for phishing-resistant authentication on the web,” FIDO Alliance executive director Brett McDowell said in a statement. “With this milestone, we’re moving into the next phase of our shared mission to deliver simpler, stronger authentication to everyone using the internet today, and for years to come.”&lt;/p&gt;

</description>
<pubDate>Mon, 04 Mar 2019 13:47:46 +0000</pubDate>
<dc:creator>markoa</dc:creator>
<og:type>article</og:type>
<og:title>W3C approves WebAuthn as the web standard for password-free logins</og:title>
<og:description>The World Wide Web Consortium (W3C) announced that the Web Authentication API (WebAuthn) is an official web standard for password-free logins on the web.</og:description>
<og:url>https://venturebeat.com/2019/03/04/w3c-approves-webauthn-as-the-web-standard-for-password-free-logins/</og:url>
<og:image>https://venturebeat.com/wp-content/uploads/2019/03/webauthn-logo.jpg?w=1200&amp;strip=all</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://venturebeat.com/2019/03/04/w3c-approves-webauthn-as-the-web-standard-for-password-free-logins/</dc:identifier>
</item>
<item>
<title>Everyone should read support emails</title>
<link>https://medium.com/@simonschultzdk/why-everyone-should-read-support-emails-42ca2172e23e</link>
<guid isPermaLink="true" >https://medium.com/@simonschultzdk/why-everyone-should-read-support-emails-42ca2172e23e</guid>
<description>&lt;div class=&quot;uiScale uiScale-ui--regular uiScale-caption--regular u-flexCenter u-marginVertical24 u-fontSize15 js-postMetaLockup&quot;&gt;
&lt;div class=&quot;u-flex0&quot;&gt;
&lt;div class=&quot;u-relative u-inlineBlock u-flex0&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/fit/c/100/100/1*HwQFtPewyigbS1sGEuCTLA.jpeg&quot; class=&quot;avatar-image u-size50x50&quot; alt=&quot;Go to the profile of Simon Schultz&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p name=&quot;7197&quot; id=&quot;7197&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;At &lt;a href=&quot;https://stuff.li/&quot; data-href=&quot;https://stuff.li/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Stuff&lt;/a&gt; we do not have a bunch of principles and structures — except for one very important one.&lt;/p&gt;
&lt;blockquote name=&quot;fa73&quot; id=&quot;fa73&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;Everyone in the company is reading our incoming support emails.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;b671&quot; id=&quot;b671&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;The past 20 years as a Project Manager, Product Owner, Digital Product Developer, Head of Blah Blah and Founder has taught me the importance of everyone spending time on support emails. No matter if you if are a two-man band, settled startup co-Founder, Head of Product or corporate CxO you should spend at least 30 minutes per week reading real emails from your customers.&lt;/p&gt;
&lt;p name=&quot;1f92&quot; id=&quot;1f92&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;KPIs, MAU/DAU, CAC and CLV are some of the well established metrics in most startups and established corporations.&lt;/p&gt;
&lt;p name=&quot;adb3&quot; id=&quot;adb3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;A/B testing is touted as the current methodology for valuable insights and improvements.&lt;/p&gt;
&lt;p name=&quot;debb&quot; id=&quot;debb&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Continuously startups have been tweaked and strategies changed based on an extensive aggregation of numbers in spreadsheets and dashboards.&lt;/p&gt;
&lt;p name=&quot;97cf&quot; id=&quot;97cf&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I love my numbers, and I love my spreadsheets, but heart and soul of all the great people using and being in contact with your service, product and company are too often buried somewhere in a soulless column in your beloved spreadsheets.&lt;/p&gt;
&lt;blockquote name=&quot;a660&quot; id=&quot;a660&quot; class=&quot;graf graf--pullquote graf-after--p&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Valuable insights, information and data are too often ignored and forgotten.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*kfu8vCwVR_Lgm7RakSgEjw.jpeg&quot; data-width=&quot;3000&quot; data-height=&quot;2000&quot; data-is-featured=&quot;true&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*kfu8vCwVR_Lgm7RakSgEjw.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*kfu8vCwVR_Lgm7RakSgEjw.jpeg&quot;/&gt;&lt;/div&gt;
Photo Credit: &lt;a href=&quot;https://unsplash.com/photos/PNSmsbdgGXs&quot; data-href=&quot;https://unsplash.com/photos/PNSmsbdgGXs&quot; class=&quot;markup--anchor markup--figure-anchor&quot; rel=&quot;noopener nofollow&quot; target=&quot;_blank&quot;&gt;Rawpixel @ Unsplash&lt;/a&gt;
&lt;p name=&quot;477b&quot; id=&quot;477b&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;I have always spent much more time on incoming support emails than internal reports and numbers. Here are six good reasons why you should do it as well:&lt;/p&gt;
&lt;h3 name=&quot;22a0&quot; id=&quot;22a0&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;News you can use&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;423b&quot; id=&quot;423b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Support emails are fresh off the press. It is your current state of service, product or company. It is not some week or month old aggregated information related to a discontinued feature or product.&lt;br/&gt;Getting to know what is happening in you business right now (!) makes it easier to react before shit really hits the fan.&lt;/p&gt;
&lt;h3 name=&quot;dedd&quot; id=&quot;dedd&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;A great conversation starter&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;ca89&quot; id=&quot;ca89&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Support emails, no matter how aggressive the initial email has been, can provide insightful information through conversations with your customer. Insights which cannot be put into numbers and tables.&lt;/p&gt;
&lt;p name=&quot;ba03&quot; id=&quot;ba03&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Customers writing you regarding support issues are more than often willing to engage in conversations, which can give you a much better understanding of how your company and product is perceived in reality.&lt;/p&gt;
&lt;h3 name=&quot;edbd&quot; id=&quot;edbd&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;You probably don’t have enough data&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;f835&quot; id=&quot;f835&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Too many entrepreneurs and startup founders are hooked on data dashboards, A/B testing and funnel optimization too early in the process of building their venture — long before having a significant sample size on their data. Instead of seeing data points fluctuating 10 to 40 percentage points, you should spend time writing or talking with people who has spent the time writing you an email.&lt;/p&gt;
&lt;h3 name=&quot;6e65&quot; id=&quot;6e65&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;A nuanced overview of your business&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;85e7&quot; id=&quot;85e7&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Dashboards and spreadsheets will never ever provide a nuanced overview of who your customers are, how they feel, what their intentions are and how happy they are.&lt;/p&gt;
&lt;p name=&quot;2774&quot; id=&quot;2774&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Browsing through support emails will give everyone in the company a much better understanding of the current condition of your company and product.&lt;/p&gt;
&lt;p name=&quot;31c2&quot; id=&quot;31c2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Also, colleagues form a personal understanding of the state of business — which can be used internally in more varied conversations.&lt;/p&gt;
&lt;h3 name=&quot;8e1d&quot; id=&quot;8e1d&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;Support emails are loaded with emotions&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;25ad&quot; id=&quot;25ad&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Numbers are just numbers. And often aggregated into totals and averages.&lt;/p&gt;
&lt;p name=&quot;b707&quot; id=&quot;b707&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Which gives you nothing but a total or an average. No background. No story. No heart. No soul.&lt;/p&gt;
&lt;p name=&quot;a757&quot; id=&quot;a757&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Support emails on the other hand are full of emotions:&lt;/p&gt;
&lt;blockquote name=&quot;5929&quot; id=&quot;5929&quot; class=&quot;graf graf--pullquote graf--startsWithDoubleQuote graf-after--p&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;strong class=&quot;markup--strong markup--pullquote-strong&quot;&gt;“Hi Company. Thank you for nothing. You made my daughter cry for 30 minutes yesterday, because we couldn’t login to stream Dora The Explorer. Switched browser which seemed to solve half of the issues :-(”.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;4159&quot; id=&quot;4159&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;Unless you are a soulless robot, the above statement will probably trigger more emotions and requirements for actions than:&lt;/p&gt;
&lt;blockquote name=&quot;5fef&quot; id=&quot;5fef&quot; class=&quot;graf graf--blockquote graf--startsWithDoubleQuote graf-after--p&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong class=&quot;markup--strong markup--blockquote-strong&quot;&gt;“Week 27 — Users experiencing issues on service: 57%”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;0c7d&quot; id=&quot;0c7d&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;Seeing real customers having real relatable issues provides a much better understanding of the current state of your company. &lt;br/&gt;Emotional statements from real people also contributes much better in internal discussions and in pitch decks.&lt;/p&gt;
&lt;p name=&quot;5eb3&quot; id=&quot;5eb3&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Downgrading a group of people to “57% of users…” in a spreadsheet is just disrespectful.&lt;/p&gt;
&lt;h3 name=&quot;a017&quot; id=&quot;a017&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;Increased Responsibility&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;f326&quot; id=&quot;f326&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;My experience with everyone reading support emails is, that everyone feels an increased responsibility and a sense of urgency to eliminate whatever emails hits your support inbox.&lt;/p&gt;
&lt;p name=&quot;62b2&quot; id=&quot;62b2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Seeing real problems trigger actions and priorities much faster than just seeing numbers in a spreadsheet. And it makes it much easier to prioritise for better customer experiences.&lt;/p&gt;
&lt;p name=&quot;b5ab&quot; id=&quot;b5ab&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I won’t claim, that you should completely ditch your spreadsheets and numbers on customer acquisition, funnels and all sorts of support interactions overview. But you should spend more time on real insights.&lt;/p&gt;
&lt;p name=&quot;586f&quot; id=&quot;586f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;And the monthly slide on “what customers said” just doesn’t do it.&lt;/p&gt;
&lt;blockquote name=&quot;bc7a&quot; id=&quot;bc7a&quot; class=&quot;graf graf--pullquote graf-after--p&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Reading real support emails provides an up-to-date overview, triggers emotions and responsibility while providing conversation starters externally and internally. For everyone in the company.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;efe5&quot; id=&quot;efe5&quot; class=&quot;graf graf--p graf-after--pullquote graf--trailing&quot;&gt;So grab your morning coffee and wind through all those valuable insights from real people having something valuable on their mind….&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 11:31:26 +0000</pubDate>
<dc:creator>stuffhq</dc:creator>
<og:title>Why everyone should read support emails – Simon Schultz – Medium</og:title>
<og:url>https://medium.com/@simonschultzdk/why-everyone-should-read-support-emails-42ca2172e23e</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*kfu8vCwVR_Lgm7RakSgEjw.jpeg</og:image>
<og:description>Support emails provides an up-to-date overview, triggers emotions and responsibility while providing conversation starters for everyone.</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@simonschultzdk/why-everyone-should-read-support-emails-42ca2172e23e</dc:identifier>
</item>
<item>
<title>Linux 5.0</title>
<link>https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#u</link>
<guid isPermaLink="true" >https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#u</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;Linux 5.0&lt;/title&gt;&lt;link rel=&quot;alternate&quot; title=&quot;Atom feed&quot; href=&quot;../../new.atom&quot; type=&quot;application/atom+xml&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;58.45913354176&quot;&gt;

&lt;pre&gt;
&lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#ef5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot; id=&quot;mf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot; name=&quot;mf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot;&gt;*&lt;/a&gt; &lt;u id=&quot;u&quot;&gt;&lt;strong&gt;Linux 5.0&lt;/strong&gt;&lt;/u&gt;
&lt;strong&gt;@ 2019-03-04  0:43 Linus Torvalds&lt;/strong&gt;
  &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#rf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot;&gt;0 siblings, 0 replies; 1+ messages in thread&lt;/a&gt;
From: Linus Torvalds @ 2019-03-04  0:43 UTC (&lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/&quot;&gt;permalink&lt;/a&gt; / &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/raw&quot;&gt;raw&lt;/a&gt;)
  To: Linux List Kernel Mailing

Ok, so the last week of the 5.0 release wasn't entirely quiet, but
it's a lot smaller than rc8 was, and on the whole I'm happy that I
delayed a week and did an rc8.

It turns out that the actual patch that I talked about in the rc8
release wasn't the worrisome bug I had thought: yes, we had an
uninitialized variable, but the reason we hadn't immediately noticed
it due to a warning was that the way gcc works, the compiler had
basically initialized it for us to the right value.  So the same thing
that caused not the lack of warning, also effectively meant that the
fix was a no-op in practice.

But hey, we had other bug fixes come in that actually did matter, and
the uninitialized variable _could_ have been a problem with another
compiler.

Regardless - all is well that ends well. We have more than a handful
of real fixes in the last week, but not enough to make me go &quot;Hmm,
things are really unstable&quot;. In fact, at least two thirds of the
patches are marked as being fixes for previous releases, so it's not
like 5.0 itself looks bad.

Knock wood.

Anyway, with this, the merge window for 5.1 is obviously open, and I'm
happy to see that I already have several early pull requests.  Which
I'll start processing tomorrow.

And appended is - as usual - the shortlog just for the last week. The
overall changes for all of the 5.0 release are much bigger. But I'd
like to point out (yet again) that we don't do feature-based releases,
and that &quot;5.0&quot; doesn't mean anything more than that the 4.x numbers
started getting big enough that I ran out of fingers and toes.

                Linus

---

Alamy Liu (2):
      mmc: cqhci: fix space allocated for transfer descriptor
      mmc: cqhci: Fix a tiny potential memory leak on error condition

Alistair Francis (1):
      drm/bochs: Fix the ID mismatch error

Andrew Lunn (2):
      net: dsa: mv88e6xxx: Fix u64 statistics
      net: dsa: mv88e6xxx: Fix statistics on mv88e6161

Andy Lutomirski (1):
      x86/uaccess: Don't leak the AC flag into __put_user() value evaluation

Andy Shevchenko (2):
      net: dev: Use unsigned integer as an argument to left-shift
      enc28j60: Correct description of debug module parameter

Ard Biesheuvel (2):
      crypto: sha256/arm - fix crash bug in Thumb2 build
      crypto: sha512/arm - fix crash bug in Thumb2 build

Arnd Bergmann (1):
      kasan: turn off asan-stack for clang-8 and earlier

BOUGH CHEN (1):
      mmc: sdhci-esdhc-imx: correct the fix of ERR004536

Bart Van Assche (1):
      scsi: core: Avoid that system resume triggers a kernel warning

Bryan Whitehead (1):
      lan743x: Fix TX Stall Issue

Christoph Hellwig (1):
      MIPS: lantiq: pass struct device to DMA API functions

Daniel Borkmann (1):
      bpf: fix sanitation rewrite in case of non-pointers

Darrick J. Wong (1):
      tmpfs: fix uninitialized return value in shmem_link

David Ahern (4):
      ipv4: Return error for RTA_VIA attribute
      ipv6: Return error for RTA_VIA attribute
      mpls: Return error for RTA_GATEWAY attribute
      ipv4: Pass original device to ip_rcv_finish_core

David Howells (1):
      afs: Fix manually set volume location server list

Davide Caratti (2):
      net/sched: act_ipt: fix refcount leak when replace fails
      net/sched: act_skbedit: fix refcount leak when replace fails

Dmitry Bogdanov (1):
      net: aquantia: regression on cpus with high cores: set mode with 8 queues

Eric Biggers (3):
      net: socket: set sock-&amp;gt;sk to NULL after calling proto_ops::release()
      crypto: arm64/chacha - fix chacha_4block_xor_neon() for big endian
      crypto: arm64/chacha - fix hchacha_block_neon() for big endian

Gilad Ben-Yossef (1):
      crypto: ccree - add missing inline qualifier

Greg Kroah-Hartman (1):
      kvm: properly check debugfs dentry before using it

Haiyang Zhang (1):
      hv_netvsc: Fix IP header checksum for coalesced packets

Hangbin Liu (1):
      ipv4: Add ICMPv6 support when parse route ipproto

Hannes Reinecke (8):
      scsi: lpfc: fix calls to dma_set_mask_and_coherent()
      scsi: 3w-9xxx: fix calls to dma_set_mask_and_coherent()
      scsi: 3w-sas: fix calls to dma_set_mask_and_coherent()
      scsi: aic94xx: fix calls to dma_set_mask_and_coherent()
      scsi: bfa: fix calls to dma_set_mask_and_coherent()
      scsi: csiostor: fix calls to dma_set_mask_and_coherent()
      scsi: hisi_sas: fix calls to dma_set_mask_and_coherent()
      scsi: hptiop: fix calls to dma_set_mask()

Hauke Mehrtens (1):
      net: dsa: lantiq: Add GPHY firmware files

Heiner Kallweit (2):
      net: phy: phylink: fix uninitialized variable in phylink_get_mac_state
      net: dsa: mv88e6xxx: prevent interrupt storm caused by
mv88e6390x_port_set_cmode

Igor Druzhinin (2):
      xen-netback: fix occasional leak of grant ref mappings under
memory pressure
      xen-netback: don't populate the hash cache on XenBus disconnect

Jann Horn (1):
      mm: enforce min addr even if capable() in expand_downwards()

Jiri Benc (1):
      geneve: correctly handle ipv6.disable module parameter

Jonas Gorski (1):
      MIPS: BCM63XX: provide DMA masks for ethernet devices

Jonathan Neuschäfer (1):
      mmc: spi: Fix card detection during probe

Julia Cartwright (1):
      iommu/dmar: Fix buffer overflow during PCI bus notification

Julia Lawall (1):
      tee: optee: add missing of_node_put after of_device_is_available

Lan Tianyu (1):
      x86/hyper-v: Fix definition of HV_MAX_FLUSH_REP_COUNT

Linus Torvalds (2):
      Revert &quot;x86/fault: BUG() when uaccess helpers fault on kernel addresses&quot;
      Linux 5.0

Linus Walleij (1):
      ARM: dts: gemini: Re-enable display controller

Mao Wenan (1):
      net: sit: fix memory leak in sit_init_net()

Marc Gonzalez (1):
      arm64: dts: qcom: msm8998: Extend TZ reserved memory area

Mario Kleiner (1):
      drm/amd/display: Use vrr friendly pageflip throttling in DC.

Matthias Maennich (1):
      sctp: chunk.c: correct format string for size_t in printk

Max Uvarov (1):
      net: phy: dp83867: add soft reset delay

Maxime Chevallier (1):
      net: dsa: mv88e6xxx: power serdes on/off for 10G interfaces on 6390X

Michael Chan (1):
      bnxt_en: Drop oversize TX packets to prevent errors.

Michael Clark (1):
      MIPS: fix truncation in __cmpxchg_small for short values

Mike Kravetz (1):
      hugetlbfs: fix races and page leaks during migration

Mike Marshall (1):
      orangefs: remove two un-needed BUG_ONs...

Ming Lei (1):
      mmc: core: align max segment size with logical block size

Nazarov Sergey (2):
      net: Add __icmp_send helper.
      net: avoid use IPCB in cipso_v4_error

Nicholas Kazlauskas (1):
      drm: Block fb changes for async plane updates

Paolo Abeni (3):
      selftests: pmtu: disable DAD in all namespaces
      selftests: pmtu: add explicit tests for PMTU exceptions cleanup
      selftests: fixes for UDP GRO

Paul Burton (1):
      MIPS: eBPF: Fix icache flush end address

Paul Moore (1):
      netlabel: fix out-of-bounds memory accesses

Peng Sun (2):
      bpf: decrease usercnt if bpf_map_new_fd() fails in bpf_map_get_fd_by_id()
      bpf: drop refcount if bpf_map_new_fd() fails in map_create()

Rajasingh Thavamani (1):
      net: phy: Micrel KSZ8061: link failure after cable connect

Ritesh Harjani (1):
      mmc: core: Fix NULL ptr crash from mmc_should_fail_request

Sergei Shtylyov (1):
      mmc: tmio_mmc_core: don't claim spurious interrupts

Sheng Lan (1):
      net: netem: fix skb length BUG_ON in __skb_to_sgvec

Takeshi Saito (1):
      mmc: tmio: fix access width of Block Count Register

Thomas Bogendoerfer (1):
      MIPS: fix memory setup for platforms with PHYS_OFFSET != 0

Timur Celik (2):
      tun: fix blocking read
      tun: remove unnecessary memory barrier

Tung Nguyen (1):
      tipc: fix race condition causing hung sendto

Vlad Buslov (1):
      net: sched: act_tunnel_key: fix NULL pointer dereference during init

Wen Yang (1):
      net: dsa: fix a leaked reference by adding missing of_node_put

YueHaibing (1):
      net: nfc: Fix NULL dereference on nfc_llcp_build_tlv fails

&lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#mf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot; id=&quot;ef5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot; name=&quot;ef5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot;&gt;^&lt;/a&gt; &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/&quot;&gt;permalink&lt;/a&gt; &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/raw&quot;&gt;raw&lt;/a&gt; &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/#R&quot;&gt;reply&lt;/a&gt;    [&lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#u&quot;&gt;&lt;strong&gt;flat&lt;/strong&gt;&lt;/a&gt;|&lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/t/#u&quot;&gt;nested&lt;/a&gt;] &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#rf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot;&gt;1+ messages in thread&lt;/a&gt;
&lt;/pre&gt;
&lt;hr /&gt;&lt;pre&gt;
only message in thread, back to &lt;a href=&quot;https://lore.kernel.org/lkml/&quot;&gt;index&lt;/a&gt;

&lt;strong id=&quot;t&quot;&gt;Thread overview:&lt;/strong&gt; (only message) (download: &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/t.mbox.gz&quot;&gt;mbox.gz&lt;/a&gt; / follow: &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/t.atom&quot;&gt;Atom feed&lt;/a&gt;)
-- links below jump to the message on this page --
2019-03-04  0:43 &lt;a href=&quot;https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/#mf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot; id=&quot;rf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot; name=&quot;rf5287e1e81b9a9310071db5bf9d79184b4d4ccaa&quot;&gt;Linux 5.0&lt;/a&gt; Linus Torvalds
&lt;/pre&gt;
&lt;hr /&gt;&lt;pre&gt;
LKML Archive on lore.kernel.org

Archives are clonable:
        git clone --mirror https://lore.kernel.org/lkml/0 lkml/git/0.git
        git clone --mirror https://lore.kernel.org/lkml/1 lkml/git/1.git
        git clone --mirror https://lore.kernel.org/lkml/2 lkml/git/2.git
        git clone --mirror https://lore.kernel.org/lkml/3 lkml/git/3.git
        git clone --mirror https://lore.kernel.org/lkml/4 lkml/git/4.git
        git clone --mirror https://lore.kernel.org/lkml/5 lkml/git/5.git
        git clone --mirror https://lore.kernel.org/lkml/6 lkml/git/6.git
        git clone --mirror https://lore.kernel.org/lkml/7 lkml/git/7.git

        # If you have public-inbox 1.1+ installed, you may
        # initialize and index your mirror using the following commands:
        public-inbox-init -V2 lkml lkml/ https://lore.kernel.org/lkml \
                linux-kernel@vger.kernel.org linux-kernel@archiver.kernel.org
        public-inbox-index lkml


Newsgroup available over NNTP:
        &lt;a href=&quot;nntp://nntp.lore.kernel.org/org.kernel.vger.linux-kernel&quot;&gt;nntp://nntp.lore.kernel.org/org.kernel.vger.linux-kernel&lt;/a&gt;


AGPL code for this site: git clone &lt;a href=&quot;https://public-inbox.org/&quot;&gt;https://public-inbox.org/&lt;/a&gt; public-inbox
&lt;/pre&gt;
&lt;/body&gt;</description>
<pubDate>Mon, 04 Mar 2019 08:52:23 +0000</pubDate>
<dc:creator>doener</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lore.kernel.org/lkml/CAHk-=wjuG6HiGbD7DCGfvDvhr_1WZUR-eYF2qWGbYyn9k6unvg@mail.gmail.com/T/</dc:identifier>
</item>
<item>
<title>PCjs Machines</title>
<link>https://www.pcjs.org/</link>
<guid isPermaLink="true" >https://www.pcjs.org/</guid>
<description>&lt;p&gt;Welcome to PCjs, home of &lt;a href=&quot;https://www.pcjs.org/docs/pcx86/&quot;&gt;PCx86&lt;/a&gt;, the original IBM PC simulation that runs in your web browser. It is one of several JavaScript Machines in the &lt;a href=&quot;https://github.com/jeffpar/pcjs&quot;&gt;PCjs Project&lt;/a&gt;, an open-source project that includes:&lt;/p&gt;&lt;p&gt;All PCjs machine simulations are written entirely in &lt;a href=&quot;https://www.pcjs.org/modules/&quot;&gt;JavaScript&lt;/a&gt;. No Flash, Java or other plugins are required. Supported browsers include modern versions of Chrome, Safari, Firefox, Internet Explorer (v9.0 and up), Edge, and assorted mobile browsers.&lt;/p&gt;
&lt;p&gt;[IBM PC (Model 5150) with Monochrome Display]&lt;/p&gt;

&lt;p&gt;The PCjs &lt;a href=&quot;https://www.pcjs.org/devices/pcx86/machine/5150/mda/64kb/&quot;&gt;machine&lt;/a&gt; above uses &lt;a href=&quot;https://www.pcjs.org/docs/pcx86/&quot;&gt;PCx86&lt;/a&gt; configured with an Intel 8088 running at 4.77Mhz, with 64Kb of RAM and an IBM Monochrome Display Adapter. The machine is also available with a &lt;a href=&quot;https://www.pcjs.org/devices/pcx86/machine/5150/mda/64kb/debugger/&quot;&gt;Control Panel&lt;/a&gt; featuring the built-in PCx86 Debugger. For even greater control, build your own PC. The &lt;a href=&quot;https://www.pcjs.org/docs/pcx86/&quot;&gt;PCx86 Documentation&lt;/a&gt; will help you get started.&lt;/p&gt;
&lt;p&gt;PCx86 has steadily evolved to support more classic x86-based machines, including the IBM PC XT, the 80286-based IBM PC AT, and the 80386-based COMPAQ DeskPro 386. PCx86 fully supports the original machine ROMs, video cards, etc, and all machines run at their original speeds.&lt;/p&gt;
&lt;p&gt;The goals of the &lt;a href=&quot;https://www.pcjs.org/docs/about/&quot;&gt;PCjs Project&lt;/a&gt; are to create fast, full-featured simulations of classic computer hardware, help people understand how these early machines worked, make it easy to experiment with different machine configurations, and provide a platform for running and analyzing old computer software.&lt;/p&gt;
&lt;h2 id=&quot;demos&quot;&gt;Demos&lt;/h2&gt;
&lt;p&gt;Some pre-configured machines are shown below, ready to run BASIC, DOS, Windows, OS/2, and other assorted software.&lt;/p&gt;

&lt;p&gt;There are many more &lt;a href=&quot;https://www.pcjs.org/devices/pcx86/machine/#ready-to-run-app-demos&quot;&gt;PCx86 Demos&lt;/a&gt;, including an &lt;a href=&quot;https://www.pcjs.org/devices/pcx86/machine/5150/dual/64kb/&quot;&gt;IBM PC with Dual Displays&lt;/a&gt; demonstrating early multi-monitor support, and multiple IBM PC XT machines running side-by-side with &lt;a href=&quot;https://www.pcjs.org/devices/pcx86/machine/5160/cga/256kb/array/&quot;&gt;CGA Displays&lt;/a&gt; and &lt;a href=&quot;https://www.pcjs.org/devices/pcx86/machine/5160/ega/640kb/array/&quot;&gt;EGA Displays&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;c1pjs&quot;&gt;C1Pjs&lt;/h2&gt;
&lt;p&gt;Below is the &lt;a href=&quot;https://www.pcjs.org/docs/c1pjs/&quot;&gt;OSI Challenger C1P&lt;/a&gt;, another simulation in the PCjs Project. It simulates Ohio Scientific’s 6502-based microcomputer, released in 1978. More details about this simulation and the original machine are available in the &lt;a href=&quot;https://www.pcjs.org/docs/c1pjs/&quot;&gt;C1Pjs Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[C1P Machine]&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/jeffpar/pcjs&quot;&gt;PCjs Project&lt;/a&gt; is now an open-source project on &lt;a href=&quot;https://github.com/jeffpar&quot;&gt;GitHub&lt;/a&gt;. All published portions are free for redistribution and/or modification under the terms of the &lt;a href=&quot;https://www.pcjs.org/LICENSE&quot;&gt;GNU General Public License&lt;/a&gt; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt;
&lt;p&gt;You are required to include the following links and copyright notice:&lt;/p&gt;
&lt;blockquote readability=&quot;2.5757575757576&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pcjs.org/&quot;&gt;PCjs&lt;/a&gt; © 2012-2019 by &lt;a href=&quot;https://jeffpar.com&quot;&gt;Jeff Parsons&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;in every copy or modified version of this work, and to display that notice on every web page or computer that it runs on.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://www.pcjs.org/LICENSE&quot;&gt;LICENSE&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2 id=&quot;more-information&quot;&gt;More Information&lt;/h2&gt;
&lt;p&gt;Learn more about the &lt;a href=&quot;https://www.pcjs.org/docs/about/&quot;&gt;PCjs Project&lt;/a&gt; and &lt;a href=&quot;https://www.pcjs.org/docs/about/pcx86/&quot;&gt;PCx86&lt;/a&gt;. To create your own PCx86 machines, see the &lt;a href=&quot;https://www.pcjs.org/docs/pcx86/&quot;&gt;PCx86 Documentation&lt;/a&gt; for details. If you have questions or run into any problems, feel free to &lt;a href=&quot;https://twitter.com/jeffpar&quot;&gt;tweet&lt;/a&gt; or &lt;a href=&quot;mailto:Jeff@pcjs.org&quot;&gt;email&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 08:49:13 +0000</pubDate>
<dc:creator>lelf</dc:creator>
<og:image>/versions/images/current/home-page.png</og:image>
<og:title>The Original IBM PC in a Web Browser</og:title>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.pcjs.org/</dc:identifier>
</item>
<item>
<title>China&amp;#039;s social network surveillance databases are apparently leaked to Internet</title>
<link>https://twitter.com/0xDUDE/status/1101917885100945409</link>
<guid isPermaLink="true" >https://twitter.com/0xDUDE/status/1101917885100945409</guid>
<description>&lt;p&gt;So this social media surveillance program is retrieving (private) messages per province from 6 social platforms and extracts named, ID numbers, ID photos, GPS locations, network information, and all the conversations and file transfers get imported into a large online database.&lt;/p&gt;
</description>
<pubDate>Mon, 04 Mar 2019 06:00:38 +0000</pubDate>
<dc:creator>stevefan1999</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/0xDUDE/status/1101917885100945409</dc:identifier>
</item>
</channel>
</rss>