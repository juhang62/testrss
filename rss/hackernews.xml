<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Windows file access performance compared to Linux</title>
<link>https://github.com/Microsoft/WSL/issues/873#issuecomment-425272829</link>
<guid isPermaLink="true" >https://github.com/Microsoft/WSL/issues/873#issuecomment-425272829</guid>
<description>
&lt;p&gt;I wish this problem was as easy as saying &quot;NTFS is slow&quot; or &quot;DrvFs is slow&quot;. We've long since gotten all the low-hanging fruit and are left with what is essentially &quot;death by a thousand cuts,&quot; with no single component responsible for our (lack of) performance, but with lots of different things contributing.&lt;/p&gt;
&lt;p&gt;The IO subsystem is architected very differently in Windows than it is in Linux, with different goals in mind. Some of the major differences we have to deal with are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Linux has a top-level directory entry cache that means that certain queries (most notably stat calls) can be serviced without calling into the file system at all once an item is in the cache. Windows has no such cache, and leaves much more up to the file systems. A Win32 path like C:\dir\file gets translated to an NT path like \??\C:\dir\file, where \??\C: is a symlink in Object Manager to a device object like \Device\HarddiskVolume4. Once such a device object is encountered, the entire remainder of the path is just passed to the file system, which is very different to the centralized path parsing that VFS does in Linux.&lt;/li&gt;
&lt;li&gt;Windows's IO stack is extensible, allowing filter drivers to attach to volumes and intercept IO requests before the file system sees them. This is used for numerous things, including virus scanning, compression, encryption, file virtualization, things like OneDrive's files on demand feature, gathering pre-fetching data to speed up app startup, and much more. Even a clean install of Windows will have a number of filters present, particularly on the system volume (so if you have a D: drive or partition, I recommend using that instead, since it likely has fewer filters attached). Filters are involved in many IO operations, most notably creating/opening files.&lt;/li&gt;
&lt;li&gt;The NT file system API is designed around handles, not paths. Almost any operation requires opening the file first, which can be expensive. Even things that on the Win32 level seem to be a single call (e.g. DeleteFile) actually open and close the file under the hood. One of our biggest performance optimizations for DrvFs which we did several releases ago was the introduction of a new API that allows us to query file information without having to open it first.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Whether we like it or not (and we don't), file operations in Windows are more expensive than in Linux, even more so for those operations that only touch file metadata (such as stat). The costs of these operations are spread all over the place, from Object Manager and IO manager, to the filters, and NTFS. If it was as simple as saying &quot;NTFS is slow,&quot; we'd simply spend a release optimizing NTFS (and we have spent time doing just that), but our costs are so spread out over many components that there just isn't a silver bullet anymore. And we can only ever address in-box filters; who knows what third party filters are doing. We do work with the vendors of those filters to try and improve things. For example, when we introduced the new API to query file information without opening it, we needed filter drivers to support that. We needed to make sure we didn't break the system if some installed filters didn't support it (basically by falling back to a open/query/close operation). Making sure everybody supported this so you, our users, got the maximum speed benefit from that change took a lot of time and effort. The same thing is true for something like the case-sensitive directory work; we had to make sure our filter ecosystem could handle this new behavior.&lt;/p&gt;
&lt;p&gt;When Rich was talking about app behavior above, he wasn't trying to blame the apps for behaving that way. These apps were written on a system where file system operations are incredibly fast, and we're trying to run them, unmodified (unlike e.g. Git for Windows which tries to optimize its access patterns to better fit the Windows way of doing things) on a system that, unfortunately, is not as fast.&lt;/p&gt;
&lt;p&gt;And it's not even as simple as saying &quot;Windows is the cause of the slowness&quot; either, since WSL does play a role. Most notably, Windows path parsing is very different than Linux path parsing (and, as I said above, is the responsibility of the file system, so can differ between file systems, while on Linux it's centralized). Linux apps expect the Linux behavior, so we have to carefully emulate that behavior, and unfortunately that means sending more operations down to the file system. Something like a stat call, which in Linux can be served entirely from the kernel's own cache if you're lucky, for WSL requires sending multiple file system requests, all of which have to traverse the entire filter stack. We've done a lot of work, even as recent as the upcoming 1809, to reduce the amount of extra work WSL has to do. But the differences between Linux and Windows's API mean there'll always be some extra work, at least.&lt;/p&gt;
&lt;p&gt;Basically, this isn't a simple problem, and everything we do involves multiple components, and often involves working with Microsoft's partners if the changes affect filter drivers.&lt;/p&gt;
&lt;p&gt;That doesn't mean we've given up either. We're still making changes, and are actively exploring new avenues to make WSL faster, and thus more useful, for you. Of course, I wish I could tell you exactly what we're doing and what our timeline is, but that's unfortunately not the corporate reality we live in.&lt;/p&gt;
</description>
<pubDate>Sat, 29 Dec 2018 13:48:55 +0000</pubDate>
<dc:creator>eatonphil</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/600347?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Major performance (I/O?) issue in /mnt/* and in ~ (home) · Issue #873 · Microsoft/WSL</og:title>
<og:url>https://github.com/Microsoft/WSL/issues/873</og:url>
<og:description>A brief description As a Symfony developer, it&amp;#39;s always been hard to get a stable/fast development environment. My current setup is a Ubuntu running under VirtualBox (using vagrant). While page...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/Microsoft/WSL/issues/873</dc:identifier>
</item>
<item>
<title>PayPal has permanently banned The Hacker News and hold funds for 180 days</title>
<link>https://twitter.com/TheHackersNews/status/1078907851995860992</link>
<guid isPermaLink="true" >https://twitter.com/TheHackersNews/status/1078907851995860992</guid>
<description>&lt;div class=&quot;dir-ltr&quot; dir=&quot;ltr&quot; readability=&quot;11.693430656934&quot;&gt;Instead of giving a valid reason, company says &quot;specific reasons for such a decision is proprietary &amp;amp; it is not released since that could impair PayPal's ability to do business in a safe and secure manner&quot;

Seriously &lt;a href=&quot;https://mobile.twitter.com/PayPal&quot; class=&quot;twitter-atreply dir-ltr&quot; dir=&quot;ltr&quot; data-mentioned-user-id=&quot;30018058&quot; data-screenname=&quot;PayPal&quot;&gt;@PayPal&lt;/a&gt;????

You have to mention at least one valid reason.&lt;/div&gt;
</description>
<pubDate>Sat, 29 Dec 2018 13:37:51 +0000</pubDate>
<dc:creator>AlexKaul</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/TheHackersNews/status/1078907851995860992</dc:identifier>
</item>
<item>
<title>How DOOM fire was done</title>
<link>http://fabiensanglard.net/doom_fire_psx/</link>
<guid isPermaLink="true" >http://fabiensanglard.net/doom_fire_psx/</guid>
<description>&lt;head&gt;&lt;title&gt;How DOOM fire was done&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;96.10460251046&quot;&gt;

&lt;center&gt;

&lt;/center&gt;
&lt;p&gt;Dec 28, 2018&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How DOOM fire was done&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt; The &lt;a href=&quot;http://fabiensanglard.net/gebbdoom&quot;&gt;Game Engine Black Book: DOOM&lt;/a&gt; features a whole chapter about DOOM console ports and the challenges they encountered. The utter failure of the 3DO, the difficulties of the Saturn due to its affine texture mapping, and the amazing &quot;reverse-engineering-from- scratch&quot; by Randy Linden on Super Nintendo all have rich stories to tell.&lt;/p&gt;&lt;p&gt;Once heading towards disaster&lt;a name=&quot;back_1&quot; href=&quot;http://fabiensanglard.net/doom_fire_psx/#footnote_1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;, the Playstation 1 (PSX) devteam managed to rectify course to produce a critically and commercially acclaimed conversion. &lt;a href=&quot;https://www.youtube.com/watch?v=p85npx14HUI&quot;&gt;Final DOOM&lt;/a&gt; was the most faithful port when compared to the PC version. The alpha blended colored sectors not only improved visual quality, they also made gameplay better by indicating the required key color. Sound was also improved via reverberation effects taking advantage of the PSX's Audio Processing Unit.&lt;/p&gt;&lt;p&gt;The devteam did such a good job that they found themselves with a few extra CPU cycles they decided to use to generate animated fire both during both the &lt;a href=&quot;https://www.youtube.com/watch?v=YJB0gfP-GRY&amp;amp;feature=youtu.be&amp;amp;t=10&quot;&gt;intro&lt;/a&gt; and the &lt;a href=&quot;http://fabiensanglard.net/doom_fire_psx/psx_screen_sky.png&quot;&gt;gameplay&lt;/a&gt;. Mesmerized, I tried to find out how it was done. After an initial calling found no answer, I was about to dust off my MIPS book to rip open the PSX executable when Samuel Villarreal replied on Twitter to tell me he had already reverse-engineered the Nintendo 64 version&lt;a name=&quot;back_2&quot; href=&quot;http://fabiensanglard.net/doom_fire_psx/#footnote_2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;. I only had to clean, simplify, and optimize it a little bit.&lt;/p&gt;&lt;p&gt;It was interesting to re-discover this classic demoscene effect; the underlying idea is similar to the first &lt;a href=&quot;http://agilerepose.weebly.com/water-ripple.html&quot;&gt;water ripple&lt;/a&gt; many developers implemented as a programming kata in the 90's. The fire effect is a vibrant testimony to a time when judiciously picked palette colors combined with a simple trick were the only way to get things done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Core idea&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;At its core, the fire effect relies on a simple heightmap. A screen-sized array is populated with thirty-seven values ranging from 0 to 36. Each value is associated with a color from white to black, using yellow, orange, and red along the way. The idea is to model the fire particle's temperature as it elevates and cools down.&lt;/p&gt;
&lt;table width=&quot;100%&quot; border=&quot;1&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The framebuffer is initialized full black (with zeros) with a single line of white pixels at the bottom (36) which will be the &quot;source&quot; of the fire.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://fabiensanglard.net/doom_fire_psx/basis.png&quot; type=&quot;image/png&quot;/&gt;&lt;/p&gt;&lt;p&gt;For each screen refresh the &quot;heat&quot; is propagated up. A new value for each pixel in the framebuffer is calculated. Each pixel is updated based on the value directly below. In the code, lower-left is at array index zero and upper right is at index FIRE_HEIGHT * FIRE_WIDTH - 1.&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;function&lt;/span&gt; doFire&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;for&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;x&lt;span&gt;=&lt;/span&gt;&lt;span&gt;0&lt;/span&gt; &lt;span&gt;;&lt;/span&gt; x &lt;span&gt;&amp;lt;&lt;/span&gt; FIRE_WIDTH&lt;span&gt;;&lt;/span&gt; x&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
        &lt;span&gt;for&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;y &lt;span&gt;=&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt; y &lt;span&gt;&amp;lt;&lt;/span&gt; FIRE_HEIGHT&lt;span&gt;;&lt;/span&gt; y&lt;span&gt;++&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
            spreadFire&lt;span&gt;(&lt;/span&gt;y &lt;span&gt;*&lt;/span&gt; FIRE_WIDTH &lt;span&gt;+&lt;/span&gt; x&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
        &lt;span&gt;}&lt;/span&gt;
    &lt;span&gt;}&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;

 &lt;span&gt;function&lt;/span&gt; spreadFire&lt;span&gt;(&lt;/span&gt;src&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    firePixels&lt;span&gt;[&lt;/span&gt;src &lt;span&gt;-&lt;/span&gt; FIRE_WIDTH&lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; firePixels&lt;span&gt;[&lt;/span&gt;src&lt;span&gt;]&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that line 0 is never updated (y iteration starts at 1 instead of 0). This line populated with zeros is the &quot;generator&quot; of fire. This simple version with linear cooling (-=1) yields a boring uniform output.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://fabiensanglard.net/doom_fire_psx/propagate_boring.png&quot; type=&quot;image/png&quot;/&gt;&lt;/p&gt;&lt;p&gt;We can tweak the spreadFire() function a little bit and change how fast a heat points decays. Adding randomness works well.&lt;/p&gt;
&lt;pre&gt;
 &lt;span&gt;function&lt;/span&gt; spreadFire&lt;span&gt;(&lt;/span&gt;src&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; rand &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;round&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;3.0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    firePixels&lt;span&gt;[&lt;/span&gt;src &lt;span&gt;-&lt;/span&gt; FIRE_WIDTH &lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; pixel &lt;span&gt;-&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;rand &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt; &lt;img src=&quot;http://fabiensanglard.net/doom_fire_psx/variable_decay.png&quot; type=&quot;image/png&quot;/&gt;&lt;/p&gt;&lt;p&gt;That's better. To improve the illusion further, the heat can be randomly propagated to go not only above but also left and right.&lt;br/&gt;&lt;/p&gt;
&lt;pre&gt;
 &lt;span&gt;function&lt;/span&gt; spreadFire&lt;span&gt;(&lt;/span&gt;src&lt;span&gt;)&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; rand &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;round&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Math&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;random&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;3.0&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;3&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    &lt;span&gt;var&lt;/span&gt; dst &lt;span&gt;=&lt;/span&gt; src &lt;span&gt;-&lt;/span&gt; rand &lt;span&gt;+&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
    firePixels&lt;span&gt;[&lt;/span&gt;dst &lt;span&gt;-&lt;/span&gt; FIRE_WIDTH &lt;span&gt;]&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; firePixels&lt;span&gt;[&lt;/span&gt;src&lt;span&gt;]&lt;/span&gt; &lt;span&gt;-&lt;/span&gt; &lt;span&gt;(&lt;/span&gt;rand &lt;span&gt;&amp;amp;&lt;/span&gt; &lt;span&gt;1&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;
 &lt;span&gt;}&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Et voila! Notice that by adjusting how the fire propagates up, wind can also be simulated. I will leave that as an exercise for the readers who had the courage to read up to here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Full Source Code&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Samuel's &lt;a href=&quot;https://codepen.io/svkaiser/pen/xXmOvY&quot;&gt;version&lt;/a&gt; (logically) looked a lot like assembly. If you want to take a look, here is a &lt;a href=&quot;https://github.com/fabiensanglard/DoomFirePSX/blob/master/flames.html&quot;&gt;cleaned up and simplified version&lt;/a&gt;.&lt;br/&gt;&lt;img id=&quot;doom&quot; src=&quot;http://fabiensanglard.net/doom_fire_psx/doom.png&quot; width=&quot;379&quot; height=&quot;260&quot; hidden=&quot;true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p id=&quot;paperbox&quot;&gt;&lt;a href=&quot;http://fabiensanglard.net/doom_fire_psx/#back_1&quot;&gt;^&lt;/a&gt; [1] Source: &lt;a href=&quot;http://fabiensanglard.net/gebbdoom&quot;&gt;The full story is detailed in Game Engine Black Book: DOOM&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://fabiensanglard.net/doom_fire_psx/#back_2&quot;&gt;^&lt;/a&gt; [2] Source: &lt;a href=&quot;https://twitter.com/fabynou/status/936329655308632064&quot;&gt;Twitter post, March 25th 2018&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;center&gt;*&lt;/center&gt;
&lt;/body&gt;</description>
<pubDate>Sat, 29 Dec 2018 09:59:24 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://fabiensanglard.net/doom_fire_psx/</dc:identifier>
</item>
<item>
<title>How Facebook Keeps Messenger from Crashing on New Year&amp;#039;s Eve</title>
<link>https://spectrum.ieee.org/tech-talk/computing/software/how-facebooks-software-engineers-prepare-messenger-for-new-years-eve</link>
<guid isPermaLink="true" >https://spectrum.ieee.org/tech-talk/computing/software/how-facebooks-software-engineers-prepare-messenger-for-new-years-eve</guid>
<description>&lt;img src=&quot;https://spectrum.ieee.org/image/MzE5OTkzNw.jpeg&quot; alt=&quot;An illustration shows a conversation in Facebook Messenger overlaid on a giant thumb to symbolize a Facebook &amp;quot;like.&amp;quot;&quot;/&gt; Illustration: IEEE Spectrum
&lt;section id=&quot;side-module&quot;&gt;&lt;div class=&quot;medium-top-ad&quot;&gt;
&lt;div class=&quot;ad-module&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;recommended-side&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Editor’s Picks&lt;/p&gt;
&lt;div id=&quot;article-rec&quot; readability=&quot;36&quot;&gt;
&lt;div class=&quot;image-column&quot;&gt;&lt;img src=&quot;https://spectrum.ieee.org/image/MzEzMzQxNg&quot; alt=&quot;David Patterson with computer hardware.&quot;/&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h4&gt;David Patterson Says It’s Time for New Computer Architectures and Software Languages&lt;/h4&gt;
&lt;/p&gt;

&lt;div class=&quot;image-column&quot;&gt;&lt;img src=&quot;https://spectrum.ieee.org/image/MjI3NDk1Mg&quot; alt=&quot;Image by Getty Images&quot;/&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h4&gt;Stalking on Facebook Is Easier Than You Think&lt;/h4&gt;
&lt;/p&gt;

&lt;div class=&quot;image-column&quot;&gt;&lt;img src=&quot;https://spectrum.ieee.org/image/MjI3OTg4Nw&quot; alt=&quot;null&quot;/&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h4&gt;Facebook Knows Your Friends—Even if They’re Not on Facebook&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;p&gt;On New Year’s Eve, millions of people will use Facebook’s Messenger app to wish friends and family a “Happy New Year!” If everything goes smoothly, those messages will reach recipients in fewer than 100 milliseconds, and life will go on. But if the service stalls or fails, a small team of software engineers based in the company’s New York City office will have to answer for it.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/isaacpayamahdout/&quot;&gt;Isaac Ahdout&lt;/a&gt;, engineering manager, and &lt;a href=&quot;https://www.linkedin.com/in/thomas-georgiou-94803323/&quot;&gt;Thomas Georgiou&lt;/a&gt;, software engineer, are both on that team. They’ve tested and tweaked the app throughout the year and will soon face their biggest annual performance exam. Messenger’s 1.3 billion monthly active users send more messages on New Year’s Eve than on any other day of the year. Many hit “send” (represented as a blue arrow in the app) immediately after the clock strikes midnight in &lt;a href=&quot;https://www.timeanddate.com/counters/firstnewyear.html&quot;&gt;their respective time zones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“There’s like this firehouse you can’t stop, of deliveries you have to make,” says Georgiou. “We have to keep up. Otherwise, you end up in a bad situation.”&lt;/p&gt;
&lt;p&gt;It’s a problem familiar to anyone who works on networks or services that see a dramatic spike in use at a particular time of day or year. U.S. telecommunications companies frequently install new base stations ahead of &lt;a href=&quot;https://www.adweek.com/brand-marketing/verizon-shows-what-it-took-to-wire-u-s-bank-stadium-for-73000-fans-at-the-super-bowl/&quot;&gt;Super Bowls&lt;/a&gt;, &lt;a href=&quot;https://www.theindependent.com/news/state_fair/state-fair-increases-ability-to-digitally-connect/article_963a2222-2186-11e7-b578-5b374c07b109.html&quot;&gt;state fairs&lt;/a&gt;, and &lt;a href=&quot;https://about.att.com/innovationblog/inauguration_network&quot;&gt;presidential inaugurations&lt;/a&gt; for similar reasons.&lt;/p&gt;
&lt;aside class=&quot;inlay pullquote lt med&quot;&gt;“The biggest thing we worry about is: How do you prevent that cascading failure from happening?” &lt;span class=&quot;pq-attrib&quot;&gt;—Thomas Georgiou, software engineer&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;For Facebook’s Messenger team, the challenge is slightly more complicated than shuffling a simple message from one user to another. Facebook allows people to set up large group chats, and shows senders a receipt every time a message is &lt;a href=&quot;https://www.facebook.com/help/messenger-app/iphone/926389207386625/&quot;&gt;delivered, sent, or read&lt;/a&gt;. These features compound the total number of messages that must be distributed across the service.&lt;/p&gt;
&lt;p&gt;Users also send and receive a higher percentage of photos and videos as they ring in the new year, compared to an average day. And people often try to resend messages that don’t appear to make it through right away, which piles on more requests.&lt;/p&gt;
&lt;p&gt;Or, as Ahdout puts it, “once you start falling behind, you fall behind more.”&lt;/p&gt;
&lt;p&gt;“The biggest thing we worry about is: How do you prevent that cascading failure from happening?” adds Georgiou.&lt;/p&gt;
&lt;p&gt;One way is to perform extensive &lt;a href=&quot;https://ieeexplore.ieee.org/document/7123673&quot;&gt;load testing&lt;/a&gt; ahead of time, to simulate the volume of messages that Facebook expects on New Year’s Eve based on activity in previous years. (The company declined to share its forecasts, and would not say how many messages were sent in previous years.) Load testing allows the team to validate how many messages a given server can handle before the team must shift traffic over to other servers in the network.  &lt;/p&gt;
&lt;p&gt;During the last New Year’s Eve, for example, one data center struggled with the volume of incoming messages, so the team directed traffic away from that center to another one. Following that incident, the group built tools to allow them to make those kinds of changes more easily this year.&lt;/p&gt;
&lt;img alt=&quot;A black and white photo shows Facebook's Messenger infrastructure team. &quot; src=&quot;https://spectrum.ieee.org/image/MzE5OTk2Ng.jpeg&quot;/&gt; Photo: Facebook Facebook’s Messenger infrastructure team gathers for a photo. 
&lt;p&gt;In addition to shifting loads, the Messenger team has developed other levers that it can pull “if things get really bad,” says Ahdout. Every new message sent to a server goes into a queue as part of &lt;a href=&quot;https://code.fb.com/production-engineering/building-mobile-first-infrastructure-for-messenger/&quot;&gt;a service called Iris&lt;/a&gt;. There, messages are assigned a timeout—a period of time after which, that message will drop out of the queue to make room for new messages. During a high-volume event, this allows the team to quickly discard certain types of messages, such as read receipts, to focus its resources on delivering ones that users have composed.&lt;/p&gt;
&lt;p&gt;“We set up our systems so that if it comes to that, they start shedding the lowest-priority traffic,” says Ahdout. “So if it came to it, Iris would rather deliver a message and drop the read receipt, rather than drop the message and deliver the read receipt.”&lt;/p&gt;
&lt;p&gt;Georgiou says the group can also sacrifice the accuracy of the green dot displayed in the Messenger app that indicates a friend is currently online. Slowing the frequency at which the dot is updated can relieve network congestion. Or, the team could instruct the system to temporarily delay certain functions—such as deleting information about old messages—for a few hours to free up CPUs that would ordinarily perform that task, in order to process more messages in the moment.&lt;/p&gt;
&lt;aside class=&quot;inlay pullquote rt med&quot;&gt;“We set up our systems so that if it comes to that, they start shedding the lowest-priority traffic.” &lt;span class=&quot;pq-attrib&quot;&gt;—Isaac Ahdout, engineering manager&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;All of these options fall under the notion of “graceful degradation,” says Ahdout. “Rather than having your service dying on the floor and no one using it, you make it a little less awesome and people can still use it.” Fortunately, the Messenger team didn’t have to resort to any of these measures last year.&lt;/p&gt;
&lt;p&gt;Aside from those efforts, Messenger’s engineers also spend a lot of time on efficiency projects designed to make the most of the CPUs and memory within each server. Ahead of New Year’s Eve 2018, for example, the team added a scheduler, which is a program that allows the system to “batch” similar messages together.&lt;/p&gt;
&lt;p&gt;“You can imagine that our servers are getting many requests concurrently,” explains Ahdout. “You can bundle some of those together into a single large request before you send it downstream. Doing that, you reduce the computational load on downstream systems.”&lt;/p&gt;
&lt;p&gt;Batches are formed based on a principle called affinity, which can be derived from a variety of characteristics. For example, two messages may have higher affinity if they are traveling to the same recipient, or require similar resources from the back end. As traffic increases, the Messenger team can have the system batch more aggressively. Doing so will increase latency (a message’s roundtrip delay) by a few milliseconds, but makes it more likely that all messages will get through.&lt;/p&gt;
&lt;p&gt;This year for New Year’s Eve, neither Ahdout nor Georgiou will be on duty &lt;a href=&quot;https://www.timeanddate.com/counters/firstnewyear.html&quot;&gt;as midnight approaches in Asia&lt;/a&gt;, when the service sees its largest spike in messages, but Ahdout says he will stay close to his laptop, just in case. “Basically, a lot of this work never really sees the light of day, in the sense that things go well, or if they don’t, we handle them so gracefully that users don’t even know what happened,” he says.&lt;/p&gt;
&lt;p&gt;“It’s sort of been awhile since there was a major problem,” he adds. Fingers crossed. &lt;/p&gt;
</description>
<pubDate>Sat, 29 Dec 2018 00:35:51 +0000</pubDate>
<dc:creator>victorvation</dc:creator>
<og:title>How Facebook Keeps Messenger From Crashing on New Year's Eve</og:title>
<og:url>https://spectrum.ieee.org/tech-talk/computing/software/how-facebooks-software-engineers-prepare-messenger-for-new-years-eve</og:url>
<og:description>Messenger's 1.3 billion users send more messages on New Year’s Eve than on any other day of the year</og:description>
<og:image>https://spectrum.ieee.org/image/MzE5OTk2Mw.jpeg</og:image>
<og:type>blog-tech-talk</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://spectrum.ieee.org/tech-talk/computing/software/how-facebooks-software-engineers-prepare-messenger-for-new-years-eve</dc:identifier>
</item>
<item>
<title>Why I’m so “against” Ethereum</title>
<link>https://threadreaderapp.com/thread/1078682801954799617.html</link>
<guid isPermaLink="true" >https://threadreaderapp.com/thread/1078682801954799617.html</guid>
<description>&lt;span class=&quot;nop nop-start&quot;&gt;2/&lt;/span&gt; First, ETH’s architecture &amp;amp; culture is _opposite_ that of Bitcoin, and yet claims to offer same solutions: decentralization, immutability, SoV, asset issuance, smart contracts, …&lt;p&gt;Second, ETH is considered a crypto ‘blue chip’, thus colors perception of uninformed newcomers.&lt;/p&gt;</description>
<pubDate>Fri, 28 Dec 2018 23:57:55 +0000</pubDate>
<dc:creator>DyslexicAtheist</dc:creator>
<og:title>Thread by @TuurDemeester: &quot;1/ People often ask me why I’m so “against” Ethereum. Why do I go out of my way to point out flaws or make analogies that put it in a bad li […]&quot;</og:title>
<og:image>https://threadreaderapp.com/images/screenshots/thread/1078682801954799617.jpg</og:image>
<og:url>https://threadreaderapp.com/thread/1078682801954799617.html</og:url>
<og:description>Thread by @TuurDemeester: &quot;1/ People often ask me why I’m so “against” Ethereum. Why do I go out of my way to point out flaws or make analogi a bad light? 2/ First, ETH’s architecture &amp;amp; culture is _opposite_ that of Bitcoin, and yet claims to off […]&quot;</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://threadreaderapp.com/thread/1078682801954799617.html</dc:identifier>
</item>
<item>
<title>Teachers Quit Jobs at Highest Rate on Record</title>
<link>https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</guid>
<description>&lt;p&gt;Teachers and other public education employees, such as community-college faculty, school psychologists and janitors, are quitting their jobs at the fastest rate on record, government data shows.&lt;/p&gt; &lt;p&gt;A tight labor market with historically low unemployment has encouraged Americans in a variety of occupations to quit their jobs at elevated rates, with the expectation they can find something better. But quitting among public educators stands out because the field is one where stability is viewed as a key perk and longevity often rewarded....
  &lt;/p&gt;</description>
<pubDate>Fri, 28 Dec 2018 23:20:23 +0000</pubDate>
<dc:creator>dpflan</dc:creator>
<og:title>Teachers Quit Jobs at Highest Rate on Record </og:title>
<og:description>Teachers and other public education employees—such as community-college faculty, school psychologists and janitors—are quitting their jobs at the fastest rate on record, government data show.</og:description>
<og:url>https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</og:url>
<og:image>https://si.wsj.net/public/resources/images/B3-CT536_teache_SOC_20181227171926.jpg</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/teachers-quit-jobs-at-highest-rate-on-record-11545993052</dc:identifier>
</item>
<item>
<title>Things I Don’t Know as of 2018</title>
<link>https://overreacted.io/things-i-dont-know-as-of-2018/</link>
<guid isPermaLink="true" >https://overreacted.io/things-i-dont-know-as-of-2018/</guid>
<description>&lt;p&gt;People often assume that I know far more than I actually do. That’s not a bad problem to have and I’m not complaining. (Folks from minority groups often suffer the opposite bias despite their hard-earned credentials, and that &lt;em&gt;sucks&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this post I’ll offer an incomplete list of programming topics that people often wrongly assume that I know.&lt;/strong&gt; I’m not saying &lt;em&gt;you&lt;/em&gt; don’t need to learn them — or that I don’t know &lt;em&gt;other&lt;/em&gt; useful things. But since I’m not in a vulnerable position myself right now, I can be honest about this.&lt;/p&gt;
&lt;p&gt;Here’s why I think it’s important.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;First, there is often an unrealistic expectation that an experienced engineer knows every technology in their field. Have you seen a “learning roadmap” that consists of a hundred libraries and tools? It’s useful — but intimidating.&lt;/p&gt;
&lt;p&gt;What’s more, no matter how experienced you get, you may still find yourself switching between feeling capable, inadequate (“Impostor syndrome”), and overconfident (“Dunning–Kruger effect”). It depends on your environment, job, personality, teammates, mental state, time of day, and so on.&lt;/p&gt;
&lt;p&gt;Experienced developers sometimes open up about their insecurities to encourage beginners. But there’s a world of difference between a seasoned surgeon who still gets the jitters and a student holding their first scalpel!&lt;/p&gt;
&lt;p&gt;Hearing how “we’re all junior developers” can be disheartening and sound like empty talk to the learners faced with an actual gap in knowledge. Feel-good confessions from well-intentioned practitioners like me can’t bridge it.&lt;/p&gt;
&lt;p&gt;Still, even experienced engineers have many knowledge gaps. This post is about mine, and I encourage those who can afford similar vulnerability to share their own. But let’s not devalue our experience while we do that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We can admit our knowledge gaps, may or may not feel like impostors, and still have deeply valuable expertise that takes years of hard work to develop.&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;With that disclaimer out of the way, here’s just a few things I don’t know:&lt;/p&gt;
&lt;ul readability=&quot;46.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Unix commands and Bash.&lt;/strong&gt; I can &lt;code class=&quot;language-text&quot;&gt;ls&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;cd&lt;/code&gt; but I look up everything else. I get the concept of piping but I’ve only used it in simple cases. I don’t know how to use &lt;code class=&quot;language-text&quot;&gt;xargs&lt;/code&gt; to create complex chains, or how to compose and redirect different output streams. I also never properly learned Bash so I can only write very simple (and often buggy) shell scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Low-level languages.&lt;/strong&gt; I understand Assembly lets you store things in memory and jump around the code but that’s about it. I wrote a few lines of C and understand what a pointer is, but I don’t know how to use &lt;code class=&quot;language-text&quot;&gt;malloc&lt;/code&gt; or other manual memory management techniques. Never played with Rust.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Networking stack.&lt;/strong&gt; I know computers have IP addresses, and DNS is how we resolve hostnames. I know there’s low level protocols like TCP/IP to exchange packets that (maybe?) ensure integrity. That’s it — I’m fuzzy on details.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Containers.&lt;/strong&gt; I have no idea about how to use Docker or Kubernetes. (Are those related?) I have a vague idea that they let me spin up a separate VM in a predictable way. Sounds cool but I haven’t tried it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Serverless.&lt;/strong&gt; Also sounds cool. Never tried it. I don’t have a clear idea of how that model changes backend programming (if it does at all).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Microservices.&lt;/strong&gt; If I understand correctly, this just means “many API endpoints talking to each other”. I don’t know what are the practical advantages or downsides of this approach because I haven’t worked with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Python.&lt;/strong&gt; I feel bad about this one — I &lt;em&gt;have&lt;/em&gt; worked with Python for several years at some point and I’ve never bothered to actually learn it. There are many things there like import behavior that are completely opaque to me.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Node backends.&lt;/strong&gt; I understand how to run Node, used some APIs like &lt;code class=&quot;language-text&quot;&gt;fs&lt;/code&gt; for build tooling, and can set up Express. But I’ve never talked from Node to a database and don’t really know how to write a backend in it. I’m also not familiar with React frameworks like Next beyond a “hello world”.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Native platforms.&lt;/strong&gt; I tried learning Objective C at some point but it didn’t work out. I haven’t learned Swift either. Same about Java. (I could probably pick it up though since I worked with C#.)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Algorithms.&lt;/strong&gt; The most you’ll get out of me is bubble sort and maybe quicksort on a good day. I can probably do simple graph traversing tasks if they’re tied to a particular practical problem. I understand the O(n) notation but my understanding isn’t much deeper than “don’t put loops inside loops”.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Functional languages.&lt;/strong&gt; Unless you count JavaScript, I’m not fluent in any traditionally functional language. (I’m only fluent in C# and JavaScript — and I already forgot most of C#.) I struggle to read either LISP-inspired (like Clojure), Haskell-inspired (like Elm), or ML-inspired (like OCaml) code.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Functional terminology.&lt;/strong&gt; Map and reduce is as far as I go. I don’t know monoids, functors, etc. I know what a monad is but maybe that’s an illusion.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Modern CSS.&lt;/strong&gt; I don’t know Flexbox or Grid. Floats are my jam.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;CSS Methodologies.&lt;/strong&gt; I used BEM (meaning the CSS part, not the original BEM) but that’s all I know. I haven’t tried OOCSS or other methodologies.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;SCSS / Sass.&lt;/strong&gt; Never got to learn them.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;CORS.&lt;/strong&gt; I dread these errors! I know I need to set up some headers to fix them but I’ve wasted hours here in the past.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;HTTPS / SSL.&lt;/strong&gt; Never set it up. Don’t know how it works beyond the idea of private and public keys.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;GraphQL.&lt;/strong&gt; I can read a query but I don’t really know how to express stuff with nodes and edges, when to use fragments, and how pagination works there.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Sockets.&lt;/strong&gt; My mental model is they let computers talk to each other outside the request/response model but that’s about all I know.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Streams.&lt;/strong&gt; Aside from Rx Observables, I haven’t worked with streams closely. I used old Node streams one or two times but always messed up error handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Electron.&lt;/strong&gt; Never tried it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;TypeScript.&lt;/strong&gt; I understand the concept of types and can read annotations but I’ve never written it. The few times I tried, I ran into difficulties.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Deployment and devops.&lt;/strong&gt; I can manage to send some files over FTP or kill some processes but that’s the limit of my devops skills.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Graphics.&lt;/strong&gt; Whether it’s canvas, SVG, WebGL or low-level graphics, I’m not productive in it. I get the overall idea but I’d need to learn the primitives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Of course this list is not exhaustive. There are many things that I don’t know.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;It might seem like a strange thing to discuss. It even feels wrong to write it. Am I boasting of my ignorance? My intended takeaway from this post is that:&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Even your favorite developers may not know many things that you know.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Regardless of your knowledge level, your confidence can vary greatly.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Experienced developers have valuable expertise despite knowledge gaps.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’m aware of my knowledge gaps (at least, some of them). I can fill them in later if I become curious or if I need them for a project.&lt;/p&gt;
&lt;p&gt;This doesn’t devalue my knowledge and experience. There’s plenty of things that I can do well. For example, learning technologies when I need them.&lt;/p&gt;
</description>
<pubDate>Fri, 28 Dec 2018 22:40:14 +0000</pubDate>
<dc:creator>nhebb</dc:creator>
<og:url>https://overreacted.io/things-i-dont-know-as-of-2018/</og:url>
<og:title>Things I Don’t Know as of 2018</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://overreacted.io/things-i-dont-know-as-of-2018/</dc:identifier>
</item>
<item>
<title>Audiophiles in Japan Are Installing Their Own Power Poles</title>
<link>https://www.wsj.com/articles/a-gift-for-music-lovers-who-have-it-all-a-personal-utility-pole-1471189463</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/a-gift-for-music-lovers-who-have-it-all-a-personal-utility-pole-1471189463</guid>
<description>&lt;p&gt;TOKYO—Takeo Morita wanted absolutely the best fidelity possible from his audio system, so he bought a utility pole.&lt;/p&gt; &lt;p&gt;The 82-year-old lawyer already had a $60,000 American-made amplifier, 1960s German loudspeakers that once belonged to a theater, Japanese audio cables threaded with gold and silver, and other pricey equipment.&lt;/p&gt; &lt;p&gt;Normal electricity...
  &lt;/p&gt;</description>
<pubDate>Fri, 28 Dec 2018 21:09:58 +0000</pubDate>
<dc:creator>tlrobinson</dc:creator>
<og:title>A Gift for Music Lovers Who Have It All: A Personal Utility Pole</og:title>
<og:description>Japan’s extreme audiophiles install private utility poles and transformers for ‘pure’ electricity.</og:description>
<og:url>https://www.wsj.com/articles/a-gift-for-music-lovers-who-have-it-all-a-personal-utility-pole-1471189463</og:url>
<og:image>https://si.wsj.net/public/resources/images/BN-PJ946_JSOUND_TOP_20160814140701.jpg</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/a-gift-for-music-lovers-who-have-it-all-a-personal-utility-pole-1471189463</dc:identifier>
</item>
<item>
<title>How AlphaZero Mastered Its Games</title>
<link>https://www.newyorker.com/science/elements/how-the-artificial-intelligence-program-alphazero-mastered-its-games</link>
<guid isPermaLink="true" >https://www.newyorker.com/science/elements/how-the-artificial-intelligence-program-alphazero-mastered-its-games</guid>
<description>&lt;div class=&quot;SectionBreak SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;86.268924302789&quot;&gt;
&lt;p&gt;A few weeks ago, a group of researchers from Google’s artificial-intelligence subsidiary, DeepMind, published a &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;http://science.sciencemag.org/content/362/6419/1140&quot; target=&quot;_blank&quot;&gt;paper&lt;/a&gt; in the journal &lt;em class=&quot;&quot;&gt;Science&lt;/em&gt; that described an A.I. for playing games. While their system is general-purpose enough to work for many two-person games, the researchers had adapted it specifically for Go, chess, and shogi (“Japanese chess”); it was given no knowledge beyond the rules of each game. At first it made random moves. Then it started learning through self-play. Over the course of nine hours, the chess version of the program played forty-four million games against itself on a massive cluster of specialized Google hardware. After two hours, it began performing better than human players; after four, it was beating the best chess engine in the world.&lt;/p&gt;

&lt;p&gt;The program, called AlphaZero, descends from AlphaGo, an A.I. that became known for defeating Lee Sedol, the world’s best Go player, in March of 2016. Sedol’s defeat was a stunning upset. In “AlphaGo,” a documentary released earlier this year on Netflix, the filmmakers follow both the team that developed the A.I. and its human opponents, who have devoted their lives to the game. We watch as these humans experience the stages of a new kind of grief. At first, they don’t see how they can lose to a machine: “I believe that human intuition is still too advanced for A.I. to have caught up,” Sedol says, the day before his five-game match with AlphaGo. Then, when the machine starts winning, a kind of panic sets in. In one particularly poignant moment, Sedol, under pressure after having lost his first game, gets up from the table and, leaving his clock running, walks outside for a cigarette. He looks out over the rooftops of Seoul. (On the Internet, more than fifty million people were watching the match.) Meanwhile, the A.I., unaware that its opponent has gone anywhere, plays a move that commentators called creative, surprising, and beautiful. In the end, Sedol lost, 1-4. Before there could be acceptance, there was depression. “I want to apologize for being so powerless,” he said in a press conference. Eventually, Sedol, along with the rest of the Go community, came to appreciate the machine. “I think this will bring a new paradigm to Go,” he said. Fan Hui, the European champion, agreed. “Maybe it can show humans something we’ve never discovered. Maybe it’s beautiful.”&lt;/p&gt;
&lt;p&gt;AlphaGo was a triumph for its creators, but still unsatisfying, because it depended so much on human Go expertise. The A.I. learned which moves it should make, in part, by trying to mimic world-class players. It also used a set of hand-coded heuristics to avoid the worst blunders when looking ahead in games. To the researchers building AlphaGo, this knowledge felt like a crutch. They set out to build a new version of the A.I. that learned on its own, as a “tabula rasa.”&lt;/p&gt;
&lt;p&gt;The result, AlphaGo Zero, detailed in a &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://www.nature.com/articles/nature24270&quot; target=&quot;_blank&quot;&gt;paper&lt;/a&gt; published in October, 2017, was so called because it had zero knowledge of Go beyond the rules. This new program was much less well-known; perhaps you can ask for the world’s attention only so many times. But in a way it was the more remarkable achievement, one that no longer had much to do with Go at all. In fact, less than two months later, DeepMind published a &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://arxiv.org/abs/1712.01815&quot; target=&quot;_blank&quot;&gt;preprint&lt;/a&gt; of a third paper, showing that the algorithm behind AlphaGo Zero could be generalized to any two-person, zero-sum game of &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://en.wikipedia.org/wiki/Perfect_information&quot; target=&quot;_blank&quot;&gt;perfect information&lt;/a&gt; (that is, a game in which there are no hidden elements, such as face-down cards in poker). DeepMind dropped the “Go” from the name and christened its new system AlphaZero. At its core was an algorithm so powerful that you could give it the rules of humanity’s richest and most studied games and, later that day, it would become the best player there has ever been. Perhaps more surprising, this iteration of the system was also by far the simplest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;78&quot;&gt;
&lt;p&gt;A typical chess engine is a hodgepodge of tweaks and shims made over decades of trial and error. The best engine in the world, Stockfish, is open source, and it gets better by a kind of Darwinian selection: someone suggests an idea; tens of thousands of games are played between the version with the idea and the version without it; the best version wins. As a result, it is not a particularly elegant program, and it can be hard for coders to understand. Many of the changes programmers make to Stockfish are best formulated in terms of chess, not computer science, and concern how to evaluate a given situation on the board: Should a knight be worth 2.1 points or 2.2? What if it’s on the third rank, and the opponent has an opposite-colored bishop? To illustrate this point, David Silver, the head of research at DeepMind, once listed the moving parts in Stockfish. There are more than fifty of them, each requiring a significant amount of code, each a bit of hard-won chess arcana: the Counter Move Heuristic; databases of known endgames; evaluation modules for Doubled Pawns, Trapped Pieces, Rooks on (Semi) Open Files, and so on; strategies for searching the tree of possible moves, like “aspiration windows” and “iterative deepening.”&lt;/p&gt;
&lt;p&gt;AlphaZero, by contrast, has only two parts: a neural network and an algorithm called Monte Carlo Tree Search. (In a nod to the gaming mecca, mathematicians refer to approaches that involve some randomness as “Monte Carlo methods.”) The idea behind M.C.T.S., as it’s often known, is that a game like chess is really a tree of possibilities. If I move my rook to d8, you could capture it or let it be, at which point I could push a pawn or move my bishop or protect my queen. . . . The trouble is that this tree gets incredibly large incredibly quickly. No amount of computing power would be enough to search it exhaustively. An expert human player is an expert precisely because her mind automatically identifies the essential parts of the tree and focusses its attention there. Computers, if they are to compete, must somehow do the same.&lt;/p&gt;
&lt;div class=&quot;Callout__feature-xsmall___3cfPv&quot; data-type=&quot;callout&quot; data-callout=&quot;feature-xsmall&quot;&gt;
&lt;div class=&quot;ImageEmbed__container___1S6AV&quot;&gt;
&lt;div class=&quot;Lightbox__lightbox___2lLZl Lightbox__white___jj_9p&quot; role=&quot;button&quot; tabindex=&quot;0&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;div class=&quot;placeholder-content&quot;&gt;
&lt;div class=&quot;Image__image___1PhYl Figure__image___1hDvt ImageEmbed__image___VwXNk&quot; role=&quot;button&quot; tabindex=&quot;0&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://media.newyorker.com/photos/5c24f47dd2db9849ec9e47be/master/w_727,c_limit/Somers-AlphaZero-Secondary.jpg&quot; title=&quot;&quot;/&gt;&lt;button class=&quot;Button__button___2vDCa Button__seeMore___czyKz ImageEmbed__button___1EF1B&quot;&gt;

&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span class=&quot;ImageCaption__caption___1EOQO ImageCaption__caption___1EOQO&quot;&gt;Chess commentators have praised AlphaZero, declaring that the engine “plays like a human on fire.”&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;small class=&quot;ImageCaption__credit___rg3mC&quot;&gt;Photograph Courtesy DeepMind Technologies&lt;/small&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is where the neural network comes in. AlphaZero’s neural network receives, as input, the layout of the board for the last few moves of the game. As output, it estimates how likely the current player is to win and predicts which of the currently available moves are likely to work best. The M.C.T.S. algorithm uses these predictions to decide where to focus in the tree. If the network guesses that ‘knight-takes-bishop’ is likely to be a good move, for example, then the M.C.T.S. will devote more of its time to exploring the consequences of that move. But it balances this “exploitation” of promising moves with a little “exploration”: it sometimes picks moves it thinks are unlikely to bear fruit, just in case they do.&lt;/p&gt;
&lt;p&gt;At first, the neural network guiding this search is fairly stupid: it makes its predictions more or less at random. As a result, the Monte Carlo Tree Search starts out doing a pretty bad job of focussing on the important parts of the tree. But the genius of AlphaZero is in how it learns. It takes these two half-working parts and has them hone each other. Even when a dumb neural network does a bad job of predicting which moves will work, it’s still useful to look ahead in the game tree: toward the end of the game, for instance, the M.C.T.S. can still learn which positions actually lead to victory, at least some of the time. This knowledge can then be used to improve the neural network. When a game is done, and you know the outcome, you look at what the neural network predicted for each position (say, that there’s an 80.2 per cent chance that castling is the best move) and compare that to what actually happened (say, that the percentage is more like 60.5); you can then “correct” your neural network by tuning its synaptic connections until it prefers winning moves. In essence, all of the M.C.T.S.’s searching is distilled into new weights for the neural network.&lt;/p&gt;
&lt;p&gt;With a slightly better network, of course, the search gets slightly less misguided—and this allows it to search better, thereby extracting better information for training the network. On and on it goes, in a feedback loop that ratchets up, very quickly, toward the plateau of known ability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;64.34328042328&quot;&gt;
&lt;p&gt;When the AlphaGo Zero and AlphaZero papers were published, a small army of enthusiasts began describing the systems in &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://medium.com/applied-data-science/how-to-build-your-own-alphazero-ai-using-python-and-keras-7f664945c188&quot; target=&quot;_blank&quot;&gt;blog posts&lt;/a&gt; and &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://www.youtube.com/watch?v=Fbs4lnGLS8M&quot; target=&quot;_blank&quot;&gt;YouTube videos&lt;/a&gt; and building their own &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://github.com/suragnair/alpha-zero-general&quot; target=&quot;_blank&quot;&gt;copycat versions&lt;/a&gt;. Most of this work was explanatory—it flowed from the amateur urge to learn and share that gave rise to the Web in the first place. But a couple of efforts also sprung up to replicate the work at a large scale. The DeepMind papers, after all, had merely described the greatest Go- and chess-playing programs in the world—they hadn’t contained the source code, and the company hadn’t made the programs themselves available to players. Having declared victory, its engineers had departed the field.&lt;/p&gt;
&lt;p&gt;Gian-Carlo Pascutto, a computer programmer who works at the Mozilla Corporation, had a track record of building competitive game engines, first in chess, then in Go. He followed the latest research. As the combination of Monte Carlo Tree Search and a neural network became the state of the art in Go A.I.s, Pascutto built the world’s most successful open-source Go engines—first &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://www.sjeng.org/leela.html&quot; target=&quot;_blank&quot;&gt;Leela&lt;/a&gt;, then &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://github.com/gcp/leela-zero&quot; target=&quot;_blank&quot;&gt;LeelaZero&lt;/a&gt;—which mirrored the advances made by DeepMind. The trouble was that DeepMind had access to Google’s vast cloud and Pascutto didn’t. To train its Go engine, DeepMind used five thousand of Google’s “Tensor Processing Units”—chips specifically designed for neural-network calculations—for thirteen days. To do the same work on his desktop system, Pascutto would have to run it for seventeen hundred years.&lt;/p&gt;
&lt;p&gt;To compensate for his lack of computing power, Pascutto distributed the effort. LeelaZero is a federated system: anyone who wants to participate can download the latest version, donate whatever computing power he has to it, and upload the data he generates so that the system can be slightly improved. The distributed LeelaZero community has had their system play more than ten million games against itself—a little more than AlphaGo Zero. It is now one of the strongest existing Go engines.&lt;/p&gt;

&lt;p&gt;It wasn’t long before the idea was extended to chess. In December of last year, when the AlphaZero preprint was published, “it was like a bomb hit the community,” Gary Linscott said. Linscott, a computer scientist who had worked on Stockfish, used the existing LeelaZero code base, and the new ideas in the AlphaZero paper, to create &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://github.com/LeelaChessZero/lczero&quot; target=&quot;_blank&quot;&gt;Leela Chess Zero&lt;/a&gt;. (For Stockfish, he had developed a testing framework so that new ideas for the engine could be distributed to a fleet of volunteers, and thus vetted more quickly; distributing the training for a neural network was a natural next step.) There were kinks to sort out, and educated guesses to make about details that the DeepMind team had left out of their papers, but within a few months the neural network began improving. The chess world was already obsessed with AlphaZero: &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://www.chess.com/survey/is-google-s-alphazero-the-best-chess-player-on-the-planet&quot; target=&quot;_blank&quot;&gt;posts on&lt;/a&gt; chess.com celebrated the engine; commentators and grandmasters &lt;a class=&quot;ArticleBody__link___1FS03&quot; href=&quot;https://www.youtube.com/watch?v=lFXJWPhDsSY&quot; target=&quot;_blank&quot;&gt;pored over&lt;/a&gt; the handful of AlphaZero games that DeepMind had released with their paper, declaring that this was “how chess ought to be played,” that the engine “plays like a human on fire.” Quickly, Lc0, as Leela Chess Zero became known, attracted hundreds of volunteers. As they contributed their computer power and improvements to the source code, the engine got even better. Today, one core contributor suspects that it is just a few months away from overtaking Stockfish. Not long after, it may become better than AlphaZero itself.&lt;/p&gt;
&lt;p&gt;When we spoke over the phone, Linscott marvelled that a project like his, which would once have taken a talented doctoral student several years, could now be done by an interested amateur in a couple of months. Software libraries for neural networks allow for the replication of a world-beating design using only a few dozen lines of code; the tools already exist for distributing computation among a set of volunteers, and chipmakers such as Nvidia have put cheap and powerful G.P.U.s—graphics-processing chips, which are perfect for training neural networks—into the hands of millions of ordinary computer users. An algorithm like M.C.T.S. is simple enough to be implemented in an afternoon or two. You don’t even need to be an expert in the game for which you’re building an engine. When he built LeelaZero, Pascutto hadn’t played Go for about twenty years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;SectionBreak SectionBreak__sectionBreak___1ppA7&quot; readability=&quot;79&quot;&gt;
&lt;p&gt;David Silver, the head of research at DeepMind, has pointed out a seeming paradox at the heart of his company’s recent work with games: the simpler its programs got—from AlphaGo to AlphaGo Zero to AlphaZero—the better they performed. “Maybe one of the principles that we’re after,” he said, in a talk in December of 2017, “is this idea that by doing less, by removing complexity from the algorithm, it enables us to become more general.” By removing the Go knowledge from their Go engine, they made a better Go engine—and, at the same time, an engine that could play shogi and chess.&lt;/p&gt;
&lt;p&gt;It was never obvious that things would turn out this way. In 1953, Alan Turing, who helped create modern computing, wrote a short paper titled, “Digital Computers Applied to Games.” In it, he developed a chess program “based on an introspective analysis of my thought processes while playing.” The program was simple, but in its case simplicity was no virtue: like Turing, who wasn’t a gifted chess player, it missed much of the depth of the game and didn't play very well. Even so, Turing conjectured that the idea that “one cannot programme a machine to play a better game than one plays oneself” was a “rather glib view.” Although it sounds right to say that “no animal can swallow an animal heavier than itself,” plenty of animals can. Similarly, Turing suggested, there might be no contradiction in a bad chess player making a chess program that plays brilliantly. One tantalizing way to do it would be to have the program learn for itself.&lt;/p&gt;
&lt;p&gt;The success of AlphaZero seems to bear this out. It has a simple structure, but it’s capable of learning surprisingly deep features of the games it plays. In one section of the AlphaGo Zero paper, the DeepMind team illustrates how their A.I., after a certain number of training cycles, discovers strategies well-known to master players, only to discard them just a few cycles later. It is odd and a little unsettling to see humanity’s best ideas trundled over on the way to something better; it hits close to home in a way that seeing a physical machine exceed us—a bulldozer shifting a load of earth, say—doesn’t. In a recent editorial in &lt;em class=&quot;&quot;&gt;Science&lt;/em&gt;, Garry Kasparov, the former chess champion who lost to I.B.M.’s Deep Blue in 1997, argues that AlphaZero doesn’t play chess in a way that reflects the presumably systematic “priorities and prejudices of programmers”; instead—even though it searches far fewer positions per move than a traditional engine—it plays in an open, aggressive style and seems to think in terms of strategy rather than tactics, like a human with uncanny vision. “Because AlphaZero programs itself,” Kasparov writes, “I would say that its style reflects the truth.”&lt;/p&gt;
&lt;p&gt;Playing chess like a human, of course, isn't the same thing as thinking about chess like a human, or learning like one. There is an old saying that game-playing is the &lt;em class=&quot;&quot;&gt;Drosophila&lt;/em&gt; of A.I.: as the fruit fly is to biologists, so games like Go and chess are to computer scientists studying the mechanisms of intelligence. It’s an evocative analogy. And yet it could be that the task of playing chess, once it’s converted into the task of searching tens of thousands of nodes per second in a game tree, exercises a different kind of intelligence than the one we care about most. Played in this way, chess might be more like earth-moving than we thought: an activity that, in the end, isn’t our forté, and so shouldn’t be all that dear to our souls. To learn, AlphaZero needs to play millions more games than a human does— but, when it’s done, it plays like a genius. It relies on churning faster than a person ever could through a deep search tree, then uses a neural network to process what it finds into something that resembles intuition. Surely the program teaches us something new about intelligence. But its success also underscores just how much the world’s best human players can see by means of a very different process—one based on reading, talking, and feeling, in addition to playing. What may be most surprising is that we humans have done as well as we have in games that seem, now, to have been made for machines.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 28 Dec 2018 20:36:04 +0000</pubDate>
<dc:creator>jsomers</dc:creator>
<og:image>https://media.newyorker.com/photos/5c24f4778822322ea4b3befe/16:9/w_1200,h_630,c_limit/Somers-AlphaZero.jpg</og:image>
<og:title>How the Artificial Intelligence Program AlphaZero Mastered Its Games</og:title>
<og:description>At its core was an algorithm so powerful that you could give it the rules of humanity’s richest and most studied games and, later that day, it would become the best player there has ever been.</og:description>
<og:url>https://www.newyorker.com/science/elements/how-the-artificial-intelligence-program-alphazero-mastered-its-games</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.newyorker.com/science/elements/how-the-artificial-intelligence-program-alphazero-mastered-its-games</dc:identifier>
</item>
<item>
<title>What Happens to Kid Culture When Streets Are Closed to Cars</title>
<link>https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</link>
<guid isPermaLink="true" >https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</guid>
<description>&lt;img class=&quot;c-lead-image__img&quot; srcset=&quot;https://cdn.citylab.com/media/img/citylab/2018/11/credit_pontevedra_city_council_DSC_5451/300.jpg?mod=1543247666&quot; alt=&quot;Kids play soccer in a main square without cars.&quot; itemprop=&quot;contentUrl&quot; onload=&quot;performance.mark(&amp;quot;citylab_lead_image_loaded&amp;quot;)&quot;/&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img class=&quot;c-lead-image__img&quot; src=&quot;https://cdn.citylab.com/media/img/citylab/2018/11/credit_pontevedra_city_council_DSC_5451/300.jpg?mod=1543247666&quot; alt=&quot;Kids play soccer in a main square without cars.&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt; &lt;span class=&quot;c-lead-image__caption&quot; itemprop=&quot;caption&quot;&gt;Kids play soccer on a carless street in Pontevedra.&lt;/span&gt; &lt;span class=&quot;c-lead-image__attribution&quot; itemprop=&quot;creator&quot;&gt;Pontevedra City Council&lt;/span&gt;

&lt;h2 class=&quot;l-article__dek o-small-container&quot; itemprop=&quot;description&quot;&gt;In the Spanish city Pontevedra, a family-friendly “pedestrianization” policy has helped increase the population of kids, despite the country’s low birth rates.&lt;/h2&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-1&quot; readability=&quot;74&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;PONTEVEDRA—Once a city with narrow streets invaded by traffic and city squares more like parking lots, the roads of Pontevedra, Spain, are now often filled with baby strollers and children playing. Kids carry their toys in small backpacks and spread them on the pavement to share with other kids. Playgrounds with swing sets and slides are deliberately unencumbered by fences. “We want children to play all over our city, and to play whatever game comes to mind,” said Cesar Mosquera, the Urban Councilor of Pontevedra.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;By restricting traffic and eliminating physical barriers, the city council has redesigned Pontevedra from the sight line of a child. Doing so, Mosquera believes, helps the city address everybody’s needs, especially the disadvantaged. “Where there are children, there are healthy adults,” Mosquera said. The policy, which has been expanding for almost two decades now, has had many impacts on the community. One of the most tangible: The once-languishing historic city center has become a friendlier space for kids and their caretakers.&lt;/p&gt;
&lt;/section&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-2&quot; readability=&quot;89.339207048458&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;This trend is reflected in the demographics of Pontevedra. The city has attracted young families from throughout Spain’s northwest region to settle in the city, even as Spain overall &lt;a href=&quot;https://www.reuters.com/article/us-spain-economy-population/spanish-deaths-outpace-births-at-fastest-rate-since-records-began-in-1941-idUSKBN1JF1C3&quot;&gt;grapples with low birth rates&lt;/a&gt;. In the last decade, Pontevedra has experienced the most growth compared to other major cities in the region of Galicia. The newly revitalized, now pedestrian-focused town grew from 73,871 neighbors in 1998 to 82,671 in 2017&lt;strong&gt;,&lt;/strong&gt; according to the Statistics Institute of Galicia.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Since pedestrianization started in 2000, the population of kids age 0 to 14 also increased by 8 percent in Pontevedra, compared to 3.2 percent in Galicia’s capital Santiago de Compostela and 2.4 percent in Vigo, the region’s economic hub.&lt;/p&gt;
&lt;a href=&quot;https://www.citylab.com/special-report/room-to-grow/&quot;&gt;&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/08/8_Room_to_Grow_Bug_01/21bfcd440.png&quot; class=&quot;lazyload&quot;/&gt;&lt;/a&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Here you don’t have to hold your child’s hand all the time. In any other city that would only happen inside a mall,” said Willy García, father of three-year-old Mauro, standing at the pedestrian “Children’s Fountain” square, once an intersection with 25,000 cars passing daily.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Rather than go for suburban life in the big metropolitan areas, the García family opted for a mid-sized town. It’s a common refrain among those who relocated to the area. Marolia Otero, mother of Gabriel and Lola, ages five and three, said she moved to Pontevedra because in places like Vigo, the region’s economic hub, the costs of housing were much greater. In larger cities, those costs would mean living in the far-out suburbs, with longer commutes that leave parents less time with their kids. In Pontevedra, many services are within walking distance.&lt;/p&gt;
&lt;/section&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-3&quot; readability=&quot;73.131115459883&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Carlos Ferrás, an expert in demography and a lecturer of Human Geography at Santiago de Compostela University (USC), says the urban planning-centered approach has been more effective at fostering a parent-friendly environment than other policies some governments have adopted to try to directly increase birth rates.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Birth-incentive policies—like one-off compensations per newborn—have proved to be &lt;a href=&quot;https://www.citylab.com/life/2018/08/south-korea-needs-more-babies/565169/&quot;&gt;unsuccessful&lt;/a&gt;. If we want to end Spain’s aging drama, we must look for parenting policies, measures that help parents raise their kids, starting with urban planning,” said Ferrás.&lt;/p&gt;
&lt;section class=&quot;c-newsletter c-newsletter--promo c-newsletter--cta&quot;&gt;&lt;h2 class=&quot;c-newsletter__title&quot;&gt;Cities are changing fast. Keep up with the &lt;strong&gt;CityLab Daily&lt;/strong&gt; newsletter.&lt;/h2&gt;
&lt;label for=&quot;promo-email-input-email&quot; class=&quot;c-newsletter__cta c-newsletter__cta--promo&quot;&gt;The best way to follow issues you care about.&lt;/label&gt;

&lt;/section&gt;&lt;p dir=&quot;ltr&quot;&gt;“The city council has run a very successful strategy, promoting attractive and affordable residential developments in the urban area rather than in the suburbs, and an urban model that is sustainable, greener, convenient, and designed to support citizens throughout their parenting process.”&lt;/p&gt;
&lt;/section&gt;&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/11/IMG_20180806_201702_2/d3f82e1ad.jpg&quot; class=&quot;lazyload&quot;/&gt;A pedestrianized street in Pontevedra. (Jaime Velazquez)
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-4&quot; readability=&quot;81&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Pontevedra has continued to expand the pedestrian area from the center to the outskirts, liberating a total 669,000 square meters previously dominated by cars, and the transformation is still ongoing. Car use in the inner city has dropped by 77 percent, and CO2 emissions have dropped by 66 percent, according to the city council. The crime rate has gone down, too, adding to the feeling that the city is safe for unattended kids. In 2010, Pontevedra reached its lowest crime rate in a decade with 34 offenses per 1,000 citizens, and last year it reached a new low of 27.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Surprisingly, cars are not strictly banned inside the city. Residents with a private garage can bring their cars in, and traffic is open to delivery services, emergencies, and even to private drivers who need to stop by the center for a pick-up or drop-off.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;One of the most impactful policies on human behavior has actually been removing most of the street parking space inside the pedestrian-priority area. “We found that almost 60 percent of vehicles circulating inside town were actually going around in circles trying to find a parking spot. Now, since they know they won’t be able to park, they have stopped bringing their cars in and they use the outer parking areas,” Mosquera explained.&lt;/p&gt;
&lt;/section&gt;
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-5&quot; readability=&quot;57&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;“It is a very safe environment. With no cars, you don’t have to worry about them being run over,” Otero said. “And since there are a lot of parents with kids, and we all end up knowing each other. Sometimes you can even ask a friend to look after your kids while you quickly run errands.”&lt;/p&gt;
&lt;/section&gt;&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2018/11/roller_skating/bd527da62.jpg&quot; class=&quot;lazyload&quot;/&gt;(Pontevedra City Council)
&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-6&quot; readability=&quot;76&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;For Ferrás, the demographer, this might be Pontevedra’s key to success: a social and urban environment that makes parents feel supported by the community. In Pontevedra, 80 percent of kids age 6 to 12 walk alone to school every morning, and in case they need help, they can report to volunteering local businesses, where they will be looked after.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“Cities must be designed so citizens can afford being a parent—an urban model that favors work-family reconciliation. They need to feel accompanied through the process and [that they are in] an ecosystem that values childhood and teenhood.”&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;It has happened that these policies ended up paying off at the ballot box, too. In a town that votes conservative in the general elections, Mosquera’s leftist-nationalist political coalition, BNG, has been ruling ever since the pedestrianization program began in 1999. Its urban model has been awarded a number of prizes, including the UN-Habitat Dubai International prize in 2014 and the 2015 Center for Active Design award, among others.&lt;/p&gt;
&lt;/section&gt;&lt;aside class=&quot;c-related-content u-full-width u-lazy lazyload&quot; data-include=&quot;css:https://cdn.citylab.com/static/a/frontend/dist/citylab/css/components/related-content.188fbf9984d0.css&quot;&gt;&lt;h4 class=&quot;c-related-content__title&quot;&gt;Recommended&lt;/h4&gt;

&lt;/aside&gt;&lt;section class=&quot;s-article__section o-small-container&quot; id=&quot;article-section-7&quot; readability=&quot;74&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;The early resistance of neighbors and local businessmen who feared the absence of cars would mean an absence of customers are well over. Even for the opposition parties challenging BNG’s 20-year dominance, reversing pedestrianization is now likely out of the question. Still, some of those living outside the flourishing pedestrian area are the ones who have the most criticism of the policy, saying they’ve been excluded from Pontevedra’s urban improvements, and that the lack of a working public transit network has forced them to either take their car and deal with the limited parking space available or simply stay away from town.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;As part of the city’s strategy for work-family balance, schools are kept in the city center and the maternity and pediatric services have been moved from the big hospital complex outside town to a smaller facility right in the pedestrian area. Families with children in Pontevedra also benefit from a wide range of cultural activities tailored for kids. The local theater offers a play every Sunday for children under 12, the central food market hosts workshops for kids on Saturday afternoons, and the city libraries have a year-round activity program for them. During the summer, public urban boot camps take care of the kids while their parents work.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;“It is like building a nest,” said Carmen Fouces, Pontevedra’s culture councilor. “If you put some fluff and straws on a branch, a bird will soon make it its home.”&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;s-article__section o-small-container c-foundation-line&quot; readability=&quot;29.371727748691&quot;&gt;&lt;p&gt;Funding was provided by the Bernard van Leer Foundation to support our project, “Room to Grow,” about raising tiny humans in the city. Sign up &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSerzV3tqrlwRSmYAmFowFvv1tmyFKB11rLKAXkVc4rMkMAzlA/viewform&quot;&gt;here&lt;/a&gt; to receive email updates on the series.&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;c-authors-article u-lazy lazyload&quot; data-include=&quot;css:https://cdn.citylab.com/static/a/frontend/dist/citylab/css/components/author-article.e6996e6bb587.css&quot;&gt;&lt;h4 class=&quot;c-authors-article__about-title&quot;&gt;About the Author&lt;/h4&gt;
&lt;section class=&quot;c-author-article&quot; itemprop=&quot;author&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot; readability=&quot;13.188405797101&quot;&gt;&lt;div class=&quot;c-author-article__content&quot; readability=&quot;16.231884057971&quot;&gt;
&lt;h5 class=&quot;c-author-article__title&quot; itemprop=&quot;name&quot;&gt;&lt;a class=&quot;c-author-article__link&quot; href=&quot;https://www.citylab.com/authors/jaime-velazquez/&quot;&gt;Jaime Velazquez&lt;/a&gt;&lt;/h5&gt;
&lt;p class=&quot;c-author-article__bio&quot; itemprop=&quot;description&quot;&gt;&lt;a href=&quot;https://www.citylab.com/authors/jaime-velazquez/&quot; class=&quot;author-link&quot; data-omni-click=&quot;inherit&quot;&gt;Jaime Velazquez&lt;/a&gt; is a journalist based in Madrid&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;</description>
<pubDate>Fri, 28 Dec 2018 20:07:35 +0000</pubDate>
<dc:creator>anonymfus</dc:creator>
<og:description>For one thing, the population of young kids is increasing, even as the country struggles with low birth rates.</og:description>
<og:image>https://cdn.citylab.com/media/img/citylab/2018/11/credit_pontevedra_city_council_DSC_5451/facebook.jpg?1543247666</og:image>
<og:title>What Happened When This Spanish City Went Car-Free</og:title>
<og:type>article</og:type>
<og:url>https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.citylab.com/design/2018/11/car-free-pedestrianization-made-pontevedra-spain-kid-friendly/576268/</dc:identifier>
</item>
</channel>
</rss>