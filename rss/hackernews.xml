<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Startup financial models – Templates compared for SaaS</title>
<link>https://www.stephnass.com/blog/startup-financial-model</link>
<guid isPermaLink="true" >https://www.stephnass.com/blog/startup-financial-model</guid>
<description>&lt;p&gt;As a founder, there comes a time when you need a business plan, complete with financial forecasts, income statements, and fancy graphs that will impress your investors.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Don't build it from scratch - use an existing model. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A financial model allows you to draft financial projections easily, fast, and in a professional manner. A great template will also force you to think through all the aspects of your project and make sure you really get the financial logic behind your business. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It can be annoying but trust me, it's worth your time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This post compares the top 12 templates of financial models for SaaS startups. I have personally tested each model. I have ranked them on 40+ items along 5 categories. I've looked at both spreadsheets and SaaS apps, and both free and paid solutions.&lt;/p&gt;
&lt;p&gt;If you are looking at building your SaaS financials, this article is for you.&lt;/p&gt;

&lt;h2 class=&quot;mb-4&quot;&gt;Table of content&lt;/h2&gt;
&lt;h2 class=&quot;mb-4&quot;&gt;&lt;a name=&quot;methodology&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 class=&quot;mb-4&quot;&gt;Methodology - What makes a great financial model for SaaS startups?&lt;/h2&gt;
&lt;p&gt;Here is the methodology I used to build this benchmark.&lt;/p&gt;
&lt;p&gt;I compared 40 points across 5 categories: (a) financial statements, (b) analysis capabilities, (c) revenue modeling, (d) cost modeling, (e) extra features. A detailed analysis of each model is available below. In each case, I tested the software/spreadsheet myself.&lt;/p&gt;
&lt;h3 class=&quot;mb-4&quot;&gt;Criteria 1: Financial statements&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Time scale: Are the statements over 1 year, 3 years or more? You usually want 3 years as a minimum when you speak with professional investors.&lt;/li&gt;
&lt;li&gt;Income statement: Does the template include an income statement? You usually want a monthly income statement, at least for year 1.&lt;/li&gt;
&lt;li&gt;Cash flow statement: Same as income statement&lt;/li&gt;
&lt;li&gt;Balance sheet: Same as income statement&lt;/li&gt;
&lt;li&gt;GAAP/IFRS: Are the statements compliant with GAAP and/or IFRS rules?&lt;/li&gt;
&lt;li&gt;Currency: How many currencies are available?&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;mb-4&quot;&gt;Criteria 2: Analysis capabilities&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Financial analysis: Number of typical financial metrics included e.g. breakeven point, quick ratio, average inventory, etc.&lt;/li&gt;
&lt;li&gt;SaaS analysis: Number of typical SaaS metrics included e.g. MRR growth, SaaS magic number, CAC/LTV, etc.&lt;/li&gt;
&lt;li&gt;Graphs: Number of built-in graphs&lt;/li&gt;
&lt;li&gt;Costs by P&amp;amp;L category: Does the template break down costs into P&amp;amp;L categories (CoGS, RD, G&amp;amp;A, etc.)&lt;/li&gt;
&lt;li&gt;Costs by departments: Does the model break down costs into departments (sales, marketing, CS, engineering, etc)&lt;/li&gt;
&lt;li&gt;VS Scenarios: Does the template allow you to compare multiple scenarios?&lt;/li&gt;
&lt;li&gt;VS Industry comparables: Does the template compare your financials against industry comparables?&lt;/li&gt;
&lt;li&gt;VS Actuals: Does the template allow you to run your model versus your actual numbers?&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;mb-4&quot;&gt;Criteria 3: Revenue modeling&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;New client acquisition: How do you enter new clients into the model? Possibilities include: entering a number manually for each month or year (it sucks); autofill the model from a base number and a growth rate (sucks a bit less); autofill several streams - each stream represents a different type of client e.g SMB/enterprise (better); or even fully model each acquisition channel (the best, very rare)&lt;/li&gt;
&lt;li&gt;Offerings: How many offers can you define and how precisely can you model them? This includes the possibility to create one-off offers, recurring offers, or a combo, but also the possibility to create introduction times and end times for specific offers.&lt;/li&gt;
&lt;li&gt;Pricing model: How many pricing models can you define and how precisely: tiers (free, basic, premium), revenue models (per seat, per usage, etc), automatically increase or decrease the plans price over years.&lt;/li&gt;
&lt;li&gt;Existing clients: Can you model expansion, contraction, churn, reactivation?&lt;/li&gt;
&lt;li&gt;Commitment: Can you model monthly VS yearly VS multi-annual contracts?&lt;/li&gt;
&lt;li&gt;Service revenue: Can you model punctual service revenue on top of all the other pricing models and offerings?&lt;/li&gt;
&lt;li&gt;Enterprise specific: Does the template offer specific features to model complex enterprise sales, such as landing/expansion, custom product developments, various sales cycles, etc?&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;mb-4&quot;&gt;Criteria 4: Costs modeling&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Direct labor costs: The best templates allow you to correlate direct labor costs with relevant metrics. For example, your sales staff is calculated based on forecasted income and sales target per account executive. Same for customer success payroll with number of customers and workload target per CS staff.&lt;/li&gt;
&lt;li&gt;Direct non-labor costs: just like with labor costs, the best templates allow you to link some direct non-labor costs with relevant metrics. For instance, server costs can be a % of MRR.&lt;/li&gt;
&lt;li&gt;Indirect labor costs: same as above. Even for indirect costs, some templates find smart ways to tie them to some aspect of the business.&lt;/li&gt;
&lt;li&gt;Indirect non-labor costs: same as above&lt;/li&gt;
&lt;li&gt;Payment terms: Can you define the payments terms with your vendors and suppliers? May be useful if there is a hardware component to your offer.&lt;/li&gt;
&lt;li&gt;Hardware-friendly: This is a special mention for templates that model things like shipping costs, inventory delay, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 class=&quot;mb-4&quot;&gt;Criteria 5: Extra features&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Documentation : Is there proper documentation in the model and on the website? Are there good explainer videos? What kind of direct support (chat, email) comes with the template?&lt;/li&gt;
&lt;li&gt;Languages: In what language is the template available?&lt;/li&gt;
&lt;li&gt;Third-party integration: Third-party integrations can be useful to input or update data over time, or to display advanced graphs.&lt;/li&gt;
&lt;li&gt;Excel spreadsheet: Can you access your financials as a Microsoft Excel spreadsheet? This is a must if you need to share it with investors.&lt;/li&gt;
&lt;li&gt;Google Sheets: Does the model work in Google Sheets? Not all models that work in Microsoft Excel work in Google, so you may want to consider that point.&lt;/li&gt;
&lt;li&gt;Editable formulas: Some templates do not allow you to modify formulas - which is a massive bummer when it comes to customization.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Granted, it's not a perfect methodology. One could argue forever about whether cap tables should be included in a financial model for startups. But it's the best I could come up with - without being a finance nerd myself :)&lt;/p&gt;
&lt;h2 class=&quot;mb-4&quot;&gt;&lt;a name=&quot;disclaimers&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 class=&quot;mb-4&quot;&gt;Disclaimers: affiliation, impartiality, and non-finito&lt;/h2&gt;
&lt;p&gt;Before jumping to the heart of the matter, please allow me three disclaimers:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Affiliation: Some links in the article are affiliated - which means that if you end up buying a template through one of those links, I'll get a few $$$. This doesn't cost you anything, and allows me to keep writing useful articles for you.&lt;/li&gt;
&lt;li&gt;Impartiality: Regardless of whether there is a referral in place or not, I am committed to providing you with an honest opinion. I take great pride in being an independant, honest, and trusted source of information for entrepreneurs.&lt;/li&gt;
&lt;li&gt;Non finito: This is a non-finite work. I am happy to update the article if you bring new, relevant information to my knowledge. I am also happy to fix any mistake or clarify any confusion that you may find in the article.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;mb-4&quot;&gt;&lt;a name=&quot;fisy&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h2 class=&quot;mb-4&quot;&gt;1. &quot;FISY Innovation Plan&quot; by Remi Berthier&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fisy.fr/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;Fisy Innovation Plan, by Rémi Berthier&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For years, this template has been the go-to financial model for French entrepreneurs. However, it didn't age well.&lt;/p&gt;
&lt;p&gt;Analysis capabilities are limited: only a handful of financial metrics, zero SaaS metrics, a couple of graphs, and it's impossible to categorize costs. Modeling, be it for revenue or costs, is all too basic and requires a lot of manual input. Also, it's entirely in French.&lt;/p&gt;
&lt;p&gt;Having said that, it remains a free-of-charge, easy-to-use, easy-to-customize template that covers all the basics while including specificities to the French ecosystem such as CIR, JEI, etc.&lt;/p&gt;
&lt;p&gt;This model makes a lot of sense for French entrepreneurs looking for a simple solution. For the others, keep on reading.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/5ae3aaa5-b81f-45ba-97d5-fa8e840b96bb.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/da5b29d2-0384-4006-a20d-668bcbe3f8f2.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;2. &quot;SaaS Financial Plan 2.0&quot; by Christoph Janz&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://christophjanz.blogspot.com/2016/03/saas-financial-plan-20.html&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;SaaS Financial Plan 2.0, by Christoph Janz&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This template was built by SaaS apostle Christoph Janz, and you can tell. It packs a punch of SaaS knowledge in a sleek, clear spreadsheet. You'll find lots of good stuff: basic/pro/enterprise plans, churn/upgrade/downgrade, an elegant client acquisition model and a wealth of graphs and charts.&lt;/p&gt;
&lt;p&gt;It's not all rosy, though. You want a 5 years forecast? No, you only need 2. You want to sell annual pro plans? Too bad, pro plans are monthly and that's that. Also, no balance sheet.&lt;/p&gt;
&lt;p&gt;This template works great if you are a typical SaaS startup and fits the vision that Christoph put into his financial plan. If not, you may be better off considering templates with broader horizons.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/c532a404-3097-4ee7-a084-94b8fe1a8df6.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/8d4a4926-11a5-4c5d-9adc-7e50425cbe74.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;3. &quot;SaaS Financial Model&quot; by Jaakko Piipponen&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://baremetrics.com/blog/saas-financial-model&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;SaaS Financial Model, by Jaakko Piipponen&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one got updated just before publishing the article, so I have to scratch my old review and write a new one. I'll take care of that soon enough.&lt;/p&gt;
&lt;p&gt;In the meantime, don't hesitate to take a look.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/7039281a-69ac-4253-a709-c4d47ec9dc74.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;4. &quot;Standard SaaS Financial Plan for Startups and SMBs&quot; by Ben Murray&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.thesaascfo.com/saas-financial-plan/&quot;&gt;&lt;u&gt;SaaS Financial Plan for Startups and SMBs, by Ben Murray&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This template published by Ben Murray, AKA the SaaS CFO, has a lot in common with Chris Janz's model: it's free, it's SaaS-centric and it's really good overall.&lt;/p&gt;
&lt;p&gt;But that's where similarities stop. Let's look at what differentiates them:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Cost modeling: Janz does a much better job as many costs are tied to activity metrics. With Murray, you have to fill it all manually. Janz 1 - 0 Murray&lt;/li&gt;
&lt;li&gt;Commitment: Murray allows you to define which plans are annual and which are monthly. Janz does not. Janz 1 - 1 Murray&lt;/li&gt;
&lt;li&gt;Client acquisition: Murray wants you to manually input new clients each month, where Janz includes 3 acquisition channels. Janz 2 - 1 Murray&lt;/li&gt;
&lt;li&gt;Murray also allows you to add service revenue and offers up to 5 years of forecasts. Janz 2 - 2 Murray&lt;/li&gt;
&lt;li&gt;Since its latest update, Murray's model also allows you to input your actual number and compare them with your forecasts. Janz 2 - 3 Murray&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At the end of the day, Murray's SaaS template is great - maybe the best amongst the free templates. It is a bit disappointing when it comes to modeling new client acquisition and costs, though.&lt;/p&gt;
&lt;p&gt;To explore more powerful (and paid) templates, read on!&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/6138187f-932d-4fa2-af83-3fb11ad67e42.png&quot; alignment=&quot;center&quot;/&gt; 


&lt;p&gt;&lt;a href=&quot;https://www.pro-forma.com/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;SaaS Startup Kit, by Pro Forma&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The SaaS startup kit is the first paying template we're looking at: one-time $99.&lt;/p&gt;
&lt;p&gt;Because you're paying, you obviously get a lot more in return: balance sheet, cap table, GAAP/IFRS compliance, 161 currencies to choose from, a ton of financial metrics and graphs, and advanced capabilities to model your costs and your revenue, including for hardware startups.&lt;/p&gt;
&lt;p&gt;Now, because we are paying, we are a lot pickier. And I see 3 problems with this SaaS Startup Kit. First, you cannot account for upgrades and downgrades (you can model churn, though). Second, you cannot break down costs by P&amp;amp;L categories or departments. Third, the formulas are &quot;locked ' so you cannot edit them. That's a big problem if, like me, you like looking under the hood. But maybe you don't care?&lt;/p&gt;

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/4195e342-4ce2-49d1-956b-2ef48a29f097.png&quot;/&gt;  &lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/79b89afd-1e0a-4966-89f8-4509e7b09e40.png&quot;/&gt; 

&lt;p&gt;All in all, I cannot tell you not to look at the SaaS startup kit. It has a lot going for it, and at $99, it's priced right. But if you can stretch your budget a little more, look at the next model - it may well be the right one.&lt;/p&gt;


&lt;h2 class=&quot;mb-4&quot;&gt;6. &quot;SaaS Financial Model&quot; by Taylor Davidson&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gumroad.com/a/1021686899&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;&quot;SaaS Financial Model&quot; by Taylor Davidson&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let me start right off the bat: this &quot;SaaS Financial Model&quot; by Taylor Davidson is one of the best templates out there.&lt;/p&gt;
&lt;p&gt;For $149, you get all the financial statements you may wish for, laid out over 5 years, and GAAP-compliant. Additional tabs are built-in for fundraising (assess needs and uses), valuation (ownership, DCF, waterfall exit, ROI), variants (simplified scenarios), and impact (for purpose-driven startups). Bonus point: the model works in Microsoft Excel and Google Sheets, supports all currencies, and is fully editable.&lt;/p&gt;
&lt;p&gt;In terms of analysis capabilities, the template generates boatloads of financial and SaaS metrics, as well as 20+ beautiful graphs. Costs can be broken down by departments and P&amp;amp;L categories so you can make sense of all that good stuff. SaaS experts will especially appreciate the granularity provided by monthly cohort analysis - a rarity!&lt;/p&gt;
&lt;p&gt;Modeling revenue and costs is extremely versatile. Instead of pre-modeling everything for you, the template provides you with very unique features (Pricing, Pipeline, Drivers) that allow you to customize it to your needs. Here are a few examples of what you can do:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You can build as many subscription plans as you want.&lt;/li&gt;
&lt;li&gt;Contract length is not limited to monthly or annual but can be anything you want.&lt;/li&gt;
&lt;li&gt;Billings are separate from contract cycles, so can do an annual contract with quarterly billings, or 3-year contract with annual billings, or annual contract with monthly billings&lt;/li&gt;
&lt;li&gt;All costs, direct and indirect, labor and non-labor, can be tied to relevant activity metrics (revenue, headcount, etc.) which is what you would expect from this kind of template.&lt;/li&gt;
&lt;li&gt;All costs can also be tied that are *not* tied to an activity metric, say periodic costs that occur quarterly or annually, or costs that increase a % over time, or costs that are a % of salaries, or a % of revenues, for example. This is all built-in within the Drivers sheet and an absolute delight to use.&lt;/li&gt;
&lt;li&gt;For Enterprise sales, you can model a good old Pipeline in the Pipeline sheet and attribute different numbers of seats and &quot;likelihood to close&quot; to each deal.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;True, it takes a bit of time to wrap your head around the internal logic of that model. But once you master it, there is virtually no limit to what you can do.&lt;/p&gt;
&lt;p&gt;Thankfully, this financial model is well-documented. The website includes a long, detailed &quot;Getting Started&quot; page as well as specific articles and videos for technical points. The highlight is definitely the email support - I've consistently received detailed replies within 24 hours - at zero extra cost. Kudos to that.&lt;/p&gt;
&lt;p&gt;Long story short - if you are willing to shell out $149 for a SaaS financial model, Taylor Davidon's template is arguably one of the absolute best you can get your hands on. The other one is the model built by Alexander Jarvis - read on to learn about it.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/f233faa4-9993-410d-b887-b63592eac000.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;7. &quot;SaaS: SME &amp;amp; Users&quot; by Alexander Jarvis&lt;/h2&gt;
&lt;h2 class=&quot;mb-4&quot;&gt;8. &quot;SaaS: Enterprise, SME &amp;amp; Users&quot; by Alexander Jarvis&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.alexanderjarvis.com/definitive-saas-financial-model-template-startups/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;&quot;SaaS: SME &amp;amp; Users&quot; by Alexander Jarvis&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.alexanderjarvis.com/enterprise-consumer-sme-saas-financial-fundraising-model-excel/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;&quot;SaaS: Enterprise, SME &amp;amp; Users&quot; by Alexander Jarvis&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's hard to write a serious review about this template - everything about it is absolutely ridiculous. It is ridiculously rich, ridiculously detailed, ridiculously powerful. It's the kind of template that you use when you want to make a statement, like impress your investors or make your CFO feel irrelevant. It's heavy, bold, and over-the-top, in the best way possible. Brace yourselves, let's dive in.&lt;/p&gt;
&lt;p&gt;This template by Alexander Jarvis comes in 2 versions. The &quot;SaaS: SME &amp;amp; Users&quot; is perfectly fine for most SaaS businesses. It sells at $319. The &quot;SaaS: Enterprise, SME &amp;amp; Users&quot; retails at $1,299 and includes extra logic to model enterprise sales. Because of their complexity, both models only work in Microsoft Excel (no Google Sheets).&lt;/p&gt;
&lt;p&gt;In return for your money, you get the most advanced modeling capabilities - period.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Each acquisition channel is modeled in great details: paid, organic, blog, social, emailing, and channel partners. Each channel can be assigned its own conversion rate from visitor to user. You can also differentiate between the customers that self-onboard and those who require sales intervention.&lt;/li&gt;
&lt;li&gt;You can design composite offerings based on usage fee, monthly fee and/or a one-time service fee. The templates allow 3 paid plans - typically basic, premium, pro - as well as a free trial plan, and each of these plans can exist with a monthly or annual commitment.&lt;/li&gt;
&lt;li&gt;Customers can upgrade, downgrade or churn, and you can even schedule module releases at different points in time, so you create new revenue streams over the years.&lt;/li&gt;
&lt;li&gt;All costs, direct and indirect, labor and non-labor, are modeled in a clever way i.e. they are tied to relevant activity metrics&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I cannot stress enough how detailed this model is. Here is an example: the &quot;email marketing&quot; tab (yes, there is such a thing) takes into account 12+ inputs including stuff like the % of recipients who will share the newsletter with their friends. I love this kind of detail because it gives actionable points when thinking about execution. It also makes it easier to defend your numbers in front of investors because you can explain the underlying assumptions. If it's too much for you, you can always deactivate the advanced fields with the switch and focus on the core input.&lt;/p&gt;
&lt;p&gt;If you buy the $1,299 version, you get an extra slew of tabs specifically dedicated to enterprise sales in all its complexity: enterprise-specific products and offerings, geographies, sales cycles, &quot;land and expand&quot;, custom development, etc. If you are building the next Oracle or Palantir, that stuff alone is invaluable.&lt;/p&gt;
&lt;p&gt;Documentation is ok. Instructions and comments are included inside the template, but not much in terms of FAQ/articles on the website. Having said that, I particularly appreciated the tutorial videos: one 28-min overview and 20 shorter videos that each cover a specific tab.&lt;/p&gt;
&lt;p&gt;You want more? Time to talk about analysis capabilities. Alexander Jarvis' model is most lavish when it comes to that point. 50+ graphs are readily available - and that's without counting the sparklines that are peppered throughout the sheet. Because modeling is so detailed, the template can provide advanced SaaS metrics such as marketing leverage or expansion % of new MRR. Of course, costs can be allocated to P&amp;amp;L categories and departments so you really understand what's going on in your model.&lt;/p&gt;
&lt;p&gt;When it comes to financial statements, the $319 version gives you only 3 years of forecasts, with no balance sheet and no cap table. The $1,299 version does a bit better with 5-year forecasts, but still no sign of balance sheet nor cap table. Some would argue that an early-stage startup doesn't need formal financial statements... However, this template does include a tab to compare your forecasts to your actuals, and another tab listing down industry metrics - both are very welcome additions.&lt;/p&gt;
&lt;p&gt;If you want the best spreadsheet ever, it boils down to comparing Taylor Davidson's and Alexander Jarvis' templates, and picking the one that fits you the most. See the final section &quot;Conclusion&quot; for a side-by-side of both models.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/df6723d8-0f39-4b5e-b4e5-00c75b201bcf.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/c8590158-1803-425a-b689-3c04c99e2ee2.png&quot; alignment=&quot;center&quot;/&gt; 
&lt;p&gt;However, some prefer using a specialized SaaS app to build your financial model. If that's your case, check out the last 4 models.&lt;/p&gt;


&lt;h2 class=&quot;mb-4&quot;&gt;9. &quot;EY Finance Navigator&quot; by Alex and Wout&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ey.com/en_nl/finance-navigator&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;EY Finance Navigator, by Alex and Wout&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Finance Navigator was developed by Alexander Matthiessen and Wout Bobbink from EY's Dutch office. It's a SaaS app: you pay a monthly subscription to access an online tool. It's a fundamentally different approach from the spreadsheet-based models we've explored so far.&lt;/p&gt;
&lt;p&gt;The Finance Navigator costs $30 per month without commitment or $380 over an 18 month period. For that price, you get very exhaustive financial statements: income statements, cash flow statements, and balance sheets over 10 years - no cap table though. All currencies are available and you can export the statements to a clean, well-designed spreadsheet format (only numbers, no formulas).&lt;/p&gt;
&lt;p&gt;Documentation is good, with in-app guidance, website posts, a Q&amp;amp;A, and a 37 min walkthrough video. The tool was clearly thought to be user-friendly and the onboarding is best-in-class. You will have zero difficulties using EY's Finance Navigator whatsoever.&lt;/p&gt;
&lt;p&gt;Unfortunately, simplicity is a double-edged sword. Revenue and cost modeling is super basic. For example, revenue is defined as a base number for month 1, then a monthly growth rate. No channels, no conversion rate, no pricing plans. The same goes for costs: you cannot tie costs to specific activity metrics, so you have to input them manually. Because it's a SaaS application, you cannot customize the model by adding fields or modifying formulas. And because it's so basic, there is only the bare minimum in terms of analysis capabilities.&lt;/p&gt;
&lt;p&gt;At the end of the day, EY's Finance Navigator holds a lot of promises. UX is great and they have a couple of nice features like comparables and scenarios. The product has evolved over the years, adding up features and getting more usable. In my estimation, it's not quite enough to be used by advanced SaaS entrepreneurs. The product is geared towards traditional businesses - think bakery, restaurant, consulting, who just want clean and easy financials. Not the right pick for SaaS people - yet. I'd love to revisit the tool in a year and see what progress has been made.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/c49e2b9b-eae8-4289-b2c6-17069e46f6d0.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/dc340572-b782-426b-8129-822aade1b093.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;10. &quot;Liveplan&quot; by Palo Alto Software&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.liveplan.com/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;Liveplan, by Palo Alto Software&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Liveplan sells its financial modeling SaaS app at $20 per month ($360 over 18 months), which makes it a close competitor to EY Finance Navigator.&lt;/p&gt;
&lt;p&gt;Starting with the strong points, Liveplan offers exhaustive statements over 5 years: income statements, cash flow statements, and balance sheets. Compared with EY's model, you have a bit more control over revenue modeling: offerings can be defined as recurring fees, billable hours, and a one-time upfront fee can also be added. Pricing can be increased automatically over time, churn can be factored in, and you can model monthly or annual plans.&lt;/p&gt;
&lt;p&gt;When looking at cost modeling, you can adjust payment terms for clients and suppliers. There are also specific variables for hardware products. Documentation is just fine, with a tutorial video per section embedded directly in the app, as well as plenty of instructions. Liveplan exists in 5 languages, and integrates with Quickbooks, which allows importing your actual numbers and comparing them with your forecasts. You can also export your financials into a (numbers-only) spreadsheet to share with your investors.&lt;/p&gt;
&lt;p&gt;Now, although Liveplan's software has more powerful modeling capacities than EY's, it remains insufficient in my estimation. Here are just a few examples.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Direct labor costs can be set as a % of revenue, but do not update the number of employees accordingly.&lt;/li&gt;
&lt;li&gt;Indirect costs can only be set as a constant, a % of overall revenue, or a % of a specific revenue.&lt;/li&gt;
&lt;li&gt;New client acquisition is just manual input - as in you manually input &quot;2&quot; clients in March and &quot;4&quot; clients in April. There is no channel modeling whatsoever.&lt;/li&gt;
&lt;li&gt;Costs cannot be broken down by P&amp;amp;L categories nor departments.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;When modeling is too superficial, it translates into poor analysis capabilities. In Liveplan's case, you do have a dozen financial metrics available (net cash flow, account payable, cash on hand…) and another dozen graphs. But SaaS metrics are absent, which is a bummer for SaaS entrepreneurs.&lt;/p&gt;
&lt;p&gt;At the end of the day, LivePlan was built for non-tech entrepreneurs. Perfect for a bike shop owner, but not quite there for SaaS people.&lt;/p&gt;
&lt;p&gt;Don't take my word for it: there is a 60-day trial, so give it a spin for free and make up your own mind.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/3b0e9720-06c8-47b6-b0db-830d24a78fe0.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/dd8f10f1-b0bd-44ec-988b-4754021789aa.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;11. &quot;Summit&quot; by Matt Wensing&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://usesummit.com/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;Summit, by Matt Wensing&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Summit is a young startup (founded 2019) that brings a fresh take on the whole financial modeling thing with a SaaS solution.&lt;/p&gt;
&lt;p&gt;Let's make it clear - Summit is not meant for fundraising. Forecasts on Summit are made for an 18-month period only. Costs cannot be allocated to P&amp;amp;L categories and departments, nor can you differentiate between labor/non-labor or direct/indirect costs. Therefore, you won't be able to generate any financial statements that your investors may require . Hell, you can't even export a spreadsheet!&lt;/p&gt;
&lt;p&gt;So why talk about Summit? Because Summit is pretty awesome when it comes to piloting your SaaS startup with a financial model. Here is how it works. First you connect your live metrics (Stripe, Baremetrics, etc.) to your Summit account. This allows Summit to derive your future growth from the current trends. The next step consists in optimizing that future growth. To do that, you define a baseline scenario around 20+ metrics from sales, product, finance, then you play around with those variables to maximize your MRR or any other metric you like. What if we increase our close rate? What if we raise funds and funnel that money into paid ads? You instantly get clear answers. What's more, the clean dashboards and convenient built-in comments feature makes it easy and even pleasant to run those analyses and share with your team. It's a really fresh experience - no comparison possible with fuddy-duddy spreadsheets.&lt;/p&gt;
&lt;p&gt;Summit is still a young product and there is room for improvement: currencies, tax rates, expansion and contraction of existing clients, one-off revenue. In particular, client acquisition would greatly benefit from more granularity and native integrations with social media accounts for instance.&lt;/p&gt;
&lt;p&gt;At the end of the day, Summit is not meant to build financial statements, but to make decisions in a data-driven way. It's such a refreshing approach in the space that I highly recommend trying it out. Bonus point: it's 100% free for now, so it's a no-brainer.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/56a70b9d-3009-4080-9843-d6633ab40d9a.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/24a68981-8cc0-46df-b96e-922cdeaea521.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;12. &quot;Causal&quot; by Taimur and Lukas&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://causal.app/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;Causal, by Taimur and Lukas&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At first glance, Causal seemed very similar to Summit. It's also a SaaS solution, also founded in 2019, also bringing a new approach to modeling. But that's where the comparison stops because the philosophy behind Causal is quite unique.&lt;/p&gt;
&lt;p&gt;Causal is not just a financial modeling tool for SaaS startups. It's a modeling tool that aims at replacing Excel for every modeling need you may have. This means that (a) Causal is super versatile and goes much deeper than Summit, and (b) Causal is much more complex with a steeper learning curve than Summit.&lt;/p&gt;
&lt;p&gt;Looking at revenue and cost modeling, you can model anything you want on Causal with an interface that's 10x more modern and user-friendly than a spreadsheet. The same thing goes for analysis capabilities: you can generate dashboards, tables, and graphs for absolutely anything - including any financial statement your investors may want. You can also connect live data sources (Stripe and Google Sheets for now, more to come) to automatically update your models with real-time metrics.&lt;/p&gt;
&lt;p&gt;As a SaaS entrepreneur, you don't have time to build a model from scratch. Lucky you, Causal has built-in templates - including two SaaS models built by Taylor Davidson himself (see template #6). You are then able to augment or fine-tune those models to suit your specific needs.&lt;/p&gt;
&lt;p&gt;In terms of documentation, there are a few videos, a live chat as well as a walkthrough when you start a new model. That's not much, but Causal assumes that you are a modeling &quot;nerd&quot; and that your usual work environment is massive spreadsheets. If that's the case, you'll be just fine. Assuming you have the time and desire to put in the hours to learn a new tool, Causal may very well be the ultimate platform for financial modeling.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/1b050e9d-098a-4d19-9048-cf9fce31b407.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/37086b04-9e68-41a5-b827-d0aa58923cf9.png&quot; alignment=&quot;center&quot;/&gt;  

&lt;h2 class=&quot;mb-4&quot;&gt;Conclusion: this is the best financial model for SaaS startups&lt;/h2&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/48998594-d7f0-45fe-b226-bbabe2971f73.png&quot;/&gt; 
&lt;h3 class=&quot;mb-4&quot;&gt;Best free spreadsheet&lt;/h3&gt;
&lt;p&gt;If you want a &quot;good enough&quot; model but are not willing to pay for it, go for &lt;a href=&quot;https://www.thesaascfo.com/saas-financial-plan/&quot; target=&quot;_blank&quot;&gt;Ben Murray's (model #4)&lt;/a&gt; or &lt;a href=&quot;http://christophjanz.blogspot.com/2016/03/saas-financial-plan-20.html&quot; target=&quot;_blank&quot;&gt;Chris Janz's (model #2)&lt;/a&gt;. Customize them a bit to offset their weaknesses.&lt;/p&gt;
&lt;p&gt;See below a side-by-side comparison of the differences between both models.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/5691e7cd-69b8-4382-8b48-ed1a704e067f.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;h3 class=&quot;mb-4&quot;&gt;Best paid spreadsheet&lt;/h3&gt;
&lt;p&gt;If you want the best financial model spreadsheet out there and are willing to pay for it, go for &lt;a href=&quot;https://gumroad.com/a/1021686899&quot; target=&quot;_blank&quot;&gt;Taylor Davidson's (model #6)&lt;/a&gt; or &lt;a href=&quot;https://www.alexanderjarvis.com/definitive-saas-financial-model-template-startups/#&quot; target=&quot;_blank&quot;&gt;Alexander Jarvis' (models #7/#8)&lt;/a&gt;. They are by far the best stuff on the market today.&lt;/p&gt;
&lt;p&gt;See below a side-by-side comparison of the differences.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/622234b4-9b9c-4ffd-ac75-90b94494091b.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;h3 class=&quot;mb-4&quot;&gt;Best software&lt;/h3&gt;
&lt;p&gt;If you want to experience the future of financial modeling, go for &lt;a href=&quot;https://usesummit.com/&quot; target=&quot;_blank&quot;&gt;Summit (model #11)&lt;/a&gt; or &lt;a href=&quot;https://www.causal.app/&quot; target=&quot;_blank&quot;&gt;Causal (model #12)&lt;/a&gt; - while keeping in mind that both are very different.&lt;/p&gt;
&lt;p&gt;See below a side-by-side comparison of the differences between both models.&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/7b58c502-917e-493b-98fc-b41c7d3d9bf3.png&quot; alignment=&quot;center&quot;/&gt; 

&lt;p&gt;Thanks for reading. Don't hesitate to leave a question in the comments, I try to reply personally to each one of them.&lt;/p&gt;

</description>
<pubDate>Sun, 03 May 2020 20:56:44 +0000</pubDate>
<dc:creator>warpech</dc:creator>
<og:type>website</og:type>
<og:url>https://www.stephnass.com/blog/startup-financial-model</og:url>
<og:title>Startup financial models - 12 templates compared for SaaS</og:title>
<og:image>https://d1pnnwteuly8z3.cloudfront.net/images/177302d9-3657-45b7-ac9d-acf801d83a74/48998594-d7f0-45fe-b226-bbabe2971f73.png</og:image>
<og:description>Need a financial model for your startup? Fear not. I have extensively compared the top 12 templates, free and paid, so you don't have to do it.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.stephnass.com/blog/startup-financial-model</dc:identifier>
</item>
<item>
<title>Re: Integrating &quot;safe&quot; languages into OpenBSD?</title>
<link>https://marc.info/?l=openbsd-misc&amp;m=151233345723889&amp;w=2</link>
<guid isPermaLink="true" >https://marc.info/?l=openbsd-misc&amp;m=151233345723889&amp;w=2</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&lt;title&gt;'Re: Integrating &quot;safe&quot; languages into OpenBSD?' - MARC&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/style.css&quot; /&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; text=&quot;#000000&quot; link=&quot;#0000C0&quot; vlink=&quot;#800080&quot; id=&quot;readabilityBody&quot; readability=&quot;43.616901408451&quot;&gt;
&lt;pre&gt;
&lt;strong&gt;[&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233148023559&amp;amp;w=2&quot;&gt;prev in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233412624041&amp;amp;w=2&quot;&gt;next in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233210523661&amp;amp;w=2&quot;&gt;prev in thread&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233451224088&amp;amp;w=2&quot;&gt;next in thread&lt;/a&gt;] &lt;/strong&gt;
&lt;strong&gt;&lt;span&gt;
List:       &lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;r=1&amp;amp;w=2&quot;&gt;openbsd-misc&lt;/a&gt;
Subject:    &lt;a href=&quot;https://marc.info/?t=151233221700001&amp;amp;r=1&amp;amp;w=2&quot;&gt;Re: Integrating &quot;safe&quot; languages into OpenBSD?&lt;/a&gt;
From:       &lt;a href=&quot;https://marc.info/?a=146809448200002&amp;amp;r=1&amp;amp;w=2&quot;&gt;&quot;Theo de Raadt&quot; &amp;lt;deraadt () openbsd ! org&amp;gt;&lt;/a&gt;
Date:       &lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;r=1&amp;amp;w=2&amp;amp;b=201712&quot;&gt;2017-12-03 20:37:07&lt;/a&gt;
Message-ID: &lt;a href=&quot;https://marc.info/?i=81638.1512333427%20()%20cvs%20!%20openbsd%20!%20org&quot;&gt;81638.1512333427 () cvs ! openbsd ! org&lt;/a&gt;&lt;/span&gt;
[Download RAW &lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233345723889&amp;amp;q=mbox&quot;&gt;message&lt;/a&gt; or &lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233345723889&amp;amp;q=raw&quot;&gt;body&lt;/a&gt;]&lt;/strong&gt;

&amp;gt; As a response to this, Theo asked rhetorically &quot;Where's ls, where's cat,
&amp;gt; where's grep, and where's sort?&quot;, implying that noone so far bothered to
&amp;gt; write implementations of even the basic unix utilities in such a
&amp;gt; language.

I wasn't implying.  I was stating a fact.  There has been no attempt
to move the smallest parts of the ecosystem, to provide replacements
for base POSIX utilities.

As a general trend the only things being written in these new
languages are new web-facing applications, quite often proprietory or
customized to narrow roles.  Not Unix parts.

Right now, there are zero usage cases in the source tree to require
those compiler tools.  We won't put a horse into the source tree when
society lacks cart builders.

&amp;gt; This brings me to the question, what if someone actually bothered?

So rather than bothering to begin, you wrote an email.

Awesome.

Yes, now I am implying something: you won't bother to rewrite the
utilities.

And I understand, why would anyone bother?  It took about 10 years for
gnu grep to be replaced sufficiently well in our tree.  This stuff
doesn't happen overnight.

However there is a rampant fiction that if you supply a new safer
method everyone will use it.  For gods sake, the simplest of concepts
like the stack protector took nearly 10 years for adoption, let people
should switch languages?  DELUSION.

&amp;gt; Under what conditions would you consider replacing one of the
&amp;gt; current C implementations with an implementation written in another,
&amp;gt; &quot;safer&quot; language?

In OpenBSD there is a strict requirement that base builds base.

So we cannot replace any base utility, unless the toolchain to build
it is in the base.  Adding such a toolchain would take make build time
from 40 minutes to hours.  I don't see how that would happen.

&amp;gt; Note that with Cgrep and haskell-ls, there do in fact exist
&amp;gt; implementations/analogues of two of the mentioned utilities in a
&amp;gt; memory safe language (Haskell).

Are they POSIX compliant?  No.  They are completely different programs
that have borrowed the names.

By the way, this is how long it takes to compile our grep:

    0m00.62s real     0m00.63s user     0m00.53s system

Does Cgrep compile in less than 10 minutes?

Such ecosystems come with incredible costs.  For instance, rust cannot
even compile itself on i386 at present time because it exhausts the
address space.

Consider me a skeptic -- I think these compiler ecosystems face a grim
bloaty future.

&lt;strong&gt;[&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233148023559&amp;amp;w=2&quot;&gt;prev in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233412624041&amp;amp;w=2&quot;&gt;next in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233210523661&amp;amp;w=2&quot;&gt;prev in thread&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-misc&amp;amp;m=151233451224088&amp;amp;w=2&quot;&gt;next in thread&lt;/a&gt;] &lt;/strong&gt;
&lt;/pre&gt;

&lt;center&gt;&lt;a href=&quot;https://marc.info/?q=configure&quot;&gt;Configure&lt;/a&gt; | &lt;a href=&quot;https://marc.info/?q=about&quot;&gt;About&lt;/a&gt; | &lt;a href=&quot;https://marc.info/?q=news&quot;&gt;News&lt;/a&gt; | &lt;a href=&quot;mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC&quot;&gt;Add a list&lt;/a&gt; | Sponsored by &lt;a href=&quot;http://www.korelogic.com/&quot;&gt;KoreLogic&lt;/a&gt;&lt;/center&gt;
&lt;/body&gt;</description>
<pubDate>Sun, 03 May 2020 15:17:05 +0000</pubDate>
<dc:creator>xnyt</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://marc.info/?l=openbsd-misc&amp;m=151233345723889&amp;w=2</dc:identifier>
</item>
<item>
<title>Stanford Pupper: low-cost quadruped robot</title>
<link>https://stanfordstudentrobotics.org/pupper</link>
<guid isPermaLink="true" >https://stanfordstudentrobotics.org/pupper</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://stanfordstudentrobotics.org/pupper&quot;&gt;https://stanfordstudentrobotics.org/pupper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23059389&quot;&gt;https://news.ycombinator.com/item?id=23059389&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 284&lt;/p&gt;
&lt;p&gt;# Comments: 63&lt;/p&gt;
</description>
<pubDate>Sun, 03 May 2020 14:59:27 +0000</pubDate>
<dc:creator>msadowski</dc:creator>
<og:title>Pupper — Stanford  Student Robotics</og:title>
<og:url>https://stanfordstudentrobotics.org/pupper</og:url>
<og:type>website</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stanfordstudentrobotics.org/pupper</dc:identifier>
</item>
<item>
<title>Making Rust as Fast as Go</title>
<link>https://www.christianfscott.com/making-rust-as-fast-as-go/</link>
<guid isPermaLink="true" >https://www.christianfscott.com/making-rust-as-fast-as-go/</guid>
<description>&lt;h2 class=&quot;subtitle&quot;&gt;&lt;time datetime=&quot;2020-05-03&quot;&gt;May 3, 2020&lt;/time&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update:&lt;/strong&gt; as some keen HN commenters have pointed out, it looks like the rust program is not actually equivalent to the go program. The go program parses the string once, while the rust program parses it repeatedly inside every loop. It’s quite late in Sydney as I write this so I’m not up for a fix right now, but this post is probably Fake News. The perf gains from jemalloc are real, but it’s likely not the allocators fault.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The one-two combo of 1) better performance on linux &amp;amp; 2) jemalloc seeming to fix the issue lured me into believing that the allocator was to blame. I’m not sure what the lesson here is – &lt;a href=&quot;https://en.wikipedia.org/wiki/Ward_Cunningham#Cunningham's_Law&quot;&gt;perhaps more proof of Cunningham’s law?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Go is garbage collected, rust is not. That means rust is faster than go, right? No! Not always.&lt;/p&gt;
&lt;p&gt;Let’s take an example that I stumbled across while playing around with an algorithm that calculates Levenshtein edit distances. I wanted to compare the performance of the same algorithm in a bunch of different languages. Two of these languages were rust and go.&lt;/p&gt;
&lt;p&gt;To my surprise, the go version was faster than the rust version. A lot faster. My initial reaction was that I must have implemented the rust version incorrectly. Maybe I was doing some unsafe (but fast) things in go that rust wouldn’t let me do. To account for this, I laid out some ground rules:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The more idiomatic the better. Rust, for example, promises zero cost abstractions so we should lean on this &amp;amp; write safe code&lt;/li&gt;
&lt;li&gt;No static global variables. This means that containers need to be heap allocated &amp;amp; dynamically sized. We don’t know how big the inputs will be!&lt;/li&gt;
&lt;li&gt;Memory access should be safe. Don’t eliminate bounds checks&lt;/li&gt;
&lt;li&gt;Assume that text is utf8 encoded&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In short, this should be code that you’d happily ship to prod. Here’s what I ended up with:&lt;/p&gt;
&lt;details readability=&quot;5.5&quot;&gt;&lt;code&gt;edit_distance.go&lt;/code&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-.go&quot; data-lang=&quot;.go&quot;&gt;&lt;span&gt;func&lt;/span&gt; EditDistance(source, target &lt;span&gt;string&lt;/span&gt;) &lt;span&gt;int&lt;/span&gt; {
        &lt;span&gt;if&lt;/span&gt; len(source) == &lt;span&gt;0&lt;/span&gt; {
                &lt;span&gt;return&lt;/span&gt; len(target)
        }

        &lt;span&gt;if&lt;/span&gt; len(target) == &lt;span&gt;0&lt;/span&gt; {
                &lt;span&gt;return&lt;/span&gt; len(source)
        }

        sourceChars := []rune(source)
        targetChars := []rune(target)

        cache := make([]&lt;span&gt;int&lt;/span&gt;, len(target)+&lt;span&gt;1&lt;/span&gt;)
        &lt;span&gt;for&lt;/span&gt; i := &lt;span&gt;0&lt;/span&gt;; i &amp;lt; len(target)+&lt;span&gt;1&lt;/span&gt;; i++ {
                cache[i] = i
        }

        &lt;span&gt;for&lt;/span&gt; i, sourceChar := &lt;span&gt;range&lt;/span&gt; sourceChars {
                nextDist := i + &lt;span&gt;1&lt;/span&gt;
                &lt;span&gt;for&lt;/span&gt; j, targetChar := &lt;span&gt;range&lt;/span&gt; targetChars {
                        currentDist := nextDist

                        distIfSubstitute := cache[j]
                        &lt;span&gt;if&lt;/span&gt; sourceChar != targetChar {
                                distIfSubstitute++
                        }

                        distIfInsert := currentDist + &lt;span&gt;1&lt;/span&gt;
                        distIfDelete := cache[j+&lt;span&gt;1&lt;/span&gt;] + &lt;span&gt;1&lt;/span&gt;

                        nextDist = min(distIfDelete, min(distIfInsert, distIfSubstitute))

                        cache[j] = currentDist
                }

                cache[len(target)] = nextDist
        }

        &lt;span&gt;return&lt;/span&gt; cache[len(target)]
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;details readability=&quot;5.5&quot;&gt;&lt;code&gt;edit_distance.rs&lt;/code&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-.rs&quot; data-lang=&quot;.rs&quot;&gt;&lt;span&gt;pub&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;fn&lt;/span&gt; levenshtein_distance(source: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;,&lt;span&gt; &lt;/span&gt;target: &lt;span&gt;&amp;amp;&lt;/span&gt;&lt;span&gt;str&lt;/span&gt;)&lt;span&gt; &lt;/span&gt;-&amp;gt; &lt;span&gt;usize&lt;/span&gt; {&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;source.is_empty()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;target.len();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;target.is_empty()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;return&lt;/span&gt;&lt;span&gt; &lt;/span&gt;source.len();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;cache: Vec&amp;lt;&lt;span&gt;usize&lt;/span&gt;&amp;gt;&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;(&lt;span&gt;0&lt;/span&gt;..=target.chars().count()).collect();&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;(i,&lt;span&gt; &lt;/span&gt;source_char)&lt;span&gt; &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;source.chars().enumerate()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;next_dist&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;i&lt;span&gt; &lt;/span&gt;+&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; &lt;/span&gt;(j,&lt;span&gt; &lt;/span&gt;target_char)&lt;span&gt; &lt;/span&gt;&lt;span&gt;in&lt;/span&gt;&lt;span&gt; &lt;/span&gt;target.chars().enumerate()&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;current_dist&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;next_dist;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;mut&lt;/span&gt;&lt;span&gt; &lt;/span&gt;dist_if_substitute&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;cache[j];&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;if&lt;/span&gt;&lt;span&gt; &lt;/span&gt;source_char&lt;span&gt; &lt;/span&gt;!=&lt;span&gt; &lt;/span&gt;target_char&lt;span&gt; &lt;/span&gt;{&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;dist_if_substitute&lt;span&gt; &lt;/span&gt;+=&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;dist_if_insert&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;current_dist&lt;span&gt; &lt;/span&gt;+&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; &lt;/span&gt;dist_if_delete&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;cache[j&lt;span&gt; &lt;/span&gt;+&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;]&lt;span&gt; &lt;/span&gt;+&lt;span&gt; &lt;/span&gt;&lt;span&gt;1&lt;/span&gt;;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;next_dist&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;std::cmp::min(&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;dist_if_substitute,&lt;span&gt;
&lt;/span&gt;&lt;span&gt;                &lt;/span&gt;std::cmp::min(dist_if_insert,&lt;span&gt; &lt;/span&gt;dist_if_delete),&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;);&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;cache[j]&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;current_dist;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;cache[target.len()]&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;next_dist;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;cache[target.len()]&lt;span&gt;
&lt;/span&gt;}&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;Even with the playing field levelled, go still outperformed rust by 50%. For the dataset I was using to benchmark the programs, the go version to 1.5 seconds and rust 3 seconds.&lt;/p&gt;
&lt;p&gt;This was bizarre. As far as I could tell, these programs were identical besides the fact that the go runtime needs to spend precious cycles collecting garbage. That means it should be slower, right?&lt;/p&gt;
&lt;p&gt;I took the question to my coworkers, who had some good suggestions. Theories included &lt;a href=&quot;https://en.wikipedia.org/wiki/Escape_analysis&quot;&gt;escape analysis&lt;/a&gt;, string allocation, and the rust implementation being wrong. The last one was true but the performance gap remained once I fixed it (I have tests now!).&lt;/p&gt;
&lt;p&gt;The winning suggestion ended up being to switch the allocator in the rust program to &lt;code&gt;jemalloc&lt;/code&gt;. This was the default allocator used by rust binaries in the past, but it was &lt;a href=&quot;https://github.com/rust-lang/rust/pull/55238&quot;&gt;removed in favour of using the system allocator instead in late 2018&lt;/a&gt;. Read &lt;a href=&quot;https://github.com/rust-lang/rust/issues/36963&quot;&gt;#36963&lt;/a&gt; to get the full rationale for this change.&lt;/p&gt;
&lt;p&gt;To change the allocator, you simply add the following to the start of your program:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;extern&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;crate&lt;/span&gt;&lt;span&gt; &lt;/span&gt;jemallocator;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[global_allocator]&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;static&lt;/span&gt;&lt;span&gt; &lt;/span&gt;ALLOC: jemallocator::Jemalloc&lt;span&gt; &lt;/span&gt;=&lt;span&gt; &lt;/span&gt;jemallocator::Jemalloc;&lt;span&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This made a huge difference. On my machine, this dropped the execution time from 3 seconds to about 1.8 seconds. Let’s take a look at the flamegraphs (generated with &lt;a href=&quot;https://github.com/flamegraph-rs/flamegraph&quot;&gt;flamegraph-rs/flamegraph&lt;/a&gt;) to see the change:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.christianfscott.com/making-rust-as-fast-as-go/before.png&quot; alt=&quot;Flamegraph before, with system allocator. Roughly 40% of execution time spent allocating&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.christianfscott.com/making-rust-as-fast-as-go/after.png&quot; alt=&quot;Flamegraph after allocator was changed to jemalloc. Time spent allocating dropped to 20%&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This means that the time spend allocating has dropped from about 40% to 20%. Keep in mind this is for the full benchmark, including all the setup code, but it gives us a good sense of what changed.&lt;/p&gt;
&lt;p&gt;I’m not sure why the change was so severe. I tried searching for things like “macos allocator slow” but didn’t find anything. If you have some information here, please let me know!&lt;/p&gt;
&lt;p&gt;Why doesn’t go suffer from the slow system allocator on macos? Two things come to mind. The first is that &lt;a href=&quot;https://golang.org/src/runtime/malloc.go&quot;&gt;go uses a custom allocator&lt;/a&gt;. I assume that this is also faster than the macos system allocator. The second is that while this program does spend a lot of time allocating and freeing memory, there are barely any objects in the heap at any given moment. &lt;code&gt;EditDistance&lt;/code&gt; only allocates one object on the heap (&lt;code&gt;cache&lt;/code&gt;), meaning that the time spent garbage collecting is probably negligible.&lt;/p&gt;
&lt;p&gt;So the answer is:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The macos allocator is slow&lt;/li&gt;
&lt;li&gt;Go uses a custom allocator, which is faster than the one that ships with macos&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;What’s the lesson here? If you’re writing a rust program that does a lot of allocation, consider using a non-system allocator if you need some more performance. Don’t make the mistake of extrapolating beyond that simple point, though. This is a “microbenchmark”, and the results are tightly coupled to the very contrived scenario I’ve concocted.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/christianscott/levenshtein-distance-benchmarks&quot;&gt;Check out the whole github repo.&lt;/a&gt; It has implementations in several languages, as well as scripts to benchmark + test them. &lt;/p&gt;
</description>
<pubDate>Sun, 03 May 2020 10:32:11 +0000</pubDate>
<dc:creator>chrfrasco</dc:creator>
<og:title>Making rust as fast as go</og:title>
<og:description>Update: as some keen HN commenters have pointed out, it looks like the rust program is not actually equivalent to the go program. The go program parses the string once, while the rust program parses it repeatedly inside every loop. It’s quite late in Sydney as I write this so I’m not up for a fix right now, but this post is probably Fake News. The perf gains from jemalloc are real, but it’s likely not the allocators fault.</og:description>
<og:type>article</og:type>
<og:url>https://christianfscott.com/making-rust-as-fast-as-go/</og:url>
<dc:language>en-au</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.christianfscott.com/making-rust-as-fast-as-go/</dc:identifier>
</item>
<item>
<title>Ask HN: How do you manage self-study?</title>
<link>https://news.ycombinator.com/item?id=23057411</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=23057411</guid>
<description>&lt;tr readability=&quot;0.58823529411765&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr id=&quot;pagespace&quot; title=&quot;Ask HN: How do you manage self-study?&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;13.804347826087&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;8.7427536231884&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;23057411&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=23057411&quot; class=&quot;storylink&quot;&gt;Ask HN: How do you manage self-study?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.74074074074074&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_23057411&quot;&gt;295 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=ruph123&quot; class=&quot;hnuser&quot;&gt;ruph123&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=23057411&quot;&gt;11 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_23057411&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=23057411&amp;amp;goto=item%3Fid%3D23057411&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20How%20do%20you%20manage%20self-study%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20How%20do%20you%20manage%20self-study%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=23057411&amp;amp;auth=ee6bd5f18f0d5d1dbcb4145b4995cb11e3202936&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=23057411&quot;&gt;120 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;28&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;29&quot;&gt;I often feel overwhelmed by the amount of things I either wish to know or that I should know already.
&lt;p&gt;Be it theoretical knowledge about ML, CS, mechanics, math topics. Or lack of experience e.g in some algorithms I need to understand, control problems, programming lanuages.&lt;/p&gt;
&lt;p&gt;And I really struggle to organize a propper study schedule. What should I do next? Should I continue learning this one programming language? Continue reading this ML book? Try to set up and solve some control problems? For each topic I would like to learn, I already have the right material (books, problems to solve, etc.), so at least this is not a problem.&lt;/p&gt;
&lt;p&gt;Often I am so overwhelmed that I just watch stuff on youtube.&lt;/p&gt;
&lt;p&gt;I wish I had a tool or found a methodology to a) stay focused on the things I want to learn and b) to somehow track my progress.&lt;/p&gt;
&lt;p&gt;Are there any tools or methodologies that you can recommend? Please don't tell me &quot;just use pen &amp;amp; paper&quot;, I tried and I would like something more interactive.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 03 May 2020 07:14:20 +0000</pubDate>
<dc:creator>ruph123</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=23057411</dc:identifier>
</item>
<item>
<title>What would you do if you lost your Google account?</title>
<link>https://blog.viktomas.com/posts/losing-google-account/</link>
<guid isPermaLink="true" >https://blog.viktomas.com/posts/losing-google-account/</guid>
<description>&lt;div class=&quot;row align-items-end&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;
&lt;h6&gt;&lt;span&gt;Published on&lt;/span&gt; &lt;time datetime=&quot;2020-04-25 00:00:00 +0000 UTC&quot;&gt;25 April 2020&lt;/time&gt;&lt;/h6&gt;
&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;I was reading horror stories in the past about people getting locked out of their Google accounts. If you are anything like me, half of your digital life is stored in Google. Losing access to all this data would be traumatic at best.&lt;/p&gt;
&lt;p&gt;In this article I’m researching what happens when you forget your password or lose your phone. What information will Google want to know about you and how can you best prepare for this situation so you don’t lose access to your account completely.&lt;/p&gt;
&lt;p&gt;I’ve been using the same Google account for the last 12 years&lt;sup id=&quot;fnref:1&quot;/&gt;. And to be honest, I’ve never changed the password and never turned on the 2-Step Verification&lt;sup id=&quot;fnref:2&quot;/&gt; because I was afraid that I’ll lose my phone or forget my password and I won’t be able to access my account any more. I think this is not sustainable, so let’s have a look at what happens when you forget your password or you lose your phone.&lt;/p&gt;
&lt;p&gt;Google is using the following two steps to authenticate you:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1st step - &lt;strong&gt;Password&lt;/strong&gt; (mandatory) - To prove that it is really you, you need to provide Google with a text password&lt;/li&gt;
&lt;li&gt;2nd step - &lt;strong&gt;You phone&lt;/strong&gt; (optional) - Google uses different means (SMS, notifications, authenticator app) to enable your phone to uniquely identify you. On top of that it’s possible to use Security keys or keys generated by your password manager, but for simplicity we’ll use the phone example.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This approach combines something you know (password) with something you have (phone) to make it much harder for someone to impersonate you (e.g. by tricking you to enter a password into a fake log-in dialogue).&lt;/p&gt;
&lt;h2 id=&quot;turning-on-2-step-verification&quot;&gt;Turning on 2-Step Verification&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;First, you can relax. 2-Step Verification can be turned back off&lt;/strong&gt;&lt;sup id=&quot;fnref:3&quot;/&gt;&lt;/p&gt;
&lt;p&gt;When you follow the steps in &lt;a href=&quot;https://myaccount.google.com/signinoptions/two-step-verification/enroll-welcome&quot;&gt;Google’s guide&lt;/a&gt;, you get asked which of the following options would you’d like to use:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Notifications (Prompts) to your Android phone&lt;/li&gt;
&lt;li&gt;Security Key - USB stick-like device e.g. YubiKey&lt;/li&gt;
&lt;li&gt;SMS and Phone calls&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I choose notifications for convenience.&lt;/p&gt;
&lt;p&gt;Then Google asks whether I’d like to use a backup number in case you lose my phone. But if I lose my phone my number is gone too since I always use prepaid. I chose to get &lt;strong&gt;backup codes&lt;/strong&gt; instead. They are single-use codes that are more versatile than a phone number.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip 1: Store your backup keys in your password manager so if you don’t have your phone on you, you can still log in.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;account-recovery-when-you-cant-prove-it-is-you&quot;&gt;Account recovery: when you can’t prove it is you&lt;/h2&gt;
&lt;p&gt;You lost your phone and your dog ate your backup codes. Or you are having soap opera level amnesia and you don’t remember your password. How do you access your Google account?&lt;/p&gt;
&lt;p&gt;Now you are going to end up with the dreaded &lt;em&gt;Google Account Recovery&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The algorithm used by google to evaluate your identity is not openly known. Here are the things Google will want to know from you:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;What is the last password you remember?&lt;/li&gt;
&lt;li&gt;Do you still have access to your mobile devices?&lt;/li&gt;
&lt;li&gt;Your recovery phone&lt;/li&gt;
&lt;li&gt;Your recovery email&lt;/li&gt;
&lt;li&gt;Answer to your security question (&lt;em&gt;deprecated&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Request for providing additional details in writing (e.g. when you created your account, if you are travelling)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now if you answer all of these sufficiently (and ideally from the same browser and IP address that you usually use), you are going to get a link to a page where you reset your password.&lt;/p&gt;
&lt;p&gt;If you don’t answer these questions well enough, Google won’t grant you access to your account and it recommends that you forget about it and start a new one&lt;sup id=&quot;fnref:4&quot;/&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;We couldn’t be sure that you’re the owner. To keep accounts safe, we can’t give access to them if we can’t confirm who the owner is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip 2: Keep your recovery information up to date&lt;/strong&gt;&lt;sup id=&quot;fnref:5&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The best way to prepare for his situation is to have all your recovery information up to date. I’m not sure how all these recovery options affect the security. It seems to me that if you provide too many ways how to reset your account’s password, it makes it easier for someone else to do it as well.&lt;/p&gt;
&lt;h2 id=&quot;prepare-for-the-worst&quot;&gt;Prepare for the worst&lt;/h2&gt;
&lt;p&gt;The way I understand it, if you get to the “Account recovery” phase, you can’t be certain that you are going to get your account back. Most likely having your recovery email and phone up to date is going to be enough, but what if your IP looks really suspicious for some reason (trip to Thailand maybe)? One of my other Google accounts actually have been inactive for so long that Google doesn’t trust me when I enter the password and there’s no way to recover.&lt;/p&gt;
&lt;p&gt;There is one more option for super paranoid people. Backup all your data. For all things I dislike about Google, they do give you a full access to your data. Visit &lt;a href=&quot;https://takeout.google.com/&quot;&gt;Google Takeout&lt;/a&gt; to back up all your data locally (for me it is 2.8GB of email that I’m interested in). This approach brings its own risks. I’d strongly recommend encrypting the backup otherwise you have a big portion of your online life lying in a plaintext on your hard drive.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this article helped you to understand what might happen if you forget/lose your credentials/phone. I feel much more confident about both the security of my account and how to recover it should the situation arise.&lt;/p&gt;
&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot;&gt;
&lt;div class=&quot;row align-items-center&quot; readability=&quot;7.5916030534351&quot;&gt;

&lt;div class=&quot;col-md-9&quot; readability=&quot;11.274193548387&quot;&gt;
&lt;p&gt;Please, if you'd like to share any thoughts, I'm all ears. Clicking the button will open this article in Google Docs where you can leave your comments.&lt;/p&gt;
&lt;p class=&quot;small&quot;&gt;More information about what feedback I'm looking for can be found in the &lt;a href=&quot;https://blog.viktomas.com/posts/give-it-to-me&quot;&gt;&quot;Give it to me&quot;&lt;/a&gt; article&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;h2 class=&quot;mb-3&quot;&gt;Other popular articles&lt;/h2&gt;
&lt;/p&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-sm-6&quot; readability=&quot;7.5&quot;&gt;
&lt;article class=&quot;mb-5&quot; readability=&quot;5&quot;&gt;&lt;h6&gt;&lt;time datetime=&quot;2020-04-19 00:00:00 +0000 UTC&quot; class=&quot;catalogue-time&quot;&gt;19 April 2020&lt;/time&gt;&lt;/h6&gt;
&lt;h4&gt;Using text passwords for encryption is safe enough&lt;/h4&gt;
&lt;p&gt;I had a creeping suspicion in my head lately. I’m using a text password as a key to encrypt all my other passwords. I started to worry that the text password is not safe enough and and I’m only placing a minor obstacle between my passwords and a curious person. Let’s have a look whether I was right.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
&lt;div class=&quot;col-sm-6&quot; readability=&quot;7.5&quot;&gt;
&lt;article class=&quot;mb-5&quot; readability=&quot;5&quot;&gt;&lt;h6&gt;&lt;time datetime=&quot;2020-04-12 17:33:00 +0200 +0200&quot; class=&quot;catalogue-time&quot;&gt;12 April 2020&lt;/time&gt;&lt;/h6&gt;
&lt;h4&gt;My workflow&lt;/h4&gt;
&lt;p&gt;Since the dawn of time (my school years) I’ve been battling procrastination. Doing the assignments at the latest possible time was a popular activity in my social circles and I don’t remember when/if I actually started working on an assignment the day I got it. There was one mystical place where procrastination mostly avoided me and that place was the office.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 03 May 2020 06:55:10 +0000</pubDate>
<dc:creator>vicek22</dc:creator>
<dc:language>en-uk</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.viktomas.com/posts/losing-google-account/</dc:identifier>
</item>
<item>
<title>So I reverse engineered two dating apps</title>
<link>https://push32.com/post/dating-app-fail/</link>
<guid isPermaLink="true" >https://push32.com/post/dating-app-fail/</guid>
<description>&lt;p&gt;In this post I show some of my findings during the reverse engineering of the apps &lt;em&gt;Coffee Meets Bagel&lt;/em&gt; and &lt;em&gt;The League&lt;/em&gt;. I have identified several critical vulnerabilities during the research, all of which have been reported to the affected vendors.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In these unprecedented times, more and more people are escaping into the digital world to cope with social distancing. During these times cyber-security is more important than ever. From my limited experience, very few startups are mindful of security best practices. The companies responsible for a large range of dating apps are no exception. I started this little research project to see how secure the latest dating apps are.&lt;/p&gt;
&lt;h3 id=&quot;responsible-disclosure&quot;&gt;Responsible disclosure&lt;/h3&gt;
&lt;p&gt;All high severity vulnerabilities disclosed in this post have been reported to the vendors. By the time of publishing, corresponding patches have been released, and I have independently verified that the fixes are in place.&lt;/p&gt;
&lt;p&gt;I will not provide details into their proprietary APIs unless relevant.&lt;/p&gt;
&lt;h3 id=&quot;the-candidate-apps&quot;&gt;The candidate apps&lt;/h3&gt;
&lt;p&gt;I picked two popular dating apps available on iOS and Android.&lt;/p&gt;
&lt;h4 id=&quot;coffee-meets-bagel&quot;&gt;Coffee Meets Bagel&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Coffee Meets Bagel&lt;/em&gt; or CMB for short, launched in 2012, is known for showing users a limited number of matches every day. They have been hacked once in 2019, with 6 million accounts stolen. Leaked information included a full name, email address, age, registration date, and gender. CMB has been gaining popularity in recent years, and makes a good candidate for this project.&lt;/p&gt;
&lt;h4 id=&quot;the-league&quot;&gt;The League&lt;/h4&gt;
&lt;p&gt;The tagline for &lt;em&gt;The League&lt;/em&gt; app is “date intelligently”. Launched some time in 2015, it is a members-only app, with acceptance and matches based on LinkedIn and Facebook profiles. The app is more expensive and selective than its alternatives, but is security on par with the price?&lt;/p&gt;
&lt;h3 id=&quot;testing-methodologies&quot;&gt;Testing methodologies&lt;/h3&gt;
&lt;p&gt;I use a combination of static analysis and dynamic analysis for reverse engineering. For static analysis I decompile the APK, mostly using &lt;em&gt;apktool&lt;/em&gt; and &lt;em&gt;jadx&lt;/em&gt;. For dynamic analysis I use an MITM network proxy with SSL proxy capabilities.&lt;/p&gt;
&lt;p&gt;The majority of the testing is done inside a rooted Android emulator running Android 8 Oreo. Tests that require more capabilities are done on a real Android device running Lineage OS 16 (based on Android Pie), rooted with Magisk.&lt;/p&gt;
&lt;h2 id=&quot;findings-on-cmb&quot;&gt;Findings on CMB&lt;/h2&gt;
&lt;p&gt;Both apps have a lot of trackers and telemetry, but I guess that is just the state of the industry. CMB has more trackers than &lt;em&gt;The League&lt;/em&gt; though.&lt;/p&gt;
&lt;h3 id=&quot;see-who-disliked-you-on-cmb-with-this-one-simple-trick&quot;&gt;See who disliked you on CMB with this one simple trick&lt;/h3&gt;
&lt;p&gt;The API includes a &lt;code&gt;pair_action&lt;/code&gt; field in every &lt;code&gt;bagel&lt;/code&gt; object and it is an enum with the following values:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ACTION_NOT_CHECKED = 0
ACTION_LIKED = 1
ACTION_PASSED = 2
ACTION_CHECKED = 3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There exists an API that given a bagel ID returns the bagel object. The bagel ID is shown in the batch of daily bagels. So if you want to see if someone has rejected you, you could try the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;After the call to get daily suggested bagels, save the bagel ID of someone you liked.&lt;/li&gt;
&lt;li&gt;Wait until your profile is shown to your match.&lt;/li&gt;
&lt;li&gt;Call the API to get bagel, using the bagel ID.&lt;/li&gt;
&lt;li&gt;If you see the &lt;code&gt;pair_action&lt;/code&gt; changes from &lt;code&gt;0&lt;/code&gt; (unseen) to &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is a harmless vulnerability, but it is funny that this field is exposed through the API but is not available through the app.&lt;/p&gt;
&lt;h3 id=&quot;geolocation-data-leak-but-not-really&quot;&gt;Geolocation data leak, but not really&lt;/h3&gt;
&lt;p&gt;CMB shows other users’ longitude and latitude up to 2 decimal places, which is around 1 square mile. Fortunately this information &lt;strong&gt;is not real-time&lt;/strong&gt;, and it is only updated when a user chooses to update their location. (I imagine this must be used by the app for matchmaking purposes. I have not verified this hypothesis.)&lt;/p&gt;
&lt;p&gt;However, I do think this field could be hidden from the response.&lt;/p&gt;
&lt;h2 id=&quot;findings-on-the-league&quot;&gt;Findings on The League&lt;/h2&gt;
&lt;h3 id=&quot;client-side-generated-authentication-tokens&quot;&gt;Client-side generated authentication tokens&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;The League&lt;/em&gt; does something pretty unusual in their login flow:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The app sends a POST request with user’s phone number&lt;/li&gt;
&lt;li&gt;User receives the one-time password (OTP) via SMS and punches it into the app&lt;/li&gt;
&lt;li&gt;The app sends a POST request with the phone number, the OTP, and a &lt;code&gt;bearer&lt;/code&gt; value, which is a 16 byte UUID.&lt;/li&gt;
&lt;li&gt;Server receives the request, and if the OTP matches the phone number, the &lt;code&gt;bearer&lt;/code&gt; becomes user’s login token.&lt;/li&gt;
&lt;li&gt;From this point, subsequent requests to endpoints that require authentication would include the header &lt;code&gt;authorization: bearer sms:{the_uuid}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The UUID that becomes the &lt;code&gt;bearer&lt;/code&gt; is entirely client-side generated. Worse, the server does not verify that the &lt;code&gt;bearer&lt;/code&gt; value is an actual valid UUID. It might cause collisions and other problems.&lt;/p&gt;
&lt;p&gt;I recommend changing the login model so the bearer token is generated server-side and sent to the client once the server receives the correct OTP from the client.&lt;/p&gt;
&lt;h3 id=&quot;phone-number-leak-through-an-unauthenticated-api&quot;&gt;Phone number leak through an unauthenticated API&lt;/h3&gt;
&lt;p&gt;In &lt;em&gt;The League&lt;/em&gt; there exists an unauthenticated API that accepts a phone number as query parameter. The API leaks information in HTTP response code. When the phone number is registered, it returns &lt;code&gt;200 OK&lt;/code&gt;, but when the number is not registered, it returns &lt;code&gt;418 I'm a teapot&lt;/code&gt;. It could be abused in a few ways, e.g. mapping all the numbers under an area code to see who is on &lt;em&gt;The League&lt;/em&gt; and who is not. Or it can lead to potential embarrassment when your coworker finds out you are on the app.&lt;/p&gt;
&lt;p&gt;This has since been fixed when the bug was reported to the vendor. Now the API simply returns 200 for all requests.&lt;/p&gt;
&lt;h3 id=&quot;linkedin-job-details&quot;&gt;LinkedIn job details&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;The League&lt;/em&gt; integrates with LinkedIn to show a user’s employer and job title on their profile. Sometimes it goes a bit overboard gathering information. The profile API returns detailed job position information scraped from LinkedIn, like the start year, end year, etc.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&quot;title&quot;&lt;/span&gt;: &lt;span&gt;&quot;Something something intern&quot;&lt;/span&gt;,
&lt;span&gt;&quot;end_year&quot;&lt;/span&gt;: &lt;span&gt;2014&lt;/span&gt;,
&lt;span&gt;&quot;end_month&quot;&lt;/span&gt;: &lt;span&gt;8&lt;/span&gt;,
&lt;span&gt;&quot;is_current&quot;&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;,
&lt;span&gt;&quot;start_year&quot;&lt;/span&gt;: &lt;span&gt;2014&lt;/span&gt;,
&lt;span&gt;&quot;start_month&quot;&lt;/span&gt;: &lt;span&gt;6&lt;/span&gt;,
&lt;span&gt;&quot;identity_provider&quot;&lt;/span&gt;: &lt;span&gt;&quot;linkedin&quot;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the app does ask user permission to read LinkedIn profile, the user probably does not expect the detailed position information to be included in their profile for everyone else to view. I do not think that kind of information is necessary for the app to function, and it can probably be excluded from profile data.&lt;/p&gt;
&lt;h3 id=&quot;picture-and-video-leak-through-misconfigured-s3-buckets&quot;&gt;Picture and video leak through misconfigured S3 buckets&lt;/h3&gt;
&lt;p&gt;Typically for pictures or other asserts, some type of Access Control List (ACL) would be in place. For assets such as profile pictures, a common way of implementing ALC would be:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;User uploads an image&lt;/li&gt;
&lt;li&gt;Server generates a random key
&lt;ul&gt;&lt;li&gt;It is essential that the key has high entropy and is difficult to guess&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Server uploads the image under the key to the storage service&lt;/li&gt;
&lt;li&gt;Server puts the URL to the image with the key in user’s profile&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The key would serve as a “password” to access the file, and the password would only be given users who need access to the image. In the case of a dating app, it will be whoever the profile is presented to.&lt;/p&gt;
&lt;p&gt;I have identified several misconfigured S3 buckets on &lt;em&gt;The League&lt;/em&gt; during the research. &lt;strong&gt;All pictures and videos are accidentally made public&lt;/strong&gt;, with metadata such as which user uploaded them and when. Normally the app would get the images through Cloudfront, a CDN on top of the S3 buckets. Unfortunately the underlying S3 buckets are severely misconfigured.&lt;/p&gt;
&lt;p&gt;The photo and video buckets are unauthenticated and &lt;strong&gt;even allow ListObjects&lt;/strong&gt;. The keys in the bucket are in the format &lt;code&gt;{profile_uuid}-{timestamp}-{filename}&lt;/code&gt;, so there is plenty of abuse potential. For one, a competitor can dump the keys and find out the exact number of users on the app. Or an attacker can see all the photos uploaded by a victim once the profile UUID is known.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Side note: As far as I can tell, the profile UUID is randomly generated server-side when the profile is created. So that part is unlikely to be so easy to guess. The filename is controlled by the client; the server accepts any filename. However in the client app it is hardcoded to &lt;code&gt;upload.jpg&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The vendor has since disabled public ListObjects. However, I still think there should be some randomness in the key. A timestamp cannot serve as secret.&lt;/p&gt;
&lt;h3 id=&quot;ip-doxing-through-link-previews&quot;&gt;IP doxing through link previews&lt;/h3&gt;
&lt;p&gt;Link preview is one thing that is hard to get right in a lot of messaging apps. There are typically three strategies for link previews:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Sender-side link previews
&lt;ul&gt;&lt;li&gt;When a message is composed, the link preview is generated under the sender’s context.&lt;/li&gt;
&lt;li&gt;The sent message will include the preview.&lt;/li&gt;
&lt;li&gt;Recipient sees the preview generated by sender.&lt;/li&gt;
&lt;li&gt;Note that this method could allow sender to craft fake previews.&lt;/li&gt;
&lt;li&gt;This strategy is typically implemented in end-to-end encrypted messaging systems such as &lt;em&gt;Signal&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Recipient-side link previews
&lt;ul&gt;&lt;li&gt;When a message is sent, only the link is included.&lt;/li&gt;
&lt;li&gt;Recipient will fetch the link client-side and the app will show the preview.&lt;/li&gt;
&lt;li&gt;Note that this method could leak some context about the recipient, such as the IP address, user agent, and other headers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Server-side link previews
&lt;ul&gt;&lt;li&gt;In this strategy the preview is generated server-side.&lt;/li&gt;
&lt;li&gt;Sender simply sends the link. Recipient gets the preview from server.&lt;/li&gt;
&lt;li&gt;Server can fetch the link for preview either on message sent, or when message is opened.&lt;/li&gt;
&lt;li&gt;An attacker controlled external server could return a different response if the request comes from the link preview server, thus sending a fake preview to recipient.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;The League&lt;/em&gt; uses &lt;strong&gt;recipient-side link previews&lt;/strong&gt;. When a message includes a link to an external image, the link is fetched on user’s device when the message is viewed. This would effectively allow a malicious sender to send an external image URL pointing to an attacker controlled server, obtaining recipient’s IP address when the message is opened.&lt;/p&gt;
&lt;p&gt;A better solution might be just to attach the image in the message when it is sent (sender-side preview), or have the server fetch the image and put it in the message (server-side preview). Server-side previews will allow additional anti-abuse scanning. It might be a better option, but still not bulletproof.&lt;/p&gt;
&lt;h3 id=&quot;zero-click-session-hijacking-through-chat&quot;&gt;Zero-click session hijacking through chat&lt;/h3&gt;
&lt;p&gt;The app will sometimes attach the authorization header to requests that do not require authentication, such as Cloudfront GET requests. It will also gladly give out the bearer token in requests to &lt;strong&gt;external domains&lt;/strong&gt; in some cases.&lt;/p&gt;
&lt;p&gt;One of those cases is the external image link in chat messages. We already know the app uses recipient-side link previews, and the request to the external resource is executed in recipient’s context. The authorization header is included in the GET request to the external image URL. So the bearer token gets leaked to the external domain. When a malicious sender sends an image link pointing to an attacker controlled server, not only do they get recipient’s IP, but they also get their victim’s session token. This is a critical vulnerability as it allows session hijacking.&lt;/p&gt;
&lt;p&gt;Note that unlike phishing, this attack &lt;strong&gt;does not require the victim to click on the link&lt;/strong&gt;. When the message containing the image link is viewed, the app automatically leaks the session token to the attacker.&lt;/p&gt;
&lt;p&gt;It seems to be a bug related to the reuse of a global OkHttp client object. It would be best if the developers make sure the app only attaches authorization bearer header in requests to &lt;em&gt;The League&lt;/em&gt; API.&lt;/p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I did not find any particularly interesting vulnerabilities in CMB, but that does not mean CMB is more secure than &lt;em&gt;The League&lt;/em&gt;. (See &lt;em&gt;Limitations and future research&lt;/em&gt;). I did find a few security issues in &lt;em&gt;The League&lt;/em&gt;, none of which were particularly difficult to discover or exploit. I guess it really is the common mistakes people make over and over. OWASP top ten anyone?&lt;/p&gt;
&lt;p&gt;As consumers we need to be mindful with which companies we trust with our data.&lt;/p&gt;
&lt;h3 id=&quot;vendors-response&quot;&gt;Vendor’s response&lt;/h3&gt;
&lt;p&gt;I did receive a prompt response from &lt;em&gt;The League&lt;/em&gt; after sending them an email alerting them of the findings. The S3 bucket configuration was swiftly fixed. The other vulnerabilities were patched or at least mitigated within a few weeks.&lt;/p&gt;
&lt;p&gt;I think startups could certainly offer bug bounties. It is a nice gesture, and more importantly, platforms like HackerOne provide researchers a legal path to the disclosure of vulnerabilities. Unfortunately neither of the two apps in the post has such program.&lt;/p&gt;
&lt;h3 id=&quot;limitations-and-future-research&quot;&gt;Limitations and future research&lt;/h3&gt;
&lt;p&gt;This research is not comprehensive, and &lt;strong&gt;should not be seen as a security audit&lt;/strong&gt;. Most of the tests in this post were done on the network IO level, and very little on the client itself. Notably, I did not test for remote code execution or buffer overflow type vulnerabilities. In future research, we could look more into the security of the client applications.&lt;/p&gt;
&lt;p&gt;This could be done with dynamic analysis, using methods such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hooking Android APIs to see what functions the app is calling (with &lt;em&gt;Xposed framework&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Attaching a debugger to the app (Android Studio can do this)&lt;/li&gt;
&lt;li&gt;Scanning memory for interesting stuff (using tools such as &lt;em&gt;scanmem&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&quot;special-thanks-to&quot;&gt;Special thanks to…&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;XDA-Developers and the open source Android community, for the amazing tools.&lt;/li&gt;
&lt;li&gt;David Siu, VP of Engineering at &lt;em&gt;The League&lt;/em&gt;, for the quick turnaround when the vulnerabilities were reported.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://coffeemeetsbagel.com/&quot;&gt;Coffee Meets Bagel&lt;/a&gt;. coffeemeetsbagel.com.&lt;/li&gt;
&lt;li&gt;Williams, Chris. &lt;a href=&quot;https://www.theregister.co.uk/2019/02/11/620_million_hacked_accounts_dark_web/&quot;&gt;620 million accounts stolen from 16 hacked websites now for sale on dark web, seller boasts&lt;/a&gt;. &lt;em&gt;The Register&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Ha, Anthony. &lt;a href=&quot;https://techcrunch.com/2017/01/26/the-league-brings-its-picky-dating-app-to-android/&quot;&gt;The League brings its picky dating app to Android&lt;/a&gt;. &lt;em&gt;Tech Crunch&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xda-developers.com/xposed-framework-hub/&quot;&gt;Xposed Framework Hub&lt;/a&gt;. &lt;em&gt;XDA-Developers&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hackerone.com/&quot;&gt;Hacker One&lt;/a&gt;. hackerone.com.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/training/articles/security-config&quot;&gt;Network security configuration&lt;/a&gt;. &lt;em&gt;Android Developers&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Sun, 03 May 2020 03:13:06 +0000</pubDate>
<dc:creator>libertylocked</dc:creator>
<og:title>So I reverse engineered two dating apps...</og:title>
<og:description>In this post I show some of my findings during the reverse engineering of the apps Coffee Meets Bagel and The League. I have identified several critical vulnerabilities during the research, all of which have been reported to the affected vendors. Introduction In these unprecedented times, more and more people are escaping into the digital world to cope with social distancing. During these times cyber-security is more important than ever. From my limited experience, very few startups are mindful of security best practices.</og:description>
<og:type>article</og:type>
<og:url>/post/dating-app-fail/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://push32.com/post/dating-app-fail/</dc:identifier>
</item>
<item>
<title>Oil&amp;#039;s Collapse Is a Geopolitical Reset in Disguise</title>
<link>https://www.bloomberg.com/opinion/articles/2020-04-29/covid-19-oil-collapse-is-geopolitical-reset-in-disguise</link>
<guid isPermaLink="true" >https://www.bloomberg.com/opinion/articles/2020-04-29/covid-19-oil-collapse-is-geopolitical-reset-in-disguise</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2020-04-29/covid-19-oil-collapse-is-geopolitical-reset-in-disguise&quot;&gt;https://www.bloomberg.com/opinion/articles/2020-04-29/covid-19-oil-collapse-is-geopolitical-reset-in-disguise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23056101&quot;&gt;https://news.ycombinator.com/item?id=23056101&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 230&lt;/p&gt;
&lt;p&gt;# Comments: 202&lt;/p&gt;
</description>
<pubDate>Sun, 03 May 2020 01:04:30 +0000</pubDate>
<dc:creator>jseliger</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=cd4cc400-8da2-11ea-818a-571f8f27c154&amp;url=L29waW5pb24vYXJ0aWNsZXMvMjAyMC0wNC0yOS9jb3ZpZC0xOS1vaWwtY29sbGFwc2UtaXMtZ2VvcG9saXRpY2FsLXJlc2V0LWluLWRpc2d1aXNl</dc:identifier>
</item>
<item>
<title>Lit: A ridiculously small responsive CSS framework</title>
<link>https://ajusa.github.io/lit/</link>
<guid isPermaLink="true" >https://ajusa.github.io/lit/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;&lt;title&gt;lit&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;link href=&quot;https://fonts.googleapis.com/css?family=Nunito:300,400,700&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/lit.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/util.css&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body class=&quot;m0&quot; id=&quot;readabilityBody&quot; readability=&quot;26.727272727273&quot;&gt;
&lt;div class=&quot;c&quot; readability=&quot;8.9090909090909&quot;&gt;
&lt;header class=&quot;mb3&quot;&gt;
&lt;h5 class=&quot;tc mb1&quot;&gt;a ridiculously small responsive css framework&lt;/h5&gt;

&lt;hr/&gt;&lt;/header&gt;&lt;p&gt;lit has two modules: lit and util. Both of them are designed to be as small as possible, and easy to extend.&lt;/p&gt;
&lt;div class=&quot;row mt3&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;5 col card tc b-accent&quot; readability=&quot;11&quot;&gt;
&lt;h4 class=&quot;mb1 normal accent&quot;&gt;lit&lt;/h4&gt;
&lt;p&gt;lit contains all of the basics for a framework, such as a responsive grid, typography, and other elements.&lt;/p&gt;
&lt;form action=&quot;docs/lit.html&quot;&gt;
&lt;p&gt;&lt;button class=&quot;mt1 btn primary white bold&quot; type=&quot;submit&quot;&gt;Get Started&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;div class=&quot;5 col card tc b-info&quot; readability=&quot;8&quot;&gt;
&lt;h4 class=&quot;mb1 normal info&quot;&gt;util&lt;/h4&gt;
&lt;p&gt;util has many CSS utility classes that can be used to extend lit, or any CSS framework.&lt;/p&gt;
&lt;form action=&quot;docs/util.html&quot;&gt;
&lt;p&gt;&lt;button class=&quot;mt1 btn bg-info b-info white bold&quot; type=&quot;submit&quot;&gt;Get Started&lt;/button&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Sat, 02 May 2020 23:54:17 +0000</pubDate>
<dc:creator>spking</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ajusa.github.io/lit/</dc:identifier>
</item>
<item>
<title>Medium-hard SQL interview questions</title>
<link>https://quip.com/2gwZArKuWk7W</link>
<guid isPermaLink="true" >https://quip.com/2gwZArKuWk7W</guid>
<description>&lt;p id=&quot;WbZACANIFCi&quot; class=&quot;line&quot;&gt;By Zachary Thomas (&lt;a href=&quot;mailto:zthomas.nc@gmail.com&quot; rel=&quot;nofollow&quot;&gt;zthomas.nc@gmail.com&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/zach_i_thomas&quot; rel=&quot;nofollow&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/thomaszi/&quot; rel=&quot;nofollow&quot;&gt;LinkedIn&lt;/a&gt;) &lt;/p&gt;
&lt;p id=&quot;WbZACA7m9Y0&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAYPfwi&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Tip:&lt;/strong&gt; See the Table of Contents (document outline) by hovering over the vertical line on the right side of the page &lt;/p&gt;
&lt;h2 id=&quot;WbZACAvwBuk&quot;&gt;Background &amp;amp; Motivation&lt;/h2&gt;
&lt;blockquote id=&quot;WbZACA2g5er&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;The first 70% of SQL is pretty straightforward but the remaining 30% can be pretty tricky.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;WbZACAZS62y&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAKZa0g&quot; class=&quot;line&quot;&gt;Between the fall of 2015 and the summer of 2019 I interviewed for data analyst and data scientists positions four separate times, getting to onsite interviews at over a dozen companies. After an interview in 2017 went poorly — mostly due to me floundering at the more difficult SQL questions they asked me — I started putting together a study guide of medium and hard SQL questions to better prepare and found it particularly useful during my 2019 interview cycle. Over the past year I have shared that guide with a couple of friends, and with the extra time on my hands due to the coronavirus pandemic, I have polished it up into this doc. &lt;/p&gt;
&lt;p id=&quot;WbZACAwpU54&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAKR7Vk&quot; class=&quot;line&quot;&gt;There are plenty of great beginner SQL guides out there. My favorites are Codecademy’s &lt;a href=&quot;https://www.codecademy.com/learn/learn-sql&quot; rel=&quot;nofollow&quot;&gt;interactive SQL courses&lt;/a&gt; and Zi Chong Kao’s &lt;a href=&quot;https://selectstarsql.com/&quot; rel=&quot;nofollow&quot;&gt;Select Star SQL&lt;/a&gt;. However, like I told a friend, while the first 70% of SQL is pretty straightforward, the remaining 30% can be pretty tricky. Data analyst and data scientist interview questions at technology companies often pull from that 30%.  &lt;/p&gt;
&lt;p id=&quot;WbZACAN63Gz&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACA5gSEb&quot; class=&quot;line&quot;&gt;Strangely, I have never really found a comprehensive source online for those medium-hard SQL questions, which is why I put together this guide. &lt;/p&gt;
&lt;p id=&quot;WbZACAeCXka&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAHVf0I&quot; class=&quot;line&quot;&gt;Working through this guide should improve your performance on data analyst interviews. It should also make you better at your current and future job positions. Personally, I find some of the SQL patterns found in this doc useful for ETLs powering reporting tools featuring trends over time. &lt;/p&gt;
&lt;p id=&quot;WbZACADn68v&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACApH5Ob&quot; class=&quot;line&quot;&gt;To be clear, data analyst and data scientist interviews consist of more than SQL questions. Other common topics include explaining past projects, A/B testing, metric development and open-ended analytical problems. This &lt;a href=&quot;https://qr.ae/pNrdGV&quot; rel=&quot;nofollow&quot;&gt;Quora answer&lt;/a&gt; has Facebook’s product analyst interview guide circa 2017, which discusses this topic in more depth. That said, if improving your SQL skills can make your interviews less stressful than they already are, it could very well be worth your time. &lt;/p&gt;
&lt;p id=&quot;WbZACA2eBOM&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAfeJ9p&quot; class=&quot;line&quot;&gt;In the future, I may transition this doc to a website like &lt;a href=&quot;https://selectstarsql.com/&quot; rel=&quot;nofollow&quot;&gt;Select Star SQL&lt;/a&gt; with an embedded SQL editor so that readers can write SQL statements to questions and get real-time feedback on their code. Another option could be adding these questions as problems on Leetcode. For the time being though I just wanted to publish this doc so that people could find it useful now.  &lt;/p&gt;
&lt;p id=&quot;WbZACABfLdV&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACA3DtQJ&quot; class=&quot;line&quot;&gt;&lt;strong&gt;I would love to get your feedback on this doc. Please drop a note if you find this useful, have improvements/corrections, or encounter other good resources for medium/hard difficulty SQL questions. &lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;WbZACAEjWv1&quot;&gt;Assumptions &amp;amp; How to use this guide &lt;/h2&gt;
&lt;p id=&quot;WbZACAK12Qe&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Assumptions about SQL proficiency: &lt;/strong&gt;This guide assumes you have a working knowledge of SQL. You probably use it frequently at work already but want to sharpen your skills on topics like self-joins and window functions. &lt;/p&gt;
&lt;p id=&quot;WbZACAJ3jAt&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACA6QyaD&quot; class=&quot;line&quot;&gt;&lt;strong&gt;How to use this guide:&lt;/strong&gt; Since interviews usually utilize a whiteboard or a virtual (non-compiling) notepad, my recommendation is to get out a pencil and paper and write out your solutions to each part of the problem, and once complete compare your answers to the answer key. Or, complete these with a friend who can act as the interviewer!&lt;/p&gt;
&lt;div class=&quot;&quot; data-section-style=&quot;5&quot;&gt;
&lt;ul id=&quot;WbZACAheLCp&quot;&gt;&lt;li id=&quot;WbZACA88Aw3&quot; class=&quot;&quot; value=&quot;1&quot;&gt;&lt;span id=&quot;WbZACA88Aw3&quot;&gt;Small SQL syntax errors aren’t a big deal during whiteboard/notepad interviews. However, they can distracting to the interviewer, so ideally practice reducing these so your logic shines through in the interview. &lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li id=&quot;WbZACArh2wq&quot; class=&quot;&quot;&gt;&lt;span id=&quot;WbZACArh2wq&quot;&gt;The answers I provide may not be the only way to successfully solve the question. Feel free to message with additional solutions and I can add them to this guide! &lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h2 id=&quot;WbZACA1LBwg&quot;&gt;Tips on solving difficult SQL interview questions &lt;/h2&gt;
&lt;p id=&quot;WbZACAZ1seX&quot; class=&quot;line&quot;&gt;This advice mirrors typical code interview advice ... &lt;/p&gt;
&lt;div class=&quot;&quot; data-section-style=&quot;6&quot;&gt;
&lt;ul id=&quot;WbZACA5xF3S&quot;&gt;&lt;li id=&quot;WbZACA6ooAW&quot; class=&quot;&quot; value=&quot;1&quot;&gt;&lt;span id=&quot;WbZACA6ooAW&quot;&gt;Listen carefully to problem description, repeat back the crux of the problem to the interviewer&lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li id=&quot;WbZACAID8Y6&quot; class=&quot;&quot;&gt;&lt;span id=&quot;WbZACAID8Y6&quot;&gt;Spell out an edge case to demonstrate you actually understand problem (i.e. a row that &lt;em&gt;wouldn’t&lt;/em&gt; be included in the output of the SQL you are about to sketch out) &lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li id=&quot;WbZACAZ5SNS&quot; class=&quot;parent&quot;&gt;&lt;span id=&quot;WbZACAZ5SNS&quot;&gt;(If the problem involves a self-join) For your own benefit sketch out what the self-join will look like — this will typically be at least three columns: a column of interest from the main table, the column to join from the main table, and the column to join from the secondary table &lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;&lt;li id=&quot;WbZACAW6TaV&quot; class=&quot;&quot;&gt;&lt;span id=&quot;WbZACAW6TaV&quot;&gt;Or, as you get more used to self-join problems, you can explain this step verbally &lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li id=&quot;WbZACAJ06ww&quot; class=&quot;&quot;&gt;&lt;span id=&quot;WbZACAJ06ww&quot;&gt;Start writing SQL — err towards writing SQL versus trying to perfectly understand the problem. Verbalize your assumptions as you go so your interviewer can correct you if you go astray. &lt;/span&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;h2 id=&quot;WbZACAc1wRf&quot;&gt;Acknowledgments and Additional Resources &lt;/h2&gt;
&lt;p id=&quot;WbZACAi2vbO&quot; class=&quot;line&quot;&gt;Some of the problems listed here are adapted from old Periscope blog posts (mostly written around 2014 by &lt;a href=&quot;https://www.linkedin.com/in/seangcook/&quot; rel=&quot;nofollow&quot;&gt;Sean Cook&lt;/a&gt;, although his authorship seems to have been removed from the posts following SiSense's &lt;a href=&quot;https://www.sisense.com/blog/sisense-and-periscope-data-merge-2/&quot; rel=&quot;nofollow&quot;&gt;merger with&lt;/a&gt; Periscope) or discussions from Stack Overflow; I've noted them at the start of questions as appropriate. &lt;/p&gt;
&lt;p id=&quot;WbZACAFie7v&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAEWdMv&quot; class=&quot;line&quot;&gt;&lt;a href=&quot;https://selectstarsql.com&quot; rel=&quot;nofollow&quot;&gt;Select Star SQL&lt;/a&gt; has good &lt;a href=&quot;https://selectstarsql.com/questions.html#challenge_questions&quot; rel=&quot;nofollow&quot;&gt;challenge questions&lt;/a&gt; that are complementary to the questions in this doc. &lt;/p&gt;
&lt;p id=&quot;WbZACAvoR6c&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAXRIzN&quot; class=&quot;line&quot;&gt;Please note that these questions are not literal copies of SQL interview questions I have encountered while interviewing nor were they interview questions used at a company I have worked at or work at. &lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;WbZACA9bEW8&quot;&gt;#1: MoM Percent Change &lt;/h2&gt;
&lt;p id=&quot;WbZACAtzLJd&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Oftentimes it's useful to know how much a key metric, such as monthly active users, changes between months. Say we have a table &lt;code&gt;logins&lt;/code&gt; in the form: &lt;/p&gt;
&lt;pre id=&quot;WbZACASjV82&quot; class=&quot;prettyprint&quot;&gt;
| user_id | date       |&lt;br /&gt;|---------|------------|&lt;br /&gt;| 1       | 2018-07-01 |&lt;br /&gt;| 234     | 2018-07-02 |&lt;br /&gt;| 3       | 2018-07-02 |&lt;br /&gt;| 1       | 2018-07-02 |&lt;br /&gt;| ...     | ...        |&lt;br /&gt;| 234     | 2018-10-04 |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAvDVwy&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task&lt;/strong&gt;: Find the month-over-month percentage change for monthly active users (MAU). &lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAGPW6k&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;WbZACA9cVvU&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAakdFL&quot; class=&quot;line&quot;&gt;&lt;em&gt;(This solution, like other solution code blocks you will see in this doc, contains comments about SQL syntax that may differ between flavors of SQL or other comments about the solutions as listed) &lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAWqT4w&quot; class=&quot;prettyprint&quot; readability=&quot;14.894736842105&quot;&gt;
WITH mau AS &lt;br /&gt;(&lt;br /&gt;SELECT &lt;br /&gt;/* &lt;br /&gt;* Typically, interviewers allow you to write psuedocode for date functions &lt;br /&gt;* i.e. will NOT be checking if you have memorized date functions. &lt;br /&gt;* Just explain what your function does as you whiteboard &lt;br /&gt;*&lt;br /&gt;* DATE_TRUNC() is available in Postgres, but other SQL date functions or &lt;br /&gt;* combinations of date functions can give you a identical results   &lt;br /&gt;* See &lt;a href=&quot;https://www.postgresql.org/docs/9.0/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC&quot; rel=&quot;nofollow&quot;&gt;https://www.postgresql.org/docs/9.0/functions-datetime.html#FUNCTIONS-DATETIME-TRUNC&lt;/a&gt;&lt;br /&gt;*/ &lt;br /&gt;DATE_TRUNC('month', date) month_timestamp,&lt;br /&gt;COUNT(DISTINCT user_id) mau&lt;br /&gt;FROM &lt;br /&gt;logins &lt;br /&gt;GROUP BY &lt;br /&gt;DATE_TRUNC('month', date)&lt;br /&gt;)&lt;p&gt;SELECT &lt;br /&gt;/*&lt;br /&gt;* You don't literally need to include the previous month in this SELECT statement. &lt;br /&gt;* &lt;br /&gt;* However, as mentioned in the &quot;Tips&quot; section of this guide, it can be helpful &lt;br /&gt;* to at least sketch out self-joins to avoid getting confused which table &lt;br /&gt;* represents the prior month vs current month, etc. &lt;br /&gt;*/ &lt;br /&gt;a.month_timestamp previous_month, &lt;br /&gt;a.mau previous_mau, &lt;br /&gt;b.month_timestamp current_month, &lt;br /&gt;b.mau current_mau, &lt;br /&gt;ROUND(100.0*(b.mau - a.mau)/a.mau,2) AS percent_change &lt;br /&gt;FROM&lt;br /&gt;mau a &lt;br /&gt;JOIN &lt;br /&gt;/*&lt;br /&gt;* Could also have done `ON b.month_timestamp = a.month_timestamp + interval '1 month'` &lt;br /&gt;*/&lt;br /&gt;mau b ON a.month_timestamp = b.month_timestamp - interval '1 month' &lt;br /&gt;&lt;/p&gt;&lt;/pre&gt;
&lt;p id=&quot;WbZACAdjDop&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h2 id=&quot;WbZACAA6gik&quot;&gt;#2: Tree Structure Labeling   &lt;/h2&gt;
&lt;p id=&quot;WbZACA3O2J0&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say you have a table &lt;code&gt;tree&lt;/code&gt; with a column of nodes and a column corresponding parent nodes &lt;/p&gt;
&lt;pre id=&quot;WbZACAbMRRz&quot; class=&quot;prettyprint&quot;&gt;
node   parent&lt;br /&gt;1       2&lt;br /&gt;2       5&lt;br /&gt;3       5&lt;br /&gt;4       3&lt;br /&gt;5       NULL 
&lt;/pre&gt;
&lt;p id=&quot;WbZACAx6ybe&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Write SQL such that we label each node as a “leaf”, “inner” or “Root” node, such that for the nodes above we get: &lt;/p&gt;
&lt;pre id=&quot;WbZACAmrwa5&quot; class=&quot;prettyprint&quot;&gt;
node    label  &lt;br /&gt;1       Leaf&lt;br /&gt;2       Inner&lt;br /&gt;3       Inner&lt;br /&gt;4       Leaf&lt;br /&gt;5       Root
&lt;/pre&gt;
&lt;p id=&quot;WbZACA859Zx&quot; class=&quot;line&quot;&gt;(Side note: &lt;a href=&quot;http://ceadserv1.nku.edu/longa//classes/mat385_resources/docs/trees.html&quot; rel=&quot;nofollow&quot;&gt;this link&lt;/a&gt; has more details on Tree data structure terminology. Not needed to solve the problem though!)&lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAUtFCB&quot; class=&quot;line&quot;&gt;&lt;strong&gt;&lt;em&gt;Solution:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;WbZACAf5NE4&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACARSCx9&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; this more generalizable solution was contributed by Fabian Hofmann on 5/2/20. Thank, FH! &lt;/p&gt;
&lt;pre id=&quot;WbZACALlzxv&quot; class=&quot;prettyprint&quot; readability=&quot;7&quot;&gt;
WITH join_table AS&lt;br /&gt;(&lt;br /&gt;SELECT &lt;br /&gt;cur.node, &lt;br /&gt;cur.parent, &lt;br /&gt;COUNT(next.node) AS num_children&lt;br /&gt;FROM &lt;br /&gt;tree cur&lt;br /&gt;LEFT JOIN &lt;br /&gt;tree next ON (next.parent = cur.node)&lt;br /&gt;GROUP BY &lt;br /&gt;cur.node, &lt;br /&gt;cur.parent&lt;br /&gt;)&lt;p&gt;SELECT&lt;br /&gt;node,&lt;br /&gt;CASE&lt;br /&gt;WHEN parent IS NULL THEN &quot;Root&quot;&lt;br /&gt;WHEN num_children = 0 THEN &quot;Leaf&quot;&lt;br /&gt;ELSE &quot;Inner&quot;&lt;br /&gt;END AS label&lt;br /&gt;FROM &lt;br /&gt;join_table 
&lt;/p&gt;&lt;/pre&gt;
&lt;p id=&quot;WbZACAv9dgl&quot; class=&quot;line&quot;&gt;An alternate solution, without explicit joins: &lt;/p&gt;
&lt;p id=&quot;WbZACALoK49&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAUWbSR&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; William Chargin on 5/2/20 noted that &lt;code&gt;WHERE parent IS NOT NULL&lt;/code&gt;  is needed to make this solution return &lt;code&gt;Leaf&lt;/code&gt; instead of &lt;code&gt;NULL&lt;/code&gt;. Thanks, WC! &lt;/p&gt;
&lt;pre id=&quot;WbZACA7eLBd&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;node,&lt;br /&gt;CASE &lt;br /&gt;WHEN parent IS NULL THEN 'Root'&lt;br /&gt;WHEN node NOT IN &lt;br /&gt;(SELECT parent FROM tree WHERE parent IS NOT NULL) THEN 'Leaf'&lt;br /&gt;WHEN node IN (SELECT parent FROM tree) AND parent IS NOT NULL THEN 'Inner'&lt;br /&gt;END AS label &lt;br /&gt;from &lt;br /&gt;tree
&lt;/pre&gt;
&lt;p id=&quot;WbZACAUXNLU&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h2 id=&quot;WbZACAAd42s&quot;&gt;#3: Retained Users Per Month (multi-part)&lt;/h2&gt;
&lt;p id=&quot;WbZACAyNsqQ&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement: &lt;/strong&gt;this problem is adapted from SiSense’s &lt;a href=&quot;https://www.sisense.com/blog/use-self-joins-to-calculate-your-retention-churn-and-reactivation-metrics/&quot; rel=&quot;nofollow&quot;&gt;“Using Self Joins to Calculate Your Retention, Churn, and Reactivation Metrics”&lt;/a&gt; blog post&lt;/p&gt;
&lt;h3 id=&quot;WbZACAjgUR7&quot;&gt;Part 1: &lt;/h3&gt;
&lt;p id=&quot;WbZACAPzWAy&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say we have login data in the table &lt;code&gt;logins&lt;/code&gt;: &lt;/p&gt;
&lt;pre id=&quot;WbZACAw859l&quot; class=&quot;prettyprint&quot;&gt;
| user_id | date       |&lt;br /&gt;|---------|------------|&lt;br /&gt;| 1       | 2018-07-01 |&lt;br /&gt;| 234     | 2018-07-02 |&lt;br /&gt;| 3       | 2018-07-02 |&lt;br /&gt;| 1       | 2018-07-02 |&lt;br /&gt;| ...     | ...        |&lt;br /&gt;| 234     | 2018-10-04 |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAGOHB8&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Write a query that gets the number of retained users per month. In this case, retention for a given month is defined as the number of users who logged in that month who also logged in the immediately previous month. &lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAWuRAY&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAxi9oE&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;DATE_TRUNC('month', a.date) month_timestamp, &lt;br /&gt;COUNT(DISTINCT a.user_id) retained_users &lt;br /&gt;FROM &lt;br /&gt;logins a &lt;br /&gt;JOIN &lt;br /&gt;logins b ON a.user_id = b.user_id &lt;br /&gt;AND DATE_TRUNC('month', a.date) = DATE_TRUNC('month', b.date) + &lt;br /&gt;interval '1 month'&lt;br /&gt;GROUP BY &lt;br /&gt;date_trunc('month', a.date)
&lt;/pre&gt;
&lt;p id=&quot;WbZACAQsZlT&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; Tom Moertel pointed out de-duping user-login pairs before the self-join would make the solution more efficient and contributed the alternate solution below. Thanks, TM! &lt;/p&gt;
&lt;p id=&quot;WbZACA1ElKE&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACA2rWT2&quot; class=&quot;line&quot;&gt;Alternate solution: &lt;/p&gt;
&lt;pre id=&quot;WbZACA4D3QT&quot; class=&quot;prettyprint&quot; readability=&quot;9&quot;&gt;
WITH DistinctMonthlyUsers AS (&lt;br /&gt;/*&lt;br /&gt;* For each month, compute the *set* of users having logins.&lt;br /&gt;*/&lt;br /&gt;SELECT DISTINCT&lt;br /&gt;DATE_TRUNC('MONTH', a.date) AS month_timestamp,&lt;br /&gt;user_id&lt;br /&gt;FROM logins&lt;br /&gt;)&lt;p&gt;SELECT&lt;br /&gt;CurrentMonth.month_timestamp month_timestamp,&lt;br /&gt;COUNT(PriorMonth.user_id) AS retained_user_count&lt;br /&gt;FROM &lt;br /&gt;DistinctMonthlyUsers AS CurrentMonth&lt;br /&gt;LEFT JOIN &lt;br /&gt;DistinctMonthlyUsers AS PriorMonth&lt;br /&gt;ON&lt;br /&gt;CurrentMonth.month_timestamp = PriorMonth.month_timestamp + INTERVAL '1 MONTH'&lt;br /&gt;AND &lt;br /&gt;CurrentMonth.user_id = PriorMonth.user_id
&lt;/p&gt;&lt;/pre&gt;
&lt;h3 id=&quot;WbZACA9RPd6&quot;&gt;Part 2: &lt;/h3&gt;
&lt;p id=&quot;WbZACAwDPdh&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Now we’ll take retention and turn it on its head: Write a query to find many users last month &lt;em&gt;did not&lt;/em&gt; come back this month. i.e. the number of churned users.  &lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAOhqeC&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAChMNf&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;DATE_TRUNC('month', a.date) month_timestamp, &lt;br /&gt;COUNT(DISTINCT b.user_id) churned_users &lt;br /&gt;FROM &lt;br /&gt;logins a &lt;br /&gt;FULL OUTER JOIN &lt;br /&gt;logins b ON a.user_id = b.user_id &lt;br /&gt;AND DATE_TRUNC('month', a.date) = DATE_TRUNC('month', b.date) + &lt;br /&gt;interval '1 month'&lt;br /&gt;WHERE &lt;br /&gt;a.user_id IS NULL &lt;br /&gt;GROUP BY &lt;br /&gt;DATE_TRUNC('month', a.date)
&lt;/pre&gt;
&lt;p id=&quot;WbZACAbkCT2&quot; class=&quot;line&quot;&gt;Note that there are solutions to this problem that can use &lt;code&gt;LEFT&lt;/code&gt; or &lt;code&gt;RIGHT&lt;/code&gt; joins. &lt;/p&gt;
&lt;p id=&quot;WbZACADPwKT&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h3 id=&quot;WbZACARKazL&quot;&gt;Part 3: &lt;/h3&gt;
&lt;p id=&quot;WbZACAQ1jfR&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; this question is probably more complex than the kind you would encounter in an interview. Consider it a challenge problem, or feel free to skip it!&lt;/p&gt;
&lt;p id=&quot;WbZACAkeN7g&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACArmmto&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context&lt;/strong&gt;: Good work on the previous two problems! Data engineering has decided to give you a helping hand by creating a table of churned users per month, &lt;code&gt;user_churns&lt;/code&gt;. If a user is active last month but then not active this month, then that user gets an entry for this month. &lt;code&gt;user_churns&lt;/code&gt; has the form: &lt;/p&gt;
&lt;pre id=&quot;WbZACA6ywjN&quot; class=&quot;prettyprint&quot;&gt;
| user_id | month_date |&lt;br /&gt;|---------|------------|&lt;br /&gt;| 1       | 2018-05-01 |&lt;br /&gt;| 234     | 2018-05-01 |&lt;br /&gt;| 3       | 2018-05-01 |&lt;br /&gt;| 12      | 2018-05-01 |&lt;br /&gt;| ...     | ...        |&lt;br /&gt;| 234     | 2018-10-01 |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAKCozB&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACA3TlrM&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task&lt;/strong&gt;: You now want to do a cohort analysis of active users this month &lt;em&gt;who have been reactivated users in the past&lt;/em&gt;. Create a table that contains these users. You may use the tables &lt;code&gt;user_churns&lt;/code&gt; as well as &lt;code&gt;logins&lt;/code&gt; to create this cohort. In Postgres, the current timestamp is available through &lt;code&gt;current_timestamp&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAVoJNy&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAaoccP&quot; class=&quot;prettyprint&quot;&gt;
WITH user_login_data AS &lt;br /&gt;(&lt;br /&gt;SELECT &lt;br /&gt;DATE_TRUNC('month', a.date) month_timestamp,&lt;br /&gt;a.user_id,&lt;br /&gt;/* &lt;br /&gt;* At least in the flavors of SQL I have used, you don't need to &lt;br /&gt;* include the columns used in HAVING in the SELECT statement.&lt;br /&gt;* I have written them out for clarity here.  &lt;br /&gt;*/ &lt;br /&gt;MAX(b.month_date) as most_recent_churn, &lt;br /&gt;MAX(DATE_TRUNC('month', c.date)) as most_recent_active &lt;br /&gt;FROM &lt;br /&gt;logins a&lt;br /&gt;JOIN &lt;br /&gt;user_churns b &lt;br /&gt;ON a.user_id = b.user_id AND DATE_TRUNC('month', a.date) &amp;gt; b.month_date &lt;br /&gt;JOIN&lt;br /&gt;logins c &lt;br /&gt;ON a.user_id = c.user_id &lt;br /&gt;AND &lt;br /&gt;DATE_TRUNC('month', a.date) &amp;gt; DATE_TRUNC('month', c.date)&lt;br /&gt;WHERE &lt;br /&gt;DATE_TRUNC('month', a.date) = DATE_TRUNC('month', current_timestamp)&lt;br /&gt;GROUP BY &lt;br /&gt;DATE_TRUNC('month', a.date),&lt;br /&gt;a.user_id&lt;br /&gt;HAVING &lt;br /&gt;most_recent_churn &amp;gt; most_recent_active
&lt;/pre&gt;
&lt;p id=&quot;WbZACAOh4wk&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h2 id=&quot;WbZACAdSqab&quot;&gt;#4: Cumulative Sums &lt;/h2&gt;
&lt;p id=&quot;WbZACAgc50C&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; This problem was inspired by Sisense’s &lt;a href=&quot;https://www.sisense.com/blog/cash-flow-modeling-in-sql/&quot; rel=&quot;nofollow&quot;&gt;“Cash Flow modeling in SQL”&lt;/a&gt; blog post &lt;/p&gt;
&lt;p id=&quot;WbZACAb0EeT&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAQdgIy&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say we have a table &lt;code&gt;transactions&lt;/code&gt; in the form:&lt;/p&gt;
&lt;pre id=&quot;WbZACAqPz1F&quot; class=&quot;prettyprint&quot;&gt;
| date       | cash_flow |&lt;br /&gt;|------------|-----------|&lt;br /&gt;| 2018-01-01 | -1000     |&lt;br /&gt;| 2018-01-02 | -100      |&lt;br /&gt;| 2018-01-03 | 50        |&lt;br /&gt;| ...        | ...       |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAQKnVe&quot; class=&quot;line&quot;&gt;Where &lt;code&gt;cash_flow&lt;/code&gt; is the revenues minus costs for each day. &lt;/p&gt;
&lt;p id=&quot;WbZACAm2RSk&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAxYnf4&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Write a query to get &lt;em&gt;cumulative&lt;/em&gt; cash flow for each day such that we end up with a table in the form below: &lt;/p&gt;
&lt;pre id=&quot;WbZACAPy9st&quot; class=&quot;prettyprint&quot;&gt;
| date       | cumulative_cf |&lt;br /&gt;|------------|---------------|&lt;br /&gt;| 2018-01-01 | -1000         |&lt;br /&gt;| 2018-01-02 | -1100         |&lt;br /&gt;| 2018-01-03 | -1050         |&lt;br /&gt;| ...        | ...           |
&lt;/pre&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAx7zQq&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAmZzIp&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;a.date date, &lt;br /&gt;SUM(b.cash_flow) as cumulative_cf &lt;br /&gt;FROM&lt;br /&gt;transactions a&lt;br /&gt;JOIN b &lt;br /&gt;transactions b ON a.date &amp;gt;= b.date &lt;br /&gt;GROUP BY &lt;br /&gt;a.date &lt;br /&gt;ORDER BY &lt;br /&gt;date ASC
&lt;/pre&gt;
&lt;p id=&quot;WbZACAPIxVe&quot; class=&quot;line&quot;&gt;Alternate solution using a window function (more efficient!):  &lt;/p&gt;
&lt;pre id=&quot;WbZACASSFmF&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;date, &lt;br /&gt;SUM(cash_flow) OVER (ORDER BY date ASC) as cumulative_cf &lt;br /&gt;FROM&lt;br /&gt;transactions &lt;br /&gt;ORDER BY &lt;br /&gt;date ASC
&lt;/pre&gt;
&lt;h2 id=&quot;WbZACAlWjP5&quot;&gt;#5: Rolling Averages &lt;/h2&gt;
&lt;p id=&quot;WbZACAiPPm9&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; This problem is adapted from Sisense’s &lt;a href=&quot;https://www.sisense.com/blog/rolling-average/&quot; rel=&quot;nofollow&quot;&gt;“Rolling Averages in MySQL and SQL Server”&lt;/a&gt; blog post &lt;/p&gt;
&lt;p id=&quot;WbZACAzqvSn&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAFRykT&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; there are different ways to compute rolling/moving averages. Here we'll use a preceding average which means that the metric for the 7th day of the month would be the average of the preceding 6 days and that day itself. &lt;/p&gt;
&lt;p id=&quot;WbZACA7ydQB&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACA7Ywn5&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context&lt;/strong&gt;: Say we have table &lt;code&gt;signups&lt;/code&gt; in the form: &lt;/p&gt;
&lt;pre id=&quot;WbZACAWuh21&quot; class=&quot;prettyprint&quot;&gt;
| date       | sign_ups |&lt;br /&gt;|------------|----------|&lt;br /&gt;| 2018-01-01 | 10       |&lt;br /&gt;| 2018-01-02 | 20       |&lt;br /&gt;| 2018-01-03 | 50       |&lt;br /&gt;| ...        | ...      |&lt;br /&gt;| 2018-10-01 | 35       |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAHDmEy&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task&lt;/strong&gt;: Write a query to get 7-day rolling (preceding) average of daily sign ups. &lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACA4moE8&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACA36xd8&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;a.date, &lt;br /&gt;AVG(b.sign_ups) average_sign_ups &lt;br /&gt;FROM &lt;br /&gt;signups a &lt;br /&gt;JOIN &lt;br /&gt;signups b ON a.date &amp;lt;= b.date + interval '6 days' AND a.date &amp;gt;= b.date&lt;br /&gt;GROUP BY &lt;br /&gt;a.date
&lt;/pre&gt;
&lt;p id=&quot;WbZACA56Oot&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h2 id=&quot;WbZACAKDZyA&quot;&gt;#6: Multiple Join Conditions &lt;/h2&gt;
&lt;p id=&quot;WbZACA0UcqK&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; This problem was inspired by Sisense’s &lt;a href=&quot;https://www.sisense.com/blog/analyzing-your-email-with-sql/&quot; rel=&quot;nofollow&quot;&gt;“Analyzing Your Email with SQL”&lt;/a&gt; blog post &lt;/p&gt;
&lt;p id=&quot;WbZACA1Kdax&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAVbVbs&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say we have a table &lt;code&gt;emails&lt;/code&gt; that includes emails sent to and from &lt;a href=&quot;mailto:zach@g.com&quot; rel=&quot;nofollow&quot;&gt;&lt;code&gt;zach@g.com&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre id=&quot;WbZACAH4EWP&quot; class=&quot;prettyprint&quot;&gt;
| id | subject  | from         | to           | timestamp           |&lt;br /&gt;|----|----------|--------------|--------------|---------------------|&lt;br /&gt;| 1  | Yosemite | zach@g.com   | thomas@g.com | 2018-01-02 12:45:03 |&lt;br /&gt;| 2  | Big Sur  | sarah@g.com  | thomas@g.com | 2018-01-02 16:30:01 |&lt;br /&gt;| 3  | Yosemite | thomas@g.com | zach@g.com   | 2018-01-02 16:35:04 |&lt;br /&gt;| 4  | Running  | jill@g.com   | zach@g.com   | 2018-01-03 08:12:45 |&lt;br /&gt;| 5  | Yosemite | zach@g.com   | thomas@g.com | 2018-01-03 14:02:01 |&lt;br /&gt;| 6  | Yosemite | thomas@g.com | zach@g.com   | 2018-01-03 15:01:05 |&lt;br /&gt;| .. | ..       | ..           | ..           | ..                  |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAUBDfD&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task: &lt;/strong&gt;Write a query to get the response time per email (&lt;code&gt;id&lt;/code&gt;) sent to &lt;code&gt;zach@g.com&lt;/code&gt; . Do not include &lt;code&gt;id&lt;/code&gt;s that did not receive a response from &lt;a href=&quot;mailto:zach@g.com&quot; rel=&quot;nofollow&quot;&gt;zach@g.com&lt;/a&gt;. Assume each email thread has a unique subject. Keep in mind a thread may have multiple responses back-and-forth between &lt;a href=&quot;mailto:zach@g.com&quot; rel=&quot;nofollow&quot;&gt;zach@g.com&lt;/a&gt; and another email address. &lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAV1hNT&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAMuKoa&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;a.id, &lt;br /&gt;MIN(b.timestamp) - a.timestamp as time_to_respond &lt;br /&gt;FROM &lt;br /&gt;emails a &lt;br /&gt;JOIN&lt;br /&gt;emails b &lt;br /&gt;ON &lt;br /&gt;b.subject = a.subject &lt;br /&gt;AND &lt;br /&gt;a.to = b.from&lt;br /&gt;AND &lt;br /&gt;a.from = b.to &lt;br /&gt;AND &lt;br /&gt;a.timestamp &amp;lt; b.timestamp &lt;br /&gt;WHERE &lt;br /&gt;a.to = 'zach@g.com' &lt;br /&gt;GROUP BY &lt;br /&gt;a.id 
&lt;/pre&gt;
&lt;p id=&quot;WbZACANxGDp&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;

&lt;h2 id=&quot;WbZACAhKm2A&quot;&gt;#1: Get the ID with the highest value &lt;/h2&gt;
&lt;p id=&quot;WbZACAjlA4Z&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say we have a table &lt;code&gt;salaries&lt;/code&gt; with data on employee salary and department in the following format: &lt;/p&gt;
&lt;pre id=&quot;WbZACAyyqOV&quot; class=&quot;prettyprint&quot;&gt;
  depname  | empno | salary |     &lt;br /&gt;-----------+-------+--------+&lt;br /&gt;develop   |    11 |   5200 | &lt;br /&gt;develop   |     7 |   4200 | &lt;br /&gt;develop   |     9 |   4500 | &lt;br /&gt;develop   |     8 |   6000 | &lt;br /&gt;develop   |    10 |   5200 | &lt;br /&gt;personnel |     5 |   3500 | &lt;br /&gt;personnel |     2 |   3900 | &lt;br /&gt;sales     |     3 |   4800 | &lt;br /&gt;sales     |     1 |   5000 | &lt;br /&gt;sales     |     4 |   4800 | 
&lt;/pre&gt;
&lt;p id=&quot;WbZACAxKPaU&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task&lt;/strong&gt;: Write a query to get the &lt;code&gt;empno&lt;/code&gt; with the highest salary. Make sure your solution can handle ties!&lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAksCAJ&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACArL9JY&quot; class=&quot;prettyprint&quot;&gt;
WITH max_salary AS (&lt;br /&gt;SELECT &lt;br /&gt;MAX(salary) max_salary&lt;br /&gt;FROM &lt;br /&gt;&lt;code&gt;salaries&lt;br /&gt;)&lt;br /&gt;SELECT &lt;br /&gt;s.empno&lt;br /&gt;FROM &lt;br /&gt;&lt;code&gt;salaries s&lt;br /&gt;JOIN &lt;br /&gt;max_salary ms ON s.salary = ms.max_salary &lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p id=&quot;WbZACAY4cPT&quot; class=&quot;line&quot;&gt;Alternate solution using &lt;code&gt;RANK()&lt;/code&gt;:&lt;/p&gt;
&lt;pre id=&quot;WbZACANc5ER&quot; class=&quot;prettyprint&quot;&gt;
WITH sal_rank AS &lt;br /&gt;(SELECT &lt;br /&gt;empno, &lt;br /&gt;RANK() OVER(ORDER BY salary DESC) rnk&lt;br /&gt;FROM &lt;br /&gt;salaries)&lt;br /&gt;SELECT &lt;br /&gt;empno&lt;br /&gt;FROM&lt;br /&gt;sal_rank&lt;br /&gt;WHERE &lt;br /&gt;rnk = 1;
&lt;/pre&gt;
&lt;p id=&quot;WbZACA36njt&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h2 id=&quot;WbZACAk945J&quot;&gt;#2: Average and rank with a window function (multi-part)&lt;/h2&gt;
&lt;h3 id=&quot;WbZACArXBcA&quot;&gt;Part 1:&lt;/h3&gt;
&lt;p id=&quot;WbZACAbHXUD&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context&lt;/strong&gt;: Say we have a table &lt;code&gt;salaries&lt;/code&gt; in the format:&lt;/p&gt;
&lt;pre id=&quot;WbZACAN0UN4&quot; class=&quot;prettyprint&quot;&gt;
  depname  | empno | salary |     &lt;br /&gt;-----------+-------+--------+&lt;br /&gt;develop   |    11 |   5200 | &lt;br /&gt;develop   |     7 |   4200 | &lt;br /&gt;develop   |     9 |   4500 | &lt;br /&gt;develop   |     8 |   6000 | &lt;br /&gt;develop   |    10 |   5200 | &lt;br /&gt;personnel |     5 |   3500 | &lt;br /&gt;personnel |     2 |   3900 | &lt;br /&gt;sales     |     3 |   4800 | &lt;br /&gt;sales     |     1 |   5000 | &lt;br /&gt;sales     |     4 |   4800 | 
&lt;/pre&gt;
&lt;p id=&quot;WbZACAJ1gkH&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Write a query that returns the same table, but with a new column that has average salary per &lt;code&gt;depname&lt;/code&gt;. We would expect a table in the form: &lt;/p&gt;
&lt;pre id=&quot;WbZACAGrGMn&quot; class=&quot;prettyprint&quot;&gt;
  depname  | empno | salary | avg_salary |     &lt;br /&gt;-----------+-------+--------+------------+&lt;br /&gt;develop   |    11 |   5200 |       5020 |&lt;br /&gt;develop   |     7 |   4200 |       5020 | &lt;br /&gt;develop   |     9 |   4500 |       5020 |&lt;br /&gt;develop   |     8 |   6000 |       5020 | &lt;br /&gt;develop   |    10 |   5200 |       5020 | &lt;br /&gt;personnel |     5 |   3500 |       3700 |&lt;br /&gt;personnel |     2 |   3900 |       3700 |&lt;br /&gt;sales     |     3 |   4800 |       4867 | &lt;br /&gt;sales     |     1 |   5000 |       4867 | &lt;br /&gt;sales     |     4 |   4800 |       4867 |
&lt;/pre&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAuMBN6&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAt5ovh&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;*, &lt;br /&gt;/*&lt;br /&gt;* AVG() is a Postgres command, but other SQL flavors like BigQuery use &lt;br /&gt;* AVERAGE()&lt;br /&gt;*/ &lt;br /&gt;ROUND(AVG(salary),0) OVER (PARTITION BY depname) avg_salary&lt;br /&gt;FROM&lt;br /&gt;salaries
&lt;/pre&gt;
&lt;h3 id=&quot;WbZACABG8V6&quot;&gt;Part 2:&lt;/h3&gt;
&lt;p id=&quot;WbZACAaqw3U&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Write a query that adds a column with the rank of each employee based on their salary within their department, where the employee with the highest salary gets the rank of &lt;code&gt;1&lt;/code&gt;. We would expect a table in the form: &lt;/p&gt;
&lt;pre id=&quot;WbZACAHjp03&quot; class=&quot;prettyprint&quot;&gt;
  depname  | empno | salary | salary_rank |     &lt;br /&gt;-----------+-------+--------+-------------+&lt;br /&gt;develop   |    11 |   5200 |           2 |&lt;br /&gt;develop   |     7 |   4200 |           5 | &lt;br /&gt;develop   |     9 |   4500 |           4 |&lt;br /&gt;develop   |     8 |   6000 |           1 | &lt;br /&gt;develop   |    10 |   5200 |           2 | &lt;br /&gt;personnel |     5 |   3500 |           2 |&lt;br /&gt;personnel |     2 |   3900 |           1 |&lt;br /&gt;sales     |     3 |   4800 |           2 | &lt;br /&gt;sales     |     1 |   5000 |           1 | &lt;br /&gt;sales     |     4 |   4800 |           2 | 
&lt;/pre&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAhRWoo&quot; class=&quot;line&quot;&gt;&lt;strong&gt;&lt;em&gt;Solution:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAG4vmb&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;*, &lt;br /&gt;RANK() OVER(PARTITION BY depname ORDER BY salary DESC) salary_rank&lt;br /&gt;FROM  &lt;br /&gt;salaries 
&lt;/pre&gt;
&lt;p id=&quot;WbZACAFoM9N&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;

&lt;h2 id=&quot;WbZACAnkw5c&quot;&gt;#1: Histograms &lt;/h2&gt;
&lt;p id=&quot;WbZACAWfACW&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say we have a table &lt;code&gt;sessions&lt;/code&gt; where each row is a video streaming session with length in seconds: &lt;/p&gt;
&lt;pre id=&quot;WbZACAd28AR&quot; class=&quot;prettyprint&quot;&gt;
| session_id | length_seconds |&lt;br /&gt;|------------|----------------|&lt;br /&gt;| 1          | 23             |&lt;br /&gt;| 2          | 453            |&lt;br /&gt;| 3          | 27             |&lt;br /&gt;| ..         | ..             |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAMrakB&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Write a query to count the number of sessions that fall into bands of size 5, i.e. for the above snippet, produce something akin to: &lt;/p&gt;
&lt;pre id=&quot;WbZACAdYpXc&quot; class=&quot;prettyprint&quot;&gt;
| bucket  | count |&lt;br /&gt;|---------|-------|&lt;br /&gt;| 20-25   | 2     |&lt;br /&gt;| 450-455 | 1     |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAFLowa&quot; class=&quot;line&quot;&gt;Get complete credit for the proper string labels (“5-10”, etc.) but near complete credit for something that is communicable as the bin. &lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAcJWFx&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACArexZW&quot; class=&quot;prettyprint&quot;&gt;
WITH bin_label AS &lt;br /&gt;(SELECT &lt;br /&gt;session_id, &lt;br /&gt;FLOOR(length_seconds/5) as bin_label &lt;br /&gt;FROM&lt;br /&gt;sessions &lt;br /&gt;)&lt;br /&gt;SELECT &lt;br /&gt;&lt;code&gt;CONCATENTATE(STR(bin_label*5), '-', STR(&lt;/code&gt;bin_label*5+5)) bucket, &lt;br /&gt;COUNT(DISTINCT session_id) count &lt;br /&gt;GROUP BY &lt;br /&gt;bin_label&lt;br /&gt;ORDER BY &lt;br /&gt;&lt;code&gt;bin_label ASC &lt;/code&gt;
&lt;/pre&gt;
&lt;p id=&quot;WbZACA8jwjO&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h2 id=&quot;WbZACA0JsbB&quot;&gt;#2: CROSS JOIN (multi-part)&lt;/h2&gt;
&lt;h3 id=&quot;WbZACAT1YzD&quot;&gt;Part 1: &lt;/h3&gt;
&lt;p id=&quot;WbZACAxl8X7&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say we have a table &lt;code&gt;state_streams&lt;/code&gt; where each row is a state and the total number of hours of streaming from a video hosting service: &lt;/p&gt;
&lt;pre id=&quot;WbZACAtARuj&quot; class=&quot;prettyprint&quot;&gt;
| state | total_streams |&lt;br /&gt;|-------|---------------|&lt;br /&gt;| NC    | 34569         |&lt;br /&gt;| SC    | 33999         |&lt;br /&gt;| CA    | 98324         |&lt;br /&gt;| MA    | 19345         |&lt;br /&gt;| ..    | ..            |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAaXXip&quot; class=&quot;line&quot;&gt;(In reality these kinds of aggregate tables would normally have a date column, but we’ll exclude that component in this problem) &lt;/p&gt;
&lt;p id=&quot;WbZACAkJvFA&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAUqV1W&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Write a query to get the pairs of states with total streaming amounts within 1000 of each other. For the snippet above, we would want to see something like:&lt;/p&gt;
&lt;pre id=&quot;WbZACAnRsmJ&quot; class=&quot;prettyprint&quot;&gt;
| state_a | state_b |&lt;br /&gt;|---------|---------|&lt;br /&gt;| NC      | SC      |&lt;br /&gt;| SC      | NC      |
&lt;/pre&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACA1Hks1&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAAnMOw&quot; class=&quot;prettyprint&quot;&gt;
SELECT&lt;br /&gt;a.state as state_a, &lt;br /&gt;b.state as state_b &lt;br /&gt;FROM   &lt;br /&gt;state_streams a&lt;br /&gt;CROSS JOIN &lt;br /&gt;state_streams b &lt;br /&gt;WHERE &lt;br /&gt;ABS(a.total_streams - b.total_streams) &amp;lt; 1000&lt;br /&gt;AND &lt;br /&gt;a.state &amp;lt;&amp;gt; b.state 
&lt;/pre&gt;
&lt;p id=&quot;WbZACAFCMoB&quot; class=&quot;line&quot;&gt;FYI, &lt;code&gt;CROSS JOIN&lt;/code&gt; s can also be written without explicitly specifying a join: &lt;/p&gt;
&lt;pre id=&quot;WbZACAbq0yv&quot; class=&quot;prettyprint&quot;&gt;
SELECT&lt;br /&gt;a.state as state_a, &lt;br /&gt;b.state as state_b &lt;br /&gt;FROM   &lt;br /&gt;state_streams a, state_streams b &lt;br /&gt;WHERE &lt;br /&gt;ABS(a.total_streams - b.total_streams) &amp;lt; 1000&lt;br /&gt;AND &lt;br /&gt;a.state &amp;lt;&amp;gt; b.state 
&lt;/pre&gt;
&lt;p id=&quot;WbZACAPZ7B1&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h3 id=&quot;WbZACA8F4Vg&quot;&gt;Part 2: &lt;/h3&gt;
&lt;p id=&quot;WbZACAe56nk&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; This question is considered more of a bonus problem than an actual SQL pattern. Feel free to skip it!&lt;/p&gt;
&lt;p id=&quot;WbZACAy0MA8&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAuWGFB&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; How could you modify the SQL from the solution to Part 1 of this question so that duplicates are removed? For example, if we used the sample table from Part 1, the pair &lt;code&gt;NC&lt;/code&gt; and &lt;code&gt;SC&lt;/code&gt; should only appear in one row instead of two. &lt;/p&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACASijjd&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution: &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACAxhLHo&quot; class=&quot;prettyprint&quot;&gt;
SELECT&lt;br /&gt;a.state as state_a, &lt;br /&gt;b.state as state_b &lt;br /&gt;FROM   &lt;br /&gt;state_streams a, state_streams b &lt;br /&gt;WHERE &lt;br /&gt;ABS(a.total_streams - b.total_streams) &amp;lt; 1000&lt;br /&gt;AND &lt;br /&gt;a.state &amp;gt; b.state 
&lt;/pre&gt;
&lt;p id=&quot;WbZACAOVMBk&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;h2 id=&quot;WbZACAPLOLs&quot;&gt;#3: Advancing Counting &lt;/h2&gt;
&lt;p id=&quot;WbZACAlh0q7&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; This question is adapted from &lt;a href=&quot;https://stackoverflow.com/questions/54488894/using-case-to-properly-count-items-with-if-else-logic-in-sql&quot; rel=&quot;nofollow&quot;&gt;this Stack Overflow question&lt;/a&gt; by me (zthomas.nc) &lt;/p&gt;
&lt;p id=&quot;WbZACAEcqJN&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAchsMN&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; this question is probably more complex than the kind you would encounter in an interview. Consider it a challenge problem, or feel free to skip it! &lt;/p&gt;
&lt;p id=&quot;WbZACAhqnR8&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAfqLND&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Context:&lt;/strong&gt; Say I have a table &lt;code&gt;table&lt;/code&gt; in the following form, where a &lt;code&gt;user&lt;/code&gt; can be mapped to multiple values of &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;
&lt;pre id=&quot;WbZACAhJAXL&quot; class=&quot;prettyprint&quot;&gt;
| user | class |&lt;br /&gt;|------|-------|&lt;br /&gt;| 1    | a     |&lt;br /&gt;| 1    | b     |&lt;br /&gt;| 1    | b     |&lt;br /&gt;| 2    | b     |&lt;br /&gt;| 3    | a     |
&lt;/pre&gt;
&lt;p id=&quot;WbZACAQJhCc&quot; class=&quot;line&quot;&gt;&lt;strong&gt;Task:&lt;/strong&gt; Assume there are only two possible values for &lt;code&gt;class&lt;/code&gt;. Write a query to count the number of users in each class such that any user who has label &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; gets sorted into &lt;code&gt;b&lt;/code&gt;, any user with just &lt;code&gt;a&lt;/code&gt; gets sorted into &lt;code&gt;a&lt;/code&gt; and any user with just &lt;code&gt;b&lt;/code&gt; gets into &lt;code&gt;b&lt;/code&gt;. &lt;/p&gt;
&lt;p id=&quot;WbZACAPtHwO&quot; class=&quot;line&quot;&gt;​&lt;/p&gt;
&lt;p id=&quot;WbZACAuMGUI&quot; class=&quot;line&quot;&gt;For &lt;code&gt;table&lt;/code&gt; that would result in the following table: &lt;/p&gt;
&lt;pre id=&quot;WbZACA6bh3P&quot; class=&quot;prettyprint&quot;&gt;
| class | count |&lt;br /&gt;|-------|-------|&lt;br /&gt;| a     | 1     |&lt;br /&gt;| b     | 2     |
&lt;/pre&gt;
&lt;hr /&gt;&lt;p id=&quot;WbZACAno0xU&quot; class=&quot;line&quot;&gt;&lt;em&gt;&lt;strong&gt;Solution: &lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre id=&quot;WbZACA7lfAr&quot; class=&quot;prettyprint&quot; readability=&quot;9&quot;&gt;
WITH usr_b_sum AS &lt;br /&gt;(&lt;br /&gt;SELECT &lt;br /&gt;user, &lt;br /&gt;SUM(CASE WHEN class = 'b' THEN 1 ELSE 0 END) num_b&lt;br /&gt;FROM &lt;br /&gt;table&lt;br /&gt;GROUP BY &lt;br /&gt;user&lt;br /&gt;), &lt;p&gt;usr_class_label AS &lt;br /&gt;(&lt;br /&gt;SELECT &lt;br /&gt;user, &lt;br /&gt;CASE WHEN num_b &amp;gt; 0 THEN 'b' ELSE 'a' END class &lt;br /&gt;FROM &lt;br /&gt;usr_b_sum&lt;br /&gt;)&lt;/p&gt;&lt;p&gt;SELECT &lt;br /&gt;class, &lt;br /&gt;COUNT(DISTINCT user) count &lt;br /&gt;FROM&lt;br /&gt;usr_class_label&lt;br /&gt;GROUP BY &lt;br /&gt;class &lt;br /&gt;ORDER BY &lt;br /&gt;class ASC&lt;/p&gt;&lt;/pre&gt;
&lt;p id=&quot;WbZACA5sSI9&quot; class=&quot;line&quot;&gt;Alternate solution: Using &lt;code&gt;SELECT&lt;/code&gt;s in the &lt;code&gt;SELECT&lt;/code&gt; statement and &lt;code&gt;UNION&lt;/code&gt;: &lt;/p&gt;
&lt;pre id=&quot;WbZACAr1jJf&quot; class=&quot;prettyprint&quot;&gt;
SELECT &lt;br /&gt;&quot;a&quot; class,&lt;br /&gt;COUNT(DISTINCT user_id) - &lt;br /&gt;(SELECT COUNT(DISTINCT user_id) FROM table WHERE class = 'b') count &lt;br /&gt;UNION&lt;br /&gt;SELECT &lt;br /&gt;&quot;b&quot; class,&lt;br /&gt;(SELECT COUNT(DISTINCT user_id) FROM table WHERE class = 'b') count 
&lt;/pre&gt;</description>
<pubDate>Sat, 02 May 2020 18:51:23 +0000</pubDate>
<dc:creator>thomzi12</dc:creator>
<og:title>The Best Medium-Hard Data Analyst SQL Interview Questions</og:title>
<og:description>By Zachary Thomas (zthomas.nc@gmail.com, Twitter, LinkedIn) </og:description>
<og:url>https://quip.com/2gwZArKuWk7W</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://quip.com/2gwZArKuWk7W?_escaped_fragment_=</dc:identifier>
</item>
</channel>
</rss>