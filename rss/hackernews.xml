<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Undocumented Catalina file access change</title>
<link>https://lapcatsoftware.com/articles/macl.html</link>
<guid isPermaLink="true" >https://lapcatsoftware.com/articles/macl.html</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;/&gt;&lt;meta name=&quot;twitter:site&quot; content=&quot;@lapcatsoftware&quot;/&gt;&lt;meta name=&quot;twitter:title&quot; content=&quot;Undocumented Catalina file access change&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0&quot;/&gt;&lt;meta name=&quot;generator&quot; content=&quot;BBEdit 10.5&quot;/&gt;&lt;title&gt;Undocumented Catalina file access change&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;97.467792092403&quot;&gt;
&lt;div class=&quot;articles_index&quot;&gt;&lt;a href=&quot;https://lapcatsoftware.com/articles/index.html&quot; title=&quot;The Desolation of Blog&quot;&gt;Articles index&lt;/a&gt;&lt;/div&gt;

&lt;h3&gt;December 18 2019 by Jeff Johnson&lt;br/&gt;To support this blog please buy my apps &lt;a href=&quot;https://underpassapp.com/StopTheMadness/&quot;&gt;StopTheMadness&lt;/a&gt; and &lt;a href=&quot;https://underpassapp.com/&quot;&gt;Underpass&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's well known that if you drag a file from Finder and drop it into Terminal, the full path of the file will output in Terminal. The same behavior occurs with copy and paste too. This has always been a very convenient but innocuous operation… until macOS 10.15 Catalina. I've discovered that on Catalina, pasting a file from Finder not only outputs the file path in Terminal, it also invisibly and permanently grants Terminal access to the file, bypassing any macOS privacy protections!&lt;/p&gt;
&lt;p&gt;File access privacy protections were introduced in macOS 10.14 Mojave and then expanded in Catalina. Mojave restricted access to directories such as &lt;code&gt;&quot;~/Library/Application Support/AddressBook&quot;&lt;/code&gt; and &lt;code&gt;&quot;~/Library/Safari&quot;&lt;/code&gt;. Catalina added even more restricted directories, such as &lt;code&gt;&quot;~/Downloads&quot;&lt;/code&gt; and &lt;code&gt;&quot;~/Documents&quot;&lt;/code&gt;. I've discussed macOS privacy protections (and their shortcomings) several times before &lt;a href=&quot;https://lapcatsoftware.com/articles/disclosure.html&quot; title=&quot;Disclosure: macOS privacy protections bypass&quot;&gt;on this blog&lt;/a&gt;. You can grant special exceptions to the built-in file access policies by clicking one of the much beloved permissions dialogs that pop up in Mojave and Catalina or by manually configuring the exceptions in the Security &amp;amp; Privacy pane of System Preferences. That's all quite explicit to the user. What I just discovered, though, is that on Catalina you can also implicitly — even accidentally — grant special exceptions, not only to the built-in policies but also to your own explicitly chosen special exceptions. I'll illustrate with an example.&lt;/p&gt;
&lt;p&gt;I'm going to focus on the Terminal application, located at &lt;code&gt;/Applications/Utilit&lt;/code&gt;… haha, just kidding, it's been moved in Catalina to &lt;code&gt;&quot;/System/Applications/Utilities/Terminal.app&quot;&lt;/code&gt;. On a fresh install of Catalina, Terminal has no special permissions, as you can see in System Preferences:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://lapcatsoftware.com/articles/macl-images/macl1.jpg&quot; alt=&quot;System Preferences, Privacy, Files and Folders&quot; width=&quot;780&quot; height=&quot;685&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://lapcatsoftware.com/articles/macl-images/macl2.jpg&quot; alt=&quot;System Preferences, Privacy, Full Disk Access&quot; width=&quot;780&quot; height=&quot;685&quot;/&gt;&lt;/div&gt;
&lt;p&gt;When I try to list the contents of the Documents folder in Terminal, I get a permissions dialog, because Millennials are killing Unix.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://lapcatsoftware.com/articles/macl-images/macl3.jpg&quot; alt=&quot;Terminal.app would like to access files in your Documents folder.&quot; width=&quot;639&quot; height=&quot;440&quot;/&gt;&lt;/div&gt;
&lt;p&gt;When I press &quot;Don't Allow&quot;, then I see &quot;&lt;samp&gt;ls: Documents: Operation not permitted&lt;/samp&gt;&quot; in Terminal. My decision is also displayed in System Preferences; the Documents Folder is unchecked under Terminal.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://lapcatsoftware.com/articles/macl-images/macl4.jpg&quot; alt=&quot;System Preferences, Privacy, File and Folders&quot; width=&quot;780&quot; height=&quot;685&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Now I copy the Documents folder in Finder and paste it in Terminal:&lt;/p&gt;

&lt;p&gt;Suddenly it works! Why? Notice that after copying from Finder, the Documents folder has a new &lt;code&gt;com.apple.macl&lt;/code&gt; extended attribute. (I'll assume the &quot;l&quot; in &quot;macl&quot; stands for &quot;lockdown&quot; until someone tells me otherwise.) This special extended attribute gives Terminal (and possibly other apps?) special access to the file. The &lt;code&gt;com.apple.macl&lt;/code&gt; extended attribute, as well as the special file access, is persistent across reboots. Indeed, it remains even if you reset the privacy permissions of Terminal!&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://lapcatsoftware.com/articles/macl-images/macl8.jpg&quot; alt=&quot;tccutil reset All com.apple.Terminal&quot; width=&quot;493&quot; height=&quot;394&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;com.apple.macl&lt;/code&gt; extended attribute is so persistent that you can't even delete it. Seriously.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://lapcatsoftware.com/articles/macl-images/macl9.jpg&quot; alt=&quot;xattr -d com.apple.macl&quot; width=&quot;767&quot; height=&quot;561&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Sudo? Sudon't.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://lapcatsoftware.com/articles/macl-images/macl10.jpg&quot; alt=&quot;sudo xattr -d com.apple.macl&quot; width=&quot;767&quot; height=&quot;561&quot;/&gt;&lt;/div&gt;
&lt;p&gt;It turns out that the &lt;code&gt;com.apple.macl&lt;/code&gt; extended attribute is governed by System Integrity Protection, so the only way to delete it is to disable SIP, or boot into another volume and delete it from there. Thus, once you implicitly grant special access to a file, you can't easily revoke that special access.&lt;/p&gt;
&lt;p&gt;As far as I can tell, there's no documentation of this important privacy protections change in Catalina. The only reference to &lt;code&gt;com.apple.macl&lt;/code&gt; that I found on Apple's web site was in a reply to a &lt;a href=&quot;https://forums.developer.apple.com/thread/124121&quot;&gt;post in the Developer Forums&lt;/a&gt; from longtime Apple Developer Technical Support engineer &quot;Quinn&quot;. That reply was suggestive but sparse with details. The post wasn't even about Finder and Terminal but rather about the open panel in non-sandboxed apps.&lt;/p&gt;
&lt;p&gt;I just discovered all of this last night, so I'm still not fully clear about the implementation and implications of the &lt;code&gt;com.apple.macl&lt;/code&gt; feature. I welcome further investigations by other people. Besides the lack of documentation, there seem to be several problematic aspects, such as the inability to delete the extended attributes, and the fact that the implicit access can directly contradict the explicit access shown in System Preferences. Keep in mind that I only used &lt;code&gt;&quot;~/Documents&quot;&lt;/code&gt; as an example, and implicit special access can be granted to any file or folder. This can even lead to the bizarre situation in which Terminal has access to a file but does not have access to the folder containing the file, a situation that was the &quot;inspiration&quot; for my discovery.&lt;/p&gt;
&lt;h3&gt;To support this blog please buy my apps &lt;a href=&quot;https://underpassapp.com/StopTheMadness/&quot;&gt;StopTheMadness&lt;/a&gt; and &lt;a href=&quot;https://underpassapp.com/&quot;&gt;Underpass&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;articles_index&quot;&gt;&lt;a href=&quot;https://lapcatsoftware.com/articles/index.html&quot; title=&quot;The Desolation of Blog&quot;&gt;Articles index&lt;/a&gt;&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 18 Dec 2019 17:59:05 +0000</pubDate>
<dc:creator>chmaynard</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lapcatsoftware.com/articles/macl.html</dc:identifier>
</item>
<item>
<title>Amazon, Apple, Google, and the Zigbee Alliance to develop connectivity standard</title>
<link>https://www.apple.com/newsroom/2019/12/amazon-apple-google-and-the-zigbee-alliance-to-develop-connectivity-standard/</link>
<guid isPermaLink="true" >https://www.apple.com/newsroom/2019/12/amazon-apple-google-and-the-zigbee-alliance-to-develop-connectivity-standard/</guid>
<description>&lt;p&gt;Seattle and Cupertino, Mountain View and Davis, California — Amazon, Apple, Google, and the Zigbee Alliance today announced a new working group that plans to develop and promote the adoption of a new, royalty-free connectivity standard to increase compatibility among smart home products, with security as a fundamental design tenet. Zigbee Alliance board member companies such as IKEA, Legrand, NXP Semiconductors, Resideo, Samsung SmartThings, Schneider Electric, Signify (formerly Philips Lighting), Silicon Labs, Somfy, and Wulian are also onboard to join the working group and contribute to the project.&lt;/p&gt;
&lt;p&gt;The goal of the Connected Home over IP project is to simplify development for manufacturers and increase compatibility for consumers. The project is built around a shared belief that smart home devices should be secure, reliable, and seamless to use. By building upon Internet Protocol (IP), the project aims to enable communication across smart home devices, mobile apps, and cloud services and to define a specific set of IP-based networking technologies for device certification.&lt;/p&gt;
&lt;p&gt;The industry working group will take an open-source approach for the development and implementation of a new, unified connectivity protocol. The project intends to use contributions from market-tested smart home technologies from Amazon, Apple, Google, Zigbee Alliance, and others. The decision to leverage these technologies is expected to accelerate the development of the protocol, and deliver benefits to manufacturers and consumers faster.&lt;/p&gt;
&lt;p&gt;The project aims to make it easier for device manufacturers to build devices that are compatible with smart home and voice services such as Amazon’s Alexa, Apple’s Siri, Google’s Assistant, and others. The planned protocol will complement existing technologies, and working group members encourage device manufacturers to continue innovating using technologies available today.&lt;/p&gt;
&lt;p&gt;Project Connected Home over IP welcomes device manufacturers, silicon providers, and other developers from across the smart home industry to participate in and contribute to the standard.&lt;/p&gt;
&lt;div class=&quot;pagebody-copy&quot; readability=&quot;24.103896103896&quot;&gt;If you’d like to get involved or receive updates visit &lt;a href=&quot;https://www.connectedhomeip.com/&quot; target=&quot;_blank&quot;&gt;connectedhomeip.com&lt;/a&gt;.&lt;/div&gt;
</description>
<pubDate>Wed, 18 Dec 2019 13:19:58 +0000</pubDate>
<dc:creator>gbugniot</dc:creator>
<og:type>article</og:type>
<og:title>Amazon, Apple, Google, and the Zigbee Alliance to develop connectivity standard</og:title>
<og:description>Amazon, Apple, Google, and the Zigbee Alliance today announced a new working group that plans to develop and promote a new connectivity standard.</og:description>
<og:url>https://www.apple.com/newsroom/2019/12/amazon-apple-google-and-the-zigbee-alliance-to-develop-connectivity-standard/</og:url>
<og:image>https://www.apple.com/newsroom/images/defaultog.png.large.png?201912181301</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.apple.com/newsroom/2019/12/amazon-apple-google-and-the-zigbee-alliance-to-develop-connectivity-standard/</dc:identifier>
</item>
<item>
<title>Google&amp;#039;s Monopoly-Based Foreign Policy</title>
<link>https://mattstoller.substack.com/p/googles-dangerous-monopoly-based</link>
<guid isPermaLink="true" >https://mattstoller.substack.com/p/googles-dangerous-monopoly-based</guid>
<description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Welcome to BIG, a newsletter about the politics of monopoly. If you’d like to sign up, you can do so &lt;a href=&quot;https://mattstoller.substack.com/welcome&quot;&gt;here&lt;/a&gt;. Or just read on…&lt;/p&gt;
&lt;p&gt;Today I’m going to write about Google’s exceptionally dangerous decision yesterday to de facto &lt;a href=&quot;https://www.reuters.com/article/us-turkey-google/google-warns-turkish-partners-over-new-android-phones-amid-dispute-idUSKBN1YK0QR&quot;&gt;cut off&lt;/a&gt; Turkey’s access to Android phones.&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Google has told its Turkish business partners it will not be able to work with them on new Android phones to be released in Turkey, after the Turkish competition board ruled that changes Google made to its contracts were not acceptable…&lt;/p&gt;
&lt;p&gt;The regulator had asked Google to change all its software distribution agreements to allow consumers to choose different search engines in its Android mobile operating system. The probe was triggered by a filing by Russian competitor Yandex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What is interesting about what Google did to Turkey to stop an antitrust suit is that it’s exactly what the U.S. government ordered Google to do to Chinese giant Huawei to address national security concerns.&lt;/p&gt;
&lt;p&gt;So why did Google do what it did? And why is it so dangerous?&lt;/p&gt;
&lt;p&gt;In July, I noted that the most effective antitrust enforcers in the world in the tech sector &lt;a href=&quot;https://mattstoller.substack.com/p/how-russian-antitrust-enforcers-defeated&quot;&gt;are&lt;/a&gt; Russian. This is, in part, because there’s an existing search engine in Russia - Yandex - that indexes Russian language content as well or better than Google does. So there is existing competition already to protect. Google tried to kill Yandex using an explicit strategy to leverage desktop search dominance into mobile search dominance&lt;/p&gt;
&lt;p&gt;Here’s how I described it.&lt;/p&gt;
&lt;blockquote readability=&quot;16.468196037539&quot;&gt;
&lt;p&gt;In 2008, Google experimented by building its first Android phone. The company eventually settled on a strategy of having original equipment manufacturers (OEMs) like Samsung use Android as the brains of their phones. The price was irresistible: zero. Google gave away Android, and starting in 2012, gave away their &lt;a href=&quot;https://www.wsj.com/articles/google-to-be-fined-5-billion-by-eu-in-android-case-1531903470&quot;&gt;app store known as Google Play&lt;/a&gt;. This pricing strategy was wildly successful. Global Android phone usage hit 1 billion users in 2014, and 2 billion by 2017. Android and Google Play are immensely valuable parts of the phone. Android offers the phone function, and Google Play and its service layer lets third party apps operate on a phone. The ‘free’ price and high functionality of the operating system was a compelling pitch. Google rapidly gained share everywhere. In Russia, at the beginning of 2011, Google had less than 20% market share of the phone operating system market. By 2012, it had over 50% market share, reaching 80% by 2013.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It worked. Here’s a chart showing how Google was able to gain on Yandex using this tie.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;image-link&quot; target=&quot;_blank&quot; href=&quot;https://cdn.substack.com/image/fetch/c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7973f75b-7b47-4bb0-a8ff-af509f56e46e_755x478.png&quot;&gt;&lt;img src=&quot;https://cdn.substack.com/image/fetch/w_1100,c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7973f75b-7b47-4bb0-a8ff-af509f56e46e_755x478.png&quot; data-attrs=&quot;{&amp;quot;src&amp;quot;:&amp;quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/7973f75b-7b47-4bb0-a8ff-af509f56e46e_755x478.png&amp;quot;,&amp;quot;height&amp;quot;:478,&amp;quot;width&amp;quot;:755,&amp;quot;bytes&amp;quot;:103815,&amp;quot;alt&amp;quot;:null,&amp;quot;title&amp;quot;:null,&amp;quot;type&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;href&amp;quot;:null}&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Federal Antimonopoly Service of Russia could have let competition die, which is what competition enforcers tend to do these days. Instead, the enforcers made Google stop tying its Android mobile operating system to its search engine. The result was… competition. Google’s market share gains stopped, because they were about a tying regime and not quality or pricing improvements.&lt;/p&gt;
&lt;a class=&quot;image-link&quot; target=&quot;_blank&quot; href=&quot;https://cdn.substack.com/image/fetch/c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F63d2765e-f79e-4300-ba21-a598b5d5466f_750x483.png&quot;&gt;&lt;img src=&quot;https://cdn.substack.com/image/fetch/w_1100,c_limit,f_auto,q_auto:good/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F63d2765e-f79e-4300-ba21-a598b5d5466f_750x483.png&quot; data-attrs=&quot;{&amp;quot;src&amp;quot;:&amp;quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/63d2765e-f79e-4300-ba21-a598b5d5466f_750x483.png&amp;quot;,&amp;quot;height&amp;quot;:483,&amp;quot;width&amp;quot;:750,&amp;quot;bytes&amp;quot;:123433,&amp;quot;alt&amp;quot;:null,&amp;quot;title&amp;quot;:null,&amp;quot;type&amp;quot;:&amp;quot;image/png&amp;quot;,&amp;quot;href&amp;quot;:null}&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;One might be skeptical of the Russian antitrust enforcers, except the Europeans found Google guilty of the same violation. It’s just that the European remedy didn’t work because the EU was slower at reaching a verdict, there really wasn’t a similar Yandex-style competitor, and EU competition chief Margarethe Vestager allowed Google to design its own remedy. (Vestager has acknowledged this failure and says she’ll try to be more aggressive, which is good.)&lt;/p&gt;
&lt;p&gt;What’s interesting is that Yandex isn’t just good at indexing Russian language content, it can also index the Turkish language. This means it could be a strong competitor in the Turkish market. And what do you know, Yandex filed a complaint with the Turkish antitrust authorities over anti-competitive tactics.&lt;/p&gt;
&lt;p&gt;Google’s response wasn’t just to use the legal system to fight for its rights, but then ultimately obey the law. Instead, Google said it was willing to ‘work with’ Turkey, but as a partner and not as a corporation working within a sovereign nation. It simply said it doesn’t like Turkey’s law, and so it will stop providing Android phones for an entire country. In other words, Google has a &lt;em&gt;private sanctions regime against smaller countries.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There’s something of a parallel to what Google is doing to Turkey, and it’s in China. The U.S. government ordered Google to stop delivering apps to Huawei, and the result is a &lt;a href=&quot;https://www.cnet.com/reviews/huawei-mate-30-pro-review/&quot;&gt;catastrophe&lt;/a&gt; for any attempt to build phones for use outside of China. Here’s one review of one of Huawei’s new phones that works without Google’s apps:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;The Mate 30 Pro is an exceptional piece of hardware. Its quad-camera setup shoots outstanding photos, a dazzling 6.53-inch waterfall display is the centerpiece of an inspired design, and its 4,500-mAh battery goes and goes and goes. &lt;strong&gt;But the fiasco that is Android without full Google support makes it impossible to recommend. &lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This isn’t such a problem in China, which has a parallel tech ecosystem of apps like Weibo and WeChat. But it’s a huge problem everywhere else, including in Turkey. I don’t know what happens at this point, but it’s very obvious that if I’m a foreign official anywhere in the world I’m going to realize that Google wants to run my legal system and that I better get access to some sort of tech ecosystem that can support a modern economy.&lt;/p&gt;
&lt;p&gt;Google is making a call to use leverage that should only be resolved for very serious foreign policy disputes by the U.S. government, and doing so to protect itself from having to obey an antitrust law in a foreign country. Pulling this kind of stunt is like using financial sanctions recklessly. It works if you’re the dominant network, but every time you use sanctions you create the incentive to build an alternative. To put it differently, it’s like overusing antibiotics. Turkey’s response will in the long-term mean leaning more on China, or Russia, or both. Or the EU and the U.S. could step in, and find ways of demanding that Google obey Turkish law.&lt;/p&gt;
&lt;p&gt;Maybe the U.S. government is fine with this decision to prioritize Google’s monopoly and forgo leverage by the government it might need in a genuine national security crisis. But somehow I doubt anyone's really thinking this through, except the officials who used to work at the State Department and now work at Google, &lt;a href=&quot;https://www.vice.com/en_us/article/vb98pb/google-jigsaw-became-toxic-mess&quot;&gt;like Jared Cohen&lt;/a&gt;. And Cohen didn’t do a great job when he worked at State.&lt;/p&gt;
&lt;p&gt;In other words, I hope a grown-up steps in, but I fear there are no grown-ups, anywhere.&lt;/p&gt;
&lt;p&gt;Thanks for reading. And if you liked this essay, you can sign up &lt;a href=&quot;http://email.mg1.substack.com/c/eJxVUMFuwyAM_ZpwjIAmYT34UHXtb0QEnBSNQARmVf5-pN1hkyzberae37PRhEtMOxBmYiVjGp0FZoEradTEXB7nhLhq54FtZfLOaHIxHFtC9LJjDzhxNUs7nKTlnGsthRKDmj-s4dIYO0i2xUyjLtZhMAj4jWmPAZmHB9GWm9OlkfcaqybKFL3H1OYyZdLmqzVxraMn-togcyC5OPNzzT3ve9WKVnS3y5WL4a54d1PdZ9PxdRH_CFiCX946XA4vL7TaGWtdS3C0jxj05NECpYKM3v94Cad9Qwj4zB6JML3Bw74chFCsHrKxcgb4o_8H-RJ1Kg&quot;&gt;here&lt;/a&gt; for more issues of BIG, a newsletter on how to restore fair commerce, innovation and democracy. If you want to really understand the secret history of monopoly power, buy my book, &lt;a href=&quot;https://www.amazon.com/exec/obidos/ASIN/1501183087&quot;&gt;Goliath: The 100-Year War Between Monopoly Power and Democracy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;cheers,&lt;/p&gt;
&lt;p&gt;Matt Stoller&lt;/p&gt;
</description>
<pubDate>Wed, 18 Dec 2019 12:39:26 +0000</pubDate>
<dc:creator>DeusExMachina</dc:creator>
<og:type>article</og:type>
<og:title>Google's Dangerous Monopoly-Based Foreign Policy</og:title>
<og:description>Hi, Welcome to BIG, a newsletter about the politics of monopoly. If you’d like to sign up, you can do so here. Or just read on… Today I’m going to write about Google’s exceptionally dangerous decision yesterday to de facto cut off Turkey’s access to Android phones.</og:description>
<og:image>https://res.cloudinary.com/hhsslviub/image/fetch/h_600/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F7973f75b-7b47-4bb0-a8ff-af509f56e46e_755x478.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://mattstoller.substack.com/p/googles-dangerous-monopoly-based</dc:identifier>
</item>
<item>
<title>Tech giants sued over deaths of children who mine cobalt</title>
<link>https://www.cbc.ca/radio/asithappens/as-it-happens-tuesday-edition-1.5399491/tech-giants-sued-over-appalling-deaths-of-children-who-mine-their-cobalt-1.5399492</link>
<guid isPermaLink="true" >https://www.cbc.ca/radio/asithappens/as-it-happens-tuesday-edition-1.5399491/tech-giants-sued-over-appalling-deaths-of-children-who-mine-their-cobalt-1.5399492</guid>
<description>&lt;p&gt;
A class-action lawsuit accuses tech giants of using exploitative child labour in cobalt mines in the Democratic Republic of Congo. (Kenny Katombe/Reuters)
&lt;/p&gt;&lt;div readability=&quot;187.26837606838&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.cbc.ca/radio/asithappens/as-it-happens-tuesday-edition-1.5399491/december-17-2019-episode-transcript-1.5401083&quot;&gt;Transcript&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;An international advocacy group has launched a lawsuit against some of the world's largest tech companies for the deaths and injuries of child miners in Congolese cobalt mines. &lt;/span&gt;&lt;/p&gt;
&lt;section id=&quot;inread-wrapper-id-33431986&quot;/&gt;&lt;p&gt;&lt;span&gt;International Rights Advocates brought the case on behalf of 14 Congolese families whose children were killed or injured while mining for cobalt. The metal is key ingredient in the rechargeable lithium-ion batteries that power most electronic devices. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The defendants named in the suit include Apple, Microsoft, Dell, Tesla and Google's parent company, Alphabet.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The lawsuit accuses those companies of &lt;a href=&quot;http://iradvocates.org/sites/iradvocates.org/files/stamped%20-Complaint.pdf&quot; target=&quot;_blank&quot;&gt;&quot;knowingly benefiting from and aiding and abetting the cruel and brutal use of young children.&quot;&lt;/a&gt; It has not been tested in court.  ​​&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Siddharth Kara, a public policy lecturer at Harvard Kennedy School, has been looking into the conditions at Congolese cobalt mines for years. His research is the foundation of the lawsuit.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He spoke to &lt;em&gt;As It Happens&lt;/em&gt; host Carol Off about what he witnessed during his research. Here is part of their conversation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;strong&gt;Has anyone ever tried this before — suing a tech giant on behalf of children working in mines?&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This is a landmark case. No one has ever, at least prior to Dec. 16, 2019, tried to sue the largest tech companies in the world on behalf of the children in the Congo who mine their cobalt.&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;https://i.cbc.ca/1.5399829.1576615072!/fileImage/httpImage/image.jpg_gen/derivatives/original_300/534435400.jpg 300w,https://i.cbc.ca/1.5399829.1576615072!/fileImage/httpImage/image.jpg_gen/derivatives/original_460/534435400.jpg 460w,https://i.cbc.ca/1.5399829.1576615072!/fileImage/httpImage/image.jpg_gen/derivatives/original_620/534435400.jpg 620w,https://i.cbc.ca/1.5399829.1576615072!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/534435400.jpg 780w,https://i.cbc.ca/1.5399829.1576615072!/fileImage/httpImage/image.jpg_gen/derivatives/original_1180/534435400.jpg 1180w&quot; sizes=&quot;(max-width: 300px) 300px,(max-width: 460px) 460px,(max-width: 620px) 620px,(max-width: 780px) 780px,(max-width: 1180px) 1180px&quot; src=&quot;https://i.cbc.ca/1.5399829.1576615072!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/534435400.jpg&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;A child and a woman break rocks extracted from a cobalt mine at a copper quarry and cobalt pit in Lubumbashi, Congo. (Junior Kannah/AFP/Getty Images)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Can you tell us some of the stories you have heard, some of the things that you have found out about these children who are mining cobalt?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The research I've done ... has yielded some of the most heartbreaking, appalling and utterly unimaginable levels of exploitation and suffering of any sector that I've researched in almost two decades of research into slavery and child labour.&lt;/p&gt;
&lt;p&gt;The peasant population, and the children in particular, are eking out a sub-human existence, caked in toxic filth and grime as they mine for the cobalt that is used in every lithium-ion rechargeable battery on the planet.&lt;/p&gt;
&lt;p&gt;And I think the worst stories I heard — and I heard far too many of these — involved young children and young men who would dig tunnels to find the larger cobalt deposits, some of these up to 100 feet deep, and then these tunnels just would collapse and bury alive everyone inside.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And you were actually there doing your research at a time when one of these tunnels collapsed on a bunch of people, including children. Is that right?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's probably one of the most haunting and painful days of all my research.&lt;/p&gt;
&lt;p&gt;I was doing research near Lake Malo, which is not too far outside of the city of Kolwezi, and documenting some children when we received word that a tunnel had collapsed barely 100 metres from where I was standing.&lt;/p&gt;
&lt;p&gt;We rushed to the site. It had already been blocked off by Congolese military. Family members were swarming in, swooning and howling with with terror for any word of survivors.&lt;/p&gt;
&lt;p&gt;It didn't take long before we received word that there were 63 people in that tunnel, and 63 people buried alive that day.&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;https://i.cbc.ca/1.5399859.1576615355!/fileImage/httpImage/image.JPG_gen/derivatives/original_300/congo-mining.JPG 300w,https://i.cbc.ca/1.5399859.1576615355!/fileImage/httpImage/image.JPG_gen/derivatives/original_460/congo-mining.JPG 460w,https://i.cbc.ca/1.5399859.1576615355!/fileImage/httpImage/image.JPG_gen/derivatives/original_620/congo-mining.JPG 620w,https://i.cbc.ca/1.5399859.1576615355!/fileImage/httpImage/image.JPG_gen/derivatives/original_780/congo-mining.JPG 780w,https://i.cbc.ca/1.5399859.1576615355!/fileImage/httpImage/image.JPG_gen/derivatives/original_1180/congo-mining.JPG 1180w&quot; sizes=&quot;(max-width: 300px) 300px,(max-width: 460px) 460px,(max-width: 620px) 620px,(max-width: 780px) 780px,(max-width: 1180px) 1180px&quot; src=&quot;https://i.cbc.ca/1.5399859.1576615355!/fileImage/httpImage/image.JPG_gen/derivatives/original_780/congo-mining.JPG&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;Kara says during his research a tunnel at one cobalt mine collapsed and killed 63 people. (Kenny Katombe/Reuters)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The children who are working, how much money do they actually make from working in these cobalt mines?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The children, even the adults, barely eke out somewhere between 80 cents and maybe $2 a day, depending on the kind of work that they're doing.&lt;/p&gt;
&lt;p&gt;When you add to that the context that they're producing this cobalt that's used in the gadgets sold by companies that are worth hundreds of billions of dollars, if not more than a trillion dollars, run by executives or billionaires — that complete degrading and debasing amount of wealth and income that is shared at the bottom of the chain by the top is unconscionable.&lt;/p&gt;
&lt;p&gt;It's unacceptable. It's completely indecent. And that's the remedy, above all, that I'm after with my research and this lawsuit in particular — fix the conditions on the ground and pay these people decently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The hardest thing to do with a kind of suit like this is ... actually prove that the cobalt that is mined by the children that you're talking about is actually ending up in the supply chain of products made by Apple, Microsoft, Dell, Tesla. Is there evidence that that exact cobalt is ending up in their supply chain?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We would not have filed the lawsuit unless we did not have definitive evidence that these children are plaintiffs and thousands of other children and poor people in the Congo were mining and suffering cobalt at mining areas linked directly to the supply chains of the largest tech and automakers in the world.&lt;/p&gt;
&lt;p&gt;You see, two-thirds of the global supply of cobalt comes from the Congo. So already, right there, you cannot avoid Congolese cobalt.&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;https://i.cbc.ca/1.5399855.1576615311!/fileImage/httpImage/image.JPG_gen/derivatives/original_300/congodemocratic-mining-china.JPG 300w,https://i.cbc.ca/1.5399855.1576615311!/fileImage/httpImage/image.JPG_gen/derivatives/original_460/congodemocratic-mining-china.JPG 460w,https://i.cbc.ca/1.5399855.1576615311!/fileImage/httpImage/image.JPG_gen/derivatives/original_620/congodemocratic-mining-china.JPG 620w,https://i.cbc.ca/1.5399855.1576615311!/fileImage/httpImage/image.JPG_gen/derivatives/original_780/congodemocratic-mining-china.JPG 780w,https://i.cbc.ca/1.5399855.1576615311!/fileImage/httpImage/image.JPG_gen/derivatives/original_1180/congodemocratic-mining-china.JPG 1180w&quot; sizes=&quot;(max-width: 300px) 300px,(max-width: 460px) 460px,(max-width: 620px) 620px,(max-width: 780px) 780px,(max-width: 1180px) 1180px&quot; src=&quot;https://i.cbc.ca/1.5399855.1576615311!/fileImage/httpImage/image.JPG_gen/derivatives/original_780/congodemocratic-mining-china.JPG&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;People fetch water outside a copper and cobalt mine. (Aaron Ross/Reuters)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;But I'm asking you, is it possible that these companies can claim that you can't prove that they're actually linked to the cobalt? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Certainly the supply chain is opaque. It is complex. But the plaintiffs all were injured and killed at mines owned by companies that have been publicly disclosed as sellers of cobalt to our defendants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One of those companies is a mining company called Glencore. Glencore has put out a statement to say that it &lt;a href=&quot;https://www.theguardian.com/global-development/2019/dec/16/apple-and-google-named-in-us-lawsuit-over-congolese-child-cobalt-mining-deaths&quot; target=&quot;_blank&quot;&gt;&quot;does not tolerate any form of child, forced, or compulsory labour.&quot;&lt;/a&gt; What do you say to them?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I say words are all fine and good. But what you say you tolerate and what's actually happening on the ground are two different things.&lt;/p&gt;
&lt;p&gt;And I would encourage the people at Glencore to take this seriously, to work constructively on solving this problem. It's been all too easy for these companies to proclaim their zero tolerance policies and then continue business as usual.&lt;/p&gt;
&lt;p&gt;There are children, there are peasants, being injured and being killed on sites they own every day. That is a fact. And that is a fact they need to come to terms with and to address in an honest and constructive fashion.&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;https://i.cbc.ca/1.5399835.1576615138!/fileImage/httpImage/image.jpg_gen/derivatives/original_300/534434744.jpg 300w,https://i.cbc.ca/1.5399835.1576615138!/fileImage/httpImage/image.jpg_gen/derivatives/original_460/534434744.jpg 460w,https://i.cbc.ca/1.5399835.1576615138!/fileImage/httpImage/image.jpg_gen/derivatives/original_620/534434744.jpg 620w,https://i.cbc.ca/1.5399835.1576615138!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/534434744.jpg 780w,https://i.cbc.ca/1.5399835.1576615138!/fileImage/httpImage/image.jpg_gen/derivatives/original_1180/534434744.jpg 1180w&quot; sizes=&quot;(max-width: 300px) 300px,(max-width: 460px) 460px,(max-width: 620px) 620px,(max-width: 780px) 780px,(max-width: 1180px) 1180px&quot; src=&quot;https://i.cbc.ca/1.5399835.1576615138!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/534434744.jpg&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;In almost two decades of research into child labour, Kara says the conditions he witnessed at the mines had 'the most heartbreaking, appalling and utterly unimaginable levels of exploitation.' (Junior Kannah/AFP/Getty Images)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;How much more would it cost them to actually be paying these labourers the wages, living wages, or putting in safe labour practices for the children and the workers in these mines? &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Perhaps the only tragedy greater than the criminal destruction of the environment and the lives of the people of the Congo by these companies is the fact that it would be a rounding error on their income statements to fix the problem.&lt;/p&gt;
&lt;p&gt;It would not take much at all by way of resources or attention to sit down and genuinely and constructively and permanently bring decency, dignity, safety and security to the people and the communities in the Congo where their cobalt is mined.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Written John McGill. Produced by Katie Geleff. Q&amp;amp;A edited for length and clarity.&lt;/em&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Wed, 18 Dec 2019 12:35:30 +0000</pubDate>
<dc:creator>asaibx</dc:creator>
<og:url>https://www.cbc.ca/radio/asithappens/as-it-happens-tuesday-edition-1.5399491/tech-giants-sued-over-appalling-deaths-of-children-who-mine-their-cobalt-1.5399492</og:url>
<og:title>Tech giants sued over 'appalling' deaths of children who mine their cobalt | CBC Radio</og:title>
<og:image>https://i.cbc.ca/1.5399822.1576614999!/fileImage/httpImage/image.JPG_gen/derivatives/16x9_620/congo-mining.JPG</og:image>
<og:description>A new lawsuit alleges that some of the world's largest tech companies — including Apple and Microsoft — are knowingly benefiting the use of deadly child labour at cobalt mines in Congo.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cbc.ca/radio/asithappens/as-it-happens-tuesday-edition-1.5399491/tech-giants-sued-over-appalling-deaths-of-children-who-mine-their-cobalt-1.5399492</dc:identifier>
</item>
<item>
<title>Why we Forked Firefox and Not Chromium</title>
<link>https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html</link>
<guid isPermaLink="true" >https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html</guid>
<description>&lt;p&gt;In 2015 Cliqz released its own desktop web browser, forked from Firefox. Up to that point, we had distributed our search and privacy products as a single Firefox addon. In this article we cover why we thought it necessary to create our own browser, why we chose Firefox, and why we think it was the right choice.&lt;/p&gt;
&lt;h2&gt;Why a browser?&lt;/h2&gt;
&lt;p&gt;Search is an integral part of the web browsing experience—almost every browsing session starts with a search. All modern browser UIs have search directly integrated into their address bars. Thus, browsers are the primary means of distributing search, something Google realised in the 00’s when they created Chrome to push their search. We realised the same, and therefore wanted to have a browser which we could use to distribute our search, and as a showcase of &lt;a href=&quot;https://0x65.dev/blog/2019-12-11/the-pivot-that-excited-mozilla-and-google.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;our vision&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, owning the platform is important to keep control over the user experience. This has proved critical in retrospect: At the time our browser extension in Firefox was using the old legacy extension APIs, which gave us significant power to tinker with the browser UI, something we exploited to build our search dropdown. In 2017 these APIs were deprecated, and we could no longer ship this feature to Firefox. Luckily, we had our own browser by this time.&lt;/p&gt;
&lt;p&gt;Secondly, distributing a browser gave us the power to control much more of the user experience than an extension could have. Back then the mainstream browsers were paying limited attention to user privacy. From our experience building a web search, we saw the kind of data that was being collected about users and being sold on the “free market” by other actors. We wanted to protect users from this kind of exploitation, and apply privacy-by-design to the browser from the ground up.&lt;/p&gt;
&lt;p&gt;At Cliqz we believe browsers are &lt;em&gt;user agents&lt;/em&gt;, “a user agent is software (a software agent) that is acting on behalf of a user”&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. The browser represents a user on the Internet and so is responsible for protecting their privacy. We had already implemented anti-tracking and anti-phishing technologies for our Firefox extension and could integrate them right in our browser.&lt;/p&gt;
&lt;h2&gt;Why fork a browser?&lt;/h2&gt;
&lt;p&gt;For these reasons it became clear we wanted to build and distribute our own browser. It was also obvious that there was no need to try to change what existing browsers were already doing well—there would be little value trying to match the already exceptional rendering performance and security of the established browser engines. Instead, we wanted to build features on top. This meant we would have to fork one of the existing engines. Our thinking was to consider the browser as a platform for our features.&lt;/p&gt;
&lt;p&gt;This decision would make our life easier in the long run. Browsers are extremely high-velocity projects, and must be kept up-to-date for important security patches. Maintaining a fork in these conditions is challenging, and we have learnt that the only sustainable way to do this is to diverge as little as possible from the upstream project.&lt;/p&gt;
&lt;p&gt;We chose to base our work on Firefox as a majority of our code was already a Firefox extension, and to keep as much of our code as possible encapsulated in our extension to make it easier to keep up with Firefox’s upstream changes.&lt;/p&gt;
&lt;h2&gt;Why not Chromium?&lt;/h2&gt;
&lt;p&gt;Nowadays it is a &lt;em&gt;de facto&lt;/em&gt; standard to use Chromium as a browser base. Numerous companies like Opera, Yandex, Brave, and recently Microsoft decided to go in that direction. From our perspective that choice is not so clear for a variety of reasons:&lt;/p&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;We are much more in line with Mozilla’s &lt;em&gt;raison d’être&lt;/em&gt; than with Google’s. We share most of our values with Mozilla, and we consider them allies. When forking a project like this, one is taking the risk that the upstream maintainer kills or modifies features you rely on. We can trust Mozilla much more than Google to not do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;Monopoly-wise, it makes more sense to support Firefox’s code-base. The Blink/Gecko (webrender) market share is not a trivial matter. If all browsers end up using Blink (Google), the Web will suffer as developers will only optimize and test for the Blink rendering engine. The recent loss of the Web’s third independent engine (EdgeHTML), further exacerbates this issue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But the reasons are also technical:&lt;/p&gt;
&lt;ul readability=&quot;12.816451810927&quot;&gt;&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;Firefox has open APIs for everything the browser does—a majority of Firefox “application” code is written in JavaScript. Chromium on the other hand does not expose certain areas that are sensitive to Google’s business. The most notable example is the address bar (where Cliqz search lives). Google has no interest in making it easy for others to take control of the address bar; the flow to the default search engine (Google) is protected. Of course one could create new APIs, but that would imply creating them on top of the source-code. This is not a big issue, we have already created a prototype, but then there is the problem of maintaining it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Maintaining any fork is a nightmare because the owners of the projects—mostly Googlers in the case of Chromium—can be aggressive and pervasive in their changes, sometimes to the point of breaking integrations and forcing people to catch-up.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9.6407185628743&quot;&gt;
&lt;p&gt;It is not “stable”. The introduction of API changes, and support for old APIs, is neither consistent nor coherent. Take for instance Manifest v3, which on the false grounds of security, &lt;a href=&quot;https://whotracks.me/blog/manifest_v3_privacy.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;privacy&lt;/a&gt;, and &lt;a href=&quot;https://whotracks.me/blog/adblockers_performance_study.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;performance&lt;/a&gt; will deprecate some of the most powerful and useful APIs that privacy enhancing extensions rely upon, virtually affecting all of them. They backtracked on some of the inital reasons for the changes, but they still intend to push it through, causing havoc on anyone relying on said APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.9330357142857&quot;&gt;
&lt;p&gt;Chromium comes with a number of Google services which are not easy to remove. Both Microsoft and &lt;a href=&quot;https://github.com/brave/brave-browser/wiki/Deviations-from-Chromium-(features-we-disable-or-remove)#what-chromium-features-are-removed-for-privacysecurity-reasons&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Brave&lt;/a&gt; invested significant resources just to strip these out. Other APIs, such as screen reader integration, are closed source.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Chromium is a great browser with a fast rendering engine, however it requires significant resources to maintain a fork of it, something we did not have, and were not willing to commit to. The decision to go with Firefox has been vindicated, as it has become even easier over time to integrate our features, while at the same time Chromium is stripping away APIs we consider fundamental to our project.&lt;/p&gt;
&lt;h2&gt;Cliqz features&lt;/h2&gt;
&lt;p&gt;Cliqz ships with some home-engineered features which help users to have a safe and private Web experience. Here are some of the most important ones:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Cliqz dropdown&lt;/em&gt;—is where the Cliqz search lives, right in the address bar. The search results are displayed in the dropdown as the user types, eliminating the need for a search result page and saving time. The results displayed are served from our independent and &lt;a href=&quot;https://0x65.dev/blog/2019-12-05/a-new-search-engine.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;private search backend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Anti-tracking&lt;/em&gt;—implements an algorithmic approach to identify and block trackers as well as fingerprinting attempts, and is continuously updated &lt;a href=&quot;https://whotracks.me/blog/how_cliqz_antitracking_protects_users.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;based on data&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Adblocker&lt;/em&gt;—allows users to enjoy a fast, ad- and clutter-free Web experience, thanks to an extremely efficient content blocking engine: &lt;a href=&quot;https://whotracks.me/blog/adblockers_performance_study.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Read more&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Cookie popup blocker&lt;/em&gt;—helps the user to cope with &lt;em&gt;forced&lt;/em&gt; consent popups on websites, dealing with obscure UX patterns automatically by opting you out from data collection rather then just hiding popups!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Auto Forget Window&lt;/em&gt;—automatically opens sensitive or explicit links in a new &lt;em&gt;forget window&lt;/em&gt;, even if it was initiated from a normal window; users can also blacklist URLs to always open them in a &lt;em&gt;forget window&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Antiphishing&lt;/em&gt;—prevents users from falling for phishing pages and keep them safe at all times.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CliqzTab&lt;/em&gt;—is the user dashboard, which shows privacy stats like how many ads were blocked, and how many private data points were removed. It additionally serves &lt;a href=&quot;https://0x65.dev/blog/2019-12-16/your-news-is-not-our-business.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;curated news&lt;/a&gt; and includes few utility widgets like most visited sites and bookmarks.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Firefox is a great platform&lt;/h2&gt;
&lt;p&gt;We have been shipping our Firefox fork for over four years and have come to realise that Firefox is a great host for forks. Some of its fork-friendly properties are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The browser UI can be themed with CSS, this makes UI and design tweaks very easy for web developers.&lt;/li&gt;
&lt;li&gt;It is modular and the &lt;code&gt;pref&lt;/code&gt;-based architecture makes it quite configurable.&lt;/li&gt;
&lt;li&gt;It is built on Web technologies. This makes it much easier for developers to get up-to-speed and productive with it. You can also debug the whole browser with devtools.&lt;/li&gt;
&lt;li&gt;It has first class support for repackaged distributions, making it easy to rebrand the browser&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;It supports extremely powerful extensions, particularly in privileged contexts, which can touch almost all browser internals.&lt;/li&gt;
&lt;li&gt;It allows for powerful configuration scripts for deep customizations&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Universal codebase&lt;/h2&gt;
&lt;p&gt;We started out with a Firefox Bootstrapped&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; extension using the raw, low-level browser APIs. However, once we started building the browser we wanted to also ship features to our mobile browsers on Android and iOS. Later, we wanted to run this code on top of the new webextension APIs that came in Firefox 57. With a small team it would be a challenge to keep the business logic consistent across environments and codebases.&lt;/p&gt;
&lt;p&gt;To handle this we made the architectural decision of running JavaScript everywhere. The business logic would be written in isomorphic/universal JavaScript and then we would add platform-specific implementations underneath to handle the specifics of each runtime. Our &lt;a href=&quot;https://github.com/cliqz-oss/browser-core&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;browser-core&lt;/a&gt; monorepo contains code for products across all platforms:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Webextensions, compatible with Chrome, Firefox, and Edge.&lt;/li&gt;
&lt;li&gt;Android and iOS using React-native.&lt;/li&gt;
&lt;li&gt;NodeJS, for testing and headless mode.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To give an example, we have a search module that provides results for a given query (using RxJS as described in &lt;a href=&quot;https://0x65.dev/blog/2019-12-12/implementing-search-as-you-type-in-the-browser-using-rxjs.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;our previous post&lt;/a&gt;). This is implemented as a module in &lt;a href=&quot;https://github.com/cliqz-oss/browser-core&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;browser-core&lt;/a&gt;. As we mentioned previously, one source for results is the browser’s history. This is platform-specific, so we have different history databases on desktop and mobile. At build time, the appropriate JavaScript implementation is bundled, so the search module can query the platform’s database. The search UIs are also different: on desktop results are rendered in an iframe below the URL bar, while on mobile the UI is implemented with React-Native. In both cases they push queries to, and get results from the same search implementation.&lt;/p&gt;
&lt;h2&gt;Android&lt;/h2&gt;
&lt;p&gt;The situation on Android is a little different than on desktop. The OS is controlled by Google, and the majority of the users end up using either the built-in browser or Chrome (shipped with the Android distribution). Fortunately, users still have a choice. You can change your default browser and the OS will respect that choice whenever you click a link. We have built multiple Android browsers, with different approaches each time:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cliqz for Android&lt;/strong&gt;—Like many Android browsers, Cliqz for Android is a stock Android WebView based application. What is uncommon about it is the fact that it runs our shared JavaScript codebase in a React-Native runtime. Our privacy protection features like the adblocker and anti-tracking run in the React-Native thread and are still able to intercept network requests that are happening in the system WebView. This unique approach allowed us to provide those features without having to fork the complete browser engine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ghostery for Android&lt;/strong&gt;—After Ghostery joined Cliqz, we decided to upgrade the Ghostery Android Browser. The goal was to provide the full Ghostery experience on mobile phones and to do so we decided to build a new version on top of Firefox for Android (aka Fennec). The move allowed us to fully utilize the potential of WebExtension that Firefox for Android provides. This was basically mimicking our desktop approach.&lt;/p&gt;
&lt;p&gt;Fennec is an impressive feat of engineering, that basically is a real Firefox, but on mobile. It has the Gecko rendering engine and SpiderMonkey JavaScript engine. It’s a real deal. And on top, it has a native Android UI for the familiar look and feel.&lt;/p&gt;
&lt;p&gt;Unfortunately Fennec development is a very complicated process. Developers constantly have to jump between different layers and technologies to implement new features or fix bugs. Not many developers are able to effecively jump between C++, JavaScript, and Java.&lt;/p&gt;
&lt;p&gt;The limitation of Fennec’s architecture are well understood by Mozillians and in 2019 Fennec was retired.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Next Gen of Cliqz Browser&lt;/strong&gt;—Based on the lessons from Fennec, Mozillians have created a completely new architecture to create Android browser. It is, at the core, a GeckoView; a nicely encapsulated browser engine with very well crafted Java APIs. With GeckoView, any developer can create a Gecko-backed browser without having to ever touch JavaScript or C++. GeckoView is just “a library” similar to WebView being shipped with Android.&lt;/p&gt;
&lt;p&gt;But GeckoView is able to run WebExtensions and thanks to that it is a perfect fit for the Cliqz cause. On top of GeckoView, we can build beautiful browser UIs and ship our shared JavaScript codebase in the form of WebExtensions. So that with our blazing fast adblocker we can finally compete with Chromium in terms of speed and exceed it in every aspect of privacy protection.&lt;/p&gt;
&lt;h2&gt;iOS&lt;/h2&gt;
&lt;p&gt;Apple’s iOS platform is also very different. Users cannot choose a default browser and browser vendors cannot ship their own rendering or JavaScript engines. All developers have to use stock iOS WebView (WKWebView). This limitation is imposed on all browser vendors: Mozilla’s and even Google’s browsers are “just” iOS applications.&lt;/p&gt;
&lt;p&gt;The Cliqz browser is no different when it comes to the basics. We have forked Firefox for iOS to get a stable base to create our &lt;em&gt;user agent&lt;/em&gt;. Why Firefox? It is an open source and really solid, battle tested project. But it is not the only option: DuckDuckGo would have been a good choice too.&lt;/p&gt;
&lt;p&gt;As the iOS WebView does not come with the capability to run extensions, we had to invent one ourself. Again, React Native came as a solution: We have created a hybrid/brownfield application that ships the browser-core running in React Native in our heavily modified Firefox codebase.&lt;/p&gt;
&lt;p&gt;It might be important to mention that we have forked Firefox for iOS &lt;em&gt;three times already&lt;/em&gt;. Trying out different strategies for running a fork:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Soft fork with rare syncs with upstream—it proved to be complicated to maintain our substantial changes mostly around the WebView. We chose to modify Firefox code to use the older but more powerful UIWebView in order to provide privacy features.&lt;/li&gt;
&lt;li&gt;Soft fork with regular syncs—was a failure as it limited our capability to shape the browser to our liking.&lt;/li&gt;
&lt;li&gt;Hard fork with cherry-picks (current generation)—so far developers’ favorite as it gives the freedom to make changes without having to worry about conflicts with upstream.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Note that Firefox for iOS is not a very high velocity project. This means that manual cherry-picking for security fixes is still feasible.&lt;/p&gt;
&lt;h2&gt;More than a browser&lt;/h2&gt;
&lt;p&gt;With an embedded search engine, anti-tracking and adblocker, Cliqz leads the new wave of browsers that take privacy seriously. The browser wars are real and are about to change the Internet again…&lt;/p&gt;
&lt;h4&gt;Footnotes:&lt;/h4&gt;
&lt;hr class=&quot;footnotes-sep&quot;/&gt;&lt;section class=&quot;footnotes&quot;&gt;&lt;ol class=&quot;footnotes-list&quot; readability=&quot;-2.9166666666667&quot;&gt;&lt;li class=&quot;footnote-item&quot; id=&quot;fn1&quot; readability=&quot;-18.777777777778&quot;&gt;
&lt;p&gt;User agent on Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/User_agent&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;link&lt;/a&gt;. &lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;footnote-item&quot; id=&quot;fn2&quot; readability=&quot;-0.65&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://firefox-source-docs.mozilla.org/taskcluster/partner-repacks.html&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://firefox-source-docs.mozilla.org/taskcluster/partner-repacks.html&lt;/a&gt;. &lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;footnote-item&quot; id=&quot;fn3&quot; readability=&quot;-0.64197530864198&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://support.mozilla.org/en-US/kb/customizing-firefox-using-autoconfig&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://support.mozilla.org/en-US/kb/customizing-firefox-using-autoconfig&lt;/a&gt;. &lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;footnote-item&quot; id=&quot;fn4&quot; readability=&quot;-0.59090909090909&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Bootstrapped_extensions&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/en-US/docs/Archive/Add-ons/Bootstrapped_extensions&lt;/a&gt;. &lt;a href=&quot;https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/section&gt;&lt;p class=&quot;share-text&quot;&gt;Share this article&lt;/p&gt;
&lt;hr class=&quot;share-hr&quot;/&gt;
</description>
<pubDate>Wed, 18 Dec 2019 12:33:01 +0000</pubDate>
<dc:creator>nikbackm</dc:creator>
<og:type>website</og:type>
<og:url>https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html</og:url>
<og:title>Why we forked Firefox and not Chromium</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://0x65.dev/blog/2019-12-17/why-we-forked-firefox-and-not-chromium.html</dc:identifier>
</item>
<item>
<title>Google claims copyright on employee side projects</title>
<link>https://twitter.com/marcan42/status/1207234468928356352</link>
<guid isPermaLink="true" >https://twitter.com/marcan42/status/1207234468928356352</guid>
<description>&lt;p&gt;This is, of course, completely ridiculous, but has become standard practice. Google's policy is based on CA Labor Code § 2870, which gives them ownership over anything that &quot;relates to Google's business&quot;. SInce Google does everything, they get to claim everything.&lt;/p&gt;
</description>
<pubDate>Wed, 18 Dec 2019 10:01:55 +0000</pubDate>
<dc:creator>zoobab</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/marcan42/status/1207234468928356352</dc:identifier>
</item>
<item>
<title>The top bug predictor is not technical, it&amp;#039;s organizational complexity</title>
<link>https://augustl.com/blog/2019/best_bug_predictor_is_organizational_complexity/</link>
<guid isPermaLink="true" >https://augustl.com/blog/2019/best_bug_predictor_is_organizational_complexity/</guid>
<description>&lt;p class=&quot;timestamp&quot;&gt;Published December 18, 2019&lt;/p&gt;

&lt;p&gt;EDIT: Discussion on &lt;a href=&quot;https://news.ycombinator.com/item?id=21823199&quot;&gt;Hacker News&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/programming/comments/ec9s2o/the_1_bug_predictor_is_not_technical_its/&quot;&gt;/r/programming&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post, I'll explore the findings made by Microsoft Research, after the unsuccessful launch of Windows Vista in 2007. Microsoft decided to dig deep and figure out what went wrong.&lt;/p&gt;
&lt;p&gt;The marketing department busied themselves with pranking people into saying that they like Vista.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ihorvo2tEuA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;The research department, on the other hand, decided to do some research.&lt;/p&gt;
&lt;p&gt;This is what they found.&lt;/p&gt;
&lt;h2&gt;Organizational complexity is the best predictor of bugs in a software module&lt;/h2&gt;
&lt;p&gt;This first section will summarize the findings. Later on, I'll describe what the findings mean, and more details about the methods used.&lt;/p&gt;
&lt;p&gt;Microsoft Research &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/the-influence-of-organizational-structure-on-software-quality-an-empirical-case-study/&quot;&gt;published a paper in which they developed a new statistical model&lt;/a&gt; for predicting whether or not a software module was at risk of having bugs, based on a statistical analysis of the module itself.&lt;/p&gt;
&lt;p&gt;The new model they developed was compared to these pre-existing well known models for predicting software bugs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Code Churn&lt;/strong&gt;. Measures the number of changes in version control of a module.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Complexity&lt;/strong&gt;. Measures the number of code paths, the number of functions that call each other internally in the module, depth of inheritance hierarchies, coupling between objects, number of sub classes, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;. Measures the number of external modules calling you, how many external modules you're calling, how many layers a module is away from the hardware, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Coverage&lt;/strong&gt;. Traditional test coverage that most developers are probably already familiar with.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pre-Release Bugs&lt;/strong&gt;. Number of issues in the issue tracker.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In addition to these pre-existing models, the new model they developed was:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Organizational Complexity&lt;/strong&gt;. Measures number of developers working on the module, number of ex-developers that &lt;em&gt;used&lt;/em&gt; to work on the module but no longer does, how big a fraction of the organization as a whole that works or has worked on the module, the distance in the organization between the developer and the decision maker, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The results really do speak for themselves.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Model&lt;/th&gt;
&lt;th&gt;Precision&lt;/th&gt;
&lt;th&gt;Recall&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Organizational Structure&lt;/td&gt;
&lt;td&gt;86.2%&lt;/td&gt;
&lt;td&gt;84.0%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Code Churn&lt;/td&gt;
&lt;td&gt;78.6%&lt;/td&gt;
&lt;td&gt;79.9%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Code Complexity&lt;/td&gt;
&lt;td&gt;79.3%&lt;/td&gt;
&lt;td&gt;66.0%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Dependencies&lt;/td&gt;
&lt;td&gt;74.4%&lt;/td&gt;
&lt;td&gt;69.9%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Code Coverage&lt;/td&gt;
&lt;td&gt;83.8%&lt;/td&gt;
&lt;td&gt;54.4%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Pre-Release Bugs&lt;/td&gt;
&lt;td&gt;73.8%&lt;/td&gt;
&lt;td&gt;62.9%&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;(Higher numbers are better. A more detailed description follows.)&lt;/p&gt;
&lt;p&gt;That's pretty interesting!&lt;/p&gt;
&lt;p&gt;Organizational structure has the highest precision, &lt;em&gt;and&lt;/em&gt; the highest recall. (Again, more on the details later).&lt;/p&gt;
&lt;p&gt;That's pretty interesting, isn't it? The distance to decision makers and the number of developers working on a project is clearly and unambiguously the issue that is the best predictor of future problems with a code base.&lt;/p&gt;
&lt;p&gt;Another shocking discovery for me personally, is that the only one that I've actually used myself - code coverage - has the lowest recall. It has a high precision, so bad code coverage does mean a high chance of bugs, i.e. low amount of false flags. But with a low recall, there are lots of bug that code coverage doesn't actually catch.&lt;/p&gt;
&lt;h2&gt;Predicting bugs?&lt;/h2&gt;
&lt;p&gt;What do these numbers actually mean? And what does it mean to predict bugs in a software module?&lt;/p&gt;
&lt;p&gt;Again, &lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/the-influence-of-organizational-structure-on-software-quality-an-empirical-case-study/&quot;&gt;the original paper&lt;/a&gt; has the full description. What follows is my layman summary in blog form.&lt;/p&gt;
&lt;p&gt;The &quot;precision&quot; and &quot;recall&quot; values are the results of a method for evaluating the actual predictive powers of the analytical models.&lt;/p&gt;
&lt;p&gt;The gist of it is that you compare two things: The predictions made by the prediction method, without any knowledge of real-world bugs. And actual real-world bug information, gathered some time after release.&lt;/p&gt;
&lt;p&gt;The very general summary of the statistical process is as follows:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You analyze a software module using the prediction model, and return a p value (a number between 0 and 1, where 0 means zero chance of bug, and 1 means it's completely confident that there's bugs).&lt;/li&gt;
&lt;li&gt;You use that p value to define a binary &quot;yes&quot; or &quot;no&quot; for whether or not you think a module has a bug. If p &amp;gt; 0.5, the module is flagged as buggy.&lt;/li&gt;
&lt;li&gt;A module, in the context of Windows Vista, is an individual DLL. So a device driver, a kernel module, etc.&lt;/li&gt;
&lt;li&gt;You take the 3000 (ish) modules in Vista and, divide them into 3 random parts. One part gets the prediction method run on them, and that result is compared with the remaining two parts based on whether or not it actually had a bug in the real world&lt;/li&gt;
&lt;li&gt;You extract precision and recall values out of that (more on that later)&lt;/li&gt;
&lt;li&gt;Repeat 100 or so times, and check that you get an roughly even distribution of precision and recall values across all the random selections.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And voila! You have your numbers.&lt;/p&gt;
&lt;p&gt;So what exactly is precision and recall?&lt;/p&gt;
&lt;h2&gt;Precision and recall&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;EDIT: This section had precision and recall swapped. The article has been updated. Thanks to &lt;a href=&quot;https://www.reddit.com/r/programming/comments/ec9s2o/the_1_bug_predictor_is_not_technical_its/fba2g0w/&quot;&gt;/u/programmingfriend on Reddit&lt;/a&gt; for pointing that out!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When you run your comparison of &quot;here's the result my prediction method got&quot; and compare it to &quot;here's how many bugs the module &lt;em&gt;actually&lt;/em&gt; had&quot;, you get precision and recall values.&lt;/p&gt;
&lt;p&gt;Remember that we checked 1/3rd of the modules with the prediction method, and compared it to the actual real world results of the remaining 2/3rds. This comparison yields the numbers in the table above.&lt;/p&gt;
&lt;p&gt;So what does it mean?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Precision&lt;/strong&gt; - of the modules that the prediction thought had bugs, how many did actually have bugs?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recall&lt;/strong&gt; - how many modules that had bugs, did the prediction model detect?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Having a low recall is not the end of the world. It just means that you could have detected more buggy modules, and that some buggy modules went under the radar.&lt;/p&gt;
&lt;p&gt;Having a low precision is worse. That means that the prediction model tagged a module as buggy - but it turned out that the module actually wasn't.&lt;/p&gt;
&lt;h2&gt;Doesn't that mean that I need actual bug data to predict bugs?&lt;/h2&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;The Microsoft Research team compared their prediction models to real world bug information 6 months prior to release.&lt;/p&gt;
&lt;p&gt;But they only used this to get some numbers of how valid the methods are.&lt;/p&gt;
&lt;p&gt;The actual prediction method in and of itself only requires access to the source code, and in the case of the organizational complexity analysis, data about committers in the HR system so they can run the organizational metrics as well.&lt;/p&gt;
&lt;p&gt;But no real world bug data is required to run these models.&lt;/p&gt;
&lt;p&gt;So now that the model has been verified, you can run it on an unreleased module and get predictions on whether or not that module will have bugs in it.&lt;/p&gt;
&lt;h2&gt;The study has been successfully replicated&lt;/h2&gt;
&lt;p&gt;Science is going through somewhat of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Replication_crisis&quot;&gt;replication crisis&lt;/a&gt;, where fundamental and highly cited studies has turned out to not be reproducible.&lt;/p&gt;
&lt;p&gt;Thankfully, the predictive value of organizational complexity to software has been replicated!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.scs.ryerson.ca/~avm/dat/manuscripts/ICSE_2015.pdf&quot;&gt;In the replicated study&lt;/a&gt; the predictive value of organizational structure is not as high. Out of 4 measured models, it gets the 2nd highest precision and the 3rd highest recall. The study itself does conclude that organizational complexity as a bug prediction method is worth investigating further. The study is also based on individual functions in C/C++, and not entire modules like Microsoft Research did, which can be a reason for at least a part of the discrepancy.&lt;/p&gt;
&lt;p&gt;Also, the model for measuring organizational complexity doesn't measure the organization compared to other organizations. I wouldn't be surprised if Microsoft is one of the most complex software organizations in the world. So maybe that's why organizational complexity was at the top of the list at Microsoft.&lt;/p&gt;
&lt;p&gt;Another thing to consider is the difference between formal and informal organization structure, which none of the studies takes into account. The Microsoft study just automated its model against data from the HR system. Watch Ed Catmull of Pixar talk about this here (10:06)&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/k2h2lvhzMDc?start=606&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;At any rate, this discovery coupled with the findings from &lt;a href=&quot;https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/ref=sr_1_1?keywords=accellerate&amp;amp;qid=1576617532&amp;amp;s=books&amp;amp;sr=1-1&quot;&gt;Accellerate&lt;/a&gt; leads me to at the very least believe that social elements is probably under-measured in software projects, and should be taken more seriously.&lt;/p&gt;
&lt;hr class=&quot;post-sep&quot;/&gt;&lt;p&gt;Questions or comments?&lt;/p&gt;
&lt;p&gt;Feel free to contact me on Twitter, &lt;a href=&quot;http://twitter.com/augustl&quot;&gt;@augustl&lt;/a&gt;, or e-mail me at &lt;a href=&quot;mailto:august@augustl.com&quot;&gt;august@augustl.com&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Wed, 18 Dec 2019 09:23:30 +0000</pubDate>
<dc:creator>keyP</dc:creator>
<og:title>The #1 bug predictor is not technical, it's organizational complexity</og:title>
<og:description>The CRUD blog</og:description>
<og:url>/blog/2019/best_bug_predictor_is_organizational_complexity/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://augustl.com/blog/2019/best_bug_predictor_is_organizational_complexity/</dc:identifier>
</item>
<item>
<title>Structure and Interpretation of Computer Programs – JavaScript Adaptation</title>
<link>https://sicp.comp.nus.edu.sg/</link>
<guid isPermaLink="true" >https://sicp.comp.nus.edu.sg/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://sicp.comp.nus.edu.sg/&quot;&gt;https://sicp.comp.nus.edu.sg/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=21822903&quot;&gt;https://news.ycombinator.com/item?id=21822903&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 283&lt;/p&gt;
&lt;p&gt;# Comments: 163&lt;/p&gt;
</description>
<pubDate>Wed, 18 Dec 2019 08:22:12 +0000</pubDate>
<dc:creator>hwartig</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://sicp.comp.nus.edu.sg/</dc:identifier>
</item>
<item>
<title>Ask HN: How Can I Learn Music Theory?</title>
<link>https://news.ycombinator.com/item?id=21822225</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=21822225</guid>
<description>&lt;tr readability=&quot;0.58823529411765&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr id=&quot;pagespace&quot; title=&quot;Ask HN: How Can I Learn Music Theory?&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.0651260504202&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;3.6586134453782&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;21822225&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=21822225&quot; class=&quot;storylink&quot;&gt;Ask HN: How Can I Learn Music Theory?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.73170731707317&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_21822225&quot;&gt;570 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=deanstag&quot; class=&quot;hnuser&quot;&gt;deanstag&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=21822225&quot;&gt;19 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_21822225&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=21822225&amp;amp;goto=item%3Fid%3D21822225&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20How%20Can%20I%20Learn%20Music%20Theory%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20How%20Can%20I%20Learn%20Music%20Theory%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=21822225&amp;amp;auth=78ed566602e0188fc6314cfdc5fd89e87bcd6a99&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=21822225&quot;&gt;216 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;I self taught myself a few things over the years and I can play my way through a lot of songs. But I'd like to dig deeper into music theory and have never been able to sift through a vast array of music theory blogs and tutorials to find something that made sense. I want a different perspective from the HN crowd. How did you teach yourself music theory?&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 18 Dec 2019 05:53:08 +0000</pubDate>
<dc:creator>deanstag</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=21822225</dc:identifier>
</item>
<item>
<title>A Database of Fugitive Slave Ads Reveals Thousands of Untold Stories (2018)</title>
<link>https://hyperallergic.com/435183/freedom-on-the-move/</link>
<guid isPermaLink="true" >https://hyperallergic.com/435183/freedom-on-the-move/</guid>
<description>&lt;p&gt;&lt;img class=&quot;size-medium wp-image-435187&quot; src=&quot;https://hyperallergic.com/wp-content/uploads/2018/03/fugitiveadnypl-720x675.jpg&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;675&quot; srcset=&quot;https://hyperallergic.com/wp-content/uploads/2018/03/fugitiveadnypl-720x675.jpg 720w, https://hyperallergic.com/wp-content/uploads/2018/03/fugitiveadnypl-1080x1012.jpg 1080w, https://hyperallergic.com/wp-content/uploads/2018/03/fugitiveadnypl-360x337.jpg 360w, https://hyperallergic.com/wp-content/uploads/2018/03/fugitiveadnypl.jpg 1400w&quot; sizes=&quot;(max-width: 720px) 100vw, 720px&quot;/&gt;&lt;/p&gt;
Advertisement for a fugitive slave in the &lt;em&gt;Oppenheim&lt;/em&gt; (New York, 1824) (via &lt;a href=&quot;https://digitalcollections.nypl.org/items/510d47db-bcfe-a3d9-e040-e00a18064a99&quot;&gt;Schomburg Center for Research in Black Culture, Manuscripts, Archives and Rare Books Division, New York Public Library&lt;/a&gt;)
&lt;p&gt;Readers of the May 24, 1796 &lt;em&gt;Pennsylvania Gazette&lt;/em&gt; foun&lt;a href=&quot;https://en.wikipedia.org/wiki/File:Oney_Judge_Runaway_Ad.jpg&quot;&gt;d an advertisement&lt;/a&gt; offering ten dollars to any person who would apprehend &lt;a href=&quot;https://en.wikipedia.org/wiki/Oney_Judge&quot;&gt;Oney Judge&lt;/a&gt;, an enslaved woman who had fled from President George Washington’s Virginia plantation, Mount Vernon. The notice described her in detail as a “light mulatto girl, much freckled, with very black eyes and bushy black hair,” as well as her skills at mending clothes, and that she “may attempt to escape by water … it is probable she will attempt to pass as a free woman, and has, it is said, wherewithal to pay her passage.” She did indeed board a ship called the &lt;em&gt;Nancy&lt;/em&gt; and made it to New Hampshire, where she later married a free black sailor, although she was herself never freed by the Washingtons and remained a fugitive.&lt;/p&gt;
&lt;p&gt;The advertisement is one of thousands that were printed in newspapers during colonial and pre-Civil War slavery in the United States. The &lt;a href=&quot;http://freedomonthemove.org/&quot;&gt;Freedom on the Move&lt;/a&gt; (FOTM) public database project, now being developed at Cornell University, is the first major digital database to organize together North American fugitive slave ads from regional, state, and other collections. FOTM recently received its second of its two National Endowment for the Humanities (NEH) &lt;a href=&quot;https://securegrants.neh.gov/publicquery/main.aspx?q=1&amp;amp;a=0&amp;amp;n=0&amp;amp;o=0&amp;amp;ot=0&amp;amp;k=1&amp;amp;kv=freedom+on+the+move&amp;amp;kj=phrase&amp;amp;w=0&amp;amp;f=0&amp;amp;s=0&amp;amp;cd=0&amp;amp;p=0&amp;amp;d=0&amp;amp;y=0&amp;amp;prd=0&amp;amp;cov=0&amp;amp;prz=0&amp;amp;wp=0&amp;amp;ob=year&amp;amp;or=DESC&quot;&gt;digital humanities grants.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;size-medium wp-image-435188&quot; src=&quot;https://hyperallergic.com/wp-content/uploads/2018/03/freedomonmove1-720x432.jpg&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;432&quot; srcset=&quot;https://hyperallergic.com/wp-content/uploads/2018/03/freedomonmove1-720x432.jpg 720w, https://hyperallergic.com/wp-content/uploads/2018/03/freedomonmove1-1080x649.jpg 1080w, https://hyperallergic.com/wp-content/uploads/2018/03/freedomonmove1-360x216.jpg 360w, https://hyperallergic.com/wp-content/uploads/2018/03/freedomonmove1.jpg 1204w&quot; sizes=&quot;(max-width: 720px) 100vw, 720px&quot;/&gt;&lt;/p&gt;
The &lt;a href=&quot;http://freedomonthemove.org/&quot;&gt;Freedom on the Move&lt;/a&gt; project from Cornell University (screenshot by the author for Hyperallergic)
&lt;p&gt;“Ironically, in trying to retrieve their property — the people they claimed as things — enslavers left us mounds of evidence about the humanity of the people they bought and sold,” Dr. Mary Niall Mitchell, professor of early American history at the University of New Orleans and one of the three lead historians on FOTM, told Hyperallergic. The other two historians are Joshua Rothman of the University of Alabama and Edward E. Baptist (author of the 2016 &lt;em&gt;&lt;a href=&quot;https://www.amazon.com/Half-Has-Never-Been-Told/dp/0465049664&quot;&gt;The Half Has Never Been Told: Slavery and the Making of American Capitalism&lt;/a&gt;&lt;/em&gt;) of Cornell University.&lt;/p&gt;
&lt;p&gt;As with the ad for Oney Judge, these classifieds did not only include meticulous information on appearance, but also skills, personalities, mannerisms, scars from whips or brands, history of sale, and where they might flee to based on the locations of friends and family. While the database is still in progress, examples of the ads are being shared on the &lt;a href=&quot;https://twitter.com/fotmproject?lang=en&quot;&gt;@fotmproject Twitter account&lt;/a&gt;. One for a woman named Sabina who fled with her son describes her “high cheek bones” and that she “walks parrot-toed”; another for a man named Griffin states he is “a very light mulatto (in fact some persons would mistake him for a white man).” An ad from 1840 offers a $20 reward for Aaron who “has been absent some weeks — he is about 27 years of age, 5 feet 7 or 8 inches high, and is a light mulatto; has a scar on one of his cheeks; speaks French and English, and stammers when speaking; is a painter by trade, and is no doubt at work on some of the buildings about the city.”&lt;/p&gt;


&lt;p&gt;“For some, this may be the only place something about them survives, in any detail, in the written record,” Mitchell said. She added that the huge volume of ads — with around 100,000 involved in FOTM — expands on the history of resistance against slavery in the 18th and 19th centuries. Some of the ads represent people who escaped more than once. “The Underground Railroad was just one among many efforts on the part of enslaved people to liberate themselves,” she said. “Many enslaved people ran without an organized network of free people to help them.”&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;size-medium wp-image-435189&quot; src=&quot;https://hyperallergic.com/wp-content/uploads/2018/03/runawaysad-720x498.jpg&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;498&quot; srcset=&quot;https://hyperallergic.com/wp-content/uploads/2018/03/runawaysad-720x498.jpg 720w, https://hyperallergic.com/wp-content/uploads/2018/03/runawaysad-360x249.jpg 360w, https://hyperallergic.com/wp-content/uploads/2018/03/runawaysad.jpg 760w&quot; sizes=&quot;(max-width: 720px) 100vw, 720px&quot;/&gt;&lt;/p&gt;
Runaway advertisement in a newspaper for a man named Bill (Jefferson County, Alabama) (via &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Runaway_slave_ad_--_Slave_named_Bill_in_jail,_Jefferson_County,_AL.jpg&quot;&gt;New York Public Library/Wikimedia&lt;/a&gt;)
&lt;p&gt;Crowdsourced data tags and transcriptions will be a major part of FOTM’s public engagement. Database users can then examine spatial patterns and compare trends over time. “Combining all of these ads together in one searchable database will allow us to ask new questions about the enslaved population over time,” Mitchell explained. “At what time of year were enslaved people most likely to run? What places did they frequent? What skills did they have? How many could read and write? Or were likely to ‘pass’ for white, or claim to be free? What did they wear? Where were they suspected to be hiding and with whom? Under what circumstances did women run away? We can also learn more about the ethnicity of the enslaved population, which is to say, where they or their family may have originated — from a particular nation in Africa, for instance — or whether they were Creole or American.”&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.runaways.gla.ac.uk/&quot;&gt;Runaway Slaves in Britain&lt;/a&gt; project at the University of Glasgow is similarly examining the history of slavery in the UK through advertisements from 18th-century newspapers.  There are first-hand narratives of slavery — such as Frederick Douglass’s &lt;a href=&quot;https://en.wikipedia.org/wiki/Narrative_of_the_Life_of_Frederick_Douglass,_an_American_Slave&quot;&gt;1845 memoir&lt;/a&gt; and Solomon Northup’s 1853 &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Twelve_Years_a_Slave&quot;&gt;Twelve Years a Slave&lt;/a&gt;&lt;/em&gt; — yet overwhelmingly millions of voices are missing from recorded American history. FOTM aims to deepen our understanding of the experiences of enslaved people, and slavery’s role in the development of the country. As Mitchell stated, “Through these individual stories, we aim to help people in the present connect with the past and with the plight of those who suffered and resisted slavery.”&lt;/p&gt;
</description>
<pubDate>Wed, 18 Dec 2019 05:24:25 +0000</pubDate>
<dc:creator>benbreen</dc:creator>
<og:type>article</og:type>
<og:title>A Database of Fugitive Slave Ads Reveals Thousands of Untold Resistance Stories</og:title>
<og:description>Freedom on the Move from Cornell University is the first major digital database of fugitive slave ads from North America.</og:description>
<og:url>https://hyperallergic.com/435183/freedom-on-the-move/</og:url>
<og:image>https://hyperallergic.com/wp-content/uploads/2018/04/freedom-1000.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hyperallergic.com/435183/freedom-on-the-move/</dc:identifier>
</item>
</channel>
</rss>