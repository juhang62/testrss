<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Dotsies</title>
<link>http://dotsies.org/</link>
<guid isPermaLink="true" >http://dotsies.org/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;http://dotsies.org/&quot;&gt;http://dotsies.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18703805&quot;&gt;https://news.ycombinator.com/item?id=18703805&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 261&lt;/p&gt;
&lt;p&gt;# Comments: 125&lt;/p&gt;
</description>
<pubDate>Tue, 18 Dec 2018 01:16:54 +0000</pubDate>
<dc:creator>severine</dc:creator>
<dc:identifier>http://dotsies.org/</dc:identifier>
</item>
<item>
<title>Neural Networks as Ordinary Differential Equations</title>
<link>https://rkevingibson.github.io/blog/neural-networks-as-ordinary-differential-equations/</link>
<guid isPermaLink="true" >https://rkevingibson.github.io/blog/neural-networks-as-ordinary-differential-equations/</guid>
<description>&lt;p&gt;Recently I found a paper being presented at NeurIPS this year, entitled &lt;a href=&quot;https://arxiv.org/abs/1806.07366&quot;&gt;Neural Ordinary Differential Equations&lt;/a&gt;, written by Ricky Chen, Yulia Rubanova, Jesse Bettencourt, and David Duvenaud from the University of Toronto. The core idea is that certain types of neural networks are analogous to a discretized differential equation, so maybe using off-the-shelf differential equation solvers will help get better results. This led me down a bit of a rabbit hole of papers that I found very interesting, so I thought I would share a short summary/view-from-30,000 feet on this idea.&lt;/p&gt;
&lt;p&gt;Typically, we think about neural networks as a series of discrete layers, each one taking in a previous state vector &lt;span class=&quot;math&quot;&gt;\( \mathbf{h}_n \)&lt;/span&gt; and producing a new state vector &lt;span class=&quot;math&quot;&gt;\( \mathbf{h}_{n+1} = F(\mathbf{h}_{n}) \)&lt;/span&gt;. Here, let's assume that each layer is the same width (e.g. &lt;span class=&quot;math&quot;&gt;\( \mathbf{h}_{n} \)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\( \mathbf{h}_{n+1} \)&lt;/span&gt; have the same dimension, for every &lt;span class=&quot;math&quot;&gt;\( n \)&lt;/span&gt;). Note that we don't particularly care about what &lt;span class=&quot;math&quot;&gt;\(F\)&lt;/span&gt; looks like, but typically it's something like &lt;span class=&quot;math&quot;&gt;\(F(x) = \sigma(\sum_{i}\theta_i x_i)\)&lt;/span&gt;, where &lt;span class=&quot;math&quot;&gt;\(\sigma\)&lt;/span&gt; is an activation function (e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Rectifier_(neural_networks)&quot;&gt;relu&lt;/a&gt; or a &lt;a href=&quot;https://en.wikipedia.org/wiki/Logistic_function&quot;&gt;sigmoid&lt;/a&gt;), and &lt;span class=&quot;math&quot;&gt;\(\theta\)&lt;/span&gt; is a vector of parameters we're learning. This core formulation has some problems - notably, adding more layers, while theoretically increasing the ability of the network to learn, can actually &lt;em&gt;decrease&lt;/em&gt; the accuracy of it, both in training and test results.&lt;/p&gt;
&lt;p&gt;This problem was adressed by &lt;a href=&quot;https://arxiv.org/pdf/1512.03385.pdf&quot;&gt;Deep Residual Learning&lt;/a&gt;, from Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun out of Microsoft Reasearch. The idea in a nutshell is to learn a function of the difference between layers: &lt;span class=&quot;math&quot;&gt;\( \mathbf{h}_{n+1} = F(\mathbf{h}_n) + \mathbf{h}_n \)&lt;/span&gt;. In the paper, they show this simple transformation in what you're learning allows the networks to keep improving as they add more layers. To me, this reminds me of &lt;a href=&quot;https://en.wikipedia.org/wiki/Delta_encoding&quot;&gt;delta encoding&lt;/a&gt;, in which you represent a stream of data as a series of changes from the previous state. This can make certain types of data much more suitable to compression (see, e.g. &lt;a href=&quot;https://gafferongames.com/post/snapshot_compression/&quot;&gt;this article&lt;/a&gt; from Glenn Fiedler on compressing physics data to send over a network). It makes some kind of sense that if delta encoding can make data easier to compress, it could also make it easier to represent for a neural network.&lt;/p&gt;
&lt;h3 id=&quot;eulers-method-and-residual-networks&quot;&gt;Euler's method and residual networks&lt;/h3&gt;
&lt;p&gt;But how do residual networks relate to differential equations? Suppose we have some constant that we'll call &lt;span class=&quot;math&quot;&gt;\( \Delta t \in \mathbb{R}\)&lt;/span&gt;. Then we can write the state update of our neural network as&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \begin{aligned} \mathbf{h}_{t+1} &amp;amp;= F(\mathbf{h}_t) + \mathbf{h}_t \\ \\ &amp;amp;= \frac{\Delta t}{\Delta t} F(\mathbf{h}_t) + \mathbf{h}_t \\ \\ &amp;amp;= \Delta t G(\mathbf{h}_t) + \mathbf{h}_t \end{aligned} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where now we're learning &lt;span class=&quot;math&quot;&gt;\( G(\mathbf{h}_t) = F(\mathbf{h}_t)/\Delta t + \mathbf{h}_t \)&lt;/span&gt;. If you have experience with differential equations, this formulation looks very familiar - it is a single step of &lt;a href=&quot;https://en.wikipedia.org/wiki/Euler_method&quot;&gt;Euler's method&lt;/a&gt; for solving ordinary differential equations. It seems this was first noticed by Weinan E in &lt;a href=&quot;https://link.springer.com/article/10.1007/s40304-017-0103-z&quot;&gt;A proposal on Machine Learning via Dynamical Systems&lt;/a&gt;, and expanded upon by Yiping Lu et al. in &lt;a href=&quot;https://arxiv.org/pdf/1710.10121.pdf&quot;&gt;Beyond Finite Layer Neural Networks&lt;/a&gt;. However, Lu et al. continue to treat the network as a series of discrete steps, and use a discrete solver with fixed timesteps to come up with a novel neural network architecture. The reason for this is that we need to be able to train the networks, and it's not really clear how to &quot;learn&quot; a differential system. Chen, Rubanova, Bettencourt and Duvenaud solve this problem by using some clever math which enables them to compute the gradients they need for backpropagation.&lt;/p&gt;
&lt;h3 id=&quot;evaluating-odes&quot;&gt;Evaluating ODEs&lt;/h3&gt;
&lt;p&gt;Before we get to that, let's look at what we're trying to solve. If we consider a layer of our neural network to be doing a step of Euler's method, then we can model our system by the differential equation&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \frac{d \mathbf{h}(t)}{dt} = G(\mathbf{h}(t), t, \theta) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here we've made explicit &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt;'s dependency on &lt;span class=&quot;math&quot;&gt;\(t\)&lt;/span&gt;, as well as some parameters &lt;span class=&quot;math&quot;&gt;\(\theta\)&lt;/span&gt; which we will train on. In this formulation, the output of our &quot;network&quot; is the state &lt;span class=&quot;math&quot;&gt;\(\mathbf{h}(t_1)\)&lt;/span&gt; at some time &lt;span class=&quot;math&quot;&gt;\(t_1\)&lt;/span&gt;. Therefore, if we know how to describe the function &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt;, we can use any number of off-the-shelf ODE solvers to evaluate the neural network.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \mathbf{h}(t_1) = \text{ODESolve}(\mathbf{h}(t_0), G, t_0, t_1, \theta) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;There is a ton of research on different methods that can be used as our ODESolve function, but for now we'll treat it as a black box. What matters is that if you substitute in Euler's method, you get exactly the residual state update from above, with&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \text{ODESolve}(\mathbf{h}(t_0), G, t_0, t_1, \theta) = \mathbf{h}(t_0) + (t_1 - t_0)G(\mathbf{h}(t_0), t_0, \theta)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;However, we don't need to limit ourselves to Euler's method, and in fact will do much better if we use more modern approaches.&lt;/p&gt;
&lt;h3 id=&quot;training-the-beast&quot;&gt;Training the beast&lt;/h3&gt;
&lt;p&gt;So how to train it? Suppose we have a loss function&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ L(h(t_1)) = L(\text{ODESolve}(\mathbf{h}(t_0), G, t_0, t_1, \theta))\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To optimize &lt;span class=&quot;math&quot;&gt;\(L\)&lt;/span&gt;, we require gradients with respect to its parameters &lt;span class=&quot;math&quot;&gt;\(\mathbf{h}(t)\)&lt;/span&gt; (the state of our system at time &lt;span class=&quot;math&quot;&gt;\(t\)&lt;/span&gt;), &lt;span class=&quot;math&quot;&gt;\(t\)&lt;/span&gt; (our &quot;time&quot; variable, which is sort of a continuous analog to depth), and &lt;span class=&quot;math&quot;&gt;\(\theta\)&lt;/span&gt;, our training parameters. &lt;a href=&quot;https://cs.stanford.edu/~ambrad/adjoint_tutorial.pdf&quot;&gt;The adjoint method&lt;/a&gt; describes a way to come up with this. The adjoint method is a neat trick which uses a simple substitution of variables to make solving certain linear systems easier. Part of the reason this paper grabbed my eye is because I've seen the adjoint method before, in a completely unrelated area: fluid simulation! In &lt;a href=&quot;http://grail.cs.washington.edu/projects/control/fluidAdjoint.pdf&quot;&gt;this&lt;/a&gt; paper from McNamara et al., they make controlling a fluid simulation easier by using the adjoint method to efficiently compute some gradients with respect to user controlled parameters. That certainly sounds similar to our problem.&lt;/p&gt;
&lt;p&gt;So what is the adjoint method? Suppose we have 2 known matrices &lt;span class=&quot;math&quot;&gt;\(A\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(C\)&lt;/span&gt;, and an unknown vector &lt;span class=&quot;math&quot;&gt;\(\mathbf{u}\)&lt;/span&gt; and we would like to compute a product&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\mathbf{u}^{\intercal}B \text{ such that } AB=C\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We could first solve the linear system to find the unknown matrix &lt;span class=&quot;math&quot;&gt;\(B\)&lt;/span&gt;, then compute the product, but solving the linear system could be expensive. Instead, let's solve a different problem. Let's find a vector &lt;span class=&quot;math&quot;&gt;\(\mathbf{v}\)&lt;/span&gt; and compute&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\mathbf{v}^{\intercal}C \text{ such that } A^{\intercal}\mathbf{v}=\mathbf{u}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We can show that these are in fact the same problem:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[\mathbf{v}^{\intercal}C = \mathbf{v}^{\intercal}AB = (A^{\intercal}\mathbf{v})^{\intercal}B = \mathbf{u}^{\intercal}B\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Through this transformation, we've reduced the problem from solving for a matrix, and reduced it to solving for a vector. This can be a big computational win! So how do we use it to train networks? I'm not going to go into the complete details here as it's slightly involved, but Appendix B in the paper has the complete derivation. In brief, we define the adjoint state as&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ a(t) = -\partial L / \partial \mathbf{h}(t) \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;And we can describe its dynamics via&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[ \frac{da(t)}{dt} = - a(t)^{\intercal} \frac{\partial G(\mathbf{h}(t), t, \theta)}{\partial \mathbf{h}} \]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We can compute the derivative of &lt;span class=&quot;math&quot;&gt;\(G\)&lt;/span&gt; with respect to &lt;span class=&quot;math&quot;&gt;\(\mathbf{h}\)&lt;/span&gt; already - we compute this gradient during backpropagation of traditional neural networks. With this, we can then compute &lt;span class=&quot;math&quot;&gt;\(a(t)\)&lt;/span&gt; by using another call to an ODE solver. There is one other derivative, &lt;span class=&quot;math&quot;&gt;\(dL/d\theta\)&lt;/span&gt;, that can be computed similarly. The paper shows that we can wrap up all of these ODE solves into a single call to an ODE solver, which computes all the necessary gradients for training the system.&lt;/p&gt;
&lt;h3 id=&quot;whats-the-point&quot;&gt;What's the point?&lt;/h3&gt;
&lt;p&gt;Why do we want to do this? According to the paper, we're able to train a model with much less memory, with fewer parameters, and we are able to backpropagate more efficiently. All of these seem like good things! Modern ODE solvers are also adaptive, and can do more work only when needed to get an accurate solution. In the paper they show an experiment where the number of function evaluations that the ODE solver does increases with the number of training epochs - effectively, the system can quickly reach a rough solution, then take more time to refine the training.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://rkevingibson.github.io/img/ode_networks_1.png&quot; alt=&quot;illustration of an ode network compared to a residual network&quot; title=&quot;An example from the paper showing how using an ode solver can adaptively evaluate the function. Circles represent function evaluations.&quot;/&gt;An example from the paper showing how using an ode solver can adaptively evaluate the function. Circles represent function evaluations.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;I think the most interesting aspect is that treating our system like a continuous time model, allows us to predict continuous time systems. They show a way to take data which arrives at arbitrary times, rather than at fixed intervals, and they can predict the output at arbitrary future times. They test this on fairly simple synthetic data, predicting trajectories of spirals, but get really nice results. I definitely want to see more of this type of work in the future, on larger real-world problems, to see how it does. Being able to draw on the &amp;gt; 100 years of research in solving differential equations could be very useful for a young field like deep learning, and hey, I just find the math neat.&lt;/p&gt;
&lt;p class=&quot;back-to-posts&quot;&gt;&lt;a href=&quot;https://rkevingibson.github.io/blog&quot;&gt;Back to posts&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2018 21:58:37 +0000</pubDate>
<dc:creator>agronaut</dc:creator>
<og:title>Neural networks as Ordinary Differential Equations</og:title>
<og:description>Recently I found a paper being presented at NeurIPS this year, entitled Neural Ordinary Differential Equations, written by Ricky Chen, Yulia Rubanova, Jesse Bettencourt, and David Duvenaud from the University of Toronto. The core idea is that certain types of neural networks are analogous to a discretized differential equation, so maybe using off-the-shelf differential equation solvers will help get better results. This led me down a bit of a rabbit hole of papers that I found very interesting, so I thought I would share a short summary/view-from-30,000 feet on this idea.</og:description>
<og:type>article</og:type>
<og:url>https://rkevingibson.github.io/blog/neural-networks-as-ordinary-differential-equations/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://rkevingibson.github.io/blog/neural-networks-as-ordinary-differential-equations/</dc:identifier>
</item>
<item>
<title>MIPS Goes Open Source</title>
<link>https://www.eetimes.com/document.asp?doc_id=1334087</link>
<guid isPermaLink="true" >https://www.eetimes.com/document.asp?doc_id=1334087</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.eetimes.com/document.asp?doc_id=1334087&quot;&gt;https://www.eetimes.com/document.asp?doc_id=1334087&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18701145&quot;&gt;https://news.ycombinator.com/item?id=18701145&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 410&lt;/p&gt;
&lt;p&gt;# Comments: 123&lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2018 18:58:26 +0000</pubDate>
<dc:creator>walterbell</dc:creator>
<dc:identifier>https://www.eetimes.com/document.asp?doc_id=1334087</dc:identifier>
</item>
<item>
<title>Clojure 1.10 release</title>
<link>https://clojure.org/news/2018/12/17/clojure110</link>
<guid isPermaLink="true" >https://clojure.org/news/2018/12/17/clojure110</guid>
<description>&lt;div class=&quot;paragraph&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Clojure 1.10 focuses on two major areas: improved error reporting and Java compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;14.646680942184&quot;&gt;
&lt;p&gt;Error reporting at the REPL now &lt;a href=&quot;https://clojure.org/reference/repl_and_main#_error_printing&quot;&gt;categorizes&lt;/a&gt; errors based on their phase of execution (read, macroexpand, compile, etc). Errors carry additional information about location and context as data, and present phase-specific error messages with better location reporting. This functionality is built into the clojure.main REPL, but the functionality is also available to other REPLs and tools with the ability to use and/or modify the data to produce better error messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;Clojure 1.10 now requires Java 8 or above and has been updated particularly for compatibility with Java 8 and Java 11. Changes included bytecode-related bug fixes, removed use of deprecated APIs, and updates related to the module system introduced in Java 9.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/changes.md#changes-to-clojure-in-version-110&quot;&gt;change log&lt;/a&gt; for a complete list of all fixes, enhancements, and new features in Clojure 1.10.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 17 Dec 2018 17:42:57 +0000</pubDate>
<dc:creator>finalfantasia</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://clojure.org/news/2018/12/17/clojure110</dc:identifier>
</item>
<item>
<title>Google’s Secret China Project “Effectively Ended” After Internal Confrontation</title>
<link>https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</link>
<guid isPermaLink="true" >https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</guid>
<description>&lt;div data-reactid=&quot;200&quot; readability=&quot;29.779208831647&quot;&gt;
&lt;p&gt;&lt;u&gt;Google has been&lt;/u&gt; forced to shut down a data analysis system it was using to develop a censored search engine for China after members of the company’s privacy team raised internal complaints that it had been kept secret from them, The Intercept has learned.&lt;/p&gt;
&lt;p&gt;The internal rift over the system has had massive ramifications, effectively ending work on the censored search engine, known as Dragonfly, according to two sources familiar with the plans. The incident represents a major blow to top Google executives, including CEO Sundar Pichai, who have over the last two years made the China project one of their main priorities.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;The dispute began in mid-August, when the The Intercept &lt;a href=&quot;https://theintercept.com/2018/08/08/google-censorship-china-blacklist/&quot;&gt;revealed&lt;/a&gt; that Google employees working on Dragonfly had been using a Beijing-based website to help develop blacklists for the censored search engine, which was designed to block out broad categories of information related to democracy, human rights, and peaceful protest, in accordance with strict rules on censorship in China that are enforced by the country’s authoritarian Communist Party government.&lt;/p&gt;

&lt;/div&gt;
&lt;div data-reactid=&quot;202&quot; readability=&quot;74.344305120167&quot;&gt;
&lt;p lang=&quot;en-US&quot;&gt;The Beijing-based website, 265.com, is a Chinese-language web directory service that claims to be “China’s most used homepage.” Google purchased the site in 2008 from Cai Wensheng, a billionaire Chinese entrepreneur. 265.com provides its Chinese visitors with news updates, information about financial markets, horoscopes, and advertisements for cheap flights and hotels. It also has a function that allows people to search for websites, images, and videos. However, search queries entered on 265.com are redirected to Baidu, the most popular search engine in China and Google’s main competitor in the country. As The Intercept &lt;a href=&quot;https://theintercept.com/2018/08/08/google-censorship-china-blacklist/&quot;&gt;reported&lt;/a&gt; in August, it appears that Google has used 265.com as a honeypot for market research, storing information about Chinese users’ searches before sending them along to Baidu.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;According to two Google sources, engineers working on Dragonfly obtained large datasets showing queries that Chinese people were entering into the 265.com search engine. At least one of the engineers obtained a key needed to access an “application programming interface,” or API, associated with 265.com, and used it to harvest search data from the site. Members of Google’s privacy team, however, were kept in the dark about the use of 265.com.&lt;/p&gt;

&lt;blockquote class=&quot;stylized pull-right&quot; data-shortcode-type=&quot;pullquote&quot; data-pull=&quot;right&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;Several groups of engineers have now been moved off of Dragonfly completely and told to shift their attention away from China.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;The engineers used the data they pulled from 265.com to learn about the kinds of things that people located in mainland China routinely search for in Mandarin. This helped them to build a prototype of Dragonfly. The engineers used the sample queries from 265.com, for instance, to review lists of websites Chinese people would see if they typed the same word or phrase into Google. They then used a&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;tool they called “BeaconTower” to check whether&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;any websites in the Google search results would be&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;blocked by&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;China’s internet censorship system, known as the&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;Great Firewall.&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;Through this process, the engineers compiled a list of thousands of banned websites, which they integrated into the Dragonfly search platform so that it would purge links to websites prohibited in China, such as those&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;of&lt;/span&gt; the online encyclopedia Wikipedia and British news broadcaster BBC.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;Under normal company protocol, analysis of people’s search queries is subject to tight constraints and should be reviewed by the company’s privacy staff, whose job is to safeguard user rights. But the privacy team only found out about the 265.com data access after The Intercept revealed it, and were “really pissed,” according to one Google source. Members of the privacy team confronted the executives responsible for managing Dragonfly. Following a series of discussions, two sources said, Google engineers were told that they were no longer permitted to continue using the 265.com data to help develop Dragonfly, which has since had severe consequences for the project.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;“The 265 data was integral to Dragonfly,” said one source. “Access to the data has been suspended now, which has stopped progress.”&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;In recent weeks, teams working on Dragonfly have been told to use different datasets for their work. They are no longer gathering search queries from mainland China and are instead now studying “global Chinese” queries that are entered into Google from people living in countries such as the United States and Malaysia; those queries are qualitatively different from searches originating from within China itself, making it virtually impossible for the Dragonfly team to hone the accuracy of results. Significantly, several groups of engineers have now been moved off of Dragonfly completely, and told to shift their attention away from China to instead work on projects related to India, Indonesia, Russia, the Middle East and Brazil.&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;Newsletter-shortcode Newsletter-shortcode-layout-full&quot; data-reactid=&quot;203&quot;&gt;
&lt;div class=&quot;Newsletter-shortcode-container&quot; data-reactid=&quot;205&quot;&gt;
&lt;h3 class=&quot;Newsletter-shortcode-headline&quot; data-reactid=&quot;206&quot;&gt;Join Our Newsletter&lt;/h3&gt;
&lt;h3 class=&quot;Newsletter-shortcode-subhead&quot; data-reactid=&quot;207&quot;&gt;Original reporting. Fearless journalism. Delivered to you.&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;Newsletter-shortcode-link-cta&quot; data-reactid=&quot;209&quot;&gt;I’m in&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div data-reactid=&quot;212&quot; readability=&quot;38.081902893575&quot;&gt;
&lt;p lang=&quot;en-US&quot;&gt;Records show that 265.com is still hosted on Google servers, but its physical address is listed under the name of the “Beijing Guxiang Information and Technology Co.,” which has an office space on the third floor of a tower building in northwest Beijing’s Haidian district. 265.com is operated as a Google subsidiary, but unlike most Google-owned websites — such as YouTube and Google.com — it is not blocked in China and can be freely accessed by people in the country using any standard internet browser.&lt;/p&gt;
&lt;p&gt;&lt;span lang=&quot;en-US&quot;&gt;The internal dispute at Google over the 265.com data access is not the first time important information related to Dragonfly has been withheld from the company’s privacy team. The Intercept&lt;/span&gt; &lt;a href=&quot;https://theintercept.com/2018/11/29/google-china-censored-search/&quot;&gt;reported&lt;/a&gt; &lt;span lang=&quot;en-US&quot;&gt;in November that privacy and security employees working on the project had been shut out of key meetings and felt that senior executives had sidelined them. Yonatan Zunger,&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;formerly&lt;/span&gt; a 14-year veteran of Google and one of the leading engineers at the company, &lt;span lang=&quot;en-US&quot;&gt;worked on Dragonfly for several months last year and said the project was shrouded in extreme secrecy and handled in a “highly unusual” way from the outset. Scott Beaumont, Google’s leader in China and a key architect of the Dragonfly project, “&lt;/span&gt;&lt;span lang=&quot;en-US&quot;&gt;did not feel that the security, privacy, and legal teams should be able to question his product decisions,”&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;according to Zunger,&lt;/span&gt; &lt;span lang=&quot;en-US&quot;&gt;“and maintained an openly adversarial relationship with them — quite outside the Google norm.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Last week, Pichai, Google’s CEO, appeared before Congress, where he &lt;a href=&quot;https://theintercept.com/2018/12/11/google-congressional-hearing/&quot;&gt;faced questions&lt;/a&gt; on Dragonfly. Pichai stated that “right now” there were no plans to launch the search engine, though refused to rule it out in the future. Google had originally &lt;a href=&quot;https://theintercept.com/2018/10/09/google-china-censored-search-engine/&quot;&gt;aimed&lt;/a&gt; to launch Dragonfly between January and April 2019. Leaks about the plan and the extraordinary backlash that ensued both &lt;a href=&quot;https://theintercept.com/2018/11/27/hundreds-of-google-employees-tell-bosses-to-cancel-censored-search-amid-worldwide-protests/&quot;&gt;internally&lt;/a&gt; and &lt;a href=&quot;https://theintercept.com/2018/12/10/rights-groups-pressure-google-on-china-censorship-ahead-of-congressional-hearing/&quot;&gt;externally&lt;/a&gt; appear to have forced company executives to shelve it at least in the short term, two sources familiar with the project said.&lt;/p&gt;
&lt;p lang=&quot;en-US&quot;&gt;Google did not respond to requests for comment.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 17 Dec 2018 17:35:31 +0000</pubDate>
<dc:creator>uptown</dc:creator>
<og:url>https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</og:url>
<og:description>Google reassigned several groups of engineers away from a planned censored search engine after a rift over its use of real internet queries in China for testing.</og:description>
<og:image>https://theintercept.imgix.net/wp-uploads/sites/1/2018/12/GettyImages-1040611142-1544738780-e1544738960291.jpg?auto=compress%2Cformat&amp;q=90&amp;fit=crop&amp;w=1200&amp;h=800</og:image>
<og:type>article</og:type>
<og:title>Google’s Secret China Project “Effectively Ended” After Internal Confrontation</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://theintercept.com/2018/12/17/google-china-censored-search-engine-2/</dc:identifier>
</item>
<item>
<title>Inventor May Have Cured Motion Sickness Without Drugs</title>
<link>https://www.defenseone.com/technology/2018/11/inventor-may-have-cured-motion-sickness-without-drugs-and-could-mean-lot-us-military/152960/</link>
<guid isPermaLink="true" >https://www.defenseone.com/technology/2018/11/inventor-may-have-cured-motion-sickness-without-drugs-and-could-mean-lot-us-military/152960/</guid>
<description>&lt;p&gt;&lt;span class=&quot;d1-article-subhead-inner-a&quot;&gt;&lt;span class=&quot;d1-article-subhead-inner-b&quot;&gt;&lt;span class=&quot;d1-article-subhead-inner-c&quot;&gt;One manufacturer of virtual-reality trainers has already begun including the devices in its simulators.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;div readability=&quot;149.25731095345&quot;&gt;
&lt;p&gt;&lt;strong&gt;An inventor may have discovered a non-&lt;/strong&gt;pharmaceutical cure for car sickness that could revolutionize the way people experience everything from travel to the newest virtual-reality headsets. That, in turn, could affect how the military trains, fights, and navigates.&lt;/p&gt;
&lt;p&gt;Just like civilians, troops get motion-sick. A 2009 study by the &lt;a href=&quot;https://www.researchgate.net/publication/235208813_Evaluation_of_Several_Common_Antimotion_Sickness_Medications_and_Recommendations_Concerning_Their_Potential_Usefulness_During_Special_Operations&quot;&gt;Naval Aerospace Medical Research Laboratory&lt;/a&gt; found that more than half of soldiers got sick while riding in Army vehicles. Roughly 25 percent of military personnel got sick on “moderate seas” and 70 percent on “rough seas.” In the air, as many as 50 percent of personnel get airsick; even 64 percent of parachutists reported episodes.&lt;/p&gt;
&lt;p&gt;To treat symptoms, troops typically take a drug called &lt;a href=&quot;https://www.rxlist.com/consumer_scopolamine/drugs-condition.htm&quot;&gt;scopolamine&lt;/a&gt;. It has serious side effects, most notably drowsiness, so soldiers often take it with an amphetamine that carries its own downsides and side effects. It’s like being on uppers and downers at once, which makes for a fatiguing Friday night, much less a war.&lt;/p&gt;
&lt;p&gt;The military’s problems with motion sickness will worsen considerably as more and more training is conducted in virtual reality.&lt;/p&gt;
&lt;div class=&quot;d1-article-left-rail-subscribe-container&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;d1-article-sidebar-subscribe-title&quot;&gt;&lt;span class=&quot;d1-article-sidebar-subscribe-title-text&quot;&gt;Subscribe&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;d1-article-sidebar-subscribe-msg&quot;&gt;&lt;em&gt;Receive daily email updates:&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;d1-article-sidebar-subscribe-msg&quot;&gt;Subscribe to the Defense One daily.&lt;/p&gt;
&lt;p class=&quot;d1-article-sidebar-subscribe-msg&quot;&gt;Be the first to receive updates.&lt;/p&gt;

&lt;/div&gt;
&lt;h3 class=&quot;wysiwyg&quot;&gt;Related: &lt;a href=&quot;https://www.defenseone.com/technology/2018/09/darpa-funded-work-may-help-troops-see-around-corners/151399/?oref=d1-related-article&quot;&gt;&lt;span class=&quot;caps&quot;&gt;DARPA&lt;/span&gt;-Funded Work May Help Troops See Around Corners&lt;/a&gt;&lt;/h3&gt;
&lt;h3 class=&quot;wysiwyg&quot;&gt;Related: &lt;a href=&quot;https://www.defenseone.com/technology/2018/09/spacex-well-consider-launching-space-weapons-if-asked/151328/?oref=d1-related-article&quot;&gt;SpaceX: We’ll Consider Launching Space Weapons If Asked&lt;/a&gt;&lt;/h3&gt;
&lt;h3 class=&quot;wysiwyg&quot;&gt;Related: &lt;a href=&quot;https://www.defenseone.com/technology/2018/09/retired-marine-four-star-patents-jet-killing-drone-boat/151327/?oref=d1-related-article&quot;&gt;Retired Marine Four-Star Patents Jet-Killing Drone Boat&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;“The availability of immersive learning environments like virtual-augmented-mixed reality afforded by commercial off-the-shelf technology fosters has the potential to create the paradigm shift necessary to deliver the most ready force ever known,” said Lt. Col. Matthew Strohmeyer, the 560th Flying Training Squadron commander. Yet &lt;span class=&quot;caps&quot;&gt;VR&lt;/span&gt; training, in particular, can make troops sick. “Though we have made great strides in understanding the true causes of air sickness, from a cellular physiology perspective, much is still to be learned, especially when it comes to cyber sickness.”&lt;/p&gt;
&lt;p&gt;The Air Force Research Lab is currently looking at the effects of motion sickness among a small group of “future instructor pilots” that are training with a new syllabus that uses virtual reality. The research brings in experts from the South Dakota School of Mines and Technology as well as physiologists and small businesses. “Our findings will further inform safety countermeasures to ensure aviators can meet the demand of any physiological threat that presents itself,” said Strohmeyer.&lt;/p&gt;
&lt;p&gt;The Air Force isn’t just looking to use &lt;span class=&quot;caps&quot;&gt;VR&lt;/span&gt; for pilots. They’ve &lt;a href=&quot;https://admin.govexec.com/media/vrmc-usaf_press_release_9-20-18_final_(1).pdf&quot;&gt;contracted&lt;/a&gt; with a Portland, Oregon-based company called &lt;a href=&quot;https://vrmotioncorp.com/about-us/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;VR&lt;/span&gt; Motion&lt;/a&gt; to train truck drivers. “What we’ve learned is that the current method for training hasn’t been updated for decades,” said Keith Maher, the company’s founder and &lt;span class=&quot;caps&quot;&gt;CEO&lt;/span&gt;. “Driving a large combat vehicle like a Humvee, or an up-armored Humvee on public roads, is actually counter to what they [the Humvees] are designed to do. On public roads, there will be pedestrians and small vehicles. The large blind spots that you have in a Humvee are something you need to train for…With our virtual reality technology we can recreate high-hazard situations whenever we want.”&lt;/p&gt;
&lt;p&gt;But as many gamers are today discovering, &lt;span class=&quot;caps&quot;&gt;VR&lt;/span&gt; can have big motion-sickness effects.&lt;/p&gt;
&lt;p&gt;“Historically, we’ve seen about a 20 to 30 percent discomfort level” with &lt;span class=&quot;caps&quot;&gt;VR&lt;/span&gt; training, Maher said. “That’s a big number for us if we want our product to go out and change the lives of millions of people.”&lt;/p&gt;
&lt;p&gt;Enter a young inventor named Samuel Owen, who has developed a prototype device called the &lt;a href=&quot;https://admin.govexec.com/media/otolith_pamphlet_.pdf&quot;&gt;OtoTech&lt;/a&gt;, from &lt;a href=&quot;https://otolithlabs.com/&quot;&gt;Otolith Labs&lt;/a&gt;. Worn on a headband behind the ear, it uses subtle vibrations to change the way the brain computes the fact that the body that it’s attached to is in motion. Early tests show it relieves motion sickness without the side effects of drugs, Owen said, though he admits the science is so young that it’s not clear just how.&lt;/p&gt;
&lt;p&gt;The vibrations emanating from the OtoTech gently target two of the four fibers that carry data about body motion to the brain via a system of inner ear sensors called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Vestibulocochlear_nerve&quot;&gt;vestibulocochlear nerve&lt;/a&gt;. “Two [of the four vestibulocochlear nerve fibers] go to the brain, two go to your reflexes,” Owen said. The trick is to affect the former and not the latter.&lt;/p&gt;
&lt;p&gt;“The working hypothesis is that [the vibration] causes a chaotic and noninformative stimulus to go to the brain. Somewhere, probably the cerebellum, there’s a filtering mechanism that filters out noninformative sensed information. It’s the reason you don’t notice the shirt on your back right now,” he said.&lt;/p&gt;
&lt;p&gt;In other words, while you remain consciously aware that you’re moving, the balance portion of your brain stops noticing the fact; the data has been drowned out in white noise from the device.&lt;/p&gt;
&lt;p&gt;So far, he says, initial testing shows that it works to prevent motion sickness without affecting balance, vision, alertness, or anything else it’s not supposed to.&lt;/p&gt;
&lt;p&gt;Researchers at Jaguar Land Rover are conducting double-blind trials with the device, moving toward publication, he says. Medical researchers at Coventry University in the &lt;span class=&quot;caps&quot;&gt;U.K.&lt;/span&gt; and the University of Miami are looking at therapeutic applications related to treating vertigo.&lt;/p&gt;
&lt;p&gt;Owen says that he has initially marketed the device to vertigo sufferers, and not yet to the military, or even the motion-sickness market.  But Maher has begun to incorporate Owen’s device into his &lt;span class=&quot;caps&quot;&gt;VR&lt;/span&gt; trainers.&lt;/p&gt;
&lt;p&gt;“We noticed that it would improve the overall virtual reality experience,” said Maher. “We’ve started to use it in our military devices. The initial reaction is, it looks unusual, but afterwards, people don’t event notice.”&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Related podcast: &lt;/strong&gt;&lt;/em&gt;&lt;img class=&quot;tombstone&quot; src=&quot;https://cdn.defenseone.com/a/defenseone/img/article-end.png&quot;/&gt;&lt;/p&gt;

&lt;/div&gt;</description>
<pubDate>Mon, 17 Dec 2018 17:33:22 +0000</pubDate>
<dc:creator>aresant</dc:creator>
<og:type>article</og:type>
<og:title>This Inventor May Have Cured Motion Sickness Without Drugs. And That Could Mean a Lot to the US Military</og:title>
<og:url>https://www.defenseone.com/technology/2018/11/inventor-may-have-cured-motion-sickness-without-drugs-and-could-mean-lot-us-military/152960/</og:url>
<og:description>One manufacturer of virtual-reality trainers has already begun including the devices in its simulators.</og:description>
<og:image>https://cdn.defenseone.com/media/img/upload/2018/11/20/IMG_3725_2/open-graph.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.defenseone.com/technology/2018/11/inventor-may-have-cured-motion-sickness-without-drugs-and-could-mean-lot-us-military/152960/</dc:identifier>
</item>
<item>
<title>Robinhood Checking Moved Fast and Broke</title>
<link>https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke</link>
<guid isPermaLink="true" >https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke&quot;&gt;https://www.bloomberg.com/opinion/articles/2018-12-17/robinhood-checking-moved-fast-and-broke&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18699995&quot;&gt;https://news.ycombinator.com/item?id=18699995&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 439&lt;/p&gt;
&lt;p&gt;# Comments: 242&lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2018 16:38:48 +0000</pubDate>
<dc:creator>kgwgk</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=29582620-029b-11e9-a4f0-9b25bd2cd0ed&amp;url=L29waW5pb24vYXJ0aWNsZXMvMjAxOC0xMi0xNy9yb2Jpbmhvb2QtY2hlY2tpbmctbW92ZWQtZmFzdC1hbmQtYnJva2U=</dc:identifier>
</item>
<item>
<title>Improvisational theater can reduce anxiety in teens who struggle socially</title>
<link>https://news.umich.edu/anxious-teens-gain-confidence-by-performing-off-script/</link>
<guid isPermaLink="true" >https://news.umich.edu/anxious-teens-gain-confidence-by-performing-off-script/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://news.umich.edu/wp-content/uploads/2018/12/anxious-teens-gain-confidence-by-performing-off-script-lead.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-41299 size-large&quot; src=&quot;https://news.umich.edu/wp-content/uploads/2018/12/anxious-teens-gain-confidence-by-performing-off-script-lead-1024x475.png&quot; alt=&quot;Concept illustration of teens performing without scripts. Illustration credit: Ilma Bilic&quot; width=&quot;1024&quot; height=&quot;475&quot; srcset=&quot;https://news.umich.edu/wp-content/uploads/2018/12/anxious-teens-gain-confidence-by-performing-off-script-lead-1024x475.png 1024w, https://news.umich.edu/wp-content/uploads/2018/12/anxious-teens-gain-confidence-by-performing-off-script-lead-300x139.png 300w, https://news.umich.edu/wp-content/uploads/2018/12/anxious-teens-gain-confidence-by-performing-off-script-lead-768x356.png 768w, https://news.umich.edu/wp-content/uploads/mc-image-cache/2018/12/anxious-teens-gain-confidence-by-performing-off-script-lead.png 1599w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ANN ARBOR—Improvisational theater training can reduce fearfulness and anxiety among teens struggling with social interactions, a new University of Michigan study suggests.&lt;/p&gt;
&lt;p&gt;School-based improv theater—performing without a script or preparation—may be effective for social phobias and anxiety disorders because it offers a low stigma, low cost and more accessible context for help in reducing these symptoms, say U-M researchers.&lt;/p&gt;
&lt;p&gt;Participating in improv can enhance a student’s well-being and reduce their anxiety, says lead author Peter Felsman, a graduate student in social work and psychology.&lt;/p&gt;
&lt;p&gt;“In addition, the mutual support that improvisation rewards builds trust, helping group members feel safer taking risks and more willing to make mistakes,” he said.&lt;/p&gt;
&lt;p&gt;Felsman and colleagues say this is the first study to examine whether improvisational training can be linked to reduced social anxiety in a school setting.&lt;/p&gt;
&lt;p&gt;For the study, nearly 270 Detroit high school and middle school students participated in a 10-week school improvisational theater program offered by The Detroit Creativity Project. The students completed questionnaires before and after the program, allowing them to assess statements such as, “I am comfortable performing for others” and “I am willing to make mistakes.”&lt;/p&gt;
&lt;p&gt;“These findings show that reductions in social anxiety were related to increased confidence in social skills, ability to figure out how to achieve goals and take action to do so (hope), creative ability and greater willingness to make mistakes,” said co-author Colleen Seifert, professor of psychology.&lt;/p&gt;
&lt;p&gt;While the findings contribute to research on therapies for mental health, the study’s authors note that the study sample focuses on participants from poorer, lower-performing schools where barriers to accessing standard treatments for social anxiety are greater than in better-resourced contexts.&lt;/p&gt;
&lt;p&gt;“For adolescents at wealthier, higher-performing schools with access to more traditional treatments, participating in improvisational theater training may predict different outcomes,” said co-author Joseph Himle, professor of social work and psychiatry. “Future research can examine this further.”&lt;/p&gt;
&lt;p&gt;The findings appear in the current issue of The Arts in Psychotherapy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More information:&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 17 Dec 2018 16:18:59 +0000</pubDate>
<dc:creator>EndXA</dc:creator>
<og:title>Anxious teens gain confidence by performing 'off script'</og:title>
<og:url>https://news.umich.edu/anxious-teens-gain-confidence-by-performing-off-script/</og:url>
<og:type>article</og:type>
<og:description>ANN ARBOR—Improvisational theater training can reduce fearfulness and anxiety among teens struggling with social interactions, a new University of Michigan study suggests. School-based improv theater—performing without a script or preparation—may be effective for social phobias and anxiety disord</og:description>
<og:image>https://news.umich.edu/wp-content/uploads/mc-image-cache/2018/12/anxious-teens-gain-confidence-by-performing-off-script-featured.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.umich.edu/anxious-teens-gain-confidence-by-performing-off-script/</dc:identifier>
</item>
<item>
<title>LLVM Relicensing Effort</title>
<link>http://llvm.org/foundation/relicensing/</link>
<guid isPermaLink="true" >http://llvm.org/foundation/relicensing/</guid>
<description>&lt;td valign=&quot;top&quot; align=&quot;center&quot;&gt;&lt;strong&gt;Site Map:&lt;/strong&gt;

&lt;br/&gt;&lt;strong&gt;Contact Us:&lt;/strong&gt;

&lt;br/&gt;&lt;strong&gt;Search this Site&lt;/strong&gt;

&lt;br/&gt;&lt;strong&gt;Useful Links&lt;/strong&gt;

&lt;br/&gt;&lt;strong&gt;News&lt;/strong&gt;

&lt;br/&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; readability=&quot;68.673511293635&quot;&gt;
&lt;p&gt;LLVM Relicensing Effort&lt;/p&gt;
&lt;p&gt;The LLVM relicensing effort aims to modernize the LLVM Licensing structure and developer policy. The high level goals of the relicensing effort are to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Encourage ongoing contributions to LLVM by preserving a low barrier to entry for contributors.&lt;/li&gt;
&lt;li&gt;Protect users of LLVM code by providing explicit patent protection in the license.&lt;/li&gt;
&lt;li&gt;Protect contributors to the LLVM project by explicitly scoping their patent contributions with this license.&lt;/li&gt;
&lt;li&gt;Eliminate the schism between runtime libraries and the rest of the compiler that makes it difficult to move code between them.&lt;/li&gt;
&lt;li&gt;Ensure that LLVM runtime libraries may be used by other open source and proprietary compilers.&lt;/li&gt;
&lt;/ul&gt;
This project involves sensitive legal issues and has been a multi-year effort. The primary public discussions have included these mailing list threads:

Beyond that, these topics have also been discussed by, and include contributions from, over a dozen lawyers and key LLVM contributors, and have been discussed informally with hundreds of people in the LLVM Developer Meeting BoFs. The effort has been overseen by Heather Meeker, who is the LLVM Foundation’s legal counsel. If you have questions or concerns about the content of this document, please email the &lt;a href=&quot;http://lists.llvm.org/cgi-bin/mailman/listinfo/llvm-dev&quot;&gt;llvm-dev mailing list&lt;/a&gt; or the &lt;a href=&quot;mailto:board@llvm.org&quot;&gt;LLVM Foundation Board&lt;/a&gt; depending on the sensitivity of your email.
&lt;p&gt;Status and Documents&lt;/p&gt;
&lt;p&gt;At this point, we have achieved community consensus on:&lt;/p&gt;
&lt;p&gt;We also have worked with our legal counsel to build several more boring pieces:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A new top-of-file header block that is minimal and includes the relevant and important information about the new license.&lt;/li&gt;
&lt;li&gt;An individual agreement to relicense and a form to collect information necessary for completing the relicensing.&lt;/li&gt;
&lt;li&gt;A corporate agreement to relicense that is available for companies to sign and has begun to be distributed to some of the known and/or large contributors.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We currently plan to install the new developer policy and add the new license in January 2019 after the LLVM 8.0 release has branched.&lt;/p&gt;
&lt;p&gt;Once that is done, we will still need need to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Enact a process for getting 100% of existing code relicensed with the above agreements or rewrite/remove the code.&lt;/li&gt;
&lt;li&gt;Drop the old license when the entire codebase is covered under the new license.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new file header will be:&lt;/p&gt;
&lt;pre&gt;
//===-- file/name - File description ----------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
&lt;/pre&gt;
&lt;p&gt;Some notable aspects of the new header:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;There is no explicit copyright notice -- these had little value and tended to not be maintained.&lt;/li&gt;
&lt;li&gt;It is designed to be as compact and minimalist as possible while having the critical information: that it is part of LLVM, what license it is under, where to find that license, and the machine-scrapable SPDX markup to help people doing license audits.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Individual Relicensing Agreement&lt;/p&gt;
&lt;p&gt;Individuals need to complete &lt;a href=&quot;https://goo.gl/forms/X4HiyYRcRHOnTSvC3&quot;&gt;a web form&lt;/a&gt; that we will use to drive the relicensing process. Part of that form will prompt them with a DocuSign agreement that they can sign online to cover anything they personally contributed. It will also collect any companies or academic institutions that may own right to some of their contributions so that we can cover them with the corporate agreement below.&lt;/p&gt;
&lt;p&gt;We do ask that individuals generally sign the individual agreement even if they think their contributions are probably covered by a corporate agreement. It will be fairly expensive for us to validate each case where an individual has not signed that *all* of their contributions are covered by a corporate agreement. The individual agreements let us not spend time and money on this by covering things either way. We think this is likely simpler and definitely less expensive. Still, we are leaving all of the options open.&lt;/p&gt;
&lt;p&gt;Feel free to send questions concerns about this to the &lt;a href=&quot;mailto:llvm-foundation@lists.llvm.org&quot;&gt;Foundation mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Corporate Relicensing Agreement&lt;/p&gt;
&lt;p&gt;Corporations may sign an agreement to relicense their contributions to LLVM under the new license &lt;a href=&quot;https://na3.docusign.net/Member/PowerFormSigning.aspx?PowerFormId=5a2bb38c-41c4-4ce0-a26e-52a7eb8ae51c&quot;&gt;with DocuSign&lt;/a&gt;. This is our preferred mechanism for collecting signatures. However, if your company requires it, you can print out &lt;a href=&quot;https://drive.google.com/open?id=1FiHyH__qqr6Ki2RXDEAcP7SEYFhsawNo&quot;&gt;this PDF of the agreement&lt;/a&gt;, sign it, scan it, and send the signed version as a PDF attachment to the &lt;a href=&quot;mailto:board@llvm.org&quot;&gt;LLVM Foundation Board&lt;/a&gt;. Further, if your company has a specific concern or issue with the agreement, please reach out to the &lt;a href=&quot;mailto:board@llvm.org&quot;&gt;the board&lt;/a&gt; and we'll try to help.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Companies that have Signed:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;AMD&lt;/li&gt;
&lt;li&gt;ARM&lt;/li&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Argonne National Laboratory&lt;/li&gt;
&lt;li&gt;Azul Systems, Inc.&lt;/li&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;IBM&lt;/li&gt;
&lt;li&gt;Julia Computing, Inc.&lt;/li&gt;
&lt;li&gt;Linaro&lt;/li&gt;
&lt;li&gt;Microsoft&lt;/li&gt;
&lt;li&gt;SAS Institute Inc.&lt;/li&gt;
&lt;li&gt;Sony&lt;/li&gt;
&lt;li&gt;UIUC&lt;/li&gt;
&lt;li&gt;UT-Battelle, LLC (operating Oak Ridge National Laboratory)&lt;/li&gt;
&lt;li&gt;Wave Computing, Inc. (owner of MIPS, etc.)&lt;/li&gt;
&lt;li&gt;lowRISC&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A non-exhaustive list of companies that have been contacted about relicensing is below. This is primarily intended to avoid duplicate work within these companies trying to get things signed and set up.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Access Softek&lt;/li&gt;
&lt;li&gt;Codeplay&lt;/li&gt;
&lt;li&gt;Ericsson&lt;/li&gt;
&lt;li&gt;Intel&lt;/li&gt;
&lt;li&gt;JetBrains&lt;/li&gt;
&lt;li&gt;Mozilla&lt;/li&gt;
&lt;li&gt;Nvidia&lt;/li&gt;
&lt;li&gt;Qualcomm&lt;/li&gt;
&lt;li&gt;Red Hat&lt;/li&gt;
&lt;li&gt;Samsung&lt;/li&gt;
&lt;li&gt;Synopsys&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Next Steps and Schedule Estimate&lt;/p&gt;
&lt;p&gt;Our goal is to openly and transparently communicate our process, including the expected next steps and a timeframe that can be used for planning. That said, we are dealing with a lot of unknowns, so while we believe the following schedule is achievable, this is not a guarantee:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;~January 2019: Coincident with the final release branch date for LLVM 8.0, we will install the new developer policy. To ensure that all contributors have agreed to the terms of the new developer policy, we will recind commit access from all contributors who are not covered by a corporate or individual agreement at that point. We will develop a policy for affected contributors to regain commit access.&lt;/li&gt;
&lt;/ul&gt;
When these steps are done, all new contributions will be under the new license structure, and we expect that a significant amount of prior contributions will be relicensed under the new structure. At that point, we will scope and define the process for chasing down the long tail of prior contributions that are not covered and resolve them on a case-by-case basis. &lt;/td&gt;
</description>
<pubDate>Mon, 17 Dec 2018 14:48:01 +0000</pubDate>
<dc:creator>frutiger</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://llvm.org/foundation/relicensing/</dc:identifier>
</item>
<item>
<title>Minikanren – An embedded DSL for logic programming</title>
<link>http://minikanren.org</link>
<guid isPermaLink="true" >http://minikanren.org</guid>
<description>&lt;a href=&quot;http://minikanren.org/#trs&quot;&gt;Book&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#onlineCourse&quot;&gt;Online Course&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#implementations&quot;&gt;Implementations&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#projects&quot;&gt;Projects&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#upcomingTalks&quot;&gt;Upcoming Talks&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#talks&quot;&gt;Talks&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#interviews&quot;&gt;Interviews&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#writtenTutorials&quot;&gt;Tutorials&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#theses&quot;&gt;Theses&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#papers&quot;&gt;Papers&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#screencasts&quot;&gt;Screencasts&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#hangouts&quot;&gt;Weekly Hangouts&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#podcasts&quot;&gt;Podcasts&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#blogs&quot;&gt;Blogs&lt;/a&gt; | &lt;a href=&quot;http://minikanren.org/#contact&quot;&gt;Contact&lt;/a&gt;&lt;h2&gt;What is miniKanren?&lt;/h2&gt;
miniKanren is an embedded Domain Specific Language for logic programming.&lt;p&gt;The core miniKanren language is very simple, with only three logical operators and one interface operator.&lt;br /&gt;The core language, using Scheme as the host language, is described in this &lt;a href=&quot;http://io.livecode.ch/learn/webyrd/webmk&quot;&gt;short, interactive tutorial&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;miniKanren has been implemented in a growing number of &lt;a href=&quot;http://minikanren.org/#implementations&quot;&gt;host languages&lt;/a&gt;, including Scheme, Racket, Clojure,&lt;br /&gt;Haskell, Python, JavaScript, Scala, Ruby, OCaml, and PHP, among many other languages.&lt;/p&gt;&lt;p&gt;miniKanren is designed to be easily modified and extended; extensions include Constraint Logic Programming,&lt;br /&gt;probabilistic logic programming, nominal logic programming, and tabling.&lt;/p&gt;&lt;p&gt;A detailed discussion of the differences between miniKanren and Prolog &lt;a href=&quot;http://minikanren.org/minikanren-and-prolog.html&quot;&gt;can be found here&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;The Book&lt;/h2&gt;
&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;, &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;, &lt;a href=&quot;http://okmij.org/ftp/&quot;&gt;Oleg Kiselyov&lt;/a&gt;, and &lt;a href=&quot;http://hemann.pl/&quot;&gt;Jason Hemann&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://mitpress.mit.edu/books/reasoned-schemer-second-edition&quot;&gt;&lt;em&gt;The Reasoned Schemer, Second Edition&lt;/em&gt;&lt;/a&gt;&lt;br /&gt;The MIT Press, Cambridge, MA, 2018&lt;p&gt;&lt;a href=&quot;https://github.com/TheReasonedSchemer2ndEd/CodeFromTheReasonedSchemer2ndEd&quot;&gt;source code from the book&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://mitpress.mit.edu/books/reasoned-schemer-second-edition&quot;&gt;&lt;img src=&quot;http://minikanren.org/trs2.png&quot; alt=&quot;The Reasoned Schemer, Second Edition front cover&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;miniKanren Online Uncourse (via Hangouts on Air)&lt;/h2&gt;
&lt;a href=&quot;http://webyrd.net&quot;&gt;Will Byrd&lt;/a&gt; organizes a weekly miniKanren uncourse, which meets Sundays at noon Pacific/3pm Eastern time. We show off miniKanren projects, talk about miniKanren implementation, and do live coding/live research. A link to each week's hangout is posted to the &lt;a href=&quot;https://groups.google.com/forum/#!forum/minikanren-uncourse&quot;&gt;miniKanren uncourse mailing list&lt;/a&gt;.&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLO4TbomOdn2cks2n5PvifialL8kQwt0aW&quot;&gt;Recordings of previous uncourse hangouts.&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Implementations&lt;/h2&gt;
&lt;h3&gt;Scheme&lt;/h3&gt;
&lt;a href=&quot;https://github.com/webyrd/miniKanren-with-symbolic-constraints&quot;&gt;miniKanren-with-symbolic-constraints&lt;/a&gt;&lt;br /&gt;miniKanren with extensions for symbolic constraint solving. Includes compatibility files for Racket and various Scheme implementations.&lt;p&gt;&lt;a href=&quot;https://github.com/jasonhemann/microKanren&quot;&gt;microKanren&lt;/a&gt;&lt;br /&gt;A minimal miniKanren implementation, as described in the &lt;a href=&quot;http://minikanren.org/#microKanrenPaper&quot;&gt;2013 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jasonhemann/microKanren-DLS-16&quot;&gt;microKanren w/simple complete search&lt;/a&gt;&lt;br /&gt;A modified/improved microKanren implementation, as described in the &lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=2989225.2989230&quot;&gt;2016 DLS paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/alphaKanren&quot;&gt;alphaKanren&lt;/a&gt;&lt;br /&gt;miniKanren extended with nominal logic programming, as described in the &lt;a href=&quot;http://minikanren.org/#alphaKanrenPaper&quot;&gt;2007 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/probKanren&quot;&gt;probKanren&lt;/a&gt;&lt;br /&gt;Research prototype of miniKanren with probabilistic inference.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/orchid-hybrid/microKanren-sagittarius&quot;&gt;microKanren-sagittarius&lt;/a&gt;&lt;br /&gt;miniKanren implementation for R7RS sagittarius scheme 0.6.0 based on (microKanren) with the &lt;code&gt;=/=&lt;/code&gt; operation added.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cgswords/rkanren&quot;&gt;rKanren&lt;/a&gt;&lt;br /&gt;miniKanren with guided search, as described in the &lt;a href=&quot;http://minikanren.org/#rKanrenPaper&quot;&gt;2013 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/donaldsonjw/bkanren&quot;&gt;bkanren&lt;/a&gt;&lt;br /&gt;miniKanren with constraint extensions that runs under &lt;a href=&quot;http://www-sop.inria.fr/mimosa/fp/Bigloo/&quot;&gt;Bigloo Scheme&lt;/a&gt;.&lt;br /&gt;Fork: &lt;a href=&quot;https://github.com/kourzanov/bkanren&quot;&gt;bkanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/slpKanren&quot;&gt;slpKanren&lt;/a&gt;&lt;br /&gt;Stochastic Logic Programs (SLP) style probabilistic logic programming in miniKanren. (Deprecated--please see &lt;a href=&quot;https://github.com/webyrd/probKanren&quot;&gt;probKanren&lt;/a&gt; instead.)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://okmij.org/ftp/Scheme/sokuza-kanren.scm&quot;&gt;sokuza-kanren&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://okmij.org/ftp/&quot;&gt;Oleg Kiselyov&lt;/a&gt;'s minimal implementation of logic programming.
&lt;/p&gt;&lt;h3&gt;Racket&lt;/h3&gt;
&lt;a href=&quot;https://github.com/webyrd/miniKanren-with-symbolic-constraints&quot;&gt;miniKanren-with-symbolic-constraints&lt;/a&gt;&lt;br /&gt;miniKanren with extensions for symbolic constraint solving. Includes compatibility files for Racket and various Scheme implementations.&lt;p&gt;&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;cKanren&lt;/a&gt;&lt;br /&gt;miniKanren extended with Constraint Logic Programming (CLP); an improved version of the system described in the &lt;a href=&quot;http://minikanren.org/#cKanrenPaper&quot;&gt;2011 Scheme Workshop paper&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/miniKanren/Racket-miniKanren&quot;&gt;Racket-miniKanren&lt;/a&gt;&lt;br /&gt;vanilla miniKanren Racket port&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/niitsuma/Racket-miniKanren/tree/recursive&quot;&gt;recursive miniKanren&lt;/a&gt;&lt;br /&gt;recursive miniKanren implementation in Racket.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zaoqi/zKanren&quot;&gt;zKanren&lt;/a&gt;&lt;br /&gt;cKanren with fair conjunction
&lt;/p&gt;&lt;h3&gt;Clojure&lt;/h3&gt;
&lt;a href=&quot;https://github.com/clojure/core.logic&quot;&gt;core.logic&lt;/a&gt;&lt;br /&gt;(&lt;a href=&quot;https://rawgithub.com/dedeibel/clojure-core-logic-cheatsheets/master/out/cheatsheet-use-title-attribute-no-cdocs-summary.html&quot;&gt;core.logic cheatsheet&lt;/a&gt;, courtesy of &lt;a href=&quot;http://myminutes.wordpress.com/2013/07/17/clojure-core-logic-cheatsheets/&quot;&gt;Benjamin Peter&lt;/a&gt;)&lt;br /&gt;A literate Clojure implementation of microKanren.&lt;br /&gt;&lt;a href=&quot;http://mullr.github.io/micrologic/literate.html&quot;&gt;Annotated source code.&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/halgari/async-mu-kanren&quot;&gt;async-mu-kanren&lt;/a&gt;&lt;br /&gt;Proof-of-concept implementation of muKanren using CSP (core.async)&lt;/p&gt;&lt;h3&gt;Assorted Languages&lt;/h3&gt;
&lt;a href=&quot;https://github.com/bodil/microkanrens&quot;&gt;Implementations of microKanren in assorted languages&lt;/a&gt;
&lt;h3&gt;C#&lt;/h3&gt;
&lt;a href=&quot;https://github.com/wallymathieu/csharp_ukanren&quot;&gt;csharp_ukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/naasking/uKanren.NET&quot;&gt;uKanren.NET&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;CoffeeScript&lt;/h3&gt;
&lt;a href=&quot;https://github.com/fogus/friebyrd&quot;&gt;Friebyrd&lt;/a&gt;
&lt;h3&gt;Common Lisp&lt;/h3&gt;
&lt;a href=&quot;https://common-lisp.net/project/cl-kanren-trs/&quot;&gt;cl-kanren-trs&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/deliciousrobots/kanren-fset&quot;&gt;Kanren-Fset&lt;/a&gt; (Fset collection library support for cl-kanren-trs)
&lt;/p&gt;&lt;h3&gt;Dylan&lt;/h3&gt;
&lt;a href=&quot;https://github.com/tca/miniKanren-Dylan&quot;&gt;miniKanren-Dylan&lt;/a&gt;
&lt;h3&gt;Elixir&lt;/h3&gt;
&lt;a href=&quot;https://github.com/lyons/ExKanren&quot;&gt;ExKanren&lt;/a&gt;
&lt;h3&gt;Elm&lt;/h3&gt;
&lt;a href=&quot;https://github.com/ndr-qef/elm-microKanren&quot;&gt;elm-microKanren&lt;/a&gt;
&lt;h3&gt;Emacs Lisp&lt;/h3&gt;
&lt;a href=&quot;https://github.com/nickdrozd/reazon&quot;&gt;Reazon&lt;/a&gt;
&lt;h3&gt;Erlang&lt;/h3&gt;
&lt;a href=&quot;https://github.com/zkessin/erlKanren&quot;&gt;erlKanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bodil/lolkanren/blob/master/kanren.erl&quot;&gt;lolkanren_erlang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/voila/mukanren&quot;&gt;mukanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Extempore&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jasonhemann/microKanren-extempore&quot;&gt;mini-over-micro-extempore&lt;/a&gt;
&lt;h3&gt;F#&lt;/h3&gt;
&lt;a href=&quot;https://github.com/palladin/logic&quot;&gt;logic&lt;/a&gt;&lt;br /&gt;A logic programming library for F#&lt;p&gt;&lt;a href=&quot;https://github.com/kurtschelfthout/MiniKanren&quot;&gt;MiniKanren&lt;/a&gt;&lt;br /&gt;An attempted implementation of MiniKanren in F#.
&lt;/p&gt;&lt;h3&gt;Go&lt;/h3&gt;
&lt;a href=&quot;https://github.com/hiredman/gologic&quot;&gt;gologic&lt;/a&gt;
&lt;h3&gt;Groovy&lt;/h3&gt;
&lt;a href=&quot;https://github.com/timyates/groovy-logic&quot;&gt;groovy-logic&lt;/a&gt;
&lt;h3&gt;Haskell&lt;/h3&gt;
&lt;a href=&quot;https://github.com/rntz/ukanren&quot;&gt;ukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/acfoltzer/Molog&quot;&gt;Molog&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JaimieMurdock/HK&quot;&gt;HaskellKanren (HK)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jvranish/MiniKanrenT&quot;&gt;MiniKanrenT&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Oregu/featherweight&quot;&gt;featherweight&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sergv/hkanren&quot;&gt;HKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/jozefg/ds-kanren&quot;&gt;DS-Kanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/msullivan/4223fd47991acbe045ec#file-microkanren-hs&quot;&gt;MicroKanren.hs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/rntz/ukanren&quot;&gt;ukanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/seantalts/hasktrip/blob/master/doc/MicroKanren.md&quot;&gt;MicroKanren.lhs&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Hy&lt;/h3&gt;
&lt;a href=&quot;https://github.com/mudphone/Hywaii&quot;&gt;Hywaii&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/algernon/adderall&quot;&gt;Adderall&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Java&lt;/h3&gt;
&lt;a href=&quot;https://github.com/nd/mk.java&quot;&gt;mk.java&lt;/a&gt;&lt;br /&gt;microKanren in Java.&lt;p&gt;&lt;a href=&quot;https://github.com/heidisu/java8kanren&quot;&gt;java8kanren&lt;/a&gt;&lt;br /&gt;miniKanren in Java.
&lt;/p&gt;&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;a href=&quot;http://tca.github.io/veneer/editor.html&quot;&gt;veneer&lt;/a&gt;&lt;br /&gt;Browser based miniKanren editor and REPL, with constraints.&lt;br /&gt;&lt;a href=&quot;https://github.com/tca/veneer&quot;&gt;GitHub repo&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/asolove/microScopeKanren&quot;&gt;microScopeKanren&lt;/a&gt;&lt;br /&gt;A JavaScript implementation of microKanren with a focus on inspecting programs as they run.&lt;br /&gt;&lt;a href=&quot;http://www.adamsolove.com/microScopeKanren/&quot;&gt;Example, vizualizing &lt;code&gt;appendo&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://functorial.com/mu-kanren/&quot;&gt;mu-kanren&lt;/a&gt;&lt;br /&gt;A step-by-step MicroKanren evaluator.&lt;br /&gt;&lt;a href=&quot;https://github.com/functorial/mu-kanren&quot;&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/joshcox/microJSKanren&quot;&gt;microJSKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bodil/lolkanren&quot;&gt;lolkanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/stanistan/jolic&quot;&gt;jolic&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/zaach/ukanren.js&quot;&gt;uKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/willkurt/microKanren.js&quot;&gt;microKanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cduret/mk.js&quot;&gt;mk.js&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/buzzdecafe/rlg&quot;&gt;rlg&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Lisp Flavored Erlang&lt;/h3&gt;
&lt;a href=&quot;https://github.com/pzel/mkr&quot;&gt;mkr&lt;/a&gt;
&lt;h3&gt;Lua&lt;/h3&gt;
&lt;a href=&quot;https://github.com/silentbicycle/lua-ukanren&quot;&gt;lua-ukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/handsomecheung/miniKanren.lua&quot;&gt;miniKanren.lua&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Mímir experimental rules engine&lt;/h3&gt;
&lt;a href=&quot;https://github.com/hraberg/mimir/blob/master/src/mimir/mk.clj&quot;&gt;mímirKanren&lt;/a&gt;
&lt;h3&gt;miniKanren&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jasonhemann/micro-in-mini&quot;&gt;micro-in-mini&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jpt4/muko&quot;&gt;muko&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;ML&lt;/h3&gt;
&lt;a href=&quot;https://github.com/chrisamaphone/ml-mukanren&quot;&gt;ml-mukanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jozefg/sml-kanren&quot;&gt;sml-kanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Moxie&lt;/h3&gt;
&lt;a href=&quot;https://github.com/rntz/moxy/blob/master/kanren.mox&quot;&gt;kanren.mox&lt;/a&gt;
&lt;h3&gt;Nu&lt;/h3&gt;
&lt;a href=&quot;https://github.com/finnsson/minikanren-nu&quot;&gt;minikanren-nu&lt;/a&gt;
&lt;h3&gt;OCaml&lt;/h3&gt;
&lt;a href=&quot;https://github.com/dboulytchev/OCanren&quot;&gt;OCanren&lt;/a&gt;&lt;br /&gt;Statically typed embedding of miniKanren into Objective Caml.&lt;p&gt;&lt;a href=&quot;https://github.com/lightyang/minikanren-ocaml&quot;&gt;minikanren-ocaml&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;PHP&lt;/h3&gt;
&lt;a href=&quot;https://github.com/igorw/reasoned-php&quot;&gt;reasoned-php&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mudge/php-microkanren&quot;&gt;php-microKanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Prolog&lt;/h3&gt;
&lt;a href=&quot;https://github.com/mndrix/microkanren-prolog&quot;&gt;microkanren-prolog&lt;/a&gt;&lt;br /&gt;A Prolog implementation of microKanren.
&lt;h3&gt;Python&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jtauber/pykanren&quot;&gt;pykanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/darius/pythological&quot;&gt;pythological&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/logpy/logpy&quot;&gt;LogPy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/cheery/d89bfb4c8d6c7a3eb908&quot;&gt;microkanren.py&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Pure&lt;/h3&gt;
&lt;a href=&quot;https://github.com/bodil/microkanrens/blob/master/mk.pure&quot;&gt;pure&lt;/a&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;a href=&quot;https://github.com/spariev/mini_kanren&quot;&gt;mini_kanren&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jsl/ruby_ukanren&quot;&gt;micro_kanren&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://scottdial.com/projects/minikanren.rb&quot;&gt;MiniKanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Rust&lt;/h3&gt;
&lt;a href=&quot;https://github.com/wartman4404/rust-kanren&quot;&gt;rust-kanren&lt;/a&gt;
&lt;h3&gt;Scala&lt;/h3&gt;
&lt;a href=&quot;https://github.com/namin/scalogno&quot;&gt;scalogno&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/hircus/minikanren-scala&quot;&gt;minikanren-scala&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/clayrat/kanren&quot;&gt;kanren (Sokuza-kanren in Scala)&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Shen&lt;/h3&gt;
&lt;a href=&quot;https://github.com/jasonhemann/microKanren-shen&quot;&gt;microKanren-shen&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mthom/shen-minikanren&quot;&gt;shen-minikanren&lt;/a&gt;
&lt;/p&gt;&lt;h3&gt;Smalltalk&lt;/h3&gt;
&lt;a href=&quot;https://github.com/adolfopa/microkanren-pharo&quot;&gt;microkanren-pharo&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://smalltalkhub.com/#!/~adolfopa/MicroKanren&quot;&gt;Smalltalk Hub link to microkanren-pharo&lt;/a&gt;&lt;h2&gt;Projects using miniKanren or core.logic&lt;/h2&gt;
&lt;h3&gt;miniKanren&lt;/h3&gt;
&lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;Barliman&lt;/a&gt;&lt;br /&gt;Barliman is a prototype &quot;smart editor&quot; that performs real-time program synthesis to try to make the programmer's life a little easier.&lt;p&gt;&lt;a href=&quot;https://github.com/orchid-hybrid/minimips&quot;&gt;minimips&lt;/a&gt;&lt;br /&gt;minikanren mips assembler/disassembler.
&lt;/p&gt;&lt;h3&gt;core.logic&lt;/h3&gt;
&lt;a href=&quot;https://github.com/owickstrom/smug&quot;&gt;SMUG&lt;/a&gt;&lt;br /&gt;The Sheet Music Generator.&lt;br /&gt;&lt;a href=&quot;https://wickstrom.tech/programming/2016/08/07/generating-sight-reading-exercises-using-constraint-logic-programming-in-clojure-part-1.html&quot;&gt;blog post&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/clojure-numerics/expresso&quot;&gt;expresso&lt;/a&gt;&lt;br /&gt;A clojure library for symbolic manipulation of Algebraic Expressions.&lt;br /&gt;&lt;a href=&quot;https://github.com/mschuene/expresso-tutorial&quot;&gt;tutorial&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://kimavcrp.blogspot.com/2013/09/finished-gsoc-project-expresso.html&quot;&gt;blog post&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/semperos/webdriver-logic&quot;&gt;webdriver-logic&lt;/a&gt;&lt;br /&gt;Logic programming API for testing web applications using clj-webdriver.&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=09zlcS49zL0&quot;&gt;Clojure/conj 2012 talk&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cderoove/damp.ekeko/&quot;&gt;damp.ekeko&lt;/a&gt;&lt;br /&gt;Ekeko enables querying and manipulating an Eclipse workspace using applicative logic programs.&lt;br /&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!topic/clojure/xZj3n8zsKdw&quot;&gt;anouncement&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=5wvVFQa1hVU&quot;&gt;screencast&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ReinoutStevens/damp.qwal&quot;&gt;damp.qwal&lt;/a&gt;&lt;br /&gt;QWAL is a path expression library to allow querying graphlike structures using core.logic in Clojure.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ReinoutStevens/damp.qwalkeko&quot;&gt;damp.qwalkeko&lt;/a&gt;&lt;br /&gt;Scrape and reason over Java projects stored on git.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/marick/peano&quot;&gt;peano&lt;/a&gt;&lt;br /&gt;Using logic programming (Clojure's core.logic) for test data manipulation and generation.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jonase/kibit/&quot;&gt;kibit&lt;/a&gt;&lt;br /&gt;kibit is a static code analyzer for Clojure which uses core.logic to search for patterns of code for which there might exist a more idiomatic function or macro.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/tgk/parsing-packet-with-logic&quot;&gt;parsing-packet-with-logic&lt;/a&gt;&lt;br /&gt;A small experiment in parsing packets in a style similar to Erlang's &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; using core.logic.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bloat/maze.logic&quot;&gt;maze.logic&lt;/a&gt;&lt;br /&gt;Solving mazes using core.logic.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gga/janus&quot;&gt;Janus: Consumer-driven Contracts and Mocks&lt;/a&gt;&lt;br /&gt;Consumer-driven contracts using core.logic.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/aredington/monotony&quot;&gt;Monotony&lt;/a&gt;&lt;br /&gt;Monotony is a solution to the problem of how to schedule things in a way that humans find intuitive.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ReinoutStevens/damp.qwal&quot;&gt;QWAL&lt;/a&gt;&lt;br /&gt;QWAL is a path expression library to allow querying graphlike structures using core.logic in Clojure.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jgralab/funnyqt&quot;&gt;FunnyQT&lt;/a&gt;&lt;br /&gt;FunnyQT is a model querying and transformation library.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/timowest/symbol&quot;&gt;symbol&lt;/a&gt;&lt;br /&gt;symbol is a compiler of a subset of Clojure syntax to C++.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dgrnbrg/guzheng&quot;&gt;guzheng&lt;/a&gt;&lt;br /&gt;guzheng is a library for doing branch coverage analysis of Clojure code.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dmikulic/adventure-in-core-logic&quot;&gt;Adventure in Clojure core.logic&lt;/a&gt;&lt;br /&gt;Text adventure game in core.logic.&lt;/p&gt;&lt;p&gt;The core.logic &lt;a href=&quot;https://github.com/clojure/core.logic/wiki/Projects-using-core.logic&quot;&gt;wiki&lt;/a&gt; also has links to projects using core.logic.&lt;/p&gt;&lt;h2&gt;Upcoming Talks&lt;/h2&gt;
William E. Byrd (joint work with Michael Ballantyne, Gregory Rosenblatt, and Matthew Might)&lt;br /&gt;&lt;a href=&quot;http://icfp17.sigplan.org/event/icfp-2017-papers-functional-pearl-a-unified-approach-to-solving-seven-programming-problems&quot;&gt;A Unified Approach to Solving Seven Programming Problems (Functional Pearl)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://icfp17.sigplan.org/&quot;&gt;International Conference on Functional Programming (ICFP)&lt;/a&gt;, Oxford, England, 4 September 2017.&lt;br /&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=3110252&amp;amp;CFID=976617079&quot;&gt;paper&lt;/a&gt; | &lt;a href=&quot;http://io.livecode.ch/learn/namin/icfp2017-artifact-auas7pp&quot;&gt;interactive paper&lt;/a&gt; | &lt;a href=&quot;https://github.com/gregr/icfp2017-artifact-auas7pp&quot;&gt;downloadable artifact&lt;/a&gt; | &lt;a href=&quot;https://github.com/webyrd/Barliman&quot;&gt;Barliman&lt;/a&gt;&lt;h2&gt;Recorded Talks&lt;/h2&gt;
&lt;h3&gt;miniKanren&lt;/h3&gt;
Tom Stuart&lt;br /&gt;&lt;a href=&quot;https://skillsmatter.com/skillscasts/6523-hello-declarative-world#video&quot;&gt;Hello, declarative world&lt;/a&gt;&lt;br /&gt;LRUG August 2015 Meetup, August 8, 2015.&lt;p&gt;Dan Friedman and Jason Hemann&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=b9C3r3dQnNY&quot;&gt;How to be a good host: miniKanren as a case study&lt;/a&gt;&lt;br /&gt;Curry On, Prague, Czech Republic, 7 July 2015.&lt;/p&gt;&lt;p&gt;William Byrd&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eQL48qYDwp4&quot;&gt;The Promise of Relational Programming&lt;/a&gt;&lt;br /&gt;PolyConf 15, Pozna&amp;amp;nacute;, Poland, 2 July 2015.&lt;/p&gt;&lt;p&gt;Bodil Stokke&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=2e8VFSSNORg&quot;&gt;μKanren: Running the Little Things Backwards&lt;/a&gt;&lt;br /&gt;EuroClojure, Barcelona, Spain, 25 June 2015.&lt;/p&gt;&lt;p&gt;Daniel Brady&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=UxeNsjP74jU#t=40s&quot;&gt;Little Logic Languages&lt;/a&gt;&lt;br /&gt;Scheme Workshop, Washington, D.C., 19 November 2014.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://hemann.pl/&quot;&gt;Jason Hemann&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Dan Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RG9fBbQrVOM&quot;&gt;Write the Other Half of Your Program: From Functional to Logic Programming&lt;/a&gt;&lt;br /&gt;Strange Loop, St. Louis, September 18, 2014.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;Relational Programming in miniKanren, &lt;a href=&quot;https://www.youtube.com/watch?v=zHov3fKYqBA&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=nFE2E91VDAk&quot;&gt;Part 2&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.meetup.com/Lambda-Lounge-Utah/events/164368252/&quot;&gt;Logic Night&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.meetup.com/Lambda-Lounge-Utah/&quot;&gt;Lambda Lounge Utah&lt;/a&gt;, Sandy, UT, May 13, 2014.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/chomsky-hierarchy&quot;&gt;A Relational Exploration of the Chomsky Hierarchy&lt;/a&gt;&lt;br /&gt;Strange Loop, St. Louis, September, 2013.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://vimeo.com/user18356272/review/66548859/4f724d6341&quot;&gt;Fun with Relational Interpreters in miniKanren&lt;/a&gt;&lt;br /&gt;flatmap 2013, Oslo, Norway, May 14, 2013 (keynote).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=fHK-uS-Iedc&quot;&gt;miniKanren Philosophy&lt;/a&gt;&lt;br /&gt;Clojure/conj 2012, Raleigh, NC, November 16, 2012.&lt;br /&gt;(Beware the pink tint!)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/miniKanren&quot;&gt;Relational Programming in miniKanren&lt;/a&gt;&lt;br /&gt;Strange Loop 2012, St. Louis, MO, September 24, 2012&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/quines&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5Q9x16uIsKA&quot;&gt;miniKanren &quot;untalk&quot;&lt;/a&gt;&lt;br /&gt;Clojure/conj 2011, Raleigh, NC, November 10, 2011.
&lt;/p&gt;&lt;h3&gt;core.logic&lt;/h3&gt;
&lt;a href=&quot;http://namin.github.com/&quot;&gt;Nada Amin&lt;/a&gt; and &lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=7kPMFkNm2dw&quot;&gt;From Greek to Clojure&lt;/a&gt;&lt;br /&gt;Clojure/conj, Alexandria, VA, November 14, 2013&lt;br /&gt;&lt;a href=&quot;https://github.com/namin/grk2clj&quot;&gt;source code&lt;/a&gt; | &lt;a href=&quot;http://lampwww.epfl.ch/%7Eamin/clj/grk.pdf&quot;&gt;slides&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;http://www.red-bean.com/~craig/hacking/&quot;&gt;Craig Brozefsky&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Core-logic-SQL-ORM&quot;&gt;Core.logic and SQL Killed my ORM&lt;/a&gt;&lt;br /&gt;Clojure/West 2013, Portland, OR, March 19th, 2013.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://swannodette.github.io&quot;&gt;David Nolen&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://skillsmatter.com/podcast/scala/the-refined-clojurist&quot;&gt;The Refined Clojurist&lt;/a&gt;&lt;br /&gt;Clojure Exchange 2012, London, December 6, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/semperos&quot;&gt;Daniel Gregoire&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=09zlcS49zL0&quot;&gt;Web Testing with Logic Programming&lt;/a&gt;&lt;br /&gt;Clojure/conj 2012, Raleigh, NC, November 17, 2012.&lt;br /&gt;&lt;a href=&quot;https://github.com/semperos/webdriver-logic&quot;&gt;webdriver-logic project&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/miner&quot;&gt;Steve Miner&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=y6WKr9j76kw&quot;&gt;Challenges for Logic Programming&lt;/a&gt;&lt;br /&gt;Clojure/conj 2012, Raleigh, NC, November 17, 2012.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ejackson&quot;&gt;Edmund Jackson&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Introduction-Logic-Programming&quot;&gt;An Introduction to Logic Programming on the JVM with core.logic (Clojure)&lt;/a&gt;&lt;br /&gt;FP Days 2012, Cambridge, October 25, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://swannodette.github.io&quot;&gt;David Nolen&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=A7de6pC-tnU&quot;&gt;core.logic: A tutorial reconstruction (&quot;unsession&quot;)&lt;/a&gt;&lt;br /&gt;Strange Loop 2012, St. Louis, MO, September 24, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://boss-level.com&quot;&gt;Edmund Jackson&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://vimeo.com/45128721&quot;&gt;core.logic.intro&lt;/a&gt;&lt;br /&gt;EuroClojure 2012, London, May 24, 2012&lt;br /&gt;&lt;a href=&quot;http://github.com/ejackson/EuroClojure-2012-Talk&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://objectcommando.com&quot;&gt;Ryan Senior&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/core-logic&quot;&gt;Practical core.logic&lt;/a&gt;&lt;br /&gt;Clojure/West 2012, San Jose, March 17, 2012&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/frenchy64&quot;&gt;Ambrose Bonnaire-Sergeant&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=irjP8BO1B8Y&quot;&gt;Introduction to Logic Programming with Clojure&lt;/a&gt;&lt;br /&gt;Clojure/conj 2011, Raleigh, NC, November 10, 2011.
&lt;/p&gt;&lt;h3&gt;ClojureScript &amp;amp; core.logic&lt;/h3&gt;
&lt;a href=&quot;http://adamsolove.com/&quot;&gt;Adam Solove&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=72sWgwaAoyk&quot;&gt;Constraint programming in the browser&lt;/a&gt;&lt;br /&gt;(Talk focuses on the Cassowary constraint solver for GUI layout, but also discusses core.logic.)&lt;br /&gt;JSConf US, Amelia Island, FL, May 31, 2013
&lt;h3&gt;Clojure/West miniKanren confo, Portland, OR, March 19, 2013 (associated with &lt;a href=&quot;http://clojurewest.org/&quot;&gt;Clojure/West&lt;/a&gt;)&lt;/h3&gt;
&lt;a href=&quot;https://github.com/werg&quot;&gt;Gabriel Pickard&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://lanyrd.com/2013/clojurewest/sccgmz/&quot;&gt;Logic programming in the wild&lt;/a&gt; (video not posted yet)&lt;p&gt;&lt;a href=&quot;http://objectcommando.com&quot;&gt;Ryan Senior&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/CLP-core-logic&quot;&gt;Intro to CLP with core.logic&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.acfoltzer.net/&quot;&gt;Adam Foltzer&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/molog&quot;&gt;Molog: Typed Functional Logic Programming in Haskell&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/acfoltzer/Molog&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://swannodette.github.io&quot;&gt;David Nolen&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/presentations/architecture-core-logic&quot;&gt;The Architecture of core.logic&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://namin.github.com/&quot;&gt;Nada Amin&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://lanyrd.com/2013/clojurewest/sccgpf/&quot;&gt;core.logic.nominal&lt;/a&gt; (video not posted yet)&lt;br /&gt;&lt;a href=&quot;https://github.com/namin/minikanren-confo&quot;&gt;source code&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt; and &lt;a href=&quot;http://www.cs.indiana.edu/~dfried/&quot;&gt;Daniel P. Friedman&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://lanyrd.com/2013/clojurewest/sccgpg/&quot;&gt;The Unreasonable Schemers&lt;/a&gt; (video not posted yet)&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/relational-cesk&quot;&gt;source code&lt;/a&gt; 
&lt;/p&gt;&lt;h2&gt;Interviews&lt;/h2&gt;
&lt;a href=&quot;http://webyrd.net&quot;&gt;William E. Byrd&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.infoq.com/interviews/byrd-relational-programming-minikanren&quot;&gt;William Byrd on Logic and Relational Programming, miniKanren&lt;/a&gt;&lt;br /&gt;Recorded by &lt;a href=&quot;http://www.infoq.com/&quot;&gt;InfoQ&lt;/a&gt; at Code Mesh 2013, London, England, December, 2013 
&lt;h2&gt;Written Tutorials&lt;/h2&gt;
&lt;h3&gt;core.logic&lt;/h3&gt;
&lt;a href=&quot;https://github.com/frenchy64/Logic-Starter/wiki&quot;&gt;Introduction to Logic Programming with Clojure&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer&quot;&gt;A Core.logic Primer&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.intensivesystems.net/tutorials/logic_prog.html&quot;&gt;Logic Programming for the Social Web&lt;/a&gt; 
&lt;/p&gt;&lt;h2&gt;Theses&lt;/h2&gt;
&lt;h3&gt;PhD&lt;/h3&gt;
William E. Byrd&lt;br /&gt;&lt;a href=&quot;http://gradworks.umi.com/33/80/3380156.html&quot;&gt;Relational Programming in miniKanren: Techniques, Applications, and Implementations.&lt;/a&gt;&lt;br /&gt;Indiana University, Bloomington, IN,&lt;br /&gt;September 30, 2009.&lt;p&gt;&lt;a href=&quot;https://github.com/webyrd/dissertation-single-spaced&quot;&gt;Easier to read, single-spaced, re-typeset version of Will's dissertation&lt;/a&gt;, released under Creative Commons Attribution 4.0 International (CC BY 4.0) license.
&lt;/p&gt;&lt;h3&gt;Masters&lt;/h3&gt;
Wheeler, Kaylen FJ&lt;br /&gt;&lt;a href=&quot;http://ir.lib.uwo.ca/etd/1279&quot;&gt;Representing Game Dialogue as Expressions in First-Order Logic&lt;/a&gt;&lt;br /&gt;University of Western Ontario, London, Ontario, Canada, 2013.
&lt;h3&gt;Undergraduate&lt;/h3&gt;
Ramana Kumar&lt;br /&gt;&lt;a href=&quot;http://cam.xrchz.net/ramkumar/thesis.pdf&quot;&gt;Mechanising Aspects of miniKanren in HOL&lt;/a&gt;&lt;br /&gt;Australian National University, Canberra, Australian Capital Territory, Australia,&lt;br /&gt;May 2010. (Undergraduate Honors Thesis)&lt;p&gt;Emily Fox&lt;br /&gt;&lt;a href=&quot;http://minikanren.org/fox_diss.pdf&quot;&gt;Automated Canon Composition&lt;/a&gt;&lt;br /&gt;Churchill College, University of Cambridge, Cambridge, UK,&lt;br /&gt;May 10, 2016. (Computer Science Tripos - Part II) 
&lt;/p&gt;&lt;h2&gt;Papers&lt;/h2&gt;
William E. Byrd, Michael Ballantyne, Gregory Rosenblatt, and Matthew Might&lt;br /&gt;&lt;a href=&quot;http://dl.acm.org/citation.cfm?id=3110252&amp;amp;CFID=976617079&quot;&gt;A Unified Approach to Solving Seven Programming Problems (Functional Pearl)&lt;/a&gt;&lt;br /&gt;In Proceedings of the ACM on Programming Languages (PACMPL), 1, ICFP, Article 8 (August 2017), 26 pages. &lt;a href=&quot;https://doi.org/10.1145/3110252&quot;&gt;DOI&lt;/a&gt;.&lt;br /&gt;&lt;a href=&quot;http://io.livecode.ch/learn/gregr/icfp2017-artifact-auas7pp&quot;&gt;Interactive version&lt;/a&gt; of the paper, created by &lt;a href=&quot;https://www.cl.cam.ac.uk/~na482/&quot;&gt;Nada Amin&lt;/a&gt;.&lt;p&gt;Jason Hemann, Daniel P. Friedman, William E. Byrd, and Matthew Might&lt;br /&gt;&lt;a href=&quot;https://dl.acm.org/citation.cfm?doid=2989225.2989230&quot;&gt;A Small Embedding of Logic Programming with a Simple Complete Search&lt;/a&gt;&lt;br /&gt;In Proceedings of the 12th Symposium on Dynamic Languages (DLS 2016), Amsterdam, Netherlands, 2016.&lt;/p&gt;&lt;p&gt;Jason Hemann and Daniel P. Friedman&lt;br /&gt;&lt;a href=&quot;http://andykeep.com/SchemeWorkshop2015/papers/sfpw3-2015-hemann-friedman.pdf&quot;&gt;A Framework for Extending microKanren with Constraints&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2015 Workshop on Scheme and Functional Programming (Scheme '15), Vancouver, British Columbia, 2015.&lt;/p&gt;&lt;p&gt;Daniel Brady, Jason Hemann and Daniel P. Friedman&lt;br /&gt;&lt;a href=&quot;http://homes.soic.indiana.edu/jhemann/scheme-14/papers/Brady2014.pdf&quot;&gt;Little Languages for Relational Programming.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2014 Workshop on Scheme and Functional Programming (Scheme '14), Washington, DC, 2014.&lt;br /&gt;&lt;a href=&quot;https://github.com/dabrady/LittleLogicLangs&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Erik Wennstrom&lt;br /&gt;&lt;a href=&quot;http://www.cs.uic.edu/pub/Isaim2014/WebPreferences/ISAIM2014_NLP_Wennstrom.pdf&quot;&gt;Tableau-Based Model Generation for Relational Syllogistic Logics.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2014 International Symposium on Artificial Intelligence and Mathematics (ISAIM 2014), Fort Lauderdale, FL, January, 2014.&lt;/p&gt;&lt;p&gt;Jason Hemann and Daniel P. Friedman.&lt;a name=&quot;microKanrenPaper&quot; id=&quot;microKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf&quot;&gt;microKanren: A Minimal Functional Core for Relational Programming.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2013 Workshop on Scheme and Functional Programming (Scheme '13), Alexandria, VA, 2013.&lt;br /&gt;&lt;a href=&quot;https://github.com/jasonhemann/microKanren&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Cameron Swords and Daniel P. Friedman.&lt;a name=&quot;rKanrenPaper&quot; id=&quot;rKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/scheme-2013/papers/Swords2013.pdf&quot;&gt;rKanren: Guided Search in miniKanren.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2013 Workshop on Scheme and Functional Programming (Scheme '13), Alexandria, VA, 2013.&lt;br /&gt;&lt;a href=&quot;https://github.com/cgswords/rkanren&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;William E. Byrd, Eric Holk, and Daniel P. Friedman.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/quines/quines.pdf&quot;&gt;miniKanren, Live and Untagged: Quine Generation via Relational Interpreters (Programming Pearl).&lt;/a&gt;&lt;br /&gt;To appear in the Proceedings of the 2012 Workshop on Scheme and Functional Programming, Copenhagen, Denmark, 2012.&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/2012-scheme-workshop-quines-paper-code&quot;&gt;Complete source code (Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Claire E. Alvis, Jeremiah J. Willcock, Kyle M. Carter, William E. Byrd, and Daniel P. Friedman.&lt;a name=&quot;cKanrenPaper&quot; id=&quot;cKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.schemeworkshop.org/2011/papers/Alvis2011.pdf&quot;&gt;cKanren: miniKanren with Constraints.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2011 Workshop on Scheme and Functional Programming (Scheme '11), Portland, OR, 2011.&lt;br /&gt;&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;Complete source code (R6RS Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Ramana Kumar and Michael Norrish&lt;br /&gt;&lt;a href=&quot;http://ssrg.nicta.com.au/publications/nictaabstracts/Kumar_Norrish_10.abstract.pml&quot;&gt;(Nominal) unification by recursive descent with triangular substitutions&lt;/a&gt;&lt;br /&gt;In Proceedings of the First international conference on Interactive Theorem Proving (ITP'10),&lt;br /&gt;Springer-Verlag Berlin, pp. 51-66, 2010.&lt;/p&gt;&lt;p&gt;Andrew W. Keep, Michael D. Adams, Lindsey Kuper, William E. Byrd, and Daniel P. Friedman.&lt;br /&gt;&lt;a href=&quot;http://www.schemeworkshop.org/2009/scheme2009.pdf&quot;&gt;A Pattern-matcher for miniKanren -or- How to Get into Trouble with CPS Macros.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2009 Workshop on Scheme and Functional Programming,&lt;br /&gt;Cal Poly Technical Report CPSLO-CSC-09-03, pp. 37-45, 2009.&lt;/p&gt;&lt;p&gt;Joseph P. Near, William E. Byrd and Daniel P. Friedman.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphaleantap/alphatap.pdf&quot;&gt;alphaleanTAP: A Declarative Theorem Prover for First-Order Classical Logic.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 24th International Conference on Logic Programming (ICLP 2008),&lt;br /&gt;LNCS vol. 5366, Springer-Verlag, Heidelberg, pp. 238-252, 2008.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphaleantap/alphaleanTAP.zip&quot;&gt;Complete source code--R6RS Scheme and Prolog (.zip file)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Oleg Kiselyov, William E. Byrd, Daniel P. Friedman and Chung-chieh Shan&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/arithm/arithm.pdf&quot;&gt;Pure, declarative, and constructive arithmetic relations (declarative pearl).&lt;/a&gt;&lt;br /&gt;In Proceedings of the 9th International Symposium on Functional and Logic Programming,&lt;br /&gt;ed. Jacques Garrigue and Manuel Hermenegildo, pp. 64-80.&lt;br /&gt;LNCS vol. 4989, Springer, 2008.&lt;/p&gt;&lt;p&gt;William E. Byrd and Daniel P. Friedman&lt;a name=&quot;alphaKanrenPaper&quot; id=&quot;alphaKanrenPaper&quot;&gt; &lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphamk/alphamk_workshop.pdf&quot;&gt;alphaKanren: A Fresh Name in Nominal Logic Programming.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2007 Workshop on Scheme and Functional Programming,&lt;br /&gt;Universite Laval Technical Report DIUL-RT-0701, pp. 79-90.&lt;br /&gt;&lt;a href=&quot;http://webyrd.net/alphamk/alphamk.pdf&quot;&gt;Authors' revised version (recommended)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/webyrd/alphaKanren&quot;&gt;Revised source code (R5RS Scheme)&lt;/a&gt;&lt;/p&gt;&lt;p&gt;William E. Byrd and Daniel P. Friedman&lt;br /&gt;&lt;a href=&quot;http://scheme2006.cs.uchicago.edu/12-byrd.pdf&quot;&gt;From Variadic Functions to Variadic Relations: A miniKanren Perspective.&lt;/a&gt;&lt;br /&gt;In Proceedings of the 2006 Scheme and Functional Programming Workshop,&lt;br /&gt;University of Chicago Technical Report TR-2006-06, 2006, pp. 105-117.&lt;/p&gt;&lt;p&gt;Oleg Kiselyov, Chung-chieh Shan, Daniel P. Friedman, and Amr Sabry&lt;br /&gt;&lt;a href=&quot;http://okmij.org/ftp/papers/LogicT.pdf&quot;&gt;Backtracking, interleaving, and terminating monad transformers: (functional pearl).&lt;/a&gt;&lt;br /&gt;In Proceedings of the 10th ACM SIGPLAN International Conference on Functional Programming (ICFP '05),&lt;br /&gt;ACM Press, New York, pp. 192-203, 2005. 
&lt;/p&gt;&lt;h2&gt;Screencasts&lt;/h2&gt;
&lt;h3&gt;Thomas G. Kristensen&lt;/h3&gt;
&lt;a href=&quot;http://vimeo.com/55677313&quot;&gt;Composing music using core.logic and Overtone - The Composing Schemer&lt;br /&gt;&lt;/a&gt;&lt;a href=&quot;http://tgk.github.com/2012/12/the-composing-schemer.html&quot;&gt;blog post&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/tgk/the-composing-schemer&quot;&gt;source code&lt;/a&gt;&lt;br /&gt;January 2013.&lt;h3&gt;Timothy Baldridge&lt;/h3&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=HHZ8iqswiCw&quot;&gt;Clojure Core.Logic With Custom Data Sources&lt;/a&gt;&lt;br /&gt;October 25, 2013.&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=cUxYoNRW3VM&quot;&gt;Bytecode Assembler in Core.Logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://halgari.blogspot.com/2012/12/byte-packing-with-corelogic.html&quot;&gt;related blog post&lt;/a&gt;&lt;br /&gt;Dec 13, 2012.&lt;/p&gt;&lt;h3&gt;Coen De Roover&lt;/h3&gt;
&lt;a href=&quot;http://www.youtube.com/watch?v=5wvVFQa1hVU&quot;&gt;Getting started querying an Eclipse workspace using Ekeko&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/cderoove/damp.ekeko/&quot;&gt;ekeko project&lt;/a&gt;&lt;br /&gt;August 14, 2012. 
&lt;h2&gt;Weekly Google Hangout on Air&lt;/h2&gt;
&lt;h3&gt;Upcoming Hangouts&lt;/h3&gt;
&lt;h3&gt;Previous Hangouts&lt;/h3&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=LMrwiVozcsw&quot;&gt;Hangout #13, Sunday, June 30.&lt;/a&gt;&lt;br /&gt;Topic: Claire shows off a new macro for defining constraints using attributed variables, a new version of the matche pattern matching macro, and the implementation of templateo (declarative &lt;code&gt;copy_term&lt;/code&gt;) (&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;URL&lt;/a&gt;). Norman demos his &lt;a href=&quot;https://gist.github.com/orb/5895918&quot;&gt;code&lt;/a&gt; for solving &lt;a href=&quot;http://www.brainbashers.com/nonogrids.asp&quot;&gt;nonogrids problems&lt;/a&gt;. Will talks about CPSing miniKanren programs.&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yNi3W78ZSII&quot;&gt;Hangout #12, Sunday, June 23, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Gary shows off his CLP(FD) program to layout &lt;a href=&quot;http://gfredericks.com/gfrlog/98&quot;&gt;2D figures&lt;/a&gt;; Will describes the new, apparently fixed &lt;a href=&quot;https://github.com/calvis/cKanren/blob/master/cKanren/template.rkt&quot;&gt;&lt;code&gt;templateo&lt;/code&gt; constraint&lt;/a&gt;, and explains how it is used in a &lt;a href=&quot;https://github.com/webyrd/templateo&quot;&gt;relational term reducer&lt;/a&gt; for the untyped lambda-calculus.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CZVZPugCkJQ&quot;&gt;Hangout #11, Sunday, June 9, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Unexpected memory usage in &lt;code&gt;conde&lt;/code&gt;, and how to fix it in CLP(FD); meta-interpreters in miniKanren (&lt;a href=&quot;https://github.com/webyrd/meta-interp&quot;&gt;code&lt;/a&gt;); what do you need to know to use miniKanren effectively?; Will's new book on miniKanren (&lt;a href=&quot;https://github.com/webyrd/relational-programming-in-miniKanren&quot;&gt;in progress&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=boymkCvXJi8&quot;&gt;Hangout #10, Sunday, June 2, 2013.&lt;/a&gt;&lt;br /&gt;Topic: We discuss CLP(Set) and declarative &lt;code&gt;copy_term&lt;/code&gt; (a.k.a., &lt;code&gt;templateo&lt;/code&gt;) (&lt;a href=&quot;https://github.com/calvis/cKanren&quot;&gt;code&lt;/a&gt;). Lindsey shows off LVish (&lt;a href=&quot;https://github.com/lkuper/lvars/tree/master/redex/LVish&quot;&gt;code&lt;/a&gt;). David poses a core.logic puzzle. Dan and Jason discuss miniC, a minimal miniKanren without macros. Will shows off a relational lambda calculus reducer (&lt;a href=&quot;https://github.com/webyrd/templateo&quot;&gt;code&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tqD7ioh_WYw&quot;&gt;Hangout #9, Sunday, May 19, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Will shows off a meta-circular interpreter for miniKanren (&lt;a href=&quot;https://github.com/webyrd/mk-metacircular-interp&quot;&gt;code&lt;/a&gt;), and describes the outline for a new book he is writing on relational programming (&lt;a href=&quot;https://github.com/webyrd/relational-programming-in-miniKanren&quot;&gt;book&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ux6St9r-KmM&quot;&gt;Hangout #8, Sunday, May 5, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Dan and Jason show off a cool way to implement mutual recursion in an interpreter. Will and the gang then live-code a relational interpreter for general Deterministic Finite Automata (&lt;a href=&quot;https://github.com/webyrd/relational-dfa&quot;&gt;code&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hIyVyy78lAs&quot;&gt;Hangout #7, Sunday, April 28, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Translating simple Scheme functions to miniKanren using correctness-preserving transformations.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=MTAhbsWUUxM&quot;&gt;Hangout #6, Sunday, April 21, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Live coding/real-time solution of a simple problem solved by Michael. Also, Claire discusses new features of cKanren in Racket.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=VSpq3qK9L88&quot;&gt;Hangout #5, Sunday, April 14, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Stump the Chump! Will partially translates miniKanren's unify function from Scheme into miniKanren (&lt;a href=&quot;https://github.com/webyrd/relational-unifier&quot;&gt;code&lt;/a&gt;). Also, discussion of extra-logical operators, and new miniKanren features in progress: CLP(Set), constraint handling rules, lazy constraints for recursion.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=WMjvyizzE78&quot;&gt;Hangout #4, Sunday, April 7, 2013.&lt;/a&gt;&lt;br /&gt;Topic: Debugging miniKanren programs; Constraint Logic Programming over sets (based on the paper &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.132.1779&quot;&gt;Sets and Constraint Logic Programming&lt;/a&gt; by Dovier, et al., 2000).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=su3os5qMLr0&quot;&gt;Hangout #3, Sunday, March 31, 2013.&lt;/a&gt;&lt;br /&gt;Implementation of simplified miniKanren (&lt;a href=&quot;https://github.com/miniKanren/simple-miniKanren&quot;&gt;source code&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=eEDmGOLN4Q4&quot;&gt;Hangout #2, March 24, 2013.&lt;/a&gt;&lt;br /&gt;Implementing disequality constraints, absento/presento constraints, miniKanren Confo at Clojure/West, relational CESK machine.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vRrgaibcTYs&quot;&gt;Hangout #1, March 10, 2013.&lt;/a&gt;&lt;br /&gt;A little miniKanren history, what it means to be relational, a relational variant of copy-term, debugging miniKanren programs. 
&lt;/p&gt;&lt;h2&gt;Podcasts&lt;/h2&gt;
Mostly lazy... a Clojure podcast&lt;br /&gt;&lt;a href=&quot;http://mostlylazy.com/2013/01/04/episode-9-with-kevin-lynagh-and-paul-degrandis-web-dev-ennui-crdts-and-core-logic/&quot;&gt;Episode 9 with Kevin Lynagh and Paul deGrandis: web dev ennui, CRDTs, and core.logic&lt;/a&gt;&lt;br /&gt;Recorded December 14th, 2012. 
&lt;h2&gt;Blogs&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;http://swannodette.github.com&quot;&gt;David Nolen - dosync&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://swannodette.github.io/2013/03/25/stlc-redux-part-ii&quot;&gt;STLC Redux: Part II&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://swannodette.github.io/2013/03/09/logic-programming-is-underrated&quot;&gt;Logic Programming is Underrated&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://swannodette.github.io/nominal%20logic/2013/02/08/the-simply-typed-lambda-calculus-in-20-lines-redux&quot;&gt;The Simply Typed Lambda Calculus in 20 Lines Redux&lt;/a&gt;&lt;p&gt;From David Nolen's old blog (courtesy of the &lt;a href=&quot;https://archive.org&quot;&gt;Internet Archive's&lt;/a&gt; &lt;a href=&quot;https://archive.org/web/&quot;&gt;Wayback Machine&lt;/a&gt;):&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050720/http://dosync.posterous.com/know-your-bounds&quot;&gt;Know Your Bounds&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050728/http://dosync.posterous.com/friendlier-shorter&quot;&gt;friendlier&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050735/http://dosync.posterous.com/sudoku&quot;&gt;sudoku&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050744/http://dosync.posterous.com/a-logic-programming-reading-list&quot;&gt;A Logic Programming Reading List&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050830/http://dosync.posterous.com/logic-programming-javascript&quot;&gt;Logic Programming &amp;amp; JavaScript&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511050856/http://dosync.posterous.com/corelogic-vpri-steps&quot;&gt;core.logic &amp;amp; VPRI STEPS&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051249/http://dosync.posterous.com/another-taste-of-ckanren&quot;&gt;Another Taste of cKanren&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051259/http://dosync.posterous.com/a-taste-of-ckanren&quot;&gt;A Taste of cKanren&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051348/http://dosync.posterous.com/simple-type-inference-for-the-simply-typed-la&quot;&gt;Simple Type Inference For The Simply Typed Lambda Calculus in ~20 Lines&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051414/http://dosync.posterous.com/logos-corelogic&quot;&gt;Logos -&amp;gt; core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051420/http://dosync.posterous.com/crazy-ideas&quot;&gt;Crazy Ideas&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051429/http://dosync.posterous.com/fun&quot;&gt;Fun&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051436/http://dosync.posterous.com/spring-cleaning&quot;&gt;Spring Cleaning&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051449/http://dosync.posterous.com/simple-constraints&quot;&gt;Simple Constraints&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051504/http://dosync.posterous.com/21ms&quot;&gt;~2.1ms&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051519/http://dosync.posterous.com/tabling-in-logos&quot;&gt;Tabling in Logos&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051525/http://dosync.posterous.com/pattern-matching&quot;&gt;Pattern Matching&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051540/http://dosync.posterous.com/finally-a-clue&quot;&gt;Finally ... a clue&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051605/http://dosync.posterous.com/performance-matters&quot;&gt;Performance Matters&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051615/http://dosync.posterous.com/faster-unification&quot;&gt;Faster Unification&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051624/http://dosync.posterous.com/logic-programming-and-performance&quot;&gt;Logic Programming and Performance&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051638/http://dosync.posterous.com/a-short-break&quot;&gt;A Short Break&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051208/http://dosync.posterous.com/life-without-tail-call-optimization&quot;&gt;Life Without Tail Call Optimization&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051645/http://dosync.posterous.com/announcing-logos&quot;&gt;Announcing Logos&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://web.archive.org/web/20130511051706/http://dosync.posterous.com/a-minikanren-introduction-via-clojure&quot;&gt;A miniKanren introduction via Clojure&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;h3&gt;&lt;a href=&quot;https://nickdrozd.github.io/&quot;&gt;Nick Drozd&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://nickdrozd.github.io/2018/08/14/modal-sentences.html&quot;&gt;Generating Sentences of Modal Logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://nickdrozd.github.io/2018/08/15/prop-proofs.html&quot;&gt;Generating Propositional Logic Proofs&lt;/a&gt;&lt;br /&gt;&lt;h3&gt;&lt;a href=&quot;http://clojurelx.blogspot.com&quot;&gt;Clojure &amp;amp; lx&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://clojurelx.blogspot.com/2012/07/another-logic-programming-reading-list.html&quot;&gt;Another Logic Programming Reading List&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojurelx.blogspot.com/2012/02/lx-in-corelogic-3-finite-state.html&quot;&gt;lx in core.logic #3: Finite State Transducers&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojurelx.blogspot.com/2012/01/lx-in-corelogic-2-jumps-flexible.html&quot;&gt;lx in core.logic #2: Jumps, Flexible Transitions and Parsing&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojurelx.blogspot.com/2012/01/finite-state-machines-in-corelogic.html&quot;&gt;Finite State Machines in core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://wickstrom.tech&quot;&gt;Oskar WickstrÃ¶m&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://wickstrom.tech/programming/2016/08/07/generating-sight-reading-exercises-using-constraint-logic-programming-in-clojure-part-1.html&quot;&gt;Generating Sight-Reading Exercises using Constraint Logic Programming in Clojure, Part 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://halgari.blogspot.com&quot;&gt;Timothy Baldridge - (apply clojure @life)&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://halgari.blogspot.com/2012/12/heres-quick-screencast-of-some-work-ive.html&quot;&gt;Bytecode Assembler in Core.Logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://halgari.blogspot.com/2012/12/byte-packing-with-corelogic.html&quot;&gt;Byte Packing with core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://tgk.github.com/&quot;&gt;Thomas G. Kristensen - Clojure/tgk&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://tgk.github.io/2013/02/parsing-packets-erlang-style-using-core-logic.html&quot;&gt;Parsing packets Erlang style using core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://tgk.github.com/2012/12/the-composing-schemer.html&quot;&gt;The Composing Schemer&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://tgk.github.com/2012/08/finding-cliques-in-graphs-using-core-logic.html&quot;&gt;Finding cliques in graphs using core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://tgk.github.com/2012/08/maximum-cliques-algorithm-in-clojure.html&quot;&gt;Maximum cliques algorithm in Clojure&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://boss-level.com&quot;&gt;Edmund Jackson - boss level&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://boss-level.com/?p=66&quot;&gt;mini-Sudoku in mini-Kanren (in Clojure-&quot;ish&quot;)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://boss-level.com/?p=64&quot;&gt;Logic Programming Part 3 (List Logic)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://boss-level.com/?p=28&quot;&gt;Logic Programming Part 2 (Building Blocks)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://boss-level.com/?p=17&quot;&gt;Logic Programming Part 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://clojure.com/blog/&quot;&gt;clojure.com - Clojure/core (posts by Stuart Sierra)&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://clojure.com/blog/2011/12/08/lojic-part-two.html&quot;&gt;Lojic Part Two&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clojure.com/blog/2011/12/05/lojic-part-one.html&quot;&gt;Lojic Part One&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.clojure.net/&quot;&gt;Jim Duey - A Clojure Story&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://www.clojure.net/2013/10/24/Building-trees/&quot;&gt;Building Trees&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/20/Meta-Machinations/&quot;&gt;Meta Machinations&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/16/Build-an-arrow/&quot;&gt;Build An Arrow&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/12/Meta-Machinations/&quot;&gt;Meta Machinations&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2013/10/05/Arrowed-core.logic/&quot;&gt;Arrowed Core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2012/10/02/More-core.logic/&quot;&gt;More Core.logic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.clojure.net/2012/03/26/Messin-with-core.logic/&quot;&gt;Messin With Core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://clj-me.cgrand.net&quot;&gt;Christophe Grand - Clojure and me&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://clj-me.cgrand.net/2012/04/06/fair-conjunction-status-report/&quot;&gt;Fair conjunction: status report&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://clj-me.cgrand.net/2012/01/30/the-reasoned-scheduler/&quot;&gt;The Reasoned Scheduler&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://objectcommando.com&quot;&gt;Ryan Senior - Object Commando&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://objectcommando.com/blog/2011/11/04/the-magical-island-of-kanren-core-logic-intro-part-1/&quot;&gt;The Magical Island of Kanren - core.logic Intro Part 1&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://objectcommando.com/blog/2011/10/13/appendo-the-great/&quot;&gt;Appendo the Great&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://martintrojer.github.io/&quot;&gt;Martin Trojer&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/09/27/some-corelogic-graph-code&quot;&gt;Some core.logic graph code&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/08/12/ckanren-time&quot;&gt;cKanren time!&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/11/n-queens-with-corelogic-take-2&quot;&gt;Replicating Datomic/Datalog queries with core.logic, take 2&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/07/n-queens-with-corelogic-take-1&quot;&gt;Replicating Datomic/Datalog queries with core.logic, take 1&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/11/n-queens-with-corelogic-take-2&quot;&gt;N-Queens with core.logic, take 2&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://martintrojer.github.io/clojure/2012/07/07/n-queens-with-corelogic-take-1&quot;&gt;N-Queens with core.logic, take 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://spin.atomicobject.com&quot;&gt;Atomic Object - Atomic Spin&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://spin.atomicobject.com/2012/12/08/minikanren-in-haskell/&quot;&gt;miniKanren in Haskell&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://spin.atomicobject.com/2013/01/14/first-time-programming-scared-me/&quot;&gt;The First Time Programming Scared Me&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.jenkster.com/&quot;&gt;Kris Jenkins&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.jenkster.com/2013/02/solving-logic-puzzles-with-clojures-core-logic-part-two.html&quot;&gt;Solving Logic Puzzles With Clojure's Core Logic, Part Two&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://blog.jenkster.com/2013/02/solving-logic-puzzles-with-clojures-corelogic.html&quot;&gt;Solving Logic Puzzles With Clojure's Core Logic, Part One&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://www.50ply.com/&quot;&gt;Brian Taylor&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://www.50ply.com/blog/2012/08/01/pfai-to-core-logic-chapter-2/&quot;&gt;PPfAI Chapter 2 (in Clojure Core.Logic)&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://www.50ply.com/blog/2012/07/29/pfai-to-core-dot-logic/&quot;&gt;PPfAI Chapter 1 in Clojure Core.Logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://pragprog.com/magazines&quot;&gt;Paul Callaghan - PragPub Magazine&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://pragprog.com/magazines/2013-06/unification&quot;&gt;Unification: It's Not Just for Prolog&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://lindseykuper.livejournal.com/&quot;&gt;Lindsey Kuper&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://lindseykuper.livejournal.com/345176.html&quot;&gt;Generating tautologies with miniKanren&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://michaelrbernste.in/&quot;&gt;Michael R. Bernstein&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://michaelrbernste.in/2013/05/12/featurec-and-maps.html&quot;&gt;A Nice Feature in core.logic and Thoughts About A Data Structure&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://jvns.ca/&quot;&gt;Julia Evans&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://jvns.ca/blog/2013/11/20/day-31-logic-programming-pretty-music/&quot;&gt;Day 31: Binary trees with core.logic!&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://mariapacana.tumblr.com/&quot;&gt;Maria Pacana&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://mariapacana.tumblr.com/post/67799683667/minikanren&quot;&gt;MiniKanren&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://kotka.de/index.html&quot;&gt;Meikel Brandmeyer&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://kotka.de/blog/2011/10/A_field_trip_into_logic_programming.html&quot;&gt;A field trip into logic programming&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://tsdh.wordpress.com/&quot;&gt;Tassilo Horn&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://tsdh.wordpress.com/2012/01/06/using-clojures-core-logic-with-custom-data-structures/&quot;&gt;Using Clojure's core.logic with custom data structures&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://bithacker.net/&quot;&gt;Cameron Swords&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://bithacker.net/2013-09-20-rkanren.html&quot;&gt;rKanren: Guided Search in miniKanren, Part 1&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.bloidonia.com/&quot;&gt;Tim Yates&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.bloidonia.com/post/29552846202/using-clojure-and-core-logic-from-groovy&quot;&gt;Using Clojure and core.logic from Groovy&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://peteriserins.tumblr.com/&quot;&gt;Peteris Erins&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://peteriserins.tumblr.com/post/38165611698/temporal-logic-programming-in-clojure-core-logic&quot;&gt;Temporal logic programming in Clojure core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.malcolmsparks.com/&quot;&gt;Malcolm Sparks&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.malcolmsparks.com/?p=49&quot;&gt;Transitive relations in core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://blog.zolotko.me/&quot;&gt;Alexander Zolotko&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://blog.zolotko.me/2013/07/getting-my-feet-wet-with.html&quot;&gt;Getting my feet wet with Clojure's core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://scattered-thoughts.net/&quot;&gt;Jamie Brandon&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://scattered-thoughts.net/blog/2012/12/19/search-trees-and-core-dot-logic/&quot;&gt;Search trees and core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;https://coderwall.com/samn&quot;&gt;Sam Neubardt - coderwall&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;https://coderwall.com/p/-w4plq&quot;&gt;Find Elements in a Collection Using core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://jrheard.tumblr.com/&quot;&gt;JR Heard&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://jrheard.tumblr.com/post/43575891007/explorations-in-clojures-core-logic&quot;&gt;Explorations in Clojure's core.logic&lt;/a&gt;
&lt;h3&gt;&lt;a href=&quot;http://hakutaku.me/&quot;&gt;Oleg Prophet&lt;/a&gt;&lt;/h3&gt;
&lt;a href=&quot;http://hakutaku.me/posts/2014-05-05-fun-lambda-calc-minikanren.html&quot;&gt;Fun with Lambda calculus Interpreters in miniKanren&lt;/a&gt; 
&lt;h2&gt;Contact&lt;/h2&gt;
This site is maintained by Will Byrd: &lt;a href=&quot;mailto:webyrd@gmail.com&quot;&gt;webyrd@gmail.com&lt;/a&gt;.&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/kumarshantanu&quot;&gt;Shantanu Kumar&lt;/a&gt;, &lt;a href=&quot;http://martinsprogrammingblog.blogspot.co.uk/&quot;&gt;Martin Trojer&lt;/a&gt;, and &lt;a href=&quot;http://asylum.madhouse-project.org/&quot;&gt;Gergely Nagy&lt;/a&gt; for improving the site by submitting a &lt;a href=&quot;https://github.com/miniKanren/miniKanren_org-website&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;</description>
<pubDate>Mon, 17 Dec 2018 13:10:38 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://minikanren.org/</dc:identifier>
</item>
</channel>
</rss>