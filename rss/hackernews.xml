<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Notes on Technical Writing</title>
<link>https://mkaz.blog/misc/notes-on-technical-writing/</link>
<guid isPermaLink="true" >https://mkaz.blog/misc/notes-on-technical-writing/</guid>
<description>&lt;p&gt;Over the past year, I’ve worked on and off documentation for WordPress. I started contributing during a freeze around launch to help developers transition to the new platform. I found writing documentation is something I enjoy, plus rewarding to help and educate people. Though it’s not a primary part of my job, I’ve continued to find time here and there to keep contributing.&lt;/p&gt;
&lt;p&gt;In this time, I’ve read various resources on technical writing and documentation. These are my notes, both to help me remember later, but also as a tool to help me think about writing now.&lt;/p&gt;
&lt;h3&gt;Principles&lt;/h3&gt;
&lt;p&gt;The following principles I try to keep in mind when writing documentation.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The purpose of technical writing is to help users accomplish tasks as quickly and effectively as possible.&lt;/li&gt;
&lt;li&gt;People learn by doing, prefer to be shown and not told.&lt;/li&gt;
&lt;li&gt;Get users to their first success quickly.&lt;/li&gt;
&lt;li&gt;There is more than one type of documentation.&lt;/li&gt;
&lt;li&gt;Keep it simple, write in plain language&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Tips&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Know your audience, know your purpose&lt;/li&gt;
&lt;li&gt;Put the most important information first&lt;/li&gt;
&lt;li&gt;Use bullet lists&lt;/li&gt;
&lt;li&gt;One idea per paragraph&lt;/li&gt;
&lt;li&gt;Edit, Edit, Edit&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;Avoid Meta Writing&lt;/h4&gt;
&lt;p&gt;Avoid writing about the writing, text does not have a mind of its own. The active parties are the writer and the reader.&lt;/p&gt;
&lt;p&gt;You don’t need to tell the reader what you’re going to tell them. Just tell them.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Bad&lt;/strong&gt;: This chapter discusses the factors that cause names to rise and fall in popularity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good&lt;/strong&gt;: What makes a name rise and fall in popularity?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Don’t refer to sections or paragraphs in the writing.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Bad&lt;/strong&gt;: Summarizing the preceding section about…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good&lt;/strong&gt;: In summary, …&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Don’t tell the reader something is extremely complex; likewise don’t tell the reader something is simple. The reader will make up their own mind about a concept being easy or hard.&lt;/p&gt;
&lt;h2&gt;Minimalist Instruction&lt;/h2&gt;
&lt;p&gt;John M. Carroll and his colleagues at IBM studied creating support documents analyzing the best way to get a user proficient. In the 1980s, they developed a minimalist approach and created a wonderful &lt;a href=&quot;https://mkaz.blog/wp-content/uploads/2020/01/IBM-Displaywriter-Manual.pdf&quot;&gt;Operator Training Manual for the IBM Displaywriter&lt;/a&gt;, imagine having to introduce someone to using a word processor for the first time.&lt;/p&gt;
&lt;p&gt;The four principals of minimalist instruction:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Choose an action-oriented approach. Users typically want to do things. This principle reflects the user-centric nature of minimalism.&lt;/li&gt;
&lt;li&gt;Anchor the tool in the task domain. A tool is a means to an end. This principle asks designers to select training tasks that are meaningful for the user.&lt;/li&gt;
&lt;li&gt;Support error recognition and recovery. To err is human. There are several ways to increase user competence and comfort levels in handling mistakes.&lt;/li&gt;
&lt;li&gt;Support reading to do, study and locate. Designs must fit as much as possible the diverging needs and propensities of the intended audience. This principle reflects the user-centric nature of minimalism.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://www.utwente.nl/en/bms/ist/minimalism/&quot;&gt;Read deeper about Minimalist Instruction&lt;/a&gt; from the Department of Instructional Technology at University of Twente, Netherlands.&lt;/p&gt;
&lt;h2&gt;Constructivism&lt;/h2&gt;
&lt;p&gt;American psychologist Jerome Bruner studied human cognitive psychology. A major theme in Bruner’s work is that learning is an active process in which learners construct new ideas based upon their own knowledge. Applying the principles of constructivism to documentation:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Try to encourage readers to discover principles by themselves&lt;/li&gt;
&lt;li&gt;Translate information into a format appropriate to the reader’s current level&lt;/li&gt;
&lt;li&gt;Organize material in a spiral, so it continually builds upon what they have already learned.&lt;/li&gt;
&lt;li&gt;Engage in an active dialog, invite users to act “Please try”, “See what happens”, “Explore yourself”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Read more about &lt;a href=&quot;https://www.instructionaldesign.org/theories/constructivist/&quot;&gt;Bruner and Constructivist Theory&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Types of Documentation&lt;/h2&gt;
&lt;p&gt;Daniele Procida wrote &lt;a href=&quot;https://www.divio.com/blog/documentation/&quot;&gt;What nobody tells you about documentation&lt;/a&gt; that discusses there isn’t just one thing called documentation, but there (at least) four types of documentation.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Tutorials&lt;/strong&gt; – A tutorial is learning-oriented for newcomers, a directed set of lessons to give the user basic confidence and skills. A tutorial should not assume knowledge or language, but is there to take a beginner who doesn’t know what questions to ask through learning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How-to Guides&lt;/strong&gt; – A how-to guide, or FAQ is goal-oriented, directed by the user. A how-to guide can assume the user has basic knowledge and language, but needs to know how to solve a specific problem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explanation&lt;/strong&gt; – An explanation or overview document is understanding-oriented providing background or additional detailed context.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reference Guides&lt;/strong&gt; – A reference guide is information-oriented, it is accurate and complete describing the machinery. API documentation is an example of a reference guide.&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Resources&lt;/h2&gt;
</description>
<pubDate>Sat, 04 Jan 2020 15:22:09 +0000</pubDate>
<dc:creator>marcuskaz</dc:creator>
<og:type>article</og:type>
<og:title>Notes on Technical Writing</og:title>
<og:url>https://mkaz.blog/misc/notes-on-technical-writing/</og:url>
<og:description>Over the past year, I’ve worked on and off documentation for WordPress. I started contributing during a freeze around launch to help developers transition to the new platform. I found writing…</og:description>
<og:image>https://149354403.v2.pressablecdn.com/wp-content/uploads/2018/04/cropped-mkaz-blog.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mkaz.blog/misc/notes-on-technical-writing/</dc:identifier>
</item>
<item>
<title>Ask HN: Are books worth it?</title>
<link>https://news.ycombinator.com/item?id=21955258</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=21955258</guid>
<description>&lt;td colspan=&quot;2&quot;/&gt;&lt;td readability=&quot;40&quot;&gt;I have read less than 50 books in my life and probably less than 5 books in the past 10 years.
&lt;p&gt;Growing up with the Internet, I always assumed that everything could be found for free online.&lt;/p&gt;
&lt;p&gt;I spend most of my day reading online articles/conversations, watching videos, and listening to podcasts. I have thousands of non-fiction (mostly self-improvement) books in my reading list on GoodReads, but almost never bother to read any. I assume that the best part of the best books will surface in daily conversations, YouTube videos, CliffsNotes, podcasts, Reddit posts/comments, blog articles, etc. I even find myself reading the comments and not reading the article most of the time. I'm fine with bullet point style summaries and don't care much about the fluff that fills most books I've read in the past.&lt;/p&gt;
&lt;p&gt;Up until recently, I didn't think I was missing out. I thought that online content was roughly equivalent to 80% of what I'd get from reading actual books for 20% of the effort. I also thought that most books probably don't age very well and that most of the bleeding edge stuff could only be found online. But I'm starting to wonder if that's true. I'm starting to see people online mention that books are infinitely better than online content. I read that millionaires and billionaires read tons of books. I wonder if I'm missing out?&lt;/p&gt;
&lt;p&gt;One issue for me is that books are a very big time investment. I read very slowly and I don't remember everything I read either. The last few books I read were mostly filled with fluff, anecdotes, stories, jokes, and trivialities. Even if I wanted to read books, I just don't know which ones I should start with, out of the 1000 &quot;must-read&quot; books in my reading list.&lt;/p&gt;
&lt;p&gt;Are books worth it? Is it more true for some fields than others? Is it more true for older books? Isn't most of the information from books freely available online? Am I missing out?&lt;/p&gt;
&lt;/td&gt;
</description>
<pubDate>Sat, 04 Jan 2020 15:10:57 +0000</pubDate>
<dc:creator>miguelrochefort</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=21955258</dc:identifier>
</item>
<item>
<title>Mutexes are faster than Spinlocks</title>
<link>https://matklad.github.io/2020/01/04/mutexes-are-faster-than-spinlocks.html</link>
<guid isPermaLink="true" >https://matklad.github.io/2020/01/04/mutexes-are-faster-than-spinlocks.html</guid>
<description>&lt;div class=&quot;paragraph&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;There are several interesting observations here!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;First&lt;/em&gt;, we reproduce the result that the variance of spinlocks on Linux with default scheduling settings can be huge:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;
&lt;code&gt;parking_lot::Mutex  min 6ms  max  11ms
AmdSpinlock         min 6ms  max 123ms&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;Note that these are extreme results for 100 runs, where each run does &lt;code&gt;32 * 10_000&lt;/code&gt; lock operations. That is, individual lock/unlock operations probably have an even higher spread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;em&gt;Second&lt;/em&gt;, the uncontended case looks like I have expected: mutexes and spinlocks are not that different, because they essentially use the same code&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;
&lt;code&gt;Parking_lot::Mutex   avg 6ms  min 4ms  max 9ms
spin::Mutex          avg 5ms  min 4ms  max 7ms&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;em&gt;Third&lt;/em&gt;, under heavy contention mutexes annihilate spinlocks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;
&lt;code&gt;parking_lot::Mutex   avg 10ms  max  11ms
spin::Mutex          avg 55ms  max 161ms&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;Now, this is the opposite of what I would naively expect. Even in heavy contended state, the critical section is still extremely short, so for each thread, the most efficient strategy seems to spin for a couple of iterations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;But I think I can explain why mutexes are so much better in this case. One reason is that with spinlocks a thread can get unlucky and be preempted in the critical section. The other more important reason is that, at any given moment in time, there are many threads trying to enter the same critical section. With spinlocks, all cores can be occupied by threads who compete for the same lock. With mutexes, there is a queue of sleeping threads for each lock, and the kernel generally tries to make sure that only one thread from the group is awake.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;10.091743119266&quot;&gt;
&lt;p&gt;This is a funny example of mechanical &lt;a href=&quot;https://en.wikipedia.org/wiki/Race_to_the_bottom&quot;&gt;race to the bottom&lt;/a&gt;. Due to the short length of critical section, each individual thread would spend less CPU cycles in total if it were spinning, but it increases the overall cost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;8.4375&quot;&gt;
&lt;p&gt;EDIT: simpler and more plausible &lt;a href=&quot;https://www.reddit.com/r/rust/comments/ejx7y8/blog_post_mutexes_are_faster_than_spinlocks/fd3u7rw&quot;&gt;explanation&lt;/a&gt; from the author of Rust’s parking lot is that it does exponential backoff when spinning, unlike the two spinlock implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;em&gt;Fourth&lt;/em&gt;, even under heavy contention spin locks can luck out and finish almost as fast as mutexes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;
&lt;code&gt;parking_lot::Mutex   avg 10ms  min 6ms
spin::Mutex          avg 55ms  min 7ms&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;This again shows that a good mutex is roughly equivalent to a spinlock in the best case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;em&gt;Fifth&lt;/em&gt;, the amount of contention required to disrupt spinlocks seems to be small. Even if 32 threads compete for 1 000 locks, spinlocks still are considerably slower:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;
&lt;code&gt;parking_lot::Mutex   avg  6ms  min 3ms   max   8ms
spin::Mutex          avg 37ms  min 4ms   max 115ms&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;18.609053497942&quot;&gt;
&lt;p&gt;EDIT: someone on Reddit &lt;a href=&quot;https://www.reddit.com/r/rust/comments/ejx7y8/blog_post_mutexes_are_faster_than_spinlocks/fd3u8vq&quot;&gt;noticed&lt;/a&gt; that the number of threads is significantly higher than the number of cores, which is an unfortunate situation for spinlocks. And, although the number of threads in the benchmark is configurable, it never occurred to me to actually vary it 😅! Lowering the number of threads to four gives a picture similar to the &quot;no contention&quot; situation above: spinlocks a slightly, but not massively, faster. Which makes total sense! as there are more cores than CPUs, there’s no harm in spinning. And, if you can carefully architecture you application such that it runs a small fixed number of threads, ideally pinned to specific CPUs (like in the &lt;a href=&quot;http://seastar.io/shared-nothing/&quot;&gt;seastart&lt;/a&gt; architecture), using spinlocks might make sense!&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 04 Jan 2020 15:07:30 +0000</pubDate>
<dc:creator>erickt</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://matklad.github.io/2020/01/04/mutexes-are-faster-than-spinlocks.html</dc:identifier>
</item>
<item>
<title>Lessons from six years as a solo consultant</title>
<link>https://www.embeddeduse.com/2019/06/26/lessons-from-six-years-as-a-solo-consultant/</link>
<guid isPermaLink="true" >https://www.embeddeduse.com/2019/06/26/lessons-from-six-years-as-a-solo-consultant/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.embeddeduse.com/2019/06/26/lessons-from-six-years-as-a-solo-consultant/&quot;&gt;https://www.embeddeduse.com/2019/06/26/lessons-from-six-years-as-a-solo-consultant/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=21954581&quot;&gt;https://news.ycombinator.com/item?id=21954581&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 272&lt;/p&gt;
&lt;p&gt;# Comments: 87&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jan 2020 12:37:38 +0000</pubDate>
<dc:creator>Edward9</dc:creator>
<dc:identifier>https://www.embeddeduse.com/2019/06/26/lessons-from-six-years-as-a-solo-consultant/</dc:identifier>
</item>
<item>
<title>End-to-end double-ratchet encryption with epoch key exchange</title>
<link>https://patentswarm.com/patents/US10412063B1</link>
<guid isPermaLink="true" >https://patentswarm.com/patents/US10412063B1</guid>
<description>&lt;h5 id=&quot;description-field-of-invention&quot;&gt;FIELD OF INVENTION&lt;/h5&gt;
&lt;p id=&quot;p-0002&quot;&gt;The present invention generally relates to electronic device communications, and more particularly, to end-to-end encryption.&lt;/p&gt;
&lt;h5 id=&quot;description-background&quot;&gt;BACKGROUND&lt;/h5&gt;
&lt;p id=&quot;p-0003&quot;&gt;Communications security on a computer network requires the generation, distribution, storage, and management of cryptographic keys. Transmitted information can include text messages, files, voice, video and other formats. (For the purposes here, messaging will be defined as data encrypted and delivered in any format.) Messages are generally stored in an encrypted state prior to transmission, and operations can be performed on already encrypted data. End-to-end encryption is generally characterized by communicating parties being the only users capable of decrypting messages. End-to-end encryption can prevent intermediaries and third parties used to facilitate the communications from eavesdropping and can facilitate secure communications even on compromised networks.&lt;/p&gt;
&lt;p id=&quot;p-0004&quot;&gt;Secure Messaging (SM) has become the primary means of communication among billions of people worldwide, but the term lacks universally accepted formal definitions and proofs with a few exceptions. The Axolotl Ratchet aka the Double Ratchet Algorithm is modeled on the Diffie-Hellman asymmetric ratchet in the Off-the-Record (OTR) messaging system and symmetric key ratchets used by the Silent Circle messaging protocol, resulting in the currently ubiquitous Signal Protocol. Encrypting and authenticating every message with a new symmetric key is the foundation of many modern end-to-end encrypted messaging products in commercial use.&lt;/p&gt;
&lt;p id=&quot;p-0005&quot;&gt;While there are a limited number of security proofs of specific implementations, there are none for the generalized protocol nor are any provably secure against brute force attack by quantum computers. Specifically, a Diffie Hellman algorithm (currently used in the Signal Protocol for asymmetric ratcheting) is generally more vulnerable compared to post-quantum cryptography like lattice or code-based algorithms. While some existing ratcheting protocols achieve desirable properties like forward secrecy and post-compromise security, formal proofs of Signal-like protocols sacrifice immediate decryption and have limited or no message loss retrieval (MLR) functionality.&lt;/p&gt;
&lt;p id=&quot;p-0006&quot;&gt;There is therefore a need for improved methods, devices, and systems for improved end-to-end message encryption.&lt;/p&gt;
&lt;h5 id=&quot;description-summary&quot;&gt;SUMMARY&lt;/h5&gt;
&lt;p id=&quot;p-0007&quot;&gt;It is an object of the present invention to provide systems, devices, and methods to automatically and instantaneously decrypt data in an end-to-end encrypted secure messaging session while maintaining forward secrecy and post-compromise security. Generally, example communication devices presented herein can each include a pseudo-random number generator (PRG) to generate a sequence of message keys, a Continuous Key Agreement (CKA) engine, a Pseudo-Random Function (PRF-PRNG) fed by the CKA to reset the state of the PRG and provide a refresh key to the PRG. Each communication device in a communication session can utilize the Continuous Key Agreement (CKA) to independently generate the symmetric key on each device, provide the symmetric key and a previous state of the PRG to the PRF-PRNG, generate an updated state and the refresh key with the PRF-PRNG based on the symmetric key and the previous state, initialize the PRG with the state, provide the root key to the PRG to generate a first message key, recursively feeding each message key into the PRG to generate the subsequent message key and a sequence of message keys for a given one-way communication epoch, and when the direction of message transmission changes such that a receiving device becomes a sending device, generating a new symmetric key via the CKA to thereby generate a new sequence of message keys using the PRF-PRNG and the PRG in a similar manner as was used to generate the message keys for the first epoch, the new sequence of message keys being the message keys for a second one-way communication epoch.&lt;/p&gt;
&lt;p id=&quot;p-0008&quot;&gt;Another object of the invention is to provide a protocol in which messages can be received out of order from the sender but can nevertheless be immediately decrypted and properly ordered in the messaging queue by the receiver. Cryptographic ratchets can be used to maintain liveness even when some messages are permanently lost. Each message can include a header that can be used by the receiving device to verify the authenticity of the message and/or to determine the order in which the message was sent from the sending device.&lt;/p&gt;
&lt;p id=&quot;p-0009&quot;&gt;An example method of exchanging messages between devices can include one or more of the following steps presented in no particular order, and the method can include additional steps not included here. Two communication devices, “Device A” and “Device B”, can be provided that are capable of transmitting data to each other via an end-to-end encryption protocol. Data structures can be provided to facilitate the end-to-end encryption including a root state and a first asymmetric key pair having a first public key and a first private key. The root state can be stored on both Device A and Device B, the first public key can be stored on Device A, and the first private key can be stored on Device B. A first epoch key can be generated on Device A based on the first public key, and Device A can also generate a second asymmetric key pair having a second private key and a second public key. The first epoch key and the second public key can be transmitted by Device A and received by Device B. Each of Device A and B can independently generate a first refresh key and a first state. On Device A, the first refresh key and the first state can each be generated based on the first public key and the root state. On Device B, the first refresh key and the first state can each be generated based on the first private key, the first epoch key, and the root state. Each of Device A and B can independently generate a first message key such that on each device the first message key is based on the first state and the first refresh key.&lt;/p&gt;
&lt;p id=&quot;p-0010&quot;&gt;With the first message key in hand on Device A, Device A can begin sending encrypted messages to Device B. Device A can encrypt a first message with the first message key and transmit the encrypted first message to Device B. Device B can receive the first message key and decrypt it using the first message key, having previously generated the first message key or having generated the first message key upon receipt of the first message.&lt;/p&gt;
&lt;p id=&quot;p-0011&quot;&gt;A second message key can be generated independently on each of Device A and Device B, the second message key generated based on the first state and the first message key. With the second message key in hand on Device A, Device A can send a second encrypted message to Device B. Device A can encrypt the second message with the second message key and transmit the second encrypted message to Device B. Device B can receive the second encrypted message and decrypt it with the second message key, having previously generated the second message key or having generated the second message key upon receipt of the second message.&lt;/p&gt;
&lt;p id=&quot;p-0012&quot;&gt;When Device B begins to respond to Device A, the first state can be updated to a second state and the first refresh key can be updated to a second refresh key to generate a new series of message keys. Device B can generate a second epoch key based on the second public key previously generated and transmitted by Device A. Device B can also generate a third asymmetric key pair having a third private key and a third public key. The second epoch key and the third public key can be transmitted by Device B and received by Device A. Device A and Device B can independently generate the second refresh key and the second state on each device. On Device B, the second refresh key and the second state can each be generated based on the second public key and the first state previously generated on Device B. On Device A, the second refresh key and the second state can each be generated based on the second private key previously generated on Device A, the second epoch key received from Device B, and the first state previously generated on Device A. With the second state and second refresh key in hand on each device, Device A and B can independently generate a third and a fourth message key in a similar manner as the first and second message keys were generated as described above.&lt;/p&gt;
&lt;p id=&quot;p-0013&quot;&gt;Further, before Device B transmits the second epoch key and the first public key to Device A, the first message key and/or second message key can be deleted from Device B.&lt;/p&gt;
&lt;p id=&quot;p-0014&quot;&gt;Referring to the first message transmitted by Device A, Device A can generate a first ciphertext including a header, and the first ciphertext can be transmitted to Device B. The header can be used by Device B to verify that the first message key is the appropriate message key to decrypt the first ciphertext. The header can be generated by Device A to include a first message index associated with the first message key and a first epoch index associated with the first state. Device B can verify the first message key based on the first message index and the first epoch index.&lt;/p&gt;
&lt;p id=&quot;p-0015&quot;&gt;Additionally, or alternatively, Device A can generate the first header to include the first epoch key and second public key, and the first epoch key and the second public key can be transmitted to Device B in the first header of the first ciphertext.&lt;/p&gt;
&lt;p id=&quot;p-0016&quot;&gt;Referring to the generation of the first message key on each of Device A and Device B, a first shared key can be generated independently on each device as an intermediary step performed before generating the first message key. On each of Device A and Device B, the first refresh key and the first state can be generated based on the first shared key and the root state. On Device A, the first shared key can be generated based on the first public key, and on Device B, the first shared key can be generated based on the first private key and the first epoch key.&lt;/p&gt;
&lt;p id=&quot;p-0017&quot;&gt;Each of Device A and Device B can have a respective pseudo-random function. Independently on each device, the first shared key and the root key can be provided as inputs to the pseudo-random function, and the first state and the first refresh keys can be generated at outputs of the pseudo-random function.&lt;/p&gt;
&lt;p id=&quot;p-0018&quot;&gt;Referring to the root state stored on Device A and Device B, the root state can be generated independently on each device based on a root key received by each device. Independently on each of Device A and Device B, the root key can be provided to the respective pseudo-random function and the root state can be generated as an output from each respective pseudo-random function.&lt;/p&gt;
&lt;p id=&quot;p-0019&quot;&gt;Device A and Device B can each have a respective random number generator that can be used to generate sequences of message keys for each epoch. Referring to the generation of the first and second message keys, the random number generator can be used on each device to independently generate the first message key and the second message key. On each of Device A and Device B, the respective random number generator can be initialized with the first state, and the first refresh key can be provided as an input to the random number generator. The first message key can be generated by the random number generator initialized in the first state and based on the first refresh key. The first message key can be provided as an input to the random number generator initialized with the first state to produce the second message key.&lt;/p&gt;
&lt;p id=&quot;p-0020&quot;&gt;Alternatively, each respective random number generator and respective pseudo-random function can be used to generate a sequence of message keys for each epoch. On each device, the first message key can be generated like as described above. The second message key can be generated not based on the first message key, but instead by providing the first state as an input to the pseudo-random function, generating a second state as an output to the pseudo-random function, initializing the random number generator with the second state, and generating the second message with the random number generator initialized in the second state.&lt;/p&gt;
&lt;p id=&quot;p-0021&quot;&gt;Another example method of exchanging messages can include one or more of the following steps presented in no particular order, and the method can include additional steps not included here. Two communication devices, “Device A” and “Device B”, can be provided that are capable of transmitting data to each other via an end-to-end encryption protocol. Data structures can be provided to facilitate the end-to-end encryption including a first asymmetric key pair having a first public key and a first private key. The first public key can be stored on Device A, and the first private key can be stored on Device B. Each of Device A and Device B can have stored thereon a respective pseudo-random generator.&lt;/p&gt;
&lt;p id=&quot;p-0022&quot;&gt;A first epoch key can be generated on Device A based on the first public key, and Device A can also generate a second asymmetric key pair having a second private key and a second public key. The first epoch key and the second public key can be transmitted by Device A and received by Device B. A first message key and a second message key can be generated independently on each of Device A and Device B. On Device A, the first message key can be based on the first public key. On Device B, the first message key can be based on the first private key and the first epoch key. On each device, the first message key can be provided as an input to the respective pseudo-random number generator and the second message key can be generated as output of each pseudo-random number generator.&lt;/p&gt;
&lt;p id=&quot;p-0023&quot;&gt;Device A can encrypt a first message with the first message key and a second message with the second message key and transmit a first epoch that includes the first encrypted message and the second encrypted message. Device B can receive the first epoch and decrypt the first encrypted message with the first message key and the second encrypted message with the second message key.&lt;/p&gt;
&lt;p id=&quot;p-0024&quot;&gt;When Device B begins to respond to Device A, Device B can generate a second epoch key based on the second public key previously transmitted by Device A, and Device B can generate a third asymmetric key pair having a third private key and a third public key. The second epoch key and the third public key can be transmitted by Device B and received by Device A. Device A and Device B can independently generate a third message key. On Device B, the third message key can be based on the second public key. On Device A, the third message key can be based on the second private key and the second epoch key.&lt;/p&gt;
&lt;p id=&quot;p-0025&quot;&gt;Device B can encrypt a third message with the third message key and transmit a second epoch including the third encrypted message. Prior to transmitting the second epoch, Device B can delete the first message key and the second message key from the first epoch. Device A can receive the second epoch and decrypt the third encrypted message with the third message key.&lt;/p&gt;
&lt;p id=&quot;p-0026&quot;&gt;Multiple epochs, each epoch including one or more encrypted messages, can be transmitted. For each epoch, all transmitted encrypted messages in the epoch can be transmitted from only one of Device A or Device B. Epochs can be transmitted from each of Device A and Device B in an alternating fashion such that Device A transmits every odd epoch and Device B transmits every even epoch.&lt;/p&gt;
&lt;p id=&quot;p-0027&quot;&gt;Referring to the first message in the example method, a first header can be generated on Device A, Device A can generate a first ciphertext including the encrypted header and the first encrypted message, the header in plaintext can be appended to the first ciphertext, and Device A can transmit the first ciphertext and plaintext header. Device B can receive the first ciphertext and plaintext header and authenticate the ciphertext based on the plaintext header.&lt;/p&gt;
&lt;p id=&quot;p-0028&quot;&gt;Device A can generate a message index, and the first header can include the message index. Device B can generate an nth message key based on the message index.&lt;/p&gt;
&lt;p id=&quot;p-0029&quot;&gt;A root state can be provided at each of Device A and Device B. The respective pseudo-random number generator on each of Device A and Device B can be initialized based on the root state. An updated state can be generated on each of Device A and Device B based on the root state, and the pseudo-random number generator can be reinitialized based on the updated state.&lt;/p&gt;
&lt;p id=&quot;p-0030&quot;&gt;A first shared key can be generated independently on each of Device A and Device B. On Device A the first shared key can be generated based on the first public key, and on Device B the first shared key can be generated based on the first private key and the first epoch key. A refresh key and a first state can each be generated independently on each of Device A and Device B, each based on the shared key and the root state. To generate the first message key on each device, the pseudo-random number generator can be initialized to the first state, the first refresh key can be provided as an input to the initialized pseudo-random number generator, and the first message key can be generated as an output of the pseudo-random number generator.&lt;/p&gt;
&lt;h5 id=&quot;description-brief-description-of-the-drawings&quot;&gt;BRIEF DESCRIPTION OF THE DRAWINGS&lt;/h5&gt;
&lt;p id=&quot;p-0031&quot;&gt;The above and further aspects of this invention are further discussed with reference to the following description in conjunction with the accompanying drawings, in which like numerals indicate like structural elements and features in various figures. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating principles of the invention. The figures depict one or more implementations of the inventive devices, by way of example only, not by way of limitation.&lt;/p&gt;
&lt;p id=&quot;p-0032&quot;&gt;FIG. 1 is a flow diagram illustrating, example functional blocks, data structures, and method steps that can be used to send messages from a first device to a second device according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0033&quot;&gt;FIG. 2 is a flow diagram illustrating an example implementation including iterative calls to a pseudo-random number generator to produce a sequence of message keys according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0034&quot;&gt;FIG. 3 is a flow diagram outlining example functional blocks, data structures, and method steps that can be included in a sending ratchet according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0035&quot;&gt;FIG. 4 is a flow diagram outlining example functional blocks, data structures, and method steps that can be included in a receiving ratchet according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0036&quot;&gt;FIG. 5 is a flow diagram illustrating initialization of a CKA according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0037&quot;&gt;FIG. 6 is a flow diagram illustrating the creation of a shared key on a sending and a receiving device based on an asymmetric key pair according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0038&quot;&gt;FIG. 7 is a flow diagram illustrating an example exchange of public keys and propagation of private keys to generate a symmetric key for subsequent epoch ratchets according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0039&quot;&gt;FIG. 8 is a flow diagram illustrating functionality an example CKA functional block from the perspective of a sending device according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0040&quot;&gt;FIG. 9 is a flow diagram illustrating functionality of an example CKA functional block from the perspective of a receiving device according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0041&quot;&gt;FIGS. 10, 11, 12, and 13 are flow diagrams illustrating initialization, seeding, and progression of a PRG according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0042&quot;&gt;FIG. 14 is a flow diagram illustrating the use of epochs as a message grouping mechanism according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0043&quot;&gt;FIG. 15 is a flow diagram illustrating example functional blocks, data structures, and method steps for sending messages from a first device to a second device where each message includes a header according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0044&quot;&gt;FIG. 16 is a flow diagram illustrating example functional blocks, data structures, and method steps that can be used to initialize a PRG and an index for counting messages in an epoch according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0045&quot;&gt;FIG. 17 is a flow diagram illustrating example functional blocks, data structures, and method steps for sending a message that includes a header from the perspective of a sending device according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0046&quot;&gt;FIG. 18 is a flow diagram illustrating example functional blocks, data structure, and method steps for receiving a message that includes a header from the perspective of a receiving device according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0047&quot;&gt;FIG. 19 is a flow diagram illustrating example functional blocks, data structures, and method steps for performing a ratchet according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0048&quot;&gt;FIG. 20 is a flow diagram illustrating example functional blocks, data structures, and method steps for performing a ratchet according to aspects of the present invention;&lt;/p&gt;
&lt;p id=&quot;p-0049&quot;&gt;FIG. 21 is a flow diagram illustrating message recovery according to aspects of the present invention; and&lt;/p&gt;
&lt;p id=&quot;p-0050&quot;&gt;FIGS. 22A, 22B, and 22C are illustrations of example system environments that can be used to facilitate certain aspects of the present invention.&lt;/p&gt;
&lt;h5 id=&quot;description-detailed-description&quot;&gt;DETAILED DESCRIPTION&lt;/h5&gt;
</description>
<pubDate>Sat, 04 Jan 2020 10:06:34 +0000</pubDate>
<dc:creator>DyslexicAtheist</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://patentswarm.com/patents/US10412063B1</dc:identifier>
</item>
<item>
<title>A serverless email server on AWS using S3 and SES</title>
<link>https://github.com/0x4447/0x4447_product_s3_email</link>
<guid isPermaLink="true" >https://github.com/0x4447/0x4447_product_s3_email</guid>
<description>&lt;p&gt;This stack was created out of frustration due to the fact that to this day there's no easy way to have a full email server without the overhead of installing and configuring all servers needed to handle incoming and outgoing messages. We wanted something simple, with no interface and no server management, so we came up with S3-Email. This included AWS SES as our email server (receive and send) and S3 as our database and interface. Then we tied everything together with a bit of code via AWS Lambda.&lt;/p&gt;
&lt;p&gt;The result is an unmanaged email server with unlimited email addresses that also offers the benefit of easily organizing messages by adding the &lt;code&gt;+&lt;/code&gt; character to the email names. The &lt;code&gt;+&lt;/code&gt; is converted to a &lt;code&gt;/&lt;/code&gt;, which correlates to an object path in S3.&lt;/p&gt;
&lt;h3&gt;Endless email addresses&lt;/h3&gt;
&lt;p&gt;Once you add and confirm your domain with SES, you can put any string you want in front of the &lt;code&gt;@&lt;/code&gt;, as long as it conforms to the email address standard. This means that you'll have endless email addresses at your disposal, and you'll be able to organize your life in a way never possible before. For example, you can give each service you sign up for its own special email:&lt;/p&gt;
&lt;h3&gt;Organizing with a +&lt;/h3&gt;
&lt;p&gt;With that said, you can organize your emails with the &lt;code&gt;+&lt;/code&gt; character in this way:&lt;/p&gt;
&lt;p&gt;When dealing with clients we came up with this folder structure:&lt;/p&gt;
&lt;p&gt;For all sorts of alerts we like to group them like this&lt;/p&gt;
&lt;p&gt;This groups all emails in the corresponding folder by replacing the &lt;code&gt;+&lt;/code&gt; with a &lt;code&gt;/&lt;/code&gt; character which creates a folder structure in S3. The possibilities are endless.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Basically, receive and send email with some skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This stack is available to anyone at no cost, but on an as-is basis. 0x4447 LLC is not responsible for damages or costs of any kind that may occur when you use the stack. You take full responsibility when you use it.&lt;/p&gt;

&lt;a href=&quot;https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=zer0x4447-S3-Email&amp;amp;templateURL=https://s3.amazonaws.com/0x4447-drive-cloudformation/s3-email.json&quot; rel=&quot;nofollow&quot;&gt;&lt;img align=&quot;left&quot; src=&quot;https://camo.githubusercontent.com/210bb3bfeebe0dd2b4db57ef83837273e1a51891/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f636c6f7564666f726d6174696f6e2d6578616d706c65732f636c6f7564666f726d6174696f6e2d6c61756e63682d737461636b2e706e67&quot; data-canonical-src=&quot;https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png&quot;/&gt;&lt;/a&gt;
&lt;p&gt;All you need to do to deploy this stack is click the button to the left and follow the instructions that CloudFormation provides in your AWS Dashboard. Alternatively you can download the CF file from &lt;a href=&quot;https://s3.amazonaws.com/0x4447-drive-cloudformation/s3-email.json&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/0x4447/0x4447-product-s3-email/assets/diagram.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/0x4447/0x4447-product-s3-email/assets/diagram.png&quot; alt=&quot;S3-Email Diagram&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The stack takes advantage of AWS S3, AWS SES, AWS Lambda, and the AWS Trigger system to tie everything together. You'll get:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1x SES Rule Sets&lt;/li&gt;
&lt;li&gt;2x S3 Bucket
&lt;ul&gt;&lt;li&gt;1x for CodePipeline to store artifacts&lt;/li&gt;
&lt;li&gt;1x for the emails&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;3x CodePipelines&lt;/li&gt;
&lt;li&gt;3x CodeBuilds&lt;/li&gt;
&lt;li&gt;3x Lambdas&lt;/li&gt;
&lt;li&gt;1x IAM Group&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All project resources can be found &lt;a href=&quot;https://github.com/topics/0x4447-product-s3-email&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The stack is set up in a such a way that any time new code is pushed to a selected branch, the CodePipeline picks up the change and updates the Lambda for you. These are the available branches:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;: the latest stable code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;development&lt;/strong&gt;: unstable code that we test in our test environment - we don't recommend that you use this branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that when you deploy, everything may not work right out of the box.&lt;/p&gt;
&lt;h3&gt;Confirm to SES that you own the domain&lt;/h3&gt;
&lt;p&gt;You have to add your domain and confirm that you own it. Follow these steps to do so:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Go to the SES Dashboard.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Domains&lt;/code&gt; on the left side menu.&lt;/li&gt;
&lt;li&gt;Click the blue &lt;code&gt;Verify a New Domain&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Type your domain in the modal and select &lt;code&gt;Generate DKIM Settings&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The next window displays all information needed to configure your domain.&lt;/li&gt;
&lt;li&gt;Once finisheds, you'll wait some time for the domain to switch from a &lt;code&gt;pending verification&lt;/code&gt; status to a &lt;code&gt;verified&lt;/code&gt; status.&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Enable SES Rule Sets&lt;/h3&gt;
&lt;p&gt;Deployment creates SES &lt;code&gt;rule sets&lt;/code&gt;. This should be enabled by default on fresh AWS accounts, but on accounts where you already had some rules, this won't work. This behavior is a known bug by AWS in CloudFormation. Taking the following steps will enable the rule:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Go to the SES Dashboard.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Rule Sets&lt;/code&gt; on the left side menu.&lt;/li&gt;
&lt;li&gt;Check &lt;code&gt;0x4447_S3_Email&lt;/code&gt; on the &lt;code&gt;Inactive Rule Sets&lt;/code&gt; tab.&lt;/li&gt;
&lt;li&gt;Hit &lt;code&gt;Set as Active Rule Set&lt;/code&gt; to activate the rule.&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Attach user to the IAM Group&lt;/h3&gt;
&lt;p&gt;After the stack is deployed you'll get a IAM Group with a policy attached that will give a user using it the bare minimum to access to the S3-Bucket to read and create emails.&lt;/p&gt;

&lt;p&gt;There are two major limitations with SES:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;For security reasons, AWS defaults to 200 emails sent per 24 hour period at a rate of 1 email/second. If you need to send more than that, you'll need to ask AWS to increase your limit.&lt;/li&gt;
&lt;li&gt;By default, you can't send emails to unverified addresses. If you'd like to be able to send (as opposed to just receiving), you'll need to reach out to AWS to remove this limitation from your account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Receiving email&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;An email comes to SES and and it gets stored in &lt;code&gt;TMP&lt;/code&gt; S3 folder.&lt;/li&gt;
&lt;li&gt;S3 will trigger the Inbound Lambda Function which will organize the email based on the &lt;code&gt;to&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt; fields. In addition to that, the Lambda will read the domain(s) added to SES, and will use that data to determine if the email should land in the &lt;code&gt;Inbox&lt;/code&gt; or &lt;code&gt;Sent&lt;/code&gt; folder. If the &lt;code&gt;to&lt;/code&gt; fields contains the domain from SES, it goes to the &lt;code&gt;Inbox&lt;/code&gt;, if not, it is assumed the email was sent out.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Inbox&lt;/code&gt; or &lt;code&gt;Sent&lt;/code&gt; folder triggers another Lambda function that loads the raw email, converts it to a &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.txt&lt;/code&gt; file, and stores it alongside the original message, while storing any attachments in the &lt;code&gt;attachments&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In addition to this flow, when a new email comes in, a copy of it will be saved in the &lt;code&gt;Today&lt;/code&gt; folder to show you which emails are new. The S3 bucket has a Life Cycle Policy and will delete any email older than one day from the &lt;code&gt;Today&lt;/code&gt; folder. This way you always know what's new.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sending email&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create a properly formatted JSON file (see the following section).&lt;/li&gt;
&lt;li&gt;Save the file to the path &lt;code&gt;TMP/email_out/json&lt;/code&gt;. The file name and extension are irrelevant as long as the content is text and JSON formatted.&lt;/li&gt;
&lt;li&gt;This action triggers a Lambda that generates a raw email, sends it out using SES, and saves the raw message to the &lt;code&gt;Sent&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Sent&lt;/code&gt; folder triggers another Lambda function that loads the raw email, converts it to a &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.txt&lt;/code&gt; file, and stores it alongside the original message.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This flow was designed to take advantage of the S3 trigger system and break each action into a small Lambda.&lt;/p&gt;
&lt;h3&gt;How to create an email message&lt;/h3&gt;
&lt;p&gt;Create a custom JSON file, then upload it to the &lt;code&gt;TMP/email_out/json&lt;/code&gt; folder (if you don't have the folder structure yet, set it up). The JSON structure should look like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{
        &quot;from&quot;: &quot;name@example.com&quot;,
        &quot;to&quot;: &quot;name@example.com&quot;,
        &quot;subject&quot;: &quot;From SES&quot;,
        &quot;html&quot;: &quot;Write a nice message to whoever you are sending this message to.&quot;,
        &quot;text&quot;: &quot;Write a nice message to whoever you are sending this message to.&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Remember that the &lt;code&gt;from&lt;/code&gt; field must contain the domain you added to SES. You won't be able to send emails from unverified domains.&lt;/p&gt;

&lt;p&gt;A bonus feature of this stack is the possibility to process manually uploaded emails. This is possible thanks to the event driven nature of the stack. Just upload the raw email in the &lt;code&gt;TMP/email_in&lt;/code&gt; folder, and your emails will be processed automatically.&lt;/p&gt;
&lt;p&gt;The only prerequisite is that the email file needs to be the raw representation of the email itself. For example: files ending in &lt;code&gt;.eml&lt;/code&gt; are nothing more than a txt file with the raw content of the email.&lt;/p&gt;
&lt;p&gt;Which means you can just upload those files straight up to the S3 bucket.&lt;/p&gt;

&lt;p&gt;All resources deployed via this stack will potentially cost you money. But you'd have to do the following for this to happen:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Invoke Lambdas over 1,000,000 times a month&lt;/li&gt;
&lt;li&gt;Send and receive over 1000 emails a month&lt;/li&gt;
&lt;li&gt;Perform over 10,000 Get and Put operations and over 2000 Delete operations in your S3 Bucket&lt;/li&gt;
&lt;li&gt;Exceed 100 build minutes on CodeBuild&lt;/li&gt;
&lt;li&gt;$1 per active CodePipeline (must run at least once a month to be considered active)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The only payment you'll encounter from Day One is an S3 storage fee for emails and CodePipeline artifacts.&lt;/p&gt;

&lt;p&gt;When you want to deploy the stack, the only file you should be interested in is the &lt;code&gt;CloudFormation.json&lt;/code&gt; file. If you'd like to modify the stack, we recommend that you use the &lt;a href=&quot;https://github.com/0x4447/0x4447-cli-node-grapes&quot;&gt;Grapes framework&lt;/a&gt;, which was designed to make it easier to work with the CloudFormation file. If you'd like to keep your sanity, never edit the main CF file 🤪.&lt;/p&gt;

&lt;p&gt;If you enjoyed this project, please consider giving it a 🌟. And check out our &lt;a href=&quot;https://github.com/0x4447&quot;&gt;0x4447 GitHub account&lt;/a&gt;, where you'll find additional resources you might find useful or interesting.&lt;/p&gt;
&lt;h2&gt;Sponsor 🎊&lt;/h2&gt;
&lt;p&gt;This project is brought to you by 0x4447 LLC, a software company specializing in building custom solutions on top of AWS. Follow this link to learn more: &lt;a href=&quot;https://0x4447.com&quot; rel=&quot;nofollow&quot;&gt;https://0x4447.com&lt;/a&gt;. Alternatively, send an email to &lt;a href=&quot;mailto:hello@0x4447.email?Subject=Hello%20From%20Repo&amp;amp;Body=Hi%2C%0A%0AMy%20name%20is%20NAME%2C%20and%20I%27d%20like%20to%20get%20in%20touch%20with%20someone%20at%200x4447.%0A%0AI%27d%20like%20to%20discuss%20the%20following%20topics%3A%0A%0A-%20LIST_OF_TOPICS_TO_DISCUSS%0A%0ASome%20useful%20information%3A%0A%0A-%20My%20full%20name%20is%3A%20FIRST_NAME%20LAST_NAME%0A-%20My%20time%20zone%20is%3A%20TIME_ZONE%0A-%20My%20working%20hours%20are%20from%3A%20TIME%20till%20TIME%0A-%20My%20company%20name%20is%3A%20COMPANY%20NAME%0A-%20My%20company%20website%20is%3A%20https%3A%2F%2F%0A%0ABest%20regards.&quot;&gt;hello@0x4447.email&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jan 2020 09:55:01 +0000</pubDate>
<dc:creator>mzehrer</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/24189473?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>0x4447/0x4447_product_s3_email</og:title>
<og:url>https://github.com/0x4447/0x4447_product_s3_email</og:url>
<og:description>📫 A serverless email server on AWS using S3 and SES - 0x4447/0x4447_product_s3_email</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/0x4447/0x4447_product_s3_email</dc:identifier>
</item>
<item>
<title>U.S. government limits exports of artificial intelligence software</title>
<link>https://www.reuters.com/article/us-usa-artificial-intelligence/u-s-government-limits-exports-of-artificial-intelligence-software-idUSKBN1Z21PT</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-usa-artificial-intelligence/u-s-government-limits-exports-of-artificial-intelligence-software-idUSKBN1Z21PT</guid>
<description>&lt;p&gt;WASHINGTON (Reuters) - The Trump administration took measures on Friday to crimp exports of artificial intelligence software as part of a bid to keep sensitive technologies out of the hands of rival powers like China.&lt;/p&gt;
&lt;p&gt;Under a new rule which goes into effect on Monday, companies that export certain types of geospatial imagery software from the United States must apply for a license to send it overseas except when it is being shipped to Canada.&lt;/p&gt;
&lt;p&gt;“They want to keep American companies from helping the Chinese make better AI products that can help their military,” said James Lewis, a technology expert with the Washington-based Center for Strategic and International Studies think tank.&lt;/p&gt;
&lt;p&gt;The rule will likely be welcomed by industry, Lewis said, because it had feared a much broader crackdown on exports of most artificial intelligence hardware and software&lt;/p&gt;
&lt;p&gt;The measure covers software that could be used by sensors, drones, and satellites to automate the process of identifying targets for both military and civilian ends, Lewis said, noting it was a boon for industry, which feared a much broader crackdown on exports of AI hardware and software.&lt;/p&gt;
&lt;p&gt;The measure is the first to be finalized by the Commerce Department under a mandate from a 2018 law, which tasked the agency with writing rules to boost oversight of exports of sensitive technology to adversaries like China, for economic and security reasons.&lt;/p&gt;
&lt;p&gt;Reuters first reported that the agency was finalizing a set of narrow rules to limit such exports in a boon to U.S. industry that feared a much tougher crackdown on sales abroad.&lt;/p&gt;
&lt;p&gt;The rule will go into effect in the United States alone, but U.S. authorities could later submit it to international bodies to try to create a level playing field globally.&lt;/p&gt;
&lt;p&gt;It comes amid growing frustration from Republican and Democratic lawmakers over the slow roll-out of rules toughening up export controls, with Senate Minority Leader Chuck Schumer, a Democrat, urging the Commerce Department to speed up the process.&lt;/p&gt;
&lt;p&gt;“While the government believes that it is in the national security interests of the United States to immediately implement these controls, it also wants to provide the interested public with an opportunity to comment on the control of new items,” the rule release said.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting by Alexandra Alper; Editing by Alistair Bell&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 04 Jan 2020 08:02:49 +0000</pubDate>
<dc:creator>ckcheng</dc:creator>
<og:title>U.S. government limits exports of artificial intelligence software</og:title>
<og:url>https://www.reuters.com/article/us-usa-artificial-intelligence-idUSKBN1Z21PT</og:url>
<og:type>article</og:type>
<og:description>The Trump administration took measures on Friday to crimp exports of artificial ...</og:description>
<og:image>https://s4.reutersmedia.net/resources_v2/images/rcom-default.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-usa-artificial-intelligence/u-s-government-limits-exports-of-artificial-intelligence-software-idUSKBN1Z21PT</dc:identifier>
</item>
<item>
<title>How the CIA Overthrew Iran&amp;#039;s Democracy in Four Days in 1953 (2019)</title>
<link>https://www.npr.org/2019/01/31/690363402/how-the-cia-overthrew-irans-democracy-in-four-days</link>
<guid isPermaLink="true" >https://www.npr.org/2019/01/31/690363402/how-the-cia-overthrew-irans-democracy-in-four-days</guid>
<description>&lt;div id=&quot;res691398383&quot; class=&quot;bucketwrap image large&quot;&gt;
&lt;div class=&quot;imagewrap&quot; data-crop-type=&quot;&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/02/04/ap_5308210121-a1d462daceb12ebd55cdaf2a96058ced6de3b476-s1100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/02/04/ap_5308210121-a1d462daceb12ebd55cdaf2a96058ced6de3b476-s1100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;credit-caption&quot;&gt;
&lt;div class=&quot;caption-wrap&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;caption&quot; aria-label=&quot;Image caption&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;Aug. 21, 1953: A resident of Tehran washes &quot;Yankee Go Home&quot; from a wall in the capital city of Iran. The new Prime Minister Fazlollah Zahedi requested the cleanup after the overthrow of his predecessor. &lt;strong class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AP&lt;/strong&gt; &lt;strong class=&quot;hide-caption&quot;&gt;hide caption&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;strong class=&quot;toggle-caption&quot;&gt;toggle caption&lt;/strong&gt;&lt;/div&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AP&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;enlarge_measure&quot;&gt;
&lt;div class=&quot;img_wrap&quot;&gt;&lt;img data-original=&quot;https://media.npr.org/assets/img/2019/02/04/ap_5308210121-a1d462daceb12ebd55cdaf2a96058ced6de3b476-s1200.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enlarge_html&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;image_data&quot; readability=&quot;10&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;Aug. 21, 1953: A resident of Tehran washes &quot;Yankee Go Home&quot; from a wall in the capital city of Iran. The new Prime Minister Fazlollah Zahedi requested the cleanup after the overthrow of his predecessor.&lt;/p&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AP&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On Aug. 19, 2013, the CIA publicly admitted for the first time its involvement in the 1953 coup against Iran's elected Prime Minister Mohammad Mossadegh.&lt;/p&gt;
&lt;div id=&quot;res691388915&quot; class=&quot;bucketwrap image medium&quot;&gt;
&lt;div class=&quot;imagewrap&quot; data-crop-type=&quot;&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/02/04/gettyimages-3271378_custom-2805d4ace4c0b69762287f95033a4264cb0af2c7-s800-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/02/04/gettyimages-3271378_custom-2805d4ace4c0b69762287f95033a4264cb0af2c7-s800.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;credit-caption&quot;&gt;
&lt;div class=&quot;caption-wrap&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;caption&quot; aria-label=&quot;Image caption&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;1952: Iranian Prime Minister Mohammad Mossadegh. &lt;strong class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Keystone/Getty Images&lt;/strong&gt; &lt;strong class=&quot;hide-caption&quot;&gt;hide caption&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;strong class=&quot;toggle-caption&quot;&gt;toggle caption&lt;/strong&gt;&lt;/div&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Keystone/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;enlarge_measure&quot;&gt;
&lt;div class=&quot;img_wrap&quot;&gt;&lt;img data-original=&quot;https://media.npr.org/assets/img/2019/02/04/gettyimages-3271378_custom-2805d4ace4c0b69762287f95033a4264cb0af2c7-s1400.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enlarge_html&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;image_data&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;1952: Iranian Prime Minister Mohammad Mossadegh.&lt;/p&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Keystone/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;a href=&quot;https://nsarchive2.gwu.edu/NSAEBB/NSAEBB435/&quot;&gt;documents&lt;/a&gt; provided details of the CIA's plan at the time, which was led by senior officer Kermit Roosevelt Jr., the grandson of U.S. President Theodore Roosevelt. Over the course of four days in August 1953, Roosevelt would orchestrate not one, but two attempts to destabilize the government of Iran, forever changing the relationship between the country and the U.S. In this episode, we go back to retrace what happened in the inaugural episode of NPR's new history podcast, &lt;a href=&quot;https://www.npr.org/podcasts/510333/throughline&quot;&gt;Throughline&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mohammad Mossadegh was a beloved figure in Iran. During his tenure, he introduced a range of social and economic policies, the most significant being the nationalization of the Iranian oil industry. Great Britain had controlled Iran's oil for decades through the Anglo-Iranian Oil Co. After months of talks the prime minister broke off negotiations and denied the British any further involvement in Iran's oil industry. Britain then appealed to the United States for help, which eventually led the CIA to orchestrate the overthrow of Mossadegh and restore power to Mohammad Reza Pahlavi, the last Shah of Iran.&lt;/p&gt;
&lt;div id=&quot;res691407766&quot; class=&quot;bucketwrap image large&quot;&gt;
&lt;div class=&quot;imagewrap&quot; data-crop-type=&quot;&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/02/04/gettyimages-915772744_wide-0f6ffc98c30320ebd2f59b6e9d30f79210111639-s1100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/02/04/gettyimages-915772744_wide-0f6ffc98c30320ebd2f59b6e9d30f79210111639-s1100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;credit-caption&quot;&gt;
&lt;div class=&quot;caption-wrap&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;caption&quot; aria-label=&quot;Image caption&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;August 19, 1953: Massive protests broke out across Iran, leaving almost 300 dead in firefights in the streets of Tehran. Iranian Prime Minister Mohammad Mossadegh was soon overthrown in a coup orchestrated by the CIA and British intelligence. The Shah was reinstalled as Iran's leader. &lt;strong class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AFP/Getty Images&lt;/strong&gt; &lt;strong class=&quot;hide-caption&quot;&gt;hide caption&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;strong class=&quot;toggle-caption&quot;&gt;toggle caption&lt;/strong&gt;&lt;/div&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AFP/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;enlarge_measure&quot;&gt;
&lt;div class=&quot;img_wrap&quot;&gt;&lt;img data-original=&quot;https://media.npr.org/assets/img/2019/02/04/gettyimages-915772744_wide-0f6ffc98c30320ebd2f59b6e9d30f79210111639-s1200.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enlarge_html&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;image_data&quot; readability=&quot;11&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;August 19, 1953: Massive protests broke out across Iran, leaving almost 300 dead in firefights in the streets of Tehran. Iranian Prime Minister Mohammad Mossadegh was soon overthrown in a coup orchestrated by the CIA and British intelligence. The Shah was reinstalled as Iran's leader.&lt;/p&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AFP/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to Stephen Kinzer, author of the book &lt;em&gt;All the Shah's Men&lt;/em&gt;, Roosevelt quickly seized control of the Iranian press by buying them off with bribes and circulating anti-Mossadegh propaganda. He recruited allies among the Islamic clergy, and he convinced the shah that Mossadegh was a threat. The last step entailed a dramatic attempt to apprehend Mossadegh at his house in the middle of the night. But the coup failed. Mossadegh learned of it and fought back. The next morning, he announced victory over the radio.&lt;/p&gt;
&lt;aside id=&quot;ad-backstage-wrap&quot; aria-label=&quot;advertisement&quot;&gt;
&lt;/aside&gt;&lt;div id=&quot;res691401324&quot; class=&quot;bucketwrap image medium&quot;&gt;
&lt;div class=&quot;imagewrap&quot; data-crop-type=&quot;&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/02/04/ap_5001010304_vert-e1b2496e86f2c6b0559b16b3c08425abc9048cea-s800-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/02/04/ap_5001010304_vert-e1b2496e86f2c6b0559b16b3c08425abc9048cea-s800.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;credit-caption&quot;&gt;
&lt;div class=&quot;caption-wrap&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;caption&quot; aria-label=&quot;Image caption&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;A 1950 photo of Kermit Roosevelt Jr., grandson of U.S. President Theodore Roosevelt, and a former Central Intelligence Agency official. &lt;strong class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AP&lt;/strong&gt; &lt;strong class=&quot;hide-caption&quot;&gt;hide caption&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;strong class=&quot;toggle-caption&quot;&gt;toggle caption&lt;/strong&gt;&lt;/div&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AP&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;enlarge_measure&quot;&gt;
&lt;div class=&quot;img_wrap&quot;&gt;&lt;img data-original=&quot;https://media.npr.org/assets/img/2019/02/04/ap_5001010304_vert-e1b2496e86f2c6b0559b16b3c08425abc9048cea-s1400.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enlarge_html&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;image_data&quot; readability=&quot;10&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;A 1950 photo of Kermit Roosevelt Jr., grandson of U.S. President Theodore Roosevelt, and a former Central Intelligence Agency official.&lt;/p&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AP&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mossadegh thought he was in the clear, but Roosevelt hadn't given up. He orchestrated a second coup, which succeeded. Mossadegh was placed on trial and spent his life under house arrest. The shah returned to power and ruled for another 25 years until the 1979 Iranian Revolution. The 1953 coup was later invoked by students and the political class in Iran as a justification for overthrowing the shah.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you would like to read more on the 1953 coup, here's a list:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We love to hear from our listeners! Tweet at us&lt;/em&gt; &lt;a href=&quot;https://twitter.com/throughlineNPR&quot;&gt;&lt;em&gt;@throughlineNPR&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, send us an&lt;/em&gt; &lt;a href=&quot;mailto:throughline@npr.org&quot;&gt;&lt;em&gt;email&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, or leave us a voicemail at (872) 588-8805.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jan 2020 06:35:46 +0000</pubDate>
<dc:creator>pilsner</dc:creator>
<og:title>How The CIA Overthrew Iran's Democracy In 4 Days</og:title>
<og:url>https://www.npr.org/2019/01/31/690363402/how-the-cia-overthrew-irans-democracy-in-four-days</og:url>
<og:type>article</og:type>
<og:description>It's no secret that Iran and the U.S. have a history of animosity toward each other. But when and how did it begin? This week we look back at four days in August 1953, when the CIA orchestrated a coup of Iran's elected Prime Minister Mohammad Mossadegh.</og:description>
<og:image>https://media.npr.org/assets/img/2019/01/31/yankee-go-home_wide-dc18c8da4e329e05d115fa1a0667a58004f10f1e.jpg?s=1400</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.npr.org/2019/01/31/690363402/how-the-cia-overthrew-irans-democracy-in-four-days</dc:identifier>
</item>
<item>
<title>Machine learning is fundamentally conservative</title>
<link>http://blog.lareviewofbooks.org/provocations/neophobic-conservative-ai-overlords-want-everything-stay/</link>
<guid isPermaLink="true" >http://blog.lareviewofbooks.org/provocations/neophobic-conservative-ai-overlords-want-everything-stay/</guid>
<description>&lt;p&gt;I’ve been a technology activist for decades now, and I’ve read innumerable profound and enduring critiques of technology. In recent years, though, artificial intelligence  has come under more fire than most developing trends. The pronouncements, hype, and foolishness surrounding it have risen to heights that stand out even by the outlandish standards of tech absurdity. Like me, you’ve probably encountered some of the better, smarter critiques along with all the silliness and insanity. Some of the greats are Cathy O’Neil’s outstanding 2016 book &lt;em&gt;Weapons of Math Destruction&lt;/em&gt;, and the excellent research reports from the nonprofit AI Now institute, and also Patrick Ball’s spectacular papers published through the essential and dreadfully under-resourced Human Rights Data Analysis Group.&lt;/p&gt;
&lt;p&gt;But of all these wonderful, smart, sharp analyses, none has left as enduring an impression as Molly Sauter’s odd and lyrical 2017 essay “Instant Recall,” published in the online magazine &lt;em&gt;Real Life&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sauter’s insight in that essay: machine learning is fundamentally &lt;em&gt;conservative&lt;/em&gt;, and it hates change. If you start a text message to your partner with “Hey darling,” the next time you start typing a message to them, “Hey” will beget an autosuggestion of “darling” as the next word, even if this time you are announcing a break-up. If you type a word or phrase you’ve never typed before, autosuggest will prompt you with the statistically most common next phrase from all users (I made a small internet storm in July 2018 when I documented autocomplete’s suggestion in my message to the family babysitter, which paired “Can you sit” with “on my face and”).&lt;/p&gt;
&lt;p&gt;This conservativeness permeates every system of algorithmic inference: search for a refrigerator or a pair of shoes and they will follow you around the web as machine learning systems “re-target” you while you move from place to place, even after you’ve bought the fridge or the shoes. Spend some time researching white nationalism or flat earth conspiracies and all your YouTube recommendations will try to reinforce your “interest.” Follow a person on Twitter and you will be inundated with similar people to follow. Machine learning can produce very good accounts of correlation (“this person has that person’s address in their address-book and most of the time that means these people are friends”) but not causation (which is why Facebook constantly suggests that survivors of stalking follow their tormentors who, naturally, have their targets’ addresses in their address books).&lt;/p&gt;
&lt;p&gt;Nor is machine learning likely to produce a reliable method of inferring intention: it’s a bedrock of anthropology that intention is unknowable without dialogue. As Cliff Geertz points out in his seminal 1973 essay, “Thick Description,” you cannot distinguish a “wink” (which means something) from a “twitch” (a meaningless reflex) without asking the person you’re observing which one it was.&lt;/p&gt;
&lt;p&gt;Ultimately, machine learning is about finding things that are similar to things the machine learning system can already model. Machine learning systems are good at identifying cars that are similar to the cars they already know about. They’re also good at identifying faces that are similar to the faces they know about, which is why faces that are white and male are more reliably recognized by these systems — the systems are trained by the people who made them and the people in their circles.&lt;/p&gt;
&lt;p&gt;This is what makes machine learning so toxic. If you ask an ML system to predict who the police should arrest, it will suggest that they go and arrest people similar to the ones they’ve been arresting all along. As the Human Rights Data Analysis Group’s Patrick Ball puts it, “A predictive policing system doesn’t predict crime, it predicts policing.”&lt;/p&gt;
&lt;p&gt;But there’s a difference between police rounding up the usual suspects on their own, and police doing so because an algorithm told them to: empiricism-washing makes bias seem objective because bias has been quantified. As Congresswoman Alexandria Ocasio-Cortez discovered in 2019 when she gave an Martin Luther King Day speech that described “algorithms” as racially biased, there is a substantial fraction of people who find this idea risible on its face, because they believe that “math can’t be racist.”&lt;/p&gt;
&lt;p&gt;Empiricism-washing is the top ideological dirty trick of technocrats everywhere: they assert that the data “doesn’t lie,” and thus all policy prescriptions based on data can be divorced from “politics” and relegated to the realm of “evidence.” This sleight of hand pretends that data can tell you what a society wants or needs — when really, data (and its analysis or manipulation) helps you to get what you want.&lt;/p&gt;
&lt;p&gt;Think of the UK’s recreational drug reclassification exercise under former “drugs czar,” the eminent psycho-pharmacologist David Nutt. Asked to assign a risk category to each drug with a recreational use, Nutt convened an expert panel to rank each drug based on how dangerous it was to its users, their families, and society as a whole. Then Nutt went to Parliament and said, “You tell me what your priorities are — whether you’re more interested in protecting users, families, or society — and I’ll tell you where the drugs go.” Empiricism gave Nutt the tools to explain how to categorize drugs based on policy priorities, but those priorities were matters of human judgment, not empirical truth.&lt;/p&gt;
&lt;p&gt;Data analysis is as old as censuses of the tax collectors of antiquity — it’s as old as the Book of Numbers! — and it is unquestionably useful. But the idea that we should “treasure what we measure” and a reliance on unaccountable black boxes to tell us what we want and how to get it, has delivered to us automated systems of reaction and retreat in the guise of rationalism and progress. The question of what the technology does is important, but far more important is who it is doing it &lt;em&gt;for&lt;/em&gt; and who it is doing it &lt;em&gt;to.&lt;/em&gt;&lt;/p&gt;


&lt;div class=&quot;addtoany_share_save_container addtoany_content_bottom&quot;&gt;
&lt;div class=&quot;a2a_kit addtoany_list a2a_target&quot; id=&quot;wpa2a_1&quot;&gt;&lt;a href=&quot;http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fblog.lareviewofbooks.org%2Fprovocations%2Fneophobic-conservative-ai-overlords-want-everything-stay%2F&amp;amp;linkname=Our%20Neophobic%2C%20Conservative%20AI%20Overlords%20Want%20Everything%20to%20Stay%20the%20Same&quot; onclick=&quot;__gaTracker('send', 'event', 'outbound-article', 'http://www.addtoany.com/add_to/facebook?linkurl=http%3A%2F%2Fblog.lareviewofbooks.org%2Fprovocations%2Fneophobic-conservative-ai-overlords-want-everything-stay%2F&amp;amp;linkname=Our%20Neophobic%2C%20Conservative%20AI%20Overlords%20Want%20Everything%20to%20Stay%20the%20Same', '');&quot; class=&quot;a2a_button_facebook&quot; title=&quot;Facebook&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://blog.lareviewofbooks.org/wp-content/plugins/add-to-any/icons/facebook.png&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Facebook&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fblog.lareviewofbooks.org%2Fprovocations%2Fneophobic-conservative-ai-overlords-want-everything-stay%2F&amp;amp;linkname=Our%20Neophobic%2C%20Conservative%20AI%20Overlords%20Want%20Everything%20to%20Stay%20the%20Same&quot; onclick=&quot;__gaTracker('send', 'event', 'outbound-article', 'http://www.addtoany.com/add_to/twitter?linkurl=http%3A%2F%2Fblog.lareviewofbooks.org%2Fprovocations%2Fneophobic-conservative-ai-overlords-want-everything-stay%2F&amp;amp;linkname=Our%20Neophobic%2C%20Conservative%20AI%20Overlords%20Want%20Everything%20to%20Stay%20the%20Same', '');&quot; class=&quot;a2a_button_twitter&quot; title=&quot;Twitter&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://blog.lareviewofbooks.org/wp-content/plugins/add-to-any/icons/twitter.png&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Twitter&quot;/&gt;&lt;/a&gt;&lt;a href=&quot;http://www.addtoany.com/add_to/email?linkurl=http%3A%2F%2Fblog.lareviewofbooks.org%2Fprovocations%2Fneophobic-conservative-ai-overlords-want-everything-stay%2F&amp;amp;linkname=Our%20Neophobic%2C%20Conservative%20AI%20Overlords%20Want%20Everything%20to%20Stay%20the%20Same&quot; onclick=&quot;__gaTracker('send', 'event', 'outbound-article', 'http://www.addtoany.com/add_to/email?linkurl=http%3A%2F%2Fblog.lareviewofbooks.org%2Fprovocations%2Fneophobic-conservative-ai-overlords-want-everything-stay%2F&amp;amp;linkname=Our%20Neophobic%2C%20Conservative%20AI%20Overlords%20Want%20Everything%20to%20Stay%20the%20Same', '');&quot; class=&quot;a2a_button_email&quot; title=&quot;Email&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://blog.lareviewofbooks.org/wp-content/plugins/add-to-any/icons/email.png&quot; width=&quot;16&quot; height=&quot;16&quot; alt=&quot;Email&quot;/&gt;&lt;/a&gt; &lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 04 Jan 2020 04:53:58 +0000</pubDate>
<dc:creator>macawfish</dc:creator>
<og:type>article</og:type>
<og:title>Our Conservative AI Overlords Want Everything to Stay the Same - BLARB</og:title>
<og:description>Cory Doctorow looks at the reactionary tendencies of modern artificial intelligence and algorithm-based systems.</og:description>
<og:url>http://blog.lareviewofbooks.org/provocations/neophobic-conservative-ai-overlords-want-everything-stay/</og:url>
<og:image>http://blog.lareviewofbooks.org/wp-content/uploads/2019/12/supercomper-1024x683.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://blog.lareviewofbooks.org/provocations/neophobic-conservative-ai-overlords-want-everything-stay/</dc:identifier>
</item>
<item>
<title>Show HN: Pure C WebRTC implementation for embedded devices</title>
<link>https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c</link>
<guid isPermaLink="true" >https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c</guid>
<description>&lt;h4 align=&quot;center&quot;&gt;Pure C WebRTC Client for Amazon Kinesis Video Streams&lt;/h4&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://travis-ci.org/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a548e7841d11be0851a4a6d89d31f18ecf95c3e5/68747470733a2f2f7472617669732d63692e6f72672f6177736c6162732f616d617a6f6e2d6b696e657369732d766964656f2d73747265616d732d7765627274632d73646b2d632e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://codecov.io/gh/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5ef20b60ff407df9eca1bd9459d040185f07cb19/68747470733a2f2f636f6465636f762e696f2f67682f6177736c6162732f616d617a6f6e2d6b696e657369732d766964656f2d73747265616d732d7765627274632d73646b2d632f6272616e63682f6d61737465722f67726170682f62616467652e737667&quot; alt=&quot;Coverage Status&quot; data-canonical-src=&quot;https://codecov.io/gh/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/branch/master/graph/badge.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c#key-features&quot;&gt;Key Features&lt;/a&gt; • &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c#build&quot;&gt;Build&lt;/a&gt; • &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c#run&quot;&gt;Run&lt;/a&gt; • &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c#documentation&quot;&gt;documentation&lt;/a&gt; • &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c#related&quot;&gt;Related&lt;/a&gt; • &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c#license&quot;&gt;License&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Key Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Audio/Video Support
&lt;ul&gt;&lt;li&gt;VP8&lt;/li&gt;
&lt;li&gt;H264&lt;/li&gt;
&lt;li&gt;Opus&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Developer Controlled Media Pipeline
&lt;/li&gt;
&lt;li&gt;DataChannels&lt;/li&gt;
&lt;li&gt;NACKs&lt;/li&gt;
&lt;li&gt;STUN/TURN Support&lt;/li&gt;
&lt;li&gt;IPv4/&lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/issues/115&quot;&gt;IPv6 TODO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Signaling Client Included
&lt;ul&gt;&lt;li&gt;KVS Provides STUN/TURN and Signaling Backend&lt;/li&gt;
&lt;li&gt;Connect with &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-android&quot;&gt;Android&lt;/a&gt;/&lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-ios&quot;&gt;iOS&lt;/a&gt;/&lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js&quot;&gt;Web&lt;/a&gt; using pre-made samples&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Portable
&lt;ul&gt;&lt;li&gt;Tested on Linux/MacOS&lt;/li&gt;
&lt;li&gt;Tested on x64, ARMv5&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Small Install Size
&lt;ul&gt;&lt;li&gt;Sub 200k library size&lt;/li&gt;
&lt;li&gt;OpenSSL, libsrtp, libjsmn, libusrsctp and libwebsockets dependencies.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Build&lt;/h2&gt;
&lt;h3&gt;Download&lt;/h3&gt;
&lt;p&gt;To download run the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone --recursive https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You will also need to install &lt;code&gt;pkg-config&lt;/code&gt; and &lt;code&gt;CMake&lt;/code&gt; and a build enviroment&lt;/p&gt;
&lt;h3&gt;Configure&lt;/h3&gt;
&lt;p&gt;Create a build directory in the newly checked out repository, and execute CMake from it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mkdir -p amazon-kinesis-video-streams-webrtc-sdk-c/build; cd amazon-kinesis-video-streams-webrtc-sdk-c/build; cmake ..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We have provided an example of using GStreamer to capture/encode video, and then send via this library. This is only build if &lt;code&gt;pkg-config&lt;/code&gt; finds GStreamer is installed on your system.&lt;/p&gt;
&lt;p&gt;By default we download all the libraries from GitHub and build them locally, so should require nothing to be installed ahead of time. If you do wish to link to existing libraries you can use the following flags to customize your build.&lt;/p&gt;
&lt;p&gt;You can pass the following options to &lt;code&gt;cmake ..&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;-DADD_MUCLIBC&lt;/code&gt; -- Add -muclibc c flag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DBUILD_DEPENDENCIES&lt;/code&gt; -- Whether or not to build depending libraries from source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DBUILD_OPENSSL&lt;/code&gt; -- If building dependencies, whether or not building openssl from source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DBUILD_TEST=TRUE&lt;/code&gt; -- Build unit/integration tests, may be useful for confirm support for your device. &lt;code&gt;./tst/webrtc_client_test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DCODE_COVERAGE&lt;/code&gt; -- Enable coverage reporting&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DCOMPILER_WARNINGS&lt;/code&gt; -- Enable all compiler warnings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DADDRESS_SANITIZER&lt;/code&gt; -- Build with AddressSanitizer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DMEMORY_SANITIZER&lt;/code&gt; -- Build with MemorySanitizer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DTHREAD_SANITIZER&lt;/code&gt; -- Build with ThreadSanitizer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DUNDEFINED_BEHAVIOR_SANITIZER&lt;/code&gt; Build with UndefinedBehaviorSanitizer`&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Build&lt;/h3&gt;
&lt;p&gt;To build the library and the provided samples run make in the build directory you executed CMake.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Run&lt;/h2&gt;
&lt;h3&gt;Setup your environment with your AWS account credentials:&lt;/h3&gt;
&lt;p&gt;First set the appropriate environment variables so you can connect to KVS&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export AWS_ACCESS_KEY_ID= &amp;lt;AWS account access key&amp;gt;
export AWS_SECRET_ACCESS_KEY= &amp;lt;AWS account secret key&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Running the Samples&lt;/h3&gt;
&lt;p&gt;After executing &lt;code&gt;make&lt;/code&gt; you will have the following sample applications in your &lt;code&gt;build&lt;/code&gt; directory:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;kvsWebrtcClientMaster&lt;/code&gt; - This application sends sample H264/Opus frames (path: &lt;code&gt;/samples/h264SampleFrames&lt;/code&gt; and &lt;code&gt;/samples/opusSampleFrames&lt;/code&gt;) via WebRTC. It also accepts incoming audio, if enabled in the browser. When checked in the browser, it prints the metadata of the received audio packets in your terminal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kvsWebrtcClientViewer&lt;/code&gt; - This application accepts sample H264/Opus frames and prints them out.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kvsWebrtcClientMasterGstSample&lt;/code&gt; - This application sends sample H264/Opus frames from a GStreamer pipeline. It also will playback incoming audio via an &lt;code&gt;autoaudiosink&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Run any of the sample applications by passing to it the name that you want to give to your signaling channel. The application creates the signaling channel using the name you provide. For example, to create a signaling channel called myChannel and to start sending sample H264/Opus frames via this channel, run the following command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;./kvsWebrtcClientMaster myChannel
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When the command line application prints Connection established, you can proceed to the next step.&lt;/p&gt;
&lt;p&gt;Now that your signaling channel is created and the connected master is streaming media to it, you can view this stream. To do so, open the &lt;a href=&quot;https://awslabs.github.io/amazon-kinesis-video-streams-webrtc-sdk-js/examples/index.html&quot; rel=&quot;nofollow&quot;&gt;WebRTC SDK Test Page&lt;/a&gt; using the steps in Using the Kinesis Video Streams with WebRTC Test Page and set the following values using the same AWS credentials and the same signaling channel that you specified for the master above:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Access key ID&lt;/li&gt;
&lt;li&gt;Secret access key&lt;/li&gt;
&lt;li&gt;Signaling channel name&lt;/li&gt;
&lt;li&gt;Client ID (optional)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Choose Start viewer to start live video streaming of the sample H264/Opus frames.&lt;/p&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;All Public APIs are documented in our &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c/blob/master/src/include/com/amazonaws/kinesis/video/webrtcclient/Include.h&quot;&gt;Include.h&lt;/a&gt; refer to &lt;a href=&quot;https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c#related&quot;&gt;related&lt;/a&gt; for more about WebRTC and KVS.&lt;/p&gt;
&lt;h2&gt;Related&lt;/h2&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;This library is licensed under the Apache 2.0 License.&lt;/p&gt;
</description>
<pubDate>Sat, 04 Jan 2020 00:05:32 +0000</pubDate>
<dc:creator>Sean-Der</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/3299148?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>awslabs/amazon-kinesis-video-streams-webrtc-sdk-c</og:title>
<og:url>https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c</og:url>
<og:description>Amazon Kinesis Video Streams Webrtc SDK is for developers to install and customize realtime communication between devices and enable secure streaming of video, audio to Kinesis Video Streams. - aws...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c</dc:identifier>
</item>
</channel>
</rss>