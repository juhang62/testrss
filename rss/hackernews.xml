<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Tesla Model Y</title>
<link>https://www.tesla.com/modely</link>
<guid isPermaLink="true" >https://www.tesla.com/modely</guid>
<description>12-way power adjustable front and rear heated seats&lt;p&gt;Three independently folding 2nd row seats&lt;/p&gt;&lt;p&gt;Premium audio – 14 speakers, 1 subwoofer, 2 amps, and immersive sound&lt;/p&gt;&lt;p&gt;Satellite-view maps with live traffic visualization and navigation&lt;/p&gt;&lt;p&gt;In-car internet streaming music &amp;amp; media&lt;/p&gt;&lt;p&gt;Internet browser&lt;/p&gt;&lt;p&gt;Location aware automatic garage door opener&lt;/p&gt;&lt;p&gt;LED fog lamps&lt;/p&gt;&lt;p&gt;Tinted glass roof with ultraviolet and infrared protection&lt;/p&gt;&lt;p&gt;Auto dimming, power folding, heated side mirrors&lt;/p&gt;&lt;p&gt;Music and media over Bluetooth®&lt;/p&gt;&lt;p&gt;Custom driver profiles&lt;/p&gt;&lt;p&gt;Center console with storage, 4 USB ports and docking for 2 smartphones&lt;/p&gt;</description>
<pubDate>Fri, 15 Mar 2019 03:08:29 +0000</pubDate>
<dc:creator>kiddz</dc:creator>
<og:title>Model Y | Tesla</og:title>
<og:description>Model Y has a 300 mile range (EPA est.), 0-60 mph acceleration in 3.5 seconds and best-in-class storage.</og:description>
<og:image>https://www.tesla.com/content/dam/tesla-site/wolverine/social/model-y-social.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tesla.com/modely</dc:identifier>
</item>
<item>
<title>Dynamic Programming for Technical Interviews</title>
<link>https://blogarithms.github.io/articles/2019-03/cracking-dp-part-one</link>
<guid isPermaLink="true" >https://blogarithms.github.io/articles/2019-03/cracking-dp-part-one</guid>
<description>&lt;p&gt;Dynamic programming (DP, as I’ll refer to it here on) is a toughie.&lt;/p&gt;&lt;p&gt;I’ve heard a lot of friends and juniors complain about dynamic programming and about how non-intuitive it is.&lt;/p&gt;
&lt;p&gt;Plus, problems on DP are pretty standard in most product-company-based hiring challenges, so it seems like a good topic to address on a blog based on algorithms.&lt;/p&gt;
&lt;p&gt;Here’s a heads-up to you though, since this article is the first in (maybe, depending on its reception), a multi-part series on DP, this article will focus on setting the groundwork of DP and I’ll dedicate most of this article to explaining how to arrive at the solutions to classical DP problems, and the general pattern of thought that I use when it comes to DP.&lt;/p&gt;
&lt;p&gt;This article, I’ll be tackling the following -&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Coin Change Problem&lt;/li&gt;
&lt;li&gt;0-1 Knapsack Problem&lt;/li&gt;
&lt;li&gt;DP on grids&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And I’ll be leaving some more classical variants of DP as exercises.&lt;/p&gt;
&lt;p&gt;If you’re already fully confident of why/how the above DP algorithms work correctly, then reading this article may yield little value, and you may be better off waiting for the next article on DP. :)&lt;/p&gt;
&lt;p&gt;Should I add future articles, I’ll tackle some non-classical variants of DP, leveraging intuition and logic.&lt;/p&gt;
&lt;p&gt;Onto the article!&lt;/p&gt;
&lt;h3 id=&quot;dp-an-intro&quot;&gt;DP: An Intro&lt;/h3&gt;
&lt;p&gt;I’ve found myself solving the nicest of DP questions when I leverage recursion.&lt;/p&gt;
&lt;p&gt;This is something I’ve often noticed in general, that for me, recursion is very intuitive.&lt;/p&gt;
&lt;p&gt;While DP at times does seem confusing, I’ve found from personal experience that thinking of solutions and problems recursively makes reaching a DP solution that much easier.&lt;/p&gt;
&lt;p&gt;Let’s take an example -&lt;/p&gt;
&lt;h5 id=&quot;the-coin-change-problem&quot;&gt;The Coin Change Problem&lt;/h5&gt;
&lt;p&gt;Let’s say you have an infinite amount of &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; different denominations of coins.&lt;/p&gt;
&lt;p&gt;You need to find the minimum number of coins to possess a value of N dollars.&lt;/p&gt;
&lt;p&gt;For example, if &lt;code class=&quot;highlighter-rouge&quot;&gt;K = 2&lt;/code&gt; and your denominations are &lt;code class=&quot;highlighter-rouge&quot;&gt;{1, 2}&lt;/code&gt;, and you want to find the min. number of coins needed to generate &lt;code class=&quot;highlighter-rouge&quot;&gt;N=9&lt;/code&gt; dollars.&lt;/p&gt;
&lt;p&gt;Here, it’s pretty obvious that’d be &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; coins (&lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; two dollar coins + &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; one dollar coin).&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;Note: A greedy algorithm of selecting the largest available denomination under &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; at every instant won’t give optimal answers.&lt;/p&gt;
&lt;p&gt;Try out the test case: &lt;code class=&quot;highlighter-rouge&quot;&gt;K=3&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;denominations = {1, 3, 4}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;N = 10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The greedy answer yields 4 coins (&lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;) while the optimal answer is 3 coins (&lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, clearly we need to check all possible coin selections we can make.&lt;/p&gt;
&lt;p&gt;Now let’s model the problem recursively.&lt;/p&gt;
&lt;p&gt;Let’s define a mathematical function &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;f(N)&lt;/code&gt; tells me the minimum number of coins I need to generate a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s say I have &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; denominations.&lt;/p&gt;
&lt;p&gt;Now, if I were to take away a coin from my value of &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;, this coin could be of any denomination, correct?&lt;/p&gt;
&lt;p&gt;Basically, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; could be re-written as &lt;code class=&quot;highlighter-rouge&quot;&gt;((N-denom[i]) + denom[i])&lt;/code&gt; for any valid &lt;code class=&quot;highlighter-rouge&quot;&gt;0&amp;lt;=i&amp;lt;length(denom)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also know, that &lt;code class=&quot;highlighter-rouge&quot;&gt;denom[i]&lt;/code&gt; can be represented as 1 coin (a coin whose value equals &lt;code class=&quot;highlighter-rouge&quot;&gt;denom[i]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Thus, &lt;code class=&quot;highlighter-rouge&quot;&gt;f(N) = f(N-denom[i]) + 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is our general case.&lt;/p&gt;
&lt;p&gt;What’s our base case?&lt;/p&gt;
&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;N=0&lt;/code&gt;, we need 0 coins.&lt;/p&gt;
&lt;p&gt;Similarly, if &lt;code class=&quot;highlighter-rouge&quot;&gt;N&amp;lt;0&lt;/code&gt;, its an impossible case, which needs to be handled.&lt;/p&gt;
&lt;p&gt;Compiling all this, we have:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Yay!&lt;/p&gt;
&lt;p&gt;Now there are a couple of things we need to ensure we’re handling, if we want to port this to DP.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No global variables should be modifed in the function&lt;/li&gt;
&lt;li&gt;Simple, memorizable states (state-space reduction)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And… I’d say that’s it?&lt;/p&gt;
&lt;p&gt;Now, we can make &lt;code class=&quot;highlighter-rouge&quot;&gt;denom&lt;/code&gt; a global array as we’re not changing it.&lt;/p&gt;
&lt;p&gt;This makes our function just have one parameter. The current value, &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thus, we have an O(N*K) DP solution to this, as follows -&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And that’s it!&lt;/p&gt;
&lt;hr/&gt;&lt;h5 id=&quot;the-0-1-knapsack-problem&quot;&gt;The 0-1 Knapsack Problem&lt;/h5&gt;
&lt;p&gt;Okay, so let’s say you’re a burglar who has a bag (knapsack) that can carry a total weight of &lt;code class=&quot;highlighter-rouge&quot;&gt;W&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; valuable objects in the house you broke into.&lt;/p&gt;
&lt;p&gt;Each object &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, has a weight of &lt;code class=&quot;highlighter-rouge&quot;&gt;wt[i]&lt;/code&gt; and a value of &lt;code class=&quot;highlighter-rouge&quot;&gt;vals[i]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your task as a burglar is to devise an efficient algorithm that can maximize the net value of objects you can steal from the house provided you place them all in your knapsack.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;I hope you don’t have to apply this in seriousness. :P&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, let’s think recursively here.&lt;/p&gt;
&lt;p&gt;In general, whenever problems involve multiple solutions where there’s an “option” to choose or ignore an element, I find it suitable to use the current index of the element as a parameter.&lt;/p&gt;
&lt;p&gt;So this means that my &lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt; method already has one parameter - &lt;code class=&quot;highlighter-rouge&quot;&gt;int idx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now let’s think about what our other parameter could be by simulating our burglary.&lt;/p&gt;
&lt;p&gt;At any point, when we’re looking at the object at index &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt;, we have a choice - to take it, or to not take it.&lt;/p&gt;
&lt;p&gt;The point of DP is to optimize our solution of “checking all possibilities”, without repeating checking already checked possibilities, right?&lt;/p&gt;
&lt;p&gt;So, we have a choice – take the current object, or ignore it.&lt;/p&gt;
&lt;p&gt;But let’s say we do take it – we still need to verify if our knapsack can hold it, right?&lt;/p&gt;
&lt;p&gt;Lets look at this recursively.&lt;/p&gt;
&lt;p&gt;To make sure our current possibility is valid, and to provide insight into our decision as to whether or not can we afford to take the next object, we NEED to know our current knapsack capacity that’s left.&lt;/p&gt;
&lt;p&gt;So, our states are (current_index, weight_left).&lt;/p&gt;
&lt;p&gt;Let’s see how we can model this as a recursive equation now -&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Look closely to the right-hand-side of that equation.&lt;/p&gt;
&lt;p&gt;We’re stating:&lt;/p&gt;
&lt;p&gt;f(idx, weight) = max( possibility where we don’t take current element, possibility where we do take current element )&lt;/p&gt;
&lt;p&gt;It’s important to note that we’ve defined &lt;code class=&quot;highlighter-rouge&quot;&gt;f(idx, weight)&lt;/code&gt; to be the maximum value we can obtain assuming we’re at index &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt; with weight &lt;code class=&quot;highlighter-rouge&quot;&gt;weight&lt;/code&gt; left over.&lt;/p&gt;
&lt;p&gt;Also, pay attention to the states in the latter possibility, we even update the &lt;code class=&quot;highlighter-rouge&quot;&gt;weight_left&lt;/code&gt; parameter to reflect the fact that we’re picking the current object.&lt;/p&gt;
&lt;p&gt;Here’s how that looks: (I’ve accidentally switched the order of the states, but that doesn’t matter)&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;brute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weightleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightleft&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weightleft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# call the function as brute(W, 0)&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;h4 id=&quot;dp-on-grids&quot;&gt;DP On Grids&lt;/h4&gt;
&lt;p&gt;This is a pretty common topic under DP.&lt;/p&gt;
&lt;p&gt;Consider the following example -&lt;/p&gt;
&lt;p&gt;Given an N x M grid, with each cell containing some gold in it, find the maximum amount of gold you can collect, given the following criteria -&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You start at the top-left corner&lt;/li&gt;
&lt;li&gt;You must end at the bottom-right corner&lt;/li&gt;
&lt;li&gt;You can only move to the cell at your right, or to the cell directly below you&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Now, given these conditions and information, we need to come up with an O(N*M) solution to solve this problem.&lt;/p&gt;
&lt;p&gt;Again, let’s think recursively.&lt;/p&gt;
&lt;p&gt;Below I’ve drawn a simple 3 x 3 grid, and labelled each node from 1 to 9.&lt;/p&gt;
&lt;p&gt;1 2 3&lt;/p&gt;
&lt;p&gt;4 5 6&lt;/p&gt;
&lt;p&gt;7 8 9&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note, the numbers above are LABELS and not values, they are only used to identify the cells I’m talking about&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, look at cell number 5. Since I can only move downward or rightward, the only way &lt;strong&gt;to get to cell number 5&lt;/strong&gt; is either if I’m coming from cell number 2 or cell number 4.&lt;/p&gt;
&lt;p&gt;Similarly, consider cell number 8. The only way to get to cell number 8 is if I’m coming from cell number 7 or cell number 5.&lt;/p&gt;
&lt;p&gt;And in any case (excluding the 1st row or 1st column), I’m visiting a cell either from it’s upper neighbor or its left neighbor.&lt;/p&gt;
&lt;p&gt;This means, that for any node, the maximum value I can collect when I reach it is -&lt;/p&gt;
&lt;p&gt;f(node) = val[node] + max(f(upper_neighbor), f(left_neighbor))&lt;/p&gt;
&lt;p&gt;And that’s it!&lt;/p&gt;
&lt;p&gt;That’s our recursive equation!&lt;/p&gt;
&lt;p&gt;So let’s formalize this in code, and this time, let’s do this in a bottom-up tabulation manner.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# the top left element has a max value of itself&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

                &lt;span class=&quot;c&quot;&gt;# first row&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
                &lt;span class=&quot;c&quot;&gt;# first column&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        
                &lt;span class=&quot;c&quot;&gt;# general case&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here’s a few homework tasks for you to try out.&lt;/p&gt;
&lt;p&gt;They’re fairly simple, and I’ll explain them a bit maybe in the next DP article anyway, so here they are -&lt;/p&gt;
&lt;p&gt;Given an N x M grid, find the number of different paths one could take if they start at the top-left corner and end at the bottom-right corner and only move either down or right from each cell.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Do this in O(N*M)&lt;/li&gt;
&lt;li&gt;Bonus: Do this in O(N+M)&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;To summarize -&lt;/p&gt;
&lt;p&gt;There are two aspects to DP -&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Identifying your states&lt;/li&gt;
&lt;li&gt;Identifying your recurrence relation with those states&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Personally, I find it easier to start with determining the recurrence relation, and then trying to lower the states I need to fully track all information I have.&lt;/p&gt;
&lt;p&gt;Hopefully this article helped make DP a bit more intuitive.&lt;/p&gt;
&lt;p&gt;I plan on orienting the next article more toward the applications of dynamic programming on strings or on graph theory, depending on how well this article is recieved. :)&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;For more of my work, follow me on:&lt;/p&gt;
&lt;p&gt;LinkedIn: &lt;a href=&quot;https://www.linkedin.com/in/adityaramesh1998/&quot;&gt;https://www.linkedin.com/in/adityaramesh1998/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub: &lt;a href=&quot;https://github.com/RameshAditya/&quot;&gt;https://github.com/RameshAditya/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Twitter: &lt;a href=&quot;https://twitter.com/adityaramesh98&quot;&gt;https://twitter.com/adityaramesh98&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 15 Mar 2019 01:16:14 +0000</pubDate>
<dc:creator>Aditya_Ramesh</dc:creator>
<og:type>blog</og:type>
<og:url>https://blogarithms.github.io/articles/2019-03/cracking-dp-part-one</og:url>
<og:title>The One On Dynamic Programming! | Blogarithms</og:title>
<og:description>Probably the first in a multi-part series on DP.</og:description>
<og:image>https://blogarithms.github.io/img/leonids-logo.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blogarithms.github.io/articles/2019-03/cracking-dp-part-one</dc:identifier>
</item>
<item>
<title>VS Code on a Remote Server</title>
<link>https://github.com/codercom/code-server</link>
<guid isPermaLink="true" >https://github.com/codercom/code-server</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/codercom/code-server/issues&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/0643193d983f0c28caf4a26a54872313df229dec/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f636f646572636f6d2f636f64652d7365727665722e737667&quot; alt=&quot;&amp;quot;Open Issues&amp;quot;&quot; data-canonical-src=&quot;https://img.shields.io/github/issues-raw/codercom/code-server.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/codercom/code-server/releases/latest&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/e0fdaf52a6e2ca295423a9920e5951f26d4562c3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f636f646572636f6d2f636f64652d7365727665722e737667&quot; alt=&quot;&amp;quot;Latest Release&amp;quot;&quot; data-canonical-src=&quot;https://img.shields.io/github/release/codercom/code-server.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/codercom/code-server#&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/6a40b4913be1852a0fe4a896c5912412202f9169/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667&quot; alt=&quot;MIT license&quot; data-canonical-src=&quot;https://img.shields.io/badge/license-MIT-green.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/zxSwN8Z&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/cc719a9bd4642c198456fa179764da4600e7f3b0/68747470733a2f2f646973636f72646170702e636f6d2f6170692f6775696c64732f3436333735323832303032363337363230322f7769646765742e706e67&quot; alt=&quot;Discord&quot; data-canonical-src=&quot;https://discordapp.com/api/guilds/463752820026376202/widget.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;code-server&lt;/code&gt; is &lt;a href=&quot;https://github.com/Microsoft/vscode&quot;&gt;VS Code&lt;/a&gt; running on a remote server, accessible through the browser.&lt;/p&gt;
&lt;p&gt;Try it out:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
docker run -t -p 127.0.0.1:8443:8443 -v &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;${PWD}&lt;/span&gt;:/root/project&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; codercom/code-server code-server --allow-http --no-auth
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;Code on your Chromebook, tablet, and laptop with a consistent dev environment.
&lt;ul&gt;&lt;li&gt;If you have a Windows or Mac workstation, more easily develop for Linux.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Take advantage of large cloud servers to speed up tests, compilations, downloads, and more.&lt;/li&gt;
&lt;li&gt;Preserve battery life when you're on the go.
&lt;ul&gt;&lt;li&gt;All intensive computation runs on your server.&lt;/li&gt;
&lt;li&gt;You're no longer running excess instances of Chrome.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/codercom/code-server/blob/master/doc/assets/ide.png&quot;&gt;&lt;img src=&quot;https://github.com/codercom/code-server/raw/master/doc/assets/ide.png&quot; alt=&quot;Screenshot&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h3&gt;Hosted&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://coder.com/signup&quot; rel=&quot;nofollow&quot;&gt;Try &lt;code&gt;code-server&lt;/code&gt; now&lt;/a&gt; for free at coder.com.&lt;/p&gt;
&lt;h3&gt;Docker&lt;/h3&gt;
&lt;p&gt;See docker oneliner mentioned above. Dockerfile is at &lt;a href=&quot;https://github.com/codercom/code-server/blob/master/Dockerfile&quot;&gt;/Dockerfile&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Binaries&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/codercom/code-server/releases&quot;&gt;Download a binary&lt;/a&gt; (Linux and OS X supported. Windows coming soon)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the binary with the project directory as the first argument&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;code-server &amp;lt;initial directory to open&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;You will be prompted to enter the password shown in the CLI &lt;code&gt;code-server&lt;/code&gt; should now be running at &lt;a href=&quot;https://localhost:8443&quot; rel=&quot;nofollow&quot;&gt;https://localhost:8443&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;code-server uses a self-signed SSL certificate that may prompt your browser to ask you some additional questions before you proceed. Please &lt;a href=&quot;https://github.com/codercom/code-server/blob/master/doc/self-hosted/index.md&quot;&gt;read here&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;For detailed instructions and troubleshooting, see the &lt;a href=&quot;https://github.com/codercom/code-server/blob/master/doc/self-hosted/index.md&quot;&gt;self-hosted quick start guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Quickstart guides for &lt;a href=&quot;https://github.com/codercom/code-server/blob/master/doc/admin/install/google_cloud.md&quot;&gt;Google Cloud&lt;/a&gt;, &lt;a href=&quot;https://github.com/codercom/code-server/blob/master/doc/admin/install/aws.md&quot;&gt;AWS&lt;/a&gt;, and &lt;a href=&quot;https://github.com/codercom/code-server/blob/master/doc/admin/install/digitalocean.md&quot;&gt;Digital Ocean&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How to &lt;a href=&quot;https://github.com/codercom/code-server/blob/master/doc/security/ssl.md&quot;&gt;secure your setup&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;h3&gt;Known Issues&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Creating custom VS Code extensions and debugging them doesn't work.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Future&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Windows support.&lt;/li&gt;
&lt;li&gt;Electron and Chrome OS applications to bridge the gap between local&amp;lt;-&amp;gt;remote.&lt;/li&gt;
&lt;li&gt;Run VS Code unit tests against our builds to ensure features work as expected.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;Development guides are coming soon.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/codercom/code-server/blob/master/LICENSE&quot;&gt;MIT&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Enterprise&lt;/h2&gt;
&lt;p&gt;Visit &lt;a href=&quot;https://coder.com/enterprise&quot; rel=&quot;nofollow&quot;&gt;our enterprise page&lt;/a&gt; for more information about our enterprise offering.&lt;/p&gt;
&lt;h2&gt;Commercialization&lt;/h2&gt;
&lt;p&gt;If you would like to commercialize code-server, please contact &lt;a href=&quot;mailto:contact@coder.com&quot;&gt;contact@coder.com&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 14 Mar 2019 21:29:15 +0000</pubDate>
<dc:creator>maxfan8</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/20144034?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>codercom/code-server</og:title>
<og:url>https://github.com/codercom/code-server</og:url>
<og:description>Run VS Code on a remote server. Contribute to codercom/code-server development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/codercom/code-server</dc:identifier>
</item>
<item>
<title>My Salary Progression in Tech</title>
<link>https://georgestocker.com/2019/03/14/my-salary-progression-in-tech/</link>
<guid isPermaLink="true" >https://georgestocker.com/2019/03/14/my-salary-progression-in-tech/</guid>
<description>&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;
&lt;div class=&quot;embed-twitter&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I need people to start talking about their salaries. Why are y'all so weird about money. Stop. White people especially need to talk about their salaries because marginalized folks in the same fields often have no idea they're being swindled by employers.&lt;/p&gt;
— Dionne Sims (@OhDionne) &lt;a href=&quot;https://twitter.com/OhDionne/status/1100491864124387328?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/OhDionne/status/1100491864124387328&quot;&gt;There was a recent tweet&lt;/a&gt; that asked people to share their salary as a means of helping others, so I’ll do that. I don’t think it’s enough, however&lt;sup&gt;1&lt;/sup&gt;. It will give you power in your own negotiations, but it’s not enough&lt;sup&gt;1, again&lt;/sup&gt;. To help you more, I highly recommend Patrick McKenzie’s (&lt;a href=&quot;https://twitter.com/patio11&quot;&gt;@patio11&lt;/a&gt;) &lt;a href=&quot;https://www.kalzumeus.com/2012/01/23/salary-negotiation/&quot;&gt;article on Salary Negotiation&lt;/a&gt;. In my case I used some of his techniques; but as this was 2010, his article wasn’t written yet. It’s one of the best articles I’ve seen on salary negotiation. &lt;a href=&quot;https://www.kalzumeus.com/2012/01/23/salary-negotiation/&quot;&gt;Seriously, go read it&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;My salary increases over the years have been due to a few things:&lt;br/&gt;1. Knowing what I brought to the table and selling that.&lt;br/&gt;2. Showing that I bring more value than I’m asking for.&lt;br/&gt;3. Not being emotionally invested in the outcome. (Which is somewhat ironic as being emotionally invested is what ends up getting me in trouble later on).&lt;/p&gt;&lt;p&gt;I &lt;em&gt;have never&lt;/em&gt; threatened to leave a job if I wasn’t given a raise; as I feel like that leads to a “Gosh, what will happen with George if we give it to him? Will he stick around? He’s already mentioned leaving!” mentality. I also don’t ask twice. If I don’t get it, then I step back, learn what’s valuable to the other party, and do more of that, visibly.&lt;sup&gt;1, once again&lt;/sup&gt; Anywhere you see a bump for the same employer is where I’ve asked for a raise (discounting the cost of living raises; as I did not ask for those).&lt;/p&gt;&lt;p&gt;In instances where I’ve changed jobs, which I’ve done quite a few times throughout my career; it was generally done for more money or an intangible benefit (for instance, I loved working at Higher Logic, but left to &lt;a href=&quot;https://georgestocker.com/2015/03/16/do-you-want-to-change-the-world/&quot;&gt;join Jewelbots&lt;/a&gt; because I really believed in &lt;a href=&quot;http://sarajchipps.com/about&quot;&gt;Sara Chipps&lt;/a&gt;‘ mission). I left Silkroad technology (even though I loved the team) because I had moved to Northern Virginia and couldn’t make it in NoVA on North Carolina wages (the cost of living jumped by 35%). Similarly, I &lt;a href=&quot;https://georgestocker.com/2014/03/10/leaving-the-fool/&quot;&gt;left The Motley Fool&lt;/a&gt; to join Higher Logic because there was an opportunity for a bit of a pay increase; and as a new father I couldn’t turn that down (though, the Fool is pretty awesome to work for).&lt;/p&gt;&lt;p&gt;A final note, this is just salary. I’m not including 401K employer contributions, bonuses, or anything of that nature (it clouds the base-pay issue; and if you’re living month to month (like we were), base-pay is all that really matters. I will say that base-pay isn’t the full story. Jewelbots couldn’t offer health insurance but they fully covered my COBRA. Since Higher Logic had an amazing healthcare plan; it was a really good place to be in.&lt;/p&gt;&lt;p&gt;I should also note (so &lt;code&gt;final_note_2&lt;/code&gt;), that &lt;a href=&quot;https://twitter.com/vcsjones&quot;&gt;@vcsjones&lt;/a&gt; is the one that got me realizing I should ask for more money. We were having a conversation on our way down to &lt;a href=&quot;https://2016.revolutionconf.com/&quot;&gt;RevolutionConf 2016&lt;/a&gt;, and we stopped at a local brewery he suggested for a beer and food. I asked him what he made — I had had a few sips of beer, to be fair — but credit to him, he told me. They aren’t my facts to tell, but he is the one that helped me see the local market was not what Glassdoor made it out to be.&lt;/p&gt;
&lt;p&gt;So here it is, my salary progression in tech (Note, as I just opened my business; there is no revenue to report).&lt;/p&gt;
&lt;table class=&quot;wp-block-table is-style-stripes&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;Company&lt;/td&gt;
&lt;td&gt;Position&lt;/td&gt;
&lt;td&gt;Salary&lt;/td&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;Lang.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2004&lt;/td&gt;
&lt;td&gt;US Army&lt;/td&gt;
&lt;td&gt;HR Admin&lt;/td&gt;
&lt;td&gt;$26,460 (E-5)&lt;/td&gt;
&lt;td&gt;2 years&lt;/td&gt;
&lt;td&gt;Ft. Bragg, NC&lt;/td&gt;
&lt;td&gt;VBA&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2007&lt;/td&gt;
&lt;td&gt;Mainheim&lt;br/&gt;Statesville&lt;/td&gt;
&lt;td&gt;IT Admin&lt;/td&gt;
&lt;td&gt;$42,000&lt;/td&gt;
&lt;td&gt;1+ year&lt;/td&gt;
&lt;td&gt;Statesville,&lt;br/&gt;NC&lt;/td&gt;
&lt;td&gt;Perl, C#&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;Silkroad&lt;br/&gt;technology&lt;/td&gt;
&lt;td&gt;Junior&lt;br/&gt;Programmer&lt;/td&gt;
&lt;td&gt;$48,000&lt;/td&gt;
&lt;td&gt;1+ year&lt;/td&gt;
&lt;td&gt;Winston-&lt;br/&gt;Salem&lt;br/&gt;NC&lt;/td&gt;
&lt;td&gt;C#,&lt;br/&gt;ASP.NET&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2009&lt;/td&gt;
&lt;td&gt;CACI Inc.&lt;/td&gt;
&lt;td&gt;Developer&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;$85,000&lt;/td&gt;
&lt;td&gt;1+year&lt;/td&gt;
&lt;td&gt;Chantilly, VA&lt;/td&gt;
&lt;td&gt;C#,&lt;br/&gt;Winforms&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2010&lt;/td&gt;
&lt;td&gt;CACI Inc.&lt;/td&gt;
&lt;td&gt;Team Lead&lt;/td&gt;
&lt;td&gt;$120,000*&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2011&lt;/td&gt;
&lt;td&gt;The Motley&lt;br/&gt;Fool&lt;/td&gt;
&lt;td&gt;Developer&lt;/td&gt;
&lt;td&gt;$87,000&lt;/td&gt;
&lt;td&gt;3+ yrs&lt;/td&gt;
&lt;td&gt;Alexandria,&lt;br/&gt;VA&lt;/td&gt;
&lt;td&gt;C#,&lt;br/&gt;ASP.NET&lt;br/&gt;MVC&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2012&lt;/td&gt;
&lt;td&gt;The Motley&lt;br/&gt;Fool&lt;/td&gt;
&lt;td&gt;Developer&lt;/td&gt;
&lt;td&gt;$91,000&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;C#&lt;br/&gt;ASP.NET&lt;br/&gt;MVC&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2013&lt;/td&gt;
&lt;td&gt;The Motley&lt;br/&gt;Fool&lt;/td&gt;
&lt;td&gt;Developer&lt;/td&gt;
&lt;td&gt;$94,000&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;Python,&lt;br/&gt;Angular&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;The Motley&lt;br/&gt;Fool&lt;/td&gt;
&lt;td&gt;Developer&lt;/td&gt;
&lt;td&gt;$97,000&lt;/td&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td&gt;Angular,&lt;br/&gt;C#&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;Higher&lt;br/&gt;Logic&lt;/td&gt;
&lt;td&gt;Senior&lt;br/&gt;Developer&lt;br/&gt;/ DBA&lt;/td&gt;
&lt;td&gt;$120,000*&lt;/td&gt;
&lt;td&gt;1+ year&lt;/td&gt;
&lt;td&gt;Rosslyn, VA&lt;/td&gt;
&lt;td&gt;C#,&lt;br/&gt;ASP.NET&lt;br/&gt;&amp;amp; MVC&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2015&lt;/td&gt;
&lt;td&gt;Jewelbots&lt;/td&gt;
&lt;td&gt;VP,&lt;br/&gt;Software&lt;/td&gt;
&lt;td&gt;$115,000&lt;/td&gt;
&lt;td&gt;1+year&lt;/td&gt;
&lt;td&gt;Remote&lt;br/&gt;(NYC)&lt;/td&gt;
&lt;td&gt;Ionic,&lt;br/&gt;Angular,&lt;br/&gt;C&lt;br/&gt;(firmware)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2016&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;Solutions&lt;br/&gt;Architect&lt;/td&gt;
&lt;td&gt;$170,000*&lt;/td&gt;
&lt;td&gt;2+&lt;br/&gt;Years&lt;/td&gt;
&lt;td&gt;Reston, VA&lt;/td&gt;
&lt;td&gt;C#,&lt;br/&gt;Perl,&lt;br/&gt;JS&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2017&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;Solutions&lt;br/&gt;Architect&lt;/td&gt;
&lt;td&gt;$185,000*&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;Reston, VA&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2018&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;Solutions&lt;br/&gt;Architect&lt;/td&gt;
&lt;td&gt;$187,000&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;Springfield,&lt;br/&gt;VA&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;Solutions&lt;br/&gt;Architect&lt;/td&gt;
&lt;td&gt;$189,000&lt;/td&gt;
&lt;td/&gt;
&lt;td&gt;Springfield,&lt;br/&gt;VA&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2019&lt;/td&gt;
&lt;td&gt;Hollow Wall&lt;br/&gt;Technology&lt;br/&gt;Services&lt;/td&gt;
&lt;td&gt;Owner&lt;/td&gt;
&lt;td&gt;$0&lt;/td&gt;
&lt;td&gt;Current&lt;/td&gt;
&lt;td&gt;Springfield,&lt;br/&gt;VA&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr class=&quot;wp-block-separator&quot;/&gt;&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;: The Asterisk (*) indicates when I’ve asked for raises or otherwise negotiated for that salary.&lt;/p&gt;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;: Privilege is a large part of the equation; the privilege to not care; the privilege to be a white dude in an industry that (either intentionally or unintentionally) caters to white dudes. Yes, this reflects playing the game on easy mode. I have no doubts there. I’m writing that it’s not enough because I am too privileged to be able to see what non-white dudes should do. So if you’re a white dude reading this, make it better for everyone by not being cheap on compensation (and recognize any potential bias or privilege you may have).&lt;/p&gt;

&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa wpmrec&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Thu, 14 Mar 2019 21:02:52 +0000</pubDate>
<dc:creator>GordonS</dc:creator>
<og:type>article</og:type>
<og:title>My Salary Progression in Tech</og:title>
<og:url>https://georgestocker.com/2019/03/14/my-salary-progression-in-tech/</og:url>
<og:description>There was a recent tweet that asked people to share their salary as a means of helping others, so I’ll do that. I don’t think it’s enough, however1. It will give you power in your…</og:description>
<og:image>https://s0.wp.com/i/blank.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://georgestocker.com/2019/03/14/my-salary-progression-in-tech/</dc:identifier>
</item>
<item>
<title>Tumblr has lost 30 percent of web traffic since December</title>
<link>https://www.theverge.com/2019/3/14/18266013/tumblr-porn-ban-lost-users-down-traffic</link>
<guid isPermaLink="true" >https://www.theverge.com/2019/3/14/18266013/tumblr-porn-ban-lost-users-down-traffic</guid>
<description>&lt;p id=&quot;UBbeJS&quot;&gt;Since Tumblr &lt;a href=&quot;https://www.theverge.com/2018/12/3/18123752/tumblr-adult-content-porn-ban-date-explicit-changes-why-safe-mode&quot;&gt;announced its porn ban in December&lt;/a&gt;, many users reacted by explaining that they &lt;a href=&quot;https://www.theverge.com/2018/12/6/18124260/tumblr-porn-ban-sexuality-blogs-unique&quot;&gt;mainly used the site&lt;/a&gt; for browsing not-safe-for-work content, and they threatened to leave the platform if the ban were enforced. It now appears that many users have made good on that threat: Tumblr’s traffic has dropped nearly 30 percent since December.&lt;/p&gt;
&lt;p id=&quot;yDROD9&quot;&gt;Tumblr’s global traffic in December clocked in at 521 million, but it had dropped to 370 million by February, web analytics firm SimilarWeb tells &lt;em&gt;The Verge&lt;/em&gt;. &lt;a href=&quot;https://www.statista.com/statistics/261925/unique-visitors-to-tumblrcom/&quot;&gt;Statista reports&lt;/a&gt; a similar trend in the number of unique visitors. By January 2019, only over 437 million visited Tumblr, compared to a high of 642 million visitors in July 2018.&lt;/p&gt;
&lt;p id=&quot;ms2PTj&quot;&gt;The ban removed explicit posts from public view, including any media that portrayed sex acts, exposed genitals, and “female-presenting” nipples. Some users say enforcement of the ban has been spotty — one user wrote into &lt;em&gt;The Verge&lt;/em&gt; to say that they’re still seeing porn on the platform — but even so, users have apparently left Tumblr in droves. We know that the platform was mainly known for its NSFW content, which was often not just porn that could be found on any number of alternative sites. It also included &lt;a href=&quot;https://www.theverge.com/2018/12/6/18124260/tumblr-porn-ban-sexuality-blogs-unique&quot;&gt;unique communities that discussed sexuality&lt;/a&gt; in healthy ways.&lt;/p&gt;
&lt;p id=&quot;SrRRgl&quot;&gt;On December 3rd, when &lt;a href=&quot;https://www.theverge.com/2018/12/3/18123752/tumblr-adult-content-porn-ban-date-explicit-changes-why-safe-mode&quot;&gt;Tumblr first told &lt;em&gt;The Verge&lt;/em&gt;&lt;/a&gt; that &lt;a href=&quot;https://www.theverge.com/2018/12/17/18141106/tumblr-porn-ban-adult-content-appeal&quot;&gt;it would ban porn by the 17th&lt;/a&gt;, CEO Jeff D’Onofrio said in a statement at the time that users had other options. “There are no shortage of sites on the internet that feature adult content,” he said. It looks like users have taken D’Onofrio up on his offer and gone to other sites.&lt;/p&gt;

</description>
<pubDate>Thu, 14 Mar 2019 20:44:23 +0000</pubDate>
<dc:creator>jaredwiener</dc:creator>
<og:description>Tumblr has lost 30 percent of web traffic since December.</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/pLPq4FMftdrOESxD93N6xVksQGg=/0x146:2040x1214/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/13598286/acastro_191203_177_tumblr_0001.jpg</og:image>
<og:title>After the porn ban, Tumblr users have ditched the platform as promised</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2019/3/14/18266013/tumblr-porn-ban-lost-users-down-traffic</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2019/3/14/18266013/tumblr-porn-ban-lost-users-down-traffic</dc:identifier>
</item>
<item>
<title>Show HN: A retro video game console I&amp;#039;ve been working on in my free time</title>
<link>https://internalregister.github.io/2019/03/14/Homebrew-Console.html</link>
<guid isPermaLink="true" >https://internalregister.github.io/2019/03/14/Homebrew-Console.html</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;/&gt;&lt;title&gt;Building a ‘Homebrew’ Video Game Console | Internal Register&lt;/title&gt;&lt;meta name=&quot;generator&quot; content=&quot;Jekyll v3.7.4&quot;/&gt;&lt;meta property=&quot;og:title&quot; content=&quot;Building a ‘Homebrew’ Video Game Console&quot;/&gt;&lt;meta property=&quot;og:locale&quot; content=&quot;en_US&quot;/&gt;&lt;meta name=&quot;description&quot; content=&quot;Software and hardware projects for fun from a guy who loves retro computing&quot;/&gt;&lt;meta property=&quot;og:description&quot; content=&quot;Software and hardware projects for fun from a guy who loves retro computing&quot;/&gt;&lt;link rel=&quot;canonical&quot; href=&quot;/2019/03/14/Homebrew-Console.html&quot;/&gt;&lt;meta property=&quot;og:url&quot; content=&quot;/2019/03/14/Homebrew-Console.html&quot;/&gt;&lt;meta property=&quot;og:site_name&quot; content=&quot;Internal Register&quot;/&gt;&lt;meta property=&quot;og:type&quot; content=&quot;article&quot;/&gt;&lt;meta property=&quot;article:published_time&quot; content=&quot;2019-03-14T00:00:00+00:00&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;meta name=&quot;theme-color&quot; content=&quot;#157878&quot;/&gt;&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/css/style.css?v=bc5434bd8dff1eb00ee0a33f641db852648a2a17&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;503.72928994083&quot;&gt;
&lt;p&gt;&lt;a id=&quot;skip-to-content&quot; href=&quot;https://internalregister.github.io/2019/03/14/Homebrew-Console.html#content&quot;&gt;Skip to the content.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/console2.jpg&quot; alt=&quot;Console 2&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This post serves as an introduction to a “homebrew” video game console made from scratch, using a lot of inspiration from retro consoles and modern projects but with a unique architecture.&lt;br/&gt;Some friends of mine have told me again and again not to keep this project to myself and to put this information online, so here it goes.&lt;/p&gt;

&lt;p&gt;My name is Sérgio Vieira and I’m a portuguese guy who grew up in the 80s and 90s, I’ve always been nostalgic towards retro-gaming, specifically the third and forth generation consoles.&lt;br/&gt;A few years ago I’ve decided to learn more about electronics and try to build my own video game console.&lt;br/&gt;Professionally I work as a software engineer and had no experience with electronics other than ocasionally building and upgrading my desktop computer (which doesn’t really count).&lt;br/&gt;Even though I had no experience, I said to myself “why not?”, bought a few books, a few electronics kits and started to learn what I felt I needed to learn.&lt;/p&gt;&lt;p&gt;I wanted to build a console that would be similar to those which are nostalgic to me, I wanted something between an &lt;a href=&quot;https://wikipedia.org/wiki/Nintendo_Entertainment_System&quot; target=&quot;_blank&quot;&gt;NES&lt;/a&gt; and a &lt;a href=&quot;https://wikipedia.org/wiki/Super_Nintendo_Entertainment_System&quot; target=&quot;_blank&quot;&gt;Super Nintendo&lt;/a&gt; or between a &lt;a href=&quot;https://wikipedia.org/wiki/Master_System&quot; target=&quot;_blank&quot;&gt;Sega Master System&lt;/a&gt; and a &lt;a href=&quot;https://wikipedia.org/wiki/Sega_Genesis&quot; target=&quot;_blank&quot;&gt;Mega Drive&lt;/a&gt;.&lt;br/&gt;These video game consoles had a CPU, a custom video chip (in those days it wasn’t called a GPU) and an audio chip either integrated or separate.&lt;br/&gt;Games were distributed in cartridges, which were basically hardware extensions with a ROM chip and sometimes other components as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The initial plan was to build a console with the following characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No emulation, the games/programs had to run on real hardware, not necessarilly hardware of the time, but hardware that is just fast enough for the job&lt;/li&gt;
&lt;li&gt;With a dedicated “retro” CPU chip&lt;/li&gt;
&lt;li&gt;With TV output (analog signal)&lt;/li&gt;
&lt;li&gt;Ability to produce sound&lt;/li&gt;
&lt;li&gt;With support for 2 controllers&lt;/li&gt;
&lt;li&gt;Scrolling background and moving sprites&lt;/li&gt;
&lt;li&gt;Ability to support Mario-style platform games (and of course other types of games as well)&lt;/li&gt;
&lt;li&gt;Games/Programs available through an SD Card&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The reason I wanted SD card support instead of cartridge support, it’s mainly because it’s a lot more practical to have programs available in an SD card, as it makes it a lot easier to copy files from a PC to it. Having cartridges would mean to make even more hardware and to have a new hardware for each program.&lt;/p&gt;

&lt;h3 id=&quot;video-signal&quot;&gt;Video signal&lt;/h3&gt;
&lt;p&gt;The first thing I worked on was the video signal generation.&lt;br/&gt;Each video game console of the era I was aiming for had different proprietary graphics chips which made them all have different characteristics.&lt;br/&gt;For this reason I didn’t want to use any pre-made graphics chip, I wanted my console to have unique graphical capabilities. And because it was impossible for me to make my own chip, and I didn’t know how to use an FPGA, I opted for a software based graphics-chip using a 20Mhz 8-bit microcontroller.&lt;br/&gt;It’s not overkill and has just enough performance to generate the kind of graphics I want.&lt;/p&gt;
&lt;p&gt;So, I started by using an Atmega644 microcontroller running at 20Mhz to send a &lt;a href=&quot;https://wikipedia.org/wiki/PAL&quot; target=&quot;_blank&quot;&gt;PAL&lt;/a&gt; video signal to a TV (because the microcontroller doesn’t support this protocol natively, I had to bit bang the PAL video signal protocol):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/vpuTest1.jpg&quot; alt=&quot;VPU Test 1&quot; width=&quot;700&quot;/&gt;&lt;img src=&quot;https://internalregister.github.io/assets/vpuTest2.jpg&quot; alt=&quot;VPU Test 2&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The microcontroller produces 8-bit color (RGB332, 3 bits for red, 3 bits for green and 2 bits for blue) and a passive DAC is used to convert this to analog RGB. Luckily in Portugal one common way to connect an external device to a TV is through a &lt;a href=&quot;https://wikipedia.org/wiki/SCART&quot; target=&quot;_blank&quot;&gt;SCART&lt;/a&gt; connector and most TVs accept RGB input through SCART.&lt;/p&gt;
&lt;h3 id=&quot;a-proper-graphics-system&quot;&gt;A proper graphics system&lt;/h3&gt;
&lt;p&gt;Because I wanted to have a microcontroller only drive the TV signal (I call it the VPU, Video Processing Unit), I decided to use a double-buffer technique.&lt;/p&gt;
&lt;p&gt;I had the second microcontroller (PPU, Picture Processing Unit, which is an Atmega1284 also at 20Mhz) generate an image to a RAM chip (VRAM1) while the first one would dump the contents of another RAM chip (VRAM2) to the TV.&lt;br/&gt;After one frame (2 frames in PAL or 1/25th of a second), the VPU switches the RAMs, and dumps the image generated into VRAM1 while the PPU generates an image to VRAM2.&lt;br/&gt;The video board turned out quite complex as I had to use some external hardware to allow for the two microcontrollers to access the same RAM chips and also to speed up the access to RAM that also had to be bit-banged, so I added some 74 series chips such as counters, line selectors, transceivers, etc.&lt;/p&gt;
&lt;p&gt;The firmware for VPU and especially the PPU also became quite complex as I had to do extremely performant code to be able to have all the graphical capabilities I wanted, originally it was all done in assembly, later I coded some of it in C.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/videoBoard2.jpg&quot; alt=&quot;Video Board 1&quot; width=&quot;700&quot;/&gt;&lt;img src=&quot;https://internalregister.github.io/assets/videoBoard3.jpg&quot; alt=&quot;Video Board 2&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I ended up having the PPU generate a 224x192 pixel image that is then sent to the TV by the VPU. This resolution might seem low, but it is in fact only a bit lower than the consoles mentioned above that usually had resolutions of 256x224 pixels. The lower resolution allowed me to cram more graphical features into the time I had to draw each frame.&lt;/p&gt;&lt;p&gt;Just like in the old days the PPU has “fixed” capabilities that can be configured. The background that can be rendered is composed of 8x8 pixel characters (sometimes called tiles). This means a screen background has the size of 28x24 tiles.&lt;br/&gt;In order to have per-pixel scrolling and the ability to update the background seamlessly I made it so there are 4 virtual screens each one having 28x24 tiles that are contiguous and wrap around one other:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/background.png&quot; alt=&quot;Background&quot; width=&quot;448&quot;/&gt;&lt;br/&gt;&lt;img src=&quot;https://internalregister.github.io/assets/virtualBackground.png&quot; alt=&quot;Virtual Background&quot; width=&quot;448&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Above the background, the PPU can render 64 &lt;a href=&quot;https://wikipedia.org/wiki/Sprite_(computer_graphics)&quot; target=&quot;_blank&quot;&gt;sprites&lt;/a&gt; that can have a width and height of either 8 or 16 pixels (1, 2 or 4 characters) and can be flipped horizontally or vertically or in both axes.&lt;br/&gt;Also above the background an “overlay” can be rendered, which is a patch composed of 28x6 tiles. This is useful for games that need a HUD and in which the background is scrolling and sprites are being used for other purposes than to show information.&lt;/p&gt;&lt;p&gt;Other “advanced” feature is the ability to scroll the background in different directions in separate lines, this enables games to have effetcs such as a limited &lt;a href=&quot;https://wikipedia.org/wiki/Parallax_scrolling&quot; target=&quot;_blank&quot;&gt;parallax scrolling&lt;/a&gt; or split-screen.&lt;/p&gt;
&lt;p&gt;And there’s also the attribute table, which is the possibility of giving each tile a value from 0 to 3, and then it’s possible to set all the tiles of a given attribute to a certain tile page or increment their character number. This is useful when there are certain parts of the background that change constantly, the CPU doesn’t need to update each one of the tiles, it only needs to say something like: “all tiles with attribute 1 will increment their character number by 2” (using different techniques, this effect can be seen for example in block tiles with a moving question mark in Mario games or in waterfall tiles that seem to be changing constantly seen in other games).&lt;/p&gt;
&lt;h3 id=&quot;cpu&quot;&gt;CPU&lt;/h3&gt;
&lt;p&gt;After having a functional video board, I started working with the CPU I chose for the console, the &lt;a href=&quot;https://wikipedia.org/wiki/Zilog_Z80&quot; target=&quot;_blank&quot;&gt;Zilog Z80&lt;/a&gt;.&lt;br/&gt;One of the reasons I chose the Z80 (other than it just being a cool retro CPU) was because the Z80 has access to a 16bit memory space and a 16bit IO space, something that other similar 8-bit CPUs do not have, such as the famous &lt;a href=&quot;https://wikipedia.org/wiki/MOS_Technology_6502&quot; target=&quot;_blank&quot;&gt;6502&lt;/a&gt;.&lt;br/&gt;The 6502, for example, only has a 16bit memory space, which means that the whole 16bits were not reserved just for memory but had to be shared between memory access and external device access, such as video, audio, inputs, etc. By having an IO space together with a memory space, I could have the whole of the 16bit memory space reserved for memory (64KB of code and data) and have the IO space for communication with external devices.&lt;/p&gt;&lt;p&gt;I started by connecting the CPU to an EEPROM with some test code and also connecting it via the IO space to a microcontroller I had set up to communicate with a PC via &lt;a href=&quot;https://wikipedia.org/wiki/RS-232&quot; target=&quot;_blank&quot;&gt;RS232&lt;/a&gt; in order to check if the CPU was functioning well as well as all the connections I was making. This microcontroller (an Atmega324 operating at 20Mhz) was to become the IO MCU (or input/output microcontroller unit), responsible for managing access to the game controllers, SD Card, &lt;a href=&quot;https://wikipedia.org/wiki/PS/2_port&quot; target=&quot;_blank&quot;&gt;PS/2&lt;/a&gt; Keyboard and the RS232 communication.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/cpuBoard1.jpg&quot; alt=&quot;CPU Board 1&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The CPU was then connected to a 128KB RAM Chip, from which 56KB was accessible (this seems like a waste but I could only get either 128KB or 32KB RAM chips). This way the CPUs memory space is composed of 8KB of ROM and 56KB of RAM.&lt;/p&gt;&lt;p&gt;After this I updated the IO MCU’s firmware with the help of this &lt;a href=&quot;http://www.roland-riegel.de/sd-reader/&quot; target=&quot;_blank&quot;&gt;library&lt;/a&gt; and added SD Card support.&lt;br/&gt;The CPU was now able to navigate through directories, browse their contents, open and read from files. All this by reading and writing to specific IO space addresses.&lt;/p&gt;
&lt;h3 id=&quot;connecting-the-cpu-and-the-ppu&quot;&gt;Connecting the CPU and the PPU&lt;/h3&gt;
&lt;p&gt;The next thing I implemented was the interaction between the CPU and the PPU.&lt;br/&gt;For this I found “an easy solution” which was to get dual-port RAM (a RAM chip that can be simultaneously connected to two different buses), it saves me from having to place more ICs like line selectors and such and also it makes the accesses to the RAM between both chips virtually simultaneous. The PPU also comunicates with the CPU directly by activating its NMI (non-masking interrupt) every frame. This means the CPU has an interrupt every frame, which makes it valuable for timing and knowing when to update graphics.&lt;/p&gt;&lt;p&gt;Each frame the interaction between CPU, PPU and VPU is as following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The PPU copies the information of the PPU-RAM to internal RAM.&lt;/li&gt;
&lt;li&gt;The PPU sends an NMI signal to the CPU&lt;/li&gt;
&lt;li&gt;At the same time:
&lt;ul&gt;&lt;li&gt;the CPU jumps to the NMI interrupt function and starts updating the PPU-RAM with the new graphical frame state. (the program should return from the interrupt before the start of the next frame)&lt;/li&gt;
&lt;li&gt;the PPU renders the image based on the information it had previously copied to one of the VRAMs.&lt;/li&gt;
&lt;li&gt;the VPU sends the image in the other VRAM to the TV.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Around this time I also added support for game controllers, I originally wanted to use Super Nintendo controllers, but the socket for this type of controller is proprietary and was hard to come by, therefore I chose the Mega Drive/Genesis compatible 6-button controllers, they use standard &lt;a href=&quot;https://wikipedia.org/wiki/D-subminiature&quot; target=&quot;_blank&quot;&gt;DB-9&lt;/a&gt; sockets that are widely available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/jointBoard1.jpg&quot; alt=&quot;Joint Board 1&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;time-for-the-first-real-game&quot;&gt;Time for the first real game&lt;/h3&gt;
&lt;p&gt;At this point I had a CPU with game controller support that could control the PPU and could load programs from an SD Card, so…time to make a game in Z80 assembly of course, it took me a couple of days of my free time to make this (&lt;a href=&quot;https://internalregister.github.io/assets/miniBreakout.asm&quot;&gt;source code&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/2Pcrg1fesBk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;video&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;h3 id=&quot;adding-custom-graphics&quot;&gt;Adding custom graphics&lt;/h3&gt;
&lt;p&gt;This was awesome, I now had a working video game console, but…it still wasn’t enough, there was no way for a game to have custom graphics, it had to use the graphics stored in the PPU firmware that would only be changed when its firmware was updated, so I tried to figure out a way of adding a RAM chip with graphics (Character RAM) and somehow load it with information coming from the CPU and making it accessible to the PPU, all this with as little components I could, because the console was getting really big and complex.&lt;/p&gt;
&lt;p&gt;So I came up with a way: only the PPU would have access to this new RAM, the CPU would be able to load information into it through the PPU and while this transfer was happening, the RAM wouldn’t be used for graphics, but only the internal graphics would be used.&lt;/p&gt;
&lt;p&gt;The CPU can then switch from internal graphics to Character RAM (CHR-RAM) mode and the PPU will use these custom graphics, it’s possibly not the ideal solution, but it works. In the end the new RAM has 128KB and can store 1024 8x8 pixel characters for background and another 1024 characters of the same size for sprites.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/jointBoard2.jpg&quot; alt=&quot;Joint Board 2&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;and-finally-sound&quot;&gt;And finally sound&lt;/h3&gt;
&lt;p&gt;As for the sound, it was the last thing to be implemented. Originally I intended to give it similar capabilities as those seen in the &lt;a href=&quot;http://uzebox.org&quot; target=&quot;_blank&quot;&gt;Uzebox&lt;/a&gt;, basically to have a microcontroller generate 4 channels of PWM sound.&lt;br/&gt;However I found out I could get my hands on vintage chips relatively easily, and I ordered a few YM3438 &lt;a href=&quot;https://wikipedia.org/wiki/Frequency_modulation_synthesis&quot; target=&quot;_blank&quot;&gt;FM synthesis&lt;/a&gt; chips, these sound chips are fully compatible with the &lt;a href=&quot;https://wikipedia.org/wiki/Yamaha_YM2612&quot; target=&quot;_blank&quot;&gt;YM2612&lt;/a&gt; which is the one found in the Mega Drive/Genesis. By integrating this chip, I could have Mega Drive quality music along with sound effects produced by a microcontroller.&lt;br/&gt;The CPU controls the SPU (Sound Processor Unit, the name I gave to the microcontroller that controls the YM3438 and produces sound on its own) again through a dual-port RAM, this time only 2KB in size.&lt;/p&gt;&lt;p&gt;Similarly to the graphics module, the sound module has 128KB for storing sound patches and PCM samples, the CPU can load information to this memory through the SPU. This way the CPU can either tell the SPU to play commands stored in this RAM or update commands to the SPU every frame.&lt;/p&gt;&lt;p&gt;The CPU controls the 4 PWM channels through 4 circular buffers present in the SPU-RAM.&lt;br/&gt;The SPU will go through these buffers and execute the commands present in them.&lt;br/&gt;In the same way there is another circular buffer in the SPU-RAM for the FM synthesis chip.&lt;/p&gt;&lt;p&gt;So, similar to how it works with graphics, the interaction between CPU and SPU works like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The SPU copies the information in the SPU-RAM to internal RAM.&lt;/li&gt;
&lt;li&gt;The SPU waits for the NMI signal sent by the PPU. (for synchronization purposes)&lt;/li&gt;
&lt;li&gt;At the same time:
&lt;ul&gt;&lt;li&gt;The CPU updates the buffers for the PWM channels and for the FM synthesis chip.&lt;/li&gt;
&lt;li&gt;the SPU executes the commands in the buffers regarding the information in its internal memory.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Continuously while all of the above happens, the SPU updates the PWM sound at a frequency of 16Khz.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/soundBoard1.jpg&quot; alt=&quot;Sound Board 1&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;

&lt;p&gt;After all the modules were developed, some were put into protoboards.&lt;br/&gt;As for the CPU module, I’ve managed to design and order a custom PCB, don’t know if I’ll do the same for the other modules, I think I was pretty lucky to get a working PCB on the first try.&lt;br/&gt;Only the sound module remains as a breadboard (for now).&lt;/p&gt;&lt;p&gt;This is the video game console now (at time of writing):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/console1.jpg&quot; alt=&quot;Console 1&quot; width=&quot;700&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;architecture&quot;&gt;Architecture&lt;/h3&gt;
&lt;p&gt;This diagram helps illustrate what components are in each module and how they interact with one another. (the only things missing are the signal the PPU sends to the CPU directly every frame in the form of an NMI and the same signal being sent to the SPU as well)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/architecture2.png&quot; alt=&quot;Architecture&quot;/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;CPU&lt;/em&gt;: Zilog Z80 operating at 10Mhz&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CPU-ROM&lt;/em&gt;: 8KB EEPROM, holds the bootloader code&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CPU-RAM&lt;/em&gt;: 128KB RAM (56KB usable), holds the code and data of the programs/games&lt;/li&gt;
&lt;li&gt;&lt;em&gt;IO MCU&lt;/em&gt;: Atmega324, serves as an interface between the CPU and the RS232, PS/2 Keyboard, Controllers and SD Card filesystem&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PPU-RAM&lt;/em&gt;: 4KB Dual-port RAM, it’s the interface RAM between the CPU and the PPU&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CHRRAM&lt;/em&gt;: 128KB RAM, holds the custom background tiles and sprites graphics (in 8x8 pixel characters).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;VRAM1, VRAM2&lt;/em&gt;: 128KB RAM (43008 bytes used), they are used to store the framebuffer and are written to by the PPU and read by the VPU.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;PPU (Picture Processing Unit)&lt;/em&gt;: Atmega1284, draws the frame to the framebuffers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;VPU (Video Processing Unit)&lt;/em&gt;: Atmega324, reads the framebuffers and generates an RGB and PAL Sync signal.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SPU-RAM&lt;/em&gt;: 2KB Dual-port RAM, serves as an interface between the CPU and the SPU.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SNDRAM&lt;/em&gt;: 128KB RAM, holds PWM Patchs, PCM samples and FM Synthesis instruction blocks.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;YM3438&lt;/em&gt;: YM3438, FM Synthesis chip.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;SPU (Sound Processing Unit)&lt;/em&gt;: Atmega644, generates PWM-based sound and controls the YM3438.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;the-final-specs&quot;&gt;The final specs&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CPU:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;8-bit CPU Zilog Z80 operating at 10Mhz.&lt;/li&gt;
&lt;li&gt;8KB of ROM for bootloader.&lt;/li&gt;
&lt;li&gt;56KB of RAM.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;IO:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Reading data from FAT16/FAT32 SD Card.&lt;/li&gt;
&lt;li&gt;Reading/writing to RS232 port.&lt;/li&gt;
&lt;li&gt;2 MegaDrive/Genesis-compatible controllers.&lt;/li&gt;
&lt;li&gt;PS2 Keyboard.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Video:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;224x192 pixel resolution.&lt;/li&gt;
&lt;li&gt;25 fps (half PAL fps).&lt;/li&gt;
&lt;li&gt;256 Colors (RGB332).&lt;/li&gt;
&lt;li&gt;2x2 virtual background space (448x384 pixels), with bi-directional per-pixel scrolling, described using 4 name tables.&lt;/li&gt;
&lt;li&gt;64 sprites with width and height 8 or 16 pixels with possibility of being flipped in X or Y axis.&lt;/li&gt;
&lt;li&gt;Background and sprites composed of 8x8 pixels characters.&lt;/li&gt;
&lt;li&gt;Character RAM with 1024 background characters and 1024 sprite characters.&lt;/li&gt;
&lt;li&gt;64 independent background horizontal scrolling in custom lines.&lt;/li&gt;
&lt;li&gt;8 independent background vertical scrolling in custom lines.&lt;/li&gt;
&lt;li&gt;Overlay plane with 224x48 pixels with or without colorkey transparency.&lt;/li&gt;
&lt;li&gt;Background attribute table.&lt;/li&gt;
&lt;li&gt;RGB and Composite PAL output through SCART socket.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Sound:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PWM generated 8-bit 4 channel sound, with pre-defined waveforms (square, sine, sawtooth, noise, etc.).&lt;/li&gt;
&lt;li&gt;8-bit 8Khz PCM samples in one of PWM channels.&lt;/li&gt;
&lt;li&gt;YM3438 FM synthesis chip updated with instructions at 50Hz.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One piece of software that was written for the console was the bootloader. The bootloader is stored in the CPU-ROM and can occupy up to 8KB. It uses the first 256 bytes of the CPU-RAM. It’s the first software to be run by the CPU. It’s purpose is to show the programs available in the SD Card.&lt;br/&gt;These programs are in files that contain the compiled code and may also contain custom graphics data and sound data.&lt;br/&gt;After being selected, the program is then loaded into the CPU-RAM, CHR-RAM and SPU-RAM. And the respective program is executed. The code of the programs that can be loaded into the console, can take up the 56KB of the RAM, except the first 256 bytes and of course have to take into account the stack and also leave space for data.&lt;br/&gt;Both the bootloader and programs for this console are developed in a similar fashion, here’s a brief explanation on how these programs are made.&lt;br/&gt;&lt;/p&gt;
&lt;h3 id=&quot;memoryio-mapping&quot;&gt;Memory/IO Mapping&lt;/h3&gt;
&lt;p&gt;One thing to note when developing for the console is how the CPU can access the other modules of the console, therefore memory and io space mapping are crucial.&lt;/p&gt;&lt;p&gt;The CPU accesses its bootloader ROM and RAM through the memory space.&lt;br/&gt;CPU memory space mapping:&lt;br/&gt;&lt;img src=&quot;https://internalregister.github.io/assets/memoryMapping.png&quot; alt=&quot;Memory Mapping&quot;/&gt;&lt;/p&gt;&lt;p&gt;It accesses the PPU-RAM, SPU-RAM and the IO MCU through IO space.&lt;br/&gt;CPU IO space mapping:&lt;br/&gt;&lt;img src=&quot;https://internalregister.github.io/assets/ioMapping.png&quot; alt=&quot;IO Mapping&quot;/&gt;&lt;/p&gt;&lt;p&gt;Inside IO space mapping, the IO MCU, PPU and SPU have specific mappings.&lt;/p&gt;
&lt;h3 id=&quot;controlling-the-ppu&quot;&gt;Controlling the PPU&lt;/h3&gt;
&lt;p&gt;We can control the PPU through writing to the PPU-RAM and we know from the information above that the PPU-RAM is accessible through IO space from address 1000h to 1FFFh.&lt;br/&gt;This is how that address range looks like seen in more detail:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/ppuMapping.png&quot; alt=&quot;PPU Mapping&quot;/&gt;&lt;br/&gt;The PPU Status has the following values:&lt;br/&gt;0 - Internal graphics mode&lt;br/&gt;1 - Custom graphics mode (CHR-RAM)&lt;br/&gt;2 - Write to CHR-RAM mode&lt;br/&gt;3 - Write complete, waiting for CPU to aknowledge mode&lt;/p&gt;
&lt;p&gt;As an example, this is how we can work with sprites:&lt;br/&gt;The console has the ability to render 64 simultaneous sprites. The information on these sprites are accessible through the CPU io mapping from address 1004h to 1143h (320 bytes), each sprite has 5 bytes of information (5 x 64 = 320 bytes):&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Miscellaneous byte (each of its bits is a flag: Active, Flipped_X, Flipped_Y, PageBit0, PageBit1, AboveOverlay, Width16 and Height16)&lt;/li&gt;
&lt;li&gt;Character byte (which character is the sprite in the page described by the corresponding flags above)&lt;/li&gt;
&lt;li&gt;Color key byte (which color is to be transparent)&lt;/li&gt;
&lt;li&gt;X position byte&lt;/li&gt;
&lt;li&gt;Y position byte&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;So, to make a sprite visible, we must put the Active flag to 1 and put the sprite in coordinates in which it is visible (coordinates x=32 and y=32 puts the sprite in the top left of the screen, less than that and he’s off screen or partially visible).&lt;br/&gt;Then we can also set its character and what is its transparent color.&lt;/p&gt;
&lt;p&gt;For example, if we want to set the 10th sprite as visible we would set io address 4145 (1004h + (5 x 9)) to 1 and then set its coordinates to, for example, x=100 and y=120, so we would set address 4148 to 100 and 4149 to 120.&lt;/p&gt;
&lt;h3 id=&quot;using-assembly-to-code&quot;&gt;Using Assembly to code&lt;/h3&gt;
&lt;p&gt;One of the ways to code a program for the console is using assembly language.&lt;/p&gt;&lt;p&gt;Below is a sample code of making the first sprite move and bump into the corners of the screen:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;ORG 2100h

PPU_SPRITES: EQU $1004
SPRITE_CHR: EQU 72
SPRITE_COLORKEY: EQU $1F
SPRITE_INIT_POS_X: EQU 140
SPRITE_INIT_POS_Y: EQU 124

jp main

DS $2166-$
nmi:
    ld bc, PPU_SPRITES + 3
    ld a, (sprite_dir)
    and a, 1
    jr z, subX
    in a, (c) ; increment X
    inc a
    out (c), a
    cp 248
    jr nz, updateY
    ld a, (sprite_dir)
    xor a, 1
    ld (sprite_dir), a
    jp updateY
subX:
    in a, (c) ; decrement X
    dec a
    out (c), a
    cp 32
    jr nz, updateY    
    ld a, (sprite_dir)
    xor a, 1
    ld (sprite_dir), a
updateY:
    inc bc
    ld a, (sprite_dir)
    and a, 2
    jr z, subY
    in a, (c) ; increment Y
    inc a
    out (c), a
    cp 216
    jr nz, moveEnd
    ld a, (sprite_dir)
    xor a, 2
    ld (sprite_dir), a
    jp moveEnd
subY:
    in a, (c) ; decrement Y
    dec a
    out (c), a
    cp 32
    jr nz, moveEnd
    ld a, (sprite_dir)
    xor a, 2
    ld (sprite_dir), a
moveEnd:
    ret

main:
    ld bc, PPU_SPRITES
    ld a, 1
    out (c), a  ; Set Sprite 0 as active
    inc bc
    ld a, SPRITE_CHR
    out (c), a  ; Set Sprite 0 character
    inc bc
    ld a, SPRITE_COLORKEY
    out (c), a  ; Set Sprite 0 colorkey
    inc bc
    ld a, SPRITE_INIT_POS_X
    out (c), a  ; Set Sprite 0 position X
    inc bc
    ld a, SPRITE_INIT_POS_Y
    out (c), a  ; Set Sprite 0 position Y
mainLoop:    
    jp mainLoop

sprite_dir:     DB 0&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;using-a-c-toolchain&quot;&gt;Using a C toolchain&lt;/h3&gt;
&lt;p&gt;It’s also possible to develop programs using the &lt;a href=&quot;http://sdcc.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;SDCC&lt;/a&gt; compiler and some custom tools to use C language.&lt;br/&gt;This makes development quicker, although it could lead to less performant code.&lt;/p&gt;&lt;p&gt;Sample code with an equivalent result to the above assembly code, here I’m using a library to help with the calls to the PPU:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;console.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define SPRITE_CHR 72
#define SPRITE_COLORKEY 0x1F
#define SPRITE_INIT_POS_X 140
#define SPRITE_INIT_POS_Y 124
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_sprite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPRITE_CHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPRITE_COLORKEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPRITE_INIT_POS_X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPRITE_INIT_POS_Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nmi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;248&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sprite_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sprite_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;216&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sprite_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sprite_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;set_sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;custom-graphics&quot;&gt;Custom Graphics&lt;/h3&gt;
&lt;p&gt;The console has graphics read-only predefined graphics stored in the PPU firmware (1 page of background tiles and another page of sprite graphics), however it is possible to use custom graphics for the program.&lt;/p&gt;
&lt;p&gt;The objective is to have all the necessary graphics in the binary form that the console’s bootloader can then load into the CHR-RAM. In order to do this I start with several images already in the right size, in this case to be used as background in several situations:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/tetrisTileComponents.png&quot; alt=&quot;Sample tile components&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Since custom graphics are composed of 4 pages of 256 8x8 characters for background and 4 pages of 256 8x8 characters for sprites.&lt;br/&gt;I convert the graphics above to a PNG file for every page using a custom tool (eliminating duplicate 8x8 resulting characters):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/tetrisTilesSheet.png&quot; alt=&quot;Sample character sheet&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And then use another custom tool to convert it to an RGB332 binary file of 8x8 pixel characters.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/graphicsCmd.png&quot; alt=&quot;Graphics command line&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The result are binary files composed of 8x8 pixel characters that are contiguous in memory (each one occupying 64 bytes).&lt;/p&gt;
&lt;h3 id=&quot;sound&quot;&gt;Sound&lt;/h3&gt;
&lt;p&gt;Wave samples are converted to 8-bit 8Khz PCM samples.&lt;br/&gt;Patches for PWM SFX/music can be composed using pre-defined instructions.&lt;br/&gt;And as for Yamaha YM3438 FM Synthesis chip, I found that the application called &lt;a href=&quot;http://deflemask.com&quot; target=&quot;_blank&quot;&gt;DefleMask&lt;/a&gt; can be used to produce PAL-clocked music targeting the Genesis sound-chip YM2612 which is compatible with the YM3438.&lt;/p&gt;
&lt;p&gt;DefleMask can then export the music to VGM and then I can use another custom tool to convert VGM to a homebrew sound binary.&lt;/p&gt;
&lt;p&gt;All the binaries from all 3 types of sound are combined into a single binary file that can then be loaded to the SNDRAM by the bootloader.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/soundCmd.png&quot; alt=&quot;Sound command line&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;
&lt;p&gt;The program’s binary, the graphics and the sound are combined into a PRG file.&lt;br/&gt;A PRG file has a header indicating if the program has custom graphics and/or sound and what’s the size for each as well as all the corresponding binary information.&lt;/p&gt;
&lt;p&gt;This file can then be put into and SD Card and the console bootloader will read it and load it into all the specific RAMs and run the program as described above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/prgCmd.png&quot; alt=&quot;PRG command line&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-the-emulator&quot;&gt;Using the emulator&lt;/h3&gt;
&lt;p&gt;To help with the development of software for the console I’ve developed an emulator in C++ using &lt;a href=&quot;https://www.wxwidgets.org/&quot; target=&quot;_blank&quot;&gt;wxWidgets&lt;/a&gt;.&lt;br/&gt;In order to emulate the CPU I’ve used the &lt;a href=&quot;https://github.com/ggambetta/libz80&quot; target=&quot;_blank&quot;&gt;libz80&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;I’ve added some debugging features to the emulator, I can stop in a given breakpoint and step through the assembly instructions of it, there’s also some source mapping available if the game was the result of compiled C code.&lt;br/&gt;As for graphics I can check what’s stored in the tile pages/name tables (the background mapping that’s the size of 4 screens) and I can check what’s stored in CHRRAM.&lt;/p&gt;
&lt;p&gt;Here’s an example of running a program using the emulator and then using some of the debugging tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://internalregister.github.io/assets/emulatorDemo.gif&quot; alt=&quot;Emulator Demo&quot;/&gt;&lt;/p&gt;


&lt;p&gt;(The following videos are the console’s video output to a CRT TV captured by a cellphone camera, I’m sorry for the quality not being the very best)&lt;/p&gt;
&lt;p&gt;A BASIC implementation running on the console and using the PS/2 keyboard, in this video, after the first program, I write directly into PPU-RAM through IO space to enable and configure a sprite and finally move it:&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/2UNjKx4uZGY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;video&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;Graphics demo, this video shows a program that bounces 64 16x16 sprites, over a background with custom scrolling and with the overlay plane enabled and moving up and down above or behind sprites:&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/OA0q3_Krgxc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;video&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;Sound demo showing the YM3438 capabilities as well as PCM sample playback, the FM music plus the PCM samples in this demo take up almost all of the 128KB of the SNDRAM:&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/xDsTGmqxLzM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;video&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;Tetris, using almost just background tiles for graphics, for music it uses the YM3438 and for sound effects PWM sound patches :&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/E77XZUwKd54&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot; class=&quot;video&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;


&lt;p&gt;This project was truly a dream come true, I have been working on it for some years now, on and off during my free time, I never thought I would reach this far into building my own retro-style video game console. It certainly is not perfect, I’m still by no means an expert on electronic design, the console has way too many components and undoubtedly could be made better and more efficient and probably someone reading this is thinking exactly that.&lt;br/&gt;However, while building this project, I’ve learned a lot about electronics, game console and computer design, assembly language and other interesting topics, and above all it gives me great satisfaction to play a game I’ve made on hardware I’ve made and designed myself.&lt;/p&gt;&lt;p&gt;I have plans to build other consoles/computers. In fact I have another video game console in the making, almost complete, which is a simplified retro-style console based of a cheap FPGA board and a few extra components (not nearly as many as in this project, obviously), designed to be a lot cheaper and replicable.&lt;/p&gt;&lt;p&gt;Even though there’s a lot I’ve written about this project, there certainly would be a lot more to talk about, I barely mentioned how the sound engine works and how the CPU interacts with it, there’s also a lot more that can be said about the graphics engine, the other IO available and pretty much the console itself.&lt;br/&gt;Depending on the feedback I might write other articles focusing on updates, more indepth information on the different modules of the console or other projects.&lt;/p&gt;
&lt;h3 id=&quot;projectswebsitesyoutube-channels-that-helped-me-for-inspiration-and-technical-knowledge&quot;&gt;Projects/Websites/Youtube channels that helped me for inspiration and technical knowledge:&lt;/h3&gt;
&lt;p&gt;These websites/channels not only gave me inspiration but also helped me with solutions to some of the dificulties I have encountered in the making of this project.&lt;/p&gt;
&lt;p&gt;If you’ve read this far, thank you. :)&lt;/p&gt;
&lt;p&gt;And if you have any feedback to give or any questions, please comment below.&lt;/p&gt;

&lt;noscript readability=&quot;1.15625&quot;&gt;
&lt;p&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;/body&gt;</description>
<pubDate>Thu, 14 Mar 2019 20:25:03 +0000</pubDate>
<dc:creator>pkiller</dc:creator>
<og:title>Building a ‘Homebrew’ Video Game Console</og:title>
<og:description>Software and hardware projects for fun from a guy who loves retro computing</og:description>
<og:url>/2019/03/14/Homebrew-Console.html</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://internalregister.github.io/2019/03/14/Homebrew-Console.html</dc:identifier>
</item>
<item>
<title>Facebook Loses Top Executives, Including Chris Cox</title>
<link>https://www.nytimes.com/2019/03/14/technology/facebook-chris-cox.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/03/14/technology/facebook-chris-cox.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;SAN FRANCISCO — Two of Facebook’s top executives — one regarded as the company’s No. 3, and the other the head of its WhatsApp messaging service — are leaving after disagreements with Mark Zuckerberg, the chief executive, over the social network’s future direction.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The differences stemmed from Mr. Zuckerberg’s asserting control over his company and its apps — Instagram, WhatsApp and Facebook Messenger — by rolling out a plan to integrate the services into &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/03/06/technology/mark-zuckerberg-facebook-privacy.html?module=inline&quot; title=&quot;&quot;&gt;a single privacy-focused platform&lt;/a&gt;, according to six people involved in the situation.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The change is a substantial shift for Facebook, which has traditionally encouraged people to publicly share posts, videos and photos. Executives at Facebook who had run the various services were concerned that knitting together the apps would take a toll on the popularity and growth of their individual products, said the people, who were not authorized to speak publicly. And with Mr. Zuckerberg exerting more control, the executives were also fearful of losing autonomy and power, they said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Chris Cox, Facebook’s chief product officer and a member of Mr. Zuckerberg’s inner circle, is one of the two executives leaving. He alluded to the disagreements on Thursday &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://m.facebook.com/story.php?story_fbid=10104525464789083&amp;amp;id=213466&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;in a public post&lt;/a&gt; about his departure. “As Mark has outlined, we are turning a new page in our product direction,” wrote Mr. Cox, 36. “This will be a big project and we will need leaders who are excited to see the new direction through.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The other executive who is exiting is Chris Daniels, 43, who runs WhatsApp. Neither one responded to requests for comment.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 erfvjey0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2019/03/14/business/14cox2/merlin_152079030_f939427f-6d9b-4180-b737-e33cb655e76d-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2019/03/14/business/14cox2/merlin_152079030_f939427f-6d9b-4180-b737-e33cb655e76d-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2019/03/14/business/14cox2/merlin_152079030_f939427f-6d9b-4180-b737-e33cb655e76d-jumbo.jpg?quality=90&amp;amp;auto=webp 1024w,https://static01.nyt.com/images/2019/03/14/business/14cox2/merlin_152079030_f939427f-6d9b-4180-b737-e33cb655e76d-superJumbo.jpg?quality=90&amp;amp;auto=webp 2048w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2019/03/14/business/14cox2/merlin_152079030_f939427f-6d9b-4180-b737-e33cb655e76d-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-8i9d0s e13ogyst0&quot;&gt;Chris Daniels, the head of WhatsApp, is also leaving Facebook.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Guillermo Legaria/Agence France-Presse — Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Facebook is undergoing a tricky transition as it tries to recover from two years of scandals over data privacy and disinformation. Those issues have &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/14/technology/facebook-data-russia-election-racism.html?action=click&amp;amp;module=inline&amp;amp;pgtype=Homepage&quot; title=&quot;&quot;&gt;buffeted the Silicon Valley giant&lt;/a&gt;, causing internal turmoil as its leaders have tried to find a way to adjust. Mr. Zuckerberg has made several attempts to rid Facebook of toxic content, false news and other problems, with limited success.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Now, Mr. Zuckerberg is barreling ahead with his shift to focus Facebook on private messaging and away from public broadcasting, even if it means shedding some of his top lieutenants.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Cox has worked with Mr. Zuckerberg for 13 years and joined Facebook as one of its first 15 software engineers. Mr. Cox also was instrumental in building the News Feed, the stream of posts that people see when they log into the service, and which more recently has been under scrutiny for being a hive of misinformation. Among some in Silicon Valley, he had been mentioned as a possible successor to Mr. Zuckerberg.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“Embarking on this new vision represents the start of a new chapter for us,” Mr. Zuckerberg said in a note to staff on Thursday. “While it is sad to lose such great people, this also creates opportunities for more great leaders who are energized about the path ahead to take on new and bigger roles.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The departures add to the executive turnover at Facebook, which for years had been stable in its top ranks. Mr. Zuckerberg kept close many key executives, including his chief operating officer, Sheryl Sandberg, as well as Mr. Cox and others.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;

&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But that bench has undergone numerous changes more recently as Facebook has grappled with its lapses and tried to reorient itself. Last year, Kevin Systrom and Mike Krieger, the co-founders of Instagram, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/09/24/technology/instagram-cofounders-resign.html?module=inline&quot; title=&quot;&quot;&gt;left the company after clashing&lt;/a&gt; with Mr. Zuckerberg over the future of the photo-sharing network. Jan Koum and Brian Acton, the co-founders of WhatsApp, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/04/30/technology/whatsapp-facebook-jan-koum.html?module=inline&quot; title=&quot;&quot;&gt;also left&lt;/a&gt; after similar disagreements with Mr. Zuckerberg. Other executives, including Facebook’s head of communications and policy and its security chief, have also departed.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Ben Horowitz, a venture capitalist at Andreessen Horowitz, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://twitter.com/bhorowitz/status/1106300167295131648&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;said on Twitter&lt;/a&gt; that Mr. Zuckerberg’s new direction for Facebook was controversial because it was such a cultural departure for what had been an open and public social network. But he said Mr. Zuckerberg appeared committed to privacy by plowing ahead with the changes even “in the face of extremely strong dissent.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“So much so, that he is willing to lose outstanding executives who disagree with this direction,” Mr. Horowitz said. (Mr. Horowitz is a partner at Andreessen Horowitz with Marc Andreessen, a venture capitalist who sits on Facebook’s board.)&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Inside Facebook, frustration over Mr. Zuckerberg’s planned changes have been mounting for months, said the people involved the situation. Combining Instagram, WhatsApp and Messenger will be a companywide effort that will take years of infrastructure work and deep changes to some of its products, they said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Daniels, who previously ran Facebook’s business development team and had other roles, was appointed head of WhatsApp last May. He disagreed with some of the choices that were being made to connect the apps, said people familiar with his thinking. He was also concerned that Mr. Zuckerberg’s plan would harm the success of WhatsApp, which is particularly popular outside the United States.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Because of those changes, Mr. Daniels handed in his resignation months ago, said two of the people, though the decision did not become public until Thursday.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Cox has also been frustrated with Mr. Zuckerberg’s decisions in recent months, some of the people said. Less than a year ago, Mr. Cox &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.recode.net/2018/5/8/17330048/chris-cox-facebook-whatsapp-instagram-messenger-mark-zuckerberg&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;shifted into&lt;/a&gt; one of the most powerful positions at Facebook as chief product officer, responsible for overseeing Instagram, WhatsApp, Messenger and Facebook itself.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Almost immediately, Mr. Cox ran into difficulties, the people said. Employees said he disagreed with some of Mr. Zuckerberg’s product ideas and changes, including the “unified messaging” project intended to connect the apps.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But Mr. Zuckerberg had already made his decision. Mr. Cox informed Facebook of his decision to leave on Monday, according to a company filing.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“For over a decade, I’ve been sharing the same message that Mark and I have always believed: Social media’s history is not yet written, and its effects are not neutral,” Mr. Cox said in his post. “As its builders we must endeavor to understand its impact — all the good, and all the bad — and take up the daily work of bending it towards the positive, and towards the good.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Zuckerberg has promoted others to take the place of those who have left. Adam Mosseri, a longtime Facebook employee, was promoted to head of Instagram last year. On Thursday, Mr. Zuckerberg said Will Cathcart, another Facebook employee, would run WhatsApp, and Fidji Simo would lead Facebook’s main app.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Thu, 14 Mar 2019 20:01:59 +0000</pubDate>
<dc:creator>minimaxir</dc:creator>
<og:url>https://www.nytimes.com/2019/03/14/technology/facebook-chris-cox.html</og:url>
<og:type>article</og:type>
<og:title>Facebook Loses Top Executives, Including Chris Cox</og:title>
<og:image>https://static01.nyt.com/images/2019/03/14/business/14cox/14cox-facebookJumbo.jpg</og:image>
<og:description>Chris Cox, who is one of the social network’s highest ranking executives, and Chris Daniels, head of WhatsApp, are leaving Facebook.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/03/14/technology/facebook-chris-cox.html</dc:identifier>
</item>
<item>
<title>US to build six nuclear power plants in India</title>
<link>https://www.aljazeera.com/news/2019/03/build-nuclear-power-plants-india-190314072408714.html</link>
<guid isPermaLink="true" >https://www.aljazeera.com/news/2019/03/build-nuclear-power-plants-india-190314072408714.html</guid>
<description>&lt;p&gt;
Indian Foreign Secretary Vijay Gokhale led the talks in Washington [Adnan Abidi/Reuters]
&lt;/p&gt;&lt;div id=&quot;body-200771816342556199&quot; readability=&quot;104.28048142334&quot;&gt;
&lt;p class=&quot;speakable&quot;&gt;The &lt;a href=&quot;https://www.aljazeera.com/topics/country/united-states.html&quot;&gt;United States&lt;/a&gt; and India have agreed to strengthen security and civil nuclear cooperation, including building six US &lt;a href=&quot;https://www.aljazeera.com/topics/issues/nuclear-energy.html&quot;&gt;nuclear power&lt;/a&gt; plants in India, according to a joint statement.&lt;/p&gt;
&lt;p class=&quot;speakable&quot;&gt;The agreement came on Wednesday after two days of talks in Washington between Indian Foreign Secretary Vijay Gokhale and Andrea Thompson, the US undersecretary of state for arms control and international security.&lt;/p&gt;
&lt;p class=&quot;speakable&quot;&gt;&quot;They committed to strengthen bilateral security and civil nuclear cooperation, including the establishment of six US nuclear power plants in India,&quot; the joint statement said.&lt;/p&gt;
&lt;p&gt;It gave no further details of the nuclear plant project.&lt;/p&gt;
&lt;p&gt;The two countries have been discussing the supply of US nuclear reactors to &lt;a href=&quot;https://www.aljazeera.com/topics/country/india.html&quot;&gt;India&lt;/a&gt;, the world's third-biggest buyer of oil, for more than a decade.&lt;/p&gt;
&lt;p&gt;But a long-standing obstacle has been the need to bring Indian liability rules in line with international norms, which require the costs of any accident to be shouldered by the operator rather than the maker of a nuclear power station.&lt;/p&gt;
&lt;h2&gt;Stalled work&lt;/h2&gt;
&lt;p&gt;Pittsburgh-based Westinghouse has been negotiating to build reactors in India for years.&lt;/p&gt;
&lt;p&gt;The project was thrown into doubt when Westinghouse filed for bankruptcy in 2017 after cost overruns on US reactors.&lt;/p&gt;
&lt;p&gt;Canada's Brookfield Asset Management bought Westinghouse from Toshiba in August 2018.&lt;/p&gt;
&lt;p&gt;Last April, Westinghouse received strong support from US Energy Secretary Rick Perry for its India project, which envisaged the building of six AP1000 reactors in the state of Andhra Pradesh.&lt;/p&gt;
&lt;p&gt;The agreement to build the reactors, announced in 2016, followed on from a US-India civil nuclear agreement signed in 2008.&lt;/p&gt;
&lt;p&gt;India plans to triple its nuclear capacity by 2024 to wean Asia's third-largest economy off polluting fossil fuels.&lt;/p&gt;
&lt;p&gt;Last October, India and Russia signed a pact to build six more nuclear reactors at a new site in India following summit talks between their leaders in New Delhi.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 14 Mar 2019 19:26:31 +0000</pubDate>
<dc:creator>sandwall</dc:creator>
<og:title>US to build six nuclear power plants in India</og:title>
<og:description>India and US sign a deal on closer security and civil nuclear cooperation after two days of talks in Washington.</og:description>
<og:url>https://www.aljazeera.com/news/2019/03/build-nuclear-power-plants-india-190314072408714.html</og:url>
<og:image>https://www.aljazeera.com/mritems/Images/2019/3/14/af33f878ad2d4a7fb2b3e94bce9db7dc_18.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.aljazeera.com/news/2019/03/build-nuclear-power-plants-india-190314072408714.html</dc:identifier>
</item>
<item>
<title>DARPA Is Building a $10M, Open-Source, Secure Voting System</title>
<link>https://motherboard.vice.com/en_us/article/yw84q7/darpa-is-building-a-dollar10-million-open-source-secure-voting-system</link>
<guid isPermaLink="true" >https://motherboard.vice.com/en_us/article/yw84q7/darpa-is-building-a-dollar10-million-open-source-secure-voting-system</guid>
<description>&lt;p&gt;For years security professionals and election integrity activists have been pushing voting machine vendors to build more secure and verifiable election systems, so voters and candidates can be assured election outcomes haven’t been manipulated.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Now they might finally get this thanks to a new $10 million contract the Defense Department’s Defense Advanced Research Projects Agency (DARPA) has launched to design and build a secure voting system that it hopes will be impervious to hacking.&lt;/p&gt;

&lt;p&gt;The first-of-its-kind system will be designed by an Oregon-based firm called Galois, a longtime government contractor with experience in designing secure and verifiable systems. The system will use fully open source voting software, instead of the closed, proprietary software currently used in the vast majority of voting machines, which no one outside of voting machine testing labs can examine. More importantly, it will be built on secure open source hardware, made from special secure designs and techniques developed over the last year as part of a special program at DARPA. The voting system will also be designed to create fully verifiable and transparent results so that voters don’t have to blindly trust that the machines and election officials delivered correct results.&lt;/p&gt;
&lt;p&gt;But DARPA and Galois won’t be asking people to blindly trust that their voting systems are secure—as voting machine vendors currently do. Instead they’ll be publishing source code for the software online and bring prototypes of the systems to the Def Con Voting Village this summer and next, so that hackers and researchers will be able to freely examine the systems themselves and conduct penetration tests to gauge their security. They’ll also be working with a number of university teams over the next year to have them examine the systems in formal test environments.&lt;/p&gt;
&lt;p&gt;“Def Con is great, but [hackers there] will not give us as much technical details as we want [about problems they find in the systems],” Linton Salmon, program manager in DARPA’s Microsystems Technology Office who is overseeing the project, said in a phone call. “Universities will give us more information. But we won’t have as many people or as high visibility when we do it with universities.”&lt;/p&gt;

&lt;p&gt;The systems Galois designs won’t be available for sale. But the prototypes it creates will be available for existing voting machine vendors or others to freely adopt and customize without costly licensing fees or the millions of dollars it would take to research and develop a secure system from scratch.&lt;/p&gt;
&lt;p&gt;“We will not have a voting system that we can deploy. That’s not what we do,” said Salmon. “We will show a methodology that could be used by others to build a voting system that is completely secure.”&lt;/p&gt;
&lt;p&gt;Joe Kiniry is the principal scientist at Galois who is leading the project at his company. Kiniry has been involved in efforts to secure elections for years as part of a separate company he runs called Free &amp;amp; Fair. He’s consulted with foreign governments about their election systems, and his company has been working with states in the US to design robust post-election audits. But the idea to create a secure voting system didn’t come from Kiniry; it came from DARPA.&lt;/p&gt;
&lt;p&gt;“DARPA was searching for a sexy demonstration for the [secure hardware] program. What could you put on secure hardware that people would care about and understand?” Kiniry said.&lt;/p&gt;
&lt;p&gt;They needed a project that would be unclassified so DARPA could talk about it publicly.&lt;/p&gt;
&lt;p&gt;“We wanted something where there could be a lot of people who could look at this in an open way and critique it and find problems,” said Salmon.&lt;/p&gt;
&lt;p&gt;The project will leverage the hefty resources of DARPA and its considerable security experience, and if it works, it could help solve a pressing national problem around election security and integrity.&lt;/p&gt;

&lt;p&gt;“If we were to build a fake radar system, it could demonstrate secure hardware, but it wouldn’t be useful to anybody. [DARPA] love the fact that we’re building a demonstrator that might actually be useful to the world,” Kiniry said.&lt;/p&gt;
&lt;p&gt;Kiniy said Galois will design two basic voting machine types. The first will be a ballot-marking device that uses a touch-screen for voters to make their selections. That system won’t tabulate votes. Instead it will print out a paper ballot marked with the voter’s choices, so voters can review them before depositing them into an optical-scan machine that tabulates the votes. Galois will bring this system to Def Con this year.&lt;/p&gt;
&lt;p&gt;Many current ballot-marking systems on the market today have been criticized by security professionals because they print bar codes on the ballot that the scanner can read instead of the human-readable portion voters review. Someone could subvert the bar code to say one thing, while the human-readable portion says something else. Kiniry said they’re aiming to design their system without barcodes.&lt;/p&gt;
&lt;p&gt;The optical-scan system will print a receipt with a cryptographic representation of the voter’s choices. After the election, the cryptographic values for all ballots will be published on a web site, where voters can verify that their ballot and votes are among them.&lt;/p&gt;
&lt;p&gt;“That receipt does not permit you to prove anything about how you voted, but does permit you to prove that the system accurately captured your intent and your vote is in the final tally,” Kiniry said.&lt;/p&gt;

&lt;p&gt;Members of the public will also be able to use the cryptographic values to independently tally the votes to verify the election results so that tabulating the votes isn't a closed process solely in the hands of election officials.&lt;/p&gt;
&lt;p&gt;“Any organization [interested in verifying the election results] that hires a moderately smart software engineer [can] write their own tabulator,” Kiniry said. “We fully expect that Common Cause, League of Women Voters and the [political parties] will all have their own tabulators and verifiers.”&lt;/p&gt;
&lt;p&gt;The second system Galois plans to build is an optical-scan system that reads paper ballots marked by voters by hand. They’ll bring that system to Def Con next year.&lt;/p&gt;
&lt;p class=&quot;text-center&quot;&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The voting system project grew out of a larger DARPA program focused on developing secure hardware. That program, called System Security Integrated Through Hardware and Firmware or SSITH, was launched in 2017 and is aimed at developing secure hardware, and design tools to build that hardware, so that hardware would be impervious to most of the software attacks prevalent today.&lt;/p&gt;
&lt;p&gt;Currently most security is focused on software protections for operating systems, browsers, and other programs.&lt;/p&gt;
&lt;p class=&quot;article__pull-quote&quot;&gt;“This is only the beginning. This is a problem that is so big that one DARPA program isn’t going to solve even 20 percent of the problem.”&lt;/p&gt;
&lt;p&gt;“In general, software has been the way people try to solve the problems because software is adaptable,” Salmon noted. There are some hardware security solutions already, he said, &quot;but they don’t go far enough and … require too much power and performance….We want to fix this in hardware, and then no matter what [vulnerabilities] you have in software, [attackers] would not be able to [exploit] them.”&lt;/p&gt;

&lt;p&gt;The basic problem, he said, is that most hardware is gullible and has no way of distinguishing between acceptable and unacceptable behavior. If an attacker’s exploit tells the machine to do something malicious, the hardware complies without making judgments about whether it should do this.&lt;/p&gt;
&lt;p&gt;“I’m trying to change that and make hardware part of the solution to security rather than a bystander,” said Salmon. “This is only the beginning. This is a problem that is so big that one DARPA program isn’t going to solve even 20 percent of the problem.”&lt;/p&gt;
&lt;p&gt;In a voting system, this means the hardware would prevent, for example, someone entering a voting booth and slipping a malicious memory card into the system and tricking the system into recording 20 votes for one vote cast, as researchers &lt;a href=&quot;https://www.usenix.org/legacy/event/evt07/tech/full_papers/feldman/feldman_html/index.html&quot; target=&quot;_blank&quot;&gt;have shown could be done with some voting systems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“Our goal is to make this so that the hardware is blocked against all of these various types of attack from the external world. If this is successful, and if the software put on top is equally successful, then it means people can’t hack in and … alter votes. It would also mean that the person who votes would get some verification that they did vote and all of that would be done in a manner that hackers couldn’t change,” Salmon said.&lt;/p&gt;
&lt;p&gt;The DARPA secure hardware program involves six teams from several universities as well as Lockheed Martin. Each team was tasked with creating three secure CPU designs. Galois, which is part of the SSITH project, plans to build its voting system on top of the secure hardware designed by these teams, and will create a prototype for each CPU design.&lt;/p&gt;

&lt;p&gt;“It’s normal, open source voting system software, which just happens to be running on top of those secure CPUs,” said Kiniry. “Our contention is… that a normal voting system running on COTS [commercial off-the-shelf hardware] will be hacked. A normal voting system running on the secure hardware will probably not be hacked.”&lt;/p&gt;
&lt;p&gt;Not only are teams developing secure CPUs but to best take advantage of what a secure CPU offers, they’re developing new versions of open source C-compilers so they can recompile the entire software stack on a system—the operating system, the kernel, all the libraries and all the user software that’s written in C.&lt;/p&gt;
&lt;p&gt;“So it really is a powerful software play and hardware play,” Kiniry said.&lt;/p&gt;
&lt;p&gt;The program isn’t about re-architecting new CPUs, but proving that existing hardware can be modified to be made secure, thereby avoiding the need to re-design hardware from scratch.&lt;/p&gt;
&lt;p class=&quot;article__pull-quote&quot;&gt;“Galois and DARPA have just stepped up and filled a vacuum of leadership at the federal level to address the well-documented vulnerabilities in US voting machines that constitute a national security crisis.”&lt;/p&gt;
&lt;p&gt;But even so, the secure designs are expected to change how new CPUs are architected going forward.&lt;/p&gt;
&lt;p&gt;Joe Fitzpatrick, a noted hardware security expert who trains professionals on hardware hacking and security, calls the DARPA secure hardware project a lofty goal that will be great if it succeeds.&lt;/p&gt;
&lt;p&gt;“I can’t tell if they truly are architecting a new CPU that is truly resistant to all these [attacks]. But if they designed a new CPU that was able to understand and determine malicious or correct operations from the software, that’s not trivial. That would be pretty amazing,” said Fitzpatrick.&lt;/p&gt;

&lt;p&gt;Peiter “Mudge” Zatko, a former program manager at DARPA and &lt;a href=&quot;https://theintercept.com/2016/07/29/a-famed-hacker-is-grading-thousands-of-programs-and-may-revolutionize-software-in-the-process/&quot; target=&quot;_blank&quot;&gt;noted security professional&lt;/a&gt; who has testified to Congress on security issues, said this and other DARPA projects are beneficial because they usually spawn new solutions. But he cautions that secure CPUs won’t solve all security problems.&lt;/p&gt;
&lt;p&gt;“We should [also] work towards building processors that have more security principles inherent in them,” he told Motherboard.&lt;/p&gt;
&lt;p&gt;Susan Greenhalgh, policy director for the for the National Election Defense Coalition, an election integrity group, hopes the systems Galois and DARPA are building will finally change the status quo of insecure voting.&lt;/p&gt;
&lt;p&gt;“The [current systems are] woefully equipped and too prosaic to drive the quantum changes needed to face the nation-state actors that are threatening our democracy,” she told Motherboard. “Galois and DARPA have just stepped up and filled a vacuum of leadership at the federal level to address the well-documented vulnerabilities in US voting machines that constitute a national security crisis.”&lt;/p&gt;
</description>
<pubDate>Thu, 14 Mar 2019 17:35:18 +0000</pubDate>
<dc:creator>shpat</dc:creator>
<og:type>article</og:type>
<og:title>DARPA Is Building a $10 Million, Open Source, Secure Voting System</og:title>
<og:image>https://video-images.vice.com/articles/5c8a6c35a123c60008a49cdf/lede/1552575668247-shutterstock_1046168680.jpeg?crop=1xw:0.8439609902475619xh;center,center&amp;resize=1200:*</og:image>
<og:url>https://motherboard.vice.com/en_us/article/yw84q7/darpa-is-building-a-dollar10-million-open-source-secure-voting-system</og:url>
<og:description>The system will be fully open source and designed with newly developed secure hardware to make the system not only impervious to certain kinds of hacking, but also allow voters to verify that their votes were recorded accurately.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://motherboard.vice.com/en_us/article/yw84q7/darpa-is-building-a-dollar10-million-open-source-secure-voting-system</dc:identifier>
</item>
<item>
<title>Fast, Bump-Allocated Virtual Doms with Rust and Wasm</title>
<link>https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://github.com/fitzgen/dodrio&quot;&gt;Dodrio&lt;/a&gt; is a virtual DOM library written in Rust and WebAssembly. It takes advantage of both Wasm’s linear memory and Rust’s low-level control by designing virtual DOM rendering around bump allocation. Preliminary benchmark results suggest it has best-in-class performance.&lt;/p&gt;&lt;h2&gt;&lt;span id=&quot;background&quot;/&gt; Background&lt;/h2&gt;
&lt;h3&gt;Virtual DOM Libraries&lt;/h3&gt;
&lt;p&gt;Virtual DOM libraries provide a declarative interface to the Web’s imperative &lt;abbr title=&quot;Document Object Model&quot;&gt;DOM&lt;/abbr&gt;. Users describe the desired DOM state by generating a virtual DOM tree structure, and the library is responsible for making the Web page’s physical DOM reflect the user-generated virtual DOM tree. Libraries employ some diffing algorithm to decrease the number of expensive DOM mutation methods they invoke. Additionally, they tend to have facilities for caching to further avoid unnecessarily re-rendering components which have not changed and re-diffing identical subtrees.&lt;/p&gt;
&lt;h3&gt;Bump Allocation&lt;/h3&gt;
&lt;p&gt;Bump allocation is a fast, but limited approach to memory allocation. The allocator maintains a chunk of memory, and a pointer pointing within that chunk. To allocate an object, the allocator rounds the pointer up to the object’s alignment, adds the object’s size, and does a quick test that the pointer didn’t overflow and still points within the memory chunk. Allocation is only a small handful of instructions. Likewise, deallocating every object at once is fast: reset the pointer back to the start of the chunk.&lt;/p&gt;
&lt;p&gt;The disadvantage of bump allocation is that there is no general way to deallocate individual objects and reclaim their memory regions while other objects are still in use.&lt;/p&gt;
&lt;p&gt;These trade offs make bump allocation well-suited for phase-oriented allocations. That is, a group of objects that will all be allocated during the same program phase, used together, and finally deallocated together.&lt;/p&gt;
Pseudo-code for bump allocation
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;bump_allocate(size, align):
    aligned_pointer = round_up_to(self.pointer, align)
    new_pointer = aligned_pointer + size
    if no overflow and new_pointer &amp;lt; self.end_of_chunk:
        self.pointer = new_pointer
        return aligned_pointer
    else:
        handle_allocation_failure()
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;&lt;span id=&quot;dodrio-from-a-users-perspective&quot;/&gt; Dodrio from a User’s Perspective&lt;/h2&gt;
&lt;p&gt;First off, we should be clear about what Dodrio is and is not. Dodrio is only a virtual DOM library. It is not a full framework. It does not provide state management, such as Redux stores and actions or two-way binding. It is not a complete solution for everything you encounter when building Web applications.&lt;/p&gt;
&lt;p&gt;Using Dodrio should feel fairly familiar to anyone who has used Rust or virtual DOM libraries before. To define how a &lt;code&gt;struct&lt;/code&gt; is rendered as HTML, users implement the &lt;code&gt;dodrio::Render&lt;/code&gt; trait, which takes an immutable reference to &lt;code&gt;self&lt;/code&gt; and returns a virtual DOM tree.&lt;/p&gt;
&lt;p&gt;Dodrio uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Builder_pattern&quot;&gt;builder pattern&lt;/a&gt; to create virtual DOM nodes. We intend to support optional &lt;a href=&quot;https://reactjs.org/docs/introducing-jsx.html&quot;&gt;JSX&lt;/a&gt;-style, inline HTML templating syntax with compile-time procedural macros, but we’ve left it as &lt;a href=&quot;https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/#future-work&quot;&gt;future work&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;'a&lt;/code&gt; and &lt;code&gt;'bump&lt;/code&gt; lifetimes in the &lt;code&gt;dodrio::Render&lt;/code&gt; trait’s interface and the &lt;code&gt;where 'a: 'bump&lt;/code&gt; clause enforce that the &lt;code&gt;self&lt;/code&gt; reference outlives the bump allocation arena and the returned virtual DOM tree. This means that if &lt;code&gt;self&lt;/code&gt; contains a string, for example, the returned virtual DOM can safely use that string by reference rather than copying it into the bump allocation arena. Rust’s lifetimes and borrowing enable us to be aggressive with cost-saving optimizations while simultaneously statically guaranteeing their safety.&lt;/p&gt;
“Hello, World!” example with Dodrio
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Hello {
    who: String,
}

impl Render for Hello {
    fn render&amp;lt;'a, 'bump&amp;gt;(&amp;amp;'a self, bump: &amp;amp;'bump Bump) -&amp;gt; Node&amp;lt;'bump&amp;gt;
    where
        'a: 'bump,
    {
        span(bump)
            .children([text(&quot;Hello, &quot;), text(&amp;amp;self.who), text(&quot;!&quot;)])
            .finish()
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Event handlers are given references to the root &lt;code&gt;dodrio::Render&lt;/code&gt; component, a handle to the virtual DOM instance that can be used to schedule re-renders, and the DOM event itself.&lt;/p&gt;
Incrementing counter example with Dodrio
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Counter {
    count: u32,
}

impl Render for Counter {
    fn render&amp;lt;'a, 'bump&amp;gt;(&amp;amp;'a self, bump: &amp;amp;'bump Bump) -&amp;gt; Node&amp;lt;'bump&amp;gt;
    where
        'a: 'bump,
    {
        let count = bumpalo::format!(in bump, &quot;{}&quot;, self.count);
        div(bump)
            .children([
                text(count.into_bump_str()),
                button(bump)
                    .on(&quot;click&quot;, |root, vdom, _event| {
                        let counter = root.unwrap_mut::&amp;lt;Counter&amp;gt;();
                        counter.count += 1;
                        vdom.schedule_render();
                    })
                    .children([text(&quot;+&quot;)])
                    .finish(),
            ])
            .finish()
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Additionally, Dodrio also has a proof-of-concept API for defining rendering components in JavaScript. This reflects the Rust and Wasm ecosystem’s strong integration story for JavaScript, that enables both incremental porting to Rust and heterogeneous, polyglot applications where just the most performance-sensitive code paths are written in Rust.&lt;/p&gt;
A Dodrio rendering component defined in JavaScript
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;class Greeting {
  constructor(who) {
    this.who = who;
  }

  render() {
    return {
      tagName: &quot;p&quot;,
      attributes: [{ name: &quot;class&quot;, value: &quot;greeting&quot; }],
      listeners: [{ on: &quot;click&quot;, callback: this.onClick.bind(this) }],
      children: [
        &quot;Hello, &quot;,
        {
          tagName: &quot;strong&quot;,
          children: [this.who],
        },
      ],
    };
  }

  async onClick(vdom, event) {
    // Be more excited!
    this.who += &quot;!&quot;;

    // Schedule a re-render.
    await vdom.render();

    console.log(&quot;re-rendering finished!&quot;);
  }
}
&lt;/code&gt;
&lt;/pre&gt;
Using a rendering component defined in JavaScript
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;#[wasm_bindgen]
extern &quot;C&quot; {
    // Import the JS `Greeting` class.
    #[wasm_bindgen(extends = Object)]
    type Greeting;

    // And the `Greeting` class's constructor.
    #[wasm_bindgen(constructor)]
    fn new(who: &amp;amp;str) -&amp;gt; Greeting;
}

// Construct a JS rendering component from a `Greeting` instance.
let js = JsRender::new(Greeting::new(&quot;World&quot;));
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, Dodrio exposes a safe public interface, and we have never felt the need to reach for &lt;code&gt;unsafe&lt;/code&gt; when authoring Dodrio rendering components.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;internal-design&quot;/&gt; Internal Design&lt;/h2&gt;
&lt;p&gt;Both virtual DOM tree rendering and diffing in Dodrio leverage bump allocation. Rendering constructs bump-allocated virtual DOM trees from component state. Diffing batches DOM mutations into a bump-allocated “change list” which is applied to the physical DOM all at once after diffing completes. This design aims to maximize allocation throughput, which is often a performance bottleneck for virtual DOM libraries, and minimize bouncing back and forth between Wasm, JavaScript, and native DOM functions, which should improve temporal cache locality and avoid out-of-line calls.&lt;/p&gt;
&lt;h3&gt;Rendering Into Double-Buffered Bump Allocation Arenas&lt;/h3&gt;
&lt;p&gt;Virtual DOM rendering exhibits phases that we can exploit with bump allocation:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A virtual DOM tree is constructed by a &lt;code&gt;Render&lt;/code&gt; implementation,&lt;/li&gt;
&lt;li&gt;it is diffed against the old virtual DOM tree,&lt;/li&gt;
&lt;li&gt;saved until the next time we render a new virtual DOM tree,&lt;/li&gt;
&lt;li&gt;when it is diffed against that new virtual DOM tree,&lt;/li&gt;
&lt;li&gt;and then finally it and all of its nodes are destroyed.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This process repeats ad infinitum.&lt;/p&gt;
Virtual DOM tree lifetimes and operations over time
&lt;pre&gt;
&lt;code&gt;        ------------------- Time -------------------&amp;gt;
Tree 0: [ render | ------ | diff ]
Tree 1:          [ render | diff | ------ | diff ]
Tree 2:                          [ render | diff | ------ | diff ]
Tree 3:                                          [ render | diff | ------ | diff ]
...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At any given moment in time, only two virtual DOM trees are alive. Therefore, we can double buffer two bump allocation arenas that switch back and forth between the roles of containing the new or the old virtual DOM tree:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A virtual DOM tree is rendered into bump arena A,&lt;/li&gt;
&lt;li&gt;the new virtual DOM tree in bump arena A is diffed with the old virtual DOM tree in bump arena B,&lt;/li&gt;
&lt;li&gt;bump arena B has its bump pointer reset,&lt;/li&gt;
&lt;li&gt;bump arenas A and B are swapped.&lt;/li&gt;
&lt;/ol&gt;
Double buffering bump allocation arenas for virtual DOM tree rendering
&lt;pre&gt;
&lt;code&gt;        ------------------- Time -------------------&amp;gt;
Arena A: [ render | ------ | diff | reset | render | diff | -------------- | diff | reset | render | diff ...
Arena B:          [ render | diff | -------------- | diff | reset | render | diff | -------------- | diff ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;aside readability=&quot;13&quot;&gt;&lt;p&gt;This bump allocation approach to virtual DOM tree construction is similar to how a generational garbage collector works, except that in our case, as soon as we finish with a frame, we know that the whole of the old virtual DOM tree is garbage. This means we can get away without any of the bookkeeping a generational collector has to do, such as write barriers, remembered sets, and tracing pointers. After each frame, we can simply reset the old arena’s bump pointer. Furthermore, we don’t run the risk of a nursery collection promoting all of the old virtual DOM’s about-to-be-garbage nodes to the tenured object space when allocating the new virtual DOM.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;Diffing and Change Lists&lt;/h3&gt;
&lt;p&gt;Dodrio uses a naïve, single-pass algorithm to diff virtual DOM trees. It walks both the old and new trees in unison and builds up a change list of DOM mutation operations whenever an attribute, listener, or child differs between the old and the new tree. It does not currently use any sophisticated algorithms to minimize the number of operations in the change list, such as longest common subsequence or patience diffing.&lt;/p&gt;
&lt;p&gt;The change lists are constructed during diffing, applied to the physical DOM, and then destroyed. The next time we render a new virtual DOM tree, the process is repeated. Since at most one change list is alive at any moment, we use a single bump allocation arena for all change lists.&lt;/p&gt;
&lt;p&gt;A change list’s DOM mutation operations are encoded as &lt;a href=&quot;https://github.com/fitzgen/dodrio/blob/ef4fb9a4895695fe3ea50c936d163da4506390d6/src/change_list.rs#L101-L241&quot;&gt;instructions for a custom stack machine&lt;/a&gt;. While an instruction’s discriminant is always a 32-bit integer, instructions are variably sized as some have immediates while others don’t. The machine’s stack contains physical DOM nodes (both text nodes and elements), and immediates encode pointers and lengths of UTF-8 strings.&lt;/p&gt;
&lt;p&gt;The instructions are &lt;a href=&quot;https://github.com/fitzgen/dodrio/blob/ef4fb9a4895695fe3ea50c936d163da4506390d6/src/change_list.rs#L267-L379&quot;&gt;emitted on the Rust and Wasm side&lt;/a&gt;, and then &lt;a href=&quot;https://github.com/fitzgen/dodrio/blob/ef4fb9a4895695fe3ea50c936d163da4506390d6/js/change-list.js#L12-L173&quot;&gt;batch interpreted and applied to the physical DOM in JavaScript&lt;/a&gt;. Each JavaScript function that interprets a particular instruction takes four arguments:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A reference to the JavaScript &lt;code&gt;ChangeList&lt;/code&gt; class that represents the stack machine,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Uint8Array&lt;/code&gt; view of Wasm memory to decode strings from,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;Uint32Array&lt;/code&gt; view of Wasm memory to decode immediates from,&lt;/li&gt;
&lt;li&gt;and an offset &lt;code&gt;i&lt;/code&gt; where the instruction’s immediates (if any) are located.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It returns the new offset in the 32-bit view of Wasm memory where the next instruction is encoded.&lt;/p&gt;
&lt;p&gt;There are instructions for:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Creating, removing, and replacing elements and text nodes,&lt;/li&gt;
&lt;li&gt;adding, removing, and updating attributes and event listeners,&lt;/li&gt;
&lt;li&gt;and traversing the DOM.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For example, the &lt;code&gt;AppendChild&lt;/code&gt; instruction has no immediates, but expects two nodes to be on the top of the stack. It pops the first node from the stack, and then calls &lt;code&gt;Node.prototype.appendChild&lt;/code&gt; with the popped node as the child and the node that is now at top of the stack as the parent.&lt;/p&gt;
Emitting the &lt;code&gt;AppendChild&lt;/code&gt; instruction
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// Allocate an instruction with zero immediates.
fn op0(&amp;amp;self, discriminant: ChangeDiscriminant) {
    self.bump.alloc(discriminant as u32);
}

/// Immediates: `()`
///
/// Stack: `[... Node Node] -&amp;gt; [... Node]`
pub fn emit_append_child(&amp;amp;self) {
    self.op0(ChangeDiscriminant::AppendChild);
}
&lt;/code&gt;
&lt;/pre&gt;
Interpreting the &lt;code&gt;AppendChild&lt;/code&gt; instruction
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function appendChild(changeList, mem8, mem32, i) {
    const child = changeList.stack.pop();
    top(changeList.stack).appendChild(child);
    return i;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;On the other hand, the &lt;code&gt;SetText&lt;/code&gt; instruction expects a text node on top of the stack, and does not modify the stack. It has a string encoded as pointer and length immediates. It decodes the string, and calls the &lt;code&gt;Node.prototype.textContent&lt;/code&gt; setter function to update the text node’s text content with the decoded string.&lt;/p&gt;
Emitting the &lt;code&gt;SetText&lt;/code&gt; instruction
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// Allocate an instruction with two immediates.
fn op2(&amp;amp;self, discriminant: ChangeDiscriminant, a: u32, b: u32) {
    self.bump.alloc([discriminant as u32, a, b]);
}

/// Immediates: `(pointer, length)`
///
/// Stack: `[... TextNode] -&amp;gt; [... TextNode]`
pub fn emit_set_text(&amp;amp;self, text: &amp;amp;str) {
    self.op2(
        ChangeDiscriminant::SetText,
        text.as_ptr() as u32,
        text.len() as u32,
    );
}
&lt;/code&gt;
&lt;/pre&gt;
Interpreting the &lt;code&gt;SetText&lt;/code&gt; instruction
&lt;pre&gt;
&lt;code class=&quot;language-js&quot;&gt;function setText(changeList, mem8, mem32, i) {
    const pointer = mem32[i++];
    const length = mem32[i++];
    const str = string(mem8, pointer, length);
    top(changeList.stack).textContent = str;
    return i;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;&lt;span id=&quot;preliminary-benchmarks&quot;/&gt; Preliminary Benchmarks&lt;/h2&gt;
&lt;p&gt;To get a sense of Dodrio’s speed relative to other libraries, we added it to &lt;a href=&quot;https://elm-lang.org/blog/blazing-fast-html-round-two&quot;&gt;Elm’s Blazing Fast HTML benchmark&lt;/a&gt; that compares rendering speeds of TodoMVC implementations with different libraries. They claim that the methodology is fair and that the benchmark results should generalize. They also subjectively measure how easy it is to optimize the implementations to improve performance (for example, by adding well-placed &lt;code&gt;shouldComponentUpdate&lt;/code&gt; hints in React and &lt;code&gt;lazy&lt;/code&gt; wrappers in Elm). We followed their same methodology and disabled Dodrio’s on-by-default, once-per-animation-frame render debouncing, giving it the same handicap that the Elm implementation has.&lt;/p&gt;
&lt;p&gt;That said, there are some caveats to these benchmark results. The React implementation had bugs that prevented it from completing the benchmark, so we don’t include its measurements below. If you are curious, you can look at the original Elm benchmark results to see how it generally fared relative to some of the other libraries measured here. Second, we made an initial attempt to update the benchmark to the latest version of each library, but quickly got in over our heads, and therefore &lt;em&gt;this benchmark is not using the latest release of each library&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;With that out of the way let’s look at the benchmark results. We ran the benchmarks in Firefox 67 on Linux. Lower is better, and means faster rendering times.&lt;/p&gt;
Benchmark results&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/Screenshot_2019-03-05-Performance-Comparison.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/03/Screenshot_2019-03-05-Performance-Comparison.png&quot; alt=&quot;Benchmark results graph&quot; width=&quot;800&quot; height=&quot;400&quot; class=&quot;alignleft size-full wp-image-33245&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/03/Screenshot_2019-03-05-Performance-Comparison.png 800w, https://hacks.mozilla.org/files/2019/03/Screenshot_2019-03-05-Performance-Comparison-250x125.png 250w, https://hacks.mozilla.org/files/2019/03/Screenshot_2019-03-05-Performance-Comparison-768x384.png 768w, https://hacks.mozilla.org/files/2019/03/Screenshot_2019-03-05-Performance-Comparison-500x250.png 500w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/a&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Optimized?&lt;/th&gt;
&lt;th&gt;Milliseconds&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Ember 2.6.3&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;3542&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Angular 1.5.8&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2856&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Angular 2&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;2743&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Elm 0.16&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;4295&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Elm 0.17&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;3170&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Dodrio 0.1-prerelease&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2181&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Angular 1.5.8&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;3175&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Angular 2&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2371&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Elm 0.16&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;4229&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Elm 0.17&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;2696&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Dodrio is the fastest library measured in the benchmark.&lt;/strong&gt; This is not to say that Dodrio will always be the fastest in every scenario — that is undoubtedly false. But these results validate Dodrio’s design and show that it already has best-in-class performance. Furthermore, there is room to make it even faster:&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li&gt;Dodrio is brand new, and has not yet had the years of work poured into it that other libraries measured have. We have not done any serious profiling or optimization work on Dodrio yet!&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The Dodrio TodoMVC implementation used in the benchmark does not use &lt;code&gt;shouldComponentUpdate&lt;/code&gt;-style optimizations, like other implementations do. These techniques are still available to Dodrio users, but you should need to reach for them much less frequently because idiomatic implementations are already fast.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;span id=&quot;future-work&quot;/&gt; Future Work&lt;/h2&gt;
&lt;p&gt;So far, we haven’t invested in polishing Dodrio’s ergonomics. We would like to explore adding &lt;a href=&quot;https://crates.io/crates/typed-html&quot;&gt;type-safe HTML templates&lt;/a&gt; that boil down to Dodrio virtual DOM tree builder invocations.&lt;/p&gt;
&lt;p&gt;Additionally, there are a few more ways we can potentially improve Dodrio’s performance:&lt;/p&gt;
&lt;p&gt;For both ergonomics and further performance improvements, we would like to start gathering feedback informed by real world usage before investing too much more effort.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/czaplic&quot;&gt;Evan Czaplicki&lt;/a&gt; pointed us to a second benchmark — &lt;a href=&quot;https://github.com/krausest/js-framework-benchmark&quot;&gt;&lt;code&gt;krausest/js-framework-benchmark&lt;/code&gt;&lt;/a&gt; — that we can use to further evaluate Dodrio’s performance. We look forward to implementing this benchmark for Dodrio and gathering more test cases and insights into performance.&lt;/p&gt;
&lt;p&gt;Further in the future, the &lt;a href=&quot;https://github.com/WebAssembly/host-bindings/blob/master/proposals/host-bindings/Overview.md&quot;&gt;WebAssembly host bindings proposal&lt;/a&gt; will enable us to interpret the change list’s operations in Rust and Wasm without trampolining through JavaScript to invoke DOM methods.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;conclusion&quot;/&gt; Conclusion&lt;/h2&gt;
&lt;p&gt;Dodrio is a new virtual DOM library that is designed to leverage the strengths of both Wasm’s linear memory and Rust’s low-level control by making extensive use of fast bump allocation. If you would like to learn more about Dodrio, we encourage you to check out its &lt;a href=&quot;https://github.com/fitzgen/dodrio&quot;&gt;repository&lt;/a&gt; and &lt;a href=&quot;https://github.com/fitzgen/dodrio/tree/master/examples&quot;&gt;examples&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;http://lukewagner.name/&quot;&gt;Luke Wagner&lt;/a&gt; and &lt;a href=&quot;https://github.com/alexcrichton&quot;&gt;Alex Crichton&lt;/a&gt; for their contributions to Dodrio’s design, and participation in brainstorming and rubber ducking sessions. We also discussed many of these ideas with core developers on the React, Elm, and Ember teams, and we thank them for the context and understanding these discussions ultimately brought to Dodrio’s design. A final round of thanks to &lt;a href=&quot;http://jorendorff.blogspot.com/&quot;&gt;Jason Orendorff&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/linclark&quot;&gt;Lin Clark&lt;/a&gt;, &lt;a href=&quot;https://tillschneidereit.net/&quot;&gt;Till Schneidereit&lt;/a&gt;, &lt;a href=&quot;https://github.com/alexcrichton&quot;&gt;Alex Crichton&lt;/a&gt;, &lt;a href=&quot;http://lukewagner.name/&quot;&gt;Luke Wagner&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/czaplic&quot;&gt;Evan Czaplicki&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/robheghan&quot;&gt;Robin Heggelund Hansen&lt;/a&gt; for providing valuable feedback on early drafts of this document.&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;4.7027027027027&quot;&gt;
&lt;p&gt;I like computing, bicycles, hiphop, books, and pen plotters. My pronouns are he/him.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/nfitzgeraldmozilla-com/&quot;&gt;More articles by Nick Fitzgerald…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Thu, 14 Mar 2019 17:06:00 +0000</pubDate>
<dc:creator>BoumTAC</dc:creator>
<og:url>https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm</og:url>
<og:title>Fast, Bump-Allocated Virtual DOMs with Rust and Wasm – Mozilla Hacks - the Web developer blog</og:title>
<og:description>Dodrio is a new virtual DOM library that is designed to leverage the strengths of both Wasm’s linear memory and Rust’s low-level control by making extensive use of fast bump ...</og:description>
<og:image>https://hacks.mozilla.org/wp-content/themes/Hax/img/hacks-meta-image.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2019/03/fast-bump-allocated-virtual-doms-with-rust-and-wasm/</dc:identifier>
</item>
</channel>
</rss>