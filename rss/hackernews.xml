<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>SpaceX makes history with successful first human space launch</title>
<link>https://techcrunch.com/2020/05/30/spacex-makes-history-with-successful-first-human-space-launch/</link>
<guid isPermaLink="true" >https://techcrunch.com/2020/05/30/spacex-makes-history-with-successful-first-human-space-launch/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;&lt;img class=&quot;breakout aligncenter size-full wp-image-1996392&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2020/05/spacex-crew-dragon-demo-2-launch.gif&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;446&quot;/&gt;SpaceX made history today, flying NASA astronauts Doug Hurley and Bob Behnken to space aboard its Crew Dragon spacecraft using a Falcon 9 rocket. The launch, titled ‘Demo-2’, is for the final demonstration mission in the human rating process of &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/space-exploration-technologies&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;space-exploration-technologies&quot;&gt;SpaceX’s&lt;/a&gt; Crew Dragon and Falcon 9, meaning that once this mission is complete, the launch vehicle will finally be certified for operational use for regular transportation of people to space. This was the second attempt, after an initial launch try last Wednesday was scrubbed due to weather conditions.&lt;/p&gt;
&lt;p&gt;This is the first time ever that humans have been aboard a &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/space-exploration-technologies&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;space-exploration-technologies&quot;&gt;SpaceX&lt;/a&gt; vehicle as it launched. To date, SpaceX’s Falcon 9 and Falcon Heavy rockets have succeeded in delivering multiple cargo payloads to orbit, but Behnken and Hurley are the first people to make the trip with the private spaceflight company.&lt;/p&gt;
&lt;p&gt;SpaceX also successfully landed its first stage booster from the Falcon 9 used today – which means it will recover the first private spacecraft booster that has ever delivered human astronauts to space.&lt;/p&gt;

&lt;p&gt;NASA created the Commercial Crew space program to spur the development of private launch vehicles that would also be able to serve commercial customers in addition to the agency, in order to defray the cost of launch overall. Both SpaceX and &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/boeing-7321&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;boeing-7321&quot;&gt;Boeing&lt;/a&gt; ended up placing winning bids on the Commercial Crew contracts, and have subsequently developed human launch systems, though SpaceX is the first to actually fly people on their vehicle after Boeing encountered some unexpected issues in their last uncrewed demonstration flight.&lt;/p&gt;
&lt;div id=&quot;attachment_1996397&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;33&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-1996397&quot; class=&quot;breakout size-full wp-image-1996397&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2020/05/fistbump.gif&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;444&quot;/&gt;&lt;p id=&quot;caption-attachment-1996397&quot; class=&quot;wp-caption-text&quot;&gt;Astronauts Bob Behnken and Doug Hurley bump fists to celebrate their history-making launch on SpaceX’s Crew Dragon.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It’s been multiple decades since a human took off from U.S. soil on a brand new launch vehicle, and this is also the first time anyone has flown to space from an American launch site since the Space Shuttle program was officially retired in 2011. Returning U.S. spaceflight capabilities also means NASA won’t have to rely on Russia’s Roscosmos and its Soyuz spacecraft exclusively to transport its astronauts to the International Space Station (ISS) – could save more than $30 million per astronaut per trip as a result.&lt;/p&gt;
&lt;p&gt;Today’s launch kicks off a multi-week mission for Behnken and Hurley, which next involves a rendezvous with the ISS around 19 hours from now. Crew Dragon will first take around 30 minutes to perform a manual control test, wherein Behnken and Hurley will take over and fly the spacecraft themselves. This isn’t what would normally happen on a normal Crew Dragon mission, since the spacecraft is designed to make the trip to ISS on its own operating entirely in an automated manner.&lt;/p&gt;
&lt;p&gt;After that manual control test, Crew Dragon will once again take over and then fly the remainder of the way to the ISS, where it’ll dock itself with an entry hatch on the station. From there, Behnken and Hurley will transfer over to the station, where they’re set to stay for a period of between six and sixteen weeks, depending on NASA’s determination of how long the mission should last. This is somewhat dependent on staffing requirements on board the ISS, since currently there’s only one U.S. astronaut there in an operational capacity, and Hurley and Behnken will be tasked with assisting with experiments and maintenance on the station.&lt;/p&gt;
&lt;div id=&quot;attachment_1996396&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;38&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-1996396&quot; class=&quot;breakout size-full wp-image-1996396&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;693&quot; srcset=&quot;https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg 3708w, https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg?resize=150,101 150w, https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg?resize=300,203 300w, https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg?resize=768,519 768w, https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg?resize=680,460 680w, https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg?resize=1536,1039 1536w, https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg?resize=2048,1385 2048w, https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297041.jpg?resize=50,34 50w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;p id=&quot;caption-attachment-1996396&quot; class=&quot;wp-caption-text&quot;&gt;CAPE CANAVERAL, FLORIDA – MAY 30: The SpaceX Falcon 9 rocket launches into space with NASA astronauts Bob Behnken (R) and Doug Hurley aboard the rocket from the Kennedy Space Center on May 30, 2020 in Cape Canaveral, Florida. The inaugural flight is the first manned mission since the end of the Space Shuttle program in 2011 to be launched into space from the United States. (Photo by Saul Martinez/Getty Images)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once it’s determined when they’re coming back, they’ll climb back aboard the Crew Dragon, seal it up and then detach from the station. This return part of the program is also designed to be fully automated, with the spacecraft preforming the necessary boost-back engine firing to control its re-entry and descent. Once in atmosphere, it’ll release its parachutes to slow the fall back to Earth, and coast to a landing in the Atlantic Ocean, where SpaceX crews will recover the capsule and provide the astronauts their ride back to dry land.&lt;/p&gt;
&lt;p&gt;SpaceX plans to begin flying astronauts to the ISS for fully, regular operational missions later this year if all goes well, and it has also signed agreements to begin offering berths to paying passengers for Crew Dragon space tourist trips (likely with an extremely high price tag) as early as next year.&lt;/p&gt;
</description>
<pubDate>Sat, 30 May 2020 20:13:14 +0000</pubDate>
<dc:creator>dsavant</dc:creator>
<og:title>SpaceX makes history with successful first human space launch – TechCrunch</og:title>
<og:description>SpaceX made history today, flying NASA astronauts Doug Hurley and Bob Behnken to space aboard its Crew Dragon spacecraft using a Falcon 9 rocket. The launch, titled ‘Demo-2’, is for the final demonstration mission in the human rating process of SpaceX’s Crew Dragon and Falcon 9, m…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2020/05/GettyImages-1216297115.jpg?w=539</og:image>
<og:url>https://social.techcrunch.com/2020/05/30/spacex-makes-history-with-successful-first-human-space-launch/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2020/05/30/spacex-makes-history-with-successful-first-human-space-launch/</dc:identifier>
</item>
<item>
<title>Rust: Dropping heavy things in another thread can make your code 10000x faster</title>
<link>https://abramov.io/rust-dropping-things-in-another-thread</link>
<guid isPermaLink="true" >https://abramov.io/rust-dropping-things-in-another-thread</guid>
<description>&lt;p&gt;
&lt;h3&gt;Aaron Abramov&lt;/h3&gt;
&lt;span&gt;—&lt;/span&gt;
&lt;h3&gt;March 21, 2020&lt;/h3&gt;
&lt;/p&gt;
&lt;div class=&quot;css-5bsuta&quot;&gt;
&lt;div class=&quot; gatsby-image-wrapper&quot;&gt;

&lt;img aria-hidden=&quot;true&quot; src=&quot;data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='196'%20viewBox='0%200%20400%20196'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2015c0%2016%200%2015%207%2013l4-1-7%204-4%201v164h401v-83a692%20692%200%2000-2%207l-4-2c-5-2-6-3-6%200l2%201h1v2l1-1%201-1%201%202%202%201c3-1%203%201%203%2022%200%2015%200%2017-2%2016v2l-3-2v-1l2-1-4%201h-5l3-1c2-1%202-1%200-1l-1-2c1-1%201-1-1-2h-4l-1%201c0%203-1%202-3%200-1-2-1-2%201-3l2-1h-4c0-1%200-2-1-1l-1%202v1l-2-2c0-3%200-3-1-2s-1%201-2-1c0-2%200-2-2%200-3%202-5%203-3%201l-1-1-3-1c-3-2-4-2-6%200-2%200-2%201-2%202v2c-2%200-2-4%200-5v-5c2%200%201-3-1-2-4%200-4%200-3%202l-1%201-2-4h1l2-2c0-2%201-2%202-1l2-1%202-4%202-2c0-2-2-1-11%205l-9%206-1%201-1%201c-1-1-3%200-3%201l-2%202-3-1c-2-1-2-1-2%201l-1%201-1-2h-3l-1%202h3c0%202%208%206%209%206h1c0%201%206%204%209%204v1l1%201c2%200%202-3-1-4l-2-2%203%201c3%202%205%205%202%205v1h3l3%203c4%203%205%206%202%2012-5%208-11%209-12%202l-2-4v-1l-2-1-2-2-1-1-2-1-18-9c-13-7-17-9-18-12l-1-1c-1%201-7-2-10-5l-4-1h-3l-1-2v-1l-1-2-1-1-2-1-2%201-3%201-1%201h-4l-7%203c-7%204-11%205-14%202l-2-2%203-3c3-3%204-3%208-3l6%202h3c2-1%203-2%202-3l3-5c3-4%203-5%200-4l-1-1%201-1%203-2h2l1%201h3l1-1v1c-1%201%200%202%202%204l4%201h1v3l31%2017c2%200%2011-27%2012-41l2-9%203%202%2012%204-8-4-8-4-1-5c-4-34-35-42-67-17-10%207-18%2016-18%2020l-3%204c-2%200-4%201-5%203-2%203-5%203-5%200l8-11c6-8%208-10%207-11s-1-2%201-4l3-3-8%205c0%202-3%207-5%207-1-1-1-1%200%200l-1%201-2%201-2%202c-1%200%201-4%205-8%202-3%202-5-1-5v-1l-1-1-2-1c-2-1-2-1-8%205-4%203-8%2010-11%2014-8%2012-7%2012-10%2010h-3c-1%201%200%204%202%204%202%201%202%201%200%206-3%205-7%2017-9%2025l-2%205h-5l1-1%201-1-3-1h-4c-1%201-1%201-2-1h-4v-2h-1l-2-1h-1l-1%201v-2l-3-3-3-3c1-1%200-1-4-1h-5l-2-1v-1c1%200%201-1-1-2l-2-2-2-2c-3%200-3%201-4%204%200%204-2%209-5%2011-1%202-4%203-2%201l-2-1%201-2c3-4%202-4-2-3-4%202-17%202-18%200s-2-2-6-2c-2%200-3-1-4-4v-6l2%201%201%202%201%203v-3c0-2%200-2%201-1h3l2%202c1%204%202%204%201%200l1-3%201%201v2h1c0-2%201-3%203-1h1l-1-1v-1l2%201c0%202%202%201%204-1%202-1%202-2%202-4-1-2-1-2%208-3%202-1%202-7-1-9h-1l-2-2c-1-1-3-2-4-1v-1l-1-2-1%201c-1%201-1%200-1-1%200-2%200-2-1-1-2%202-5%200-4-2%200-2-1-2-2-2v-1h-5c-2%200-2-1-1-2v-1l-2%201h-4v-1h-2l-2-1h-2l-1%201v-1l-1-1c-1%200-2%2016-1%2018%205%2012%204%2019-2%2025l-6%204-2-1v-1l6-4h1c2%200-1-6-3-6v-1c2-1%202-2%201-2v-2l1-3%202-4%201-4c0-2-1-2-2-1-2%202-2%202-3-1%200-3-1-4-2-4-3%200-3-2-2-4%201-1%201-1-1-1-4%201-2%200%202-2%205-2%208-5%207-6l-2%201c-2%203-3%202-3%200l2-2c1%200%204-4%203-5l-4%202c-6%203-22%203-20%200l-2-1c-5%200-10-17-10-37%200-7%200-8%202-10s2-2%201-3l-1-2v-4l-1-4-1-6-1-6h-7c-6%200-6%201-7%203-1%203-1%203%205%206l7%206c1%205%201%205-5%201l-6-2-1-1-1-1v39l1%206%202%207h-1c-1-1-2-1-3%201-2%203-4%201-4-3v-5l2-2c3-3%202-4-2-2-2%202-4%202-3%200l2-1%203-3c3-4%202-5%200-3-4%204-14%203-12%200l-2-2-2%201-1%201c-2%200-5-3-4-4h-1l-1-1v-2c-1-1-2-2-1-4l-1-2-1-1v-3a82%2082%200%2001-1-26V0H0v15M17%201l6%203%203%203%204%202%201%201c-1%201%201%202%203%202%203-1%208-9%207-11L28%200c-8%200-12%200-11%201m104%200l2%202h1l2%201%203%201%204%202%202%201%201%201%201%201c2-1%204%200%2016%205l17%207-18-9-7-3c-16-8-22-10-24-10h-2l2%201m69%2029l4%203a3405%203405%200%200148%2020l-5-3-18-9-4-2-3-2-3-2-5-1-6-2-3-1c-2-1-4-2-5-1m-95%207c0%204%202%206%209%2010%208%204%208%204%204%206-2%201-3%201-2%202h3l1-1c0-1%204-2%205-1a832%20832%200%200036%2017l-6-5c-5-5-22-14-25-14l-4-2c-1-2-5-4-10-6l-9-6h-2M45%2071l-2%207h2l-1%201-1%203c1%202%201%203%203%203h6l1-3c1-1%201-5-2-10l-2-5c0-2-2-1-4%204m232%2023c-10%203-26%2017-23%2021l7-6c8-9%2013-12%2020-13%206%200%206%200%2010%204l4%206%201%202-2-8c-3-5-11-8-17-6m-113%2038l-3%201h-8c1%201%200%202-1%201l-1%202c0%202%200%202-1%201%200-1-1-2-2-1v3l1%201v2l-1%202%202-1c2-1%203-1%203%201l-1%201c-1-1-1%200-2%201%200%203-2%204-2%202l-1-2h-4c-1-1-2%200-3%201h-3l-2%201-1%201-2%201h-2c0-1-3%200-3%202l-1%201v1l2-1%201-2v2c-1%202-1%202%201%201%203%200%203%200%203%202%200%203%202%206%205%206l4%202%202%201%201%201h4v-1c-1-1-1-1%201-1h2l1-1h6l1%204%201-1c-1-3%200-5%201-4s2%202%201%203c0%201%202%202%203%201v-1l-1-2h3v-1l1-1v-2c-1-1-1-1%201-1v-3h1l1-1h1l1%201%203%202c1%201%201%201%201-1-1-1%200-2%201-3s1-1-1-2-2-1-1-2l1-2-1-1c1-2-1-4-3-4l-2-1-2-2%201-1%204-1v1l-2%201%202%201c0-1%201-1%200%200l3%202c3%200%204%202%202%202l-1%202c0%201%202%201%202-1v-5h-2c-2-1-3-2-2-3%201-2%201-2-2-1l-3-1c1-1%200-1-1-1l-2%201-1%203-1-3c1-4-2-6-3-3'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e&quot; alt=&quot;Video Blogger&quot;/&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; sizes=&quot;(max-width: 900px) 100vw, 900px&quot; srcset=&quot;/static/17c052bef172834dd2c0589911fed0bb/7e7e9/banner.png 225w, /static/17c052bef172834dd2c0589911fed0bb/62b1f/banner.png 450w, /static/17c052bef172834dd2c0589911fed0bb/db955/banner.png 900w, /static/17c052bef172834dd2c0589911fed0bb/82360/banner.png 1350w, /static/17c052bef172834dd2c0589911fed0bb/bbee5/banner.png 1800w, /static/17c052bef172834dd2c0589911fed0bb/6ee86/banner.png 3572w&quot; src=&quot;https://abramov.io/static/17c052bef172834dd2c0589911fed0bb/db955/banner.png&quot; alt=&quot;Video Blogger&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;When working on Rust applications or CLIs that need to show something to the end user as fast as possible I often find that a significant chunk of the time is usually spent not in doing any computations, but in dropping large data structures at the end of the function.&lt;/p&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;For example, imagine you have a function that takes some heavy object and returns its size:&lt;/p&gt;
&lt;pre class=&quot;prism-code language-js&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HeavyThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;Getting &lt;code&gt;size&lt;/code&gt; of &lt;code&gt;a&lt;/code&gt; is extremely cheap. it takes about &lt;code&gt;0.01ms&lt;/code&gt;, hovever the entire function can take &lt;code&gt;1000ms&lt;/code&gt; before it returns anything. This is because Rust needs to drop the value of &lt;code&gt;a&lt;/code&gt; and deallocate all memory it was using before it can return.&lt;/p&gt;
&lt;pre class=&quot;prism-code language-js&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HeavyThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;And if &lt;code&gt;HeavyThing&lt;/code&gt; is a very complex data structure it might take a while to deallocate all memory it's using.&lt;/p&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;This really sucks for UIs and interactive CLIs. We got all needed data to respond to a user request, but can't do anything with it until we finish cleaning things up!&lt;/p&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;One of the workarounds for this problem is to defer dropping the value by moving it to another thread and letting it take care of it.&lt;/p&gt;
&lt;pre class=&quot;prism-code language-js&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HeavyThing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;size&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;In this example, we spawn another thread, move the heavy data structure into it and froget about it. The function returns right away and somewhere in the future the other thread will start doing the work of dropping the data structure and deallocating all used memory.&lt;/p&gt;
&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;Here's a small example of working with a &lt;code&gt;HashMap&amp;lt;usize, Vec&amp;lt;usize&amp;gt;&amp;gt;&lt;/code&gt; data structure that has 1M keys. The function that defers dropping to another therad runs about 10K times faster since the only work it needs to do is to start a new thread&lt;/p&gt;
&lt;pre class=&quot;prism-code language-js&quot;&gt;
&lt;/pre&gt;


&lt;p class=&quot;css-yw8fqx e1jygw6w0&quot;&gt;&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=e6036d23879b0d0abda5196dfa8a131e&quot;&gt;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=e6036d23879b0d0abda5196dfa8a131e&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;prism-code language-js&quot;&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;use std&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token maybe-class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;use std&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;use std&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token maybe-class-name&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NUM_ELEMENTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HeavyThings&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;heavy_things_1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make_heavy_things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;heavy_things_2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make_heavy_things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log_time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;drop in another thread&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token function&quot;&gt;fn_that_drops_heavy_things_in_another_thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;heavy_things_2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;assert_eq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NUM_ELEMENTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;log_time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;drop in this thread&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token function&quot;&gt;fn_that_drops_heavy_things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;heavy_things_1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;assert_eq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NUM_ELEMENTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;make_heavy_things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HeavyThings&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NUM_ELEMENTS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fn_that_drops_heavy_things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HeavyThings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fn_that_drops_heavy_things_in_another_thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;HeavyThings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;things&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;len&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;fn log_time&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function maybe-class-name&quot;&gt;FnOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token plain&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token maybe-class-name&quot;&gt;Instant&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{} {:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token plain&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token method function property-access&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token plain&quot;&gt;result&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 30 May 2020 16:53:03 +0000</pubDate>
<dc:creator>timooo</dc:creator>
<og:url>https://abramov.io/rust-dropping-things-in-another-thread</og:url>
<og:type>article</og:type>
<og:title>Rust: Dropping heavy things in another thread can make your code 10000 times faster</og:title>
<og:description>This is where they post things!</og:description>
<og:image>images/logo.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://abramov.io/rust-dropping-things-in-another-thread/</dc:identifier>
</item>
<item>
<title>Zero-day in Sign in with Apple</title>
<link>https://bhavukjain.com/blog/2020/05/30/zeroday-signin-with-apple/</link>
<guid isPermaLink="true" >https://bhavukjain.com/blog/2020/05/30/zeroday-signin-with-apple/</guid>
<description>&lt;p&gt;&lt;img src=&quot;https://bhavukjain.com/assets/images/siwa.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;What if I say, your Email ID is all I need to takeover your account on your favorite website or an app. Sounds scary, right? This is what a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign in with Apple&lt;/code&gt; allowed me to do.&lt;/p&gt;
&lt;p&gt;In the month of April, I found a zero-day in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign in with Apple&lt;/code&gt; that affected third-party applications which were using it and didn’t implement their own additional security measures. This bug could have resulted in a &lt;strong&gt;full account takeover of user accounts&lt;/strong&gt; on that third party application irrespective of a victim having a valid Apple ID or not.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For this vulnerability, I was paid $100,000 by Apple under their Apple Security Bounty program.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Technical Details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign in with Apple&lt;/code&gt; works similarly to OAuth 2.0. There are two possible ways to authenticate a user by either using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JWT (JSON Web Token)&lt;/code&gt; or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; generated by the Apple server. The code is then used to generate a JWT. The below diagram represents how the JWT creation and validation works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://bhavukjain.com/assets/images/flow_apple_auth.png&quot; alt=&quot;image&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In the 2nd step, while authorizing, Apple gives an option to a user to either share the Apple Email ID with the 3rd party app or not. If the user decides to hide the Email ID, Apple generates its own user-specific Apple relay Email ID. Depending upon the user selection, after successful authorization, Apple creates a JWT which contains this Email ID which is then used by the 3rd party app to login a user.&lt;/p&gt;
&lt;p&gt;A decoded JWT’s payload looks like this:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;iss&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;https://appleid.apple.com&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;aud&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;com.XXXX.weblogin&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;exp&quot;&lt;/span&gt;: 158XXXXXXX,
  &lt;span class=&quot;s2&quot;&gt;&quot;iat&quot;&lt;/span&gt;: 158XXXXXXX,
  &lt;span class=&quot;s2&quot;&gt;&quot;sub&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;XXXX.XXXXX.XXXX&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;c_hash&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;FJXwx9EHQqXXXXXXXX&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;&lt;a href=&quot;https://bhavukjain.com/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;7d1e1213091c1e093d1f151c0b0816171c1413531e1210&quot;&gt;[email protected]&lt;/a&gt;&quot;&lt;/span&gt;, // or &lt;span class=&quot;s2&quot;&gt;&quot;&lt;a href=&quot;https://bhavukjain.com/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;164e4e4e4e4e5666647f6077627364737a776f387766667a737f723875797b&quot;&gt;[email protected]&lt;/a&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;email_verified&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;auth_time&quot;&lt;/span&gt;: 158XXXXXXX,
  &lt;span class=&quot;s2&quot;&gt;&quot;nonce_supported&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;**BUG&lt;/strong&gt;**&lt;/p&gt;
&lt;p&gt;I found I could request JWTs for any Email ID from Apple and when the signature of these tokens was verified using Apple’s public key, they showed as valid. This means an attacker could forge a JWT by linking any Email ID to it and gaining access to the victim’s account.&lt;/p&gt;
&lt;p&gt;Sample Request (2nd step)&lt;/p&gt;

&lt;p&gt;Here on passing any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;, Apple generated a valid JWT (id_token) for that particular Email ID.&lt;/p&gt;
&lt;p&gt;Sample Response&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;authorization&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;id_token&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;eyJraWQiOiJlWGF1bm1MIiwiYWxnIjoiUlMyNTYifQ.XXXXX.XXXXX&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;grant_code&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;XXX.0.nzr.XXXX&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;scope&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;authorizedData&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;userId&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;XXX.XXXXX.XXXX&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;consentRequired&quot;&lt;/span&gt; : &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The impact of this vulnerability was quite critical as it could have allowed full account takeover. A lot of developers have integrated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign in with Apple&lt;/code&gt; since it is mandatory for applications that support other social logins. To name a few that use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sign in with Apple&lt;/code&gt; - Dropbox, Spotify, Airbnb, Giphy (Now acquired by Facebook). These applications were not tested but could have been vulnerable to a full account takeover if there weren’t any other security measures in place while verifying a user.&lt;/p&gt;
&lt;p&gt;Apple also did an investigation of their logs and determined there was no misuse or account compromise due to this vulnerability.&lt;/p&gt;
&lt;p&gt;A huge thanks to the Apple Security Team.&lt;/p&gt;
&lt;p&gt;Thanks for the read, see you in next article :)&lt;/p&gt;
</description>
<pubDate>Sat, 30 May 2020 16:13:46 +0000</pubDate>
<dc:creator>masnick</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bhavukjain.com/blog/2020/05/30/zeroday-signin-with-apple/</dc:identifier>
</item>
<item>
<title>SpaceX successfully launches two humans into orbit</title>
<link>https://www.nasa.gov/press-release/nasa-astronauts-launch-from-america-in-historic-test-flight-of-spacex-crew-dragon</link>
<guid isPermaLink="true" >https://www.nasa.gov/press-release/nasa-astronauts-launch-from-america-in-historic-test-flight-of-spacex-crew-dragon</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.nasa.gov/press-release/nasa-astronauts-launch-from-america-in-historic-test-flight-of-spacex-crew-dragon&quot;&gt;https://www.nasa.gov/press-release/nasa-astronauts-launch-from-america-in-historic-test-flight-of-spacex-crew-dragon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23361987&quot;&gt;https://news.ycombinator.com/item?id=23361987&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 1270&lt;/p&gt;
&lt;p&gt;# Comments: 317&lt;/p&gt;
</description>
<pubDate>Sat, 30 May 2020 15:52:45 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<og:type>article</og:type>
<og:url>http://www.nasa.gov/press-release/nasa-astronauts-launch-from-america-in-historic-test-flight-of-spacex-crew-dragon</og:url>
<og:image>http://www.nasa.gov/sites/default/files/thumbnails/image/49953052258_b9a7d6971d_k_0.jpg</og:image>
<og:description>For the first time in history, NASA astronauts have launched from American soil in a commercially built and operated American crew spacecraft on its way to the International Space Station.</og:description>
<og:title>NASA Astronauts Launch from America in Test of SpaceX Crew Dragon</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nasa.gov/press-release/nasa-astronauts-launch-from-america-in-historic-test-flight-of-spacex-crew-dragon/</dc:identifier>
</item>
<item>
<title>Oracle vs. PostgreSQL – A Comment</title>
<link>https://www.postgresql.org/message-id/flat/0959C81A-5B07-4D04-A6B1-57AA78A9A553%40gmail.com</link>
<guid isPermaLink="true" >https://www.postgresql.org/message-id/flat/0959C81A-5B07-4D04-A6B1-57AA78A9A553%40gmail.com</guid>
<description>&lt;div readability=&quot;117&quot;&gt;
&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I know, this list is not for this, but I just couldn't resist. Please forgive me.&lt;/p&gt;
&lt;p&gt;Being an Oracle DBA for two decades now (back then starting with Oracle 8.0.5) and only doing PostgreSQL since version 10.3, I feel compelled to share some of my experiences with both.&lt;/p&gt;
&lt;p&gt;Quick facts:&lt;/p&gt;
&lt;p&gt;All installations were performed on the same host except for Oracle Data Guard and Patroni with etcd, which both require at least three nodes, or an odd number &amp;gt;2 respectively) to establish a democracy to determine the master/primary and replica/standby databases. However, all machines have the same hardware and operating system:&lt;/p&gt;
&lt;p&gt;OS: openSUSE Leap 15.1 (server setup, not desktop)&lt;br/&gt;CPU: Intel i7-7700T CPU&lt;br/&gt;RAM: 32 GB&lt;br/&gt;Disk Hardware: SSD&lt;/p&gt;
&lt;p&gt;Also, Oracle requires 161 additional packages to be installed, many of which are 32-bit packages, for a supposedly 64-bit only software! This results in 150 MB additional disk space needed and swamps the system with 32-bit packages!&lt;/p&gt;
&lt;p&gt;PostgreSQL only requires a few packages to be installed depending on the options one chooses to compile the source with. Anyway, none of these packages require a 32-bit version!&lt;/p&gt;
&lt;p&gt;Size of installation:&lt;/p&gt;
&lt;p&gt;Software:&lt;br/&gt;$ du -sh /data/postgres/12.3 /data/oracle/product/19.6&lt;br/&gt;62M /data/postgres/12.3&lt;br/&gt;8.5G /data/oracle/product/19.6&lt;br/&gt;Databases:&lt;br/&gt;$ du -sh /data/oradb/*&lt;br/&gt;3.3G /data/oradb/cdb01 # Oracle Container w/ 1 PDB&lt;br/&gt;1.8G /data/oradb/sdb01 # Oracle stand alone database&lt;br/&gt;$ du -sh /data/pgdb/sdb01&lt;br/&gt;659M /data/pgdb/sdb01 # PostgreSQL 12.3 database cluster&lt;/p&gt;
&lt;p&gt;All databases are a clean setup, no schemas, users, tables, data, etc. Just an empty base.&lt;/p&gt;
&lt;p&gt;Installation:&lt;br/&gt;Oracle 19c: ~2h&lt;br/&gt;unzip to ORACLE_HOME&lt;br/&gt;runInstaller&lt;br/&gt;unzip newest OPatch p6880880_200000_Linux-x86-64&lt;br/&gt;apply p30797938_190000_Linux-x86-64 (19.6.1)&lt;br/&gt;PostgreSQL 12.3 compiled from source: ~3m30s&lt;br/&gt;bunzip postgresql-12.3.tar.bz2 to PGHOME&lt;br/&gt;make install-world&lt;/p&gt;
&lt;p&gt;Create database:&lt;br/&gt;Oracle:&lt;br/&gt;create stand alone database: ~30m&lt;br/&gt;create container database (cdb$root): ~47m&lt;br/&gt;create pluggable database (pdb): ~26s&lt;br/&gt;Memory to run a database reasonably well:&lt;br/&gt;at least 1 GB SGA for a stand alone database&lt;br/&gt;at least 4 GB SGA for a container database&lt;br/&gt;PostgreSQL:&lt;br/&gt;initdb: &amp;lt;1s&lt;br/&gt;create database: &amp;lt;200ms&lt;br/&gt;Memory: 128 MB db_buffers&lt;/p&gt;
&lt;p&gt;Start/stop database:&lt;br/&gt;Oracle:&lt;br/&gt;startup (standard, 1 GB SGA): ~15s&lt;br/&gt;shutdown immediate (standard, 1 GB SGA): ~21s&lt;br/&gt;startup (container, 4 GB SGA): ~16s&lt;br/&gt;shutdown immediate (container, 4 GB SGA): ~23s&lt;br/&gt;PostgreSQL:&lt;br/&gt;pg_ctl start: 0.1s&lt;br/&gt;pg_ctl stop: 0.2s&lt;/p&gt;&lt;p&gt;Other discoveries/experiences:&lt;br/&gt;Oracle:&lt;br/&gt;Set up Data Guard (2 nodes) with observer (3. node): ~4h&lt;br/&gt;Applying a PSU or RU often requires downtime of 60m-90m.&lt;br/&gt;Migrating a major version often requires downtime of 60m-90m.&lt;br/&gt;Migrating a new major version requires a lot of work in advance.&lt;br/&gt;Switching Data Guard takes ~1m.&lt;br/&gt;PostgreSQL:&lt;br/&gt;Set up Patroni (2 nodes) with etcd (3 nodes): ~30m&lt;br/&gt;Applying a new minor version requires downtime of &amp;lt;2s.&lt;br/&gt;Migrating a new major version requires downtime of &amp;lt;20s.&lt;br/&gt;Migrating a new major version requires a few minutes work in advance.&lt;br/&gt;Switching Patroni takes ~1s.&lt;/p&gt;
&lt;p&gt;Oracle has some good concepts. I like the conecpt of separate UNDO and TEMP tablespaces and not having to care about vacuuming. Also, I like the idea of global container/cluster-wide views such as CDB_TABLES, etc., a thing which I definitely and seriously miss about PostgreSQL.&lt;/p&gt;
&lt;p&gt;What I especially hate about Oracle (despite the license costs, of course) is that it has so many bugs, bugs and even more bugs and one keeps on searching for patches all day, generating lot of downtime. Applying a PSU or RU is mostly not enough.&lt;/p&gt;
&lt;p&gt;So bottom line, PostgreSQL beats Oracle by far in my opinion, at least as far as installing it and sizes are concerned.&lt;/p&gt;
&lt;p&gt;So, guess what I think is wrong with Oracle after 20 years of working with it...&lt;/p&gt;
&lt;p&gt;Sorry for the rant. ;-)&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br/&gt;Paul&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;126&quot;&gt;
&lt;p&gt;&lt;br/&gt;Paul Förster &amp;lt;paul(dot)foerster(at)gmail(dot)com&amp;gt; writes:&lt;/p&gt;
&lt;p&gt;&amp;gt; Hi,&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; I know, this list is not for this, but I just couldn't resist. Please forgive me.&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Being an Oracle DBA for two decades now (back then starting with Oracle 8.0.5) and only doing PostgreSQL since version 10.3, I feel compelled to share some of my experiences with both.&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Quick facts:&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; All installations were performed on the same host except for Oracle Data Guard and Patroni with etcd, which both require at least three nodes, or an odd number &amp;gt;2 respectively) to establish a democracy to determine the master/primary and replica/standby databases. However, all machines have the same hardware and operating system:&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; OS: openSUSE Leap 15.1 (server setup, not desktop)&lt;br/&gt;&amp;gt; CPU: Intel i7-7700T CPU&lt;br/&gt;&amp;gt; RAM: 32 GB&lt;br/&gt;&amp;gt; Disk Hardware: SSD&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Also, Oracle requires 161 additional packages to be installed, many of which are 32-bit packages, for a supposedly 64-bit only software! This results in 150 MB additional disk space needed and swamps the system with 32-bit packages!&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; PostgreSQL only requires a few packages to be installed depending on the options one chooses to compile the source with. Anyway, none of these packages require a 32-bit version!&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Size of installation:&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Software:&lt;br/&gt;&amp;gt; $ du -sh /data/postgres/12.3 /data/oracle/product/19.6&lt;br/&gt;&amp;gt; 62M /data/postgres/12.3&lt;br/&gt;&amp;gt; 8.5G /data/oracle/product/19.6&lt;br/&gt;&amp;gt; Databases:&lt;br/&gt;&amp;gt; $ du -sh /data/oradb/*&lt;br/&gt;&amp;gt; 3.3G /data/oradb/cdb01 # Oracle Container w/ 1 PDB&lt;br/&gt;&amp;gt; 1.8G /data/oradb/sdb01 # Oracle stand alone database&lt;br/&gt;&amp;gt; $ du -sh /data/pgdb/sdb01&lt;br/&gt;&amp;gt; 659M /data/pgdb/sdb01 # PostgreSQL 12.3 database cluster&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; All databases are a clean setup, no schemas, users, tables, data, etc. Just an empty base.&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Installation:&lt;br/&gt;&amp;gt; Oracle 19c: ~2h&lt;br/&gt;&amp;gt; unzip to ORACLE_HOME&lt;br/&gt;&amp;gt; runInstaller&lt;br/&gt;&amp;gt; unzip newest OPatch p6880880_200000_Linux-x86-64&lt;br/&gt;&amp;gt; apply p30797938_190000_Linux-x86-64 (19.6.1)&lt;br/&gt;&amp;gt; PostgreSQL 12.3 compiled from source: ~3m30s&lt;br/&gt;&amp;gt; bunzip postgresql-12.3.tar.bz2 to PGHOME&lt;br/&gt;&amp;gt; make install-world&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Create database:&lt;br/&gt;&amp;gt; Oracle:&lt;br/&gt;&amp;gt; create stand alone database: ~30m&lt;br/&gt;&amp;gt; create container database (cdb$root): ~47m&lt;br/&gt;&amp;gt; create pluggable database (pdb): ~26s&lt;br/&gt;&amp;gt; Memory to run a database reasonably well:&lt;br/&gt;&amp;gt; at least 1 GB SGA for a stand alone database&lt;br/&gt;&amp;gt; at least 4 GB SGA for a container database&lt;br/&gt;&amp;gt; PostgreSQL:&lt;br/&gt;&amp;gt; initdb: &amp;lt;1s&lt;br/&gt;&amp;gt; create database: &amp;lt;200ms&lt;br/&gt;&amp;gt; Memory: 128 MB db_buffers&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Start/stop database:&lt;br/&gt;&amp;gt; Oracle:&lt;br/&gt;&amp;gt; startup (standard, 1 GB SGA): ~15s&lt;br/&gt;&amp;gt; shutdown immediate (standard, 1 GB SGA): ~21s&lt;br/&gt;&amp;gt; startup (container, 4 GB SGA): ~16s&lt;br/&gt;&amp;gt; shutdown immediate (container, 4 GB SGA): ~23s&lt;br/&gt;&amp;gt; PostgreSQL:&lt;br/&gt;&amp;gt; pg_ctl start: 0.1s&lt;br/&gt;&amp;gt; pg_ctl stop: 0.2s&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Other discoveries/experiences:&lt;br/&gt;&amp;gt; Oracle:&lt;br/&gt;&amp;gt; Set up Data Guard (2 nodes) with observer (3. node): ~4h&lt;br/&gt;&amp;gt; Applying a PSU or RU often requires downtime of 60m-90m.&lt;br/&gt;&amp;gt; Migrating a major version often requires downtime of 60m-90m.&lt;br/&gt;&amp;gt; Migrating a new major version requires a lot of work in advance.&lt;br/&gt;&amp;gt; Switching Data Guard takes ~1m.&lt;br/&gt;&amp;gt; PostgreSQL:&lt;br/&gt;&amp;gt; Set up Patroni (2 nodes) with etcd (3 nodes): ~30m&lt;br/&gt;&amp;gt; Applying a new minor version requires downtime of &amp;lt;2s.&lt;br/&gt;&amp;gt; Migrating a new major version requires downtime of &amp;lt;20s.&lt;br/&gt;&amp;gt; Migrating a new major version requires a few minutes work in advance.&lt;br/&gt;&amp;gt; Switching Patroni takes ~1s.&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Oracle has some good concepts. I like the conecpt of separate UNDO and TEMP tablespaces and not having to care about vacuuming. Also, I like the idea of global container/cluster-wide views such as CDB_TABLES, etc., a thing which I definitely and seriously miss about PostgreSQL.&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; What I especially hate about Oracle (despite the license costs, of course) is that it has so many bugs, bugs and even more bugs and one keeps on searching for patches all day, generating lot of downtime. Applying a PSU or RU is mostly not enough.&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; So bottom line, PostgreSQL beats Oracle by far in my opinion, at least as far as installing it and sizes are concerned.&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; So, guess what I think is wrong with Oracle after 20 years of working with it...&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Sorry for the rant. ;-)&lt;br/&gt;&amp;gt;&lt;br/&gt;&amp;gt; Cheers,&lt;br/&gt;&amp;gt; Paul&lt;/p&gt;
&lt;p&gt;I also worked with Oracle for 20 years, mainly as a developer, but some&lt;br/&gt;DBA work as well. I didn't encounter the bugs you seem to have unless I&lt;br/&gt;wondered off into their 'add-ons'. Sticking with the base RDBMS, I found&lt;br/&gt;it to be pretty solid and reliable. However, I prefer Postgres. The main&lt;br/&gt;reason is that with Oracle, you really need to choose one road or the&lt;br/&gt;other - either be a developer or be a DBA. This is especially true with&lt;br/&gt;the introduction of things like DAtaGuard, GoldenGAte etc. Oracle takes&lt;br/&gt;a lot more administration than Postgres and there is a lot of knowledge&lt;br/&gt;to stay on top of.&lt;/p&gt;
&lt;p&gt;The oracle installation process is horrible. In addition to all the&lt;br/&gt;library crap, you also commonly run into bugs in their scripts. Worse&lt;br/&gt;still, some of those bugs have been there for 20 years and are just&lt;br/&gt;'known' issues experienced DBAs deal with. Their documentation site is&lt;br/&gt;also horrible.&lt;/p&gt;
&lt;p&gt;As a developer, provided you stick with basic database functionality,&lt;br/&gt;i.e. SQL and PL/SQL and avoid their extensions/add-ons, like their&lt;br/&gt;various pub/sub, rules engine, PSP or anything they have obtained by&lt;br/&gt;purchasing a company and 'integrating' it, it is pretty good. I think&lt;br/&gt;they have one of the best locking models out there. The way they handle&lt;br/&gt;indexes and updates is also much faster than postgres and you have to&lt;br/&gt;worry less about the structure of your queries with respect to&lt;br/&gt;performance.&lt;/p&gt;
&lt;p&gt;Still, I prefer Postgres. The main reason is that although I may need to&lt;br/&gt;think about how I structure queries, updates and indexes a bit more, on&lt;br/&gt;the whole, it gets out of my way and does what I want - provide a&lt;br/&gt;reliable data store that I can use and get the job done without having&lt;br/&gt;to spend hours caught up in DBA tasks. Updates are easy and the basic&lt;br/&gt;architecture is easy.&lt;/p&gt;
&lt;p&gt;The biggest challenge when migrating from oracle to postgres is&lt;br/&gt;recognising they are completely different and while they may both&lt;br/&gt;provide a compliant SQL implementation, the similarities stop there. If&lt;br/&gt;I'm in an environment where someone else is responsible for all the DBA&lt;br/&gt;stuff, Oracle is nice to work with. However, you tend to only be in that&lt;br/&gt;situation when your working in a large, usually bureaucratic,&lt;br/&gt;environment, which tends to detract from the whole experience in other&lt;br/&gt;ways. If your unlucky enough to also be using any of the Oracle 'value&lt;br/&gt;add' extensions, development frameworks, application layers etc, it is&lt;br/&gt;really horrible and mind numbing.&lt;/p&gt;
&lt;p&gt;apart from this, Oracle licensing is an absolute nightmare. Apart from&lt;br/&gt;the expense, the complexity is unbelievable and it is almost impossible&lt;br/&gt;to know with any certainty what you will be paying in 12, 24 or more&lt;br/&gt;months.&lt;br/&gt;--&lt;br/&gt;Tim Cross&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Sat, 30 May 2020 14:59:11 +0000</pubDate>
<dc:creator>jkatz05</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.postgresql.org/message-id/flat/0959C81A-5B07-4D04-A6B1-57AA78A9A553%40gmail.com</dc:identifier>
</item>
<item>
<title>A simple way to get more value from metrics</title>
<link>https://danluu.com/metrics-analytics/</link>
<guid isPermaLink="true" >https://danluu.com/metrics-analytics/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;A simple way to get more value from metrics&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;/&gt;&lt;link rel=&quot;icon&quot; href=&quot;data:;base64,=&quot;/&gt;&lt;link rel=&quot;prefetch&quot; href=&quot;../&quot;/&gt;&lt;link rel=&quot;prefetch&quot; href=&quot;../corp-eng-blogs/&quot;/&gt;&lt;link rel=&quot;prefetch&quot; href=&quot;../about/&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;285.32001815706&quot;&gt;
&lt;p&gt;&lt;strong&gt;A simple way to get more value from metrics&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;When I started at Twitter, I spent one day building a system that immediately found a mid 7 figure optimization (which ended up shipping). In the first year, we shipped mid 8 figures per year worth of cost savings as a result. The key feature this system introduces is the ability to query metrics data across all hosts and all services and over any period of time (since inception), so we've called it LongTermMetrics (LTM) internally since I like boring, descriptive, names.&lt;/p&gt;
&lt;p&gt;This got started when I was looking for a starter project that would both help me understand the Twitter infra stack and also have some easily quantifiable value. Andy Wilcox suggested looking at &lt;a href=&quot;https://stackoverflow.com/a/37102630/334816&quot;&gt;JVM survivor space&lt;/a&gt; utilization for some large services. If you're not familiar with what survivor space is, you can think of it as a configurable, fixed-size buffer, in the JVM (at least if you use the GC algorithm that's default at Twitter). At the time, if you looked at a random large services, you'd usually find that either:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The buffer was too small, resulting in poor performance, sometimes catastrophically poor when under high load.&lt;/li&gt;
&lt;li&gt;The buffer was too large, resulting in wasted memory, i.e., wasted money.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;But instead of looking at random services, there's no fundamental reason that we shouldn't be able to query all services and get a list of which services have room for improvement in their configuration, sorted by performance degradation or cost savings. And if we write that query for JVM survivor space, this also goes for other configuration parameters (e.g., other JVM parameters, CPU quota, memory quota, etc.). Writing a query that worked for all the services turned out to be a little more difficult than I was hoping due to a combination of data consistency and performance issues. Data consistency issues included things like:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Any given metric can have ~100 names, e.g., I found 94 different names for JVM survivor space
&lt;ul&gt;&lt;li&gt;I suspect there are more, these were just the ones I could find via a simple search&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The same metric name might have a different meaning for different services
&lt;ul&gt;&lt;li&gt;Could be a counter or a gauge&lt;/li&gt;
&lt;li&gt;Could have different units, e.g., bytes vs. MB or microseconds vs. milliseconds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Metrics are sometimes tagged with an incorrect service name&lt;/li&gt;
&lt;li&gt;Zombie shards can continue to operate and report metrics even though the cluster manager has started up a new instance of the shard, resulting in duplicate and inconsistent metrics for a particular shard name&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Our metrics database, &lt;a href=&quot;https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/metricsdb.html&quot; rel=&quot;noreferrer&quot;&gt;MetricsDB&lt;/a&gt;, was specialized to handle monitoring and dashboards and didn't support general queries. That's totally reasonable, since monitoring and dashboards are lower on Maslow's hierarchy of observability needs than general metrics analytics, but it meant that we couldn't run arbitrary SQL queries against metrics in MetricsDB.&lt;/p&gt;
&lt;p&gt;Another way to query the data is to use the copy that gets written to &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Hadoop#HDFS&quot;&gt;HDFS&lt;/a&gt; in &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_Parquet&quot;&gt;Parquet&lt;/a&gt; format, which allows people to run arbitrary SQL queries (as well as write &lt;a href=&quot;https://en.wikipedia.org/wiki/Cascading_(software)#cite_ref-27&quot;&gt;Scalding&lt;/a&gt; (MapReduce) jobs that consume the data).&lt;/p&gt;
&lt;p&gt;Unfortunately, due to the number of metric names, the data on HDFS can't be stored in a columnar format with one column per name -- &lt;a href=&quot;https://en.wikipedia.org/wiki/Presto_(SQL_query_engine)&quot;&gt;Presto&lt;/a&gt; gets unhappy if you feed it too many columns and we have enough different metrics that we're well beyond that limit. If you don't use a columnar format (and don't apply any other tricks), you end up reading a lot of data for any non-trivial query. The result was that you couldn't run any non-trivial query (or even many trivial queries) across all services or all hosts without having it time out. We don't have similar timeouts for Scalding, but Scalding performance is much worse and a simple Scalding query against a day's worth of metrics will usually take between three and twenty hours, depending on cluster load, making it unreasonable to use Scalding for any kind of exploratory data analysis.&lt;/p&gt;
&lt;p&gt;Given the data infrastructure that already existed, an easy way to solve both of these problems was to write a Scalding job to store the 0.1% to 0.01% of metrics data that we care about for performance or capacity related queries and re-write it into a columnar format. I would guess that at least 90% of metrics are things that almost no one will want to look at in almost any circumstance, and of the metrics anyone really cares about, the vast majority aren't performance related. A happy side effect of this is that since such a small fraction of the data is relevant, it's cheap to store it indefinitely. The standard metrics data dump is deleted after a few weeks because it's large enough that it would be prohibitively expensive to store it indefinitely; a longer metrics memory will be useful for capacity planning or other analyses that prefer to have historical data.&lt;/p&gt;
&lt;p&gt;The data we're saving includes (but isn't limited to) the following things for each shard of each service:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;utilizations and sizes of various buffers&lt;/li&gt;
&lt;li&gt;CPU, memory, and other utilization&lt;/li&gt;
&lt;li&gt;number of threads, context switches, core migrations&lt;/li&gt;
&lt;li&gt;various queue depths and network stats&lt;/li&gt;
&lt;li&gt;JVM version, feature flags, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)&quot;&gt;GC&lt;/a&gt; stats&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/twitter/finagle&quot;&gt;Finagle&lt;/a&gt; metrics&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And for each host:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;various things from &lt;a href=&quot;https://en.wikipedia.org/wiki/Procfs&quot;&gt;procfs&lt;/a&gt;, like &lt;code&gt;iowait&lt;/code&gt; time, &lt;code&gt;idle&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;what cluster the machine is a part of&lt;/li&gt;
&lt;li&gt;host-level info like NIC speed, number of cores on the host, memory,&lt;/li&gt;
&lt;li&gt;host-level stats for &quot;health&quot; issues like thermal throttling, machine checks, etc.&lt;/li&gt;
&lt;li&gt;OS version, host-level software versions, host-level feature flags, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/twitter/rezolus&quot;&gt;Rezolus&lt;/a&gt; metrics&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For things that we know change very infrequently (like host NIC speed), we store these daily, but most of these are stored at the same frequency and granularity that our other metrics is stored for. In some cases, this is obviously wasteful (e.g., for JVM tenuring threshold, which is typically identical across every shard of a service and rarely changes), but this was the easiest way to handle this given the infra we have around metrics.&lt;/p&gt;
&lt;p&gt;Although the impetus for this project was figuring out which services were under or over configured for JVM survivor space, it started with GC and container metrics since those were very obvious things to look at and we've been incrementally adding other metrics since then. To get an idea of the kinds of things we can query for and how simple queries are if you know a bit of SQL, here are some examples:&lt;/p&gt;
&lt;h4 id=&quot;very-high-p90-jvm-survivor-space&quot;&gt;Very High p90 JVM Survivor Space&lt;/h4&gt;
&lt;p&gt;This is part of the original goal of finding under/over-provisioned services. Any service with a very high p90 JVM survivor space utilization is probably under-provisioned on survivor space. Similarly, anything with a very low p99 or p999 JVM survivor space utilization when under peak load is probably overprovisioned (query not displayed here, but we can scope the query to times of high load).&lt;/p&gt;
&lt;p&gt;A Presto query for very high p90 survivor space across all services is:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with results as (
  select servicename,
    approx_distinct(source, 0.1) as approx_sources, -- number of shards for the service
    -- real query uses [coalesce and nullif](https://prestodb.io/docs/current/functions/conditional.html) to handle edge cases, omitted for brevity
    approx_percentile(jvmSurvivorUsed / jvmSurvivorMax, 0.90) as p90_used,
    approx_percentile(jvmSurvivorUsed / jvmSurvivorMax, 0.50) as p50_used,
  from ltm_service 
  where ds &amp;gt;= '2020-02-01' and ds &amp;lt;= '2020-02-28'
  group by servicename)
select * from results
where approx_sources &amp;gt; 100
order by p90_used desc
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Rather than having to look through a bunch of dashboards, we can just get a list and then send diffs with config changes to the appropriate teams or write a script that takes the output of the query and automatically writes the diff. The above query provides a pattern for any basic utilization numbers or rates; you could look at memory usage, new or old gen GC frequency, etc., with similar queries. In one case, we found a service that was wasting enough RAM to pay my salary for a decade.&lt;/p&gt;
&lt;p&gt;I've been moving away from using thresholds against simple percentiles to find issues, but I'm presenting this query because this is a thing people commonly want to do that's useful and I can write this without having to spend a lot of space explain why it's a reasonable thing to do; what I prefer to do instead is out of scope of this post and probably deserves its own post.&lt;/p&gt;
&lt;h4 id=&quot;network-utilization&quot;&gt;Network utilization&lt;/h4&gt;
&lt;p&gt;The above query was over all services, but we can also query across hosts. In addition, we can do queries that join against properties of the host, feature flags, etc.&lt;/p&gt;
&lt;p&gt;Using one set of queries, we were able to determine that we had a significant number of services running up against network limits even though host-level network utilization was low. The compute platform team then did a gradual rollout of a change to network caps, which we monitored with queries like the one below to determine that we weren't see any performance degradation (theoretically possible if increasing network caps caused hosts or switches to hit network limits).&lt;/p&gt;
&lt;p&gt;With the network change, we were able to observe, smaller queue depths, smaller queue size (in bytes), fewer packet drops, etc.&lt;/p&gt;
&lt;p&gt;The query below only shows queue depths for brevity; adding all of the quantities mentioned is just a matter of typing more names in.&lt;/p&gt;
&lt;p&gt;The general thing we can do is, for any particular rollout of a platform or service-level feature, we can see the impact on real services.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;with rolled as (
 select
   -- rollout was fixed for all hosts during the time period, can pick an arbitrary element from the time period
   arbitrary(element_at(misc, 'egress_rate_limit_increase')) as rollout,
   hostId
 from ltm_deploys
 where ds = '2019-10-10'
 and zone = 'foo'
 group by ipAddress
), host_info as(
 select
   arbitrary(nicSpeed) as nicSpeed,
   hostId
 from ltm_host
 where ds = '2019-10-10'
 and zone = 'foo'
 group by ipAddress
), host_rolled as (
 select
   rollout,
   nicSpeed,
   rolled.hostId
 from rolled
 join host_info on rolled.ipAddress = host_info.ipAddress
), container_metrics as (
 select
   service,
   netTxQlen,
   hostId
 from ltm_container
 where ds &amp;gt;= '2019-10-10' and ds &amp;lt;= '2019-10-14'
 and zone = 'foo'
)
select
 service,
 nicSpeed,
 approx_percentile(netTxQlen, 1, 0.999, 0.0001) as p999_qlen,
 approx_percentile(netTxQlen, 1, 0.99, 0.001) as p99_qlen,
 approx_percentile(netTxQlen, 0.9) as p90_qlen,
 approx_percentile(netTxQlen, 0.68) as p68_qlen,
 rollout,
 count(*) as cnt
from container_metrics
join host_rolled on host_rolled.hostId = container_metrics.hostId
group by service, nicSpeed, rollout
&lt;/code&gt;
&lt;/pre&gt;
&lt;h4 id=&quot;other-questions-that-became-easy-to-answer&quot;&gt;Other questions that became easy to answer&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;What's the latency, CPU usage, CPI, or other performance impact of X?
&lt;ul&gt;&lt;li&gt;Increasing or decreasing the number of performance counters we monitor per container&lt;/li&gt;
&lt;li&gt;Tweaking kernel parameters&lt;/li&gt;
&lt;li&gt;OS or other releases&lt;/li&gt;
&lt;li&gt;Increasing or decreasing host-level oversubscription&lt;/li&gt;
&lt;li&gt;General host-level load&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What hosts have unusually poor service-level performance for every service on the host, after controlling for load, etc.?
&lt;ul&gt;&lt;li&gt;This has usually turned out to be due to a hardware misconfiguration or fault&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Which services don't play nicely with other services aside from the general impact on host-level load?&lt;/li&gt;
&lt;li&gt;What's the latency impact of failover, or other high-load events?
&lt;ul&gt;&lt;li&gt;What level of load should we expect in the future given a future high-load event plus current growth?&lt;/li&gt;
&lt;li&gt;Which services see more load during failover, which services see unchanged load, and which fall somewhere in between?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What config changes can we make for any fixed sized buffer or allocation that will improve performance without increasing cost or reduce cost without degrading performance?&lt;/li&gt;
&lt;li&gt;For some particular host-level health problem, what's the probability it recurs if we see it N times?&lt;/li&gt;
&lt;li&gt;etc., there are a lot of questions that become easy to answer if you can write arbitrary queries against historical metrics data&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;design-decisions&quot;&gt;Design decisions&lt;/h4&gt;
&lt;p&gt;LTM is about as boring a system as is possible. Every design decision falls out of taking the path of least resistance.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Why using Scalding?
&lt;ul&gt;&lt;li&gt;It's standard at Twitter and the integration made everything trivial. I tried Spark, which has some advantages. However, at the time, I would have had to do manual integration work that I got for free with Scalding.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Why use Presto and not something that allows for live slice &amp;amp; dice queries like Druid?
&lt;ul&gt;&lt;li&gt;Rebecca Isaacs and Jonathan Simms were doing related work on tracing and we knew that we'd want to do joins between LTM and whatever they created. That's trivial with Presto but would have required more planning and work with something like Druid, at least at the time.&lt;/li&gt;
&lt;li&gt;George Sirois imported a subset of the data into Druid so we could play with it and the facilities it offers are very nice; it's probably worth re-visiting at some point&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Why not use Postgres or something similar?
&lt;ul&gt;&lt;li&gt;The amount of data we want to store makes this infeasible without a massive amount of effort; even though the cost of data storage is quite low, it's still a &quot;big data&quot; problem&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Why is the system not real-time (with delays of at least one hour)?
&lt;ul&gt;&lt;li&gt;Twitter's batch job pipeline is easy to build on, all that was necessary was to read some tutorial on how it works and then write something similar, but with different business logic.&lt;/li&gt;
&lt;li&gt;There was a nicely written proposal to build a real-time analytics pipeline for metrics data written a couple years before I joined Twitter, but that never got built because (I estimate) it would have been one to four quarters of work to produce an MVP and it wasn't clear what team had the right mandate to work on that and also had 4 quarters of headcount available. But the add a batch job took one day, you don't need to have roadmap and planning meetings for a day of work, you can just do it and then do follow-on work incrementally.&lt;/li&gt;
&lt;li&gt;If we're looking for misconfigurations or optimization opportunities, these rarely go away within an hour (and if they did, they must've had small total impact) and, in fact, they often persist for months to years, so we don't lose much by givng up on real-time (we do lose the ability to use the output of this for some monitoring use cases)&lt;/li&gt;
&lt;li&gt;The real-time version would've been a system that significant operational cost can't be operated by one person without undue burden. This system has more operational/maintenance burden than I'd like, probably 1-2 days of mine time per month a month on average, which at this point makes that a pretty large fraction of the total cost of the system, but it never pages, and the amount of work can easily be handeled by one person.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4 id=&quot;boring-technology&quot;&gt;Boring technology&lt;/h4&gt;
&lt;p&gt;I think writing about systems like this, that are just boring work is really underrated. A disproportionate number of posts and talks I read are about systems using hot technologies. I don't have anything against hot new technologies, but a lot of useful work comes from plugging boring technologies together and doing the obvious thing. Since posts and talks about boring work are relatively rare, I think writing up something like this is more useful than it has any right to be.&lt;/p&gt;
&lt;p&gt;For example, a couple years ago, at a local meetup that Matt Singer organizes for companies in our size class to discuss infrastructure (basically, companies that are smaller than FB/Amazon/Google) I asked if anyone was doing something similar to what we'd just done. No one who was there was (or not who'd admit to it, anyway), and engineers from two different companies expressed shock that we could store so much data. This work is too straightforward and obvious to be novel, I'm sure people have built analogous systems in many places. It's literally just storing metrics data on HDFS (or, if you prefer a more general term, a data lake) indefinitely in a format that allows interactive queries.&lt;/p&gt;
&lt;p&gt;If you do the math on the cost of metrics data storage for a project like this in a company in our size class, the storage cost is basically a rounding error. We've shipped individual diffs that easily pay for the storage cost for decades. I don't think there's any reason storing a few years or even a decade worth of metrics should be shocking when people deploy analytics and observability tools that cost much more all the time. But it turns out this was surprising, in part because people don't write up work this boring.&lt;/p&gt;
&lt;p&gt;An unrelated example is that, a while back, I ran into someone at a similarly sized company who wanted to get similar insights out of their metrics data. Instead of starting with something that would take a day, like this project, they started with deep learning. While I think there's value in applying ML and/or stats to infra metrics, they turned a project that could return significant value to the company after a couple of person-days into a project that took person-years. And if you're only going to &lt;em&gt;either&lt;/em&gt; apply simple heuristics guided by someone with infra experience and simple statistical models &lt;em&gt;or&lt;/em&gt; naively apply deep learning, I think the former has much higher ROI. Applying both sophisticated stats/ML &lt;em&gt;and&lt;/em&gt; practitioner guided heuristics together can get you better results than either alone, but I think it makes a lot more sense to start with the simple project that takes a day to build out and maybe another day or two to start to apply than to start with a project that takes months or years to build out and start to apply. But there are a lot of biases towards doing the larger project: it makes a better resume item (deep learning!), in many places, it makes a better promo case, and people are more likely to give a talk or write up a blog post on the cool system that uses deep learning.&lt;/p&gt;
&lt;p&gt;The above discusses why writing up work is valuable for the industry in general. &lt;a href=&quot;https://danluu.com/corp-eng-blogs/&quot;&gt;We covered why writing up work is valuable to the company doing the write-up in a previous post&lt;/a&gt;, so I'm not going to re-hash that here.&lt;/p&gt;
&lt;h4 id=&quot;appendix-stuff-i-screwed-up&quot;&gt;Appendix: stuff I screwed up&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/danluu/status/1220228489522974721&quot;&gt;I think it's unfortunate that you don't get to hear about the downsides of systems without backchannel chatter&lt;/a&gt;, so here are things I did that are pretty obvious mistakes in retrospect. I'll add to this when something else becomes obvious in retrospect.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Not using a double for almost everything
&lt;ul&gt;&lt;li&gt;In an ideal world, some things aren't doubles, but everything in our metrics stack goes through a stage where basically every metric is converted to a double&lt;/li&gt;
&lt;li&gt;I stored most things that &quot;should&quot; be an integral type as an integral type, but doing the conversion from &lt;code&gt;long -&amp;gt; double -&amp;gt; long&lt;/code&gt; can only possibly introduce more rounding error than just doing the conversion from &lt;code&gt;long -&amp;gt; double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I stored some things that shouldn't be an integral type as an integral type, which causes small values to unnecessarily lose precision
&lt;ul&gt;&lt;li&gt;Luckily this hasn't caused serious errors for any actionable analysis I've done, but there are analyses where it could cause problems&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Longterm vs. LongTerm in the code
&lt;ul&gt;&lt;li&gt;I wasn't sure which way this should be capitalized when I was first writing this and, when I made a decision, I failed to grep for and squash everything that was written the wrong way, so now this pointless inconsistency exists in various places&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Both of these are the kind of thing you expect when you crank out something quickly and don't think it through enough. The latter is trivial to fix and not much of a problem since the ubiquitous use of IDEs at Twitter means that basically anyone who would be impacted will have their IDE supply the correct capitalization for them.&lt;/p&gt;
&lt;p&gt;The former is more problematic, both in that it could actually cause incorrect analyses and in that fixing it will require doing a migration of all the data we have. My guess is that, at this point, this will be half a week to a week of work, which I could've easily avoided by spending thirty more seconds thinking through what I was doing.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Thanks to Leah Hanson, Andy Wilcox, Lifan Zeng, and Matej Stuchlik for comments/corrections/discussion&lt;/small&gt;&lt;/p&gt;



&lt;/body&gt;</description>
<pubDate>Sat, 30 May 2020 12:49:07 +0000</pubDate>
<dc:creator>waffle_ss</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://danluu.com/metrics-analytics/</dc:identifier>
</item>
<item>
<title>Apple Mail randomly becomes the frontmost application in macOS</title>
<link>https://annoying.technology/posts/cd82d56f98e75afc/</link>
<guid isPermaLink="true" >https://annoying.technology/posts/cd82d56f98e75afc/</guid>
<description>&lt;div class=&quot;main-image&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/aa343d56e704efc363501afabd0841832af04356/f459e/media/mailappgmail.png&quot; class=&quot;main-image&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Since macOS 10.12 there’s a bug in Apple Mail that causes it to randomly become the frontmost application. If you are in full screen mode — like when you are giving a talk or watching a movie — it opens itself up in split view mode where it takes up half the screen while your other main window is being resized.&lt;/p&gt;
&lt;p&gt;I saw this happening first hand when coworkers showed me something on their computers but never experienced it myself. This has been happening since &lt;a href=&quot;https://forums.macrumors.com/threads/mail-app-launches-itself.1927326/&quot;&gt;at least macOS 10.12&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After some research it became clear that it’s related to Gmail and I’m not exactly the only one:&lt;/p&gt;
&lt;p&gt;The proposed solutions are to disable Power Nap (I don’t see how that could be related) or to remove Gmail. I wouldn’t call any of these a viable solution.&lt;/p&gt;
&lt;p&gt;Unfortunately now I’m also in the select group of people experiencing this bug.&lt;/p&gt;
&lt;p&gt;I tried to confirm the theory of Gmail causing it and could partially reproduce it. The bug only seems to happen with Gmail accounts that are part of a G Suite account and not with my personal Gmail account. It happens 1-2 times per day.&lt;/p&gt;
&lt;p&gt;Funnily enough the bug only started to show up when I got my new Mac Mini with a clean install of Catalina. This makes it pretty clear that this is not some third party app causing havoc but just yet another critical bug that hasn’t been resolved in an increasingly longer list of macOS releases. It’s not as critical as &lt;a href=&quot;https://mjtsai.com/blog/2019/10/11/mail-data-loss-in-macos-10-15/&quot;&gt;Mail.app deleting emails&lt;/a&gt; but it’s still not something you want to have happening every few hours.&lt;/p&gt;
</description>
<pubDate>Sat, 30 May 2020 09:39:10 +0000</pubDate>
<dc:creator>dewey</dc:creator>
<og:title>Philipp is annoyed</og:title>
<og:description>Since macOS 10.12 there’s a bug in Apple Mail that causes it to randomly become the frontmost application. If you are in full screen mode — like when you are giving a talk or watching a movie — it opens itself up in split view mode where it takes up half the screen while your other main window is being resized. I saw this happening first hand when coworkers showed me something on their computers but never experienced it myself.</og:description>
<og:image>https://annoying.technology/media/mailappgmail.png</og:image>
<og:url>https://annoying.technology/posts/cd82d56f98e75afc</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://annoying.technology/posts/cd82d56f98e75afc/</dc:identifier>
</item>
<item>
<title>But no, 80-column terminals in 2020 isn&amp;#039;t “reasonable” any more</title>
<link>https://lkml.org/lkml/2020/5/29/1038</link>
<guid isPermaLink="true" >https://lkml.org/lkml/2020/5/29/1038</guid>
<description>&lt;pre itemprop=&quot;articleBody&quot;&gt;
On Fri, May 29, 2020 at 6:08 AM David Laight &amp;lt;David.Laight@aculab.com&amp;gt; wrote:&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;gt; A wide monitor is for looking at lots of files.&lt;p&gt;Not necessarily.&lt;/p&gt;&lt;p&gt;Excessive line breaks are BAD. They cause real and every-day problems.&lt;/p&gt;&lt;p&gt;They cause problems for things like &quot;grep&quot; both in the patterns and in&lt;br /&gt;the output, since grep (and a lot of other very basic unix utilities)&lt;br /&gt;is fundamentally line-based.&lt;/p&gt;&lt;p&gt;So the fact is, many of us have long long since skipped the whole&lt;br /&gt;&quot;80-column terminal&quot; model, for the same reason that we have many more&lt;br /&gt;lines than 25 lines visible at a time.&lt;/p&gt;&lt;p&gt;And honestly, I don't want to see patches that make the kernel reading&lt;br /&gt;experience worse for me and likely for the vast majority of people,&lt;br /&gt;based on the argument that some odd people have small terminal&lt;br /&gt;windows.&lt;/p&gt;&lt;p&gt;If you or Christoph have 80 character lines, you'll get possibly ugly&lt;br /&gt;wrapped output. Tough. That's _your_ choice. Your hardware limitations&lt;br /&gt;shouldn't be a pain for the rest of us.&lt;/p&gt;&lt;p&gt;Longer lines are fundamentally useful. My monitor is not only a lot&lt;br /&gt;wider than it is tall, my fonts are universally narrower than they are&lt;br /&gt;tall. Long lines are natural.&lt;/p&gt;&lt;p&gt;When I tile my terminal windows on my display, I can have 6 terminals&lt;br /&gt;visible at one time, and that's because I have them three wide. And I&lt;br /&gt;could still fit 80% of a fourth one side-by-side.&lt;/p&gt;&lt;p&gt;And guess what? That's with my default &quot;100x50&quot; terminal window (go to&lt;br /&gt;your gnome terminal settings, you'll find that the 80x25 thing is just&lt;br /&gt;an initial default that you can change), not with some 80x25 one. And&lt;br /&gt;that's with a font that has anti-aliasing and isn't some pixelated&lt;br /&gt;mess.&lt;/p&gt;&lt;p&gt;And most of my terminals actually end up being dragged wider and&lt;br /&gt;taller than that. I checked, and my main one is 142x76 characters&lt;br /&gt;right now, because it turns out that wider (and taller) terminals are&lt;br /&gt;useful not just for source code.&lt;/p&gt;&lt;p&gt;Have you looked at &quot;ps ax&quot; output lately? Or used &quot;top&quot;? Or done &quot;git&lt;br /&gt;diff --stat&quot; or any number of things where it turns out that 80x25 is&lt;br /&gt;really really limiting, and is simply NO LONGER RELEVANT to most of&lt;br /&gt;us.&lt;/p&gt;&lt;p&gt;So no. I do not care about somebody with a 80x25 terminal window&lt;br /&gt;getting line wrapping.&lt;/p&gt;&lt;p&gt;For exactly the same reason I find it completely irrelevant if&lt;br /&gt;somebody says that their kernel compile takes 10 hours because they&lt;br /&gt;are doing kernel development on a Raspberry PI with 4GB of RAM.&lt;/p&gt;&lt;p&gt;People with restrictive hardware shouldn't make it more inconvenient&lt;br /&gt;for people who have better resources. Yes, we'll accommodate things to&lt;br /&gt;within reasonable limits. But no, 80-column terminals in 2020 isn't&lt;br /&gt;&quot;reasonable&quot; any more as far as I'm concerned. People commonly used&lt;br /&gt;132-column terminals even back in the 80's, for chrissake, don't try&lt;br /&gt;to make 80 columns some immovable standard.&lt;/p&gt;&lt;p&gt;If you choose to use a 80-column terminal, you can live with the line&lt;br /&gt;wrapping. It's just that simple.&lt;/p&gt;&lt;p&gt;And longer lines are simply useful. Part of that is that we aren't&lt;br /&gt;programming in the 80's any more, and our source code is fundamentally&lt;br /&gt;wider as a result.&lt;/p&gt;&lt;p&gt;Yes, local iteration variables are still called 'i', because more&lt;br /&gt;context just isn't helpful for some anonymous counter. Being concise&lt;br /&gt;is still a good thing, and overly verbose names are not inherently&lt;br /&gt;better.&lt;/p&gt;&lt;p&gt;But still - it's entirely reasonable to have variable names that are&lt;br /&gt;10-15 characters and it makes the code more legible. Writing things&lt;br /&gt;out instead of using abbreviations etc.&lt;/p&gt;&lt;p&gt;And yes, we do use wide tabs, because that makes indentation something&lt;br /&gt;you can visually see in the structure at a glance and on a&lt;br /&gt;whole-function basis, rather than something you have to try to&lt;br /&gt;visually &quot;line up&quot; things for or count spaces.&lt;/p&gt;&lt;p&gt;So we have lots of fairly fundamental issues that fairly easily make&lt;br /&gt;for longer lines in many circumstances.&lt;/p&gt;&lt;p&gt;And yes, we do line breaks at some point. But there really isn't any&lt;br /&gt;reason to make that point be 80 columns any more.&lt;/p&gt;&lt;p&gt;Linus&lt;/p&gt;&lt;/pre&gt;</description>
<pubDate>Fri, 29 May 2020 23:01:42 +0000</pubDate>
<dc:creator>oddline</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lkml.org/lkml/2020/5/29/1038</dc:identifier>
</item>
<item>
<title>Why is Kubernetes getting so popular?</title>
<link>https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/</link>
<guid isPermaLink="true" >https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/</guid>
<description>&lt;p&gt;At the time of this article, Kubernetes is about &lt;a href=&quot;https://en.wikipedia.org/wiki/Kubernetes&quot;&gt;six years old&lt;/a&gt;, and over the last two years, it has risen in popularity to consistently be one of the &lt;a href=&quot;https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted&quot;&gt;most loved platforms&lt;/a&gt;. This year, it comes in as &lt;a href=&quot;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-platforms&quot;&gt;the number three most loved platform&lt;/a&gt;. If you haven’t heard about Kubernetes yet, it’s a platform that allows you to run and orchestrate container workloads.&lt;/p&gt;
&lt;p&gt;Containers began as a Linux kernel process isolation construct that encompasses &lt;a href=&quot;https://en.wikipedia.org/wiki/Cgroups&quot;&gt;cgroups&lt;/a&gt; from 2007 and &lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_namespaces&quot;&gt;namespaces&lt;/a&gt; from 2002. Containers became more of a thing when &lt;a href=&quot;https://en.wikipedia.org/wiki/LXC&quot;&gt;LXC&lt;/a&gt; became available in 2008, and Google developed its own internal ‘run everything in containers mechanism’ called &lt;a href=&quot;https://kubernetes.io/blog/2015/04/borg-predecessor-to-kubernetes/&quot;&gt;Borg&lt;/a&gt;. Fast forward to 2013, and Docker was released and completely popularized containers for the masses. At the time, &lt;a href=&quot;http://mesos.apache.org/&quot;&gt;Mesos&lt;/a&gt; was the primary tool for orchestrating containers, however, it wasn’t as widely adopted. Kubernetes was released in 2015 and quickly became the de facto container orchestration standard.&lt;/p&gt;
&lt;p&gt;To try to understand the popularity of Kubernetes, let’s consider some questions. When was the last time developers could agree on the way to deploy production applications? How many developers do you know who run tools as is out of the box? How many cloud operations engineers today don’t understand how applications work? We’ll explore the answers in this article.&lt;/p&gt;
&lt;h2&gt;Infrastructure as YAML&lt;/h2&gt;
&lt;p&gt;Coming from the world of &lt;a href=&quot;https://github.com/puppetlabs/puppet&quot;&gt;Puppet&lt;/a&gt; and &lt;a href=&quot;https://github.com/chef/chef&quot;&gt;Chef&lt;/a&gt;, one of the big shifts with Kubernetes has been the move from infrastructure as code towards infrastructure as data—specifically, as YAML. All the resources in Kubernetes that include Pods, Configurations, Deployments, Volumes, etc., can simply be expressed in a YAML file. For example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
apiVersion: v1
kind: Pod
metadata:
  name: site
  labels:
    app: web
spec:
  containers:
    - name: front-end
      image: nginx
      ports:
        - containerPort: 80
&lt;/pre&gt;
&lt;p&gt;This representation makes it easier for DevOps or site reliability engineers to fully express their workloads without the need to write code in a programming language like Python, Ruby, or Javascript.&lt;/p&gt;
&lt;p&gt;Other benefits from having your infrastructure as data include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;GitOps or Git Operations Version Control. With this approach, you can keep all your Kubernetes YAML files under git repositories, which allows you to know precisely when a change was made, who made the change, and what exactly changed. This leads to more transparency across the organization and improves efficiency by avoiding ambiguity as to where members need to go to find what they need. At the same time, it can make it easier to automatically make changes to Kubernetes resources by just merging a pull request.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Scalability. Having resources defined as YAML makes it super easy for cluster operators to change one or two numbers in a Kubernetes resource to change the scaling behavior. Kubernetes has Horizontal Pod Autoscalers to help you identify a minimum and a maximum number of pods a specific deployment would need to have to be able to handle low and high traffic times. For example, if you are running a deployment that may need more capacity because traffic suddenly increases, you could change &lt;code&gt;maxReplicas&lt;/code&gt; from &lt;code&gt;10&lt;/code&gt; to &lt;code&gt;20&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: myapp
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp-deployment
  minReplicas: 1
 &lt;strong&gt; maxReplicas: 20&lt;/strong&gt;
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Security and Controls. YAML is a great way to validate what and how things get deployed in Kubernetes. For example, one of the significant concerns when it comes to security is whether your workloads are running as a non-root user. We can make use of tools like &lt;a href=&quot;https://www.conftest.dev&quot;&gt;conftest&lt;/a&gt;, a YAML/JSON validator, together with the &lt;a href=&quot;https://www.openpolicyagent.org/&quot;&gt;Open Policy Agent&lt;/a&gt;, a policy validator to check that the &lt;code&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/&quot;&gt;SecurityContext&lt;/a&gt;&lt;/code&gt; of your workloads doesn’t allow a container to run as a root. For that, users can use a simple Open Policy Agent &lt;a href=&quot;https://www.openpolicyagent.org/docs/latest/policy-language/&quot;&gt;rego&lt;/a&gt; policy like this:&lt;/li&gt;
&lt;/ul&gt;&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

deny[msg] {
  input.kind = &quot;Deployment&quot;
  not input.spec.template.spec.securityContext.runAsNonRoot = true
  msg = &quot;Containers must not run as root&quot;
}
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Cloud Provider Integrations. One of the major trends in the tech industry is to run workloads in the public cloud providers. With the help of the &lt;a href=&quot;https://github.com/kubernetes/cloud-provider&quot;&gt;cloud-provider&lt;/a&gt; component, Kubernetes allows every cluster to integrate with the cloud provider it’s running on. For example, if a user is running an application in Kubernetes in AWS and wants that application to be accessible through a service, the cloud provider helps automatically create a &lt;code&gt;LoadBalancer&lt;/code&gt; service that will automatically provision an &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/&quot;&gt;Amazon Elastic Load Balancer&lt;/a&gt; to forward the traffic to the application pods.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Extensibility&lt;/h2&gt;
&lt;p&gt;Kubernetes is very extensible, and developers love that. There are a set of existing resources like Pods, Deployments, &lt;code&gt;StatefulSets&lt;/code&gt;, Secrets, &lt;code&gt;ConfigMaps&lt;/code&gt;, etc. However, users and developers can add more resources in the form of &lt;a href=&quot;https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/&quot;&gt;Custom Resource Definitions&lt;/a&gt;. For example, if we’d like to define a &lt;code&gt;CronTab&lt;/code&gt; resource, we could do it with something like this:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: crontabs.my.org
spec:
  group: my.org
  versions:
    - name: v1
      served: &lt;strong&gt;true&lt;/strong&gt;
      storage: &lt;strong&gt;true&lt;/strong&gt;
      Schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                cronSpec:
                  type: string
                  pattern: '^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$'
                replicas:
                  type: integer
                  minimum: 1
                  maximum: 10
  scope: Namespaced
  names:
    plural: crontabs
    singular: crontab
    kind: CronTab
    shortNames:
    - ct
&lt;/pre&gt;
&lt;p&gt;We can create a &lt;code&gt;CronTab&lt;/code&gt; resource later with something like this:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
apiVersion: &quot;my.org/v1&quot;
kind: CronTab
metadata:
  name: my-cron-object
spec:
  cronSpec: &quot;* * * * */5&quot;
  image: my-cron-image
  replicas: 5
&lt;/pre&gt;
&lt;p&gt;Another form of Kubernetes extensibility is its ability for developers to write their own &lt;a href=&quot;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&quot;&gt;Operators&lt;/a&gt;, a specific process running in a Kubernetes cluster that follows the &lt;a href=&quot;https://kubernetes.io/docs/concepts/#kubernetes-control-plane&quot;&gt;control loop pattern&lt;/a&gt;. An Operator allows users to automate the management of CRDs (custom resource definitions) by talking to the Kubernetes API. &lt;/p&gt;
&lt;p&gt;The community has several tools that allow developers to create their own Operators. One of those tools is the &lt;a href=&quot;https://github.com/operator-framework&quot;&gt;Operator Framework&lt;/a&gt; and its &lt;a href=&quot;https://github.com/operator-framework/operator-sdk&quot;&gt;Operator SDK&lt;/a&gt;. The SDK provides a skeleton for developers to get started creating an operator very quickly. For example, you can get started on its &lt;a href=&quot;https://github.com/operator-framework/operator-sdk#create-and-deploy-an-app-operator&quot;&gt;command line&lt;/a&gt; with something like this:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
$ operator-sdk new my-operator --repo github.com/myuser/my-operator
&lt;/pre&gt;
&lt;p&gt;Which creates the whole boilerplate for your operator including YAML files and Golang code:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
.
|____cmd
| |____manager
| | |____main.go
|____go.mod
|____deploy
| |____role.yaml
| |____role_binding.yaml
| |____service_account.yaml
| |____operator.yaml
|____tools.go
|____go.sum
|____.gitignore
|____version
| |____version.go
|____build
| |____bin
| | |____user_setup
| | |____entrypoint
| |____Dockerfile
|____pkg
| |____apis
| | |____apis.go
| |____controller
| | |____controller.go
&lt;/pre&gt;
&lt;p&gt;Then you can add APIs and a controller like this:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
$ operator-sdk add api --api-version=myapp.com/v1alpha1 --kind=MyAppService

$ operator-sdk add controller --api-version=myapp.com/v1alpha1 --kind=MyAppService
&lt;/pre&gt;
&lt;p&gt;And finally build and push the operator to your container registry:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
$ operator-sdk build your.container.registry/youruser/myapp-operator
&lt;/pre&gt;
&lt;p&gt;If developers need to have even more control, they can modify the boilerplate code in the Golang files. For example, to modify the specifics of the controller, they can make changes to the &lt;code&gt;controller.go&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Another project, &lt;a href=&quot;https://kudo.dev/&quot;&gt;KUDO&lt;/a&gt;, allows you to create operators by just using declarative YAML files . For example, an operator for Apache Kafka would be defined with something like &lt;a href=&quot;https://github.com/kudobuilder/operators/blob/master/repository/kafka/operator/operator.yaml&quot;&gt;this&lt;/a&gt;, and it allows users to install a Kafka cluster on top of Kubernetes with a couple of commands:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
$ kubectl kudo install zookeeper
$ kubectl kudo install kafka
&lt;/pre&gt;
&lt;p&gt;Then tune it also with another command:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
$ kubectl kudo install kafka --instance=my-kafka-name \
            -p ZOOKEEPER_URI=zk-zookeeper-0.zk-hs:2181 \
            -p ZOOKEEPER_PATH=/my-path -p BROKER_CPUS=3000m \
            -p BROKER_COUNT=5 -p BROKER_MEM=4096m \
            -p DISK_SIZE=40Gi -p MIN_INSYNC_REPLICAS=3 \
            -p NUM_NETWORK_THREADS=10 -p NUM_IO_THREADS=20
&lt;/pre&gt;
&lt;h2&gt;Innovation&lt;/h2&gt;
&lt;p&gt;Over the last few years, Kubernetes has had major releases every three or four months, which means that every year there are three or four major releases. The number of new features being introduced hasn’t slowed, evidenced by over 30 different additions and changes in its &lt;a href=&quot;https://kubernetes.io/docs/setup/release/notes/#changes-by-kind&quot;&gt;last release&lt;/a&gt;. Furthermore, the contributions don’t show signs of slowing down even during these difficult times as indicated by the &lt;a href=&quot;https://k8s.devstats.cncf.io/d/12/dashboards?orgId=1&amp;amp;refresh=15m&amp;amp;from=now-1y&amp;amp;to=now-1h&quot;&gt;Kubernetes project Github activity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The new features allow cluster operators more flexibility when running a variety of different workloads. Software engineers also love to have more controls to deploy their applications directly to production environments.&lt;/p&gt;
&lt;h2&gt;Community&lt;/h2&gt;
&lt;p&gt;Another big aspect of Kubernetes popularity is its strong community. For starters, Kubernetes was donated to a vendor-neutral home in 2015 as it hit version 1.0: the &lt;a href=&quot;https://www.cncf.io/&quot;&gt;Cloud Native Computing Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is also a wide range of &lt;a href=&quot;https://github.com/kubernetes/community/blob/master/sig-list.md&quot;&gt;community SIGs&lt;/a&gt; (special interest groups) that target different areas in Kubernetes as the project moves forwards. They continuously add new features and make it even more user friendly.&lt;/p&gt;
&lt;p&gt;The Cloud Native Foundation also organizes CloudNativeCon/KubeCon, which as of this writing, is the largest ever open-source event in the world. The event, which is normally held up to three times a year, gathers thousands of technologists and professionals who want to improve Kubernetes and its ecosystem as well as make use of some of the new features released every three months.&lt;/p&gt;
&lt;p&gt;Furthermore, the Cloud Native Foundation has a &lt;a href=&quot;https://github.com/cncf/toc&quot;&gt;Technical Oversight Committee&lt;/a&gt; that, together with its &lt;a href=&quot;https://github.com/cncf/toc/blob/master/sigs/README.md&quot;&gt;SIGs&lt;/a&gt;, look at the foundations’ new and &lt;a href=&quot;https://www.cncf.io/projects/&quot;&gt;existing projects&lt;/a&gt; in the cloud-native ecosystem. Most of the projects help enhance the value proposition of Kubernetes.&lt;/p&gt;
&lt;p&gt;Finally, I believe that Kubernetes would not have the success that it does without the conscious effort by the community to be inclusive to each other and to be welcoming to any newcomers.&lt;/p&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;One of the main challenges developers face in the future is how to focus more on the details of the code rather than the infrastructure where that code runs on. For that, &lt;a href=&quot;https://stackoverflow.blog/2020/05/18/you-want-efficient-application-scaling-go-serverless/&quot;&gt;serverless&lt;/a&gt; is emerging as one of the leading architectural paradigms to address that challenge. There are already very advanced frameworks such as &lt;a href=&quot;https://github.com/knative&quot;&gt;Knative&lt;/a&gt; and &lt;a href=&quot;https://github.com/openfaas/faas&quot;&gt;OpenFaas&lt;/a&gt; that use Kubernetes to abstract the infrastructure from the developer.&lt;/p&gt;
&lt;p&gt;We’ve shown a brief peek at Kubernetes in this article, but this is just the tip of the iceberg. There are many more resources, features, and configurations users can leverage. We will continue to see new open-source projects and technologies that enhance or evolve Kubernetes, and as we mentioned, the contributions and the community aren’t going anywhere.&lt;/p&gt;
Tags: &lt;a href=&quot;https://stackoverflow.blog/tag/bulletin/&quot; rel=&quot;tag&quot;&gt;bulletin&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.blog/tag/containers/&quot; rel=&quot;tag&quot;&gt;containers&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.blog/tag/kubernetes/&quot; rel=&quot;tag&quot;&gt;kubernetes&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.blog/tag/serverless/&quot; rel=&quot;tag&quot;&gt;serverless&lt;/a&gt;, &lt;a href=&quot;https://stackoverflow.blog/tag/stackoverflow/&quot; rel=&quot;tag&quot;&gt;stackoverflow&lt;/a&gt;</description>
<pubDate>Fri, 29 May 2020 19:25:40 +0000</pubDate>
<dc:creator>a7b3fa</dc:creator>
<og:type>article</og:type>
<og:title>Why is Kubernetes getting so popular? - Stack Overflow Blog</og:title>
<og:description>At the time of this article, Kubernetes is about six years old, and over the last two years, it has risen in popularity to consistently be one of the most loved platforms. This year, it comes in as the number three most loved platform. If you haven’t heard about Kubernetes yet, it’s a platform that…</og:description>
<og:url>https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/</og:url>
<og:image>https://149351115.v2.pressablecdn.com/wp-content/uploads/2020/05/iStock-530536607.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stackoverflow.blog/2020/05/29/why-kubernetes-getting-so-popular/</dc:identifier>
</item>
<item>
<title>Godot Editor running in a web browser</title>
<link>https://godotengine.org/article/godot-editor-running-web-browser</link>
<guid isPermaLink="true" >https://godotengine.org/article/godot-editor-running-web-browser</guid>
<description>&lt;img data-src=&quot;editor.png&quot; src=&quot;https://godotengine.org/storage/app/uploads/public/5ec/fac/efa/5ecfacefaeb1e933757325.png&quot; alt=&quot;&quot;/&gt;&lt;p&gt;

&lt;h4 class=&quot;author&quot;&gt;By: Fabio Alessandrelli &lt;span class=&quot;date&quot;&gt;May 29, 2020&lt;/span&gt;&lt;/h4&gt;
&lt;/p&gt;&lt;p&gt;Hello Godotters! It's-a me, Fabio! In the last few months, thanks to the great sponsorship of &lt;a href=&quot;https://godotengine.org/article/godot-engine-awarded-50000-mozilla-open-source-support-program&quot;&gt;Mozilla&lt;/a&gt; I've been working on a big surprise for Godot 4.0, namely making the editor available as an HTML5 application.&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;DOES NOT&lt;/strong&gt; mean that we will move completely to the Web like other engines did. It will only be provided as a complementary option to the native editor, as a way to lower the entry barrier. Let me explain further.&lt;/p&gt;

&lt;p&gt;Godot Engine supports exporting games to the HTML5 platform (i.e. browsers). Given that the editor itself is written using the Godot Engine API it should be possible to run the editor in browsers as well.&lt;/p&gt;
&lt;p&gt;The reason why the editor wasn’t able to run in browsers up until now was due to some historical Web browsers limitations, mostly lack of support for threading, but also file system access.&lt;/p&gt;
&lt;p&gt;With the introduction of &lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt;, WebAssembly threads, Javascript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;, and possibly an upcoming &lt;a href=&quot;https://wicg.github.io/native-file-system/&quot;&gt;Native FileSystem API&lt;/a&gt;, it should now be possible to have an almost-native user experience when running the editor on the Web.&lt;/p&gt;
&lt;p&gt;This will be beneficial in many ways to the engine itself for multiple reasons:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It will &lt;strong&gt;lower the barrier&lt;/strong&gt; for new users, which will be able to try out the engine without the need to download anything.&lt;/li&gt;
&lt;li&gt;Any modification towards reaching that goal &lt;strong&gt;will also improve the HTML5 export itself&lt;/strong&gt; (given that the editor is made like a Godot game).&lt;/li&gt;
&lt;li&gt;It will allow to use Godot in a reasonable way in environments where installing/downloading applications is not an option (e.g. schools’ computers and tablets), &lt;strong&gt;fostering the usage of the engine for educational purposes&lt;/strong&gt; (which is something we, as an open source community, deeply believe in).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This DOES NOT mean that Godot will move completely to the Web, nor that the Web browsers version will be the recommended way for professional development, but it will be an additional option for cases where it might be useful (again, pick the education sector as an example).&lt;/p&gt;
&lt;p&gt;To stress this out again: &lt;strong&gt;The good-old native editor will always be our main focus&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After this necessary preface, let’s get to the news: &lt;strong&gt;a Godot Editor prototype running in browsers is being presented at &lt;a href=&quot;https://godotengine.org/online/godot.tools.html&quot;&gt;this address&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As of this writing, this prototype requires a &lt;strong&gt;recent Chromium-based&lt;/strong&gt; browser or &lt;strong&gt;Firefox Nightly&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is a very &lt;strong&gt;early stage&lt;/strong&gt; version, but it allows to run the editor (including the project manager), and make simple projects, while storing the files in either your browser local storage, or an external cloud service (Dropbox is currently supported, but not recommended due to speed limitations. In the future, standard WebDAV support will allow for more providers and better speeds.) See the &lt;em&gt;&quot;Known limitations&quot;&lt;/em&gt; section below.&lt;/p&gt;

&lt;p&gt;When opening the URL you will be asked how to load the engine, specifically, selecting the persistence support. There are 4 options available:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;None&lt;/strong&gt; – no persistence will be used, you will lose everything when you close the browser or refresh the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IndexedDB&lt;/strong&gt; – will use the IndexedDB API to store your files. This is usually limited to 50 megabytes on desktop, and 5 megabytes on mobile (this is the RECOMMENDED storage type for now).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dropbox&lt;/strong&gt; – will store your files in a Dropbox folder, created specifically for the test application. You will also be able to upload files directly to Dropbox and they will be available in the engine (after refreshing the page!). This is a very powerful tool, but is currently quite slow, both when loading and saving (it will need to download the whole folder on startup, and changes will be stored asynchronously). Improvements in this area are much needed, and Dropbox support is provided as a proof-of-concept for now and in no way recommended. Cloud support (via standard WebDAV) will in time become the preferred way to use the web editor. &lt;em&gt;Note: At the time of your reading, Dropbox support might not work due to limits in terms of maximum number of users.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FileSystem API&lt;/strong&gt; – will use the new Web FileSystem API, which could potentially expose native file system support in the future, if browser vendors agree on a safe way to do that. This is, again, provided as a proof-of-concept and browser support is very limited for now.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5ec/fab/40c/5ecfab40cc43e902530760.png&quot; alt=&quot;persistence.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You can also opt to preload a zip file to the chosen virtual file system, allowing you to quickly test demo projects and load your offline projects inside the editor browser. Once the project manager starts, you will need to scan the virtual file system for new projects via the “Scan” option when preloading a zipped project. The editor config with the available projects list and other options will be stored according to your persistence method.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5ec/fab/650/5ecfab6500451585441017.png&quot; alt=&quot;preload.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5ec/fab/9db/5ecfab9db77ed097759444.png&quot; alt=&quot;scan1.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Once you have imported a project, or after creating a new one, you will be able to edit it, create new scenes, create new scripts, and upload assets via drag and drop. You will also be able to run your editor project inside the editor via the play button. Extra HTML UI allows you to close the game and the editor, and switch between them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5ec/fab/e00/5ecfabe00b0f9402944496.png&quot; alt=&quot;edit.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5ec/fac/2a0/5ecfac2a03bc1119573590.png&quot; alt=&quot;editor.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://godotengine.org/storage/app/uploads/public/5ec/fac/334/5ecfac334405b789986563.png&quot; alt=&quot;game.png&quot;/&gt;&lt;/p&gt;

&lt;p&gt;As stated above, this is a very early stage prototype, and there are some known limitations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://caniuse.com/#feat=sharedarraybuffer&quot;&gt;SharedArrayBuffer support&lt;/a&gt; is still limited among browsers. Recent versions of &lt;strong&gt;Chrome&lt;/strong&gt; will work, as well as Mozilla &lt;strong&gt;Firefox Nightly&lt;/strong&gt; builds (the beta and stable versions don’t have SharedArrayBuffer enabled yet). Other browsers are untested.&lt;/li&gt;
&lt;li&gt;Importing and using audio assets is still not well supported (and may cause a deadlock prompting the browser to ask the user to stop the script).&lt;/li&gt;
&lt;li&gt;Closing the project manager and game the via the HTML UI works, but closing the editor might deadlock and will always cause a memory leak.&lt;/li&gt;
&lt;li&gt;Sometimes refreshing the page when an error occurs is not enough, this is mostly due to browsers not clearing WebAssembly memory correctly. You might find yourself in a situation (after many realoads usually) where you have to open a new browser window/tab and visit the URL again for the editor to be able to run.&lt;/li&gt;
&lt;li&gt;The debugger connection between the editor instance and the running game does not work currently, so &lt;code&gt;print()&lt;/code&gt; output or errors will not be raised in the editor. They are however accessible from the browser console.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Getting this far required quite a bit of time (I've been working on it since February), but a lot of this work will greatly improve the HTML5 export too. Here are a few nice things that you will see in Godot 4.0:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The exported game can now exit properly, calling &lt;code&gt;get_tree().quit()&lt;/code&gt; will work as expected in HTML5 exports, freeing up the memory in the user machine (this could for example be useful if you present more games in the same page, and allow the user to switch among them, so you don't have to reload the page to free up memory).&lt;/li&gt;
&lt;li&gt;Files drop support. The user will be able to drop files in the game window, and you will get them available in the game via the &lt;a href=&quot;https://docs.godotengine.org/en/stable/classes/class_scenetree.html#signals&quot;&gt;&lt;code&gt;files_dropped&lt;/code&gt; signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thread support! The HTML5 plaform will finally support the &lt;a href=&quot;https://docs.godotengine.org/en/stable/classes/class_thread.html&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;Rudimental &lt;a href=&quot;https://docs.godotengine.org/en/stable/classes/class_os.html#class-os-method-execute&quot;&gt;&lt;code&gt;OS.execute&lt;/code&gt;&lt;/a&gt; support has been added to the HTML5 export, allowing you to &quot;catch&quot; those call via JavaScript code. (This is used in the prototype to switch between project manager/project editor, and to run the game.)&lt;/li&gt;
&lt;li&gt;Simpler JS &lt;code&gt;Engine&lt;/code&gt; code that gives you more control over the game lifecycle.&lt;/li&gt;
&lt;li&gt;Safer and smaller JS code, via Closure Compiler to better minify the required JS support code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are still quite a few improvements that I will work on in the HTML5 platform, some of which will also benefit other platforms. Here is a sneak peak:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Virtual keyboard in the HTML5 plaform, for working text input in mobile devices.&lt;/li&gt;
&lt;li&gt;Persistence support, WebDAV integration.&lt;/li&gt;
&lt;li&gt;Gestures for the editor, allowing using the editor from touch devices (this will also be beneficial to make native Android or iOS versions of the editor for example).&lt;/li&gt;
&lt;li&gt;Better HTML5 Audio support, trying to offload audio processing (e.g. effects, mixing) into a separate thread.&lt;/li&gt;
&lt;li&gt;GDNative support in the HTML5 platform.&lt;/li&gt;
&lt;li&gt;Easier interface to external JS libraries (expecially asynchronous ones), so you don't have to rely on complex &lt;a href=&quot;https://docs.godotengine.org/en/stable/classes/class_javascript.html#class-javascript-eval&quot;&gt;&lt;code&gt;JavaScript.eval&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/godotengine/godot/tree/js/editor_prototype&quot;&gt;The prototype branch&lt;/a&gt; (still based on 3.2).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/godotengine/godot/pull/38587&quot;&gt;PR that forward ports most of the changes to &lt;code&gt;master&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Fri, 29 May 2020 19:13:15 +0000</pubDate>
<dc:creator>SquareWheel</dc:creator>
<og:image>https://godotengine.org/storage/app/uploads/public/5ec/fac/efa/5ecfacefaeb1e933757325.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://godotengine.org/article/godot-editor-running-web-browser</dc:identifier>
</item>
</channel>
</rss>