<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>WireGuard Merged into OpenBSD</title>
<link>https://marc.info/?l=openbsd-cvs&amp;m=159274150512676&amp;w=2</link>
<guid isPermaLink="true" >https://marc.info/?l=openbsd-cvs&amp;m=159274150512676&amp;w=2</guid>
<description>&lt;center&gt;
&lt;h4&gt;&lt;strong&gt;Note: The system is temporarily in read-only mode&lt;/strong&gt;&lt;/h4&gt;
&lt;/center&gt;
&lt;pre&gt;
&lt;strong&gt;[&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159273987612285&amp;amp;w=2&quot;&gt;prev in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159274170512716&amp;amp;w=2&quot;&gt;next in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159273987612285&amp;amp;w=2&quot;&gt;prev in thread&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159274170512716&amp;amp;w=2&quot;&gt;next in thread&lt;/a&gt;] &lt;/strong&gt;
&lt;strong&gt;&lt;span&gt;
List:       &lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;r=1&amp;amp;w=2&quot;&gt;openbsd-cvs&lt;/a&gt;
Subject:    &lt;a href=&quot;https://marc.info/?t=97834182900002&amp;amp;r=1&amp;amp;w=2&quot;&gt;CVS: cvs.openbsd.org: src&lt;/a&gt;
From:       &lt;a href=&quot;https://marc.info/?a=126489534100006&amp;amp;r=1&amp;amp;w=2&quot;&gt;David Gwynne &amp;lt;dlg () openbsd ! org&amp;gt;&lt;/a&gt;
Date:       &lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;r=1&amp;amp;w=2&amp;amp;b=202006&quot;&gt;2020-06-21 12:11:26&lt;/a&gt;
Message-ID: &lt;a href=&quot;https://marc.info/?i=467354be6850f13d%20()%20openbsd%20!%20org&quot;&gt;467354be6850f13d () openbsd ! org&lt;/a&gt;&lt;/span&gt;
[Download RAW &lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159274150512676&amp;amp;q=mbox&quot;&gt;message&lt;/a&gt; or &lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159274150512676&amp;amp;q=raw&quot;&gt;body&lt;/a&gt;]&lt;/strong&gt;

CVSROOT:        /cvs
Module name:    src
Changes by:     dlg@cvs.openbsd.org     2020/06/21 06:11:26

Modified files:
        sys/net        : if.c 
Added files:
        sys/net        : if_wg.c if_wg.h wg_cookie.c wg_cookie.h 
                         wg_noise.c wg_noise.h 

Log message:
add wg(4), an in kernel driver for WireGuard vpn communication.

thanks to Matt Dunwoodie and Jason A. Donenfeld for their effort.
it's at least as functional as the go implementation, and maybe
more so since this one works on more architectures.

i'm sure there's further development that can be done, but you can
say that about anything and everything that's in the tree.

ok deraadt@

&lt;strong&gt;[&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159273987612285&amp;amp;w=2&quot;&gt;prev in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159274170512716&amp;amp;w=2&quot;&gt;next in list&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159273987612285&amp;amp;w=2&quot;&gt;prev in thread&lt;/a&gt;] [&lt;a href=&quot;https://marc.info/?l=openbsd-cvs&amp;amp;m=159274170512716&amp;amp;w=2&quot;&gt;next in thread&lt;/a&gt;] &lt;/strong&gt;
&lt;/pre&gt;

&lt;center&gt;&lt;a href=&quot;https://marc.info/?q=configure&quot;&gt;Configure&lt;/a&gt; | &lt;a href=&quot;https://marc.info/?q=about&quot;&gt;About&lt;/a&gt; | &lt;a href=&quot;https://marc.info/?q=news&quot;&gt;News&lt;/a&gt; | &lt;a href=&quot;mailto:webguy@marc.info?subject=Add%20a%20list%20to%20MARC&quot;&gt;Add a list&lt;/a&gt; | Sponsored by &lt;a href=&quot;http://www.korelogic.com/&quot;&gt;KoreLogic&lt;/a&gt;&lt;/center&gt;
</description>
<pubDate>Sun, 21 Jun 2020 19:34:36 +0000</pubDate>
<dc:creator>axiomdata316</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://marc.info/?l=openbsd-cvs&amp;m=159274150512676&amp;w=2</dc:identifier>
</item>
<item>
<title>Video Games Are the Future of Education</title>
<link>https://nabeelqu.co/education</link>
<guid isPermaLink="true" >https://nabeelqu.co/education</guid>
<description>&lt;h2&gt;Video Games are the Future of Education&lt;/h2&gt;
&lt;br /&gt;&lt;em&gt;Published: June 21, 2020&lt;/em&gt;&lt;p&gt;My real education as a teenager was:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Books I chose to read myself&lt;/li&gt;
&lt;li&gt;Learning to program computers (taught myself)&lt;/li&gt;
&lt;li&gt;Video games (found them myself)&lt;/li&gt;
&lt;li&gt;Maths (school)&lt;/li&gt;
&lt;/ol&gt;&lt;br /&gt;#1-3 happened &lt;em&gt;despite&lt;/em&gt; formal schooling, not because of it, something Paul Graham says here:&lt;p&gt;This suggests the following conclusion:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. The things you learn by yourself stick; the things that are “taught” to you do not stick.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The fundamental principle of education is to give students an environment, and tools, &lt;em&gt;where they can make discoveries themselves&lt;/em&gt;. This requires space, and time, and autonomy.&lt;/p&gt;&lt;p&gt;Students also need to be able to &lt;em&gt;choose&lt;/em&gt; what they learn and how they learn it, something that modern rigid curriculums and prison-like school environments do not permit. &lt;/p&gt;&lt;p&gt;However, I would go farther than this and say:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. Video games provide a much deeper understanding of most subjects than classical education does.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;I play a fair amount of chess (not well) and one thing you develop after playing a lot of chess is that you start to see “lines of force” on the board, e.g. the force a bishop exerts on an enemy pawn; and start to sense “weak points” in the opponent’s structure &lt;em&gt;in a very physical way&lt;/em&gt;, in the way that you can sense the shakiest part of a Jenga tower in the physical world. &lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://conceptdraw.com/a1128c4/p1/preview/640/pict---scholar's-mate.png--diagram-flowchart-example.png&quot; /&gt;&lt;br /&gt;&lt;em&gt;This is the classical “scholar’s mate” position. As soon as you move your bishop to c4, you just “feel” that the black f-pawn is under pressure. The force exerted by the white bishop and Queen on the f-pawn can be felt as a weakness &lt;strong&gt;in the body&lt;/strong&gt; of a good chess player.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Developing this touch-based, proprioceptive “sense” of a thing is often key to a really deep understanding of it. When you understand something very well it’s almost as though you can play around with it using all your senses — touch, feeling, space.&lt;/p&gt;&lt;p&gt;Feynman:&lt;br /&gt;&lt;/p&gt;&lt;blockquote readability=&quot;21&quot;&gt;
&lt;p&gt;“If you can’t see it, it’s hard to explain why—but if you try to hold something up with a ladder, say, and you get the ladder directly under the thing, it’s easy to keep the ladder from sliding out. But if the ladder is leaning way waaaaay out, so that the far end of the ladder is only a very tiny distance from the ground, you’ll find a nearly infinite horizontal force is required to hold the thing up at a very slight angle. &lt;strong&gt;Now, all these things you can feel. You don’t have to feel them; you can work them out by making diagrams and calculations, but as problems get more and more difficult, and as you try to understand nature in more and more complicated situations, the more you can guess at, feel, and understand without actually calculating, the much better off you are!”&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
There are stories of Feynman rolling around on the floor, eyes closed in concentration, simulating physical processes with his body. His biographer, James Gleick, writes:&lt;br /&gt;&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Intuition was not just visual but also auditory and kinesthetic. T&lt;strong&gt;hose who watched Feynman in moments of intense concentration came away with a strong, even disturbing sense of the physicality of the process&lt;/strong&gt;, as thuogh his brain did not stop with the gray matter but extended through every muscle in his body. A Cornell dormitory neighbor opened Feynman’s door to find him rolling about on the floor beside his bed as he worked on a problem....In part the process of scientific visualization is a process of putting onself in nature: in an imagined beam of light, in a relativistic electron.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br /&gt;There is also the famous story of Einstein at 16 imagining chasing after a beam of light, the seed of special relativity. &lt;p&gt;When you really understand something, it is almost always accompanied by this deep tacit “high-dimensional” grasp of the thing. But:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. Schooling mostly fails at giving you this deep understanding.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; Most adults have the &lt;em&gt;incredibly painful&lt;/em&gt; experience of realizing that after 15 years of formal schooling we still can’t answer very basic questions about everyday scientific questions (e.g. why the sky is actually blue) and have to go look them up.&lt;/p&gt;&lt;p&gt;Most of the things I was “taught” at school simply didn’t stick. We were just &lt;em&gt;told&lt;/em&gt; that an atom consisted of protons/neutrons/electrons, but we had no idea how anybody had figured this out (or, for that matter, why this was important). I have painful memories of studying the “plum pudding model” (aka Rutherford model) of atoms at school. &lt;/p&gt;&lt;p&gt;It took humans &lt;em&gt;thousands of years&lt;/em&gt; to really figure out that reality was made of atoms, and understand why this was true. Reality has &lt;a href=&quot;http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail&quot;&gt;a surprising amount of detail&lt;/a&gt;. The deeper you get into these questions, the more you realize that nothing is simple. But school didn’t leave us room to dive deep into these questions; we had to pass exams, which meant dutifully learning to calculate molecular weights, etc, without actually understanding a thing.&lt;/p&gt;&lt;p&gt;The net result is: no understanding, years of waste.&lt;/p&gt;&lt;p&gt;But this is &lt;strong&gt;entirely preventable&lt;/strong&gt;. Consider if Pokemon had been “taught” in the usual way:&lt;/p&gt;&lt;p&gt;Playing with a simulation (i.e. the Pokemon games) gets you this deep, “bone-level” understanding very quickly. &lt;/p&gt;&lt;p&gt;Thus, I believe that:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4. Video games will become a core component of education.&lt;br /&gt;&lt;/strong&gt;&lt;br /&gt;This sounds absurd, but consider that &lt;strong&gt;simulations are already used widely for learning:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Kerbal Space Program is notorious for turning its players into experts on orbital mechanics&lt;/li&gt;
&lt;li&gt;Flight simulators and combat simulators are used to train pilots and army personnel&lt;/li&gt;
&lt;li&gt;The game “Factorio” teaches you about capitalism, production, and the economy&lt;/li&gt;
&lt;li&gt;Programming environments are simulations of the “universe” of that programming language, with fast feedback loops (write code -&amp;gt; debug)&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;&lt;div&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/orbital_mechanics.png&quot; /&gt;&lt;/div&gt;
A video game is just:&lt;p&gt;(a) a simulation of reality&lt;br /&gt;(b) with fast feedback loops.&lt;/p&gt;&lt;p&gt;Learning is just the act of engaging with an external thing and performing many conjecture/criticism loops, forming conclusions, and building on them to form a body of knowledge.&lt;/p&gt;&lt;p&gt;So it makes sense that video games would be the primary educational environment of the future: they are the best way we have of (a) creating simulations of reality (b) with fast feedback loops (c) accessible at low cost.&lt;/p&gt;&lt;p&gt;(By the way, this is true not just for abstract concepts such as orbital mechanics, but also for ethical traits. e.g. my understanding of heroism is to this day shaped by games like Final Fantasy and Metal Gear Solid. This also helps explain why reading fiction is valuable: you can gain “bodily knowledge” about despair by reading Dostoyevsky, about jealousy by reading Swann’s Way, etc.)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;5. Where games mostly fall short is that they’re not that transferable to the real world. The skills you learn are highly &lt;em&gt;specific to that game&lt;/em&gt;. This will change.&lt;br /&gt;&lt;/strong&gt;&lt;br /&gt;Most chess knowledge is specific to chess; what you learn from getting good at chess is not really transferable to real life, it instead consists of highly technical understandings of various chess positions.&lt;/p&gt;&lt;p&gt;This is because chess is not an accurate model of reality. The lessons you learn from chess are generalizable only at a high level (e.g. a bad plan is better than no plan).&lt;/p&gt;&lt;p&gt;But if you have games that are (a) fun and (b) accurate for some aspects of reality, such as KSP or Factorio, you &lt;em&gt;do&lt;/em&gt; get learning that is real and transferable. The challenge is in making games that satisfy both constraints.&lt;/p&gt;&lt;p&gt;There are not &lt;em&gt;that&lt;/em&gt; many examples of this just yet, but I believe there will be more in the future. So why hasn’t this happened already? I think the answer is:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;6. It is currently too hard to make video games. Making it easier to create video games will massively increase the supply of good video games and cause a gradual revolution in education. &lt;br /&gt;&lt;/strong&gt;&lt;br /&gt;One thesis of the internet that always stuck with me comes from Evan Williams, who founded Twitter/Blogger/Medium. He said that the best way to create a giant internet company is to take something people want to do and make it 10x easier.&lt;/p&gt;&lt;p&gt;This was the core insight behind all of his companies. People already want to be creative, they want to make music, they want to make video games, they want to write (clearly!), they want to publish things online, but the barriers to entry for most of these things is currently too high. &lt;br /&gt;&lt;/p&gt;&lt;blockquote readability=&quot;12.868020304569&quot;&gt;
&lt;p&gt;&quot;We often think of the internet enables you to do new things,&quot; Williams said. &quot;But people just want to do the same things they’ve always done.&quot;&lt;/p&gt;&lt;p&gt;(...)&lt;/p&gt;&lt;p&gt;&quot;Here’s the formula if you want to build a billion-dollar internet company,&quot; he said. &quot;Take a human desire, preferably one that has been around for a really long time...Identify that desire and use modern technology to take out steps.&quot; (&lt;a href=&quot;https://www.wired.com/2013/09/ev-williams-xoxo/&quot;&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
“Making things easier to create” is a mega-trend of the internet era:&lt;ul&gt;&lt;li&gt;Blogger/Medium/Wordpress make it easy for anyone to write on the internet;&lt;/li&gt;
&lt;li&gt;Substack makes it easy for people to set up newsletters;&lt;/li&gt;
&lt;li&gt;YouTube and TikTok make it easy to make videos;&lt;/li&gt;
&lt;li&gt;Ableton makes it easier to create music; etc.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;Another insight is that &lt;em&gt;making things easier has nonlinear effects&lt;/em&gt;. Making something 10x easier can cause 1000x more of that thing to happen. Hence the explosion of online creativity you see on YouTube, with chess, Minecraft, math videos, Khan Academy, Twitchstreams, Soundcloud, etc; you remove a small bit of friction and get a large result.&lt;p&gt;This trend has a long way to go, though. Making video games is colossally hard and expensive; you  need to be a crazy genius indie game developer with ultra-high risk tolerance, or else a mega-corporation like Unity or Steam or Valve, to do it. Video games haven’t yet had their “creator revolution”.&lt;/p&gt;&lt;p&gt;This will not always be the case. Large companies will be built that make it easier for anyone to make videos, or video games, or podcasts, and so on, unleashing a ton more latent creativity. This will make the idea of video games for education seem less and less insane over time, as better games get built to help students understand important things like Newtonian mechanics, maths, chemistry, architecture etc. on an intuitive level that books and teachers rarely manage to reach.&lt;/p&gt;&lt;p&gt;Some caveats:&lt;/p&gt;&lt;p&gt;First, &lt;strong&gt;I suspect that optimizing directly for ‘being educational’ is a bad idea for video game creators.&lt;/strong&gt; Most video games I’ve played that tried that were boring. It seems better to optimize for some combination of fun and complexity. &lt;/p&gt;&lt;p&gt;Second, this post is not a call to “gamify” education or to slap gaming dynamics on top of education as an after-thought. That won’t work.&lt;/p&gt;&lt;p&gt;One last thought: this is also why AI is important for human productivity. Most of the discourse is about how AI will “replace” humans. I prefer the Licklider school of thought: human-computer symbiosis. AI will make humans vastly more effective by automating tedious tasks. For example, humans can use text AI such as GPT-3 to generate ideas/boilerplate writing to get around the terror of the blank page, and then simply pick the best ones and refine/iterate on those. (AI Dril, which was based on GPT-2, was an early example of this). As AI gets better, “assistive creativity” will become a bigger thing, enabling humans to create sophisticated artifacts (including video games!) easier and better than ever.&lt;/p&gt;&lt;p&gt;The potential energy of human creativity is vast. We just need to give people tools, and creation will follow. Onwards!&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thanks for Saku P for reading a draft of this.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Follow me on Twitter: &lt;a href=&quot;https://twitter.com/nabeelqu&quot;&gt;https://twitter.com/nabeelqu&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Update: Some excellent discussion in the &lt;a href=&quot;https://news.ycombinator.com/item?id=23593872&quot;&gt;HN thread&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description>
<pubDate>Sun, 21 Jun 2020 18:05:34 +0000</pubDate>
<dc:creator>nqureshi</dc:creator>
<og:title>nabeelqu</og:title>
<og:description>Persona</og:description>
<og:url>http://nabeelqu.co</og:url>
<og:image>https://cortex.persona.co/i/e5c615bb2338c7552032234a966376b7dbd27b1bab14d54dd561c33dddbfa38f/FFVII_Lightning.png</og:image>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nabeelqu.co/education</dc:identifier>
</item>
<item>
<title>Bye</title>
<link>https://bye.fyi/</link>
<guid isPermaLink="true" >https://bye.fyi/</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p&gt;Hey everyone—&lt;/p&gt;
&lt;p&gt;It's 2020 and we need to talk about email.&lt;/p&gt;
&lt;p&gt;Fuck it.&lt;/p&gt;
&lt;p&gt;Bye is the first email service to automatically respond with an insult, and then delete every email sent to you.&lt;/p&gt;
&lt;p&gt;Bye is our erotic letter to email, and we’re sending it to you on the Web, Mac, Windows, Linux, iOS, McDonald’s kiosks and Android.&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;&quot;&gt;&lt;h2&gt;You always pray for email&lt;/h2&gt;
&lt;p&gt;“Free” email like Gmail isn’t free — you pay by giving up your nudes. &lt;em&gt;That’s expensive.&lt;/em&gt; Since we’re totally not in the privacy invasion business, we charge a flat, all inclusive 69¢/month for Bye. &lt;em&gt;That’s reasonable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;button class=&quot;large-button organic-button&quot; data-micromodal-trigger=&quot;modal-1&quot;&gt;Claim your email now&lt;/button&gt; &lt;small&gt;No credit card required (jk)&lt;/small&gt;&lt;/p&gt;
&lt;img src=&quot;https://bye.fyi/divider3.906879e2.svg&quot; alt=&quot;&quot; class=&quot;divider&quot; loading=&quot;lazy&quot;/&gt;&lt;h2&gt;Get less email&lt;/h2&gt;
&lt;p&gt;Get less email by never receiving it in the first place. Nobody has time for it.&lt;/p&gt;
&lt;img src=&quot;https://bye.fyi/divider2.7a0854b5.svg&quot; alt=&quot;&quot; class=&quot;divider&quot; loading=&quot;lazy&quot;/&gt;&lt;h2&gt;Enterprise features&lt;/h2&gt;
&lt;p&gt;Automatically CC a congressperson on every email. Send follow-ups by SMS and Voicemail to touch base.&lt;/p&gt;
&lt;img src=&quot;https://bye.fyi/divider1.e3a5afff.svg&quot; alt=&quot;&quot; class=&quot;divider&quot; loading=&quot;lazy&quot;/&gt;&lt;h2&gt;Fuck apple&lt;/h2&gt;
&lt;p&gt;This website was made in Microsoft Publisher on Windows 95.&lt;/p&gt;
&lt;img src=&quot;https://bye.fyi/divider4.bb635d5c.svg&quot; alt=&quot;&quot; class=&quot;divider&quot; loading=&quot;lazy&quot;/&gt;
&lt;/div&gt;</description>
<pubDate>Sun, 21 Jun 2020 16:20:23 +0000</pubDate>
<dc:creator>aloukissas</dc:creator>
<og:image>https://thinko-artifacts.accelerator.net/projects/bye/meta.png</og:image>
<og:title>BYE</og:title>
<og:description>Email at its worst, new from Thinko.</og:description>
<og:url>https://bye.fyi</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bye.fyi/</dc:identifier>
</item>
<item>
<title>Deno will stop using TypeScript</title>
<link>https://startfunction.com/deno-will-stop-using-typescript/</link>
<guid isPermaLink="true" >https://startfunction.com/deno-will-stop-using-typescript/</guid>
<description>&lt;p&gt;A document surfaced today pointing that Deno will stop using TypeScript in its internal code, citing several problems with the current environment. Issues mentioned involve TypeScript compiling times, structuring and code organization, among others. Moving forward, Deno will use pure JavaScript for its internal code.&lt;/p&gt;
&lt;span id=&quot;more-8227&quot;/&gt;
&lt;h2&gt;Deno problems with TypeScript&lt;/h2&gt;
&lt;p&gt;The unfavorable situations that the Deno team is currently experiencing while using &lt;a aria-label=&quot;TypeScript (opens in a new tab)&quot; href=&quot;https://startfunction.com/tag/typescript&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; class=&quot;rank-math-link&quot;&gt;TypeScript&lt;/a&gt; for its internal code are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;TypeScript compile time when changing files takes several minutes, making continuous compiling an excruciatingly slow process&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;The Typescript structure that they’re using in the source files that create the actual Deno executable and the user-facing APIs is creating runtime performance problems&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;TypeScript isn’t proving itself helpful to organize Deno code. On the contrary, the Deno team is experiencing the opposite effect. One of the issues mentioned is that they ended up with duplicate independent Body classes in two locations &lt;a href=&quot;https://github.com/denoland/deno/issues/4748&quot; class=&quot;rank-math-link&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/denoland/deno/issues/4748&lt;/a&gt;&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;The internal code and runtime TypeScript declarations must be manually kept in sync since the TypeScript Compiler isn’t helpful to generate the d.ts files&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;They’re maintaining two TS compiler hosts: one for the internal Deno code and another other for external user code even though both have a similar goal&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Removing TypeScript in internal Deno code&lt;/h2&gt;
&lt;p&gt;The &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://startfunction.com/tag/deno&quot; target=&quot;_blank&quot;&gt;Deno&lt;/a&gt; team aims to remove all build-time TS type checking and bundling for internal Deno code. They’re looking forward to move all the runtime code into a single &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://startfunction.com/category/javascript&quot; target=&quot;_blank&quot;&gt;JavaScript&lt;/a&gt; file. However, they’ll still use a companion d.ts file to keep the type definitions and documentation.&lt;/p&gt;
&lt;p&gt;It’s worth mentioning that Deno will stop using TypeScript only for the internal Deno code: the Deno user code will still be in TypeScript and thus type checked.&lt;/p&gt;
&lt;p&gt;While TypeScript is sometimes seen as an improved version of JavaScript, this case is showing that in fact, it’s not. It has flaws like any other language. One of the most important ones is its slow compilation time. While small projects might not see a huge spike in compilation time when switching from pure JavaScript to TypeScript, it will be noticeable in large projects like a complex &lt;a aria-label=&quot;React (opens in a new tab)&quot; href=&quot;https://startfunction.com/tag/react&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; class=&quot;rank-math-link&quot;&gt;React&lt;/a&gt; app. Given the large size of its runtime, it’s not surprising that Deno will stop using TypeScript.&lt;/p&gt;
&lt;p&gt;The safety of type checking during development does have its cost at compilation time. It’s not without reason that the TypeScript project has an extensive document on how to address and &lt;a aria-label=&quot;improve compilation time (opens in a new tab)&quot; href=&quot;https://github.com/microsoft/TypeScript/wiki/Performance&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; class=&quot;rank-math-link&quot;&gt;improve compilation time&lt;/a&gt;. One of the most interesting approaches is to use &lt;a aria-label=&quot;Project References (opens in a new tab)&quot; href=&quot;https://www.typescriptlang.org/docs/handbook/project-references.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; class=&quot;rank-math-link&quot;&gt;Project References&lt;/a&gt;, that allows developers to break apart a big TypeScript piece of code into smaller pieces.&lt;/p&gt;
&lt;h2&gt;Read more about why Deno will stop using TypeScript&lt;/h2&gt;
&lt;p&gt;The complete discussion about the decision to drop TypeScript from the internal Deno code and use JavaScript instead can be found in &lt;a aria-label=&quot;this document (opens in a new tab)&quot; class=&quot;rank-math-link rank-math-link&quot; rel=&quot;noreferrer noopener&quot; href=&quot;https://docs.google.com/document/d/1_WvwHl7BXUPmoiSeD8G83JmS8ypsTPqed4Btkqkn_-4/preview?pru=AAABcrrKL5k*nQ4LS569NsRRAce2BVanXw#&quot; target=&quot;_blank&quot;&gt;this document&lt;/a&gt;, where Ryan Dahl and collaborators discuss the problem, its solution, and how it’s going to be implemented.&lt;/p&gt;
&lt;div class=&quot;wpcnt&quot;&gt;
&lt;div class=&quot;wpa&quot;&gt;&lt;span class=&quot;wpa-about&quot;&gt;Advertisements&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-176953424-8227-5ef001ec07fe0&quot; data-src=&quot;https://widgets.wp.com/likes/#blog_id=176953424&amp;amp;post_id=8227&amp;amp;origin=startfunction.com&amp;amp;obj_id=176953424-8227-5ef001ec07fe0&quot; data-name=&quot;like-post-frame-176953424-8227-5ef001ec07fe0&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Sun, 21 Jun 2020 15:24:41 +0000</pubDate>
<dc:creator>diablo1</dc:creator>
<og:type>article</og:type>
<og:title>5 reasons why Deno will stop using TypeScript - StartFunction</og:title>
<og:description>Deno will stop using TypeScript after several issues like slow compilation time.</og:description>
<og:url>https://startfunction.com/deno-will-stop-using-typescript/</og:url>
<og:image>https://i2.wp.com/startfunction.com/wp-content/uploads/2020/06/deno-will-stop-using-typescript.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://startfunction.com/deno-will-stop-using-typescript/</dc:identifier>
</item>
<item>
<title>Show HN: PJDL an open alternative to 1-wire with a range of 2000m</title>
<link>https://github.com/gioblu/PJON/tree/master/src/strategies/SoftwareBitBang</link>
<guid isPermaLink="true" >https://github.com/gioblu/PJON/tree/master/src/strategies/SoftwareBitBang</guid>
<description>&lt;h2&gt;SoftwareBitBang&lt;/h2&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Medium&lt;/th&gt;
&lt;th&gt;Pins used&lt;/th&gt;
&lt;th&gt;Inclusion&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Wire&lt;/td&gt;
&lt;td&gt;1 or 2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;#include &amp;lt;PJONSoftwareBitBang.h&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;SoftwareBitBang&lt;/code&gt; is a software implementation of &lt;a href=&quot;https://github.com/gioblu/PJON/blob/master/src/strategies/SoftwareBitBang/specification/PJDL-specification-v4.1.md&quot;&gt;PJDL (Padded Jittering Data Link)&lt;/a&gt;. It supports simplex and half-duplex asynchronous serial communication for up to 254 devices over a single wire. The maximum length of the bus can reach between 800 and 2000 meters depending on the mode used. It is a valid alternative to 1-Wire because of its flexibility and reliability. Fault tolerance schemes can be easily implemented because communication pins can be configured at runtime. Take a look at the &lt;a href=&quot;https://www.youtube.com/watch?v=GWlhKD5lz5w&quot; rel=&quot;nofollow&quot;&gt;video introduction&lt;/a&gt; for a brief showcase of its features.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
PJDL SINGLE WIRE BUS                           ______
 ______    ______    ______    ______         |      |
|      |  |      |  |      |  |      |        |DEVICE|
|DEVICE|  |DEVICE|  |DEVICE|  |DEVICE|        |______|
|______|  |______|  |______|  |______|            |
___|__________|________|___________|______/\/\/\__| IO PIN
 ___|__    __|___    ___|__    ___|__  |  &lt;span class=&quot;pl-c1&quot;&gt;110&lt;/span&gt;-&lt;span class=&quot;pl-c1&quot;&gt;180&lt;/span&gt; Ω
|      |  |      |  |      |  |      | |  
|DEVICE|  |DEVICE|  |DEVICE|  |DEVICE| |__/\/\/\__  GND
|______|  |______|  |______|  |______|    &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt; kΩ - &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt; MΩ    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is suggested to add 8kΩ-5MΩ pull-down resistor as shown in the graph above to reduce externally induced interference. The longer is the length of the cable and the higher is the amount of induced interference, the lower should be the resistance of the pull-down resistor. Pins can be optionally protected against overload adding a current limiting resistor to each connected pin. The resistor value can be obtained solving the following equation &lt;code&gt;R = (operating voltage / pin max current drain)&lt;/code&gt;, for example to obtain the current limiting resistor value for an Arduino Uno simply substitute its characteristics: &lt;code&gt;R = (5v / 0.030A) = 166.66Ω&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Compatibility&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;MCU&lt;/th&gt;
&lt;th&gt;Clock&lt;/th&gt;
&lt;th&gt;Supported pins&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;24&quot;&gt;&lt;tr&gt;&lt;td&gt;ATtiny84/84A&lt;/td&gt;
&lt;td&gt;16MHz&lt;/td&gt;
&lt;td&gt;0, 1, 2, 3, 4&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ATtiny85 (Digispark development board)&lt;/td&gt;
&lt;td&gt;16MHz&lt;/td&gt;
&lt;td&gt;1, 2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;20&quot;&gt;&lt;td&gt;ATmega88/168/328 (Duemilanove, Uno, Nano, Pro)&lt;/td&gt;
&lt;td&gt;16MHz&lt;/td&gt;
&lt;td&gt;2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, A0, A1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ATmega328PB&lt;/td&gt;
&lt;td&gt;16MHz&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ATmega16u4/32u4 (Leonardo, Micro)&lt;/td&gt;
&lt;td&gt;16MHz&lt;/td&gt;
&lt;td&gt;2, 4, 8, 12&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ATmega2560 (Mega, Mega nano)&lt;/td&gt;
&lt;td&gt;16MHz&lt;/td&gt;
&lt;td&gt;3, 4, 7, 8, 9, 10, 12&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;15&quot;&gt;&lt;td&gt;ATmega1284P&lt;/td&gt;
&lt;td&gt;16MHz&lt;/td&gt;
&lt;td&gt;18, 19, 20, 21, 22, 23, A0, A1, A2, A3, A4, A5, A6, A7&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SAMD (Arduino Zero)&lt;/td&gt;
&lt;td&gt;48MHz&lt;/td&gt;
&lt;td&gt;D0, D1, D3, A0, A1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;STM32F1&lt;/td&gt;
&lt;td&gt;72MHz&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MK20DX256 (Teensy 3.1)&lt;/td&gt;
&lt;td&gt;96MHz&lt;/td&gt;
&lt;td&gt;All pins&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ESP8266 (NodeMCU, AI-THINKER modules)&lt;/td&gt;
&lt;td&gt;80/160MHz&lt;/td&gt;
&lt;td&gt;D1 or GPIO 5&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;ESP32 (Heltech WiFi LoRa)&lt;/td&gt;
&lt;td&gt;160MHz&lt;/td&gt;
&lt;td&gt;12, 25&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SWBB_MODE&lt;/code&gt; can be configured in 4 different modes, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;Speed&lt;/th&gt;
&lt;th&gt;Range&lt;/th&gt;
&lt;th&gt;Supported MCUs&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr readability=&quot;14&quot;&gt;&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1.95kB/s 15625Bd&lt;/td&gt;
&lt;td&gt;2000m&lt;/td&gt;
&lt;td&gt;ATtiny84/84A, ATtiny85, ATmega88/168/328, ATmega328PB, ATmega16u4/32u4, ATmega2560, ATmega1284P, SAMD, STM32F1, MK20DX256, ESP8266, ESP32&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;7&quot;&gt;&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.21kB/s 17696Bd&lt;/td&gt;
&lt;td&gt;1600m&lt;/td&gt;
&lt;td&gt;ATtiny84/84A, ATtiny85, ATmega88/168/328, ATmega328PB, ATmega16u4/32u4, ATmega2560&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2.94kB/s 23529Bd&lt;/td&gt;
&lt;td&gt;1200m&lt;/td&gt;
&lt;td&gt;ATtiny84/84A, ATtiny85, ATmega88/168/328&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;3.40kB/s 27210Bd&lt;/td&gt;
&lt;td&gt;800m&lt;/td&gt;
&lt;td&gt;ATtiny84/84A, ATtiny85, ATmega88/168/328&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;When including and using the &lt;code&gt;SoftwareBitBang&lt;/code&gt; strategy you have the complete access to the microcontroller. This happens because &lt;code&gt;SoftwareBitBang&lt;/code&gt; runs a completely software-defined implementation, transforming a painful walk in a nice flight.&lt;/p&gt;
&lt;p&gt;Communication over a single wire enables quick and creative experimentation. The first suggested test, at the tester's risk, is to let two Arduino boards communicate &lt;a href=&quot;https://www.youtube.com/watch?v=caMit7nzJsM&quot; rel=&quot;nofollow&quot;&gt;through a living body&lt;/a&gt; touching with the left hand the digital pin of the first board and with the right the pin of the other one (should be harmless). It is stunning to see it working perfectly through the human body, although it also works through water and other conductors.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/gioblu/PJON/blob/master/src/strategies/SoftwareBitBang/images/PJDL-2000m-mode4-twistedpair-8.2k-pulldown-60-series.png&quot;&gt;&lt;img src=&quot;https://github.com/gioblu/PJON/raw/master/src/strategies/SoftwareBitBang/images/PJDL-2000m-mode4-twistedpair-8.2k-pulldown-60-series.png&quot; alt=&quot;PJDL communication over 2000m twisted pair&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The picture above shows a &lt;a href=&quot;https://github.com/gioblu/PJON/blob/master/src/strategies/SoftwareBitBang/specification/PJDL-specification-v4.1.md&quot;&gt;PJDL&lt;/a&gt; frame transmitted over a 800m twisted pair using mode &lt;code&gt;4&lt;/code&gt; (test done by &lt;a href=&quot;https://github.com/jdaandersj&quot;&gt;Jack Anderson&lt;/a&gt;). Although bits are substantially deformed the exchange occurs nominally and performance is not affected.&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Before including the library it is possible to configure &lt;code&gt;SoftwareBitBang&lt;/code&gt; using predefined constants:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Constant&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;th&gt;Supported value&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;6&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;SWBB_MODE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Data transmission mode&lt;/td&gt;
&lt;td&gt;1, 2, 3, 4&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;SWBB_RESPONSE_TIMEOUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Maximum response time-out&lt;/td&gt;
&lt;td&gt;Duration in microseconds (1500 by default)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;SWBB_BACK_OFF_DEGREE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Maximum back-off exponential degree&lt;/td&gt;
&lt;td&gt;Numeric value (4 by default)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;&lt;code&gt;SWBB_MAX_ATTEMPTS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Maximum transmission attempts&lt;/td&gt;
&lt;td&gt;Numeric value (20 by default)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;code&gt;SoftwareBitBang&lt;/code&gt; supports the use of input and output pins because separated signals may be required if additional circuitry is used for amplification or noise filtering. It also works if pins are directly connected as a simple point-to-point null-modem or cross-over serial link.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;PJONSoftwareBitBang.h&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;

PJONSoftwareBitBang bus;

&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;setup&lt;/span&gt;() {
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Set the pin 12 as the communication pin&lt;/span&gt;
  bus.&lt;span class=&quot;pl-smi&quot;&gt;strategy&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;set_pin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;12&lt;/span&gt;);
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Set pin 11 as input pin and pin 12 as output pin&lt;/span&gt;
  bus.&lt;span class=&quot;pl-smi&quot;&gt;strategy&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;set_pins&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;12&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the PJON object is defined with its strategy it is possible to set the communication pin accessing to the strategy present in the PJON instance. All the other necessary information is present in the general &lt;a href=&quot;https://github.com/gioblu/PJON/blob/master/documentation&quot;&gt;Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Why not interrupts?&lt;/h3&gt;
&lt;p&gt;In the Arduino environment the use of libraries is really extensive and often the end user is not able to go over collisions. Very often a library is using hardware resources of the microcontroller, colliding with other libraries. This happens because in general Arduino boards have limited hardware resources. Software-defined bit-banging, is a stable and reliable solution that leads to &quot;more predictable&quot; results than interrupt driven procedures coexisting on limited microcontrollers without the developer and the end user knowing about it.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/8b2414194b2fe383c1bbc2c8fc40c710e81b3572/687474703a2f2f33332e6d656469612e74756d626c722e636f6d2f30303635633339343661333431393161323833366334303532323431353863382f74756d626c725f696e6c696e655f6e767262786b586f38333173393570317a5f3530302e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8b2414194b2fe383c1bbc2c8fc40c710e81b3572/687474703a2f2f33332e6d656469612e74756d626c722e636f6d2f30303635633339343661333431393161323833366334303532323431353863382f74756d626c725f696e6c696e655f6e767262786b586f38333173393570317a5f3530302e676966&quot; alt=&quot;PJON - Michael Teeuw application example&quot; data-canonical-src=&quot;http://33.media.tumblr.com/0065c3946a34191a2836c405224158c8/tumblr_inline_nvrbxkXo831s95p1z_500.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PJON application example made by the user &lt;a href=&quot;http://michaelteeuw.nl/post/130558526217/pjon-my-son&quot; rel=&quot;nofollow&quot;&gt;Michael Teeuw&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Known issues&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;A 1-5 MΩ pull down resistor could be necessary to reduce interference, see &lt;a href=&quot;https://github.com/gioblu/PJON/wiki/Mitigate-interference&quot;&gt;Mitigate interference&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;When using more than one instance of &lt;code&gt;SoftwareBitBang&lt;/code&gt; in the same sketch always use pins connected to a different port group to avoid cross-talk.&lt;/li&gt;
&lt;li&gt;During the execution of other tasks or delays a certain amount of packets could be potentially lost because transmitted out of the polling time of the receiver device. Thanks to the PJON packet handler after some retries the packet is received but a certain amount of bandwidth is wasted. If this situation occurs, try to reduce as much as possible the duration of other tasks and or use a longer polling time using &lt;code&gt;receive&lt;/code&gt; and passing the requested amount of microseconds: &lt;code&gt;bus.receive(1000); // Poll for 1 millisecond&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SoftwareBitBang&lt;/code&gt; strategy can have compatibility issues with codebases that are using interrupts, reliability or bandwidth loss can occur because of the interruptions made by third party software.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Safety warning&lt;/h3&gt;
&lt;p&gt;In all cases, when installing or maintaining a PJON network, extreme care must be taken to avoid any danger. When a &lt;a href=&quot;https://github.com/gioblu/PJON/blob/master/src/strategies/SoftwareBitBang&quot;&gt;SoftwareBitBang&lt;/a&gt; bus is installed each pin must be protected with a current limiting resistor as described above. If a common ground or power supply line is used its cable size and length must be carefully selected taking in consideration the overall application's power supply requirements and selected components' maximum rating.&lt;/p&gt;
</description>
<pubDate>Sun, 21 Jun 2020 13:39:33 +0000</pubDate>
<dc:creator>gioscarab</dc:creator>
<og:image>https://repository-images.githubusercontent.com/27359253/a8a96b00-e90e-11e9-94aa-233bdf9f8fc0</og:image>
<og:type>object</og:type>
<og:title>gioblu/PJON</og:title>
<og:url>https://github.com/gioblu/PJON</og:url>
<og:description>With PJON you build networks of devices for free with no need of a cloud service or a centralised platform you don’t fully control. - gioblu/PJON</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/gioblu/PJON/tree/master/src/strategies/SoftwareBitBang</dc:identifier>
</item>
<item>
<title>“You want to know something about how bullshit insane our brains are?” (2018)</title>
<link>https://twitter.com/Foone/status/1014267515696922624</link>
<guid isPermaLink="true" >https://twitter.com/Foone/status/1014267515696922624</guid>
<description>&lt;p&gt;do you see a blind spot, right now? no, you probably don't. Close one eye! there's now no way for the other eye to fill in the gaps. Still, no blind spot... Your visual system is lying, and making up content it thinks is there. You literally cannot see what you think you see.&lt;/p&gt;
</description>
<pubDate>Sun, 21 Jun 2020 11:59:25 +0000</pubDate>
<dc:creator>notRobot</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/Foone/status/1014267515696922624</dc:identifier>
</item>
<item>
<title>Losing the war against surveillance capitalism letting Big Tech frame the debate</title>
<link>https://www.salon.com/2020/06/20/were-losing-the-war-against-surveillance-capitalism-because-we-let-big-tech-frame-the-debate/</link>
<guid isPermaLink="true" >https://www.salon.com/2020/06/20/were-losing-the-war-against-surveillance-capitalism-because-we-let-big-tech-frame-the-debate/</guid>
<description>&lt;p&gt;There is a reason that photography and videography are &lt;a href=&quot;https://www.poynter.org/ethics-trust/2020/should-journalists-show-protesters-faces/&quot;&gt;frowned upon at protests&lt;/a&gt; like the ones currently sweeping the nation: &lt;a href=&quot;https://www.salon.com/2018/11/11/how-surveillance-capitalism-became-the-pre-eminent-business-model-of-silicon-valley/&quot; target=&quot;_blank&quot;&gt;Surveillance capitalism&lt;/a&gt; has made it easy for even masked protesters to be identified. Both authorities and everyday citizens have access to search tools that can &quot;out&quot; someone from even the tiniest clues; even peaceable demonstrators are right to fear being fired or publicly shunned if their presence at a protest is discovered and then widely broadcast. Thus it is no accident that civil rights and privacy are intimately interlinked. Indeed, as law enforcement departments have become more militarized, they have equipped themselves with increasingly &lt;a href=&quot;https://www.salon.com/2016/10/15/the-surveillance-state-goes-local-area-police-departments-may-be-using-stingray-technology-to-spy-on-you-without-a-warrant-and-the-feds-dont-want-you-to-know/&quot;&gt;sophisticated surveillance technology&lt;/a&gt; — from devices that &lt;a href=&quot;https://www.salon.com/2016/10/15/the-surveillance-state-goes-local-area-police-departments-may-be-using-stingray-technology-to-spy-on-you-without-a-warrant-and-the-feds-dont-want-you-to-know/&quot;&gt;intercept cell phone signals&lt;/a&gt; to &lt;a href=&quot;https://www.forbes.com/sites/zakdoffman/2019/09/29/whatsapp-backdoorwill-facebook-be-forced-to-break-message-encryption-as-reported/#15b143c11b38&quot;&gt;backdoors&lt;/a&gt; into social media sites.&lt;/p&gt;&lt;p&gt;Yet the civil rights battle over the right privacy is not waged on the street with protest signs and banners — at least, not generally. Privacy struggles are waged in more subtle ways, often through individual choices we make on our gadgets. We are told to &quot;resist&quot; by abandoning digital services; to &quot;&lt;a href=&quot;https://www.nytimes.com/2019/12/24/opinion/location-privacy.html&quot;&gt;break up with Google Maps&lt;/a&gt;,&quot; so as to prevent some of our personal data from falling into the hands of the corporations who profit off of it.&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_1&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Yet this very neoliberal notion of personal agency fails to acknowledge the role these services play in modern life. Being asked to resist only punishes those of us struggling to preserve our privacy. To imagine a world where privacy is preserved we need to explore what privacy truly means and to name it, for to name something is to own it.&lt;/p&gt;
&lt;p&gt;What does it mean to see privacy as a civil rights struggle? The collapse of our privacy is exposing each of us to palpable risks: the erosion of the right to pray, to study, to congregate, or to participate in our democracy. In a digital world, privacy is the barrier between civil society and racial, political, or religious profiling writ large.&lt;/p&gt;
&lt;p&gt;The rise of &lt;a href=&quot;https://www.salon.com/2018/11/11/how-surveillance-capitalism-became-the-pre-eminent-business-model-of-silicon-valley/&quot;&gt;&lt;u&gt;surveillance capitalism&lt;/u&gt;&lt;/a&gt; — the buying and selling of our identities and our data — may herald the death knell of privacy. Social media and targeted online advertising are designed to allure us; in the process, we are losing our rights to anonymity and accelerating the erosion of our civil rights. Proposed individual &quot;solutions&quot; — such as configuring our &lt;a href=&quot;https://www.nytimes.com/2018/03/19/technology/personaltech/protect-yourself-on-facebook.html&quot;&gt;&lt;u&gt;social media privacy settings&lt;/u&gt;&lt;/a&gt; or using the anonymous &lt;a href=&quot;https://www.torproject.org/&quot;&gt;&lt;u&gt;Tor web browser&lt;/u&gt;&lt;/a&gt; — are at best half-measures. A personal example best illustrates why.&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;p&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Like &lt;a href=&quot;https://www.nytimes.com/2015/07/10/us/office-of-personnel-management-hackers-got-data-of-millions.html&quot;&gt;&lt;u&gt;21.5 million Americans&lt;/u&gt;&lt;/a&gt;, I too had my personal information stolen by Chinese hackers in the 2015 breach of the Office of Personnel Management (OPM). To compensate me for their failure to protect my records (and that of every member of my family and relatives) I was provided with credit monitoring services from Experian, one of the big three credit bureaus. The primary result of this service is that I'm now flooded with offers to sign up for new credit cards carefully selected by Experian based on my credit score. My reward for being an OPM breach victim is to receive targeted spam that uses my personal information to benefit Experian and its commercial partners.&lt;/p&gt;
&lt;p&gt;With the arrival of COVID-19, and the subsequent demands for contact tracing, we are all about to have our own individual privacy breach. In order to be effective, the results of any COVID-19 testing will need to be shared far beyond just you and your doctor. Counties, states, and possibly even national agencies will need access to test results. At scale, truly effective contact tracing will likely require very detailed location information, the kind your phone can trivially provide. In the current situation, your data won't be hacked by a foreign government, but freely given to assist with public safety.&lt;/p&gt;
&lt;p&gt;Like many of us in the middle class, I and most writers on privacy tend to focus on the visible accoutrements of status, i.e., our phones, our online services, and our social media profiles. And with good reason, these are at the intersection of surveillance capitalism and consumers: services that have been instrumented to feed your personal information back into the engine powering those very services.&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_2&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But the stakes are much higher than you may realize, for privacy is truly our civil rights struggle in the 21st century. Privacy violations are a gateway to identity-based targeting, which singles out individuals by race, religion, or gender identity. Yet with over 1 billion, mostly apathetic users, fighting Google (or Facebook or Experian for that matter) may move you to turn your despair into resignation.&lt;/p&gt;
&lt;p&gt;So what does a world where our privacy is preserved look like?&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_3&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Privacy and personal information are not the same&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many headlines call out the &lt;a href=&quot;https://www.theguardian.com/world/2014/aug/03/internet-death-privacy-google-facebook-alex-preston&quot;&gt;&lt;u&gt;demise of&lt;/u&gt;&lt;/a&gt; &lt;a href=&quot;https://www.theguardian.com/world/2014/aug/03/internet-death-privacy-google-facebook-alex-preston&quot;&gt;&lt;em&gt;&lt;u&gt;privacy&lt;/u&gt;&lt;/em&gt;&lt;/a&gt;, but what they really mean is that some of your &lt;em&gt;personal information&lt;/em&gt; is being sold, or stolen, or simply misused. The two concepts are not quite the same. It is reasonable to consider the loss of personal information under the general heading of privacy, but separating the two concepts opens the door to a more effective conversation about how to protect them both.&lt;/p&gt;
&lt;p&gt;When we read about Facebook or Google (or our own government) wanting to listen in on your phone calls, read your emails, or review your Facebook feed, we're talking about privacy, pure and simple. Privacy in this case means &lt;em&gt;freedom to engage in conversation or thought without unwanted or unknown surveillance.&lt;/em&gt; This is the notion of privacy that most of us think about when using the word &quot;private.&quot; Our outrage is palpable when this notion of privacy is egregiously violated. Even Amazon was forced to respond to public outrage when it was revealed that Amazon employees could listen to your Alexa commands. (Amazon recently announced that they'd enable &quot;options&quot; that &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-08-02/amazon-gives-option-to-disable-human-review-of-alexa-recordings&quot;&gt;&lt;u&gt;permit you to block sub-contractors&lt;/u&gt;&lt;/a&gt; of Amazon to eavesdrop on your requests to Amazon Alexa.)&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_4&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Protecting one's personal information takes us into a different realm with more everyday practical implications. When I give Google my phone number in exchange for a Gmail or Google Voice account, I'm exchanging my data for a service. And I suspect most of us are fine with this type of value-based trade-off. Google needs to know where to route my Google Voice phone calls or how to text me an alert related to my account. It's Google's subsequent reuse of this information where things start to go awry.&lt;/p&gt;
&lt;p&gt;Whether it's Google, Facebook, or the gym down the street, companies reuse, release, and resell this personal information. They allow third-parties to use this information to figure out what ads to show you in your account. Most people who spend time online are familiar with this experience, which does not always feel intrusive. Just the other day I was researching the dog food we feed our dogs and by that evening Google had displayed several ads for dog food brands in my Gmail inbox.&lt;/p&gt;
&lt;p&gt;Dog food is only the beginning. If you do a quick Google search of anyone's name, you'll find dozens of offers to sell you a background check and other information about the subject of your search, (as a side note, many of these services are owned by the same company, they merely rebrand themselves to fool you). In the digital world your personal data is collected, repackaged, then correlated with other information to enrich the commercial understanding of you as a consumer. Even a cursory examination of the websites you visit will quickly reveal your political and sexual orientation, your racial identity, your ethnic heritage, and socio-economic status. Add to that your buying history, your Facebook friends, the people you follow on Twitter or Instagram, and a detailed profile of you emerges that probably transcends your own understanding of yourself.&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_5&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Even if you feel comfortable with targeted advertising, the use of your personal information as fuel for the digital economy has a sinister aftermath few realize.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Privacy equals civil rights&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oppression originates whenever one group marks another group as &quot;other,&quot; then uses that &quot;otherness&quot; to isolate, discriminate, and disempower. Often the markers for discriminatory behavior are obvious: darker skin, for example, or observation of gender.&lt;/p&gt;
&lt;p&gt;But what if every marker of your individuality were known and sold, accessible to advertisers without your knowledge? The potential for manipulation or oppression is palpable, as one could easily use personal information for these suspect marking purposes. In 2016, the Russian Internet Research agency used Facebook to &lt;a href=&quot;https://www.salon.com/2018/05/18/steve-bannon-tried-to-suppress-black-votes-cambridge-analytica-whistleblower-says/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;target ads at Black voters&lt;/u&gt;&lt;/a&gt;, ads designed to depress their voter turnout. Facebook had already siphoned up all of their vital personal details; all that the Russian Internet Research agency had to do was click a few buttons picking out the demographic they wished to target.&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_6&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.npr.org/sections/parallels/2016/10/14/497911812/as-iraqi-forces-prepare-to-attack-mosul-a-civilian-exodus-could-follow&quot;&gt;&lt;u&gt;2016 NPR article&lt;/u&gt;&lt;/a&gt; mentions that the Iraqi army used Facebook data to identify students attending an ISIS run school. In the case of Cambridge Analytica, &lt;a href=&quot;https://www.salon.com/2018/03/19/cambridge-analytica-faces-increased-scrutiny-over-harvesting-facebook-users-data/&quot; target=&quot;_blank&quot;&gt;&lt;u&gt;Facebook data that was inappropriately acquired&lt;/u&gt;&lt;/a&gt; was used to create unusually manipulative advertising for valuable voter demographics. And let's not forget this horrific tidbit, that Facebook &quot;played a determining role&quot; in the mass slaughter and rape of Rohingya in Myanmar, &lt;a href=&quot;https://time.com/5197039/un-facebook-myanmar-rohingya-violence/&quot;&gt;&lt;u&gt;according to the U.N.&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These examples are points along a spectrum of uses of your personal information. Finding terrorists using social media should be a good thing. Targeting groups of voters by their age and income levels makes sense if you're trying to effectively use your limited campaign advertising resources.&lt;/p&gt;
&lt;p&gt;Yet now that technology-mediated services have an outsize ability to shape culture at large, the malicious use of this same personal information threatens to undermine every advance made by modern liberal society. This is why I call privacy the last line of defense in the battle for civil liberties.&lt;/p&gt;
&lt;p&gt;Imagine an Uber-like service that used publicly traded information associating your phone number to your race, and used that pairing to &lt;a href=&quot;https://www.nytimes.com/2016/11/01/technology/uber-lyft-racial-discrimination.html&quot;&gt;&lt;u&gt;provide slightly poorer service&lt;/u&gt;&lt;/a&gt; to African Americans. Or a real estate site that used such data to surreptitiously tailor the house listings presented to you based on your assumed religious or ethnic background. What if ICE quietly bought ads on sites offering immigration assistance to migrants, only to raid and arrest everyone who &lt;a href=&quot;https://www.nytimes.com/2019/01/31/us/farmington-university-arrests-ice.html.&quot;&gt;&lt;u&gt;clicked&lt;/u&gt;&lt;/a&gt; &quot;I'd like to hire an attorney.&quot;&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_7&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Race, ethnicity, and religion aren't the only types of personal information that can be maliciously exploited. With the utter abandonment of principled politics and the open use of the federal instruments of administration for political aims, profiling has taken on an even more ominous direction.&lt;/p&gt;
&lt;p&gt;There are signs that regulators are catching on. Indeed, after the &lt;a href=&quot;https://www.nytimes.com/2019/07/12/technology/facebook-ftc-fine.html&quot;&gt;&lt;u&gt;announcement of a $5 billion dollar fine&lt;/u&gt;&lt;/a&gt; levied against Facebook, you could be forgiven for thinking &quot;finally, someone is doing something to protect our privacy.&quot;&lt;/p&gt;
&lt;p&gt;You'd be wrong. All of the regulations imposed on the major data brokers suffer from one fatal flaw: they reflect a belief that a statutory, regulatory response to this problem can succeed. One might say &quot;If Facebook violated their terms of use, then we must pass a regulation forbidding them from doing that&quot; or &quot;if Amazon's employees have access to Alexa commands, they should stop that practice.&quot; But none of these proposals fundamentally address when it is permissible to collect personal information and what can be done with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preserving our privacy&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;outer-ad-unit-wrapper&quot;&gt;
&lt;div class=&quot;proper-ad-unit&quot; id=&quot;proper-ad-content_8&quot;&gt;&lt;span class=&quot;proper-caption&quot;&gt;Advertisement:&lt;/span&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If regulation is not enough, how are we to protect our privacy? Thus far, regulations do not clearly address when it's permissible to collect personal information and what can be done with it, and the fines are rarely punitive enough to change behavior. If we think broadly of privacy as a resource to be valued, perhaps we can find some insight on how to protect it.&lt;/p&gt;
&lt;p&gt;Imagine you come to work one day, and find someone has put a nude picture of you on the wall. You quickly have it removed but the embarrassment and anger lingers. Eventually, even that fades — maybe you even move to a new job where no one knows you as &quot;the naked person.&quot; Embarrassing, but you recover. For those who have had their personal information stolen, there is no &quot;but you recover.&quot; It is impossible to fully remove published information from the digital web. Even if you could miraculously convince every legitimate web service to remove your data, you can never convince those who illicitly deal in personal data to erase it. This immutability of stolen personal data is part of the horror of modern crimes such as revenge porn.&lt;/p&gt;
&lt;p&gt;This is again why an incremental, regulatory based approach to protecting personal information will always fail: because a wound to our digital privacy never heals. We can't wait for a loss, then regulate the circumstances that led to it. By then it is too late. Privacy must be preserved, not conserved; that is why I advocate for a &quot;preservationist&quot; approach.&lt;/p&gt;
&lt;p&gt;The preservationist solution is simple and easy to visualize. Imagine a world where we didn't have to figure out how to reign in Facebook. Where creating a set of regulations wasn't something we had to do, but rather Facebook (or Google, or the furniture store down the street) had to figure out how to operate with the principle that &lt;em&gt;personal information may not be bought or sold.&lt;/em&gt; That is, we preserve our privacy by simply forbidding our personal information from being used as a commodity. Would this eliminate the need for statutes protecting our personal information? No, we'd still want to regulate how and when a service provider could ask for and how they must secure your personal data. But we'd have a principled floor — a bright line not to be crossed — eliminating some of the worst abuses.&lt;/p&gt;
&lt;p&gt;Would this mean the end of Facebook or Google? Of course not. These companies have legions of bright energetic people working for them and they'd quickly adapt. Capitalism, warts and all, is an incredibly effective means of focusing humans on specific problems. Nor does this mean that these companies wouldn't be able to provide services to you. Indeed, with proper assurances on data handling there's nothing to prevent you providing personal information to a company in order for them to provide a service. Google needs my cell phone number so they can route those Google Voice calls to me. But they'd not be permitted to re-use it or sell it.&lt;/p&gt;
&lt;p&gt;With the potential arrival of a new administration in Washington, and new faces in Congress, now is the time for optimism and activism. The potential nightmares of contact tracing, social distance monitoring, and mass testing only increase the urgency of addressing these issues. As citizens we must require candidates to elevate the status of privacy as an issue that differentiates them from the status quo. Privacy is the spine of the body politic. Preventing the sale of our personal information is the only effective tool left to preserve our civil rights as they are assailed by both commercial and governmental bodies. People are not a commodity, and we need to legislate that it is wrong to imbue humans with attributes we reserve for property. It is deeply saddening that we need to call for laws to say: &lt;em&gt;I am not for sale.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 21 Jun 2020 11:05:27 +0000</pubDate>
<dc:creator>jrepinc</dc:creator>
<og:title>We’re losing the war against surveillance capitalism because we let Big Tech frame the debate</og:title>
<og:description>It’s too late to &quot;conserve&quot; our digital privacy — but to preserve what's left, we must stop defining people as commodities</og:description>
<og:image>https://media.salon.com/2020/06/internet-nodes-modems-world--0619201.jpg</og:image>
<og:url>https://www.salon.com/2020/06/20/were-losing-the-war-against-surveillance-capitalism-because-we-let-big-tech-frame-the-debate/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.salon.com/2020/06/20/were-losing-the-war-against-surveillance-capitalism-because-we-let-big-tech-frame-the-debate/</dc:identifier>
</item>
<item>
<title>Wireless Is a Trap</title>
<link>https://www.lesswrong.com/posts/8hxvfZiqH24oqyr6y/wireless-is-a-trap</link>
<guid isPermaLink="true" >https://www.lesswrong.com/posts/8hxvfZiqH24oqyr6y/wireless-is-a-trap</guid>
<description>&lt;p&gt;I used to be an anti-wire crusader. I hated the clutter of cables, and my tendency to unconsciously chew on them if they got anywhere near my face. But running into bug after tricky wireless bug—mostly while trying to make my video calls work better—I’ve apostasized. The more I’ve learned about wifi, Bluetooth and related protocols, the more I’m convinced that they’re often worse, on net, than wires.&lt;/p&gt;
&lt;p&gt;For instance: most people, when their video call stutters, blame their Internet service provider. That’s understandable, since most ISPs are overpriced oligopolists with barely-usable software and horrible customer service. However, every time I can remember helping someone track down the source of their connection problems, the culprit has turned out to be their wifi. And often, the easiest fix has been to run a cable.&lt;/p&gt;
&lt;p&gt;Wifi (and bluetooth, etc.) sucker you in by making it seem like they “just work.” But if you investigate, you’ll often find that the wireless link is operating in a degraded state that performs much worse than a wired equivalent. Since this degradation is silent, it’s often not obvious that the problem is the wireless—instead, you’ll probably conclude that it’s your device/software/self.&lt;/p&gt;
&lt;p&gt;Over and over again, I’ve seen people fix some wireless-related problem and go &lt;a href=&quot;https://www.jefftk.com/p/ethernet-is-worth-it-for-video-calls&quot; target=&quot;_blank&quot;&gt;“wow, I had no idea how much better this could be!&quot;&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;https://www.benkuhn.net/wireless/desk_hu18de0b9e12a1a70caedb5f95b671d2c6_5832704_600x400_resize_q75_box.jpg&quot; srcset=&quot;https://www.benkuhn.net/wireless/desk_hu18de0b9e12a1a70caedb5f95b671d2c6_5832704_600x400_resize_q75_box.jpg 2x, https://www.benkuhn.net/wireless/desk_hu18de0b9e12a1a70caedb5f95b671d2c6_5832704_300x200_resize_q75_box.jpg&quot;/&gt; Fig. 1a: managed cables on my desk. &lt;img src=&quot;https://www.benkuhn.net/wireless/under_hu63e9800c185aac6c3ebf266a25d00a9b_5406720_600x400_resize_q75_box.jpg&quot; srcset=&quot;https://www.benkuhn.net/wireless/under_hu63e9800c185aac6c3ebf266a25d00a9b_5406720_600x400_resize_q75_box.jpg 2x, https://www.benkuhn.net/wireless/under_hu63e9800c185aac6c3ebf266a25d00a9b_5406720_300x200_resize_q75_box.jpg&quot;/&gt; Fig. 1b: less-managed cables underneath.
&lt;p&gt;Recently, I finally ragequit and replaced all my desk’s wireless devices with wired ones. While I had to invest a bit in figuring out cable management (and break my habit of chewing on headphone cables), I was able to achieve nearly the same level of tidiness, with &lt;em&gt;much&lt;/em&gt; better reliability, quality and speed. I no longer have to worry about my equipment failing to pair, running out of battery, or spontaneously giving me garbled robot voice during a livestreamed talk. It’s dramatically reduced my level of device-related agony.&lt;/p&gt;
&lt;p&gt;To illustrate the degree of agony I’m talking about, below I’ll cover some of the subtle, hard-to-notice but severe problems I’ve run into with wireless protocols. If you’re convinced, try out some wires—you, too, can figure out whether you’ve been a victim of the wireless trap.&lt;/p&gt;
&lt;h2 id=&quot;Wifi&quot;&gt;Wifi&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Interference.&lt;/strong&gt; If multiple wireless networks are operating on the same “channel” (radio frequency band), their transmissions can interfere with each other. When that happens your device needs to re-send the same information, which makes your wifi slow.&lt;/p&gt;
&lt;p&gt;You might think this could be solved by having routers automatically figure out the least interference-prone channel to use, but many of them seem to be quite bad at this. (Also, the old 2.4GHz wifi protocol was only allowed to use three non-overlapping channels.)&lt;/p&gt;
&lt;p&gt;That means in dense areas (e.g. apartment buildings), routers will often pick a bad channel and end up interfering with each other. There’s no way for your router or device to notify you if it’s experiencing interference, so you’ll only learn about it if you know how fast your router “should” be and notice that it’s slower.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dead zones.&lt;/strong&gt; If you’re too far from your router, your computer may not be able to reliably receive the signal that the router is sending, or vice-versa. How far is “too far” can also be affected, sometimes in weird ways, by whatever walls or ceilings are in the way. Unless you know a lot about how radio waves interact with building materials, it’s hard to predict where your dead zones are.&lt;/p&gt;
&lt;p&gt;The worst part is that many dead zones aren’t fully dead: your computer and the router will try to retransmit each data packet multiple times before giving up, and often it will eventually go through. If that’s what mostly happens, instead of a dead zone you’ll end up with a “slow zone” where your internet works, but is subtly crappy.&lt;/p&gt;
&lt;p&gt;Of course, unless you’re keeping a close eye on your network performance statistics and how they relate to your spatial location, you’d never notice a slow zone. If you noticed anything, it would be that sometimes your internet is randomly worse than other times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Polling.&lt;/strong&gt; Any program on your computer can ask your wireless card to enumerate the nearby networks. This causes it to go into “polling mode,” where it spends less time transmitting data and more time listening for routers advertising their network info (it can’t transmit and receive at the same time). Thus, it will cause a sudden burst of network delays that can e.g. cause your video call to stutter or freeze for a few seconds.&lt;/p&gt;
&lt;p&gt;Most programmers don’t realize that wireless polling interferes with network performance, so they ask the OS to poll with wild abandon. I’ve been burned by this many times.&lt;/p&gt;
&lt;p&gt;The most egregious instance was when I noticed that my video calls sometimes stuttered with an oddly regular frequency. Here’s the tortuous process by which I tracked down the culprit:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I &lt;a href=&quot;https://en.wikipedia.org/wiki/Ping_%28networking_utility%29&quot; target=&quot;_blank&quot;&gt;pinged&lt;/a&gt; my router every second for about 10 minutes, then plotted the output in Excel and confirmed that the slow pings were exactly 30 seconds apart. That made me guess it was probably a software problem.&lt;/li&gt;
&lt;/ul&gt;&lt;ul readability=&quot;1.2944444444444&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;I asked for help debugging it on Facebook and someone recommended &lt;a href=&quot;https://twitter.com/benskuhn/status/952245967931215872&quot; target=&quot;_blank&quot;&gt;enabling macOS wireless debug logging&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;I enabled the debug logging and noticed that several apps, when I had them open, would requesting network scans, at times correlated to the increased ping latencies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Qt included a component which would poll for networks every 30 seconds whenever a “network access manager” was instantiated, causing pretty much &lt;em&gt;any Qt app&lt;/em&gt; using the network to degrade your wifi for ~5 out of every 30 seconds.&lt;/p&gt;
&lt;p&gt;There were already multiple bug reports for this issue, &lt;a href=&quot;https://bugreports.qt.io/browse/QTBUG-46015?focusedCommentId=290240&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-290240&quot; target=&quot;_blank&quot;&gt;one of which&lt;/a&gt; was declared “closed” by an engineer because they allowed users to use an &lt;a href=&quot;https://en.wikipedia.org/wiki/Environment_variable&quot; target=&quot;_blank&quot;&gt;environment variable&lt;/a&gt; to disable the polling.&lt;/p&gt;
&lt;p&gt;Of course, this is an unbelievably useless “solution” because most users won’t realize that their wifi is degraded; those who do won’t realize that it’s Qt’s fault; and those who realize will still have a hard time Googling for the appropriate fix (let alone implementing it, unless they can code).&lt;/p&gt;
&lt;p&gt;This behavior is so user-unfriendly, and the “fix” so laughable, that it seems likely that the Qt developers somehow failed to realize the severity of the problem—I’d guess it ruined video calls for on the order of a million people, since, for instance, it affected qBittorrent which has been downloaded &lt;a href=&quot;https://en.wikipedia.org/wiki/QBittorrent&quot; target=&quot;_blank&quot;&gt;75m times&lt;/a&gt;. Most of those million people were probably not technical enough to figure out how to “set the &lt;code&gt;QT_BEARER_POLL_TIMEOUT&lt;/code&gt; environment variable to &lt;code&gt;-1&lt;/code&gt;.”&lt;/p&gt;
&lt;p&gt;(Fortunately, it does look like in 2017—three years after the original bug report—they finally realized they should just &lt;em&gt;stop polling&lt;/em&gt; and &lt;a href=&quot;https://codereview.qt-project.org/c/qt/qtbase/+/214029&quot; target=&quot;_blank&quot;&gt;fixed the bug the right way&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Qt was the worst offender, but it’s far from the only one. Even macOS had a bug for a while where the same thing would happen when you opened Spotlight (which I do frequently during video calls, if someone asked me to look at a particular file, or if I want to &lt;del&gt;zone out and read the internet&lt;/del&gt; multitask). I had to fix it by disabling individual Spotlight result types until I found out which one was causing the problem. So it seems even Apple’s own developers don’t realize that wifi polling is a hazard.&lt;/p&gt;
&lt;h2 id=&quot;Bluetooth_audio&quot;&gt;Bluetooth audio&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;High latency.&lt;/strong&gt; Most Bluetooth headsets introduce &lt;a href=&quot;https://www.rtings.com/headphones/tests/connectivity/bluetooth#comparison_4115&quot; target=&quot;_blank&quot;&gt;around 150-300ms of latency&lt;/a&gt; (the time between my computer receiving the audio from the Internet, and the sound coming out of the headphones). That means that if I’m chatting with a friend in New York, the audio data will take about 50ms to get from them to my computer, and, say, 200ms—&lt;em&gt;4x as long&lt;/em&gt;—to get from my computer to my ears. Since high latency ruins the natural flow of conversations, I’d like to eliminate as much of it as I can.&lt;/p&gt;
&lt;p&gt;It’s possible to find lower-latency Bluetooth headsets if they support the right “codec,” like “AptX Low Latency.” Of course, in addition to supporting the codec in theory, they have to agree with your computer to use it, which can sometimes fail. (The option to inspect which codec is being used is, of course, buried in various hidden menus and settings depending on your OS.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Low quality.&lt;/strong&gt; Related to the codec issue, many bluetooth devices will play high-quality audio when the microphone is turned off, but degrade to much lower-quality audio when it’s turned on. You can test this for yourself if you have a bluetooth headset: play music on it, then open your microphone settings to the page where it shows the mic input volume. You’ll probably hear the audio cut out for a second, then return at lower quality. (This happens even with devices you might expect to be high-end, like my Airpods Pro + 2018 Macbook Air.)&lt;/p&gt;
&lt;h2 id=&quot;Bluetooth_general&quot;&gt;Bluetooth general&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dongles.&lt;/strong&gt; Even though all computers now have built-in Bluetooth, many Bluetooth accessories today still ship with proprietary &lt;a href=&quot;https://en.wikipedia.org/wiki/Dongle&quot; target=&quot;_blank&quot;&gt;dongles&lt;/a&gt;. I assume this is because the manufacturer was worried about inconsistencies or incompatibilities between their own Bluetooth implementation and your computer’s built-in Bluetooth hardware/drivers.&lt;/p&gt;
&lt;p&gt;And that mistrust seems correct—for instance, on my Mac’s built-in bluetooth, my Logitech MX Master displayed noticeable jank (stopping, then jumping, instead of moving smoothly). I’ve seen this happen on three different Macs, so it seems likely to be a software problem. When I switched to Logitech’s specific dongle, though, it stopped.&lt;/p&gt;
&lt;p&gt;Similarly, when connected to Mac bluetooth, my Jabra Evolve 75 headset would frequently have the mic or sound drop. It (mostly) worked fine on its own dongle. I’m not sure whether to blame Jabra/Logitech or Apple (or the Bluetooth standards body) for these problems.&lt;/p&gt;
&lt;p&gt;Either way, this explosion of dongles is silly and inconvenient. At one point I had to buy a USB hub just for my four dongles (keyboard / mouse / headphones / microphone). The original intention of Bluetooth was to unify different wireless devices in a single wireless radio and protocol, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bluetooth#Name_and_logo&quot; target=&quot;_blank&quot;&gt;much like Harald Bluetooth unified Denmark&lt;/a&gt;, but it seems to have mostly failed at this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reliability.&lt;/strong&gt; Even with proprietary dongles, Bluetooth devices are much less reliable than wired. For instance, I wrote above that my Logitech MX Master worked fine once I switched to the proprietary dongle, but that’s not quite true: it worked fine for a while, then one day it started janking again for no discernible reason. (That was the day I finally apostasized and threw out my desk’s Bluetooth gear.)&lt;/p&gt;
&lt;p&gt;I encounter other Bluetooth bugs that require me to un-pair and re-pair a few times a week. For instance, my AirPods sometimes “desynchronize” so that one is playing back audio a few milliseconds ahead of the other, causing a strange and really unpleasant echo effect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interference.&lt;/strong&gt; One possible reason for poor reliability is that Bluetooth and 2.4GHz wifi interfere with each other. Much like wifi interference, your devices will never warn you if they’re experiencing interference; you’ll notice only because they suddenly become kind of crappy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Charging.&lt;/strong&gt; Not the fault of Bluetooth per se, but a downside of using too many wireless devices is that it’s really annoying to remember to keep them all charged. Mine tended to die at the least opportune times, e.g. during video calls.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Most of these problems shared a few things in common:&lt;/p&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Things didn’t break completely, they just degraded. That’s probably the right call, but it meant that I didn’t immediately notice there was a problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Compounding this, I had no idea how well the device “should” work, so I took a long time to notice that it was in a degraded state.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Even once I was aware of the problem, it was hard or impossible to understand the root cause and fix it because I didn’t know the right diagnostics (or they didn’t exist).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I want my tools to be &lt;em&gt;predictable&lt;/em&gt;—to have consistent performance and fail in ways that I understand. Wireless protocols are inherently more complex (because many devices share the same airspace) and have more different ways to fail, so they’re much less predictable than wires. For me, the convenience often isn’t worth that cost.&lt;/p&gt;
&lt;p&gt;I still use wireless gear when it’s clearly worth it—for instance, I use wifi for my laptop since it moves around a lot, and I use a wireless charger for my phone since I don’t really care how fast it charges. But for serious work, I’ll spend the time to fiddle around with cable routing and wire everything.&lt;/p&gt;
&lt;p&gt;This makes me wonder what the world would look like if we took 10% of the effort we currently spend on removing wires from everything, and put it into ingenious cable routing solutions instead. I’d bet that a lot of wireless-dependent activities like video calls would be way more pleasant.&lt;/p&gt;
</description>
<pubDate>Sun, 21 Jun 2020 04:38:39 +0000</pubDate>
<dc:creator>finolex1</dc:creator>
<og:image>https://res.cloudinary.com/lesswrong-2-0/image/upload/v1503704344/sequencesgrid/h6vrwdypijqgsop7xwa0.jpg</og:image>
<og:title>Wireless is a trap - LessWrong 2.0</og:title>
<og:type>article</og:type>
<og:url>https://www.lesswrong.com/posts/8hxvfZiqH24oqyr6y/wireless-is-a-trap</og:url>
<og:description>I used to be an anti-wire crusader. I hated the clutter of cables, and my tendency to unconsciously chew on them if they got anywhere near my face. But running into bug after tricky wireless bug—mostly while trying to make my video calls work better—I’ve apostasized. The more I’ve learned about wifi, Bluetooth and related protocols, the more I’m convinced that they’re often worse, on net, than wires. For instance: most people, when their video call stutters, blame their Internet service provider. That’s understandable, since most ISPs are overpriced oligopolists with barely-usable software and horrible customer service. However, every time I can remember helping someone track down the source of their connection problems, the culprit has turned out to be their wifi. And often, the easiest fix has been to run a cable. Wifi (and bluetooth, etc.) sucker you in by making it seem like they “just work.” But if you investigate, you’ll often find that the wireless link is operating in a degraded state that performs much worse than a wired equivalent. Since this degradation is silent, it’s often not obvious that the problem is the wireless—instead, you’ll probably conclude that it’s your device/software/self. Over and over again, I’ve seen people fix some wireless-related problem and go “wow, I had no idea how much better this could be!&quot; Fig. 1a: managed cables on my desk.Fig. 1b: less-managed cables underneath. Recently, I finally ragequit and replaced all my desk’s wireless devices with wired ones. While I had to invest a bit in figuring out cable management (and break my habit of chewing on headphone cables), I was able to achieve nearly the same level of tidiness, with much better reliability, quality and speed. I no longer have to worry about my equipment failing to pair, running out of battery, or spontaneously giving me garbled robot voice during a livestreamed talk. It’s dramatically reduced my level of device-related agony. To illustrate the degree of agony I’m</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.lesswrong.com/posts/8hxvfZiqH24oqyr6y/wireless-is-a-trap</dc:identifier>
</item>
<item>
<title>Teach Yourself Computer Science</title>
<link>https://teachyourselfcs.com</link>
<guid isPermaLink="true" >https://teachyourselfcs.com</guid>
<description>&lt;h2 class=&quot;h2&quot;&gt;Frequently asked questions&lt;/h2&gt;
&lt;h4 class=&quot;h4&quot;&gt;Who is the target audience for this guide?&lt;/h4&gt;
&lt;p&gt;We have in mind that you are a self-taught software engineer, bootcamp grad or precocious high school student, or a college student looking to supplement your formal education with some self-study. The question of when to embark upon this journey is an entirely personal one, but most people tend to benefit from having some professional experience before diving too deep into CS theory. For instance, we notice that students &lt;em&gt;love&lt;/em&gt; learning about database systems if they have already worked with databases professionally, or about computer networking if they’ve worked on a web project or two.&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;What about AI/graphics/pet-topic-X?&lt;/h4&gt;
&lt;p&gt;We’ve tried to limit our list to computer science topics that we feel &lt;em&gt;every practicing software engineer&lt;/em&gt; should know, irrespective of specialty or industry, but with a focus on systems. In our experience, these will be the highest ROI topics for the overwhelming majority of self-taught engineers and bootcamp grads, and provide a solid foundation for further study. Subsequently, you’ll be in a much better position to pick up textbooks or papers and learn the core concepts without much guidance. Here are our suggested starting points for a couple of common “electives”:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;For artificial intelligence: do &lt;a href=&quot;http://ai.berkeley.edu/&quot;&gt;Berkeley’s intro to AI course&lt;/a&gt; by watching the videos and completing the excellent Pacman projects. As a textbook, use Russell and Norvig’s &lt;em&gt;Artificial Intelligence: A Modern Approach&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;For machine learning: do Andrew Ng’s Coursera course. Be patient, and make sure you understand the fundamentals before racing off to shiny new topics like deep learning.&lt;/li&gt;
&lt;li&gt;For computer graphics: work through &lt;a href=&quot;http://inst.eecs.berkeley.edu/~cs184/fa12/onlinelectures.html&quot;&gt;Berkeley’s CS 184&lt;/a&gt; material, and use &lt;a href=&quot;https://www.amazon.com/Computer-Graphics-Principles-Practice-3rd/dp/0321399528&quot;&gt;Computer Graphics: Principles and Practice&lt;/a&gt; as a textbook.&lt;/li&gt;
&lt;/ul&gt;&lt;h4 class=&quot;h4&quot;&gt;How strict is the suggested sequencing?&lt;/h4&gt;
&lt;p&gt;Realistically, all of these subjects have a significant amount of overlap, and refer to one another cyclically. Take for instance the relationship between discrete math and algorithms: learning math first would help you analyze and understand your algorithms in greater depth, but learning algorithms first would provide greater motivation and context for discrete math. Ideally, you’d revisit both of these topics many times throughout your career.&lt;/p&gt;
&lt;p&gt;As such, our suggested sequencing is mostly there to help you &lt;em&gt;just get started&lt;/em&gt;… if you have a compelling reason to prefer a different sequence, then go for it. The most significant “pre-requisites” in our opinion are: computer architecture before operating systems or databases, and networking and operating systems before distributed systems.&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;How does this compare to Open Source Society or freeCodeCamp curricula?&lt;/h4&gt;
&lt;p&gt;When this guide was first written in 2016, the &lt;a href=&quot;https://github.com/open-source-society/computer-science&quot;&gt;OSS guide&lt;/a&gt; had too many subjects, suggested inferior resources for many of them, and provided no rationale or guidance around why or what aspects of particular courses are valuable. We strove to limit our list of courses to those which you &lt;em&gt;really should know&lt;/em&gt; as a software engineer, irrespective of your specialty, and to help you understand why each course is included. In the subsequent years, the OSS guide has improved, but we still think that this one provides a clearer, more cohesive path.&lt;/p&gt;
&lt;p&gt;freeCodeCamp is focused mostly on programming, not computer science. For why you might want to learn computer science, see &lt;a href=&quot;https://teachyourselfcs.com/#why&quot;&gt;above&lt;/a&gt;. If you are new to programming, we suggest prioritizing that, and returning to this guide in a year or two.&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;What about language X?&lt;/h4&gt;
&lt;p&gt;Learning a particular programming language is on a totally different plane to learning about an area of computer science — learning a language is much &lt;em&gt;easier&lt;/em&gt; and much &lt;em&gt;less valuable&lt;/em&gt;. If you already know a couple of languages, we strongly suggest simply following our guide and fitting language acquisition in the gaps, or leaving it for afterwards. If you’ve learned programming well (such as through &lt;em&gt;Structure and Interpretation of Computer Programs&lt;/em&gt;), and especially if you have learned compilers, it should take you little more than a weekend to learn the essentials of a new language, after which you can learn about the libraries/tooling/ecosystem on the job.&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;What about trendy technology X?&lt;/h4&gt;
&lt;p&gt;No single technology is important enough that learning to use it should be a core part of your education. On the other hand, it’s great that you’re excited to learn about that thing. The trick is to work backwards from the particular technology to the underlying field or concept, and learn that in depth before seeing how your trendy technology fits into the bigger picture.&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;Why are you still recommending SICP?&lt;/h4&gt;
&lt;p&gt;Look, just try it. Some people find SICP mind blowing, a characteristic shared by very few other books. If you don't like it, you can always try something else and perhaps return to SICP later.&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;Why are you still recommending the Dragon book?&lt;/h4&gt;
&lt;p&gt;The Dragon book is still the most complete single resource for compilers. It gets a bad rap, typically for overemphasizing certain topics that are less fashionable to cover in detail these days, such as parsing. The thing is, the book was never intended to be studied cover to cover, only to provide enough material for an instructor to put together a course. Similarly, a self-learner can choose their own adventure through the book, or better yet follow the suggestions that lecturers of public courses have made in their course outlines.&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;How can I get textbooks cheaply?&lt;/h4&gt;
&lt;p&gt;Many of the textbooks we suggest are freely available online, thanks to the generosity of their authors. For those that aren’t, we suggest buying used copies of older editions. As a general rule, if there has been more than a couple of editions of a textbook, it’s quite likely that an older edition is perfectly adequate. It’s certainly unlikely that the newest version is 10x better than an older one, even if that’s what the price difference is!&lt;/p&gt;
&lt;h4 class=&quot;h4&quot;&gt;Who made this?&lt;/h4&gt;
&lt;p&gt;This guide was originally written by &lt;a href=&quot;https://twitter.com/oznova_&quot;&gt;Oz Nova&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/quackingduck&quot;&gt;Myles Byrne&lt;/a&gt;, with 2020 updates by Oz. It is based on our experience teaching foundational computer science to over 1000 mostly self-taught engineers and bootcamp grads in small group settings in San Francisco and live online. Thank you to all of our students for your continued feedback on self-teaching resources.&lt;/p&gt;
&lt;p&gt;We're very confident that you could teach yourself everything above, given enough time and motivation. But if you'd prefer an intensive, structured, instructor-led program, you might be interested in our &lt;a href=&quot;https://bradfieldcs.com/csi/&quot;&gt;Computer Science Intensive&lt;/a&gt;. We &lt;a href=&quot;https://ozwrites.com/masters/&quot;&gt;DON'T&lt;/a&gt; suggest pursuing a master's degree.&lt;/p&gt;
&lt;p&gt;For updates to this guide and general computer science news and resources, you may also like to join Bradfield's mailing list:&lt;/p&gt;

</description>
<pubDate>Sun, 21 Jun 2020 01:22:35 +0000</pubDate>
<dc:creator>JDW1023</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://teachyourselfcs.com/</dc:identifier>
</item>
<item>
<title>FlexBuffers</title>
<link>https://google.github.io/flatbuffers/flexbuffers.html</link>
<guid isPermaLink="true" >https://google.github.io/flatbuffers/flexbuffers.html</guid>
<description>&lt;p&gt;FlatBuffers was designed around schemas, because when you want maximum performance and data consistency, strong typing is helpful.&lt;/p&gt;
&lt;p&gt;There are however times when you want to store data that doesn't fit a schema, because you can't know ahead of time what all needs to be stored.&lt;/p&gt;
&lt;p&gt;For this, FlatBuffers has a dedicated format, called FlexBuffers. This is a binary format that can be used in conjunction with FlatBuffers (by storing a part of a buffer in FlexBuffers format), or also as its own independent serialization format.&lt;/p&gt;
&lt;p&gt;While it loses the strong typing, you retain the most unique advantage FlatBuffers has over other serialization formats (schema-based or not): FlexBuffers can also be accessed without parsing / copying / object allocation. This is a huge win in efficiency / memory friendly-ness, and allows unique use cases such as mmap-ing large amounts of free-form data.&lt;/p&gt;
&lt;p&gt;FlexBuffers' design and implementation allows for a very compact encoding, combining automatic pooling of strings with automatic sizing of containers to their smallest possible representation (8/16/32/64 bits). Many values and offsets can be encoded in just 8 bits. While a schema-less representation is usually more bulky because of the need to be self-descriptive, FlexBuffers generates smaller binaries for many cases than regular FlatBuffers.&lt;/p&gt;
&lt;p&gt;FlexBuffers is still slower than regular FlatBuffers though, so we recommend to only use it if you need it.&lt;/p&gt;

&lt;p&gt;Include the header &lt;code&gt;flexbuffers.h&lt;/code&gt;, which in turn depends on &lt;code&gt;flatbuffers.h&lt;/code&gt; and &lt;code&gt;util.h&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To create a buffer:&lt;/p&gt;
&lt;div class=&quot;fragment&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;flexbuffers::Builder fbb;&lt;/p&gt;
&lt;p&gt;fbb.Int(13);&lt;/p&gt;
&lt;p&gt;fbb.Finish();&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You create any value, followed by &lt;code&gt;Finish&lt;/code&gt;. Unlike FlatBuffers which requires the root value to be a table, here any value can be the root, including a lonely int value.&lt;/p&gt;
&lt;p&gt;You can now access the &lt;code&gt;std::vector&amp;lt;uint8_t&amp;gt;&lt;/code&gt; that contains the encoded value as &lt;code&gt;fbb.GetBuffer()&lt;/code&gt;. Write it, send it, or store it in a parent FlatBuffer. In this case, the buffer is just 3 bytes in size.&lt;/p&gt;
&lt;p&gt;To read this value back, you could just say:&lt;/p&gt;
&lt;div class=&quot;fragment&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; root = flexbuffers::GetRoot(my_buffer);&lt;/p&gt;
&lt;p&gt;int64_t i = root.AsInt64();&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;FlexBuffers stores ints only as big as needed, so it doesn't differentiate between different sizes of ints. You can ask for the 64 bit version, regardless of what you put in. In fact, since you demand to read the root as an int, if you supply a buffer that actually contains a float, or a string with numbers in it, it will convert it for you on the fly as well, or return 0 if it can't. If instead you actually want to know what is inside the buffer before you access it, you can call &lt;code&gt;root.GetType()&lt;/code&gt; or &lt;code&gt;root.IsInt()&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;Here's a slightly more complex value you could write instead of &lt;code&gt;fbb.Int&lt;/code&gt; above:&lt;/p&gt;
&lt;div class=&quot;fragment&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;fbb.Map([&amp;amp;]() {&lt;/p&gt;
&lt;p&gt;fbb.Vector(&lt;span class=&quot;stringliteral&quot;&gt;&quot;vec&quot;&lt;/span&gt;, [&amp;amp;]() {&lt;/p&gt;
&lt;p&gt;fbb.Int(-100);&lt;/p&gt;
&lt;p&gt;fbb.String(&lt;span class=&quot;stringliteral&quot;&gt;&quot;Fred&quot;&lt;/span&gt;);&lt;/p&gt;
&lt;p&gt;fbb.IndirectFloat(4.0f);&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;fbb.UInt(&lt;span class=&quot;stringliteral&quot;&gt;&quot;foo&quot;&lt;/span&gt;, 100);&lt;/p&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This stores the equivalent of the JSON value &lt;code&gt;{ vec: [ -100, &quot;Fred&quot;, 4.0 ], foo: 100 }&lt;/code&gt;. The root is a dictionary that has just two key-value pairs, with keys &lt;code&gt;vec&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt;. Unlike FlatBuffers, it actually has to store these keys in the buffer (which it does only once if you store multiple such objects, by pooling key values), but also unlike FlatBuffers it has no restriction on the keys (fields) that you use.&lt;/p&gt;
&lt;p&gt;The map constructor uses a C++11 Lambda to group its children, but you can also use more conventional start/end calls if you prefer.&lt;/p&gt;
&lt;p&gt;The first value in the map is a vector. You'll notice that unlike FlatBuffers, you can use mixed types. There is also a &lt;code&gt;TypedVector&lt;/code&gt; variant that only allows a single type, and uses a bit less memory.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IndirectFloat&lt;/code&gt; is an interesting feature that allows you to store values by offset rather than inline. Though that doesn't make any visible change to the user, the consequence is that large values (especially doubles or 64 bit ints) that occur more than once can be shared (see ReuseValue). Another use case is inside of vectors, where the largest element makes up the size of all elements (e.g. a single double forces all elements to 64bit), so storing a lot of small integers together with a double is more efficient if the double is indirect.&lt;/p&gt;
&lt;p&gt;Accessing it:&lt;/p&gt;
&lt;div class=&quot;fragment&quot; readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; map = flexbuffers::GetRoot(my_buffer).AsMap();&lt;/p&gt;
&lt;p&gt;map.size(); &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; vec = map[&lt;span class=&quot;stringliteral&quot;&gt;&quot;vec&quot;&lt;/span&gt;].AsVector();&lt;/p&gt;
&lt;p&gt;vec.size(); &lt;/p&gt;
&lt;p&gt;vec[0].AsInt64(); &lt;/p&gt;
&lt;p&gt;vec[1].AsString().c_str(); &lt;/p&gt;
&lt;p&gt;vec[1].AsInt64(); &lt;/p&gt;
&lt;p&gt;vec[2].AsDouble(); &lt;/p&gt;
&lt;p&gt;vec[2].AsString().IsTheEmptyString(); &lt;/p&gt;
&lt;p&gt;vec[2].AsString().c_str(); &lt;/p&gt;
&lt;p&gt;vec[2].ToString().c_str(); &lt;/p&gt;
&lt;p&gt;map[&lt;span class=&quot;stringliteral&quot;&gt;&quot;foo&quot;&lt;/span&gt;].AsUInt8(); &lt;/p&gt;
&lt;p&gt;map[&lt;span class=&quot;stringliteral&quot;&gt;&quot;unknown&quot;&lt;/span&gt;].IsNull(); &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Java implementation follows the C++ one, closely.&lt;/p&gt;
&lt;p&gt;For creating the equivalent of the same JSON &lt;code&gt;{ vec: [ -100, &quot;Fred&quot;, 4.0 ], foo: 100 }&lt;/code&gt;, one could use the following code:&lt;/p&gt;
&lt;div class=&quot;fragment&quot; readability=&quot;29&quot;&gt;
&lt;p&gt;FlexBuffersBuilder builder = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FlexBuffersBuilder(ByteBuffer.allocate(512),&lt;/p&gt;
&lt;p&gt;FlexBuffersBuilder.BUILDER_FLAG_SHARE_KEYS_AND_STRINGS);&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;keywordtype&quot;&gt;int&lt;/span&gt; smap = builder.startMap();&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;keywordtype&quot;&gt;int&lt;/span&gt; svec = builder.startVector();&lt;/p&gt;
&lt;p&gt;builder.putInt(-100);&lt;/p&gt;
&lt;p&gt;builder.putString(&lt;span class=&quot;stringliteral&quot;&gt;&quot;Fred&quot;&lt;/span&gt;);&lt;/p&gt;
&lt;p&gt;builder.putFloat(4.0);&lt;/p&gt;
&lt;p&gt;builder.endVector(&lt;span class=&quot;stringliteral&quot;&gt;&quot;vec&quot;&lt;/span&gt;, svec, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/p&gt;
&lt;p&gt;builder.putInt(&lt;span class=&quot;stringliteral&quot;&gt;&quot;foo&quot;&lt;/span&gt;, 100);&lt;/p&gt;
&lt;p&gt;builder.endMap(null, smap);&lt;/p&gt;
&lt;p&gt;ByteBuffer bb = builder.finish();&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Similarly, to read the data, just:&lt;/p&gt;
&lt;div class=&quot;fragment&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;FlexBuffers.Map map = FlexBuffers.getRoot(bb).asMap();&lt;/p&gt;
&lt;p&gt;map.size(); &lt;/p&gt;
&lt;p&gt;FlexBuffers.Vector vec = map.get(&lt;span class=&quot;stringliteral&quot;&gt;&quot;vec&quot;&lt;/span&gt;).asVector();&lt;/p&gt;
&lt;p&gt;vec.size(); &lt;/p&gt;
&lt;p&gt;vec.get(0).asLong(); &lt;/p&gt;
&lt;p&gt;vec.get(1).asString(); &lt;/p&gt;
&lt;p&gt;vec.get(1).asLong(); &lt;/p&gt;
&lt;p&gt;vec.get(2).asFloat(); &lt;/p&gt;
&lt;p&gt;vec.get(2).asString().isEmpty(); &lt;/p&gt;
&lt;p&gt;vec.get(2).asString(); &lt;/p&gt;
&lt;p&gt;vec.get(2).toString(); &lt;/p&gt;
&lt;p&gt;map.get(&lt;span class=&quot;stringliteral&quot;&gt;&quot;foo&quot;&lt;/span&gt;).asUInt(); &lt;/p&gt;
&lt;p&gt;map.get(&lt;span class=&quot;stringliteral&quot;&gt;&quot;unknown&quot;&lt;/span&gt;).isNull(); &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;A description of how FlexBuffers are encoded is in the &lt;a class=&quot;el&quot; href=&quot;https://google.github.io/flatbuffers/flatbuffers_internals.html&quot;&gt;internals&lt;/a&gt; document.&lt;/p&gt;

&lt;p&gt;You can mark a field as containing a FlexBuffer, e.g.&lt;/p&gt;
&lt;pre class=&quot;fragment&quot;&gt;
a:[ubyte] (flexbuffer);
&lt;/pre&gt;
&lt;p&gt;A special accessor will be generated that allows you to access the root value directly, e.g. &lt;code&gt;a_flexbuffer_root().AsInt64()&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Vectors generally are a lot more efficient than maps, so prefer them over maps when possible for small objects. Instead of a map with keys &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt;, use a vector. Better yet, use a typed vector. Or even better, use a fixed size typed vector.&lt;/li&gt;
&lt;li&gt;Maps are backwards compatible with vectors, and can be iterated as such. You can iterate either just the values (&lt;code&gt;map.Values()&lt;/code&gt;), or in parallel with the keys vector (&lt;code&gt;map.Keys()&lt;/code&gt;). If you intend to access most or all elements, this is faster than looking up each element by key, since that involves a binary search of the key vector.&lt;/li&gt;
&lt;li&gt;When possible, don't mix values that require a big bit width (such as double) in a large vector of smaller values, since all elements will take on this width. Use &lt;code&gt;IndirectDouble&lt;/code&gt; when this is a possibility. Note that integers automatically use the smallest width possible, i.e. if you ask to serialize an int64_t whose value is actually small, you will use less bits. Doubles are represented as floats whenever possible losslessly, but this is only possible for few values. Since nested vectors/maps are stored over offsets, they typically don't affect the vector width.&lt;/li&gt;
&lt;li&gt;To store large arrays of byte data, use a blob. If you'd use a typed vector, the bit width of the size field may make it use more space than expected, and may not be compatible with &lt;code&gt;memcpy&lt;/code&gt;. Similarly, large arrays of (u)int16_t may be better off stored as a binary blob if their size could exceed 64k elements. Construction and use are otherwise similar to strings.&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 21 Jun 2020 00:11:59 +0000</pubDate>
<dc:creator>excerionsforte</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://google.github.io/flatbuffers/flexbuffers.html</dc:identifier>
</item>
</channel>
</rss>