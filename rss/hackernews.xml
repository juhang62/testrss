<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The Cloud</title>
<link>https://txt.black/~jack/cloud.txt</link>
<guid isPermaLink="true" >https://txt.black/~jack/cloud.txt</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;84&quot;&gt;
&lt;p&gt;The Cloud --- The cloud (aws, gcloud, azure... whatever) is a piece of shit. 10x price for 1/10th performance (so 100x price haha) Not only the hardware there is pathetic and all IPC is horrible, but also all the managed services you use from them are performing horribly. (from es to rabbitmq to even attached block storage [which is probably why they are performing this way]) What I do for https://baxx.dev/stat (and for other projects): * buy 2-3 machines from hetzner [or somewhere else] for 200E per month you get 24 core (48 ht) 128g ram box with 2tb ssd (usually in mirror, so 1tb), that can easily do ~100k randread and 50k randwrite iops, 1gbps unlimited network just for reference, this will cost ~5k on the cloud, and will perform (even though with similar specs) 1/10th of bare metal box * learn some basic sysadmin skills, now it is easier than ever * systemd + docker can go a long way * try not to use many dependencies, don't decouple without good reason * avoid queues if you can this seems counter intuitive, by queues I don't mean just kafka, I mean all kinds of receive (usually unbounded) queues, for example nginx's listen(2) backlog queue has limit N (unlimited in some cases), then you have accept(2) queue on wherever nginx is proxying to, and then from this thing to your database, and the database's queue depth and etc. interacting queues have extremely annoying emergent chaotic properties, so every time you can avoid it, do it (I did some investigation in the we-got-it-all-wrong post https://txt.black/~jack/we-got-it-all-wrong.txt https://txt.black/~jack/we-got-it-all-wrong-2.txt where I changed from push to pull to understand the dynamics better) you will probably need: * postgres/mysql setup master-&amp;gt;slave so you can have 'hot' standby. on this machines 1 postgres master can handle your traffic (unless you just do bad design) until you reach mid size[100-200 employees] * zookeeper pretty much you start it and let it run, unless you abuse it * es, kafka, nginx, redis, some backend (node,go whatever) etc use cgroups or docker to make sure one dependency wont bring the whole box into thrashing, keep in mind modern thrashing is pretty much unstoppable. * some external dns, setup your zone records with 5 min ttl so when one of the machines dies you just manually switch until you have new one setup (which could take 1 day) the machines don't die every day.. so dns round robbin is enough and should bring you to .99+ availability * keep in mind you have 1 machine worth of capacity, the other one is pretty much for live/live backup, which means at all time you must be able to handle all the traffic with 1 machine * make the machines ping each other https://github.com/jackdoe/baxx/blob/master/README.txt#L76 (example of how I do it for baxx so I get notified when any process or cronjob on any box is not running as expected) * secure your boxes, following How-To-Secure-A-Linux-Server will give you a *very* good head start: https://github.com/imthenachoman/How-To-Secure-A-Linux-Server Once you are on your own: * keep running live/live setup This is very critical, backups do not work in chaotic systems, there are gazillion reasons why a backup will fail, the only way you can be sure you can recover if a machine dies, is to know for a fact that the other machine is serving traffic. Here I want to distinguish between backups of data (saving old copy of a database increase someone truncates the wrong table by accident, which sadly happens way more than we want to admit), and having a way to recover from a situation where a machine is dead. As stated, the only way to ensure quick recovery is if you actually know that the fallback machine was working with the same live traffic as the dead machine. * avoid buying managed services Not being able to strace/gdb/iostat or use jmx to hook into the service that is causing you issues has caused me so much pain. I regret it every time I helplessly look at a slow operation that intuitively I know should be fast and cant explain why is it performing like shit. You cant even login to it to see if the disk is faulty. All those graphs and logs that the managed services usually give you are useless in crisis or hardware degradation scenario, as it is often impossible to isolate the symptom from the cause when the thrashing starts. * don't use CDNs This is harder than it sounds of course, especially if you managed to get to 2 MB javascript bundle and 50megapixel images.. CDNs increase your complexity, they creep into your deployments and the way you think..invalidation of objects, naming conventions etc etc.. inline as much as you can and be free. * do it once Because you will end up running like 20 things, it is important to not worry about them. This whole enterprise boils down to you running things that are just good software, e.g. redis, you run it once and thats it. (LTS is way more marketing than it seems, so don't trust it blindly) * avoid big data while you can Most companies can go very far by appending their analytics events in a log file or a table. having 30-40 million events in a text file is in the order of 10-20GB on good ssd with a good cpu you can slice and dice it with incredible speed. cat | rg | jq | sort | uniq -c | sort &amp;gt; report.$(date).txt is amazing just imagine the alternative: oozie, hadoop, spark, job reports, transformers, dependencies brrrrrr amazing how we ended up here so we can count some numbers * remove layers e.g. don't run elasticsearch if you only need lucene, don't run rails if you can do it with sinatra, don't introduce caching layers unless absolutely needed, don't use haproxy if you can go by with dns round robbin, don't run cassandra if you just need LSMT can simply embed rocksdb, dont run kubernetes if you can do it with systemd.. Don't go to the cloud. It will force you to use super crappy and slow or limited things such as s3 and over-complicate your infrastructure to incredible degree. It is truly a piece of shit and will just force you to design systems in a horrible way. -b&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 07 Aug 2019 21:33:56 +0000</pubDate>
<dc:creator>zulgan</dc:creator>
<dc:format>text/plain</dc:format>
<dc:identifier>https://txt.black/~jack/cloud.txt</dc:identifier>
</item>
<item>
<title>Can ads on a page read my password?</title>
<link>https://security.stackexchange.com/questions/214784/can-ads-on-a-page-read-my-password</link>
<guid isPermaLink="true" >https://security.stackexchange.com/questions/214784/can-ads-on-a-page-read-my-password</guid>
<description>&lt;p&gt;That depends on how the website loads the ads.&lt;/p&gt;
&lt;p&gt;In the case of goodreads, their HTML contains javascript from the ad provider. Specifically, lines 81-145 of the HTML document returned by &lt;code&gt;https://www.goodreads.com/&lt;/code&gt; read:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt;
  //&amp;lt;![CDATA[
    var gptAdSlots = gptAdSlots || [];
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function() {
      var gads = document.createElement(&quot;script&quot;);
      gads.async = true;
      gads.type = &quot;text/javascript&quot;;
      var useSSL = &quot;https:&quot; == document.location.protocol;
      gads.src = (useSSL ? &quot;https:&quot; : &quot;http:&quot;) +
      &quot;//securepubads.g.doubleclick.net/tag/js/gpt.js&quot;;
      var node = document.getElementsByTagName(&quot;script&quot;)[0];
      node.parentNode.insertBefore(gads, node);
    })();
    // page settings
  //]]&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  //&amp;lt;![CDATA[
    googletag.cmd.push(function() {
      googletag.pubads().setTargeting(&quot;sid&quot;, &quot;osid.bd63050e605ccee9f21515a2dedfdaea&quot;);
    googletag.pubads().setTargeting(&quot;grsession&quot;, &quot;osid.bd63050e605ccee9f21515a2dedfdaea&quot;);
    googletag.pubads().setTargeting(&quot;surface&quot;, &quot;desktop&quot;);
    googletag.pubads().setTargeting(&quot;signedin&quot;, &quot;false&quot;);
    googletag.pubads().setTargeting(&quot;gr_author&quot;, &quot;false&quot;);
    googletag.pubads().setTargeting(&quot;author&quot;, []);
      googletag.pubads().enableAsyncRendering();
      googletag.pubads().enableSingleRequest();
      googletag.pubads().collapseEmptyDivs(true);
      googletag.pubads().disableInitialLoad();
      googletag.enableServices();
    });
  //]]&amp;gt;
&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  //&amp;lt;![CDATA[
    ! function(a9, a, p, s, t, A, g) {
      if (a[a9]) return;

      function q(c, r) {
        a[a9]._Q.push([c, r])
      }
      a[a9] = {
      init: function() {
        q(&quot;i&quot;, arguments)
      },
      fetchBids: function() {
        q(&quot;f&quot;, arguments)
      },
      setDisplayBids: function() {},
        _Q: []
      };
      A = p.createElement(s);
      A.async = !0;
      A.src = t;
      g = p.getElementsByTagName(s)[0];
      g.parentNode.insertBefore(A, g)
    }(&quot;apstag&quot;, window, document, &quot;script&quot;, &quot;//c.amazon-adsystem.com/aax2/apstag.js&quot;);

    apstag.init({
      pubID: '3211', adServer: 'googletag', bidTimeout: 4e3
    });
  //]]&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As a consequence, the advertizer's javascript code runs in the same execution context as the website itself, and can do everything the website can, including observing all your interactions with the website.&lt;/p&gt;
&lt;p&gt;If instead they had loaded the ads by embedding an iframe from a different origin, the advertizer's code would have run in its own execution context, and the browser would have blocked access to the surrounding website as a violation of the same origin policy.&lt;/p&gt;
&lt;p&gt;In general, the only way to tell whether the website has isolated the advertizer's code is to inspect the code of the website.&lt;/p&gt;
</description>
<pubDate>Wed, 07 Aug 2019 20:32:41 +0000</pubDate>
<dc:creator>linux2647</dc:creator>
<og:type>website</og:type>
<og:url>https://security.stackexchange.com/questions/214784/can-ads-on-a-page-read-my-password</og:url>
<og:image>https://cdn.sstatic.net/Sites/security/img/apple-touch-icon@2.png?v=497726d850f9</og:image>
<og:title>Can ads on a page read my password?</og:title>
<og:description>Disclaimer: I have minimal web-dev/security knowledge so please answer as if talking to a &quot;layman.&quot; I've heard that web-advertisements need to be able to run their own JavaScript so that they can ...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://security.stackexchange.com/questions/214784/can-ads-on-a-page-read-my-password</dc:identifier>
</item>
<item>
<title>A Boeing Code Leak Exposes Security Flaws Deep in a 787&amp;#039;S Guts</title>
<link>https://www.wired.com/story/boeing-787-code-leak-security-flaws/</link>
<guid isPermaLink="true" >https://www.wired.com/story/boeing-787-code-leak-security-flaws/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lede&quot;&gt;Late one night&lt;/span&gt; last September, security researcher Ruben Santamarta sat in his home office in Madrid and partook in some creative googling, searching for technical documents related to his years-long obsession: the cybersecurity of airplanes. He was surprised to discover a fully unprotected server on Boeing's network, seemingly full of code designed to run on the company's &lt;a href=&quot;https://www.wired.com/story/boeing-737-max-test-flight-ups-and-downs&quot;&gt;giant 737&lt;/a&gt; and 787 passenger jets, left publicly accessible and open to anyone who found it. So he downloaded everything he could see.&lt;/p&gt;
&lt;p&gt;Now, nearly a year later, Santamarta claims that leaked code has led him to something unprecedented: security flaws in one of the 787 Dreamliner's components, deep in the plane's multi-tiered network. He suggests that for a hacker, exploiting those bugs could represent one step in a multi­stage attack that starts in the plane’s in-flight entertainment system and extends to highly protected, safety-critical systems like flight controls and sensors.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;Boeing flatly denies that such an attack is possible, and it rejects his claim of having discovered a potential path to pull it off. Santa­marta himself admits that he doesn't have a full enough picture of the aircraft—or access to a $250 million jet—to confirm his claims. But he and other avionics cybersecurity researchers who have reviewed his findings argue that while a full-on cyberattack on a plane's most sensitive systems remains far from a material threat, the flaws uncovered in the 787's code nonetheless represent a troubling lack of attention to cybersecurity from Boeing. They also say that the company's responses have not been altogether reassuring, given the critical importance of keeping commercial airplanes safe from hackers.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;At the Black Hat security conference today in Las Vegas, Santamarta, a researcher for security firm IOActive, plans to present his findings, including the details of multiple serious security flaws in the code for a component of the 787 known as a Crew Information Service/Maintenance System. The CIS/MS is responsible for applications like maintenance systems and the so-called electronic flight bag, a collection of navigation documents and manuals used by pilots. Santamarta says he found a slew of memory corruption vulnerabilities in that CIS/MS, and he claims that a hacker could use those flaws as a foothold inside a restricted part of a plane's network. An attacker could potentially pivot, Santamarta says, from the in-flight entertainment system to the CIS/MS to send commands to far more sensitive components that control the plane's safety-critical systems, including its engine, brakes, and sensors. Boeing maintains that other security barriers in the 787's network architecture would make that progression impossible.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Santamarta admits that he doesn't have enough visibility into the 787's internals to know if those security barriers are circumventable. But he says his research nonetheless represents a significant step toward showing the possibility of an actual plane-hacking technique. &quot;We don't have a 787 to test, so we can't assess the impact,&quot; Santamarta says. &quot;We’re not saying it’s doomsday, or that we can take a plane down. But we can say: This shouldn’t happen.&quot;&lt;/p&gt;
&lt;h3 class=&quot;paywall&quot;&gt;Flying Firewalls&lt;/h3&gt;
&lt;p class=&quot;paywall&quot;&gt;In a statement, Boeing said it had investigated IOActive's claims and concluded that they don't represent any real threat of a cyberattack. &quot;IOActive’s scenarios cannot affect any critical or essential airplane system and do not describe a way for remote attackers to access important 787 systems like the avionics system,&quot; the company's statement reads. &quot;IOActive reviewed only one part of the 787 network using rudimentary tools, and had no access to the larger system or working environments. IOActive chose to ignore our verified results and limitations in its research, and instead made provocative statements as if they had access to and analyzed the working system. While we appreciate responsible engagement from independent cybersecurity researchers, we’re disappointed in IOActive’s irresponsible presentation.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;In a follow-up call with WIRED, a company spokesperson said that in investigating IOActive's claims, Boeing had gone so far as to put an actual Boeing 787 in &quot;flight mode&quot; for testing, and then had its security engineers attempt to exploit the vulnerabilities that Santamarta had exposed. They found that they couldn't carry out a successful attack. Honeywell, which supplied Boeing with the code for the CIS/MS, also wrote in a statement to WIRED that &quot;after extensive testing, Honeywell and its partners determined there is no threat to flight safety as the 787’s critical systems cannot be affected.&quot;&lt;/p&gt;

&lt;div class=&quot;inset-left-component paywall inset-left-component--pullquote&quot; readability=&quot;6&quot;&gt;
&lt;blockquote name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&quot;Every piece of software has bugs. But this is not where I’d like to find the bugs.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;Stefan Savage, UCSD&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;paywall&quot;&gt;IOActive's attack claims—as well as Honeywell's and Boeing's denials—are based on the specific architecture of the 787's internals. The Dream­liner's digital systems are divided into three networks: an Open Data Network, where non-sensitive components like the in-flight entertainment system live; an Isolated Data Network, which includes somewhat more sensitive components like the CIS/MS that IOActive targeted; and finally the Common Data Network, the most sensitive of the three, which connects to the plane's avionics and safety systems. Santamarta claims that the vulnerabilities he found in the CIS/MS, sandwiched between the ODN and CDN, provide a bridge from one to the other.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;But Boeing counters that it has both &quot;additional protection mechanisms&quot; in the CIS/MS that would prevent its bugs from being exploited from the ODN, and another hardware device between the semi-sensitive IDN—where the CIS/MS is located—and the highly sensitive CDN. That second barrier, the company argues, allows only data to pass from one part of the network to the other, rather than the executable commands that would be necessary to affect the plane's critical systems.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&quot;Although we do not provide details about our cybersecurity measures and protections for security reasons, Boeing is confident that its airplanes are safe from cyberattack,&quot; the company's statement concludes.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Boeing says it also consulted with the Federal Aviation Administration and the Department of Homeland Security about Santamarta's attack. While the DHS didn't respond to a request for comment, an FAA spokesperson wrote in a statement to WIRED that it's &quot;satisfied with the manufac­turer’s assessment of the issue.&quot;&lt;/p&gt;

&lt;h3 class=&quot;paywall&quot;&gt;&quot;This Is Security 101&quot;&lt;/h3&gt;
&lt;p class=&quot;paywall&quot;&gt;The new claims of software flaws come against the backdrop of the ongoing scandal &lt;a href=&quot;https://www.wired.com/story/boeing-737-max-test-flight-ups-and-downs&quot;&gt;over Boeing's grounded 737 Max aircraft&lt;/a&gt;, after that aircraft's &lt;a href=&quot;https://www.nytimes.com/interactive/2019/03/29/business/boeing-737-max-8-flaws.html&quot; target=&quot;_blank&quot;&gt;faulty controls contributed to two crashes that killed 346 people&lt;/a&gt;. At the same time, Santamarta has his own history of unresolved disagree­ments with the aerospace industry over its cybersecurity measures. He &lt;a href=&quot;https://ioactive.com/in-flight-hacking-system/&quot; target=&quot;_blank&quot;&gt;previously hacked&lt;/a&gt; a Panasonic Avionics in-flight entertainment system. And at last year's Black Hat conference, for instance, he presented vulnerabilities in &lt;a href=&quot;https://ioactive.com/article/ioactive-reveals-major-satellite-communication-and-operating-system-vulnerabilities-at-black-hat-usa-2018-def-con-26/&quot; target=&quot;_blank&quot;&gt;satellite communication systems&lt;/a&gt; that he said could be used to hack some non-sensitive airplane systems. The Aviation Industry Sharing and Analysis Center shot back in a &lt;a href=&quot;https://docs.wixstatic.com/ugd/f878d1_1f23c968acca4ceebd253e890a30eb31.pdf&quot; target=&quot;_blank&quot;&gt;press release&lt;/a&gt; that his findings were based on &quot;technical errors.&quot; Santamarta countered that the A-ISAC was &quot;&lt;a href=&quot;https://docs.wixstatic.com/ugd/f878d1_1f23c968acca4ceebd253e890a30eb31.pdf&quot; target=&quot;_blank&quot;&gt;killing the messenger&lt;/a&gt;,&quot; attempting to discredit him rather than address his research.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;But even granting Boeing's claims about its security barriers, the flaws Santamarta found are egregious enough that they shouldn't be dismissed, says Stefan Savage, a computer science professor at the University of California at San Diego, who is currently working with other academic researchers on an avionics cybersecurity testing platform. &quot;The claim that one shouldn't worry about a vulnerability because other protections prevent it from being exploited has a very bad history in computer security,&quot; Savage says. &quot;Typically, where there's smoke there's fire.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Savage points in particular to a vulnerability Santamarta highlighted in a version of the &lt;a href=&quot;https://www.wired.com/story/vxworks-vulnerabilities-urgent11&quot;&gt;embedded operating system VxWorks&lt;/a&gt;, in this case customized for Boeing by Honeywell. Santamarta found that when an application asks to write to the underlying computer's memory, the tailored operating system doesn't properly check that it's not instead over­writing the kernel, the most sensitive core of the operating system. Combined with several application-level bugs Santamarta found, that so-called parameter-check privilege escalation vulnerability represents a serious flaw, Savage argues, made more serious by the notion that VxWorks likely runs in many other components on the plane that might have the same bug.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&quot;Every piece of software has bugs. But this is not where I’d like to find the bugs. Checking user parameters is security 101,&quot; Savage says. &quot;They shouldn't have these kinds of straightforward vulnerabilities, especially in the kernel. In this day and age, it would be inconceivable for a consumer operating system to not check user pointer parameters, so I'd expect the same of an airplane.&quot;&lt;/p&gt;

&lt;div class=&quot;inset-left-component paywall inset-left-component--pullquote&quot; readability=&quot;9&quot;&gt;
&lt;blockquote name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&quot;This shouldn’t happen.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;inset-left&quot; class=&quot;inset-left-component__el&quot;&gt;Ruben Santamarta, IOActive&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;paywall&quot;&gt;Another academic avionics cybersecurity researcher, Karl Koscher at the University of Washington, says he's found such serious security flaws in an aircraft component as those Santamarta reported in the CIS/MS. &quot;Perhaps Boeing intentionally treated it as untrusted, and the rest of the system can handle that untrusted bit,&quot; Koscher says.&quot;But saying, 'It doesn’t matter because there are mitigations further down' isn’t that good an answer. Especially if some of the mitigations turn out to be not as robust as you think they are.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Koscher also points to the CIS/MS access to the Electronic Flight Bag, full of documents and navigation materials a plane's pilot might refer to via a tablet in the cockpit. Corrupting that data could cause its own form of mayhem. &quot;If you can create confusion and misinformation in the cockpit, that could lead to some pretty bad outcomes,&quot; Koscher notes. (A Boeing spokesperson says that the EFB can't be compromised from the CIS/MS, either, despite both being located in the same part of the 787's network.)&lt;/p&gt;
&lt;h3 class=&quot;paywall&quot;&gt;Big, Flying Collections of Computers&lt;/h3&gt;
&lt;p class=&quot;paywall&quot;&gt;To be clear, neither Savage nor Koscher believe that, based on Santamarta's findings alone, a hacker could cause any immediate danger to an aircraft or its passengers. &quot;This is a long way from an imminent safety threat. Based on what they have now, I think you could let the IOActive guys run amok on a 787 and I'd still be comfortable flying on it,&quot; Savage says. &quot;But Boeing has work to do.&quot;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Assessing whether IOActive's findings truly represent a step toward a serious attack is difficult, Savage points out, simply due to the impossible logistics of airplane security research. Companies like Boeing have the means to comprehensively test a quarter-billion-dollar aircraft's security, but also have deep conflicts of interest about what results they publish. Independent hackers like IOActive's Santamarta don't have the resources to carry out those complete investigations—even as highly resourced state hackers or others willing to test on live, airborne planes might.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Santamarta's research, despite Boeing's denials and assurances, should be a reminder that aircraft security is far from a solved area of cybersecurity research. &quot;This is a reminder that planes, like cars, depend on increasingly complex networked computer systems,&quot; Savage says. &quot;They don't get to escape the vulnerabilities that come with this.&quot;&lt;/p&gt;

&lt;hr class=&quot;paywall&quot;/&gt;&lt;h3 class=&quot;paywall&quot;&gt;More Great WIRED Stories&lt;/h3&gt;
</description>
<pubDate>Wed, 07 Aug 2019 20:02:08 +0000</pubDate>
<dc:creator>samuell</dc:creator>
<og:type>article</og:type>
<og:title>A Boeing Code Leak Exposes Security Flaws Deep in a 787's Guts</og:title>
<og:description>One researcher's discovery suggests troubling oversights in Boeing's cybersecurity.</og:description>
<og:image>https://media.wired.com/photos/5d4a1a70f761bd0008d2add6/191:100/pass/security_boeing_160860154.jpg</og:image>
<og:url>https://www.wired.com/story/boeing-787-code-leak-security-flaws/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/boeing-787-code-leak-security-flaws/</dc:identifier>
</item>
<item>
<title>Why is modern web development so complicated?</title>
<link>https://www.vrk.dev/2019/07/11/why-is-modern-web-development-so-complicated-a-long-yet-hasty-explanation-part-1/</link>
<guid isPermaLink="true" >https://www.vrk.dev/2019/07/11/why-is-modern-web-development-so-complicated-a-long-yet-hasty-explanation-part-1/</guid>
<description>&lt;p&gt;Modern frontend web development is a polarizing experience: many love it, others despise it.&lt;/p&gt;
&lt;p&gt;I am a huge fan of modern web development, though I would describe it as “magical” — and magic has its upsides and downsides:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;When you understand how to use the magical tools of web development (babel! bundlers! watchers! etc!), your development workflow is speedy, powerful, and delightful&lt;/li&gt;
&lt;li&gt;If you &lt;strong&gt;don’t&lt;/strong&gt; understand the magical tools of web development, it’s terribly confusing&lt;/li&gt;
&lt;li&gt;… and trying to learn how the magic works is all-too-often miserable, unless you have someone to help guide you through the tangle of jargon, hot takes, and outdated information on the web&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Recently I’ve been needing to explain “modern web development workflows” to folks who only have a cursory of vanilla web development workflows and……&lt;/p&gt;
&lt;p&gt;It is a LOT to explain!&lt;/p&gt;
&lt;p&gt;Even a hasty explanation ends up being pretty long.&lt;/p&gt;
&lt;p&gt;So in the effort of writing more of my explanations down, here is the beginning of a long yet hasty explanation of the evolution of web development:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 1: How we got from static websites to babel&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;divider&quot;&gt;– – – – – – – – – – –&lt;/div&gt;
&lt;h2&gt;Simplest website: Static website&lt;/h2&gt;
&lt;p&gt;Let’s start from “classic” frontend web development, which I’m going to assume you-the-reader already understand.&lt;/p&gt;
&lt;p&gt;In classic frontend web development, we are directly modifying HTML/CSS/JavaScript files. To preview changes, we open the HTML file locally in the browser, and as we develop, we refresh the page for updates.&lt;/p&gt;
&lt;h3&gt;Development workflow&lt;/h3&gt;
&lt;p&gt;The development workflow looks like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Edit your HTML/CSS/JavaScript files in a text editor like &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Save the file in your text editor.&lt;/li&gt;
&lt;li&gt;Open and reload file in the browser.&lt;/li&gt;
&lt;/ol&gt;&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/edits.gif&quot; alt=&quot;&quot; class=&quot;wp-image-315&quot;/&gt;Edit JavaScript, save file, refresh the page to see updates
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;Then when you want to publish your website to the internet, you simply upload the HTML/CSS/JavaScript files to the internet somewhere.&lt;/p&gt;
&lt;p&gt;With a service like &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;, you can just drag-and-drop the folder containing your files to publish the page to the web.&lt;/p&gt;
&lt;p&gt;Here’s an example of the published page: &lt;a href=&quot;https://sleepy-lichterman-6811cc.netlify.com/&quot;&gt;https://sleepy-lichterman-6811cc.netlify.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;That’s so simple! Why did we make things complicated?!&lt;/h2&gt;
&lt;p&gt;So if you understand how the “classic” web development workflow works, you might ask: Gee, that’s really simple and convenient. Why did we ever deviate from that?! Why are modern web development flows so complicated?&lt;/p&gt;
&lt;p&gt;The short answer: …Ok maybe I have two short answers.&lt;/p&gt;
&lt;p&gt;Two short answers:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;You don’t &lt;em&gt;have&lt;/em&gt; to make it more complicated.&lt;/strong&gt; The “classic” web development workflow is great! And is perfectly sufficient for plenty of needs! You should never add superfluous tooling, or tools whose purpose you don’t understand.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;But for certain projects you’ll&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;benefit&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;from a more sophisticated workflow.&lt;/strong&gt; Every tool that you add to your workflow is meant to solve a problem.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In order to understand the tooling for modern web development, we have to &lt;strong&gt;understand the problems&lt;/strong&gt; of web development.&lt;/p&gt;
&lt;p&gt;In this long-but-hasty journey, we’ll address each problem individually, starting with an old web dev problem that has existed for decades:.&lt;/p&gt;
&lt;h2&gt;An old problem: Limitations in JavaScript&lt;/h2&gt;
&lt;p&gt;Up until fairly recently, JavaScript and the Web APIs had a lot of limitations (for a myriad of reasons that will not be covered in this long ‘n’ hasty post).&lt;/p&gt;
&lt;p&gt;To name a few of these limitations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No modules&lt;/li&gt;
&lt;li&gt;No constants&lt;/li&gt;
&lt;li&gt;No Promises / async&lt;/li&gt;
&lt;li&gt;No Array.includes() (!!)&lt;/li&gt;
&lt;li&gt;Clunky syntax / missing for a lot of common primitives (no for-of, template literals, arrow function syntax, template unpacking…)&lt;/li&gt;
&lt;li&gt;(Web APIs) Countless DOM operations were needlessly complex (like adding/removing class names, hiding elements, selecting elements, removing elements…)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Browsers are only capable of executing JavaScript, so when there are limitations in the JavaScript language, it’s not like you can just use a different language; you have to work with what you have.&lt;/p&gt;
&lt;h3&gt;Aside: Difference between JavaScript and Web APIs?&lt;/h3&gt;
&lt;p&gt;You may have noticed I said “JavaScript and the Web APIs” above. These are two different things!&lt;/p&gt;
&lt;p&gt;When you write JavaScript for a web page, any API call that interacts with the web page itself is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API&quot;&gt;Web API&lt;/a&gt; (which happens to be written in JavaScript), and not part of JavaScript the language.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Web APIs&lt;/strong&gt;: &lt;code&gt;document&lt;/code&gt; and every method on &lt;code&gt;document&lt;/code&gt;; &lt;code&gt;window&lt;/code&gt; and every method on &lt;code&gt;window&lt;/code&gt;; &lt;code&gt;Event&lt;/code&gt;, &lt;code&gt;XMLHttpRequest&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;: functions, &lt;code&gt;const&lt;/code&gt;/&lt;code&gt;let&lt;/code&gt;/&lt;code&gt;var&lt;/code&gt;, arrays, &lt;code&gt;Promise&lt;/code&gt;, etc&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So for instance, if you’re writing a Node.js server, you’ll be writing in JavaScript, so that means you can use e.g. &lt;code&gt;Promise&lt;/code&gt;s but you can’t use &lt;code&gt;document.querySelector&lt;/code&gt; (nor would it make sense to do that).&lt;/p&gt;
&lt;h2&gt;An old solution: jQuery &amp;amp; friends&lt;/h2&gt;
&lt;p&gt;Back in 2006, &lt;a href=&quot;https://en.wikipedia.org/wiki/JQuery&quot;&gt;jQuery&lt;/a&gt; was released: It’s a library that helped workaround lot of the shortcomings of JavaScript and the Web APIs.&lt;/p&gt;
&lt;p&gt;jQuery includes APIs that help dramatically with common web tasks, like DOM manipulations, async processing, cross-browser discrepancies and resource-fetching.&lt;/p&gt;
&lt;p&gt;So basically: All these things were technically possible using old-JavaScript/old-Web-APIS, but they were super annoying, tedious, and often tricky to code – so instead of having every web developer write the same tedious code to e.g. download and process and JSON file, you could instead download the jQuery library and use jQuery’s nice APIs instead.&lt;/p&gt;
&lt;h2&gt;A new solution: Let’s improve JavaScript itself&lt;/h2&gt;
&lt;p&gt;A lot of time has passed since 2006, though!&lt;/p&gt;
&lt;p&gt;Since 2006, JavaScript and the Web APIs have improved &lt;strong&gt;tremendously&lt;/strong&gt;. (With a lot of help from jQuery and others in paving the way!)&lt;/p&gt;
&lt;p&gt;JavaScript is an ever-evolving language. Similar to how software is updated, the JavaScript language itself is updated to different versions.&lt;/p&gt;
&lt;p&gt;You may have heard the term “ES6.” ES6 stands for “ECMAScript 6,” and refers to the 6th iteration of ECMAScript. ECMAScript is just another word for JavaScript — the only difference is a colloquial one, in that people usually use “ECMAScript” to refer to the specification itself, and “JavaScript” to refer to the language people code in.&lt;/p&gt;
&lt;p&gt;(Btw, that’s another confusing aside and pet peeve of mine: JavaScript is &lt;strong&gt;not&lt;/strong&gt; an implementation/flavor/dialect of ECMAScript; that’s like calling “HTML” an implementation/flavor/dialect of the “HTML,” or, if you’re generous, the “HTML spec.” Either way, it’s wrong! &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript&quot;&gt;Wikipedia, you’re wrong&lt;/a&gt;! JavaScript and ECMAScript are one and the same.)&lt;/p&gt;
&lt;p&gt;Anyway! &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ES6 (released in 2015)&lt;/a&gt; is notable because it adds a lot of really language nice features to JavaScript, like &lt;code&gt;const&lt;/code&gt;, modules, and &lt;code&gt;Promise&lt;/code&gt;s. (And &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#8th_Edition_-_ECMAScript_2017&quot;&gt;ES8&lt;/a&gt; introduced maybe my &lt;a href=&quot;https://twitter.com/bictolia/status/1136441515104985089&quot;&gt;favorite language feature&lt;/a&gt; ever, &lt;code&gt;async&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;In parallel, the Web APIs have also improved tremendously since 2006, like with the addition of &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector&quot;&gt;document.querySelector&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;fetch&lt;/a&gt;&lt;/code&gt;, and little things like &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList&quot;&gt;classList&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden&quot;&gt;hidden&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So instead of using jQuery or other similar libraries, in 2019 we can, for the most part, just use JavaScript and the Web APIs directly.&lt;/p&gt;
&lt;p&gt;… sort of!&lt;/p&gt;
&lt;h2&gt;A new-old problem: Cross-browser support&lt;/h2&gt;
&lt;p&gt;When there’s an update to the JavaScript language, browsers will also need to be updated to support the new language features. (Same is true for the Web APIs, but we’ll stick to just JavaScript for simplicity for now.)&lt;/p&gt;
&lt;p&gt;However, there’s a delay between:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;When the language feature is defined in JavaScript&lt;/li&gt;
&lt;li&gt;When the browsers have all implemented and shipped support for that feature&lt;/li&gt;
&lt;li&gt;When users have all upgraded to the latest version of their browser, usually via auto-updating/restarting your browser (and this sometimes doesn’t happen!).&lt;/li&gt;
&lt;/ol&gt;&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-10.46.42-AM-1024x362.png&quot; alt=&quot;&quot; class=&quot;wp-image-317&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-10.46.42-AM-1024x362.png 1024w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-10.46.42-AM-300x106.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-10.46.42-AM-768x271.png 768w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;The dilemma: Do we write using older JavaScript or the latest JavaScript? Both have pros and cons. (This particular code example lifted &lt;a href=&quot;https://blog.hellojs.org/asynchronous-javascript-from-callback-hell-to-async-and-await-9b9ceb63c8e8&quot;&gt;from here&lt;/a&gt;!)
&lt;p&gt;This causes a dilemma for JavaScript developers: We want to use modern JavaScript language features, because these improvements often make it much easier to code certain things. But we also want our websites to work for all users, regardless of when’s the last time they’ve restarted their browser to get the latest updates.&lt;/p&gt;
&lt;p&gt;This specific dilemma is commonly solved by &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Babel is a JavaScript compiler that transforms JavaScript code into … different JavaScript code! Specifically, it transforms JavaScript code written using the latest version of JavaScript into the equivalent code written using an older version JavaScript that’s supported on far more browser.&lt;/p&gt;
&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-11.00.34-AM-1024x779.png&quot; alt=&quot;&quot; class=&quot;wp-image-320&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-11.00.34-AM-1024x779.png 1024w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-11.00.34-AM-300x228.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-11.00.34-AM-768x584.png 768w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-09-at-11.00.34-AM.png 1215w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;With Babel, we can enjoy the benefits of writing in the latest JavaScript without having to worry about browser compatibility.
&lt;p&gt;Web developers incorporate Babel into their workflow so that they can write the code using the latest JavaScript features without having to worry about browser compatibility.&lt;/p&gt;
&lt;h3&gt;Aside: Babel doesn’t include Web APIs&lt;/h3&gt;
&lt;p&gt;For example if you use &lt;code&gt;fetch&lt;/code&gt; in your JavaScript, babel will not provide fallback support (this is called “&lt;strong&gt;polyfill&lt;/strong&gt;“-ing) because &lt;code&gt;fetch&lt;/code&gt; is a Web API and not part of JavaScript proper. (&lt;a href=&quot;https://github.com/babel/babel/issues/10008&quot;&gt;This decision is being reconsidered&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;So you’ll need a separate solution for polyfilling Web APIs! But we’ll get to that in a later post.&lt;/p&gt;
&lt;p&gt;* * *&lt;/p&gt;
&lt;h2&gt;Back to workflows: Static website + babel&lt;/h2&gt;
&lt;p&gt;OK, so we’ve now motivated why one might want to use babel. What does a web development workflow with babel look like?&lt;/p&gt;
&lt;p&gt;The following is the &lt;strong&gt;simplest&lt;/strong&gt; babel workflow, which people &lt;strong&gt;don’t usually use&lt;/strong&gt;. (That’s because a bundler like Parcel or webpack is more convenient, but we’ll get there another next time!)&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Install* babel&lt;br/&gt;&lt;em&gt;(*You can follow the &lt;a href=&quot;https://babeljs.io/setup#installation&quot;&gt;CLI instructions here&lt;/a&gt;, though it assumes you understand how npm works. And they recommends that you install babel locally as an npm dev dependency for each project, vs globally on your machine.)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Development workflow&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Develop your site like a &lt;a href=&quot;https://www.notion.so/glitch/Proposal-Debug-Release-without-branching-a7a080fd59644e90a4f22f0a6f31b5ed#1227ca2fe74346a89bcc78e94de166d4&quot;&gt;normal static web page&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.43.46-PM.png&quot; alt=&quot;&quot; class=&quot;wp-image-322&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.43.46-PM.png 838w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.43.46-PM-300x116.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.43.46-PM-768x297.png 768w&quot; sizes=&quot;(max-width: 838px) 100vw, 838px&quot;/&gt;Example: The src directory is where your vanilla JavaScript lives
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;When you’re ready to publish your website to the internet, you do &lt;strong&gt;NOT&lt;/strong&gt; want to upload your vanilla JavaScript files to the web, because you’ve been using JavaScript features that are not supported by all browsers.&lt;/p&gt;
&lt;p&gt;Instead, you want to:&lt;/p&gt;
&lt;p&gt;1. Compile your JavaScript using babel, to get browser-compatible code:&lt;/p&gt;
&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.06-PM.png&quot; alt=&quot;&quot; class=&quot;wp-image-323&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.06-PM.png 968w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.06-PM-300x90.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.06-PM-768x230.png 768w&quot; sizes=&quot;(max-width: 968px) 100vw, 968px&quot;/&gt;&lt;p&gt;This will create the new, compiled JavaScript file in a separate folder:&lt;/p&gt;
&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.53-PM.png&quot; alt=&quot;&quot; class=&quot;wp-image-324&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.53-PM.png 834w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.53-PM-300x117.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/Screen-Shot-2019-07-08-at-5.45.53-PM-768x300.png 768w&quot; sizes=&quot;(max-width: 834px) 100vw, 834px&quot;/&gt;Example: Babel will generate a second “script.js”, and this one has cross-browser-compatible code
&lt;p&gt;2. Upload the &lt;strong&gt;compiled&lt;/strong&gt; JavaScript to the internet, along with your HTML and CSS:&lt;/p&gt;
&lt;div class=&quot;wp-block-columns has-2-columns&quot;&gt;
&lt;div class=&quot;wp-block-column&quot;&gt;&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/upload1-1.png&quot; alt=&quot;&quot; class=&quot;wp-image-326&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/upload1-1.png 820w, https://www.vrk.dev/wp-content/uploads/2019/07/upload1-1-300x111.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/upload1-1-768x285.png 768w&quot; sizes=&quot;(max-width: 820px) 100vw, 820px&quot;/&gt;Compiled JS&lt;/div&gt;
&lt;div class=&quot;wp-block-column&quot;&gt;&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/upload2.png&quot; alt=&quot;&quot; class=&quot;wp-image-327&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/upload2.png 846w, https://www.vrk.dev/wp-content/uploads/2019/07/upload2-300x103.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/upload2-768x263.png 768w&quot; sizes=&quot;(max-width: 846px) 100vw, 846px&quot;/&gt;…plus your CSS and HTL&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Your website will* look and behave the same as in development mode, but users will be served the compiled, babel-fied JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(*hopefully! Sometimes there are differences in Debug vs Release builds, but those are bugs!)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Pause to point out: Development vs Release code!&lt;/h2&gt;
&lt;img src=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/devvsrelease-1024x673.png&quot; alt=&quot;&quot; class=&quot;wp-image-332&quot; srcset=&quot;https://www.vrk.dev/wp-content/uploads/2019/07/devvsrelease-1024x673.png 1024w, https://www.vrk.dev/wp-content/uploads/2019/07/devvsrelease-300x197.png 300w, https://www.vrk.dev/wp-content/uploads/2019/07/devvsrelease-768x504.png 768w, https://www.vrk.dev/wp-content/uploads/2019/07/devvsrelease.png 1043w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;p&gt;Notice that we now have a separation between “development” code and “release” code:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Development code: The code that you write &lt;strong&gt;while developing&lt;/strong&gt; your web app.&lt;/li&gt;
&lt;li&gt;Release code: The code that you want to run &lt;strong&gt;when users visit&lt;/strong&gt; your web app.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We purposely want to keep these things separate, because:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The development code is good for developers, but bad for users&lt;/li&gt;
&lt;li&gt;The release code is good for users, but bad for developers&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In frontend web development, not everyone will uses or needs to use babel.&lt;/p&gt;
&lt;p&gt;However! The general pattern of:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Writing &lt;strong&gt;development code&lt;/strong&gt; that does not get shown to users&lt;/li&gt;
&lt;li&gt;and is instead compiled into different &lt;strong&gt;release code&lt;/strong&gt;, that &lt;em&gt;should&lt;/em&gt; be shown to users&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;…is not just common, but is often expected in modern frontend web development.&lt;/p&gt;
&lt;p&gt;(Note that having a separate “Debug” vs “Release” build is a general pattern in software engineering, not something new with web development. But it’s especially pertinent to frontend web development, both because of how commonplace it is, and because of how big the difference can be between Debug/Release for frontend web development in particular.)&lt;/p&gt;
&lt;p&gt;A short list of frontend technologies that expect this separation between debug and release:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;npm modules&lt;/li&gt;
&lt;li&gt;Any CSS preprocessor&lt;/li&gt;
&lt;li&gt;React/Vue/Angular/any web framework&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is going to be a recurring pattern, so make note of it now!&lt;/p&gt;
&lt;h2&gt;Next time: npm and bundling&lt;/h2&gt;
&lt;p&gt;In the next part of our journey, we’ll explore npm modules (what are they and why) and bundling (what is it and why), and how that complicates the workflow.&lt;/p&gt;
&lt;p&gt;…coming soon?! Sure, let’s say coming soon!&lt;/p&gt;
</description>
<pubDate>Wed, 07 Aug 2019 19:10:54 +0000</pubDate>
<dc:creator>bibyte</dc:creator>
<og:type>article</og:type>
<og:title>Why is modern web development so complicated? A long yet hasty explanation: Part 1! - vrk.dev</og:title>
<og:description>Modern frontend web development is a polarizing experience: many love it, others despise it. I am a huge fan of modern web development, though I would describe it as “magical” — and magic has its upsides and downsides: When you understand how to use the magical tools of web development (babel! bundlers! watchers! etc!), your …</og:description>
<og:url>https://www.vrk.dev/2019/07/11/why-is-modern-web-development-so-complicated-a-long-yet-hasty-explanation-part-1/</og:url>
<og:image>https://www.vrk.dev/wp-content/uploads/2019/07/edits.gif</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.vrk.dev/2019/07/11/why-is-modern-web-development-so-complicated-a-long-yet-hasty-explanation-part-1/</dc:identifier>
</item>
<item>
<title>Man and man&amp;#039;s best friend have both been experiencing declines in sperm quality</title>
<link>https://www.cbc.ca/radio/quirks/august-3-2019-science-of-awe-blue-whales-and-sonar-chromosomes-and-sleep-and-more-1.5047142/man-and-man-s-best-friend-have-both-been-experiencing-declines-in-sperm-quality-1.5047150</link>
<guid isPermaLink="true" >https://www.cbc.ca/radio/quirks/august-3-2019-science-of-awe-blue-whales-and-sonar-chromosomes-and-sleep-and-more-1.5047142/man-and-man-s-best-friend-have-both-been-experiencing-declines-in-sperm-quality-1.5047150</guid>
<description>&lt;p&gt;
Researchers have found a significant decline in dog sperm quality over the last couple of decades that mirrors problems that have been reported in humans.  (Mujahid Safodien/AFP/Getty Images)
&lt;/p&gt;&lt;div readability=&quot;129.15292841649&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;Originally aired on March 9, 2019.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;section id=&quot;inread-wrapper-id-19579088&quot;/&gt;&lt;p&gt;&lt;span&gt;Researchers in the U.K. have found a link between the fertility declines in domestic male dogs and similar problems that have been widely reported in human males.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;They traced the source back to two common chemicals that are persistent in our domestic environments and even our food.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Just a routine checkup&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://www.nottingham.ac.uk/news/expertiseguide/veterinary-medicine-science/dr-richard-lea.aspx&quot; target=&quot;_blank&quot;&gt;Richard Lea&lt;/a&gt;, from the School of Veterinary Medicine at the University of Nottingham, works closely with stud dogs that are used in an assistance breeding program.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Part of his work involves routine checks on their reproductive health. Two years ago he led a research team that discovered a noticeable decline in sperm quality in dogs over the last couple of decades.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This mirrored problems that have been reported in humans. Researchers in human reproductive health have been increasingly concerned about a decline in the quality of human sperm over roughly the last half-century.&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; src=&quot;https://i.cbc.ca/1.5049257.1552077368!/fileImage/httpImage/image.JPG_gen/derivatives/original_780/cute-golden-retriever.JPG&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;One of the stud dogs routinely monitored for fertility at the University of Nottingham's veterinary clinic (Richard Lea)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&quot;There was a decline in motility by 30 per cent [in dogs], and what's interesting is it parallels similar observations carried out on human sperm,&quot; said Lea.&lt;/p&gt;
&lt;p&gt;This led Lea to suspect that both of these these problems were due to a common environmental exposure.  &lt;/p&gt;
&lt;p&gt;&quot;There are so many modern-day chemicals being produced that affects our general health,&quot; said Lea. &quot;We thought, the dog shares our home environment so they'd be exposed to the same chemicals, and whatever effect might be reflected in humans as well.&quot;&lt;/p&gt;
&lt;h2&gt;Putting theory to the test&lt;/h2&gt;
&lt;p&gt;Lea and his team analyzed the sperm samples collected from the stud dogs and detected several chemical contaminants.  &lt;/p&gt;
&lt;p&gt;Two of the chemicals he identified were DEHP, a phthalate plasticizer used in many common household products, and PCB 153, a persistent pollutant and carcinogen.&lt;/p&gt;
&lt;p&gt;In previous work Lea found that both of these pollutants could be detected in many common dog foods.&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; src=&quot;https://i.cbc.ca/1.5049255.1552074565!/fileImage/httpImage/image.JPG_gen/derivatives/original_780/sperm-dna-fragmentation.JPG&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;Sperm DNA fragmentation, linked to reduced fertility, is observed in both men and dogs in the study. The normal sperm show a “halo” around the head whereas sperm with fragmented DNA have no “halo” (black arrows). (Rebecca Sumner)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Lea and his group exposed new sperm samples collected from donor men and stud dogs living in the same region in the U.K. to DEHP and PCB 153 at similar levels to those detected in the home environment.&lt;/p&gt;
&lt;p&gt;The two chemicals were found to cause a significant decrease in sperm motility — the ability for sperm to swim — and an increase in DNA damage, which has been linked to reduced fertility.&lt;/p&gt;
&lt;p&gt;&quot;Our findings suggest that man-made chemicals that have been widely used in the home and work environment may be responsible for the fall in sperm quality reported in both man and dog that share the same environment,&quot; said Lea.&lt;/p&gt;
&lt;h2&gt;The chemical suspects&lt;/h2&gt;
&lt;p&gt;DEHP comes from a chemical group called phthalates that are used to make plastics flexible and harder to break. They can be found in carpets, plastic toys for children and dog toys.  &lt;/p&gt;
&lt;p&gt;Humans can also be exposed by eating microwaved food stored in plastic containers. Dogs can get exposed by sucking or chewing on soft plastic or vinyl products, and of course, in their food.&lt;/p&gt;
&lt;p&gt;Studies have shown that phthalates can disrupt the operation of male hormones like testosterone. They've also been classified as an endocrine disruptor.&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; src=&quot;https://i.cbc.ca/1.5049246.1553192993!/fileImage/httpImage/image.jpg_gen/derivatives/original_780/dog-with-dog-toy.jpg&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;Dogs can get exposed to the chemical DEHP by sucking or chewing on soft plastic or vinyl toys. (Pierre-Philippe Marcou/AFP/Getty Images)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;PCBs, or polychlorinated biphenyls, were previously used in coolants, electrical devices and in the manufacturing of paints, plastics, and rubber products. PCBs were banned in most jurisdictions around the world starting in the 1970s, when it was discovered that the chemicals were leaching into the environment and causing a variety of health problems.&lt;/p&gt;
&lt;p&gt;But decades after the ban, PCBs still persist in the environment and is detected everywhere today.&lt;/p&gt;
&lt;h2&gt;Future implications&lt;/h2&gt;
&lt;p&gt;&quot;The levels of the chemicals weren't particularly high in sperm samples in humans and dog,&quot; said Lea. &quot;But it turns out that they still produce a marked effect on sperm quality. So I would challenge some of the safety limits of the chemicals.&quot;&lt;/p&gt;
&lt;p&gt;&quot;[The effects] haven't quite reached critical levels yet. But we have to limit further exposure to prevent those chemicals from damaging us even more,&quot; said Lea.&lt;/p&gt;
&lt;p&gt;&quot;We need to review the way those chemicals are regulated in the environment, and look into potential alternatives that don't have detrimental effects.&quot;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 07 Aug 2019 17:17:11 +0000</pubDate>
<dc:creator>pseudolus</dc:creator>
<og:url>https://www.cbc.ca/radio/quirks/august-3-2019-science-of-awe-blue-whales-and-sonar-chromosomes-and-sleep-and-more-1.5047142/man-and-man-s-best-friend-have-both-been-experiencing-declines-in-sperm-quality-1.5047150</og:url>
<og:title>Man and man's best friend have both been experiencing declines in sperm quality | CBC Radio</og:title>
<og:image>https://i.cbc.ca/1.5049259.1553192970!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_620/man-walking-dog.jpg</og:image>
<og:description>Researchers in the U.K. have found a link between the fertility declines in domestic male dogs and similar problems that have been widely reported in human males.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cbc.ca/radio/quirks/august-3-2019-science-of-awe-blue-whales-and-sonar-chromosomes-and-sleep-and-more-1.5047142/man-and-man-s-best-friend-have-both-been-experiencing-declines-in-sperm-quality-1.5047150</dc:identifier>
</item>
<item>
<title>Hackers ship their exploits directly to their target’s mailroom</title>
<link>https://techcrunch.com/2019/08/06/warshipping-hackers-ship-exploits-mail-room/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/08/06/warshipping-hackers-ship-exploits-mail-room/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;Why break into a company’s network when you can just walk right in — literally?&lt;/p&gt;
&lt;p&gt;Gone could be the days of having to find a zero-day vulnerability in a target’s website, or having to scramble for breached usernames and passwords to break through a company’s login pages. And certainly there will be no need to park outside a building and brute-force the Wi-Fi network password.&lt;/p&gt;
&lt;p&gt;Just drop your exploit in the mail and let your friendly postal worker deliver it to your target’s door.&lt;/p&gt;
&lt;p&gt;This newly named technique — dubbed “warshipping” — is not a new concept. Just think of the traditional Trojan horse rolling into the city of Troy, or when hackers drove up to TJX stores and stole customer data by breaking into the store’s Wi-Fi network. But security researchers at &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/ibm&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;ibm&quot;&gt;IBM’s&lt;/a&gt; X-Force Red say it’s a novel and effective way for an attacker to gain an initial foothold on a target’s network.&lt;/p&gt;
&lt;p&gt;“It uses disposable, low cost and low power computers to remotely perform close-proximity attacks, regardless of the cyber criminal’s location,” wrote Charles Henderson, who heads up the IBM offensive operations unit.&lt;/p&gt;
&lt;div id=&quot;attachment_1865347&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-1865347&quot; class=&quot;breakout wp-image-1865347&quot; title=&quot;IBMXFR-Warship-2&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2019/08/IBMXFR-Warship-2.jpg&quot; alt=&quot;IBMXFR Warship 2&quot; width=&quot;1000&quot; height=&quot;563&quot; srcset=&quot;https://techcrunch.com/wp-content/uploads/2019/08/IBMXFR-Warship-2.jpg 1920w, https://techcrunch.com/wp-content/uploads/2019/08/IBMXFR-Warship-2.jpg?resize=150,84 150w, https://techcrunch.com/wp-content/uploads/2019/08/IBMXFR-Warship-2.jpg?resize=300,169 300w, https://techcrunch.com/wp-content/uploads/2019/08/IBMXFR-Warship-2.jpg?resize=768,432 768w, https://techcrunch.com/wp-content/uploads/2019/08/IBMXFR-Warship-2.jpg?resize=680,383 680w, https://techcrunch.com/wp-content/uploads/2019/08/IBMXFR-Warship-2.jpg?resize=50,28 50w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot;/&gt;&lt;p id=&quot;caption-attachment-1865347&quot; class=&quot;wp-caption-text&quot;&gt;A warshipping device (Image: IBM/supplied)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The researchers developed a proof-of-concept device — the warship, which has a similar size to a small phone — into a package and dropped it off in the mail. The device, which cost about $100 to build, was equipped with a 3G-enabled modem, allowing it to be remote-controlled so long as it had cell service. With its onboard wireless chip, the device would periodically scan for nearby networks — like most laptops do when they’re switched on — to track the location of the device in its parcel.&lt;/p&gt;
&lt;p&gt;“Once we see that a warship has arrived at the target destination’s front door, mailroom or loading dock, we are able to remotely control the system and run tools to either passively, or actively, attack the target’s wireless access,” wrote Henderson.&lt;/p&gt;
&lt;p&gt;Once the warship locates a Wi-Fi network from the mail room or the recipient’s desk, it listens for wireless data packets it can use to break into the network. The warship listens for a handshake — the process of authorizing a user to log onto the Wi-Fi network — then sends that scrambled data over the cellular network back to the attacker’s servers, which has far more processing power to crack the hash into a readable Wi-Fi password.&lt;/p&gt;
&lt;p&gt;With access to the Wi-Fi network, the attacker can navigate through the company’s network, seeking out vulnerable systems and exposed data, and steal sensitive data or user passwords.&lt;/p&gt;
&lt;p&gt;All of this could be done covertly without anyone noticing — so long as nobody opens the parcel.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;embed-youtube embed breakout embed--video&quot;&gt;&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/SAf2c6J0xlo?version=3&amp;amp;rel=1&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;“Warshipping has all the characteristics to become a stealthy, effective insider threat — it’s cheap, disposable, and slides right under a targets’ nose — all while the attacker can be orchestrating their attack from the other side of the country,” said Henderson. “With the volume of packages that flow through a mailroom daily — whether it be supplies, gifts or employees’ personal purchases — and in certain seasons those numbers soar dramatically, no one ever thinks to second guess what a package is doing here.”&lt;/p&gt;
&lt;p&gt;The team isn’t releasing proof-of-concept code as to not help attackers, but uses the technique as part of its customer penetration testing services — which help companies discover weak spots in their security posture.&lt;/p&gt;
&lt;p&gt;“If we can educate a company about an attack vector like this, it dramatically reduces the likelihood of the success of it by criminals,” Henderson said.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://techcrunch.com/tag/def-con-2019&quot;&gt;&lt;img src=&quot;https://techcrunch.com/wp-content/uploads/2019/08/def-con-2019-banner.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 07 Aug 2019 16:48:34 +0000</pubDate>
<dc:creator>lordqwerty</dc:creator>
<og:title>With warshipping, hackers ship their exploits directly to their target’s mail room – TechCrunch</og:title>
<og:description>Why break into a company’s network when you can just walk right in — literally? Gone could be the days of having to find a zero-day vulnerability in a target’s website, or having to scramble for breached usernames and passwords to break through a company’s login pages. And certain…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2019/08/parcels-drop.jpg?w=598</og:image>
<og:url>http://social.techcrunch.com/2019/08/06/warshipping-hackers-ship-exploits-mail-room/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/08/06/warshipping-hackers-ship-exploits-mail-room/</dc:identifier>
</item>
<item>
<title>MoviePass Worked Out Great</title>
<link>https://www.bloomberg.com/opinion/articles/2019-08-07/moviepass-worked-out-great</link>
<guid isPermaLink="true" >https://www.bloomberg.com/opinion/articles/2019-08-07/moviepass-worked-out-great</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2019-08-07/moviepass-worked-out-great&quot;&gt;https://www.bloomberg.com/opinion/articles/2019-08-07/moviepass-worked-out-great&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20636152&quot;&gt;https://news.ycombinator.com/item?id=20636152&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 264&lt;/p&gt;
&lt;p&gt;# Comments: 192&lt;/p&gt;
</description>
<pubDate>Wed, 07 Aug 2019 16:22:51 +0000</pubDate>
<dc:creator>airstrike</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=14fdc420-b978-11e9-96f5-ab4e231184dc&amp;url=L29waW5pb24vYXJ0aWNsZXMvMjAxOS0wOC0wNy9tb3ZpZXBhc3Mtd29ya2VkLW91dC1ncmVhdA==</dc:identifier>
</item>
<item>
<title>FedEx Ends Ground-Delivery Deal with Amazon</title>
<link>https://www.bloomberg.com/news/articles/2019-08-07/fedex-deepens-pullback-from-amazon-as-ground-delivery-deal-ends</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2019-08-07/fedex-deepens-pullback-from-amazon-as-ground-delivery-deal-ends</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-08-07/fedex-deepens-pullback-from-amazon-as-ground-delivery-deal-ends&quot;&gt;https://www.bloomberg.com/news/articles/2019-08-07/fedex-deepens-pullback-from-amazon-as-ground-delivery-deal-ends&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20634546&quot;&gt;https://news.ycombinator.com/item?id=20634546&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 213&lt;/p&gt;
&lt;p&gt;# Comments: 207&lt;/p&gt;
</description>
<pubDate>Wed, 07 Aug 2019 13:36:33 +0000</pubDate>
<dc:creator>dsgerard</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=14fdeb30-b978-11e9-9bfd-e37238f8c221&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOS0wOC0wNy9mZWRleC1kZWVwZW5zLXB1bGxiYWNrLWZyb20tYW1hem9uLWFzLWdyb3VuZC1kZWxpdmVyeS1kZWFsLWVuZHM=</dc:identifier>
</item>
<item>
<title>Show HN: Data Structures and Algorithms in JavaScript</title>
<link>https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript</link>
<guid isPermaLink="true" >https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/418605/59557258-10742880-8fa3-11e9-84fb-4d66a9d89faa.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/418605/59557258-10742880-8fa3-11e9-84fb-4d66a9d89faa.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://circleci.com/gh/amejiarosario/dsa.js-data-structures-and-algorithms-in-javascript&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f330cb3b89d13edc83b272f691cc46d1f6db5bc7/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f616d656a6961726f736172696f2f6473612e6a732d646174612d737472756374757265732d616c676f726974686d732d6a6176617363726970742f6d61737465722e737667&quot; alt=&quot;CircleCI&quot; data-canonical-src=&quot;https://img.shields.io/circleci/build/github/amejiarosario/dsa.js-data-structures-algorithms-javascript/master.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://badge.fury.io/js/dsa.js&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/0226d969f592ba0527dce87e44b7f698a9f0e893/68747470733a2f2f62616467652e667572792e696f2f6a732f6473612e6a732e737667&quot; alt=&quot;NPM version&quot; data-canonical-src=&quot;https://badge.fury.io/js/dsa.js.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://dsajs-slackin.herokuapp.com&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a25a57f74d2bdcb53210fe6cb2763d99ed39b7c2/68747470733a2f2f6473616a732d736c61636b696e2e6865726f6b756170702e636f6d2f62616467652e737667&quot; alt=&quot;chat&quot; data-canonical-src=&quot;https://dsajs-slackin.herokuapp.com/badge.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the coding implementations of the &lt;a href=&quot;https://books.adrianmejia.com/dsajs-data-structures-algorithms-javascript/&quot; rel=&quot;nofollow&quot;&gt;DSA.js book&lt;/a&gt; and the repo for the NPM package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In this repository, you can find the implementation of algorithms and data structures in JavaScript. This material can be used as a reference manual for developers, or you can refresh specific topics before an interview. Also, you can find ideas to solve problems more efficiently.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/418605/46118890-ba721180-c1d6-11e8-82bc-6a671428b422.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/418605/46118890-ba721180-c1d6-11e8-82bc-6a671428b422.png&quot; alt=&quot;Interactive Data Structures&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can clone the repo or install the code from NPM:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
npm install dsa.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then you can import it into your programs or CLI&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; { &lt;span class=&quot;pl-c1&quot;&gt;LinkedList&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;Queue&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;Stack&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;dsa.js&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a full list of all the exposed data structures and algorithms &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/src/index.js&quot;&gt;see&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;p&gt;Algorithms are an essential toolbox for every programmer.&lt;/p&gt;
&lt;p&gt;You usually need algorithms when you have to sort data, search for a value, transform data, scale your code to many users, to name a few. Algorithms are just the step you follow to solve a problem while data structures are where you store the data for later manipulation. Both combined create programs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Algorithms + Data Structures = Programs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most programming languages and libraries indeed provide implementations for basic data structures and algorithms. However, to make use of data structures properly, you have to know the tradeoffs so you can choose the best tool for the job.&lt;/p&gt;
&lt;p&gt;This material is going to teach you to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;🛠 Apply strategies to tackle algorithm questions. Never to get stuck again. Ace those interviews!&lt;/li&gt;
&lt;li&gt;✂️ Construct efficient algorithms. Learn how to break down problems in manageable pieces.&lt;/li&gt;
&lt;li&gt;🧠 Improve your problem-solving skills and become a stronger developer by understanding fundamental computer science concepts.&lt;/li&gt;
&lt;li&gt;🤓 Cover essential topics, such as big O time, data structures, and must-know algorithms. Implement 10+ data structures from scratch.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;What's Inside&lt;/h2&gt;
&lt;p&gt;All the code and explanations are available on this repo. You can dig through the links and code examples from the (&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/src&quot;&gt;src folder&lt;/a&gt;). However, the inline code examples are not expanded (because of Github's asciidoc limitations), but you can follow the path and see the implementation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you prefer to consume the information more linearly then the &lt;a href=&quot;https://books.adrianmejia.com/dsajs-data-structures-algorithms-javascript/&quot; rel=&quot;nofollow&quot;&gt;book format&lt;/a&gt; would be more appropriate for you.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The topics are divided into four main categories as you can see below:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(You can click on the triangle ⯈ to expand the topics)&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;📈 &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part01-algorithms-analysis.asc&quot;&gt;Algorithms Analysis&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;details&gt;Computer Science nuggets without all the mumbo-jumbo
&lt;hr/&gt;&lt;h3&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part01/algorithms-analysis.asc&quot;&gt;Computer Science nuggets without all the mumbo-jumbo&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;Learn to calculate run time from code examples&lt;/h4&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/images/image4.png&quot;&gt;&lt;img src=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/raw/master/book/images/image4.png&quot; alt=&quot;Translating lines of code to an approximate number of operations&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;Learn how to compare algorithms using Big O notation.
&lt;hr/&gt;&lt;h3&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part01/big-o-examples.asc#finding-if-an-array-is-empty&quot;&gt;Learn how to compare algorithms using Big O notation.&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;Comparing algorithms using Big O notation&lt;/h4&gt;
&lt;p&gt;Let's say you want to find the duplicates on an array. Using Big O notation, we can compare different implementations that do the same but they take different time to complete.&lt;/p&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;8 examples to explain with code how to calculate time complexity
&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part01/big-o-examples.asc#summary&quot;&gt;8 examples to explain with code how to calculate time complexity&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Most common time complexities&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part01/big-o-examples.asc#summary&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/418605/59617342-2a715080-90f4-11e9-9de9-9315fb0133f9.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Time complexity graph&lt;/h4&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/images/image5.png&quot;&gt;&lt;img src=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/raw/master/book/images/image5.png&quot; alt=&quot;Most common time complexities&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;/blockquote&gt;
&lt;h3&gt;🥞 &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part02-linear-data-structures.asc&quot;&gt;Linear Data Structures&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;details&gt;Understand the ins and outs of the most common data structures.
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part02-linear-data-structures.asc&quot;&gt;Understand the ins and outs of the most common data structures&lt;/a&gt;&lt;/h4&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;When to use an Array or Linked List. Know the tradeoffs.
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part02/array-vs-list-vs-queue-vs-stack.asc&quot;&gt;When to use an Array or Linked List. Know the tradeoffs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Use Arrays when…&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You need to access data in random order fast (using an index).&lt;/li&gt;
&lt;li&gt;Your data is multi-dimensional (e.g., matrix, tensor).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Use Linked Lists when:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You will access your data sequentially.&lt;/li&gt;
&lt;li&gt;You want to save memory and only allocate memory as you need it.&lt;/li&gt;
&lt;li&gt;You want constant time to remove/add from extremes of the list.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;Build a List, Stack, and a Queue.
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part02-linear-data-structures.asc&quot;&gt;Build a List, Stack and a Queue from scratch&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Build any of these data structures from scratch:&lt;/p&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;/blockquote&gt;
&lt;h3&gt;🌲 &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part03-graph-data-structures.asc&quot;&gt;Non-Linear Data Structures&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;details&gt;Understand one of the most versatile data structure of all: Maps
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part03/map.asc&quot;&gt;HashMaps&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Learn how to implement different types of Maps such as:&lt;/p&gt;
&lt;p&gt;Also, &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part03/time-complexity-graph-data-structures.asc&quot;&gt;learn the difference between the different Maps implementations&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt; is more time-efficient. A &lt;code&gt;TreeMap&lt;/code&gt; is more space-efficient.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeMap&lt;/code&gt; search complexity is &lt;em&gt;O(log n)&lt;/em&gt;, while an optimized &lt;code&gt;HashMap&lt;/code&gt; is &lt;em&gt;O(1)&lt;/em&gt; on average.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt;’s keys are in insertion order (or random depending on the implementation). &lt;code&gt;TreeMap&lt;/code&gt;’s keys are always sorted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeMap&lt;/code&gt; offers some statistical data for free such as: get minimum, get maximum, median, find ranges of keys. &lt;code&gt;HashMap&lt;/code&gt; doesn’t.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TreeMap&lt;/code&gt; has a guarantee always an &lt;em&gt;O(log n)&lt;/em&gt;, while &lt;code&gt;HashMap&lt;/code&gt;s has an amortized time of &lt;em&gt;O(1)&lt;/em&gt; but in the rare case of a rehash, it would take an &lt;em&gt;O(n)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;Know the properties of Graphs and Trees.
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part03-graph-data-structures.asc&quot;&gt;Know the properties of Graphs and Trees&lt;/a&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part03/graph.asc&quot;&gt;Graphs&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Know all the graphs properties with many images and illustrations.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/images/image46.png&quot;&gt;&lt;img src=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/raw/master/book/images/image46.png&quot; alt=&quot;graph example with USA airports&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Graphs&lt;/strong&gt;: data &lt;strong&gt;nodes&lt;/strong&gt; that can have a connection or &lt;strong&gt;edge&lt;/strong&gt; to zero or more adjacent nodes. Unlike trees, nodes can have multiple parents, loops. &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/src/data-structures/graphs/graph.js&quot;&gt;Code&lt;/a&gt; | &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part03/graph.asc#graph-complexity&quot;&gt;Graph Time Complexity&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part03/tree-intro.asc&quot;&gt;Trees&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Learn all the different kinds of trees and their properties.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/images/image31.jpg&quot;&gt;&lt;img src=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/raw/master/book/images/image31.jpg&quot; alt=&quot;tree data structure properties&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trees&lt;/strong&gt;: data nodes has zero or more adjacent nodes a.k.a. children. Each node can only have one parent node otherwise is a graph not a tree. &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/src/data-structures/trees&quot;&gt;Code&lt;/a&gt; | &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part03/tree-intro.asc&quot;&gt;Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;Implement a binary search tree for fast lookups.
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part03/binary-search-tree.asc&quot;&gt;Implement a binary search tree for fast lookups&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;From unbalanced BST to balanced BST&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;1                           2
  \                       /   \
   2        =&amp;gt;           1     3
    \
     3
&lt;/code&gt;
&lt;/pre&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;/blockquote&gt;
&lt;h3&gt;⚒ &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part04-algorithmic-toolbox.asc&quot;&gt;Algorithmic Toolbox&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;details&gt;Never get stuck solving a problem with 7 simple steps
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part04-algorithmic-toolbox.asc&quot;&gt;Never get stuck solving a problem with 7 simple steps&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;&lt;li&gt;Understand the problem&lt;/li&gt;
&lt;li&gt;Build a simple example (no edge cases yet)&lt;/li&gt;
&lt;li&gt;Brainstorm solutions (greedy algorithm, Divide and Conquer, Backtracking, brute force)&lt;/li&gt;
&lt;li&gt;Test your answer on the simple example (mentally)&lt;/li&gt;
&lt;li&gt;Optimize the solution&lt;/li&gt;
&lt;li&gt;Write Code, yes, now you can code.&lt;/li&gt;
&lt;li&gt;Test your written code&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Full details &lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part04-algorithmic-toolbox.asc&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;Master the most popular sorting algorithms (merge sort, quicksort, insertion sort, etc.)
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part04/sorting-algorithms.asc&quot;&gt;Master the most popular sorting algorithms&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We are going to explore three essential sorting algorithms O(n^2), which have low overhead:&lt;/p&gt;
&lt;p&gt;and then discuss efficient sorting algorithms O(n log n) such as:&lt;/p&gt;
&lt;hr/&gt;&lt;/details&gt;&lt;details&gt;Learn different approaches to solve problems such as divide and conquer, dynamic programming, greedy algorithms, and backtracking.
&lt;hr/&gt;&lt;h4&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/part04-algorithmic-toolbox.asc&quot;&gt;Learn different approaches to solve algorithmic problems&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We are going to discuss the following techniques for solving algorithms problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part04/greedy-algorithms.asc&quot;&gt;Greedy Algorithms&lt;/a&gt;: makes greedy choices using heuristics to find the best solution without looking back.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part04/dynamic-programming.asc&quot;&gt;Dynamic Programming&lt;/a&gt;: a technique for speeding up recursive algorithms when there are many &lt;em&gt;overlapping subproblems&lt;/em&gt;. It uses &lt;em&gt;memoization&lt;/em&gt; to avoid duplicating work.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part04/divide-and-conquer.asc&quot;&gt;Divide and Conquer&lt;/a&gt;: &lt;em&gt;divide&lt;/em&gt; problems into smaller pieces, &lt;em&gt;conquer&lt;/em&gt; each subproblem and then &lt;em&gt;join&lt;/em&gt; the results.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/book/content/part04/backtracking.asc&quot;&gt;Backtracking&lt;/a&gt;: search &lt;em&gt;all (or some)&lt;/em&gt; possible paths. However, it stops and &lt;em&gt;go back&lt;/em&gt; as soon as notice the current solution is not working.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Brute Force&lt;/em&gt;: generate all possible solutions and tries all of them. (Use it as a last resort or as the starting point).&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;/details&gt;&lt;/blockquote&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;details&gt;How would I apply these to my day-to-day work?
&lt;p&gt;As a programmer, we have to solve problems every day. If you want to solve problems well, then it's good to know about a broad range of solutions. A lot of times, it's more efficient to learn existing resources than stumble upon the answer yourself. The more tools and practice you have, the better. This book helps you understand the tradeoffs among data structures and reason about algorithms performance.&lt;/p&gt;
&lt;/details&gt;&lt;details&gt;Why you created this repo/book?
&lt;p&gt;There are not many books about Algorithms in JavaScript. This material fills the gap. Also, it's good practice :)&lt;/p&gt;
&lt;/details&gt;&lt;details&gt;Is there anyone I can contact if I have questions about something in particular?
&lt;p&gt;Yes, open an issue or ask questions on the [slack channel](&lt;a href=&quot;https://dsajs-slackin.herokuapp.com&quot; rel=&quot;nofollow&quot;&gt;https://dsajs-slackin.herokuapp.com&lt;/a&gt;).&lt;/p&gt;
&lt;/details&gt;&lt;h2&gt;Book&lt;/h2&gt;
&lt;p&gt;This project is also available in a &lt;a href=&quot;https://books.adrianmejia.com/dsajs-data-structures-algorithms-javascript/&quot; rel=&quot;nofollow&quot;&gt;book&lt;/a&gt;. You will get a nicely formatted PDF with 180+ pages + ePub and Mobi version.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://books.adrianmejia.com/dsajs-data-structures-algorithms-javascript/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/55701d7648c91b20b36501ef71bb93797be59dca/68747470733a2f2f626f6f6b732e61647269616e6d656a69612e636f6d2f6473616a732d646174612d737472756374757265732d616c676f726974686d732d6a6176617363726970742f696d616765732f6473616a732d636f7665722d33323068322e706e67&quot; alt=&quot;dsa.js book&quot; data-canonical-src=&quot;https://books.adrianmejia.com/dsajs-data-structures-algorithms-javascript/images/dsajs-cover-320h2.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Support&lt;/h2&gt;
&lt;p&gt;Reach out to me at one of the following places!&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript/blob/master/LICENSE&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/128b467064ea512655633af393e54db19b50f1a9/68747470733a2f2f696d672e736869656c64732e696f2f3a6c6963656e73652d6d69742d626c75652e7376673f7374796c653d666c61742d737175617265&quot; alt=&quot;License&quot; data-canonical-src=&quot;https://img.shields.io/:license-mit-blue.svg?style=flat-square&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/190d9324e4ebf798baee2f6b02495fcd1fdb60f0/687474703a2f2f6170702e75786572616e616c79746963732e636f6d2f696d616765312e706e673f7578613d6769746875622d6473616a73&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/190d9324e4ebf798baee2f6b02495fcd1fdb60f0/687474703a2f2f6170702e75786572616e616c79746963732e636f6d2f696d616765312e706e673f7578613d6769746875622d6473616a73&quot; alt=&quot;&quot; data-canonical-src=&quot;http://app.uxeranalytics.com/image1.png?uxa=github-dsajs&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 07 Aug 2019 13:18:21 +0000</pubDate>
<dc:creator>admerox</dc:creator>
<og:image>https://repository-images.githubusercontent.com/77558427/90208980-61e4-11e9-8451-7fc1d84edd95</og:image>
<og:type>object</og:type>
<og:title>amejiarosario/dsa.js-data-structures-algorithms-javascript</og:title>
<og:url>https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript</og:url>
<og:description>Data Structures and Algorithms explained and implemented in JavaScript - amejiarosario/dsa.js-data-structures-algorithms-javascript</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/amejiarosario/dsa.js-data-structures-algorithms-javascript</dc:identifier>
</item>
<item>
<title>Technical Vision for Qt 6</title>
<link>https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/</link>
<guid isPermaLink="true" >https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/</guid>
<description>&lt;p&gt;7 years ago, Qt 5 was released. Since then, a lot of things have changed in the world around us, and it is now time to define a vision for a new major version. This blog post captures the most important points that can and should define Qt 6.&lt;/p&gt;
&lt;p&gt;Qt 6 will be a continuation of what we have been doing in the Qt 5 series and should as such not be disruptive to our users. But a new major version will give us a higher degree of freedom to implement new features, functionality and better support the requirements of today and tomorrow than we currently can within the Qt 5 series. As described in more detail below, Qt 6 will aim for a large degree of compatibility with the Qt 5 series. We are also still working on new versions of Qt 5, and we’re aiming to bring some of the features that will define Qt 6 in a slightly reduced form to Qt 5.14 and Qt 5.15 LTS. With the feature freeze of Qt 5.14, more R&amp;amp;D focus will shift towards Qt 6, and we’re aiming to have Qt 6.0 ready for a first release by the end of 2020. Before we dive into all the things that will be new, let’s also remember some of the core values of Qt for our users, to define the things we don’t want to change.&lt;/p&gt;
&lt;h3&gt;What makes Qt valuable to our users?&lt;/h3&gt;
&lt;p&gt;Qt is a horizontal product that is being used in many different markets. The core values Qt has for our customers and users are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Its &lt;strong&gt;cross-platform&lt;/strong&gt; nature, allowing users to deploy their applications to all desktop, mobile and embedded platforms using one technology and from a single code base&lt;/li&gt;
&lt;li&gt;Its &lt;strong&gt;scalability&lt;/strong&gt; from low-end, single-purpose devices to high-end complex desktop applications or connected system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;World-class APIs and tools and documentation&lt;/strong&gt;, simplifying the creation of applications and devices&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Maintainability, stability, and compatibility&lt;/strong&gt;, allowing to maintain large code bases with minimal effort&lt;/li&gt;
&lt;li&gt;A large &lt;strong&gt;developer ecosystem&lt;/strong&gt; with more than 1 million users&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;A new version of Qt needs to adjust our product to new market demands while keeping the 5 items above at the heart of what we’re doing.&lt;/p&gt;
&lt;p&gt;The desktop market is at the root of our offering and is a strong and important market for Qt. It is where most of our users get the first contact with Qt and forms the basis of our tooling. Keeping it healthy and growing is a pre-requirement to be able to grow also in other markets.&lt;/p&gt;
&lt;p&gt;Embedded and connected devices are where we have our biggest growth. Touch screens are coming to an exponentially increasing number of devices, but there is strong pressure on the price point of the hardware for these devices. Low-end chipsets, microcontrollers, combined with small to medium-sized touch screens will be used everywhere. Most of those devices will have relatively simple functionality but require polished and smooth user interfaces. Large volumes of such devices will be created, and we need to ensure we can target that space with our offering to be able to live up our scalability promise.&lt;/p&gt;
&lt;p&gt;At the same time, user interfaces at the high end of the device spectrum will continue to increase in complexity, containing thousands of different screens and many applications. Merging 2D and 3D elements into one user interface will be common, as will be the usage of augmented and virtual reality.&lt;/p&gt;
&lt;p&gt;Elements of artificial intelligence will be more commonly used in applications and devices, and we will need to have easy ways to integrate with those.&lt;/p&gt;
&lt;p&gt;The strong growth in the number of connected devices being created as well as much higher requirements on user experience makes it more important for us to focus on world-class tooling to simplify the creation of applications and devices. Integrating UX designers into the development workflow is one of our goals, but there will be many other areas where we need to try to simplify the lives of our users.&lt;/p&gt;
&lt;p&gt;Qt 6 will be a new major version for Qt. The main goal with such a new major version is to prepare Qt for the requirements coming in 2020 and beyond, clean up our codebase and make it easier to maintain. As such the focus will be on those items that require architectural changes within Qt and cannot be done without breaking some level of compatibility with Qt 5.x.&lt;/p&gt;
&lt;p&gt;Below are some of the key changes we need to make in Qt to make it fit for the next years to come.&lt;/p&gt;
&lt;h3&gt;Next-generation QML&lt;/h3&gt;
&lt;p&gt;QML and Qt Quick have been the main technologies fueling our growth over the last years. The intuitive ways of creating User Interfaces using those technologies are a unique selling point of our offering.&lt;/p&gt;
&lt;p&gt;But QML, as it was created for Qt 5, has some quirks and limitations. This, in turn, means that there is the potential for significant enhancements, that we are planning to implement with Qt 6. The main changes planned here are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introduce strong typing. &lt;/strong&gt;Weak typing makes it hard for our users to apply large changes to their codebases. A strong type system allows for IDEs and other tools to support our users in this task and dramatically ease the maintenance. Also, we will be able to generate much better-performing code and reduce overhead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make JavaScript an optional feature of QML. &lt;/strong&gt;Having a full JavaScript engine when using QML can complicate things and is an overhead especially when targeting low-end hardware such as microcontrollers. It is however extremely useful in many use cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remove QML versioning.&lt;/strong&gt; By simplifying certain lookup rules in QML and changing the way context properties work, we can remove the need for versioning in QML. This, in turn, will lead to large simplifications in the QML engine, greatly simplify our workload of maintaining Qt Quick and simplify usage of QML and Qt Quick for our users&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remove the duplication of data structures between QObject and QML&lt;br/&gt;&lt;/strong&gt;Currently, quite some data structures are duplicated between our meta-object system and QML, degrading startup performance and increasing memory usage. By unifying those data structures, we will be able to cut away most of that overhead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid runtime generated data structures. &lt;/strong&gt;This relates to the point before, where many of those duplicated data structures are currently being generated at runtime. It should be perfectly possible to generate most of them at compile time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Support compiling QML to efficient C++ and native code. &lt;/strong&gt;With strong typing and simpler lookup rules we can convert QML to efficient C++ and native code, significantly increasing runtime performance&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Support hiding implementation details. &lt;/strong&gt;‘Private’ methods and properties have been a long-time requirement to be able to hide data and functionality in QML components&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Better tooling integration. &lt;/strong&gt;Our current code model for QML is often incomplete, making refactoring, and detection of errors at compile time difficult to impossible. With the above changes, it should be possible to offer compile-time diagnostics that can compete with C++, as well as much improved refactoring support.&lt;/p&gt;
&lt;h3&gt;Next-generation graphics&lt;/h3&gt;
&lt;p&gt;A lot of things have changed in the graphics area since we did Qt 5.0, leading to us having to do significant changes to our graphics stack to stay competitive.&lt;/p&gt;
&lt;p&gt;With Qt 5, we used OpenGL as the unified API for 3D graphics. Since then a host of new APIs have been defined. Vulkan is the designated successor of OpenGL on Linux, Apple is pushing for Metal, and Microsoft has Direct 3D. This means that Qt will in the future have to seamlessly work with all those APIs. To make that possible a new layer abstracting the graphics APIs (like QPA for the platform integration) called the Rendering Hardware Interface (RHI) has to be defined. We will need to base all our rendering infrastructure (QPainter, the Qt Quick Scenegraph, and our 3D support) on top of that layer.&lt;/p&gt;
&lt;p&gt;The set of different graphics APIs also leads to us having to support different shading languages. The Qt Shader Tools module will help us to cross-compile shaders both at compile and at runtime.&lt;/p&gt;
&lt;p&gt;3D is playing a more and more important role, and our current offering doesn’t have a unified solution for creating UIs that contain both 2D and 3D elements. Integrating QML with content from Qt 3D or 3D Studio is currently cumbersome and causes some performance overhead. In addition, it is impossible to sync animations and transitions on a frame by frame level between 2D and 3D content.&lt;/p&gt;
&lt;p&gt;The new integration of 3D content with Qt Quick is aiming to solve this problem. In this case, a full new renderer will allow rendering 2D and 3D content together and support arbitrary nesting between the two. This will turn QML into our UI definition language for 3D UIs and remove the need for the UIP format. We will provide a technology preview of the ‘new’ Qt Quick with 3D support already with Qt 5.14, more information will come in a separate blog post.&lt;/p&gt;
&lt;p&gt;Finally, the new graphics stack needs to be supported by a decent pipeline for graphical assets, that allows preparing those at compile time for the target hardware and use cases in question. Convert PNG files to compressed textures, compile many of them into texture atlases, convert shaders and meshes into optimized binary formats and more.&lt;/p&gt;
&lt;p&gt;We also aim to bring a unified theming/styling engine to Qt 6, which will allow us to get a native look &amp;amp; feel on Desktop and mobile platforms to both Qt Widgets and Qt Quick.&lt;/p&gt;
&lt;h3&gt;Unified and consistent tooling&lt;/h3&gt;
&lt;p&gt;Our graphical tooling to create User interfaces has been split into two with Qt 3D Studio and Qt Design Studio. Additionally, Qt 3D Studio is slightly disconnected from the rest of Qt leading to quite some duplicated efforts.&lt;/p&gt;
&lt;p&gt;We will unify those by merging the required functionality from Qt 3D Studio back into Design Studio. Design Studio shares a lot of code and the application/plugin framework with Qt Creator allowing for a great design experience and giving us the tools to bridge the gap between designers and developers.&lt;/p&gt;
&lt;p&gt;The Design tooling also needs good integration with content creation tools such as Photoshop, Sketch, Illustrator, Maya, 3D Max, and others.&lt;/p&gt;
&lt;p&gt;The developer tooling needs a lot of focus and attention so that we can offer the best in class support for C++, QML, and Python. A unified tooling offering also implies that developers can easily use the design functionality from within Qt Creator and that UX designers can benefit from features of the developer tooling such as compiling a project or on-device testing.&lt;/p&gt;
&lt;p&gt;QMake as the build system used in Qt 5 has lots of quirks and limitations. For Qt 6, we aim to use CMake as a standard 3rd party build system to build Qt itself. CMake is by far the most widely used build system in the C++ world, and better integration with it is sorely needed. We will continue to support our users on QMake, but not develop it further or use it to build the Qt framework itself.&lt;/p&gt;
&lt;h3&gt;Enhancing our C++ APIs&lt;/h3&gt;
&lt;p&gt;C++ has changed a lot over the last years. While we had to base Qt 5.0 on C++98, we can now rely on C++17 for Qt 6. This implies that C++ offers a lot more functionality out of the box that wasn’t available when we did Qt 5. Our goal with Qt 6 has to be to better integrate with this functionality, without losing backward compatibility.&lt;/p&gt;
&lt;p&gt;For Qt 6, we aim to make some of the functionality introduced with QML and Qt Quick available from C++. We work towards introducing a new property system for QObject and related classes, integrate the binding engine from QML into the core of Qt and make it available from C++. The new property system and the binding engine will lead to a significant reduction in runtime overhead and memory consumption for bindings and make them accessible for all parts of Qt, not only Qt Quick.&lt;/p&gt;
&lt;h3&gt;Language support&lt;/h3&gt;
&lt;p&gt;With Qt 5.12, we introduced support for Python, and we also added the browser as a new platform through Qt for WebAssembly. Keeping and further extending that cross-platform focus will be an important part of the Qt 6 series after 6.0 has been released.&lt;/p&gt;
&lt;h3&gt;Compatibility with Qt 5 and incremental improvements&lt;/h3&gt;
&lt;p&gt;Compatibility with older versions is extremely important and is a major requirement when we develop Qt 6. There are billions of lines of code written using our framework and any incompatible change we do will thus have a cost for our users. Furthermore, the more work the change to Qt 6 requires from our users the slower the adoption will be, which leads to more cost on our side to maintain the last version of Qt 5.&lt;/p&gt;
&lt;p&gt;As such, we should aim to avoid breaking Qt in a way that triggers compile-time or runtime errors in our users’ codebase. If we must break compatibility, a compile-time error is preferable over a silent breakage at runtime (as those are much harder to detect).&lt;/p&gt;
&lt;p&gt;While we do need to remove certain deprecated parts of Qt, we need to ensure that our users have the functionality they require. That implies that key functionality, such as Qt Widgets and other parts used by a large portion of our users, will, of course, stay available.&lt;/p&gt;
&lt;p&gt;We are planning for many incremental improvements to our core classes and functionality that we could not do in the Qt 5 series. The aim is to keep full source compatibility, but as we can break binary compatibility with Qt 6, we can do quite a lot of cleanups and improvements that couldn’t be done within Qt 5.&lt;/p&gt;
&lt;p&gt;Nevertheless, we need to move forward, and some house cleaning is required with Qt 6. We will remove most functionality (functions, classes or modules) that have been deprecated in Qt 5. This house cleaning will help free up our developers’ time in the longer term and allow us to have more focus on the maintained and current codebase.&lt;/p&gt;
&lt;p&gt;Porting away from those deprecated parts does however need to be as simple as possible and our users can ideally do this incrementally using Qt 5.15 LTS. Our goal should be that Qt 6 is compatible enough with Qt 5.15 LTS so that one can easily maintain a large code base that can compile against both versions at the same time.&lt;/p&gt;
&lt;h3&gt;Marketplace &amp;amp; technical product structure&lt;/h3&gt;
&lt;p&gt;In addition to improving the Qt framework and tools, we aim to create a new marketplace for components and development tools. The marketplace will be focused on our direct users developing and designing applications and embedded devices, not targeted at consumers. As such it will be a central rallying point for the Qt ecosystem. It will give 3rd parties a place to publish their additions to Qt, allowing for both free and paid content.&lt;/p&gt;
&lt;p&gt;Qt has been growing a lot over the last years, to the point where delivering a new version of it is a major undertaking. With Qt 6 there is an opportunity to restructure our product offering and have a smaller core product that contains the essential frameworks and tooling. We will use the market place to deliver our add-on frameworks and tools, not as a tightly coupled bundle with the core Qt product. This will give us additional flexibility on when and how we deliver things and allows us to decouple release schedules for some add-ons.&lt;/p&gt;
&lt;h3&gt;Give us your feedback and get involved&lt;/h3&gt;
&lt;p&gt;The technical vision will evolve further until the first release of Qt 6. While I believe that this document captures many of the most important points for the next version of Qt it is certainly not complete. If you have any further ideas, please get involved in the development of Qt 6 and discussions around it through Qt’s &lt;a href=&quot;https://www.qt.io/contribute-to-qt&quot;&gt;open governance model&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;ssba ssba-wrap&quot; readability=&quot;6&quot;&gt;
&lt;div readability=&quot;7&quot;&gt;Do you like this? Share it&lt;br/&gt;&lt;a data-site=&quot;linkedin&quot; class=&quot;ssba_linkedin_share ssba_share_link&quot; href=&quot;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/qt_linkedin.png&quot; alt=&quot;Share on LinkedIn&quot; title=&quot;LinkedIn&quot; class=&quot;ssba ssba-img&quot;/&gt;&lt;/a&gt;&lt;a data-site=&quot;&quot; class=&quot;ssba_google_share&quot; href=&quot;https://plus.google.com/share?url=https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/qt_googleplus.png&quot; title=&quot;Share on Google+&quot; class=&quot;ssba ssba-img&quot; alt=&quot;Google+&quot;/&gt;&lt;/a&gt;&lt;a data-site=&quot;&quot; class=&quot;ssba_facebook_share&quot; href=&quot;http://www.facebook.com/sharer.php?u=https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/qt_facebook.png&quot; title=&quot;Facebook&quot; class=&quot;ssba ssba-img&quot; alt=&quot;Share on Facebook&quot;/&gt;&lt;/a&gt;&lt;a data-site=&quot;&quot; class=&quot;ssba_twitter_share&quot; href=&quot;http://twitter.com/share?url=https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/&amp;amp;text=Technical+vision+for+Qt+6+&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/06/qt_twitter.png&quot; title=&quot;Twitter&quot; class=&quot;ssba ssba-img&quot; alt=&quot;Tweet about this on Twitter&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

</description>
<pubDate>Wed, 07 Aug 2019 12:37:35 +0000</pubDate>
<dc:creator>pjmlp</dc:creator>
<og:type>article</og:type>
<og:title>Technical vision for Qt 6 - Qt Blog</og:title>
<og:description>7 years ago, Qt 5 was released. Since then, a lot of things have changed in the world around us, and it is now time to define a vision for a new major version. This blog post captures the most important points that can and should define Qt 6. Qt 6 will be a continuation …</og:description>
<og:url>https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/</og:url>
<og:image>https://qt-blog-uploads.s3.amazonaws.com/wp-content/uploads/2016/05/TheQtCompany_logo_1200x630.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.qt.io/blog/2019/08/07/technical-vision-qt-6/</dc:identifier>
</item>
</channel>
</rss>