<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Elliott Management buys stake in Twitter and seeks to oust Jack Dorsey</title>
<link>https://www.theguardian.com/technology/2020/feb/29/paul-singer-elliott-management-twitter-jack-dorsey</link>
<guid isPermaLink="true" >https://www.theguardian.com/technology/2020/feb/29/paul-singer-elliott-management-twitter-jack-dorsey</guid>
<description>&lt;p&gt;A major Republican donor has purchased a stake in Twitter and is reportedly seeking to oust its chief executive, &lt;a href=&quot;https://www.theguardian.com/technology/jack-dorsey&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;Jack Dorsey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bloomberg News &lt;a href=&quot;https://www.bloomberg.com/news/articles/2020-02-29/singer-s-elliott-is-said-to-seek-to-replace-twitter-ceo-dorsey?utm_medium=social&amp;amp;utm_campaign=socialflow-organic&amp;amp;utm_source=twitter&amp;amp;utm_content=business&amp;amp;cmpid=socialflow-twitter-business&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;first reported&lt;/a&gt; that Elliott Management has taken a “sizable stake” and “and plans to push for changes at the social media company, including replacing Dorsey”.&lt;/p&gt;
&lt;p&gt;Paul Singer, &lt;a href=&quot;https://www.elliottmgmt.com/who-we-are/paul-singer/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;the billionaire founder of Elliott Management&lt;/a&gt;, is a Republican mega-donor who opposed Donald Trump during the real-estate magnate’s run for the presidential nomination &lt;a href=&quot;https://www.politico.com/story/2018/06/08/trump-megadonors-gop-fundraising-632671&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;but has since come onside&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After a White House visit in February 2017, &lt;a href=&quot;https://www.cnbc.com/2017/02/16/trump-says-billionaire-former-critic-paul-singer-visited-white-house.html&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Trump said Singer&lt;/a&gt; “was very much involved with the anti-Trump or, as they say, ‘Never Trump’, and Paul just left, and he’s given us his total support and it’s all about unification”.&lt;/p&gt;
&lt;p&gt;Trump famously communicates with the public largely through &lt;a href=&quot;https://www.theguardian.com/technology/twitter&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;Twitter&lt;/a&gt;, at the expense of traditional media strategy.&lt;/p&gt;
&lt;p&gt;Twitter made headlines in October when it announced &lt;a href=&quot;https://www.theguardian.com/technology/2019/oct/30/twitter-ban-political-advertising-us-election&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;a ban on political advertising&lt;/a&gt;. Its use and &lt;a href=&quot;https://www.theguardian.com/us-news/2020/feb/09/nancy-pelosi-trump-state-of-the-union-video-twitter-facebook&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;potential manipulation&lt;/a&gt; by politicians of all stripes, from Trump to &lt;a href=&quot;https://www.theguardian.com/us-news/2020/feb/22/twitter-suspends-pro-bloomberg-accounts-over-platform-manipulation&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Democratic candidate Mike Bloomberg&lt;/a&gt;, remains a source of fierce contention.&lt;/p&gt;
&lt;p&gt;Dorsey, a co-founder of Twitter, is also chief executive of Square, an online payment company. In November, he announced a plan &lt;a href=&quot;https://www.theguardian.com/technology/2019/nov/29/twitter-jack-dorsey-africa-move&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;to live and work in Africa for part of each year&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was reported that those moves were motivations for Singer’s desire to push Dorsey out. Other stakeholders have voiced concern about Dorsey’s leadership and Twitter has seen its share price struggle, although it recently reported &lt;a href=&quot;https://www.theguardian.com/business/2020/feb/06/twitter-revenue-tops-1bn-a-quarter-for-first-time&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;quarterly revenue above $1bn&lt;/a&gt; for the first time.&lt;/p&gt;
&lt;p&gt;News of the Elliott stake &lt;a href=&quot;https://www.cnbc.com/2020/02/28/elliot-managements-paul-singer-seeks-to-replace-twitter-ceo-jack-dorsey-source-says.html&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;saw Twitter’s share price rise on Friday&lt;/a&gt;, during general market slides in the midst of the coronavirus outbreak.&lt;/p&gt;
&lt;p&gt;Elliott Management is an activist investor, which means it regularly pushes for change &lt;a href=&quot;https://www.theguardian.com/business/2018/apr/28/waterstones-paul-singer-elliott-secretive-wizard&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;in companies in which it buys shares&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Singer has even taken on whole countries: in 2016, after a relentless campaign, he secured a &lt;a href=&quot;https://www.forbes.com/sites/danielfisher/2016/02/29/paul-singer-wins-long-battle-with-argentina-have-emerging-market-bonds-hit-bottom/#76cb57c751b8&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;partial repayment of debts by Argentina&lt;/a&gt;, arising from its financial collapse in the early 2000s.&lt;/p&gt;
&lt;p&gt;Neither Elliott nor Twitter immediately &lt;a href=&quot;https://www.forbes.com/sites/abrambrown/2020/02/29/twitters-jack-dorsey-has-a-new-nemesis-hedge-fund-billionaire-paul-singer/#6d7fdd427d84&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;offered comment&lt;/a&gt;.&lt;/p&gt;


</description>
<pubDate>Sat, 29 Feb 2020 16:23:19 +0000</pubDate>
<dc:creator>tankenmate</dc:creator>
<og:url>http://www.theguardian.com/technology/2020/feb/29/paul-singer-elliott-management-twitter-jack-dorsey</og:url>
<og:description>Billionaire Paul Singer’s Elliott Management has taken a ‘sizable stake’ and intends to ‘push for changes’, reports Bloomberg News</og:description>
<og:image>https://i.guim.co.uk/img/media/f209f6a94f59c137926783d8567ca28113b6ffee/0_36_5568_3341/master/5568.jpg?width=1200&amp;height=630&amp;quality=85&amp;auto=format&amp;fit=crop&amp;overlay-align=bottom%2Cleft&amp;overlay-width=100p&amp;overlay-base64=L2ltZy9zdGF0aWMvb3ZlcmxheXMvdGctZGVmYXVsdC5wbmc&amp;enable=upscale&amp;s=fe5a665d39b38a117e91915008d8ced2</og:image>
<og:type>article</og:type>
<og:title>Republican mega-donor buys stake in Twitter and seeks to oust Jack Dorsey – report</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/technology/2020/feb/29/paul-singer-elliott-management-twitter-jack-dorsey</dc:identifier>
</item>
<item>
<title>My Covid-19 Story in Brooklyn</title>
<link>https://www.reddit.com/r/nyc/comments/fayko1/my_covid19_story_brooklyn/</link>
<guid isPermaLink="true" >https://www.reddit.com/r/nyc/comments/fayko1/my_covid19_story_brooklyn/</guid>
<description>&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Hello,&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Just giving a heads up to what I and my doctor both considered a very fucked situation. I just spent a week in Japan, a country at high risk for COVID-19. I wore a mask and essentially tried to stay away from most touristy places (not my first time there), but trains and stations are still packed with people, so there's really not much you can do.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;On arriving back to America (3 days ago), I developed a 102F fever, coughing, and aches. I went to a local hospital in Brooklyn's ER. I informed them of my travel, they provided me a mask, and redirected me to a private room and followed infection protocols (full face covers, gloves, aprons, etc.). I had a chest x-ray and testing for flu/cold/pneumonia/and about 25 other viruses. They all came back negative.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;At this point, the hospital called the CDC requesting permission to perform the COVID-19 testing. The CDC denied the request on the ground that I did not have the most life-threatening symptoms: chest pain and shortness of breath. According to everything I read it's very likely not to have these symptoms if you're in your 30's and relatively healthy.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;And... that was that. They discharged me, said I don't have Corona virus, since they didn't test me for it, and said I can ride the subway, return to work, do whatever I want.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Of course my doctor disagreed. She said I should treat myself as if I am infected. My partner is currently staying in a nearby hotel since we live in a studio apartment. I am choosing to perform a self-quarantine for 14 days. Fortunately I can work from home and my partner can deliver me groceries if I run out.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;But I don't think that many people are aware of the fact that they're actively not testing people for COVID-19, even people who have travel history to high-risk places.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;&lt;strong class=&quot;_12FoOEddL7j_RgMQN0SNeU&quot;&gt;Edit&lt;/strong&gt;: To answer some standard questions.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Do I still have symptoms?&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Yes, Fever is current 101.6 (as of a couple hours ago), aches, and a cough that is persistent. I'm taking Tylenol and drinking a lot of water.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Is this real?&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;It's as real as I said it is. I returned from Japan. I'm sick. The symptoms are similar to COVID19 and I was refused testing. You can believe whatever you want, I don't care.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;You have the flu?&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Well, not according to my screens I don't.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;&lt;strong class=&quot;_12FoOEddL7j_RgMQN0SNeU&quot;&gt;Edit 2:&lt;/strong&gt; I've taken some media inquiries already.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;&lt;strong class=&quot;_12FoOEddL7j_RgMQN0SNeU&quot;&gt;Edit 3:&lt;/strong&gt; &lt;a href=&quot;https://abc7ny.com/5974999/&quot; class=&quot;_3t5uN8xUmg0TOwRCOGQEcU&quot; rel=&quot;noopener noreferrer nofollow ugc&quot; target=&quot;_blank&quot;&gt;&lt;strong class=&quot;_12FoOEddL7j_RgMQN0SNeU&quot;&gt;https://abc7ny.com/5974999/&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;&lt;strong class=&quot;_12FoOEddL7j_RgMQN0SNeU&quot;&gt;Edit 4:&lt;/strong&gt; Answering some additional questions:&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Didn't the CDC just change their guidance?&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Yes, the CDC added Japan to the list of high-risk countries on Feb 27 (evening). I went to the hospital on Feb 27 (morning). I performed a virtual follow-up visit with an ER doctor Feb 28 at 7:00pm to go over my case with the updated guidance from CDC. According to that ER nurse since the hospital still can't hospitalize me based on my criteria, they can't test me. So effectively, there is no change.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Were you supposed to go to the ER?&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;I called up the ER before I went. Told them about my travel, symptoms, and suspicion. I asked the receptionist what the protocol was and they said just come to the ER. Similarly, I asked them how I should get home, and they said I was fine to take any transportation I would normally take.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Go to the media!&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;I have already been contacted by over 15 media organizations, so I can't respond to them all. If I have the strength and energy I wanted to do a couple local/national organizations. However, I'm only talking to organizations who can guarantee that they'll protect my privacy and take it seriously. I need to disclose a lot of personal information (hospital records/occupation/residence etc.) for them to verify and run my story. Also doing Skype interviews while chain coughing into a headset in my dirty room isn't my best weekend activity.&lt;/p&gt;
</description>
<pubDate>Sat, 29 Feb 2020 14:56:31 +0000</pubDate>
<dc:creator>munirusman</dc:creator>
<og:title>r/nyc - My COVID-19 Story. Brooklyn.</og:title>
<og:type>website</og:type>
<og:url>https://www.reddit.com/r/nyc/comments/fayko1/my_covid19_story_brooklyn/</og:url>
<og:description>6,834 votes and 1,381 comments so far on Reddit</og:description>
<og:image>https://external-preview.redd.it/lOWlaC-DiGcHLlkmkbul5LZqlm5MnayqejPyUBcP0yk.jpg?auto=webp&amp;s=647dd4ca641fd2bddab3c34f28e1cda5f5aec10d</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reddit.com/r/nyc/comments/fayko1/my_covid19_story_brooklyn/</dc:identifier>
</item>
<item>
<title>Draft of the Fast.ai Book</title>
<link>https://github.com/fastai/fastbook</link>
<guid isPermaLink="true" >https://github.com/fastai/fastbook</guid>
<description>&lt;p&gt;These draft notebooks cover an introduction to deep learning, &lt;a href=&quot;https://docs.fast.ai/&quot; rel=&quot;nofollow&quot;&gt;fastai&lt;/a&gt;, and &lt;a href=&quot;https://pytorch.org/&quot; rel=&quot;nofollow&quot;&gt;PyTorch&lt;/a&gt;. fastai is a layered API for deep learning; for more information, see &lt;a href=&quot;https://www.mdpi.com/2078-2489/11/2/108&quot; rel=&quot;nofollow&quot;&gt;the fastai paper&lt;/a&gt;. Everything in this repo is copyright Jeremy Howard and Sylvain Gugger, 2020 onwards.&lt;/p&gt;
&lt;p&gt;These notebooks will be used for &lt;a href=&quot;https://www.usfca.edu/data-institute/certificates/deep-learning-part-one&quot; rel=&quot;nofollow&quot;&gt;a course we're teaching&lt;/a&gt; in San Francisco from March 2020, and will be available as a MOOC from around July 2020. In addition, our plan is that these notebooks will form the basis of &lt;a href=&quot;https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527&quot; rel=&quot;nofollow&quot;&gt;this book&lt;/a&gt;, which you can pre-order. It will not have the same GPL restrictions that are on this draft.&lt;/p&gt;
&lt;p&gt;The code in the notebooks and python &lt;code&gt;.py&lt;/code&gt; files is covered by the GPL v3 license; see the LICENSE file for details.&lt;/p&gt;
&lt;p&gt;The remainder (including all markdown cells in the notebooks and other prose) is not licensed for any redistribution or change of format or medium, other than making copies of the notebooks or forking this repo for your own private use. No commercial or broadcast use is allowed. We are making these materials freely available to help you learn deep learning, so please respect our copyright and these restrictions.&lt;/p&gt;
&lt;p&gt;If you see someone hosting a copy of these materials somewhere else, please let them know that their actions are not allowed, and may lead to legal action. Moreover, they would be hurting the community, because we're not likely to release additional materials in this way if people ignore our copyright.&lt;/p&gt;
&lt;p&gt;This is an early draft. If you get stuck running notebooks, please search the &lt;a href=&quot;https://forums.fast.ai/c/fastai-users/fastai-v2&quot; rel=&quot;nofollow&quot;&gt;fastai-v2 forum&lt;/a&gt; for answers, and ask for help there if needed. Please don't use GitHub issues for problems running the notebooks.&lt;/p&gt;
&lt;p&gt;If you make any pull requests to this repo, then you are assigning copyright of that work to Jeremy Howard and Sylvain Gugger.&lt;/p&gt;
</description>
<pubDate>Sat, 29 Feb 2020 08:05:14 +0000</pubDate>
<dc:creator>AgharaShyam</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/20547620?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>fastai/fastbook</og:title>
<og:url>https://github.com/fastai/fastbook</og:url>
<og:description>Draft of the fastai book. Contribute to fastai/fastbook development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/fastai/fastbook</dc:identifier>
</item>
<item>
<title>A two-person startup already uses twenty-eight other tools</title>
<link>https://acrossapp.com/blog/how-a-2-person-startup-already-uses-28-other-tools</link>
<guid isPermaLink="true" >https://acrossapp.com/blog/how-a-2-person-startup-already-uses-28-other-tools</guid>
<description>&lt;p&gt;At Across, we wanted to see how many other technology companies and service providers we use on a regular basis. The answer was way more than we thought. For a seed stage 2 person startup, &lt;strong&gt;we already use 28 different tools regularly totaling $227 / month&lt;/strong&gt; (we’re on the free plans for many of them). And, this excludes libraries in our product. It’s self-inflicted, but a lot of tools nonetheless.&lt;/p&gt;
&lt;p&gt;I'm sure this number will grow as we hire employees and have to buy HR and IT software as well (and I'm sure I forgot a few existing tools on this list). We're interested to hear what other startup stacks look like!&lt;/p&gt;
&lt;h2 class=&quot;color-1&quot;&gt;Productivity &amp;amp; Project Management&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;GSuite ($12 / month)&lt;/strong&gt; - Standard email, file storage in Drive, analysis in Sheets, and presentations in Slides&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slack ($13 / month) &lt;/strong&gt;- Internal communication and supporting customers in shared Slack channels&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Airtable (free)&lt;/strong&gt; - CRM to track our sales funnel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notion ($16 / month) &lt;/strong&gt;- Storing interview notes, brainstorming product and feature ideas&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;color-1&quot;&gt;Development &amp;amp; Design&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;GitHub ($7 / month) &lt;/strong&gt;- Version control / source management&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trello (free) - Product roadmap, issue tracking&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Figma ($24 / month)&lt;/strong&gt; - Designing product mocks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Miscellaneous IDEs (free)&lt;/strong&gt; - Sublime, Vim, VSCode&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Robo 3T (free)&lt;/strong&gt; - MongoDB GUI&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;color-1&quot;&gt;Analytics&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Mixpanel (free)&lt;/strong&gt; - Front and backend analytics. We are on a startup plan so receive Mixpanel for free for up to 250K MTUs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sentry ($26 / month)&lt;/strong&gt; - Error logging and reporting&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fullstory (free) &lt;/strong&gt;- Session replay. We are on a startup plan so receive Fullstory for free&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;color-1&quot;&gt;Payments, Hosting &amp;amp; Authentication&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Stripe (pricing depends on volume)&lt;/strong&gt; - Accepting payments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Heroku (free)&lt;/strong&gt; - Hosting. We are still using free dynos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firebase (free)&lt;/strong&gt; - Authentication. We are still on the free plan&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare ($20 / month)&lt;/strong&gt; - CDN + DNS&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;color-1&quot;&gt;Sales &amp;amp; Marketing, Customer Support&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Hubspot ($45 per month)&lt;/strong&gt; - Email outreach and contact management. We are on the Startup plan so receive Hubspot 90% off&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Drift (free&lt;/strong&gt;) - Chat widget on our website. We've stuck with the basic free plan&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mailchimp (free) &lt;/strong&gt;- Automated emails on signups&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkedIn Sales Navigator ($80 / month)&lt;/strong&gt; - Finding leads to contact&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SalesQL ($29 / month)&lt;/strong&gt; - Finding email addresses for leads&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zoom (free)&lt;/strong&gt; - Web conferencing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Twilio (pricing depends on volume) &lt;/strong&gt;- Business phone number, used in conjunction with FounderPhone&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Boomerang (free)&lt;/strong&gt; - Reminders to follow up with people in email&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FounderPhone (free)&lt;/strong&gt; - Send and receive texts and calls directly in Slack. Free since we built it ourselves :)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whatsapp, Facebook, Twitter, Discord &lt;/strong&gt;- Use these channels to communicate with customers&lt;/li&gt;
&lt;/ul&gt;&lt;h2 class=&quot;color-1&quot;&gt;Finance &amp;amp; Legal&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Brex (free)&lt;/strong&gt; - Business cash account and credit cards. Free until we scale&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We're interested to hear what other startup stacks look like!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Across turns Slack into a powerful customer support system that scales. Create tickets, auto-respond to customer questions, and manage your support team. Learn more at acrossapp.com.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 29 Feb 2020 06:45:19 +0000</pubDate>
<dc:creator>ksj2114</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://acrossapp.com/blog/how-a-2-person-startup-already-uses-28-other-tools</dc:identifier>
</item>
<item>
<title>A half-hour to learn Rust</title>
<link>https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/</link>
<guid isPermaLink="true" >https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/</guid>
<description>&lt;p&gt;In order to increase fluency in a programming language, one has to read a lot of it. But how can you read a lot of it if you don't know what it means?&lt;/p&gt;
&lt;p&gt;In this article, instead of focusing on one or two concepts, I'll try to go through as many Rust snippets as I can, and explain what the keywords and symbols they contain mean.&lt;/p&gt;
&lt;p&gt;Ready? Go!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; introduces a variable binding:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x; // declare &quot;x&quot;
x = 42; // assign 42 to &quot;x&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This can also be written as a single line:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x = 42;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can specify the variable's type explicitly with &lt;code&gt;:&lt;/code&gt;, that's a type annotation:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x: i32; // `i32` is a signed 32-bit integer
x = 42;

// there's i8, i16, i32, i64, i128
//    also u8, u16, u32, u64, u128 for unsigned
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This can also be written as a single line:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x: i32 = 42;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you declare a name and initialize it later, the compiler will prevent you from using it before it's initialized.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x;
foobar(x); // error: borrow of possibly-uninitialized variable: `x`
x = 42;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, doing this is completely fine:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x;
x = 42;
foobar(x); // the type of `x` will be inferred from here
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The underscore &lt;code&gt;_&lt;/code&gt; is a special name - or rather, a “lack of name”. It basically means to throw away something:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// this does *nothing* because 42 is a constant
let _ = 42;

// this calls `get_thing` but throws away its result
let _ = get_thing();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Names that &lt;em&gt;start&lt;/em&gt; with an underscore are regular names, it's just that the compiler won't warn about them being unused:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// we may use `_x` eventually, but our code is a work-in-progress
// and we just wanted to get rid of a compiler warning for now.
let _x = 42;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Separate bindings with the same name can be introduced - you can &lt;em&gt;shadow&lt;/em&gt; a variable binding:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x = 13;
let x = x + 3;
// using `x` after that line only refers to the second `x`,
// the first `x` no longer exists.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Rust has tuples, which you can think of as “fixed-length collections of values of different types”.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let pair = ('a', 17);
pair.0; // this is 'a'
pair.1; // this is 17
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we we really we wanted to annotate the type of &lt;code&gt;pair&lt;/code&gt;, we would write:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let pair: (char, i32) = ('a', 17);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Tuples can be &lt;em&gt;destructured&lt;/em&gt; when doing an assignment, which means they're broken down into their individual fields:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let (some_char, some_int) = ('a', 17);
// now, `some_char` is 'a', and `some_int` is 17
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is especially useful when a function returns a tuple:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let (left, right) = slice.split_at(middle);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Of course, when destructuring a tuple, &lt;code&gt;_&lt;/code&gt; can be used to throw away part of it:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let (_, right) = slice.split_at(middle);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The semi-colon marks the end of a statement:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x = 3;
let y = 5;
let z = y + x;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which means statements can span multiple lines:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x = vec![1, 2, 3, 4, 5, 6, 7, 8]
    .iter()
    .map(|x| x + 3)
    .fold(0, |x, y| x + y);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(We'll go over what those actually mean later).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn&lt;/code&gt; declares a function.&lt;/p&gt;
&lt;p&gt;Here's a void function:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn greet() {
    println!(&quot;Hi there!&quot;);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here's a function that returns a 32-bit signed integer. The arrow indicates its return type:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn fair_dice_roll() -&amp;gt; i32 {
    4
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A pair of brackets declares a block, which has its own scope:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// This prints &quot;in&quot;, then &quot;out&quot;
fn main() {
    let x = &quot;out&quot;;
    {
        // this is a different `x`
        let x = &quot;in&quot;;
        println!(x);
    }
    println!(x);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Blocks are also expressions, which mean they evaluate to.. a value.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// this:
let x = 42;

// is equivalent to this:
let x = { 42 };
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Inside a block, there can be multiple statements:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x = {
    let y = 1; // first statement
    let z = 2; // second statement
    y + z // this is the *tail* - what the whole block will evaluate to
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And that's why “omitting the semicolon at the end of a function” is the same as returning, ie. these are equivalent:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn fair_dice_roll() -&amp;gt; i32 {
    return 4;
}

fn fair_dice_roll() -&amp;gt; i32 {
    4
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; conditionals are also expressions:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn fair_dice_roll() -&amp;gt; i32 {
    if feeling_lucky {
        6
    } else {
        4
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;match&lt;/code&gt; is also an expression:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn fair_dice_roll() -&amp;gt; i32 {
    match feeling_lucky {
        true =&amp;gt; 6,
        false =&amp;gt; 4,
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Dots are typically used to access fields of a value:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let a = (10, 20);
a.0; // this is 10

let amos = get_some_struct();
amos.nickname; // this is &quot;fasterthanlime&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or call a method on a value:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let nick = &quot;fasterthanlime&quot;;
nick.len(); // this is 14
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The double-colon, &lt;code&gt;::&lt;/code&gt;, is similar but it operates on namespaces.&lt;/p&gt;
&lt;p&gt;In this example, &lt;code&gt;std&lt;/code&gt; is a &lt;em&gt;crate&lt;/em&gt; (~ a library), &lt;code&gt;cmp&lt;/code&gt; is a &lt;em&gt;module&lt;/em&gt; (~ a source file), and &lt;code&gt;min&lt;/code&gt; is a &lt;em&gt;function&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let least = std::cmp::min(3, 8); // this is 3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;use&lt;/code&gt; directives can be used to “bring in scope” names from other namespace:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;use std::cmp::min;

let least = min(7, 1); // this is 1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Within &lt;code&gt;use&lt;/code&gt; directives, curly brackets have another meaning: they're “globs”. If we want to import both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt;, we can do any of these:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// this works:
use std::cmp::min;
use std::cmp::max;

// this also works:
use std::cmp::{min, max};

// this also works!
use std::{cmp::min, cmp::max};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A wildcard (&lt;code&gt;*&lt;/code&gt;) lets you import every symbol from a namespace:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// this brings `min` and `max` in scope, and many other things
use std::cmp::*;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Types are namespaces too, and methods can be called as regular functions:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let x = &quot;amos&quot;.len(); // this is 4
let x = str::len(&quot;amos&quot;); // this is also 4
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;str&lt;/code&gt; is a primitive type, but many non-primitive types are also in scope by default.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// `Vec` is a regular struct, not a primitive type
let v = Vec::new();

// this is exactly the same code, but with the *full* path to `Vec`
let v = std::vec::Vec::new();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This works because Rust inserts this at the beginning of every module:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;use std::prelude::v1::*;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(Which in turns re-exports a lot of symbols, like &lt;code&gt;Vec&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Structs are declared with the &lt;code&gt;struct&lt;/code&gt; keyword:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Vec2 {
    x: f64, // 64-bit floating point, aka &quot;double precision&quot;
    y: f64,
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;They can be initialized using &lt;em&gt;struct literals&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let v1 = Vec2 { x: 1.0, y: 3.0 };
let v2 = Vec2 { y: 2.0, x: 4.0 };
// the order does not matter, only the names do
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is a shortcut for initializing the &lt;em&gt;rest of the fields&lt;/em&gt; from another struct:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let v3 = Vec2 {
    x: 14.0,
    ..v2
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is called “struct update syntax”, can only happen in last position, and cannot be followed by a comma.&lt;/p&gt;
&lt;p&gt;Note that &lt;em&gt;the rest of the fields&lt;/em&gt; can mean &lt;em&gt;all the fields&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let v4 = Vec2 { ..v3 };
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Structs, like tuples, can be destructured.&lt;/p&gt;
&lt;p&gt;Just like this is a valid &lt;code&gt;let&lt;/code&gt; pattern:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let (left, right) = slice.split_at(middle);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let v = Vec2 { x: 3.0, y: 6.0 };
let Vec2 { x, y } = v;
// `x` is now 3.0, `y` is now `6.0`
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let Vec2 { x, .. } = v;
// this throws away `v.y`
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;let&lt;/code&gt; patterns can be used as conditions in &lt;code&gt;if&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Number {
    odd: bool,
    value: i32,
}

fn main() {
    let one = Number { odd: true, value: 1 };
    let two = Number { odd: false, value: 2 };
    print_number(one);
    print_number(two);
}

fn print_number(n: Number) {
    if let Number { odd: true, value } = n {
        println!(&quot;Odd number: {}&quot;, value);
    } else if let Number { odd: false, value } = n {
        println!(&quot;Even number: {}&quot;, value);
    }
}

// this prints:
// Odd number: 1
// Even number: 2
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;match&lt;/code&gt; arms are also patterns, just like &lt;code&gt;if let&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print_number(n: Number) {
    match n {
        Number { odd: true, value } =&amp;gt; println!(&quot;Odd number: {}&quot;, value),
        Number { odd: false, value } =&amp;gt; println!(&quot;Even number: {}&quot;, value),
    }
}

// this prints the same as before
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A &lt;code&gt;match&lt;/code&gt; has to be exhaustive: at least one arm needs to match.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print_number(n: Number) {
    match n {
        Number { value: 1, .. } =&amp;gt; println!(&quot;One&quot;),
        Number { value: 2, .. } =&amp;gt; println!(&quot;Two&quot;),
        Number { value, .. } =&amp;gt; println!(&quot;{}&quot;, value),
        // if that last arm didn't exist, we would get a compile-time error
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If that's hard, &lt;code&gt;_&lt;/code&gt; can be used as a “catch-all” pattern:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print_number(n: Number) {
    match n.value {
        1 =&amp;gt; println!(&quot;One&quot;),
        2 =&amp;gt; println!(&quot;Two&quot;),
        _ =&amp;gt; println!(&quot;{}&quot;, n.value),
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can declare methods on your own types:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Number {
    odd: bool,
    value: i32,
}

impl Number {
    fn is_strictly_positive(self) -&amp;gt; bool {
        self.value &amp;gt; 0
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And use them like usual:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let minus_two = Number {
        odd: false,
        value: -2,
    };
    println!(&quot;positive? {}&quot;, minus_two.is_strictly_positive());
    // this prints &quot;positive? false&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Variable bindings are immutable by default:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let n = Number {
        odd: true,
        value: 17,
    };
    n.odd = false; // error: cannot assign to `n.odd`,
                   // as `n` is not declared to be mutable
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;An immutable variable binding cannot have its interior mutated (like we just tried), but it also cannot be assigned to:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let n = Number {
        odd: true,
        value: 17,
    };
    n = Number {
        odd: false,
        value: 22,
    }; // error: cannot assign twice to immutable variable `n`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;mut&lt;/code&gt; makes a variable binding mutable:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let mut n = Number {
        odd: true,
        value: 17,
    }
    n.value = 19; // all good
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Traits are something multiple types can have in common:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;trait Signed {
    fn is_strictly_negative(self) -&amp;gt; bool;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can implement:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;one of your traits on anyone's type&lt;/li&gt;
&lt;li&gt;anyone's trait on one of your types&lt;/li&gt;
&lt;li&gt;but not a foreign trait on a foreign type&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These are called the “orphan rules”.&lt;/p&gt;
&lt;p&gt;Here's an implementation of our trait on our type:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl Signed for Number {
    fn is_strictly_negative(self) -&amp;gt; bool {
        self.value &amp;lt; 0
    }
}

fn main() {
    let n = Number { odd: false, value: -44 };
    println!(&quot;{}&quot;, n.is_strictly_negative()); // prints &quot;true&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Our trait on a foreign type (a primitive type, even):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl Signed for i32 {
    fn is_strictly_negative(self) -&amp;gt; bool {
        self &amp;lt; 0
    }
}

fn main() {
    let n: i32 = -44;
    println!(&quot;{}&quot;, n.is_strictly_negative()); // prints &quot;true&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A foreign trait on our type:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// the `Neg` trait is used to overload `-`, the
// unary minus operator.
impl std::ops::Neg for Number {
    type Output = Number;

    fn neg(self) -&amp;gt; Number {
        Number {
            value: -self.value,
            odd: self.odd,
        }        
    }
}

fn main() {
    let n = Number { odd: true, value: 987 };
    let m = -n; // this is only possible because we implemented `Neg`
    println!(&quot;{}&quot;, m.value); // prints &quot;-987&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;An &lt;code&gt;impl&lt;/code&gt; block is always &lt;em&gt;for&lt;/em&gt; a type, so, inside that block, &lt;code&gt;Self&lt;/code&gt; means that type:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl std::ops::Neg for Number {
    type Output = Self;

    fn neg(self) -&amp;gt; Self {
        Self {
            value: -self.value,
            odd: self.odd,
        }        
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Some traits are &lt;em&gt;markers&lt;/em&gt; - they don't say that a type implements some methods, they say that certain things can be done with a type.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;i32&lt;/code&gt; implements trait &lt;code&gt;Copy&lt;/code&gt; (in short, &lt;code&gt;i32&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; &lt;code&gt;Copy&lt;/code&gt;), so this works:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let a: i32 = 15;
    let b = a; // `a` is copied
    let c = a; // `a` is copied again
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And this also works:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print_i32(x: i32) {
    println!(&quot;x = {}&quot;, x);
}

fn main() {
    let a: i32 = 15;
    print_i32(a); // `a` is copied
    print_i32(a); // `a` is copied again
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But the &lt;code&gt;Number&lt;/code&gt; struct is not &lt;code&gt;Copy&lt;/code&gt;, so this doesn't work:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let n = Number { odd: true, value: 51 };
    let m = n; // `n` is moved into `m`
    let o = n; // error: use of moved value: `n`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And neither does this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print_number(n: Number) {
    println!(&quot;{} number {}&quot;, if n.odd { &quot;odd&quot; } else { &quot;even&quot; }, n.value);
}

fn main() {
    let n = Number { odd: true, value: 51 };
    print_number(n); // `n` is moved
    print_number(n); // error: use of moved value: `n`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But it works if &lt;code&gt;print_number&lt;/code&gt; takes an immutable reference instead:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print_number(n: &amp;amp;Number) {
    println!(&quot;{} number {}&quot;, if n.odd { &quot;odd&quot; } else { &quot;even&quot; }, n.value);
}

fn main() {
    let n = Number { odd: true, value: 51 };
    print_number(&amp;amp;n); // `n` is borrowed for the time of the call
    print_number(&amp;amp;n); // `n` is borrowed again
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It also works if a function takes a &lt;em&gt;mutable&lt;/em&gt; reference - but only if our variable binding is also &lt;code&gt;mut&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn invert(n: &amp;amp;mut Number) {
    n.value = -n.value;
}

fn print_number(n: &amp;amp;Number) {
    println!(&quot;{} number {}&quot;, if n.odd { &quot;odd&quot; } else { &quot;even&quot; }, n.value);
}

fn main() {
    // this time, `n` is mutable
    let mut n = Number { odd: true, value: 51 };
    print_number(&amp;amp;n);
    invert(&amp;amp;mut n); // `n is borrowed mutably - everything is explicit
    print_number(&amp;amp;n);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Trait methods can also take &lt;code&gt;self&lt;/code&gt; by reference or mutable reference:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl std::clone::Clone for Number {
    fn clone(&amp;amp;self) -&amp;gt; Self {
        Self { ..*self }
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When invoking trait methods, the receiver is borrowed implicitly:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let n = Number { odd: true, value: 51 };
    let mut m = n.clone();
    m.value += 100;
    
    print_number(&amp;amp;n);
    print_number(&amp;amp;m);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To highlight this: these are equivalent:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;let m = n.clone();

let m = std::clone::Clone::clone(&amp;amp;n);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Marker traits like &lt;code&gt;Copy&lt;/code&gt; have no methods:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// note: `Copy` requires that `Clone` is implemented too
impl std::clone::Clone for Number {
    fn clone(&amp;amp;self) -&amp;gt; Self {
        Self { ..*self }
    }
}

impl std::marker::Copy for Number {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, &lt;code&gt;Clone&lt;/code&gt; can still be used:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let n = Number { odd: true, value: 51 };
    let m = n.clone();
    let o = n.clone();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But &lt;code&gt;Number&lt;/code&gt; values will no longer be moved:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let n = Number { odd: true, value: 51 };
    let m = n; // `m` is a copy of `n`
    let o = n; // same. `n` is neither moved nor borrowed.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Some traits are so common, they can be implemented automatically by using the &lt;code&gt;derive&lt;/code&gt; attribute:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;#[derive(Clone, Copy)]
struct Number {
    odd: bool,
    value: i32,
}

// this expands to `impl Clone for Number` and `impl Copy for Number` blocks.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Functions can be generic:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;T&amp;gt;(arg: T) {
    // do something with `arg`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;They can have multiple &lt;em&gt;type parameters&lt;/em&gt;, which can then be used in the function's declaration and its body, instead of concrete types:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;L, R&amp;gt;(left: L, right: R) {
    // do something with `left` and `right`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Type parameters usually have &lt;em&gt;constraints&lt;/em&gt;, so you can actually do something with them.&lt;/p&gt;
&lt;p&gt;The simplest constraints are just trait names:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print&amp;lt;T: Display&amp;gt;(value: T) {
    println!(&quot;value = {}&quot;, value);
}

fn print&amp;lt;T: Debug&amp;gt;(value: T) {
    println!(&quot;value = {:?}&quot;, value);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There's a longer syntax for type parameter constraints:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print&amp;lt;T&amp;gt;(value: T)
where
    T: Display,
{
    println!(&quot;value = {}&quot;, value);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Constraints can be more complicated: they can require a type parameter to implement multiple traits:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;use std::fmt::Debug;

fn compare&amp;lt;T&amp;gt;(left: T, right: T)
where
    T: Debug + PartialEq,
{
    println!(&quot;{:?} {} {:?}&quot;, left, if left == right { &quot;==&quot; } else { &quot;!=&quot; }, right);
}

fn main() {
    compare(&quot;tea&quot;, &quot;coffee&quot;);
    // prints: &quot;tea&quot; != &quot;coffee&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Generic functions can be thought of as namespaces, containing an infinity of functions with different concrete types.&lt;/p&gt;
&lt;p&gt;Same as with crates, and modules, and types, generic functions can be “explored” (navigated?) using &lt;code&gt;::&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    use std::any::type_name;
    println!(&quot;{}&quot;, type_name::&amp;lt;i32&amp;gt;()); // prints &quot;i32&quot;
    println!(&quot;{}&quot;, type_name::&amp;lt;(f64, char)&amp;gt;()); // prints &quot;(f64, char)&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is lovingly called &lt;a href=&quot;https://turbo.fish/&quot;&gt;turbofish syntax&lt;/a&gt;, because &lt;code&gt;::&amp;lt;&amp;gt;&lt;/code&gt; looks like a fish.&lt;/p&gt;
&lt;p&gt;Structs can be generic too:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Pair&amp;lt;T&amp;gt; {
    a: T,
    b: T,
}

fn print_type_name&amp;lt;T&amp;gt;(_val: &amp;amp;T) {
    println!(&quot;{}&quot;, std::any::type_name::&amp;lt;T&amp;gt;());
}

fn main() {
    let p1 = Pair { a: 3, b: 9 };
    let p2 = Pair { a: true, b: false };
    print_type_name(&amp;amp;p1); // prints &quot;Pair&amp;lt;i32&amp;gt;&quot;
    print_type_name(&amp;amp;p2); // prints &quot;Pair&amp;lt;bool&amp;gt;&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The standard library type &lt;code&gt;Vec&lt;/code&gt; (~ a heap-allocated array), is generic:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let mut v1 = Vec::new();
    v1.push(1);
    let mut v2 = Vec::new();
    v2.push(false);
    print_type_name(&amp;amp;v1); // prints &quot;Vec&amp;lt;i32&amp;gt;&quot;
    print_type_name(&amp;amp;v2); // prints &quot;Vec&amp;lt;bool&amp;gt;&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Speaking of &lt;code&gt;Vec&lt;/code&gt;, it comes with a macro that gives more or less “vec literals”:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let v1 = vec![1, 2, 3];
    let v2 = vec![true, false, true];
    print_type_name(&amp;amp;v1); // prints &quot;Vec&amp;lt;i32&amp;gt;&quot;
    print_type_name(&amp;amp;v2); // prints &quot;Vec&amp;lt;bool&amp;gt;&quot;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All of &lt;code&gt;name!()&lt;/code&gt;, &lt;code&gt;name![]&lt;/code&gt; or &lt;code&gt;name!{}&lt;/code&gt; invoke a macro. Macros just expand to regular code.&lt;/p&gt;
&lt;p&gt;In fact, &lt;code&gt;println&lt;/code&gt; is a macro:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    println!(&quot;{}&quot;, &quot;Hello there!&quot;);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This expands to something that has the same effect as:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    use std::io::{self, Write};
    io::stdout().lock().write_all(b&quot;Hello there!\n&quot;).unwrap();
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;panic&lt;/code&gt; is also a macro. It violently stops execution with an error message, and the file name / line number of the error, if enabled:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    panic!(&quot;This panics&quot;);
}
// output: thread 'main' panicked at 'This panics', src/main.rs:3:5
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Some methods also panic. For example, the &lt;code&gt;Option&lt;/code&gt; type can contain something, or it can contain nothing. If &lt;code&gt;.unwrap()&lt;/code&gt; is called on it, and it contains nothing, it panics:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let o1: Option&amp;lt;i32&amp;gt; = Some(128);
    o1.unwrap(); // this is fine

    let o2: Option&amp;lt;i32&amp;gt; = None;
    o2.unwrap(); // this panics!
}

// output: thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', src/libcore/option.rs:378:21
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; is not a struct - it's an &lt;code&gt;enum&lt;/code&gt;, with two variants.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;enum Option&amp;lt;T&amp;gt; {
    None,
    Some(T),
}

impl&amp;lt;T&amp;gt; Option&amp;lt;T&amp;gt; {
    fn unwrap(self) -&amp;gt; T {
        // enums variants can be used in patterns:
        match self {
            Self::Some(t) =&amp;gt; t,
            Self::None =&amp;gt; panic!(&quot;.unwrap() called on a None option&quot;),
        }
    }
}

use self::Option::{None, Some};

fn main() {
    let o1: Option&amp;lt;i32&amp;gt; = Some(128);
    o1.unwrap(); // this is fine

    let o2: Option&amp;lt;i32&amp;gt; = None;
    o2.unwrap(); // this panics!
}

// output: thread 'main' panicked at '.unwrap() called on a None option', src/main.rs:11:27
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Result&lt;/code&gt; is also an enum, it can either contain something, or an error:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;enum Result&amp;lt;T, E&amp;gt; {
    Ok(T),
    Err(E),
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It also panics when unwrapped and containing an error.&lt;/p&gt;
&lt;p&gt;Variables bindings have a “lifetime”:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    // `x` doesn't exist yet
    {
        let x = 42; // `x` starts existing
        println!(&quot;x = {}&quot;, x);
        // `x` stops existing
    }
    // `x` no longer exists
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Similarly, references have a lifetime:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    // `x` doesn't exist yet
    {
        let x = 42; // `x` starts existing
        let x_ref = &amp;amp;x; // `x_ref` starts existing - it borrows `x`
        println!(&quot;x_ref = {}&quot;, x_ref);
        // `x_ref` stops existing
        // `x` stops existing
    }
    // `x` no longer exists
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The lifetime of a reference cannot exceed the lifetime of the variable binding it borrows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let x_ref = {
        let x = 42;
        &amp;amp;x
    };
    println!(&quot;x_ref = {}&quot;, x_ref);
    // error: `x` does not live long enough
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A variable binding can be immutably borrowed multiple times:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let x = 42;
    let x_ref1 = &amp;amp;x;
    let x_ref2 = &amp;amp;x;
    let x_ref3 = &amp;amp;x;
    println!(&quot;{} {} {}&quot;, x_ref1, x_ref2, x_ref3);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While borrowed, a variable binding cannot be mutated:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let mut x = 42;
    let x_ref = &amp;amp;x;
    x = 13;
    println!(&quot;x_ref = {}&quot;, x_ref);
    // error: cannot assign to `x` because it is borrowed
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;While immutably borrowed, a variable cannot be &lt;em&gt;mutably borrowed&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let mut x = 42;
    let x_ref1 = &amp;amp;x;
    let x_ref2 = &amp;amp;mut x;
    // error: cannot borrow `x` as mutable because it is also borrowed as immutable
    println!(&quot;x_ref1 = {}&quot;, x_ref1);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;References in function arguments also have lifetimes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn print(x: &amp;amp;i32) {
    // `x` is borrowed (from the outside) for the
    // entire time this function is called.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Functions with reference arguments can be called with borrows that have different lifetimes, so:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;All functions that take references are generic&lt;/li&gt;
&lt;li&gt;Lifetimes are generic parameters&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Lifetimes’ names start with a single quote, &lt;code&gt;'&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// elided (non-named) lifetimes:
fn print(x: &amp;amp;i32) {}

// named lifetimes:
fn print&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32) {}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This allows returning references whose lifetime depend on the lifetime of the arguments:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Number {
    value: i32,
}

fn number_value&amp;lt;'a&amp;gt;(num: &amp;amp;'a Number) -&amp;gt; &amp;amp;'a i32 {
    &amp;amp;num.value
}

fn main() {
    let n = Number { value: 47 };
    let v = number_value(&amp;amp;n);
    // `v` borrows `n` (immutably), thus: `v` cannot outlive `n`.
    // While `v` exists, `n` cannot be mutably borrowed, mutated, moved, etc.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When there is a &lt;em&gt;single&lt;/em&gt; input lifetime, it doesn't need to be named, and everything has the same lifetime, so the two functions below are equivalent:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn number_value&amp;lt;'a&amp;gt;(num: &amp;amp;'a Number) -&amp;gt; &amp;amp;'a i32 {
    &amp;amp;num.value
}

fn number_value(num: &amp;amp;Number) -&amp;gt; &amp;amp;i32 {
    &amp;amp;num.value
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Structs can also be &lt;em&gt;generic over lifetimes&lt;/em&gt;, which allows them to hold references:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct NumRef&amp;lt;'a&amp;gt; {
    x: &amp;amp;'a i32,
}

fn main() {
    let x: i32 = 99;
    let x_ref = NumRef { x: &amp;amp;x };
    // `x_ref` cannot outlive `x`, etc.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The same code, but with an additional function:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct NumRef&amp;lt;'a&amp;gt; {
    x: &amp;amp;'a i32,
}

fn as_num_ref&amp;lt;'a&amp;gt;(x: &amp;amp;'a i32) -&amp;gt; NumRef&amp;lt;'a&amp;gt; {
    NumRef { x: &amp;amp;x }
}

fn main() {
    let x: i32 = 99;
    let x_ref = as_num_ref(&amp;amp;x);
    // `x_ref` cannot outlive `x`, etc.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The same code, but with “elided” lifetimes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct NumRef&amp;lt;'a&amp;gt; {
    x: &amp;amp;'a i32,
}

fn as_num_ref(x: &amp;amp;i32) -&amp;gt; NumRef&amp;lt;'_&amp;gt; {
    NumRef { x: &amp;amp;x }
}

fn main() {
    let x: i32 = 99;
    let x_ref = as_num_ref(&amp;amp;x);
    // `x_ref` cannot outlive `x`, etc.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;impl&lt;/code&gt; blocks can be generic over lifetimes too:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl&amp;lt;'a&amp;gt; NumRef&amp;lt;'a&amp;gt; {
    fn as_i32_ref(&amp;amp;'a self) -&amp;gt; &amp;amp;'a i32 {
        self.x
    }
}

fn main() {
    let x: i32 = 99;
    let x_num_ref = NumRef { x: &amp;amp;x };
    let x_i32_ref = x_num_ref.as_i32_ref();
    // neither ref cannot outlive `x`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But you can do elision (“to elide”) there too:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl&amp;lt;'a&amp;gt; NumRef&amp;lt;'a&amp;gt; {
    fn as_i32_ref(&amp;amp;self) -&amp;gt; &amp;amp;i32 {
        self.x
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can elide even harder, if you never need the name:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;impl NumRef&amp;lt;'_&amp;gt; {
    fn as_i32_ref(&amp;amp;self) -&amp;gt; &amp;amp;i32 {
        self.x
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is a special lifetime, named &lt;code&gt;'static&lt;/code&gt;, which is valid for the entire program's lifetime.&lt;/p&gt;
&lt;p&gt;String literals are &lt;code&gt;'static'&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Person {
    name: &amp;amp;'static str,
}

fn main() {
    let p = Person {
        name: &quot;fasterthanlime&quot;,
    };
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But &lt;em&gt;owned strings&lt;/em&gt; are not static:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Person {
    name: &amp;amp;'static str,
}

fn main() {
    let name = format!(&quot;fasterthan{}&quot;, &quot;lime&quot;);
    let p = Person { name: &amp;amp;name };
    // error: `name` does not live long enough
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In that last example, the local &lt;code&gt;name&lt;/code&gt; is not a &lt;code&gt;&amp;amp;'static str&lt;/code&gt;, it's a &lt;code&gt;String&lt;/code&gt;. It's been allocated dynamically, and it will be freed. Its lifetime is &lt;em&gt;less&lt;/em&gt; than the whole program (even though it happens to be in &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To store a non-&lt;code&gt;'static&lt;/code&gt; string in &lt;code&gt;Person&lt;/code&gt;, it needs to either:&lt;/p&gt;
&lt;p&gt;A) Be generic over a lifetime:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Person&amp;lt;'a&amp;gt; {
    name: &amp;amp;'a str,
}

fn main() {
    let name = format!(&quot;fasterthan{}&quot;, &quot;lime&quot;);
    let p = Person { name: &amp;amp;name };
    // `p` cannot outlive `name`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;B) Take ownership of the string&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Person {
    name: String,
}

fn main() {
    let name = format!(&quot;fasterthan{}&quot;, &quot;lime&quot;);
    let p = Person { name: name };
    // `name` was moved into `p`, their lifetimes are no longer tied.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Speaking of: in a struct literal, when a field is set to a variable binding of the same name:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;    let p = Person { name: name };
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It can be shortened like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;    let p = Person { name };
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For many types in Rust, there are owned and non-owned variants:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Strings: &lt;code&gt;String&lt;/code&gt; is owned, &lt;code&gt;&amp;amp;str&lt;/code&gt; is a reference&lt;/li&gt;
&lt;li&gt;Paths: &lt;code&gt;PathBuf&lt;/code&gt; is owned, &lt;code&gt;&amp;amp;Path&lt;/code&gt; is a reference&lt;/li&gt;
&lt;li&gt;Collections: &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; is owned, &lt;code&gt;&amp;amp;[T]&lt;/code&gt; is a reference&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Rust has slices - they're a reference to multiple contiguous elements.&lt;/p&gt;
&lt;p&gt;You can borrow a slice of a vector, for example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let v = vec![1, 2, 3, 4, 5];
    let v2 = &amp;amp;v[2..4];
    println!(&quot;v2 = {:?}&quot;, v2);
}

// output:
// v2 = [3, 4]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above is not magical. The indexing operator (&lt;code&gt;foo[index]&lt;/code&gt;) is overloaded with the &lt;code&gt;Index&lt;/code&gt; and &lt;code&gt;IndexMut&lt;/code&gt; traits.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;..&lt;/code&gt; syntax is just range literals. Ranges are just a few structs defined in the standard library.&lt;/p&gt;
&lt;p&gt;They can be open-ended, and their rightmost bound can be inclusive, if it's preceded by &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    // 0 or greater
    println!(&quot;{:?}&quot;, (0..).contains(&amp;amp;100)); // true
    // strictly less than 20
    println!(&quot;{:?}&quot;, (..20).contains(&amp;amp;20)); // false
    // 20 or less than 20
    println!(&quot;{:?}&quot;, (..=20).contains(&amp;amp;20)); // true
    // only 3, 4, 5
    println!(&quot;{:?}&quot;, (3..6).contains(&amp;amp;4)); // true
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Borrowing rules apply to slices.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn tail(s: &amp;amp;[u8]) -&amp;gt; &amp;amp;[u8] {
  &amp;amp;s[1..] 
}

fn main() {
    let x = &amp;amp;[1, 2, 3, 4, 5];
    let y = tail(x);
    println!(&quot;y = {:?}&quot;, y);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the same as:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn tail&amp;lt;'a&amp;gt;(s: &amp;amp;'a [u8]) -&amp;gt; &amp;amp;'a [u8] {
  &amp;amp;s[1..] 
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is legal:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let y = {
        let x = &amp;amp;[1, 2, 3, 4, 5];
        tail(x)
    };
    println!(&quot;y = {:?}&quot;, y);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;…but only because &lt;code&gt;[1, 2, 3, 4, 5]&lt;/code&gt; is a &lt;code&gt;'static&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;So, this is illegal:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let y = {
        let v = vec![1, 2, 3, 4, 5];
        tail(&amp;amp;v)
        // error: `v` does not live long enough
    };
    println!(&quot;y = {:?}&quot;, y);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;…because a vector is heap-allocated, and it has a non-&lt;code&gt;'static&lt;/code&gt; lifetime.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;str&lt;/code&gt; values are really slices.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn file_ext(name: &amp;amp;str) -&amp;gt; Option&amp;lt;&amp;amp;str&amp;gt; {
    // this does not create a new string - it returns
    // a slice of the argument.
    name.split(&quot;.&quot;).last()
}

fn main() {
    let name = &quot;Read me. Or don't.txt&quot;;
    if let Some(ext) = file_ext(name) {
        println!(&quot;file extension: {}&quot;, ext);
    } else {
        println!(&quot;no file extension&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;…so the borrow rules apply here too:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let ext = {
        let name = String::from(&quot;Read me. Or don't.txt&quot;);
        file_ext(&amp;amp;name).unwrap_or(&quot;&quot;)
        // error: `name` does not live long enough
    };
    println!(&quot;extension: {:?}&quot;, ext);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Functions that can fail typically return a &lt;code&gt;Result&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let s = std::str::from_utf8(&amp;amp;[240, 159, 141, 137]);
    println!(&quot;{:?}&quot;, s);
    // prints: Ok(&quot;🍉&quot;)

    let s = std::str::from_utf8(&amp;amp;[195, 40]);
    println!(&quot;{:?}&quot;, s);
    // prints: Err(Utf8Error { valid_up_to: 0, error_len: Some(1) })
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you want to panic in case of failure, you can &lt;code&gt;.unwrap()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let s = std::str::from_utf8(&amp;amp;[240, 159, 141, 137]).unwrap();
    println!(&quot;{:?}&quot;, s);
    // prints: &quot;🍉&quot;

    let s = std::str::from_utf8(&amp;amp;[195, 40]).unwrap();
    // prints: thread 'main' panicked at 'called `Result::unwrap()`
    // on an `Err` value: Utf8Error { valid_up_to: 0, error_len: Some(1) }',
    // src/libcore/result.rs:1165:5
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or &lt;code&gt;.expect()&lt;/code&gt;, for a custom message:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let s = std::str::from_utf8(&amp;amp;[195, 40]).expect(&quot;valid utf-8&quot;);
    // prints: thread 'main' panicked at 'valid utf-8: Utf8Error
    // { valid_up_to: 0, error_len: Some(1) }', src/libcore/result.rs:1165:5
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or, you can &lt;code&gt;match&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    match std::str::from_utf8(&amp;amp;[240, 159, 141, 137]) {
        Ok(s) =&amp;gt; println!(&quot;{}&quot;, s),
        Err(e) =&amp;gt; panic!(e),
    }
    // prints 🍉
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or you can &lt;code&gt;if let&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    if let Ok(s) = std::str::from_utf8(&amp;amp;[240, 159, 141, 137]) {
        println!(&quot;{}&quot;, s);
    }
    // prints 🍉
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or you can bubble up the error:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() -&amp;gt; Result&amp;lt;(), std::str::Utf8Error&amp;gt; {
    match std::str::from_utf8(&amp;amp;[240, 159, 141, 137]) {
        Ok(s) =&amp;gt; println!(&quot;{}&quot;, s),
        Err(e) =&amp;gt; return Err(e),
    }
    Ok(())
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or you can use &lt;code&gt;?&lt;/code&gt; to do it the concise way:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() -&amp;gt; Result&amp;lt;(), std::str::Utf8Error&amp;gt; {
    let s = std::str::from_utf8(&amp;amp;[240, 159, 141, 137])?;
    println!(&quot;{}&quot;, s);
    Ok(())
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; operator can be used to &lt;em&gt;dereference&lt;/em&gt;, but you don't need to do that to access fields or call methods:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Point {
    x: f64,
    y: f64,
}

fn main() {
    let p = Point { x: 1.0, y: 3.0 };
    let p_ref = &amp;amp;p;
    println!(&quot;({}, {})&quot;, p_ref.x, p_ref.y);
}

// prints `(1, 3)`
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And you can only do it if the type is &lt;code&gt;Copy&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;struct Point {
    x: f64,
    y: f64,
}

fn negate(p: Point) -&amp;gt; Point {
    Point {
        x: -p.x,
        y: -p.y,
    }
}

fn main() {
    let p = Point { x: 1.0, y: 3.0 };
    let p_ref = &amp;amp;p;
    negate(*p_ref);
    // error: cannot move out of `*p_ref` which is behind a shared reference
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;// now `Point` is `Copy`
#[derive(Clone, Copy)]
struct Point {
    x: f64,
    y: f64,
}

fn negate(p: Point) -&amp;gt; Point {
    Point {
        x: -p.x,
        y: -p.y,
    }
}

fn main() {
    let p = Point { x: 1.0, y: 3.0 };
    let p_ref = &amp;amp;p;
    negate(*p_ref); // ...and now this works
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Closures are just functions of type &lt;code&gt;Fn&lt;/code&gt;, &lt;code&gt;FnMut&lt;/code&gt; or &lt;code&gt;FnOnce&lt;/code&gt; with some captured context.&lt;/p&gt;
&lt;p&gt;Their parameters are a comma-separated list of names within a pair of pipes (&lt;code&gt;|&lt;/code&gt;). They don't &lt;em&gt;need&lt;/em&gt; curly braces, unless you want to have multiple statement.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn for_each_planet&amp;lt;F&amp;gt;(f: F)
    where F: Fn(&amp;amp;'static str)
{
    f(&quot;Earth&quot;);
    f(&quot;Mars&quot;);
    f(&quot;Jupiter&quot;);
}
 
fn main() {
    for_each_planet(|planet| println!(&quot;Hello, {}&quot;, planet));
}

// prints:
// Hello, Earth
// Hello, Mars
// Hello, Jupiter
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The borrow rules apply to them too:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn for_each_planet&amp;lt;F&amp;gt;(f: F)
    where F: Fn(&amp;amp;'static str)
{
    f(&quot;Earth&quot;);
    f(&quot;Mars&quot;);
    f(&quot;Jupiter&quot;);
}
 
fn main() {
    let greeting = String::from(&quot;Good to see you&quot;);
    for_each_planet(|planet| println!(&quot;{}, {}&quot;, greeting, planet));
    // our closure borrows `greeting`, so it cannot outlive it
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For example, this would not work:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn for_each_planet&amp;lt;F&amp;gt;(f: F)
    where F: Fn(&amp;amp;'static str) + 'static // `F` must now have &quot;'static&quot; lifetime
{
    f(&quot;Earth&quot;);
    f(&quot;Mars&quot;);
    f(&quot;Jupiter&quot;);
}

fn main() {
    let greeting = String::from(&quot;Good to see you&quot;);
    for_each_planet(|planet| println!(&quot;{}, {}&quot;, greeting, planet));
    // error: closure may outlive the current function, but it borrows
    // `greeting`, which is owned by the current function
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But this would:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let greeting = String::from(&quot;You're doing great&quot;);
    for_each_planet(move |planet| println!(&quot;{}, {}&quot;, greeting, planet));
    // `greeting` is no longer borrowed, it is *moved* into
    // the closure.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;An &lt;code&gt;FnMut&lt;/code&gt; needs to be mutably borrowed to be called, so it can only be called once at a time.&lt;/p&gt;
&lt;p&gt;This is legal:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(f: F)
    where F: Fn(i32) -&amp;gt; i32
{
    println!(&quot;{}&quot;, f(f(2))); 
}
 
fn main() {
    foobar(|x| x * 2);
}

// output: 8
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This isn't:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(mut f: F)
    where F: FnMut(i32) -&amp;gt; i32
{
    println!(&quot;{}&quot;, f(f(2))); 
    // error: cannot borrow `f` as mutable more than once at a time
}
 
fn main() {
    foobar(|x| x * 2);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is legal again:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(mut f: F)
    where F: FnMut(i32) -&amp;gt; i32
{
    let tmp = f(2);
    println!(&quot;{}&quot;, f(tmp)); 
}
 
fn main() {
    foobar(|x| x * 2);
}

// output: 8
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;FnMut&lt;/code&gt; exists because some closures &lt;em&gt;mutably borrow&lt;/em&gt; local variables:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(mut f: F)
    where F: FnMut(i32) -&amp;gt; i32
{
    let tmp = f(2);
    println!(&quot;{}&quot;, f(tmp)); 
}
 
fn main() {
    let mut acc = 2;
    foobar(|x| {
        acc += 1;
        x * acc
    });
}

// output: 24
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Those closures cannot be passed to functions expecting &lt;code&gt;Fn&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(f: F)
    where F: Fn(i32) -&amp;gt; i32
{
    println!(&quot;{}&quot;, f(f(2))); 
}
 
fn main() {
    let mut acc = 2;
    foobar(|x| {
        acc += 1;
        // error: cannot assign to `acc`, as it is a
        // captured variable in a `Fn` closure.
        // the compiler suggests &quot;changing foobar
        // to accept closures that implement `FnMut`&quot;
        x * acc
    });
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;FnOnce&lt;/code&gt; closures can only be called once. They exist because some closure move out variables that have been moved when captured:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(f: F)
    where F: FnOnce() -&amp;gt; String
{
    println!(&quot;{}&quot;, f()); 
}
 
fn main() {
    let s = String::from(&quot;alright&quot;);
    foobar(move || s);
    // `s` was moved into our closure, and our
    // closures moves it to the caller by returning
    // it. Remember that `String` is not `Copy`.
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is enforced naturally, as &lt;code&gt;FnOnce&lt;/code&gt; closures need to be &lt;em&gt;moved&lt;/em&gt; in order to be called.&lt;/p&gt;
&lt;p&gt;So, for example, this is illegal:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(f: F)
    where F: FnOnce() -&amp;gt; String
{
    println!(&quot;{}&quot;, f()); 
    println!(&quot;{}&quot;, f()); 
    // error: use of moved value: `f`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And, if you need convincing that our closure &lt;em&gt;does&lt;/em&gt; move &lt;code&gt;s&lt;/code&gt;, this is illegal too:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let s = String::from(&quot;alright&quot;);
    foobar(move || s);
    foobar(move || s);
    // use of moved value: `s`
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But this is fine:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    let s = String::from(&quot;alright&quot;);
    foobar(|| s.clone());
    foobar(|| s.clone());
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here's a closure with two arguments:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn foobar&amp;lt;F&amp;gt;(x: i32, y: i32, is_greater: F)
    where F: Fn(i32, i32) -&amp;gt; bool
{
    let (greater, smaller) = if is_greater(x, y) {
        (x, y)
    } else {
        (y, x)
    };
    println!(&quot;{} is greater than {}&quot;, greater, smaller);
}
 
fn main() {
    foobar(32, 64, |x, y| x &amp;gt; y);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here's a closure ignoring both its arguments:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    foobar(32, 64, |_, _| panic!(&quot;Comparing is futile!&quot;));
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here's a slightly worrying closure:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn countdown&amp;lt;F&amp;gt;(count: usize, tick: F)
    where F: Fn(usize)
{
    for i in (1..=count).rev() {
        tick(i);
    }
}
 
fn main() {
    countdown(3, |i| println!(&quot;tick {}...&quot;, i));
}

// output:
// tick 3...
// tick 2...
// tick 1...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here's a toilet closure:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    countdown(3, |_| ());
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Called thusly because &lt;code&gt;|_| ()&lt;/code&gt; looks like a toilet.&lt;/p&gt;
&lt;p&gt;Anything that is iterable can be used in a &lt;code&gt;for in&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;We've just seen a range being used, but it also works with a &lt;code&gt;Vec&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    for i in vec![52, 49, 21] {
        println!(&quot;I like the number {}&quot;, i);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or a slice:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    for i in &amp;amp;[52, 49, 21] {
        println!(&quot;I like the number {}&quot;, i);
    }
}

// output:
// I like the number 52
// I like the number 49
// I like the number 21
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or an actual iterator:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    // note: `&amp;amp;str` also has a `.bytes()` iterator.
    // Rust's `char` type is a &quot;Unicode scalar value&quot;
    for c in &quot;rust&quot;.chars() {
        println!(&quot;Give me a {}&quot;, c);
    }
}

// output:
// Give me a r
// Give me a u
// Give me a s
// Give me a t
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Even if the iterator items are filtered and mapped and flattened:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn main() {
    for c in &quot;sHE'S brOKen&quot;
        .chars()
        .filter(|c| c.is_uppercase() || !c.is_ascii_alphabetic())
        .flat_map(|c| c.to_lowercase())
    {
        print!(&quot;{}&quot;, c);
    }
    println!();
}

// output: he's ok
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can return a closure from a function:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn make_tester(answer: String) -&amp;gt; impl Fn(&amp;amp;str) -&amp;gt; bool {
    move |challenge| {
        challenge == answer
    }
}

fn main() {
    // you can use `.into()` to perform conversions
    // between various types, here `&amp;amp;'static str` and `String`
    let test = make_tester(&quot;hunter2&quot;.into());
    println!(&quot;{}&quot;, test(&quot;******&quot;));
    println!(&quot;{}&quot;, test(&quot;hunter2&quot;));
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can even move a reference to some of a function's arguments, into a closure it returns:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn make_tester&amp;lt;'a&amp;gt;(answer: &amp;amp;'a str) -&amp;gt; impl Fn(&amp;amp;str) -&amp;gt; bool + 'a {
    move |challenge| {
        challenge == answer
    }
}

fn main() {
    let test = make_tester(&quot;hunter2&quot;);
    println!(&quot;{}&quot;, test(&quot;*******&quot;));
    println!(&quot;{}&quot;, test(&quot;hunter2&quot;));
}

// output:
// false
// true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Or, with elided lifetimes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-rust&quot;&gt;fn make_tester(answer: &amp;amp;str) -&amp;gt; impl Fn(&amp;amp;str) -&amp;gt; bool + '_ {
    move |challenge| {
        challenge == answer
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And with that, we hit the 30-minute estimated reading time mark, and you should be able to read &lt;em&gt;most&lt;/em&gt; of the Rust code you find online.&lt;/p&gt;
&lt;p&gt;Writing Rust is a very different experience from reading Rust. On one hand, you're not reading the &lt;em&gt;solution&lt;/em&gt; to a problem, you're actually solving it. On the other hand, the Rust compiler helps out a &lt;em&gt;lot&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For all of the intentional mistakes made above (“this code is illegal”, etc.), rustc always has very good error messages &lt;em&gt;and&lt;/em&gt; insightful suggestions.&lt;/p&gt;
&lt;p&gt;And when there's a hint missing, the compiler team is &lt;a href=&quot;https://mobile.twitter.com/fasterthanlime/status/1219601989404954624&quot;&gt;not afraid to add it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more Rust material, you may want to check out:&lt;/p&gt;
&lt;p&gt;I also &lt;a href=&quot;https://fasterthanli.me/tags/rust/&quot;&gt;blog about Rust&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/fasterthanlime&quot;&gt;tweet about Rust&lt;/a&gt; a lot, so if you liked this article, you know what to do.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;p class=&quot;patreon_credits&quot;&gt;This article was made possible thanks to my patrons: Aurora, Chad Morrow, Fernando, Geert Depuydt, Geoff Cant, Geoffroy Couprie, Ignacio Vergara, Jane Lusby, Jesús Higueras, Jérémy Gtld, Makoto Nakashima, Michael Alyn Miller, Nicolas Goy, o0Ignition0o, Pascal, Raphael Gaschignard, Romain Ruetschi, Ryszard Sommefeldt, Sebastian Zimmer, Someone, Stefano Probst, Ted Mielczarek, Xananax, Zaki, and Тим Маринин.&lt;/p&gt;
</description>
<pubDate>Sat, 29 Feb 2020 04:54:12 +0000</pubDate>
<dc:creator>xrd</dc:creator>
<og:type>article</og:type>
<og:url>https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/</og:url>
<og:title>A half-hour to learn Rust</og:title>
<og:image>https://fasterthanli.me/img/logo-square.png</og:image>
<og:description>In order to increase fluency in a programming language, one has to read a lot of it. But how can you read a lot of it if you don't know what it means? In this article, instead of focusing on one or two concepts, I'll try to go through as many Rust snippets as I can, and explain what the keywords and symbols they contain mean. Ready? Go! let introduces a variable binding:</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://fasterthanli.me/blog/2020/a-half-hour-to-learn-rust/</dc:identifier>
</item>
<item>
<title>GDC 2020 has been postponed</title>
<link>https://gdconf.com/news/important-gdc-2020-update</link>
<guid isPermaLink="true" >https://gdconf.com/news/important-gdc-2020-update</guid>
<description>&lt;p&gt;After close consultation with our partners in the game development industry and community around the world, we’ve made the difficult decision to postpone the &lt;a href=&quot;https://gdconf.com?_mc=blog_x_gdcsfr_le_x_gdcsf_x_x-118-gdc20&quot; data-cke-saved-href=&quot;https://gdconf.com?_mc=blog_x_gama_le_x_gdcsf_x_x-118-gdc20&quot;&gt;Game Developers Conference&lt;/a&gt; this March.&lt;/p&gt;
&lt;p&gt;Having spent the past year preparing for the show with our advisory boards, speakers, exhibitors, and event partners, we're genuinely upset and disappointed not to be able to host you at this time .&lt;/p&gt;
&lt;p&gt;We want to thank all our customers and partners for their support, open discussions and encouragement. As everyone has been reminding us, great things happen when the community comes together and connects at GDC. For this reason, we fully intend to host a GDC event later in the summer. We will be working with our partners to finalize the details and will share more information about our plans in the coming weeks.&lt;/p&gt;
&lt;p&gt;For more information, please visit our &lt;a href=&quot;https://www.gdconf.com/faq?_mc=blog_x_gdcsfr_le_x_gdcsf_x_x-118-gdc20&quot; data-cke-saved-href=&quot;https://www.gdconf.com/faq?_mc=blog_x_gama_le_x_gdcsf_x_x-118-gdc20&quot;&gt;Frequently Asked Questions page&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 29 Feb 2020 00:04:52 +0000</pubDate>
<dc:creator>minimaxir</dc:creator>
<og:type>article</og:type>
<og:title>Important GDC 2020 Update</og:title>
<og:url>https://gdconf.com/news/important-gdc-2020-update</og:url>
<og:description>After close consultation with partners in the game development industry &amp; community around the world, organizers have made the difficult decision to postpone the Game Developers Conference this March.</og:description>
<og:image>https://gdconf.com/sites/default/files/47363127472_5f8d406177_k_0.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gdconf.com/news/important-gdc-2020-update</dc:identifier>
</item>
<item>
<title>Second U.S. coronavirus case of unknown origin confirmed in Santa Clara County</title>
<link>https://www.mercurynews.com/2020/02/28/santa-clara-county-announces-new-coronavirus-case/</link>
<guid isPermaLink="true" >https://www.mercurynews.com/2020/02/28/santa-clara-county-announces-new-coronavirus-case/</guid>
<description>&lt;p&gt;In a troubling turn in the nation’s fight against the new coronavirus, a second U.S. case of unknown origin was confirmed Friday in Santa Clara County.&lt;/p&gt;
&lt;p&gt;The case — an adult woman with pre-existing health problems, reportedly receiving care at Mountain View’s El Camino Hospital — is the second this week in which the infected person had no known exposure to the coronavirus either through travel overseas or another infected person. The first case also arose in the Bay Area, in Solano County.&lt;/p&gt;
&lt;p&gt;And Oregon health officials late Friday reported their own coronavirus case of unknown origin, which would be the country’s third.  It involves a Lake Oswego elementary school employee, according to the Oregonian.&lt;/p&gt;
&lt;p&gt;In the state of Washington, a person infected with the virus died, according to the Seattle and King County Department of Health. The fatality marks the first death associated with the virus in the United States.&lt;/p&gt;

&lt;p&gt;The Santa Clara County woman had not traveled to Solano County, site of Travis Air Force Base’s quarantine of Diamond Princess passengers. That news is alarming because it suggests the coronavirus may be spreading undetected in the Bay Area, possibly in at least two different places and populations.&lt;/p&gt;
&lt;p&gt;“This case represents some degree of community spread, some degree of circulation,” said Dr. Sara Cody, Health Officer for Santa Clara County and Director of the County of Santa Clara Public Health Department.&lt;/p&gt;
&lt;p&gt;“But we don’t know to what extent,” she said. “It could be a little, it could be a lot.”&lt;/p&gt;
&lt;p&gt;The news came on a day when the World Health Organization raised its risk assessment of the coronavirus to “very high,” citing its potential spread and impact. The assessment is the highest level short of declaring a global pandemic.&lt;/p&gt;
&lt;p&gt;Also on Friday, the U.S. stock market fell for the seventh straight day, logging the worst weekly loss since the 2008 recession, amid fears of global economic damage from the coronavirus outbreak.&lt;/p&gt;

&lt;p&gt;Dr. Cody urged local residents, businesses and schools to start planning for the prospect of a broader outbreak.&lt;/p&gt;
&lt;p&gt;“We need to begin taking important additional measures to at least slow it down as much as possible,” she said.&lt;/p&gt;
&lt;p&gt;These strategies range from the personal and simple, such as frequent hand washing, to the larger and more complex, such as implementing more flexible telecommuting policies at work, installing study-at-home plans for schools and creating more generous absentee policies at both work and school.&lt;/p&gt;
&lt;p&gt;“Start thinking about family preparedness — what you would need to do to stay home for a week or two,” she said. “We understand it may feel overwhelming and difficult to think about possible disruptions to everyday life.”&lt;/p&gt;
&lt;p&gt;The infected patient is an older adult woman with chronic health conditions who was hospitalized for a respiratory illness, county officials said. The Washington Post, citing an unnamed source, reported that the woman is 65 years old.&lt;/p&gt;
&lt;p&gt;Suspicious of her symptoms, her infectious disease physician on Wednesday contacted the Public Health Department to discuss the case and request testing for the novel coronavirus.&lt;/p&gt;
&lt;p&gt;The Santa Clara County Public Health Laboratory received the specimens Thursday and conducted the test on site, confirming the infection on Thursday evening. The county just gained the ability to do such rapid confirmation Wednesday; previous tests have had to be analyzed in a center in Atlanta, creating a time lag that had caused deep concerns.&lt;/p&gt;
&lt;p&gt;Santa Clara County now is working to identify the woman’s contacts and understand the extent of exposure.  Health care workers were exposed and are now quarantined, said Cody.  According to a nurse who wished to remain unidentified, the patient is at El Camino Hospital in Mountain View.&lt;/p&gt;
&lt;p&gt;Eight public health labs in California now have the ability to test for coronavirus. In addition to labs in Santa Clara County and Sacramento, there are tests available in the counties of Alameda, Tulare, Ventura, Los Angeles, Orange and San Diego. Federal officials said late Friday they are dispatching another 1,200 test kits to California.&lt;/p&gt;
&lt;aside class=&quot;related left&quot;&gt;
&lt;/aside&gt;&lt;p&gt;On Wednesday, health officials confirmed that a woman in Solano County also had become infected with no known exposure to the disease through travel to China where the outbreak was first reported or other overseas hotspots, the first such U.S. case.&lt;/p&gt;
&lt;p&gt;Late Friday, Solano County health officials announced an additional confirmed case involving a county resident who had been taken to Travis Air Force Base in Fairfield from the Diamond Princess cruise ship where an outbreak erupted while docked in Japan. A second county resident also at Travis who had tested positive in Japan is awaiting confirmation of results from U.S. testing.&lt;/p&gt;
&lt;p&gt;That would bring the total confirmed cases in the U.S. to 64. Of those, 45 were people who had been aboard the Diamond Princess cruise ship and repatriated to the U.S., three were repatriated from Wuhan, 12 were people who had recently traveled in China and two caught it from a close family member. Then there are the two cases in Solano and Santa Clara counties involving people with no known exposure risk.&lt;/p&gt;
&lt;p&gt;It is also the third case of the novel coronavirus disease, known as COVID-19, in Santa Clara County. County officials announced their first case, and the first in Northern California, on Jan. 31.&lt;/p&gt;
&lt;p&gt;But the previous cases, unlike the new case, involved risk factors that were well known: They had traveled to China.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;We are providing free access to this article. Please consider supporting local journalism like this by purchasing a subscription. For our 99-cent, 3-month trial offer to the Mercury News &lt;a href=&quot;https://checkout.mercurynews.com/NoLandingSMP?&amp;amp;pid=418&amp;amp;g2i_source=Event&amp;amp;g2i_medium=paywall&amp;amp;g2i_campaign=storyemb&quot;&gt;click here&lt;/a&gt; and for the East Bay Times &lt;a href=&quot;https://checkout.eastbaytimes.com/NoLandingSMP?&amp;amp;pid=419&amp;amp;g2i_source=Event&amp;amp;g2i_medium=paywall&amp;amp;g2i_campaign=storyemb&quot;&gt;click here&lt;/a&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;aside class=&quot;related left&quot;&gt;
&lt;/aside&gt;&lt;p&gt;County officials said Friday that local schools should plan for absenteeism and explore options for tele-learning and enhance surface cleaning. Late Friday, Palo Alto Unified School District announced that a parent of two students may have been exposed and that the students have been sent home as a precaution until further notice.&lt;/p&gt;
&lt;p&gt;Businesses, they said, should conduct meetings by video or telephone conference where possible, increase tele-working options and modify absenteeism policies and also enhance surface cleaning.&lt;/p&gt;
&lt;p&gt;Dr. Christopher Braden, Deputy Director of the National Center for Emerging and Zoonotic Infectious Diseases at the U.S. Centers for Disease Control and Prevention, said the new coronavirus can survive on surfaces for days but can be killed by disinfectants. But Cody added that the likely mode of infection is person to person.&lt;/p&gt;
&lt;p&gt;People should observe standard hygiene measures to avoid infection, health officials said, such as avoiding sick people and close contact with others, regularly washing hands and avoiding touching their eyes, nose and mouth.&lt;/p&gt;
&lt;p&gt;The El Camino nurse, who did not want to be identified, said staff were frustrated and worried about the lack of available tests from the U.S. Centers for Disease Control and Prevention, as well as the lack of protective gear such as N95 respirator masks to protect health care workers treating the sick. The nurse said a doctor and several emergency room staff have been quarantined.&lt;/p&gt;
&lt;p&gt;“We’re in Silicon Valley, the richest economy in the world and we don’t have enough N95 masks,” the nurse said. “It’s insanity. Everybody is worried about it. I’m just worried about containment. It’s so contagious.”&lt;/p&gt;



</description>
<pubDate>Fri, 28 Feb 2020 23:54:17 +0000</pubDate>
<dc:creator>beefman</dc:creator>
<og:type>article</og:type>
<og:title>Second U.S. coronavirus case of unknown origin confirmed in Santa Clara County; two others reported in Oregon, Washington</og:title>
<og:url>https://www.mercurynews.com/santa-clara-county-announces-new-coronavirus-case</og:url>
<og:description>The news suggests the deadly virus may be spreading undetected in multiple locations.</og:description>
<og:image>https://www.mercurynews.com/wp-content/uploads/2020/02/SJM-L-CORONA-0203-1.jpg?w=1024&amp;h=683</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.mercurynews.com/2020/02/28/santa-clara-county-announces-new-coronavirus-case/</dc:identifier>
</item>
<item>
<title>FCC Proposes to Fine Wireless Carriers $200M for Selling Customer Location Data</title>
<link>https://krebsonsecurity.com/2020/02/fcc-proposes-to-fine-wireless-carriers-200m-for-selling-customer-location-data/</link>
<guid isPermaLink="true" >https://krebsonsecurity.com/2020/02/fcc-proposes-to-fine-wireless-carriers-200m-for-selling-customer-location-data/</guid>
<description>&lt;p&gt;The &lt;strong&gt;U.S. Federal Communications Commission&lt;/strong&gt; (FCC) today proposed fines of more than $200 million against the nation’s four largest wireless carriers for selling access to their customers’ location information without taking adequate precautions to prevent unauthorized access to that data. While the fines would be among the largest the FCC has ever levied, critics say the penalties don’t go far enough to deter wireless carriers from continuing to sell customer location data.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-43845&quot; src=&quot;https://krebsonsecurity.com/wp-content/uploads/2018/05/locationtracking.jpg&quot; alt=&quot;&quot; width=&quot;596&quot; height=&quot;386&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The FCC proposed fining &lt;strong&gt;T-Mobile&lt;/strong&gt; $91 million; &lt;strong&gt;AT&amp;amp;T&lt;/strong&gt; faces more than $57 million in fines; &lt;strong&gt;Verizon&lt;/strong&gt; is looking at more than $48 million in penalties; and the FCC said &lt;strong&gt;Sprint&lt;/strong&gt; should pay more than $12 million.&lt;/p&gt;
&lt;p&gt;An FCC &lt;a href=&quot;https://docs.fcc.gov/public/attachments/DOC-362754A1.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;statement&lt;/a&gt; (PDF) said “the size of the proposed fines for the four wireless carriers differs based on the length of time each carrier apparently continued to sell access to its customer location information without reasonable safeguards and the number of entities to which each carrier continued to sell such access.”&lt;/p&gt;
&lt;p&gt;The fines are only “proposed” at this point because the carriers still have an opportunity to respond to the commission and contest the figures. &lt;em&gt;The Wall Street Journal&lt;/em&gt; first reported earlier this week that the FCC was considering the fines.&lt;/p&gt;
&lt;p&gt;The commission said it took action in response to a &lt;a href=&quot;https://www.nytimes.com/2018/05/10/technology/cellphone-tracking-law-enforcement.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;May 2018 story&lt;/a&gt; broken by &lt;em&gt;The New York Times&lt;/em&gt;, which exposed how a company called &lt;strong&gt;Securus Technologies&lt;/strong&gt; had been selling location data on customers of virtually any major mobile provider to law enforcement officials.&lt;/p&gt;
&lt;p&gt;That same month, KrebsOnSecurity &lt;a href=&quot;https://krebsonsecurity.com/2018/05/tracking-firm-locationsmart-leaked-location-data-for-customers-of-all-major-u-s-mobile-carriers-in-real-time-via-its-web-site/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;broke the news&lt;/a&gt; that &lt;strong&gt;LocationSmart&lt;/strong&gt; — a data aggregation firm working with the major wireless carriers — had a free, unsecured demo of its service online that anyone could abuse to find the near-exact location of virtually any mobile phone in North America.&lt;span id=&quot;more-50646&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In response, the carriers &lt;a href=&quot;https://krebsonsecurity.com/2018/06/verizon-to-stop-sharing-customer-location-data-with-third-parties/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;promised to “wind down” location data sharing agreements&lt;/a&gt; with third-party companies. But in 2019, &lt;strong&gt;Joseph Cox&lt;/strong&gt; at &lt;a href=&quot;https://www.vice.com/en_us/article/nepxbz/i-gave-a-bounty-hunter-300-dollars-located-phone-microbilt-zumigo-tmobile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vice.com showed&lt;/a&gt; that little had changed, detailing how he was able to locate a test phone after paying $300 to a bounty hunter who simply bought the data through a little-known third-party service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gigi Sohn&lt;/strong&gt; is a fellow at the Georgetown Law Institute for Technology Law and Policy and a former senior adviser to former FCC Chair Tom Wheeler in 2015. Sohn said this debacle underscores the importance of having strong consumer privacy protections.&lt;/p&gt;
&lt;p&gt;“The importance of having rules that protect consumers before they are harmed cannot be overstated,” Sohn said. “In 2016, the Wheeler FCC adopted rules that would have prevented most mobile phone users from suffering this gross violation of privacy and security. But [FCC] Chairman Pai and his friends in Congress eliminated those rules, because allegedly the burden on mobile wireless providers and their fixed broadband brethren would be too great. Clearly, they did not think for one minute about the harm that could befall consumers in the absence of strong privacy protections.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sen. Ron Wyden&lt;/strong&gt; (D-Ore.), a longtime critic of the FCC’s inaction on wireless location data sharing, likewise called for more stringent consumer privacy laws, calling the proposed punishment “comically inadequate fines that won’t stop phone companies from abusing Americans’ privacy the next time they can make a quick buck.”&lt;/p&gt;
&lt;p&gt;“Time and again, from Facebook to Equifax, massive companies take reckless disregard for Americans’ personal information, knowing they can write off comparatively tiny fines as the cost of doing business,” Wyden said in a written statement. “The only way to truly protect Americans’ personal information is to pass strong privacy legislation like my &lt;a href=&quot;https://www.wyden.senate.gov/imo/media/doc/Mind%20Your%20Own%20Business%20Act%20of%202019%20One%20Pager.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mind Your Own Business Act&lt;/a&gt; [PDF] to put teeth into privacy laws and hold CEOs personally responsible for lying about protecting Americans’ privacy.”&lt;/p&gt;

&lt;p class=&quot;mid-banner&quot;&gt;&lt;a href=&quot;https://www.akamai.com/us/en/resources/our-thinking/state-of-the-internet-report/global-state-of-the-internet-security-ddos-attack-reports.jsp?utm_source=krebsonsecurity&amp;amp;utm_medium=display&amp;amp;utm_id=F-MC-49586&amp;amp;utm_campaign=security_digital_publication_2020&amp;amp;utm_content=SOTI&quot;&gt;&lt;img src=&quot;https://krebsonsecurity.com/b-akamai/33.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;small&quot;&gt;Tags: &lt;a href=&quot;https://krebsonsecurity.com/tag/fcc/&quot; rel=&quot;tag&quot;&gt;FCC&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/federal-communications-commission/&quot; rel=&quot;tag&quot;&gt;Federal Communications Commission&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/georgetown-law-institute-for-technology-law-and-policy/&quot; rel=&quot;tag&quot;&gt;Georgetown Law Institute for Technology Law and Policy&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/gigi-sohn/&quot; rel=&quot;tag&quot;&gt;Gigi Sohn&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/joseph-cox/&quot; rel=&quot;tag&quot;&gt;Joseph Cox&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/new-york-times/&quot; rel=&quot;tag&quot;&gt;New York Times&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/securus-technologies/&quot; rel=&quot;tag&quot;&gt;Securus Technologies&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/sen-ron-wyden/&quot; rel=&quot;tag&quot;&gt;Sen. Ron Wyden&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/vice-com/&quot; rel=&quot;tag&quot;&gt;vice.com&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/wall-street-journal/&quot; rel=&quot;tag&quot;&gt;Wall Street Journal&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;postmetadata alt&quot;&gt;&lt;small&gt;This entry was posted on Friday, February 28th, 2020 at 5:12 pm and is filed under &lt;a href=&quot;https://krebsonsecurity.com/category/comingstorm/&quot; rel=&quot;category tag&quot;&gt;The Coming Storm&lt;/a&gt;. You can follow any comments to this entry through the &lt;a href=&quot;https://krebsonsecurity.com/2020/02/fcc-proposes-to-fine-wireless-carriers-200m-for-selling-customer-location-data/feed/&quot;&gt;RSS 2.0&lt;/a&gt; feed. You can skip to the end and leave a comment. Pinging is currently not allowed.&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 28 Feb 2020 23:03:05 +0000</pubDate>
<dc:creator>feross</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://krebsonsecurity.com/2020/02/fcc-proposes-to-fine-wireless-carriers-200m-for-selling-customer-location-data/</dc:identifier>
</item>
<item>
<title>If your cipher were secure, this image wouldn&amp;#039;t have repeating patterns (2015)</title>
<link>https://mailarchive.ietf.org/arch/msg/cfrg/e-jEGddvSbManBMppC8XAc5i8GY/</link>
<guid isPermaLink="true" >https://mailarchive.ietf.org/arch/msg/cfrg/e-jEGddvSbManBMppC8XAc5i8GY/</guid>
<description>&lt;h3&gt;Re: [Cfrg] Crystalline Cipher&lt;/h3&gt;


&lt;div class=&quot;msg-payload&quot; readability=&quot;17.008886565604&quot;&gt;
&lt;pre class=&quot;wordwrap&quot;&gt;
On Wed, May 20, 2015 at 3:59 PM, Mark McCarron &lt;a href=&quot;mailto:&amp;amp;lt;mark.mccarron@eclipso.eu&amp;amp;gt;&quot;&gt;&amp;lt;mark.mccarron@eclipso.eu&amp;gt;&lt;/a&gt;
wrote:

&amp;gt; I'm somewhat disappointed in your reply, as I presumed that someone with a
&amp;gt; stated interest in ciphers would be eager to investigate anything new to
&amp;gt; pop up that didn't have obvious holes in it.


Hi Mark,

I did investigate your scheme, and I'm afraid to say it's obviously broken.
It appears to be an implementation of a Knuth Shuffle with a few added
bells and whistles.

This image, which I believe you produced, shows repeated patterns in the
ciphertext:

&lt;a href=&quot;https://i.imgur.com/MWmMc0J.png&quot; rel=&quot;nofollow&quot;&gt;https://i.imgur.com/MWmMc0J.png&lt;/a&gt;

Likewise, there are severe failures on Chi Squared tests:

&lt;a href=&quot;http://www.freecx.co.uk/cryptanalysis/Crystalline/&quot; rel=&quot;nofollow&quot;&gt;http://www.freecx.co.uk/cryptanalysis/Crystalline/&lt;/a&gt;

Specifically:

&lt;a href=&quot;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(1)_10MB.txt&quot; rel=&quot;nofollow&quot;&gt;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(1)_10MB.txt&lt;/a&gt;

Overall Chi Squared value is 7474.808 (threshold 18.4753)
Overall likely non-uniform (&amp;gt;99%)

&lt;a href=&quot;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(2)_10MB.txt&quot; rel=&quot;nofollow&quot;&gt;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(2)_10MB.txt&lt;/a&gt;

Overall Chi Squared value is 13485.34 (threshold 30.5779)
Overall likely non-uniform (&amp;gt;99%)

&lt;a href=&quot;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(4)_10MB.txt&quot; rel=&quot;nofollow&quot;&gt;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(4)_10MB.txt&lt;/a&gt;

Overall Chi Squared value is 20607.94 (threshold 52.1914)
Overall likely non-uniform (&amp;gt;99%)

&lt;a href=&quot;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(8)_10MB.txt&quot; rel=&quot;nofollow&quot;&gt;http://www.freecx.co.uk/cryptanalysis/Crystalline/bias-result_(8)_10MB.txt&lt;/a&gt;

Overall Chi Squared value is 45699.52 (threshold 91.81917)
Overall likely non-uniform (&amp;gt;99%)

I think the biggest problem though is all of this has already been pointed
out to you repeatedly in other forums and you completely refuse to
acknowledge that your cipher fails to meet the absolute most minimum
criteria for a secure cipher.

If your cipher were secure, this image would not contain obvious repeating
patterns:

&lt;a href=&quot;https://i.imgur.com/MWmMc0J.png&quot; rel=&quot;nofollow&quot;&gt;https://i.imgur.com/MWmMc0J.png&lt;/a&gt;

If your cipher were secure, it would pass all randomness tests.

There are many more requirements for a secure cipher, but your cipher fails
to meet the baseline requirements.

-- 
Tony Arcieri
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 28 Feb 2020 22:41:32 +0000</pubDate>
<dc:creator>EthanHeilman</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mailarchive.ietf.org/arch/msg/cfrg/e-jEGddvSbManBMppC8XAc5i8GY/</dc:identifier>
</item>
<item>
<title>How to brainstorm great business ideas</title>
<link>https://www.indiehackers.com/post/how-to-brainstorm-great-business-ideas-ab51c3d51c</link>
<guid isPermaLink="true" >https://www.indiehackers.com/post/how-to-brainstorm-great-business-ideas-ab51c3d51c</guid>
<description>&lt;p&gt;It's been said that ideas don't matter, execution does. I wholeheartedly disagree. You need both to succeed, but you can only get so good at execution. A great idea gives you much more leverage.&lt;/p&gt;
&lt;p&gt;Below is my personal framework for coming up with great business ideas.&lt;/p&gt;
&lt;h3&gt;The Basics&lt;/h3&gt;
&lt;p&gt;Most people equate product ideas with business ideas. That's wrong. Your product is only one part of your business. There are at least four parts in total:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;the problem you're solving (aka the market)&lt;/li&gt;
&lt;li&gt;the distribution channel to reach customers&lt;/li&gt;
&lt;li&gt;the monetization model you use to make money&lt;/li&gt;
&lt;li&gt;the solution to the problem (aka your product or service)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Great business ideas are strong in all of these areas.&lt;/p&gt;
&lt;h3&gt;Problem First, Solution Last&lt;/h3&gt;
&lt;p&gt;The #1 rule is to put the problem first and the solution last. Your product/service should be the &lt;em&gt;last&lt;/em&gt; thing you think about.&lt;/p&gt;
&lt;p&gt;Why? Because it's the most flexible. You can build anything. But the other three aspects are constrained. You have to choose from a limited set of viable problems, channels, and models. Start with the constraints. It's insane to build a tool for a job before you even know what the job is, but many of us are doing just that.&lt;/p&gt;
&lt;p&gt;Seth Godin puts it nicely in &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://amzn.to/37XFFm6&quot;&gt;This Is Marketing&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LBYuuv3.png&quot; alt=&quot;Don't make a key and then look for a lock. Find a lock and then fashion a key.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you find yourself trying to think up product ideas, then you're putting the solution first. Not only is that backwards, but it's harder! How exactly are you supposed to think up good product ideas out of thin air?&lt;/p&gt;
&lt;p&gt;You'll make your life easier and your business ideas better if you put the solution last and the problem first.&lt;/p&gt;
&lt;h3&gt;What makes for a good problem?&lt;/h3&gt;
&lt;p&gt;The first step is to recognize a good problem when you see one.&lt;/p&gt;
&lt;p&gt;A good problem is one that many thousands of people have. Otherwise you won't have enough customers. For indie hackers, this number doesn't need to be too big. Usually a few hundred thousand is enough. In some cases, much less.&lt;/p&gt;
&lt;p&gt;You want these to be people you genuinely like talking to, because they'll be your customers for years. And ideally you have the same problem as them, too, so you can empathize with what they're going through.&lt;/p&gt;
&lt;p&gt;It's best if the people with this problem hang out together and identify as a named group. For example, &quot;developers&quot; or &quot;teachers&quot; or &quot;NBA fans&quot; or &quot;YouTubers.&quot; That makes them much more likely to make product recommendations to each other, enabling word-of-mouth growth. It also gives you juicy channels to target, which will come into play later.&lt;/p&gt;
&lt;p&gt;It helps if the problem is a growing one, meaning more and more people have it every year, which sets the stage for your business to grow. And you want it to be a frequent problem, so people seek the solution on a regular basis.&lt;/p&gt;
&lt;p&gt;Finally, and arguably most importantly, you want it to be a valuable problem. In other words, you want it to be a problem that people pay money to solve. &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.indiehackers.com/post/why-do-some-entrepreneurs-earn-more-than-others-dc81985afd?commentId=-M0t2SddC3EwBGMmLGAO&quot;&gt;Preferably lots of money&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Finding a Problem&lt;/h3&gt;
&lt;p&gt;Armed with this knowledge, it's time to find a problem. You're going to have to brainstorm. I strongly disagree with anyone who recommends that you just sit around waiting for inspiration to strike.&lt;/p&gt;
&lt;p&gt;It's hard to say where the best place to start brainstorming is, not because there are so few, but because there are so many. There are thousands of good problems out there, and practically anything can trigger you to stumble across one.&lt;/p&gt;
&lt;p&gt;What's more important is that you recognize a good problem when you see one, and vice versa. If a problem scores poorly on the rubric above, don't waste your time. Keep brainstorming.&lt;/p&gt;
&lt;p&gt;For that reason, it makes sense to start with one of the product evaluation criteria as your prompt. For example, since it's helpful to solve a problem that you have yourself, why not take a look at your own life and see if you can spot any problems. What worries you, exasperates you, or annoys you?&lt;/p&gt;
&lt;p&gt;Most of the other criteria work well, too. Who do you like spending time with? What groups are you a part of? What do people do frequently? What seems to be fundamentally growing into a bigger trend?&lt;/p&gt;
&lt;p&gt;My personal favorite is to start by looking at where people are already spending lots of time and money. Money changing hands is almost always a sign that there's a valuable problem being solved.&lt;/p&gt;
&lt;h3&gt;Avoid Fatal Mistakes&lt;/h3&gt;
&lt;p&gt;Founders typically have already made one or two huge mistakes by this point. If you can avoid these, you'll be way ahead before you've even started.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;As I've mentioned, don't start with a solution in mind. You need to be honest with yourself here, because this is sometimes subtle. If you're already attached to a particular idea for a product, technology, or set of features that you want to build, that's going to ruin your ability to find a solid problem and analyze it objectively. You've put the solution first, and it's blinding you to opportunities.&lt;/li&gt;
&lt;li&gt;Don't rule out already-solved problems. Nothing in the criteria above says that a good problem is one that nobody is solving. In fact, the opposite is usually true. Almost all successful businesses start by tackling problems that have popular, pre-existing, alternative solutions. Way too many founders attempt to solve unsolved problems. They're usually unsolved because nobody cares.&lt;/li&gt;
&lt;li&gt;Don't rule out high-value problems. Indie hackers in particular are notorious for this. You don't have to sell something for cheap to have a chance at success. That's backwards. It's hard to sell cheap things, because people care less. I've bought more cars than back scratchers in my life. It doesn't matter that you're a small, scrappy startup. I've met 2-person teams selling their software for $10,000/year. Pick a high-value problem and charge a high price.&lt;/li&gt;
&lt;li&gt;Have a customer in mind. If you can't articulate whose problem you're solving, how is your website going to articulate it? If you want to wait and see who the best customer turns out to be, that sounds a lot like a key looking for a lock. If you think your product is for everyone, it's probably for nobody. If you describe your target customer by combining a bunch of attributes (e.g. &quot;iOS users who need to get tasks done but prefer modern, clean UIs&quot;), that's not an actual group of people. You're just describing the features of a product you're already biased toward building.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Some of these points are a bit counterintuitive. That's why so many generations of smart-but-uninformed indie hackers are repeating the mistakes of their predecessors. But it's easy to avoid the big mistakes once you know them.&lt;/p&gt;
&lt;h3&gt;Don't Skip Distribution&lt;/h3&gt;
&lt;p&gt;Once you have a good problem, you need a distribution strategy. You need an answer to the question, &quot;How am I actually going to reach my customers?&quot;&lt;/p&gt;
&lt;p&gt;The number one mistake here is skipping this step entirely. Especially if you're a developer, a designer, or a creator of any kind—you're antsy to get to the product. Growth-related activities probably seem boring, perplexing, or even nefarious to you. You'd rather just build something so great that it grows on its own.&lt;/p&gt;
&lt;p&gt;Sadly, that almost never happens. Relying on it is akin to playing the lottery. Sure, you've seen some stories. Some people win. But probably not you.&lt;/p&gt;
&lt;p&gt;Remember that even though artists like to complain about the record labels, they do record deals regardless. It doesn't matter how great your music is if nobody ever hears it. Your business can't make money if you can't reach your customers.&lt;/p&gt;
&lt;p&gt;This is too crucial an aspect of your business to simply put it off and leave it to luck.&lt;/p&gt;
&lt;h3&gt;Think About Channels&lt;/h3&gt;
&lt;p&gt;Fortunately, brainstorming about distribution is easier than you might think. You're limited to a small number of channels that you need to investigate.&lt;/p&gt;
&lt;p&gt;From the book &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://amzn.to/3a5ki3u&quot;&gt;Traction&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/XQN3hA1.png&quot; alt=&quot;There are 19 different traction channels&quot;/&gt;&lt;/p&gt;
&lt;p&gt;For example, channels include things like SEO, press, content marketing, social media, sales, partnerships, ads, etc.&lt;/p&gt;
&lt;p&gt;I won't get into testing traction channels, because that's beyond the scope of this post. When you're first coming up with an idea, at best you'll have educated guesses as to what might work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But you should take the time to make those guesses.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the beginning, the answer should almost always be &quot;direct outreach leading to 1-on-1 convos via the phone or in-person.&quot; That's usually the easiest way to get your first few customers. You'll be much more persuasive than any landing page could be, and you'll learn crucial lessons from these conversations.&lt;/p&gt;
&lt;p&gt;The only reason big companies don't do this is because it's expensive and doesn't scale, but you shouldn't care about scale when you're trying to go from 0 customers to 1 customer, or 1 customer to 10 customers, or even 10 customers to 100. Don't copy what big companies are doing when you're a small company.&lt;/p&gt;
&lt;p&gt;Later, however, scale is important. It's not enough just to launch on Product Hunt or Hacker News, because you can usually only do that once. You need to put some thought into scalable, long-term, repeatable channels.&lt;/p&gt;
&lt;p&gt;Luckily, since you started by thinking about the problem, you have some hints. You know who your customers are, right? So ask yourself: What channels are they already making heavy use of?&lt;/p&gt;
&lt;p&gt;For example, if I was solving a problem for software engineers, I'd be looking at GitHub, Hacker News, SEO (devs do tons of Google searches), conferences, code-related newsletters and podcasts and YouTube channels and communities, Twitter influencers, bootcamps, etc. These are all potential channels.&lt;/p&gt;
&lt;p&gt;If you can't think of anything decent, that's usually a sign that you don't know enough about your target customers and how to reach them. It's possible that you need to go back to the drawing board and pick a different problem or set of customers.&lt;/p&gt;
&lt;h3&gt;Boring Problems, Innovative Solutions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, think about your solution. How are you going to solve the problem for your customers?&lt;/p&gt;
&lt;p&gt;Don't just copy what competitors are doing. Yes, I advised you to pick a straightforward, proven &lt;strong&gt;problem&lt;/strong&gt;. But don't default to that with your &lt;strong&gt;solution&lt;/strong&gt;. This is where you stand out. This is where you innovate. If anything, you want to solve the problem in the exact &lt;strong&gt;opposite&lt;/strong&gt; way of your competitors, and inject as much of your unique personality and ideals as possible. It can even be simple things. I made Indie Hackers blue because every other blog was white.&lt;/p&gt;
&lt;p&gt;More importantly, your solution should be built from &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://fs.blog/2018/04/first-principles&quot;&gt;first principles&lt;/a&gt;. You should be taking everything you learned about and working backwards to build the best solution that fits.&lt;/p&gt;
&lt;p&gt;In fact, the essence of product-market fit is tailoring your product specifically to your customers' needs. You make it such a good fit for them, specifically, that it's a no-brainer for them to use it. Stripe, for example, knew its target customers were developers, so they focused heavily on great API design and stellar documentation. This is the kind of advantage you can only get if you've identified a customer and their problems &lt;strong&gt;before&lt;/strong&gt; you started on the solution.&lt;/p&gt;
&lt;p&gt;You also want product-distribution fit. Can you find a way to extend your solution so it perfectly fits into your chosen distribution channel? Wes Bos, for example, tweets out educational tidbits from his upcoming courses, and it's some of the best content on Twitter. Indie Hackers' #1 distribution channel was HN, so I specifically modeled the interviews on the site after posts I'd seen succeed consistently on HN. Again, this is the kind of advantage you can only get if you've identified a distribution channel &lt;strong&gt;before&lt;/strong&gt; you started thinking about your product/service.&lt;/p&gt;
&lt;p&gt;(Hopefully you're starting to see why the #1 worst thing you can do is skip straight to this step and try building a product before thinking deeply about the problem and distribution.)&lt;/p&gt;
&lt;p&gt;If you can't think of a good solution, or if it's too hard or expensive for you to build the solution, or if the competition is completely unassailable (due to something like network effects or economies of scale), then you may need to go back a step or two.&lt;/p&gt;
&lt;p&gt;Commonly, what you need to do is take the problem you identified in step 1 and shrink it a bit. Make it more specific, so it affects slightly fewer people (a niche), and then try to think of a channel and solution specifically for them.&lt;/p&gt;
&lt;h3&gt;Start Small&lt;/h3&gt;
&lt;p&gt;The final mistake to avoid here is attempting to start too big. You are not Google, or Uber, or Airbnb. You're an indie hacker, and you're just getting started.&lt;/p&gt;
&lt;p&gt;Big, successful companies looked completely different in the early days. Trying to copy what they look like today is a huge mistake. You have to work your way there one step at a time by starting small, accruing small wins, and building off of those.&lt;/p&gt;
&lt;p&gt;For example, &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;http://egghead.io&quot;&gt;egghead.io&lt;/a&gt; started with the founder, Joel, finding a bunch of videos on YouTube, putting them in a ZIP file, and offering them to someone else's mailing list for a price. That's a far cry from what egghead does today. But he couldn't have started where he is today, any more than you can jump to the top of the ladder.&lt;/p&gt;
&lt;p&gt;Take it one rung at a time.&lt;/p&gt;
&lt;p&gt;When you're thinking about the problem you're solving and the size of the market; when you're thinking about the distribution channel; and when you're thinking about the product: &lt;strong&gt;think small.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What's the simplest thing you can do? Go even simpler than that.&lt;/p&gt;
&lt;p&gt;The one exception here is your monetization model, where you want to do the opposite. Charge more. Indie hackers should not compete on price. That's for huge companies like Amazon.&lt;/p&gt;
&lt;h3&gt;Putting It All Together&lt;/h3&gt;
&lt;p&gt;This post came out much longer than I thought it would, but once you internalize some of the lessons, you can actually run through this process quite quickly.&lt;/p&gt;
&lt;p&gt;True idea validation is going to require rolling up your sleeves, talking to people, and maybe even releasing a product. But you can make it pretty far at just the theoretical phase by thinking about some of the concepts above.&lt;/p&gt;
&lt;p&gt;As a sanity check, try reverse engineering a few other successful companies by running them through this process. Check the &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.indiehackers.com/interviews&quot;&gt;interviews&lt;/a&gt;, the &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.indiehackers.com/podcast&quot;&gt;podcast&lt;/a&gt;, or the &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.indiehackers.com/products&quot;&gt;products directory&lt;/a&gt; for inspiration.&lt;/p&gt;
</description>
<pubDate>Fri, 28 Feb 2020 20:40:49 +0000</pubDate>
<dc:creator>jhow15</dc:creator>
<og:description>It's been said that ideas don't matter, execution does. I wholeheartedly disagree. You need both to succeed, but you can only get so good at execution....</og:description>
<og:image>https://storage.googleapis.com/indie-hackers.appspot.com/shareable-images/posts/ab51c3d51c</og:image>
<og:title>How to brainstorm great business ideas</og:title>
<og:type>article</og:type>
<og:url>https://www.indiehackers.com/post/how-to-brainstorm-great-business-ideas-ab51c3d51c</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.indiehackers.com/post/how-to-brainstorm-great-business-ideas-ab51c3d51c</dc:identifier>
</item>
</channel>
</rss>