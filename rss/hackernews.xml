<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>I&amp;#039;m one of the inventors of RSS and I need your help to reboot the Internet</title>
<link>https://getpolarized.io/2019/04/11/Polar-Initial-Crowdfunding-Campaign.html</link>
<guid isPermaLink="true" >https://getpolarized.io/2019/04/11/Polar-Initial-Crowdfunding-Campaign.html</guid>
<description>&lt;p&gt;&lt;iframe class=&quot;embed-responsive-item&quot; src=&quot;https://www.youtube.com/embed/wfxmsXxod-g&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;div class=&quot;text-center&quot;&gt;&lt;a class=&quot;btn btn-success btn-lg font-weight-bold m-3&quot; onclick=&quot;sendEvent('main-cta', 'click-crowdfunding-donate-button')&quot; href=&quot;https://opencollective.com/polar-bookshelf&quot;&gt;Donate Now&lt;/a&gt;&lt;/div&gt;

&lt;p&gt;I’m Kevin Burton, the creator of Polar and I need your help.&lt;/p&gt;
&lt;p&gt;For the past six months I’ve been working on a project to address the problems with the current Internet.&lt;/p&gt;
&lt;p&gt;Polar is a new type of app which helps you build a personal knowledge repository and keeps all your reading in one place. It allows you to annotate all your documents including highlighting and manage them with tags and notes.&lt;/p&gt;
&lt;p&gt;Polar also supports advanced features like spaced repetition (so you never forget anything again) and web archival so you can view a document forever even if it’s deleted on the original site.&lt;/p&gt;
&lt;p&gt;More importantly, it’s the starting ramp for a more long term vision around content sharing and knowledge collaboration.&lt;/p&gt;

&lt;p&gt;I’ll touch upon this in a minute but Polar is something I’ve been thinking about for a decade.&lt;/p&gt;
&lt;p&gt;Simply put - I want to reboot the Internet and take it to a time when data and knowledge was shared more freely.&lt;/p&gt;
&lt;p&gt;Polar is the platform I’m building to enable this vision.&lt;/p&gt;
&lt;p&gt;I see Polar as another layer on top of the existing Internet which includes easy content sharing, annotations, and archival.&lt;/p&gt;
&lt;p&gt;To that end I’m starting a crowdfunding campaign to keep Polar open source and really put the project into overdrive - and I need your support.&lt;/p&gt;
&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;/h2&gt;
&lt;p&gt;Here’s the plan.&lt;/p&gt;
&lt;p&gt;First we’re going to raise twenty five thousand dollars from our current user base over the next month.&lt;/p&gt;
&lt;p&gt;We polled our users and asked them what they would be willing do donate and the average was twenty seven dollars, and of course we have thousands of users - so I think this is a reasonable goal. Now of course, if you’d like do donate more than $27 don’t let me stop you.&lt;/p&gt;
&lt;p&gt;We’re also going to allow donors to convert their donations to Polar Premium.&lt;/p&gt;
&lt;p&gt;There’s a link below to the crowdfunding campaign and also one directly in Polar when you’re ready to donate.&lt;/p&gt;
&lt;p&gt;Once we’ve raised this initial round, we’re then going to use that momentum to raise $150k from the Internet as a whole.&lt;/p&gt;
&lt;p&gt;Possibly through a system like Kickstarter or Indiegogo but we’re still investigating our options.&lt;/p&gt;
&lt;p&gt;This should get us through the next 6-9 months and allow us apply for grants to continue supporting development over the long term.&lt;/p&gt;
&lt;p&gt;The grant application process itself can take 3-6 months but the funding could be much larger and allow us to build something really special.&lt;/p&gt;
&lt;h2 id=&quot;how-your-support-will-help-polar&quot;&gt;How Your Support Will Help Polar&lt;/h2&gt;
&lt;p&gt;The money will help us improve usability, reliability and focus on feature requests from our user base.&lt;/p&gt;
&lt;p&gt;Additionally, we’re planning on adding mobile support including iOS and Android and improving our user interface (including a dark mode).&lt;/p&gt;
&lt;p&gt;We’re also going to implement a new viewer to support most popular document formats including ePub and Mobi.&lt;/p&gt;
&lt;p&gt;Most importantly we’re going to focus on team sharing and collaboration. These are two major features of Polar we haven’t shipped yet but they’re the ones I’m most excited about.&lt;/p&gt;
&lt;p&gt;There’s a lot under the surface of Polar that you haven’t seen yet. Mostly architectural work but I think we’re really close to something amazing.&lt;/p&gt;
&lt;p&gt;I’ve included links below to our roadmap if you’re interested in exactly what we’d like to accomplish..&lt;/p&gt;
&lt;p&gt;The long term goal is to have Polar financially self sufficient but in order to get there we need more time to expand our initial user base.&lt;/p&gt;
&lt;h2 id=&quot;freemium-model&quot;&gt;Freemium Model&lt;/h2&gt;
&lt;p&gt;Polar will be funded by a freemium model with 95% of users using Polar for free.&lt;/p&gt;
&lt;p&gt;More importantly, I want to continue to keep Polar Open Source.&lt;/p&gt;
&lt;p&gt;I think it’s vital that a tool that holds your personal knowledge repository is built on a foundation that you can trust isn’t going to simply vanish.&lt;/p&gt;
&lt;p&gt;Polar’s primary funding long term will be supported by sales of Polar premium.&lt;/p&gt;
&lt;p&gt;We will always support using Polar as Open Source and users can build from source code directly.&lt;/p&gt;
&lt;p&gt;We’re will also have free versions of Polar which will be very easy to install and without annoying ads or nagging you to constantly upgrade.&lt;/p&gt;
&lt;h2 id=&quot;premium-versions&quot;&gt;Premium Versions&lt;/h2&gt;
&lt;p&gt;The premium versions of Polar designed to be very affordable - $4.99 per month - about the price of a cup of coffee.&lt;/p&gt;
&lt;p&gt;If we haven’t generated enough value for you that you wouldn’t buy me a cup of coffee I think we’re doing something wrong.&lt;/p&gt;
&lt;p&gt;I’ve included a rough feature breakdown so you can see what features we intend on charging for at each level.&lt;/p&gt;
&lt;p&gt;The funds we raise will primarily be used to allow me to concentrate on Polar but also bring in additional developers who are more skilled in specific areas including UI, design and React development.&lt;/p&gt;
&lt;h2 id=&quot;polar-is-important&quot;&gt;Polar is Important&lt;/h2&gt;
&lt;p&gt;Polar is an important project for me.&lt;/p&gt;
&lt;p&gt;I’m very passionate about open content and open source and have devoted the last 20 years of my life to fighting for the open web.&lt;/p&gt;
&lt;p&gt;I was one of the inventors of RSS and podcasting and helped create many projects within the Apache Software Foundation including Apache Maven.&lt;/p&gt;
&lt;p&gt;The last ten years I’ve been running a search company I started named Datastreamer which is a petabyte-scale search engine which I built to index large scale web content on behalf of our customers.&lt;/p&gt;
&lt;p&gt;I’m deeply troubled with the way the Internet is becoming more and more locked up behind walled gardens.&lt;/p&gt;
&lt;p&gt;We’re in the middle of a data war.&lt;/p&gt;
&lt;p&gt;Companies like Facebook, and Elsevier want to lock up the web and science.&lt;/p&gt;
&lt;p&gt;But knowledge dies without oxygen. Science literally can’t work without active peer review.&lt;/p&gt;
&lt;p&gt;This is also something that directly impacts education as a whole.&lt;/p&gt;
&lt;p&gt;College has become a bubble with students taking on hundreds of thousands of dollars of debt just to finish their degree.&lt;/p&gt;
&lt;p&gt;The price of textbooks alone has increased 1000% in the last 20 years.&lt;/p&gt;
&lt;p&gt;What’s sad is that we’re losing.&lt;/p&gt;
&lt;p&gt;Facebook made 53 billion dollars last year. By comparison, Wikimedia, which shares their data openly, raised $100M in donations.&lt;/p&gt;
&lt;p&gt;This means Facebook made 530x more than Wikimedia.&lt;/p&gt;
&lt;p&gt;Now it’s a bit of an apples to oranges comparison but the challenge is that strictly non-profit organizations generally tend to lag behind for-profit corporations.&lt;/p&gt;
&lt;p&gt;Mark Twain once said that by the time the truth is out of bed a lie is half-way around the world.&lt;/p&gt;
&lt;p&gt;I feel the same about open and closed data.&lt;/p&gt;
&lt;p&gt;Closed data models have the potential for such massive revenues that open data just lags behind.&lt;/p&gt;
&lt;p&gt;Polar is more of a long term vision around distributed content and knowledge sharing which I think can break down these walled gardens and reboot the web to a time when content and knowledge was shared more freely.&lt;/p&gt;
&lt;p&gt;The reason I’m so focused on Polar becoming economically self sufficient is that large organizations like Facebook have such a massive amount of cash compared to non-profits like Wikimedia that this puts us at a major disadvantage.&lt;/p&gt;
&lt;p&gt;I want Polar to be able to stand by itself and have the capital needed to reboot the Internet but at the same time not infringe on the rights of our user base or lock up portions of the Internet the way other companies have done.&lt;/p&gt;
&lt;p&gt;Edmund Burke said that for evil to win is for good men to do nothing.&lt;/p&gt;
&lt;p&gt;This is an uphill battle - but we’re in this together.&lt;/p&gt;
&lt;p&gt;Thanks for all your support.&lt;/p&gt;

&lt;div class=&quot;related-posts&quot;&gt;
&lt;p&gt;
&lt;h4&gt;Related Posts&lt;/h4&gt;
&lt;/p&gt;
&lt;div class=&quot;post-list&quot;&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;col-lg-4&quot;&gt;
&lt;div class=&quot;card m-1&quot; readability=&quot;6.8048433048433&quot;&gt;&lt;a href=&quot;https://getpolarized.io/2019/04/11/Polar-Mission-Statement.html&quot;&gt;&lt;img class=&quot;card-img-top&quot; src=&quot;https://getpolarized.io/assets/images/darts-scaled.png&quot; alt=&quot;Polar Mission Statement and Design for a Personal Knowledge Repository&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;card-body&quot; readability=&quot;29.621082621083&quot;&gt;
&lt;h5 class=&quot;card-title&quot;&gt;&lt;a href=&quot;https://getpolarized.io/2019/04/11/Polar-Mission-Statement.html&quot;&gt;Polar Mission Statement and Design for a Personal Knowledge Repository&lt;/a&gt;&lt;/h5&gt;
&lt;p class=&quot;card-text&quot;&gt;This document is under construction and still evolving. Polar Mission Statement and Design for a Personal Knowledge Repository Polar has a broad mission statement to provide high quality tools for document annotation, management of documents (tagging, storage, etc) and sharing...&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-lg-4&quot;&gt;
&lt;div class=&quot;card m-1&quot; readability=&quot;5.5837004405286&quot;&gt;&lt;a href=&quot;https://getpolarized.io/2019/04/10/Roadmap-Q2-Q3-2019.html&quot;&gt;&lt;img class=&quot;card-img-top&quot; src=&quot;https://getpolarized.io/assets/images/long-road-scaled.png&quot; alt=&quot;Polar Roadmap for Q2 and Q3 2019&quot;/&gt;&lt;/a&gt;
&lt;div class=&quot;card-body&quot; readability=&quot;28.348017621145&quot;&gt;
&lt;h5 class=&quot;card-title&quot;&gt;&lt;a href=&quot;https://getpolarized.io/2019/04/10/Roadmap-Q2-Q3-2019.html&quot;&gt;Polar Roadmap for Q2 and Q3 2019&lt;/a&gt;&lt;/h5&gt;
&lt;p class=&quot;card-text&quot;&gt;Polar Roadmap for Q2 and Q3 2019 I wanted to write up a quick blog post for the features I’d like to see in Q2 and Q3 2019 for you guys to review. Q2 2019 Initial version of sharing. Single...&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;col-lg-4&quot;&gt;
&lt;div class=&quot;card m-1&quot; readability=&quot;5.6352201257862&quot;&gt;
&lt;div class=&quot;card-body&quot; readability=&quot;27.37106918239&quot;&gt;
&lt;h5 class=&quot;card-title&quot;&gt;&lt;a href=&quot;https://getpolarized.io/2019/04/05/Google-Will-Kill-Chrome-Extension-Innovation.html&quot;&gt;Google Killing Chrome Extensions with 1 Week Publishing Delays&lt;/a&gt;&lt;/h5&gt;
&lt;p class=&quot;card-text&quot;&gt;Google Killing Chrome Extensions with 1 Week Publishing Delays Google has recently started performing reviews/code audits on any chrome extension that requests the permissions. I can understand the need to audit the code for safety since this is a very...&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 23 Apr 2019 13:05:46 +0000</pubDate>
<dc:creator>burtonator</dc:creator>
<og:title>Polar Initial Crowdfunding Campaign</og:title>
<og:description>A powerful document manager for Mac, Windows, and Linux for managing web content, books, and notes and supports tagging, annotation, highlighting and keeps track of your reading progress.</og:description>
<og:url>https://getpolarized.io/2019/04/11/Polar-Initial-Crowdfunding-Campaign.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://getpolarized.io/2019/04/11/Polar-Initial-Crowdfunding-Campaign.html</dc:identifier>
</item>
<item>
<title>I Sell Onions on the Internet</title>
<link>https://www.deepsouthventures.com/i-sell-onions-on-the-internet/</link>
<guid isPermaLink="true" >https://www.deepsouthventures.com/i-sell-onions-on-the-internet/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field.jpg&quot;&gt;&lt;img src=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field-300x225.jpg&quot; alt=&quot;Vidalia Onions in the field&quot; width=&quot;300&quot; height=&quot;225&quot; class=&quot;alignright size-medium wp-image-186&quot; srcset=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field-300x225.jpg 300w, https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field-1024x768.jpg 1024w, https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field.jpg 1200w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;&lt;/a&gt;Vidalia Onions to be exact.&lt;/p&gt;
&lt;p&gt;They’re classified as a sweet onion, and because of their mild flavor (they don’t make your eyes tear up), some folks can eat them like an apple. Most of my customers do.&lt;/p&gt;
&lt;p&gt;During a phone order one season – 2018 I believe – a customer shared this story where he smuggled some Vidalias onto his vacation cruise ship, and during each meal, would instruct the server to ‘&lt;em&gt;take this onion to the back, chop it up, and add it onto my salad&lt;/em&gt; ‘. That story made me smile.&lt;/p&gt;
&lt;p&gt;Folks who love Vidalias, &lt;em&gt;love Vidalias&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let me stop, though. I don’t want to get ahead of myself.&lt;/p&gt;
&lt;p&gt;How did all this start? I’m a web guy. I’m not a farmer.&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;I’M ADDICTED TO DOMAIN NAMES&lt;/h2&gt;
&lt;p&gt;Oddly enough, it &lt;u&gt;didn’t&lt;/u&gt; start with an idea.&lt;/p&gt;
&lt;p&gt;Back in 2014, the domain name &lt;a href=&quot;https://www.vidaliaonions.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;VidaliaOnions.com&lt;/a&gt; expired, and went up for auction. For some reason the original owner abandoned it, and being a GA native, I recognized it ’cause I was familiar with the industry. I’ve &lt;a href=&quot;https://www.deepsouthventures.com/build-a-side-business/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;been buying expired or abandoned domain names&lt;/a&gt; for a while, and enjoy developing them into niche businesses. This one was different though – I backordered the domain as a spectator, but for kicks &amp;amp; giggles, I dropped in a bid around $2,200 ’cause I was confident I’d be outbid.&lt;/p&gt;
&lt;p&gt;5 minutes later, I was the proud owner of VidaliaOnions.com. I had no idea what to do with it. Ready, fire, aim.&lt;/p&gt;
&lt;p&gt;After the domain landed in my account, I attempted to re-focus my attention on other projects, but the name kept clawing me. Like it was saying:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… yoo-hoo… over here… 😘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://www.deepsouthventures.com/wp-content/uploads/william-faulkner-bench-480.jpg&quot; alt=&quot;William faulkner statue on bench&quot; width=&quot;480&quot; height=&quot;358&quot; class=&quot;aligncenter size-full wp-image-189&quot; srcset=&quot;https://www.deepsouthventures.com/wp-content/uploads/william-faulkner-bench-480.jpg 480w, https://www.deepsouthventures.com/wp-content/uploads/william-faulkner-bench-480-300x224.jpg 300w&quot; sizes=&quot;(max-width: 480px) 100vw, 480px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;William Faulkner had an interesting perspective on writing his characters – on how &lt;em&gt;they essentially wrote themselves&lt;/em&gt;, and how &lt;em&gt;he&lt;/em&gt; (Faulkner) served as a sortof mechanical in-between. His quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“I would say to get the character in your mind. Once he is in your mind, and he is right, and he’s true, then he does the work himself. All you need to do then is to trot along behind him and put down what he does and what he says… You’ve got to know the character. You’ve got to believe in him. You’ve got to feel that he is alive… After that, the business of putting him down on paper is mechanical.” &lt;a href=&quot;http://faulkner.lib.virginia.edu/display/wfaudio21&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;[source]&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The way Faulkner treats his characters, I treat domain name projects. I buy them with an intention to develop. And I let &lt;u&gt;them&lt;/u&gt; take the lead. They’re the inspiration for the business itself. They guide me towards what they need to become. I’m just the dude behind the keyboard (sorta).&lt;/p&gt;
&lt;p&gt;Sometimes I buy them at auction, sometimes I buy them from original-owners. But universally, the domain name always comes first, the business idea comes second.&lt;/p&gt;
&lt;p&gt;I don’t usually rush into development. The path of some domains is apparent before I acquire. Others, the path reveals itself down the road. Vidalia was the latter. And after I acquired it, it kept nudging me.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Build me… build me… you know how. And you &lt;em&gt;know&lt;/em&gt; what I should be…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After a month, I began to understand what it was telling me. That I buy pears from Harry &amp;amp; David every year, and I should mimic that same service for Vidalia Onions. Instead of farm-to-door pears, farm-to-door Vidalia Onions.&lt;/p&gt;
&lt;p&gt;An interesting idea, but daunting to approach. I’m not a farmer, I don’t have employees, I don’t have a packing shed. And I have no logistics or distribution system setup.&lt;/p&gt;
&lt;p&gt;But the domain name kept staring at me. ಠ~ಠ ////&lt;em&gt;whispering&lt;/em&gt;////&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just start..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h2&gt;“take the path to Nothing, and go Nowhere until you reach it.”&lt;/h2&gt;
&lt;em&gt;-the tao of pooh&lt;/em&gt;

&lt;p&gt;And so I did. I’m just dumb enough to try a project of this complexity. The market size justified an online venture. Google Trends showed strong search volume for the phrase. And chefs around the world had already belted their praise over the ‘caviar of sweet onions’.&lt;/p&gt;
&lt;p&gt;So I just started down a path, with no end goal or milestone set. I just started going. No angel investor. No VC backer. I just used some modest profit from my other &lt;a href=&quot;https://www.deepsouthventures.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;domain name developments&lt;/a&gt; to fund the endeavor. This was Feb of 2015.&lt;/p&gt;
&lt;p&gt;Once I began, I discovered there was a Vidalia Onion committee which represents all the Vidalia farmers. So I reached out to them.&lt;/p&gt;
&lt;p&gt;They were kind enough to listen to me.&lt;/p&gt;
&lt;p&gt;They introduced me to 3 farmers in the Vidalia region.&lt;/p&gt;
&lt;p&gt;I got along quite well with the 3rd farmer I met, so we decided to partner &amp;amp; give this a shot. They’d been around for 25 years; hadn’t focused on direct-to-consumer; but understood its value. They operated a packing shed as well. And most importantly, they grew an award winning Vidalia.&lt;/p&gt;
&lt;p&gt;And so we went.&lt;/p&gt;
&lt;p&gt;We conservatively estimated fifty (50) orders for our 2015 season. We ended up with over six hundred (600).&lt;/p&gt;
&lt;p&gt;While the farm concentrated on the Vidalia, I concentrated on customer service, marketing, branding, web development, &amp;amp; logistics. I didn’t have other projects that were this front-facing, customer wise. And I discovered I immensely enjoyed it.&lt;/p&gt;
&lt;p&gt;The more we both focused on these efforts, the more we grew. So much so, that other Vidalia operations began shutting down their mail order efforts and simply directed folks our way.&lt;/p&gt;
&lt;p&gt;We began testing alternate marketing avenues – a billboard on I-95 just south of Savannah, GA facing northbound traffic; sponsoring a bike rider headed cross country for charity; sponsoring a high school basketball team, as well as a grade school auction fundraiser.&lt;/p&gt;
&lt;p&gt;We added a phone order hotline, which – from time to time – generates more sales than online.&lt;/p&gt;
&lt;p&gt;We also made a few colossal mistakes, which were entirely of my doing, like blowing $10,000 on faulty shipping boxes from an ill-informed &amp;amp; misleading box manufacturer in Dalton, GA. (it happened early in our journey, and nearly forced me to shut down)&lt;/p&gt;
&lt;p&gt;Ultimately, I refused to let something like that that kill this. Honestly, my customers would be quite upset if we disappeared. Last season, while I called a gentleman back regarding a phone order, his wife answered. While I introduced myself, she interrupted me mid-sentence and hollered in exaltation to her husband: ” THE VIDALIA MAN! THE VIDALIA MAN! PICK UP THE PHONE! ”&lt;/p&gt;
&lt;p&gt;At that moment, I realized we were doing something right. Something helpful. Something that was making a positive impact.&lt;/p&gt;
&lt;p&gt;I sometimes say I prefer projects that focus on purpose over profit. And as we enter our 5th season, this one continues to do just that.&lt;/p&gt;
&lt;p&gt;And it’s immensely gratifying. I feel so fortunate to be associated with this industry.&lt;/p&gt;
&lt;p&gt;I’m Peter Askew, and I sell onions on the internet.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field.jpg&quot;&gt;&lt;img src=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field-150x150.jpg&quot; alt=&quot;Vidalia Onions in the field&quot; width=&quot;150&quot; height=&quot;150&quot; class=&quot;alignleft size-thumbnail wp-image-186&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-crate.jpeg&quot;&gt;&lt;img src=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-crate-150x150.jpeg&quot; alt=&quot;Vidalia Onions in a crate&quot; width=&quot;150&quot; height=&quot;150&quot; class=&quot;alignleft size-thumbnail wp-image-187&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onion-shipping-boxes.jpg&quot;&gt;&lt;img src=&quot;https://www.deepsouthventures.com/wp-content/uploads/vidalia-onion-shipping-boxes-150x150.jpg&quot; alt=&quot;Vidalia Onion shipping boxes&quot; width=&quot;150&quot; height=&quot;150&quot; class=&quot;alignnone size-thumbnail wp-image-185&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Them: We leverage automated machine learning to enhance your existing BI visualizations with more proactive insights&lt;/p&gt;
&lt;p&gt;Me: I sell onions on the internet&lt;/p&gt;
&lt;p&gt;— Peter Askew (@searchbound) &lt;a href=&quot;https://twitter.com/searchbound/status/1007015211486900229?ref_src=twsrc%5Etfw&quot;&gt;June 13, 2018&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr/&gt;&lt;p&gt;** below – from the field during harvest – these have been dug &amp;amp; are ready for clipping&lt;br/&gt;( click &amp;amp; drag )&lt;/p&gt;

</description>
<pubDate>Tue, 23 Apr 2019 13:00:24 +0000</pubDate>
<dc:creator>eightturn</dc:creator>
<og:type>article</og:type>
<og:title>I Sell Onions on the Internet - Deep South Ventures</og:title>
<og:description>Vidalia Onions to be exact. They’re classified as a sweet onion, and because of their mild flavor (they don’t make your eyes tear up), some folks can eat them like an apple. Most of my customers do. During a phone order one season – 2018 I believe – a customer shared this story where he …</og:description>
<og:url>https://www.deepsouthventures.com/i-sell-onions-on-the-internet/</og:url>
<og:image>https://www.deepsouthventures.com/wp-content/uploads/vidalia-onions-in-field-300x225.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.deepsouthventures.com/i-sell-onions-on-the-internet/</dc:identifier>
</item>
<item>
<title>I Can&amp;#039;t Do Anything for Fun Anymore; Every Hobby Is an Attempt to Make Money</title>
<link>https://www.bennettnotes.com/post/making-money-out-of-every-hobby/</link>
<guid isPermaLink="true" >https://www.bennettnotes.com/post/making-money-out-of-every-hobby/</guid>
<description>&lt;p&gt;When I was a kid, it was easy to merrily invest myself in any activity that I found interesting. Building robots, learning to play guitar, and making short films were things that I would work on after school everyday. I did all those things simply because I &lt;em&gt;enjoyed&lt;/em&gt; doing them.&lt;/p&gt;&lt;p&gt;Now, as a young adult, I feel like I completely lost that spontaneity and simple mindset. Every project which I take up has become an attempt to make money. I tell myself, “Oh wow, that’s a cool app idea, I should build it. But wait….how am I going to monetize it. Is it worth it?” I developed this hostile view of activities where everything is a calculated risk of how much time I need to put in versus what I am getting in return.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.bennettnotes.com/img/time%20investment.jpg&quot; alt=&quot;time investment&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I used to do YouTube completely for fun, then I got serious and tried to turn it into a “business”. Guess what? I absolutely hate doing it now, even if it does bring me in a little extra cash each month. I rejected so many website ideas and app ideas just because I knew there was no way to make any profit from them. And if I try to start a new hobby or goal, my mind immediately puts the focus on money and profit.&lt;/p&gt;
&lt;p&gt;I have been thinking about trying to write a book for awhile. Here’s my thought process:&lt;/p&gt;
&lt;p&gt;“Hmm…I want to write a book. I would really love to write a sappy romance novel because I think they’re so fun to write. But I need to turn it into profit, so I should do market research and see what’s trending and build off that. Self-help is big, let’s try to focus on that, even though I personally hate self-help books.”&lt;/p&gt;
&lt;p&gt;I should mention that I am a software engineer who makes a decent salary, so it’s not like I absolutely &lt;em&gt;need&lt;/em&gt; extra money. I try to rationalize my obsession by attributing all this to my goal of working for myself and wanting to start my own business. But still, it sucks that I can’t find the strength to take on a hobby simply because I enjoy it. I envy my friends who start new things out of pure love.&lt;/p&gt;
&lt;p&gt;“So Kevin you started doing aikido?”&lt;/p&gt;
&lt;p&gt;“Yeah Dave, I absolutely love it.”&lt;/p&gt;
&lt;p&gt;“But how are you making money out of it?”&lt;/p&gt;
&lt;ins class=&quot;adsbygoogle&quot; data-ad-layout=&quot;in-article&quot; data-ad-format=&quot;fluid&quot; data-ad-client=&quot;ca-pub-6594501022141871&quot; data-ad-slot=&quot;6999463098&quot;/&gt;

&lt;hr/&gt;&lt;section id=&quot;social-share&quot;&gt;
&lt;/section&gt;&lt;h4 class=&quot;see-also&quot;&gt;See also&lt;/h4&gt;
</description>
<pubDate>Tue, 23 Apr 2019 10:27:30 +0000</pubDate>
<dc:creator>_davebennett</dc:creator>
<og:title>I Can't Do Anything for Fun Anymore; Every Hobby Is an Attempt to Make Money</og:title>
<og:description>I have hit the point where I can't do anything for fun anymore. Every hobby is not an attempt to make some extra money or turn it into profit.</og:description>
<og:image>https://www.bennettnotes.com/img/avatar-icon.png</og:image>
<og:url>https://www.bennettnotes.com/post/making-money-out-of-every-hobby/</og:url>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bennettnotes.com/post/making-money-out-of-every-hobby/</dc:identifier>
</item>
<item>
<title>OpenShot – Open-Source Video Editor</title>
<link>https://www.openshot.org/</link>
<guid isPermaLink="true" >https://www.openshot.org/</guid>
<description>&lt;p&gt;&lt;span class=&quot;day&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;month&quot;&gt;Apr&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.openshot.org/blog/2019/04/15/spring-fundraiser/&quot;&gt;Spring Fundraiser 2019 | New T-Shirt Design!&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For a limited-time only, we are offering a unique OpenShot t-shirt design! Not only do you get an awesome t-shirt which helps us to continue funding development of OpenShot, but you also get a special...&lt;/p&gt;
&lt;a href=&quot;https://www.openshot.org/blog/2019/04/15/spring-fundraiser/&quot; class=&quot;btn btn-borders btn-default mt-md mb-xl&quot;&gt;Read More&lt;/a&gt;</description>
<pubDate>Tue, 23 Apr 2019 05:29:34 +0000</pubDate>
<dc:creator>peter_d_sherman</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.openshot.org/</dc:identifier>
</item>
<item>
<title>Termshark – A terminal UI for tshark, inspired by Wireshark</title>
<link>https://termshark.io</link>
<guid isPermaLink="true" >https://termshark.io</guid>
<description>&lt;h2&gt;About Termshark&lt;/h2&gt;
&lt;p&gt;Termshark is a simple terminal user-interface for tshark.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;You're debugging on a remote machine and need to study a pcap.&lt;/li&gt;
&lt;li&gt;You don't want to copy it back to your desktop.&lt;/li&gt;
&lt;li&gt;You're familiar with Wireshark. 😃&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Read pcap files or sniff live interfaces.&lt;/li&gt;
&lt;li&gt;Use Wireshark's display filters.&lt;/li&gt;
&lt;li&gt;Copy packet data to your clipboard.&lt;/li&gt;
&lt;li&gt;Written in Go - for Linux (x64/arm/termux), macOS, FreeBSD and Windows.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For more information, including setup and configuration instructions, bug reports or feature requests head over to &lt;a href=&quot;https://github.com/gcla/termshark&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Tue, 23 Apr 2019 03:16:34 +0000</pubDate>
<dc:creator>gcla</dc:creator>
<og:type>website</og:type>
<og:title>A terminal UI for tshark, inspired by Wireshark</og:title>
<og:url>https://termshark.io/</og:url>
<og:image>https://termshark.io/images/termshark.gif</og:image>
<og:description></og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://termshark.io/</dc:identifier>
</item>
<item>
<title>A book to learn R and Python in parallel for Data Science</title>
<link>https://github.com/rnorm/book_sample</link>
<guid isPermaLink="true" >https://github.com/rnorm/book_sample</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;
&lt;ul&gt;&lt;li&gt;The first three chapters (learn R and Python in Parallel) are finished.&lt;/li&gt;
&lt;li&gt;For any questions, please open an issue for discussion.&lt;/li&gt;
&lt;/ul&gt;&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 22 Apr 2019 23:49:49 +0000</pubDate>
<dc:creator>zelda_1</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/16791458?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>rnorm/book_sample</og:title>
<og:url>https://github.com/rnorm/book_sample</og:url>
<og:description>Contribute to rnorm/book_sample development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/rnorm/book_sample</dc:identifier>
</item>
<item>
<title>Modern C++ Won&amp;#039;t Save Us</title>
<link>https://alexgaynor.net/2019/apr/21/modern-c++-wont-save-us/</link>
<guid isPermaLink="true" >https://alexgaynor.net/2019/apr/21/modern-c++-wont-save-us/</guid>
<description>&lt;header&gt;

&lt;/header&gt;&lt;p&gt;I'm a &lt;a class=&quot;reference external&quot; href=&quot;https://alexgaynor.net/2017/nov/20/a-vulnerability-by-any-other-name/&quot;&gt;frequent&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://motherboard.vice.com/en_us/article/a3mgxb/the-internet-has-a-huge-cc-problem-and-developers-dont-want-to-deal-with-it&quot;&gt;critic&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://fishinabarrel.github.io/&quot;&gt;of&lt;/a&gt; &lt;a class=&quot;reference external&quot; href=&quot;https://twitter.com/LazyFishBarrel&quot;&gt;memory unsafe&lt;/a&gt; languages, principally C and C++, and how they induce an exceptional number of security vulnerabilities. My conclusion, based on reviewing evidence from numerous large software projects using C and C++, is that we need to be migrating our industry to memory safe by default languages (such as Rust and Swift). One of the responses I frequently receive is that the problem isn't C and C++ themselves, developers are simply holding them wrong. In particular, I often receive defenses of C++ of the form, &quot;C++ is safe if you don't use any of the functionality inherited from C&quot; or similarly that if you use modern C++ types and idioms you will be immune from the memory corruption vulnerabilities that plague other projects.&lt;/p&gt;&lt;p&gt;I would like to credit C++'s smart pointer types, because they do significantly help. Unfortunately, my experience working on large C++ projects which use modern idioms is that these are not nearly sufficient to stop the flood of vulnerabilities. My goal for the remainder of this post is to highlight a number of completely modern C++ idioms which produce vulnerabilities.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;hide-the-reference-use-after-free&quot; readability=&quot;31.865384615385&quot;&gt;
&lt;h2&gt;Hide the reference use-after-free&lt;/h2&gt;
&lt;p&gt;The first example I'd like to describe, &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/isocpp/CppCoreGuidelines/issues/1038&quot;&gt;originally from Kostya Serebryany&lt;/a&gt;, is how C++'s &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::string_view&lt;/span&gt;&lt;/tt&gt; can make it easy to hide use-after-free vulnerabilities:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string_view&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hellooooooooooooooo &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string_view&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's happening here is that &lt;tt class=&quot;docutils literal&quot;&gt;s + &quot;World\n&quot;&lt;/tt&gt; allocates a new &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::string&lt;/span&gt;&lt;/tt&gt;, and then is converted to a &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::string_view&lt;/span&gt;&lt;/tt&gt;. At this point the temporary &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::string&lt;/span&gt;&lt;/tt&gt; is freed, but &lt;tt class=&quot;docutils literal&quot;&gt;sv&lt;/tt&gt; still points at the memory that used to be owned by it. Any future use of &lt;tt class=&quot;docutils literal&quot;&gt;sv&lt;/tt&gt; is a use-after-free vulnerability. Oops! C++ lacks the facilities for the compiler to be aware that &lt;tt class=&quot;docutils literal&quot;&gt;sv&lt;/tt&gt; captures a reference to something where the reference lives longer than the referent. The same issue impacts &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::span&lt;/span&gt;&lt;/tt&gt;, also an &lt;em&gt;extremely&lt;/em&gt; modern C++ type.&lt;/p&gt;
&lt;p&gt;Another fun variant involves using C++'s lambda support to hide a reference:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;functional&amp;gt;&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;tt class=&quot;docutils literal&quot;&gt;[&amp;amp;]&lt;/tt&gt; in &lt;tt class=&quot;docutils literal&quot;&gt;f&lt;/tt&gt; causes the lambda to capture values by reference. Then in &lt;tt class=&quot;docutils literal&quot;&gt;main&lt;/tt&gt; &lt;tt class=&quot;docutils literal&quot;&gt;x&lt;/tt&gt; goes out of scope, destroying the last reference to the data, and causing it to be freed. At this point &lt;tt class=&quot;docutils literal&quot;&gt;y&lt;/tt&gt; contains a dangling pointer. This occurs despite our meticulous use of smart pointers throughout. And yes, people really do write code that handles &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::shared_ptr&amp;lt;T&amp;gt;&amp;amp;&lt;/span&gt;&lt;/tt&gt;, often as an attempt to avoid additional increment and decrements on the reference count.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;std-optional-t-dereference&quot; readability=&quot;32.188651436993&quot;&gt;
&lt;h2&gt;&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::optional&amp;lt;T&amp;gt;&lt;/span&gt;&lt;/tt&gt; dereference&lt;/h2&gt;
&lt;p&gt;&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::optional&lt;/span&gt;&lt;/tt&gt; represents a value that may or may not be present, often replacing magic sentinel values (such as &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;-1&lt;/span&gt;&lt;/tt&gt; or &lt;tt class=&quot;docutils literal&quot;&gt;nullptr&lt;/tt&gt;). It offers methods such as &lt;tt class=&quot;docutils literal&quot;&gt;value()&lt;/tt&gt;, which extract the &lt;tt class=&quot;docutils literal&quot;&gt;T&lt;/tt&gt; it contains and raises an exception if the the &lt;tt class=&quot;docutils literal&quot;&gt;optional&lt;/tt&gt; is empty. However, it also defines &lt;tt class=&quot;docutils literal&quot;&gt;operator*&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;operator-&amp;gt;&lt;/span&gt;&lt;/tt&gt;. These methods also provide access to the underlying &lt;tt class=&quot;docutils literal&quot;&gt;T&lt;/tt&gt;, however they do not check if the &lt;tt class=&quot;docutils literal&quot;&gt;optional&lt;/tt&gt; actually contains a value or not.&lt;/p&gt;
&lt;p&gt;The following code for example, simply returns an uninitialized value:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you use &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::optional&lt;/span&gt;&lt;/tt&gt; as a replacement for &lt;tt class=&quot;docutils literal&quot;&gt;nullptr&lt;/tt&gt; this can produce even more serious issues! Dereferencing a &lt;tt class=&quot;docutils literal&quot;&gt;nullptr&lt;/tt&gt; gives a segfault (which is not a security issue, except in &lt;a class=&quot;reference external&quot; href=&quot;https://alexgaynor.net/2019/mar/07/chrome-windows-exploit-security-beyond-bugfixes/&quot;&gt;older kernels&lt;/a&gt;). Dereferencing a &lt;tt class=&quot;docutils literal&quot;&gt;nullopt&lt;/tt&gt; however, gives you an uninitialized value as a pointer, which can be a serious security issue. While having a &lt;tt class=&quot;docutils literal&quot;&gt;T*&lt;/tt&gt; with an uninitialized value is also possible, these are much less common than dereferencing a pointer that was correctly initialized to &lt;tt class=&quot;docutils literal&quot;&gt;nullptr&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;And no, this doesn't require you to be using raw pointers. You can get uninitialized/wild pointers with smart pointers as well:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;std-span-t-indexing&quot; readability=&quot;28&quot;&gt;
&lt;h2&gt;&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::span&amp;lt;T&amp;gt;&lt;/span&gt;&lt;/tt&gt; indexing&lt;/h2&gt;
&lt;p&gt;&lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::span&amp;lt;T&amp;gt;&lt;/span&gt;&lt;/tt&gt; provides an ergonomic way to pass around a reference to a contiguous slice of memory and a length. This lets you easily write code that works over multiple different types; a &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::span&amp;lt;uint8_t&amp;gt;&lt;/span&gt;&lt;/tt&gt; can point to memory owned by a &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::vector&amp;lt;uint8_t&amp;gt;&lt;/span&gt;&lt;/tt&gt;, a &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::array&amp;lt;uint8_t,&lt;/span&gt; N&amp;gt;&lt;/tt&gt;, or even a raw pointer. Failure to correctly check bounds is a frequent source of security vulnerabilities, and in many senses &lt;tt class=&quot;docutils literal&quot;&gt;span&lt;/tt&gt; helps out with this by ensuring you always have a length handy.&lt;/p&gt;
&lt;p&gt;Like all STL data structures, &lt;tt class=&quot;docutils literal&quot;&gt;span&lt;/tt&gt;'s &lt;tt class=&quot;docutils literal&quot;&gt;operator[]&lt;/tt&gt; method does not perform any bounds checks. This is regrettable, since &lt;tt class=&quot;docutils literal&quot;&gt;operator[]&lt;/tt&gt; is the most ergonomic and default way people use data structures. &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::vector&lt;/span&gt;&lt;/tt&gt; and &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::array&lt;/span&gt;&lt;/tt&gt; can at least theoretically be used safely because they offer an &lt;tt class=&quot;docutils literal&quot;&gt;at()&lt;/tt&gt; method which is bounds checked (in practice I've never seen this done, but you could imagine a project adopting a static analysis tool which simply banned calls to &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::vector&amp;lt;T&amp;gt;::operator[]&lt;/span&gt;&lt;/tt&gt;). &lt;tt class=&quot;docutils literal&quot;&gt;span&lt;/tt&gt; does not offer an &lt;tt class=&quot;docutils literal&quot;&gt;at()&lt;/tt&gt; method, or any other method which performs a bounds checked lookup.&lt;/p&gt;
&lt;p&gt;Interestingly, both Firefox and Chromium's backports of &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::span&lt;/span&gt;&lt;/tt&gt; &lt;em&gt;do&lt;/em&gt; perform bounds checks in &lt;tt class=&quot;docutils literal&quot;&gt;operator[]&lt;/tt&gt;, and thus they'll never be able to safely migrate to &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::span&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot; readability=&quot;32.60411311054&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Modern C++ idioms introduce many changes which have the potential to improve security: smart pointers better express expected lifetimes, &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::span&lt;/span&gt;&lt;/tt&gt; ensures you always have a correct length handy, &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;std::variant&lt;/span&gt;&lt;/tt&gt; provides a safer abstraction for &lt;tt class=&quot;docutils literal&quot;&gt;union&lt;/tt&gt;s. However modern C++ also introduces some incredible new sources of vulnerabilities: lambda capture use-after-free, uninitialized-value &lt;tt class=&quot;docutils literal&quot;&gt;optional&lt;/tt&gt;s, and un-bounds-checked &lt;tt class=&quot;docutils literal&quot;&gt;span&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;My professional experience writing relatively modern C++, and auditing Rust code (including Rust code that makes significant use of &lt;tt class=&quot;docutils literal&quot;&gt;unsafe&lt;/tt&gt;) is that the safety of modern C++ is simply no match for memory safe by default languages like Rust and Swift (or Python and Javascript, though I find it rare in life to have a program that makes sense to write in &lt;em&gt;either&lt;/em&gt; Python or C++).&lt;/p&gt;
&lt;p&gt;There are significant challenges to migrating existing, large, C and C++ codebases to a different language -- no one can deny this. Nonetheless, the question simply must be &lt;em&gt;how&lt;/em&gt; we can accomplish it, rather than &lt;em&gt;if&lt;/em&gt; we should try. Even with the most modern C++ idioms available, the evidence is clear that, at scale, it's simply not possible to &lt;a class=&quot;reference external&quot; href=&quot;https://www.engadget.com/2010/06/24/apple-responds-over-iphone-4-reception-issues-youre-holding-th/&quot;&gt;hold C++ right&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr/&gt;&lt;section class=&quot;about&quot; readability=&quot;6&quot;&gt;&lt;img src=&quot;https://alexgaynor.net/images/about.jpg&quot;/&gt;&lt;p&gt;Hi, I'm Alex. I'm currently at a startup called Alloy. Before that I was a engineer working on Firefox security and before that at the U.S. Digital Service. I'm an avid open source contributor and live in Washington, DC.&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Mon, 22 Apr 2019 21:14:22 +0000</pubDate>
<dc:creator>neptvn</dc:creator>
<og:type>article</og:type>
<og:url>https://alexgaynor.net/2019/apr/21/modern-c++-wont-save-us/</og:url>
<og:title>Modern C++ Won't Save Us</og:title>
<og:image>https://alexgaynor.net/images/about.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://alexgaynor.net/2019/apr/21/modern-c++-wont-save-us/</dc:identifier>
</item>
<item>
<title>Why Turning on HTTP/2 Was a Mistake</title>
<link>https://www.lucidchart.com/techblog/2019/04/10/why-turning-on-http2-was-a-mistake/</link>
<guid isPermaLink="true" >https://www.lucidchart.com/techblog/2019/04/10/why-turning-on-http2-was-a-mistake/</guid>
<description>&lt;p&gt;HTTP/2 is a great leap forward for HTTP. It increases bandwidth efficiency by using a binary compressed format for headers, decreases latency by multiplexing requests on the same TCP connection, and allows the client to specify priorities for requests. In many cases moving to HTTP/2 is the right thing to do, but for some applications, HTTP/2 can cause significant problems.&lt;/p&gt;
&lt;p&gt;Last year, at Lucidchart, we enabled HTTP/2 on the load balancers for some of our services. Shortly thereafter we noticed the servers behind our HTTP/2 load balancers had higher CPU load and slower response times than our other servers. At first, the cause was unclear because the server traffic appeared normal and the problems seemed unrelated to any code changes. On closer inspection, we realized that the average number of requests was the same as usual, but the actual flow of requests had become spikier. Instead of a steady flow of requests, we were getting short bursts of a lot of requests. Although we had overprovisioned capacity based on previous traffic patterns, it wasn’t enough to deal with the new request spikes, so responses to requests were delayed and timed out.&lt;/p&gt;
&lt;p&gt;What was happening? Well, most browsers limit the number of concurrent connections to a given origin (a combination of scheme, host, and port), and HTTP/1.1 connections must be processed in series on a single connection. This means HTTP/1.1 browsers effectively limit the number of concurrent requests to that origin, meaning our user’s browser throttles requests to our server and keeps our traffic smooth.&lt;/p&gt;
&lt;p&gt;Remember how I said HTTP/2 adds multiplexing? Well, with HTTP/2, the browser can now send all HTTP requests concurrently over a single connection. From the web client’s perspective, this is great. In theory, the client should get all the resources it needs quicker since it no longer has to wait for responses from the server before making additional requests. However, in practice, multiplexing substantially increased the strain on our servers. First, because they received requests in large batches instead of smaller, more spread-out batches. And secondly, because with HTTP/2, the requests were all sent together—instead of staggered like they were with HTTP/1.1—so their start times were closer together, which meant they were all likely to time out.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How to fix it&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Fortunately, it is possible to solve this problem without having to increase computing capacity. In fact, there are a few potential solutions, although they take a little more effort than just enabling HTTP/2 in the load balancer.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Throttle at the load balancer&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Perhaps the most obvious solution is to have the load balancer throttle requests to the application servers, so the traffic patterns from the application servers’ point of view are similar to what it was using HTTP/1.1. The required level of difficulty depends on your infrastructure. For example, AWS ALBs don’t have any mechanism to throttle requests with the load balancer (at least not at the moment). Even with load balancers like HAProxy and Nginx, getting the throttling right can be tricky. If your load balancer doesn’t support throttling, you can still put a reverse proxy between the load balancer and your application server and do the throttling there.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Re-architect the application to better handle spiky requests&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Another (and perhaps better) option is to change the application so that it can handle traffic from a load balancer that accepts HTTP/2 traffic. Depending on the application, this probably involves introducing or tweaking a queueing mechanism to the application so that it can accept connections, but only process a limited number of them at a time. We actually already had a queuing mechanism in place when we switched to HTTP/2, but because of some previous code decisions, we were not properly limiting concurrent request processing. If you do queue requests, you should be careful not to process requests after the client has timed out waiting for a response—no need to waste unnecessary resources.&lt;/p&gt;
&lt;p&gt;Before you turn on HTTP/2, make sure that your application can handle the differences. HTTP/2 has different traffic patterns than HTTP/1.1, and your application may have been designed specifically for HTTP/1.1 patterns, whether intentionally or not. HTTP/2 has a lot of benefits, but it also has some differences that can bite you if you aren’t careful.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Postscript&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Another “gotcha” to look out for is that software supporting HTTP/2 is not fully mature yet. Although it is getting better all the time, software for HTTP/2 just hasn’t had enough time to become as mature and solid as existing HTTP/1.1 software.&lt;/p&gt;
&lt;p&gt;In particular, server support for HTTP prioritization is spotty at best. Many CDNs and load balancers either &lt;a href=&quot;https://github.com/andydavies/http2-prioritization-issues&quot;&gt;don’t support it at all, or have buggy implementations&lt;/a&gt;, and even if they do, &lt;a href=&quot;https://blog.cloudflare.com/http-2-prioritization-with-nginx/&quot;&gt;buffering can limit its effectiveness&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, several applications only support HTTP/2 over HTTPS. From a security point of view, this is great. However, it complicates development and debugging inside secure networks that don’t need or want TLS between different components. It means you need to manage a CA and certificates for localhost for local development, log session secrets in order to inspect HTTP/2 requests with Wireshark or similar tools, and may require additional compute resources for encryption.&lt;/p&gt;

</description>
<pubDate>Mon, 22 Apr 2019 17:47:10 +0000</pubDate>
<dc:creator>sciurus</dc:creator>
<og:type>article</og:type>
<og:title>Why Turning on HTTP/2 Was a Mistake - Lucidchart</og:title>
<og:description>HTTP/2 is a great leap forward for HTTP, but turning it on HTTP/2 was a mistake. Learn how to solve this problem without having to increase computing.</og:description>
<og:url>https://www.lucidchart.com/techblog/2019/04/10/why-turning-on-http2-was-a-mistake/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.lucidchart.com/techblog/2019/04/10/why-turning-on-http2-was-a-mistake/</dc:identifier>
</item>
<item>
<title>Tesla Live Stream – Autonomy Day [video]</title>
<link>https://livestream.tesla.com/</link>
<guid isPermaLink="true" >https://livestream.tesla.com/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://livestream.tesla.com/&quot;&gt;https://livestream.tesla.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19720832&quot;&gt;https://news.ycombinator.com/item?id=19720832&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 336&lt;/p&gt;
&lt;p&gt;# Comments: 476&lt;/p&gt;
</description>
<pubDate>Mon, 22 Apr 2019 17:34:20 +0000</pubDate>
<dc:creator>kiddz</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://livestream.tesla.com/</dc:identifier>
</item>
<item>
<title>Google Walkout Organizers Say They&amp;#039;re Facing Retaliation</title>
<link>https://www.wired.com/story/google-walkout-organizers-say-theyre-facing-retaliation/</link>
<guid isPermaLink="true" >https://www.wired.com/story/google-walkout-organizers-say-theyre-facing-retaliation/</guid>
<description>&lt;p&gt;&lt;span class=&quot;lede&quot;&gt;Two employee activists&lt;/span&gt; at Google say they have been retaliated against for helping to organize a &lt;a href=&quot;https://www.wired.com/story/google-walkout-just-latest-sign-tech-worker-unrest/&quot;&gt;walkout&lt;/a&gt; among thousands of Google workers in November, and are planning a “town hall” meeting on Friday for others to discuss alleged instances of retaliation.&lt;/p&gt;
&lt;p&gt;In a message posted to many internal Google mailing lists Monday, Meredith Whittaker, who leads Google’s Open Research, said that after the company &lt;a href=&quot;https://www.wired.com/story/google-needs-grow-cloud-business-carefully/&quot;&gt;disbanded its external AI ethics council&lt;/a&gt; on April 4, she was told that her role would be “changed dramatically.” Whittaker said she was told that, in order to stay at the company, she would have to “abandon” her work on AI ethics and her role at AI Now Institute, a research center she cofounded at New York University.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Claire Stapleton, another walkout organizer and a 12-year veteran of the company, said in the email that two months after the protest she was told she would be demoted from her role as marketing manager at YouTube and lose half her reports. After escalating the issue to human resources, she said she faced further retaliation. “My manager started ignoring me, my work was given to other people, and I was told to go on medical leave, even though I’m not sick,” Stapleton wrote. After she hired a lawyer, the company conducted an investigation and seemed to reverse her demotion. “While my work has been restored, the environment remains hostile and I consider quitting nearly every day,” she wrote.&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;Whittaker and Stapleton are two of the seven employees who helped organize the mass demonstration in November, during which &lt;a href=&quot;https://www.wired.com/story/google-walkout-just-latest-sign-tech-worker-unrest/&quot;&gt;20,000 Google workers&lt;/a&gt; briefly walked out of their office to protest the company’s mishandling of sexual harassment claims.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;In a statement, a Google spokesperson said: &quot;We prohibit retaliation in the workplace and investigate all allegations. Employees and teams are regularly and commonly given new assignments, or reorganized, to keep pace with evolving business needs. There has been no retaliation here.” Whittaker and Stapleton did not immediately respond to requests for comment.&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;&lt;strong&gt;Here is the full text of their letter:&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Hi all,&lt;/em&gt;&lt;em&gt;This was a hard email to write.&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Google is retaliating against several organizers.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;We are among them and here is what’s happening to us:&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;strong&gt;Meredith&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Just after Google announced that it would disband its AI ethics council, I was informed my role would be changed dramatically. I’m told that to remain at the company I will have to abandon my work on AI ethics and the AI Now Institute, which I cofounded, and which has been doing rigorous and recognized work on these topics. I have worked on issues of AI ethics and bias for years, and am one of the people who helped shape the field looking at these problems. I have also taken risks to push for a more ethical Google, even when this is less profitable or convenient.&lt;/em&gt;&lt;/p&gt;


&lt;p class=&quot;paywall&quot;&gt;&lt;strong&gt;Claire&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;After five years as a high performer in YouTube Marketing (and almost twelve at Google), two months after the Walkout, I was told that I would be demoted, that I’d lose half my reports, and that a project that was approved was no longer on the table. I escalated to HR and to my VP, which made things significantly worse. My manager started ignoring me, my work was given to other people, and I was told to go on medical leave, even though I’m not sick. Only after I hired a lawyer and had her contact Google did management conduct an investigation and walked back my demotion, at least on paper. While my work has been restored, the environment remains hostile and I consider quitting nearly every day.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Our stories aren’t the only ones. Google has a culture of retaliation, which too often works to silence women, people of color, and gender minorities. Retaliation isn’t always obvious. It’s often confusing and drawn out, consisting of icy conversations, gaslighting, project cancellations, transition rejections, or demotions. Behavior that tells someone the problem isn’t that they stood up to the company, it’s that they’re not good enough and don’t belong.&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;During the Walkout, we collected 350 stories. Reading them, a sad pattern emerges: People who stand up and report discrimination, abuse, and unethical conduct are punished, sidelined, and pushed out. Perpetrators often go unimpeded, or are even rewarded (Andy, Amit, “I reported, he got promoted”).&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;By punishing those who resist discrimination, harassment, and unethical decision making. Google permits these behaviors. This harms people inside the company, and communities outside who bear the brunt of Google’s bad choices. If we want to stop discrimination, harassment, and unethical decisionmaking, we need to end retaliation against the people who speak honestly about these problems.&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;We need to push back. Here are some next steps:&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;1. We will be hosting a Retaliation Town Hall to share our stories and strategize. When: Friday, April 26, 11am PT/2pm ET. Add the event to your calendar here. [The message included an internal link to a livestream of the meeting.]&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;2. If you’ve been retaliated against, please share your story. (If you shared your story with the Walkout form, feel free to reshare and help keep everything in one place.) The more we share with each other, the easier it will be to push back. Add yours.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Sincerely,&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Meredith, Claire&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;paywall&quot;&gt;&lt;em&gt;Updated 4-22-19, 3:15 pm: This article has been updated to include a statement from a Google spokesperson.&lt;/em&gt;&lt;/p&gt;

&lt;hr class=&quot;paywall&quot;/&gt;&lt;h3 class=&quot;paywall&quot;&gt;More Great WIRED Stories&lt;/h3&gt;
</description>
<pubDate>Mon, 22 Apr 2019 17:25:41 +0000</pubDate>
<dc:creator>longdefeat</dc:creator>
<og:type>article</og:type>
<og:title>Google Walkout Organizers Say They're Facing Retaliation</og:title>
<og:description>Two employees who helped organize a walkout of thousands of workers say they've either been demoted or been told to drop concerns about ethics.</og:description>
<og:image>https://media.wired.com/photos/5cbdee227f4cd16bdc009332/191:100/pass/googlewalkout-1056427040.jpg</og:image>
<og:url>https://www.wired.com/story/google-walkout-organizers-say-theyre-facing-retaliation/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wired.com/story/google-walkout-organizers-say-theyre-facing-retaliation/</dc:identifier>
</item>
</channel>
</rss>