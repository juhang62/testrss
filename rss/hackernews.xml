<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>SQL: One of the most valuable skills</title>
<link>http://www.craigkerstiens.com/2019/02/12/sql-most-valuable-skill/</link>
<guid isPermaLink="true" >http://www.craigkerstiens.com/2019/02/12/sql-most-valuable-skill/</guid>
<description>&lt;p&gt;I’ve learned a lot of skills over the course of my career, but no technical skill more useful than SQL. SQL stands out to me as the most valuable skill for a few reasons:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It is valuable across different roles and disciplines&lt;/li&gt;
&lt;li&gt;Learning it once doesn’t really require re-learning&lt;/li&gt;
&lt;li&gt;You seem like a superhero. &lt;em&gt;You seem extra powerful when you know it because of the amount of people that aren’t fluent&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Let me drill into each of these a bit further. &lt;/p&gt;
&lt;h2&gt;SQL a tool you can use everywhere&lt;/h2&gt;
&lt;p&gt;Regardless of what role you are in SQL will find a way to make your life easier. Today as a product manager it’s key for me to look at data, analyze how effective we’re being on the product front, and shape the product roadmap. If we just shipped a new feature, the data on whether someone has viewed that feature is likely somewhere sitting in a relational database. If I’m working on tracking key business metrics such as &lt;a href=&quot;http://www.craigkerstiens.com/2014/02/26/Tracking-MoM-growth-in-SQL/&quot;&gt;month over month growth&lt;/a&gt;, that is likely somewhere sitting in a relational database. At the other end of almost anything we do there is likely a system of record that speaks SQL. Knowing how to access it most natively saves me a significant amount of effort without having to go ask someone else the numbers.&lt;/p&gt;
&lt;p&gt;But even before becoming a product manager I would use SQL to inform me about what was happening within systems. As an engineer it could often allow me to pull information I wanted faster than if I were to script it in say Ruby or Python. When things got slow in my webapp having an understanding of the SQL that was executed and &lt;a href=&quot;http://www.craigkerstiens.com/2012/10/01/understanding-postgres-performance/&quot;&gt;ways to optimize&lt;/a&gt; it was indespensible. Yes, this was going a little beyond just a basic understanding of SQL… but adding an &lt;a href=&quot;https://www.citusdata.com/blog/2017/10/11/index-all-the-things-in-postgres/&quot;&gt;index to a query&lt;/a&gt; instead of rolling my own homegrown caching well that was well worth the extra time learning.&lt;/p&gt;
&lt;h2&gt;SQL is permanent&lt;/h2&gt;
&lt;p&gt;I recall roughly 20 years ago creating my first webpage. It was magical, and then I introduced some Javascript to make it even more impressive prompting users to click Yes/No or give me some input. Then about 10 years later jQuery came along and while it was a little more verbose at times and something new to learn it made things prettier overall so I committed to re-learning the jQuery approach to JS. Then it just picked up pace with Angular –&amp;gt; React/Ember, and now I have an entire pipeline to introduce basic Javascript into my website and the reality is I’m still trying to accomplish the same thing I was 20 years ago by having someone click Yes/No.&lt;/p&gt;
&lt;p&gt;SQL in contrast doesn’t really change. &lt;em&gt;Caveat: It has changed–there is &lt;a href=&quot;https://modern-sql.com/&quot;&gt;modern sql&lt;/a&gt;, but I’d still argue less dramatically than other language landscapes&lt;/em&gt;. Yes we get a new standard every few years and occasionally something new comes along like support for window functions or CTEs, but the basics of SQL are pretty permanent. Learning SQL once will allow you to re-use it heavily across your career span without having to re-learn. Don’t get me wrong I love learning new things, but I’d rather learn something truly new than just yet another way to accomplish the same task.&lt;/p&gt;
&lt;h2&gt;SQL: Seem better than you are&lt;/h2&gt;
&lt;p&gt;SQL is an underlearned skill, the majority of application developers just skip over it. Because so few actually know SQL well you can seem more elite than you actually are. In past companies with hundreds of engineers I’d get a question several times a week from junior to principal engineers of: “hey can you help me figure out how to write a query for this?” Because you’re skilled at something so few others are you can help them out which always makes life a little easier when you have a question for them.&lt;/p&gt;
&lt;p&gt;So if you’re not already proficient what are you waiting for, do you want to seem like a SQL badass yet?&lt;/p&gt;
</description>
<pubDate>Wed, 13 Feb 2019 02:20:40 +0000</pubDate>
<dc:creator>duck</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.craigkerstiens.com/2019/02/12/sql-most-valuable-skill/</dc:identifier>
</item>
<item>
<title>Activision-Blizzard lays off 775 people after “record results in 2018”</title>
<link>https://arstechnica.com/gaming/2019/02/activision-blizzard-lays-off-775-people-after-record-results-in-2018/</link>
<guid isPermaLink="true" >https://arstechnica.com/gaming/2019/02/activision-blizzard-lays-off-775-people-after-record-results-in-2018/</guid>
<description>&lt;img src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/10/7-800x450.png&quot; alt=&quot;Screenshot from first-person-shooter video game.&quot;/&gt;&lt;div class=&quot;caption-text&quot;&gt;&lt;a href=&quot;https://cdn.arstechnica.net/wp-content/uploads/2018/10/7.png&quot; class=&quot;enlarge-link&quot; data-height=&quot;2160&quot; data-width=&quot;3840&quot;&gt;Enlarge&lt;/a&gt; &lt;span class=&quot;sep&quot;&gt;/&lt;/span&gt; A central location from the Blackout map in &lt;em&gt;Call of Duty: Black Ops IIII&lt;/em&gt;.&lt;/div&gt;&lt;aside id=&quot;social-left&quot; aria-label=&quot;Read the comments or share this article&quot;&gt;
&lt;h4 class=&quot;comment-count-before&quot;&gt;&lt;a title=&quot;67 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gaming/2019/02/activision-blizzard-lays-off-775-people-after-record-results-in-2018/?comments=1&quot;&gt;reader comments&lt;/a&gt;&lt;/h4&gt;
&lt;a title=&quot;67 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gaming/2019/02/activision-blizzard-lays-off-775-people-after-record-results-in-2018/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-number&quot;&gt;91&lt;/span&gt; &lt;span class=&quot;visually-hidden&quot;&gt;with 67 posters participating&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;
&lt;h4&gt;Share this story&lt;/h4&gt;
&lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;Game publisher Activision-Blizzard will lay off 8 percent of its work force, or around 775 people, CEO Bobby Kotick announced on the company's earnings call today. The move is being made in an effort at &quot;de-prioritizing initiatives that are not meeting expectations and reducing certain non-development and administrative-related costs across the business,&quot; Kotick explained.&lt;/p&gt;

The layoffs, which will mostly be in non-game-development areas like publishing, will impact Activision, Blizzard, and King. In one case, an entire studio of 78 people was shut down—Seattle-based mobile game studio Z2Live. This is in spite of Kotick saying that the company achieved &quot;record results in 2018.&quot; Activision made a statement about exceeding its expectations, but other market-watchers clearly had &lt;a href=&quot;https://www.cnbc.com/2019/02/12/activision-blizzard-earnings-q4-2018.html&quot;&gt;higher numbers&lt;/a&gt; in mind.
&lt;p&gt;The implication is that the positive results reported came thanks to a fairly narrow bench of franchises, with many of the company's efforts outside those franchises not meeting expectations.&lt;/p&gt;
&lt;p&gt;It's also worth noting that Destiny developer Bungie ended its relationship with Activision. While &lt;em&gt;Destiny 2&lt;/em&gt; did not perform up to expectations, that move likely left many in marketing and other areas at Activision without a major franchise to work on. This followed the decline of the highly lucrative Skylanders and Guitar Hero franchises as well.&lt;/p&gt;
&lt;p&gt;In the future, Kotick said Activision-Blizzard will invest primarily in live services, Battle.net, and esports, with a focus on the following franchises: Candy Crush, Call of Duty, Overwatch, Warcraft, Diablo, and Hearthstone. For those franchises, Activision actually expects to increase, not reduce, development resources in 2019.&lt;/p&gt;
&lt;p&gt;Kotaku &lt;a href=&quot;https://kotaku.com/activision-blizzard-begins-massive-layoffs-1832571288&quot;&gt;acquired&lt;/a&gt; a company note sent by Blizzard president J. Allen Brack to employees that also acknowledges that the layoffs are part of an effort to focus the business on what's working best while cutting what's not:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Over the last few years, many of our non-development teams expanded to support various needs. Currently, staffing levels on some teams are out of proportion with our current release slate. This means we need to scale down some areas of our organization in the US today. In our regional offices, we anticipate similar evaluations, subject to local requirements.&lt;/p&gt;
&lt;/blockquote&gt;

According to Kotaku, the letter also indicated that those being let go would receive a comprehensive severance package, continuing health benefits, and career placement assistance, though it is not clear how robust these offerings will be. In a more public note on Blizzard's website, Brack &lt;a href=&quot;https://news.blizzard.com/en-us/blizzard/22887360/message-from-j-allen-brack&quot;&gt;said&lt;/a&gt; Blizzard plans to add development resources through the year and that it will continue to focus heavily on Overwatch League, its biggest esports brand.
&lt;p&gt;The changes follow a series of executive departures at Blizzard, as well as reports that Activision leadership has become more involved at Blizzard, which previously operated more independently. Blizzard did not release a new game in 2018 apart from expansions and remasters, and it is not expected to in 2019, according to the earnings call. However, the company operates several internal studios that are working on multiple live games. Job listings suggest development on &lt;em&gt;Diablo IV&lt;/em&gt; is continuing, as well as an as-yet-unannounced first-person shooter project.&lt;/p&gt;
&lt;p&gt;The Call of Duty franchise is as strong as it has been in a while; &lt;a href=&quot;https://arstechnica.com/gaming/2018/10/call-of-duty-black-ops-4-review-war-games-now-with-battle-royale/&quot;&gt;&lt;em&gt;Black Ops IIII&lt;/em&gt;&lt;/a&gt; received favorable reviews, and its battle royale mode Blackout has proven popular. But it's notable that the majority of the franchises Kotick said the company plans to focus on are under the Blizzard umbrella, not Activision.&lt;/p&gt;
</description>
<pubDate>Tue, 12 Feb 2019 23:58:36 +0000</pubDate>
<dc:creator>tolien</dc:creator>
<og:url>https://arstechnica.com/gaming/2019/02/activision-blizzard-lays-off-775-people-after-record-results-in-2018/</og:url>
<og:title>Activision-Blizzard lays off 775 people after “record results in 2018”</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2018/10/7-760x380.png</og:image>
<og:description>News follows split with Bungie and a year with no major Blizzard releases.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/gaming/2019/02/activision-blizzard-lays-off-775-people-after-record-results-in-2018/</dc:identifier>
</item>
<item>
<title>Bootstrap 5 will remove jQuery as a dependency</title>
<link>https://github.com/twbs/bootstrap/pull/23586</link>
<guid isPermaLink="true" >https://github.com/twbs/bootstrap/pull/23586</guid>
<description>&lt;p&gt;Boostrap-Vue is quite interested in the jQuery free version of some of the plugins, as we might be able to direclty import some of these modues (or the classes), to replace some of our code.&lt;/p&gt;
&lt;p&gt;We have just finished porting ScrollSpy over to vanilla js (with some helper dom functions we have created).&lt;/p&gt;
&lt;p&gt;If you like, I could see if I can port our vanilla version to this branch as a PR (the main things to change would be the event signatures)&lt;/p&gt;
</description>
<pubDate>Tue, 12 Feb 2019 21:03:21 +0000</pubDate>
<dc:creator>bdcravens</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/1689750?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>v5 without jQuery by Johann-S · Pull Request #23586 · twbs/bootstrap</og:title>
<og:url>https://github.com/twbs/bootstrap/pull/23586</og:url>
<og:description>Plugins: Util (#23565) Alert (#23596) Button (#23600) Carousel (#23658) Collapse (#23958) Dropdown (#24099) Modal (#23955) Popover (#24014) ScrollSpy (#24879) Tab (#24094) Tooltip (#240...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/twbs/bootstrap/pull/23586</dc:identifier>
</item>
<item>
<title>Reading in the Age of Constant Distraction</title>
<link>https://www.theparisreview.org/blog/2019/02/08/reading-in-the-age-of-constant-distraction/</link>
<guid isPermaLink="true" >https://www.theparisreview.org/blog/2019/02/08/reading-in-the-age-of-constant-distraction/</guid>
<description>&lt;div class=&quot;article-subtitles&quot;&gt;
&lt;section class=&quot;article-top-rail&quot;&gt;&lt;address&gt;By &lt;a href=&quot;https://www.theparisreview.org/blog/author/mstaid/&quot; title=&quot;Posts by Mairead Small Staid&quot; rel=&quot;author&quot;&gt;Mairead Small Staid&lt;/a&gt;&lt;/address&gt;
&lt;time&gt;February 8, 2019&lt;/time&gt;&lt;h3 class=&quot;h6&quot;&gt;&lt;a href=&quot;https://www.theparisreview.org/blog/arts-culture/&quot; rel=&quot;category tag&quot;&gt;Arts &amp;amp; Culture&lt;/a&gt;&lt;/h3&gt;
&lt;/section&gt;&lt;/div&gt;

&lt;div id=&quot;attachment_133473&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;34&quot;&gt;&lt;a href=&quot;https://www.theparisreview.org/blog/wp-content/uploads/2019/02/lsende-lille-pige-1461563182_org.jpg&quot;&gt;&lt;img class=&quot;size-large wp-image-133473&quot; src=&quot;https://www.theparisreview.org/blog/wp-content/uploads/2019/02/lsende-lille-pige-1461563182_org-1024x956.jpg&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;956&quot; srcset=&quot;https://www.theparisreview.org/blog/wp-content/uploads/2019/02/lsende-lille-pige-1461563182_org-1024x956.jpg 1024w, https://www.theparisreview.org/blog/wp-content/uploads/2019/02/lsende-lille-pige-1461563182_org-300x280.jpg 300w, https://www.theparisreview.org/blog/wp-content/uploads/2019/02/lsende-lille-pige-1461563182_org-768x717.jpg 768w, https://www.theparisreview.org/blog/wp-content/uploads/2019/02/lsende-lille-pige-1461563182_org.jpg 1228w&quot; sizes=&quot;(min-width: 62.5em) 67vw, 100vw&quot;/&gt;&lt;/a&gt;
&lt;p class=&quot;wp-caption-text&quot;&gt;Johan Gudmundsen-Holmgreen, Laesende lille pige, 1900&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;“I read books to read myself,” Sven Birkerts wrote in &lt;em&gt;The Gutenberg Elegies: The Fate of Reading in an Electronic Age&lt;/em&gt;. Birkerts’s book, which turns twenty-five this year, is composed of fifteen essays on reading, the self, the convergence of the two, and the ways both are threatened by the encroachment of modern technology. As the culture around him underwent the sea change of the internet’s arrival, Birkerts feared that qualities long safeguarded and elevated by print were in danger of erosion: among them privacy, the valuation of individual consciousness, and an awareness of history—not merely the facts of it, but a sense of its continuity, of our place among the centuries and cosmos. “Literature holds meaning not as a content that can be abstracted and summarized, but as experience,” he wrote. “It is a participatory arena. Through the process of reading we slip out of our customary time orientation, marked by distractedness and surficiality, into the realm of duration.”&lt;/p&gt;
&lt;p&gt;Writing in 1994, Birkerts worried that distractedness and surficiality would win out. The “duration state” we enter through a turned page would be lost in a world of increasing speed and relentless connectivity, and with it our ability to make meaning out of narratives, both fictional and lived. The diminishment of literature—of sustained reading, of writing as the product of a single focused mind—would diminish the self in turn, rendering us less and less able to grasp both the breadth of our world and the depth of our own consciousness. For Birkerts, as for many a reader, the thought of such a loss devastates. So while he could imagine this bleak near-future, he (mostly) resisted the masochistic urge to envision it too concretely, focusing instead on the present, in which—for a little while longer, at least—he reads, and he writes. His collection, despite its title, resembles less an elegy for literature than an attempt to stave off its death: by writing eloquently about his own reading life and electronic resistance, Birkerts reminds us that such a life is worthwhile, desirable, and, most importantly, still possible. In the face of what we stand to lose, he privileges what we might yet gain.&lt;/p&gt;

&lt;p&gt;A quarter of a century later, did he—did we—manage to salvage the wreck? Or have Birkerts’s worst fears come to pass? It’s hard to tell from the numbers. &lt;a href=&quot;https://www.npr.org/2018/03/29/598053563/why-the-number-of-independent-bookstores-increased-during-the-retail-apocalypse&quot;&gt;More independent bookstores&lt;/a&gt; are opening than closing, and sales of print books are &lt;a href=&quot;https://qz.com/1510303/book-sales/&quot;&gt;up&lt;/a&gt;—but authors’ earnings are &lt;a href=&quot;https://www.publishersweekly.com/pw/by-topic/industry-news/financial-reporting/article/78944-new-guild-report-finds-more-declines-in-author-earnings.html&quot;&gt;down&lt;/a&gt;. Fewer Americans &lt;a href=&quot;https://www.washingtonpost.com/news/wonk/wp/2018/06/29/leisure-reading-in-the-u-s-is-at-an-all-time-low/?noredirect=on&amp;amp;utm_term=.1ef15b726f48&quot;&gt;read for pleasure&lt;/a&gt; than they once did. A major house’s editor-driven imprint was &lt;a href=&quot;https://www.nytimes.com/2019/01/25/books/spiegel-grau-close-penguin-random-house.html&quot;&gt;shuttered&lt;/a&gt; recently, while the serialized storytelling app Wattpad &lt;a href=&quot;https://www.nytimes.com/2019/01/24/books/wattpad-books-publishing-division.html&quot;&gt;announced&lt;/a&gt; its intention to publish books chosen by algorithms, foregoing the need for editors altogether. Some of the changes Birkerts saw on the horizon—the invention of e-books, for one, and the possibilities of hypertext—have turned out to be less consequential than anticipated, but others have proven dire; the easy, addictive distractions of the screen swallow our hours whole.&lt;/p&gt;
&lt;p&gt;And perhaps the greatest danger posed to literature is not any newfangled technology or whiz-bang rearrangement of our synapses, but plain old human greed in its latest, greatest iteration: an online retailer incorporated in the same year &lt;em&gt;The Gutenberg Elegies&lt;/em&gt; was published. In the last twenty-five years, Amazon has gorged on late capitalism’s values of ease and cheapness, threatening to monopolize not only the book world, but the world-world. In the face of such an insidious, omnivorous menace—not merely the tech giant, but the culture that created and sustains it—I find it difficult to disentangle my own fear about the future of books from my fear about the futures of small-town economies, of American democracy, of the earth and its rising seas.&lt;/p&gt;
&lt;p&gt;“Ten, fifteen years from now the world will be nothing like what we remember, nothing much like what we experience now,” Birkerts wrote. “We will be swimming in impulses and data—the microchip will make us offers that will be very hard to refuse.” Indeed, few of us have refused them. As each new technology, from smartphones to voice-activated home assistants, becomes normalized faster and faster, our ability to refuse it lessens. The choice presented in &lt;em&gt;The Gutenberg Elegies&lt;/em&gt;, between embrace and skepticism, hardly seems like a choice anymore: the new generation is born swaddled in the digital world’s many arms.&lt;/p&gt;
&lt;p&gt;I am both part and not part of this new generation. I was born in 1988, two years before the development of HTML. I didn’t have a computer at home until middle school, didn’t have a cell phone until I was eighteen. I remember the pained beeping of a dial-up connection, if only faintly. Facebook launched as I finished up high school, and Twitter as I entered college. The golden hours of my childhood aligned perfectly with the fading light of a pre-internet world; I know intimately that such a world existed, and had its advantages.&lt;/p&gt;
&lt;p&gt;Birkerts, recalling the power books held over him when he was young, writes, “Through reading and living I have gradually made myself proof against total ravishment by authors. Yet so vivid are my recollections of that urgency, that sense of consequence, that I foolishly keep looking for it to happen again.” The heightened state brought on by a book—in which one is “actively present at every moment, scripting and constructing”—is what readers seek, Birkerts argues: “They want plot and character, sure, but what they really want is a vehicle that will bear them off to the reading state.” This state is threatened by the ever-sprawling internet—can the book’s promise of deeper presence entice us away from the instant gratification of likes and shares?&lt;/p&gt;
&lt;p&gt;“[Y]ears of working in bookstores have convinced me that this fundamental condition is there for others as well,” Birkerts writes; as a young man, he worked for a then-independent Ann Arbor bookshop called Borders. Four decades later, I slung books at Literati Bookstore, a few blocks away. The shelves of the original Borders had been bought and repurposed by Literati’s owners to hold the new store’s fiction section, and the people browsing them were the same, too: that is, they had the same tilt to their heads as they scanned titles, the same hopeful reach in their fingers as they pulled a volume down, flipping through the first few pages.&lt;/p&gt;
&lt;p&gt;And if they occasionally wanted books modeled after the internet—gift books born on Tumblr, Instagram printed out and bound—they also wanted Maggie Nelson’s &lt;em&gt;Bluets&lt;/em&gt;. They wanted Teju Cole’s &lt;em&gt;Open City&lt;/em&gt;, Anthony Marra’s &lt;em&gt;The Tsar of Love and Techno&lt;/em&gt;, Claudia Rankine’s &lt;em&gt;Don’t Let Me Be Lonely&lt;/em&gt;. Loneliness is what the internet and social media claim to alleviate, though they often have the opposite effect. Communion can be hard to find, not because we aren’t occupying the same physical space but because we aren’t occupying the same mental plane: we don’t read the same news; we don’t even revel in the same memes. Our phones and computers deliver unto each of us a personalized—or rather, algorithm-realized—distillation of headlines, anecdotes, jokes, and photographs. Even the ads we scroll past are not the same as our neighbor’s: a pair of boots has followed me from site to site for weeks. We call this endless, immaterial material a &lt;em&gt;feed&lt;/em&gt;, though there’s little sustenance to be found.&lt;/p&gt;
&lt;p&gt;Birkerts’s argument (and mine) isn’t that books alleviate loneliness, either: to claim a goal shared by every last app and website is to lose the fight for literature before it starts. No, the power of art—and many books are, still, art, not entertainment—lies in the way it turns us inward and outward, all at once. The communion we seek, scanning titles or turning pages, is not with others—not even the others, living or long dead, who wrote the words we read—but with ourselves. Our finest capacities, too easily forgotten.&lt;/p&gt;
&lt;p&gt;Early in &lt;em&gt;The Gutenberg Elegies&lt;/em&gt;, Birkerts summarizes historian Rolf Engelsing’s definition of reading “intensively” as the common practice of most readers before the nineteenth century, when books, which were scarce and expensive, were often read aloud and many times over. As reading materials—not just books, but newspapers, magazines, and ephemera—proliferated, more recent centuries saw the rise of reading “extensively”: we read these materials once, often quickly, and move on. Birkerts coins his own terms: the deep, devotional practice of “vertical” reading has been supplanted by “horizontal” reading, skimming along the surface. This shift has only accelerated dizzyingly in the time since Engelsing wrote in 1974, since Birkerts wrote in 1994, and since I wrote, yesterday, the paragraph above.&lt;/p&gt;
&lt;p&gt;Horizontal reading rules the day. What I do when I look at Twitter is less akin to reading a book than to the encounter I have with a recipe’s instructions or the fine print of a receipt: I’m taking in information, not enlightenment. It’s a way to pass the time, not to live in it. Reading—real reading, the kind Birkerts makes his impassioned case for—draws on our vertical sensibility, however latent, and “where it does not assume depth, it creates it.”&lt;/p&gt;
&lt;p&gt;I no longer have a Facebook account, and I find myself spending less and less time online. As adulthood settles on me—no passing fad, it turns out, but a chronic condition—I’m increasingly drawn back to the deeply engaged reading of my childhood. The books have changed, and my absorption is not always as total as it once was, but I can still find, slipped like a note between the pages, what Birkerts calls the “time of the self… deep time, duration time, time that is essentially characterized by our obliviousness to it.” The gift of reading, the gift of any encounter with art, is that this time spent doesn’t leave me when I lift my eyes from the book in my lap: it lingers, for a minute or a day. “[S]omething more than definitional slackness allows me to tell a friend that I’m reading &lt;em&gt;The Good Soldier&lt;/em&gt; as we walk down the street together,” Birkerts writes. “In some ways I &lt;em&gt;am&lt;/em&gt; reading the novel as I walk, or nap, or drive to the store for milk.”&lt;/p&gt;
&lt;p&gt;Unfortunately, this thrumming-under quality is also true of our horizontal reading. If I’ve spent too long before the pixelated page, that experience, too, clings to the hours that follow. The screen appears before my closed eyes; my thoughts vibrate at the frequency of &lt;em&gt;content&lt;/em&gt;, of &lt;em&gt;discourse&lt;/em&gt;: pithy, argumentative, living in anticipation of retort. I debate imagined trolls in the shower. “When a work compels immersion, if often also has the power to haunt from a distance,” Birkerts says, and how I wish this haunting were the sole province of great work. It isn’t: ghosts seep through the words on the screen, ghosts of screeds and inanities, of hate and idiocy, of so much—so much!—bad writing.&lt;/p&gt;
&lt;p&gt;“But perhaps when the need is strong enough we will seek out the word on the page, and the work that puts us back into the force field of deep time,” says Birkerts. “The book—and my optimism, you may sense, is not unwavering—will be seen as a haven, as a way of going off-line and into a space sanctified by subjectivity.” Oddly enough, here in the dawning days of 2019, my own optimism is strong. It seems clear to me that the need is strong enough—is as strong as it always has been and always will be—for the blossoming, bodily pleasure of reading something remarkable, the way it takes the top of my head off and shows me—palms open, an offering—what’s been churning away in there, all along.&lt;/p&gt;
&lt;p&gt;“Resonance—there is no wisdom without it,” Birkerts writes. “Resonance is a natural phenomenon, the shadow of import alongside the body of fact, and it cannot flourish except in deep time.” But time feels especially shallow these days, as the wave of one horror barely crests before it’s devoured by the next, as every morning’s shocking headline is old news by the afternoon. Weeks go by, and we might see friends only through the funhouse mirrors of Snapchat and Instagram and their so-called stories, designed to disappear. Not even the pretense of permanence remains: we refresh and refresh every tab, and are not sated. What are we waiting for? What are we hoping to find?&lt;/p&gt;
&lt;p&gt;We know perfectly well—we remember, even if dimly, the inward state that satisfies more than our itching, clicking fingers—and we know it isn’t here. &lt;em&gt;Here,&lt;/em&gt; on the internet, is a nowhere space, a shallow time. It is a flat and impenetrable surface. But with a book, we dive in; we are sucked in; we are immersed, body and soul. “We hold in our hands a way to cut against the momentum of the times,” Birkerts assures. “We can resist the skimming tendency and delve; we can restore, if only for a time, the vanishing assumption of coherence. The beauty of the vertical engagement is that it does not have to argue for itself. It is self-contained, a fulfillment.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class=&quot;il&quot;&gt;Mairead&lt;/span&gt; Small Staid is a poet, critic, and essayist living in Minnesota.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;article-tools_desktop&quot;&gt;
&lt;nav class=&quot;article-nav&quot;&gt;&lt;p class=&quot;h6&quot;&gt;Last / Next&lt;br/&gt;Article&lt;/p&gt;
&lt;/nav&gt;&lt;/div&gt;
&lt;div class=&quot;article-tools_mobile&quot;&gt;
&lt;nav class=&quot;article-nav&quot;&gt;&lt;p class=&quot;h6&quot;&gt;Last / Next Article&lt;/p&gt;
&lt;p class=&quot;article-tools-social h6&quot;&gt;Share&lt;/p&gt;
&lt;/nav&gt;&lt;/div&gt;
&lt;footer class=&quot;article-footer&quot;&gt;&lt;section class=&quot;article-tags&quot;&gt;&lt;h6&gt;Tags&lt;/h6&gt;
&lt;/section&gt;&lt;/footer&gt;</description>
<pubDate>Tue, 12 Feb 2019 20:45:32 +0000</pubDate>
<dc:creator>wormold</dc:creator>
<og:url>https://www.theparisreview.org/blog/2019/02/08/reading-in-the-age-of-constant-distraction/</og:url>
<og:title>Reading in the Age of Constant Distraction</og:title>
<og:type>article</og:type>
<og:image>https://www.theparisreview.org/blog/wp-content/uploads/2019/02/lsende-lille-pige-1461563182_org.jpg</og:image>
<og:description>Twenty-five years ago, Sven Birkerts published “The Gutenberg Elegies: The Fate of Reading in an Electronic Age.” Have his fears and projections come to pass?</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theparisreview.org/blog/2019/02/08/reading-in-the-age-of-constant-distraction/</dc:identifier>
</item>
<item>
<title>1991 – a server-side web framework written in Forth</title>
<link>http://www.1-9-9-1.com/</link>
<guid isPermaLink="true" >http://www.1-9-9-1.com/</guid>
<description>&lt;div id=&quot;&quot;&gt;
&lt;p&gt;Getting started in &lt;strong&gt;1991&lt;/strong&gt; is easy.&lt;/p&gt;
&lt;p&gt;All you need to do is include &lt;code&gt;1991.fs&lt;/code&gt; into your Forth source file. Next, you can define your public routes using the &lt;code&gt;/1991&lt;/code&gt; word. Once your routes are all layed out, start the server using &lt;code&gt;1991:&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
\ app.fs
\ Load 1991.
include 1991.fs

\ Define our route handlers.
: handle-/ ( -- addr u )
    \ Any string returned by the handler
    \ will be output to the browser.
    s&quot; Hello, 1991.&quot; ;

\ Set up our routes.
/1991 / handle-/

\ Start the server on port 8080.
8080 1991:
&lt;/pre&gt;
&lt;p&gt;You can run the server using &lt;code&gt;gforth app.fs&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Logging In II: Logging In, Deeper&lt;/h2&gt;
&lt;h3&gt;Route Wildcards (Fuzzy Routing / URL Mapping)&lt;/h3&gt;
&lt;p&gt;If you want to specify that some part of a route is a wildcard (accepts any value), then you can wrap some named value in &lt;code&gt;&amp;lt;chevrons&amp;gt;&lt;/code&gt;. &lt;strong&gt;1991&lt;/strong&gt; will accept any URL that matches your wildcard pattern, setting the internal value of whatever you place between the chevrons to whatever is actually requested.&lt;/p&gt;
&lt;p&gt;In the example below, &lt;code&gt;&amp;lt;uid&amp;gt;&lt;/code&gt; specifies that we're willing to accept any (non-empty) value in its place which we'd like to access using the name &lt;code&gt;uid&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
\ wildcards.fs
\ Load 1991.
include 1991.fs

\ Define our route handler.
: handle-wildcard-route ( -- addr u )
    s&quot; contents of the route request: &quot; get-query-string s+ ;

\ Set up our route.
/1991 /users/&amp;lt;uid&amp;gt; handle-wildcard-route

\ We can set up multiple wildcards too (must be slash-separated).
/1991 /users/&amp;lt;uid&amp;gt;/posts/&amp;lt;pid&amp;gt; handle-wildcard-route

\ Start server on port 8080.
8080 1991:
&lt;/pre&gt;
&lt;p&gt;All wildcards are treated similar to query string arguments. As such, wildcards can be retrieved using &lt;code&gt;get-query-string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the example above, visiting &lt;code&gt;http://localhost:8080/users/urlysses&lt;/code&gt; will result in the following query string: &lt;code&gt;uid=urlysses&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;File Serving&lt;/h3&gt;
&lt;p&gt;Use a &lt;code&gt;public/&lt;/code&gt; directory to act as a basic fileserver. Whenever a requested URL doesn't resolve through the registered routes, &lt;strong&gt;1991&lt;/strong&gt; will attempt to find the requested route within your specified public directory.&lt;/p&gt;
&lt;pre&gt;
\ public.fs
\ Load 1991.
include 1991.fs

\ Specify the location of our public directory.
\ Anything in the public/ directory within the
\ same dir as this source file will resolve.
\ You can change &quot;public&quot; to anything you want
\ as long as it matches your directory name.
sourcedir s&quot; public&quot; s+ set-public-path

\ We can set mimetypes using the `filetype:` word.
\ In the case below, we want .mp4 files to be served
\ with the content-type video/mp4.
s&quot; video/mp4&quot; filetype: mp4

\ Start the server on port 8080.
8080 1991:
&lt;/pre&gt;
&lt;p&gt;In the above example, If we have a file &lt;code&gt;public/my-video.mp4&lt;/code&gt;, then it will be available through &lt;code&gt;http://localhost:8080/my-video.mp4&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Views&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1991&lt;/strong&gt; offers basic templating through views.&lt;/p&gt;
&lt;p&gt;In order to get started, you should specify the &lt;code&gt;views/&lt;/code&gt; path. Notice the trailing slash, which differs from how we define &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you've specified your views/ directory, you can write views/ files to it. This can be any kind of file, honestly. The benefit offered by views/ is the ability to use basic templating. You can write any valid Forth code within opening (&lt;code&gt;&amp;lt;$&lt;/code&gt; ) and closing ( &lt;code&gt;$&amp;gt;&lt;/code&gt;) tags. Additionally, you can use the &lt;code&gt;import&lt;/code&gt; word to import other views into your view.&lt;/p&gt;
&lt;pre&gt;
\ views.fs
\ Load 1991.
include 1991.fs

\ Specify the location of our views directory.
sourcedir s&quot; views/&quot; s+ set-view-path

\ Define some words we'll use within
\ our view.
: page-title ( -- addr u )
    s&quot; Dynamic page title&quot; ;
: ten-lines ( -- )
    10 0 do
        s&quot; line &quot; i s&amp;gt;d  s+
        s&quot; &amp;lt;br&amp;gt;&quot; s+
        $type
    loop ;

\ Use render-view to output the contents
\ of a file in the views/ directory.
: handle-/
    s&quot; v-index.html&quot; render-view ;

/1991 / handle-/

\ Start the server on port 8080.
8080 1991:
&lt;/pre&gt;
&lt;pre&gt;
\ views/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
        &amp;lt;title&amp;gt;&amp;lt;$ page-title $type $&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;$ ten-lines $&amp;gt;
        &amp;lt;$ s&quot; imported-view.html&quot; import $&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;pre&gt;
\ views/imported-view.html
It's possible to import view files from within other view files. This is from &amp;lt;code&amp;gt;views/imported-view.html&amp;lt;/code&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div id=&quot;&quot;&gt;
&lt;h2&gt;Why is &lt;code&gt;1991:&lt;/code&gt; post-fix when &lt;code&gt;/1991&lt;/code&gt; is pre-fix?&lt;/h2&gt;
&lt;p&gt;Forth is a (mostly) post-fix notation language. So, for example, you'd write two plus two as &lt;code&gt;2 2 +&lt;/code&gt;. This is the language's natural and immediate notation. Along those lines, &lt;code&gt;1991:&lt;/code&gt; is an immediate word——running it results in immediate action. As such, we use Forth's post-fix notation to set the port and start the server immediately. Alternately, &lt;code&gt;/1991&lt;/code&gt; doesn't exactly have immediate effect per se. All it does is tell &lt;strong&gt;1991&lt;/strong&gt; that any request to &lt;code&gt;/path&lt;/code&gt; should be handled by &lt;code&gt;path-handler&lt;/code&gt;. As such, we opt to write non-immediate code using pre-fix notation.&lt;/p&gt;
&lt;h2&gt;You're using Gforth, which came out in 1992. Also, it's 2017.&lt;/h2&gt;
&lt;p&gt;Okay. But Fredric Jameson establishes that in postmodernism we have experienced a weakening sense of historisity such that what is, what was, and what will be all exist as presents in time. &lt;a href=&quot;https://en.wikipedia.org/wiki/Forth_(programming_language)#History&quot;&gt;1970&lt;/a&gt;, &lt;a href=&quot;https://groups.google.com/forum/#!msg/alt.hypertext/eCTkkOoWTAY/bJGhZyooXzkJ&quot;&gt;1991&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Gforth#History&quot;&gt;1992&lt;/a&gt;, and &lt;a href=&quot;http://www.1-9-9-1.com/&quot;&gt;2017&lt;/a&gt; all happen simultaneously. Hence developers working on new projects while still coding in decades-old text editors. They write the future in the past and are made present in so doing.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 12 Feb 2019 19:40:51 +0000</pubDate>
<dc:creator>ChrisArchitect</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.1-9-9-1.com/</dc:identifier>
</item>
<item>
<title>Two Large Chinese Borrowers Miss Bond Payments, Sources Say</title>
<link>https://www.bloomberg.com/news/articles/2019-02-11/two-large-chinese-borrowers-are-said-to-miss-bond-payments</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2019-02-11/two-large-chinese-borrowers-are-said-to-miss-bond-payments</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-02-11/two-large-chinese-borrowers-are-said-to-miss-bond-payments&quot;&gt;https://www.bloomberg.com/news/articles/2019-02-11/two-large-chinese-borrowers-are-said-to-miss-bond-payments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19145627&quot;&gt;https://news.ycombinator.com/item?id=19145627&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 257&lt;/p&gt;
&lt;p&gt;# Comments: 119&lt;/p&gt;
</description>
<pubDate>Tue, 12 Feb 2019 17:39:33 +0000</pubDate>
<dc:creator>docker_up</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=aa532990-2f65-11e9-a6b5-4f7e60a1addd&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOS0wMi0xMS90d28tbGFyZ2UtY2hpbmVzZS1ib3Jyb3dlcnMtYXJlLXNhaWQtdG8tbWlzcy1ib25kLXBheW1lbnRz</dc:identifier>
</item>
<item>
<title>The memory safety problem isn&amp;#039;t bad coders</title>
<link>https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270</link>
<guid isPermaLink="true" >https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270</guid>
<description>&lt;div class=&quot;uiScale uiScale-ui--regular uiScale-caption--regular u-flexCenter u-marginVertical24 u-fontSize15 js-postMetaLockup&quot;&gt;
&lt;div class=&quot;u-flex0&quot;&gt;&lt;a class=&quot;link u-baseColor--link avatar&quot; href=&quot;https://medium.com/@sgrif?source=post_header_lockup&quot; data-action=&quot;show-user-card&quot; data-action-source=&quot;post_header_lockup&quot; data-action-value=&quot;38fe29eb5d42&quot; data-action-type=&quot;hover&quot; data-user-id=&quot;38fe29eb5d42&quot; dir=&quot;auto&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/fit/c/100/100/1*kHWkccSEI7DBzFtkODv83g.jpeg&quot; class=&quot;avatar-image u-size50x50&quot; alt=&quot;Go to the profile of Sean Griffin&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p name=&quot;1f6f&quot; id=&quot;1f6f&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;A &lt;a href=&quot;https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/&quot; data-href=&quot;https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;recent blog article&lt;/a&gt; discussed the fact that 70% of all security bugs in Microsoft products are due to memory safety vulnerabilities. A lot of the comments I’ve seen on social media boil down to “The problem isn’t the use of a memory unsafe language, but that the programmers who wrote this code are bad.”&lt;/p&gt;
&lt;p name=&quot;61d9&quot; id=&quot;61d9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In this article, I’m going to look at a recent bug that was caught by the Rust compiler, which I think shows that not only is this assertion unreasonable but virtually impossible for reasons I haven’t seen discussed. While the example I’m going to give is about thread safety rather than memory safety, the arguments I’m going to present can be applied to both.&lt;/p&gt;
&lt;p name=&quot;cfdd&quot; id=&quot;cfdd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;First, let’s talk briefly about the actual bug. The code that I was working on had both a thread pool and a database connection pool. In order to do its work, I would need exactly one thread and at least one database connection. Database connections are likely to be the more limited resource, and I wanted to avoid spawning a thread and immediately just having it block waiting for a database connection. So the code would grab a connection from the pool and then spawn off the new thread.&lt;/p&gt;
&lt;p name=&quot;aef9&quot; id=&quot;aef9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The problem is that the database connection would sometimes use a re-entrant mutex when it was acquired from the pool. A re-entrant mutex is a concurrency primitive that ensures you are only using some resource on a single thread. The re-entrant part means that you can ask for a lock multiple times as long as it’s on the same thread. With a normal mutex we would be fine, since only one lock can exist and it doesn’t matter if we unlock it on a thread other than the one we locked it from. But since a re-entrant mutex remembers which thread it was locked from, we need to keep the resource on the same thread. Fundamentally, we just can’t have a re-entrant mutex be involved and also be able to pull the connection from the pool on a different thread than it is being used.&lt;/p&gt;
&lt;p name=&quot;8c84&quot; id=&quot;8c84&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;If the compiler hadn’t caught this for me, all scenarios would have been bad. The best case scenario is that it would have resulted in a test failure. Debugging “attempting to acquire a lock on this mutex hangs indefinitely” would have taken me several hours at least.&lt;/p&gt;
&lt;p name=&quot;4c2a&quot; id=&quot;4c2a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The worst case scenario here would have been that no tests failed. We had a case where we thought we had a resource which is not thread safe and could only be used on one thread, but there is actually another thread which could “acquire” a lock on it at any time. This is the sort of ticking time bomb that might not cause a bug at the time the code is written but leaves a massive hole for some other reasonable looking code to blow up in the future.&lt;/p&gt;
&lt;p name=&quot;1871&quot; id=&quot;1871&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;But luckily, that’s not what happened here. The compiler told me that the mutex guard didn’t implement &lt;code class=&quot;markup--code markup--p-code&quot;&gt;Send&lt;/code&gt;, which is Rust’s way of saying “You can’t send this to another thread” at which point the problem became clear to me. At this point you might be thinking that this should have been obvious to me as soon as I started writing this code. I disagree with that assertion. But even if we assume that is true, I’ve left out one important detail which makes it baseless.&lt;/p&gt;
&lt;p name=&quot;222d&quot; id=&quot;222d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;When this code was written, there were no re-entrant mutexes anywhere in the code base.&lt;/p&gt;
&lt;p name=&quot;8a80&quot; id=&quot;8a80&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This wasn’t caught when I finished writing the code. It was caught weeks later, when rebasing against the other changes of the codebase. The invariants of the code I was working with had fundamentally changed out from underneath me between when the code was written and when I was planning to merge it.&lt;/p&gt;
&lt;p name=&quot;a298&quot; id=&quot;a298&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Let me be clear, I disagree with the assertion that programmers can be expected to be perfect on its own. But the assertion that we just need better C programmers goes way farther than that. It’s not just a question of whether people can catch problems in code that they write. It’s also expecting people to be capable of re-contextualizing every invariant in any code they interact with (even indirectly). It sets the expectation that none of this changes between the time code is proposed and when it is merged.&lt;/p&gt;
&lt;p name=&quot;edf7&quot; id=&quot;edf7&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;These are not reasonable expectations of a human being. We need languages with guard rails to protect against these kinds of errors. Nobody is arguing that if we just had better drivers on the road we wouldn’t need seatbelts. We should not be making that argument about software developers and programming languages either.&lt;/p&gt;
</description>
<pubDate>Tue, 12 Feb 2019 16:54:13 +0000</pubDate>
<dc:creator>steveklabnik</dc:creator>
<og:title>No, the problem isn’t “bad coders” – Sean Griffin – Medium</og:title>
<og:url>https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270</og:url>
<og:description>A recent blog article discussed the fact that 70% of all security bugs in Microsoft products are due to memory safety vulnerabilities. A…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@sgrif/no-the-problem-isnt-bad-coders-ed4347810270</dc:identifier>
</item>
<item>
<title>The Colgan Air disaster was a milestone in aviation safety</title>
<link>https://www.bloomberg.com/news/articles/2019-02-12/the-colgan-air-crash-helped-keep-90-million-flights-safe</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2019-02-12/the-colgan-air-crash-helped-keep-90-million-flights-safe</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-02-12/the-colgan-air-crash-helped-keep-90-million-flights-safe&quot;&gt;https://www.bloomberg.com/news/articles/2019-02-12/the-colgan-air-crash-helped-keep-90-million-flights-safe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19144957&quot;&gt;https://news.ycombinator.com/item?id=19144957&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 217&lt;/p&gt;
&lt;p&gt;# Comments: 151&lt;/p&gt;
</description>
<pubDate>Tue, 12 Feb 2019 16:35:09 +0000</pubDate>
<dc:creator>jaredwiener</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=aa526640-2f65-11e9-b488-698b5e548f79&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOS0wMi0xMi90aGUtY29sZ2FuLWFpci1jcmFzaC1oZWxwZWQta2VlcC05MC1taWxsaW9uLWZsaWdodHMtc2FmZQ==</dc:identifier>
</item>
<item>
<title>Vim Is Saving Me Hours of Work When Writing Books and Courses</title>
<link>https://nickjanetakis.com/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses</link>
<guid isPermaLink="true" >https://nickjanetakis.com/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p class=&quot;post-meta&quot;&gt;Updated on February 12th, 2019 in &lt;a href=&quot;https://nickjanetakis.com/blog/tag/dev-environment-tips-tricks-and-tutorials&quot;&gt;#dev-environment,&lt;/a&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/tag/linux-tips-tricks-and-tutorials&quot;&gt;#linux&lt;/a&gt;&lt;/p&gt;

&lt;img src=&quot;https://nickjanetakis.com/assets/blog/cards/vim-is-saving-me-hours-of-work-when-writing-books-and-courses-83544e804bc0e35c331ac04cea33cd6d8253d38b0927dc8ab54bdb90693bc393.jpg&quot; class=&quot;post-card&quot; width=&quot;750&quot; height=&quot;422&quot; alt=&quot;blog/cards/vim-is-saving-me-hours-of-work-when-writing-books-and-courses.jpg&quot;/&gt;&lt;h2 class=&quot;lead no-letterspacing&quot;&gt;When writing a book or course, you deal with hundreds of thousands of words and Vim helps you manage that in a sane way.&lt;/h2&gt;
&lt;p class=&quot;post-quick-jump&quot;&gt;&lt;strong&gt;Quick Jump:&lt;/strong&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses#what-s-involved-with-creating-a-course&quot;&gt;What's Involved with Creating a Course?&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses#dealing-with-file-names&quot;&gt;Dealing with File Names&lt;/a&gt; &lt;small&gt;|&lt;/small&gt; &lt;a href=&quot;https://nickjanetakis.com/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses#adding-polish-to-screencasts-without-editing&quot;&gt;Adding Polish to Screencasts without Editing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As I get closer to finishing a course I’m working on, I try to think of ways to improve my workflow so that the next course is easier to create.&lt;/p&gt;
&lt;p&gt;That means evaluating everything from audio and video hardware, to code editors and even &lt;a href=&quot;https://nickjanetakis.com/blog/i-tried-linux-as-my-main-dev-environment-but-was-forced-back-to-windows&quot;&gt;operating systems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This article is focused on organizing and dealing with large amounts of text&lt;/strong&gt;. This could apply to books, courses, notes or anything really.&lt;/p&gt;
&lt;p&gt;After having used terminal Vim + tmux together inside of WSL for the last 2 weeks I’m already more productive than with my previous VSCode set up.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nickjanetakis.com/blog/who-else-wants-to-boost-their-productivity-with-tmux&quot;&gt;tmux&lt;/a&gt; is especially useful for anyone who juggles multiple projects. I’m always switching between freelance dev work, my blog, open source projects, side projects and courses. Being able to hit a tmux hotkey to flip to any given project and have everything be immediately loaded and ready to go is awesome.&lt;/p&gt;
&lt;p&gt;I was doing that before with tmux and VSCode, but opening and moving around VSCode to the right size was always something I had to do manually.&lt;/p&gt;
&lt;p&gt;That might sound trivial, but it’s not. Every time you do it, it puts you into a negative mindset where you think &lt;em&gt;“sigh, now I have to visually organize this again”&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;One of the biggest drawbacks to Windows is how tedious it is to manage window layouts, which is funny given the OS is called Windows. Ever since I tried i3 as a window manager on Linux, I simply can’t go back to anything else.&lt;/p&gt;
&lt;p&gt;So for the last few weeks while writing my course I’ve been looking for ways to replicate as much as i3 as possible within Windows and using terminal Vim inside of WSL along with tmux gets me close for doing anything in a terminal.&lt;/p&gt;
&lt;p&gt;So that’s one of the main reasons why I chose to give Vim a shot. It wasn’t necessarily due to VSCode as an editor being too limiting, although I did eventually find it to be unsuitable after I really thought about improving my course creation workflow.&lt;/p&gt;

&lt;h3 id=&quot;whats-involved-with-creating-a-course&quot;&gt;What’s Involved with Creating a Course?&lt;/h3&gt;
&lt;p&gt;It’s a multi-month investment that is comparable to writing a book, except there’s additional complexity added because you’re not just writing something that people will read.&lt;/p&gt;
&lt;p&gt;For example, with a book, you have a table of contents, chapters and then text that belongs to each chapter. You can write your book in whatever format you prefer and then export it to PDF when you’re done. You only need to worry about what the PDF looks like.&lt;/p&gt;
&lt;p&gt;A course is pretty similar to that. It has a table of contents, sections and lessons. The sections are just a way to group up lessons, and the lessons are text based scripts that you plan to deliver on video.&lt;/p&gt;
&lt;p&gt;For example, the course I’m currently working on now has 24 sections and 158 lessons. Each of these lessons have about 2,000 words. There’s roughly 300,000 words of text and the course isn’t done yet.&lt;/p&gt;
&lt;p&gt;Each one of those lessons will eventually be turned into a video that’s anywhere between 2 and 20 minutes long. It really comes down to how many words were written for that lesson.&lt;/p&gt;
&lt;p&gt;So now let’s talk about some of the problems I deal with to organize this content.&lt;/p&gt;
&lt;p&gt;All of the below problems are in the context of what I was doing before I started using Vim and at the end I will go over how I addressed them with Vim.&lt;/p&gt;

&lt;h3 id=&quot;dealing-with-file-names&quot;&gt;Dealing with File Names&lt;/h3&gt;
&lt;p&gt;My current approach to all of this is to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;scripts&lt;/code&gt; folder for a specific course and inside of that folder I create individual folders for each section and in those section folders I have individual files for each lesson.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;├── 001-introduction-and-setup
│   ├── 001-welcome.txt
│   ├── 002-downloading-the-starter-files.txt
│   ├── 003-tooling-setup.txt
├── 002-foobar
│   ├── 004-example.txt
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In other words, I manually order each section and lesson with a number, and the lesson numbers don’t get reset for each section. It goes from 1 all the way until the last lesson.&lt;/p&gt;
&lt;p&gt;Things get even more interesting too because I also have a separate git repo that has numbered folders that match up to a specific lesson. It’s really important that the lesson numbers and the git repo folder numbers line up in the end.&lt;/p&gt;
&lt;p&gt;But, as you can probably see, this approach is terrible for when you need to add a lesson into the middle of the course. Imagine adding a lesson in after number 50 which is now 51. That means you need to manually increment every lesson after 50 by 1 which sucks.&lt;/p&gt;
&lt;p&gt;On that note, it’s nearly impossible to come up with a final table of contents up front for a course because the lessons aren’t possible to predict.&lt;/p&gt;
&lt;p&gt;I need to write the scripts and play with it as I go. I don’t even come up with a lesson’s title until I’m done writing it, and since the duration of the video is important, the number of words in the lesson really dictates when one lesson flows into the next.&lt;/p&gt;
&lt;p&gt;To help combat that problem right now what I typically do is create a single file for each section, write out all of the lesson scripts for that whole section and when I’m really happy with it then I break it up into manually numbered files.&lt;/p&gt;
&lt;p&gt;So that’s how I deal with things now. I number things manually and try to reduce the chances of having to add in lessons later. If I do have to add one in (which happened twice during this course so far), I bite the bullet and rename everything manually.&lt;/p&gt;
&lt;p&gt;Another pain point with this approach is if I want to change a lesson title, I need to go to the file system and change the file name manually. This might seem like a minor thing, but it adds friction to the writing process. It really does.&lt;/p&gt;
&lt;p&gt;Lastly, on a regular basis I’m always making sure that one lesson flows nicely into the next one, so if I’m working on lesson 5, I often open up lesson 4, scroll to the bottom of the file, read what I wrote and then make sure I start lesson 5 in a way that flows naturally. It’s a lot of jumping between files.&lt;/p&gt;
&lt;h4 id=&quot;potentially-solving-some-of-these-problems-with-my-existing-tools&quot;&gt;Potentially Solving Some of These Problems with My Existing Tools&lt;/h4&gt;
&lt;p&gt;I played around with the idea of not numbering them at all while keeping a separate YAML table of contents file around. Then I could write a little Python script to read in that TOC file and programatically number all of the sections and lessons when the course is done.&lt;/p&gt;
&lt;p&gt;I’m sure I could get that to work but now I need to keep a separate table of contents in sync with the actual files. Dealing with the file names themselves is annoying enough and this solution doesn’t address that. It just seems like adding more fuel to the fire.&lt;/p&gt;
&lt;p&gt;Although it is worth mentioning, unlike a book, a course isn’t just a single exported PDF file. I want people to be able to stream the course on my site, which means there needs to be a table of contents created within the course platform’s back-end.&lt;/p&gt;
&lt;p&gt;Ultimately that is what people will be interacting with, not these script files directly, so really these section folders and lesson files on my dev box don’t need to exist. They just need to be numbered so I can associate them to folder numbers in a git repo.&lt;/p&gt;
&lt;h4 id=&quot;ideal-solution-in-a-perfect-world&quot;&gt;Ideal Solution in a Perfect World&lt;/h4&gt;
&lt;p&gt;It would be really nice if I didn’t have to think about the ordering of the sections and lessons beyond what order they appear in the code editor.&lt;/p&gt;
&lt;p&gt;Basically, if I have a list of lessons like this:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Welcome&lt;/li&gt;
&lt;li&gt;Downloading the Starter Files&lt;/li&gt;
&lt;li&gt;Tooling Setup&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I only want to deal with the lesson titles in a human readable way and not deal with numbers. If I wanted to rename a lesson, it only gets renamed in that one spot and if I wanted to move a lesson down, I would only have to move the line down and the lesson numbers would get automatically updated.&lt;/p&gt;
&lt;p&gt;On that note, if I add a new lesson somewhere in between, all of the other lessons below it would get their numbers adjusted. This goes for section numbers too. But keep in mind, the lesson numbers would be indexed across all sections. Each section wouldn’t have its own separate index of lessons.&lt;/p&gt;
&lt;p&gt;I also don’t want to deal with manually having to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;tooling-setup.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Another important thing is lesson isolation. If I click into or expand the Tooling Setup lesson, I only want to see that lesson’s text, but at the same time, maybe sometimes I would want to see the previous or next lesson’s text so I can quickly see how they start and end.&lt;/p&gt;
&lt;p&gt;With that said, it’s not just isolation to help keep me focused. It would be nice to be able to jump to the start, middle or end of the lesson and not have it apply to the entire section or course. Especially when searching for text.&lt;/p&gt;
&lt;p&gt;But on that note, being able to operate on the entire course’s text at times would be super handy. For example, I could search for phrases like “for example” to see how many times I’m saying that, and try to use alternative phrases to make things sound a bit less systematic.&lt;/p&gt;
&lt;p&gt;Truthfully I don’t read these scripts word for word when I deliver the video. They are mainly to help me organize my thoughts, but I do use them as a guide when recording the videos.&lt;/p&gt;
&lt;h4 id=&quot;solving-the-problem-with-vim&quot;&gt;Solving the Problem with Vim&lt;/h4&gt;
&lt;p&gt;I wrote the above ideal solution before I even knew what editor and tools I was going to use. I think this is a great way to discover not only what the problem is, but how you can solve it.&lt;/p&gt;
&lt;p&gt;One of the only technical books I ever read was &lt;a href=&quot;https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs&quot; target=&quot;_blank&quot;&gt;SICP&lt;/a&gt; (Structure and Interpretation of Computer Programs) and in that book they talk about a concept called “wishful thinking”.&lt;/p&gt;
&lt;p&gt;In the context of the book, they talk about designing your software under the assumption that certain libraries or functions will exist before you write them. This lets you focus on designing the API of your application and fill in the details later.&lt;/p&gt;
&lt;p&gt;That’s kind of what I did here, but in a different context.&lt;/p&gt;
&lt;h5 id=&quot;creating-one-massive-300000-word-file&quot;&gt;Creating one massive 300,000 word file:&lt;/h5&gt;
&lt;p&gt;I started to think about the problem in reference to my ideal solution. A big component of my overall problem was dealing with individual file names.&lt;/p&gt;
&lt;p&gt;So why not just eliminate the files in the first place and use 1 large file?&lt;/p&gt;
&lt;p&gt;I didn’t have a giant file to test this on but it only took a few seconds to create one based on the files I already had. I just opened a Bash prompt in WSL and ran &lt;code class=&quot;highlighter-rouge&quot;&gt;cat */*.txt &amp;gt; all.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now I had a 300,000 word markdown file that was roughly 1.5MB in size. I decided to try opening it with my existing VSCode set up and Vim. In both cases I kept plugins enabled and both editors had plugins to deal with markdown.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Surprisingly enough VSCode&lt;/strong&gt; opened this file pretty quickly. It only took about 3 seconds and even typing into the file felt just as fast as a smaller file.&lt;/p&gt;
&lt;p&gt;However, just having the file open without doing anything used 50% of my overall CPU on an i5 3.2ghz quad core and jumped to 65% when typing.&lt;/p&gt;
&lt;p&gt;That’s not really going to cut it. This is a file I’m going to have open every day for months. It can’t overtake my entire computer. By the way, it also used 800MB of RAM but honestly I don’t mind that too much since I have 16GB of RAM.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So then I opened the same file in Vim&lt;/strong&gt;. Vim took about the same amount of time to open, but it used less than 10MB of RAM, 0% CPU when open and jumped to 3-4% CPU load when typing in the middle of the document.&lt;/p&gt;
&lt;p&gt;It felt just as fast to type into as it did with a smaller file. It even handled typing ** to start bold text with markdown and it was instant, even while it was bolding 300,000 words.&lt;/p&gt;
&lt;p&gt;That was a much better result than I could have asked for, especially since Vim is directly running inside of WSL which is known to be pretty slow. I imagine it would have been even faster on a native Linux system.&lt;/p&gt;
&lt;h5 id=&quot;setting-up-a-realistic-worst-case-scenario&quot;&gt;Setting up a realistic worst case scenario:&lt;/h5&gt;
&lt;p&gt;What if I had a 900,000 word file? There’s really no way I would end up with more than 500,000 words in a course but I figured it would be a good idea to see what happens.&lt;/p&gt;
&lt;p&gt;900,000 words took 10 seconds to open with Vim, but once I was in everything felt just as good as the 300,000 word file. There was about a half second delay going in and out of insert mode, but that was the only difference. RAM and CPU usage was roughly the same.&lt;/p&gt;
&lt;p&gt;In case you’re curious, VSCode performed about the same as it did with 300k words too. In this case, VSCode actually opened up the file quite a bit faster than Vim, but then again, this is 100% due to Vim running in WSL, while VSCode was running in Windows directly.&lt;/p&gt;
&lt;h5 id=&quot;navigating-around-sections-and-lessons-in-a-single-big-file&quot;&gt;Navigating around sections and lessons in a single big file:&lt;/h5&gt;
&lt;p&gt;There’s no point comparing VSCode anymore since I’m not going to be using it, so this will be focused specifically on Vim.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/plasticboy/vim-markdown&quot; target=&quot;_blank&quot;&gt;vim-markdown&lt;/a&gt; plugin is absolutely fantastic and really makes all of this doable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’m someone who typically doesn’t like code folding, but code folding turned out to be the best thing ever&lt;/strong&gt; for this approach and the vim-markdown plugin has first class support for dealing with folding based on markdown headers.&lt;/p&gt;
&lt;p&gt;That means I can open the file with all folds closed, and then jump to the lesson I want to work on and unfold it within seconds. It works out beautifully.&lt;/p&gt;
&lt;p&gt;This plugin also supports jumping between headers using &lt;code class=&quot;highlighter-rouge&quot;&gt;[[&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;]]&lt;/code&gt;, so I can easily jump to previous and next lessons.&lt;/p&gt;
&lt;p&gt;Vim is also aware of how code folds work, so you can perform searches and manipulate text for only the folds that are open. This gives me everything I wanted from my ideal solution because if I want to act on the whole file, I can just hit a hotkey to unfold everything.&lt;/p&gt;
&lt;p&gt;Plus on top of all of that, there’s &lt;a href=&quot;https://github.com/junegunn/fzf.vim&quot; target=&quot;_blank&quot;&gt;fzf.vim&lt;/a&gt; which lets you fuzzy search lines in the buffer (among other things). It’s a superb choice for finding phrases. Seriously, &lt;a href=&quot;https://github.com/junegunn&quot;&gt;junegunn&lt;/a&gt; is an amazing author of developer productivity tools. He made FZF and a few other tools.&lt;/p&gt;
&lt;p&gt;Epic.&lt;/p&gt;
&lt;h5 id=&quot;numbering-sections-and-lessons&quot;&gt;Numbering sections and lessons:&lt;/h5&gt;
&lt;p&gt;The vim-markdown plugin also happens to have a handy command called &lt;code class=&quot;highlighter-rouge&quot;&gt;:Toc&lt;/code&gt; which will create an entire table of contents based on your headers. This TOC is generated in a separate buffer, and you can even click on the headers to jump to the area in the real markdown file.&lt;/p&gt;
&lt;p&gt;This behavior is pretty much exactly what I want. I don’t need to know the lesson numbers all the time. It’s only when I want to know the count, or want to tie a lesson number back into a git folder number outside of Vim.&lt;/p&gt;
&lt;p&gt;Currently the plugin doesn’t support numbering the headers in the TOC output, so I &lt;a href=&quot;https://github.com/plasticboy/vim-markdown/issues/413&quot; target=&quot;_blank&quot;&gt;opened an issue on GitHub&lt;/a&gt;, but this problem is solvable for now, it’s just a little less integrated.&lt;/p&gt;
&lt;p&gt;For example, all of my sections use &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; and all of my lessons use &lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt; so all it takes is a little Bash magic to parse the file. For example, you could grep through the file and pull out lines that start with &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; and now you have a list of all sections, etc..&lt;/p&gt;
&lt;p&gt;I haven’t come up with a perfect script yet but I’m 100% sure it’s possible and that’s all I care about for now. Who knows, by the time I finish my current course maybe the author of vim-markdown will build this into his plugin.&lt;/p&gt;
&lt;h5 id=&quot;improving-scroll-speed-in-large-files&quot;&gt;Improving scroll speed in large files:&lt;/h5&gt;
&lt;p&gt;In WSL I noticed with relative line numbers that scrolling around even small files with 100 lines was very slow. We’re talking multiple seconds of lag between scrolling and seeing the cursor move.&lt;/p&gt;
&lt;p&gt;It turns out relative line numbers were mostly to blame but I didn’t want to lose them. After applying both of the settings below, scrolling became fast again, even in a 900,000 word file. It was funny seeing a file with over 100,000 lines.&lt;/p&gt;
&lt;div class=&quot;language-vim highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; lazyredraw
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; regexpengine&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&quot;speeding-up-code-folding&quot;&gt;Speeding up code folding:&lt;/h5&gt;
&lt;p&gt;By default code folding inside of the 300,000 word file was unbearably slow. Even just having the file open made it pretty much unusable but after a little bit of research I found a plugin that worked perfectly.&lt;/p&gt;
&lt;p&gt;Adding the &lt;a href=&quot;https://github.com/Konfekt/FastFold&quot;&gt;FastFold&lt;/a&gt; plugin to my vimrc instantly fixed the problem. It went from unusable to awesome. It basically changes when folds are updated.&lt;/p&gt;

&lt;h3 id=&quot;adding-polish-to-screencasts-without-editing&quot;&gt;Adding Polish to Screencasts without Editing&lt;/h3&gt;
&lt;p&gt;When it comes to creating courses on technical topics such as programming you find yourself spending a lot of time recording your code editor.&lt;/p&gt;
&lt;p&gt;This is where you’ll be looking at, writing and explaining code on video.&lt;/p&gt;
&lt;p&gt;When recording I often use a very large font size and a noticeable cursor so it’s easier to follow what I’m talking about but one thing I started to do recently was add in special effects to emphasis text after I record the video.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nickjanetakis.com/assets/blog/post-production-highlight-text-e2ce658d64b02568810f4e27fc4bd0421a2d620ae9e220bc40aeb0af04a6cdb6.jpg&quot; data-action=&quot;zoom&quot; width=&quot;1920&quot; height=&quot;1080&quot; alt=&quot;blog/post-production-highlight-text.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;For example, after I record the video, during the editing phase I would often dim most of the screen and highlight a specific area of the code just to make it even more clear on what we’re talking about.&lt;/p&gt;
&lt;p&gt;I’ve gotten a lot of people say they really liked this effect, and a number of people have said my &lt;a href=&quot;https://diveintodocker.com/?utm_source=nj&amp;amp;utm_medium=website&amp;amp;utm_campaign=/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses&quot;&gt;Dive into Docker course&lt;/a&gt; was the highest production quality course they’ve ever taken.&lt;/p&gt;
&lt;p&gt;However, this production quality comes at a price. It takes a long time to go through hours of video and manually highlight the areas I want.&lt;/p&gt;
&lt;p&gt;It just so happens Vim has a plugin called &lt;a href=&quot;https://github.com/junegunn/limelight.vim&quot; target=&quot;_blank&quot;&gt;limelight.vim&lt;/a&gt; that lets you do this in real time. It is written by the same author who made FZF.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/fa4e9321be0b4a565ae84a66bae36e97545c101b/68747470733a2f2f7261772e6769746875622e636f6d2f6a756e6567756e6e2f692f6d61737465722f6c696d656c696768742e676966&quot; alt=&quot;Limelight&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It automatically highlights the area where your cursor is, and you can tweak things like the dimmed color and opacity so you can make it look great with any color theme.&lt;/p&gt;
&lt;p&gt;This means I can turn on limelight and not have to manually add dims and highlights to the screen in post production editing. This alone saves hours. At the moment VSCode has nothing like this, but I imagine it could be made. I know there’s an Emacs port of it.&lt;/p&gt;
&lt;p&gt;I’m going to give that a shot when I’m ready to record my upcoming course.&lt;/p&gt;
&lt;p&gt;In the end, I’m really happy to have given Vim a second chance. I wrote it off a long time ago but now it’s chalking up to be one of the most important tools in my tool chain to write code and create courses. Expect more Vim posts to come in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What Vim tips do you have for writing? Let me know below.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;Like you, I'm super protective of my inbox, so don't worry about getting spammed. You can expect a few emails per month (at most), and you can 1-click unsubscribe at any time. &lt;a href=&quot;https://nickjanetakis.com/newsletter&quot;&gt;See what else you'll get&lt;/a&gt; too.&lt;/p&gt;</description>
<pubDate>Tue, 12 Feb 2019 14:48:22 +0000</pubDate>
<dc:creator>nickjj</dc:creator>
<og:type>article</og:type>
<og:title>Vim Is Saving Me Hours of Work When Writing Books &amp; Courses</og:title>
<og:description>When writing a book or course, you deal with hundreds of thousands of words and Vim helps you manage that in a sane way.</og:description>
<og:url>https://nickjanetakis.com/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses</og:url>
<og:image>https://nickjanetakis.com/assets/blog/cards/vim-is-saving-me-hours-of-work-when-writing-books-and-courses-83544e804bc0e35c331ac04cea33cd6d8253d38b0927dc8ab54bdb90693bc393.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nickjanetakis.com/blog/vim-is-saving-me-hours-of-work-when-writing-books-and-courses</dc:identifier>
</item>
<item>
<title>CERN day 1: rebuilding the first web browser</title>
<link>https://remysharp.com/2019/02/12/cern-day-1</link>
<guid isPermaLink="true" >https://remysharp.com/2019/02/12/cern-day-1</guid>
<description>&lt;p&gt;This marks the beginning of a week long adventure in Geneva Switzerland at CERN, to work on a hack project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://remysharp.com/images/cern-2019/badge.jpg&quot; alt=&quot;my badge&quot; width=&quot;680&quot; height=&quot;451&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The project is to rebuilding the very first web browser, aptly called WorldWideWeb (though shortly thereafter being renamed to Nexus, since…the whole world wide web thing being a bigger deal). This browser was written by Sir Tim Berners-Lee in 1990 and the project marks the 30th anniversary of the web.&lt;/p&gt;
&lt;p&gt;This event also reunites most of the team that made up the 2013 hack project to recreate the Line Mode Browser. On being asked if I was interested in returning, I jumped at the chance. It's CERN. There's some proper smarties rolling around here. Maybe some of that will rub off on me!&lt;/p&gt;
&lt;p&gt;The project is a quasi historical restoration mixed with simulation as we bring the original browser to the public via modern technology, specifically and ironically, via today's browsers.&lt;/p&gt;
&lt;h2&gt;Day 1&lt;/h2&gt;
&lt;p&gt;The first day is always a lot of finding our feet. Trying to articulate (to ourselves) what the scope of the problem is, what we need to achieve and what we &lt;em&gt;want&lt;/em&gt; to achieve.&lt;/p&gt;
&lt;p&gt;This time around is made a little trickier (or interesting?) as there's more mixed overlap in arrivals of team members. It'll only be a single day on Wednesday that we'll be at full capacity, but compared to 2013's efforts, we have a full week to pull the job off rather than 3 days.&lt;/p&gt;
&lt;h2&gt;The WorldWideWeb&lt;/h2&gt;
&lt;p&gt;The aim of the morning is to grasp exactly &lt;em&gt;what&lt;/em&gt; this browser did, how it did it, and what it looked like.&lt;/p&gt;
&lt;p&gt;We've sourced &lt;a href=&quot;https://www.youtube.com/watch?v=3c3Rt6QbHDw&quot;&gt;videos&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=XAF0xdIiI20&amp;amp;feature=youtu.be&quot;&gt;emulators&lt;/a&gt; and most importantly, and impressively, a &lt;a href=&quot;https://en.m.wikipedia.org/wiki/NeXTcube&quot;&gt;NeXTcube&lt;/a&gt; machine straight from the museum has been delivered to our (war room?…I want to say war room, but there's not much fighting going on…) room.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://remysharp.com/images/cern-2019/nextcube.jpg&quot; alt=&quot;NeXTcube&quot; width=&quot;680&quot; height=&quot;510&quot;/&gt;&lt;/p&gt;
&lt;p&gt;One of the main challenges we faced (and still face at time of writing) is that we want the WorldWideWeb to run on the NeXTcube - and oddly this machine has a number of browsers, but none of them are the WorldWideWeb :-\&lt;/p&gt;
&lt;p&gt;Somehow we'll deliver the WorldWideWeb.app directly to the machine…if only we could work out how to network the machine…&lt;/p&gt;
&lt;h2&gt;Simulation&lt;/h2&gt;
&lt;p&gt;My role in the team is code. Firstly the server side aspect to the simulation. Then once that's solved, any interaction in the browser where we'll simulate the NeXTcube desktop and opening windows to the WorldWideWeb.&lt;/p&gt;
&lt;p&gt;The server part is relatively small and involves:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Proxying requests to collect HTML and return it the client&lt;/li&gt;
&lt;li&gt;Blocking all internal .cern.ch sites with a handful of whitelisted exceptions&lt;/li&gt;
&lt;li&gt;In the returned HTML, strip out any unsupported tags (like &lt;code&gt;IMG&lt;/code&gt; which appeared later in &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Mosaic_(web_browser&quot;&gt;Mosaic&lt;/a&gt; - TIL: was named because it would fit together pieces like HTTP, FTP, Gopher and NNTP).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This part was partially lifted from the original &lt;a href=&quot;https://github.com/cern-hackdays/lmb&quot;&gt;Line Mode Browser source&lt;/a&gt; and cleaned up for the 5½ years worth of new knowledge I had :)&lt;/p&gt;
&lt;p&gt;Then on with some traditional fondue with our team and some rest when tomorrow we might try to make some of the &lt;abbr title=&quot;user interface&quot;&gt;UI&lt;/abbr&gt; come together.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://remysharp.com/images/cern-2019/fondue.jpg&quot; alt=&quot;Fondue&quot; width=&quot;680&quot; height=&quot;510&quot;/&gt;&lt;/p&gt;
&lt;p class=&quot;metadata&quot;&gt;Posted 12-Feb 2019 under personal.&lt;/p&gt;
&lt;footer class=&quot;follow update&quot;&gt;&lt;div id=&quot;subscribe-form&quot; data-ck-version=&quot;6&quot; class=&quot;row ck_form_container ck_inline&quot; readability=&quot;9.0037313432836&quot;&gt;
&lt;div class=&quot;c2 s1&quot; readability=&quot;12.638888888889&quot;&gt;
&lt;h4 id=&quot;want-more&quot; class=&quot;ck_form_title&quot;&gt;Want more?&lt;/h4&gt;
&lt;p&gt;Posts, web development learnings &amp;amp; insights, exclusive workshop and training discounts and more, direct to your inbox.&lt;/p&gt;
&lt;p&gt;&lt;small class=&quot;ck_guarantee&quot;&gt;I won't send you any spam, and you can unsubscribe at any time. &lt;a href=&quot;https://convertkit.com/?utm_campaign=poweredby&quot; class=&quot;ck_powered_by&quot;&gt;Powered by ConvertKit&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/footer&gt;</description>
<pubDate>Tue, 12 Feb 2019 12:54:53 +0000</pubDate>
<dc:creator>D_Guidi</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://remysharp.com/2019/02/12/cern-day-1</dc:identifier>
</item>
</channel>
</rss>