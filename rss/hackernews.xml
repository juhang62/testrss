<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Pi-hole: A black hole for Internet advertisements</title>
<link>https://pi-hole.net/</link>
<guid isPermaLink="true" >https://pi-hole.net/</guid>
<description>&lt;div class=&quot;features-coloured-icon-boxes-featurecol cp3cols color6&quot; readability=&quot;9&quot;&gt;

&lt;h4 class=&quot;&quot;&gt;Network-wide protection&lt;/h4&gt;
&lt;p class=&quot;&quot;&gt;Instead of browser plugins or other software on each computer, &lt;strong&gt;install Pi-hole in one place&lt;/strong&gt; and your entire network is protected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;features-coloured-icon-boxes-featurecol cp3cols&quot; readability=&quot;9&quot;&gt;

&lt;h4 class=&quot;&quot;&gt;Block in-app advertisements&lt;/h4&gt;
&lt;p class=&quot;&quot;&gt;Network-level blocking allows you to &lt;strong&gt;block ads in non-traditional places&lt;/strong&gt; such as mobile apps and smart TVs, regardless of hardware or OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;features-coloured-icon-boxes-featurecol cp3cols&quot; readability=&quot;9&quot;&gt;

&lt;h4 class=&quot;&quot;&gt;Improve network performance&lt;/h4&gt;
&lt;p class=&quot;&quot;&gt;Since &lt;strong&gt;advertisements are blocked &lt;em&gt;before&lt;/em&gt; they are downloaded&lt;/strong&gt;, network performance is improved and will feel faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;features-coloured-icon-boxes-featurecol cp3cols&quot; readability=&quot;8&quot;&gt;

&lt;h4 class=&quot;&quot;&gt;Monitor statistics&lt;/h4&gt;
&lt;p class=&quot;&quot;&gt;Our Web interface offers control of your Pi-hole and a central place to view statistics.  We also include an API for extending these stats.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Thu, 30 May 2019 13:49:01 +0000</pubDate>
<dc:creator>DanielRibeiro</dc:creator>
<og:type>website</og:type>
<og:title>Pi-hole®: A black hole for Internet advertisements</og:title>
<og:description>curl -sSL https://install.pi-hole.net | bash</og:description>
<og:url>https://pi-hole.net/</og:url>
<og:image>https://i2.wp.com/pi-hole.net/wp-content/uploads/2018/12/2018-02-high.png?zoom=1.75&amp;w=3840&amp;ssl=1</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://pi-hole.net/</dc:identifier>
</item>
<item>
<title>Chrome extension manifest v3 proposal: comment from uBlock author</title>
<link>https://github.com/uBlockOrigin/uBlock-issues/issues/338#issuecomment-496009417</link>
<guid isPermaLink="true" >https://github.com/uBlockOrigin/uBlock-issues/issues/338#issuecomment-496009417</guid>
<description>Hey extensions developers,
&lt;p&gt;I'd like to respond to some of the feedback we’ve gotten on the proposed changes in Manifest V3. A number of issues raised by the community were captured in the Privacy Badger team's April 19th post in this thread. Rather than address specific points line by line as I often do on the group, I'll be responding to the broader issues they and others have raised.&lt;/p&gt;&lt;p&gt;I'd like to extend my thanks to the EFF and others for taking the time to share their feedback with the community. Writeups like these are truly invaluable as they help us understand not only your concerns, but also the context in which those concerns are rooted. Our goal is to create the best extensions platform we can for our mutual users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Manifest V3 Design Doc and Development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like most other Chromium design docs, the Manifest V3 doc is the starting point from which implementation work begins. These docs capture the context, motivations, and high-level technical notes on what the feature team plans to implement. They're generally targeted at other Chromium contributors and meant to help clarify what the team will be working on.&lt;/p&gt;
&lt;p&gt;Chromium design documents are not a final specification of what will be implemented, nor an API contract that downstream developers can rely on. Additionally, Chromium design documents are not typically updated as designs are polished, features are implemented, and details change.&lt;/p&gt;
&lt;p&gt;I mention this because I want to emphasize that the Manifest V3 design document is not exhaustive or immutable. The extensions team is pursuing the goals outlined in this design document and iterating on design and implementation details. The best way for developers to really understand the changes is to experiment with the Manifest V3 platform.&lt;/p&gt;
&lt;p&gt;To enable this, the extensions team is currently working on a Developer Preview of Manifest V3. Our goal with this preview is to give developers a way to start experimenting with some of the most significant changes to the platform in order to provide targeted feedback. We're hoping to land this in Canary in the next few months. We'll share more details about the preview in the Chromium Extensions Google Group once we get closer to launch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Permissions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Privacy Badger team touched on a number of permissions-related issues. Before we get into those issues, I want to address a slight misunderstanding. Chrome is not deprecating &amp;lt;all_urls&amp;gt; in Manifest V3, but we are changing how it works. Our primary motivation here is to give end-users more control over where extensions can inject themselves. The current extension installation flow allows developers to declare that they require access to a given set of hosts and the user must choose whether to grant all required permissions or cancel the installation. We are planning to modify the install flow so the user will be able to choose whether or not they want to grant the extension the ambient host permissions it requested. We're still iterating on the updated UI and will share additional details once this lands in Canary.&lt;/p&gt;
&lt;p&gt;Our view, informed by data from the field, is that host permissions are powerful enough that we should work to ensure that users clearly understand when they are making that specific grant. While there are legitimate reasons for extensions to use this power well, we know that other extensions have abused the same power. It is our goal to reduce the risk of abuse while still enabling users to make use of good powerful extensions. We believe Manifest v3 and the permission-granting UX strike a better balance.&lt;/p&gt;
&lt;p&gt;We recognize that this kind of functionality is core to some extensions, so we provide the tools necessary to programmatically request host permissions if the user does not opt in at install time. Developers can retrieve the extension's current permissions grants using chrome.permissions.getAll() and can request host permissions or optional permissions declared in the extension's manifest using chrome.permissions.request().&lt;/p&gt;
&lt;p&gt;We should all want users to think hard about granting broad permissions that can compromise user security and to be able to retake control for any reason. If the user doesn't want to grant an extension a given capability, it's the extension developer's responsibility to explain why those capabilities are critical and to earn the user’s trust.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chrome is deprecating the blocking capabilities of the webRequest API in Manifest V3, not the entire webRequest API (though blocking will still be available to enterprise deployments). Extensions with appropriate permissions can still observe network requests using the webRequest API. The webRequest API's ability to observe requests is foundational for extensions that modify their behavior based on the patterns they observe at runtime.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improvements to the declarativeNetRequest API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since the community started sharing feedback on the Manifest V3 design document, the extensions team has listened to developer concerns and made improvements to the declarativeNetRequest (DNR) API. We're still actively gathering feedback, designing, and expanding the DNR API. Please continue to share your concerns and use cases in order to help us make DNR the best it can be.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General Improvements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first and IMO largest change is that Chrome now has support for dynamic modification of DNR rules via the getDynamicRules(), addDynamicRules(), and removeDynamicRules() methods. DNR has two groups of rules: static rules declared in JSON files and dynamic rules set at runtime. Each of these groups has their own distinct maximum number of allowed rules. These current placeholder max values are specified in the DNR properties documentation. We are planning to raise these values but we won't have updated numbers until we can run performance tests to find a good upper bound that will work across all supported devices.&lt;/p&gt;
&lt;p&gt;Developers have clearly shown that they need metrics on rule matching in order to effectively maintain their rulesets. In order to facilitate this use case, the extensions team is also planning to add reporting to the DNR API. We're still working on the design of this feature and hope to share more in the coming months.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Header Modification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The extensions team recently added support for a new DNR action called removeHeaders which can remove allowlisted headers from requests. This allowlist currently includes Referer, Cookie, and Set-Cookie headers. We welcome feedback from developers on other headers that should be removable. Removing headers from a request should neither reduce the security of sites (e.g. CSP) nor expose user data.&lt;/p&gt;
&lt;p&gt;The extensions team is also planning to add support for static header additions and replacements. Additions would add new headers or extend existing headers. For example, an extension could add additional restrictions to CSP rules or add a new Set-Cookie header. Replacements would behave similar to the removeHeaders action, but rather than removing matching header(s) it would replace the header(s) with the header(s) specified in the rule's action. Again, we welcome developer feedback on this plan.&lt;/p&gt;
&lt;p&gt;As for setting Do Not Track headers, Chrome already allows users to set DNT values via their preferences. Rather than modify the DNT header directly, the team is currently leaning towards exposing an extension function to modify this user preference. This approach allows Chrome to avoid situations where multiple extensions replace the request's current DNT header with DNT: 1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL Parameter Modification&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While we don't currently have actions for removing or replacing query parameters, the extensions team is planning to add support for both of these.&lt;/p&gt;
&lt;p&gt;I'm a little confused by the suggestion that &quot;declarativeNetRequest should allow the modification and deletion of POST parameters as well as GET parameters.&quot; It's not clear to me whether the Privacy Badger team is asking to modify the body of POST requests or the query parameters of POST requests. Query parameters of POST requests should be modifiable like any other request type. Body modification is not currently supported by webRequest and as such the team does not currently plan to implement it for DNR. If this is something you'd like to see supported, please share more information about your use cases. The extensions team is also interested in hearing more about request parameter transformation use cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contextual redirects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are currently examining our options for redirect URL transformations. If/when transformation lands, it should be possible to convert &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.google.com/url?q=https://example.com&quot;&gt;https://www.google.com/url?q=https://example.com&lt;/a&gt; into &lt;a rel=&quot;nofollow&quot; href=&quot;https://example.com&quot;&gt;https://example.com&lt;/a&gt; by matching the q parameter in the original request and using that as the new URL value. Yegor's example in the Google Group post is trickier because it requires additional processing to generate a usable value. Situations like this are currently out of scope. That said, we'd love to hear more about use cases and what support might look like.&lt;/p&gt;
&lt;p&gt;Thank you all for working with us on the Manifest V3 effort. We're looking forward to continuing to collaborate with the community to build a safer, more secure extensions platform.&lt;/p&gt;
</description>
<pubDate>Thu, 30 May 2019 11:43:04 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/18120975?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Chrome extension manifest v3 proposal · Issue #338 · uBlockOrigin/uBlock-issues</og:title>
<og:url>https://github.com/uBlockOrigin/uBlock-issues/issues/338</og:url>
<og:description>Description This issue is a heads-up on the proposed Chrome extension manifest version 3, which will have a significant impact on ad-blockers. There is a tracking bug at: https://bugs.chromium.org/...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/uBlockOrigin/uBlock-issues/issues/338</dc:identifier>
</item>
<item>
<title>Mathematics all-in-one cheat-sheet (2013) [pdf]</title>
<link>https://ourway.keybase.pub/mathematics_cheat_sheet.pdf</link>
<guid isPermaLink="true" >https://ourway.keybase.pub/mathematics_cheat_sheet.pdf</guid>
<description>&lt;a href=&quot;https://ourway.keybase.pub/mathematics_cheat_sheet.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Thu, 30 May 2019 03:49:17 +0000</pubDate>
<dc:creator>rodmena</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/18120975?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Chrome extension manifest v3 proposal · Issue #338 · uBlockOrigin/uBlock-issues</og:title>
<og:url>https://github.com/uBlockOrigin/uBlock-issues/issues/338</og:url>
<og:description>Description This issue is a heads-up on the proposed Chrome extension manifest version 3, which will have a significant impact on ad-blockers. There is a tracking bug at: https://bugs.chromium.org/...</og:description>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://ourway.keybase.pub/mathematics_cheat_sheet.pdf</dc:identifier>
</item>
<item>
<title>Is High Quality Software Worth the Cost?</title>
<link>https://martinfowler.com/articles/is-quality-worth-cost.html</link>
<guid isPermaLink="true" >https://martinfowler.com/articles/is-quality-worth-cost.html</guid>
<description>&lt;p&gt;A common debate in software development projects is between spending time on improving the quality of the software versus concentrating on releasing more valuable features. Usually the pressure to deliver functionality dominates the discussion, leading many developers to complain that they don't have time to work on architecture and code quality.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines&quot;&gt;Betteridge's Law of headlines&lt;/a&gt; is an adage that says any article with a headline or title that ends in a question mark can be summarized by &quot;no&quot;. Those that know me would not doubt my desire to subvert such a law. But this article goes further than that - it subverts the question itself. The question assumes the common trade-off between quality and cost. With this article I'll explain that this trade-off does not apply to software - that high quality software is actually cheaper to produce.&lt;/p&gt;
&lt;p&gt;Although most of my writing is aimed at professional software developers, for this article I'm not going to assume any knowledge of the mechanics of software development. My hope is that this is an article that can be valuable to anyone involved with thinking about software efforts, particularly those, such as business leaders, that act as customers of software development teams.&lt;/p&gt;
&lt;div id=&quot;WeAreUsedToATrade-offBetweenQualityAndCost&quot; readability=&quot;16&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;We are used to a trade-off between quality and cost&lt;/h2&gt;
&lt;p&gt;As I mentioned in the opening, we are all used to a trade-off between quality and cost. When I replace my smart phone, I can choose a more expensive model with faster processor, better screen, and more memory. Or I can give up some of those qualities to pay less money. It's not an absolute rule, sometimes we can get bargains where a high quality good is cheaper. More often we have different values to quality - some people don't really notice how one screen is nicer than another. But the assumption is true most of the time, higher quality usually costs more.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;SoftwareQualityMeansManyThings&quot; readability=&quot;28&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;Software quality means many things&lt;/h2&gt;
&lt;p&gt;If I'm going to talk about quality for software, I need to explain what that is. Here lies the first complication - there are many things that can count as quality for software. I can consider the user-interface: does it easily lead me through the tasks I need to do, making me more efficient and removing frustrations? I can consider its reliability: does it contain defects that cause errors and frustration? Another aspect is its architecture: is the source code divided into clear modules, so that programmers can easily find and understand which bit of the code they need to work on this week?&lt;/p&gt;
&lt;p&gt;These three examples of quality are not an exhaustive list, but they are enough to illustrate an important point. If I'm a customer, or user, of the software, I don't appreciate some of the things we'd refer to as quality. A user can tell if the user-interface is good. An executive can tell if the software is making her staff more efficient at their work. Users and customers will notice defects, particularly should they corrupt data or render the system inoperative for a while. But customers and users cannot perceive the architecture of the software.&lt;/p&gt;
&lt;p&gt;I thus divide software quality attributes into &lt;strong&gt;external&lt;/strong&gt; (such as the UI and defects) and &lt;strong&gt;internal&lt;/strong&gt; (architecture). The distinction is that users and customers can see what makes a software product have high external quality, but cannot tell the difference between higher or lower internal quality.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;AtFirstGlanceInternalQualityDoesNotMatterToCustomers&quot; readability=&quot;26&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;At first glance, internal quality does not matter to customers&lt;/h2&gt;
&lt;p&gt;Since internal quality isn't something that customers or users can see - does it matter? Let's imagine Rebecca and I write an application to track and predict flight delays. Both our applications do the same essential function, both have equally elegant user interfaces, and both have hardly any defects. The only difference is that her internal source code is neatly organized, while mine is a tangled mess. There is one other difference: I sell mine for $6 and she sells hers for $10.&lt;/p&gt;
&lt;p&gt;Since a customer never sees this source code, and it doesn't affect the operation of the app, why would anyone pay an extra $4 for Rebecca's software? Put more generally this should mean that it isn't worth paying more money for higher internal quality.&lt;/p&gt;
&lt;p&gt;Another way I put this is that it makes sense to trade cost for external quality but it makes no sense to trade cost for internal quality. A user can judge whether they want to pay more to get a better user interface, since they can assess whether the user interface is sufficiently nicer to be worth the extra money. But a user can't see the internal modular structure of the software, let alone judge that it's better. Why pay more for something that has no effect? Since that's the case - why should any software developer put their time and effort into improving the internal quality of their work?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;InternalQualityMakesItEasierToEnhanceSoftware&quot; readability=&quot;47&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;Internal quality makes it easier to enhance software&lt;/h2&gt;
&lt;p&gt;So why is it that software developers make an issue out of internal quality? Programmers spend most of their time modifying code. Even in a new system, almost all programming is done in the context of an existing code base. When I want to add a new feature to the software, my first task is to figure out how this feature fits into the flow of the existing application. I then need to change that flow to let my feature fit in. I often need to use data that's already in the application, so I need to understand what the data represents, how it relates to the data around it, and what data I may need to add for my new feature.&lt;/p&gt;
&lt;p&gt;All of this is about me understanding the existing code. But it's very easy for software to be hard to understand. Logic can get tangled, the data can be hard to follow, the names used to refer to things may have made sense to Tony six months ago, but are as mysterious to me as his reasons for leaving the company. All of these are forms of what developers refer to as &lt;strong&gt;cruft&lt;/strong&gt; - the difference between the current code and how it would ideally be.&lt;/p&gt;

&lt;p&gt;One of the primary features of internal quality is making it easier for me to figure out how the application works so I can see how to add things. If the software is nicely divided into separate modules, I don't have to read all 500,000 lines of code, I can quickly find a few hundred lines in a couple of modules. If we've put the effort into clear naming, I can quickly understand what the various part of the code does without having to puzzle through the details. If the data sensibly follows the language and structure of the underlying business, I can easily understand how it correlates to the request I'm getting from the customer service reps. Cruft adds to the time it take for me to understand how to make a change, and also increases the chance that I'll make a mistake. If I spot my mistakes, then there's more time lost as I have to understand what the fault is and how to fix it. If I don't spot them, then we get production defects, and more time spend fixing things later.&lt;/p&gt;
&lt;p&gt;My changes also affect the future. I may see a quick way to put in this feature, but it's a route that goes against the modular structure of the program, adding cruft. If I take that path, I'll make it quicker for me today, but slow down everyone else who has to deal with this code in future weeks and months. Once other members of the team make the same decision, an easy to modify application can quickly accumulate cruft to the point where every little change takes many weeks of effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;CustomersDoCareThatNewFeaturesComeQuickly&quot; readability=&quot;16&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;Customers do care that new features come quickly&lt;/h2&gt;
&lt;p&gt;Here we see a clue of why internal quality does matter to users and customers. Better internal quality makes adding new features easier, therefore quicker and cheaper. Rebecca and I may have the same application now, but in the next few months Rebecca's high internal quality allows her to add new features every week, while I'm stuck trying chop through the cruft to get just a single new feature out. I can't compete with Rebecca's speed, and soon her software is far more featureful than mine. Then all my customers delete my app, and get Rebecca's instead, even as she's able to increase her price.&lt;/p&gt;
&lt;div class=&quot;figure&quot; id=&quot;cruft-impact.png&quot;&gt;&lt;img src=&quot;https://martinfowler.com/articles/is-quality-worth-cost/cruft-impact.png&quot;/&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div id=&quot;VisualizingTheImpactOfInternalQuality&quot; readability=&quot;50&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;Visualizing the impact of internal quality&lt;/h2&gt;
&lt;p&gt;The fundamental role of internal quality is that it lowers the cost of future change. But there is some extra effort required to write good software, which does impose some cost in the short term.&lt;/p&gt;
&lt;p&gt;A way of visualizing this is with the following pseudo-graph, where I plot the cumulative functionality of software versus the time (and thus cost) to produce it. For most software efforts, the curve looks something like this.&lt;/p&gt;
&lt;div class=&quot;figure&quot; id=&quot;poor.png&quot;&gt;&lt;img src=&quot;https://martinfowler.com/articles/is-quality-worth-cost/poor.png&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;This is what happens with poor internal quality. Progress is rapid initially, but as time goes on it gets harder to add new features. Even small changes require programmers to understand large areas of code, code that's difficult to understand. When they make changes, unexpected breakages occur, leading to long test times and defects that need to be fixed.&lt;/p&gt;
&lt;p&gt;Concentrating on high internal quality is about reducing that drop off in productivity. Indeed some products see an opposite effect, where developers can accelerate as new features can be easily built by making use of prior work. This happy situation is a rarer case, as it requires a skilled and disciplined team to make it happen. But we do occasionally see it.&lt;/p&gt;
&lt;div class=&quot;figure&quot; id=&quot;both.png&quot;&gt;&lt;img src=&quot;https://martinfowler.com/articles/is-quality-worth-cost/both.png&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;The subtlety here is that there is period where the low internal quality is more productive than the high track. During this time there is some kind of trade-off between quality and cost. The question, of course, is: how long is that period before the lines cross?&lt;/p&gt;
&lt;p&gt;At this point we run into why this is a pseudo-graph. There is no way of measuring the functionality delivered by a software team. This inability to measure output, and thus productivity, makes it impossible to put solid numbers on the consequences of low internal quality (which is also difficult to measure). An inability to measure output is pretty common among professional work - how do we measure the productivity of lawyers or doctors?&lt;/p&gt;
&lt;p&gt;The way I assess where lines cross is by canvassing the opinion of skilled developers that I know. And the answer surprises a lot of folks. Developers find poor quality code significantly slows them down within a few weeks. So there's not much runway where the trade-off between internal quality and cost applies. Even small software efforts benefit from attention to good software practices, certainly something I can attest from my experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;EvenTheBestTeamsCreateCruft&quot; readability=&quot;42&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;Even the best teams create cruft&lt;/h2&gt;
&lt;p&gt;Many non-developers tend to think of cruft as something that only occurs when development teams are careless and make errors, but even the finest teams will inevitably create some cruft as they work.&lt;/p&gt;
&lt;p&gt;I like to illustrate this point with a tale of when I was chatting with one of our best technical team leads. He'd just finished a project that was widely considered to be a great success. The client was happy with the delivered system, both in terms of its capabilities and its construction time and cost. Our people were positive about the experience of working on the project. The tech lead was broadly happy but confessed that the architecture of the system wasn't that good. I reacted with &quot;how could that be - you're one of our best architects?&quot; His reply is one familiar to any experienced software architect: &quot;we made good decisions, but only now do we understand how we should have built it&quot;.&lt;/p&gt;
&lt;p&gt;Many people, including more than a few in the software industry, liken building software to constructing cathedrals or skyscrapers - after all why do we use &quot;architect&quot; for senior programmers? But building software exists in a world of uncertainty unknown to the physical world. Software's customers have only a rough idea of what features they need in a product and learn more as the software is built - particularly once early versions are released to their users. The building blocks of software development - languages, libraries, and platforms - change significantly every few years. The equivalent in the physical world would be that customers usually add new floors and change the floor-plan once half the building is built and occupied, while the fundamental properties of concrete change every other year.&lt;/p&gt;

&lt;p&gt;Given this level of change, software projects are always creating something novel. We hardly ever find ourselves working on a well-understood problem that's been solved before. Naturally we learn most about the problem as we're building the solution, so it's common for me to hear that teams only really best understand what the architecture of their software should be after they've spent a year or so building it. Even the best teams will have cruft in their software.&lt;/p&gt;
&lt;p&gt;The difference is that the best teams both create much less cruft but also remove enough of the cruft they do create that they can continue to add features quickly. They spend time creating automated tests so that they can surface problems quickly and spend less time removing bugs. They refactor frequently so that they can remove cruft before it builds up enough to get in the way. Continuous integration minimizes cruft building up due to team members working at cross-purposes. A common metaphor is that it's like cleaning up work surfaces and equipment in the kitchen. You can't not make things dirty when you cook, but if you don't clean things quickly, muck dries up, is harder to remove, and all the dirty stuff gets in the way of cooking the next dish.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;HighQualitySoftwareIsCheaperToProduce&quot; readability=&quot;23&quot;&gt;
&lt;hr class=&quot;topSection&quot;/&gt;&lt;h2&gt;High quality software is cheaper to produce&lt;/h2&gt;
&lt;p&gt;Summing all of this up:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Neglecting internal quality leads to rapid build up of cruft&lt;/li&gt;
&lt;li&gt;This cruft slows down feature development&lt;/li&gt;
&lt;li&gt;Even a great team produces cruft, but by keeping internal quality high, is able to keep it under control&lt;/li&gt;
&lt;li&gt;High internal quality keeps cruft to a minimum, allowing a team to add features with less effort, time, and cost.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sadly, software developers usually don't do a good job of explaining this situation. Countless times I've talked to development teams who say &quot;they (management) won't let us write good quality code because it takes too long&quot;. Developers often justify attention to quality by justifying through the need for proper professionalism. But this moralistic argument implies that this quality comes at a cost - dooming their argument. The annoying thing is that the resulting crufty code both makes developers' life harder, and costs the customer money. When thinking about internal quality, I stress that we should only approach it as an economic argument. High internal quality reduces the cost of future features, meaning that putting the time into writing good code actually reduces cost.&lt;/p&gt;
&lt;p&gt;This is why the question that heads this article misses the point. The &quot;cost&quot; of high internal quality software is negative. The usual trade-off between cost and quality, one that we are used to for most decisions in our life, does not make sense with the internal quality of software. (It does for external quality, such as a carefully crafted user-experience.) Because the relationship between cost and internal quality is an unusual and counter-intuitive relationship, it's usually hard to absorb. But understanding it is critical to developing software at maximum efficiency.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class=&quot;bodySep&quot;/&gt;
</description>
<pubDate>Thu, 30 May 2019 00:28:18 +0000</pubDate>
<dc:creator>mplanchard</dc:creator>
<og:title>Is High Quality Software Worth the Cost?</og:title>
<og:url>https://martinfowler.com/articles/is-quality-worth-cost.html</og:url>
<og:description>We usually perceive that it costs more to get higher quality, but software internal quality actually reduces costs.</og:description>
<og:image>https://martinfowler.com/articles/is-quality-worth-cost/card.png</og:image>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://martinfowler.com/articles/is-quality-worth-cost.html</dc:identifier>
</item>
<item>
<title>The Art of Thinking Long-Term Even When Money Is Running Out</title>
<link>https://medium.dave-bailey.com/why-visionary-founders-need-to-think-long-term-7ec4a5aae21a</link>
<guid isPermaLink="true" >https://medium.dave-bailey.com/why-visionary-founders-need-to-think-long-term-7ec4a5aae21a</guid>
<description>&lt;div class=&quot;uiScale uiScale-ui--regular uiScale-caption--regular u-flexCenter u-marginVertical24 u-fontSize15 js-postMetaLockup&quot;&gt;
&lt;div class=&quot;u-flex0&quot;&gt;
&lt;div class=&quot;u-relative u-inlineBlock u-flex0&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/fit/c/100/100/1*aieVFkHAVx0C3nBRbiJowg.jpeg&quot; class=&quot;avatar-image u-size50x50&quot; alt=&quot;Go to the profile of Dave Bailey&quot;/&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p name=&quot;9ceb&quot; id=&quot;9ceb&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;&lt;em class=&quot;markup--em markup--p-em&quot;&gt;It’s easy to buy into the ‘overnight success’ story. But in reality, building a venture is a five- to seven-year endeavour. It requires foresight, strategy and a huge amount of patience . . . because everything takes longer than you expect.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;

&lt;img class=&quot;graf-image&quot; data-image-id=&quot;1*AqT31SQG7o0TJAN9zPbiLA.jpeg&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot; data-is-featured=&quot;true&quot; data-action=&quot;zoom&quot; data-action-value=&quot;1*AqT31SQG7o0TJAN9zPbiLA.jpeg&quot; src=&quot;https://cdn-images-1.medium.com/max/1600/1*AqT31SQG7o0TJAN9zPbiLA.jpeg&quot;/&gt;&lt;/div&gt;
&lt;p name=&quot;1b2d&quot; id=&quot;1b2d&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;When I look back on my previous ventures, I find I was often so focused on driving next month’s results that I took short-sighted decisions. I rushed out features that made no difference to important metrics. I invested in ‘bet-the-house’ marketing campaigns that failed to generate a return. And I retained employees that I knew weren’t right for their role.&lt;/p&gt;
&lt;p name=&quot;301a&quot; id=&quot;301a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I understood that I’d eventually have to resolve the underlying issues ‘when I had more time’. But the shortcuts always caught up with me — and usually much faster than I expected.&lt;/p&gt;
&lt;h3 name=&quot;badb&quot; id=&quot;badb&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;Difficult trade-offs&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;96bb&quot; id=&quot;96bb&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Short-term gains and long-term investments are often at odds with each other. In business, there is always an incentive to focus on short-term tactics, especially those that promise immediate gratification. On the other hand, long-term investments require discipline, patience, and they can be painful in the near-term.&lt;/p&gt;
&lt;p name=&quot;8405&quot; id=&quot;8405&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In the famous &lt;a href=&quot;https://en.wikipedia.org/wiki/Stanford_marshmallow_experiment#Follow-up_studies&quot; data-href=&quot;https://en.wikipedia.org/wiki/Stanford_marshmallow_experiment#Follow-up_studies&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Stanford Marshmallow experiment&lt;/a&gt;, children were given the choice to receive one tasty marshmallow now or to wait 15 minutes and receive &lt;em class=&quot;markup--em markup--p-em&quot;&gt;two&lt;/em&gt; marshmallows. Years later, the children who were able to delay gratification had scored better on SAT tests, and were perceived by their parents as having achieved better life outcomes than those who couldn’t.&lt;/p&gt;
&lt;p name=&quot;f5a1&quot; id=&quot;f5a1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Startups are like children — they too need to resist a marshmallow now so they can reap greater rewards later.&lt;/p&gt;
&lt;p name=&quot;2e4f&quot; id=&quot;2e4f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Here are some examples that demonstrate this conflict in startups, and how too much focus on short-term gains can be shortsighted.&lt;/p&gt;
&lt;h4 name=&quot;6177&quot; id=&quot;6177&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h4-strong&quot;&gt;1) Developing new features versus refactoring existing code&lt;/strong&gt;&lt;/h4&gt;
&lt;p name=&quot;00bf&quot; id=&quot;00bf&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Ideas for new features come up all the time in a startup. Often, development teams hack together quick and dirty solutions to get a new feature out, frequently under duress from an impatient founder. And it works . . . for a while.&lt;/p&gt;
&lt;p name=&quot;764f&quot; id=&quot;764f&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Then, development starts to slow down. More and more bugs appear and soon entire sprints are dedicated to fixing them. Developer morale takes a nosedive and soon they want to rebuild the whole thing.&lt;/p&gt;
&lt;p name=&quot;2cd4&quot; id=&quot;2cd4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Blocking out 20% of every sprint to iterate and refactor existing code feels uncomfortable, especially when that time could be used to build another feature. But the productivity gains will make up for the investment over the long-run.&lt;/p&gt;
&lt;h4 name=&quot;0748&quot; id=&quot;0748&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h4-strong&quot;&gt;2) Closing sales versus building relationships&lt;/strong&gt;&lt;/h4&gt;
&lt;p name=&quot;5997&quot; id=&quot;5997&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;In one of my earlier businesses, I was under a lot of pressure to increase sales. To boost the next month’s sales, I pushed the button on a big marketing campaign in which we reached out to a hundred potential clients with a time-limited promotion.&lt;/p&gt;
&lt;p name=&quot;3e6a&quot; id=&quot;3e6a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The results were disappointing. For most of our prospects, it was the first time they had heard of us — and they needed more time to get to know us before buying our product. The promotion failed to deliver many sales that month; the only people who converted were people we’d met months previously.&lt;/p&gt;
&lt;p name=&quot;003d&quot; id=&quot;003d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I realised that sales are about relationships — and that relationships take time to build. Trying to rush them often has the opposite effect. It’s a bit like a pushy date who’s only interested in one thing — it’s not attractive!&lt;/p&gt;
&lt;p name=&quot;d5e4&quot; id=&quot;d5e4&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We decided to focus on building relationships with important customers, not to sell to them, but to help them. We organised &lt;a href=&quot;https://www.forbes.com/sites/chicceo/2013/10/21/7-reasons-to-join-a-mastermind-group/#4c3d969e5deb&quot; data-href=&quot;https://www.forbes.com/sites/chicceo/2013/10/21/7-reasons-to-join-a-mastermind-group/#4c3d969e5deb&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mastermind groups&lt;/a&gt; and proactively shared relevant information with them. Sure enough, a few months later, they started converting.&lt;/p&gt;
&lt;h4 name=&quot;49e1&quot; id=&quot;49e1&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h4-strong&quot;&gt;3) Tolerating a bad employee versus firing and rehiring&lt;/strong&gt;&lt;/h4&gt;
&lt;p name=&quot;87f5&quot; id=&quot;87f5&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;There is always a short-term reason not to fire someone who’s underperforming. It takes a lot of time to replace and train someone new, and besides, something really important is happening next month, so we’ll postpone the inevitable. Sound familiar?&lt;/p&gt;
&lt;p name=&quot;6bf9&quot; id=&quot;6bf9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Of course, in a small company, everyone can see when someone isn’t pulling their weight. Other team members eventually become demotivated or complacent. You’ll hear a lot of, ‘If they aren’t delivering, why should I?’&lt;/p&gt;
&lt;p name=&quot;7f34&quot; id=&quot;7f34&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;When it comes to people and culture, short-term decisions almost &lt;em class=&quot;markup--em markup--p-em&quot;&gt;never&lt;/em&gt; pay off. One of the reasons is that your early team isn’t a prototype . . . it’s the real deal!&lt;/p&gt;
&lt;h3 name=&quot;fc57&quot; id=&quot;fc57&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;Keep one eye on the prize&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;22be&quot; id=&quot;22be&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Striking a balance between short-term results and long-term investments is difficult, especially when money is limited and you’re under pressure to deliver. The trick is to keep asking questions that might help reveal opportunities of turning one marshmallow into two. Ask yourself:&lt;/p&gt;
&lt;blockquote name=&quot;4a10&quot; id=&quot;4a10&quot; class=&quot;graf graf--pullquote graf--startsWithSingleQuote graf-after--p&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em class=&quot;markup--em markup--pullquote-em&quot;&gt;‘What can I do now that will increase the chance of a good outcome later?’&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;f8b5&quot; id=&quot;f8b5&quot; class=&quot;graf graf--p graf-after--pullquote&quot;&gt;One of the best moments to take long-term decisions is right after fundraising, with 12–18 months of runway in the bank. Conversely, it can be really hard to take long-term decisions when you have less than six months of cash left.&lt;/p&gt;
&lt;p name=&quot;d880&quot; id=&quot;d880&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;This is why ‘bridge rounds’ can be dangerous — they don’t extend the runway long enough to achieve meaningful results. Sometimes it’s best to cut your costs and give yourself more time to make the right investments.&lt;/p&gt;
&lt;h3 name=&quot;6ca8&quot; id=&quot;6ca8&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;&lt;strong class=&quot;markup--strong markup--h3-strong&quot;&gt;Planting seeds&lt;/strong&gt;&lt;/h3&gt;
&lt;p name=&quot;ed60&quot; id=&quot;ed60&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;We overestimate what we can do in a month and underestimate what we can do in a year. Don’t let impatience get the better of you. You need strong foundations to build a high-rise.&lt;/p&gt;
&lt;p name=&quot;efbe&quot; id=&quot;efbe&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Remember to invest in your product, your platform, and your people. Long-term success may well depend on the decisions you make &lt;em class=&quot;markup--em markup--p-em&quot;&gt;now&lt;/em&gt;.&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 22:04:44 +0000</pubDate>
<dc:creator>davesuperman</dc:creator>
<og:title>The Art of Thinking Long-Term Even When Money is Running Out</og:title>
<og:url>https://medium.dave-bailey.com/why-visionary-founders-need-to-think-long-term-7ec4a5aae21a</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*AqT31SQG7o0TJAN9zPbiLA.jpeg</og:image>
<og:description>It’s easy to buy into the ‘overnight success’ story. But in reality, building a venture is a five- to seven-year endeavour. It requires…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.dave-bailey.com/why-visionary-founders-need-to-think-long-term-7ec4a5aae21a?gi=30f53e7a4991</dc:identifier>
</item>
<item>
<title>Advanced Data Structures (2017)</title>
<link>https://courses.csail.mit.edu/6.851/fall17/</link>
<guid isPermaLink="true" >https://courses.csail.mit.edu/6.851/fall17/</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;Advanced Data Structures (6.851)&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;66.374785100287&quot;&gt;

&lt;h2&gt;Prof. &lt;a href=&quot;http://erikdemaine.org/&quot;&gt;Erik Demaine&lt;/a&gt;     TAs: Adam Hesterberg, Jayson Lynch     LAs: Andrew He, Stef Ren&lt;/h2&gt;
&lt;hr /&gt;&lt;p&gt;&lt;span&gt;[Home] [&lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;Lectures&lt;/a&gt;] [&lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/psets/&quot;&gt;Problem Sets&lt;/a&gt;] [&lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/project/&quot;&gt;Project&lt;/a&gt;] [&lt;a href=&quot;https://coauthor.csail.mit.edu/6.851-2017/&quot;&gt;Coauthor&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current research directions in data structures:&lt;/p&gt;
&lt;table readability=&quot;18.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;th&gt;TIME TRAVEL&lt;/th&gt;
&lt;td&gt;We can remember the past efficiently (a technique called persistence), but in general it's difficult to change the past and see the outcomes on the present (retroactivity). So alas, Back To The Future isn't really possible.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;th&gt;GEOMETRY&lt;/th&gt;
&lt;td&gt;When data has more than one dimension (e.g. maps, database tables).&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;th&gt;DYNAMIC OPTIMALITY&lt;/th&gt;
&lt;td&gt;Is there one binary search tree that's as good as all others? We still don't know, but we're close.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;th&gt;MEMORY HIERARCHY&lt;/th&gt;
&lt;td&gt;Real computers have multiple levels of caches. We can optimize the number of cache misses, often without even knowing the size of the cache.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;th&gt;HASHING&lt;/th&gt;
&lt;td&gt;Hashing is the most used data structure in computer science. And it's still an active area of research.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;th&gt;INTEGERS&lt;/th&gt;
&lt;td&gt;Logarithmic time is too easy. By careful analysis of the information you're dealing with, you can often reduce the operation times substantially, sometimes even to constant. We will also cover lower bounds that illustrate when this is not possible.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;th&gt;DYNAMIC GRAPHS&lt;/th&gt;
&lt;td&gt;A network link went down, or you just added or deleted a friend in a social network. We can still maintain essential information about the connectivity as it changes.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;th&gt;STRINGS&lt;/th&gt;
&lt;td&gt;Searching for phrases in giant text (think Google or DNA).&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;th&gt;SUCCINCT&lt;/th&gt;
&lt;td&gt;Most “linear size” data structures you know are much larger than they need to be, often by an order of magnitude. Some data structures require almost no space beyond the raw data but are still fast (think heaps, but much cooler).&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Inverted Lectures&lt;/h2&gt;
&lt;p&gt;This year, we're experimenting with inverted lectures: most material is covered in &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;video lectures&lt;/a&gt; recorded in 2012 (already watched by over 100,000 people), which you can conveniently play at faster speed than real time. In-class time will be divided between &lt;strong&gt;answers to questions&lt;/strong&gt;, &lt;strong&gt;new material&lt;/strong&gt; presented by the professor and/or guest lecturers, and &lt;strong&gt;in-class problem solving&lt;/strong&gt;, with a focus on problem solving. Particularly unusual is that the problems we'll solve in groups will include &lt;strong&gt;problem-set style&lt;/strong&gt; problems with known solutions, &lt;strong&gt;coding&lt;/strong&gt; problems, and &lt;strong&gt;open research problems&lt;/strong&gt; that no one knows the answer to, with the goal of publishing papers about whatever we discover. (Past offerings of 6.851 have led to over a dozen published papers.) You can work on whatever type of problem most interests you. To facilitate collaboration, we'll be using a new &lt;a href=&quot;https://github.com/edemaine/coauthor/&quot;&gt;open-source software platform&lt;/a&gt; called &lt;strong&gt;&lt;a href=&quot;https://coauthor.csail.mit.edu/6.851-2017&quot;&gt;Coauthor&lt;/a&gt;&lt;/strong&gt;, along with &lt;a href=&quot;https://github.com/6851-2017&quot;&gt;Github&lt;/a&gt; for (optional) coding.&lt;/p&gt;
&lt;h2&gt;Specifics&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Lecture time:&lt;/strong&gt; Wednesdays 7:00–9:30pm&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;First lecture:&lt;/strong&gt; &lt;em&gt;Wednesday, September 6, 2017&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lecture room:&lt;/strong&gt; &lt;a href=&quot;http://whereis.mit.edu/?go=32&quot;&gt;32&lt;/a&gt;-082 — except Sept. 27 in 32-155&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Units:&lt;/strong&gt; 3-0-9, G-level &amp;amp; TCS AAGS credit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contact:&lt;/strong&gt; Email &lt;code&gt;6851-staff#at#csail.mit.edu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; &lt;a href=&quot;http://courses.csail.mit.edu/6.046/&quot;&gt;6.046 (Design and Analysis of Algorithms)&lt;/a&gt;, or an equivalently thorough undergraduate algorithms class from another school (e.g., covering much of &lt;a href=&quot;http://mitpress.mit.edu/algorithms/&quot;&gt;CLRS&lt;/a&gt;). &lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;p&gt;There's no perfect textbook for this class, but there are some relevant books:&lt;/p&gt;
&lt;h2&gt;Participating&lt;/h2&gt;
&lt;p&gt;We welcome both undergraduate and graduate students from all universities, although officially this is a graduate class.&lt;/p&gt;
&lt;p&gt;If you are interested in attending the class, for credit or as a listener, please do the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Join the &lt;a href=&quot;http://lists.csail.mit.edu/mailman/listinfo/6851-students&quot;&gt;6851-students mailing list&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sign up for an account on &lt;a href=&quot;https://coauthor.csail.mit.edu/6.851-2017&quot;&gt;Coauthor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fill out &lt;a href=&quot;https://goo.gl/forms/KdyiC48NzmrXubc82&quot;&gt;this signup form&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Grading&lt;/h2&gt;
&lt;p&gt;There are four requirements:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Watching &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;lecture videos&lt;/a&gt;. Be sure to fill out the linked feedback forms.&lt;/li&gt;
&lt;li&gt;Attending in-person classes (except when you have a valid excuse, which you need to tell the course staff). In particular, you must participate weekly by posting or being @mentioned in a post on Coauthor.&lt;/li&gt;
&lt;li&gt;Lightweight (weekly, one-page) &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/psets/&quot;&gt;problem sets&lt;/a&gt;. Problem sets will be posted weekly, and follow a “one-page in, one-page out” rule.&lt;/li&gt;
&lt;li&gt;Revise &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;existing scribe notes&lt;/a&gt; for one lecture (or maybe two), according to your own inspiration for improvement and feedback from fellow students. The entire calendar for the course has been posted, so you can select a lecture that interests you. We will circulate a sign-up sheet during the second week. Scribe notes are generally due noon on Tuesday after the corresponding class (but extensions are possible).&lt;/li&gt;
&lt;li&gt;Research-oriented &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/project/&quot;&gt;final project&lt;/a&gt; (paper and presentation). We allow theoretical, experimental, survey, and Wikipedia final projects.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Past and Future&lt;/h2&gt;
&lt;p&gt;The class is offered once every two years or so. It was given in &lt;a href=&quot;http://courses.csail.mit.edu/6.897/spring03/&quot;&gt;Spring 2003&lt;/a&gt; and &lt;a href=&quot;http://courses.csail.mit.edu/6.897/spring05/&quot;&gt;Spring 2005&lt;/a&gt; as 6.897, and in &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring07/&quot;&gt;Spring 2007&lt;/a&gt;, &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring10/&quot;&gt;Spring 2010&lt;/a&gt;, &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring12/&quot;&gt;Spring 2012&lt;/a&gt;, &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring14/&quot;&gt;Spring 2014&lt;/a&gt;, as 6.851.&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 29 May 2019 20:17:02 +0000</pubDate>
<dc:creator>rjammala</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://courses.csail.mit.edu/6.851/fall17/</dc:identifier>
</item>
<item>
<title>Google to restrict modern ad blocking Chrome extensions to enterprise users</title>
<link>https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</link>
<guid isPermaLink="true" >https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</guid>
<description>&lt;p&gt;Back in January, Google &lt;a href=&quot;https://9to5google.com/2019/01/22/google-chrome-break-ad-blockers/&quot;&gt;announced a proposed change&lt;/a&gt; to Chrome’s extensions system, called Manifest V3, that would stop current ad blockers from working efficiently. In a response to the overwhelming negative feedback, Google is standing firm on Chrome’s ad blocking changes, sharing that current ad blocking capabilities will be restricted to enterprise users.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-292442&quot;/&gt; &lt;ins class=&quot;adsbygoogle author_ad&quot; data-ad-client=&quot;ca-pub-5506057612223327&quot; data-ad-slot=&quot;7752856384&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://9to5google.com/guides/manifest-v3/&quot;&gt;Manifest V3&lt;/a&gt; comprises a major change to Chrome’s extensions system, including a revamp to the permissions system and a fundamental change to the way ad blockers operate. In particular, modern ad blockers, like uBlock Origin and &lt;a href=&quot;https://9to5google.com/2019/01/23/ghostery-anti-trust-chrome-ad-blocking/&quot;&gt;Ghostery&lt;/a&gt;, use Chrome’s webRequest API to block ads before they’re even downloaded.&lt;/p&gt;
&lt;p&gt;With the Manifest V3 proposal, Google deprecates the webRequest API’s ability to block a particular request before it’s loaded. As you would expect, power users and extension developers alike criticized Google’s proposal for limiting the user’s ability to browse the web as they see fit.&lt;/p&gt;
&lt;p&gt;Now, months later, Google &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/m/#!msg/chromium-extensions/veJy9uAwS00/9iKaX5giAQAJ&quot;&gt;has responded&lt;/a&gt; to some of the various issues raised by the community, sharing more details on the changes to permissions and more. The most notable aspect of their response, however, is a single sentence buried in the text, clarifying their changes to ad blocking and privacy blocking extensions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chrome is deprecating the blocking capabilities of the webRequest API in Manifest V3, not the entire webRequest API (though blocking will still be available to enterprise deployments).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google is essentially saying that Chrome will still have the capability to block unwanted content, but this will be restricted to only paid, enterprise users of Chrome. This is likely to allow enterprise customers to develop in-house Chrome extensions, not for ad blocking usage.&lt;/p&gt;
&lt;p&gt;For the rest of us, Google hasn’t budged on their changes to content blockers, meaning that ad blockers will need to switch to a less effective, rules-based system. This system is how blockers like AdBlock Plus currently work.&lt;/p&gt;
&lt;p&gt;One of the original concerns of switching to this system was the fact that Chrome currently &lt;a href=&quot;https://developers.chrome.com/extensions/declarativeNetRequest#properties&quot;&gt;imposes a limit&lt;/a&gt; of 30,000 rules, while popular ad blocking rules lists like &lt;a href=&quot;https://easylist.to/&quot;&gt;EasyList&lt;/a&gt; use upwards of 75,000 rules. In the response, Google claims that they’re looking to increase this number, depending on performance tests, but couldn’t commit to anything specific.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are planning to raise these values but we won’t have updated numbers until we can run performance tests to find a good upper bound that will work across all supported devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The lead developer of uBlock Origin, Raymond Hill, has commented on the situation, both to &lt;a href=&quot;https://www.theregister.co.uk/2019/05/29/google_webrequest_api/&quot;&gt;&lt;em&gt;The Register&lt;/em&gt;&lt;/a&gt; and on &lt;a href=&quot;https://github.com/uBlockOrigin/uBlock-issues/issues/338#issuecomment-496009417&quot;&gt;uBlock Origin’s GitHub&lt;/a&gt;, pointing out that allowing ad blockers goes completely against Google’s business model.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google’s primary business is incompatible with unimpeded content blocking. Now that Google Chrome product has achieve high market share, the content blocking concerns as stated in its 10K filing are being tackled.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google themselves have even admitted as such in a &lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/1652044/000165204419000004/goog10-kq42018.htm#sB8A92C82A7085B27A37F412D2216BC6F&quot;&gt;recent SEC Form 10-K filing&lt;/a&gt; by Alphabet, uncovered by Hill, in which ad blocking extensions are labeled as a “risk factor” to Google’s revenues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New and existing technologies could affect our ability to customize ads and/or could block ads online, which would harm our business.&lt;/p&gt;
&lt;p&gt;Technologies have been developed to make customizable ads more difficult or to block the display of ads altogether and some providers of online services have integrated technologies that could potentially impair the core functionality of third-party digital advertising. Most of our Google revenues are derived from fees paid to us in connection with the display of ads online. As a result, such technologies and tools could adversely affect our operating results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that in mind, the change makes a great deal of sense, when you think of Chrome as a way for Google to better deliver ads to your devices. By allowing in-depth ad blockers to continue to function, they’re allowing for a direct, negative impact on their largest revenue stream. Chrome’s enterprise users get an exception because they’re a separate revenue stream.&lt;/p&gt;
&lt;h4&gt;9to5Google’s Take&lt;/h4&gt;
&lt;p&gt;Firefox is available on all platforms (including Chrome OS via the Android or Linux app) and, &lt;a href=&quot;https://9to5google.com/2019/04/16/hands-on-kiwi-browser-brings-full-chrome-extensions-to-android-gallery/&quot;&gt;unlike Chrome&lt;/a&gt;, supports browser extensions on Android, including uBlock Origin and other privacy extensions. Just remember to unblock sites you wish to support financially.&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/c/9to5google?sub_confirmation=1&quot;&gt;&lt;em&gt;Check out 9to5Google on YouTube for more news:&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;embed-youtube&quot;&gt;&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; width=&quot;1000&quot; height=&quot;563&quot; src=&quot;https://www.youtube.com/embed/TKi2NqyG58A?version=3&amp;amp;rel=0&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 19:38:04 +0000</pubDate>
<dc:creator>estranhosidade</dc:creator>
<og:type>article</og:type>
<og:title>Chrome to limit full ad blocking extensions to enterprise users - 9to5Google</og:title>
<og:description>In a response to negative feedback, Google shared that Chrome's current ad blocking capabilities for extensions will soon be restricted to enterprise users.</og:description>
<og:url>https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</og:url>
<og:image>https://9to5google.com/wp-content/uploads/sites/4/2019/03/chrome_logo_windows_2.jpg?resize=1024,512</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</dc:identifier>
</item>
<item>
<title>The Boring Company will develop an underground “people mover” for Las Vegas</title>
<link>https://www.citylab.com/transportation/2019/05/elon-musk-tunnel-las-vegas-loop-boring-company-electric-cars/590287/</link>
<guid isPermaLink="true" >https://www.citylab.com/transportation/2019/05/elon-musk-tunnel-las-vegas-loop-boring-company-electric-cars/590287/</guid>
<description>&lt;div id=&quot;article-section-1&quot;&gt;&lt;p&gt;Last week, the Boring Company won a $48.6 million bid to design and build a “people mover” beneath the Las Vegas Convention Center. The payout represents the first actual contract for Tesla CEO Elon Musk’s tunneling venture. And Las Vegas, a tourist city that wants to be seen as a technology hub, will get a new mobility attraction with the imprimatur of America’s leading disruptor.  &lt;/p&gt;
&lt;p&gt;“Las Vegas is known for disruption and for reinventing itself,” Tina Quigley, the chief executive officer of the Regional Transportation Commission of Southern Nevada, said when the partnership between the Boring Company and the Las Vegas Convention and Visitors Authority (LVCVA) was announced in March. “So it’s very appropriate that this new technology is introduced and being tested here.”&lt;/p&gt;
&lt;p&gt;But the Boring Company won’t exactly be delivering “new” technology when it opens the “LVCC Loop.” To interconnect the sprawling convention center campus—which attracts 1.4 million visitors a year to confabs like the Consumer Electronics Showcase—it will dig a pair of concrete tunnels, 12 feet in diameter and less than a mile long. The asphalt-paved tubes will be just wide enough for a single vehicle to drive down. (There will be three stations, as well as a short pedestrian tunnel.)&lt;/p&gt;
&lt;img alt=&quot;&quot; data-srcset=&quot;https://cdn.theatlantic.com/assets/media/img/posts/2019/05/Screen_Shot_2019_05_28_at_12.01.57_PM/fda94fba7.png&quot; class=&quot;lazyload&quot;/&gt;A map of the LVCC Loop shows a less-than-one-mile route beneath the Convention Center. (Courtesy of the LVCVA)
&lt;p&gt;The &lt;a href=&quot;https://assets.simpleviewcms.com/simpleview/image/upload/v1/clients/lasvegas/Posted_Board_Book_May_22_2019_PHOB_4c888ce2-19e4-40ae-974e-beae692c2358.pdf&quot;&gt;contract posted on the LVCVA website&lt;/a&gt; projects an operating capacity of 4,400 passengers per hour using “autonomous electric vehicles at high speeds,” which might include a Tesla Model X or Model 3, or another Tesla chassis converted into a 16-passenger shuttle, Steve Hill, the CEO of the LVCVA, said in March.&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;article-section-2&quot;&gt;&lt;p&gt;This is not the futuristic system of electric car-sleds that Musk once proposed for Los Angeles and &lt;a href=&quot;https://www.citylab.com/transportation/2018/06/for-1-billion-elon-musks-tunnel-to-ohare-would-be-a-miracle/562841/&quot;&gt;Chicago&lt;/a&gt;, let alone a frictionless &lt;a href=&quot;https://www.citylab.com/transportation/2017/07/5-reasons-to-be-wary-of-elon-musks-hyperloop/534387/&quot;&gt;hyperloop.&lt;/a&gt; Instead, Las Vegas is getting a permutation of two well-known existing technologies: 1) cars, and 2) tunnels. (Asked to explain his scaled-back ambitions on Twitter, Musk responded: “This is simple and just works.”)&lt;/p&gt;
&lt;p&gt;Remove the mercurial inventor-tycoon from the equation, and you’ve got a fairly rudimentary project. “Congratulations to The Boring Company for proving dedicated rights of way are important for speedy transportation, something transportation planners figured out roughly two centuries ago,” &lt;a href=&quot;https://jalopnik.com/elon-musk-says-hyperloop-tunnel-is-now-just-a-normal-1835024474&quot;&gt;wrote Jalopnik’s Aaron Gordon&lt;/a&gt; (also a CityLab contributor). “I’m afraid for how many tunnels they’ll have to dig before they likewise acknowledge the validity of &lt;a href=&quot;https://www.citylab.com/transportation/2018/09/citylab-university-induced-demand/569455/&quot; onclick=&quot;window.ga('send', 'event', 'Embedded Url', 'External link', 'https://www.citylab.com/transportation/2018/09/citylab-university-induced-demand/569455/', {metric25:1})&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;induced demand&lt;/a&gt;.”&lt;/p&gt;
&lt;p&gt;Musk claims that his Boring Company does innovate in one very important way: It is capable of digging tunnels cheaper than just about anyone else. In December, Boring introduced its first 1.14-mile prototype tunnel in Southern California, which it said cost $10 million to build. That &lt;a href=&quot;https://www.citylab.com/transportation/2018/12/elon-musk-tunnel-ride-tesla-boring-company-los-angeles/578536/&quot;&gt;is a fraction of the cost of most tunneling projects in the U.S.&lt;/a&gt;, but likely because of its size. (The proposed tunnels will have far lower clearance than most of the state’s &lt;a href=&quot;https://member.coach-net.com/members/pdfs/lowclearancebridgeinfo.pdf&quot;&gt;highway underpasses&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;At its current scope, Musk’s loop—which would open in early 2021, in conjunction with a new wing of the LVCC—is expected to shorten what is current a 15-minute walk across the campus to a whizzy one-minute ride. At the earlier announcement in March, project leaders said that the tunnels might eventually connect to McCarran International Airport and several casinos, cutting through the famously jammed Strip. (Sitting in an hour of surface traffic from a hotel one or two miles away is rite of passage for many a CES conventioneer.) But with such low per-vehicle occupancy—in contrast to, say, a city bus with a dedicated lane—it’s hard to see such a system doing much to ease congestion.&lt;/p&gt;
&lt;p&gt;That’s if it gets off the ground. Among the LVCVA board members who voted on whether to award the people-mover bid to the Boring Company, Las Vegas Mayor Carolyn Goodman was the &lt;a href=&quot;https://twitter.com/RickVelotta/status/1131310596194914304&quot; target=&quot;_blank&quot;&gt;only one&lt;/a&gt; to say nay, citing concerns around safety and the company’s lack of experience. “The Boring Co. is 3 years old and has yet to deliver a final package on anything,” she wrote in a letter, according to the &lt;a href=&quot;https://vegasinc.lasvegassun.com/business/tourism/2019/may/14/tourism-board-vote-tunnel-transport-goodman-object/&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Las Vegas Sun&lt;/em&gt;&lt;/a&gt;. For example, the company’s scheme to build a high-speed airport connection in Chicago &lt;a href=&quot;https://www.theverge.com/2019/3/9/18256604/elon-musk-chicago-mayor-election-tunnel-high-speed-transit&quot;&gt;seems to have fizzled out&lt;/a&gt; with a new mayor in office. Progress on other proposed projects, including a Dodger Stadium connection in L.A. and a D.C.-to-Baltimore link, is slow going. The &lt;a href=&quot;https://assets.simpleviewcms.com/simpleview/image/upload/v1/clients/lasvegas/Posted_Board_Book_May_22_2019_PHOB_4c888ce2-19e4-40ae-974e-beae692c2358.pdf&quot;&gt;contract in Vegas stipulates&lt;/a&gt; that if the company doesn’t deliver its promises, LVCVA will get its money back, and then some.&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;article-section-3&quot;&gt;&lt;p&gt;Digging a $49 million electric-car-tunnel to avoid walking from one end of a convention center to the other might sound zany for other places, but it’s par for the course in Las Vegas, a city that is unusually open to building flashy new stuff and &lt;a href=&quot;https://www.thrillist.com/entertainment/las-vegas/the-10-best-implosions-in-las-vegas-history&quot;&gt;blowing it up later.&lt;/a&gt; In recent years, downtown Las Vegas has allowed limited tests of dozens of novel technologies in public rights-of-way, including self-driving shuttles, “smart” traffic lights and street lamps, and a range of surveillance technologies that detect sound, motion, and faces. As &lt;a href=&quot;https://www.citylab.com/solutions/2019/02/las-vegas-smart-city-technology-surveillance-data-privacy/583474/&quot;&gt;CityLab reported in February,&lt;/a&gt; these pilots are not necessarily preludes to a larger city-wide fix. Rather, they’re at least in part a marketing strategy: Las Vegas wants to burnish its brand as a technology hub, in the hopes that more businesses will set up shop there. Musk’s loop can easily be viewed in the same light.&lt;/p&gt;
&lt;p&gt;So if the Boring Company’s proposal works in Sin City (and it should: It’s just a car in a tunnel), convention-goers could be the first in the world to ride it. And tech-y types might think of Las Vegas when they’re considering where to set up an office. If it fails, the city gets to say that it was fearlessly attempting something new—and at a very little cost. As a tourist amenity and development magnet, there’s nothing wrong with the LVCC Loop. Where trouble might start is if other cities see it as an actual public transportation solution. For all the above reasons, however, the odds on that wager would be pretty low.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 29 May 2019 18:06:41 +0000</pubDate>
<dc:creator>cienega</dc:creator>
<og:description>Even if the Boring Company's “people mover” for the Las Vegas Convention Center is a bust, it helps burnish the city's high-tech brand.</og:description>
<og:image>https://cdn.citylab.com/media/img/citylab/2019/05/Screen_Shot_2019_05_28_at_3.13.00_PM/facebook.png?1559081942</og:image>
<og:title>Why Las Vegas Is Betting on Elon Musk</og:title>
<og:type>article</og:type>
<og:url>https://www.citylab.com/transportation/2019/05/elon-musk-tunnel-las-vegas-loop-boring-company-electric-cars/590287/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.citylab.com/transportation/2019/05/elon-musk-tunnel-las-vegas-loop-boring-company-electric-cars/590287/</dc:identifier>
</item>
<item>
<title>TypeScript 3.5</title>
<link>https://devblogs.microsoft.com/typescript/announcing-typescript-3-5</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/typescript/announcing-typescript-3-5</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/8499bf678149d617cc71a23afb377736?s=58&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 photo avatar-default&quot;/&gt;&lt;p&gt;Daniel&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;May 29th, 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Today we’re happy to announce the availability of TypeScript 3.5!&lt;/p&gt;
&lt;p&gt;If you’re new to TypeScript, it’s a language that builds on JavaScript that adds optional static types. TypeScript code gets type-checked to avoid common mistakes like typos and accidental coercions, and then gets transformed by a program called the TypeScript compiler. The compiler strips out any TypeScript-specific syntax and optionally transforms your code to work with older browsers, leaving you with clean, readable JavaScript that can run in your favorite browser or Node.js. Built on top of all this is also a language service which uses all the type information TypeScript has to provide powerful editor functionality like code completions, find-all-references, quick fixes, and refactorings. All of this is cross-platform, cross-editor, and open source.&lt;/p&gt;
&lt;p&gt;TypeScript also provides that same tooling for JavaScript users, and can even type-check JavaScript code typed with JSDoc using the &lt;code&gt;checkJs&lt;/code&gt; flag. If you’ve used editors like Visual Studio or Visual Studio Code with &lt;code&gt;.js&lt;/code&gt; files, TypeScript powers that experience, so you might already be using TypeScript!&lt;/p&gt;
&lt;p&gt;To get started with TypeScript, you can get it &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild&quot; rel=&quot;nofollow&quot;&gt;through NuGet&lt;/a&gt;, or through npm with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
npm install -g typescript
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also get editor support by&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support&quot;&gt;Support for other editors&lt;/a&gt; will likely be rolling in in the near future.&lt;/p&gt;
&lt;p&gt;Let’s explore what’s new in 3.5!&lt;/p&gt;
&lt;h2 id=&quot;speed-improvements&quot;&gt;Speed improvements&lt;/h2&gt;
&lt;p&gt;TypeScript 3.5 introduces several optimizations around type-checking and incremental builds.&lt;/p&gt;
&lt;h3&gt;Type-checking speed-ups&lt;/h3&gt;
&lt;p&gt;Much of the expressivity of our type system comes with a cost – any more work that we expect the compiler to do translates to longer compile times. Unfortunately, as part of a bug fix in TypeScript 3.4 we accidentally introduced a regression that could lead to an explosion in how much work the type-checker did, and in turn, type-checking time. The most-impacted set of users were those using the styled-components library. This regression was serious not just because it led to much higher build times for TypeScript code, but because editor operations for both TypeScript and JavaScript users became unbearably slow.&lt;/p&gt;
&lt;p&gt;Over this past release, we focused heavily on optimizing certain code paths and stripping down certain functionality to the point where TypeScript 3.5 is actually &lt;em&gt;faster&lt;/em&gt; than TypeScript 3.3 for many incremental checks. Not only have compile times fallen compared to 3.4, but code completion and any other editor operations should be much snappier too.&lt;/p&gt;
&lt;p&gt;If you haven’t upgraded to TypeScript 3.4 due to these regressions, we would value your feedback to see whether TypeScript 3.5 addresses your performance concerns!&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;--incremental&lt;/code&gt; improvements&lt;/h3&gt;
&lt;p&gt;TypeScript 3.4 introduced a new &lt;code&gt;--incremental&lt;/code&gt; compiler option. This option saves a bunch of information to a &lt;code&gt;.tsbuildinfo&lt;/code&gt; file that can be used to speed up subsequent calls to &lt;code&gt;tsc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TypeScript 3.5 includes several optimizations to caching how the state of the world was calculated – compiler settings, why files were looked up, where files were found, etc. In scenarios involving hundreds of projects using TypeScript’s project references in &lt;code&gt;--build&lt;/code&gt; mode, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/31101&quot;&gt;we’ve found that the amount of time rebuilding can be reduced by as much as 68% compared to TypeScript 3.4&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;For more details, you can see the pull requests to&lt;/p&gt;
&lt;h2 id=&quot;the-omit-helper-type&quot;&gt;The &lt;code&gt;Omit&lt;/code&gt; helper type&lt;/h2&gt;
&lt;p&gt;Much of the time, we want to create an object that omits certain properties. It turns out that we can express types like that using TypeScript’s built-in &lt;code&gt;Pick&lt;/code&gt; and &lt;code&gt;Exclude&lt;/code&gt; helpers. For example, if we wanted to define a &lt;code&gt;Person&lt;/code&gt; that has no &lt;code&gt;location&lt;/code&gt; property, we could write the following:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
    age&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
    location&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
};

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;RemainingKeys&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Exclude&lt;/span&gt;&amp;lt;&lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;location&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;QuantumPerson&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Pick&lt;/span&gt;&amp;lt;&lt;span&gt;Person&lt;/span&gt;, &lt;span&gt;RemainingKeys&lt;/span&gt;&amp;gt;;

&lt;span&gt;// equivalent to&lt;/span&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;QuantumPerson&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
    age&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we “subtracted” &lt;code&gt;&quot;location&quot;&lt;/code&gt; from the set of properties of &lt;code&gt;Person&lt;/code&gt; using the &lt;code&gt;Exclude&lt;/code&gt; helper type. We then picked them right off of &lt;code&gt;Person&lt;/code&gt; using the &lt;code&gt;Pick&lt;/code&gt; helper type.&lt;/p&gt;
&lt;p&gt;It turns out this type of operation comes up frequently enough that users will write a helper type to do exactly this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Omit&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Pick&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;Exclude&lt;/span&gt;&amp;lt;&lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;, &lt;span&gt;K&lt;/span&gt;&amp;gt;&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of making everyone define their own version of &lt;code&gt;Omit&lt;/code&gt;, TypeScript 3.5 will include its own in &lt;code&gt;lib.d.ts&lt;/code&gt; which can be used anywhere. The compiler itself will use this &lt;code&gt;Omit&lt;/code&gt; type to express types created through object rest destructuring declarations on generics.&lt;/p&gt;
&lt;p&gt;For more details, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/30552&quot;&gt;see the pull request on GitHub to add &lt;code&gt;Omit&lt;/code&gt;&lt;/a&gt;, as well as &lt;a href=&quot;https://github.com/microsoft/TypeScript/pull/31134&quot;&gt;the change to use &lt;code&gt;Omit&lt;/code&gt; for object rest&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;improved-excess-property-checks-in-union-types&quot;&gt;Improved excess property checks in union types&lt;/h2&gt;
&lt;p&gt;TypeScript has a feature called &lt;em&gt;excess property checking&lt;/em&gt; in object literals. This feature is meant to detect typos for when a type isn’t expecting a specific property.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Style&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    alignment&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;,
    color&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
};

&lt;span&gt;const&lt;/span&gt; s&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Style&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    alignment: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;center&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    colour: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;grey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;//  ^^^^^^ error! &lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.4 and earlier, certain excess properties were allowed in situations where they really shouldn’t have been. For instance, TypeScript 3.4 permitted the incorrect &lt;code&gt;name&lt;/code&gt; property in the object literal even though its types don’t match between &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;Label&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    x&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
    y&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
};

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Label&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
};

&lt;span&gt;const&lt;/span&gt; thing&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;Label&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    x: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    y: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    name: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;// uh-oh!&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Previously, a non-disciminated union wouldn’t have &lt;em&gt;any&lt;/em&gt; excess property checking done on its members, and as a result, the incorrectly typed &lt;code&gt;name&lt;/code&gt; property slipped by.&lt;/p&gt;
&lt;p&gt;In TypeScript 3.5, the type-checker at least verifies that all the provided properties belong to &lt;em&gt;some&lt;/em&gt; union member and have the appropriate type, meaning that the sample above correctly issues an error.&lt;/p&gt;
&lt;p&gt;Note that partial overlap is still permitted as long as the property types are valid.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;const&lt;/span&gt; pl&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;Label&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    x: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    y: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    name: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;origin&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;// okay&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the---allowumdglobalaccess-flag&quot;&gt;The &lt;code&gt;--allowUmdGlobalAccess&lt;/code&gt; flag&lt;/h2&gt;
&lt;p&gt;In TypeScript 3.5, you can now reference UMD global declarations like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export as namespace foo;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;from anywhere – even modules – using the new &lt;code&gt;--allowUmdGlobalAccess&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;This feature might require some background if you’re not familiar with UMD globals in TypeScript. A while back, JavaScript libraries were often published as global variables with properties tacked on – you sort of hoped that nobody picked a library name that was identical to yours. Over time, authors of modern JavaScript libraries started publishing using module systems to prevent some of these issues. While module systems alleviated certain classes of issues, they did leave users who were used to using global variables out in the rain.&lt;/p&gt;
&lt;p&gt;As a work-around, many libraries are authored in a way that define a global object if a module loader isn’t available at runtime. This is typically leveraged when users target a module format called “UMD”, and as such, TypeScript has a way to describe this pattern which we’ve called “UMD global namespaces”:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;export&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;preact&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever you’re in a script file (a non-module file), you’ll be able to access one of these UMD globals.&lt;/p&gt;
&lt;p&gt;So what’s the problem? Well, not all libraries &lt;em&gt;conditionally&lt;/em&gt; set their global declarations. Some just &lt;em&gt;always&lt;/em&gt; create a global in addition to registering with the module system. We decided to err on the more conservative side, and many of us felt that if a library &lt;em&gt;could&lt;/em&gt; be imported, that was probably the the intent of the author.&lt;/p&gt;
&lt;p&gt;In reality, we received a lot of feedback that users were writing modules where some libraries were consumed as globals, and others were consumed through imports. So in the interest of making those users’ lives easier, we’ve introduced the &lt;code&gt;allowUmdGlobalAccess&lt;/code&gt; flag in TypeScript 3.5.&lt;/p&gt;
&lt;p&gt;For more details, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/30776/files&quot;&gt;see the pull request on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;smarter-union-type-checking&quot;&gt;Smarter union type checking&lt;/h2&gt;
&lt;p&gt;When checking against union types, TypeScript typically compares each constituent type in isolation. For example, take the following code:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;S&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { done&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;, value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; }
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; { done&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; }
    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; { done&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;, value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; };

&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; source&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;S&lt;/span&gt;;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; target&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;;

&lt;span class=&quot;pl-smi&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;source&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assigning &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt; involves checking whether the type of &lt;code&gt;source&lt;/code&gt; is assignable to &lt;code&gt;target&lt;/code&gt;. That in turn means that TypeScript needs to check whether &lt;code&gt;S&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{ done: boolean, value: number }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is assignable to &lt;code&gt;T&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{ done: false, value: number } | { done: true, value: number }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Prior to TypeScript 3.5, the check in this specific example would fail, because &lt;code&gt;S&lt;/code&gt; isn’t assignable to &lt;code&gt;{ done: false, value: number }&lt;/code&gt; nor &lt;code&gt;{ done: true, value: number }&lt;/code&gt;. Why? Because the &lt;code&gt;done&lt;/code&gt; property in &lt;code&gt;S&lt;/code&gt; isn’t specific enough – it’s &lt;code&gt;boolean&lt;/code&gt; whereas each constituent of &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;done&lt;/code&gt; property that’s specifically &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. That’s what we meant by each constituent type being checked in isolation: TypeScript doesn’t just union each property together and see if &lt;code&gt;S&lt;/code&gt; is assignable to that. If it did, some bad code could get through like the following:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
}

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Bar&lt;/span&gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
}

&lt;span&gt;function&lt;/span&gt; doSomething(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;Bar&lt;/span&gt;) {
    &lt;span&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toLowerCase&lt;/span&gt;();
    }
}

&lt;span&gt;// uh-oh - luckily TypeScript errors here!&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;doSomething&lt;/span&gt;({
    kind: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    value: &lt;span class=&quot;pl-c1&quot;&gt;123&lt;/span&gt;,
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So clearly this behavior is good for some set of cases. Was TypeScript being helpful in the original example though? Not really. If you figure out the precise type of any possible value of &lt;code&gt;S&lt;/code&gt;, you can actually see that it matches the types in &lt;code&gt;T&lt;/code&gt; exactly.&lt;/p&gt;
&lt;p&gt;That’s why in TypeScript 3.5, when assigning to types with discriminant properties like in &lt;code&gt;T&lt;/code&gt;, the language actually &lt;em&gt;will&lt;/em&gt; go further and decompose types like &lt;code&gt;S&lt;/code&gt; into a union of every possible inhabitant type. In this case, since &lt;code&gt;boolean&lt;/code&gt; is a union of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt; will be viewed as a union of &lt;code&gt;{ done: false, value: number }&lt;/code&gt; and &lt;code&gt;{ done: true, value: number }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more details, you can &lt;a href=&quot;https://github.com/microsoft/TypeScript/pull/30779&quot;&gt;see the original pull request on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;higher-order-type-inference-from-generic-constructors&quot;&gt;Higher order type inference from generic constructors&lt;/h2&gt;
&lt;p&gt;In TypeScript 3.4, we improved inference for when generic functions that return functions like so:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; compose&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt;&amp;gt;(
    &lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;, &lt;span class=&quot;pl-en&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt; {
    
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;))
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;took other generic functions as arguments, like so:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; arrayify&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;[] {
    &lt;span&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;];
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Box&lt;/span&gt;&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt; }
&lt;span&gt;function&lt;/span&gt; boxify&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Box&lt;/span&gt;&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt; {
    &lt;span&gt;return&lt;/span&gt; { value: &lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt; };
}

&lt;span&gt;let&lt;/span&gt; newFn &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;arrayify&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;boxify&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of a relatively useless type like &lt;code&gt;(x: {}) =&amp;gt; Box&amp;lt;{}[]&amp;gt;&lt;/code&gt;, which older versions of the language would infer, TypeScript 3.4’s inference allows &lt;code&gt;newFn&lt;/code&gt; to be generic. Its new type is &lt;code&gt;&amp;lt;T&amp;gt;(x: T) =&amp;gt; Box&amp;lt;T[]&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TypeScript 3.5 generalizes this behavior to work on constructor functions as well.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Box&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;box&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;;
    &lt;span&gt;constructor&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) {
        &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
    }
}

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Bag&lt;/span&gt;&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bag&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;;
    &lt;span&gt;constructor&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;) {
        &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
    }
}


&lt;span&gt;function&lt;/span&gt; composeCtor&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt;&amp;gt;(
    &lt;span class=&quot;pl-v&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt; {
    
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;G&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;F&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;))
}

&lt;span&gt;let&lt;/span&gt; f &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;composeCtor&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;Box&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;Bag&lt;/span&gt;); &lt;span&gt;// has type '&amp;lt;T&amp;gt;(x: T) =&amp;gt; Bag&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;'&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1024&lt;/span&gt;); &lt;span&gt;// has type 'Bag&amp;lt;Box&amp;lt;number&amp;gt;&amp;gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to compositional patterns like the above, this new inference on generic constructors means that functions that operate on class components in certain UI libraries like React can more correctly operate on generic class components.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;ComponentClass&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt; {
    props&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;;
    &lt;span&gt;constructor&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;);
}

&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; myHoc&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;ComponentClass&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;ComponentClass&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;NestedProps&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { foo&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, stuff&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; };

&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;GenericComponent&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;NestedProps&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;&amp;gt; {
}

&lt;span&gt;// type is 'new &amp;lt;T&amp;gt;(props: NestedProps&amp;lt;T&amp;gt;) =&amp;gt; Component&amp;lt;NestedProps&amp;lt;T&amp;gt;&amp;gt;'&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; GenericComponent2 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;myHoc&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;GenericComponent&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To learn more, &lt;a href=&quot;https://github.com/microsoft/TypeScript/pull/31116&quot;&gt;check out the original pull request on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;smart-select&quot;&gt;Smart Select&lt;/h2&gt;
&lt;p&gt;TypeScript 3.5 provides an API for editors to expand text selections farther and farther outward in a way that is syntactically aware – in other words, the editor knows which constructs it should expand out to. This feature is called &lt;em&gt;Smart Select&lt;/em&gt;, and the result is that editors don’t have to resort to heuristics like brace-matching, and you can expect &lt;a href=&quot;https://code.visualstudio.com/docs/editor/codebasics#_shrinkexpand-selection&quot; rel=&quot;nofollow&quot;&gt;selection expansion in editors like Visual Studio Code&lt;/a&gt; to “just work”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/smartSelect-3.5.gif&quot;&gt;&lt;img alt=&quot;Smart selection in action&quot; src=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/smartSelect-3.5.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As with all of our editing features, this feature is cross-platform and available to any editor which can appropriately query &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29&quot;&gt;TypeScript’s language server&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;extract-to-type-alias&quot;&gt;Extract to type alias&lt;/h2&gt;
&lt;p&gt;Thanks to Wenlu Wang (GitHub user &lt;a href=&quot;https://github.com/Kingwl&quot;&gt;@Kingwl&lt;/a&gt;), TypeScript supports a useful new refactoring to extract types to local type aliases.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/extractType-3.5.gif&quot;&gt;&lt;img alt=&quot;Example of extracting to a type alias&quot; src=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/extractType-3.5.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those who prefer interfaces over type aliases, &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/31640&quot;&gt;an issue exists for extracting object types to interfaces as well&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;
&lt;h3&gt;Generic type parameters are implicitly constrained to &lt;code&gt;unknown&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In TypeScript 3.5, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/30637&quot;&gt;generic type parameters without an explicit constraint are now implicitly constrained to &lt;code&gt;unknown&lt;/code&gt;&lt;/a&gt;, whereas previously the implicit constraint of type parameters was the empty object type &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In practice, &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt; are pretty similar, but there are a few key differences:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; can be indexed with a string (&lt;code&gt;k[&quot;foo&quot;]&lt;/code&gt;), though this is an implicit &lt;code&gt;any&lt;/code&gt; error under &lt;code&gt;--noImplicitAny&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; is assumed to not be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, whereas &lt;code&gt;unknown&lt;/code&gt; is possibly one of those values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; is assignable to &lt;code&gt;object&lt;/code&gt;, but &lt;code&gt;unknown&lt;/code&gt; is not.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The decision to switch to &lt;code&gt;unknown&lt;/code&gt; is rooted that it is more correct for unconstrained generics – there’s no telling how a generic type will be instantiated.&lt;/p&gt;
&lt;p&gt;On the caller side, this typically means that assignment to &lt;code&gt;object&lt;/code&gt; will fail, and methods on &lt;code&gt;Object&lt;/code&gt; like &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;toLocaleString&lt;/code&gt;, &lt;code&gt;valueOf&lt;/code&gt;, &lt;code&gt;hasOwnProperty&lt;/code&gt;, &lt;code&gt;isPrototypeOf&lt;/code&gt;, and &lt;code&gt;propertyIsEnumerable&lt;/code&gt; will no longer be available.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; foo&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;] {
    &lt;span&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toString&lt;/span&gt;()]
    &lt;span&gt;//           ~~~~~~~~ error! Property 'toString' does not exist on type 'T'.&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a workaround, you can add an explicit constraint of &lt;code&gt;{}&lt;/code&gt; to a type parameter to get the old behavior.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;//             vvvvvvvvvv&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; foo&amp;lt;&lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; {}&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;] {
    &lt;span&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toString&lt;/span&gt;()]
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the caller side, failed inferences for generic type arguments will result in &lt;code&gt;unknown&lt;/code&gt; instead of &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; parse&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;);
}

&lt;span&gt;// k has type 'unknown' - previously, it was '{}'.&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;parse&lt;/span&gt;(&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a workaround, you can provide an explicit type argument:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;// 'k' now has type '{}'&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;parse&lt;/span&gt;&amp;lt;{}&amp;gt;(&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code&gt;{ [k: string]: unknown }&lt;/code&gt; is no longer a wildcard assignment target&lt;/h3&gt;
&lt;p&gt;The index signature &lt;code&gt;{ [s: string]: any }&lt;/code&gt; in TypeScript behaves specially: it’s a valid assignment target for any object type. This is a special rule, since types with index signatures don’t normally produce this behavior.&lt;/p&gt;
&lt;p&gt;Since its introduction, the type &lt;code&gt;unknown&lt;/code&gt; in an index signature behaved the same way:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;let&lt;/span&gt; dict&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { [&lt;span class=&quot;pl-v&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;unknown&lt;/span&gt; };
&lt;span&gt;// Was okay&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In general this rule makes sense; the implied constraint of “all its properties are some subtype of &lt;code&gt;unknown&lt;/code&gt;” is trivially true of any object type. However, in TypeScript 3.5, this special rule is removed for &lt;code&gt;{ [s: string]: unknown }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This was a necessary change because of the change from &lt;code&gt;{}&lt;/code&gt; to &lt;code&gt;unknown&lt;/code&gt; when generic inference has no candidates. Consider this code:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; someFunc()&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt;;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; fn&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { [&lt;span class=&quot;pl-v&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; })&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;someFunc&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.4, the following sequence occurred:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No candidates were found for &lt;code&gt;T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; is selected to be &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;someFunc&lt;/code&gt; isn’t assignable to &lt;code&gt;arg&lt;/code&gt; because there are no special rules allowing arbitrary assignment to &lt;code&gt;{ [k: string]: {} }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The call is correctly rejected&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Due to changes around unconstrained type parameters falling back to &lt;code&gt;unknown&lt;/code&gt; (see above), &lt;code&gt;arg&lt;/code&gt; would have had the type &lt;code&gt;{ [k: string]: unknown }&lt;/code&gt;, which anything is assignable to, so the call would have incorrectly been allowed. That’s why TypeScript 3.5 removes the specialized assignability rule to permit assignment to &lt;code&gt;{ [k: string]: unknown }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that fresh object literals are still exempt from this check.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;const&lt;/span&gt; obj &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { m: &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt; }; 
&lt;span&gt;// okay&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; dict&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { [&lt;span class=&quot;pl-v&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;unknown&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;obj&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on the intended behavior of &lt;code&gt;{ [s: string]: unknown }&lt;/code&gt;, several alternatives are available:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;{ [s: string]: any }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ [s: string]: {} }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unknown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We recommend sketching out your desired use cases and seeing which one is the best option for your particular use case.&lt;/p&gt;
&lt;h3&gt;Improved excess property checks in union types&lt;/h3&gt;
&lt;p&gt;As mentioned above, TypeScript 3.5 is stricter about excess property checks on constituents of union types.&lt;/p&gt;
&lt;p&gt;We have not witnessed examples where this checking hasn’t caught legitimate issues, but in a pinch, any of the workarounds to disable excess property checking will apply:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add a type assertion onto the object (e.g. &lt;code&gt;{ myProp: SomeType } as ExpectedType&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add an index signature to the expected type to signal that unspecified properties are expected (e.g. &lt;code&gt;interface ExpectedType { myProp: SomeType; [prop: string]: unknown }&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Fixes to unsound writes to indexed access types&lt;/h3&gt;
&lt;p&gt;TypeScript allows you to represent the operation of accessing a property of an object via the name of that property:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    s&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
    n&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
};

&lt;span&gt;function&lt;/span&gt; read&amp;lt;&lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt;] {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;key&lt;/span&gt;];
} 

&lt;span&gt;const&lt;/span&gt; a&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { s: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, n: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; };
&lt;span&gt;const&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;read&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;); &lt;span&gt;// x: string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While commonly used for reading values from an object, you can also use this for writes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; write&amp;lt;&lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt;])&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.4, the logic used to validate a &lt;em&gt;write&lt;/em&gt; was much too permissive:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; write&amp;lt;&lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt;])&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt; {
    &lt;span&gt;// ???&lt;/span&gt;
    &lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello, world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
}
&lt;span&gt;// Breaks the object by putting a string where a number should be&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;n&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;oops&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.5, this logic is fixed and the above sample correctly issues an error.&lt;/p&gt;
&lt;p&gt;Most instances of this error represent potential errors in the relevant code. If you are convinced that you are not dealing with an error, you can use a type assertion instead.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;lib.d.ts&lt;/code&gt; includes the &lt;code&gt;Omit&lt;/code&gt; helper type&lt;/h3&gt;
&lt;p&gt;TypeScript 3.5 includes a new &lt;code&gt;Omit&lt;/code&gt; helper type. As a result, any global declarations of &lt;code&gt;Omit&lt;/code&gt; included in your project will result in the following error message:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span class=&quot;pl-smi&quot;&gt;Duplicate&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;identifier&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Omit&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two workarounds may be used here:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Delete the duplicate declaration and use the one provided in &lt;code&gt;lib.d.ts&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Export the existing declaration from a module file or a namespace to avoid a global collision. Existing usages can use an &lt;code&gt;import&lt;/code&gt; or explicit reference to your project’s old &lt;code&gt;Omit&lt;/code&gt; type.&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;&lt;code&gt;Object.keys&lt;/code&gt; rejects primitives in ES5&lt;/h3&gt;
&lt;p&gt;In ECMAScript 5 environments, &lt;code&gt;Object.keys&lt;/code&gt; throws an exception if passed any non-&lt;code&gt;object&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;// Throws if run in an ES5 runtime&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In ECMAScript 2015, &lt;code&gt;Object.keys&lt;/code&gt; returns &lt;code&gt;[]&lt;/code&gt; if its argument is a primitive:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;// [] in ES6 runtime&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a potential source of error that wasn’t previously identified. In TypeScript 3.5, if &lt;code&gt;target&lt;/code&gt; (or equivalently &lt;code&gt;lib&lt;/code&gt;) is &lt;code&gt;ES5&lt;/code&gt;, calls to &lt;code&gt;Object.keys&lt;/code&gt; must pass a valid &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In general, errors here represent possible exceptions in your application and should be treated as such. If you happen to know through other means that a value is an &lt;code&gt;object&lt;/code&gt;, a type assertion is appropriate:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; fn(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;isArgActuallyObject&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;) {
    &lt;span&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;isArgActuallyObject&lt;/span&gt;) {
        &lt;span&gt;const&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this change interacts with the change in generic inference from &lt;code&gt;{}&lt;/code&gt; to &lt;code&gt;unknown&lt;/code&gt;, because &lt;code&gt;{}&lt;/code&gt; is a valid &lt;code&gt;object&lt;/code&gt; whereas &lt;code&gt;unknown&lt;/code&gt; isn’t:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; fn&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;()&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;;

&lt;span&gt;// Was okay in TypeScript 3.4, errors in 3.5 under --target ES5&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;());
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;As with our last release, you can see our &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/31639&quot;&gt;3.6 iteration plan document&lt;/a&gt;, as well as the &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Roadmap&quot;&gt;feature roadmap page&lt;/a&gt; to get an idea of what’s coming in the next version of TypeScript. We’re anticipating 3.6 will bring a better experience for authoring and consuming generators, support for ECMAScript’s private fields proposal, and APIs for build tools to support fast incremental builds and projects references. Also of note is the fact that as of TypeScript 3.6, our release schedule will be switching to a cadence of every 3 months (instead of every 2 months as it has been until this point). We believe this will make it easier for us to validate changes with partner teams and&lt;/p&gt;
&lt;p&gt;We hope that this version of TypeScript makes you faster and happier as you code. Let us know what you think of this release &lt;a href=&quot;https://twitter.com/typescript&quot; rel=&quot;nofollow&quot;&gt;on Twitter&lt;/a&gt;, and if you’ve got any suggestions on what we can do better, feel free to &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/new/choose&quot;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;– Daniel Rosenwasser and the TypeScript team&lt;/p&gt;


&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/8499bf678149d617cc71a23afb377736?s=96&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 photo avatar-default&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Wed, 29 May 2019 17:20:03 +0000</pubDate>
<dc:creator>DanRosenwasser</dc:creator>
<og:type>article</og:type>
<og:title>Announcing TypeScript 3.5 | TypeScript</og:title>
<og:description>Today we’re happy to announce the availability of TypeScript 3.5! If you’re new to TypeScript, it’s a language that builds on JavaScript that adds optional static types. TypeScript code gets type-checked to avoid common mistakes like typos and accidental coercions, and then gets transformed by a program called the TypeScript compiler.</og:description>
<og:url>https://devblogs.microsoft.com/typescript/announcing-typescript-3-5/</og:url>
<og:image>https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2018/08/typescriptfeature.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/typescript/announcing-typescript-3-5/</dc:identifier>
</item>
<item>
<title>0x Launch Kit – Launch your own cryptocurrency exchange or marketplace</title>
<link>https://0x.org/launch-kit</link>
<guid isPermaLink="true" >https://0x.org/launch-kit</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://0x.org/launch-kit&quot;&gt;https://0x.org/launch-kit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20042355&quot;&gt;https://news.ycombinator.com/item?id=20042355&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 375&lt;/p&gt;
&lt;p&gt;# Comments: 159&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 16:41:05 +0000</pubDate>
<dc:creator>tomhschmidt</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://0x.org/launch-kit</dc:identifier>
</item>
</channel>
</rss>