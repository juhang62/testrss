<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>History and Effective Use of Vim</title>
<link>https://begriffs.com/posts/2019-07-19-history-use-vim.html?hn=3</link>
<guid isPermaLink="true" >https://begriffs.com/posts/2019-07-19-history-use-vim.html?hn=3</guid>
<description>&lt;p&gt;This article is based on historical research and on simply reading the Vim user manual cover to cover. Hopefully these notes will help you (re?)discover core functionality of the editor, so you can abandon pre-packaged vimrc files and use plugins more thoughtfully.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;https://begriffs.com/images/vim-books.png&quot; alt=&quot;physical books&quot;/&gt;&lt;p class=&quot;caption&quot;&gt;physical books&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To go beyond the topics in this blog post, I’d recommend getting a paper copy of the manual and a good pocket reference. I couldn’t find any hard copy of the official Vim manual, and ended up printing &lt;a href=&quot;https://begriffs.com/pdf/vim-user-manual.pdf&quot;&gt;this PDF&lt;/a&gt; using &lt;a href=&quot;https://www.printme1.com&quot;&gt;printme1.com&lt;/a&gt;. The PDF is a printer-friendly version of the files &lt;code&gt;$VIMRUNTIME/doc/usr_??.txt&lt;/code&gt; distributed with the editor. For a convenient list of commands, I’d recommend the &lt;a href=&quot;https://www.goodreads.com/book/show/9787030-vi-and-vim-editors-pocket-reference&quot;&gt;vi and Vim Editors Pocket Reference&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;
&lt;h3 id=&quot;history&quot;&gt;History&lt;/h3&gt;
&lt;h4 id=&quot;birth-of-vi&quot;&gt;Birth of vi&lt;/h4&gt;
&lt;p&gt;Vi commands and features go back more than fifty years, starting with the QED editor. Here is the lineage:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;1966 : QED (“Quick EDitor”) in Berkeley Timesharing System&lt;/li&gt;
&lt;li&gt;1969 Jul: moon landing (just for reference)&lt;/li&gt;
&lt;li&gt;1969 Aug: QED -&amp;gt; ed at AT&amp;amp;T&lt;/li&gt;
&lt;li&gt;1976 Feb: ed -&amp;gt; em (“Editor for Mortals”) at Queen Mary College&lt;/li&gt;
&lt;li&gt;1976 : em -&amp;gt; ex (“EXtended”) at UC Berkeley&lt;/li&gt;
&lt;li&gt;1977 Oct: ex gets visual mode, vi&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://begriffs.com/images/tty33asr.jpg&quot; class=&quot;right&quot; alt=&quot;hard copy terminal&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You can discover the similarities all the way between QED and ex by reading the &lt;a href=&quot;https://begriffs.com/pdf/qed-editor.pdf&quot;&gt;QED manual&lt;/a&gt; and &lt;a href=&quot;https://begriffs.com/pdf/ex-manual.pdf&quot;&gt;ex manual&lt;/a&gt;. Both editors use a similar grammar to specify and operate on line ranges.&lt;/p&gt;
&lt;p&gt;Editors like QED, ed, and em were designed for hard-copy terminals, which are basically electric typewriters with a modem attached. Hard-copy terminals print system output on paper. Output could not be changed once printed, obviously, so the editing process consisted of user commands to update and manually print ranges of text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://begriffs.com/images/adm3a.jpg&quot; class=&quot;left&quot; alt=&quot;video terminal&quot;/&gt;&lt;/p&gt;
&lt;p&gt;By 1976 video terminals such as the ADM-3A started to be available. The Ex editor added an “open mode” which allowed intraline editing on video terminals, and a visual mode for screen oriented editing on cursor-addressible terminals. The visual mode (activated with the command “vi”) kept an up-to-date view of part of the file on screen, while preserving an ex command line at the bottom of the screen. (Fun fact: the h,j,k,l keys on the ADM-3A had arrows drawn on them, so that choice of motion keys in vi was simply to match the keyboard.)&lt;/p&gt;
&lt;p&gt;Learn more about the journey from ed to ex/vi in this &lt;a href=&quot;https://begriffs.com/pdf/unix-review-bill-joy.pdf&quot;&gt;interview&lt;/a&gt; with Bill Joy. He talks about how he made ex/vi, and some things that disappointed him about it.&lt;/p&gt;
&lt;p&gt;Classic vi is truly just an alter-ego of ex – they are the same binary, which decides to start in ex mode or vi mode based on the name of the executable invoked. The legacy of all this history is that ex/vi is refined by use, requires scant system resources, and can operate under limited bandwidth communication. It is also available on most systems and &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/utilities/vi.html&quot;&gt;fully specified&lt;/a&gt; in POSIX.&lt;/p&gt;
&lt;h4 id=&quot;from-vi-to-vim&quot;&gt;From vi to vim&lt;/h4&gt;
&lt;p&gt;Being a derivative of ed, the ex/vi editor was intellectual property of AT&amp;amp;T. To use vi on platforms other than Unix, people had to write clones that did not share in the original codebase.&lt;/p&gt;
&lt;p&gt;Some of the clones:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;nvi - 1980 for 4BSD&lt;/li&gt;
&lt;li&gt;calvin - 1987 for DOS&lt;/li&gt;
&lt;li&gt;vile - 1990 for DOS&lt;/li&gt;
&lt;li&gt;stevie - 1987 for Atari ST&lt;/li&gt;
&lt;li&gt;elvis - 1990 for Minix and 386BSD&lt;/li&gt;
&lt;li&gt;vim - 1991 for Amiga&lt;/li&gt;
&lt;li&gt;viper - 1995 for Emacs&lt;/li&gt;
&lt;li&gt;elwin - 1995 for Windows&lt;/li&gt;
&lt;li&gt;lemmy - 2002 for Windows&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We’ll be focusing on that little one in the middle: vim. Bram Moolenaar wanted to use vi on the Amiga. He began porting Stevie from the Atari and evolving it. He called his port “Vi IMitation.” For a full first-hand account, see Bram’s &lt;a href=&quot;https://begriffs.com/pdf/vim-interview.pdf&quot;&gt;interview&lt;/a&gt; with Free Software Magazine.&lt;/p&gt;
&lt;p&gt;By version 1.22 Vim was rechristened “Vi IMproved,” matching and surpassing features of the original. Here is the timeline of the next major versions, with some of their big features:&lt;/p&gt;
&lt;table class=&quot;table&quot;&gt;&lt;tbody readability=&quot;11.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1991 Nov 2&lt;/td&gt;
&lt;td&gt;Vim 1.14: First release (on Fred Fish disk #591).&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1992&lt;/td&gt;
&lt;td&gt;Vim 1.22: Port to Unix. Vim now competes with Vi.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1994 Aug 12&lt;/td&gt;
&lt;td&gt;Vim 3.0: Support for multiple buffers and windows.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1996 May 29&lt;/td&gt;
&lt;td&gt;Vim 4.0: Graphical User Interface (largely by Robert Webb).&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1998 Feb 19&lt;/td&gt;
&lt;td&gt;Vim 5.0: Syntax coloring/highlighting.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;2001 Sep 26&lt;/td&gt;
&lt;td&gt;Vim 6.0: Folding, plugins, vertical split.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;2006 May 8&lt;/td&gt;
&lt;td&gt;Vim 7.0: Spell check, omni completion, undo branches, tabs.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;2016 Sep 12&lt;/td&gt;
&lt;td&gt;Vim 8.0: Jobs, async I/O, native packages.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;For more info about each version, see e.g. &lt;code&gt;:help vim8&lt;/code&gt;. To see plans for the future, including known bugs, see &lt;code&gt;:help todo.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Version 8 included some async job support due to peer pressure from NeoVim, whose developers &lt;a href=&quot;https://groups.google.com/forum/#!searchin/vim_dev/neovim/vim_dev/x0BF9Y0Uby8/Xse9Bvyza0AJ&quot;&gt;wanted&lt;/a&gt; to run debuggers and REPLs for their web scripting languages inside the editor.&lt;/p&gt;
&lt;p&gt;Vim is super portable. By adapting over time to work on a wide variety of platforms, the editor was forced to keep portable coding habits. It runs on OS/390, Amiga, BeOS and BeBox, Macintosh classic, Atari MiNT, MS-DOS, OS/2, QNX, RISC-OS, BSD, Linux, OS X, VMS, and MS-Windows. You can rely on Vim being there no matter what computer you’re using.&lt;/p&gt;
&lt;p&gt;In a final twist in the vi saga, the original ex/vi source code was finally released in 2002 under a BSD free software license. It is available at &lt;a href=&quot;http://ex-vi.sourceforge.net&quot;&gt;ex-vi.sourceforge.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s get down to business. Before getting to odds, ends, and intermediate tricks, it helps to understand how Vim organizes and reads its configuration files.&lt;/p&gt;
&lt;h3 id=&quot;configuration-hierarchy&quot;&gt;Configuration hierarchy&lt;/h3&gt;
&lt;p&gt;I used to think, incorrectly, that Vim reads all its settings and scripts from the ~/.vimrc file alone. Browsing random “dotfiles” repositories can reinforce this notion. Quite often people publish monstrous single .vimrc files that try to control every aspect of the editor. These big configs are sometimes called “vim distros.”&lt;/p&gt;
&lt;p&gt;In reality Vim has a tidy structure, where .vimrc is just one of several inputs. In fact you can ask Vim exactly which scripts it has loaded. Try this: edit a source file from a random programming project on your computer. Once loaded, run&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;:scriptnames&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Take time to read the list. Try to guess what the scripts might do, and note the directories where they live.&lt;/p&gt;
&lt;p&gt;Was the list longer than you expected? If you have installed loads of plugins the editor has a lot to do. Check what slows down the editor most at startup by running the following and look at the &lt;code&gt;start.log&lt;/code&gt; it creates:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ex&quot;&gt;vim&lt;/span&gt; --startuptime start.log name-of-your-file&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just for comparison, see how quickly Vim starts without your existing configuration:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ex&quot;&gt;vim&lt;/span&gt; --clean --startuptime clean.log name-of-your-file&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To determine which scripts to run at startup or buffer load time, Vim traverses a “runtime path.” The path is a comma-separated list of directories that each contain a common structure. Vim inspects the structure of each directory to find scripts to run. Directories are processed in the order they appear in the list.&lt;/p&gt;
&lt;p&gt;Check the runtimepath on your system by running:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;:set runtimepath&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My system contains the following directories in the default value for &lt;code&gt;runtimepath&lt;/code&gt;. Not all of them even exist in the filesystem, but they would be consulted if they did.&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;~/.vim&lt;/dt&gt;
&lt;dd&gt;The home directory, for personal preferences.&lt;/dd&gt;
&lt;dt&gt;/usr/local/share/vim/vimfiles&lt;/dt&gt;
&lt;dd&gt;A system-wide Vim directory, for preferences from the system administrator.&lt;/dd&gt;
&lt;dt&gt;/usr/local/share/vim/vim81&lt;/dt&gt;
&lt;dd&gt;Aka $VIMRUNTIME, for files distributed with Vim.&lt;/dd&gt;
&lt;dt&gt;/usr/local/share/vim/vimfiles/after&lt;/dt&gt;
&lt;dd&gt;The “after” directory in the system-wide Vim directory. This is for the system administrator to overrule or add to the distributed defaults.&lt;/dd&gt;
&lt;dt&gt;~/.vim/after&lt;/dt&gt;
&lt;dd&gt;The “after” directory in the home directory. This is for personal preferences to overrule or add to the distributed defaults or system-wide settings.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;Because directories are processed by their order in line, the only thing that is special about the “after” directories is that they are at the end of the list. There is nothing magical about the word “after.”&lt;/p&gt;
&lt;p&gt;When processing each directory, Vim looks for subfolders with specific names. To learn more about them, see &lt;code&gt;:help runtimepath&lt;/code&gt;. Here is a selection of those we will be covering, with brief descriptions.&lt;/p&gt;
&lt;dl&gt;&lt;dt&gt;plugin/&lt;/dt&gt;
&lt;dd&gt;Vim script files that are loaded automatically when editing any kind of file. Called “global plugins.”&lt;/dd&gt;
&lt;dt&gt;autoload/&lt;/dt&gt;
&lt;dd&gt;(Not to be confused with “plugin.”) Scripts in autoload contain functions that are loaded only when requested by other scripts.&lt;/dd&gt;
&lt;dt&gt;ftdetect/&lt;/dt&gt;
&lt;dd&gt;Scripts to detect filetypes. They can base their decision on filename extension, location, or internal file contents.&lt;/dd&gt;
&lt;dt&gt;ftplugin/&lt;/dt&gt;
&lt;dd&gt;Scripts that are executed when editing files with known type.&lt;/dd&gt;
&lt;dt&gt;compiler/&lt;/dt&gt;
&lt;dd&gt;Definitions of how to run various compilers or linters, and of how to parse their output. Can be shared between multiple ftplugins. Also not applied automatically, must be called with &lt;code&gt;:compiler&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;pack/&lt;/dt&gt;
&lt;dd&gt;Container for Vim 8 native packages, the successor to “Pathogen” style package management. The native packaging system does not require any third-party code.&lt;/dd&gt;
&lt;/dl&gt;&lt;p&gt;Finally, &lt;code&gt;~/.vimrc&lt;/code&gt; is the catchall for general editor settings. Use it for setting defaults that can be overridden for particular file types. For a comprehensive overview of settings you can choose in .vimrc, run &lt;code&gt;:options&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;third-party-plugins&quot;&gt;Third-party plugins&lt;/h3&gt;
&lt;p&gt;Plugins are simply Vim scripts that must be put into the correct places in the runtimepath in order to execute. Installing them is conceptually easy: download the file(s) into place. The challenge is that it’s hard to remove or update some plugins because they litter subdirectories in the runtimepath with their scripts, and it can be hard to tell which plugin is responsible for which files.&lt;/p&gt;
&lt;p&gt;“Plugin managers” evolved to address this need. Vim.org has had a &lt;a href=&quot;https://www.vim.org/scripts/script_search_results.php&quot;&gt;plugin registry&lt;/a&gt; going back at least as far as 2003 (as identified by the Internet Archive). However it wasn’t until about 2008 that the notion of a plugin manager really came into vogue.&lt;/p&gt;
&lt;p&gt;These tools add plugins’ separate directories to Vim’s runtimepath, and compile help tags for plugin documentation. Most plugin managers also install and update plugin code from the internet, sometimes in parallel or with colorful progress bars.&lt;/p&gt;
&lt;p&gt;In chronological order, here is the parade of plugin managers. I based the date ranges on earliest and latest releases of each, or when no official releases are identified, on the earliest and latest commit dates.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Mar 2006 - Jul 2014 : &lt;a href=&quot;https://www.vim.org/scripts/script.php?script_id=1502&quot;&gt;Vimball&lt;/a&gt; (A distribution format and associated Vim commands)&lt;/li&gt;
&lt;li&gt;Oct 2008 - Dec 2015 : &lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;Pathogen&lt;/a&gt; (Deprecated in favor of native vim packages)&lt;/li&gt;
&lt;li&gt;Aug 2009 - Dec 2009 : &lt;a href=&quot;https://github.com/c9s/Vimana&quot;&gt;Vimana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dec 2009 - Dec 2014 : &lt;a href=&quot;https://github.com/MarcWeber/vim-addon-manager&quot;&gt;VAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aug 2010 - Nov 2010 : &lt;a href=&quot;https://github.com/vimjolts/jolt&quot;&gt;Jolt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oct 2010 - Nov 2012 : &lt;a href=&quot;https://github.com/tomtom/tplugin_vim&quot;&gt;tplugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oct 2010 - Feb 2014 : &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt; (Discontinued after NeoBundle ripped off code)&lt;/li&gt;
&lt;li&gt;Mar 2012 - Mar 2018 : &lt;a href=&quot;https://github.com/kana/vim-flavor&quot;&gt;vim-flavor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apr 2012 - Mar 2016 : &lt;a href=&quot;https://github.com/Shougo/neobundle.vim&quot;&gt;NeoBundle&lt;/a&gt; (Deprecated in favor of dein)&lt;/li&gt;
&lt;li&gt;Jan 2013 - Aug 2017 : &lt;a href=&quot;https://github.com/csexton/infect&quot;&gt;infect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Feb 2013 - Aug 2016 : &lt;a href=&quot;https://github.com/rkulla/vimogen&quot;&gt;vimogen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oct 2013 - Jan 2015 : &lt;a href=&quot;https://github.com/sunaku/vim-unbundle&quot;&gt;vim-unbundle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dec 2013 - Jul 2015 : &lt;a href=&quot;https://github.com/ardagnir/vizardry&quot;&gt;Vizardry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Feb 2014 - Oct 2018 : &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jan 2015 - Oct 2015 : &lt;a href=&quot;https://github.com/tomtom/enabler_vim&quot;&gt;enabler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Aug 2015 - Apr 2016 : &lt;a href=&quot;https://github.com/dbeniamine/vizardry&quot;&gt;Vizardry 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jan 2016 - Jun 2018 : &lt;a href=&quot;https://github.com/Shougo/dein.vim&quot;&gt;dein.vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sep 2016 - Present : native in Vim 8&lt;/li&gt;
&lt;li&gt;Feb 2017 - Sep 2018 : &lt;a href=&quot;https://github.com/k-takata/minpac&quot;&gt;minpac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mar 2018 - Mar 2018 : &lt;a href=&quot;https://github.com/meldavis/autopac&quot;&gt;autopac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Feb 2017 - Jun 2018 : &lt;a href=&quot;https://github.com/maralla/pack&quot;&gt;pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mar 2017 - Sep 2017 : &lt;a href=&quot;https://github.com/nicodebo/vim-pck&quot;&gt;vim-pck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sep 2017 - Sep 2017 : &lt;a href=&quot;https://github.com/mkarpoff/vim8-pack&quot;&gt;vim8-pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sep 2017 - May 2019 : &lt;a href=&quot;https://github.com/vim-volt/volt&quot;&gt;volt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sep 2018 - Feb 2019 : &lt;a href=&quot;https://github.com/kristijanhusak/vim-packager&quot;&gt;vim-packager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Feb 2019 - Feb 2019 : &lt;a href=&quot;https://github.com/bennyyip/plugpac.vim&quot;&gt;plugpac.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The first thing to note is the overwhelming variety of these tools, and the second is that each is typically active for about four years before presumably going out of fashion.&lt;/p&gt;
&lt;p&gt;The most stable way to manage plugins is to simply use Vim 8’s built-in functionality, which requires no third-party code. Let’s walk through how to do it.&lt;/p&gt;
&lt;p&gt;First create two directories, opt and start, within a pack directory in your runtimepath.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;fu&quot;&gt;mkdir&lt;/span&gt; -p ~/.vim/pack/foobar/&lt;span class=&quot;dt&quot;&gt;{opt,start}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the placeholder “foobar.” This name is entirely up to you. It classifies the packages that will go inside. Most people throw all their plugins into a single nondescript category, which is fine. Pick whatever name you like; I’ll continue to use foobar here. You could theoretically create multiple categories too, like ~/.vim/pack/navigation and ~/.vim/pack/linting. Note that Vim does not detect duplication between categories and will double-load duplicates if they exist.&lt;/p&gt;
&lt;p&gt;Packages in “start” get loaded automatically, whereas those in “opt” won’t load until specifically requested in Vim with the &lt;code&gt;:packadd&lt;/code&gt; command. Opt is good for lesser-used packages, and keeps Vim fast by not running scripts unnecessarily. Note that there isn’t a counterpart to &lt;code&gt;:packadd&lt;/code&gt; to unload a package.&lt;/p&gt;
&lt;p&gt;For this example we’ll add the “ctrlp” fuzzy find plugin to opt. Download and extract the latest release into place:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;ex&quot;&gt;curl&lt;/span&gt; -L https://github.com/kien/ctrlp.vim/archive/1.79.tar.gz \
        &lt;span class=&quot;kw&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;tar&lt;/span&gt; zx -C ~/.vim/pack/foobar/opt&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That command creates a ~/.vim/pack/foobar/opt/ctrlp.vim-1.79 folder, and the package is ready to use. Back in vim, create a helptags index for the new package:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;:helptags ~/.vim/pack/foobar/opt/ctrlp.vim-1.79/doc&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That creates a file called “tags” in the package’s doc folder, which makes the topics available for browsing in Vim’s internal help system. (Alternately you can run &lt;code&gt;:helptags ALL&lt;/code&gt; once the package has been loaded, which takes care of all docs in the runtimepath.)&lt;/p&gt;
&lt;p&gt;When you want to use the package, load it (and know that tab completion works for plugin names, so you don’t have to type the whole name):&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;:packadd ctrlp.vim-1.79&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Packadd includes the package’s base directory in the runtimepath, and sources its plugin and ftdetect scripts. After loading ctrlp, you can press CTRL-P to pop up a fuzzy find file matcher.&lt;/p&gt;
&lt;p&gt;Some people keep their ~/.vim directory under version control and use git submodules for each package. For my part, I simply extract packages from tarballs and track them in my own repository. If you use mature packages you don’t need to upgrade them often, plus the scripts are generally small and don’t clutter git history much.&lt;/p&gt;
&lt;h3 id=&quot;backups-and-undo&quot;&gt;Backups and undo&lt;/h3&gt;
&lt;p&gt;Depending on user settings, Vim can protect against four types of loss:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A crash during editing (between saves). Vim can protect against this one by periodically saving unwritten changes to a swap file.&lt;/li&gt;
&lt;li&gt;Editing the same file with two instances of Vim, overwriting changes from one or both instances. Swap files protect against this too.&lt;/li&gt;
&lt;li&gt;A crash during the save process itself, after the destination file is truncated but before the new contents have been fully written. Vim can protect against this with a “writebackup.” To do this, it writes to a new file and swaps it with the original on success, in a way that depends on the “backupcopy” setting.&lt;/li&gt;
&lt;li&gt;Saving new file contents but wanting the original back. Vim can protect against this by persisting the backup copy of the file after writing changes.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Before examining sensible settings, how about some comic relief? Here are just a sampling of comments from vimrc files on GitHub:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;“Do not create swap file. Manage this in version control”&lt;/li&gt;
&lt;li&gt;“Backups are for pussies. Use version control”&lt;/li&gt;
&lt;li&gt;“use version control FFS!”&lt;/li&gt;
&lt;li&gt;“We live in a world with version control, so get rid of swaps and backups”&lt;/li&gt;
&lt;li&gt;“don’t write backup files, version control is enough backup”&lt;/li&gt;
&lt;li&gt;“I’ve never actually used the VIM backup files… Use version control”&lt;/li&gt;
&lt;li&gt;“Since most stuff is on version control anyway”&lt;/li&gt;
&lt;li&gt;“Disable backup files, you are using a version control system anyway :)”&lt;/li&gt;
&lt;li&gt;“version control has arrived, git will save us”&lt;/li&gt;
&lt;li&gt;“disable swap and backup files (Always use version control! ALWAYS!)”&lt;/li&gt;
&lt;li&gt;“Turn backup off, since I version control everything”&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The comments reflect awareness of only the fourth case above (and the third by accident), whereas the authors generally go on to disable the swap file too, leaving one and two unprotected.&lt;/p&gt;
&lt;p&gt;Here is the configuration I recommend to keep your edits safe:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; Protect changes between writes. Default values of
&quot; updatecount (200 keystrokes) and updatetime
&quot; (4 seconds) are fine
set swapfile
set directory^=~/.vim/swap//

&quot; protect against crash-during-write
set writebackup
&quot; but do not persist backup after successful write
set nobackup
&quot; use rename-and-write-new method whenever safe
set backupcopy=auto
&quot; patch required to honor double slash at end
if has(&quot;patch-8.1.0251&quot;)
        &quot; consolidate the writebackups -- not a big
        &quot; deal either way, since they usually get deleted
        set backupdir^=~/.vim/backup//
end

&quot; persist the undo tree for each file
set undofile
set undodir^=~/.vim/undo//&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These settings enable backups for writes-in-progress, but do not persist them after successful write because version control etc etc. Note that you’ll need to &lt;code&gt;mkdir ~/.vim/{swap,undodir,backup}&lt;/code&gt; or else Vim will fall back to the next available folder in the preference list. You should also probably chmod the folders to keep the contents private, because the swap files and undo history might contain sensitive information.&lt;/p&gt;
&lt;p&gt;One thing to note about the paths in our config is that they end in a double slash. That ending enables a feature to disambiguate swaps and backups for files with the same name that live in different directories. For instance the swap file for &lt;code&gt;/foo/bar&lt;/code&gt; will be saved in &lt;code&gt;~/.vim/swap/%foo%bar.swp&lt;/code&gt; (slashes escaped as percent signs). Vim had a bug until a fairly recent patch where the double slash was not honored for backupdir, and we guard against that above.&lt;/p&gt;
&lt;p&gt;We also have Vim persist the history of undos for each file, so that you can apply them even after quitting and editing the file again. While it may sound redundant with the swap file, the undo history is complementary because it is written only when the file is written. (If it were written more frequently it might not match the state of the file on disk after a crash, so Vim doesn’t do that.)&lt;/p&gt;
&lt;p&gt;Speaking of undo, Vim maintains a full tree of edit history. This means you can make a change, undo it, then redo it differently and all three states are recoverable. You can see the times and magnitude of changes with the &lt;code&gt;:undolist&lt;/code&gt; command, but it’s hard to visualize the tree structure from it. You can navigate to specific changes in that list, or move in time with &lt;code&gt;:earlier&lt;/code&gt; and &lt;code&gt;:later&lt;/code&gt; which take a time argument like 5m, or the count of file saves, like 3f. However navigating the undo tree is an instance when I think a plugin – like &lt;a href=&quot;https://github.com/mbbill/undotree&quot;&gt;undotree&lt;/a&gt; – &lt;em&gt;is&lt;/em&gt; warranted.&lt;/p&gt;
&lt;p&gt;Enabling these disaster recovery settings can bring you peace of mind. I used to save compulsively after most edits or when stepping away from the computer, but now I’ve made an effort to leave documents unsaved for hours at a time. I know how the swap file works now.&lt;/p&gt;
&lt;p&gt;Some final notes: keep an eye on all these disaster recovery files, they can pile up in your .vim folder and use space over time. Also setting nowritebackup might be necessary when saving a huge file with low disk space, because Vim must otherwise make an entire copy of the file temporarily. By default the “backupskip” setting disables backups for anything in the system temp directory.&lt;/p&gt;
&lt;p&gt;Vim’s “patchmode” is related to backups. You can use it in directories that aren’t under version control. For instance if you want to download a source tarball, make an edit and send a patch over a mailing list without bringing git into the picture. Run &lt;code&gt;:set patchmod=.orig&lt;/code&gt; and any file ‘foo’ Vim is about to write will be backed up to ‘foo.orig’. You can then create a patch on the command line between the .orig files and the new ones.&lt;/p&gt;
&lt;h3 id=&quot;include-and-path&quot;&gt;Include and path&lt;/h3&gt;
&lt;p&gt;Most programming languages allow you to include one module or file from another. Vim knows how to track program identifiers in included files using the configuration settings &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;suffixesadd&lt;/code&gt;, and &lt;code&gt;includeexpr&lt;/code&gt;. The identifier search (see &lt;code&gt;:help include-search&lt;/code&gt;) is an alternative to maintaining a tags file with ctags for system headers.&lt;/p&gt;
&lt;p&gt;The settings for C programs work out of the box. Other languages are supported too, but require tweaking. That’s outside the scope of this article, see &lt;code&gt;:help include&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If everything is configured right, you can press &lt;code&gt;[i&lt;/code&gt; on an identifier to display its definition, or &lt;code&gt;[d&lt;/code&gt; for a macro constant. Also when you press &lt;code&gt;gf&lt;/code&gt; with the cursor on a filename, Vim searches the path to find it and jump there. Because the path also affects the &lt;code&gt;:find&lt;/code&gt; command, some people have the tendency to add ‘**/*’ or commonly accessed directories to the path in order to use &lt;code&gt;:find&lt;/code&gt; like a poor man’s fuzzy finder. Doing this slows down the identifier search with directories which aren’t relevant to that task.&lt;/p&gt;
&lt;p&gt;A way to get the same level of crappy find capability, without polluting the path, is to just make another mapping. You can then press &amp;lt;Leader&amp;gt;&amp;lt;space&amp;gt; (which is typically backslash space) then start typing a filename and use tab or CTRL-D completion to find the file.&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; fuzzy-find lite
nmap &amp;lt;Leader&amp;gt;&amp;lt;space&amp;gt; :e ./**/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just to reiterate: the path parameter was designed for header files. If you want more proof, there is even a &lt;code&gt;:checkpath&lt;/code&gt; command to see whether the path is functioning. Load a C file and run &lt;code&gt;:checkpath&lt;/code&gt;. It will display filenames it was unable to find that are included transitively by the current file. Also &lt;code&gt;:checkpath!&lt;/code&gt; with a bang dumps the whole hierarchy of files included from the current file.&lt;/p&gt;
&lt;p&gt;By default path has the value “.,/usr/include,,” meaning the working directory, /usr/include, and files that are siblings of the active buffer. The directory specifiers and globs are pretty powerful, see &lt;code&gt;:help file-searching&lt;/code&gt; for the details.&lt;/p&gt;
&lt;p&gt;In my C ftplugin (more on that later), I also have the path search for include files within the current project, like ./src/include or ./include .&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;setlocal path=.,,*/include/**3,./*/include/**3
setlocal path+=/usr/include&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The ** with a number like **3 bounds the depth of the search in subdirectories. It’s wise to add depth bounds where you can to avoid identifier searches that lock up.&lt;/p&gt;
&lt;p&gt;Here are other patterns you might consider adding to your path if &lt;code&gt;:checkpath&lt;/code&gt; identifies that files can’t be found in your project. It depends on your system of course.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;More system includes: &lt;code&gt;/usr/include/**4,/usr/local/include/**3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Homebrew library headers: &lt;code&gt;/usr/local/Cellar/**2/include/**2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Macports library headers: &lt;code&gt;/opt/local/include/**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OpenBSD library headers: &lt;code&gt;/usr/local/lib/\*/include,/usr/X11R6/include/\*\*3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;See also: &lt;code&gt;:he [&lt;/code&gt;, &lt;code&gt;:he gf&lt;/code&gt;, &lt;code&gt;:he :find&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;edit-compile-cycle&quot;&gt;Edit ⇄ compile cycle&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;:make&lt;/code&gt; command runs a program of the user’s choice to build a project, and collects the output in the quickfix buffer. Each item in the quickfix records the filename, line, column, type (warning/error) and message of each output item. A fairly idomatic mapping uses bracket commands to move through quickfix items:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; quickfix shortcuts
nmap ]q :cnext&amp;lt;cr&amp;gt;
nmap ]Q :clast&amp;lt;cr&amp;gt;
nmap [q :cprev&amp;lt;cr&amp;gt;
nmap [Q :cfirst&amp;lt;cr&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If, after updating the program and rebuilding, you are curious what the error messages said last time, use &lt;code&gt;:colder&lt;/code&gt; (and &lt;code&gt;:cnewer&lt;/code&gt; to return). To see more information about the currently selected error use &lt;code&gt;:cc&lt;/code&gt;, and use &lt;code&gt;:copen&lt;/code&gt; to see the full quickfix buffer. You can populate the quickfix yourself without running &lt;code&gt;:make&lt;/code&gt; with &lt;code&gt;:cfile&lt;/code&gt;, &lt;code&gt;:caddfile&lt;/code&gt;, or &lt;code&gt;:cexpr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vim parses output from the build process according to the errorformat string, which contains scanf-like escape sequences. It’s typical to set this in a “compiler file.” For instance, Vim ships with one for gcc in $VIMRUNTIME/compiler/gcc.vim, but has no compiler file for clang. I created the following definition for ~/.vim/compiler/clang.vim:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; formatting variations documented at
&quot; https://clang.llvm.org/docs/UsersManual.html#formatting-of-diagnostics
&quot;
&quot; It should be possible to make this work for the combination of
&quot; -fno-show-column and -fcaret-diagnostics as well with multiline
&quot; and %p, but I was too lazy to figure it out.
&quot;
&quot; The %D and %X patterns are not clang per se. They capture the
&quot; directory change messages from (GNU) 'make -w'. I needed this
&quot; for building a project which used recursive Makefiles.

CompilerSet errorformat=
        \%f:%l%c:{%*[^}]}{%*[^}]}:\ %trror:\ %m,
        \%f:%l%c:{%*[^}]}{%*[^}]}:\ %tarning:\ %m,
        \%f:%l:%c:\ %trror:\ %m,
        \%f:%l:%c:\ %tarning:\ %m,
        \%f(%l,%c)\ :\ %trror:\ %m,
        \%f(%l,%c)\ :\ %tarning:\ %m,
        \%f\ +%l%c:\ %trror:\ %m,
        \%f\ +%l%c:\ %tarning:\ %m,
        \%f:%l:\ %trror:\ %m,
        \%f:%l:\ %tarning:\ %m,
        \%D%*\\a[%*\\d]:\ Entering\ directory\ %*[`']%f',
        \%D%*\\a:\ Entering\ directory\ %*[`']%f',
        \%X%*\\a[%*\\d]:\ Leaving\ directory\ %*[`']%f',
        \%X%*\\a:\ Leaving\ directory\ %*[`']%f',
        \%DMaking\ %*\\a\ in\ %f

CompilerSet makeprg=make&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To activate this compiler profile, run &lt;code&gt;:compiler clang&lt;/code&gt;. This is typically done in an ftplugin file.&lt;/p&gt;
&lt;p&gt;Another example is running &lt;a href=&quot;https://www.gnu.org/software/diction/&quot;&gt;GNU Diction&lt;/a&gt; on a text document to identify wordy and commonly misused phrases in sentences. Create a “compiler” called diction.vim:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;CompilerSet errorformat=%f:%l:\ %m
CompilerSet makeprg=diction\ -s\ %&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After you run &lt;code&gt;:compiler diction&lt;/code&gt; you can use the normal &lt;code&gt;:make&lt;/code&gt; command to run it and populate the quickfix. The final mild convenience in my .vimrc is a mapping to run make:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; real make
map &amp;lt;silent&amp;gt; &amp;lt;F5&amp;gt; :make&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;
&quot; GNUism, for building recursively
map &amp;lt;silent&amp;gt; &amp;lt;s-F5&amp;gt; :make -w&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;diffs-and-patches&quot;&gt;Diffs and patches&lt;/h3&gt;
&lt;p&gt;Vim’s internal diffing is powerful, but it can be daunting, especially the three-way merge view. In reality it’s not so bad once you take time to study it. The main idea is that every window is either in or out of “diff mode.” All windows put in diffmode (with &lt;code&gt;:difft[his]&lt;/code&gt;) get compared with all other windows already in diff mode.&lt;/p&gt;
&lt;p&gt;For example, let’s start simple. Create two files:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;hello, world&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; h1
&lt;span class=&quot;bu&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;goodbye, world&quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; h2

&lt;span class=&quot;ex&quot;&gt;vim&lt;/span&gt; h1 h2&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In vim, split the arguments into their own windows with &lt;code&gt;:all&lt;/code&gt;. In the top window, for h1, run &lt;code&gt;:difft&lt;/code&gt;. You’ll see a gutter appear, but no difference detected. Move to the other window with CTWL-W CTRL-W and run &lt;code&gt;:difft&lt;/code&gt; again. Now hello and goobye are identified as different in the current chunk. Continuing in the bottom window, you can run &lt;code&gt;:diffg[et]&lt;/code&gt; to get “hello” from the top window, or &lt;code&gt;:diffp[ut]&lt;/code&gt; to send “goodbye” into the top window. Pressing &lt;code&gt;]c&lt;/code&gt; or &lt;code&gt;[c&lt;/code&gt; would move between chunks if there were more than one.&lt;/p&gt;
&lt;p&gt;A shortcut would be running &lt;code&gt;vim -d h1 h2&lt;/code&gt; instead (or its alias, &lt;code&gt;vimdiff h1 h2&lt;/code&gt;) which applies &lt;code&gt;:difft&lt;/code&gt; to all windows. Alternatively, load just h1 with &lt;code&gt;vim h1&lt;/code&gt; and then &lt;code&gt;:diffsplit h2&lt;/code&gt;. Remember that fundamentally these commands just load files into windows and set the diff mode.&lt;/p&gt;
&lt;p&gt;With these basics in mind, let’s learn to use Vim as a three-way mergetool for git. First configure git:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;
&lt;code class=&quot;sourceCode bash&quot;&gt;&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; config merge.tool vimdiff
&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; config merge.conflictstyle diff3
&lt;span class=&quot;fu&quot;&gt;git&lt;/span&gt; config mergetool.prompt false&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, when you hit a merge conflict, run &lt;code&gt;git mergetool&lt;/code&gt;. It will bring Vim up with four windows. This part looks scary, and is where I used to flail around and often quit in frustration.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;+-----------+------------+------------+
|           |            |            |
|           |            |            |
|   LOCAL   |    BASE    |   REMOTE   |
+-----------+------------+------------+
|                                     |
|                                     |
|             (edit me)               |
+-------------------------------------+&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here’s the trick: do all the editing in the bottom window. The top three windows simply provide context about how the file differs on either side of the merge (local / remote), and how it looked prior to either side doing any work (base).&lt;/p&gt;
&lt;p&gt;Move within the bottom window with &lt;code&gt;]c&lt;/code&gt;, and for each chunk choose whether to replace it with text from local, base, or remote – or whether to write in your own change which might combine parts from several.&lt;/p&gt;
&lt;p&gt;To make it easier to pull changes from the top windows, I set some mappings in my vimrc:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; shortcuts for 3-way merge
map &amp;lt;Leader&amp;gt;1 :diffget LOCAL&amp;lt;CR&amp;gt;
map &amp;lt;Leader&amp;gt;2 :diffget BASE&amp;lt;CR&amp;gt;
map &amp;lt;Leader&amp;gt;3 :diffget REMOTE&amp;lt;CR&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We’ve already seen &lt;code&gt;:diffget&lt;/code&gt;, and here our bindings pass an argument of the buffer name that identifies which window to pull from.&lt;/p&gt;
&lt;p&gt;Once done with the merge, run &lt;code&gt;:wqa&lt;/code&gt; to save all the windows and quit. If you want to abandon the merge instead, run &lt;code&gt;:cq&lt;/code&gt; to abort all changes and return an error code to the shell. This will signal to git that it should ignore your changes.&lt;/p&gt;
&lt;p&gt;Diffget can also accept a range. If you want to pull in &lt;em&gt;all&lt;/em&gt; changes from one of the top windows rather than working chunk by chunk, just run &lt;code&gt;:1,$+1diffget {LOCAL,BASE,REMOTE}&lt;/code&gt;. The “+1” is required because there can be deleted lines “below” the last line of a buffer.&lt;/p&gt;
&lt;p&gt;The three-way marge is fairly easy after all. There’s no need for plugins like Fugitive, at least for presenting a simplified view for resolving merge conflicts.&lt;/p&gt;
&lt;p&gt;Finally, as of patch 8.1.0360, Vim is bundled with the xdiff library and can create diffs internally. This can be more efficient than shelling out to an external program, and allows for a choice of diff algorithms. The “&lt;a href=&quot;https://bramcohen.livejournal.com/73318.html&quot;&gt;patience&lt;/a&gt;” algorithm often produces more human-readable output than the default, “myers.” Set it in your .vimrc like so:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;if has(&quot;patch-8.1.0360&quot;)
        set diffopt+=internal,algorithm:patience
endif&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;buffer-io&quot;&gt;Buffer I/O&lt;/h3&gt;
&lt;p&gt;See if this sounds familiar: you’re editing a buffer and want to save it as a new file, so you &lt;code&gt;:w newname&lt;/code&gt;. After editing some more, you &lt;code&gt;:w&lt;/code&gt;, but it writes over the original file. What you want for this scenario is &lt;code&gt;:saveas newname&lt;/code&gt;, which does the write but also changes the filename of the buffer for future writes. Alternately, the &lt;code&gt;:file newname&lt;/code&gt; command will change the filename without doing a write.&lt;/p&gt;
&lt;p&gt;It also pays off to learn more about the read and write commands. Becuase r and w are Ex commands, they work with ranges. Here are some variations you might not know about:&lt;/p&gt;
&lt;table class=&quot;table&quot;&gt;&lt;tbody readability=&quot;13.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;:w &amp;gt;&amp;gt;foo&lt;/td&gt;
&lt;td&gt;append the whole buffer to a file&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;:.w &amp;gt;&amp;gt;foo&lt;/td&gt;
&lt;td&gt;append current line to a file&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;:$r foo&lt;/td&gt;
&lt;td&gt;read foo into the end of the buffer&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;:0r foo&lt;/td&gt;
&lt;td&gt;read foo into the start, moving existing lines down&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;:.,$w foo&lt;/td&gt;
&lt;td&gt;write current line and below to a file&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;:r !ls&lt;/td&gt;
&lt;td&gt;read ls output into cursor position&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;:w !wc&lt;/td&gt;
&lt;td&gt;send buffer to wc and display output&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;:.!tr ‘A-Za-z’ ‘N-ZA-Mn-za-m’&lt;/td&gt;
&lt;td&gt;apply ROT-13 to current line&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;:w|so %&lt;/td&gt;
&lt;td&gt;chain commands: write and then source buffer&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;:e!&lt;/td&gt;
&lt;td&gt;throw away unsaved changes, reload buffer&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;:hide edit foo&lt;/td&gt;
&lt;td&gt;edit foo, hide current buffer if dirty&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Useless fun fact: we piped a line to &lt;code&gt;tr&lt;/code&gt; in an example above to apply a ROT-13 cypher, but Vim has that functionality built in with the the &lt;code&gt;g?&lt;/code&gt; command. Apply it to a motion, like &lt;code&gt;g?$&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;filetypes&quot;&gt;Filetypes&lt;/h3&gt;
&lt;p&gt;Filetypes are a way to change settings based on the type of file detected in a buffer. They don’t need to be automatically detected though, we can manually enable them to interesting effect. An example is doing hex editing. Any file can be viewed as raw hexadecimal values. GitHub user the9ball &lt;a href=&quot;https://github.com/the9ball/.vim/blob/7138beef974b3510f0dc92b7629ad236ddd39ec9/ftplugin/xxd.vim&quot;&gt;created&lt;/a&gt; a clever ftplugin script that filters a buffer back and forth through the xxd utility for hex editing.&lt;/p&gt;
&lt;p&gt;The xxd utility was bundled as part of Vim 5 for convenience. The Vim todo.txt file mentions they want to make it more seamless to edit binary files, but xxd can take us pretty far.&lt;/p&gt;
&lt;p&gt;Here is code you can put in &lt;code&gt;~/.vim/ftplugin/xxd.vim&lt;/code&gt;. Its presence in ftplugin means Vim will execute the script when filetype (aka “ft”) becomes xxd. I added some basic comments to the script.&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; without the xxd command this is all pointless
if !executable('xxd')
        finish
endif

&quot; don't insert a newline in the final line if it
&quot; doesn't already exist, and don't insert linebreaks
setlocal binary noendofline
silent %!xxd -g 1
%s/\r$//e

&quot; put the autocmds into a group for easy removal later
augroup ftplugin-xxd
        &quot; erase any existing autocmds on buffer
        autocmd! * &amp;lt;buffer&amp;gt;

        &quot; before writing, translate back to binary
        autocmd BufWritePre &amp;lt;buffer&amp;gt; let b:xxd_cursor = getpos('.')
        autocmd BufWritePre &amp;lt;buffer&amp;gt; silent %!xxd -r

        &quot; after writing, restore hex view and mark unmodified
        autocmd BufWritePost &amp;lt;buffer&amp;gt; silent %!xxd -g 1
        autocmd BufWritePost &amp;lt;buffer&amp;gt; %s/\r$//e
        autocmd BufWritePost &amp;lt;buffer&amp;gt; setlocal nomodified
        autocmd BufWritePost &amp;lt;buffer&amp;gt; call setpos('.', b:xxd_cursor) | unlet b:xxd_cursor

        &quot; update text column after changing hex values
        autocmd TextChanged,InsertLeave &amp;lt;buffer&amp;gt; let b:xxd_cursor = getpos('.')
        autocmd TextChanged,InsertLeave &amp;lt;buffer&amp;gt; silent %!xxd -r
        autocmd TextChanged,InsertLeave &amp;lt;buffer&amp;gt; silent %!xxd -g 1
        autocmd TextChanged,InsertLeave &amp;lt;buffer&amp;gt; call setpos('.', b:xxd_cursor) | unlet b:xxd_cursor
augroup END

&quot; when filetype is set to no longer be &quot;xxd,&quot; put the binary
&quot; and endofline settings back to what they were before, remove
&quot; the autocmds, and replace buffer with its binary value
let b:undo_ftplugin = 'setl bin&amp;lt; eol&amp;lt; | execute &quot;au! ftplugin-xxd * &amp;lt;buffer&amp;gt;&quot; | execute &quot;silent %!xxd -r&quot;'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Try opening a file, then running &lt;code&gt;:set ft&lt;/code&gt;. Note what type it is. Then&lt;code&gt;:set ft=xxd&lt;/code&gt;. Vim will turn into a hex editor. To restore your view, &lt;code&gt;:set ft=foo&lt;/code&gt; where foo was the original type. Note that in hex view you even get syntax highlighting because &lt;code&gt;$VIMRUNTIME/syntax/xxd.vim&lt;/code&gt; ships with Vim by default.&lt;/p&gt;
&lt;p&gt;Notice the nice use of “b:undo_ftplugin” which is an opportunity for filetypes to clean up after themselves when the user or ftdetect mechanism switches away from them to another filetype. (The example above could use a little work because if you &lt;code&gt;:set ft=xxd&lt;/code&gt; then set it back, the buffer is marked as modified even if you never changed anything.)&lt;/p&gt;
&lt;p&gt;Ftplugins also allow you to refine an existing filetype. For instance, Vim already has some good defaults for C programming in &lt;code&gt;$VIMRUNTIME/ftplugin/c.vim&lt;/code&gt;. I put these extra options in &lt;code&gt;~/.vim/after/ftplugin/c.vim&lt;/code&gt; to add my own settings on top:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;&quot; the smartest indent engine for C
setlocal cindent
&quot; my preferred &quot;Allman&quot; style indentation
setlocal cino=&quot;Ls,:0,l1,t0,(s,U1,W4&quot;

&quot; for quickfix errorformat
compiler clang
&quot; shows long build messages better
setlocal ch=2

&quot; auto-create folds per grammar
setlocal foldmethod=syntax
setlocal foldlevel=10

&quot; local project headers
setlocal path=.,,*/include/**3,./*/include/**3
&quot; basic system headers
setlocal path+=/usr/include

setlocal tags=./tags,tags;~
&quot;                      ^ in working dir, or parents
&quot;                ^ sibling of open file

&quot; the default is menu,preview but the preview window is annoying
setlocal completeopt=menu

iabbrev #i #include
iabbrev #d #define
iabbrev main() int main(int argc, char **argv)

&quot; add #include guard
iabbrev #g _&amp;lt;c-r&amp;gt;=expand(&quot;%:t:r&quot;)&amp;lt;cr&amp;gt;&amp;lt;esc&amp;gt;VgUV:s/[^A-Z]/_/g&amp;lt;cr&amp;gt;A_H&amp;lt;esc&amp;gt;yypki#ifndef &amp;lt;esc&amp;gt;j0i#define &amp;lt;esc&amp;gt;o&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;#endif&amp;lt;esc&amp;gt;2ki&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice how the script uses “setlocal” rather than “set.” This applies the changes to just the current buffer rather than the whole Vim instance.&lt;/p&gt;
&lt;p&gt;This script also enables some light abbreviations. Like I can type &lt;code&gt;#g&lt;/code&gt; and press enter and it adds an include guard with the current filename:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode c&quot;&gt;
&lt;code class=&quot;sourceCode c&quot;&gt;&lt;span class=&quot;pp&quot;&gt;#ifndef _FILENAME_H&lt;/span&gt;
&lt;span class=&quot;pp&quot;&gt;#define _FILENAME_H&lt;/span&gt;

&lt;span class=&quot;co&quot;&gt;/* &amp;lt;-- cursor here */&lt;/span&gt;

&lt;span class=&quot;pp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also mix filetypes by using a dot (“.”). Here is one application. Different projects have different coding conventions, so you can combine your default C settings with those for a particular project. The OpenBSD source code follows the &lt;a href=&quot;https://man.openbsd.org/style.9&quot;&gt;style(9)&lt;/a&gt; format, so let’s make a special openbsd filetype. Combine the two filetypes with &lt;code&gt;:set ft=c.openbsd&lt;/code&gt; on relevant files.&lt;/p&gt;
&lt;p&gt;To detect the openbsd filetype we can look at the &lt;em&gt;contents&lt;/em&gt; of buffers rather than just their extensions or locations on disk. The telltale sign is that C files in the &lt;a href=&quot;https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/&quot;&gt;OpenBSD source&lt;/a&gt; contain &lt;code&gt;/* $OpenBSD:&lt;/code&gt; in the first line.&lt;/p&gt;
&lt;p&gt;To detect them, create &lt;code&gt;~/.vim/after/ftdetect/openbsd.vim&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;augroup filetypedetect
        au BufRead,BufNewFile *.[ch]
                \  if getline(1) =~ 'OpenBSD;'
                \|   setl ft=c.openbsd
                \| endif
augroup END&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;https://cvsweb.openbsd.org/cgi-bin/cvsweb/ports/editors/vim/#dirlist&quot;&gt;Vim port&lt;/a&gt; for OpenBSD already includes a special syntax file for this filetype: &lt;code&gt;/usr/local/share/vim/vimfiles/syntax/openbsd.vim&lt;/code&gt;. If you recall, the &lt;code&gt;/usr/local/share/vim/vimfiles&lt;/code&gt; directory is in the runtimepath and is set aside for files from the system administrator. The provided openbsd.vim script includes a function:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;function! OpenBSD_Style()
        setlocal cindent
        setlocal cinoptions=(4200,u4200,+0.5s,*500,:0,t0,U4200
        setlocal indentexpr=IgnoreParenIndent()
        setlocal indentkeys=0{,0},0),:,0#,!^F,o,O,e
        setlocal noexpandtab
        setlocal shiftwidth=8
        setlocal tabstop=8
        setlocal textwidth=80
endfun&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We simply need to call the function at the appropriate time. Create &lt;code&gt;~/.vim/after/ftplugin/openbsd.vim&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;call OpenBSD_Style()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now opening any C or header file with the characteristic comment at the top will be recognized as type c.openbsd and will use indenting options that conform with the style(9) man page.&lt;/p&gt;
&lt;h3 id=&quot;dont-forget-the-mouse&quot;&gt;Don’t forget the mouse&lt;/h3&gt;
&lt;p&gt;This is a friendly reminder that despite our command-line machismo, the mouse is in fact supported in Vim, and can do some things more easily than the keyboard. Mouse events work even over SSH thanks to xterm turning mouse events into stdin &lt;a href=&quot;https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Mouse-Tracking&quot;&gt;escape codes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable mouse support, set &lt;code&gt;mouse=n&lt;/code&gt;. Many people use &lt;code&gt;mouse=a&lt;/code&gt; to make it work in all modes, but I prefer to enable it only in normal mode. This avoids creating visual selections when I click links with a keyboard modifier to open them in my browser.&lt;/p&gt;
&lt;p&gt;Here are things the mouse can do:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open or close folds (when &lt;code&gt;foldcolumn&lt;/code&gt; &amp;gt; 0).&lt;/li&gt;
&lt;li&gt;Select tabs (beats gt gt gt…)&lt;/li&gt;
&lt;li&gt;Click to complete a motion, like d&amp;lt;click!&amp;gt;. Similar to the easymotion plugin but without any plugin.&lt;/li&gt;
&lt;li&gt;Jump to help topics with double click.&lt;/li&gt;
&lt;li&gt;Drag the status line at the bottom to change cmdheight.&lt;/li&gt;
&lt;li&gt;Drag edge of window to resize.&lt;/li&gt;
&lt;li&gt;Scroll wheel.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;misc-editing&quot;&gt;Misc editing&lt;/h3&gt;
&lt;p&gt;This section could be enormous, but I’ll stick to a few tricks I learned. The first one that blew me away was &lt;code&gt;:set virtualedit=all&lt;/code&gt;. It allows you to move the cursor anywhere in the window. If you enter characters or insert a visual block, Vim will add whatever spaces are required to the left of the inserted characters to keep them in place. Virtual edit mode makes it simple to edit tabular data. Turn it off with &lt;code&gt;:set virtualedit=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next are some movement commands. I used to rely a lot on &lt;code&gt;}&lt;/code&gt; to jump by paragraphs, and just muscle my way down the page. However the &lt;code&gt;]&lt;/code&gt; character makes more precise motions: by function &lt;code&gt;]]&lt;/code&gt;, scope &lt;code&gt;]}&lt;/code&gt;, paren ‘])’, comment &lt;code&gt;]/&lt;/code&gt;, diff block &lt;code&gt;]c&lt;/code&gt;. This series is why the quickfix mapping &lt;code&gt;]q&lt;/code&gt; mentioned earlier fits the pattern so well.&lt;/p&gt;
&lt;p&gt;For big jumps I used to try things like &lt;code&gt;1000j&lt;/code&gt;, but in normal mode you can actually just type a percentage and Vim will go there, like &lt;code&gt;50%&lt;/code&gt;. Speaking of scroll percentage, you can see it at any time with CTRL-G. Thus I now do &lt;code&gt;:set noruler&lt;/code&gt; and ask to see the info as needed. It’s less cluttered. Kind of the opposite of the trend of colorful patched font powerlines.&lt;/p&gt;
&lt;p&gt;After jumping around between tags, files, or within a file, there are some commands to get your bearings. Try &lt;code&gt;:ls&lt;/code&gt;, &lt;code&gt;:tags&lt;/code&gt;, &lt;code&gt;:jumps&lt;/code&gt;, and &lt;code&gt;:marks&lt;/code&gt;. Jumping through tags actually creates a stack, and you can press CTRL-T to pop one back. I used to always press CTRL-O to back out of jumps, but it is not as direct as popping the tag stack.&lt;/p&gt;
&lt;p&gt;In a project directory that has been indexed with ctags, you can open the editor directly to a tag with &lt;code&gt;-t&lt;/code&gt;, like &lt;code&gt;vim -t main&lt;/code&gt;. To find tags files more flexibly, set the &lt;code&gt;tags&lt;/code&gt; configuration variable. Note the semicolon in the example below that allows Vim to search the current directory &lt;em&gt;upward&lt;/em&gt; to the home directory. This way you could have a more general system tags file outside the project folder.&lt;/p&gt;
&lt;pre class=&quot;viml&quot;&gt;
&lt;code&gt;set tags=./tags,**5/tags,tags;~
&quot;                          ^ in working dir, or parents
&quot;                   ^ in any subfolder of working dir
&quot;           ^ sibling of open file&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There are some buffer tricks too. Switching to a buffer with &lt;code&gt;:bu&lt;/code&gt; can take a fragment of the buffer name, not just a number. Sometimes it’s harder to memorize those numbers than remember the name of a source file. You can navigate buffers with marks too. If you use a capital letter as the name of a mark, you can jump to it across buffers. You could set a mark H in a header, C in a source file, and M in a Makefile to go from one buffer to another.&lt;/p&gt;
&lt;p&gt;Do you ever get mad after yanking a word, deleting a word somewhere else, trying paste the first word in, and then discovering your original yank is overwritten? The Vim registers are underappreciated for this. Inspect their contents with &lt;code&gt;:reg&lt;/code&gt;. As you yank text, previous yanks are rotated into the registers &lt;code&gt;&quot;0&lt;/code&gt; - &lt;code&gt;&quot;9&lt;/code&gt;. So &lt;code&gt;&quot;0p&lt;/code&gt; pastes the next-to-last yank/deletion. The special registers &lt;code&gt;&quot;+&lt;/code&gt; and &lt;code&gt;&quot;*&lt;/code&gt; can copy/paste from/to the system clipboard. They usually mean the same thing, except in some X11 setups that distinguish primary and secondary selection.&lt;/p&gt;
&lt;p&gt;Another handy hidden feature is the command line window. It it’s a buffer that contains your previous commands and searches. Bring it up with &lt;code&gt;q:&lt;/code&gt; or &lt;code&gt;q/&lt;/code&gt;. Once inside you can move to any line and press enter to run it. However you can also edit any of the lines before pressing enter. Your changes won’t affect the line (the new command will merely be added to the bottom of the list).&lt;/p&gt;
&lt;p&gt;This article could go on and on, so I’m going to call it here. For more great topics, see these help sections: views-sessions, viminfo, TOhtml, ins-completion, cmdline-completion, multi-repeat, scroll-cursor, text-objects, grep, netrw-contents.&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;&lt;img src=&quot;https://begriffs.com/images/vim-logo.gif&quot; alt=&quot;vim logo&quot;/&gt;&lt;p class=&quot;caption&quot;&gt;vim logo&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 19 Jul 2019 18:58:58 +0000</pubDate>
<dc:creator>begriffs</dc:creator>
<og:title>History and effective use of Vim</og:title>
<og:image>https://begriffs.com/images/vim-logo.gif</og:image>
<og:description>Great features are in store for those who truly learn the editor</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://begriffs.com/posts/2019-07-19-history-use-vim.html?hn=3</dc:identifier>
</item>
<item>
<title>QuickBooks Cloud Hosting Firm iNSYNQ Hit in Ransomware Attack</title>
<link>https://krebsonsecurity.com/2019/07/quickbooks-cloud-hosting-firm-insynq-hit-in-ransomware-attack/</link>
<guid isPermaLink="true" >https://krebsonsecurity.com/2019/07/quickbooks-cloud-hosting-firm-insynq-hit-in-ransomware-attack/</guid>
<description>&lt;p&gt;Cloud hosting provider &lt;a href=&quot;https://www.insynq.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iNSYNQ&lt;/a&gt; says it is trying to recover from a ransomware attack that shut down its network and has left customers unable to access their accounting data for the past three days. Unfortunately for iNSYNQ, the company appears to be turning a deaf ear to the increasingly anxious cries from its users for more information about the incident.&lt;/p&gt;
&lt;div id=&quot;attachment_48281&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot; wp-image-48281&quot; src=&quot;https://krebsonsecurity.com/wp-content/uploads/2019/07/insync-message.png&quot; alt=&quot;&quot; width=&quot;592&quot; height=&quot;362&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;A message from iNSYNQ to customers.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Gig Harbor, Wash.-based iNSYNQ specializes in providing cloud-based &lt;strong&gt;QuickBooks&lt;/strong&gt; accounting software and services. In a statement posted to its status page, iNSYNQ said it experienced a ransomware attack on July 16, and took its network offline in a bid to contain the spread of the malware.&lt;/p&gt;
&lt;p&gt;“The attack impacted data belonging to certain iNSYNQ clients, rendering such data inaccessible,” the company said. “As soon as iNSYNQ discovered the attack, iNSYNQ took steps to contain it. This included turning off some servers in the iNSYNQ environment.”&lt;/p&gt;
&lt;p&gt;iNSYNQ said it has engaged outside cybersecurity assistance and to determine whether any customer data was accessed without authorization, but that so far it has no estimate for when those files might be available again to customers.&lt;/p&gt;
&lt;p&gt;Meanwhile, iNSYNQ’s customers — many of them accountants who manage financial data for a number of their own clients — have taken to Twitter to vent their frustration over a lack of updates since that initial message to users.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-48284&quot; src=&quot;https://krebsonsecurity.com/wp-content/uploads/2019/07/insynq-rage.png&quot; alt=&quot;&quot; width=&quot;593&quot; height=&quot;569&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In response, the company appears to have simply deleted or deactivated its Twitter account (a cached copy from June 2019 is available &lt;a href=&quot;https://webcache.googleusercontent.com/search?q=cache:PlKsZdXr6a0J:https://twitter.com/insynq+&amp;amp;cd=1&amp;amp;hl=en&amp;amp;ct=clnk&amp;amp;gl=us&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;). Several customers venting about the outage on Twitter also accused the company of unpublishing negative comments about the incident from &lt;a href=&quot;https://www.facebook.com/Insynqcloud/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;its Facebook page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of those customers also said iNSYNQ initially blamed the outage on an alleged problem with U.S.-based nationwide cable ISP giant Comcast. Meanwhile, competing cloud hosting providers have been piling on to the tweetstorms about the iNSYNQ outage by marketing their own services, claiming &lt;em&gt;they&lt;/em&gt; would never subject their customers to a three-day outage.&lt;/p&gt;
&lt;p&gt;iNSYNQ has not yet responded to requests for comment.&lt;/p&gt;
&lt;p&gt;Update, 4:35 p.m. ET: I just heard from iNSYNQ’s CEO &lt;strong&gt;Elliot Luchansky&lt;/strong&gt;, who shared the following:&lt;/p&gt;
&lt;blockquote readability=&quot;27&quot;&gt;
&lt;p&gt;While we have continually updated our website and have emailed customers once if not twice daily during this malware attack, I acknowledge we’ve had to keep the detail fairly minimal.&lt;/p&gt;
&lt;p&gt;Unfortunately, and as I’m sure you’re familiar with, the lack of detailed information we’ve shared has been purposeful and in an effort to protect our customers and their data- we’re in a behind the scenes trench warfare doing everything we possibly can to secure and restore our system and customer data and backups. I understand why our customers are frustrated, and we want more than anything to share every piece of information that we have.&lt;/p&gt;
&lt;p&gt;Our customers and their businesses are our number one priority right now. Our team is working around the clock to secure and restore access to all impacted data, and we believe we have an end in sight in the near future.&lt;/p&gt;
&lt;p&gt;You know as well as we that no one is 100% impervious to this – businesses large and small, governments and individuals are susceptible. iNSYNQ and our customers were the victims of a malware attack that’s a totally new variant that hadn’t been detected before, confirmed by the experienced and knowledgeable cybersecurity team we’ve employed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Original story:&lt;/em&gt; There is no question that a ransomware infestation at any business — let alone a cloud data provider — can quickly turn into an all-hands-on-deck, hair-on-fire emergency that diverts all attention to fixing the problem as soon as possible.&lt;/p&gt;
&lt;p&gt;But that is no excuse for leaving customers in the dark, and for not providing frequent and transparent updates about what the victim organization is doing to remediate the matter. Particularly when the cloud provider in question posts constantly &lt;a href=&quot;https://blog.insynq.com/blog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;to its blog&lt;/a&gt; about how companies can minimize their risk from such incidents by trusting it with their data.&lt;/p&gt;
&lt;p&gt;Ransomware victims perhaps in the toughest spot include those providing cloud data hosting and software-as-service offerings, as these businesses are completely unable to serve their customers while a ransomware infestation is active.&lt;/p&gt;
&lt;p&gt;The FBI and multiple &lt;a href=&quot;https://us.norton.com/internetsecurity-malware-7-tips-to-prevent-ransomware.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;security firms&lt;/a&gt; have advised victims not to pay any ransom demands, as doing so just encourages the attackers and in any case may not result in actually regaining access to encrypted files.&lt;/p&gt;
&lt;p&gt;In practice, however, many cybersecurity consulting firms are quietly urging their customers that paying up is the fastest route back to business-as-usual. It’s not hard to see why: Having customer data ransomed or stolen can send many customers scrambling to find new providers. As a result, the temptation to simply pay up may become stronger with each passing day.&lt;/p&gt;
&lt;p&gt;That’s exactly what happened in February, when cloud payroll data provider &lt;strong&gt;Apex Human Capital Management&lt;/strong&gt; was &lt;a href=&quot;https://krebsonsecurity.com/2019/02/payroll-provider-gives-extortionists-a-payday/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;knocked offline for three days&lt;/a&gt; following a ransomware infestation.&lt;/p&gt;
&lt;p&gt;On Christmas Eve 2018, cloud hosting provider &lt;strong&gt;Dataresolution.net&lt;/strong&gt; &lt;a href=&quot;https://krebsonsecurity.com/2019/01/cloud-hosting-provider-dataresolution-net-battling-christmas-eve-ransomware-attack/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;took its systems offline&lt;/a&gt; in response to a ransomware outbreak on its internal networks. The company was adamant that it would not pay the ransom demand, but it ended up taking several weeks for customers to fully regain access to their data.&lt;/p&gt;
&lt;p&gt;KrebsOnSecurity will endeavor to update this story as more details become available. Any iNSYNQ affected by the outage is welcome to contact this author &lt;a href=&quot;https://www.twitter.com/briankrebs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;via Twitter&lt;/a&gt; (my direct messages are open to all) or at krebsonsecurity @ gmail.com.&lt;/p&gt;

&lt;p class=&quot;mid-banner&quot;&gt;&lt;a href=&quot;https://www.akamai.com/us/en/security.jsp?utm_source=krebsonsecurity&amp;amp;utm_medium=display&amp;amp;utm_id=F-MC-44701&amp;amp;utm_campaign=unifiedsecurity_digital_2019&amp;amp;utm_content=unifiedsecurity_global&amp;amp;utm_term=unifiedsecurity_ros&quot;&gt;&lt;img src=&quot;https://krebsonsecurity.com/b-akamai/15.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;small&quot;&gt;Tags: &lt;a href=&quot;https://krebsonsecurity.com/tag/insynq-ransomware-attack/&quot; rel=&quot;tag&quot;&gt;iNSYNQ ransomware attack&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;postmetadata alt&quot;&gt;&lt;small&gt;This entry was posted on Friday, July 19th, 2019 at 12:40 pm and is filed under &lt;a href=&quot;https://krebsonsecurity.com/category/data-breaches/&quot; rel=&quot;category tag&quot;&gt;Data Breaches&lt;/a&gt;. You can follow any comments to this entry through the &lt;a href=&quot;https://krebsonsecurity.com/2019/07/quickbooks-cloud-hosting-firm-insynq-hit-in-ransomware-attack/feed/&quot;&gt;RSS 2.0&lt;/a&gt; feed. You can skip to the end and leave a comment. Pinging is currently not allowed.&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jul 2019 16:47:34 +0000</pubDate>
<dc:creator>DemiGuru</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://krebsonsecurity.com/2019/07/quickbooks-cloud-hosting-firm-insynq-hit-in-ransomware-attack/</dc:identifier>
</item>
<item>
<title>Slack Security Incident</title>
<link>https://keybase.io/blog/slack-incident</link>
<guid isPermaLink="true" >https://keybase.io/blog/slack-incident</guid>
<description>July 19, 2019

&lt;p&gt;It was a cold Saturday New York City morning in January 2019. I was packing the car for a family ski vacation when I received a truly horrifying email:&lt;/p&gt;&lt;center&gt;&lt;img alt=&quot;A scary email to receive&quot; src=&quot;https://keybase.io/images/blog/slack/newlogin_ds.png&quot; class=&quot;img img-responsive&quot;/&gt;&lt;/center&gt;
&lt;p&gt;That's interesting, I was just in the middle of loading up the Prius. Certainly, I wasn't using Slack from....&lt;/p&gt;
&lt;center&gt;&lt;img alt=&quot;GEO IP&quot; src=&quot;https://keybase.io/images/blog/slack/geoip_ds.png&quot; class=&quot;img img-responsive&quot;/&gt;&lt;p&gt;...Burnville USA&lt;/p&gt;
&lt;/center&gt;
&lt;p&gt;Oh.&lt;/p&gt;
&lt;p&gt;My immediate thoughts, &lt;em&gt;in order&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Thankfully we don't put sensitive communications (from financials to hiring to shit-talkin') into Slack. We basically just use a &lt;code&gt;#breaking&lt;/code&gt; channel in there in case we have Keybase downtime. Phew. &lt;strong&gt;I didn't have to worry about being extorted or embarrassed. And Keybase as a company would almost certainly emerge unscathed.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;WAIT A SEC. How did this happen? I use strong, secure, &lt;em&gt;distinct&lt;/em&gt;, random passwords for all services I log into. Either Slack itself was compromised, my password manager was compromised, or my computers were &quot;rooted&quot; by an attacker.&lt;/li&gt;
&lt;li&gt;Our weekend was hosed.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At risk of getting the car towed, I dashed an email off to Slack's security team, and after a few back-and-forths, received the standard fare. They did not inform me of the &lt;a href=&quot;https://slackhq.com/march-2015-security-incident-and-the-launch-of-two-factor-authentication&quot;&gt;directly related 2015 Security Incident&lt;/a&gt; but instead implied that I was messy with my security practices and was to blame.&lt;/p&gt;
&lt;p&gt;Though I was more than 90% convinced that Slack had been compromised, as the CEO of a security-focused company, I couldn't take any risks. I had to assume the worst, that my computers were compromised.&lt;/p&gt;
&lt;p&gt;In the subsequent days and weeks, I reset all of my passwords, &lt;em&gt;threw away all my computers&lt;/em&gt;, bought new computers, factory-reset my phone, rotated all of my Keybase devices (i.e., rotated my &quot;keys&quot;), and reestablished everything from the ground up. It cost Keybase and me a lot of time, money and stress. In the end, I was pretty sure but not 100% convinced that if I had been &quot;rooted&quot;, that the attackers couldn't follow me to my new setup. But with these things, you can never know for sure. It's a really scary thing to go through.&lt;/p&gt;
&lt;h2&gt;And then...&lt;/h2&gt;
&lt;p&gt;I got the &lt;a href=&quot;https://slackhq.com/new-information-2015-incident&quot;&gt;email today&lt;/a&gt; that countless other people got. Apparently my account might have been compromised in a previous attack. This corroborates my suspicions - I was never rooted and didn't need to deprovision all that hardware and keys. Still, what's done is done. What's dead can never die. Nonetheless, as the incident comes into focus, &lt;strong&gt;things seem worse than previously thought:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The attackers also inserted code that allowed them to capture plaintext passwords as they were entered by users at the time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoa!&lt;/p&gt;
&lt;p&gt;Though Slack originally told me 2FA would provide &quot;a bit of extra security,&quot; these new data show otherwise. If the attackers inject server code, 2FA or U2F or any Web-based security practice does little.&lt;/p&gt;
&lt;p&gt;Also, Slack's announcement seems to say 1% of accounts were still compromised (after 4 years), but we are wondering: how many were compromised then? And what percentage of messages did the compromised accounts have access to? 10%? 50%? Only the hackers know, but it's likely much more than 1%.&lt;/p&gt;
&lt;p&gt;And finally, we know the original compromise was in 2015, but I was only notified of a suspicious login in 2019. Were our Dutch friends sifting through our messages for four years before Slack notified us of a suspicious login?&lt;/p&gt;
&lt;p&gt;In the end, the damage was limited. More or less, Keybase and I were out:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;$5000 worth of hardware&lt;/li&gt;
&lt;li&gt;60 hours of labor&lt;/li&gt;
&lt;li&gt;25 hours of lost sleep&lt;/li&gt;
&lt;li&gt;10 additional hours of team effort&lt;/li&gt;
&lt;li&gt;A first weekend on skis for a potential 2034 Slalom Gold Medalist&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;What would have been way worse — immeasurably worse — is if our team had used Slack for anything other than what we did use it for, which was discussing outages of our own product. Had my cofounder and I discussed our company's cap table, or business partnerships, or compensation agreements, or ongoing legal matters over Slack; or had our team traded API keys, or security-sensitive matters; or had we controlled mission-critical infrastructure via Slack-powered &quot;bots&quot;; we'd be sweating bullets to this day that our important company secrets were out in the open, about to resurface at the worst possible time.&lt;/p&gt;
&lt;p&gt;By contrast, Keybase currently runs all of its mission critical chat applications over &lt;em&gt;Keybase itself&lt;/em&gt;. Our people-to-people conversations and our bots. And as always, Keybase messages are end-to-end encrypted, and only our users control their decryption keys. A break-in our of our servers, even one injecting code, cannot yield unencrypted messages or jeopardize message integrity.&lt;/p&gt;
&lt;p&gt;Update: for those asking, there is a pretty simple &lt;a href=&quot;https://keybase.io/slack-importer&quot;&gt;Slack-to-Keybase team importer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;💖 Max Krohn, Keybase CEO&lt;br/&gt;&lt;a href=&quot;https://keybase.io/max&quot;&gt;https://keybase.io/max&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;mailto:max@keybase.io&quot;&gt;max@keybase.io&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Fri, 19 Jul 2019 13:45:09 +0000</pubDate>
<dc:creator>malgorithms</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://keybase.io/blog/slack-incident</dc:identifier>
</item>
<item>
<title>Show HN: I built a service to discover rapidly  growing Google search topics</title>
<link>https://trennd.co/</link>
<guid isPermaLink="true" >https://trennd.co/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://trennd.co/&quot;&gt;https://trennd.co/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20478339&quot;&gt;https://news.ycombinator.com/item?id=20478339&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 355&lt;/p&gt;
&lt;p&gt;# Comments: 103&lt;/p&gt;
</description>
<pubDate>Fri, 19 Jul 2019 13:14:48 +0000</pubDate>
<dc:creator>jhow15</dc:creator>
<og:title>Trennd - Discover rising &amp; hot topics by search volume</og:title>
<og:description>Get inspirations for blog posts, startup projects, cocktail conversations and beyond on Trennd, the one-stop aggregator for emerging search and social trends.</og:description>
<og:type>website</og:type>
<og:url>https://trennd.co/</og:url>
<og:image>https://trennd.co/static/trennd-fb-og.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://trennd.co/</dc:identifier>
</item>
<item>
<title>Dropbox silently installed new file manager app on users’ systems</title>
<link>https://arstechnica.com/gadgets/2019/07/dropbox-silently-installs-new-file-manager-app-on-users-systems/</link>
<guid isPermaLink="true" >https://arstechnica.com/gadgets/2019/07/dropbox-silently-installs-new-file-manager-app-on-users-systems/</guid>
<description>&lt;aside id=&quot;social-left&quot; aria-label=&quot;Read the comments or share this article&quot;&gt;
&lt;h4 class=&quot;comment-count-before&quot;&gt;&lt;a title=&quot;189 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gadgets/2019/07/dropbox-silently-installs-new-file-manager-app-on-users-systems/?comments=1&quot;&gt;reader comments&lt;/a&gt;&lt;/h4&gt;
&lt;a title=&quot;189 posters participating&quot; class=&quot;comment-count icon-comment-bubble-down&quot; href=&quot;https://arstechnica.com/gadgets/2019/07/dropbox-silently-installs-new-file-manager-app-on-users-systems/?comments=1&quot;&gt;&lt;span class=&quot;comment-count-number&quot;&gt;306&lt;/span&gt; &lt;span class=&quot;visually-hidden&quot;&gt;with 189 posters participating&lt;/span&gt;&lt;/a&gt;
&lt;div class=&quot;share-links&quot;&gt;
&lt;h4&gt;Share this story&lt;/h4&gt;
&lt;/div&gt;
&lt;/aside&gt;&lt;div class=&quot;gallery shortcode-gallery gallery-wide&quot;&gt;
&lt;ul&gt;&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox-4-150x150.png&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox-4.png&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox-4-980x641.png 1080, https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox-4.png 2560&quot; data-sub-html=&quot;#caption-1538331&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;This is what Dropbox looks like now. It used to be a folder, now it's a file manager.&lt;/div&gt;
&lt;div class=&quot;credit&quot;&gt;Ron Amadeo&lt;/div&gt;
&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox_Preferences-150x150.png&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox_Preferences.png&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox_Preferences.png 1080, https://cdn.arstechnica.net/wp-content/uploads/2019/07/Dropbox_Preferences.png 2560&quot; data-sub-html=&quot;#caption-1538333&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;You can make the Dropbox icon open with your normal file manager by changing this option in the Dropbox preferences.&lt;/div&gt;
&lt;div class=&quot;credit&quot;&gt;Ron Amadeo&lt;/div&gt;
&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/1-2-150x150.jpg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/1-2.jpg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/1-2.jpg 1080, https://cdn.arstechnica.net/wp-content/uploads/2019/07/1-2.jpg 2560&quot; data-sub-html=&quot;#caption-1538387&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;MacOS users get this lovely new dock icon every single time they reboot their computer.&lt;/div&gt;
&lt;div class=&quot;credit&quot;&gt;Ron Amadeo&lt;/div&gt;
&lt;/li&gt;
&lt;li data-thumb=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/2-1-150x150.jpg&quot; data-src=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/2-1.jpg&quot; data-responsive=&quot;https://cdn.arstechnica.net/wp-content/uploads/2019/07/2-1.jpg 1080, https://cdn.arstechnica.net/wp-content/uploads/2019/07/2-1.jpg 2560&quot; data-sub-html=&quot;#caption-1538391&quot;&gt;

&lt;div class=&quot;caption&quot;&gt;The Dropbox pop-up menu is weird and bloated now, too.&lt;/div&gt;
&lt;div class=&quot;credit&quot;&gt;Ron Amadeo&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Update 4:06pm ET:&lt;/strong&gt; Dropbox says this was a mistake. &quot;We recently announced a new desktop app experience that is now currently available in Early Access. Due to an error, some users were accidentally exposed to the new app for a short period of time. The issue has been resolved, though there might be a short lag for some users to see resolution. We apologize for any inconvenience this has caused.&quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Original Post:&lt;/strong&gt; Hey Dropbox users, how has Dropbox been for you lately? Major changes are coming to the Dropbox desktop app. The company announced its &lt;a href=&quot;https://blog.dropbox.com/topics/product-tips/new-dropbox&quot;&gt;&quot;New Desktop Experience&quot;&lt;/a&gt; in June, and previously it was opt-in. Recently, though, a number of users on Twitter and at the Ars Orbiting HQ have reported silently being &quot;upgraded&quot; to this radically different version of Dropbox.&lt;/p&gt;
&lt;p&gt;This new version of Dropbox wants to be... a file manager? Instead of the minimal sync app, the Dropbox icon now opens a big, multi-panel, blue and white window showing all your Dropbox files. It kind of looks like Slack, if Slack was a file manager. You can now &quot;star&quot; folders as important so they show up in the left panel (again, like a Slack chat room). The middle panel shows your Dropbox files, and the right panel shows a file preview with options for comments and sharing. You can search for files, sort by name or date, and do all the usual file operations like cut, copy, and paste. &lt;em&gt;It's a file manager.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A big part of the appeal of Dropbox is (was?) that it's a dead-simple product: it's a folder, in the cloud! Put your stuff in the folder, and it seamlessly gets backed up and synced to all your other computers. Part of using Dropbox means installing the sync app to your computer, and to keep everything fresh and up to date, Dropbox has the ability to silently update this app from time to time. Using this mechanism to silently install a bigger, more bloated, completely different version of the Dropbox app onto people's computers seems... wrong, especially with no notice whatsoever. Updates are one thing, but &lt;a href=&quot;https://twitter.com/caseyliss/status/1151688000574808064&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://twitter.com/marcoarment/status/1151601688047947777?ref_src=twsrc%5Etfw&quot;&gt;users&lt;/a&gt; (your author included) feel like there was a lack of consent here.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Dropbox’s direction and attitude have been clear for a while now:&lt;/p&gt;
&lt;p&gt;They don’t see this as MY computer.&lt;/p&gt;
&lt;p&gt;It’s THEIR computer, and they’re doing whatever they need to boost whatever initiative or growth targets they’re trying to maximize this month.&lt;/p&gt;
&lt;p&gt;I’m just along for the ride.&lt;/p&gt;
&lt;p&gt;— Marco Arment (@marcoarment) &lt;a href=&quot;https://twitter.com/marcoarment/status/1151601688047947777?ref_src=twsrc%5Etfw&quot;&gt;July 17, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nobody wants a file manager from Dropbox. Whether you're a Windows, Mac, or Linux user, all of our computers come with file managers already, and they work fine. The Dropbox app already adds any Dropbox-specific features like sharing to the stock file manager, and having a separate, different file manager for a single folder on your computer doesn't make any sense.&lt;/p&gt;
&lt;p&gt;This new update implements different weird or workflow-breaking changes depending on which OS you're on. On Windows, double-clicking the tray icon no longer opens your Dropbox folder by default, and it instead opens the Dropbox file manager. On macOS, Dropbox now likes to repeatedly spawn a Dropbox dock icon. You can remove it, but it will reappear every time you restart your computer. Dropbox support says &lt;a href=&quot;https://twitter.com/DropboxSupport/status/1151605576792727552&quot;&gt;it is not possible&lt;/a&gt; to turn this dock icon off. On Linux, well, Dropbox &lt;a href=&quot;https://twitter.com/DropboxSupport/status/1139097771879936000?s=20&quot;&gt;doesn't care enough&lt;/a&gt; about Linux to port the file manager app over. Lucky penguins.&lt;/p&gt;
&lt;p&gt;By default, your way of launching Dropbox will now open the Dropbox file manager instead of Finder on a Mac or Explorer on Windows. You can change this, though. Just open the Dropbox Preferences, and in the &quot;General&quot; tab you'll see an &quot;Open folders in&quot; option. If you've been upgraded to the &quot;New Dropbox Experience,&quot; this will say &quot;Dropbox,&quot; just change it to &quot;Explorer&quot; or &quot;Finder&quot; and Dropbox will be slightly more normal.&lt;/p&gt;
&lt;p&gt;Dropbox has been pushing a lot of disruptive changes to its user base lately. Along with this wild new app experience, the company recently added a device limit to its free usage tier. You used to be able to link unlimited devices to your free Dropbox account, but now &quot;Basic&quot; users are limited to three devices—including iOS and Android devices, which don't even sync files the way desktops do.&lt;/p&gt;
&lt;p&gt;Dropbox was quietly one of the Web's best services for years, and after a lot of growth, the company held an IPO last year. Since then, the stock has struggled to stay above its IPO price, and it's clear the company is getting more aggressive to try to convert users and get people to treat Dropbox as more than &quot;just a folder.&quot;&lt;/p&gt;

</description>
<pubDate>Fri, 19 Jul 2019 12:18:31 +0000</pubDate>
<dc:creator>hbgb</dc:creator>
<og:url>https://arstechnica.com/gadgets/2019/07/dropbox-silently-installs-new-file-manager-app-on-users-systems/</og:url>
<og:title>Dropbox silently installs new file manager app on users’ systems [Updated]</og:title>
<og:image>https://cdn.arstechnica.net/wp-content/uploads/2019/07/5-1-760x380.jpg</og:image>
<og:description>Dropbox ambushes its users with a radically different version of its sync app.</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arstechnica.com/gadgets/2019/07/dropbox-silently-installs-new-file-manager-app-on-users-systems/</dc:identifier>
</item>
<item>
<title>Ask HN: Are Lucene/Solr/ES Still Used for Search?</title>
<link>https://news.ycombinator.com/item?id=20477949</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=20477949</guid>
<description>&lt;tr readability=&quot;0.58823529411765&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr id=&quot;pagespace&quot; title=&quot;Ask HN: Are Lucene/Solr/ES Still Used for Search?&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4.8068181818182&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;4.0056818181818&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;20477949&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=20477949&quot; class=&quot;storylink&quot;&gt;Ask HN: Are Lucene/Solr/ES Still Used for Search?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.69767441860465&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_20477949&quot;&gt;200 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=lovelearning&quot; class=&quot;hnuser&quot;&gt;lovelearning&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=20477949&quot;&gt;12 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_20477949&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=20477949&amp;amp;goto=item%3Fid%3D20477949&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20Are%20Lucene%2FSolr%2FES%20Still%20Used%20for%20Search%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20Are%20Lucene%2FSolr%2FES%20Still%20Used%20for%20Search%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=20477949&amp;amp;auth=774acf34b20d9d95ee127c92b0f24d81defe1ed6&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=20477949&quot;&gt;152 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;7&quot;&gt;I casually visit jobs/freelancing sites once in a while. I don't see as much demand for Lucene/Solr/ES skills for website / text / document search or other kinds of information retrieval, as I used to about 4-5 years ago.
&lt;p&gt;ES seems to be the most popular but only in its ELK avatar for devops dashboards.&lt;/p&gt;
&lt;p&gt;What technologies are you people using for text or document or website search nowadays?&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.61363636363636&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;a href=&quot;https://www.startupschool.org&quot;&gt;Registration is open for Startup School 2019. Classes start July 22nd.&lt;/a&gt;&lt;/center&gt;
&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Fri, 19 Jul 2019 12:17:09 +0000</pubDate>
<dc:creator>lovelearning</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=20477949</dc:identifier>
</item>
<item>
<title>A Differentiable Programming System to Bridge ML and Scientific Computing</title>
<link>https://arxiv.org/abs/1907.07587</link>
<guid isPermaLink="true" >https://arxiv.org/abs/1907.07587</guid>
<description>&lt;div readability=&quot;10.710526315789&quot;&gt;(Submitted on 17 Jul 2019 (&lt;a href=&quot;https://arxiv.org/abs/1907.07587v1&quot;&gt;v1&lt;/a&gt;), last revised 18 Jul 2019 (this version, v2))&lt;/div&gt;&lt;div id=&quot;&quot;&gt;
&lt;p&gt;&lt;span class=&quot;descriptor&quot;&gt;Abstract:&lt;/span&gt; Scientific computing is increasingly incorporating the advancements in machine learning and the ability to work with large amounts of data. At the same time, machine learning models are becoming increasingly sophisticated and exhibit many features often seen in scientific computing, stressing the capabilities of machine learning frameworks. Just as the disciplines of scientific computing and machine learning have shared common underlying infrastructure in the form of numerical linear algebra, we now have the opportunity to further share new computational infrastructure, and thus ideas, in the form of Differentiable Programming. We describe Zygote, a Differentiable Programming system that is able to take gradients of general program structures. We implement this system in the Julia programming language. Our system supports almost all language constructs (control flow, recursion, mutation, etc.) and compiles high-performance code without requiring any user intervention or refactoring to stage computations. This enables an expressive programming model for deep learning, but more importantly, it enables us to incorporate a large ecosystem of libraries in our models in a straightforward way. We discuss our approach to automatic differentiation, including its support for advanced techniques such as mixed-mode, complex and checkpointed differentiation, and present several examples of differentiating programs.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 19 Jul 2019 11:58:43 +0000</pubDate>
<dc:creator>ChrisRackauckas</dc:creator>
<og:title>A Differentiable Programming System to Bridge Machine Learning and Scientific Computing</og:title>
<og:url>https://arxiv.org/abs/1907.07587v2</og:url>
<og:description>Scientific computing is increasingly incorporating the advancements in machine learning and the ability to work with large amounts of data. At the same time, machine learning models are becoming increasingly sophisticated and exhibit many features often seen in scientific computing, stressing the capabilities of machine learning frameworks. Just as the disciplines of scientific computing and machine learning have shared common underlying infrastructure in the form of numerical linear algebra, we now have the opportunity to further share new computational infrastructure, and thus ideas, in the form of Differentiable Programming. We describe Zygote, a Differentiable Programming system that is able to take gradients of general program structures. We implement this system in the Julia programming language. Our system supports almost all language constructs (control flow, recursion, mutation, etc.) and compiles high-performance code without requiring any user intervention or refactoring to stage computations. This enables an expressive programming model for deep learning, but more importantly, it enables us to incorporate a large ecosystem of libraries in our models in a straightforward way. We discuss our approach to automatic differentiation, including its support for advanced techniques such as mixed-mode, complex and checkpointed differentiation, and present several examples of differentiating programs.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arxiv.org/abs/1907.07587</dc:identifier>
</item>
<item>
<title>Org-mode on web, built with React, for mobile, synced with Dropbox, Google Drive</title>
<link>https://github.com/DanielDe/org-web</link>
<guid isPermaLink="true" >https://github.com/DanielDe/org-web</guid>
<description>&lt;div class=&quot;Box-header d-flex flex-items-center flex-justify-between px-2&quot;&gt;
&lt;h3 class=&quot;Box-title pr-3&quot;&gt;README.org&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;org-web lets you directly edit your org files online. It syncs with Dropbox and Google Drive and is optimized for mobile use. You can check out a &lt;a href=&quot;https://www.youtube.com/watch?v=ijNqZQxNgiA&quot; rel=&quot;nofollow&quot;&gt;video demo here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/DanielDe/org-web/blob/master/screenshots/overview.png&quot;&gt;&lt;img src=&quot;https://github.com/DanielDe/org-web/raw/master/screenshots/overview.png&quot; alt=&quot;./screenshots/overview.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It was born out of my desire to be able to easily view and edit my org files from my phone. It’s available for use &lt;a href=&quot;https://org-web.org&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you don’t already keep your org files in Dropbox or Google Drive, I recommend symlinking them in:&lt;/p&gt;
&lt;pre&gt;
ln -s ~/Documents/todo.org ~/Dropbox/todo.org
&lt;/pre&gt;
&lt;h2&gt;Gitter chat&lt;/h2&gt;
&lt;p&gt;If you’re interested in learning more about using or developing org-web, feel free to ask for help in &lt;a href=&quot;https://gitter.im/org-web/Lobby?source=orgpage&quot; rel=&quot;nofollow&quot;&gt;this Gitter room&lt;/a&gt;. It’s quiet right now, but I still monitor it closely :)&lt;/p&gt;
&lt;h2&gt;Capture params and Siri support&lt;/h2&gt;
&lt;p&gt;org-web supports a flexible mechanism for capturing using URL parameters. This mechanism integrates very nicely with the new &lt;a href=&quot;https://support.apple.com/guide/shortcuts/welcome/ios&quot; rel=&quot;nofollow&quot;&gt;Siri Shortcuts&lt;/a&gt; feature in iOS 12, allowing you to use Siri to execute capture templates.&lt;/p&gt;
&lt;p&gt;You can use &lt;a href=&quot;https://www.icloud.com/shortcuts/4e51e8b748d14a50aa70ac6fb963f775&quot; rel=&quot;nofollow&quot;&gt;this sample Shortcut&lt;/a&gt; to get started with this right away in iOS 12. Open the link on your iOS device and click “Get Shortcut”. Then open up the Shortcuts app and edit the template by following the directions in the comments. Then record a Siri trigger and you’re good to go!&lt;/p&gt;
&lt;p&gt;Alternatively, you can take advantage of the URL parameters yourself to build your own custom capture mechanism. All three of the following parameters are required and must be URL encoded:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;captureTemplateName&lt;/code&gt;: the name of the capture template to use. This capture template must already exist in Settings &amp;gt; Capture templates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;captureFile&lt;/code&gt;: the path (for Dropbox) or id (for Google Drive) of the file in which to execute the capture template.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;captureContent&lt;/code&gt;: the content you’d like to capture. This content will be placed at the cursor position if specified in the capture template (with &lt;code&gt;%?&lt;/code&gt;), or at the end of the template if its not specified.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can also specify additional custom variables for use in your templates. They should be in the format &lt;code&gt;captureVariable_&amp;lt;your custom variable&amp;gt;&lt;/code&gt;, and should also be URL encoded. In your capture template they’d show up as &lt;code&gt;%&amp;lt;your custom variable&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s an example URL:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://org-web.org?captureTemplateName=Grocery%20item&amp;amp;captureContent=Lemon&amp;amp;captureFile=/org/todo.org&amp;amp;captureVariable_location=Home&quot; rel=&quot;nofollow&quot;&gt;https://org-web.org?captureTemplateName=Grocery%20item&amp;amp;captureContent=Lemon&amp;amp;captureFile=/org/todo.org&amp;amp;captureVariable_location=Home&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;p&gt;org-web is built with React and Redux. It was bootstrapped with &lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;Create React App&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To install the necessary packages, run:&lt;/p&gt;
&lt;pre&gt;
yarn install
&lt;/pre&gt;
&lt;p&gt;To run the app, run:&lt;/p&gt;
&lt;pre&gt;
yarn start
&lt;/pre&gt;
&lt;p&gt;To test against your actual Dropbox, you’ll need to create a &lt;code&gt;.env&lt;/code&gt; file by copying &lt;code&gt;.env.sample&lt;/code&gt; to just &lt;code&gt;.env&lt;/code&gt;. To test against your Google Drive you’ll need to generate an API key as described on &lt;a href=&quot;https://developers.google.com/drive/api/v3/quickstart/js&quot; rel=&quot;nofollow&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that this will only work if you’re running the app on &lt;code&gt;http://localhost:3000&lt;/code&gt; because all redirect URIs must be specified ahead of time on the Dropbox and Google developer consoles.&lt;/p&gt;
&lt;p&gt;To make contributions to this repository, please install &lt;a href=&quot;https://prettier.io/&quot; rel=&quot;nofollow&quot;&gt;Prettier&lt;/a&gt; and use it to format your code. This repository includes a &lt;code&gt;.prettierrc.json&lt;/code&gt; with some configuration options that Prettier will use automatically. I also highly recommend installing &lt;a href=&quot;https://github.com/prettier/prettier-emacs&quot;&gt;prettier-emacs&lt;/a&gt; which will format your files on save, saving you the trouble of manually running Prettier.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;org-web is built on the shoulders of giants. These are some packages I rely on that I think are absolutely fantastic:&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 19 Jul 2019 11:37:37 +0000</pubDate>
<dc:creator>moioci</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/595798?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>DanielDe/org-web</og:title>
<og:url>https://github.com/DanielDe/org-web</og:url>
<og:description>org-mode on the web, built with React, optimized for mobile, synced with Dropbox and Google Drive - DanielDe/org-web</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/DanielDe/org-web</dc:identifier>
</item>
<item>
<title>XSS attacks on Googlebot allow search index manipulation</title>
<link>https://www.tomanthony.co.uk/blog/xss-attacks-googlebot-index-manipulation/</link>
<guid isPermaLink="true" >https://www.tomanthony.co.uk/blog/xss-attacks-googlebot-index-manipulation/</guid>
<description>&lt;blockquote readability=&quot;25&quot;&gt;
&lt;p&gt;&lt;strong&gt;Short version:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Googlebot is based on Google Chrome version 41 (2015), and therefore it has no XSS Auditor, which later versions of Chrome use to protect the user from XSS attacks. Many sites are susceptible to XSS Attacks, where the URL can be manipulated to inject unsanitized Javascript code into the site.&lt;/p&gt;
&lt;p&gt;Since Googlebot executes Javascript, this allows an attacker to craft XSS URLs that can manipulate the content of victim sites. This manipulation can include injecting links, which Googlebot will follow to crawl the destination site. This presumably manipulates PageRank, but I’ve not tested that for fear of impacting real sites rankings.&lt;/p&gt;
&lt;p&gt;I reported this to Google in November 2018, but after 5 months they had made no headway on the issue (citing internal communication difficulties), and therefore I’m publishing details such that site owners and companies can defend their own sites from this sort of attack. Google have now told me they do not have immediate plans to remedy this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last year I published details of an attack against &lt;a href=&quot;https://www.tomanthony.co.uk/blog/google-xml-sitemap-auth-bypass-black-hat-seo-bug-bounty/&quot;&gt;Google’s handling of XML Sitemaps&lt;/a&gt;, which allowed an attacker to ‘borrow’ PageRank from other sites and rank illegitimate sites for competitive terms in Google’s search results. Following that, I had been investigating other potential attack when my colleague at Distilled, &lt;a href=&quot;https://twitter.com/RobinLord8/&quot;&gt;Robin Lord&lt;/a&gt;, mentioned the concept of Javascript injection attacks which got me thinking.&lt;/p&gt;
&lt;h2&gt;XSS Attacks&lt;/h2&gt;
&lt;p&gt;There are various types of cross-site scripting (XSS) attack; we are interested in the situation where Javascript code inside the URL is included inside the content of the page without being sanitized. This can result in the Javascript code being executed in the user’s browser (even though the code isn’t intended to be part of the site). For example, imagine this snippet of PHP code which is designed to show the value of the &lt;code&gt;page&lt;/code&gt; URL parameter:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/php_code.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;163&quot; class=&quot;aligncenter size-full wp-image-822&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/php_code.png 769w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/php_code-300x70.png 300w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/php_code-768x180.png 768w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/php_code-700x164.png 700w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If someone was to craft a malicious URL where instead of a number in the &lt;code&gt;page&lt;/code&gt; parameter they instead put a snippet of Javascript:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://foo.com/stores/?page=&amp;lt;script&amp;gt;alert('hello')&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then it may produce some HTML with inline Javascript, which the page authors had never intended to be there:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/injected_javascript.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;113&quot; class=&quot;aligncenter size-full wp-image-821&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/injected_javascript.png 1012w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/injected_javascript-300x49.png 300w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/injected_javascript-768x124.png 768w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/injected_javascript-700x113.png 700w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;That malicious Javascript could do all sorts of evil things, such as steal data from the victim page, or trick the user into thinking the content they are looking at is authentic. The user may be visiting a trusted domain, and therefore trust the contents of the page, which are being manipulated by a hacker.&lt;/p&gt;
&lt;h3&gt;Chrome to the rescue&lt;/h3&gt;
&lt;p&gt;It is for that reason that Google Chrome has an XSS Auditor, which attempts to identify this type of attack and protect the user (by refusing to load the page):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/xss_auditor.png&quot; alt=&quot;&quot; width=&quot;612&quot; height=&quot;353&quot; class=&quot;aligncenter size-full wp-image-835&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/xss_auditor.png 612w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/xss_auditor-300x173.png 300w&quot; sizes=&quot;(max-width: 612px) 100vw, 612px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;So far, so good.&lt;/p&gt;
&lt;h2&gt;Googlebot = Chrome 41&lt;/h2&gt;
&lt;p&gt;Googlebot is currently based on Chrome version 41, which we know from Google’s own documentation. We also know that for the last couple of years Google have been promoting the fact that Googlebot executes and indexes Javascript on the sites it crawls. Chrome 41 had no XSS Auditor (that I’m aware of, it certainly doesn’t block any XSS that I’ve tried), and therefore my theory was that Googlebot likely has no XSS Auditor.&lt;/p&gt;
&lt;p&gt;So the first step was to check, whether Googlebot (or Google’s Website Rendering Service [WRS], to be more precise) would actually render a URL with an XSS attack. One of my early tests was on the startup bank, Revolut — a 3 year old fintech startup with $330M in funding having XSS vulnerabilities demonstrates the breadth of the XSS issue (they’ve now fixed this example).&lt;/p&gt;
&lt;p&gt;I used &lt;a href=&quot;https://search.google.com/test/mobile-friendly&quot;&gt;Google’s Mobile Friendly Tool&lt;/a&gt; to render the page, which quickly confirms Google’s WRS executes the XSS Javascript, in this case I’m crudely injecting a link at the top of the page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_link.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;431&quot; class=&quot;aligncenter size-full wp-image-836&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_link.png 838w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_link-300x185.png 300w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_link-768x474.png 768w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_link-700x432.png 700w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It is often (as in the case with Revolut) possible to entirely replace the content of the page to create your own page and content, hosted on the victim domain.&lt;/p&gt;
&lt;h3&gt;Content + links are cached&lt;/h3&gt;
&lt;p&gt;I submitted a test page to the Google index, and then examining the cache of these pages shows that the link being added to the page does appear in the Google index:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/google_cache-1.png&quot; alt=&quot;&quot; width=&quot;690&quot; height=&quot;293&quot; class=&quot;aligncenter size-full wp-image-839&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/google_cache-1.png 690w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/google_cache-1-300x127.png 300w&quot; sizes=&quot;(max-width: 690px) 100vw, 690px&quot;/&gt;&lt;/p&gt;
&lt;h3&gt;Canonicals&lt;/h3&gt;
&lt;p&gt;A second set of experiments demonstrated (again via the mobile friendly tool) that you can change the canonicals on pages:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/canonical.png&quot; alt=&quot;&quot; width=&quot;623&quot; height=&quot;288&quot; class=&quot;aligncenter size-full wp-image-842&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/canonical.png 623w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/canonical-300x139.png 300w&quot; sizes=&quot;(max-width: 623px) 100vw, 623px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Which I also confirmed via Google’s URL Inspector Tool, which reports the injected canonical as the true canonical (h/t to &lt;a href=&quot;https://twitter.com/samnemzer&quot;&gt;Sam Nemzer&lt;/a&gt; for the suggestion):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/canonical_2.png&quot; alt=&quot;&quot; width=&quot;590&quot; height=&quot;292&quot; class=&quot;aligncenter size-full wp-image-841&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/canonical_2.png 590w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/canonical_2-300x148.png 300w&quot; sizes=&quot;(max-width: 590px) 100vw, 590px&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Links are crawled and considered&lt;/h2&gt;
&lt;p&gt;At this point, I had confirmed that Google’s WRS is susceptible to XSS attacks, and that Google were crawling the pages, executing the Javascript, indexing the content and considering the search directives within (i.e. the canonicals). The next important stage, is does Google find links on these pages and crawl them. Placing links on other sites is the backbone of the PageRank algorithm and a key factor for how sites rank in Google’s algorithm.&lt;/p&gt;
&lt;p&gt;To test this, I crafted a page on &lt;a href=&quot;https://www.revolut.com/&quot;&gt;Revolut&lt;/a&gt; which contained a link to a page on one of my test domains which I had just created moments before, and had previously not existed. I submitted the Revolut page to Google and later on Googlebot crawled the target page on my test domain. The page later appeared in the Google search results:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_indexation.png&quot; alt=&quot;&quot; width=&quot;608&quot; height=&quot;318&quot; class=&quot;aligncenter size-full wp-image-845&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_indexation.png 608w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/revolut_indexation-300x157.png 300w&quot; sizes=&quot;(max-width: 608px) 100vw, 608px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This demonstrated that Google was identifying and crawling injected links. Furthermore, Google confirms that Javascript links are treated identically to HTML links (thanks &lt;a href=&quot;https://twitter.com/joelmesherghi&quot;&gt;Joel Mesherghi&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/google_links.png&quot; alt=&quot;&quot; width=&quot;681&quot; height=&quot;323&quot; class=&quot;aligncenter size-full wp-image-848&quot; srcset=&quot;https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/google_links.png 681w, https://www.tomanthony.co.uk/blog/wp-content/uploads/2019/04/google_links-300x142.png 300w&quot; sizes=&quot;(max-width: 681px) 100vw, 681px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All of this demonstrates that there is potential to manipulate the Google search results.&lt;/strong&gt; However, I was unsure how to test this without actually impacting legitimate search results, so I stopped where I was (I asked Google for permission to do this in a controlled fashion a few days back, but not had an answer just yet).&lt;/p&gt;
&lt;h2&gt;How could this be abused?&lt;/h2&gt;
&lt;p&gt;The obvious attack vector here is to inject links into other websites to manipulate the search results – a few links from prominent sites can make a very dramatic difference to search performance. The &lt;a href=&quot;https://www.openbugbounty.org/&quot;&gt;https://www.openbugbounty.org/&lt;/a&gt; lists more than &lt;strong&gt;125,000 un-patched XSS vulnerabilities&lt;/strong&gt;. This included 260 .gov domains, 971 .edu domains, and 195 of the top 500 domains (as ranked by the &lt;a href=&quot;https://majestic.com/reports/majestic-million&quot;&gt;Majestic Million&lt;/a&gt; top million sites.&lt;/p&gt;
&lt;p&gt;A second attack vector is to create malicious pages (maybe redirecting people to a malicious checkout, or directing visitors to a competing product) which would be crawled and indexed by Google. This content could even drive featured snippets and appear directly in the search results. Firefox &lt;a href=&quot;https://wiki.mozilla.org/Security/Features/XSS_Filter&quot;&gt;doesn’t yet&lt;/a&gt; have adequate XSS protection, so this pages would load for Google users searching with Firefox.&lt;/p&gt;
&lt;h2&gt;Defence&lt;/h2&gt;
&lt;p&gt;The most obvious way to defend against this is to take security seriously and try to ensure you don’t have XSS vulnerabilities on your site. However, given then numbers from OpenBugBounty above, it is clear that that is more difficult that it sounds – which is the exact reason that Google added the XSS Auditor to Chrome!&lt;/p&gt;
&lt;p&gt;One quick thing you can do is check your server logs and search for URLs that have terms such as ‘script’ in them, indicating a possible XSS attempt.&lt;/p&gt;
&lt;h2&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;This exploit is a combination of existing issues, but combine to form an zero-day exploit that has potential to be very harmful for Google users. I reported the issue to Google back on November 2018, but they have not confirmed the issue from their side or made any headway addressing it. They cited “difficulties in communication with the team investigating”, which felt a lot like what happened during the report of &lt;a href=&quot;https://www.tomanthony.co.uk/blog/google-xml-sitemap-auth-bypass-black-hat-seo-bug-bounty/&quot;&gt;XML Sitemaps exploit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My impression is that if a security issue affects a not commonly affected part of Google, then the internal lines of communication are not well oiled. It was March when I got the first details, when Google let me know “that our existing protection mechanisms should be able to prevent this type of abuse but the team is still running checks to validate this” – which didn’t agree with the evidence. I re-ran some of my tests and didn’t see a difference. The security team themselves were very responsive, as usual, but seemingly had no way to move things forward unfortunately.&lt;/p&gt;
&lt;p&gt;It was 140 days after the report when I let Google know I’d be publicly disclosing the vulnerability, given the lack of movement and the fact that this could already be impacting both Google search users, as well as website owners and advertisers. To their credit, Google didn’t attempt to dissuade me and asked me to simply to use my best judgement in what I publish.&lt;/p&gt;
&lt;p&gt;If you have any questions, comments or information you can find me on Twitter at &lt;a href=&quot;https://twitter.com/TomAnthonySEO&quot;&gt;@TomAnthonySEO&lt;/a&gt;, or if you are interested in consulting for technical/specialised SEO, you can contact me via &lt;a href=&quot;https://www.distilled.net/&quot;&gt;Distilled&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Disclosure Timeline&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;3rd November 2018 – I filed the initial bug report.&lt;/li&gt;
&lt;li&gt;Over the next few weeks/months we went back and forth a bit.&lt;/li&gt;
&lt;li&gt;11th February 2019 – Google responded letting me know they were “surfacing some difficulties in communication with the team investigating”&lt;/li&gt;
&lt;li&gt;17th April 2018 – Google confirmed they have no immediate plans to fix this. I believe this is probably because they are preparing to release a new build of Googlebot shortly (I wonder if this was why the back and forth was slow – they were hoping to release the update?)&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 19 Jul 2019 09:43:04 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tomanthony.co.uk/blog/xss-attacks-googlebot-index-manipulation/</dc:identifier>
</item>
<item>
<title>A personal story about 10× development</title>
<link>http://nibblestew.blogspot.com/2019/07/a-personal-story-about-10-development.html</link>
<guid isPermaLink="true" >http://nibblestew.blogspot.com/2019/07/a-personal-story-about-10-development.html</guid>
<description>During the last few days there has been an ongoing Twitter storm about 10× developers. And like all the ones before it (and all the future ones that will inevitably happen) the debate immediately devolved into name calling and all the other things you'd except from Twitter fights. This blog post is not about that. Instead it is about a personal experience about productivity that I had to experience closer than I would have liked.&lt;p&gt;Some years ago I was working for company X on product Y. All in all it was quite a nice experience. We had a small team working on a code base that was pretty good. It had nice tests, not too many bugs, and when issues did arise they were usually easy to fix. Eventually the project was deemed good enough and we were transferred to work on different projects.&lt;/p&gt;&lt;p&gt;I have no idea what our &quot;industry standard performance multiplier&quot; was when we worked on that project, but for the sake of argument let's call it 1×.&lt;/p&gt;&lt;p&gt;The project I got transferred to was the thing of nightmares. It was a C++ project and all the bad things that have ever been said about C++ were true about that code base. There was not much code but it was utterly incomprehensible. There were massively deep inheritance hierarchies, , compilation speed was measured in minutes for even the most trivial changes, and so on. It was managed by an architecture astronaut that, as one is wont to do, rewrote existing mature libraries as header only template libraries that were buggy and untested (one could even say untestable).&lt;/p&gt;&lt;p&gt;Thus overnight I went from being a 1× down to being a 0.1× or possibly even a 0.01× developer. Simply trying to understand what a specific function was &lt;em&gt;supposed&lt;/em&gt; to do took hours. There was, naturally, a big product launch coming up so we needed to get things finished quickly. All in all it was a stressful, frustrating and unpleasant situation to be in. And that was not the worst of it.&lt;/p&gt;&lt;p&gt;After a few weeks my manager wanted to talk to me in private. He was very concerned about the fact that I had not achieved any visible progress for a while. Then I explained to him in detail all the problems in the current project. I even demonstrated how compiling a simple helloworld-level program with the frameworks we had to use took tens of seconds on the beefiest i7 desktop machine I had available. He did not seem to be able to grasp any of that as his only response was &quot;but you used to be so productive in your previous project&quot;. Shortly thereafter the same boss started giving me not-al-all-thinly-veiled accusations that I was just slacking off and that this could lead to serious reprimands.&lt;/p&gt;&lt;p&gt;This story does not have a happy ending. The project eventually failed (due to completely different reasons, though), money was squandered and almost everyone involved got fired. In the aftermath I seriously considered getting out of the software engineering business altogether. The entire experience had been so miserable that becoming a 0× developer was seriously tempting.&lt;br/&gt;&lt;/p&gt;&lt;h2&gt;Is there something we can learn from this?&lt;/h2&gt;&lt;div&gt;The &quot;×ness&quot; of any developer does not exist in a vacuum but depends on many organizational things. The most obvious one is tooling. If you have a CI where tests take 30 minutes to run or your developers have underpowered old laptops, everyone's performance goes down. In fact, the overall health of the code base probably has a bigger effect on developer productivity than all developers' skills combined.&lt;/div&gt;

&lt;div&gt;But even more important than technical issues are things that promote healthy team dynamics. These include things like blameless postmortems, openness to ideas from everyone, permission to try new things even if they may fail, stern weeding out of jerk behaviour and, ultimately, trust.&lt;/div&gt;

&lt;div&gt;If you work on getting all of these things in your working environment then you may find that you find yourself with a 10× team. And if you do, the entire concept of a single 10× developer becomes meaningless.&lt;/div&gt;

</description>
<pubDate>Fri, 19 Jul 2019 09:40:35 +0000</pubDate>
<dc:creator>bkor</dc:creator>
<og:url>http://nibblestew.blogspot.com/2019/07/a-personal-story-about-10-development.html</og:url>
<og:title>A personal story about 10× development</og:title>
<og:description>During the last few days there has been an ongoing Twitter storm about 10× developers. And like all the ones before it (and all the future o...</og:description>
<dc:language>fi</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://nibblestew.blogspot.com/2019/07/a-personal-story-about-10-development.html</dc:identifier>
</item>
</channel>
</rss>