<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>What Is Nix?</title>
<link>https://engineering.shopify.com/blogs/engineering/what-is-nix</link>
<guid isPermaLink="true" >https://engineering.shopify.com/blogs/engineering/what-is-nix</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Join us on May 25, 2020 at 1:00 pm EST for ShipIt! presents How Shopify Uses Nix, a discussion about how Shopify is using Nix to rebuild our developer tooling with Burke Libbey. &lt;a href=&quot;https://engineering.shopify.com/blogs/engineering/what-is-nix#virtual&quot;&gt;Please register.&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over the past year and a bit, Shopify has been progressively rebuilding parts of our developer tooling with Nix. I initially planned to write about how we're using Nix now, and what we're going to do with it in the future (spoiler: everything?). However, I realize that most of you won't have a really clear handle on what Nix is, and I haven't found a lot of the introductory material to convey a clear impression very quickly, so this article is going to be a crash course in what Nix is, how to think about it, and why it's such a valuable and paradigm-shifting piece of technology.&lt;/p&gt;
&lt;p&gt;There are a few places in this post where I will lie to you in subtle ways to gloss over all of the small nuances and exceptions to rules. I'm not going to call these out. I'm just trying to build a general understanding. At the end of this post, you should have the basic conceptual scaffolding you need in order to think about Nix. Let's dive in!&lt;/p&gt;

&lt;p&gt;The most basic, fundamental idea behind Nix is this:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everything on your computer implicitly depends on a whole bunch of other things on your computer.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;All&lt;/em&gt; software exists in a graph of dependencies&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Most of the time, this graph is &lt;em&gt;implicit&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nix makes this graph &lt;em&gt;explicit&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's get this out of the way up front: Nix is a hard thing to explain.&lt;/p&gt;
&lt;p&gt;There are a few components that you have to understand in order to really &lt;strong&gt;get it&lt;/strong&gt;, and all of their explanations are somewhat interdependent; and, even after explaining all of these building blocks, it still takes a bit of mulling over the implications of how they compose in order for the magic of Nix to really &lt;em&gt;click&lt;/em&gt;. Nevertheless, we'll try, one block at a time.&lt;/p&gt;
&lt;p&gt;The major building blocks, at least in &lt;em&gt;my&lt;/em&gt; mental model of Nix, are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The Nix Store&lt;/li&gt;
&lt;li&gt;Derivations&lt;/li&gt;
&lt;li&gt;Sandboxing&lt;/li&gt;
&lt;li&gt;The Nix Language.&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;The Nix Store&lt;/h2&gt;
&lt;p&gt;The easiest place to start is the Nix Store. Once you've installed Nix, you'll wind up with a directory at &lt;code&gt;/nix/store&lt;/code&gt;, containing a whole bunch of entries that look something like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;3mfcmgmpcqjajpdhfh8pdazmmd4vskns-nix-2.3.3-man/&lt;br/&gt;h9bvv0qpiygnqykn4bf7r3xrxmvqpsrd-nix-2.3.3/&lt;br/&gt;nrb3rkvwz114053yh00r7p2dlc9igp03-nix-2.3.3.drv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This directory, &lt;code&gt;/nix/store&lt;/code&gt;, is a kind of &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_database&quot; target=&quot;_blank&quot; title=&quot;Graph Database on Wikipedia&quot; rel=&quot;noopener noreferrer&quot;&gt;Graph Database&lt;/a&gt;. Each entry (each file or directory directly under &lt;code&gt;/nix/store&lt;/code&gt;) is a Node in that Graph Database, and the relationships between them constitute Edges.&lt;/p&gt;
&lt;p&gt;The only thing that's allowed to write directories and files into &lt;code&gt;/nix/store&lt;/code&gt; is Nix itself, and after Nix writes a Node into this Graph Database, it's completely immutable forever after: Nix guarantees that the contents of a Node doesn't change after it's been created. Further, due to magic that we'll discuss later, the contents of a given Node is guaranteed to be functionally identical to a Node with the same name in some other Graph, regardless of where they're built.&lt;/p&gt;
&lt;p&gt;What, then, is a &quot;relationship between them?&quot; Put another way, what is an Edge? Well, the first part of a Store path (the 32-character-long alphanumeric blob) is a cryptographic hash (of what, we'll discuss later). If a file in some other Store path includes the literal text &quot;&lt;code&gt;h9bvv0qpiygnqykn4bf7r3xrxmvqpsrd-nix-2.3.3&lt;/code&gt;&quot;, that constitutes a graph Edge pointing from the Node containing that text to the Node referred to by that path. Nodes in the Nix store are immutable after they're created, and the Edges they originate are scanned and cached elsewhere when they're first created.&lt;/p&gt;
&lt;p&gt;To demonstrate this linkage, if you run &lt;code&gt;otool -L&lt;/code&gt; (or &lt;code&gt;ldd&lt;/code&gt; on Linux) on the &lt;code&gt;nix&lt;/code&gt; binary, you'll see a number of libraries referenced, and these look like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/nix/store/gk9l41kp852lddrvjx9cfkgxwjs3vls8-libsodium-1.0.16/lib/libsodium.23.dylib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's extracted by &lt;code&gt;otool&lt;/code&gt; or &lt;code&gt;ldd&lt;/code&gt;, but ultimately comes from text embedded in the binary, and Nix sees this too when it determines the Edges directed from this Node.&lt;/p&gt;
&lt;p&gt;Highly astute readers may be skeptical that scanning for literal path references in a Node after it's created is a reliable way to determine a dependency. For now, just take it as given that this, surprisingly, works almost flawlessly in practice.&lt;/p&gt;
&lt;p&gt;To put this into practice, we can demonstrate just how much of a Graph Database this actually is using &lt;code&gt;nix-store --query&lt;/code&gt;. &lt;code&gt;/nix/store&lt;/code&gt; is a tool built in to Nix that interacts directly with the Nix Store, and the &lt;code&gt;--query&lt;/code&gt; mode has a multitude of flags for asking different questions of the Graph Database that is the Store.&lt;/p&gt;
&lt;p&gt;Let's find all of the Nodes that &lt;code&gt;&amp;lt;hash&amp;gt;-nix-2.3.3&lt;/code&gt; has Edges pointing to:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ nix-store --query --references /nix/store/h9bvv0qpiygnqykn4bf7r3xrxmvqpsrd-nix-2.3.3/&lt;br/&gt;/nix/store/fxvxl64g1b336ayhzsrqdcv541zpb6lx-Libsystem-osx-10.12.6&lt;br/&gt;/nix/store/2d0ikpigmr9fi2gx3g3gb0g8mg4f6a0n-xz-5.2.4&lt;br/&gt;/nix/store/gk9l41kp852lddrvjx9cfkgxwjs3vls8-libsodium-1.0.16&lt;br/&gt;...(and 21 more)...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly, we could ask for the Edges pointing to this node using &lt;code&gt;--referers&lt;/code&gt;, or we could ask for the full &lt;a href=&quot;https://en.wikipedia.org/wiki/Transitive_closure#InGraphtheory&quot; target=&quot;_blank&quot; title=&quot;Transitive closure on Wikipedia&quot; rel=&quot;noopener noreferrer&quot;&gt;transitive closure&lt;/a&gt; of Nodes reachable from the starting Node using &lt;code&gt;--requisites&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The transitive closure is an important concept in Nix, but you don't really have to understand the graph theory: An Edge directed from a Node is logically a &lt;strong&gt;dependency&lt;/strong&gt;: if a Node includes a reference to another Node, it &lt;strong&gt;depends&lt;/strong&gt; on that Node. So, the transitive closure (&lt;code&gt;--requisites&lt;/code&gt;) also includes those dependencies' dependencies, and so on recursively, to include the total set of things depended on by a given Node.&lt;/p&gt;
&lt;p&gt;For example, a Ruby application may depend on the result of bundling together all the rubygems specified in the Gemfile. That bundle may depend on the result of installing the Gem &lt;code&gt;nokogiri&lt;/code&gt;, which may depend on libxml2 (which may depend on libc or libSystem). All of these things are present in the transitive closure of the application (&lt;code&gt;--requisites&lt;/code&gt;), but only the gem bundle is a direct reference (&lt;code&gt;--references&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now here's the key thing: This transitive closure of dependencies always exists, even outside of Nix: these things are always dependencies of your application, but normally, your computer is just trusted to have acceptable versions of acceptable libraries in acceptable places. Nix removes these assumptions and makes the whole graph explicit.&lt;/p&gt;
&lt;p&gt;To really drive home the &quot;graphiness&quot; of software dependencies, we can install Ruby via nix (&lt;code&gt;nix-env -iA nixpkgs.ruby&lt;/code&gt;) and then build a graph of all of its dependencies:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nix-store --query --graph $(which ruby) \&lt;br/&gt;| nix run nixpkgs.graphviz -c dot &amp;gt; ruby.svg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Graphiness of Software Dependencies&quot; src=&quot;https://cdn.shopify.com/s/files/1/0779/4361/files/GraphinessofSoftwareDependencies.jpg?v=1589906402&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Graphiness of Software Dependencies&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Derivations&lt;/h2&gt;
&lt;p&gt;The second building block is the Derivation. Above, I offhandedly mentioned that only Nix can write things into the Nix Store, but how does it know what to write? Derivations are the key.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Derivation is a special Node in the Nix store, which tells Nix how to build one or more other Nodes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you list your &lt;code&gt;/nix/store&lt;/code&gt;, you'll see a whole lot of items most likely, but some of them will end in &lt;code&gt;.drv&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/nix/store/ynzfmamryf6lrybjy1zqp1x190l5yiy5-demo.drv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is a Derivation. It's a special format written and read by Nix, which gives build instructions for anything in the Nix store. Just about everything (except Derivations) in the Nix store is put there by building a Derivation.&lt;br/&gt;So what does a Derivation look like?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cat /nix/store/ynzfmamryf6lrybjy1zqp1x190l5yiy5-demo.drv&lt;br/&gt;Derive([(&quot;out&quot;,&quot;/nix/store/76gxh82dqh6gcppm58ppbsi0h5hahj07-demo&quot;,&quot;&quot;,&quot;&quot;)],[],[],&quot;x86_64-darwin&quot;,&quot;/bin/sh&quot;,[&quot;-c&quot;,&quot;echo 'hello world' &amp;gt; $out&quot;],[(&quot;builder&quot;,&quot;/nix/store/5arhyyfgnfs01n1cgaf7s82ckzys3vbg-bash-4.4-p23/bin/bash&quot;),(&quot;name&quot;,&quot;demo&quot;),(&quot;out&quot;,&quot;/nix/store/76gxh82dqh6gcppm58ppbsi0h5hahj07-demo&quot;),(&quot;system&quot;,&quot;x86_64-darwin&quot;)])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's not especially readable, but there's a couple of important concepts to communicate here:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Everything required to build this Derivation is explicitly listed in the file by path (you can see &quot;bash&quot; here, for example).&lt;/li&gt;
&lt;li&gt;The hash component of the Derivation's path in the Nix Store is essentially a hash of the contents of the file.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Since &lt;em&gt;every&lt;/em&gt; direct dependency is mentioned in the contents, and the path is a hash of the contents, that means that if the dependencies and whatever other information the derivation contains don't change, the hash won't change, but if a different version of a dependency is used, the hash changes.&lt;/p&gt;
&lt;p&gt;There are a few different ways to build Derivations. Let's use &lt;code&gt;nix-build&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ nix-build /nix/store/ynzfmamryf6lrybjy1zqp1x190l5yiy5-demo.drv&lt;br/&gt;/nix/store/76gxh82dqh6gcppm58ppbsi0h5hahj07-demo&lt;br/&gt;$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This ran whatever the build instructions were and generated a new path in the Nix Store (a new Node in the Graph Database).&lt;/p&gt;
&lt;p&gt;Take a close look at the hash in the newly-created path. You'll see the same hash in the Derivation contents above. That output path was pre-defined, but not pre-generated. The output path is also a stable hash. You can essentially think of it as being a hash of the derivation and also the name of the output (in this case: &quot;out&quot;; the default output).&lt;/p&gt;
&lt;p&gt;So, if a dependency of the Derivation changes, that changes the hash of the Derivation. It also changes the hashes of all of that Derivation's outputs. This means that changing a dependency of a dependency of a dependency bubbles all the way down the tree, changing the hashes of every Derivation and all those Derivation's outputs that depend on the changed thing, directly or indirectly.&lt;/p&gt;
&lt;p&gt;Let's break apart that unreadable blob of Derivation content from above a little bit.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;outputs&lt;/strong&gt;: What nodes can this build?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inputDrvs&lt;/strong&gt;: Other Derivations that must be built before this one&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inputSrcs&lt;/strong&gt;: Things already in the store on which this build depends&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;platform&lt;/strong&gt;: Is this for macOS? Linux?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;builder&lt;/strong&gt;: What program gets run to do the build?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;args&lt;/strong&gt;: Arguments to pass to that program&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;env&lt;/strong&gt;: Environment variables to set for that program&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Or, to dissect that Derivation:&lt;/p&gt;
&lt;h3&gt;outputs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[(&quot;out&quot;,&quot;/nix/store/76gxh82dqh6gcppm58ppbsi0h5hahj07-demo&quot;,&quot;&quot;,&quot;&quot;)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This Derivation has one output, named &quot;out&quot; (the default name), with some path that would be generated if we would build it.&lt;/p&gt;
&lt;h3&gt;inputDrvs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[ ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is a simple toy derivation, with no &lt;code&gt;inputDrvs&lt;/code&gt;. What this really means is that there are no dependencies, other than the builder. Normally, you would see something more like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[(&quot;/nix/store/4kgf3y9sm84jzcl3k3bn8vzl7fgafpm9-openssh-8.1p1.drv&quot;,[&quot;out&quot;])]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This indicates a dependency on the OpenSSH Derivation's default output.&lt;/p&gt;
&lt;h3&gt;inputSrcs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[ ]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Again, we have a very simple toy Derivation! Commonly, you will see:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[&quot;/nix/store/m00k69wikx3p7av28s0m40z9ipahw5ky-builder.sh&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It's not really critical to the mental model, but Nix can also copy static files into the Nix Store in some limited ways, and these aren't really constructed by Derivations. This field just lists any static files in the Nix store on which this Derivation depends.&lt;/p&gt;
&lt;h3&gt;platform&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&quot;x86_64-darwin&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nix runs on multiple platforms and CPU architectures, and often the output of compilers will only work on one of these, so the derivation needs to indicate which architecture it's intended for.&lt;/p&gt;
&lt;p&gt;There's actually an important point here: Nix Store entries can be copied around between machines without concern, because &lt;strong&gt;all&lt;/strong&gt; of their dependencies are explicit. The CPU details are a dependency in many cases.&lt;/p&gt;
&lt;h3&gt;builder&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&quot;/nix/store/5arhyyfgnfs01n1cgaf7s82ckzys3vbg-bash-4.4-p23/bin/bash&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This program is executed with &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;env&lt;/code&gt;, and is expected to generate the &lt;code&gt;output&lt;/code&gt;(s).&lt;/p&gt;
&lt;h3&gt;args&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[&quot;-c&quot;,&quot;echo 'hello world' &amp;gt; $out&quot;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can see that the output name (&quot;out&quot;) is being used as a variable here. We're running, basically, &lt;code&gt;bash -c &quot;echo 'hello world' &amp;gt; $out&quot;&lt;/code&gt;. This should just be writing the text &quot;hello world&quot; into the Derivation output.&lt;/p&gt;
&lt;h3&gt;env&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[(&quot;builder&quot;,&quot;/bin/sh&quot;),&lt;br/&gt;(&quot;name&quot;,&quot;demo&quot;),&lt;br/&gt;(&quot;out&quot;,&quot;/nix/store/76gxh82dqh6gcppm58ppbsi0h5hahj07-demo&quot;),(&quot;system&quot;,&quot;x86_64-darwin&quot;)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each of these is set as an Environment Variable before calling the &lt;code&gt;builder&lt;/code&gt;, so you can see how we got that &lt;code&gt;$out&lt;/code&gt; variable above, and note that it's the same as the path given in &lt;code&gt;output&lt;/code&gt;s above.&lt;/p&gt;
&lt;h3&gt;Derivation in Summary&lt;/h3&gt;
&lt;p&gt;So, if we build that Derivation, let's see what the output is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ nix-build /nix/store/ynzfmamryf6lrybjy1zqp1x190l5yiy5-demo.drv&lt;br/&gt;/nix/store/76gxh82dqh6gcppm58ppbsi0h5hahj07-demo&lt;br/&gt;$ cat /nix/store/76gxh82dqh6gcppm58ppbsi0h5hahj07-demo&lt;br/&gt;hello world&lt;br/&gt;$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As we expected, it's &quot;hello world&quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Derivation is a recipe to build some other path in the Nix Store&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After walking through that Derivation in the last section, you may be starting to develop a feel for how explicitly-declared dependencies make it into the build, and how that Graph structure comes together—but what prevents builds from referring to things at undeclared paths, or things that aren't in the Nix store at all?&lt;/p&gt;
&lt;p&gt;Nix does a lot of work to make sure that builds can &lt;em&gt;only&lt;/em&gt; see the Nodes in the Graph which their Derivation has declared, and also, that they don't access things outside of the store.&lt;/p&gt;
&lt;p&gt;A Derivation build simply &lt;strong&gt;cannot&lt;/strong&gt; access anything not declared by the Derivation. This is enforced in a few ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;For the most part, Nix uses patched versions of compilers and linkers that don't try to look in the default locations (&lt;code&gt;/usr/lib&lt;/code&gt;, and so on).&lt;/li&gt;
&lt;li&gt;Nix typically builds Derivations in an actual sandbox that denies access to everything that the build isn't supposed to access.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A Sandbox is created for a Derivation build that gives filesystem read access to—and &lt;strong&gt;only&lt;/strong&gt; to—the paths explicitly mentioned in the Derivation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What this amounts to is that artifacts in the Nix Store essentially &lt;em&gt;can't&lt;/em&gt; depend on anything outside of the Nix Store.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And finally, the block that brings it all together: the Nix Language.&lt;br/&gt;Nix has a custom language used to construct derivations. There's a lot we could talk about here, but there are two major aspects of the language's design to draw attention to. The Nix Language is:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;lazy-evaluated&lt;/li&gt;
&lt;li&gt;(&lt;em&gt;almost&lt;/em&gt;) free of side-effects.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I'll try to explain these by example.&lt;/p&gt;
&lt;h2&gt;Lazy Evaluation&lt;/h2&gt;
&lt;p&gt;Take a look at this code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data = {&lt;br/&gt;  a = 1;&lt;br/&gt;  b = functionThatTakesMinutesToRun 1;&lt;br/&gt;};&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This is Nix code. You can probably figure out what's going on here: we're creating something like a hash table containing keys &quot;a&quot; and &quot;b&quot;, and &quot;b&quot; is the result of calling an expensive function.&lt;/p&gt;
&lt;p&gt;In Nix, this code takes approximately no time to run, because the value of &quot;b&quot; isn't actually evaluated until it's needed. We could even:&lt;/p&gt;
&lt;div&gt;&lt;code&gt;let&lt;br/&gt;  data = {&lt;br/&gt;   a = 1;&lt;br/&gt;   b = functionThatTakesMinutesToRun 1;&lt;br/&gt; };&lt;br/&gt;in data.a&lt;/code&gt;&lt;/div&gt;
&lt;p&gt;Here, we're creating the table (technically called an Attribute Set in Nix), and extracting &quot;a&quot; from it.&lt;/p&gt;
&lt;p&gt;This evaluates to &quot;1&quot; almost instantly, without ever running the code that generates &quot;b&quot;.&lt;/p&gt;
&lt;p&gt;Conspicuously absent in the code samples above is any sort of actual work getting done, other than just pushing data around within the Nix language. The reason for this is that the Nix language can’t actually do very much.&lt;/p&gt;
&lt;h2&gt;Free of Side Effects (almost)&lt;/h2&gt;
&lt;p&gt;The Nix language lacks a lot of features you will expect in normal programming languages. It has&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No networking&lt;/li&gt;
&lt;li&gt;No user input&lt;/li&gt;
&lt;li&gt;No file writing&lt;/li&gt;
&lt;li&gt;No output (except limited debug/tracing support).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It doesn't actually &lt;strong&gt;do anything&lt;/strong&gt; at all in terms of interacting with the world…well, except for when you call the &lt;code&gt;derivation&lt;/code&gt; function.&lt;/p&gt;
&lt;h3&gt;One Side Effect&lt;/h3&gt;
&lt;p&gt;The Nix Language has precisely one function with a side effect. When you call &lt;code&gt;derivation&lt;/code&gt; with the right set of arguments, Nix writes out a new &lt;code&gt;&amp;lt;hash&amp;gt;-&amp;lt;name&amp;gt;.drv&lt;/code&gt; file into the Nix Store as a side effect of calling that function.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;derivation {&lt;br/&gt;  name = &quot;demo&quot;;&lt;br/&gt;  builder = &quot;${bash}/bin/bash&quot;;&lt;br/&gt;  args = [ &quot;-c&quot; &quot;echo 'hello world' &amp;gt; $out&quot; ];&lt;br/&gt;  system = &quot;x86_64-darwin&quot;;&lt;br/&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you evaluate this in &lt;code&gt;nix repl&lt;/code&gt;, it will print something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;«derivation /nix/store/ynzfmamryf6lrybjy1zqp1x190l5yiy5-demo.drv»&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That returned object is just the object you passed in (with &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;builder&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt;, and &lt;code&gt;system&lt;/code&gt; keys), but with a few extra fields (including &lt;code&gt;drvPath&lt;/code&gt;, which is what got printed after the call to &lt;code&gt;derivation&lt;/code&gt;), but importantly, that path in the Nix store was actually created.&lt;/p&gt;
&lt;p&gt;It's worth emphasizing again: This is basically the only thing that the Nix Language can &lt;strong&gt;actually do&lt;/strong&gt;. There's a whole lot of pushing data and functions around in Nix code, but it all boils down to calls to &lt;code&gt;derivation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that we referred to &lt;code&gt;${bash}&lt;/code&gt; in that Derivation. This is actually the Derivation from earlier in this article, and that variable substitution is actually how Derivations depend on each other. &lt;strong&gt;The variable &lt;code&gt;bash&lt;/code&gt; refers to another call to &lt;code&gt;derivation&lt;/code&gt;, which generates instructions to build &lt;code&gt;bash&lt;/code&gt; when it's evaluated&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Nix Language doesn't ever actually &lt;strong&gt;build&lt;/strong&gt; anything. It creates Derivations, and later, other Nix tools read those derivations and build the outputs. &lt;strong&gt;The Nix Language is just a Domain Specific Language for creating Derivations&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Nixpkgs: Derivation and Lazy Evaluation&lt;/h3&gt;
&lt;p&gt;Nixpkgs is the global default package repository for Nix, but it's very unlike what you probably think of when you hear &quot;package repository.&quot;&lt;/p&gt;
&lt;p&gt;Nixpkgs is a single Nix program. It makes use of the fact that the Nix Language is Lazy Evaluated, and includes many, many calls to &lt;code&gt;derivation&lt;/code&gt;. The (simplified but) basic structure of Nixpkgs is something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&lt;br/&gt;  ruby = derivation { ... };&lt;br/&gt;  python = derivation { ... };&lt;br/&gt;  nodejs = derivation { ... };&lt;br/&gt;  …&lt;br/&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In order to build “ruby”, various tools just force Nix to evaluate the “ruby” attribute of that Attribute Set, which calls &lt;code&gt;derivation&lt;/code&gt;, generating the Derivation for Ruby into the Nix Store and returning the path that was built. Then, the tool runs something like &lt;code&gt;nix-build&lt;/code&gt; on that path to generate the output.&lt;/p&gt;

&lt;p&gt;Well, it takes a lot more words than I can write here—and probably some amount of hands-on experimentation—to let you really, viscerally, feel the paradigm shift that Nix enables, but hopefully I’ve given you a taste.&lt;/p&gt;
&lt;p&gt;If you’re looking for more Nix content, I’m currently re-releasing a series of screencasts I recorded for developers at Shopify to the public. Check out &lt;a href=&quot;https://www.youtube.com/playlist?list=PLRGI9KQ3_HP_OFRG6R-p4iFgMSK1t5BHs&quot; target=&quot;_blank&quot; title=&quot;Nixology by Burke Libby on YouTube&quot; rel=&quot;noopener noreferrer&quot;&gt;Nixology on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also join me for a discussion about how Shopify is using Nix to rebuild our developer tooling. I’ll cover some of this content again, and show off some of the tooling we actually use on a day-to-day basis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What&lt;/strong&gt;: ShipIt! Presents: How Shopify Uses Nix&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt;: May 25, 2020 at 1:00 pm EST&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please register&lt;/strong&gt; at &lt;a href=&quot;https://event.webinarjam.com/register/306/w62kqh16cmslsx&quot; target=&quot;_blank&quot; title=&quot;ShipIt! Presents: How Shopify Uses Nix&quot; rel=&quot;noopener noreferrer&quot;&gt;https://event.webinarjam.com/register/306/w62kqh16cmslsx&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;If you want to work on Nix, come join my team! We're always hiring, so v&lt;span&gt;isit our &lt;/span&gt;&lt;a href=&quot;http://www.shopify.com/careers/specialties/engineering?itcat=EngBlog&amp;amp;itterm=Post&quot; target=&quot;_blank&quot; title=&quot;Engineering Careers at Shopify&quot; rel=&quot;noopener noreferrer&quot;&gt;Engineering career page&lt;/a&gt;&lt;span&gt; to find out about our open positions. &lt;a class=&quot;body-link&quot; href=&quot;https://www.shopify.com/careers/covid19?itcat=EngBlog&amp;amp;itterm=Cov&quot; target=&quot;_blank&quot; title=&quot;Learn about the actions we’re taking as we continue to hire during COVID‑19&quot; rel=&quot;noopener noreferrer&quot;&gt;Learn about the actions we’re taking as we continue to hire during COVID‑19&lt;/a&gt;&lt;/span&gt; &lt;/p&gt;
</description>
<pubDate>Wed, 20 May 2020 21:01:38 +0000</pubDate>
<dc:creator>elsewhen</dc:creator>
<og:url>https://engineering.shopify.com/blogs/engineering/what-is-nix</og:url>
<og:title>What Is Nix</og:title>
<og:type>article</og:type>
<og:description></og:description>
<og:image>http://cdn.shopify.com/s/files/1/0779/4361/articles/Screen_Shot_2020-05-19_at_13.24_1024x1024.jpg?v=1589909701</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://engineering.shopify.com/blogs/engineering/what-is-nix</dc:identifier>
</item>
<item>
<title>Sell Yourself, Sell Your Work</title>
<link>https://www.solipsys.co.uk/new/SellYourselfSellYourWork.html?te20hn</link>
<guid isPermaLink="true" >https://www.solipsys.co.uk/new/SellYourselfSellYourWork.html?te20hn</guid>
<description>&lt;h2&gt;Sell yourself, Sell Your Work ...&lt;/h2&gt;
 Doing technically brilliant work may be enough for your personal gratification, but you should never think it's enough. If you lock yourself in a room and do the most marvellous work but don't tell anyone, then no one will know, no one will benefit, and the work will be lost. You may as well not have bothered. For the world to benefit from your work, and therefore for you to benefit fully from your work, you have to make it known.
&lt;p&gt;In short, you have to advertise.&lt;/p&gt;
&lt;p&gt;I've dealt with any number of technically brilliant people who produce outstanding work. The majority of them never bothered to write down their work and communicate it to others - report writing is too boring, uninteresting, and hard. And irrelevant. Or so they thought.&lt;/p&gt;
&lt;p&gt;But if you've done great work, if you've produced superb software or fixed a fault with an aeroplane or investigated a problem, without telling anyone you may as well not have bothered. You have to write, you have to tell people, and you have to do so in a way that they will take notice.&lt;/p&gt;
&lt;p&gt;You don't necessarily need to make it flashy, whizzy, colourful and animated, but you do have to present it well. Spelling errors may not obscure the meaning, but you will lose some of your audience. Poor punctuation may not matter to you, but your intended audience may be put off by it. Muddied writing with no clear purpose makes it hard for the reader to understand your point.&lt;/p&gt;
&lt;p&gt;Write clearly and concisely, however, and your work may well save others' time and effort. And gain you reputation.&lt;/p&gt;
&lt;table cellpadding=&quot;5&quot; align=&quot;right&quot; width=&quot;50%&quot; border=&quot;1&quot; readability=&quot;11.129297994269&quot;&gt;&lt;tr readability=&quot;37.742836676218&quot;&gt;&lt;td readability=&quot;33.871776504298&quot;&gt;Richard W Hamming wrote about one's work:
&lt;p&gt;... you can either do it in such a fashion that people can indeed build on what you've done, or you can do it in such a fashion that the next person has to essentially duplicate again what you've done ...&lt;/p&gt;
&lt;p&gt;... it is not sufficient to do a job, you have to sell it. &quot;Selling&quot; to a scientist is an awkward thing to do. It's very ugly; you shouldn't have to do it. The world is supposed to be waiting, and when you do something great, they should rush out and welcome it. But the fact is everyone is busy with their own work. You must present it so well that they will set aside what they are doing, look at what you've done, read it, and come back and say, &quot;Yes, that was good.&quot;&lt;/p&gt;
&lt;p&gt;... ask why you read some articles and not others. You had better write your report so when it is published ... as the readers are turning the pages they won't just turn your pages but they will stop and read yours. If they don't stop and read it, you won't get credit.&lt;/p&gt;
&lt;p&gt;You have to learn to write clearly and well so that people will read it, you must learn to give reasonably formal talks, and you also must learn to give informal talks.&lt;/p&gt;
&lt;p&gt;From &quot;You and Your Research&quot;.&lt;/p&gt;
&lt;hr /&gt;
For reference, some of Hamming's work includes Hamming codes, the Hamming matrix, the Hamming window, Hamming numbers, the Hamming bound, and the Hamming distance.
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_Hamming&quot;&gt;https://en.wikipedia.org/wiki/Richard_Hamming&lt;/a&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
It seems crazy to require that technically talented people should be forced to spend time doing something - report writing - at which they're not gifted, but how else can the world benefit from their brilliance? Without communicating their ideas, their work is lost and might never have been.
&lt;p&gt;Of course, this is one of the benefits of being an entrepreneur or the founder of a business. The benefits of your work are there to be seen - you don't have to play the office politics of constantly justifying your existence. If you don't have customers, or if you don't have advertisers, then you won't survive. If you do have customers, or you do have advertisers, then your existence is justified by the work you've done.&lt;/p&gt;
&lt;p&gt;But you still have to sell! You now have to sell your company's product or service, you now have to get known so that people will start to use your product or service, or people will constantly visit your website, which then attracts advertising. Whatever, you need to sell! A company lives and dies by what it sells.&lt;/p&gt;
&lt;p&gt;Some people say that the sole purpose of a company is to make money. Others are more idealistic and say that it's to make the world better, or to make their employees' lives better, or some other goal. But without making money, everything else is moot.&lt;/p&gt;
&lt;p&gt;But the word &quot;sell&quot; doesn't necessarily mean what you think it means. Richard W. Hamming wrote about this in his talk entitled &quot;You and Your Research&quot;, given as a Bell Communications Research Colloquium Seminar on 1986/03/07. The side-box is a small excerpt from this talk, transcriptions of which can easily be found on-line.&lt;/p&gt;
&lt;p&gt;So let the world benefit from your work.&lt;/p&gt;
&lt;hr /&gt;&lt;center&gt;
&lt;hr /&gt;&lt;center&gt;
&lt;/center&gt;
&lt;hr /&gt;&lt;h2&gt;Send us a comment ...&lt;/h2&gt;


&lt;/center&gt;
</description>
<pubDate>Wed, 20 May 2020 18:43:31 +0000</pubDate>
<dc:creator>ColinWright</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.solipsys.co.uk/new/SellYourselfSellYourWork.html?te20hn</dc:identifier>
</item>
<item>
<title>Surviving Depression</title>
<link>https://vishnu.tech/posts/surviving-depression/</link>
<guid isPermaLink="true" >https://vishnu.tech/posts/surviving-depression/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/fonts.css&quot; type=&quot;text/css&quot;/&gt;&lt;title&gt;Vishnu Mohandas&lt;/title&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; href=&quot;/assets/img/favicon.ico&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.8.2/css/all.css&quot; integrity=&quot;sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay&quot; crossorigin=&quot;anonymous&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;122.84400248602&quot;&gt;
&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://sa.vishnu.tech/noscript.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;

&lt;p class=&quot;post-meta&quot;&gt;&lt;time class=&quot;timestamp&quot; itemprop=&quot;datePublished&quot;&gt;May 14, 2020&lt;/time&gt;&lt;/p&gt;
&lt;h3 id=&quot;prologue&quot;&gt;Prologue&lt;/h3&gt;
&lt;p&gt;Profound sadness is what I have experienced for most part of the last decade. It was easy to close my eyes and let myself spiral down into a bottomless pit. Ceasing to exist was not an option given the dependencies I had let create, and the wonderful people who would be left hurt.&lt;/p&gt;
&lt;p&gt;I had to exist.&lt;/p&gt;
&lt;p&gt;It had taken me a few years to recognize/acknowledge the suffering. Once I did, I sought help from a few psychiatrists and psychologists. The former gave me happy pills &lt;em&gt;(Mirtazapine, Venlafaxine, Escitalopram, …)&lt;/em&gt;, that numbed my senses, which was nice, but came with unpleasant side effects. Also, the relief was temporary and I’d max out the dosage in a few weeks. I was impatient with the latter. To be helpful, they needed sufficient context about why I am the way I am, and sharing that information over hour long sessions spread across weeks was an act of faith I did not want to commit to.&lt;/p&gt;
&lt;p&gt;I spent a lot of time lurking and asking questions on subreddits and HackerNews hoping to draw inspiration from stories of successful recoveries. My inability to find anything relatable made things worse.&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;hello-world&quot;&gt;Hello, world.&lt;/h3&gt;
&lt;p&gt;It’s been over a year since I started trying to fix things for myself. I’m better now. It’s hard to call myself “happy” (what is happiness anyway?), but there’s a lack of sadness, and that to me is a great state to be in.&lt;/p&gt;
&lt;p&gt;This is the first personal blog post that I’m ever writing, in hopes that maybe it might resonate with or in the best case inspire someone stuck in a similar situation.&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;what-worked-for-me&quot;&gt;What worked for me.&lt;/h3&gt;
&lt;p&gt;I set aside hours each day to do nothing. In some sense, this was meditation. Except, I did not force myself to not think. I wanted to get comfortable with the voice in my head. I would sit, lie down or walk while paying attention to my body (the heartbeat, the breath, the funny noises my stomach made), and the physical world outside (there were so many beautiful things to trip on). It hurt at first, I would be consumed by self pity and loathing. But it got easier and quieter with time.&lt;/p&gt;
&lt;p&gt;I read about &lt;a href=&quot;https://duckduckgo.com/?q=cognitive+behavioral+therapy&quot; target=&quot;_blank&quot;&gt;Cognitive Behavioral Therapy&lt;/a&gt;, and put some parts of it to practice. I wrote down what my core problems were, and spent time writing and reflecting about why they hurt as much as they did, and about the baby steps I could take to improve things. Some of them were selfish, like cutting out people who were energy sinks. Some of them were necessary, like exercising (which I still don’t enjoy to be honest, but is now a part of my morning routine). It took some time to condition myself to spend brain-cycles only on the solutions to the problems rather than the problems themselves. Writing, like always, helped.&lt;/p&gt;
&lt;p&gt;I opened up to a few friends about what I was going through. I felt the need to clarify that sympathy or attention was not what I wanted. Most of them could not relate and some were surprised given how “happy” I’ve always seemed. But they all understood. These conversations were free therapy/rubber-duckying sessions that helped me gain clarity.&lt;/p&gt;
&lt;p&gt;To reduce external dependencies, I restarted hobbies that I had moved on from. I went back to listening to Carnatic concerts, fiddling with the violin, shipping more code at work and playing Counter Strike (apologies to the many teammates that I let down while blaming the lag, it was my poor reflexes all along). I suddenly had a bunch of little things to look forward to doing each day.&lt;/p&gt;
&lt;p&gt;I made a Trello board with lists of&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;wishes that had become a reality (like getting to work at Google and the 50% discount I got on the cheese cake at Coop one night).&lt;/li&gt;
&lt;li&gt;wishes that were yet to be fulfilled (like watching the northern lights with my wife and taking my parents on a Euro-trip).&lt;/li&gt;
&lt;li&gt;people who I knew loved me unconditionally, and would miss me if I were gone and vice-versa.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This Trello board was pinned to my browser across all workstations and would occasionally pop up as I cycled through tabs. When it did pop up, it was hard not to feel grateful.&lt;/p&gt;
&lt;p&gt;Lastly, I treated myself. I was privileged enough to afford most of the things I wanted to do, like buying that cheese cake at Coop even without the discount and quitting my job and moving back home. It was refreshing to indulge in the harmless things that felt right without overthinking.&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h3&gt;
&lt;p&gt;Once I stopped letting things stagnate, it became easier to internalize that I was not helpless. I’m now surprised by how with some patience, I could rewire my brain.&lt;/p&gt;
&lt;p&gt;I don’t know if what worked for me will work for someone else, given how we are shaped by and stuck in different worlds. But hopefully the fact that things did get better for me will inspire you to stay and figure things out.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;P.S: If you ever need a rubber ducky, please write to me at vishnu@vishnu.tech. I will positively respond.&lt;/em&gt;&lt;/p&gt;

&lt;footer&gt;&lt;hr/&gt;
&lt;/footer&gt;&lt;/body&gt;</description>
<pubDate>Wed, 20 May 2020 18:38:56 +0000</pubDate>
<dc:creator>vishnumohandas</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://vishnu.tech/posts/surviving-depression/</dc:identifier>
</item>
<item>
<title>EA will be releasing the C&amp;C Tiberian Dawn and Red Alert source code under GPL3</title>
<link>https://www.reddit.com/r/commandandconquer/comments/gnevp8/remaster_update_and_open_source_mod_support/fr97x9x/</link>
<guid isPermaLink="true" >https://www.reddit.com/r/commandandconquer/comments/gnevp8/remaster_update_and_open_source_mod_support/fr97x9x/</guid>
<description>&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Fellow Command &amp;amp; Conquer fans,&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Since the announcement of the Remastered Collection, one of the top questions from the community has been if the game would provide Mod Support. Given the incredible C&amp;amp;C community projects over the past two decades, we appreciated how important this was going to be for the Remastered Collection. It’s time to finally answer the question around Mod Support, but it first requires the reveal of a special surprise for the community.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Today we are proud to announce that alongside the launch of the Remastered Collection, Electronic Arts will be releasing the TiberianDawn.dll and RedAlert.dll and their corresponding source code under the GPL version 3.0 license. This is a key moment for Electronic Arts, the C&amp;amp;C community, and the gaming industry, as we believe this will be one of the first major RTS franchises to open source their source code under the GPL. It’s worth noting this initiative is the direct result of a collaboration between some of the community council members and our teams at EA. After discussing with the council members, we made the decision to go with the GPL license to ensure compatibility with projects like CnCNet and Open RA. Our goal was to deliver the source code in a way that would be truly beneficial for the community, and we hope this will enable amazing community projects for years to come.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;So, what does it mean for Mod Support within the Remastered Collection? Along with the inclusion of a new Map Editor, these open-source DLLs should assist users to design maps, create custom units, replace art, alter gameplay logic, and edit data. The community council has already been playing with the source code and are posting some fun experiments in our Discord channel. But to showcase a tangible example of what you can do with the software, Petroglyph has actually created a new modded unit to play with. So we asked a fun question - “What would the Brotherhood of Nod do if they captured the Mammoth Tank?” Well, one guess is they’d replace the turret with a giant artillery cannon and have it fire tactical nukes! Thus the Nuke Tank was born. This is a unit which is fully playable in the game via a mod (seen in the screenshot above), and we hope to have it ready to play and serve as a learning example when the game launches.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Alongside Mod Support, I wanted to be transparent and address a feature which many of you have also been passionate about, which is LAN Play. Earlier this year, we had every intention of including LAN Play in the launch version of the game, but sadly this feature did not make it in time. Unfortunately LAN Play became the key impact of the Covid-19 situation as we realized the challenge of developing / testing a “local area network” feature in a workplace time of social distancing. We understand this feature is vital as both an avenue to play mods in multiplayer, and also to serve as a backup in case the online systems are ever down. We’re bummed this one got away, and will continue to keep this on our priority list going forward.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Now in terms of discovering user content, we wanted to take full advantage of the PC platforms to streamline this process. For Steam players, we’re utilizing the Steam Workshop for sharing both maps and mods. Players can subscribe to maps and mods directly in the game’s Community Hub within Steam, or utilize in-game menus to browse / download content as well. Origin players can use the same in-game process for downloading maps but will need to manually install mods into their respective folders outside the game. For both versions, once you’re in the game, you may navigate to the Options / Mods tab where you can then activate the mod. We’re aiming to put together further documentation on uploading content and the entire UGC process around the launch window.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Overall, we are incredibly excited to see what the community creates over the coming months. We anticipate some fantastic content for the Remastered Collection itself, some great updates in current community projects as they incorporate the source code, and perhaps we’ll even see some new RTS projects now made possible with the source code under the GPL. One final note we want to emphasize - we’ve done our best to bug fix and prepare these UGC systems for launch, but we have no doubt that once thousands of you begin creating and sharing content, some quirks will be discovered. Please continue to share your experience once the game launches, and let us know how we can continue to improve these tools for your benefit.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;We look forward to seeing all of you on the battlefield in less than three weeks, and in the meantime please stay healthy, safe, and thanks for all your support and feedback.&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Cheers,&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;Jim Vessella&lt;/p&gt;
&lt;p class=&quot;_1qeIAgB0cPwnLhDF9XSiJM&quot;&gt;&lt;em class=&quot;_7s4syPYtk5hfUIjySXcRE&quot;&gt;Jimtern&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 20 May 2020 18:12:22 +0000</pubDate>
<dc:creator>haunter</dc:creator>
<og:title>r/commandandconquer - Comment by u/EA_Jimtern on ”Remaster Update and Open Source / Mod Support”</og:title>
<og:type>website</og:type>
<og:url>https://www.reddit.com/r/commandandconquer/comments/gnevp8/remaster_update_and_open_source_mod_support/fr97x9x</og:url>
<og:description>804 votes and 246 comments so far on Reddit</og:description>
<og:image>https://preview.redd.it/26wxk3fa8yz41.png?auto=webp&amp;s=49309c18d5c7616cb8ee8cb467b4c05db03dc6dc</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reddit.com/r/commandandconquer/comments/gnevp8/remaster_update_and_open_source_mod_support/fr97x9x/</dc:identifier>
</item>
<item>
<title>Lovely Week with Elixir</title>
<link>https://www.ramblingcode.dev/posts/lovely_week_with_elixir/</link>
<guid isPermaLink="true" >https://www.ramblingcode.dev/posts/lovely_week_with_elixir/</guid>
<description>&lt;p&gt;It’s not often I get excited about programming languages since meeting &lt;code&gt;Ruby&lt;/code&gt; in 2015.&lt;/p&gt;
&lt;p&gt;Way before that, drowning in misery of writing university course works in &lt;code&gt;Java&lt;/code&gt;, has pushed me away from development. Ruby’s freedom and expressiveness was what pulled me back, and it’s style has kept me in.&lt;/p&gt;
&lt;p&gt;I was on the lookout for another language to expand my tooling, and came across a few, such as &lt;code&gt;Crystal&lt;/code&gt;, &lt;code&gt;Phyton&lt;/code&gt;, &lt;code&gt;Elixir&lt;/code&gt;. But what’s the point with just another Object Oriented language I thought.&lt;/p&gt;
&lt;p&gt;So, choosing Elixir was a no-brainer, and I will finally taste some of that juicy concurrent abilities with functional code base.&lt;/p&gt;
&lt;p&gt;I can say that a week in, I am already happy with my decision. However, the reason is not mostly associated with my understanding of possibilities, but more because how welcoming the language is alongside following best practices.&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;Ruby&lt;/code&gt;, all I cared was to get something done in fast and stylish way.&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;Elixir&lt;/code&gt;, I took a different approach, not because I chose, but because I have been instructed.&lt;/p&gt;
&lt;p&gt;Let’s go through a few points on how Elixir welcomes newcomers to the language.&lt;/p&gt;
&lt;h2 id=&quot;great-language-documentation-and-resources&quot;&gt;Great language documentation and resources&lt;a href=&quot;https://www.ramblingcode.dev/posts/lovely_week_with_elixir/#great-language-documentation-and-resources&quot; class=&quot;hanchor&quot; arialabel=&quot;Anchor&quot;&gt;⌗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Being a fairly new language, I did not expect that there was such huge amount of quality resources for Elixir. Official documentation itself is &lt;a href=&quot;https://elixir-lang.org/getting-started/introduction.html&quot; target=&quot;_blank&quot;&gt;gold&lt;/a&gt;. This, alongside with &lt;a href=&quot;https://elixirschool.com/en/&quot; target=&quot;_blank&quot;&gt;Elixir School&lt;/a&gt; was all I needed to get going with the language.&lt;/p&gt;
&lt;h2 id=&quot;documentation-as-first-class-citizen&quot;&gt;Documentation as first class citizen&lt;a href=&quot;https://www.ramblingcode.dev/posts/lovely_week_with_elixir/#documentation-as-first-class-citizen&quot; class=&quot;hanchor&quot; arialabel=&quot;Anchor&quot;&gt;⌗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I can not stress the importance of documenting code base enough. However, in most languages you get a feeling of it being an optional thing, thus mostly ignored, or not followed consistently.&lt;/p&gt;
&lt;p&gt;Writing and generating documentation is a breeze in Elixir due to built in tooling. You can even write docs which will be automatically added to your &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html#doctests&quot; target=&quot;_blank&quot;&gt;test suite&lt;/a&gt;&amp;amp;mldr;&lt;/p&gt;
&lt;h2 id=&quot;built-in-code-formatter&quot;&gt;Built in code formatter&lt;a href=&quot;https://www.ramblingcode.dev/posts/lovely_week_with_elixir/#built-in-code-formatter&quot; class=&quot;hanchor&quot; arialabel=&quot;Anchor&quot;&gt;⌗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Not all code bases implement static analyzers on time, and then it just becomes a pain to catch up. (I wrote a &lt;a href=&quot;https://dev.to/gadimbaylisahil/custom-binstub-for-rubocop-to-run-only-on-changed-files-fcg&quot; target=&quot;_blank&quot;&gt;little post&lt;/a&gt; about how you can bring static code analysis at a later stage to your Ruby projects.)&lt;/p&gt;
&lt;p&gt;There are loads of code bases that don’t even know about the existence of consistent formatting.&lt;/p&gt;
&lt;p&gt;As trivial as it may seem, it absolutely isn’t. Consistent styling is not optional, and Elixir helps us to avoid that by providing us with built in code formatter.&lt;/p&gt;
&lt;h2 id=&quot;type-specs-when-you-need-them&quot;&gt;Type specs, when you need them&lt;a href=&quot;https://www.ramblingcode.dev/posts/lovely_week_with_elixir/#type-specs-when-you-need-them&quot; class=&quot;hanchor&quot; arialabel=&quot;Anchor&quot;&gt;⌗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hahaha, I didn’t imagine that one day that I would like to write typespecs again. However, working with mostly financial tools/money, I would rather prefer extra safety when I need it.&lt;/p&gt;
&lt;p&gt;For this we can use type specs over function definitions when we need it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;29&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;  &lt;span&gt;@doc&lt;/span&gt; &lt;span&gt;&quot;&quot;&quot;
&lt;/span&gt;&lt;span&gt;    Authenticates using OAuth.
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    If succesful, returns {:ok, %Client{}}, else {:error, %ApiError{}}.
&lt;/span&gt;&lt;span&gt;  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span&gt;@spec&lt;/span&gt; authenticate(String.t(), String.t()) :: {atom, Client.t() | ApiError.t()}
  def authenticate(grant_type \\ &lt;span&gt;&quot;password&quot;&lt;/span&gt;, scope \\ &lt;span&gt;&quot;forintegration&quot;&lt;/span&gt;) do
    params = %{
      &lt;span&gt;grant_type&lt;/span&gt;: grant_type,
      &lt;span&gt;scope&lt;/span&gt;: scope,
      &lt;span&gt;username&lt;/span&gt;: Application.get_env(&lt;span&gt;:banco_bs2&lt;/span&gt;, &lt;span&gt;:account&lt;/span&gt;).user,
      &lt;span&gt;password&lt;/span&gt;: Application.get_env(&lt;span&gt;:banco_bs2&lt;/span&gt;, &lt;span&gt;:account&lt;/span&gt;).pass
    }

    case HTTPoison.post(&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;@base_url&lt;/span&gt; &amp;lt;&amp;gt; &lt;span&gt;@auth_endpoint&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;, url_encoded(params), headers()) do
      {&lt;span&gt;:ok&lt;/span&gt;, %Response{&lt;span&gt;status_code&lt;/span&gt;: &lt;span&gt;200&lt;/span&gt;, &lt;span&gt;body&lt;/span&gt;: body}} -&amp;gt;
        handle_success(Jason.decode!(body))

      {&lt;span&gt;:ok&lt;/span&gt;, response} -&amp;gt;
        handle_error(response)

      {&lt;span&gt;:error&lt;/span&gt;, %Error{&lt;span&gt;reason&lt;/span&gt;: reason}} -&amp;gt;
        {&lt;span&gt;:error&lt;/span&gt;, %ApiError{&lt;span&gt;message&lt;/span&gt;: &lt;span&gt;&quot;Connection error occured: &lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;reason&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;}}
    end
  end
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your code will still compile as Elixir is not a statically type language, however, it will help you to have more clarity when writing code.&lt;/p&gt;
&lt;p&gt;You may use Dialyzer or other tools to have it statically checked as well.&lt;/p&gt;
&lt;h2 id=&quot;erlang-interoperability&quot;&gt;Erlang interoperability&lt;a href=&quot;https://www.ramblingcode.dev/posts/lovely_week_with_elixir/#erlang-interoperability&quot; class=&quot;hanchor&quot; arialabel=&quot;Anchor&quot;&gt;⌗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It’s great to have access to mature Erlang ecosystem libraries within Elixir, even though it’s use is discouraged.&lt;/p&gt;
&lt;h2 id=&quot;long-way-ahead-&quot;&gt;Long way ahead &amp;gt;&lt;a href=&quot;https://www.ramblingcode.dev/posts/lovely_week_with_elixir/#long-way-ahead-&quot; class=&quot;hanchor&quot; arialabel=&quot;Anchor&quot;&gt;⌗&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am amazed how after a single week, even as a beginner, I can start to write maintainable readable code in a new language and paradigm.&lt;/p&gt;
&lt;p&gt;Let’s see where this all goes. In no means, I will be writing less Ruby, but more Elixir alongside it.&lt;/p&gt;
&lt;p&gt;See you around on &lt;a href=&quot;https://elixir-lang.slack.com&quot; target=&quot;_blank&quot;&gt;Slack channel&lt;/a&gt;!&lt;/p&gt;
</description>
<pubDate>Wed, 20 May 2020 17:58:29 +0000</pubDate>
<dc:creator>sgadimbayli</dc:creator>
<og:type>article</og:type>
<og:title>Lovely week with Elixir :: Rambling Code</og:title>
<og:description>Welcoming best practices in Ruby style</og:description>
<og:url>https://ramblingcode.dev/posts/lovely_week_with_elixir/</og:url>
<og:image>https://ramblingcode.dev/</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ramblingcode.dev/posts/lovely_week_with_elixir/</dc:identifier>
</item>
<item>
<title>Unofficial APIs</title>
<link>https://github.com/Rolstenhouse/unofficial-apis</link>
<guid isPermaLink="true" >https://github.com/Rolstenhouse/unofficial-apis</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://github.com/Rolstenhouse/unofficial-apis&quot;&gt;https://github.com/Rolstenhouse/unofficial-apis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=23248980&quot;&gt;https://news.ycombinator.com/item?id=23248980&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 228&lt;/p&gt;
&lt;p&gt;# Comments: 63&lt;/p&gt;
</description>
<pubDate>Wed, 20 May 2020 16:43:57 +0000</pubDate>
<dc:creator>tornupinside</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8951172?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Rolstenhouse/unofficial-apis</og:title>
<og:url>https://github.com/Rolstenhouse/unofficial-apis</og:url>
<og:description>A collection of unofficial apis. Designed to inspire your next Friday night hack - Rolstenhouse/unofficial-apis</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/Rolstenhouse/unofficial-apis</dc:identifier>
</item>
<item>
<title>Average adult will spend 34 years of their life staring at screens</title>
<link>https://www.studyfinds.org/digital-overload-average-adult-will-spend-34-years-of-their-life-staring-at-screens/</link>
<guid isPermaLink="true" >https://www.studyfinds.org/digital-overload-average-adult-will-spend-34-years-of-their-life-staring-at-screens/</guid>
<description>&lt;p&gt;&lt;strong&gt;NEW YORK —&lt;/strong&gt; Think you spend a lot of time staring at your computer screen? A new survey may surprise even the most screen-addicted tech user. Researchers say over the span of one’s life, the average adult will spend not months, not years, but &lt;em&gt;decades&lt;/em&gt; &lt;a href=&quot;https://www.studyfinds.org/zombie-eating-88-percent-adults-dine-while-staring-at-screen-survey-finds/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;gazing at their digital devices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A poll of 2,000 British adults, commissioned by &lt;a href=&quot;https://www.visiondirect.co.uk/blog/look-after-your-eye-health-at-home&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Vision Direct&lt;/a&gt;, found that the typical person will spend a staggering 34 years looking at phones, computers, or televisions. During the typical adult lifespan, from ages 18-81, researchers say a person will be glued to their screens for over 13 hours a day.&lt;/p&gt;
&lt;p&gt;That adds up to 4,866 hours each year and a stunning 301,733 hours throughout those 62 adult years. Those figures have seen a big spike during the &lt;a href=&quot;https://studyfinds.org/?s=coronavirus&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;coronavirus pandemic&lt;/a&gt;, with the poll finding that video calls have doubled during the quarantine.&lt;/p&gt;
&lt;p&gt;“We’re lucky to have devices that connect us with the outside world,” says Benjamin Dumaine, of Vision Direct, in a statement. “A similar pandemic taking place 30 or 40 years ago would have seen people coping with the lack of contact in very different ways.”&lt;/p&gt;
&lt;h3&gt;Good For Communication, Bad For The Eyes&lt;/h3&gt;
&lt;p&gt;Researchers found that over half of the respondents admitted their screen time &lt;a href=&quot;https://www.studyfinds.org/too-much-screen-time-causing-vision-problems-headaches-not-blinking/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;strained their eyes&lt;/a&gt;. Despite the strain, four out of 10 people say they rarely stop to rest their vision. Another 12 percent of the survey said they never take a break.&lt;/p&gt;
&lt;p&gt;“It’s important to be aware of what excess screen time can do in terms of your eye health and keep on top of overdoing it when it comes to screens,” Dumaine adds. “We’d suggest making the most of the government’s advice to exercise, to help give that essential screen break.”&lt;/p&gt;
&lt;p&gt;The poll adds that adults are glued to their devices from &lt;a href=&quot;https://www.studyfinds.org/survey-quarter-checks-phones-less-than-minute-after-waking/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the minute they wake up&lt;/a&gt;. The average adult starts looking at a screen within 20 minutes of getting out of bed. Almost a third of the respondents switch on a device within five minutes.&lt;/p&gt;
&lt;h3&gt;PC Time Overtakes TV Time&lt;/h3&gt;
&lt;p&gt;Researchers say adults are spending most of their screen time planted in front of a computer. Just over four hours a day are spent looking at a laptop, while three-and-a-half hours are &lt;a href=&quot;https://www.studyfinds.org/too-much-television-fatal-blood-clots-study/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;devoted to television&lt;/a&gt; each day.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.getrevue.co/profile/studyfinds&quot; data-reader-unique-id=&quot;22&quot;&gt;&lt;strong data-reader-unique-id=&quot;23&quot;&gt;CLICK HERE TO SUBSCRIBE TO OUR WEEKLY NEWSLETTER &amp;amp; GET THE LATEST STUDIES FROM STUDYFINDS.ORG BY EMAIL!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Despite doing a little bit of everything these days, phones came in third, with adults spending two hours and 25 minutes a day swiping through data. The survey found that adults also spent some of their days using tablets, gaming devices, and e-readers.&lt;/p&gt;
&lt;h3&gt;No One Wants To Say ‘Take A Break’&lt;/h3&gt;
&lt;p&gt;Although the poll says we spend more than 13 hours a day in front of a screen, respondents believe less than half of that time is used productively.&lt;/p&gt;
&lt;p&gt;For parents, four in 10 say their &lt;a href=&quot;https://www.studyfinds.org/increased-screen-time-technology-not-taking-over-children/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;kids spend too much time&lt;/a&gt; on their devices too. Despite being in charge, two-thirds of those parents said they feel like hypocrites telling their children to turn off the screens.&lt;/p&gt;
&lt;p&gt;A quarter of couples have also had a fight over their partner’s screen time habits.&lt;/p&gt;
&lt;p&gt;“There are positives and negatives with screen time, but as long as people are mindful of when to limit use, there doesn’t need to be any long term damage,” Dumaine said.&lt;/p&gt;
&lt;p&gt;Vision Direct recommends everyone use the “20-20-20 Rule” when looking at their screens. The rule advises you take a break every 20 minutes, look away for 20 seconds, and turn your attention to something at least 20 feet away.&lt;/p&gt;
&lt;p&gt;The survey was conducted by &lt;a href=&quot;https://www.onepoll.us/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OnePoll&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;fb-follow-link&quot; href=&quot;https://www.facebook.com/StudyFinds.org/&quot; target=&quot;_blank&quot;&gt;Like studies? Follow us on Facebook!&lt;/a&gt;&lt;/p&gt;




</description>
<pubDate>Wed, 20 May 2020 15:26:29 +0000</pubDate>
<dc:creator>praveenscience</dc:creator>
<og:type>article</og:type>
<og:title>Digital Overload: Average Adult Will Spend 34 Years Of Their Life Staring At Screens - Study Finds</og:title>
<og:description>A new survey may surprise even the most screen-addicted tech user. Researchers say the average adult will spend 34 years of life gazing at their digital devices.</og:description>
<og:url>https://www.studyfinds.org/digital-overload-average-adult-will-spend-34-years-of-their-life-staring-at-screens/</og:url>
<og:image>https://www.studyfinds.org/wp-content/uploads/2019/07/AdobeStock_80825587-1024x683.jpeg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.studyfinds.org/digital-overload-average-adult-will-spend-34-years-of-their-life-staring-at-screens/</dc:identifier>
</item>
<item>
<title>U.S. arrests former Green Beret, son, in connection with Ghosn escape from Japan</title>
<link>https://www.wsj.com/articles/u-s-arrests-former-green-beret-son-in-connection-with-ghosn-escape-from-japan-11589984215</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/u-s-arrests-former-green-beret-son-in-connection-with-ghosn-escape-from-japan-11589984215</guid>
<description>&lt;p&gt;U.S. authorities arrested a former Green Beret and his son on suspicion they helped smuggle auto titan Carlos Ghosn out of Japan inside a musical equipment box.&lt;/p&gt; &lt;p&gt;In complaints filed in connection with the arrests, federal prosecutors said they were acting on a request from Japanese authorities to extradite Michael L. Taylor and his son, Peter M. Taylor, for their alleged roles in helping Mr. Ghosn escape from Japan.&lt;/p&gt; &lt;p&gt;An...
  &lt;/p&gt;</description>
<pubDate>Wed, 20 May 2020 14:31:02 +0000</pubDate>
<dc:creator>dsavant</dc:creator>
<og:title>U.S. Arrests Former Green Beret, Son, in Connection with Carlos Ghosn Escape From Japan</og:title>
<og:description>The U.S. arrested a former Green Beret and son in connection with former Nissan Motor Chairman Carlos Ghosn’s escape from Japan to avoid a corruption trial.</og:description>
<og:url>https://www.wsj.com/articles/u-s-arrests-former-green-beret-son-in-connection-with-ghosn-escape-from-japan-11589984215</og:url>
<og:image>https://images.wsj.net/im-188995/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/u-s-arrests-former-green-beret-son-in-connection-with-ghosn-escape-from-japan-11589984215</dc:identifier>
</item>
<item>
<title>15 years later: remote code execution in qmail</title>
<link>https://www.qualys.com/2020/05/19/cve-2005-1513/remote-code-execution-qmail.txt</link>
<guid isPermaLink="true" >https://www.qualys.com/2020/05/19/cve-2005-1513/remote-code-execution-qmail.txt</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;219&quot;&gt;
&lt;p&gt;Qualys Security Advisory 15 years later: Remote Code Execution in qmail (CVE-2005-1513) ======================================================================== Contents ======================================================================== Summary Analysis Exploitation qmail-verify - CVE-2020-3811 - CVE-2020-3812 Mitigations Acknowledgments Patches ======================================================================== Summary ======================================================================== TLDR: In 2005, three vulnerabilities were discovered in qmail but were never fixed because they were believed to be unexploitable in a default installation. We recently re-discovered these vulnerabilities and were able to exploit one of them remotely in a default installation. ------------------------------------------------------------------------ In May 2005, Georgi Guninski published &quot;64 bit qmail fun&quot;, three vulnerabilities in qmail (CVE-2005-1513, CVE-2005-1514, CVE-2005-1515): http://www.guninski.com/where_do_you_want_billg_to_go_today_4.html Surprisingly, we re-discovered these vulnerabilities during a recent qmail audit; they have never been fixed because, as stated by qmail's author Daniel J. Bernstein (in https://cr.yp.to/qmail/guarantee.html): &quot;This claim is denied. Nobody gives gigabytes of memory to each qmail-smtpd process, so there is no problem with qmail's assumption that allocated array lengths fit comfortably into 32 bits.&quot; Indeed, the memory consumption of each qmail-smtpd process is severely limited by default (by qmail-smtpd's startup script); for example, on Debian 10 (the latest stable release), it is limited to roughly 7MB. Unfortunately, we discovered that these vulnerabilities also affect qmail-local, which is reachable remotely and is not memory-limited by default (we investigated many qmail packages, and *all* of them limit qmail-smtpd's memory, but *none* of them limits qmail-local's memory). As a proof of concept, we developed a reliable, local and remote exploit against Debian's qmail package in its default configuration. This proof of concept requires 4GB of disk space and 8GB of memory, and allows an attacker to execute arbitrary shell commands as any user, except root (and a few system users who do not own their home directory). We will publish our proof-of-concept exploit in the near future. About our new discovery, Daniel J. Bernstein issues the following statement: &quot;https://cr.yp.to/qmail/guarantee.html has for many years mentioned qmail's assumption that allocated array lengths fit comfortably into 32 bits. I run each qmail service under softlimit -m12345678, and I recommend the same for other installations.&quot; Finally, we also discovered two minor vulnerabilities in qmail-verify (a third-party qmail patch that is included in, for example, Debian's qmail package): CVE-2020-3811 (a mail-address verification bypass), and CVE-2020-3812 (a local information disclosure). ======================================================================== Analysis ======================================================================== We decided to exploit Georgi Guninski's vulnerability &quot;1. integer overflow in stralloc_readyplus&quot; (CVE-2005-1513). There are, in fact, four potential integer overflows in stralloc_readyplus; three in the GEN_ALLOC_readyplus() macro (which generates the stralloc_readyplus() function), at line 21 (n += x-&amp;gt;len), line 23 (x-&amp;gt;a = base + n + ...), and line 24 (x-&amp;gt;a * sizeof(type)): ------------------------------------------------------------------------ 17 #define GEN_ALLOC_readyplus(ta,type,field,len,a,i,n,x,base,ta_rplus) \ 18 int ta_rplus(x,n) register ta *x; register unsigned int n; \ 19 { register unsigned int i; \ 20 if (x-&amp;gt;field) { \ 21 i = x-&amp;gt;a; n += x-&amp;gt;len; \ 22 if (n &amp;gt; i) { \ 23 x-&amp;gt;a = base + n + (n &amp;gt;&amp;gt; 3); \ 24 if (alloc_re(&amp;amp;x-&amp;gt;field,i * sizeof(type),x-&amp;gt;a * sizeof(type))) return 1; \ 25 x-&amp;gt;a = i; return 0; } \ 26 return 1; } \ 27 x-&amp;gt;len = 0; \ 28 return !!(x-&amp;gt;field = (type *) alloc((x-&amp;gt;a = n) * sizeof(type))); } ------------------------------------------------------------------------ and, in theory, one integer overflow in the alloc() function itself (which is called by the alloc_re() function), at line 18: ------------------------------------------------------------------------ 14 /*@null@*//*@out@*/char *alloc(n) 15 unsigned int n; 16 { 17 char *x; 18 n = ALIGNMENT + n - (n &amp;amp; (ALIGNMENT - 1)); /* XXX: could overflow */ .. 20 x = malloc(n); .. 22 return x; 23 } ------------------------------------------------------------------------ In practice, the integer overflows at line 21 (in GEN_ALLOC_readyplus()) and line 18 (in alloc()) are very hard to trigger; and the one at line 24 (in GEN_ALLOC_readyplus()) is irrelevant to stralloc_readyplus's case (because type is char and sizeof(type) is therefore 1). On the other hand, the integer overflow at line 23 (in GEN_ALLOC_readyplus()) is easy to trigger, because the size x-&amp;gt;a of the buffer is increased by one eighth every time it is re-allocated: we send a very large mail message that contains a very long header line (nearly 4GB), and this line triggers stralloc_readyplus's integer overflow while in the getln() function, which is called by the bouncexf() function, at the beginning of the qmail-local program. qmail-local is responsible for the local delivery of mail messages, and runs with the privileges of the local recipient (or qmail's &quot;alias&quot; user, if the local recipient is &quot;root&quot;, for example). After the size of the buffer is overflowed (at line 23), the alloc_re() function is called (at line 24), but with n &amp;lt; m, where n is the size of the new buffer y, and m is the size of the old buffer x: ------------------------------------------------------------------------ 4 int alloc_re(x,m,n) 5 char **x; 6 unsigned int m; 7 unsigned int n; 8 { 9 char *y; 10 11 y = alloc(n); 12 if (!y) return 0; 13 byte_copy(y,m,*x); 14 alloc_free(*x); 15 *x = y; 16 return 1; 17 } ------------------------------------------------------------------------ In other words, we transformed stralloc_readyplus's integer overflow into an mmap-based buffer overflow at line 13 (byte_copy() is qmail's version of memcpy()): m is nearly 4GB (the length of our very long header line), but n is roughly 512MB (one eighth of m). ======================================================================== Exploitation ======================================================================== To survive this large buffer overflow, we carefully choose the number and lengths of the very first lines in our mail message (they crucially influence the sequence of buffer re-allocations that eventually lead to the integer and buffer overflows), and obtain the following mmap layout: -------|-------|-------------------------------------------------|------ XXXXXXX| y | x | libc -------|-------|-------------------------------------------------|------ | 512MB | 4GB | Consequently, we safely overflow the new buffer y, and overwrite the malloc header of the old buffer x, with the contents of our very long header line. To exploit this malloc-header corruption when free(x) is called (at line 14), we devised an unusual method that bypasses NX and ASLR, but does not work against a full-RELRO binary (but the qmail-local binary on Debian 10 is partial-RELRO only). This does not mean, however, that a full-RELRO binary is not exploitable: other methods may exist, the only limit to malloc exploitation is the imagination. First, we overwrite the prev_size and size fields of x's malloc header, we set its IS_MMAPPED bit to 1, and therefore enter the munmap_chunk() function in __libc_free() (where p is a pointer to x's malloc header): ------------------------------------------------------------------------ 2810 static void 2811 munmap_chunk (mchunkptr p) 2812 { 2813 INTERNAL_SIZE_T size = chunksize (p); .... 2822 uintptr_t block = (uintptr_t) p - prev_size (p); 2823 size_t total_size = prev_size (p) + size; .... 2838 __munmap ((char *) block, total_size); 2839 } ------------------------------------------------------------------------ Because we completely control the size field (at line 2813) and the prev_size field (at lines 2822 and 2823), we completely control the block address (relative to p, and hence x) and the total_size of the __munmap() call (at line 2838). In other words, we can munmap() an arbitrary mmap region, without knowing the ASLR; we munmap() roughly 576MB at the end of x, including the first few pages of the libc: -------|-------|-----------------------------------------|-------+-|---- XXXXXXX| y | x |XXXXXXXXX|ibc -------|-------|-----------------------------------------|-------+-|---- The first pages of the libc do not actually contain executable code: they contain the ELF .dynsym section, which associates a symbol (for example, the &quot;open&quot; function) with the address of this symbol (relative to the start of the libc). Next, we end our very long header line (with a '\n' character), and start a new header line of nearly 576MB. This new header line is first written to the buffer y, but when y is full, stralloc_readyplus() allocates a new buffer t of roughly 576MB (the size of y plus one eighth), the exact size of the mmap region that we previously munmap()ed: -------|-------|-----------------------------------------|-------+-|---- XXXXXXX| y | x | t |ibc -------|-------|-----------------------------------------|-------+-|---- Consequently, we completely control the first pages of the libc (they contain the end of our new header line): we control the .dynsym section, and we replace the address of the &quot;open&quot; function with the address of the &quot;system&quot; function. This method works because Debian's qmail-local binary is partial-RELRO only, and because the open() function has not been called yet, and has therefore not been resolved yet. Last, we end our new header line, and when qmail-local returns from bouncexf() and calls qmesearch() to open() the &quot;.qmail-extension&quot; file, system(&quot;.qmail-extension&quot;) is called instead. Because we control this &quot;extension&quot; (it is an extension of the local recipient's mail address, for example localuser-extension@localdomain), we can execute arbitrary shell commands as any user (except root, and a few system users who do not own their home directory), by sending our large mail message to &quot;localuser-;command;@localdomain&quot;. Last-minute note: the exploitation of glibc's free() to munmap() arbitrary memory regions has been discussed before, in http://tukan.farm/2016/07/27/munmap-madness/. ======================================================================== qmail-verify ======================================================================== ------------------------------------------------------------------------ CVE-2020-3811 ------------------------------------------------------------------------ Although the original qmail-smtpd does accept our recipient address &quot;localuser-;command;@localdomain&quot;, Debian's qmail-smtpd should not, because it validates the recipient address with an external program qmail-verify (which should reject our recipient address, because the file &quot;~localuser/.qmail-;command;&quot; does not exist). Unfortunately, qmail-verify does reject &quot;localuser-;command;@localdomain&quot;, but it accepts the unqualified &quot;localuser-;command;&quot; (without the @localdomain), because: - it never calls the control_init() function; - it therefore initializes its default domain to the hard-coded string &quot;envnoathost&quot;; - and accepts any unqualified mail address as valid by default (because its default domain &quot;envnoathost&quot; is not one of qmail's local domains, and is therefore unverifiable). ------------------------------------------------------------------------ CVE-2020-3812 ------------------------------------------------------------------------ We also discovered a minor information disclosure in qmail-verify: a local attacker can test for the existence of files and directories anywhere in the filesystem (even in inaccessible directories), because qmail-verify runs as root and tests for the existence of files in the attacker's home directory, without dropping its privileges first. For example (qmail-verify listens on 127.0.0.1:11113 by default): ------------------------------------------------------------------------ $ ls -l /root/.bashrc ls: cannot access '/root/.bashrc': Permission denied $ rm -f ~john/.qmail-test $ ln -s /root/.bashrc ~john/.qmail-test $ echo -n 'john-test@localdomain' | nc -w 2 -u 127.0.0.1 11113 | hexdump -C 00000000 a0 6a 6f 68 6e 2d 74 65 73 74 |.john-test| ------------------------------------------------------------------------ The least significant bit of this response's first byte (a0) is 0: the file &quot;/root/.bashrc&quot; exists. ------------------------------------------------------------------------ $ ls -l /root/.abcdef ls: cannot access '/root/.abcdef': Permission denied $ rm -f ~john/.qmail-test $ ln -s /root/.abcdef ~john/.qmail-test $ echo -n 'john-test@localdomain' | nc -w 2 -u 127.0.0.1 11113 | hexdump -C 00000000 e1 6a 6f 68 6e 2d 74 65 73 74 |.john-test| ------------------------------------------------------------------------ The least significant bit of this response's first byte (e1) is 1: the file &quot;/root/.abcdef&quot; does not exist. ======================================================================== Mitigations ======================================================================== As recommended by Daniel J. Bernstein, qmail can be protected against all three 2005 CVEs by placing a low, configurable memory limit (a &quot;softlimit&quot;) in the startup scripts of all qmail services. Alternatively: qmail can be protected against the RCE (Remote Code Execution) by configuring the file &quot;control/databytes&quot;, which contains the maximum size of a mail message (this file does not exist by default, and qmail is therefore remotely exploitable in its default configuration). Unfortunately, this does not protect qmail against the LPE (Local Privilege Escalation), because the file &quot;control/databytes&quot; is used exclusively by qmail-smtpd. ======================================================================== Acknowledgments ======================================================================== We thank Andrew Richards, Alexander Peslyak, the members of distros@openwall, and the developers of notqmail for their hard work on this coordinated release. We also thank Daniel J. Bernstein, and Georgi Guninski. Finally, we thank Julien Barthelemy, Stephane Bellenger, and Jean-Paul Michel for their inspiring work. ======================================================================== Patches ======================================================================== We wrote a simple patch for Debian's qmail package (below) that fixes CVE-2020-3811 and CVE-2020-3812 in qmail-verify, and fixes all three 2005 CVEs in qmail (by hard-coding a safe, upper memory limit in the alloc() function). Alternatively: - an updated version of qmail-verify will be available at https://free.acrconsulting.co.uk/email/qmail-verify.html after the Coordinated Release Date; - the developers of notqmail (https://notqmail.org/) have written their own patches for the three 2005 CVEs and have started to systematically fix all integer overflows and signedness errors in qmail. ------------------------------------------------------------------------ diff -r -u netqmail_1.06-6/alloc.c netqmail_1.06-6+patches/alloc.c --- netqmail_1.06-6/alloc.c 1998-06-15 03:53:16.000000000 -0700 +++ netqmail_1.06-6+patches/alloc.c 2020-05-04 16:43:32.923310325 -0700 @@ -1,3 +1,4 @@ +#include #include &quot;alloc.h&quot; #include &quot;error.h&quot; extern char *malloc(); @@ -15,6 +16,10 @@ unsigned int n; { char *x; + if (n &amp;gt;= (INT_MAX &amp;gt;&amp;gt; 3)) { + errno = error_nomem; + return 0; + } n = ALIGNMENT + n - (n &amp;amp; (ALIGNMENT - 1)); /* XXX: could overflow */ if (n &amp;lt;= avail) { avail -= n; return space + avail; } x = malloc(n); diff -r -u netqmail_1.06-6/qmail-verify.c netqmail_1.06-6+patches/qmail-verify.c --- netqmail_1.06-6/qmail-verify.c 2020-05-02 09:02:51.954415101 -0700 +++ netqmail_1.06-6+patches/qmail-verify.c 2020-05-08 04:47:27.555539058 -0700 @@ -16,6 +16,8 @@ #include #include #include +#include +#include #include #include #include @@ -38,6 +40,7 @@ #include &quot;ip.h&quot; #include &quot;qmail-verify.h&quot; #include &quot;errbits.h&quot; +#include &quot;scan.h&quot; #define enew() { eout(&quot;qmail-verify: &quot;); } #define GETPW_USERLEN 32 @@ -71,6 +74,7 @@ void die_comms() { enew(); eout(&quot;Misc. comms problem: exiting.\n&quot;); eflush(); _exit(1); } void die_inuse() { enew(); eout(&quot;Port already in use: exiting.\n&quot;); eflush(); _exit(1); } void die_socket() { enew(); eout(&quot;Error setting up socket: exiting.\n&quot;); eflush(); _exit(1); } +void die_privs() { enew(); eout(&quot;Unable to drop/restore privileges: exiting.\n&quot;); eflush(); _exit(1); } char *posstr(buf,status) char *buf; int status; @@ -207,10 +211,47 @@ return 0; } +static int stat_as(uid, gid, path, sbuf) +const uid_t uid; +const gid_t gid; +const char * const path; +struct stat * const sbuf; +{ + static gid_t groups[NGROUPS_MAX + 1]; + int ngroups = 0; + const gid_t saved_egid = getegid(); + const uid_t saved_euid = geteuid(); + int ret = -1; + + if (saved_euid == 0) { + ngroups = getgroups(sizeof(groups) / sizeof(groups[0]), groups); + if (ngroups &amp;lt; 0 || + setgroups(1, &amp;amp;gid) != 0 || + setegid(gid) != 0 || + seteuid(uid) != 0) { + die_privs(); + } + } + + ret = stat(path, sbuf); + + if (saved_euid == 0) { + if (seteuid(saved_euid) != 0 || + setegid(saved_egid) != 0 || + setgroups(ngroups, groups) != 0) { + die_privs(); + } + } + + return ret; +} + int verifyaddr(addr) char *addr; { char *homedir; + uid_t uid = -1; + gid_t gid = -1; /* static since they get re-used on each call to verifyaddr(). Note that they don't need resetting since initial use is always with stralloc_copys() except wildchars (reset with ...len=0 below). */ @@ -303,6 +344,7 @@ if (r == 1) { char *x; + unsigned long u; if (!stralloc_ready(&amp;amp;nughde,(unsigned int) dlen)) die_nomem(); nughde.len = dlen; if (cdb_bread(fd,nughde.s,nughde.len) == -1) die_cdb(); @@ -318,10 +360,14 @@ if (x == nughde.s + nughde.len) return allowaddr(addr,ADDR_OK|QVPOS3); ++x; /* skip uid */ + scan_ulong(x,&amp;amp;u); + uid = u; x += byte_chr(x,nughde.s + nughde.len - x,'\0'); if (x == nughde.s + nughde.len) return allowaddr(addr,ADDR_OK|QVPOS4); ++x; /* skip gid */ + scan_ulong(x,&amp;amp;u); + gid = u; x += byte_chr(x,nughde.s + nughde.len - x,'\0'); if (x == nughde.s + nughde.len) return allowaddr(addr,ADDR_OK|QVPOS5); ++x; @@ -360,6 +406,8 @@ if (!stralloc_copys(&amp;amp;nughde,pw-&amp;gt;pw_dir)) die_nomem(); if (!stralloc_0(&amp;amp;nughde)) die_nomem(); homedir=nughde.s; + uid = pw-&amp;gt;pw_uid; + gid = pw-&amp;gt;pw_gid; got_nughde: @@ -380,7 +428,7 @@ if (!stralloc_cat(&amp;amp;qme,&amp;amp;safeext)) die_nomem(); if (!stralloc_0(&amp;amp;qme)) die_nomem(); /* e.g. homedir/.qmail-localpart */ - if (stat(qme.s,&amp;amp;st) == 0) return allowaddr(addr,ADDR_OK|QVPOS10); + if (stat_as(uid,gid,qme.s,&amp;amp;st) == 0) return allowaddr(addr,ADDR_OK|QVPOS10); if (errno != error_noent) { return stat_error(qme.s,errno, STATERR|QVPOS11); /* Maybe not running as root so access denied */ } @@ -394,7 +442,7 @@ if (!stralloc_cats(&amp;amp;qme,&quot;default&quot;)) die_nomem(); if (!stralloc_0(&amp;amp;qme)) die_nomem(); /* e.g. homedir/.qmail-[xxx-]default */ - if (stat(qme.s,&amp;amp;st) == 0) { + if (stat_as(uid,gid,qme.s,&amp;amp;st) == 0) { /* if it's ~alias/.qmail-default, optionally check aliases.cdb */ if (!i &amp;amp;&amp;amp; (quser == auto_usera)) { char *s; @@ -423,6 +471,7 @@ char *s; if (chdir(auto_qmail) == -1) die_control(); + if (control_init() == -1) die_control(); if (control_rldef(&amp;amp;envnoathost,&quot;control/envnoathost&quot;,1,&quot;envnoathost&quot;) != 1) die_control();&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 20 May 2020 14:28:40 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<dc:format>text/plain</dc:format>
<dc:identifier>https://www.qualys.com/2020/05/19/cve-2005-1513/remote-code-execution-qmail.txt</dc:identifier>
</item>
<item>
<title>Ray tracing in notepad.exe at 30 FPS</title>
<link>http://kylehalladay.com/blog/2020/05/20/Rendering-With-Notepad.html</link>
<guid isPermaLink="true" >http://kylehalladay.com/blog/2020/05/20/Rendering-With-Notepad.html</guid>
<description>&lt;p&gt;A few months back, there was a post on Reddit (&lt;a href=&quot;https://www.reddit.com/r/gamedev/comments/f1oidu/how_i_made_a_game_played_in_notepad/&quot;&gt;link&lt;/a&gt;), which described a game that used an open source clone of Notepad to handle all its input and rendering. While reading about it, I had the thought that it would be really cool to see something similar that worked with stock Windows Notepad. Then I spent way too much of my free time doing exactly that.&lt;/p&gt;
&lt;p&gt;I ended up making a Snake game and a small ray tracer that use stock Notepad for all input and rendering tasks, and got to learn about DLL Injection, API Hooking and Memory Scanning along the way. It seemed like writing up the stuff I learned might make for an interesting read, and give me a chance to show off the dumb stuff I built at the same time, so that’s what these next couple blog posts will be about.&lt;/p&gt;
&lt;p&gt;Due to length, I’ve split the writeup into two blog posts. This first post will talk about how Memory Scanners work, and how I used one to turn notepad.exe into a 30+ fps capable render target. I’ll also talk about the ray tracer that I built that rendered into Notepad.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://kylehalladay.com/blog/2020/05/20/Hooking-Input-Snake-In-Notepad.html&quot;&gt;second post&lt;/a&gt; will talk about using windows hooks to capture input and share the Snake game I built that uses pretty much all the stuff described in both of these posts.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://kylehalladay.com/images/post_images/2020-05-20/rt2.gif&quot;/&gt;&lt;span&gt;This post will cover how I made Notepad do this&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;If you just want to see the code, the whole project (including both the ray tracer and snake game) is up &lt;a href=&quot;https://github.com/khalladay/render-with-notepad&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;sending-key-events-to-notepad&quot;&gt;Sending Key Events To Notepad&lt;/h2&gt;
&lt;p&gt;The obvious place to kick all of this off is it to talk about sending key events to a running instance of Notepad. This was the boring part of the project so I’ll be brief.&lt;/p&gt;
&lt;p&gt;If you’ve never built an app out of Win32 controls (like I hadn’t), you might be surprised to learn that every UI element, from a menu bar to a button is technically it’s own “window,” and sending key input to a program involves sending that input to the UI element you want to receive it. Luckily Visual Studio comes with a tool called &lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/debugger/how-to-start-spy-increment?view=vs-2019&quot;&gt;Spy++&lt;/a&gt; that can list all the windows that make up a given application.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://kylehalladay.com/images/post_images/2020-05-20/spy.PNG&quot;/&gt;&lt;span&gt;The windows listed for Notepad in Spy++&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;Spy++ revealed that the Notepad child window I was after was the “Edit” window. Once I knew that, it was just a matter of figuring out the right mix of Win32 function calls to get an HWND for that UI element, and then sending key inputs there. Getting that HWND looked something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetWindowForProcessAndClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetTopWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//0 arg means to get the window at the top of the Z order&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classNameBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwThreadId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetWindowThreadProcessId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curPid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;GetClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classNameBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classNameBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindWindowEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetNextWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curWnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GW_HWNDNEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Once I had the HWND for the right control, drawing a character in Notepad’s edit control was just a matter of using &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-postmessagea&quot;&gt;PostMessage&lt;/a&gt; to send a WM_CHAR event to it.&lt;/p&gt;
&lt;p&gt;Note that if you want to use Spy++ yourself, you probably want to use the 64 bit version of it, which is inexplicably &lt;em&gt;not&lt;/em&gt; the verion that Visual Studio 2019 launches by default. Instead you’ll need to search your Visual Studio Program files for “spyxx_amd64.exe.”&lt;/p&gt;
&lt;p&gt;It took about 10 seconds after getting this working to realize that even if I could find a non-janky way to use window messages to draw full game screens into Notepad, it would be way too slow to even come close to approaching a 30hz refresh cycle. It was also really boring, so I didn’t spend too long looking for ways to make it go any faster.&lt;/p&gt;
&lt;h2 id=&quot;cheatengine-for-good-guys&quot;&gt;CheatEngine For Good Guys&lt;/h2&gt;
&lt;p&gt;While getting the fake key input set up, I was reminded of &lt;a href=&quot;https://www.cheatengine.org/&quot;&gt;CheatEngine&lt;/a&gt;. It’s a program that let’s users find and modify memory in processes running on their machines. Most of the time it’s used by people trying to cheat at games or do other stuff that makes game devs sad, but it turns out if can also be a force for good.&lt;/p&gt;
&lt;p&gt;Memory Scanners like CheatEngine work by finding all the memory addresses in a target process which contain a specific value. Let’s say you’re playing a game and you want to give yourself more health, you could follow a process that look like this:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Use a memory scanner to find all addresses in the game’s memory that store the value of your health (let’s say 100).&lt;/li&gt;
&lt;li&gt;Do something in game to modify your health to a new value (like 92).&lt;/li&gt;
&lt;li&gt;Search all the addresses you found previously (that stored 100) to find ones that now store 92.&lt;/li&gt;
&lt;li&gt;Repeat this process until you have a single memory address (which most likely is where your health is stored)&lt;/li&gt;
&lt;li&gt;Modify the value at that address&lt;/li&gt;
&lt;/ul&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://kylehalladay.com/images/post_images/2020-05-20/cheatengine.PNG&quot;/&gt;&lt;span&gt;CheatEngine and Notepad, friends at last&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;This is pretty much what I did, except instead of a health value, I searched for memory that stored the string of text currently displayed in Notepad. After some trial and error, I was able to use CheatEngine to find (and change) the text being displayed. I also learned three important bits of info about Notepad:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Notepad’s edit window stores on screen text in UTF-16, even if the bottom right part of the window says your file is UTF-8&lt;/li&gt;
&lt;li&gt;If I kept deleting and retyping the same string, CheatEngine would start finding multiple copies of this data in memory (possibly the undo buffer?)&lt;/li&gt;
&lt;li&gt;I couldn’t replace the displayed text with a longer string, meaning that Notepad wasn’t preallocating a text buffer up front&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;building-a-memory-scanner&quot;&gt;Building A Memory Scanner&lt;/h2&gt;
&lt;p&gt;Despite not being able to modify the length of the text buffer, this seemed promising enough that I decided to write my own small memory scanner to embed in my project.&lt;/p&gt;
&lt;p&gt;I couldn’t find a lot of information about building memory scanners, but I did find a great &lt;a href=&quot;https://nullprogram.com/blog/2016/09/03/&quot;&gt;blog post&lt;/a&gt; by Chris Wellons that talks about (and links to) a memory scanner that he wrote for his own cheat tool. Using that blog post and the bit of experience I had with CheatEngine, I was able to piece together that the basic algorithm for a memory scanner looks something like this:&lt;/p&gt;
&lt;pre&gt;
FOR EACH block of memory allocated by our target process
    IF that block is committed and read/write enabled
        Scan the contents of that block for our byte pattern
        IF WE FIND IT
            return that address
&lt;/pre&gt;
&lt;p&gt;My whole memory scanner implementation only ended up being ~40 lines of code, so I’m just going to walk through all of it.&lt;/p&gt;
&lt;h3 id=&quot;iterating-over-a-process-memory&quot;&gt;Iterating Over A Process’ Memory&lt;/h3&gt;
&lt;p&gt;The first thing a memory scanner needs to be able to do is iterate over a process’ allocated memory.&lt;/p&gt;
&lt;p&gt;Since the range of virtual memory for every 64 bit process on windows is the same (0x00000000000 through 0x7FFFFFFFFFFF), I started by making a pointer to address 0 and used &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualqueryex&quot;&gt;VirtualQueryEx&lt;/a&gt; to get information about that virtual address for my target program.&lt;/p&gt;
&lt;p&gt;VirtualQueryEx groups continguous pages that have identical memory attributes into MEMORY_BASIC_INFORMATION structs, so it’s likely that the struct returned by VirtualQueryEx for a given address contains information about more than 1 page. The returned MEMORY_BASIC_INFORMATION stores this shared set of memory attributes, along with the address of the start of its span of pages, and size of the whole span.&lt;/p&gt;
&lt;p&gt;Once I had the first MEMORY_BASIC_INFORMATION struct, iterating through memory was just a matter of adding the current struct’s BaseAddress and RegionSize members together, and feeding the new address to VirtualQueryEx to get the next set of contiguous pages.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindBytePatternInProcessMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;MEMORY_BASIC_INFORMATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VirtualQueryEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMORY_BASIC_INFORMATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_readwrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_readwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// search this memory for our pattern&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;basePtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegionSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above code above skips ahead a bit and also determines if a set of pages has been committed and is read/write enabled, by examining the .State and .Protect struct members. You can find all the possible values for these vars in the documentation for &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-memory_basic_information&quot;&gt;MEMORY_BASIC_INFORMATION&lt;/a&gt;, but the values that my scanner cared about were a state of 0x1000 (MEM_COMMIT) and a protection level of 0x04 (PAGE_READWRITE).&lt;/p&gt;
&lt;h3 id=&quot;searching-a-process-memory-for-a-byte-pattern&quot;&gt;Searching A Process’ Memory For a Byte Pattern&lt;/h3&gt;
&lt;p&gt;It’s not possible to read data in a different process’ address space directly (or at least, I didn’t stumble on how to do it). Instead, I first needed to copy the contents of a page range to the memory scanner’s address space. I did this with &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory&quot;&gt;ReadProcessMemory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once the memory was copied to a locally visible buffer, searching it for a byte pattern was easy enough. To make things simpler, I ignored the possibility that there could be multiple copies of the target byte pattern in memory in my first scanner implementation. I ended up coming up with a hacky workaronud for this problem later on that saved me from ever having to actually address it in my scanner logic.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srcLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memcmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;curPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If FindPattern() returned a match pointer, it’s address needed to be converted to the address of the same bit of memory in the target process’ address space. To do that, I subtracted the starting address of the local buffer from the address that was returned from FindPattern to get an offset, and then added that to the base address of the memory chunk in the target process. You can see this below.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindBytePatternInProcessMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MEMORY_BASIC_INFORMATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basePtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VirtualQueryEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MEMORY_BASIC_INFORMATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_readwrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mem_commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_readwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteMemRegionPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localCopyContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegionSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadProcessMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localCopyContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegionSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCopyContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegionSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCopyContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remoteMemRegionPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCopyContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;basePtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegionSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you want to see a working example of this, check out the “MemoryScanner” project in &lt;a href=&quot;https://github.com/khalladay/render-with-notepad/tree/master/Render-With-Notepad/MemoryScanner&quot;&gt;the github repo&lt;/a&gt; that accompanies this blog post. Try it on Notepad! (it hasn’t been tried on anything else, so ymmv).&lt;/p&gt;
&lt;h3 id=&quot;using-utf-16-byte-patterns&quot;&gt;Using UTF-16 Byte Patterns&lt;/h3&gt;
&lt;p&gt;Remember from earlier that Notepad stores its on screen text buffer as UTF-16 data, so the byte pattern that gets fed to FindBytePatternInMemory() also has to be UTF-16. For simple strings, this just involves adding a zero byte after every character. The MemoryScanner project in github does this for you:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//convert input string to UTF16 (hackily)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patternLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;updating-and-redrawing-notepads-edit-control&quot;&gt;Updating and Redrawing Notepad’s Edit Control&lt;/h2&gt;
&lt;p&gt;Once I had the address of the displayed text buffer in Notepad, the next step was to use &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory&quot;&gt;WriteProcessMemory&lt;/a&gt; to modify it. Writing code for that was trivial, but I quickly learned that just writing to the text buffer wasn’t enough to make Notepad redraw it’s Edit control.&lt;/p&gt;
&lt;p&gt;Luckily the Win32 api had my back on this, and provides the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-invalidaterect&quot;&gt;InvalidateRect&lt;/a&gt; function to force a control to redraw itself.&lt;/p&gt;
&lt;p&gt;All together, modifying the displayed text in Notepad something looked like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UpdateText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HINSTANCE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notepadTextBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replacementTextBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;written&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;WriteProcessMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notepadTextBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replacementTextBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;written&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;RECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GetClientRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;InvalidateRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;from-memory-scanner-to-renderer&quot;&gt;From Memory Scanner to Renderer&lt;/h2&gt;
&lt;p&gt;The gap between a working memory scanner and a full fledged notepad renderer is surprisingly small. There were only three issues that needed to be sorted out to go from what I’ve described so far to the ray tracer teased at the beginning of this post.&lt;/p&gt;
&lt;p&gt;These issues were:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I needed to control the size of the Notepad window&lt;/li&gt;
&lt;li&gt;I still couldn’t expand the size of the on screen text buffer&lt;/li&gt;
&lt;li&gt;My memory scanner didn’t handle duplicate byte patterns.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The first issue wasn’t much of a problem on it’s own. It was trivial to add a call to &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-movewindow&quot;&gt;MoveWindow&lt;/a&gt;, but I included it in the list because this was an important part of how I approached the next issue on the list.&lt;/p&gt;
&lt;p&gt;I ended up hard coding the size I wanted my Notepad window to be, and then counted how many characters (of a monospace font) it would take to exactly fill a window of that size. Then after calling MoveWindow, I pre-allocated the on screen text buffer by sending that many WM_CHAR messages to Notepad. This felt like cheating, but the good kind of cheating.&lt;/p&gt;
&lt;p&gt;To make sure that I always had a unique byte pattern to search for, I just randomized which chars I sent in the WM_CHAR messages.&lt;/p&gt;
&lt;p&gt;I’ve included what this might look like in code. The actual code in the github repo is formatted a little bit differently, but works the same way.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PreallocateTextBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetWindowForProcessAndClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Edit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// it takes 131 * 30 chars to fill a 1365x768 window with Consolas (size 11) chars&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;MoveWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1365&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;131&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf16BufferSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameBuffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf16BufferSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x41&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PostMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WM_CHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;frameBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;frameBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//wait for input messages to finish processing...it's slow. &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//Now use the frameBuffer as the unique byte pattern to search for&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What this meant for the end product is that immediately after starting, I had to watch my Notepad window slowly fill up with random characters, before I could acquire the text buffer pointer and clear the screen.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://kylehalladay.com/images/post_images/2020-05-20/init.gif&quot;/&gt;&lt;/div&gt;
&lt;p&gt;All of the above relies on using a known font face and font size in order to work right. I was going to add some code to force notepad to use the fonts I wanted (Consolas, 11pt), but for some reason sending WM_SETFONT messages kept messing up how fonts were displaying, and I didn’t feel like figuring out what was going wrong there. Consolas 11pt was the default Notepad font on my system, which was good enough for me.&lt;/p&gt;
&lt;h2 id=&quot;ray-tracing-in-notepad&quot;&gt;Ray Tracing In Notepad&lt;/h2&gt;
&lt;p&gt;Explaining how to build a ray tracer is well beyond the scope of what I want to talk about in this post. If you’re unfamiliar with ray tracing in general, head over to &lt;a href=&quot;https://www.scratchapixel.com/&quot;&gt;ScratchAPixel&lt;/a&gt; and learn you some ray tracing for great good. What I want to finish off this post with is a quick discussion of the nuts and bolts of hooking a ray tracer up to all the stuff I just talked about.&lt;/p&gt;
&lt;p&gt;It probably makes sense to start off with the frame buffers. In order to minimze the amount of WriteProcessMemory calls (both for sanity and performance), I allocated a ray-tracer-local buffer that was the same size as Notepad’s text buffer (number of characters * 2 (because UTF16)). All the rendering calculations would write to this local buffer until the end of the frame, when I used a single WriteProcessMemory call to replace the entire contents of Notepad’s buffer at once. This led to a really simple set of functions for drawing:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawChar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//local buffer&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clearScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// local buffer&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swapBuffersAndRedraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pushes changes and refreshes screen. &lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;On the ray tracing side, given the low resolution of my render target (131 x 30), I had to keep things very simple, since there just wasn’t enough “pixels” to display fine detail nicely. I ended up only tracing a single primary ray, and a shadow ray for each pixel being rendered to, and I thought about ditching the shadows until I found a nice grayscale float to ascii color ramp &lt;a href=&quot;http://paulbourke.net/dataformats/asciiart/&quot;&gt;on Paul Bourke’s website&lt;/a&gt;. Having such a low complexity scene and small render surface also meant that I didn’t end up needing to parallelize the rendering at all.&lt;/p&gt;
&lt;p&gt;I also ran into some issues getting things to look right due to characters being taller than they are wide. In the end, I “fixed” this by halving the width value I used in my aspect ratio calculations.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCREEN_CHARS_WIDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCREEN_CHARS_TALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The one remaining problem that I haven’t found a workable solution for is that updating the contents of the Notepad’s edit control so frequently causes a very noticeable flicker. I tried a bunch of different things to get rid of this, including trying to double buffer the edit control by allocating twice the number of characters and using WM_VSCROLL messages to “swap” the buffer by adjusting the scroll bar position. Unfortunately nothing I tried worked, and the flicker remains.&lt;/p&gt;
&lt;h2 id=&quot;part-2-input-boogaloo-is-available-now&quot;&gt;Part 2: Input Boogaloo is Available Now!&lt;/h2&gt;
&lt;p&gt;The next (and final) part of my quest to make a real-time game in Notepad was to figure out how to handle user input. If you’ve gotten this far and are thirsty for more, the next post is &lt;a href=&quot;http://kylehalladay.com/blog/2020/05/20/Hooking-Input-Snake-In-Notepad.html&quot;&gt;available here&lt;/a&gt;!&lt;/p&gt;
</description>
<pubDate>Wed, 20 May 2020 12:46:38 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://kylehalladay.com/blog/2020/05/20/Rendering-With-Notepad.html</dc:identifier>
</item>
</channel>
</rss>