<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>NSA&amp;#039;s Backdoor Key from Lotus Notes (2002)</title>
<link>http://www.cypherspace.org/adam/hacks/lotus-nsa-key.html</link>
<guid isPermaLink="true" >http://www.cypherspace.org/adam/hacks/lotus-nsa-key.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;NSA Backdoor Key from Lotus-Notes&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;88.647430117223&quot;&gt;
&lt;p&gt;&lt;em&gt;This page has also been translated into Russian &lt;a href=&quot;http://www.designcontest.com/show/nsa-key-be&quot;&gt;here&lt;/a&gt;&lt;br /&gt;and into Polish &lt;a href=&quot;http://www.autoteiledirekt.de/science/backdoor-klucz-nsa-z-lotus-notes&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before the US crypto export regulations were finally disolved the export version of Lotus Notes used to include a key escrow / backdoor feature called differential cryptography. The idea was that they got permission to export 64 bit crypto if 24 of those bits were encrypted for the NSA's public key. The NSA would then only have the small matter of brute-forcing the remaining 40 bits to get the plaintext, and everyone else would get a not-that-great 64 bit key space (which probably already back then NSA would have had the compute power to brute force also, only at higher cost).&lt;/p&gt;
&lt;p&gt;Anyway as clearly inside the application somewhere would be an NSA public key that the NSA had the private key for, I tried reverse engineering it to get the public key.&lt;/p&gt;
&lt;p&gt;In doing this I discovered that the NSA public key had an organizational name of &quot;MiniTruth&quot;, and a common name of &quot;Big Brother&quot;. Specifically what I saw in my debugger late one night, which was spooky for a short moment was:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;tt&gt;O=MiniTruth CN=Big Brother&lt;/tt&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Literary note: for those who have not read Orwell's prescient &quot;1984&quot; the Ministry of Truth was the agency who's job was propaganda and suppression of truths that did not suit the malignant fictional future government in the book, and &quot;Big Brother&quot; was the evil shadowy leader of this government. The whole book is &lt;a href=&quot;http://www.george-orwell.org/1984&quot;&gt;online here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The NSA's Public Key&lt;/h2&gt;
&lt;p&gt;I put this together some years after the reverse-engineering stint, so there could be errors, but this is from my notes, the raw public key modulus from the debugger:&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;tt&gt;  8D9D6213D3EF03A7 A5CEAE99B8E9FF06
  12E58ECAAB2939FE 72B41833B8B947A0
  DF8111B561CE67FB 50844623CF88338C
  E7BC80C5ECC31276 6075E13E12E956F6
  59954F68B04F0FEA B6B82EFEC4E07BD8
  4BC41FE3123AF70C 31688BCD5895BB00
&lt;/tt&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;I figured it was in little endian format by trial and error; other formats were easy to factor. So the big endian hex representation is:&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;tt&gt;  e = 3
  n = \
  00BB9558CD8B68310CF73A12E31FC44BD87BE0C4FE2EB8B6EA0F4FB0684F9559\
  F656E9123EE175607612C3ECC580BCE78C3388CF23468450FB67CE61B51181DF\
  A047B9B83318B472FE3929ABCA8EE51206FFE9B899AECEA5A703EFD313629D8D
&lt;/tt&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;where the modulus is 760 bits, and the public key formatted as a PGP key is (of course I made this user id up -- you can edit it to whatever you choose it's of course not self-signed):&lt;/p&gt;
&lt;pre&gt;
&lt;strong&gt;&lt;tt&gt;Type Bits/KeyID    Date       User ID
pub   760/13629D8D 1998/10/25 Director, NSA 

-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: 2.6.3i

mQBsAzYyeuIAAAEC+LuVWM2LaDEM9zoS4x/ES9h74MT+Lri26g9PsGhPlVn2VukS
PuF1YHYSw+zFgLznjDOIzyNGhFD7Z85htRGB36BHubgzGLRy/jkpq8qO5RIG/+m4
ma7OpacD79MTYp2NAAIDtB5EaXJlY3RvciwgTlNBIDxkaXJuc2FAbnNhLmdvdj4=
=aoSi
-----END PGP PUBLIC KEY BLOCK-----
&lt;/tt&gt;&lt;/strong&gt;
&lt;/pre&gt;
&lt;p&gt;and here's what pgpacket has to say about the contents of that key:&lt;/p&gt;
&lt;pre&gt;
&lt;tt&gt;&lt;strong&gt;---------------------------
Packet Type:Public Key Packet
Length:108
Version Byte:3
Key Created:25 Oct 1998  01:12:02
Valid forever
Algorithm:1 (RSA)
N:0xBB9558CD8B68310CF73A12E31FC44BD87BE0C4FE2EB8B6EA0F4FB0684F9559F6\
56E9123EE175607612C3ECC580BCE78C3388CF23468450FB67CE61B51181DFA0\
47B9B83318B472FE3929ABCA8EE51206FFE9B899AECEA5A703EFD313629D8D
E:0x03
Key ID: 0xA703EFD313629D8D

---------------------------
Packet Type:User ID Packet
Length:30
User ID:&quot;Director, NSA &quot;
&lt;/strong&gt;&lt;/tt&gt;
&lt;/pre&gt;
&lt;hr /&gt;&lt;p&gt;&lt;em&gt;Comments, html bugs to (&lt;a href=&quot;http://www.cypherspace.org/adam/&quot;&gt;Adam Back&lt;/a&gt;) at &lt;a href=&quot;mailto:adam@cypherspace.org&quot;&gt;&amp;lt;adam@cypherspace.org&amp;gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Sun, 22 Dec 2019 20:51:47 +0000</pubDate>
<dc:creator>Lammy</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.cypherspace.org/adam/hacks/lotus-nsa-key.html</dc:identifier>
</item>
<item>
<title>Ask HN: Best Talks of 2019?</title>
<link>https://news.ycombinator.com/item?id=21858866</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=21858866</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;21859126&quot; readability=&quot;3.0426136363636&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860509&quot; readability=&quot;2.7712418300654&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860726&quot; readability=&quot;3.6779324055666&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859525&quot; readability=&quot;2.5056818181818&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2528409090909&quot;&gt;&lt;tr readability=&quot;2.5056818181818&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Most people in this thread are posting a link and a title of the talk. I think it would be useful to hear why you thought the talk was the best.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859628&quot; readability=&quot;4.8171428571429&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4085714285714&quot;&gt;&lt;tr readability=&quot;4.8171428571429&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.4228571428571&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.407680945347&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;“Why isn’t functional programming the norm?” by Richard Feldman. Spoiler: not on the basis of merits. &lt;a href=&quot;https://youtu.be/QyJZzq0v7Z4&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/QyJZzq0v7Z4&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;“React to the future” by Jordan Walke. Why ReasonML is a logical extension of ReactJS’ programming paradigm. &lt;a href=&quot;https://youtu.be/5fG_lyNuEAw&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/5fG_lyNuEAw&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;“Typing the untyped: soundness in gradual type systems” by Ben Weissmann. The trade offs that various gradual type systems make based on their language constraints. &lt;a href=&quot;https://youtu.be/uJHD2xyv7xo&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/uJHD2xyv7xo&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;“Let’s program like it’s 1999” by Lee Byron. How the mutual feedback loop of abstraction, syntax and mental model drives the evolution of web technologies. &lt;a href=&quot;https://youtu.be/vG8WpLr6y_U&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/vG8WpLr6y_U&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859759&quot; readability=&quot;5.616368286445&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8081841432225&quot;&gt;&lt;tr readability=&quot;5.616368286445&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.616368286445&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.850948509485&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; Why isn’t functional programming the norm?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;This talk is very good. It's one of the few talks that I've overheard classmates talk about. It not only asks a question a lot of people exposed to functional programming at university asks, but also answers it in a way where you learn more about the world of programming and programming languages than you expected.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860356&quot; readability=&quot;7.0742358078603&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859524&quot; readability=&quot;2.3141762452107&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859662&quot; readability=&quot;3.0704225352113&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859267&quot; readability=&quot;4.6168582375479&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3084291187739&quot;&gt;&lt;tr readability=&quot;4.6168582375479&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.5402298850575&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.774590163934&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;lt;fangirl&amp;gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't know if Bryan Cantrill has done any speeches this year, whenever i see some speech featuring him on youtube I watch it regardless of the year.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;That man is a gold mine. And I always learn something interesting.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;lt;/fangirl&amp;gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859507&quot; readability=&quot;2.1818181818182&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860130&quot; readability=&quot;2.3529411764706&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860307&quot; readability=&quot;4.4345238095238&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2172619047619&quot;&gt;&lt;tr readability=&quot;4.4345238095238&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.4345238095238&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7039473684211&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;yup, that's already in my feedreader.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I've already heard some fantastic stories from their guests, particularly the guy who used to work at intel.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859095&quot; readability=&quot;2.9960784313725&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859038&quot; readability=&quot;1.030534351145&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859419&quot; readability=&quot;1.7368421052632&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860443&quot; readability=&quot;3.6&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860111&quot; readability=&quot;3.5294117647059&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859330&quot; readability=&quot;9.2735042735043&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6367521367521&quot;&gt;&lt;tr readability=&quot;9.2735042735043&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.3461538461538&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.177419354839&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Not a talk from 2019, but discovered it this year: &quot;1177 BC, the year civilization collapsed (Eric Cline, PhD)&quot; &lt;a href=&quot;https://youtu.be/bRcu-ysocX4&quot; rel=&quot;nofollow&quot;&gt;https://youtu.be/bRcu-ysocX4&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Excellent informative and hilarious talk about his (at-the-time) new scientific hypothesis to explain the end of the Bronze Age ca. 1200 BC.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Multiple civilizations collapsed within a few decades of each other with the ability to read, write and make high buildings being lost all across the Eastern Mediterranean &lt;em&gt;simultaneously&lt;/em&gt;. The Bronze Age is magical and interesting of itself, the talk gives a great introduction as to why we know much more about it than we think.. definitely recommended.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Duration ~1 hour (feels like 20 minutes)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859588&quot; readability=&quot;0.69642857142857&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860110&quot; readability=&quot;1.9044943820225&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860113&quot; readability=&quot;3.5981735159817&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7990867579909&quot;&gt;&lt;tr readability=&quot;3.5981735159817&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Why I thought it was cool: Gives a good overview of Async implementations without getting too deep in the weeds. Talks about &quot;greenthreads&quot; in other languages vs a zero-cost abstraction in Rust.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859695&quot; readability=&quot;4.9872122762148&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4936061381074&quot;&gt;&lt;tr readability=&quot;4.9872122762148&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.5716112531969&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.7061994609164&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Append only development: &lt;a href=&quot;https://www.youtube.com/watch?v=cXuvCMG21Ss&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=cXuvCMG21Ss&lt;/a&gt;&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Shameless plug since I'm the speaker. The reason I'm posting this in &quot;best talks of 2019&quot; is not because I think it was a good talk (my ego isn't that big yet) but because I think very few talks exist on the subject of Behavioral Programming, and it's a subject I'm hoping can get more attention.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859763&quot; readability=&quot;1.9384615384615&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860102&quot; readability=&quot;3.3771929824561&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860137&quot; readability=&quot;3.9130434782609&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860312&quot; readability=&quot;0.54347826086957&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21860140&quot; readability=&quot;1.8363636363636&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859459&quot; readability=&quot;3.6936936936937&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859340&quot; readability=&quot;2.5477707006369&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859161&quot; readability=&quot;1.7462686567164&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21859392&quot; readability=&quot;1.5652173913043&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 22 Dec 2019 18:51:11 +0000</pubDate>
<dc:creator>ignoramous</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=21858866</dc:identifier>
</item>
<item>
<title>Show HN: Angeldust – a fast and efficient video game</title>
<link>https://news.ycombinator.com/item?id=21858226</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=21858226</guid>
<description>After years of solo development I'm presenting: Angeldust, an &lt;em&gt;omni-compatible&lt;/em&gt; action RPG and building game!
&lt;p&gt;Website: &lt;a href=&quot;http://angeldu.st&quot; rel=&quot;nofollow&quot;&gt;http://angeldu.st&lt;/a&gt;&lt;/p&gt;&lt;p&gt;My single server hosts 250+K active players in one giant, dynamic fantasy world. Angeldust's game server is pervasively multithreaded, implementing John Carmack's dream of processing an immutable world state each tick.&lt;/p&gt;
&lt;p&gt;Both world handling and network traffic routing uses any number of threads. For networking, a typical game session only uses ~3Kbps of bandwidth, enabling decent play even over 2G/EDGE networks.&lt;/p&gt;
&lt;p&gt;The client is programmed in C++ with bits of C, Objective-C, Java and PHP. It runs really well on very low-end and obsolete hardware, all the way up to modern systems with fast GPUs.&lt;/p&gt;
&lt;p&gt;Angeldust works perfectly on Windows XP+, even without hardware OpenGL; Mac OS X 10.6+, even on the first 2006 32-bit Intel GMA945 MacBook1,1; Linux 64-bit glibc 2.17+; Android v2.2.3+, supporting Bluetooth game controllers; and iOS 6+, though iTunes App Store forces iOS 8+ (any way around this?).&lt;/p&gt;
&lt;p&gt;I live stream weekly on YouTube and Twitch, even right now! Come ask me your development questions! I often see developers playing together with their kids.&lt;/p&gt;
&lt;p&gt;YouTube channel: &lt;a href=&quot;https://www.youtube.com/AngeldustLive&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/AngeldustLive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One more thing: the Angeldust website ( &lt;a href=&quot;https://angeldu.st&quot; rel=&quot;nofollow&quot;&gt;https://angeldu.st&lt;/a&gt; ) uses plain HTML and CSS to offer interactive, game-related actions. It's fully functional even without JavaScript enabled.&lt;/p&gt;
</description>
<pubDate>Sun, 22 Dec 2019 16:58:16 +0000</pubDate>
<dc:creator>ItsFirefly</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=21858226</dc:identifier>
</item>
<item>
<title>Paid Cerberus &amp;#039;lifetime&amp;#039; licenses are expiring</title>
<link>https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/</link>
<guid isPermaLink="true" >https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/</guid>
<description>&lt;ul class=&quot;list-unstyled list-banners&quot; readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;&lt;a class=&quot;banner banner-update&quot; title=&quot;View the 2019/12/20 3:06am PST Update&quot; href=&quot;https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/#1&quot;/&gt;
&lt;p&gt;&lt;span class=&quot;update-title&quot;&gt;It turns out that back when Cerberus deactivated free lifetime licenses, it actually recommended those customers to switch to the paid lifetime subscription, saying, &quot;We never made, and we will&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;&lt;a class=&quot;banner banner-update&quot; title=&quot;View the 2019/12/21 3:03am PST Update&quot; href=&quot;https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/#2&quot;/&gt;
&lt;p&gt;&lt;span class=&quot;update-title&quot;&gt;Cerberus deleting complaints from its support forum&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Four years after Cerberus made headlines when it &lt;a href=&quot;https://www.androidpolice.com/2015/08/20/many-cerberus-free-lifetime-licenses-are-expiring-in-a-few-days-because-developers-gotta-eat/&quot;&gt;invalidated free lifetime licenses&lt;/a&gt;, the device security app is back in the spotlight for the same questionable business practices. This time, it has begun to revoke paid lifetime licenses, partly without informing customers beforehand.&lt;/p&gt;

&lt;p&gt;Back when the device recovery and locking app canceled the free lifetime subscriptions, it was quick to assure that &quot;paid licenses are not affected,&quot; but it appears that this was just a temporary exemption. Over the last days, a few customers have taken to the &lt;a href=&quot;https://groups.google.com/forum/m/#!topic/cerberus-support-forum/8k8C_b6f99o&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Cerebus support forum&lt;/a&gt; to report that they've received emails telling them that their paid lifetime licenses were expiring soon. Others haven't even gotten those messages and only noticed that their access to the service suddenly had an expiration date in the Cerberus app settings. It's likely that many more people won't realize that their licenses are revoked until they need the service to find and lock their phones.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license.png&quot; class=&quot; no-style&quot;&gt;&lt;img class=&quot;alignnone wp-image-650223 size-medium&quot; src=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license-329x713.png&quot; alt=&quot;Cerberus settings: Main configuration: &amp;quot;Your license will expire in 4 days&amp;quot; Buy license.&quot; width=&quot;329&quot; height=&quot;713&quot; srcset=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license-329x713.png 329w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license-668x1447.png 668w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license-161x349.png 161w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license-217x470.png 217w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license-728x1577.png 728w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-expiration-lifetime-license.png 1440w&quot; sizes=&quot;(max-width: 329px) 100vw, 329px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A tipster looped us in on the situation and offered us a reply from Cerberus, which answered his inquiry on how his lifetime license purchased in August 2011 could expire with the following message:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license.png&quot; class=&quot; no-style&quot;&gt;&lt;img class=&quot;alignnone wp-image-650220 size-large&quot; src=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license-668x649.png&quot; alt=&quot;Sorry, when you purchased your license the expiration date was set after 8 years. Quite frankly, we did not think Cerberus would last that long! Yet thanks to the support of our users we can now offer not only the most complete app to recover a lost or stolen Android device (Anti-theft), but also apps to keep you and your loved ones safe (Persona and Kids), and at a fraction of the price our competitors charge. We would really appreciate if you decide to keep supporting the development of our services by subscribing, otherwise we hope you enjoyed eight years of continued service for the price of a beer. Thank you.&quot; width=&quot;668&quot; height=&quot;649&quot; srcset=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license-668x649.png 668w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license-329x320.png 329w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license-161x156.png 161w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license-217x211.png 217w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license-728x707.png 728w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-answer-lifetime-license.png 1440w&quot; sizes=&quot;(max-width: 668px) 100vw, 668px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cerberus claims that &quot;lifetime licenses&quot; aren't actually lasting a lifetime and would expire after eight years. However, in the &lt;a href=&quot;https://web.archive.org/web/20111210145739/https://www.cerberusapp.com/terms.php&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;publicly visible terms and conditions from October 2011&lt;/a&gt;, active when our tipster purchased the service, the company didn't bring up an expiration date at all (it did state the license is &quot;revocable,&quot; though). Even if a date had been mentioned, something that expires after a set amount of time shouldn't qualify as a &quot;lifetime license,&quot; and hiding an expiration date in the ToS would be deceptive at best.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href=&quot;https://web.archive.org/web/20111129024409/https://market.android.com/details?id=com.lsdroid.cerberus&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Android Market app listing from November 2011&lt;/a&gt;, Cerberus even advertised the application as coming with &quot;no monthly fees, just a one-time payment&quot; (Swedish, translated by Google):&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;This is a free trial for one week, then you can buy a lifetime license for a low price (€ 2.99) inside the application: no monthly or annual fees, just a one-time payment. The license is linked to your Cerberus account, and if you have more devices you can link all (up to 5) to the same account.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Further, the company basically shames its customers into thinking they paid too little (even though they paid the price set by Cerberus!), and now it's their job to &quot;keep supporting the development&quot; of the service by subscribing again. Cerberus is deflecting its own bad business decisions to its license holders.&lt;/p&gt;

&lt;p&gt;Coming hand-in-hand with the overall passive-aggressive tone of the email, there's also the bogus excuse of &quot;we did not think Cerberus would last that long&quot; — as though it was the customers' fault that the company miscalculated its own success. It implies that Cerberus didn't believe in its product and thought it wouldn't be able to provide the service for a lifetime in the first place, so it didn't even try charging a proper price.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated.png&quot; class=&quot; no-style&quot;&gt;&lt;img class=&quot;alignnone wp-image-650232 size-large&quot; src=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated-668x502.png&quot; alt=&quot;Subject: Cerberus license activated. Body: Hi, The license for your Cerberus account (username: redacted) has been activated. Thank You. The Cerberus Team.&quot; width=&quot;668&quot; height=&quot;502&quot; srcset=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated-668x502.png 668w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated-329x247.png 329w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated-161x121.png 161w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated-217x163.png 217w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated-728x547.png 728w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-license-activated.png 1354w&quot; sizes=&quot;(max-width: 668px) 100vw, 668px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There is no mention of an expiration date in the lifetime license activation email.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The expiration issue only seems to affect the oldest accounts currently turning eight. When one of our team members checked for an expiration date on his license purchased in 2015, he couldn't find one — so far. This shows that Cerberus isn't transparent about this eight-year policy at all.&lt;/p&gt;

&lt;p&gt;Sure, app development costs tons of money and lifetime subscriptions aren't helpful when your service involves servers and other running costs, but revoking paid licenses without notice and outright lying about a previously uncommunicated expiration date is not the way to go. That's still true even if eight years of service &quot;for the price of a beer&quot; is a pretty good deal.&lt;/p&gt;
&lt;p&gt;If Cerberus wants to see positive examples on how to communicate with customers in cases like these, it should look no further than &lt;a href=&quot;https://www.androidpolice.com/2019/11/20/enpass-subscription-model-free-existing-users/&quot;&gt;Enpass&lt;/a&gt; or &lt;a href=&quot;https://www.androidpolice.com/2017/05/16/francisco-franco-makes-productivity-timer-5217-free-try/&quot;&gt;5217&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;content-update&quot; data-title=&quot;&quot; data-date=&quot;2019/12/20 3:06am PST&quot; data-author=&quot;Manuel Vonau&quot; readability=&quot;32.656812339332&quot;&gt;&lt;span class=&quot;nav-fix&quot; id=&quot;1&quot;/&gt; &lt;a class=&quot;banner banner-update banner-update-start&quot; href=&quot;https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/#1&quot;/&gt;
&lt;section readability=&quot;19.352185089974&quot;&gt;&lt;p&gt;It turns out that back when Cerberus deactivated free lifetime licenses, it actually recommended those customers to switch to the paid lifetime subscription, saying, &quot;We never made, and we will never make any retroactive changes to paid licenses, so if you buy the license now it will not expire.&quot; We know now that the company didn't keep that promise. Here's the full text:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise.png&quot; class=&quot; no-style&quot;&gt;&lt;img class=&quot;alignnone wp-image-650751 size-medium&quot; src=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise-329x658.png&quot; alt=&quot;You received a free license for Cerberus in our birthday promotion in April 2014. We deeply apologize, but it was not feasible to make it last for a lifetime, so your license will expire after 3 years of free service, on May 1st 2017. We are sending you this notice well in advance of the license expiration, because by then the app will be more expensive and subscription-based (with an annual or monthly fee). If you want to purchase a lifetime license with a one-time payment now, you can use this link: https://www.cerberusapp.com/buy.php?usernameREDACTED. All your Cerberus account settings will remain unchanged, including the number of devices that you can manage with the account. This option will be available until the end of October 2015. We never made, and we will never make any retroactive changes to paid licenses, so if you buy the license now it will not expire. Otherwise, you can enjoy Cerberus for free until the end of April 2017 and then decide if you want to keep using our service, with the licensing options that will be available at that time. Thank you, The Cerberus Team.&quot; width=&quot;329&quot; height=&quot;658&quot; srcset=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise-329x658.png 329w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise-668x1336.png 668w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise-161x322.png 161w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise-217x434.png 217w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise-728x1456.png 728w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-lifetime-license-promise.png 1440w&quot; sizes=&quot;(max-width: 329px) 100vw, 329px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks, Martino!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Another user &lt;em&gt;(thanks, &lt;a href=&quot;https://disqus.com/by/matto_godoy/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; data-action=&quot;profile&quot; data-username=&quot;matto_godoy&quot; class=&quot;external&quot;&gt;Matto Godoy&lt;/a&gt;!)&lt;/em&gt; received a similarly worded email when Cerberus announced its &lt;a href=&quot;https://www.androidpolice.com/2017/10/23/cerberus-working-personal-safety-app-called-persona/&quot;&gt;Persona service&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment.png&quot; class=&quot; no-style&quot;&gt;&lt;img class=&quot;alignnone wp-image-650752 size-large&quot; src=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment-668x557.png&quot; alt=&quot;Relevant part: You were one of our early users and purchased a lifetime license for the Anti-theft app, we appreciate it and of course we will honor the terms of that license. On the other hand the Personal Safety app, and now services we are working on, will be reserved to customers with a subscription license.&quot; width=&quot;668&quot; height=&quot;557&quot; srcset=&quot;https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment-668x557.png 668w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment-329x274.png 329w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment-161x134.png 161w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment-217x181.png 217w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment-728x607.png 728w, https://www.androidpolice.com/wp-content/uploads/2019/12/cerberus-persona-announcment.png 937w&quot; sizes=&quot;(max-width: 668px) 100vw, 668px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Additionally, it looks like that eight-year expiration date is pretty arbitrary. Many affected people have reached out to us and told us that their licenses are already expiring despite being much younger. Some have purchased their lifetime subscriptions in 2012, 2013, or even 2016.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot; readability=&quot;5.8732394366197&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/ManuelVonau?ref_src=twsrc%5Etfw&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;@ManuelVonau&lt;/a&gt; &lt;a href=&quot;https://twitter.com/ArtemR?ref_src=twsrc%5Etfw&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;@ArtemR&lt;/a&gt; looks like &lt;a href=&quot;https://twitter.com/cerberusapp?ref_src=twsrc%5Etfw&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;@cerberusapp&lt;/a&gt; has started sending out expiration messages for licences that are less than 8 years old now &lt;a href=&quot;https://t.co/ImiVHtPL9S&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;pic.twitter.com/ImiVHtPL9S&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Martim Lobao (@martimlobao) &lt;a href=&quot;https://twitter.com/martimlobao/status/1207964577616596992?ref_src=twsrc%5Etfw&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;December 20, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;ul class=&quot;list-unstyled list-inline list-emphasis&quot;&gt;&lt;li class=&quot;title&quot;&gt;&lt;strong&gt;Thanks:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Martino,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://disqus.com/by/matto_godoy/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; data-action=&quot;profile&quot; data-username=&quot;matto_godoy&quot; class=&quot;external&quot;&gt;Matto Godoy&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/martimlobao/status/1207964577616596992&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Martim Lobao&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://disq.us/p/267g2oi&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Enchanted_boofus&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://disq.us/p/267i4gv&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Aaron Burke&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://disq.us/p/267jvxh&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;skatsbrayt&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;br/&gt;&lt;a href=&quot;http://disq.us/p/267ry6f&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;asoneuthaosnetu&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://disq.us/p/267t861&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Chris O'Neill&lt;/a&gt;, &lt;a href=&quot;http://disq.us/p/267ttmz&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;amralomari&lt;/a&gt;, &lt;a href=&quot;http://disq.us/p/267ucl1&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;Marco,&lt;/a&gt; &lt;a href=&quot;http://disq.us/p/267y6lj&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;StalemateBlack&lt;/a&gt;, &lt;a href=&quot;http://disq.us/p/268humt&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;tptoodle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;
&lt;/div&gt;

&lt;div class=&quot;content-update&quot; data-title=&quot;Cerberus deleting complaints from its support forum&quot; data-date=&quot;2019/12/21 3:03am PST&quot; data-author=&quot;Manuel Vonau&quot; readability=&quot;30.014184397163&quot;&gt;&lt;span class=&quot;nav-fix&quot; id=&quot;2&quot;/&gt; &lt;a class=&quot;banner banner-update banner-update-start&quot; href=&quot;https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/#2&quot;/&gt;
&lt;section readability=&quot;7.8297872340426&quot;&gt;&lt;p&gt;&lt;strong&gt;Cerberus deleting complaints from its support forum&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It looks like Cerberus is trying hard to ignore its disgruntled customers by shutting down threads in its &lt;a href=&quot;https://groups.google.com/forum/#!forum/cerberus-support-forum&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;support forum&lt;/a&gt; that complain about the expiring lifetime licenses. Indeed, the &lt;a href=&quot;https://groups.google.com/forum/m/#!topic/cerberus-support-forum/8k8C_b6f99o&quot; class=&quot;external&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;thread&lt;/a&gt; we linked to in the original story is gone. Instead of owning up to its decision, the company tries its best to ignore the fallout.&lt;/p&gt;
&lt;/section&gt;
&lt;/div&gt;
&lt;ul class=&quot;list-unstyled list-inline list-emphasis&quot;&gt;&lt;li class=&quot;title&quot;&gt;&lt;strong&gt;Thanks:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Andre&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sun, 22 Dec 2019 10:05:37 +0000</pubDate>
<dc:creator>agluszak</dc:creator>
<og:type>article</og:type>
<og:title>Paid Cerberus 'lifetime' licenses are expiring, customers are mad (Update: Complaints deleted from forum)</og:title>
<og:description>Four years after Cerberus made headlines when it invalidated free lifetime licenses, the device security app is back in the spotlight for the same</og:description>
<og:url>https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/</og:url>
<og:image>https://www.androidpolice.com/wp-content/uploads/2019/01/Cerberus-Phone-Keyboard-Hero-668x445.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.androidpolice.com/2019/12/21/cerberus-paid-lifetime-license-expiration/</dc:identifier>
</item>
<item>
<title>Show HN: Local Node.js app to save everything you browse and serve it offline</title>
<link>https://github.com/dosyago/22120</link>
<guid isPermaLink="true" >https://github.com/dosyago/22120</guid>
<description>&lt;p&gt;🏛 - An archivist browser controller that caches everything you browse, a library server with full text search to serve your archive.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://forms.gle/yN4WVjuwKgBRCzYF8&quot; rel=&quot;nofollow&quot;&gt;If you want to get an email when the next major version drops, add your email to this list&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Running&lt;/h2&gt;
&lt;h3&gt;Save your stuff&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Open your browser with &lt;code&gt;--remote-debugging-port=9222&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clone this repo and inside its directory run &lt;code&gt;npm i &amp;amp;&amp;amp; npm run save&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Serve your stuff&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;Open your browser with &lt;code&gt;--remote-debugging-port=9222&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Inside the repo directory run &lt;code&gt;npm run serve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Browse what you browsed before (you can switch off internet and it still works).&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Initial goal&lt;/h2&gt;
&lt;p&gt;Proof of concept of the ability to browse and transparently save everything, then switch off internet and browse it later as if you were still online.&lt;/p&gt;
&lt;p&gt;Inspired by people talking about enriching bookmarks and browser history with the ability to save all your browsing data and search it, even independent of you being online or the site being online.&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Uses DevTools protocol to intercept all requests, and caches responses against a key made of (METHOD and URL) into an in memory map which it saves to disk every 10 seconds.&lt;/p&gt;
&lt;h2&gt;So far&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;The library server hasn't been implemented.&lt;/li&gt;
&lt;li&gt;Only saving and serving with the archivist works.&lt;/li&gt;
&lt;li&gt;You can use it by opening your browser with &lt;code&gt;--remote-debugging-port=9222&lt;/code&gt; then running &lt;code&gt;npm run save&lt;/code&gt;. Everything you browser will be saved to &lt;code&gt;cache.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can switch off your internet and run &lt;code&gt;npm run serve&lt;/code&gt; (also with your browser on remote debugging) and browser everything you just saved as normal.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Future&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Implement library server so we can actually save the responses to disk in the &quot;file tree structure&quot; of the site you browse, then serve it, and also index and search it. This will involve also serving request/response metadata and converting between the request/response format and a file format.&lt;/li&gt;
&lt;li&gt;The idea is that you can browse a site and end up with a static directory structure of assets that you can then serve on a local static server and browse it basically as normal.&lt;/li&gt;
&lt;li&gt;Generally improve code and efficiency.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;The goal&lt;/h2&gt;
&lt;p&gt;To build a personal archive that you can search and use that does not depend on the continued existence of those sites, or on having internet, but that works just like you are browsing them.&lt;/p&gt;
&lt;h2&gt;Stuff that will probably be hard (and I haven't thought much about)&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Streaming content (audio, video)&lt;/li&gt;
&lt;li&gt;&quot;Impure&quot; request response pairs (such as if you call GET /endpoint 1 time you get &quot;A&quot;, if you call it a second time you get &quot;AA&quot;, and other examples like this).&lt;/li&gt;
&lt;li&gt;WebSockets (how to capture and replay that faithfully?)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are probably &quot;good enough&quot; solutions to all these, and likely some or all of them already exist and have been thought up by other smart people.&lt;/p&gt;
&lt;h3&gt;More Instructions&lt;/h3&gt;
&lt;p&gt;Can I use this with a browser that's not Chrome-based?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Probably not. At least not yet.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Higher level description&lt;/h2&gt;
&lt;p&gt;Basically this is like a &quot;full spectrum record&quot; of your browsing history, with all assets and their content saved. It's like going on holiday and taking a GoPro that saves everything you look at, except that the quality is such that when you replay it, it's actually the same as experiencing it the first time.&lt;/p&gt;
</description>
<pubDate>Sun, 22 Dec 2019 08:42:40 +0000</pubDate>
<dc:creator>archivist1</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/59091121?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>dosyago/22120</og:title>
<og:url>https://github.com/dosyago/22120</og:url>
<og:description>:classical_building: 22120 - An archivist browser controller that caches everything you browse, a library server with full text search to serve your archive. - dosyago/22120</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/dosyago/22120</dc:identifier>
</item>
<item>
<title>Autonomous DeLorean drives sideways to move forward</title>
<link>https://news.stanford.edu/2019/12/20/autonomous-delorean-drives-sideways-move-forward/</link>
<guid isPermaLink="true" >https://news.stanford.edu/2019/12/20/autonomous-delorean-drives-sideways-move-forward/</guid>
<description>&lt;p&gt;As the DeLorean rolled to a stop and the cloud of tire smoke cleared, Jon Goh peeked out the sliver of the passenger-side window to see dozens of gathered spectators cheering and high-fiving the successful test.&lt;/p&gt;
&lt;p&gt;The crowd, and anticipation, had built throughout the afternoon, while Goh, a recent mechanical engineering PhD graduate from Stanford, had been outlining a kilometer-long obstacle course in traffic cones at Thunderhill Raceway in Northern California. The sun was setting fast, but Goh and his co-pilot, another grad student named Tushar Goel, couldn’t wait until morning to take a shot at the twisty course. Besides, MARTY, the driver, didn’t need to see the track – it needed only GPS coordinates and the algorithms on Goh’s laptop to chart its path.&lt;/p&gt;
</description>
<pubDate>Sun, 22 Dec 2019 03:23:22 +0000</pubDate>
<dc:creator>80mph</dc:creator>
<og:type>article</og:type>
<og:title>Autonomous DeLorean drives sideways to move forward | Stanford News</og:title>
<og:description>Engineers in Stanford’s Dynamic Design Lab are teaching a driverless DeLorean to steer with the agility and precision of a human driver with a goal of improving how autonomous cars handle in hazardous conditions.</og:description>
<og:url>https://news.stanford.edu/2019/12/20/autonomous-delorean-drives-sideways-move-forward/</og:url>
<og:image>https://news-media.stanford.edu/wp-content/uploads/2019/11/08180954/marty-stacked.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.stanford.edu/2019/12/20/autonomous-delorean-drives-sideways-move-forward/</dc:identifier>
</item>
<item>
<title>Coolest Things I Learned in 2019</title>
<link>https://www.perell.com/blog/2019/12/11/coolest-things-i-learned-in-2019</link>
<guid isPermaLink="true" >https://www.perell.com/blog/2019/12/11/coolest-things-i-learned-in-2019</guid>
<description>&lt;p class=&quot;&quot;&gt;&lt;strong&gt;Ira Glass on Taste&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;Every creator needs to hear these words from Ira Glass:&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;&quot;Nobody tells this to people who are beginners, I wish someone told me. All of us who do creative work, we get into it because we have good taste. But there is this gap. For the first couple years you make stuff, it’s just not that good. It’s trying to be good, it has potential, but it’s not. But your taste, the thing that got you into the game, is still killer. And your taste is why your work disappoints you.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;A lot of people never get past this phase, they quit. Most people I know who do interesting, creative work went through years of this. We know our work doesn’t have this special thing that we want it to have. We all go through this. And if you are just starting out or you are still in this phase, you gotta know its normal and the most important thing you can do is do a lot of work.&lt;/p&gt;
&lt;p class=&quot;&quot;&gt;Put yourself on a deadline so that every week you will finish one story. It is only by going through a volume of work that you will close that gap, and your work will be as good as your ambitions. And I took longer to figure out how to do this than anyone I’ve ever met. It’s gonna take awhile. It’s normal to take awhile. You’ve just gotta fight your way through.&quot;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 23:59:48 +0000</pubDate>
<dc:creator>nefitty</dc:creator>
<og:title>Coolest Things I Learned in 2019 — David Perell</og:title>
<og:url>https://www.perell.com/blog/2019/12/11/coolest-things-i-learned-in-2019</og:url>
<og:type>article</og:type>
<og:description>I write a weekly email called the Monday Musings . The most popular part of the newsletter is a section called “Coolest Things I Learned This Week.” It’s fun and eclectic, interesting and intriguing. This is a collection of the most popular ideas I shared in 2019. Note: I’ve lost some of the s</og:description>
<og:image>http://static1.squarespace.com/static/55576406e4b02e4679105dc2/55576b2ae4b0a213bdd2fc6a/5df135e5887d561d6cc5d946/1576980815558/Cool%2BThings%2B2019.jpg?format=1500w</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.perell.com/blog/2019/12/11/coolest-things-i-learned-in-2019</dc:identifier>
</item>
<item>
<title>Go + Services = One Goliath Project</title>
<link>https://engineering.khanacademy.org/posts/goliath.htm</link>
<guid isPermaLink="true" >https://engineering.khanacademy.org/posts/goliath.htm</guid>
<description>&lt;p&gt;&lt;em&gt;Khan Academy is embarking on a huge effort to rebuild our server software on a more modern stack in Go.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At Khan Academy, we don’t shy away from a challenge.&lt;/strong&gt; After all, we’re a non-profit with a mission to provide a “free world-class education to anyone, anywhere”. Challenges don’t get much bigger than that.&lt;/p&gt;
&lt;p&gt;Our mission requires us to create and maintain software to provide tools which help teachers and coaches who work with students, and a personalized learning experience both in and out of school. Millions of people rely on our servers each month to provide a wide variety of features we’ve built up over the past ten years.&lt;/p&gt;
&lt;p&gt;Ten years is a long time in technology! We chose Python as our backend server language and it has been a productive choice for us. Of course, ten years ago we chose &lt;em&gt;Python 2&lt;/em&gt; because Python 3 was still very new and not well supported.&lt;/p&gt;

&lt;p&gt;Now, in 2019, Python 3 versions are dominant and the Python Software Foundation has said that &lt;a href=&quot;https://www.python.org/doc/sunset-python-2/&quot;&gt;Python 2 reaches its official end-of-life on January 1, 2020&lt;/a&gt;, so that they can focus their limited time fully on the future. Undoubtedly, there are still &lt;em&gt;millions&lt;/em&gt; of lines of Python 2 out there, but the truth is undeniable: Python 2 is on its way out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Moving from Python 2 to 3 is not an easy task.&lt;/strong&gt; Beyond that hurdle, which has been widely written about elsewhere, we also have a bunch of other APIs in libraries we use which have undergone huge changes.&lt;/p&gt;
&lt;p&gt;All of these differences mean that we’d have to split our code to run in at least two services (the old Python 2 codebase and the Python 3 replacement) which can coexist during the transition.&lt;/p&gt;
&lt;p&gt;For all of that work, we’d receive these benefits:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Likely a 10-15% boost in backend server code performance&lt;/li&gt;
&lt;li&gt;Python 3’s language features&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given all of the work required and the relatively small benefits, we wanted to consider other options. We started &lt;a href=&quot;https://engineering.khanacademy.org/posts/kotlin-adoption.htm&quot;&gt;using Kotlin for specific jobs within Khan Academy a year ago&lt;/a&gt;. Its performance benefits have saved us money, which we can apply in other ways to help people around the world learn. &lt;strong&gt;If we moved from Python to a language that is an order of magnitude faster, we can both improve how responsive our site is&lt;/strong&gt;&lt;em&gt;*and&lt;/em&gt;*decrease our server costs dramatically.&lt;/p&gt;
&lt;p&gt;Moving to Kotlin was an appealing alternative. While we were at it, we decided to dig deeper into other options. Looking at the languages that have first-class support in Google App Engine, another serious contender appeared: Go. Kotlin is a very expressive language with an impressive set of features. Go, on the other hand, offers simplicity and consistency. The Go team is focused on making a language which helps teams reliably ship software over the long-term.&lt;/p&gt;
&lt;p&gt;As individuals writing code, &lt;strong&gt;we can iterate faster due to Go’s lightning quick compile times&lt;/strong&gt;. Also, members of our team have years of experience and muscle memory built around many different editors. &lt;strong&gt;Go is better supported than Kotlin by a broad range of editors&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, we ran a bunch of tests around performance and found that Go and Kotlin (on the JVM) perform similarly, with Kotlin being perhaps a few percent ahead. Go, however, used a lot less memory, which means that it can scale down to smaller instances.&lt;/p&gt;
&lt;p&gt;We still like Python, but &lt;strong&gt;the dramatic performance difference which Go brings to us is too big to ignore, and we think we’ll be able to better support a system running on Go over the years&lt;/strong&gt;. Moving to Go will undeniably be more effort than moving to Python 3, but the performance win alone makes it worth it.&lt;/p&gt;

&lt;p&gt;With a few exceptions, our servers have historically all run the same code and can respond to a request for any part of Khan Academy. We use separate services for storing data and managing caches, but the logic for any request can be easily traced through our code and is the same regardless of which server responds.&lt;/p&gt;
&lt;p&gt;When a function calls another in a program, those calls are extremely reliable and very fast. This is a fundamental advantage of monoliths. &lt;strong&gt;Once you break up your logic into services, you’re putting slower, more fragile boundaries between parts of your code&lt;/strong&gt;. You also have to consider how, exactly, that communication is going to happen. Do you put a publish/subscribe bus in between? Make direct HTTP or gRPC calls? Dispatch via some gateway?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Even recognizing this added complexity, we’re breaking up our monolith into services&lt;/strong&gt;. There’s an element of necessity to it, because new Go code would have to run in a separate process at least from our existing Python.&lt;/p&gt;
&lt;p&gt;The added complexity of services is balanced by a number of big benefits:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;By having more services which can be deployed independently, deployment and test runs can move more quickly for a single service, which means engineers will be able to spend less of their time on deployment activities. It also means they’ll be able to get changes out more quickly when needed.&lt;/li&gt;
&lt;li&gt;We can have more confidence that a problem with a deployment will have a limited impact on other parts of the site.&lt;/li&gt;
&lt;li&gt;By having separate services, we can also choose the right kinds of instances and hosting configuration needed for each service, which helps to optimize both performance and cost.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We posted a series of blog posts (&lt;a href=&quot;http://engineering.khanacademy.org/posts/python-refactor-1.htm&quot;&gt;part 1&lt;/a&gt;, &lt;a href=&quot;http://engineering.khanacademy.org/posts/slicker.htm&quot;&gt;part 2&lt;/a&gt;, &lt;a href=&quot;http://engineering.khanacademy.org/posts/python-refactor-3.htm&quot;&gt;part 3&lt;/a&gt;) about how we had performed a significant refactoring of our Python code, drawing boundaries and creating constraints around which code could import which other code. Those boundaries provided a starting point for thinking about how we’d break our code into services. Craig Silverstein and Ben Kraft led an effort to figure out an initial set of services and how we would need to accommodate the boundaries between them.&lt;/p&gt;
&lt;p&gt;In our current monolith, code is free to read and update any data models it needs to. To keep things sane, we made some rules around data access from services, but that’s a topic for another day.&lt;/p&gt;

&lt;p&gt;Ten years is a long time in technology. GraphQL didn’t exist in 2009, and two years ago &lt;strong&gt;we decided to migrate all of our HTTP GET APIs to GraphQL&lt;/strong&gt;, later deciding to also adopt GraphQL mutations. &lt;strong&gt;We adopted React just after it was introduced&lt;/strong&gt;, and it has spread to much of our web frontend. Google Cloud has grown in breadth of features. Server architectures have moved in the direction of &lt;strong&gt;independently deployable services&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ten years is also a long time for a product. &lt;strong&gt;We have introduced an incredible number of features&lt;/strong&gt;, some of which have very little usage today. Some of our older features were built with patterns that we no longer think fit our best practices.&lt;/p&gt;
&lt;p&gt;We’re going to do a lot of housecleaning in Python. We’re very aware of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Second-system_effect&quot;&gt;second-system effect&lt;/a&gt; and our goal with this work is not to “create the perfect system” but rather to make it easier to port to Go. We started some of these technical migrations earlier, and some of them will continue on past the point at which our system is running in Go, but the end result will be more modern and coherent.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We’ll only generate web pages via React server side rendering, eliminating the Jinja server-side templating we’ve been using&lt;/li&gt;
&lt;li&gt;We’ll use &lt;a href=&quot;https://blog.apollographql.com/apollo-federation-f260cf525d21&quot;&gt;GraphQL federation&lt;/a&gt; to dispatch requests to our services (and to our legacy Python code during the transition)&lt;/li&gt;
&lt;li&gt;Where we need to offer REST endpoints, we’ll do so through a gateway that converts the request to GraphQL&lt;/li&gt;
&lt;li&gt;We will rely more heavily on Fastly, our CDN provider, to enable more requests to be served quickly, closer to our users, and without requiring our server infrastructure to handle the request at all&lt;/li&gt;
&lt;li&gt;We’re going to deprecate some largely unused, outdated features that are an ongoing maintenance burden and would slow down our path forward&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are other things we might want to fix, but we’re making choices that ultimately will help us complete the project more quickly and safely.&lt;/p&gt;

&lt;p&gt;Everything I’ve described to this point is a huge amount of change, but there is a lot that we’re not changing. As much as possible, we’re going to port our logic straight from Python to Go, just making sure the code looks like idiomatic Go when it’s done.&lt;/p&gt;
&lt;p&gt;We’ve been using Google App Engine since day 1, and it has worked well for us and scaled automatically as we’ve grown. So, we’re going to keep using App Engine for our new Go services. We’re using Google Cloud Datastore as our database for the site, which is also staying the same. This also applies to the variety of other Google Cloud service we use, which have been performing well and scaling with our needs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As of December 2019, we have our first few Go services running in production&lt;/strong&gt; behind an Apollo GraphQL gateway. These services are pretty small today, because the way we’re doing the migration is very incremental. This incremental switchover is another good topic to talk about on another day (subscribe to our &lt;a href=&quot;http://engineering.khanacademy.org/rss.xml&quot;&gt;RSS feed&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/KhanAcademyEng&quot;&gt;our Twitter account&lt;/a&gt; to read new posts as they go live).&lt;/p&gt;
&lt;p&gt;For us, &lt;strong&gt;2020 is going to be filled with technical challenge and opportunity&lt;/strong&gt;: Converting a large Python monolith to GraphQL-based services in Go. We’re excited about this project, which we’ve named Goliath (you can probably imagine all of the “Go-” names we considered!). It’s a once in a decade opportunity to take a revolutionary step forward, and a big example of how we live our &lt;a href=&quot;http://engineering.khanacademy.org/posts/eng-principles-help-scale.htm&quot;&gt;&quot;We champion quality&quot; engineering principle&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you’re also excited about this opportunity, check out &lt;a href=&quot;https://www.khanacademy.org/careers&quot;&gt;our careers page&lt;/a&gt;. As you can imagine, we’re hiring engineers!&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 22:37:09 +0000</pubDate>
<dc:creator>yawn</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://engineering.khanacademy.org/posts/goliath.htm</dc:identifier>
</item>
<item>
<title>Boeing push to make training profitable may have left 737 Max pilots unprepared</title>
<link>https://www.bloomberg.com/news/articles/2019-12-20/boeing-s-profit-push-may-have-left-737-max-pilots-unprepared</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2019-12-20/boeing-s-profit-push-may-have-left-737-max-pilots-unprepared</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-12-20/boeing-s-profit-push-may-have-left-737-max-pilots-unprepared&quot;&gt;https://www.bloomberg.com/news/articles/2019-12-20/boeing-s-profit-push-may-have-left-737-max-pilots-unprepared&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=21852694&quot;&gt;https://news.ycombinator.com/item?id=21852694&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 212&lt;/p&gt;
&lt;p&gt;# Comments: 125&lt;/p&gt;
</description>
<pubDate>Sat, 21 Dec 2019 18:53:09 +0000</pubDate>
<dc:creator>JumpCrisscross</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=beeb7fa0-251f-11ea-8764-bd05a6f84c3c&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOS0xMi0yMC9ib2Vpbmctcy1wcm9maXQtcHVzaC1tYXktaGF2ZS1sZWZ0LTczNy1tYXgtcGlsb3RzLXVucHJlcGFyZWQ=</dc:identifier>
</item>
<item>
<title>Alan Kay: Smalltalk is not about objects, it’s about messaging (1998)</title>
<link>http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html</link>
<guid isPermaLink="true" >http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html</guid>
<description>
&lt;h2&gt;prototypes vs classes was: Re: Sun's HotSpot&lt;/h2&gt;
&lt;strong&gt;Alan Kay&lt;/strong&gt; &lt;a href=&quot;mailto:squeak-dev%40lists.squeakfoundation.org?Subject=prototypes%20vs%20classes%20was%3A%20Re%3A%20Sun%27s%20HotSpot&amp;amp;In-Reply-To=1.5.4.32.19981009224644.00ac6e90%40mail.frii.com&quot; title=&quot;prototypes vs classes was: Re: Sun's HotSpot&quot;&gt;alank at wdi.disney.com&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Sat Oct 10 04:40:35 UTC 1998&lt;/em&gt;
&lt;hr /&gt;&lt;pre&gt;
Folks --

Just a gentle reminder that I took some pains at the last OOPSLA to try to
remind everyone that Smalltalk is not only NOT its syntax or the class
library, it is not even about classes. I'm sorry that I long ago coined the
term &quot;objects&quot; for this topic because it gets many people to focus on the
lesser idea.

The big idea is &quot;messaging&quot; -- that is what the kernal of Smalltalk/Squeak
is all about (and it's something that was never quite completed in our
Xerox PARC phase). The Japanese have a small word -- ma -- for &quot;that which
is in between&quot; -- perhaps the nearest English equivalent is &quot;interstitial&quot;.
The key in making great and growable systems is much more to design how its
modules communicate rather than what their internal properties and
behaviors should be. Think of the internet -- to live, it (a) has to allow
many different kinds of ideas and realizations that are beyond any single
standard and (b) to allow varying degrees of safe interoperability between
these ideas.

If you focus on just messaging -- and realize that a good metasystem can
late bind the various 2nd level architectures used in objects -- then much
of the language-, UI-, and OS based discussions on this thread are really
quite moot. This was why I complained at the last OOPSLA that -- whereas at
PARC we changed Smalltalk constantly, treating it always as a work in
progress -- when ST hit the larger world, it was pretty much taken as
&quot;something just to be learned&quot;, as though it were Pascal or Algol.
Smalltalk-80 never really was mutated into the next better versions of OOP.
Given the current low state of programming in general, I think this is a
real mistake.

I think I recall also pointing out that it is vitally important not just to
have a complete metasystem, but to have fences that help guard the crossing
of metaboundaries. One of the simplest of these was one of the motivations
for my original excursions in the late sixties: the realization that
assignments are a metalevel change from functions, and therefore should not
be dealt with at the same level -- this was one of the motivations to
encapsulate these kinds of state changes, and not let them be done willy
nilly. I would say that a system that allowed other metathings to be done
in the ordinary course of programming (like changing what inheritance
means, or what is an instance) is a bad design. (I believe that systems
should allow these things, but the design should be such that there are
clear fences that have to be crossed when serious extensions are made.)

I would suggest that more progress could be made if the smart and talented
Squeak list would think more about what the next step in metaprogramming
should be -- how can we get great power, parsimony, AND security of meaning?

Cheers to all,

Alan



&lt;/pre&gt;
&lt;hr /&gt;&lt;hr /&gt;&lt;a href=&quot;http://lists.squeakfoundation.org/cgi-bin/mailman/listinfo/squeak-dev&quot;&gt;More information about the Squeak-dev mailing list&lt;/a&gt;&lt;br /&gt;</description>
<pubDate>Sat, 21 Dec 2019 18:00:59 +0000</pubDate>
<dc:creator>pcr910303</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html</dc:identifier>
</item>
</channel>
</rss>