<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>In 4 US state prisons, 3,300 inmates test positive, 96% without symptoms</title>
<link>https://www.reuters.com/article/us-health-coronavirus-prisons-testing-in/in-four-u-s-state-prisons-nearly-3300-inmates-test-positive-for-coronavirus-96-without-symptoms-idUSKCN2270RX</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-health-coronavirus-prisons-testing-in/in-four-u-s-state-prisons-nearly-3300-inmates-test-positive-for-coronavirus-96-without-symptoms-idUSKCN2270RX</guid>
<description>&lt;p&gt;(Reuters) - When the first cases of the new coronavirus surfaced in Ohio’s prisons, the director in charge felt like she was fighting a ghost.&lt;/p&gt;
&lt;p&gt;“We weren’t always able to pinpoint where all the cases were coming from,” said Annette Chambers-Smith, director of the Ohio Department of Rehabilitation and Correction. As the virus spread, they began mass testing.&lt;/p&gt;
&lt;p&gt;They started with the Marion Correctional Institution, which houses 2,500 prisoners in north central Ohio, many of them older with pre-existing health conditions. After testing 2,300 inmates for the coronavirus, they were shocked. Of the 2,028 who tested positive, close to 95% had no symptoms.&lt;/p&gt;
&lt;p&gt;“It was very surprising,” said Chambers-Smith, who oversees the state’s 28 correctional facilities.&lt;/p&gt;
&lt;p&gt;As mass coronavirus testing expands in prisons, large numbers of inmates are showing no symptoms. In four state prison systems — Arkansas, North Carolina, Ohio and Virginia — 96% of 3,277 inmates who tested positive for the coronavirus were asymptomatic, according to interviews with officials and records reviewed by Reuters. That’s out of 4,693 tests that included results on symptoms.&lt;/p&gt;
&lt;p&gt;The numbers are the latest evidence to suggest that people who are asymptomatic — contagious but not physically sick — may be driving the spread of the virus, not only in state prisons that house 1.3 million inmates across the country, but also in communities across the globe. The figures also reinforce questions over whether testing of just people suspected of being infected is actually capturing the spread of the virus.&lt;/p&gt;
&lt;p&gt;“It adds to the understanding that we have a severe undercount of cases in the U.S.,” said Dr. Leana Wen, adjunct associate professor of emergency medicine at George Washington University, said of the Reuters findings. “The case count is likely much, much higher than we currently know because of the lack of testing and surveillance.”&lt;/p&gt;
&lt;p&gt;Some people diagnosed as asymptomatic when tested for the coronavirus, however, may go on to develop symptoms later, according to researchers.&lt;/p&gt;
&lt;p&gt;The United States has more people behind bars than any other nation, a total incarcerated population of nearly 2.3 million as of 2017 — nearly half of which is in state prisons. Smaller numbers are locked in federal prisons and local jails, which typically hold people for relatively short periods as they await trial.&lt;/p&gt;
&lt;p&gt;State prison systems in Michigan, Tennessee and California have also begun mass testing — checking for coronavirus infections in large numbers of inmates even if they show no sign of illness — but have not provided specific counts of asymptomatic prisoners.&lt;/p&gt;
&lt;p&gt;Tennessee said a majority of its positive cases didn’t show symptoms. In Michigan, state authorities said “a good number” of the 620 prisoners who tested positive for the coronavirus were asymptomatic. California’s state prison system would not release counts of asymptomatic prisoners.&lt;/p&gt;
&lt;p&gt;Each state manages multiple prison facilities. Ohio, for instance, has 49,000 prisoners in 28 facilities. A total 3,837 inmates tested positive for the coronavirus in 15 of those facilities. But the state has not yet provided results on symptoms for 1,809 of them and did not identify the total number of tests conducted across the prison system.&lt;/p&gt;
&lt;p&gt;Arkansas and Tennessee have also taken a targeted approach by conducting mass testing in several of their facilities. Michigan, North Carolina, California and Virginia have started with one facility each.&lt;/p&gt;
&lt;p&gt;Most state prisons did not provide the age or other demographic details of those who tested positive for the coronavirus, which has killed more than 200,000 people globally, including more than 53,000 in the United States.&lt;/p&gt;
&lt;h3&gt;VAST UNDERCOUNT&lt;/h3&gt;
&lt;p&gt;Reuters surveyed all 50 state prison systems. Of the 30 that responded, most are only testing inmates who show symptoms, suggesting they could be vastly undercounting the number infected by the coronavirus.&lt;/p&gt;
&lt;p&gt;Florida and Texas, whose inmate populations are bigger than Ohio’s, report a combined total of just 931 cases — far fewer than the 3,837 inmates who tested positive in Ohio. New York, the epicenter of the U.S. outbreak, has reported 269 positive cases among 51,000 inmates. All three states are testing only symptomatic prisoners.&lt;/p&gt;
&lt;p&gt;“Prison agencies are almost certainly vastly undercounting the number of COVID cases among incarcerated persons,” said Michele Deitch, a corrections specialist and senior lecturer at the University of Texas. “Just as the experts are telling us in our free-world communities, the only way to get ahead of this outbreak is through mass testing.”&lt;/p&gt;
&lt;p&gt;Prison officials in Florida and Texas said they were following guidance from the U.S. Centers for Disease Control and Prevention along with state health officials when testing only inmates showing symptoms of the virus. New York’s Department of Corrections said its policy of only testing prisoners who show symptoms was “reflective of testing procedures in the general public.”&lt;/p&gt;
&lt;p&gt;Tennessee took an aggressive approach after a dozen inmates tested positive at the Bledsoe County Correctional Complex in the city of Pikeville last week. The state’s Department of Correction has tested 3,503 prisoners at Bledsoe, the Northwest Correctional Complex and the Turney Center Industrial Complex.&lt;/p&gt;
&lt;p&gt;As of Friday, 651 were positive, and most of them were asymptomatic, the department said.&lt;/p&gt;
&lt;p&gt;“It’s what makes the pandemic more difficult to manage,” said Marc Stern, former medical director for the Washington State Department of Corrections and a faculty member at the University of Washington’s School of Public Health. “There are a whole lot of people who are asymptomatic.”&lt;/p&gt;
&lt;p&gt;After a recent spike in cases at the Neuse Correctional Institution in Goldsboro, North Carolina, state correctional officials tested all 723 prisoners last week. Of the 444 who were infected by the virus, 98% were asymptomatic, the state’s department of public safety said. One inmate has died at the prison.&lt;/p&gt;
&lt;p&gt;Similarly, mass testing at two Arkansas prisons — the Cummins Unit in the city of Grady and the Community Correction Center in the state capital Little Rock — found 751 infected inmates, almost all of them asymptomatic, the state corrections department said. It did not provide the total number of inmates who were tested.&lt;/p&gt;
&lt;p&gt;Arkansas’ prisons have faced contagious disease outbreaks before, such as scabies and chickenpox, but those episodes were easier to manage because inmates showed overt symptoms, said Arkansas Department of Corrections spokeswoman Dina Tyler. “But with this virus, you have no idea because so many are asymptomatic. It makes it very challenging to contain,” she said.&lt;/p&gt;
&lt;p&gt;‘24-HOUR TURNAROUND IS CRUCIAL’&lt;/p&gt;
&lt;p&gt;Michigan’s Lakeland Correctional Facility houses some of the state’s oldest and most medically frail prisoners. When coronavirus cases surged, the prison saw a spike in infections and deaths. As of April 23, nine Lakeland inmates had died from COVID-19, accounting for a third of the deaths across Michigan’s 29 state prisons.&lt;/p&gt;
&lt;p&gt;Nearly half of Lakeland’s 1,400 prisoners suffer from chronic underlying health conditions, according to state data. Many are in wheelchairs, and the minimum-security facility in southern Michigan has its own geriatric unit for its large elderly population.&lt;/p&gt;
&lt;p&gt;On Tuesday, the prison tested all 400 inmates in the geriatric ward and plans to test the rest of the facility by the end of the week. Of the 971 tested so far, 642, or about 66%, were positive. A state official declined to disclose how many were asymptomatic.&lt;/p&gt;
&lt;p&gt;“We know mass testing is going to make our numbers spike and might make us look bad,” said Chris Gautz, spokesman for the Michigan Department of Corrections. “But I don’t think there’s another prison system in the country that doesn’t have large numbers. They just might not be testing as rigorously as we are.”&lt;/p&gt;
&lt;p&gt;All tested inmates are quarantined in their rooms or units pending the test results, which usually come back in a day, he said. “The 24-hour turnaround is crucial” because once an inmate tests negative, they can return to the general population, he said.&lt;/p&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s4.reutersmedia.net/resources/r/?m=02&amp;amp;d=20200425&amp;amp;t=2&amp;amp;i=1516457015&amp;amp;r=LYNXNPEG3O0KR&amp;amp;w=20&quot; aria-label=&quot;FILE PHOTO: The exterior of the Marion Correctional Institution where there have been positive cases of the coronavirus disease (COVID-19) in Marion, Ohio, U.S., April 22, 2020. REUTERS/Dane Rhys&quot;/&gt;
&lt;/div&gt;

&lt;div class=&quot;Image_caption&quot;&gt;

&lt;span&gt;FILE PHOTO: The exterior of the Marion Correctional Institution where there have been positive cases of the coronavirus disease (COVID-19) in Marion, Ohio, U.S., April 22, 2020. REUTERS/Dane Rhys&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the seven state prison systems conducting mass tests, 49 inmates have died.&lt;/p&gt;
&lt;p&gt;As the coronavirus spreads behind bars, rights groups and public defenders say they fear more will succumb, and have pressed for the release of nonviolent older and medically high-risk inmates. While thousands have been let out, crowded, often unsanitary conditions have raised concerns that jails and prisons could become vectors for the disease.&lt;/p&gt;
&lt;p&gt;“They’re worse than landlocked cruise ships,” Stern, the corrections expert, said, referring to stranded cruise ships that have been overwhelmed by coronavirus infections.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Linda So reported from Washington and Grant Smith from New York. Additional reporting by Brad Heath. Editing by Jason Szep&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 25 Apr 2020 19:58:26 +0000</pubDate>
<dc:creator>throwaway888abc</dc:creator>
<og:title>In four U.S. state prisons, nearly 3,300 inmates test positive for coronavirus -- 96% without symptoms</og:title>
<og:url>https://www.reuters.com/article/us-health-coronavirus-prisons-testing-in-idUSKCN2270RX</og:url>
<og:type>article</og:type>
<og:description>When the first cases of the new coronavirus surfaced in Ohio’s prisons, the director in charge felt like she was fighting a ghost.</og:description>
<og:image>https://s4.reutersmedia.net/resources/r/?m=02&amp;d=20200425&amp;t=2&amp;i=1516457015&amp;w=1200&amp;r=LYNXNPEG3O0KR</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-health-coronavirus-prisons-testing-in/in-four-u-s-state-prisons-nearly-3300-inmates-test-positive-for-coronavirus-96-without-symptoms-idUSKCN2270RX</dc:identifier>
</item>
<item>
<title>A one-line package broke `npm create-react-app`</title>
<link>https://github.com/then/is-promise/issues/13</link>
<guid isPermaLink="true" >https://github.com/then/is-promise/issues/13</guid>
<description>&lt;p&gt;If you're using npm, you can fix the issue by editing your &lt;code&gt;package-lock.json&lt;/code&gt; file like so.&lt;/p&gt;
&lt;p&gt;Identify the modules that are using the failing &lt;code&gt;is-promise&lt;/code&gt; modules:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
 &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;run-async&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {                                                                                                                                                                                                                
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;2.4.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,                                                                                                                                                                                                         
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;resolved&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https://registry.npmjs.org/run-async/-/run-async-2.4.0.tgz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,                                                                                                                                                   
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;integrity&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;sha512-xJTbh/d7Lm7SBhc1tNvTpeCHaEzoyxPrqNlvSdMfBTYwaY++UJFyXUOxAtsRUXjlqOfj8luNaR9vjCh4KeV+pg==&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,                                                                                                             
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;dev&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;,                                                                                                                                                                                                                
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;requires&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {                                                                                                                                                                                                               
        &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;is-promise&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;^2.1.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;                                                                                                                                                                                                    
      }                                                                                                                                                                                                                           
    },
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Move the &lt;code&gt;is-promise&lt;/code&gt; out of &lt;code&gt;requires&lt;/code&gt; and create a new object &lt;code&gt;dependencies&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-js&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;run-async&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {                                                                                                                                                                                                                
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;2.4.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,                                                                                                                                                                                                         
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;resolved&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;https://registry.npmjs.org/run-async/-/run-async-2.4.0.tgz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,                                                                                                                                                   
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;integrity&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;sha512-xJTbh/d7Lm7SBhc1tNvTpeCHaEzoyxPrqNlvSdMfBTYwaY++UJFyXUOxAtsRUXjlqOfj8luNaR9vjCh4KeV+pg==&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,                                                                                                             
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;dev&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;,                                                                                                                                                                                                                
      &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;dependencies&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {                                                                                                                                                                                                           
        &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;is-promise&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; {                                                                                                                                                                                                           
          &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;version&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;2.1.0&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;                                                                                                                                                                                                      
        }                                                                                                                                                                                                                         
      }                                                                                                                                                                                                                           
},
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, rerun &lt;code&gt;npm install --only=dev&lt;/code&gt; and you should be good.&lt;/p&gt;
&lt;p&gt;(If using yarn, see comment &lt;a class=&quot;issue-link js-issue-link&quot; data-error-text=&quot;Failed to load title&quot; data-id=&quot;606793178&quot; data-permission-text=&quot;Title is private&quot; data-url=&quot;https://github.com/then/is-promise/issues/13&quot; data-hovercard-type=&quot;issue&quot; data-hovercard-url=&quot;/then/is-promise/issues/13/hovercard&quot; href=&quot;https://github.com/then/is-promise/issues/13&quot;&gt;#13&lt;/a&gt;)&lt;/p&gt;
</description>
<pubDate>Sat, 25 Apr 2020 16:31:39 +0000</pubDate>
<dc:creator>tessela</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/3106720?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>ERR_INVALID_PACKAGE_TARGET · Issue #13 · then/is-promise</og:title>
<og:url>https://github.com/then/is-promise/issues/13</og:url>
<og:description>The module fails to import with node v13.12.0. The version 2.1.0 still works fine. sorunome@sorunome-desktop repos/mx-puppet-skype $ node ./build/index.js 1 internal/modules/cjs/loader.js:616 if (e...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/then/is-promise/issues/13</dc:identifier>
</item>
<item>
<title>What does the &amp;#039;rc&amp;#039; in `.bashrc`, etc. mean?</title>
<link>https://superuser.com/questions/173165/what-does-the-rc-in-bashrc-etc-mean</link>
<guid isPermaLink="true" >https://superuser.com/questions/173165/what-does-the-rc-in-bashrc-etc-mean</guid>
<description>&lt;p&gt;It stands for &quot;run commands.&quot;&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;http://en.wikipedia.org/wiki/Run_commands&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;34&quot;&gt;
&lt;p&gt;The term rc stands for the phrase &quot;run commands&quot;. It is used for any file that contains startup information for a command. It is believed to have originated somewhere in 1965 from a runcom facility from the MIT Compatible Time-Sharing System (CTSS).&lt;/p&gt;
&lt;p&gt;From Brian Kernighan and Dennis Ritchie: &quot;There was a facility that would execute a bunch of commands stored in a file; it was called runcom for 'run commands', and the file began to be called 'a runcom'. rc in Unix is a fossil from that usage.&quot;&lt;/p&gt;
&lt;p&gt;Tom Van Vleck, a Multics engineer, has also reminisced about the extension rc: &quot;The idea of having the command processing shell be an ordinary slave program came from the Multics design, and a predecessor program on CTSS by Louis Pouzin called RUNCOM, the source of the &quot;.rc&quot; suffix on some Unix configuration files.&quot;&lt;/p&gt;
&lt;p&gt;This is also the origin of the name of the Plan 9 from Bell Labs shell by Tom Duff, the rc shell. It is called 'rc' because the main job of a shell is to 'run commands'.&lt;/p&gt;
&lt;p&gt;While not historically precise, rc may also be expanded as &quot;run control&quot;, because an rc file controls how a program runs. For instance, the editor Vim looks for and reads the contents of the .vimrc file to determine its initial configuration. In &lt;em&gt;The Art Of Unix Programming&lt;/em&gt;, Eric S. Raymond consistently refers to rc files as &quot;run-control&quot; files.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 25 Apr 2020 14:00:05 +0000</pubDate>
<dc:creator>janvdberg</dc:creator>
<og:type>website</og:type>
<og:url>https://superuser.com/questions/173165/what-does-the-rc-in-bashrc-etc-mean</og:url>
<og:image>https://cdn.sstatic.net/Sites/superuser/img/apple-touch-icon@2.png?v=e869e4459439</og:image>
<og:title>What does the 'rc' in `.bashrc`, etc. mean?</og:title>
<og:description>Well, this is embarrassing. I feel like I just realised I don't know a loyal colleague's name after working with them for 10 years. &quot;Hey, er... *cough!*, thanks for that great job you did on settin...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://superuser.com/questions/173165/what-does-the-rc-in-bashrc-etc-mean</dc:identifier>
</item>
<item>
<title>Time is the only real currency we have</title>
<link>https://blog.theboringtech.io/2020/04/16/time_is_the_real_currency.html</link>
<guid isPermaLink="true" >https://blog.theboringtech.io/2020/04/16/time_is_the_real_currency.html</guid>
<description>&lt;h5 class=&quot;text-title&quot;&gt;Suggestions on spending it on things that matter and avoiding things that don't&lt;/h5&gt;
&lt;hr/&gt;&lt;p&gt;&lt;strong&gt;“Well, that’s the thing right - Time is the only &lt;em&gt;real&lt;/em&gt; currency we have”&lt;/strong&gt;. This was the singularly brilliant summation of a long discussion the company’s founder and I had. It was one of those long walks we occasionally took in the middle of the afternoon - when the weather was still pleasant and there was a lot to talk about. The topic of discussion was Developer Productivity.&lt;br/&gt;We were &lt;sup id=&quot;fnref:fn0&quot;/&gt; the fastest &lt;a href=&quot;https://economictimes.indiatimes.com/small-biz/startups/newsbuzz/udaan-on-a-high-may-be-the-fastest-to-join-unicorn-club/articleshow/65650826.cms&quot;&gt;growing company in India&lt;/a&gt; and had hit a Billion Dollars in valuation with a team of about 20 engineers.&lt;br/&gt;Developer productivity wasn’t just an aspirational goal for us. We &lt;em&gt;needed&lt;/em&gt; to be highly productive to even &lt;em&gt;survive&lt;/em&gt; the challenges we faced on a daily basis and what lied ahead of us.&lt;br/&gt;I’ve always heard Time == Money, but that never really struck me as vividly as the above statement. I feel it is profound and cuts through all clutter in our head.&lt;/p&gt;
&lt;p&gt;Now that I have some more time to reflect on it, I wanted to try and best summarise what I’ve learnt on my journey so far. This is a result of ~8 years of introspection &amp;amp; observations while working in some of the &lt;a href=&quot;https://www.linkedin.com/in/yogeshnachnani/&quot;&gt;fastest growing companies on the planet&lt;/a&gt; . Hopefully you’ll take away something that helps you in daily time management.&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;a-note-on-software-engineering-stuff&quot;&gt;A Note on ‘Software Engineering Stuff’&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;Before we start off, I want to quickly put out a short disclaimer (I consider this important enough to give it it’s own subsection)&lt;/p&gt;
&lt;p&gt;All ‘Engineering Stuff’ - from the way we write code, to design choices, to the tools we use &lt;em&gt;come with tradeoffs&lt;/em&gt;. This is the only universal law of software development (if there ever was one).&lt;br/&gt;There is no ‘absolute right’. If there were, you and I wouldn’t be needed much.&lt;br/&gt;That applies for this post as well, so don’t come charging towards me with a flame thrower.&lt;/p&gt;
&lt;p&gt;But while we don’t have an ‘absolute right’, we are lucky enough to be in a field where logical conversations are generally possible and a &lt;em&gt;question of whether it is raining or not can usually be settled by stepping outside.&lt;/em&gt;&lt;sup id=&quot;fnref:fno&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;stressed-and-struggling-for-time&quot;&gt;Stressed And Struggling For Time&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;Off late, when I got talking to a whole bunch of software developers around me, the theme of burn out and &lt;em&gt;never-having-enough-time&lt;/em&gt; was surprisingly recurrent (Surprising because, it was the exact same thing I go through as well - I thought I was a special snowflake with the weight of the world boring down upon me. Alas)&lt;br/&gt;When I reflect on it, it seems quite odd.&lt;/p&gt;
&lt;p&gt;Think about it - programming these days should be &lt;em&gt;easier&lt;/em&gt;. We are a product of decades worth of research and innovation in the field of computer science and software engineering - but most of us work way too hard (or, at least seem to work way too hard) , spend more time than necessary in dealing with bugs and are almost always behind deadlines.&lt;/p&gt;
&lt;p&gt;Most of us are working on a significantly higher plane of &lt;a href=&quot;https://xkcd.com/676/&quot;&gt;abstraction&lt;/a&gt; - on languages such as Python, Kotlin, Go etc.&lt;br/&gt;We almost never have to worry about memory management (unless you are one of the 8 people on the planet working on improving the garbage collector implementation)&lt;br/&gt;The frameworks of today help us in invariably pointing the gun in the right direction, but we never seem to ‘nail the target’ once and be done with it.&lt;/p&gt;
&lt;p&gt;We are always behind our product schedule and we want things to end - but they never do.&lt;/p&gt;
&lt;p&gt;My observation, here, is that we end up spending way too much time on things that don’t matter and spending increasingly lesser time on things that do.&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;things-that-matter-time-savers&quot;&gt;Things That Matter (Time Savers)&lt;/h2&gt;
&lt;hr/&gt;&lt;h3 id=&quot;learn-to-type-fast&quot;&gt;Learn to type Fast&lt;/h3&gt;
&lt;p&gt;‘But software engineers spend more time thinking than typing’, I can almost sense you thinking. Agreed.&lt;br/&gt;However, whenever you &lt;em&gt;do choose&lt;/em&gt; to grace the keyboard, your fingers must be in a position to do your bidding almost as fast as your brain thinks.&lt;br/&gt;Typing fast is one way to easily get one of the most mundane parts about our jobs become less painful.&lt;br/&gt;You don’t want to be the person who thinks their problem through on a piece of paper, has all the ‘structure ready in the head’ but gets bored halfway through implementing it since it’s a lot to &lt;em&gt;type out&lt;/em&gt; and it’s &lt;em&gt;taking a lot of time&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;More importantly, learning to type fast will help you interact with your developer environment a lot more efficiently.&lt;br/&gt;If you’re a Jedi, then think of the keyboard as your light saber. Be one with it and you’ll slice through anything that comes in your way.&lt;/p&gt;
&lt;p&gt;How to do it? Don’t go out looking for the best keyboard on the market. Just download &lt;a href=&quot;https://www.gnu.org/savannah-checkouts/gnu/gtypist/gtypist.html&quot;&gt;GnuTypist&lt;/a&gt; and do the touch typing course. You’ll find your basic laptop keyboard (butterfly keys or not) is capable of rocket speed with the right training.&lt;/p&gt;
&lt;hr/&gt;&lt;h3 id=&quot;turbocharge-your-dev-environment&quot;&gt;TurboCharge your Dev Environment&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;If you imagine you’re a Jedi&lt;sup id=&quot;fnref:fnj&quot;/&gt;, then your dev environment is the force. You can use it to move mountains by just focussing your energies and leveraging it’s powers.&lt;/p&gt;

&lt;hr/&gt;&lt;h4 class=&quot;no_toc&quot; id=&quot;master-your-ide&quot;&gt;Master your IDE&lt;/h4&gt;
&lt;p&gt;I have interacted with many engineers who treat their IDEs as little more than a notepad - using it simply for code navigation, certain auto complete features and use some debugging features.&lt;br/&gt;But modern IDEs have &lt;em&gt;so much more to offer&lt;/em&gt;.&lt;br/&gt;Want to rename a method? Change it’s parameters? Add Default values to parameters? All this can be accomplished &lt;em&gt;via a single shortcut&lt;/em&gt;.&lt;br/&gt;Want to Toggle Breakpoints? Jump in and out of methods while debugging? Yup, can be done in a single stroke.&lt;/p&gt;
&lt;p&gt;How to do it?&lt;br/&gt;Every time you are presented with a task that requires you to do any of the following, spend 5 minutes to check if your IDE has a command for it&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Repeat a change multiple times (like renaming a method everywhere it is being used)&lt;/li&gt;
&lt;li&gt;Switch tabs or windows to get from one place in code to the other (like going back to the method that you edited 10 minutes back)&lt;/li&gt;
&lt;li&gt;Interact with an external tool (say, running your build by switching to the terminal)&lt;/li&gt;
&lt;li&gt;Whenever you are using the mouse - your IDE will have a keyboard shortcut for it&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Also, spend 10 minutes a day going through any available tutorial for your IDE. In a month’s time you would have put in a solid 5 hours in learning a tool you use more than 1000 hours a year&lt;sup id=&quot;fnref:fnw&quot;/&gt;.&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;master-a-terminal-based-text-editor&quot;&gt;Master a terminal based text editor&lt;/h4&gt;
&lt;p&gt;In the age of IDEs, one should not forget the power of the text editor. While most of your coding would happen on an IDE, you’d invariably end up using a terminal based text editor for some part of your work.&lt;br/&gt;It may be while checking log files, or while writing a blog post (like this one) or logging on to a server and direct-editing files there&lt;sup id=&quot;fnref:fnd&quot;/&gt;.&lt;br/&gt;I &lt;em&gt;cannot&lt;/em&gt; imagine writing this blog on any other tool apart from my trusted vim. I have markers everywhere (adding a footnote is a keystroke away, for example), move lines from one section to the next in a blink and use the powerful search features to get around easily.&lt;br/&gt;Besides, &lt;a href=&quot;https://pragprog.com/book/dnvim2/practical-vim-second-edition&quot;&gt;learning Vim&lt;/a&gt; helped me improve how I work on my IDE (Vim Emulation FTW!)&lt;br/&gt;Yup, I use vim. You may use emacs. Here, go &lt;a href=&quot;https://xkcd.com/676/&quot;&gt;look at this&lt;/a&gt;, calm your nerves and come back.&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;theres-a-tool-for-everything&quot;&gt;There’s a tool for everything&lt;/h4&gt;
&lt;p&gt;As I mentioned earlier, we are blessed to be at a time and place where we can leverage ideas and hard work of thousands of people who’ve worked before us.&lt;br/&gt;Keep an eye out for things that &lt;em&gt;bother you&lt;/em&gt;, think of a probable solution to the problem and chances are that there is already a tool to help you with that.&lt;br/&gt;If you don’t find one, &lt;a href=&quot;mailto:yogesh@theboringtech.io&quot;&gt;email me&lt;/a&gt; and I’ll be happy to help you look for one.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Using the mouse to copy-paste text from your terminal ? &lt;a href=&quot;https://pragprog.com/book/bhtmux2/tmux-2&quot;&gt;Use Tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learning something new and tired of switching back-and-forth between browser and IDE? &lt;a href=&quot;https://i3wm.org/docs/userguide.html&quot;&gt;Use i3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ever wished you could navigate the browser with the keyboard? &lt;a href=&quot;https://vimium.github.io/&quot;&gt;Use Vimium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3 id=&quot;automate&quot;&gt;Automate&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/is_it_worth_the_time.png&quot; alt=&quot; xkcd &quot;/&gt; Here’s an old &lt;a href=&quot;https://xkcd.com/1205/&quot;&gt;xkcd&lt;/a&gt; post suggesting the RoI of making routine tasks more efficient.&lt;br/&gt;But here’s the kicker - since we mostly work in teams, any effort put in by &lt;em&gt;one person&lt;/em&gt; to automate routine tasks saves time for &lt;em&gt;everyone&lt;/em&gt;. Going by the above calculation, &lt;strong&gt;if one person on a team of 10 engineers spends 3 whole days shaving off even 30 seconds on a task done by everyone only 5 times a day, we would have gotten a complete return on investment over a period of just 6 months&lt;/strong&gt;. Bring that up in your next sprint planning meet.&lt;br/&gt;People always talk about the prodigious 5X engineer. The reality, though, is a lot more boring than that. 5X engineers, in my opinion, are those that help 5 more developers save some time in daily tasks.&lt;/p&gt;
&lt;p&gt;Just like other things, chances are that whatever you’re looking to do, there’s a tool for that. In case you’re having trouble finding one, &lt;a href=&quot;mailto:yogesh@theboringtech.io&quot;&gt;email me&lt;/a&gt; and we can find one together.&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;tests&quot;&gt;Tests&lt;/h4&gt;
&lt;p&gt;Tests are, unfortunately, one of those contentious ‘Engineering’ topics that I mentioned earlier.&lt;br/&gt;Each time you’ve written a piece of code, or reviewed a piece of code, or have spent time diagnosing a bug - if you have a test case for that method/class/API, you’ll be able to move faster (and this applies to all members for your team, mind you)&lt;br/&gt;I am personally whole heartedly subscribed to having tests at all possible levels one can, but that’s the thing - you &lt;em&gt;don’t need to be&lt;/em&gt;. The quest here is to &lt;em&gt;save time&lt;/em&gt;, and like with all ‘Engineering Stuff’, there are tradeoffs and there are more than one ways to achieve the same goal.&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;continuous-delivery&quot;&gt;Continuous Delivery&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://continuousdelivery.com/&quot;&gt;Continuous Delivery&lt;/a&gt; processes help you significantly save time avoiding routine dances before a release.&lt;br/&gt;A word of caution, though - simply &lt;em&gt;deploying to production&lt;/em&gt; multiple times a day &lt;strong&gt;does not qualify&lt;/strong&gt; as continuous delivery.&lt;br/&gt;There is more than enough information on the principles and practices of CD on the website (and Jez &amp;amp; Fowler’s books/lectures) that I need not go deeper into it.&lt;/p&gt;
&lt;p&gt;Just remember - the Returns of even 1 engineer’s efforts on setting up good CD practices are multiplicative.&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;script-it-out&quot;&gt;Script it out&lt;/h4&gt;
&lt;p&gt;The power of scripting for low-fi tasks is invaluable.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Do you routinely check for the same ‘x’ things while diagnosing an issue? Script it out&lt;/li&gt;
&lt;li&gt;Is your company having a lot of new people joining the team and you have to explain the same steps to them, despite there being a documentation for it? &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Script it out&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3 id=&quot;know-your-infrastructure&quot;&gt;Know your infrastructure&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;When I was working as an infrastructure engineer, we routinely had &lt;strong&gt;emergency&lt;/strong&gt; emails asking us to &lt;em&gt;check if the infra is fine&lt;/em&gt;. Of course, it was always an emergency since the application was acting up and users were affected; and Of course, &lt;em&gt;it must be the infra&lt;/em&gt; which is responsible for it.&lt;br/&gt;It’s easy to suggest,&lt;strong&gt;“It &lt;em&gt;must&lt;/em&gt; be the kernel [or the network or the database or the infrastructure]”&lt;/strong&gt;. Don’t be that person. Don’t &lt;em&gt;guess&lt;/em&gt; things - learn to diagnose things on your own.&lt;/p&gt;
&lt;p&gt;Yes, we deal with complex systems when we deploy our code today. The application code we deploy may end up running in a container which itself is running on a Host Operating System running other containers; the Host OS may itself run as a Virtual Machine which may run on another completely different Operating System sitting in a big box which hosts 10s of such machines. Our code may ‘hit an API’ which results in multiple network hops - perhaps to a machine located in an adjacent building in the same ‘Data Center’.&lt;br/&gt;&lt;strong&gt;&lt;em&gt;Every parameter&lt;/em&gt;&lt;/strong&gt; of &lt;strong&gt;&lt;em&gt;everything involved in that setup&lt;/em&gt;&lt;/strong&gt; - from the configuration of the OS, to the number of applications running on the host system, to a link flapping on a network cable on the core switch can result in your application behaving weird. This is the reality. While it is &lt;em&gt;almost impossible&lt;/em&gt; to know &lt;em&gt;everything&lt;/em&gt; about your infrastructure, simple tools will help you navigate a large subset of routinely faced issues.&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;learn-how-things-are-deployed-to-production&quot;&gt;Learn how things are deployed to production&lt;/h4&gt;
&lt;p&gt;Figure how/where your application code runs.&lt;br/&gt;Is it running in a container? What is the configuration of the host machine? Do you know where to look to get basic stats on CPU and IO usage (Network &amp;amp; Disk)?&lt;br/&gt;Does traffic come to it via a load balancer? Where do you find the stats for that?&lt;br/&gt;How is a service call to a dependency (datastore or other application) made? Does it involve a network? If yes, how is that traffic routed?&lt;/p&gt;
&lt;p&gt;Knowing this would help you isolate issues faster. This will help you apply &lt;a href=&quot;https://www.infoq.com/articles/the-box/&quot;&gt;The Box&lt;/a&gt; technique to isolate performance bottlenecks.&lt;/p&gt;
&lt;h4 class=&quot;no_toc&quot; id=&quot;learn-more-about-your-datastore&quot;&gt;Learn more about your datastore&lt;/h4&gt;
&lt;p&gt;Invariably, a significant part of your application’s job would be either reading from or writing to a myriad of data stores.&lt;br/&gt;Basically, If you’re married to your application and love it, then the datastore is like extended family. You &lt;em&gt;must&lt;/em&gt; spend time learning more about it.&lt;/p&gt;
&lt;p&gt;A colleague once brought a replication lag of ~3hours down to under 1second on a MySQL slave by simply RTFM on various configurations of the storage engine.&lt;br/&gt;Similarly, I’ve seen a DBA mitigate a crisis (of what everyone thought was a DDOS) by zeroing in on a query and running &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPLAIN&lt;/code&gt; for it.&lt;/p&gt;
&lt;p&gt;These may seem like wizardry, but it is mostly just people RTFM and spending time to learn more about the datastore their application adores.&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;things-that-dont-matter-time-sinks&quot;&gt;Things That Don’t Matter (Time Sinks)&lt;/h2&gt;
&lt;hr/&gt;&lt;h3 id=&quot;my-language-is-the-best-or-your-language-sucks&quot;&gt;My Language is the best (Or, your language sucks)&lt;/h3&gt;
&lt;p&gt;I once attended a conference where the founder of a hot-startup proclaimed, on stage, that they chose ‘Functional Programming’ over procedural because it is &lt;em&gt;‘Theoretically Superior’&lt;/em&gt;.&lt;br/&gt;No, it is not. Both Church and Turing &lt;a href=&quot;https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis&quot;&gt;&lt;em&gt;proved that&lt;/em&gt;&lt;/a&gt;.&lt;br/&gt;More importantly, any functional code you write is converted to it’s Turing equivalent - we don’t have a real machine built on church calculus.&lt;/p&gt;
&lt;p&gt;Such ideological stances are generally rooted in half baked understanding of things and compounded by the desire of someone to come off as &lt;em&gt;cool&lt;/em&gt; by knowing &lt;em&gt;more&lt;/em&gt; about esoteric/obscure or even the latest-and-greatest-shiny-new-thing.&lt;br/&gt;Sure, [Modern] functional languages are designed to help provide &lt;em&gt;less ways to shoot oneself in the foot&lt;/em&gt; , but a well oiled C++ company&lt;sup id=&quot;fnref:fn1&quot;/&gt; would have evolved standards and patterns to write as beautiful a code than what a company working on Kotlin or Scala can; so where’s the difference?&lt;/p&gt;
&lt;p&gt;It’s all about finding what &lt;strong&gt;&lt;em&gt;works best for you&lt;/em&gt;&lt;/strong&gt;, taking early bets and seeing them through.&lt;br/&gt;booking.com used to work on perl; cleartrip.com on lisp; udaan.com works on kotlin ; there are 1000s of successful companies working in Java/C++. It doesn’t matter.&lt;br/&gt;What matters is how productive the organisation is - how effective developers are at making progress on the job at hand - and &lt;strong&gt;whether or not it is helping you move forward&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;x-doesnt-scale-lets-switch-to-y&quot;&gt;‘X’ doesn’t scale, Lets Switch to ‘Y’&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;During an interview with a young dev, I enquired as to how he had ‘helped scale up &amp;lt;service x&amp;gt; and made it more performant’. He revealed how his mentor had advised him to &lt;em&gt;switch to python web server&lt;/em&gt; because &lt;em&gt;nginx is slow&lt;/em&gt;. It is indescribable&lt;sup id=&quot;fnref:fn2&quot;/&gt; how I felt when I heard this. But after a few brief seconds of an emotional whirlwind, I empathised with him.&lt;/p&gt;
&lt;p&gt;In a similar vein, in another interview, someone described how they ‘moved away from JSON to GRPC’ because JSON was bloating their APIs too much and GRPC is more performant.&lt;/p&gt;
&lt;p&gt;I do not want to get into the merits/demerits of the choices they took (thereby, abiding with the advise that I am repeatedly giving here).&lt;br/&gt;I do, however, want to draw your attention to some facts that apply to most of us in general:&lt;/p&gt;
&lt;p&gt;We live in a time where we can easily procure and deploy very powerful hardware. Unless you have chosen some of the &lt;em&gt;worst written&lt;/em&gt; frameworks&lt;sup id=&quot;fnref:fn3&quot;/&gt;, they &lt;em&gt;will&lt;/em&gt; ‘scale’ more than you may imagine .&lt;br/&gt;The word &lt;em&gt;scale&lt;/em&gt; is also one of those things we notoriously are prone to brag about based on our half baked understanding of things and the desire to be ‘cool’.&lt;br/&gt;I used to be one of those people. Back in the day, we were proudly managing a service with 10k reads-per-second (has your jaw dropped yet?) backed by a 32core 128GB MySql machine.&lt;br/&gt;I was proud of the ‘scale’ we had managed to weather, until a dev with about 15 years of experience joined our team. He casually remarked one day that he could run 3 of his last startups with that much computing power&lt;sup id=&quot;fnref:fn4&quot;/&gt;. I learnt a big lesson that day, that life is not a bragging contest. Also, what we &lt;em&gt;think is scale&lt;/em&gt; is probably not. We are prone to boast of our accomplishments but they are largely the result of us &lt;a href=&quot;https://www.lpalmieri.com/posts/2020-03-08-on-the-shoulders-of-the-giants/&quot;&gt;standing on the shoulders of giants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While dealing with and handling scale is beyond the scope of this blog post, I’d leave you with this general advise&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;em&gt;Learn one base tool for the job and learn it really really well&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;For e.g, pick up nginx/apache web server and I almost guarantee you that these will break much much later than your entire application stack.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;RTFM &amp;amp; Benchmark&lt;/em&gt;&lt;/strong&gt;&lt;br/&gt;Benchmark every tool/technology that you are picking up. This way, you’d be more aware of the ‘limits’ of that technology.&lt;br/&gt;How you benchmark is beyond the scope of this post (perhaps even beyond the scope of me) but a simple process can yield fairly good results.&lt;br/&gt;Push a technology to its limits by maxing out the resources (compute / memory / network / disk IO) it is supposed to consume on a common piece of hardware (which you’ll most likely employ in production)&lt;br/&gt;Once you max it out, RTFM and tweak it to ‘improve’ upon the limit that you just hit.&lt;br/&gt;Repeat till you’ve either satisfied your intellectual curiosity, or realised that the solution you’ve chosen can handle 10x more of your predicted scale.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;lets-use-a-thing-i-just-learnt-about-its-perfect-for-the-job&quot;&gt;Lets use a &amp;lt;thing-i-just-learnt-about&amp;gt;. Its perfect for the job&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;A young dev we hired was given the task of writing a simple CRUD application. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Update&lt;/code&gt; part of it, I thought, was particularly tricky, so I figured it’d be a project right up his alley and challenge his skills. He was sharp, full of energy &amp;amp; wanted to prove himself - everything you want in a young developer.&lt;br/&gt;He also wanted to use a &amp;lt;distributed-highly-scalable-queue&amp;gt; in the application.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Me: Why?

YD(Young dev): It will help us scale faster in the future and guard 
against the impedance mismatch between the core business logic and the 
rate at which clients hit the API.

Me: Sure, but do you really want to take on the complexity of having a distributed queue so soon in the life cycle of your application? It'll probably not hit the scale you mentioned for quite some time

YD: Oh there's no complexity, we can just use the one provided by 
&amp;lt;cloud-provider-x&amp;gt;

Me: But what if it looses data? Since your application deals with 
money, it is critical we don't loose a single piece of information

YD: How will a queue loose data?

Me: Any distributed system can loose data

YD: How so?

Me: Ever had a payment fail where your money was deducted but the 
order failed at the merchant page? That's a distributed system losing 
data (Not the best of examples, I know)

YD: That's different. Those are multiple different services and 
ecosystems. Queues reside within the same private cloud - probably the 
same data center. The problems of the internet don't apply here 
(Oh Snap! He got me)

Me: Yes, but there is still a network. And the queue given by 
&amp;lt;cloud-provider-x&amp;gt; is yet another piece of software written by people 
like you and me. What if it has a bug ?

YD: Oh
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I encouraged him to read &lt;a href=&quot;http://book.mixu.net/distsys/single-page.html&quot;&gt;Distributed Systems for Fun and profit&lt;/a&gt;.&lt;br/&gt;I also showed him how the complexity of his system lies in the design of the data model and the API and not in scale (yet).&lt;br/&gt;A good model would also help us ‘scale well’ in the future (when we may, inevitably, have to rely on complicated distributed systems)&lt;sup id=&quot;fnref:fnc&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There was yet another instance of a more seasoned developer who wanted to rewrite our order management system and use &amp;lt;the-latest-and-greatest&amp;gt; NoSQL solution offered by &amp;lt;cloud-provider-x&amp;gt;.&lt;br/&gt;It would help us &lt;em&gt;‘be ready’&lt;/em&gt; for a potentially 100x more scale than what we’re currently facing, he claimed. This in itself was scary (refer previous discussion), but what was scarier was that not once did he mention&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Whether or if going with NoSQL was &lt;em&gt;inherently better&lt;/em&gt; since it would provide us with a data model that will prevent future developers from shooting themselves in the foot&lt;/li&gt;
&lt;li&gt;If all the complex business use cases could be handled within the bounds (such as row level atomicity) imposed by the NoSQL data store (the current system relied heavily on RDBMs transactions to stay ‘correct’)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;My whole point is this - yes, what we do is generally complex and we live in a world where our tools are constantly evolving. We need to continuously up skill ourselves and learn more to stay relevant.&lt;br/&gt;It is important to have the knowledge of a number of tools in our mental tool set - so we can employ any of them for the job at hand.&lt;br/&gt;It is more important, however, to get an understanding of using the right tool &lt;em&gt;for the job&lt;/em&gt;. Our work as engineers is to &lt;strong&gt;&lt;em&gt;help the company make money by keeping customers happy&lt;/em&gt;&lt;/strong&gt;. Not to show off the &lt;em&gt;latest-thing-I-just-learnt-about&lt;/em&gt; to our peers.&lt;/p&gt;
&lt;h3 id=&quot;your-way-is-wrong&quot;&gt;Your way is wrong&lt;/h3&gt;
&lt;hr/&gt;&lt;p&gt;As already mentioned, there is no ‘absolute right’ when it comes to Engineering Stuff. Similarly, there is no ‘absolute wrong’.&lt;/p&gt;
&lt;p&gt;One of my favourite software stories is unfortunately not a first hand experience. This was from early 2010s when a friend worked for a company that deployed engineers in the client’s team to augment their bandwidth. They were supporting a complicated piece of legacy software. My friend found a piece of code ‘written in an odd way’. He couldn’t intuitively grasp it and thought it could be ‘written better’&lt;sup id=&quot;fnref:fn5&quot;/&gt;. He did what most of us do - googled around and &lt;em&gt;found&lt;/em&gt; a better way.&lt;br/&gt;He then cautiously approached the grey-bearded engineer who had originally written that code. My friend pointed to the ‘design pattern’ on the internet and suggested how code could be written better.&lt;br/&gt;To his absolute credit, my friend inquired sincerely as to why the code was written the way it was.&lt;br/&gt;To this, the older engineer promptly replied “Why yes, of course this does seem better. But you know the thing is, &lt;strong&gt;&lt;em&gt;when I wrote this, there was no internet&lt;/em&gt;&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;I absolutely love this story and remind myself each time I look to &lt;em&gt;blame someone for how it’s written&lt;/em&gt;.&lt;br/&gt;If you write code for long enough, you will come across code that would want you to become the &lt;a href=&quot;https://www.reddit.com/r/ProgrammerHumor/comments/9csrpv/always_code_as_if_the_guy_who_ends_up_reading/&quot;&gt;proverbial psychopath&lt;/a&gt; and shoot the original author.&lt;br/&gt;However, it is important to be empathetic instead. It is necessary to have mutual respect towards your peers(if you don’t, you probably shouldn’t be there in the first place&lt;sup id=&quot;fnref:fn6&quot;/&gt;)&lt;br/&gt;If possible, try to understand why things are done the way they were done.&lt;br/&gt;If that’s not possible, it is perfectly fine to poke fun at the original author, make a note of how you’d change it instead and come back to it when you have the time. Move on&lt;sup id=&quot;fnref:fn7&quot;/&gt;. Don’t spend time criticizing others.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;I hope you found this useful (assuming you didn’t come here just to &lt;em&gt;see how it ends&lt;/em&gt;).&lt;br/&gt;I’d love to hear what you think. We don’t have a comment section yet, so if you want you can &lt;a href=&quot;mailto:yogesh@theboringtech.io&quot;&gt;email me&lt;/a&gt; or comment on &lt;a href=&quot;https://news.ycombinator.com/item?id=22977637&quot;&gt;HackerNews&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;
</description>
<pubDate>Sat, 25 Apr 2020 12:38:51 +0000</pubDate>
<dc:creator>hackeryogi</dc:creator>
<og:title>Time is the only real currency we have</og:title>
<og:url>https://blog.theboringtech.io/2020/04/16/time_is_the_real_currency.html</og:url>
<og:description>An Ed edition</og:description>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.theboringtech.io/2020/04/16/time_is_the_real_currency.html</dc:identifier>
</item>
<item>
<title>UChicago doctors see ‘remarkable’ success using ventilator alternatives</title>
<link>https://www.uchicagomedicine.org/forefront/coronavirus-disease-covid-19/uchicago-medicine-doctors-see-truly-remarkable-success-using-ventilator-alternatives-to-treat-covid19</link>
<guid isPermaLink="true" >https://www.uchicagomedicine.org/forefront/coronavirus-disease-covid-19/uchicago-medicine-doctors-see-truly-remarkable-success-using-ventilator-alternatives-to-treat-covid19</guid>
<description>&lt;p&gt;Doctors at the University of Chicago Medicine are seeing “truly remarkable” results using high-flow nasal cannulas rather than ventilators and intubation to treat some COVID-19 patients.&lt;/p&gt;
&lt;p&gt;High-flow nasal cannulas, or HFNCs, are non-invasive nasal prongs that sit below the nostrils and blow large volumes of warm, humidified oxygen into the nose and lungs.&lt;/p&gt;
&lt;p&gt;A team from UChicago Medicine’s emergency room took dozens of COVID-19 patients who were in respiratory distress and gave them HFNCs instead of putting them on ventilators. The patients all fared extremely well, and only one of them required intubation after 10 days.&lt;/p&gt;
&lt;p&gt;“The success we’ve had has been truly remarkable,” said &lt;a href=&quot;https://www.uchicagomedicine.org/find-a-physician/physician/michael-f-oconnor&quot;&gt;Michael O’Connor, MD&lt;/a&gt;, UChicago Medicine’s Director of Critical Care Medicine.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;The curve having been flattened has provided us a world of relief.&lt;/p&gt;
&lt;/blockquote&gt;
The HFNCs are often combined with prone positioning, a technique where patients lay on their stomachs to aid breathing. Together, they’ve helped UChicago Medicine doctors avoid dozens of intubations and have decreased the chances of bad outcomes for COVID-19 patients, said &lt;a href=&quot;https://www.uchicagomedicine.org/find-a-physician/physician/thomas-spiegel&quot;&gt;Thomas Spiegel, MD&lt;/a&gt;, Medical Director of UChicago Medicine’s Emergency Department.

&lt;p&gt;“The proning and the high-flow nasal cannulas combined have brought patient oxygen levels from around 40% to 80% and 90%, so it’s been fascinating and wonderful to see,” Spiegel said.&lt;/p&gt;
&lt;p&gt;Mechanical ventilation – the most common treatment for these patients thus far – involves inserting a breathing tube into the windpipe so a ventilator can pump air into the lungs. Using a ventilator or intubation as a last resort – an approach UChicago Medicine teams call “prevent the vent” – helps get COVID-19 patients out of the hospital intensive care unit and prevents harmful side effects caused by ventilators, such as lung injuries.&lt;/p&gt;
&lt;p&gt;“Avoiding intubation is key,” Spiegel said. “Most of our colleagues around the city are not doing this, but I sure wish other ERs would take a look at this technique closely.”&lt;/p&gt;
&lt;p&gt;This approach is not without risk, however. HFNCs blow air out, and convert the COVID-19 virus into a fine spray in the air. To protect themselves from the virus, staff must have proper personal protective equipment (PPE), negative pressure patient rooms, and anterooms, which are rooms in front of the patient rooms where staff can change in and out of their safety gear to avoid contaminating others.&lt;/p&gt;
&lt;p&gt;UChicago Medicine’s Emergency Department recently doubled its number of anterooms, thereby doubling its capacity to give high-flow nasal cannula to patients. The main hospital also added negative pressure rooms on two floors, making it safer and easier to take care of COVID-19 patients.&lt;/p&gt;
&lt;p&gt;Since the first COVID-positive patient was admitted March 13, UChicago Medicine has successfully treated and discharged 297 patients with the virus. Even as the number of hospitalized COVID-19 patients has grown, doctors have managed ventilator usage. As of Wednesday, UChicago Medicine had 137 COVID-19 patients, but only 27 of them were on ventilators. The medical staff has avoided mechanical ventilation on 40% of patients, and extubated 50% of those who needed ventilators, O’Connor said.&lt;/p&gt;
&lt;p&gt;“It’s a phenomenal number, because in Italy, the number of extubations was much lower,” O’Connor said, who also gave credit to the cross-team collaboration.&lt;/p&gt;
&lt;p&gt;UChicago Medicine care teams got an early preview of how COVID-19 treatments were working in China and Italy from the university’s hospital affiliates in those countries. When the time came for the Hyde Park-based health system to start caring for COVID-19 patients, they’d already concluded that steroids were an ineffective treatment. The UChicago Medicine teams opted to use less invasive approaches, such as HFNCs or &lt;a href=&quot;https://www.uchicagomedicine.org/forefront/patient-care-articles/helmet-based-ventilation-is-superior-to-face-mask-for-patients-with-respiratory-distress&quot;&gt;helmet ventilators&lt;/a&gt;. For patients who did require mechanical ventilation, the goal was to get those people off the ventilator as soon as possible.&lt;/p&gt;
&lt;p&gt;O’Connor and Spiegel agree that the steps the city took to flatten the curve worked. At first, UChicago Medicine was doubling its cases every 2-3 days, leaving doctors terrified of running out of space, staff and equipment. Now that the doubling time of COVID-19 patients has slowed to approximately 12 days, it helps the hospital staff generate good outcomes.&lt;/p&gt;
&lt;p&gt;“The curve having been flattened has provided us a world of relief,” Spiegel said.&lt;/p&gt;
</description>
<pubDate>Sat, 25 Apr 2020 10:14:36 +0000</pubDate>
<dc:creator>9nGQluzmnq3M</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.uchicagomedicine.org/forefront/coronavirus-disease-covid-19/uchicago-medicine-doctors-see-truly-remarkable-success-using-ventilator-alternatives-to-treat-covid19</dc:identifier>
</item>
<item>
<title>PlantNet – App that helps identify plants from pictures</title>
<link>https://plantnet.org/en/</link>
<guid isPermaLink="true" >https://plantnet.org/en/</guid>
<description>&lt;h4 class=&quot;service-title&quot;&gt;Pl@ntNet needs you!&lt;/h4&gt;
                                        &lt;p&gt;Pl@ntNet is a research and educational initiative on plant biodiversity supported by Agropolis Foundation since 2009. The sustainability of this initiative, which requires human and technological means, can only be assured …&lt;/p&gt;
                                    </description>
<pubDate>Sat, 25 Apr 2020 08:27:17 +0000</pubDate>
<dc:creator>shrikant</dc:creator>
<og:type>website</og:type>
<og:title>Home - Pl@ntNet</og:title>
<og:description>With the Pl@ntNet app, identify one plant from a picture, and be part of a citizen science project on plant biodiversity</og:description>
<og:url>https://plantnet.org/en/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://plantnet.org/en/</dc:identifier>
</item>
<item>
<title>Shell Productivity Tips and Tricks</title>
<link>https://blog.balthazar-rouberol.com/shell-productivity-tips-and-tricks.html</link>
<guid isPermaLink="true" >https://blog.balthazar-rouberol.com/shell-productivity-tips-and-tricks.html</guid>
<description>&lt;img src=&quot;https://balthazar-rouberol-blog.s3.eu-west-3.amazonaws.com/shell-productivity/header.jpg&quot; class=&quot;article__main_img&quot;/&gt;&lt;header readability=&quot;9.1987179487179&quot;&gt;&lt;p&gt;This article is part of a self-published book project by Balthazar Rouberol and &lt;a href=&quot;https://etnbrd.com&quot;&gt;Etienne Brodu&lt;/a&gt;, ex-roommates, friends and colleagues, aiming at empowering the up and coming generation of developers. We currently are hard at work on it!&lt;/p&gt;
&lt;p&gt;If you are interested in the project, we invite you to join the &lt;a href=&quot;https://balthazar-rouberol.us4.list-manage.com/subscribe?u=1f6080d496af07a836270ff1d&amp;amp;id=81ebd36adb&quot;&gt;mailing list&lt;/a&gt;!&lt;/p&gt;
&lt;/header&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;

&lt;p&gt;I estimate that I spend around 50% of my day working in my text editor and my terminal. Any way I can get more productive in these environments has a direct and measurable impact on my daily productivity as a whole.&lt;/p&gt;
&lt;p&gt;If you spend a good chunk of your day repeatedly hitting the left and right arrow keys to navigate in long commands or correct typos, or hitting the up or down arrow keys to navigate your command history, this chapter should help you get more done quicker. We will cover some shell features you can leverage to make your shell do more of the work for you.&lt;/p&gt;
&lt;p&gt;On a personal level, I probably use some of these up to 30 times a day, sometimes even without thinking about it, and it gives me a real sense of ownership of my tool.&lt;/p&gt;
&lt;p&gt;In the immortal words of Kimberly “Sweet Brown” Wilkins:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Ain't nobody got time for that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Tab completion&lt;/h2&gt;
&lt;p&gt;When you are typing in your shell, I suggest you treat the &lt;kbd&gt;Tab&lt;/kbd&gt; key as a superpower. Indeed, the same way your phone keyboard can autocomplete words for you, so can your shell. It can suggest completions of command names and even command arguments or options! This works by pressing &lt;kbd&gt;Tab&lt;/kbd&gt; (twice for &lt;code&gt;bash&lt;/code&gt; and once for &lt;code&gt;zsh&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&quot;Note&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;One of the reasons &lt;code&gt;zsh&lt;/code&gt; might be favored over &lt;code&gt;bash&lt;/code&gt; is its more powerful auto-completion system, giving more results out-of-the-box and allowing you to navigate through the auto-completion options.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here is an example of &lt;code&gt;bash&lt;/code&gt; auto-completing a command name:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;
$ mkd&lt;span class=&quot;k&quot;&gt;&amp;lt;&lt;/span&gt;Tab&amp;gt;
mkdep  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is an example of &lt;code&gt;bash&lt;/code&gt; auto-completing a command argument:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;man&lt;/span&gt; mkd&lt;span class=&quot;k&quot;&gt;&amp;lt;&lt;/span&gt;Tab&amp;gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt;         mkdirat       mkdtemp       mkdtempat_np
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, an example of &lt;code&gt;bash&lt;/code&gt; auto-completing a command option:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;python&lt;/span&gt; -&lt;span class=&quot;k&quot;&gt;&amp;lt;&lt;/span&gt;Tab&amp;gt;
-    -3   -B   -E   -O   -OO  -Q   -R   -S   -V   -W
-b   -c   -d   -h   -i   -m   -s   -t   -u   -v   -x
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I suggest you get used to using auto-completion as much as possible. It can save you keystrokes, as well as make you discover command options you didn't know about.&lt;/p&gt;
&lt;p&gt;Pro-tip: if you are using bash, you can get install the &lt;code&gt;bash-completion&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;/&gt; package (using your system package-manager) in order to enable auto-completion for a wide variety of commands that do not support it out-of-the-box.&lt;/p&gt;

&lt;h2&gt;Keyboard shortcuts&lt;/h2&gt;
&lt;p&gt;The shell uses a library called &lt;code&gt;readline&lt;/code&gt;&lt;sup id=&quot;fnref:2&quot;/&gt; to provide you with many keyboard shortcuts to navigate, edit, cut, paste, search, etc, in the command line. Mastering these will help to dramatically increase your efficiency, instead of copying and pasting with your mouse, and navigating the command with the &lt;kbd&gt;↑&lt;/kbd&gt; and &lt;kbd&gt;↓&lt;/kbd&gt; arrow keys.&lt;/p&gt;
&lt;p&gt;The default shortcuts are inspired by the &lt;code&gt;emacs&lt;/code&gt;&lt;sup id=&quot;fnref:3&quot;/&gt; terminal-based text editor. If you are already familiar with it, a lot of the default &lt;code&gt;readline&lt;/code&gt; shortcuts might feel familiar. &lt;code&gt;emacs&lt;/code&gt; isn't the only famous text editor in the history of computers though: another one, dating back from 1976, is &lt;code&gt;vi&lt;/code&gt;.&lt;sup id=&quot;fnref:4&quot;/&gt;&lt;code&gt;vi&lt;/code&gt; and &lt;code&gt;emacs&lt;/code&gt; are designed in two very different ways, and have two very different logics. It is possible that one might “click” more than the other for you. If you happen to be familiar with the &lt;code&gt;vi&lt;/code&gt; editor and are accustomed to its navigation system, you can replicate it in your shell as well by adding &lt;code&gt;set -o vi&lt;/code&gt; in your shell configuration file. If you are using &lt;code&gt;zsh&lt;/code&gt; with the Oh My Zsh framework that we introduced in the previous chapter, you can also use the &lt;code&gt;vi-mode&lt;/code&gt; plugin to do this.&lt;/p&gt;
&lt;p&gt;The advantage of using the same navigation logic and shortcuts in your text editor and your terminal is that is blurs the line between both, and brings consistency to your terminal environment. If you have no clue how &lt;code&gt;emacs&lt;/code&gt; or &lt;code&gt;vi&lt;/code&gt; work though, I would probably suggest you don't worry about all this for now and experiment with the default terminal shortcuts.&lt;/p&gt;
&lt;h3&gt;Navigating the current line&lt;/h3&gt;
&lt;p&gt;The following navigation shortcuts allow you to move quickly your cursor in the current command saving you from relying solely on the &lt;kbd&gt;→&lt;/kbd&gt; and &lt;kbd&gt;←&lt;/kbd&gt; arrows.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Navigation&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;Go to beginning of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;A&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Go to end of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;E&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Go to next word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Alt&lt;/kbd&gt; - &lt;kbd&gt;F&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Go to previous word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Alt&lt;/kbd&gt; - &lt;kbd&gt;B&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Toggle your cursor between its current position and the beginning of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;X&lt;/kbd&gt; - &lt;kbd&gt;X&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;If you however prefer using the &lt;code&gt;vi&lt;/code&gt; navigation system, you will first need to type &lt;kbd&gt;Esc&lt;/kbd&gt; to switch from the &lt;em&gt;Insertion&lt;/em&gt; mode to an emulation of &lt;code&gt;vi&lt;/code&gt;'s &lt;em&gt;normal&lt;/em&gt; mode, in which you can navigate in your text using the following shortcuts:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Navigation&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;Go to beginning of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;^&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Go to end of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;$&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Go to next word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;w&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Go to previous word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Move to the end of the previous word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;You can go back to editing your command line by hitting the &lt;code&gt;i&lt;/code&gt; key.&lt;/p&gt;
&lt;h3&gt;Deleting and editing text&lt;/h3&gt;
&lt;p&gt;These shortcuts allow you to quickly edit the current command more efficiently than by just using the &lt;kbd&gt;Delete&lt;/kbd&gt; key.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Edition&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr&gt;&lt;td&gt;Delete current character&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;D&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Delete previous word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;W&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Delete next word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Alt&lt;/kbd&gt; - &lt;kbd&gt;D&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Edit the current command in your text editor&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;X&lt;/kbd&gt; &lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;E&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Undo previous action(s)&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;-&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The equivalent &lt;code&gt;vi&lt;/code&gt;-style shortcuts are:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Edition&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Replace current character by another (ex: &lt;em&gt;e&lt;/em&gt;)&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;r&lt;/kbd&gt; - &lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Delete current character&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Delete previous word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;d&lt;/kbd&gt; - &lt;kbd&gt;b&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Delete next word&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;d&lt;/kbd&gt; - &lt;kbd&gt;w&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Edit the current command in your text editor&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;v&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Undo previous action(s)&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;u&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Cutting and pasting&lt;/h3&gt;
&lt;p&gt;The shell provides you with shortcuts to cut and paste commands quickly without using your mouse.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Action&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Cut current word before the cursor&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;W&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Cut from cursor to end of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;K&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Cut from cursor to start of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;U&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Paste the cut buffer at current position&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;Y&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The equivalent &lt;code&gt;vi&lt;/code&gt;-style shortcuts are:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Action&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Shortcut&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;4&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Cut current word before the cursor&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;d&lt;/kbd&gt; - &lt;kbd&gt;w&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Cut from cursor to end of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;d&lt;/kbd&gt; - &lt;kbd&gt;$&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Cut from cursor to start of line&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;d&lt;/kbd&gt; - &lt;kbd&gt;^&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Paste the cut buffer at current position&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3&gt;Controlling the terminal&lt;/h3&gt;
&lt;p&gt;Finally, these shortcuts will let you interact with the terminal itself.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Action&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Shortcut&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Equivalent command&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;3&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Clear the terminal screen&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;L&lt;/kbd&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Close the terminal screen&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;D&lt;/kbd&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Send current command to the background.&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;Z&lt;/kbd&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Even mastering &lt;em&gt;some&lt;/em&gt; of these shortcuts should make you immensely more productive at typing commands and navigating command-line interfaces. I suggest you take time to experiment until you feel more accustomed with them. I can guarantee that you will feel the productivity boost!&lt;/p&gt;
&lt;h3&gt;A unified command-line editing experience&lt;/h3&gt;
&lt;p&gt;These shortcuts do not just work in your shell, but in any application using the &lt;code&gt;readline&lt;/code&gt; library to allow the user to type and edit commands. Learning these shortcuts will thus make you productive in all types of command lines that you might encounter in your career, such as &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;irb&lt;/code&gt;, &lt;code&gt;sqlite3&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;To make sure you get a smooth and homogeneous editing experience in all command lines you use in your system, you can set your preferred mode in the &lt;code&gt;readline&lt;/code&gt; configuration file itself.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.inputrc
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; editing-mode vi  &lt;span class=&quot;c1&quot;&gt;# or emacs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Navigating through history&lt;/h2&gt;
&lt;p&gt;If you find yourself typing a certain command times and times again, you should probably be aware of how to navigate and search your shell history, in order to save time and keystrokes.&lt;/p&gt;
&lt;p&gt;While the obvious way to re-execute a previous command might seem to just bash on the &lt;kbd&gt;↑&lt;/kbd&gt; key until you find the command you want, there are faster and smarter ways to accomplish this.&lt;/p&gt;
&lt;h3&gt;Searching the history&lt;/h3&gt;
&lt;p&gt;A very useful and time-saving trick is searching for a command into your shell history instead of re-typing it from scratch. You can search your command history by typing &lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;R&lt;/kbd&gt; which opens a &lt;code&gt;reverse-i-search&lt;/code&gt; (backwards search) prompt, in which you can search for previously executed command containing a given search pattern.&lt;/p&gt;
&lt;p&gt;Type &lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;R&lt;/kbd&gt; to navigate through the results, until you find the one you were looking for and type the &lt;kbd&gt;Enter&lt;/kbd&gt; key to execute it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;k&quot;&gt;&amp;lt;&lt;/span&gt;Ctrl-R&amp;gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;reverse-i-search&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;&lt;/span&gt;Ctrl-R&amp;gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;&lt;/span&gt;Enter&amp;gt;
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to stop the search, either hit &lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;C&lt;/kbd&gt; or &lt;kbd&gt;Ctrl&lt;/kbd&gt; - &lt;kbd&gt;G&lt;/kbd&gt; to be sent back into the regular shell prompt.&lt;/p&gt;
&lt;p&gt;History search works by looking into the shell history file (&lt;code&gt;~/.bash_history&lt;/code&gt; for &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;~/.zsh_history&lt;/code&gt; for &lt;code&gt;zsh&lt;/code&gt; by default). Every time you execute a command, it will be added to your shell history file (with a maximum number of retained commands defined by the &lt;code&gt;HISTSIZE&lt;/code&gt; environment variable).&lt;/p&gt;
&lt;div class=&quot;Note&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;The location of your shell history file can be configured by setting the &lt;code&gt;HISTFILE&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Rewriting history&lt;/h3&gt;
&lt;p&gt;If you want to remove a sensitive command from your history, you can simply edit your &lt;code&gt;$HISTFILE&lt;/code&gt; history file and remove it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
$ secret-command --password 1234qwerty  &lt;span class=&quot;c1&quot;&gt;# oh no! that should not be in my history!&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; secret-command &lt;span class=&quot;nv&quot;&gt;$HISTFILE&lt;/span&gt;
secret-command --password 1234qwerty
$ &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; -i &lt;span class=&quot;s1&quot;&gt;'/secret-command/d'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HISTFILE&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# deletion of history line containing 'secret-command'&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; secret-command &lt;span class=&quot;nv&quot;&gt;$HISTFILE&lt;/span&gt;
$ &lt;span class=&quot;c1&quot;&gt;# it's not in history anymore&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use the &lt;code&gt;history&lt;/code&gt; built-in command to display your whole history&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;496&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;497&lt;/span&gt;  secret-command --password 1234qwerty
  &lt;span class=&quot;m&quot;&gt;498&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;499&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each history line is prefixed by its index in the history. You can then use &lt;code&gt;history -d &amp;lt;index&amp;gt;&lt;/code&gt; to remove the associated line from history.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; -d &lt;span class=&quot;m&quot;&gt;497&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;496&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;497&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;498&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;499&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; -d &lt;span class=&quot;m&quot;&gt;497&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;501&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;Note&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;This only works with &lt;code&gt;bash&lt;/code&gt;, not &lt;code&gt;zsh&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Avoiding history&lt;/h3&gt;
&lt;p&gt;There is a trick you can use if you want to fly under the radar and never have a command recorded in history in the first place. Simply prefix your command by a space.&lt;/p&gt;
&lt;div class=&quot;Note&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;If you are using &lt;code&gt;zsh&lt;/code&gt;, you need to add &lt;code&gt;setopt HIST_IGNORE_SPACE&lt;/code&gt; in your &lt;code&gt;~/.zshrc&lt;/code&gt; to make sure that behavior is enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$  secret-command --password 1234qwerty  &lt;span class=&quot;c1&quot;&gt;# notice the space at the start of the command!&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;502&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;
  &lt;span class=&quot;m&quot;&gt;503&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;history&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Shell expansions&lt;/h2&gt;
&lt;p&gt;The shell can perform expansions, meaning it can replace portions of the command before executing it. Relying on expansions allows you to type less and rely on the shell itself to do the heavy lifting. While there are multiple types of expansions, we will only cover 5:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;history expansion: quickly access previous commands and arguments from history&lt;/li&gt;
&lt;li&gt;tilde expansion: replace the &lt;code&gt;~&lt;/code&gt; path prefix&lt;/li&gt;
&lt;li&gt;pathname expansion: expand a path pattern into a list of files&lt;/li&gt;
&lt;li&gt;braces expansion: expand a pattern between braces into a longer sequence&lt;/li&gt;
&lt;li&gt;command expansion: replace a sub-command by its output&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Expansions are extremely powerful. When used right, an expansion can literally save you from writing a script.&lt;/p&gt;
&lt;div class=&quot;Note&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;As we only over what we think are the most useful expansions and shortcuts, feel free to refer to the &lt;code&gt;bash&lt;/code&gt; manual, section &lt;code&gt;EXPANSION&lt;/code&gt; if you want to see the full list.&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;History expansion&lt;/h3&gt;
&lt;p&gt;Your shell has multiple tricks up its sleeve to allow you to quickly reference previous commands or arguments in history with a minimum of keystrokes. While this section only provides you with what we feel are the most useful of them, feel free to go to the &lt;code&gt;HISTORY EXPANSION&lt;/code&gt; section of the &lt;code&gt;bash&lt;/code&gt; manual.&lt;/p&gt;
&lt;h4&gt;Event designators&lt;/h4&gt;
&lt;p&gt;An &lt;em&gt;Event designator&lt;/em&gt; is a reference to a command line entry in the history list. It allows you to quickly refer to a previous command without having to re-type it.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;!-n&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;!-n&lt;/code&gt; refers to the nth latest command: &lt;code&gt;!-1&lt;/code&gt; refers to the latest command, &lt;code&gt;!-2&lt;/code&gt; to the command before that, etc.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world!&quot;&lt;/span&gt;
hello world!
$ &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;
$ !-2  &lt;span class=&quot;c1&quot;&gt;# !-1 is &quot;cd&quot; and !-2 is 'echo &quot;hello world!&quot;'&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;!!&lt;/code&gt; is a shortcut for &lt;code&gt;!-1&lt;/code&gt;, aka the latest command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world!&quot;&lt;/span&gt;
hello world!
$ &lt;span class=&quot;k&quot;&gt;!!&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;Note&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;code&gt;!!&lt;/code&gt; is oftentimes used in conjunction with &lt;code&gt;sudo&lt;/code&gt;, to re-execute the previous command with superuser privileges when it failed, due to a lack of permission.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; /etc/myfile
vim: /etc/myfile: Permission denied
$ &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;!!&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; /etc/myfile
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h5&gt;&lt;code&gt;^string1^string2&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;^string1^string2&lt;/code&gt; is used to repeat the previous command in which &lt;code&gt;string1&lt;/code&gt; is replaced by &lt;code&gt;string2&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ./myfile
Just a file full of junk
$ ^cat^rm
$ &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; ./myfile
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I personally use and abuse of this technique when I'm about to irremediably delete some resources (files, folders, containers, etc), and I want to make sure I'm about to delete the &lt;em&gt;right&lt;/em&gt; things by listing these resources first. If you are familiar with SQL queries, it is the equivalent of executing a &lt;code&gt;SELECT&lt;/code&gt; query before changing the &lt;code&gt;SELECT&lt;/code&gt; to &lt;code&gt;DELETE&lt;/code&gt; to make sure you're not going to delete more than you wanted to.&lt;/p&gt;
&lt;h4&gt;Word designators&lt;/h4&gt;
&lt;p&gt;Word designators are used to select desired words from a previous command (by default, the latest). They can be very useful when you want to type a new command that uses arguments previously typed in a previous command.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;!^&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;!^&lt;/code&gt; maps to the first argument of your latest command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; first.txt second.txt last.txt
$ &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;!^&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; first.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;&lt;code&gt;!$&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;!$&lt;/code&gt; maps to the last argument of your latest command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; first.txt second.txt last.txt
$ &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; !$
$ &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; last.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Combining event and word designators&lt;/h5&gt;
&lt;p&gt;You can even combine event and word designators in more complex shapes by using the following syntax&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EVENT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DESIGNATOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DESIGNATOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For example, you could use the &lt;code&gt;!!&lt;/code&gt; event designator to select the last command, and the &lt;code&gt;2&lt;/code&gt; word designator to select the second argument.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; first.txt second.txt last.txt
$ &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; !!:2
$ &lt;span class=&quot;nb&quot;&gt;vim&lt;/span&gt; second.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Tilde expansion&lt;/h3&gt;
&lt;p&gt;For each unquoted word starting with &lt;code&gt;~&lt;/code&gt; in the command, all characters preceding a forward slash (&lt;code&gt;/&lt;/code&gt;) will be considered a &lt;em&gt;tilde prefix&lt;/em&gt;. Depending on its actual value, the tilde prefix can be expanded several ways, although the simple &lt;code&gt;~&lt;/code&gt; is probably its most common use.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Tilde prefix&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Expansion&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;Your home directory&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;~+&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;Your current working directory&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;&lt;code&gt;~-&lt;/code&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;Your previous working directory&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;~&lt;/span&gt;
Android                code       Downloads              Music
AndroidStudioProjects  Desktop    Dropbox                Pictures
bin                    Documents  Firefox_wallpaper.png  Videos
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This lists the content of your home directory, and is the equivalent to &lt;code&gt;ls $HOME&lt;/code&gt;. You can combine the tilde with a suffix to compose an absolute path to some file or folder in your home directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/code
$ &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/home/br/code
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Pathname expansion&lt;/h3&gt;
&lt;p&gt;Pathname expansions allow you to write an short path pattern and have it expanded in a list of files and directories, saving you from tedious copy-pastes or a possibly long (and error-prone) command writing.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;*&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;glob&lt;/em&gt;, or &lt;em&gt;wildcard&lt;/em&gt; &lt;code&gt;*&lt;/code&gt; character matches any string. It allows you to give a &lt;em&gt;pattern&lt;/em&gt; to the shell, that it will then expand to all files and directories matching the pattern. The wildcard can be prefixed or suffixed, which will further specify our pattern. For example, &lt;code&gt;*.jpg&lt;/code&gt; matches all files ending with the &lt;code&gt;.jpg&lt;/code&gt; extension, and &lt;code&gt;README.*&lt;/code&gt; matches all files named &lt;code&gt;README&lt;/code&gt; whatever their extension.&lt;/p&gt;
&lt;p&gt;Let us consider the following file and directory structure.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;tree&lt;/span&gt;
.
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic1.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic2.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic3.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic4.jpg
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pics
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic5.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic6.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pic7.jpg
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ sounds
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.mp3

&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; directory, &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want to move all &lt;code&gt;jpg&lt;/code&gt; files into our &lt;code&gt;pics&lt;/code&gt; directory. Instead of running 4 different &lt;code&gt;mv&lt;/code&gt; commands or manually typing a long &lt;code&gt;mv&lt;/code&gt; command, we can run just one using a pathname expansion.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; *.jpg pics
$ &lt;span class=&quot;nb&quot;&gt;tree&lt;/span&gt;
.
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pics
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic1.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic2.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic3.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic4.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic5.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic6.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pic7.jpg
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ sounds
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.mp3

&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; directory, &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;*.jpg&lt;/code&gt; was expanded to all files ending with &lt;code&gt;.jpg&lt;/code&gt;, causing the shell to actually run &lt;code&gt;mv pic1.jpg pic2.jpg pic3.jpg pic4.jpg pics&lt;/code&gt;, causing all 4 &lt;code&gt;jpg&lt;/code&gt; files to be moved to the &lt;code&gt;pics&lt;/code&gt; directory in a single command.&lt;/p&gt;
&lt;div class=&quot;Note&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;We could have executed the following commands for the same result:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;mv pic* pics&lt;/code&gt; would have moved all files with name starting by &lt;code&gt;pic&lt;/code&gt; to the &lt;code&gt;pics&lt;/code&gt; directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mv pic*.jpg pics&lt;/code&gt; would have moved all files with name starting by &lt;code&gt;pic&lt;/code&gt; and ending with &lt;code&gt;.jpg&lt;/code&gt; to the &lt;code&gt;pics&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;code&gt;*&lt;/code&gt; several times within the same pattern. For example &lt;code&gt;ls */*&lt;/code&gt; will list all files and directories located in a subdirectory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; */*
sounds/sound1.mp3   pics/pic2.jpg       pics/pic4.jpg       pics/pic6.jpg
pics/pic1.jpg       pics/pic3.jpg       pics/pic5.jpg       pics/pic7.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like in our second example, we can also use &lt;code&gt;*/*.jpg&lt;/code&gt; to list all &lt;code&gt;jpg&lt;/code&gt; files located in a subdirectory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; */*.jpg
pics/pic1.jpg   pics/pic3.jpg   pics/pic5.jpg  pics/pic7.jpg
pics/pic2.jpg   pics/pic4.jpg   pics/pic6.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;&lt;code&gt;**&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;**&lt;/code&gt; is expanded to all files and directories in the children directories, with a depth limit of 1.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; README.txt
$ &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; sounds/lyrics
$ &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; sounds/lyrics/sound1.txt
$ &lt;span class=&quot;nb&quot;&gt;tree&lt;/span&gt;
.
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- README.txt
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pics
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic1.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic2.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic3.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic4.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic5.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic6.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pic7.jpg
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ sounds
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ lyrics
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.txt
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.mp3

&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; directories, &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; files
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; **
README.txt

pics:
pic1.jpg pic2.jpg pic3.jpg pic4.jpg pic5.jpg pic6.jpg pic7.jpg

sounds:
lyrics     sounds.mp3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ls **&lt;/code&gt; was expanded into &lt;code&gt;ls README.txt pics/ sounds/&lt;/code&gt;, which does not include the content of &lt;code&gt;sounds/lyrics&lt;/code&gt; because of the depth limit of 1.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;**/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;**/&lt;/code&gt; is expanded into all directories and subdirectories with a depth limit of 1 starting from our first directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;tree&lt;/span&gt;
.
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- README.txt
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pics
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic1.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic2.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic3.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic4.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic5.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic6.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pic7.jpg
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ sounds
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ lyrics
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.txt
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.mp3


&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; directories, &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; files
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; **/
pics/:
pic1.jpg pic2.jpg pic3.jpg pic4.jpg pic5.jpg pic6.jpg pic7.jpg

sounds/:
lyrics     sounds.mp3

sounds/lyrics/:
sound1.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ls **/&lt;/code&gt; was expanded into &lt;code&gt;ls sounds/ sounds/lyrics pics/&lt;/code&gt;. It thus listed all files located in our subdirectories.&lt;/p&gt;
&lt;h3&gt;Brace expansion&lt;/h3&gt;
&lt;p&gt;A brace expansion is a mechanism by which the shell can generate multiple strings based on a sequence of tokens defined within curly braces. The brace expansion pattern can be preceded by an optional &lt;em&gt;preamble&lt;/em&gt; and followed by an optional &lt;em&gt;postscript&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/test/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;pics,sounds,sprites&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ~/test
pics  sounds  sprites
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;~/test/{pics,sounds,sprites}&lt;/code&gt; was expanded into &lt;code&gt;~/test/pics ~/test/sounds ~/test/sprites&lt;/code&gt; causing the shell to execute &lt;code&gt;mkdir ~/test/pics ~/test/sounds ~/test/sprites&lt;/code&gt; (which will be expanded further into &lt;code&gt;mkdir /home/br/test/pics /home/br/test/sounds /home/br/test/sprites&lt;/code&gt; by a tilde expansion).&lt;/p&gt;
&lt;p&gt;We could have done the same thing by factoring the final &lt;code&gt;s&lt;/code&gt; of each token into a postscript.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; ~/test/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;pic,sound,sprite&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A brace expansion can also have a sequence pattern &lt;code&gt;{x..y[..incr]}&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are either an integer or a single character, and &lt;code&gt;incr&lt;/code&gt; is an optional increment value.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; ~/test/sounds/noise-&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;..5&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.mp3
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ~/test/sounds
noise-1.mp3 noise-2.mp3 noise-3.mp3 noise-4.mp3 noise-5.mp3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The default increment is 1 if the sequence end is greater than its start, and -1 otherwise. However, we could specify a custom increment value if we want.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; ~/test/pics/pic&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;..10..2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.jpg
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ~/test/pics
pic1.jpg pic3.jpg pic5.jpg pic7.jpg pic9.jpg
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Command expansion&lt;/h3&gt;
&lt;p&gt;Your shell can replace a command surrounded by &lt;code&gt;$()&lt;/code&gt; with its output.&lt;/p&gt;
&lt;p&gt;I personally like use to commands expansions to iterate over a command's result, or by combining it with a heredoc redirection:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;EOF &amp;gt; aboutme&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;My name is $(whoami)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;and I live in $HOME&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EOF&lt;/span&gt;
$ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; aboutme
My name is br
and I live in /home/br
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Real-life examples&lt;/h2&gt;
&lt;h3&gt;Moving a pattern of files contained in directories and subdirectories&lt;/h3&gt;
&lt;p&gt;What is really powerful with these expansions is that, like almost everything in the shell, they can be combined. The following example combines a pathname expansion, a brace expansion and a tilde expansion.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;nb&quot;&gt;tree&lt;/span&gt;
.
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- README.txt
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pics
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic1.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic2.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic3.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic4.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic5.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- pic6.jpg
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pic7.jpg
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ sounds
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ lyrics
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.txt
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.mp3
$ &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; **/*.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;jpg,mp3&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; ~/assets/
$ &lt;span class=&quot;nb&quot;&gt;tree&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- README.txt
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ pics
&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ sounds
    &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_ lyrics
        &lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;_sound1.txt
$ &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; ~/assets
pic1.jpg   pic2.jpg   pic3.jpg   pic4.jpg   pic5.jpg   pic6.jpg   pic7.jpg   sound1.mp3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using these expansions, we were able to move all &lt;code&gt;jpg&lt;/code&gt; and &lt;code&gt;mp3&lt;/code&gt; files located in directories and subdirectories to the &lt;code&gt;assets&lt;/code&gt; directory located in your home directory, in exactly 27 characters!&lt;/p&gt;
&lt;h3&gt;Renaming multiple directories&lt;/h3&gt;
&lt;p&gt;We could use a &lt;code&gt;for&lt;/code&gt; loop, pathname expansion and a command expansion to rename all directories contained in the bcurrent directory to their uppercase equivalent.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; dir in */&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:lower:]'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:upper:]'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's decompose that command into its different steps:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the &lt;code&gt;*/&lt;/code&gt; glob pattern is expanded over the list of directories, on which we iterate via a &lt;code&gt;for&lt;/code&gt; loop&lt;/li&gt;
&lt;li&gt;we execute &lt;code&gt;echo $dir | tr '[:lower:]' '[:upper:]'&lt;/code&gt;, which will convert the current directory name to uppercase&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;$(echo $dir | tr '[:lower:]' '[:upper:]')&lt;/code&gt; command is expanded into the uppercase directory name&lt;/li&gt;
&lt;li&gt;the directory is renamed into an uppercase name&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;for&lt;/code&gt; loop iterates over the next directory name&lt;/li&gt;
&lt;li&gt;we move on to the next directory and repeat the previous steps for each of them&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;Note&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Iterating over paths with a &lt;code&gt;for&lt;/code&gt; loop is brittle as it breaks if a path contains a space. We will later see how to properly do it using the &lt;code&gt;find&lt;/code&gt; command.&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Your shell has so many productivity tricks and shortcuts up its sleeve it can be a little bit daunting. I suggest you don't try to learn them all at once, but really just experiment with them and see what feels natural. Even mastering some of them will make you more productive!&lt;/p&gt;
&lt;p&gt;What if there is an action you find useful but you just don't like the keyboard shortcut? Luckily for you, the next chapter will dive into how to personalize and customize your shell.&lt;/p&gt;

&lt;h2&gt;Going further&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;5.1&lt;/strong&gt;: Create a directory. Use a bash expansion to move into that directory without typing its name a second time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.2&lt;/strong&gt;: Print your 4th last command typed into your terminal without re-typing it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.3&lt;/strong&gt;: Create the following empty files &lt;code&gt;README.txt&lt;/code&gt;, &lt;code&gt;requirements.txt&lt;/code&gt; and &lt;code&gt;TODO.txt&lt;/code&gt; in a single command, without typing &lt;code&gt;.txt&lt;/code&gt; more than once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.4&lt;/strong&gt;: Delete all the files created in the last question without typing &lt;code&gt;.txt&lt;/code&gt; more than once.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.5&lt;/strong&gt;: Create the following directory tree in a single command.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
files
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1a
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1b
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1c
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2a
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2b
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2c
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 3a
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 3b
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;- 3c
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1a
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1b
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1c
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2a
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2b
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2c
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 3a
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 3b
&lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;- 3c
&lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;- &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1a
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1b
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 1c
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2a
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2b
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 2c
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 3a
    &lt;span class=&quot;k&quot;&gt;|&lt;/span&gt;-- 3b
    &lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;- 3c
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;5.6&lt;/strong&gt;: Remove all subdirectories starting with &lt;code&gt;3&lt;/code&gt; created in the previous command, while keeping the top &lt;code&gt;3&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.7&lt;/strong&gt;: Re-execute the command from exercise 5.3 by looking backwards into your shell history.&lt;/p&gt;
&lt;footer readability=&quot;22.341351660939&quot;&gt;&lt;p&gt;&lt;em&gt;Essential Tools and Practices for the Aspiring Software Developer&lt;/em&gt; is a self-published book project by Balthazar Rouberol and &lt;a href=&quot;https://etnbrd.com&quot;&gt;Etienne Brodu&lt;/a&gt;, ex-roommates, friends and colleagues, aiming at empowering the up and coming generation of developers. We currently are hard at work on it!&lt;/p&gt;
&lt;p&gt;The book will help you set up a productive development environment and get acquainted with tools and practices that, along with your programming languages of choice, will go a long way in helping you grow as a software developer. It will cover subjects such as mastering the terminal, configuring and getting productive in a shell, the basics of code versioning with &lt;code&gt;git&lt;/code&gt;, SQL basics, tools such as &lt;code&gt;Make&lt;/code&gt;, &lt;code&gt;jq&lt;/code&gt; and regular expressions, networking basics as well as software engineering and collaboration best practices.&lt;/p&gt;
&lt;p&gt;If you are interested in the project, we invite you to join the &lt;a href=&quot;https://balthazar-rouberol.us4.list-manage.com/subscribe?u=1f6080d496af07a836270ff1d&amp;amp;id=81ebd36adb&quot;&gt;mailing list&lt;/a&gt;!&lt;/p&gt;
&lt;/footer&gt;

</description>
<pubDate>Sat, 25 Apr 2020 04:00:44 +0000</pubDate>
<dc:creator>pcr910303</dc:creator>
<og:description>An introduction to shell productivity features: autocompletion, keyboard shortcuts, history navigation and shell expansions.</og:description>
<og:title>Shell productivity tips and tricks</og:title>
<og:type>article</og:type>
<og:url>https://blog.balthazar-rouberol.com/shell-productivity-tips-and-tricks</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.balthazar-rouberol.com/shell-productivity-tips-and-tricks.html</dc:identifier>
</item>
<item>
<title>Microsoft Word now flags double spaces after a period as errors</title>
<link>https://www.theverge.com/2020/4/24/21234170/microsoft-word-two-spaces-period-error-correction-great-space-debate</link>
<guid isPermaLink="true" >https://www.theverge.com/2020/4/24/21234170/microsoft-word-two-spaces-period-error-correction-great-space-debate</guid>
<description>&lt;p id=&quot;TyUM4p&quot;&gt;Microsoft has settled the great space debate, and sided with everyone who believes one space after a period is correct, not two. The software giant has started to update Microsoft Word to highlight two spaces after a period (a full stop for you Brits) as an error, and to offer a correction to one space. Microsoft recently started testing this change with the desktop version of Word, offering suggestions through the Editor capabilities of the app.&lt;/p&gt;
&lt;p id=&quot;uP5CLX&quot;&gt;If you’re still (strangely) on the two-spacer side, you will be able to ignore the suggestion. The Editor feature in Word allows users to ignore the suggestion once, make the change to one space, or turn off the writing-style suggestion. We understand Microsoft has been testing the feature change recently and it will roll out to everyone using the desktop version of Word soon. Feedback to the change has been overwhelmingly positive.&lt;/p&gt;
&lt;div class=&quot;c-float-right&quot;&gt;
&lt;aside id=&quot;a9Ubeh&quot;&gt;&lt;q&gt;The suggestion can still be ignored by two-spacers&lt;/q&gt;&lt;/aside&gt;&lt;/div&gt;
&lt;p id=&quot;MSCnoT&quot;&gt;“As the crux of the great spacing debate, we know this is a stylistic choice that may not be the preference for all writers, which is why we continue to test with users and enable these suggestions to be easily accepted, ignored, or flat out dismissed in Editor,” says Kirk Gregersen, partner director of program management at Microsoft, in a statement to &lt;em&gt;The Verge&lt;/em&gt;.&lt;/p&gt;
&lt;p id=&quot;1HfgPM&quot;&gt;Much of the debate around one space or two has been fueled by the halcyon days of the typewriter. Typewriters used monospaced fonts to allocate the same amount of horizontal spacing to every character. Narrow characters like “i” got the same amount of space as “m,” so the extra space after the “.” was needed to make it more apparent that sentences had ended. Word and many other similar apps make fonts proportional, so two spaces is no longer necessary.&lt;/p&gt;
&lt;p id=&quot;oXfXky&quot;&gt;That hasn’t stopped the battle over one space or two from raging on for decades, however. &lt;a href=&quot;https://www.theverge.com/2018/4/30/17301868/two-spaces-periods-typography-reading-comprehension&quot;&gt;A study on the hotly contested issue&lt;/a&gt; supposedly handed the victory to the two-spacers back in 2018, but many questioned the research and it clearly wasn’t enough to convince Microsoft. Expect to see the new changes in Word roll out to everyone in the coming months. Congratulations, fellow one-spacers.&lt;/p&gt;
</description>
<pubDate>Sat, 25 Apr 2020 03:28:47 +0000</pubDate>
<dc:creator>blondin</dc:creator>
<og:description>Word finally settles the great space debated that has lasted decades</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/gJTV4oCA_uEiPU5waEfY_SZV6mQ=/0x96:1323x789/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/19921960/hOoRzgG.png</og:image>
<og:title>Microsoft Word now flags double spaces as errors, ending the great space debate</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2020/4/24/21234170/microsoft-word-two-spaces-period-error-correction-great-space-debate</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2020/4/24/21234170/microsoft-word-two-spaces-period-error-correction-great-space-debate</dc:identifier>
</item>
<item>
<title>Background Matting: The World is Your Green Screen</title>
<link>https://grail.cs.washington.edu/projects/background-matting/</link>
<guid isPermaLink="true" >https://grail.cs.washington.edu/projects/background-matting/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title&gt;Background Matting: The World is Your Green Screen&lt;/title&gt;&lt;link href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;mainpage.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;53.686249193028&quot;&gt;


&lt;div&gt;
&lt;table align=&quot;center&quot; width=&quot;1000px&quot; readability=&quot;3&quot;&gt;&lt;tr&gt;&lt;td width=&quot;600px&quot;&gt;
&lt;center&gt;&lt;a href=&quot;https://grail.cs.washington.edu/projects/background-matting/visuals/teaser.png&quot;&gt;&lt;img src=&quot;https://grail.cs.washington.edu/projects/background-matting/visuals/teaser.png&quot; width=&quot;1000px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td width=&quot;600px&quot;&gt;&lt;em&gt;Using a handheld smartphone camera, we capture two images of a scene, one with the subject and one without. We employ a deep network with an adversarial loss to recover alpha matte and foreground color. We composite the result onto a novel background.&lt;/em&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;600px&quot;&gt;
&lt;center&gt;&lt;br/&gt;&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
We propose a method for creating a matte – the per-pixel foreground color and alpha – of a person by taking photos or videos in an everyday setting with a handheld camera. Most existing matting methods require a green screen background or a manually created trimap to produce a good matte. Automatic, trimap-free methods are appearing, but are not of comparable quality. In our trimap free approach, we ask the user to take an additional photo of the background without the subject at the time of capture. This step requires a small amount of foresight but is far less timeconsuming than creating a trimap. We train a deep network with an adversarial loss to predict the matte. We first train a matting network with supervised loss on ground truth data with synthetic composites. To bridge the domain gap to real imagery with no labeling, we train another matting network guided by the first network and by a discriminator that judges the quality of composites. We demonstrate results on a wide variety of photos and videos and show significant improvement over the state of the art.&lt;/p&gt;
&lt;div class=&quot;container&quot; readability=&quot;15.35&quot;&gt;
&lt;h2&gt;Paper&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://arxiv.org/abs/2004.00626&quot; target=&quot;_blank&quot;&gt;[Paper Arxiv]&lt;/a&gt;, to appear in CVPR 2020&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;citation&quot;&gt;
@InProceedings{BMSengupta20,
  title={Background Matting: The World is Your Green Screen},
  author = {Soumyadip Sengupta and Vivek Jayaram and Brian Curless and Steve Seitz and Ira Kemelmacher-Shlizerman},
  booktitle={Computer Vision and Pattern Regognition (CVPR)},
  year={2020}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;container&quot; readability=&quot;6.56&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;a href=&quot;https://towardsdatascience.com/background-matting-the-world-is-your-green-screen-83a3c4f0f635?source=friends_link&amp;amp;sk=03e1a2de548367b22139568a7c798180&quot; target=&quot;_blank&quot;&gt;Blog Post&lt;/a&gt;, with simplified methods and discussions&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;h2&gt;Code&lt;/h2&gt;

&lt;span&gt;Training code: Coming soon ...&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;
&lt;h2&gt;Captured videos for Background Matting&lt;/h2&gt;
We capture 50 videos of subjects performing different motion with fix and hand-held camera in both indoor and outdoor settings. We also capture the background as the subject leaves the scene. We will soon release this data to help future research on Background Matting.&lt;/p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;h2&gt;Comparison with existing methods&lt;/h2&gt;
&lt;div&gt;
&lt;center/&gt;
&lt;span class=&quot;abstract&quot;&gt;We show qualitative comparison w.r.t. Background substraction, Semantic segmentation (Deeplabv3+) and Alpha matting techniques. For Alpha matting algorithms, we compare with state-of-the-art (i) trimap based methods Context Aware Matting (CAM) and Index Matting (IM), where trimap is automatically created from segmentation, and (ii) automatic matting algorithm Late Fusion Matting (LFM). Our algorithm is first trained on synthetic-composite Adobe dataset with supervision (&lt;em&gt;Ours Adobe&lt;/em&gt;) and then on unlabelled real data with self-supervision and adversarial loss (&lt;em&gt;Ours Real&lt;/em&gt;). We also show that trianing on real data improves matting quality.&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
The authors thank the labmates from UW GRAIL lab, Ellie Bridge and Andrey Ryabstev for their support in data capturing and helpful discussions. This work was supported by NSF/Intel Visual and Experimental Computing Award #1538618, the UW Reality Lab, Facebook, Google, Futurewei.&lt;/p&gt;


&lt;/body&gt;</description>
<pubDate>Sat, 25 Apr 2020 02:42:44 +0000</pubDate>
<dc:creator>hr7161</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://grail.cs.washington.edu/projects/background-matting/</dc:identifier>
</item>
<item>
<title>ClojureScript 1.10.741</title>
<link>https://clojurescript.org/news/2020-04-24-release</link>
<guid isPermaLink="true" >https://clojurescript.org/news/2020-04-24-release</guid>
<description>&lt;div class=&quot;paragraph&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;We’re happy to announce a significant new feature - the &lt;code&gt;:bundle&lt;/code&gt; target. This target generates output that can be fed directly into popular JavaScript bundlers such as Webpack and Metro (for React Native). Not only does this greatly ease usage of Node modules, library creators can now distribute ClojureScript artifacts that depend on Node modules and be confident that users can consume these artifacts regardless of which build tool they may prefer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;There’s much more to say about the &lt;code&gt;:bundle&lt;/code&gt; target, and we’ll be releasing a separate post and guide soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; readability=&quot;8.5&quot;&gt;
&lt;h3 id=&quot;_iterator_support&quot;&gt;Iterator Support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;mark&gt;It&lt;/mark&gt; is now possible to call &lt;code&gt;seq&lt;/code&gt; on any object implementing JavaScript’s Iterator protocol. A new core predicate, &lt;code&gt;cljs.core/js-iterable?&lt;/code&gt; is introduced with this feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;For example, &lt;code&gt;(js-iterable? (js/Set.))&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;
&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(-&amp;gt; (doto (js/Set.) (.add 1) (.add 2))
  seq)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;can now produce &lt;code&gt;(1 2)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot; readability=&quot;6.5&quot;&gt;
&lt;h3 id=&quot;_symbol_support&quot;&gt;Symbol Support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;A new core predicate &lt;code&gt;cljs.core/js-symbol?&lt;/code&gt; has been added and printing has been revised to allow printing of symbols:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;content&quot; readability=&quot;32&quot;&gt;
&lt;pre&gt;
cljs.user=&amp;gt; (js/Symbol &quot;abc&quot;)
#object[Symbol(abc)]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 25 Apr 2020 00:56:29 +0000</pubDate>
<dc:creator>Jeaye</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://clojurescript.org/news/2020-04-24-release</dc:identifier>
</item>
</channel>
</rss>