<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Post-surgical deaths in Scotland drop by a third, with the help of a checklist</title>
<link>https://www.bbc.co.uk/news/uk-scotland-47953541</link>
<guid isPermaLink="true" >https://www.bbc.co.uk/news/uk-scotland-47953541</guid>
<description>&lt;figure class=&quot;media-landscape no-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Hospital ward&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/13506/production/_104001197_036771382.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;PA&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Deaths after surgery in Scotland have dropped by more than a third, research suggests. &lt;/p&gt;&lt;p&gt;A study indicated a 37% decrease since 2008, which it attributed to the implementation of a safety checklist. &lt;/p&gt;&lt;p&gt;The 19-item list - which was created by the World Health Organization - is supposed to encourage teamwork and communication during operations. &lt;/p&gt;&lt;p&gt;The death rate fell to 0.46 per 100 procedures between 2000 and 2014, analysis of 6.8m operations showed. &lt;/p&gt;&lt;p&gt;Dr Atul Gawande, who introduced the checklist and co-authored the study, published in the British Journal of Surgery, said: &quot;Scotland's health system is to be congratulated for a multi-year effort that has produced some of the largest population-wide reductions in surgical deaths ever documented.&quot;&lt;/p&gt;&lt;p&gt;Prof Jason Leitch, NHS Scotland's national clinical director, added: &quot;This is a significant study which highlights the reduction in surgical mortality over the last decade. &lt;/p&gt;&lt;p&gt;&quot;While there are a number of factors that have contributed to this, it is clear from the research that the introduction of the WHO Surgical Safety Checklist in 2008 has played a key role.&quot; &lt;/p&gt;
            </description>
<pubDate>Wed, 17 Apr 2019 13:43:04 +0000</pubDate>
<dc:creator>fanf2</dc:creator>
<og:title>Post-surgical deaths 'drop by a third'</og:title>
<og:type>article</og:type>
<og:description>Researchers attribute the implementation of a safety checklist for the fall in deaths after surgery.</og:description>
<og:url>https://www.bbc.com/news/uk-scotland-47953541</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/13506/production/_104001197_036771382.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.co.uk/news/uk-scotland-47953541</dc:identifier>
</item>
<item>
<title>Fluent 1.0: a localization system for natural-sounding translations</title>
<link>https://hacks.mozilla.org/2019/04/fluent-1-0-a-localization-system-for-natural-sounding-translations/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2019/04/fluent-1-0-a-localization-system-for-natural-sounding-translations/</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://projectfluent.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fluent&lt;/a&gt; is a family of localization specifications, implementations and good practices developed by Mozilla. It is currently used in Firefox. With Fluent, translators can create expressive translations that sound great in their language. Today we’re announcing version 1.0 of the Fluent file format specification. We’re inviting translation tool authors to try it out and provide feedback.&lt;/p&gt;&lt;h2&gt;The Problem Fluent Solves&lt;/h2&gt;
&lt;p&gt;With almost 100 supported languages, Firefox faces many localization challenges. Using traditional localization solutions, these are difficult to overcome. Software localization has been dominated by an outdated paradigm: translations that map one-to-one to the source language. The grammar of the source language, which at Mozilla is English, imposes limits on the expressiveness of the translation.&lt;/p&gt;
&lt;p&gt;Consider the following message which appears in Firefox when the user tries to close a window with more than one tab.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;tabs-close-warning-multiple =
    You are about to close {$count} tabs.
    Are you sure you want to continue?
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The message is only displayed when the tab count is 2 or more. In English, the word &lt;em&gt;tab&lt;/em&gt; will always appear as plural &lt;em&gt;tabs&lt;/em&gt;. An English-speaking developer may be content with this message. It sounds great for all possible values of &lt;code&gt;$count&lt;/code&gt;.&lt;/p&gt;
&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/fluent_en.png&quot; alt=&quot;&quot; width=&quot;896&quot; height=&quot;187&quot; class=&quot;alignnone size-full wp-image-33409&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/04/fluent_en.png 896w, https://hacks.mozilla.org/files/2019/04/fluent_en-250x52.png 250w, https://hacks.mozilla.org/files/2019/04/fluent_en-768x160.png 768w, https://hacks.mozilla.org/files/2019/04/fluent_en-500x104.png 500w&quot; sizes=&quot;(max-width: 896px) 100vw, 896px&quot;/&gt;In English, a single variant of the message is enough for all values of &lt;code&gt;$count&lt;/code&gt;.
&lt;p&gt;Many translators, however, will quickly point out that the word &lt;em&gt;tab&lt;/em&gt; will take different forms depending on the exact value of the &lt;code&gt;$count&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;In traditional localization solutions, the onus of fixing this message is on developers. They need to account for the fact that other languages distinguish between more than one plural form, even if English doesn’t. As the number of languages supported in the application grows, this problem scales up quickly—and not well.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In some languages, nouns have genders which require different forms of adjectives and past participles. In French, &lt;em&gt;connecté&lt;/em&gt;, &lt;em&gt;connectée&lt;/em&gt;, &lt;em&gt;connectés&lt;/em&gt; and &lt;em&gt;connectées&lt;/em&gt; all mean &lt;em&gt;connected&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Style guides may require that different terms be used depending on the platform the software runs on. In English Firefox, we use &lt;em&gt;Settings&lt;/em&gt; on Windows and &lt;em&gt;Preferences&lt;/em&gt; on other systems, to match the wording of the user’s operating system. In Japanese, the difference is starker: some computer-related terms are spelled with a different writing system depending on the user’s OS.&lt;/li&gt;
&lt;li&gt;The context and the target audience of the application may require adjustments to the copy. In English, software used in accounting may format numbers differently than a social media website. Yet in other languages such a distinction may not be necessary.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are many grammatical and stylistic variations that don’t map one-to-one between languages. Supporting all of them using traditional localization solutions isn’t straightforward. Some language features require trade-offs in order to support them, or aren’t possible at all.&lt;/p&gt;
&lt;h2&gt;Asymmetric Localization&lt;/h2&gt;
&lt;p&gt;Fluent turns the localization landscape on its head. Rather than require developers to predict all possible permutations of complexity in all supported languages, Fluent keeps the source language as simple as it can be.&lt;/p&gt;
&lt;p&gt;We make it possible to cater to the grammar and style of other languages, independently of the source language. All of this happens in isolation; the fact that one language benefits from more advanced logic doesn’t require any other localization to apply it. Each localization is in control of how complex the translation becomes.&lt;/p&gt;
&lt;p&gt;Consider the Czech translation of the “tab close” message discussed above. The word &lt;em&gt;panel&lt;/em&gt; (tab) must take one of two plural forms: &lt;em&gt;panely&lt;/em&gt; for counts of 2, 3, and 4, and &lt;em&gt;panelů&lt;/em&gt; for all other numbers.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;tabs-close-warning-multiple = {$count -&amp;gt;
    [few] Chystáte se zavřít {$count} panely. Opravdu chcete pokračovat?
   *[other] Chystáte se zavřít {$count} panelů. Opravdu chcete pokračovat?
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fluent empowers translators to create grammatically correct translations and leverage the expressive power of their language. With Fluent, the Czech translation can now benefit from correct plural forms for all possible values of the &lt;code&gt;$count&lt;/code&gt; variable.&lt;/p&gt;
&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/fluent_cz.png&quot; alt=&quot;&quot; width=&quot;896&quot; height=&quot;317&quot; class=&quot;size-full wp-image-33410&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/04/fluent_cz.png 896w, https://hacks.mozilla.org/files/2019/04/fluent_cz-250x88.png 250w, https://hacks.mozilla.org/files/2019/04/fluent_cz-768x272.png 768w, https://hacks.mozilla.org/files/2019/04/fluent_cz-500x177.png 500w&quot; sizes=&quot;(max-width: 896px) 100vw, 896px&quot;/&gt;In Czech, &lt;code&gt;$count&lt;/code&gt; values of 2, 3, and 4 require a special plural form of the noun.
&lt;p&gt;At the same time, no changes are required to the source code nor the source copy. In fact, the logic added by the Czech translator to the Czech translation doesn’t affect any other language. The same message in French is a simple sentence, similar to the English one:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;tabs-close-warning-multiple =
    Vous êtes sur le point de fermer {$count} onglets.
    Voulez-vous vraiment continuer ?
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The concept of &lt;em&gt;asymmetric localization&lt;/em&gt; is the key innovation of Fluent, built upon 20 years of Mozilla’s history of successfully shipping localized software. Many key ideas in Fluent have also been inspired by &lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;XLIFF&lt;/a&gt; and ICU’s &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MessageFormat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first glance, Fluent looks similar to other localization solutions that allow translations to use plurals and grammatical genders. What sets Fluent apart is the holistic approach to localization. Fluent takes these ideas further by defining the syntax for the entire text file in which multiple translations can be stored, and by allowing messages to reference other messages.&lt;/p&gt;
&lt;h2&gt;Terms and References&lt;/h2&gt;
&lt;p&gt;A Fluent file may consist of many messages, each translated into the translator’s language. Messages can refer to other messages in the same file, or even to messages from other files. In the runtime, Fluent combines files into &lt;em&gt;bundles&lt;/em&gt;, and references are resolved in the scope of the current bundle.&lt;/p&gt;
&lt;p&gt;Referencing messages is a powerful tool for ensuring consistency. Once defined, a translation can be reused in other translations. Fluent even has a special kind of message, called a &lt;em&gt;term&lt;/em&gt;, which is best suited for reuse. Term identifiers always start with a dash.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;-sync-brand-name = Firefox Account
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Once defined, the &lt;code&gt;-sync-brand-name&lt;/code&gt; term can be referenced from other messages, and it will always resolve to the same value. Terms help enforce style guidelines; they can also be swapped in and out to modify the branding in unofficial builds and on beta release channels.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;sync-dialog-title = {-sync-brand-name}
sync-headline-title =
    {-sync-brand-name}: The best way to bring
    your data always with you
sync-signedout-account-title =
    Connect with your {-sync-brand-name}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Using terms verbatim in the middle of a sentence may cause trouble for inflected languages or for languages with different capitalization rules than English. Terms can define multiple facets of their value, suitable for use in different contexts. Consider the following definition of the &lt;code&gt;-sync-brand-name&lt;/code&gt; term in Italian.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;-sync-brand-name = {$capitalization -&amp;gt;
   *[uppercase] Account Firefox
    [lowercase] account Firefox
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thanks to the asymmetric nature of Fluent, the Italian translator is free to define two facets of the brand name. The default one (uppercase) is suitable for standalone appearances as well as for use at the beginning of sentences. The lowercase version can be explicitly requested by passing the capitalization parameter, when the brand name is used inside a larger sentence.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;sync-dialog-title = {-sync-brand-name}
sync-headline-title =
    {-sync-brand-name}: il modo migliore
    per avere i tuoi dati sempre con te

# Explicitly request the lowercase variant of the brand name.
sync-signedout-account-title =
    Connetti il tuo {-sync-brand-name(capitalization: &quot;lowercase&quot;)}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Defining multiple term variants is a versatile technique which allows the localization to cater to the grammatical needs of many languages. In the following example, the Polish translation can use declensions to construct a grammatically correct sentence in the &lt;code&gt;sync-signedout-account-title&lt;/code&gt; message.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;-sync-brand-name = {$case -&amp;gt;
   *[nominative] Konto Firefox
    [genitive] Konta Firefox
    [accusative] Kontem Firefox
}

sync-signedout-account-title =
    Zaloguj do {-sync-brand-name(case: &quot;genitive&quot;)}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Fluent makes it possible to express linguistic complexities when necessary. At the same time, simple translations remain simple. Fluent doesn’t impose complexity unless it’s required to create a correct translation.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ini&quot;&gt;sync-signedout-caption = Take Your Web With You
sync-signedout-caption = Il tuo Web, sempre con te
sync-signedout-caption = Zabierz swoją sieć ze sobą
sync-signedout-caption = So haben Sie das Web überall dabei.
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Fluent Syntax&lt;/h2&gt;
&lt;p&gt;Today, we’re announcing the first stable release of the Fluent Syntax. It’s a formal specification of the file format for storing translations, accompanied by beta releases of parser implementations in JavaScript, Python, and Rust.&lt;/p&gt;
&lt;p&gt;You’ve already seen a taste of Fluent Syntax in the examples above. It has been designed with non-technical people in mind, and to make the task of reviewing and editing translations easy and error-proof. Error recovery is a strong focus: it’s impossible for a single broken translation to break the entire file, or even the translations adjacent to it. Comments may be used to communicate contextual information about the purpose of a message or a group of messages. Translations can span multiple lines, which helps when working with longer text or markup.&lt;/p&gt;
&lt;p&gt;Fluent files can be opened and edited in any text editor, lowering the barrier to entry for developers and localizers alike. The file format is also &lt;a href=&quot;https://blog.mozilla.org/l10n/2019/04/11/implementing-fluent-in-a-localization-tool/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;well supported&lt;/a&gt; by &lt;a href=&quot;http://pontoon.mozilla.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pontoon&lt;/a&gt;, Mozilla’s open-source translation management system.&lt;/p&gt;
&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/fluent_playground.png&quot; alt=&quot;&quot; width=&quot;896&quot; height=&quot;444&quot; class=&quot;alignnone size-full wp-image-33412&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/04/fluent_playground.png 896w, https://hacks.mozilla.org/files/2019/04/fluent_playground-250x124.png 250w, https://hacks.mozilla.org/files/2019/04/fluent_playground-768x381.png 768w, https://hacks.mozilla.org/files/2019/04/fluent_playground-500x248.png 500w&quot; sizes=&quot;(max-width: 896px) 100vw, 896px&quot;/&gt;&lt;a href=&quot;http://projectfluent.org/play/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fluent Playground&lt;/a&gt; is an online sandbox for trying out Fluent live inside the browser.
&lt;p&gt;You can learn more about the syntax by reading the &lt;a href=&quot;https://projectfluent.org/fluent/guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fluent Syntax Guide&lt;/a&gt;. The formal definition can be found in the &lt;a href=&quot;https://github.com/projectfluent/fluent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fluent Syntax specification&lt;/a&gt;. And if you just want to quickly see it in action, try the &lt;a href=&quot;http://projectfluent.org/play/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fluent Playground&lt;/a&gt;—an online editor with shareable Fluent snippets.&lt;/p&gt;
&lt;h2&gt;Request for Feedback&lt;/h2&gt;
&lt;p&gt;Firefox has been the main driver behind the development of Fluent so far. Today, there are over &lt;a href=&quot;https://arewefluentyet.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;3000 Fluent messages in Firefox&lt;/a&gt;. The migration from legacy localization formats started early last year and is now in full swing. Fluent has proven to be a stable and flexible solution for building complex interfaces, such as the UI of Firefox Preferences. It is also used in a number of Mozilla websites, such as &lt;a href=&quot;https://send.firefox.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Firefox Send&lt;/a&gt; and &lt;a href=&quot;https://voice.mozilla.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Common Voice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We think Fluent is a great choice for applications that value simplicity and a lean runtime, and at the same time require that elements of the interface depend on multiple variables. In particular, Fluent can help create natural-sounding translations in size-constrained UIs of mobile apps; in information-rich layouts of social media platforms; and in games, to communicate gameplay statistics and mechanics to the player.&lt;/p&gt;
&lt;p&gt;We’d love to hear from projects and localization vendors outside of Mozilla. Because we’re developing Fluent with a future standard in mind, we invite you to try it out and let us know if it addresses your challenges. With your help, we can iterate and improve Fluent to address the needs of many platforms, use cases, and industries.&lt;/p&gt;
&lt;p&gt;We’re open to your constructive feedback. Learn more about Fluent on the &lt;a href=&quot;http://projectfluent.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;project’s website&lt;/a&gt; and please get in touch on &lt;a href=&quot;https://discourse.mozilla.org/c/fluent&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Fluent’s Discourse&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;4.4819277108434&quot;&gt;
&lt;p&gt;As a Localization Engineer at Mozilla, I create solutions which help make Firefox available globally and relevant locally.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/smalolepszymozillacom/&quot;&gt;More articles by Staś Małolepszy…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Wed, 17 Apr 2019 08:03:58 +0000</pubDate>
<dc:creator>feross</dc:creator>
<og:url>https://hacks.mozilla.org/2019/04/fluent-1-0-a-localization-system-for-natural-sounding-translations</og:url>
<og:title>Fluent 1.0: a localization system for natural-sounding translations – Mozilla Hacks - the Web developer blog</og:title>
<og:description>Fluent is a family of localization specifications, implementations and good practices developed by Mozilla. With Fluent, translators can create expressive translations that sound great in their language. Today we’re announcing ...</og:description>
<og:image>https://hacks.mozilla.org/files/2019/04/fluent_og_image.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2019/04/fluent-1-0-a-localization-system-for-natural-sounding-translations/</dc:identifier>
</item>
<item>
<title>Microsoft loses control over Windows Tiles</title>
<link>https://www.golem.de/news/subdomain-takeover-microsoft-loses-control-over-windows-tiles-1904-140717.html</link>
<guid isPermaLink="true" >https://www.golem.de/news/subdomain-takeover-microsoft-loses-control-over-windows-tiles-1904-140717.html</guid>
<description>&lt;p id=&quot;gpar1&quot;&gt;The Tiles service Microsoft introduced with Windows 8 has never been particularly successful. Microsoft has disabled a web service for the system but forgot to delete nameserver entries. This made the host vulnerable for a subdomain takeover attack - allowing us to control the contents. By doing so we were able to show arbitrary pictures and text within the tiles of other web pages.&lt;/p&gt;
&lt;section class=&quot;supplementary&quot; id=&quot;job-market&quot;&gt;&lt;p&gt;Stellenmarkt&lt;/p&gt;
&lt;ol&gt;&lt;li class=&quot;text1&quot;&gt;

Flughafen München GmbH, München&lt;/li&gt;
&lt;li class=&quot;text1&quot;&gt;

über experteer GmbH, Nordhessen&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;https://cpxl.golem.de/gif?u=https%3A%2F%2Fwww.golem.de%2F&amp;amp;d=1555515541&amp;amp;f=ev&amp;amp;v=d&amp;amp;t=ad%2Fjobs2018kw10&quot; alt=&quot;&quot;/&gt;&lt;/section&gt;&lt;p id=&quot;gpar2&quot;&gt;The tiles can fullfil a number of functions. They allow web pages to display news on the tiles with a special meta tag. This function is called Windows Live Tiles. Web pages which support this service can be pinned as a tile.&lt;/p&gt;
&lt;h3&gt;Microsoft service converts RSS feed to Tiles&lt;/h3&gt;
&lt;p id=&quot;gpar3&quot;&gt;With a special XML-based file format, web pages can control the content of the tiles; for example, they can show the latest news. To make it easier for web pages to provide this function, Microsoft ran a service that automatically converted RSS feeds into that special XML format.&lt;/p&gt;
&lt;p id=&quot;gpar4&quot;&gt;The &lt;a href=&quot;http://www.buildmypinnedsite.com/&quot; target=&quot;_blank&quot; class=&quot;golem-external-url&quot;&gt;web page that allows creating the corresponding meta tags is still online&lt;/a&gt;, although the service no longer works. The host that should deliver the XML files - notifications.buildmypinnedsite.com - only showed an error message from Microsoft's cloud service Azure.&lt;/p&gt;

&lt;p id=&quot;gpar5&quot;&gt;The abandoned host was vulnerable for a so-called &lt;a href=&quot;https://www.golem.de/news/subdomain-takeover-verwaiste-domains-einfach-uebernehmen-1807-135513.html&quot; target=&quot;_blank&quot; class=&quot;golem-internal-url golem-url-news&quot;&gt;subdomain takeover attack&lt;/a&gt;. The host was redirected to a subdomain of Azure. However this subdomain wasn't registered with Azure.&lt;/p&gt;
&lt;h3&gt;Azure subdomain could be re-registered&lt;/h3&gt;
&lt;p id=&quot;gpar6&quot;&gt;The takeover works via a so-called CNAME nameserver entry. It redirects all requests for the host to the unregistered Azure subdomain. With an ordinary Azure account, we were able to register that subdomain and add the corresponding host name. Thus we were able to control which content is served on that host.&lt;/p&gt;
&lt;p id=&quot;gpar7&quot;&gt;Web pages using the defunct service from Microsoft included the Russian mail provider Mail.ru, Engadget, and German news sites Heise Online and Giga. Web pages that include these meta tags should remove them or, if they want to keep the functionality, create the corresponding XML files themselves.&lt;/p&gt;
&lt;h3&gt;Microsoft does not answer&lt;/h3&gt;
&lt;p id=&quot;gpar8&quot;&gt;We have informed Microsoft about this problem but haven't received a reply yet. We won't keep the host registered permanently. There's a decent amount of traffic reaching this host and running up costs to hold the domain and block the corresponding subdomain even if we stop the web service and don't provide any content. Once we cancel the subdomain a bad actor could register it and abuse it for malicious attacks.&lt;/p&gt;
&lt;p id=&quot;gfpop&quot;&gt;Windows Tiles were introduced on the start screen of Windows 8 and moved to the start menu in Windows 10. They have never been particularly popular. The web page Windowscentral speculated in January that the Tiles may be deprecated soon. The upcoming Windows Lite is rumored to come without Tiles already.&lt;/p&gt;
</description>
<pubDate>Wed, 17 Apr 2019 06:33:39 +0000</pubDate>
<dc:creator>hannob</dc:creator>
<og:type>article</og:type>
<og:title>Subdomain Takeover: Microsoft loses control over Windows Tiles - Golem.de</og:title>
<og:url>https://www.golem.de/news/subdomain-takeover-microsoft-loses-control-over-windows-tiles-1904-140717.html</og:url>
<og:image>https://www.golem.de/1904/140717-193471-193469_rc.jpg</og:image>
<og:description>A service from Microsoft used to allow web page owners to deliver news on Windows Tiles as so-called Windows Live Tiles. After the service has been disabled, we were able to take</og:description>
<dc:language>de-DE</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.golem.de/news/subdomain-takeover-microsoft-loses-control-over-windows-tiles-1904-140717.html</dc:identifier>
</item>
<item>
<title>Let’s Encrypt to transition to ISRG root</title>
<link>https://scotthelme.co.uk/lets-encrypt-to-transition-to-isrg-root/</link>
<guid isPermaLink="true" >https://scotthelme.co.uk/lets-encrypt-to-transition-to-isrg-root/</guid>
<description>&lt;p&gt;Let's Encrypt have announced that on July 8th, 2019 they will begin issuing new certificates from their own intermediate CA and not their current cross-signed intermediate. Here's what that means and what action, if any, site operators need to take.&lt;/p&gt;
&lt;hr/&gt;&lt;br/&gt;&lt;h4 id=&quot;let-s-encrypt&quot;&gt;Let's Encrypt&lt;/h4&gt;
&lt;p&gt;I've spoken &lt;a href=&quot;https://scotthelme.co.uk/setting-up-le/&quot;&gt;extensively&lt;/a&gt; about &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt; on my blog and I'm a huge supporter of theirs. Not only do they give out free certificates, but their process can be easily automated, leading to a huge increase in adoption of HTTPS across the web. Today they &lt;a href=&quot;https://letsencrypt.org/2019/04/15/transitioning-to-isrg-root.html&quot;&gt;made an announcement&lt;/a&gt; that they plan to make a change on July 8th, 2019. Here's what that change means and what you need to do about it.&lt;/p&gt;
&lt;br/&gt;&lt;img src=&quot;https://scotthelme.co.uk/content/images/2019/04/le-logo-wide.png&quot; class=&quot;kg-image&quot;/&gt;&lt;br/&gt;&lt;h4 id=&quot;cross-signing&quot;&gt;Cross-signing&lt;/h4&gt;
&lt;p&gt;Like all new CAs, Let's Encrypt began life with a cross-signature. Cross-signing is a trick that CAs can use to avoid the years long process of becoming a root CA. It genuinely does take many years to go through this process and Let's Encrypt wouldn't have been able to issue any certificates over the last 3+ years without a cross-sign.&lt;/p&gt;
&lt;p&gt;Cross-signing essentially makes you a CA by using the trust placed in another CA. I don't want to go too far into the technical details of that process here, instead I want to focus on what it means for site operators and the action they need to take, if any. If you'd really like the technical details, it might be worth attending &quot;&lt;a href=&quot;https://www.feistyduck.com/training/the-best-ssl-and-tls-training-in-the-world&quot;&gt;The Best TLS Training in the World&lt;/a&gt;&quot;, where the topics of cross-signing, subordinate CAs and much more are covered in great detail!&lt;/p&gt;
&lt;br/&gt;&lt;img src=&quot;https://scotthelme.co.uk/content/images/2019/04/image-3.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;In short, Let's Encrypt currently issue from their cross-signed intermediate, which is issued to them by IdenTrust. IdenTrust have been a CA for many years and even old, legacy clients recognise them as a CA. When you get a certificate from Let's Encrypt right now it is issued by the cross-signed X3 intermediate which chains to the IdenTrust root. Now that Let's Encrypt's ISRG root is widely trusted, they can instead switch to issuing from their own X3 intermediate instead of the cross-signed one. This is a big step forwards for them and will likely not mean anything to the vast majority of their users. There are a few considerations though.&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;legacy-clients&quot;&gt;Legacy clients&lt;/h4&gt;
&lt;p&gt;Yep, we just can't get away from them! As the ISRG root has only &lt;a href=&quot;https://letsencrypt.org/2018/08/06/trusted-by-all-major-root-programs.html&quot;&gt;recently been recognised&lt;/a&gt; by all of the major platforms, there is a small consideration for clients. Let's say that the ISRG root was recognised by Microsoft in Aug 2018. That means a Windows device would need to have done a Windows update since then to have been updated with that new information. If the device hasn't done a Windows update, then it can't know about this fancy, new ISRG root CA. This means that particular device would not recognise the certificates issued by the ISRG root as trusted. That's exactly the reason we have the cross-sign. By issuing from the cross-signed X3 intermediate, the client will recognise the IdenTrust root CA as trusted and thus recognise the intermediate and leaf certificate as trusted. The IdenTrust root was distributed many years ago and there is a good chance that the client has been updated in that time to know about it. Here lies the problem with the change of intermediate. Do your clients have the ISRG root in their trust store? That's the $1,000,000 question.&lt;/p&gt;
&lt;p&gt;Let's Encrypt have setup a &lt;a href=&quot;https://valid-isrgrootx1.letsencrypt.org/&quot;&gt;test site&lt;/a&gt; so you can see if a particular client can access it and know that they will be ok with your new certificates come July when the switch happens. This is the chain that is built by my install of Chrome on Windows, both fully updated.&lt;/p&gt;
&lt;br/&gt;&lt;img src=&quot;https://scotthelme.co.uk/content/images/2019/04/image-4.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;If my client didn't have the ISRG root in the trust store then this connection would fail as there was no trusted root to anchor the chain on. If you access this test site and your client doesn't work, you have a problem that you need to (and can) solve.&lt;/p&gt;
&lt;p&gt;When Let's Encrypt switch to issuing from their own X3 intermediate, if you want to support legacy clients that don't have the ISRG root in their trust store, there is a simple fix for you. All you need to do is continue to serve the old, cross-signed intermediate in the TLS handshake instead of the new one provided via ACME. Because both of the X3 intermediates use the same key pair, &lt;em&gt;either&lt;/em&gt; of the intermediates can be used to validate a chain, regardless of which of the intermediates actually issued the leaf certificate. Essentially what this means is that if you need your clients to keep building a chain down to the IdenTrust root instead of the ISRG root, you simply need to update your server to continue serving the old intermediate instead of the new one, and everything will work just fine (* for now, keep reading).&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;sites-that-hard-coded-the-old-intermediate&quot;&gt;Sites that hard-coded the old intermediate&lt;/h4&gt;
&lt;p&gt;Tecnically speaking, the intermediate certificate is as dynamic as the leaf certificate. Every time you get a new leaf certificate you may need to use a new intermediate certificate. Now, 99.999999% of the time that's not the case and intermediates are very long lived certificates, but here we are at the 0.000001% of the time when they can, and do, change. On July 8th, 2019 your new Let's Encrypt certificate will be issued from the X3 intermediate that chains to the ISRG root, but your site/service might continue to serve the cross-signed X3 intermediate during the TLS handshake. It is possible for a change like this to break your certificate chain, and thus the connection to your site, but for the reasons mentioned above, it won't.&lt;/p&gt;
&lt;p&gt;If you get a new certificate issued from the X3 intermediate that chains to the ISRG root, but you serve the old, cross-signed X3 intermediate in the TLS handshake, the connection will still work (* for now, keep reading). This is because both of the intermediates are using the same key pair and as I said above, a certificate issued from either of the X3 intermediates can be validated using either of the X3 intermediates. This is a nifty trick to prevent breakage and Let's Encrypt have likely done this &lt;em&gt;exactly&lt;/em&gt; for this reason, to look after their users when this time came.&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;the-cross-signed-x3-is-expiring&quot;&gt;The cross-signed X3 is expiring&lt;/h4&gt;
&lt;p&gt;Certificates don't last forever and intermediates are no exception. The current, cross-signed X3 intermediate will expire on March 18th 2021 (or likely March 17th depending on time zone) and that means that's the last date at which you can use it.&lt;/p&gt;
&lt;br/&gt;&lt;img src=&quot;https://scotthelme.co.uk/content/images/2019/04/image-5.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;If you're using this cross-signed intermediate for legacy client support, as I mentioned above, then you need to have a plan in place to take action before this date. Let's Encrypt are trying to help you out and they are obtaining a new intermediate that will be valid until September 29th 2021, giving you an extra few months. All you'd need to do is obtain a copy of this new cross-signed intermediate and serve that in your TLS handshake with legacy clients instead of the current one. There is a valid reason they can only buy you a few extra moths of support though...&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;the-identrust-root-is-expiring&quot;&gt;The IdenTrust root is expiring&lt;/h4&gt;
&lt;p&gt;The current cross-signed X3, and the new cross-signed X3, simply can't be valid past September 30th, 2021 as that's when the IdenTrust root certificate expires.&lt;/p&gt;
&lt;br/&gt;&lt;img src=&quot;https://scotthelme.co.uk/content/images/2019/04/image-6.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;This is the final date by which everyone must have moved over to using a certificate chain that chains to the ISRG root certificate if you're going to continue to use Let's Encrypt certificates. The old cross-signed X3 and the new cross-signed X3 will have both expired by then and the chain is definitely useless once the root has expired. If you still have legacy client concerns by September 30th, 2021, these clients won't have been updated for over 4.5 years and you will need to convince them to update if they want to continue to be able to access your site/service.&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;a-ca-problem-not-a-let-s-encrypt-problem&quot;&gt;A CA problem, not a Let's Encrypt problem&lt;/h4&gt;
&lt;p&gt;All certificates expire. All CAs start out life as a subordinate. None of the issues here are specific to Let's Encrypt, it's simply their turn to go through the process. All existing CAs will have either gone through this process or will have to go through this process at some point in the future. I just want to clarify that this action isn't necessary because you chose to use Let's Encrypt, it's necessary because of how CAs and the PKI ecosystem work. If you hang around long enough, you'll have to go through this process eventually no matter which CA you use.&lt;/p&gt;
&lt;br/&gt;&lt;h4 id=&quot;useful-links-and-information&quot;&gt;Useful links and information&lt;/h4&gt;
&lt;p&gt;Let's Encrypt transition announcement: &lt;a href=&quot;https://letsencrypt.org/2019/04/15/transitioning-to-isrg-root.html&quot;&gt;https://letsencrypt.org/2019/04/15/transitioning-to-isrg-root.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let's Encrypt ISRG root coverage: &lt;a href=&quot;https://letsencrypt.org/2018/08/06/trusted-by-all-major-root-programs.html&quot;&gt;https://letsencrypt.org/2018/08/06/trusted-by-all-major-root-programs.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Best TLS Training in the World: &lt;a href=&quot;https://www.feistyduck.com/training/the-best-ssl-and-tls-training-in-the-world&quot;&gt;https://www.feistyduck.com/training/the-best-ssl-and-tls-training-in-the-world&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 17 Apr 2019 05:19:01 +0000</pubDate>
<dc:creator>trygvis</dc:creator>
<og:type>article</og:type>
<og:title>Let's Encrypt to transition to ISRG root</og:title>
<og:description>Let's Encrypt have announced that on July 8th, 2019 they will begin issuing new certificates from their own intermediate CA and not their current cross-signed intermediate. Here's what that means and what action, if any, site operators need to take.Let's EncryptI've spoken extensively about Let's Encrypt on my blog</og:description>
<og:url>https://scotthelme.co.uk/lets-encrypt-to-transition-to-isrg-root/</og:url>
<og:image>https://scotthelme.co.uk/content/images/2019/04/le-logo-wide-1.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://scotthelme.co.uk/lets-encrypt-to-transition-to-isrg-root/</dc:identifier>
</item>
<item>
<title>Animating URLs with JavaScript and Emojis</title>
<link>http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%F0%9F%8C%92</link>
<guid isPermaLink="true" >http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/#%F0%9F%8C%92</guid>
<description>&lt;h4&gt;by &lt;a href=&quot;http://matthewrayfield.com&quot;&gt;Matthew Rayfield&lt;/a&gt; on January 17th 2019&lt;/h4&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4YZt4HEv48Y&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;You can use emoji (and other graphical unicode characters) in URLs. And wow is it great. But no one seems to do it. Why? Perhaps emoji are too exotic for normie web platforms to handle? Or maybe they are avoided for fear of angering the SEO gods?&lt;/p&gt;
&lt;p&gt;Whatever the reason, the overlapping portion on the Venn diagram of &quot;It's Possible v.s. No One Is Doing It&quot; is where my excitement usually lies. So I decided to put a little time into the possibilities of graphical characters in URLs. Specifically, with the possibility for animating these characters by way of some Javascript.&lt;/p&gt;
&lt;h2&gt;Loopin'&lt;/h2&gt;
&lt;p&gt;First off, make sure your page's Javascript code is being labelled as UTF-8 or you're gonna have a bad time putting emoji in your code at all. This can be accomplished via an HTTP header, or page META tag. There's a good chance you don't have to worry about this. But you can find more info about this here: &lt;a href=&quot;https://flaviocopes.com/javascript-unicode/&quot; target=&quot;_none&quot;&gt;Unicode in Javascript by Flavio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To achieve our desired outcome of emoji dancing like sugar plum fairies in our address bar, we need a loop. And really, all we need is a loop. We start the loop, it loops, and we're happy. So here's our first loop, a spinning emoji moon. I think when they added this sequence of emoji they must have had this in mind right?&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/moon.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
var f = ['🌑', '🌒', '🌓', '🌔', '🌝', '🌖', '🌗', '🌘'];

    function loop() {
        location.hash = f[Math.floor((Date.now()/100)%f.length)];

        setTimeout(loop, 50);
    }

    loop();
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;moon-check&quot;&gt;Run Moon Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;moon-check&quot; value=&quot;moon&quot;/&gt;&lt;/p&gt;
&lt;p&gt;You can click the toggle checkbox above to see the result of this loop in your URL bar.&lt;/p&gt;
&lt;p&gt;If you don't like the spinning moons you can swap out that array with whatever emojis you want. Like a clock:&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/clock.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
var f = ['🕐','🕑','🕒','🕓','🕔','🕕','🕖','🕗','🕘','🕙','🕚','🕛'];
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;clock-check&quot;&gt;Run Clock Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;clock-check&quot; value=&quot;clock&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This is a real simple example. Too simple really. So let's upgrade our loop so that it generates a string of multiple emoji! This time we're utilizing the emoji &quot;skin tone modifiers&quot; characters to make some color-changing babies:&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/babies2.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
var e = ['🏻', '🏼', '🏽', '🏾', '🏿'];

    function loop() {
        var s = '',
            i, m;

        for (i = 0; i &amp;lt; 10; i ++) {
            m = Math.floor(e.length * ((Math.sin((Date.now()/100) + i)+1)/2));
            s += '👶' + e[m];
        }

        location.hash = s;

        setTimeout(loop, 50);
    }

    loop();
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;babies-check&quot;&gt;Run Babies Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;babies-check&quot; value=&quot;babies&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We use a sine wave controlled by time and position to select which color we want. This gives us a nice loopy color changing effect!&lt;/p&gt;
&lt;p&gt;Or how about we revisit our moon spinner, spread it out, and make something resembling a loading indicator? Sure, let's do it:&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/moons.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
var f = ['🌑', '🌘', '🌗', '🌖', '🌕', '🌔', '🌓', '🌒'],
        d = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        m = 0;

    function loop() {
        var s = '', x = 0;

        if (!m) {
            while (d[x] == 4) {
                x ++;
            }

            if (x &amp;gt;= d.length) m = 1;
            else {
                d[x] ++;
            }
        }
        else {
            while (d[x] == 0) {
                x ++;
            }

            if (x &amp;gt;= d.length) m = 0;
            else {
                d[x] ++;

                if (d[x] == 8) d[x] = 0;
            }
        }

        d.forEach(function (n) {
            s += f[n];
        });

        location.hash = s;

        setTimeout(loop, 50);
    }

    loop();
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;multi-moon-check&quot;&gt;Run Multi-Moon Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;multi-moon-check&quot; value=&quot;multi-moon&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Exploring Other Characters&lt;/h2&gt;
&lt;p&gt;But it's not just emoji that give us a means to pump graphics out of our URL bar. There's a whole boatload of unicode characters of interest to our goals.&lt;/p&gt;
&lt;p&gt;Particularly interesting are the &lt;a href=&quot;https://en.wikipedia.org/wiki/Box-drawing_character&quot; target=&quot;_none&quot;&gt;Box-drawing Characters&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/box-characters.png&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Many of these lend themselves better to a two dimensional output. But they're still pretty good on the single line we have to play with. For instance we can make a string of multiple height varied block characters and construct a nice little wave:&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/wavy.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
function loop() {
        var i, n, s = '';

        for (i = 0; i &amp;lt; 10; i++) {
            n = Math.floor(Math.sin((Date.now()/200) + (i/2)) * 4) + 4;

            s += String.fromCharCode(0x2581 + n);
        }

        window.location.hash = s;

        setTimeout(loop, 50);
    }

    loop();
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;wavy-check&quot;&gt;Run Wavy Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;wavy-check&quot; value=&quot;wavy&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I liked this look so much I put it up permanently at &lt;a href=&quot;http://wavyurl.com&quot; target=&quot;_none&quot;&gt;wavyurl.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using the variable width characters we can even wiggle on the horizontal, creating something like a progress bar:&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/progress.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
function loop() {
        var s = '',
            p;

        p = Math.floor(((Math.sin(Date.now()/300)+1)/2) * 100);

        while (p &amp;gt;= 8) {
            s += '█';
            p -= 8;
        }
        s += ['⠀','▏','▎','▍','▌','▋','▊','▉'][p];

        location.hash = s;
        setTimeout(loop, 50);
    }
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;progress-bar-check&quot;&gt;Run Progress Bar Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;progress-bar-check&quot; value=&quot;progress-bar&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A progress bar huh? That's like, almost useful. Which brings me to...&lt;/p&gt;
&lt;h2&gt;Displaying Video Progress In The URL Bar&lt;/h2&gt;
&lt;p&gt;In an attempt to reduce the frivolity in our little experiment, I came up with the idea to show a web video's progress in the URL. I simply attach a function that renders our progress string to the &quot;timeupdate&quot; event for a video, and voila! A video progress indicator in the URL, complete with the time and duration!&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/video-progress.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
var video;

    function formatTime(seconds) {
        var minutes = Math.floor(seconds/60),
            seconds = Math.floor(seconds - (minutes*60));

        return ('0'+minutes).substr(-2) + ':' + ('0'+seconds).substr(-2);
    }

    function renderProgressBar() {
        var s = '',
            l = 15,
            p = Math.floor(video.currentTime / video.duration * (l-1)),
            i;

        for (i = 0; i &amp;lt; l; i ++) {
            if (i == p) s +='◯';
            else if (i &amp;lt; p) s += '─';
            else s += '┄';
        }

        location.hash = '╭'+s+'╮'+formatTime(video.currentTime)+'╱'+formatTime(video.duration);
    }

    video = document.getElementById('video');
    video.addEventListener('timeupdate', renderProgressBar);
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;video-progress-check&quot;&gt;Run Video Progress Bar Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;video-progress-check&quot; value=&quot;video-progress&quot;/&gt;&lt;/p&gt;
&lt;p&gt;With the above checkbox checked, you can use the video below to try it out.&lt;/p&gt;

&lt;p&gt;I rather like this lines and circle progress bar, but if you fancy some moon emoji, I've got you covered:&lt;/p&gt;
&lt;div class=&quot;centered&quot;&gt;&lt;img src=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/video-moons.gif&quot;/&gt;&lt;/div&gt;
&lt;pre&gt;
var e = ['🌑', '🌘', '🌗', '🌖', '🌕'],
        video;

    function formatTime(seconds) {
        var minutes = Math.floor(seconds/60),
            seconds = Math.floor(seconds - (minutes*60));

        return ('0'+minutes).substr(-2) + ':' + ('0'+seconds).substr(-2);
    }

    function renderProgressBar() {
        var s = '',
            c = 0,
            l = 10,
            p = Math.floor(video.currentTime / video.duration * ((l*5)-1)),
            i;

        while (p &amp;gt;= 5) {
            s += e[4];
            c ++;
            p -= 5;
        }
        s += e[p];
        c ++;

        while (c &amp;lt; l) {
            s += e[0];
            c ++;
        }

        location.hash = s+formatTime(video.currentTime)+'╱'+formatTime(video.duration);
    }

    video = document.getElementById('video');
    video.addEventListener('timeupdate', renderProgressBar);
&lt;/pre&gt;
&lt;p&gt;&lt;label for=&quot;video-moons-check&quot;&gt;Run Video Moons Progress Bar Code:&lt;/label&gt; &lt;input type=&quot;checkbox&quot; id=&quot;video-moons-check&quot; value=&quot;video-moons&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Okay, calling this progress bar &quot;useful&quot; is a stretch. But if I squint, I can almost see a scenario where it would be useful to have this in a video sharing URL. Like YouTube has the option of creating a link to a video at a specific time. Might it not be cool to include a visual indication? Hmmm?&lt;/p&gt;
&lt;p&gt;Maybe there is some more useful implementation of this &quot;technology&quot; that I haven't come up with. I'll keep thinking on that. And hey, maybe you can come up with something?&lt;/p&gt;
&lt;h2&gt;One Last Thing&lt;/h2&gt;
&lt;p&gt;You may be wondering why I used &quot;location.hash =&quot; instead of the newer and shinier HTML5 History API. Two reasons. One solvable. The other less so. Both inconvenient.&lt;/p&gt;
&lt;p&gt;Issue 1 is also a feature of the History API: It actually changes the whole URL path, not just the hash. So if I use the History API and change our page to &quot;/🌑🌘🌗🌖🌕&quot;, it'll look nicer than having tacked on a #. But it also means my web server must be able to response to &quot;/🌑🌘🌗🌖🌕&quot;, or the user will be out of luck if they refresh, or otherwise navigate to the modified URL. This is doable, but trickier than using &quot;location.hash =&quot; which doesn't require me to prepare the server in any special way.&lt;/p&gt;
&lt;p&gt;Issue 2 is more unexpected. Turns out that in 2 out of 3 browsers I tested, the History API is throttled. If I push my wavy URL characters to the address bar at a fast rate I'll eventually get the following error in Chrome:&lt;/p&gt;
&lt;pre&gt;
Throttling history state changes to prevent the browser from hanging.
&lt;/pre&gt;
&lt;p&gt;Safari is nice enough to give us a bit more info:&lt;/p&gt;
&lt;pre&gt;
SecurityError: Attempt to use history.pushState() more than 100 times per 30.000000 seconds
&lt;/pre&gt;
&lt;p&gt;Now if I stay under that limit I'm fine. But c'mon, 3 frames a second just doesn't cut it for the ooey gooey URL animations I desire.&lt;/p&gt;
&lt;p&gt;Good boy Firefox on the other hand doesn't seem to give a hoot how many times I push a new history or how quickly. Which is gosh darn thoughtful of it. But breaking in two major browsers, plus neccesitating the web server configuration to fix Issue 1, makes me willing to put up with a little # in the URL.&lt;/p&gt;
&lt;h2&gt;The End ?&lt;/h2&gt;
&lt;p&gt;I'll leave it there. But I will tell ya that I've got a few ideas for making tiny games that display in the URL bar. Especially given the &lt;a href=&quot;https://en.wikipedia.org/wiki/Braille_Patterns&quot;&gt;Braille Characters&lt;/a&gt; that we have yet to explore. So stay tuned for that.&lt;/p&gt;
&lt;p&gt;If you have questions, comments, or simply want to keep up with my latest tinkerings, check me out on Twitter: &lt;a href=&quot;http://twitter.com/MatthewRayfield&quot;&gt;@MatthewRayfield&lt;/a&gt;. Or subscribe to my almost-never-bothered email list &lt;a href=&quot;https://matthewrayfield.us14.list-manage.com/subscribe?u=79fb3e3e1b6ad587be0a01fc9&amp;amp;id=10494371c3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh and if you want the source for these URL mutilating abominations wrapped up in nice little ready-to-run HTML files, &lt;a href=&quot;http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/animated-urls-source-code.zip&quot;&gt;here&lt;/a&gt; you go ;]&lt;/p&gt;
&lt;p&gt;Bye for now!&lt;/p&gt;

</description>
<pubDate>Wed, 17 Apr 2019 05:03:06 +0000</pubDate>
<dc:creator>bemmu</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://matthewrayfield.com/articles/animating-urls-with-javascript-and-emojis/</dc:identifier>
</item>
<item>
<title>Intel Exiting 5G Modems</title>
<link>https://newsroom.intel.com/news-releases/intel-modem-statement/#gs.639at4</link>
<guid isPermaLink="true" >https://newsroom.intel.com/news-releases/intel-modem-statement/#gs.639at4</guid>
<description>&lt;p&gt;SANTA CLARA, Calif., April 16, 2019 – Intel Corporation today announced its intention to exit the 5G smartphone modem business and complete an assessment of the opportunities for 4G and 5G modems in PCs, internet of things devices and other data-centric devices. Intel will also continue to invest in its 5G network infrastructure business.&lt;/p&gt;
&lt;p&gt;The company will continue to meet current customer commitments for its existing 4G smartphone modem product line, but does not expect to launch 5G modem products in the smartphone space, including those originally planned for launches in 2020.&lt;/p&gt;
&lt;p&gt;“We are very excited about the opportunity in 5G and the ‘cloudification’ of the network, but in the smartphone modem business it has become apparent that there is no clear path to profitability and positive returns,” said Intel CEO Bob Swan. “5G continues to be a strategic priority across Intel, and our team has developed a valuable portfolio of wireless products and intellectual property. We are assessing our options to realize the value we have created, including the opportunities in a wide variety of data-centric platforms and devices in a 5G world.”&lt;/p&gt;
&lt;p&gt;Intel expects to provide additional details in its upcoming first-quarter 2019 earnings release and conference call, scheduled for April 25.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;small&quot;&gt;&lt;strong&gt;Forward-Looking Statements&lt;/strong&gt;Statements in this press release that refer to future plans and expectations are forward-looking statements that involve a number of risks and uncertainties. Words such as “anticipates,” “expects,” “intends,” “goals,” “plans,” “believes,” “seeks,” “estimates,” “continues,” “may,” “will,” “would,” “should,” “could,” and variations of such words and similar expressions are intended to identify such forward-looking statements. Statements that refer to or are based on estimates, forecasts, projections, uncertain events or assumptions, including statements relating to anticipated trends in our businesses or the markets relevant to them, also identify forward-looking statements. All forward-looking statements included in this release are based on management’s expectations as of the date of this release and, except as required by law, Intel disclaims any obligation to update these forward-looking statements to reflect future events or circumstances. Forward-looking statements involve many risks and uncertainties that could cause actual results to differ materially from those expressed or implied in such statements. Important factors that could cause actual results to differ materially from the company’s expectations are set forth in Intel’s earnings release dated January 24, 2019, which is included as an exhibit to Intel’s Form 8-K furnished to the SEC on such date. Additional information regarding these and other factors that could affect Intel’s results is included in Intel’s SEC filings, including the company’s most recent reports on Forms 10-K and 10-Q. Copies of Intel’s Form 10-K, 10-Q and 8-K reports may be obtained by visiting our Investor Relations website at www.intc.com or the SEC’s website at www.sec.gov.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 17 Apr 2019 00:10:53 +0000</pubDate>
<dc:creator>ItsTotallyOn</dc:creator>
<og:type>article</og:type>
<og:title>Intel to Exit 5G Smartphone Modem Business, Focus 5G Efforts on Network Infrastructure and Other Data-Centric Opportunities | Intel Newsroom</og:title>
<og:description>SANTA CLARA, Calif., April 16, 2019 – Intel Corporation today announced its intention to exit the 5G smartphone modem business and complete an assessment</og:description>
<og:url>https://newsroom.intel.com/news-releases/intel-modem-statement/</og:url>
<og:image>https://simplecore.intel.com/newsroom/wp-content/uploads/sites/11/2016/04/intel-logo-default.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://newsroom.intel.com/news-releases/intel-modem-statement/</dc:identifier>
</item>
<item>
<title>Panic’s Next Editor</title>
<link>https://panic.com/next/</link>
<guid isPermaLink="true" >https://panic.com/next/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, viewport-fit=cover&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cloud.typography.com/7652892/6499212/css/fonts.css&quot;/&gt;&lt;link href=&quot;next.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;title&gt;Panic - What's Next for Coda?&lt;/title&gt;&lt;meta name=&quot;title&quot; content=&quot;What's Next for Coda?&quot;/&gt;&lt;meta name=&quot;description&quot; content=&quot;The competition is free. The industry is moving fast. And we’re making a brand-new, fully native, web development editor just for the Mac. What are we thinking?&quot;/&gt;&lt;meta property=&quot;og:type&quot; content=&quot;website&quot;/&gt;&lt;meta property=&quot;og:url&quot; content=&quot;https:/panic.com/next/&quot;/&gt;&lt;meta property=&quot;og:title&quot; content=&quot;What's Next for Coda?&quot;/&gt;&lt;meta property=&quot;og:description&quot; content=&quot;The competition is free. The industry is moving fast. And we’re making a brand-new, fully native, web development editor just for the Mac. What are we thinking?&quot;/&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://panic.com/next/card.png&quot;/&gt;&lt;meta property=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;/&gt;&lt;meta property=&quot;twitter:url&quot; content=&quot;https:/panic.com/next/&quot;/&gt;&lt;meta property=&quot;twitter:title&quot; content=&quot;What's Next for Coda?&quot;/&gt;&lt;meta property=&quot;twitter:description&quot; content=&quot;The competition is free. The industry is moving fast. And we’re making a brand-new, fully native, web development editor just for the Mac. What are we thinking?&quot;/&gt;&lt;meta property=&quot;twitter:image&quot; content=&quot;https://panic.com/next/card.png&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;80.827101631117&quot;&gt;
&lt;p&gt;&lt;a class=&quot;home&quot; href=&quot;https://panic.com/&quot;&gt;Panic Inc.&lt;/a&gt;&lt;/p&gt;
&lt;p readability=&quot;27.5&quot;&gt;What are we thinking?
&lt;section readability=&quot;55&quot;&gt;&lt;p&gt;Twelve years ago we introduced Coda, the world’s first web development editor. It put the tools you needed to make a web page together in one app, and nobody had ever done that before.&lt;/p&gt;
&lt;p&gt;But a lot has changed since then. Websites are now more like applications in the way they're built and run. Deployment is much more complex than an FTP upload. Languages, frameworks, toolchains — and possibilities — have exploded.&lt;/p&gt;
&lt;p&gt;We had to make a difficult choice: rewrite Coda for this new world, or leave it behind?&lt;/p&gt;
&lt;p&gt;We’ve been making apps for a long time. And we never stopped having a passion for creating beautiful, functional, useful tools that help people do their very best work.&lt;/p&gt;
&lt;p&gt;It’s what we are. It’s why we’re here.&lt;/p&gt;
&lt;p&gt;So, you can probably guess what we chose.&lt;/p&gt;
&lt;p&gt;Later this year, we’ll be releasing a preview of our next Mac web editor, one you can try for yourself.&lt;/p&gt;
&lt;h2&gt;Is it any good?&lt;/h2&gt;
&lt;p&gt;So far, yes. We think so. We’re using it every day.&lt;/p&gt;
&lt;p&gt;There are substantial new modern editor features, like multiple cursors, highlighting for identifiers, tag pairs, and brackets, editor overscroll, improved autocomplete, and more.&lt;/p&gt;
&lt;p&gt;There’s publishing to multiple destinations. A sidebar for build issues. Themes for the entire workspace. A new Terminal.&lt;/p&gt;
&lt;p&gt;And since it’s Mac native, it’s super smooth and hyper responsive, designed to get your work done as quickly as possible. It’s also way faster than Coda 2 — up to 40 times faster when parsing files and indexing a project.&lt;/p&gt;
&lt;p&gt;Most intriguingly, there’s still a lot we’re not quite ready to talk about — innovative new ways that our next editor can help you with your entire web development workflow.&lt;/p&gt;
&lt;/section&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://panic.com/next/screenshot.png&quot;/&gt;&lt;/p&gt;
&lt;section readability=&quot;60.647168059424&quot;&gt;&lt;h2&gt;How can we compete?&lt;/h2&gt;
&lt;p&gt;That’s a fair question. Many of our competitors are free, and we really rely on, well, revenue.&lt;/p&gt;
&lt;p&gt;But if there’s anything we believe, it’s this: when you build an amazing product that helps people be happier doing their jobs every day, you’ll find the customers you need to keep it going.&lt;/p&gt;
&lt;p&gt;Just look at Transmit, our file transfer client, which is still being actively developed, 20 years later.&lt;/p&gt;
&lt;p&gt;We know we’ll never crush the big guys. We won’t even be on Windows. But that’s OK, because crushing anything has never really been a goal. Instead, we’re working hard to give you something really amazing. Something you’ll use every day. Something worth switching to.&lt;/p&gt;
&lt;h2&gt;But change is always hard.&lt;/h2&gt;
&lt;p&gt;It’s not all great news. Our next editor will be entirely redesigned, which for Coda 2 users means some re-learning of how the app works. It was important for us to make it fast, modern, free of bloat, and out-of-your-way so you can work quickly. That meant totally starting over.&lt;/p&gt;
&lt;p&gt;Plus, some features from Coda 2 will be going away — at least for now — like the MySQL client and visual CSS editing.&lt;/p&gt;
&lt;p&gt;But we’re going to be moving fast. Iterating constantly. Listening to feedback daily. This is an app that won’t be standing still. And we’re counting on you to guide us.&lt;/p&gt;
&lt;h2&gt;And, it won’t be called Coda.&lt;/h2&gt;
&lt;p&gt;Yes, the next Coda is so different it won’t even be called Coda.&lt;/p&gt;
&lt;p&gt;Frankly, we were worried that developers may have tried Coda in the past, decided it wasn’t for them, and written the app off forever. This new version is so new, it deserves a fresh start.&lt;/p&gt;
&lt;p&gt;And then, incredibly, a new Coda arrived on the scene — a reimagined document at &lt;a href=&quot;http://coda.io&quot;&gt;coda.io&lt;/a&gt; — and we reached an agreement to let them have the name. They’re Coda now. And we’re free to look to the future.&lt;/p&gt;
&lt;p&gt;So the next Coda won’t be “Coda”. So what will it be?&lt;/p&gt;
&lt;h2&gt;It will be very special.&lt;/h2&gt;
&lt;p&gt;Yeah, it’s true, we do things a little… differently here at Panic. But we love the Mac. We love building professional tools. And we love helping you do your best work.&lt;/p&gt;
&lt;p&gt;Our next editor will be here before you know it.&lt;/p&gt;
&lt;footer&gt;&lt;a class=&quot;button&quot; href=&quot;https://panic-inc.typeform.com/to/Y85MXj&quot;&gt;Click here to be the first to know more.&lt;/a&gt;&lt;/footer&gt;&lt;/section&gt;&lt;/body&gt;</description>
<pubDate>Tue, 16 Apr 2019 22:19:03 +0000</pubDate>
<dc:creator>whalesalad</dc:creator>
<og:type>website</og:type>
<og:url>https:/panic.com/next/</og:url>
<og:title>What's Next for Coda?</og:title>
<og:description>The competition is free. The industry is moving fast. And we’re making a brand-new, fully native, web development editor just for the Mac. What are we thinking?</og:description>
<og:image>https://panic.com/next/card.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://panic.com/next/</dc:identifier>
</item>
<item>
<title>Pyodide: Bringing the scientific Python stack to the browser</title>
<link>https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://github.com/iodide-project/pyodide/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pyodide&lt;/a&gt; is an experimental project from Mozilla to create a full Python data science stack that runs entirely in the browser.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://alpha.iodide.io/notebooks/1663/?viewMode=report&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/311-oakdark-inferno-edited-cropped.gif&quot; alt=&quot;Density of 311 calls in Oakland, California&quot; width=&quot;749&quot; height=&quot;324&quot; class=&quot;alignnone size-full wp-image-33404&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The impetus for Pyodide came from working on another Mozilla project, &lt;a href=&quot;http://iodide.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Iodide&lt;/a&gt;, which we presented in an &lt;a href=&quot;https://hacks.mozilla.org/2019/03/iodide-an-experimental-tool-for-scientific-communicatiodide-for-scientific-communication-exploration-on-the-web/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;earlier post&lt;/a&gt;.  Iodide is a tool for data science experimentation and communication based on state-of-the-art web technologies.  Notably, it’s designed to perform data science computation within the browser rather than on a remote kernel.&lt;/p&gt;
&lt;p&gt;Unfortunately, the “language we all have” in the browser, JavaScript, doesn’t have a mature suite of data science libraries, and it’s missing a number of features that are useful for numerical computing, such as &lt;a href=&quot;https://github.com/keithamus/ecmascript-operator-overloading-proposal&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;operator overloading&lt;/a&gt;. We still think it’s worthwhile to work on changing that and &lt;a href=&quot;https://github.com/iodide-project/awesome-browser-data-science-libraries&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;moving the JavaScript data science ecosystem forward&lt;/a&gt;. In the meantime, we’re also taking a shortcut: we’re meeting data scientists where they are by bringing the popular and mature Python scientific stack to the browser.&lt;/p&gt;
&lt;p&gt;It’s also been argued more generally that &lt;a href=&quot;https://www.youtube.com/watch?v=ITksU31c1WY&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Python not running in the browser represents an existential threat to the language&lt;/a&gt;—with so much user interaction happening on the web or on mobile devices, it needs to work there or be left behind. Therefore, while Pyodide tries to meet the needs of Iodide first, it is engineered to be &lt;a href=&quot;https://github.com/iodide-project/pyodide/blob/master/docs/using_pyodide_from_javascript.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;useful on its own as well&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pyodide gives you a full, standard Python interpreter that runs entirely in the browser, with full access to the browser’s Web APIs.  &lt;a href=&quot;https://alpha.iodide.io/notebooks/1663/?viewMode=report&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;In the example above&lt;/a&gt; (50 MB download), the density of calls to the City of Oakland, California’s “311” local information service is plotted in 3D. The data loading and processing is performed in Python, and then it hands off to Javascript and WebGL for the plotting.&lt;/p&gt;
&lt;p&gt;For another quick example, here’s a simple doodling script that lets you draw in the browser window:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;py&quot;&gt;
from js import document, iodide

canvas = iodide.output.element('canvas')
canvas.setAttribute('width', 450)
canvas.setAttribute('height', 300)
context = canvas.getContext(&quot;2d&quot;)
context.strokeStyle = &quot;#df4b26&quot;
context.lineJoin = &quot;round&quot;
context.lineWidth = 5

pen = False
lastPoint = (0, 0)

def onmousemove(e):
    global lastPoint

    if pen:
        newPoint = (e.offsetX, e.offsetY)
        context.beginPath()
        context.moveTo(lastPoint[0], lastPoint[1])
        context.lineTo(newPoint[0], newPoint[1])
        context.closePath()
        context.stroke()
        lastPoint = newPoint

def onmousedown(e):
    global pen, lastPoint
    pen = True
    lastPoint = (e.offsetX, e.offsetY)

def onmouseup(e):
    global pen
    pen = False

canvas.addEventListener('mousemove', onmousemove)
canvas.addEventListener('mousedown', onmousedown)
canvas.addEventListener('mouseup', onmouseup)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And this is what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/pyodide-draw.gif&quot; alt=&quot;Interactive doodle example&quot; width=&quot;900&quot; height=&quot;900&quot; class=&quot;alignnone size-full wp-image-33405&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The best way to learn more about what Pyodide can do is to just go and try it! There is a &lt;a href=&quot;https://alpha.iodide.io/notebooks/300/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;demo notebook&lt;/a&gt; (50MB download) that walks through the high-level features. The rest of this post will be more of a technical deep-dive into how it works.&lt;/p&gt;
&lt;h2&gt;Prior art&lt;/h2&gt;
&lt;p&gt;There were already a number of impressive projects bringing Python to the browser when we started Pyodide.  Unfortunately, none addressed our specific goal of supporting a full-featured mainstream data science stack, including &lt;a href=&quot;http://www.numpy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NumPy&lt;/a&gt;, &lt;a href=&quot;https://pandas.pydata.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pandas&lt;/a&gt;, &lt;a href=&quot;https://www.scipy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Scipy&lt;/a&gt;, and &lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Matplotlib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Projects such as &lt;a href=&quot;https://www.transcrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Transcrypt&lt;/a&gt; transpile (convert) Python to JavaScript. Because the transpilation step itself happens in Python, you either need to do all of the transpiling ahead of time, or communicate with a server to do that work. This doesn’t really meet our goal of letting the user write Python in the browser and run it without any outside help.&lt;/p&gt;
&lt;p&gt;Projects like &lt;a href=&quot;https://brython.info/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Brython&lt;/a&gt; and &lt;a href=&quot;http://www.skulpt.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Skulpt&lt;/a&gt; are rewrites of the standard Python interpreter to JavaScript, therefore, they can run strings of Python code directly in the browser.  Unfortunately, since they are entirely new implementations of Python, and in JavaScript to boot, they aren’t compatible with Python extensions written in C, such as &lt;a href=&quot;http://www.numpy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NumPy&lt;/a&gt; and &lt;a href=&quot;https://pandas.pydata.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pandas&lt;/a&gt;. Therefore, there’s no data science tooling.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pypyjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PyPyJs&lt;/a&gt; is a build of the alternative just-in-time compiling Python implementation, &lt;a href=&quot;https://pypy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PyPy&lt;/a&gt;, to the browser, using emscripten.  It has the potential to run Python code really quickly, for the same reasons that PyPy does.  Unfortunately, it has the &lt;a href=&quot;http://doc.pypy.org/en/latest/faq.html#should-i-install-numpy-or-numpypy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;same issues with performance with C extensions&lt;/a&gt; that PyPy does.&lt;/p&gt;
&lt;p&gt;All of these approaches would have required us to rewrite the scientific computing tools to achieve adequate performance.  As someone who used to &lt;a href=&quot;http://matplotlib.1069221.n5.nabble.com/ANN-Michael-Droettboom-matplotlib-lead-developer-td5037.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;work a lot on Matplotlib&lt;/a&gt;, I know how many untold person-hours that would take: other projects have &lt;a href=&quot;http://doc.pypy.org/en/latest/faq.html#what-about-numpy-numpypy-micronumpy&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;tried and stalled&lt;/a&gt;, and it’s certainly a lot more work than our scrappy upstart team could handle.  We therefore needed to build a tool that was based as closely as possible on the standard implementations of Python and the scientific stack that most data scientists already use.  &lt;/p&gt;
&lt;p&gt;After a discussion with some of &lt;a href=&quot;https://research.mozilla.org/webassembly/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Mozilla’s WebAssembly wizards&lt;/a&gt;, we saw that the key to building this was &lt;a href=&quot;https://emscripten.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;emscripten&lt;/a&gt; and &lt;a href=&quot;https://webassembly.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WebAssembly&lt;/a&gt;: technologies to port existing code written in C to the browser.  That led to the discovery of an existing but dormant build of Python for emscripten, &lt;a href=&quot;https://github.com/dgym/cpython-emscripten&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;cpython-emscripten&lt;/a&gt;, which was ultimately used as the basis for Pyodide.&lt;/p&gt;
&lt;h2&gt;emscripten and WebAssembly&lt;/h2&gt;
&lt;p&gt;There are many ways of describing what &lt;a href=&quot;https://emscripten.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;emscripten&lt;/a&gt; is, but most importantly for our purposes, it provides two things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A compiler from C/C++ to WebAssembly&lt;/li&gt;
&lt;li&gt;A compatibility layer that makes the browser feel like a native computing environment&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WebAssembly&lt;/a&gt; is a new language that runs in modern web-browsers, as a complement to JavaScript.  It’s a low-level assembly-like language that runs with near-native performance intended as a compilation target for low-level languages like C and C++.  Notably, the most popular interpreter for Python, called CPython, is implemented in C, so this is the kind of thing emscripten was created for.&lt;/p&gt;
&lt;p&gt;Pyodide is put together by:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Downloading the source code of the mainstream &lt;a href=&quot;https://github.com/python/cpython&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Python interpreter&lt;/a&gt; (CPython), and the scientific computing packages (NumPy, etc.)&lt;/li&gt;
&lt;li&gt;Applying a very small set of changes to make them work in the new environment&lt;/li&gt;
&lt;li&gt;Compiling them to WebAssembly using emscripten’s compiler&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you were to just take this WebAssembly and load it in the browser, things would look very different to the Python interpreter than they do when running directly on top of your operating system. For example, web browsers don’t have a file system (a place to load and save files). Fortunately, emscripten provides a virtual file system, written in JavaScript, that the Python interpreter can use. By default, these virtual “files” reside in volatile memory in the browser tab, and they disappear when you navigate away from the page.  (emscripten also provides a way for the file system to store things in the browser’s persistent local storage, but Pyodide doesn’t use it.)&lt;/p&gt;
&lt;p&gt;By emulating the file system and other features of a standard computing environment, emscripten makes moving existing projects to the web browser possible with surprisingly few changes. (Some day, we may move to using &lt;a href=&quot;https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;WASI&lt;/a&gt; as the system emulation layer, but for now emscripten is the more mature and complete option).&lt;/p&gt;
&lt;p&gt;Putting it all together, to load Pyodide in your browser, you need to download:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The compiled Python interpreter as WebAssembly.&lt;/li&gt;
&lt;li&gt;A bunch of JavaScript provided by emscripten that provides the system emulation.&lt;/li&gt;
&lt;li&gt;A packaged file system containing all the files the Python interpreter will need, most notably the Python standard library.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These files can be quite large: Python itself is 21MB, NumPy is 7MB, and so on. Fortunately, these packages only have to be downloaded once, after which they are stored in the browser’s cache.&lt;/p&gt;
&lt;p&gt;Using all of these pieces in tandem, the Python interpreter can access the files in its standard library, start up, and then start running the user’s code.&lt;/p&gt;
&lt;h2&gt;What works and doesn’t work&lt;/h2&gt;
&lt;p&gt;We run CPython’s unit tests as part of Pyodide’s continuous testing to get a handle on what features of Python do and don’t work.  Some things, like &lt;a href=&quot;https://docs.python.org/3/library/threading.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;threading&lt;/a&gt;, don’t work now, but with the newly-available &lt;a href=&quot;https://developers.google.com/web/updates/2018/10/wasm-threads&quot;&gt;WebAssembly threads&lt;/a&gt;, we should be able to add support in the near future.  &lt;/p&gt;
&lt;p&gt;Other features, like &lt;a href=&quot;https://docs.python.org/3/library/socket.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;low-level networking sockets&lt;/a&gt;, are unlikely to ever work because of the browser’s security sandbox.  Sorry to break it to you, your hopes of running a Python &lt;a href=&quot;https://github.com/Yardanico/puremine&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;minecraft server&lt;/a&gt; inside your web browser are probably still a long way off. Nevertheless, you can still fetch things over the network using the browser’s APIs (more details below).&lt;/p&gt;
&lt;h2&gt;How fast is it?&lt;/h2&gt;
&lt;p&gt;Running the Python interpreter inside a JavaScript virtual machine adds a performance penalty, but that penalty turns out to be surprisingly small — in our benchmarks, around 1x-12x slower than native on Firefox and 1x-16x slower on Chrome. Experience shows that this is very usable for interactive exploration.&lt;/p&gt;
&lt;p&gt;Notably, code that runs a lot of inner loops in Python tends to be slower by a larger factor than code that relies on NumPy to perform its inner loops. Below are the results of running various &lt;a href=&quot;https://github.com/iodide-project/pyodide/tree/master/benchmark/benchmarks&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pure Python and Numpy benchmarks&lt;/a&gt; in Firefox and Chrome compared to natively on the same hardware.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/image1-1.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-33387&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/image1-1.png&quot; alt=&quot;Pyodide benchmark results: Firefox and Chrome vs. native&quot; width=&quot;800&quot; height=&quot;800&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/04/image1-1.png 800w, https://hacks.mozilla.org/files/2019/04/image1-1-250x250.png 250w, https://hacks.mozilla.org/files/2019/04/image1-1-768x768.png 768w, https://hacks.mozilla.org/files/2019/04/image1-1-500x500.png 500w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Interaction between Python and JavaScript&lt;/h2&gt;
&lt;p&gt;If all Pyodide could do is run Python code and write to standard out, it would amount to a cool trick, but it wouldn’t be a practical tool for real work.  The real power comes from its ability to interact with browser APIs and other JavaScript libraries at a very fine level. WebAssembly has been designed to easily interact with the JavaScript running in the browser.  Since we’ve compiled the Python interpreter to WebAssembly, it too has deep integration with the JavaScript side.&lt;/p&gt;
&lt;p&gt;Pyodide implicitly converts many of the built-in data types between Python and JavaScript.  Some of these conversions are straightforward and obvious, but as always, it’s the corner cases that are interesting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/image3.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-33388&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/image3.png&quot; alt=&quot;Conversion of data types between Python and JavaScript&quot; width=&quot;1536&quot; height=&quot;960&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/04/image3.png 1536w, https://hacks.mozilla.org/files/2019/04/image3-250x156.png 250w, https://hacks.mozilla.org/files/2019/04/image3-768x480.png 768w, https://hacks.mozilla.org/files/2019/04/image3-500x313.png 500w&quot; sizes=&quot;(max-width: 1536px) 100vw, 1536px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python treats &lt;code&gt;dict&lt;/code&gt;s and &lt;code&gt;object&lt;/code&gt; instances as two distinct types. &lt;code&gt;dict&lt;/code&gt;s (dictionaries) are just mappings of keys to values.  On the other hand, &lt;code&gt;object&lt;/code&gt;s generally have methods that “do something” to those objects. In JavaScript, these two concepts are conflated into a single type called &lt;code&gt;Object&lt;/code&gt;.  (Yes, I’ve oversimplified here to make a point.)&lt;/p&gt;
&lt;p&gt;Without really understanding the developer’s intention for the JavaScript &lt;code&gt;Object&lt;/code&gt;, it’s impossible to efficiently guess whether it should be converted to a Python &lt;code&gt;dict&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt;.  Therefore, we have to use a proxy and let “duck typing” resolve the situation.&lt;/p&gt;
&lt;p&gt;Proxies are wrappers around a variable in the other language.  Rather than simply reading the variable in JavaScript and rewriting it in terms of Python constructs, as is done for the basic types, the proxy holds on to the original JavaScript variable and calls methods on it “on demand”.  This means that any JavaScript variable, no matter how custom, is fully accessible from Python. Proxies work in the other direction, too.&lt;/p&gt;
&lt;p&gt;Duck typing is the principle that rather than asking a variable &lt;em&gt;“are you a duck?”&lt;/em&gt; you ask it &lt;em&gt;“do you walk like a duck?”&lt;/em&gt; and &lt;em&gt;“do you quack like a duck?”&lt;/em&gt; and infer from that that it’s probably a duck, or at least does duck-like things.  This allows Pyodide to defer the decision on how to convert the JavaScript &lt;code&gt;Object&lt;/code&gt;: it wraps it in a proxy and lets the Python code using it decide how to handle it. Of course, this doesn’t always work, the &lt;a href=&quot;https://www.illusionsindex.org/i/duck-rabbit&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;duck may actually be a rabbit&lt;/a&gt;. Thus, Pyodide also provides ways to &lt;a href=&quot;https://github.com/iodide-project/pyodide/blob/master/docs/api_reference.md#pyodideas_nested_listobj&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;explicitly handle these conversions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s this tight level of integration that allows a user to do their data processing in Python, and then send it to JavaScript for visualization. For example, in our &lt;a href=&quot;https://alpha.iodide.io/notebooks/1623/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hipster Band Finder demo&lt;/a&gt;, we show loading and analyzing a data set in Python’s Pandas, and then sending it to JavaScript’s &lt;a href=&quot;https://plotly.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Plotly&lt;/a&gt; for visualization.&lt;/p&gt;
&lt;h2&gt;Accessing Web APIs and the DOM&lt;/h2&gt;
&lt;p&gt;Proxies also turn out to be the key to accessing the Web APIs, or the set of functions the browser provides that make it do things.  For example, a large part of the Web API is on the &lt;code&gt;document&lt;/code&gt; object. You can get that from Python by doing:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;from js import document&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This imports the &lt;code&gt;document&lt;/code&gt; object in JavaScript over to the Python side as a proxy.  You can start calling methods on it from Python:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;document.getElementById(&quot;myElement&quot;)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All of this happens through proxies that look up what the &lt;code&gt;document&lt;/code&gt; object can do on-the-fly.  Pyodide doesn’t need to include a comprehensive list of all of the Web APIs the browser has.&lt;/p&gt;
&lt;p&gt;Of course, using the Web API directly doesn’t always feel like the most Pythonic or user-friendly way to do things.  It would be great to see the creation of a user-friendly Python wrapper for the Web API, much like how jQuery and other libraries have made the Web API easier to use from JavaScript.  &lt;a href=&quot;https://gitter.im/iodide-project/iodide&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Let us know&lt;/a&gt; if you’re interested in working on such a thing!&lt;/p&gt;
&lt;h2&gt;Multidimensional Arrays&lt;/h2&gt;
&lt;p&gt;There are important data types that are specific to data science, and Pyodide has special support for these as well.  Multidimensional arrays are collections of (usually numeric) values, all of the same type. They tend to be quite large, and knowing that every element is the same type has real performance advantages over Python’s &lt;code&gt;list&lt;/code&gt;s or JavaScript’s &lt;code&gt;Array&lt;/code&gt;s that can hold elements of any type.&lt;/p&gt;
&lt;p&gt;In Python, &lt;a href=&quot;https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NumPy arrays&lt;/a&gt; are the most common implementation of multidimensional arrays. JavaScript has &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TypedArrays&lt;/a&gt;, which contain only a single numeric type, but they are single dimensional, so the multidimensional indexing needs to be built on top.&lt;/p&gt;
&lt;p&gt;Since in practice these arrays can get quite large, we don’t want to copy them between language runtimes.  Not only would that take a long time, but having two copies in memory simultaneously would tax the limited memory the browser has available.&lt;/p&gt;
&lt;p&gt;Fortunately, we can share this data without copying.  Multidimensional arrays are usually implemented with a small amount of metadata that describes the type of the values, the shape of the array and the memory layout. The data itself is referenced from that metadata by a pointer to another place in memory. It’s an advantage that this memory lives in a special area called the “WebAssembly heap,” which is accessible from both JavaScript and Python.  We can simply copy the metadata (which is quite small) back and forth between the languages, keeping the pointer to the data referring to the WebAssembly heap.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/image2.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/image2.png&quot; alt=&quot;Sharing memory for arrays between Python and Javascript&quot; width=&quot;864&quot; height=&quot;480&quot; class=&quot;alignnone size-full wp-image-33389&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/04/image2.png 864w, https://hacks.mozilla.org/files/2019/04/image2-250x139.png 250w, https://hacks.mozilla.org/files/2019/04/image2-768x427.png 768w, https://hacks.mozilla.org/files/2019/04/image2-500x278.png 500w&quot; sizes=&quot;(max-width: 864px) 100vw, 864px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This idea is currently implemented for single-dimensional arrays, with a suboptimal workaround for higher-dimensional arrays.  We need improvements to the JavaScript side to have a useful object to work with there. To date there is no one obvious choice for JavaScript multidimensional arrays. Promising projects such as &lt;a href=&quot;https://arrow.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Apache Arrow&lt;/a&gt; and &lt;a href=&quot;https://xnd.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;xnd’s ndarray&lt;/a&gt; are working exactly in this problem space, and aim to make the passing of in-memory structured data between language runtimes easier.  Investigations are ongoing to build off of these projects to make this sort of data conversion more powerful.&lt;/p&gt;
&lt;h2&gt;Real-time interactive visualization&lt;/h2&gt;
&lt;p&gt;One of the advantages of doing the data science computation in the browser rather than in a remote kernel, as &lt;a href=&quot;https://jupyter.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Jupyter&lt;/a&gt; does, is that interactive visualizations don’t have to communicate over a network to reprocess and redisplay their data.  This greatly reduces the latency — the round trip time it takes from the time the user moves their mouse to the time an updated plot is displayed to the screen.&lt;/p&gt;
&lt;p&gt;Making that work requires all of the technical pieces described above to function together in tandem.  Let’s look at this &lt;a href=&quot;https://alpha.iodide.io/notebooks/1658/&quot;&gt;interactive example that shows how log-normal distributions work&lt;/a&gt; using matplotlib. First, the random data is generated in Python using Numpy. Next, Matplotlib takes that data, and draws it using its built-in software renderer. It sends the pixels back to the JavaScript side using Pyodide’s support for zero-copy array sharing, where they are finally rendered into an HTML canvas.  The browser then handles getting those pixels to the screen. Mouse and keyboard events used to support interactivity are handled by callbacks that call from the web browser back into Python.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/04/matplotlib-interacting-with-plots.gif&quot; alt=&quot;Interacting with distributions in matplotlib&quot; width=&quot;900&quot; height=&quot;700&quot; class=&quot;alignnone size-full wp-image-33398&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;Packaging&lt;/h2&gt;
&lt;p&gt;The Python scientific stack is not a monolith—it’s actually a collection of loosely-affiliated packages that work together to create a productive environment.  Among the most popular are &lt;a href=&quot;http://www.numpy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;NumPy&lt;/a&gt; (for numerical arrays and basic computation), &lt;a href=&quot;https://www.scipy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Scipy&lt;/a&gt; (for more sophisticated general-purpose computation, such as linear algebra), &lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Matplotlib&lt;/a&gt; (for visualization) and &lt;a href=&quot;https://pandas.pydata.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Pandas&lt;/a&gt; (for tabular data or “data frames”).  You can see the full and constantly updated list of the packages that Pyodide builds for the browser &lt;a href=&quot;https://github.com/iodide-project/pyodide/tree/master/packages&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some of these packages were quite straightforward to bring into Pyodide. Generally, anything written in pure Python without any extensions in compiled languages is pretty easy. In the moderately difficult category are projects like Matplotlib, which required special code to display plots in an HTML canvas. On the extremely difficult end of the spectrum, Scipy has been and remains a considerable challenge.  &lt;/p&gt;
&lt;p&gt;Roman Yurchak worked on making the large amount of legacy Fortran in Scipy compile to WebAssembly. Kirill Smelkov improved emscripten so shared objects can be reused by other shared objects, bringing Scipy to a more manageable size. (The work of these outside contributors was supported by &lt;a href=&quot;http://www.nexedi.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Nexedi&lt;/a&gt;).  If you’re struggling porting a package to Pyodide, please reach out to us &lt;a href=&quot;https://github.com/iodide-project/pyodide/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Github&lt;/a&gt;: there’s a good chance we may have run into your problem before.&lt;/p&gt;
&lt;p&gt;Since we can’t predict which of these packages the user will ultimately need to do their work, they are downloaded to the browser individually, on demand.  For example, when you import NumPy:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;import numpy as np&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Pyodide fetches the NumPy library (and all of its dependencies) and loads them into the browser at that time.  Again, these files only need to be downloaded once, and are stored in the browser’s cache from then on.&lt;/p&gt;
&lt;p&gt;Adding new packages to Pyodide is currently a semi-manual process that involves adding files to the Pyodide build. We’d prefer, long term, to take a distributed approach to this so anyone could contribute packages to the ecosystem without going through a single project.  The best-in-class example of this is &lt;a href=&quot;https://conda-forge.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;conda-forge&lt;/a&gt;. It would be great to extend their tools to support WebAssembly as a platform target, rather than redoing a large amount of effort.&lt;/p&gt;
&lt;p&gt;Additionally, Pyodide will &lt;a href=&quot;https://github.com/iodide-project/pyodide/pull/147&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;soon have support&lt;/a&gt; to load packages directly from &lt;a href=&quot;https://pypi.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;PyPI&lt;/a&gt; (the main community package repository for Python), if that package is pure Python and distributes its package in the &lt;a href=&quot;https://pythonwheels.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;wheel format&lt;/a&gt;.  This gives Pyodide access to around 59,000 packages, as of today.&lt;/p&gt;
&lt;h2&gt;Beyond Python&lt;/h2&gt;
&lt;p&gt;The relative early success of Pyodide has already inspired developers from other language communities, including &lt;a href=&quot;https://github.com/keno/julia-wasm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Julia&lt;/a&gt;, R, &lt;a href=&quot;https://github.com/louisabraham/domical&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;OCaml&lt;/a&gt;, &lt;a href=&quot;https://codepen.io/ds604/pen/d9791eed4e1ce19e11fb0f3c71000d72&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Lua&lt;/a&gt;, to make their &lt;a href=&quot;https://github.com/iodide-project/iodide/blob/master/docs/language_plugins.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;language runtimes&lt;/a&gt; work well in the browser and integrate with web-first tools like Iodide.  We’ve defined a set of levels to encourage implementors to create tighter integrations with the JavaScript runtime:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Level 1:&lt;/em&gt; Just string output, so it’s useful as a basic console REPL (read-eval-print-loop).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Level 2:&lt;/em&gt; Converts basic data types (numbers, strings, arrays and objects) to and from JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Level 3:&lt;/em&gt; Sharing of class instances (objects with methods) between the guest language and JavaScript.  This allows for Web API access.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Level 4:&lt;/em&gt; Sharing of data science related types  (&lt;em&gt;n&lt;/em&gt;-dimensional arrays and data frames) between the guest language and JavaScript.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We definitely want to encourage this brave new world, and are excited about the possibilities of having even more languages interoperating together.  Let us know what you’re working on!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you haven’t already tried Pyodide in action, go &lt;a href=&quot;https://alpha.iodide.io/notebooks/300/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;try it now!&lt;/a&gt; (50MB download)&lt;/p&gt;
&lt;p&gt;It’s been really gratifying to see all of the cool things that have been created with Pyodide in the short time since its public launch.  However, there’s still lots to do to turn this experimental proof-of-concept into a professional tool for everyday data science work. If you’re interested in helping us build that future, come find us on &lt;a href=&quot;https://gitter.im/iodide-project/iodide&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;gitter&lt;/a&gt;, &lt;a href=&quot;https://github.com/iodide-project/pyodide&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github&lt;/a&gt; and &lt;a href=&quot;https://groups.google.com/forum/#!forum/iodide-dev&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;our mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Huge thanks to &lt;a href=&quot;https://github.com/bcolloran&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Brendan Colloran&lt;/a&gt;, &lt;a href=&quot;http://github.com/hamilton&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Hamilton Ulmer&lt;/a&gt; and &lt;a href=&quot;https://wrla.ch&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;William Lachance&lt;/a&gt;, for their great work on Iodide and for reviewing this article, and &lt;a href=&quot;http://github.com/tcaswell&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Thomas Caswell&lt;/a&gt; for additional review.&lt;/em&gt;&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;8.994708994709&quot;&gt;
&lt;p&gt;Michael Droettboom is a Data Engineer at Mozilla, using data to improve the web while respecting the privacy of its users. He has built software tools to support many other disciplines, including the computational humanities, astronomy and medicine. He is a former lead developer of matplotlib and the original author of airspeed velocity.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/mdroettboommozilla-com/&quot;&gt;More articles by Michael Droettboom…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Tue, 16 Apr 2019 21:57:55 +0000</pubDate>
<dc:creator>barryvan</dc:creator>
<og:url>https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser</og:url>
<og:title>Pyodide: Bringing the scientific Python stack to the browser – Mozilla Hacks - the Web developer blog</og:title>
<og:description>Pyodide is an experimental project from Mozilla to create a full Python data science stack that runs entirely in the browser. We think it’s worthwhile to work on moving the ...</og:description>
<og:image>https://hacks.mozilla.org/files/2019/04/pyodide-social.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/</dc:identifier>
</item>
<item>
<title>Land of Lisp (2010)</title>
<link>http://landoflisp.com/</link>
<guid isPermaLink="true" >http://landoflisp.com/</guid>
<description>So, you still don't think it's worth learning Lisp?&lt;p&gt;Well, you'll have to make your own decisions on how to make the best use of your valuable free time. However, Lisp really does contain some great programming ideas that you may never encounter anywhere else.&lt;/p&gt;&lt;p&gt;In the interactive comic below (adapted from the epilogue of the book) I've given my best shot at explaining, precisely, what the most interesting features in Lisp are that you'd be missing out on... So why don't you give it a quick read?&lt;/p&gt;&lt;p&gt;&lt;em&gt;Oh, and be sure to click on all the throbbing text!&lt;/em&gt;&lt;/p&gt;</description>
<pubDate>Tue, 16 Apr 2019 21:02:48 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://landoflisp.com/</dc:identifier>
</item>
<item>
<title>Qualcomm and Apple agree to drop all litigation</title>
<link>https://www.apple.com/newsroom/2019/04/qualcomm-and-apple-agree-to-drop-all-litigation/</link>
<guid isPermaLink="true" >https://www.apple.com/newsroom/2019/04/qualcomm-and-apple-agree-to-drop-all-litigation/</guid>
<description>Qualcomm invents breakthrough technologies that transform how the world connects, computes and communicates. When we connected the phone to the Internet, the mobile revolution was born. Today, our inventions are the foundation for life-changing products, experiences, and industries. As we lead the world to 5G, we envision this next big change in cellular technology spurring a new era of intelligent, connected devices and enabling new opportunities in connected cars, remote delivery of health care services, and the IoT — including smart cities, smart homes, and wearables. Qualcomm Incorporated includes our licensing business, QTL, and the vast majority of our patent portfolio. Qualcomm Technologies, Inc., a subsidiary of Qualcomm Incorporated, operates, along with its subsidiaries, all of our engineering, research and development functions, and all of our products and services businesses, including, the QCT semiconductor business. For more information, visit Qualcomm’s &lt;a href=&quot;https://www.qualcomm.com/&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt;, &lt;a href=&quot;https://www.qualcomm.com/news/onq&quot; target=&quot;_blank&quot;&gt;OnQ blog&lt;/a&gt;, &lt;a href=&quot;http://www.twitter.com/qualcomm&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;http://www.facebook.com/qualcomm&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt; pages.</description>
<pubDate>Tue, 16 Apr 2019 19:23:12 +0000</pubDate>
<dc:creator>saeedjabbar</dc:creator>
<og:type>article</og:type>
<og:title>Qualcomm and Apple agree to drop all litigation</og:title>
<og:description>The companies have reached a global patent license agreement and a chipset supply agreement.</og:description>
<og:url>https://www.apple.com/newsroom/2019/04/qualcomm-and-apple-agree-to-drop-all-litigation/</og:url>
<og:image>https://www.apple.com/newsroom/images/defaultog.png.large.png?201904161906</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.apple.com/newsroom/2019/04/qualcomm-and-apple-agree-to-drop-all-litigation/</dc:identifier>
</item>
</channel>
</rss>