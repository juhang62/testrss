<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Show HN: Khan-dl – Khan Academy Course Downloader</title>
<link>https://github.com/rand-net/khan-dl</link>
<guid isPermaLink="true" >https://github.com/rand-net/khan-dl</guid>
<description>&lt;p&gt;A python script to download courses from &lt;a href=&quot;https://www.khanacademy.org&quot; rel=&quot;nofollow&quot;&gt;Khan Academy&lt;/a&gt; using &lt;a href=&quot;https://github.com/ytdl-org/youtube-dl&quot;&gt;youtube-dl&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/beautifulsoup4/&quot; rel=&quot;nofollow&quot;&gt;beautifulsoup4&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;git clone https://github.com/rand-net/khan-dl
pip install -r requirements.txt
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;$ python khan-dl.py -h

usage: khan-dl.py [-h] [-i] [-c COURSE_URL]

optional arguments:
  -h, --help            show this help message and exit
  -i, --interactive     Enter Interactive Course Selection Mode
  -c COURSE_URL, --course_url COURSE_URL
                        Enter Course URL
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;You can download courses interactively on a prompt, which will list all course domains and their respective courses available with tab completion.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$ python khan-dl.py -i

Course Domain: Math
Selected Course Domain: Math

Downloading Course List...

Course: Linear algebra

Selected Course Domain: Linear algebra

Generating Path Slugs.....

Downloading Videos....

&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;Download a specific course.&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code&gt;$ python khan-dl.py -c https://www.khanacademy.org/science/ap-physics-1

&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sun, 14 Feb 2021 18:44:59 +0000</pubDate>
<dc:creator>rand_net</dc:creator>
<og:image>https://avatars.githubusercontent.com/u/34341872?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>rand-net/khan-dl</og:title>
<og:url>https://github.com/rand-net/khan-dl</og:url>
<og:description>Python script for downloading khanacademy.org videos and naming them. - rand-net/khan-dl</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/rand-net/khan-dl</dc:identifier>
</item>
<item>
<title>DeepMind achieves SOTA image recognition with 8.7x faster training</title>
<link>https://arxiv.org/abs/2102.06171</link>
<guid isPermaLink="true" >https://arxiv.org/abs/2102.06171</guid>
<description>&lt;p&gt;arXivLabs is a framework that allows collaborators to develop and share new arXiv features directly on our website.&lt;/p&gt;
&lt;p&gt;Both individuals and organizations that work with arXivLabs have embraced and accepted our values of openness, community, excellence, and user data privacy. arXiv is committed to these values and only works with partners that adhere to them.&lt;/p&gt;
&lt;p&gt;Have an idea for a project that will add value for arXiv's community? &lt;a href=&quot;https://labs.arxiv.org/&quot;&gt;&lt;strong&gt;Learn more about arXivLabs&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/about/people/developers&quot;&gt;&lt;strong&gt;how to get involved&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 14 Feb 2021 16:44:44 +0000</pubDate>
<dc:creator>highfrequency</dc:creator>
<og:title>High-Performance Large-Scale Image Recognition Without Normalization</og:title>
<og:url>https://arxiv.org/abs/2102.06171v1</og:url>
<og:description>Batch normalization is a key component of most image classification models, but it has many undesirable properties stemming from its dependence on the batch size and interactions between examples. Although recent work has succeeded in training deep ResNets without normalization layers, these models do not match the test accuracies of the best batch-normalized networks, and are often unstable for large learning rates or strong data augmentations. In this work, we develop an adaptive gradient clipping technique which overcomes these instabilities, and design a significantly improved class of Normalizer-Free ResNets. Our smaller models match the test accuracy of an EfficientNet-B7 on ImageNet while being up to 8.7x faster to train, and our largest models attain a new state-of-the-art top-1 accuracy of 86.5%. In addition, Normalizer-Free models attain significantly better performance than their batch-normalized counterparts when finetuning on ImageNet after large-scale pre-training on a dataset of 300 million labeled images, with our best models obtaining an accuracy of 89.2%. Our code is available at https://github.com/deepmind/ deepmind-research/tree/master/nfnets</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arxiv.org/abs/2102.06171</dc:identifier>
</item>
<item>
<title>Julia 1.6: what has changed since Julia 1.0?</title>
<link>https://www.oxinabox.net/2021/02/13/Julia-1.6-what-has-changed-since-1.0.html</link>
<guid isPermaLink="true" >https://www.oxinabox.net/2021/02/13/Julia-1.6-what-has-changed-since-1.0.html</guid>
<description>&lt;p&gt;Julia 1.0 came out well over 2 years ago. Since then a lot has changed and a lot hasn’t. Julia 1.0 was a commitment to no breaking changes, but that is not to say no new features have been added to the language.&lt;/p&gt;
&lt;nav id=&quot;toc&quot;/&gt;&lt;p&gt;Julia 1.6 is a huge release and it is coming out relatively soon. RC-1 was &lt;a href=&quot;https://discourse.julialang.org/t/julia-v1-6-0-rc1-is-now-available/54775&quot;&gt;released recently&lt;/a&gt;. I suspect we have at least a few more weeks before the final release. The Julia Core team take a huge amount of care in not breaking any packages. So while that is all being checked and corner cases fixed, I think we have some time. Thus this post, reflecting not just on 1.6, but on everything that has happened since the 1.0 release.&lt;/p&gt;
&lt;p&gt;Julia 1.6 will be the first “feature” release since 1.0. Prior to 1.0, all releases were feature releases; they came out when they were ready. Since then, all releases (except 1.6) have been timed releases. The release candidate is cut from the main branch every 3 months; and they are released after an &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/35846&quot;&gt;extensive round of additional checking&lt;/a&gt;, which often takes weeks to months. Julia 1.6 was soft-slated to be the new long-term-support (LTS) version that would have bug-fixes backported to it for the next few years. The current LTS is Julia 1.0, which has now had 5 patch releases made. Since it was going to be supported for a long-time, people wanted to make sure everything good got in; thus it was a feature release. The core developers have demurred on if 1.6 will actually be selected to be the new LTS (even if it is selected, it won’t ascend to being the LTS til it stops being the current Stable).&lt;/p&gt;
&lt;p&gt;My impression now is that they feel like it has too many cool new things; and that a few things didn’t quite make it in even with the extended release cycle. So it’s looking likely to me that 1.7 will actually be the LTS; but that it might also be a feature release – possibly this time a much shorter release period than usual. In practice I think for a lot of package maintainers 1.6 will be a LTS, in that that is the oldest version they will make sure to continue to support. There have been too many cool new things (as this post will detail) to stay back to only 1.0 features. Already a lot of packages have dropped support for Julia versions older than 1.3.&lt;/p&gt;
&lt;p&gt;This post is kind of a follow-up to my &lt;a href=&quot;https://www.oxinabox.net//2018/06/01/Julia-Favourite-New-Things.html&quot;&gt;Julia 1.0 release run-down&lt;/a&gt;. But it’s going to be even longer, as it is covering the last 5 releases since then and I am not skipping the major new features. I am writing this not to break down release by release, but to highlight features that, had you only used Julia 1.0, you wouldn’t have seen. Full details can be found in the &lt;a href=&quot;https://github.com/JuliaLang/julia/blob/backports-release-1.6/NEWS.md&quot;&gt;NEWS.md&lt;/a&gt;, and &lt;a href=&quot;https://github.com/JuliaLang/julia/blob/backports-release-1.6/HISTORY.md&quot;&gt;HISTORY.md&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;front-end-changes&quot;&gt;Front-end changes&lt;/h2&gt;
&lt;h3 id=&quot;soft-scope-in-the-repl&quot;&gt;Soft-scope in the REPL&lt;/h3&gt;
&lt;p&gt;Julia 1.0 removed the notion of soft-scope from the language. I was very blasé about the change to for-loop bindings in my &lt;a href=&quot;https://www.oxinabox.net/2018/06/01/Julia-Favourite-New-Things.html#for-loop-variable-binding-changes&quot;&gt;1.0 release post&lt;/a&gt;. In fact, I didn’t even mention this particular change. It was &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/19324&quot;&gt;#19324&lt;/a&gt; for reference.&lt;/p&gt;
&lt;p&gt;This was undone in in Julia 1.5 with &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/33864&quot;&gt;#33864&lt;/a&gt; for the REPL only. Now in the REPL, assigning to a global variable within a for-loop actually assigns that variable, rather than shadowing it with a new variable in that scope. The same behavior outside the REPL now gives a warning.&lt;/p&gt;
&lt;p&gt;Personally, this change never affected me because I never write for-loops that assign variables at global scope. Indeed basically all code I write is inside functions. But I do see how this causes problems for some interactive workflows, e.g. when demonstrating something. See the &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/28789&quot;&gt;main GitHub issue&lt;/a&gt; and the longest &lt;a href=&quot;https://discourse.julialang.org/t/another-possible-solution-to-the-global-scope-debacle/15894&quot;&gt;Discourse thread&lt;/a&gt;, though there were many others. It took over a year of discussion to work out the solution, particularly because many of the more obvious solutions would be breaking in significant ways.&lt;/p&gt;
&lt;h3 id=&quot;deprecations-are-muted-by-default&quot;&gt;Deprecations are muted by default&lt;/h3&gt;
&lt;p&gt;Julia 1.5+ doesn’t display deprecation warnings, unless you run julia with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--depwarn=yes&lt;/code&gt; flag. This was me in &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/35362&quot;&gt;this PR&lt;/a&gt;. It’s not something I am super happy about, although I think it makes sense. Using deprecated methods is actually fine, as long as your dependencies follow SemVer, and you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt; (i.e. default) bounding in your Project.toml’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[compat]&lt;/code&gt;, which everyone does, because it’s enforced by the auto-merge script in the General registry. Often it is even necessary if you want to keep compatibility for a while.&lt;/p&gt;
&lt;p&gt;Solving deprecations is a thing you should actively choose to do rather than casually when trying to do something else. In particular, when updating to support a new major release of one of your dependencies, you should follow a process. Something like:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Check the release notes.&lt;/li&gt;
&lt;li&gt;Relax compat bounds&lt;/li&gt;
&lt;li&gt;Run your integration tests, if everything passes you are done.&lt;/li&gt;
&lt;li&gt;If tests failed, revert the change to compat bounds, then rerun your integration tests paying attention to deprecation warnings.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Updating your dependencies should be an active choice. Potentially one that is automated, but not one that you do while adding another feature (if you can help it).&lt;/p&gt;
&lt;p&gt;The core of the reason we disabled them is because they were actually breaking things. Irrelevant deprecation warning spam from dependencies of dependencies was causing JuMP and LightGraphs to become too slow to be used. Further, since they were from dependencies of dependencies, the maintainers of JuMP and LightGraphs (let alone the end users) couldn’t even fix them.&lt;/p&gt;
&lt;p&gt;Deprecation warnings are still turned on by default in tests, which makes sense since the tests (unlike normal use) are being run by maintainers of the package itself, not its users. This however still doesn’t make a huge amount of sense to me, since spam from deprecation warnings floods out the actual errors that you want to see during testing. For this reason, &lt;a href=&quot;https://invenia.ca&quot;&gt;Invenia&lt;/a&gt; (my employer) has disabled deprecation warnings in the CI tests for all our closed source packages, and added a new test job that just does deprecation checking (set to error on deprecation and with the job allowed to fail, just so we are informed).&lt;/p&gt;
&lt;p&gt;Hopefully one day we can improve the tooling around deprecation warnings. An ideal behavior would be to only show deprecation warnings if directly caused by a function call made from within the package module of your current active environment. I kind of know what we need to do to the logger to make that possible, but it is not yet something I have had time to do.&lt;/p&gt;
&lt;h3 id=&quot;code-highlighting-for-code_llvm-and-code_native&quot;&gt;Code highlighting for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code_llvm&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code_native&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This was added in &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/36634&quot;&gt;#36634&lt;/a&gt;. This functionality was first implemented in &lt;a href=&quot;https://github.com/kimikage/ColoredLLCodes.jl&quot;&gt;ColoredLLCodes.jl&lt;/a&gt;, where it worked by monkey-patching the InteractiveUtils stdlib. That package does still work on Julia 1.0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.0:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.oxinabox.net/posts_assets/Julia-1.0-1.6-changes/julia-1.0-code-llvm.png&quot; alt=&quot;Julia 1.0 code_llvm&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.6:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.oxinabox.net/posts_assets/Julia-1.0-1.6-changes/julia-1.6-code-llvm.png&quot; alt=&quot;Julia 1.6 code_llvm&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The REPL itself still doesn’t have syntax highlighting for Julia code though. The &lt;a href=&quot;https://github.com/KristofferC/OhMyREPL.jl&quot;&gt;OhMyRepl&lt;/a&gt; package does provide that, and works for all versions of Julia. It is a lot more than a series of regexes though, so I don’t think we are going to see it built into Julia too soon. Probably one day, though, as its big dependencies are also required if the parser wants to move to be written in Julia (though I also don’t expect that any time soon).&lt;/p&gt;
&lt;h3 id=&quot;clearer-stacktraces&quot;&gt;Clearer Stacktraces&lt;/h3&gt;
&lt;p&gt;Just like colored &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code_llvm&lt;/code&gt;, colored stack-traces also originated in a package that was doing some nasty monkey-patching: &lt;a href=&quot;https://github.com/jkrumbiegel/ClearStacktrace.jl&quot;&gt;ClearStacktrace.jl&lt;/a&gt;. This was added into Base itself in &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/36134&quot;&gt;#36134&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.0:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.oxinabox.net/posts_assets/Julia-1.0-1.6-changes/julia-1.0-stacktrace.png&quot; alt=&quot;Julia 1.0 stacktrace&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.6:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.oxinabox.net/posts_assets/Julia-1.0-1.6-changes/julia-1.6-stacktrace.png&quot; alt=&quot;Julia 1.6 stacktrace&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The first thing you probably notice is the colored package names, to make it more clear where the error is coming from. You also should notice the dimming of type parameters to make complicated types easier to read. Also the addition of argument names, and showing functions with keyword arguments as they are written, rather than as a weird &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#DataFrame#654&lt;/code&gt; internal function. The whole thing just looks more modern and polished.&lt;/p&gt;
&lt;h3 id=&quot;time-traveling-debugger&quot;&gt;Time Traveling Debugger&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://julialang.org/blog/2020/05/rr/&quot;&gt;Julia 1.5 added built-in support&lt;/a&gt; for &lt;a href=&quot;https://rr-project.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rr&lt;/code&gt;&lt;/a&gt; (Linux only for now). This is not useful so much for debugging Julia code, but for debugging Julia itself. If you get into one of the very rare situations where the language is doing something truly nonsensical, you can send a bug report recorded via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rr&lt;/code&gt; and someone can debug &lt;em&gt;exactly&lt;/em&gt; what is happening - even to the extent of &lt;a href=&quot;https://julialang.org/blog/2020/09/rr-memory-magic/&quot;&gt;diagnosing faulty RAM&lt;/a&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rr&lt;/code&gt; is an impressively cool piece of tech. It records execution of a program, intercepting places (namely syscalls) that could be nondeterministic and storing the result. It can then replay the recording (even on another machine), and see exactly what happened. Allowing on to go into great detail on the state, and step backwards and forwards through time. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rr&lt;/code&gt; integration is really nice and easy to use. On a project I was running, I ended up getting a member of our architecture and operations team run it to submit a support request and they had no real troubles (And they are by no means a Julia pro, they write mostly Cloudformation).&lt;/p&gt;
&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;
&lt;h3 id=&quot;import-as&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import as&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote readability=&quot;7.7402597402597&quot;&gt;
&lt;p&gt;The syntax import A as B (plus import A: x as y, import A.x as y, and using A: x as y) can now be used to rename imported modules and identifiers (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/1255&quot;&gt;#1255&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will be familiar to Python folks who love to write things like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import numpy as np&lt;/code&gt;. I hope we never see it used that ubiquitously in julia. I am quite happy with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using Foo&lt;/code&gt; which imports into scope everything the author of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Foo&lt;/code&gt; exported. Python people find that super weird and scary; but it’s fine. Note that in Julia, many (most?) things you use don’t belong to the scope of the module that defined them anyways; they are overloaded functions e.g. from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base&lt;/code&gt;. So what you import doesn’t matter as much as you might think. I recently learned that Haskell is like Julia with a default of importing all exports. It has been fine for julia, and fine for Haskell for ages, though in neither is it required.&lt;/p&gt;
&lt;p&gt;The real value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import FooBar as fb&lt;/code&gt; is not to have a short abbreviation so you can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fb.quux&lt;/code&gt;. That was already possible via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const fb = FooBar&lt;/code&gt;. It is to handle cases where the package name itself conflicts with an identifier. For example (as has often occurred) if one uses a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipe&lt;/code&gt; in the REPL, and then later wants to load &lt;a href=&quot;https://github.com/oxinabox/Pipe.jl/&quot;&gt;Pipe.jl&lt;/a&gt; via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import Pipe&lt;/code&gt; then one gets a name clash before it can be even be loaded. Now one can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import Pipe as PipingPipe&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;namedtuplekeyword-arguments-automatic-naming&quot;&gt;NamedTuple/keyword arguments automatic naming&lt;/h3&gt;
&lt;p&gt;This feature felt weird when I first read about it, but it has quickly grown on me. How often do you write some code that does some processing and calls some other method passing on some of its keyword arguments? For example:&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Primary method all others redirect to this&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Method for if x is given as components&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This new feature allows one to avoid writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(...; a=a, b=b, c=c)&lt;/code&gt;, and instead write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(...; a, b, c)&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt; are the name of local variables that align with the name of the keyword arguments.&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Method for if x is given as components&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=+&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This does come with the requirement to separate keyword arguments from positional arguments by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt;, but I have always done this, and the two most popular style guides for Julia both require it (&lt;a href=&quot;https://github.com/invenia/BlueStyle#keyword-arguments&quot;&gt;BlueStyle&lt;/a&gt;, &lt;a href=&quot;https://github.com/jrevels/YASGuide/tree/bb636744bb117a6e1f115789a1e0f5034b7360ae#other-syntax-guidelines&quot;&gt;YASGuide&lt;/a&gt;). It feels like we are fully leveraging the distinction of keyword from positional arguments by allowing this. Whereas the previous motivation for this distinction (vs e.g. C# and Python that allow any positional argument to be passed by name), was to make the name of positional arguments not part of the public API, thus avoiding changing it being a breaking change. This new feature feels more … featureful.&lt;/p&gt;
&lt;p&gt;The same syntax can be used to create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NamedTuple&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fries&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;burger&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;drink&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;(;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fries&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;burger&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;drink&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is particularly cool for constructing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NamedTuple&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector&lt;/code&gt;s, which is a valid &lt;a href=&quot;https://tables.juliadata.org/stable/#Tables.columntable&quot;&gt;Tables.jl Table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is interesting to note that for the logging macros introduced in Julia 1.0, this is how they have always worked. E.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@info &quot;message&quot; foo bar&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@info &quot;message&quot; foo=foo bar=bar&lt;/code&gt; display the same, which has always felt natural.&lt;/p&gt;
&lt;h3 id=&quot;lowering-of-&quot;&gt;Lowering of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In Julia 1.0 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'&lt;/code&gt; was lowered directly into a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base.adjoint&lt;/code&gt;. This meant it was impossible to redefine what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'&lt;/code&gt; meant in your current module. Now it lowers to a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&quot;'&quot;&lt;/code&gt;, which is something you can overload. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base&lt;/code&gt; it is overloaded to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base.adjoint&lt;/code&gt; so nothing has changed. People often think it is cool to overload this in automatic differentiation packages so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f'(x)&lt;/code&gt; gives you the derivative of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f(x)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'&lt;/code&gt; can now have Unicode suffixes added to it, to define a new suffix operator. For example, the one in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base&lt;/code&gt; which makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A'ᵀ&lt;/code&gt; give &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transpose(A)&lt;/code&gt; (rather than the adjoint/hermitian transpose which is returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A'&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;pkg-stdlib-and-the-general-registry&quot;&gt;Pkg stdlib and the General Registry&lt;/h2&gt;
&lt;p&gt;Some of the biggest changes have been in maturing out Pkg3, and its surroundings. Writing this section is a bit hard as there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NEWS.md&lt;/code&gt; nor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HISTORY.md&lt;/code&gt; for the Pkg stdlib, and the General registry is more policy than software.&lt;/p&gt;
&lt;h3 id=&quot;resolver-willing-to-downgrade-packages-to-install-new-ones-tiered-resolution&quot;&gt;Resolver willing to downgrade packages to install new ones (Tiered Resolution)&lt;/h3&gt;
&lt;p&gt;Until the &lt;a href=&quot;https://github.com/JuliaLang/Pkg.jl/pull/1330&quot;&gt;tiered resolver&lt;/a&gt; was added, Julia would not change the version of any currently installed package in order to install a new one. For example, consider the following set of packages with different versions and compatibilities:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Foo.jl&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bar.jl&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;v1 compatible with Foo v1&lt;/li&gt;
&lt;li&gt;v2 compatible with Foo v2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qux.jl&lt;/strong&gt;
&lt;ul&gt;&lt;li&gt;v1: compatible only with Foo v1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;add Foo Bar Qux&quot;&lt;/code&gt; you would end up with &lt;strong&gt;Foo&lt;/strong&gt; v1, &lt;strong&gt;Bar&lt;/strong&gt; v1, and &lt;strong&gt;Qux&lt;/strong&gt; v1. But if you first did: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;add Foo Bar&quot;&lt;/code&gt; (which would install &lt;strong&gt;Foo&lt;/strong&gt; v2, and &lt;strong&gt;Bar&lt;/strong&gt; v2), and then did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;add Qux&quot;&lt;/code&gt;, then on Julia 1.0 you would get an error, as it would refuse to downgrade &lt;strong&gt;Foo&lt;/strong&gt; and &lt;strong&gt;Bar&lt;/strong&gt; to v1, as is required to allow &lt;strong&gt;Qux&lt;/strong&gt; to be installed. This meant that the package manager is effectively stateful, which turns out to be really counterintuitive. The way to resolve this in practice was to delete the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manifest.toml&lt;/code&gt;, which is where the state is stored, and do it again as a single action. This was a significant problem for &lt;a href=&quot;https://github.com/JuliaLang/Pkg.jl/issues/1352&quot;&gt;test-time dependencies&lt;/a&gt;, where if you had a test-time dependency with an indirect dependency shared with a main dependency of the package, but that was only compatible with an older version of the indirect dependency, you would be unable to run tests as resolving the test-time dependency would fail.&lt;/p&gt;
&lt;p&gt;With the new tiered resolver, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;add ...&quot;&lt;/code&gt; will try a number of increasingly relaxed strategies to try and install the new package while making minimal changes to the versions of the existing packages that are already installed. You can see the full description of the &lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/repl/#repl-add&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--preserve&lt;/code&gt; options in the Pkg docs&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;First it will try and avoid all changes.&lt;/li&gt;
&lt;li&gt;Then it will try and avoid changing the version of direct dependencies, but allow changes to the version of indirect dependencies.&lt;/li&gt;
&lt;li&gt;Then it will allow changes to direct dependencies, but will avoid changing the major (or minor pre-1.0) version, even if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[compat]&lt;/code&gt; says it is allowed to.&lt;/li&gt;
&lt;li&gt;Then it will allow changes to everything (as long as permitted by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[compat]&lt;/code&gt; section)&lt;/li&gt;
&lt;li&gt;Finally it will give up and error if it still can’t find a compatible set of packages that let it add the new one.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For a package with a fully filled in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[compat]&lt;/code&gt; section in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt;, it is always fine to allow changes to everything – which is what this will do if it has to. If one hasn’t setup the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[compat]&lt;/code&gt; section then this can be nice to minimize changes. (But also: please setup your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[compat]&lt;/code&gt; bounds, for your own sake.)&lt;/p&gt;
&lt;p&gt;The net result of this is far more intuitive behavior for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;add ...&quot;&lt;/code&gt;. If there is a compatible set of package versions then they will be found, regardless of whether new packages are added all at once or one at a time.&lt;/p&gt;
&lt;h3 id=&quot;precompilation&quot;&gt;Precompilation&lt;/h3&gt;
&lt;p&gt;Precompilation has been enhanced a lot. That is not the compilation that runs the first time a function is used in a session, but rather the stuff that runs the first time a package is loaded in an environment. Or that can be run manually via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;precompile&quot;&lt;/code&gt;, or in 1.6+ that is run automatically when you exit Pkg mode in the REPL.&lt;/p&gt;
&lt;p&gt;For a start, the precompilation cache no longer goes stale every time you swap environments. This was a massive pain in Julia 1.0, especially if you worked on more than one thing at a time. This was fixed in 1.3 to have a separate cache for each environment. It’s easy to forget this one, but it is actually one of the biggest usability enhancements since 1.0.&lt;/p&gt;
&lt;p&gt;More dramatic, is the parallelism of precompilation added in 1.6. Precompiling a package requires precompiling all its dependencies first (and so forth). This is now done in parallel, and (as mentioned) is automatically triggered when you complete Pkg operations, in contrast to happening serially the first time a package is loaded. No more waiting 5 minutes the first time you load a package with a lot of dependencies. Further, the spiffy animated output shows you what is precompiling at any given time, as well as a progress bar, which makes it feel (even) faster.&lt;/p&gt;
&lt;p&gt;You can see in the video below how much faster this makes precompilation. &lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;349&quot; src=&quot;https://www.youtube.com/embed/9SHuhIGfVDg?start=8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;h3 id=&quot;improved-conflict-messages&quot;&gt;Improved conflict messages&lt;/h3&gt;
&lt;p&gt;This is one of my own contributions. I am honestly really satisfied with it. Julia 1.0 conflict messages were a terrifying wall of text; the ones in 1.6 are (IMO) so much nicer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.0:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.oxinabox.net/posts_assets/Julia-1.0-1.6-changes/julia-1.0-conflict.png&quot; alt=&quot;Julia 1.0 conflict log&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.6:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.oxinabox.net/posts_assets/Julia-1.0-1.6-changes/julia-1.6-conflict.png&quot; alt=&quot;Julia 1.6 conflict log&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The two main changes are the use of colors, and compressing the version number ranges. No more giant red wall of numbers.&lt;/p&gt;
&lt;p&gt;Colors were added to make it easier to see which version numbers are referring to which package. There is a bit of a problem in that it isn’t easy to make sure the colors don’t get reused, as there are not many in the 16 color list (especially when you skip a few like black, white and error red). Due to how Pkg constructs its error messages, basically every package in the dependency graph gets some message prepared for it, but not displayed, so just assigning them a color in turn gets it to loop around which still results in colors being reused. There is a way to fix that, but it is a big change to add structured log messages that are colored only once when they are displayed. We decided after much debate to assign colors based on the hash of the package name and shortened UUID. This means things have consistent colors for any packages still listed, even after you have resolves some conflicts. I think this is going to be a subtle improvement on ease of use.&lt;/p&gt;
&lt;p&gt;As a cool hack, you can actually change the color list used. I originally wanted a much larger list of colors. To get that list you can run:&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;append!&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFLICT_COLORS&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;x&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;51&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;142&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;184&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;196&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;220&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The other change was consecutive lists of version numbers were compressed to continuous ranges. In 1.6, these ranges are split only if there is a version that actually exists between them that is not compatible. So normally we get just a single range, since compatibility is typically monotonic. In contrast, in 1.0, they were split if there was a potential version that could exist that is not compatible (even if that version doesn’t currently exist). This means they split every time the rightmost nonzero part of the version number was incremented. For something with a lot of pre-1.0 versions, that is a lot of numbers. I think the new method is much cleaner and easier to read.&lt;/p&gt;
&lt;h3 id=&quot;temporary-environments&quot;&gt;Temporary Environments&lt;/h3&gt;
&lt;p&gt;Julia 1.5 added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;activate --temp&quot;&lt;/code&gt; which will create and activate a temporary environment. This environment is deleted when Julia exits. This is incredibly handy for:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Reproducing an issue.&lt;/li&gt;
&lt;li&gt;Answering questions on Stack Overflow etc.&lt;/li&gt;
&lt;li&gt;Cross-checking the behavior of the last release of a package you currently have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;ed.&lt;/li&gt;
&lt;li&gt;Quickly trying out an idea.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Remember that with Pkg, installing a version of a package you have installed before is incredibly fast. Pkg doesn’t download it again, it basically just points to the existing version on disk. So using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;activate --temp&quot;&lt;/code&gt; to quickly try something out is indeed quick.&lt;/p&gt;
&lt;p&gt;A more hacky use of it is after loading (via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using&lt;/code&gt;) a package that you are working on, you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;activate --temp&quot;&lt;/code&gt; and install some of your test-time dependencies to reproduce a test failure without adding them to the main dependencies in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt;. Though there is a better way if you use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/Project.toml&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;test-dependencies-in-their-own-projecttoml&quot;&gt;Test Dependencies in their own Project.toml&lt;/h3&gt;
&lt;p&gt;In Julia 1.0 and 1.1, &lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/creating-packages/#Test-specific-dependencies-in-Julia-1.0-and-1.1&quot;&gt;test specific dependencies are listed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[extras]&lt;/code&gt; section&lt;/a&gt;, and under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[targets] test=[...]&lt;/code&gt;; with their compatibility listed in the main &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[compat]&lt;/code&gt;. It seemed like this might be extended for other things in the future, perhaps documentation. But it was found that for documentation, a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt; worked well (as long as you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;dev ..&quot;&lt;/code&gt; the parent package directory into its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manifest.toml&lt;/code&gt; so it uses the right version of the package it is documenting).&lt;/p&gt;
&lt;p&gt;The new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test/Project.toml&lt;/code&gt; extends that idea. One part of that extension is to remove the need to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev ..&lt;/code&gt;, the other part is to make available all the main dependencies. It actually works on a different mechanism than the docs. It relies on stacked environments, which is a feature Julia has had since 1.0 via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD_PATH&lt;/code&gt;, but that is rarely used.&lt;/p&gt;
&lt;p&gt;One advantage of this is that you can activate that Project.toml on top of your existing environment by adding the test directory to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOAD_PATH&lt;/code&gt;. I wrote some more details on exactly how to do that on &lt;a href=&quot;https://discourse.julialang.org/t/activating-test-dependencies/48121/7?u=oxinabox&quot;&gt;Discourse&lt;/a&gt;. It feels kind of hacky, because it is. At some point there might be a nicer user interface for stacked environments like this.&lt;/p&gt;
&lt;h3 id=&quot;binarybuilder-artifacts-yggdasil-and-jll-packages&quot;&gt;BinaryBuilder, Artifacts, Yggdasil and JLL packages&lt;/h3&gt;
&lt;p&gt;This story was beginning to be told around Julia 1.0 time, but it wasn’t really complete nor built into Pkg until Julia 1.3. You can read the documentation on &lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/artifacts/&quot;&gt;Artifacts&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaPackaging/BinaryBuilder.jl&quot;&gt;BinaryBuilder&lt;/a&gt;, and &lt;a href=&quot;https://github.com/JuliaPackaging/Yggdrasil&quot;&gt;Yggdrasil&lt;/a&gt; for full details. This is the story about how Julia works with binary dependencies. As of now, it works really well.&lt;/p&gt;
&lt;p&gt;Sometimes people misunderstand the claims about Julia solving the two language problem as saying everything should be rewritten in Julia. Which is far from the truth, ain’t nobody got time for that. Julia has always had great foreign function interfacing (FFI); like &lt;a href=&quot;https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccall&lt;/code&gt;&lt;/a&gt; (as well as &lt;a href=&quot;https://github.com/JuliaPy/PyCall.jl/&quot;&gt;PyCall&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaInterop/RCall.jl&quot;&gt;RCall&lt;/a&gt;, &lt;a href=&quot;https://github.com/JuliaInterop/JavaCall.jl&quot;&gt;JavaCall&lt;/a&gt;, and a bunch of others, for non-C-style binaries). While FFI makes it easy to call binaries, how about actually getting them onto your machine?&lt;/p&gt;
&lt;p&gt;Before Julia 1.0, the standard was to run arbitrary code in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deps/build.jl&lt;/code&gt; file, which often used &lt;a href=&quot;https://github.com/JuliaPackaging/BinDeps.jl/&quot;&gt;BinDeps.jl&lt;/a&gt; to download and compile things. Around 1.0, this changed to having the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deps/build.jl&lt;/code&gt; call &lt;a href=&quot;https://github.com/JuliaPackaging/BinaryProvider.jl/&quot;&gt;BinaryProvider.jl&lt;/a&gt; to download a compiled binary built with &lt;a href=&quot;https://github.com/JuliaPackaging/BinaryBuilder.jl&quot;&gt;BinaryBuilder.jl&lt;/a&gt;, and store that alongside the package code. In Julia 1.3+, the Artifacts system basically brought the BinaryProvider part into the package manager. Now the Pkg controls the downloads, stores them in a controlled location to avoid massive duplication, and allows for full compat control. No more running arbitrary code during installs.&lt;/p&gt;
&lt;p&gt;The integration of installing the binaries into Pkg for Julia 1.3 is a major reason why many packages have dropped Julia 1.0 support. While you can still use BinaryProvider.jl for the download, it is much cleaner and easier to just use Julia 1.3+ and have the Artifact system take care of it.&lt;/p&gt;
&lt;p&gt;I feel it is worth mentioning &lt;a href=&quot;https://binarybuilder.org/&quot;&gt;BinaryBuilder&lt;/a&gt; here. While it has existed since before 1.0, it’s really grown. It’s a super smooth cross-compilation environment, that can be used to build binaries for every platform Julia runs on. This is an amazing tool, built on &lt;a href=&quot;https://en.wikipedia.org/wiki/OS-level_virtualization&quot;&gt;containerization&lt;/a&gt;. It’s the kind of build tool one dreamed of having 10 years ago. It’s far more general than Julia, and I know people have at least experimented with using it with Nim. I hope more things start using it.&lt;/p&gt;
&lt;p&gt;A novel use of this infrastructure is &lt;a href=&quot;https://discourse.julialang.org/t/announcing-ygg/54687&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ygg&lt;/code&gt;&lt;/a&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ygg&lt;/code&gt; is effectively an installer for Yggdrasil hosted binaries that runs outside of julia. This pretty similar to a simple OS independent package manager (some-what like Conda or HomeBrew). This is really neat, not simply because it is making use of all the work that went into cross-compiling the universe, but because it’s actually really useful. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ygg&lt;/code&gt; installs everything to the normal julia artifact storage location, and doesn’t require any kind of admin privileges. This is huge for working on systems with restricted privileges, like university PCs. I used to use &lt;a href=&quot;https://github.com/fsquillace/junest&quot;&gt;junest&lt;/a&gt; for this, but it was a bit flaky because it used scary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proot&lt;/code&gt; hacks. When it broke, I often resorted to compiling things from source, so I could install them to my home directory. I have had to bootstrap a lot of things following &lt;a href=&quot;http://www.linuxfromscratch.org/blfs/&quot;&gt;Linux From Scratch&lt;/a&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ygg&lt;/code&gt; leverages the fact that the BinaryBuilder cross-compilation setup has already sorted out how to make portable binaries.&lt;/p&gt;
&lt;h3 id=&quot;full-transition-off-metadatajl-and-require-files-and-onto-the-general-registry&quot;&gt;Full Transition off METADATA.jl and REQUIRE files, and onto the General Registry&lt;/h3&gt;
&lt;p&gt;Even though Julia 1.0 had Pkg3 and was supposed to use registries, for a long time the old Pkg2 &lt;a href=&quot;https://github.com/JuliaLang/METADATA.jl&quot;&gt;METADATA.jl&lt;/a&gt; pseudo-registry was used as the canonical source of truth. Registering new releases was made against that, and then a script synchronized the &lt;a href=&quot;https://github.com/JuliaRegistries/General&quot;&gt;General&lt;/a&gt; registry to match it. This was to allow time for packages to change over to supporting Julia 1.0, while still also making releases that supported Julia 0.6. It wasn’t until about a year later that General registry became the one source of truth, and METADATA.jl was retired.&lt;/p&gt;
&lt;p&gt;This was kind of sucky, because a lot of the power of Pkg3 was blocked until then. In particular, since the registries compat was generated from the REQUIRE file, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUIRE&lt;/code&gt; files had a kind of &lt;a href=&quot;https://docs.julialang.org/en/v0.6/manual/packages/#Requirements-Specification-1&quot;&gt;gross requirement specification&lt;/a&gt;, everyone basically just lower-bounded things, or didn’t bound compat at all. Which made sense because with the single global environment that Pkg2 had, you basically needed the whole ecosystem to be compatible, so restricting was bad. But &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt; has the much better default &lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/compatibility/#Version-specifier-format-1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;^&lt;/code&gt;-bounds&lt;/a&gt; to accept only non-breaking changes by SemVer. And with per project environments, things don’t all have to be compatible – just things used in a particular project (rather than every project you might ever do).&lt;/p&gt;
&lt;h4 id=&quot;automatic-merging&quot;&gt;Automatic Merging&lt;/h4&gt;
&lt;p&gt;Initially after the transition, all registry PRs to make a new release needed manual review by one of the very small number of General registry maintainers.&lt;/p&gt;
&lt;p&gt;I am a big fan of &lt;a href=&quot;https://www.oxinabox.net/2019/09/28/Continuous-Delivery-For-Julia-Packages.html&quot;&gt;releasing after every non-breaking PR&lt;/a&gt;. Why would you not want those bug-fixes and new features released? It is especially rude to contributors who will make a fix or a feature, but then you don’t let them use it because you didn’t tag a release. Plus it makes tracking down bugs easier: if it occurs on a precise version, you know the PR that caused it. But with manual merging it feels bad to tag 5 releases in a day. Now we have automatic merging, so it is fine. At time of writing, &lt;a href=&quot;https://github.com/JuliaDiff/ChainRules.jl/&quot;&gt;ChainRules.jl&lt;/a&gt; was up to 78 releases.&lt;/p&gt;
&lt;p&gt;The big advantage of automatic merging is that it comes with automatic enforcement of standards. In order to be auto-mergeable, some good standards have to be followed. One of which is that that no unbounded compat specifiers (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=1.0&lt;/code&gt;) are permitted; and that everything must have a compat specifier (since unspecified is same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=0.0.0&lt;/code&gt;) That one is particularly great, since if one adds specifiers later that can’t be met, then it can trigger downgrades back to incredibly old versions that didn’t specify compat and that almost certainly are not actually compatible (despite saying they are).&lt;/p&gt;
&lt;p&gt;To deal with that particular case, retro-capping was done to retroactively add bounds to all things that didn’t have them. This was painful when it was done, since it rewrote compat in the registry, which made it disagree with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt; in package repositories, which is always confusing. But now that it is done, it is good.&lt;/p&gt;
&lt;h4 id=&quot;requirement-to-have-a-projecttoml&quot;&gt;Requirement to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Finally, the legacy ability to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;dev ...&quot;&lt;/code&gt; packages that had only a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REQUIRE&lt;/code&gt; file and no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt; was removed in Julia 1.4. You can still &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;add ...&quot;&lt;/code&gt; them if they were registered during the transition period. But to edit the projects, they must have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt; file, which is fine since all the tools to register releases also require you to have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project.toml&lt;/code&gt; now.&lt;/p&gt;
&lt;h3 id=&quot;pkgserver&quot;&gt;PkgServer&lt;/h3&gt;
&lt;p&gt;One of the big advancements between Julia 0.6 and 1.0 was switching Pkg to special-case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&quot;add ...&quot;&lt;/code&gt; for repos hosted on GitHub and fetch tarballs (available via GitHub’s API), rather than clone the repo with full history. At JuliaCon 2018 everyone was raving about how much faster it was. Except me and the 2 other Australians present. We were like &lt;em&gt;“Still slow, what are you talking about?”&lt;/em&gt;. Turns out that GitHub’s connection to Australia (at least for that API), is slow. Australian Internet has infamously high latency, downloading dozens of packages is often slow. GitHub wasn’t optimized for this kind of use, it’s not a content distribution network. Its optimized for occasionally cloning things you want to develop, not rapidly downloading dozens of things that you want to use.&lt;/p&gt;
&lt;p&gt;The new PkgServer solves this. It &lt;em&gt;is&lt;/em&gt; optimized for distributing packages. This was introduced as opt-in in Julia 1.4, and made the default in 1.5. For &lt;a href=&quot;https://github.com/JuliaLang/Pkg.jl/issues/1377&quot;&gt;full details see the original issue&lt;/a&gt; that introduced the Pkg protocol, it has a ton of info at the top explaining how it all works. There are &lt;a href=&quot;https://status.julialang.org/&quot;&gt;distributed PkgServers around the world&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not only does this solve the latency problems of connecting to some GitHub server that is on the other side of the world, it also improves support for non-GitHub hosting. Its always been possible to host Julia packages on anything supporting git. There are &lt;a href=&quot;https://github.com/JuliaRegistries/General/search?q=gitlab&quot;&gt;over a dozen packages in General Registry hosted on GitLab&lt;/a&gt; for example. My employer, &lt;a href=&quot;https://www.invenia.ca/&quot;&gt;Invenia&lt;/a&gt;, has all our internal packages hosted on GitLab, and registered on our internal registry. But in effect, prior to PkgServer, GitHub was 1st class in Pkg, due to its download-as-a-tarball feature. It makes sense - GitLab and BitBucket don’t even provide an API for downloading a repo via content (tree) hash (only commit hash), so it can’t be implemented inside Pkg itself. But by going via PkgServer, everything can be consistently served.&lt;/p&gt;
&lt;p&gt;PkgServer has not been without struggles, both social and technical. Early versions of the system stored some metrics, so that package authors could be informed of how many users their package had, what operating systems they used etc. After much debate, it was concluded that this might be too invasive, and it was removed before the Julia 1.5 release. On the technical side, it initially had some struggles with keeping up with the load, with some servers becoming overloaded. More recently its had some issues (hopefully now fixed) where it has not been able to see the latest releases of packages because it is still seeing an out-of-date copy of the registry.&lt;/p&gt;
&lt;p&gt;As &lt;a href=&quot;https://twitter.com/codinghorror/status/506010907021828096&quot;&gt;Jeff Atwood said&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://xkcd.com/1854/&quot;&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/refresh_types.png&quot; alt=&quot;XKCD 1854&quot;/&gt; (XKCD 1845&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;time-to-first-plot&quot;&gt;Time To First Plot&lt;/h2&gt;
&lt;p&gt;People often complain about the “Time To First Plot” (TTFP) in Julia. I personally have never minded it – by the time I am plotting something, I have done minutes of thinking so 20 seconds of compilation is nothing. Plotting, it turns out, is basically a really hard thing for a compiler. It is many, many, small methods, most of which are only called once. And unlike most Julia code, it doesn’t actually benefit all that much from Julia’s JIT. Julia’s JIT is normally specializing code, and running a ton of optimizations. But plotting itself isn’t in the hot-loop – optimizing the code takes longer than running it the few dozen times it might be used unoptimized. To make a long-story short, plotting is the poster child example for Julia needing to compile things before it can run them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.0:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@time&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Plots&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;))))&lt;/span&gt;
 &lt;span class=&quot;mf&quot;&gt;16.780888&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;29.55&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.609&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GiB&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.79&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Julia 1.6:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@time&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Plots&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;mf&quot;&gt;9.694037&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;18.29&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.164&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GiB&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compilation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Sure it is still not instantaneous, but it’s a lot faster than it was.&lt;/p&gt;
&lt;p&gt;Note also that in the above timing I had already run precompilation, which seems fairest. Though as discussed earlier, precompilation caches often would be deleted in 1.0; and conversely are created much faster in 1.6 due to parallelization. If you were to count the precompilation time I regularly saw in 1.0, TTFP could be several minutes.&lt;/p&gt;
&lt;h3 id=&quot;invalidations&quot;&gt;Invalidations&lt;/h3&gt;
&lt;p&gt;Consider a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt; with a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo(::Number)&lt;/code&gt;. If some other function calls it, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar(x::Int) = 2*foo(x)&lt;/code&gt;, the JIT will compile instruction for exactly the method instance to call – a fast static dispatch, possibly even inlined. If the user then defines a new, more specific method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo(::Int)&lt;/code&gt;, the compiled code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bar&lt;/code&gt; needs to be invalidated so it will call the new one. It needs to be recompiled – which means anything that statically dispatches to it needs to be recompiled, and so forth. This is an invalidation. It’s an important feature of the language. It is key to extensibility. It doesn’t normally cause too many problems, since generally, basically everything is defined before anything is called, and thus before anything is compiled.&lt;/p&gt;
&lt;p&gt;A notable exception to this is Base and the other standard libraries. These are compiled into the so-called system image. Furthermore, methods in these standard libraries are some of the most overloaded, thus most likely to be invalidated.&lt;/p&gt;
&lt;p&gt;A bunch of work has gone into dealing with invalidations better. Not just point-fixes to remove calls that were likely to be invalidated, but several changes to the compiler. One particular change was not triggering cascading invalidations for methods that couldn’t actually be called due the being ambiguous. As a result, a lot of user code that triggered invalidations on 1.5 no longer does so on 1.6. The end result of this is faster compilation after loading packages, since it doesn’t have to recompile a ton of invalidated method instances - i.e. a decreased time to first plot.&lt;/p&gt;
&lt;p&gt;This has had a huge effect on &lt;a href=&quot;https://github.com/timholy/Revise.jl&quot;&gt;Revise.jl&lt;/a&gt; which started to take several seconds to load when it gained the dependency on &lt;a href=&quot;https://github.com/JuliaDebug/JuliaInterpreter.jl&quot;&gt;JuliaInterpreter.jl&lt;/a&gt;; which isn’t much, but when you do it every time you start Julia it is an annoying lack of snappiness. But thanks to this work, JuliaInterpreter, and thus Revise, now load in a flash.&lt;/p&gt;
&lt;p&gt;A full discussion on the invalidations work can be found in &lt;a href=&quot;https://julialang.org/blog/2020/08/invalidations/&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;per-module-optimization-flags&quot;&gt;Per-Module Optimization Flags&lt;/h3&gt;
&lt;blockquote readability=&quot;7.7983193277311&quot;&gt;
&lt;p&gt;The compiler optimization level can now be set per-module using the experimental macro Base.Experimental.@optlevel n. For code that is not performance-critical, setting this to 0 or 1 can provide significant latency improvements (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/34896&quot;&gt;#34896&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5.7692307692308&quot;&gt;
&lt;p&gt;Compilation and type inference can now be enabled or disabled at the module level using the experimental macro Base.Experimental.@compiler_options (&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/37041&quot;&gt;#37041&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recall that I said most of Julia compilation isn’t even that useful for plotting, since making it run fast isn’t a priority (but loading fast is).&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@optlevel&lt;/code&gt; only controls which LLVM optimization passes run; which is right at the end of the compilation pipeline. Turning off compilation and type inference on the other hand turns off a ton more.&lt;/p&gt;
&lt;p&gt;These flags mean that plotting libraries and other similar things that don’t benefit from the optimizer can just not use the optimizer.&lt;/p&gt;
&lt;h2 id=&quot;internals&quot;&gt;Internals&lt;/h2&gt;
&lt;h3 id=&quot;references-to-the-heap-from-the-stack-performance&quot;&gt;References to the Heap from the Stack (Performance)&lt;/h3&gt;
&lt;p&gt;This was promised in 2016 as a feature for 1.0 (released 2018), but we actually didn’t get it until 1.5 (released 2020) with &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/33886&quot;&gt;#33886&lt;/a&gt;. In short, the process of allocating memory from the heap is fairly slow*, whereas allocating memory on the stack is basically a no-op. Indeed, Julia benchmarking tools don’t count allocations on the stack as allocations at all. One can find extensive write ups of heap vs. stack allocations and how it works in general (though some mix the C specific factors with the CPU details). In Julia, all** mutable objects live on the heap. Until recently, immutable objects that contained references to heap allocated objects also had to live on the heap, i.e. only immutable objects with immutable fields (with immutable fields with…) could live on the stack. But with this change, all immutable objects can live on the stack, even if some of their fields live on the heap. An important consequence of this is that wrapper types, such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SubArray&lt;/code&gt; returned from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@view x[1:2]&lt;/code&gt;, now have no overhead to create. I find that in practice this often adds up to a 10-30% speed-up in real world code.&lt;/p&gt;
&lt;p&gt;(* It’s actually pretty fast, but it is the kind of thing that rapidly adds up; and it is slow vs operations that can happen without dynamic allocations.)&lt;br/&gt;(** Technically not all mutable objects live on the heap, because some never live at all, as they are optimized away entirely, and under certain circumstances they can actually be allocated on the stack. But as a rule mutable objects live on the heap.)&lt;/p&gt;
&lt;h3 id=&quot;manually-created-back-edges-for-lowered-code-generated-functions&quot;&gt;Manually Created Back-edges for Lowered Code Generated Functions&lt;/h3&gt;
&lt;p&gt;This is a very niche and not really at all user-facing feature. But it is important for some really cool things, like &lt;a href=&quot;https://github.com/jrevels/Cassette.jl&quot;&gt;Cassette&lt;/a&gt;. To understand why this matters, it’s worth understanding how Cassette works. I wrote a &lt;a href=&quot;https://invenia.github.io/blog/2019/10/30/julialang-features-part-1#making-cassette&quot;&gt;blog post on this a few years ago&lt;/a&gt;. As well as the prior discussion on invalidations.&lt;/p&gt;
&lt;p&gt;Julia 1.3 allowed back-edges to be manually attached to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CodeInfo&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@generated&lt;/code&gt; functions that return lowered code. Back-edges are the connections from methods back to each method instance that calls them. &lt;em&gt;This is what allows invalidations to work&lt;/em&gt;, as when a method is redefined, it needs to know what things to recompile. This change allowed those back-edges to be manually specified for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@generated&lt;/code&gt; functions that were working at the lowered code level. This is useful since this technique is primarily used for generating code based on the (lowered) code of existing methods. For example, in &lt;a href=&quot;https://github.com/FluxML/Zygote.jl&quot;&gt;Zygote&lt;/a&gt;, generating the gradient code from the code of the primal method. So you want to be able to trigger the regeneration of this code when that original method changes.&lt;/p&gt;
&lt;p&gt;Basically, this allows code that uses &lt;a href=&quot;https://github.com/JuliaLabs/Cassette.jl&quot;&gt;Cassette.jl&lt;/a&gt;, &lt;a href=&quot;https://github.com/MikeInnes/IRTools.jl&quot;&gt;IRTools.jl&lt;/a&gt; and similar approaches to not suffer from &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/265&quot;&gt;#265&lt;/a&gt;-like problems. A particular case of this is for &lt;a href=&quot;https://github.com/FluxML/Zygote.jl&quot;&gt;Zygote&lt;/a&gt;, where redefining a function called by the code that was being differentiated did not result in an updated gradient (unless &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zygote.refresh()&lt;/code&gt;) was run. This was annoying for working in the REPL, where you might e.g. change your neural nets loss function without redefining the network. In that case, if you forgot to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Zyote.refresh()&lt;/code&gt; it would just train wrong.&lt;/p&gt;
&lt;p&gt;Other things that this allows are two very weird packages that &lt;a href=&quot;https://github.com/NHDaly&quot;&gt;Nathan Daly&lt;/a&gt; and I came up with at the JuliaCon 2018 hackathon: &lt;a href=&quot;https://github.com/NHDaly/StagedFunctions.jl&quot;&gt;StagedFunctions.jl&lt;/a&gt; and &lt;a href=&quot;https://github.com/oxinabox/Tricks.jl/&quot;&gt;Tricks.jl&lt;/a&gt;. &lt;a href=&quot;https://github.com/NHDaly/StagedFunctions.jl&quot;&gt;StagedFunctions.jl&lt;/a&gt; relaxes the restrictions on normal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@generated&lt;/code&gt; functions so that they are also safe from &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/265&quot;&gt;#265&lt;/a&gt;-like problems. &lt;a href=&quot;https://github.com/oxinabox/Tricks.jl/&quot;&gt;Tricks.jl&lt;/a&gt; uses this feature to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasmethod&lt;/code&gt;, etc. resolve at compile-time, and then get updated if and when new methods are defined. This can allow for defining traits like &lt;em&gt;“anything that defines a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iterate&lt;/code&gt; method”&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;base-and-standard-libraries&quot;&gt;Base and Standard Libraries&lt;/h2&gt;
&lt;h3 id=&quot;threading&quot;&gt;Threading&lt;/h3&gt;
&lt;p&gt;Julia has full support for threading now. Not just the limited &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@threads for&lt;/code&gt; loops, but full Go-style threads. They are tightly integrated with the existing Async/Task/Coroutine system. In effect, threading works by unsetting the sticky flag on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Task&lt;/code&gt;, so that it is allowed to run on any thread. This is normally done via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Threads.@spawn&lt;/code&gt; macro, which replaces the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@async&lt;/code&gt; macro.&lt;/p&gt;
&lt;p&gt;Interestingly, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@threads for&lt;/code&gt; macro still remains, and doesn’t actually use much of the new machinery. It still uses the old way which is a bit tighter if the loop durations are almost identical. But the new threading stuff is fast, on the order of microseconds to send work off to another thread. Even for uses of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@threads for&lt;/code&gt;, we get some wins from the improvements. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO&lt;/code&gt; is now thread-safe; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReentrantLock&lt;/code&gt; was added and is the kind of standard lock that you expect to exist. It has notifications on waiting work, etc.; and a big one: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@threads for&lt;/code&gt; can now be nested without things silently being wrong.&lt;/p&gt;
&lt;p&gt;A lot of this actually landed in Julia 1.2, but Julia 1.3 was the release we think of as being for threading, as it gave us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Threads.@spawn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also, in Julia 1.6, we now have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;julia -t auto&lt;/code&gt; to start Julia with 1 thread per (logical) core. No more having to remember to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JULIA_NUM_THREADS&lt;/code&gt; environment variable before starting it.&lt;/p&gt;
&lt;h3 id=&quot;5-arg-mul-in-place-generalized-multiplication-and-addition&quot;&gt;5-arg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!&lt;/code&gt;: in-place generalized multiplication and addition&lt;/h3&gt;
&lt;p&gt;The 5 arg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!(C, A, B, α, β)&lt;/code&gt; performs the operation equivalent to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C .= A*B*α + C*β&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;α&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;β&lt;/code&gt; are scalars and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; are compatible mixes of scalars, matrices and vectors. I am still of the opinion that it should have been called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;muladd!&lt;/code&gt;. This is the human-friendly version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLAS.gemm!&lt;/code&gt; (i.e. GEneralized Matrix Multiplication) and its ilk, thus the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!&lt;/code&gt;. It promises to always compute the in-place mul-add in the most efficient, correct way for any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AbstractArray&lt;/code&gt; subtype. In contrast, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLAS.gemm!&lt;/code&gt; computes the same thing, but with a bunch of conditions. It must be a strided array containing only BLAS scalars, and if one of the inputs is conjugated/transposed you need to input it in non-conjugated/transposed form, and then tell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLAS.gemm!&lt;/code&gt; via passing in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt;. 5-arg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!&lt;/code&gt; takes care of all that for you dispatching to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BLAS.gemm!&lt;/code&gt; or other suitable methods once it has that all sorted. Further, the existing 3-arg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!(C, A, B)&lt;/code&gt; is a special case of it: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!(C, A, B) = mul!(C, A, B, true, false)&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; being 1, and strong 0). So you can just implement the 5-arg form and be done with it.&lt;/p&gt;
&lt;p&gt;I personally didn’t care about 5-arg &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!&lt;/code&gt; at all for a long time. It was yet another in-place function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LinearAlgebra&lt;/code&gt; that I would never use often enough to remember what it did, and thus wouldn’t use. But I realized that it is a crucial function for my own area: automatic differentiation. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mul!(C, A, B, true, true)&lt;/code&gt; is the in-place accumulation rule for the reverse mode equivalent of the product rule.&lt;/p&gt;
&lt;h3 id=&quot;you-can-now-print-and-interpolate-nothing-into-strings&quot;&gt;You can now print and interpolate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nothing&lt;/code&gt; into strings.&lt;/h3&gt;
&lt;p&gt;This is one of mine &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/32148&quot;&gt;#32148&lt;/a&gt;, and I find it is such a usability enhancement. So many small frustrations in Julia 1.0 related to interpolating a variable containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nothing&lt;/code&gt; into a string, often occurring when you are adding a quick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;println&lt;/code&gt; to debug something not being the value you expected, or when building a string for some other error message. Arguably both of those are better done via other means (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@show&lt;/code&gt;, and values stored in fields in the error type); but we don’t always do what is best. Sometimes it is expedient to just interpolate things into strings without worrying about what type they are.&lt;/p&gt;
&lt;h3 id=&quot;basedownload-now-using-libcurl&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base.download&lt;/code&gt; now using libcurl&lt;/h3&gt;
&lt;p&gt;For a very long time, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;download&lt;/code&gt; function which retrieves things over HTTP was implemented with an amazing hack: It conditionally shelled out to different programs. On Windows it ran a mildly scary PowerShell script. On Unixen it first tried to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;, then if that wasn’t installed it tried to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;, and then if that wasn’t installed it tried to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fetch&lt;/code&gt;. It’s low-key amazing that this worked as well as it did – very few complaints. But as of 1.6, &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/37340&quot;&gt;it now uses libcurl&lt;/a&gt;. Using libcurl everywhere gives consistency with proxy settings, and protocol support (beyond HTTP) across all platforms.&lt;/p&gt;
&lt;p&gt;It also has a more extensive API via the new &lt;a href=&quot;https://github.com/JuliaLang/Downloads.jl&quot;&gt;Downloads.jl&lt;/a&gt; standard library. It can do things like progress logging, and it can retrieve headers. I have &lt;a href=&quot;https://github.com/oxinabox/DataDeps.jl/pull/22&quot;&gt;tried getting headers via conditional different command-line download functions&lt;/a&gt; before, it’s a small cup of nightmare fuel; and I ended up swapping out to HTTP.jl for that. It wouldn’t be too surprising if eventually we see libcurl swapped out for code extracted from HTTP.jl for a pure Julia solution. HTTP.jl works wonderfully for this, but I suspect untangling the client from the server is just a bit annoying right now, particularly as it is still evolving its API.&lt;/p&gt;
&lt;h3 id=&quot;definable-error-hints&quot;&gt;Definable Error Hints&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.julialang.org/en/v1.7-dev/base/base/#Base.Experimental.register_error_hint&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Experimental.register_error_hint&lt;/code&gt;&lt;/a&gt; allows packages to define extra information to be shown along with a particular type of error. A really cool use of it was proposed on &lt;a href=&quot;https://discourse.julialang.org/t/enforce-interface-implementation/52872/15?u=oxinabox&quot;&gt;Discourse&lt;/a&gt;: you could add an error hint to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MethodError&lt;/code&gt; that says to check that an interface has been implemented correctly. This has the advantage of pointing the user in what is most likely the right direction. But it doesn’t have the problem of really confounding them if you are wrong, since the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MethodError&lt;/code&gt; information is still shown (See my earlier &lt;a href=&quot;https://www.oxinabox.net/2020/04/19/Julia-Antipatterns.html#notimplemented-exceptions&quot;&gt;blog post on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotImplementedException&lt;/code&gt; antipattern&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Right now this is not used anywhere in the standard libraries. At first, I thought that made sense since they can just edit the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show_error&lt;/code&gt;. But now I think since it can be used for a subset of a particular type of exception it could well be useful for some of &lt;a href=&quot;https://docs.julialang.org/en/v1/manual/interfaces/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base&lt;/code&gt;’s interfaces&lt;/a&gt; exactly as described above. According to &lt;a href=&quot;https://juliahub.com/ui/CodeSearch?q=register_error_hint&amp;amp;u=all&amp;amp;t=all&quot;&gt;JuliaHub search&lt;/a&gt;, right now there is just one package using it: ColorTypes.jl is &lt;a href=&quot;https://github.com/JuliaGraphics/ColorTypes.jl/blob/bd31741d162361ebd44ed05ae532266998d9ce9f/src/error_hints.jl&quot;&gt;using it to explain some &lt;em&gt;consensual type-piracy&lt;/em&gt;&lt;/a&gt;, where for some functions on its types you need to load another package.&lt;/p&gt;
&lt;p&gt;This is an experimental features, so it’s not covered by the SemVer guarantees of the rest of the language. Still it’s neat, and I don’t expect it to go away, though I also don’t expect it to graduate from experimental status until a bunch of people are using it. Which they will probably do as people start dropping support for older Julia versions.&lt;/p&gt;
&lt;h3 id=&quot;a-bunch-of-curried-functions&quot;&gt;A bunch of curried functions&lt;/h3&gt;
&lt;p&gt;Julia has ended up with a convention of providing curried methods of functions if that would be useful as the first argument for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter(isequal(2), [1,2,3,2,1])&lt;/code&gt; is the same is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter(x-&amp;gt;isequal(x, 2), [1,2,3,2,1])&lt;/code&gt;. In particular these are boolean comparison-like functions with two arguments, where the thing being compared against is the second. Julia 1.0 had &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isequal&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt;. Since then we have added: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isapprox&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!=&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startswith&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endswith&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Aside: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contains&lt;/code&gt; is argument-flipped &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;occursin&lt;/code&gt;. It was a thing in Julia 0.6, but was removed in 1.0 and now has been added back. We added it back primarily so we could have the curried form, and to match &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startswith&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endswith&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;a-ton-of-other-new-and-improved-standard-library-functions&quot;&gt;A ton of other new and improved standard library functions&lt;/h3&gt;
&lt;p&gt;I am not going to manage to list all of them here. But I will list some of my standout favorites.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JuliaLang/julia/pull/37678&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@time&lt;/code&gt;&lt;/a&gt; now reports how much time was spent on compilation. This is going to help prevent people new to the language from including compilation time in their benchmarks. It is still better to use &lt;a href=&quot;https://github.com/JuliaCI/BenchmarkTools.jl&quot;&gt;BenchmarkTools.jl’s&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@btime&lt;/code&gt;, since that does multiple samples. But now that too can report time spent on compilation. It’s also useful for identifying if certain functions are taking ages to compile. Which I guess is its theoretical main point, but I think preventing people from benchmarking wrong is going to come up way more often.&lt;/p&gt;
&lt;p&gt;The experimental &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/29733&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base.@locals&lt;/code&gt;&lt;/a&gt; was added, which returns a dictionary of local variables. That one surprised me; I though being able to access a dictionary of local variables would get in the way of the optimizer, since it would prevent it from being able to optimize variables that are used for intermediate values away entirely. However, the way it functions is to generate code with creates and fills dictionary of with references to variables where it is used. The dictionary is not maintained at all times. So this shouldn’t block optimizations in functions that don’t use it. But the compiler folks know better than I do.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/28156&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splitpath&lt;/code&gt;&lt;/a&gt; is added, it’s the opposite of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joinpath&lt;/code&gt;. Kind of silly we didn’t have that, and had been bugging me at least since 0.6.&lt;/p&gt;
&lt;p&gt;Similarly, I have wanted &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/29749&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eachslice&lt;/code&gt; and its special cases: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eachrow&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eachcol&lt;/code&gt;&lt;/a&gt; since Julia 0.3 when I first started using the language. These are super handy, for example when you want to iterate through vectors of the rows of a matrix.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_stderr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect_stdout&lt;/code&gt; now work with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devnull&lt;/code&gt;. So one can run some code while suppressing output easily as follows:&lt;/p&gt;
&lt;div class=&quot;language-julia highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;julia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect_stdout&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;devnull&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You won't see this&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is just handy, doing it without this is seriously annoying.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readdir&lt;/code&gt; now accepts a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join=true|false&lt;/code&gt; keyword argument so that it returns paths with the parent dir. This is good, almost every time I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readdir&lt;/code&gt; I used it as: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joinpath.(x, readdir(x))&lt;/code&gt;. It is slightly cleaner (and faster) to be able to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readdir(x; join=true)&lt;/code&gt;. I think for Julia 2.0 we should consider making it the default. Also added was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort&lt;/code&gt; argument, which I don’t see the point of so much, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort(readdir(x))&lt;/code&gt; seems cleaner than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readdir(x; sort=true)&lt;/code&gt;; and because I rarely rely on processing files in order.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccall&lt;/code&gt; is now available as a macro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ccall&lt;/code&gt; which lets you specify the types in a similar way to Julia’s normal type-assertions. There was a &lt;a href=&quot;https://www.youtube.com/watch?v=wofq1DdXM3s&quot;&gt;short juliacon talk about this&lt;/a&gt; So now one can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@ccall(sqrt(4.0::Cdouble)::Cdouble)&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccall(:sqrt, Cdouble, (Cdouble,), 4.0,)&lt;/code&gt; This is what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccall&lt;/code&gt; always should have been. In Julia 1.7, &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/38438&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invoke&lt;/code&gt; is getting the same treatment.&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In 1.5 NamedTuples got a similarly styled macro to help construct the types. This was added in &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/34548&quot;&gt;#34548&lt;/a&gt;. Generally when working with NamedTuples you don’t need to mention the type but when you do it was quite verbose and ugly. Now you write: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@NamedTuple{str::String, x::Float64}&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NamedTuple{(:str, :x), Tuple{String, Float64}}&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;more-why-didnt-it-always-work-that-way-than-i-can-count&quot;&gt;More “Why didn’t it always work that way” than I can count&lt;/h3&gt;
&lt;p&gt;Since 1.0’s release, there have been so many small improvements to functions that I didn’t even know happened, because I assumed they always worked that way. Things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startswith&lt;/code&gt; supporting regex, &lt;a href=&quot;https://github.com/JuliaLang/julia/pull/36199&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse&lt;/code&gt;&lt;/a&gt; working on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UUID&lt;/code&gt;s, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accumulate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cumsum&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cumprod&lt;/code&gt; supporting arbitrary iterators (&lt;a href=&quot;https://github.com/JuliaLang/julia/pull/34656&quot;&gt;#32656&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Julia 1.6 is one hell of a more polished language.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Thanks to all the people who contributed to editing the post.&lt;/p&gt;
&lt;p&gt;Especially: &lt;a href=&quot;https://cdg.dev/&quot;&gt;Chris de Graaf&lt;/a&gt;, &lt;a href=&quot;https://github.com/nilshg&quot;&gt;Nils Gudat&lt;/a&gt;, &lt;a href=&quot;https://github.com/miguelraz&quot;&gt;Miguel Raz Guzmán Macedo&lt;/a&gt;, &lt;a href=&quot;https://giordano.github.io/&quot;&gt;Mosè Giordano&lt;/a&gt;, and &lt;a href=&quot;https://ericphanson.com/&quot;&gt;Eric Hanson&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 14 Feb 2021 14:46:55 +0000</pubDate>
<dc:creator>Sukera</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.oxinabox.net/2021/02/13/Julia-1.6-what-has-changed-since-1.0.html</dc:identifier>
</item>
<item>
<title>K-9 Mail is looking for funding</title>
<link>https://k9mail.app/2021/02/14/K-9-Mail-is-looking-for-funding</link>
<guid isPermaLink="true" >https://k9mail.app/2021/02/14/K-9-Mail-is-looking-for-funding</guid>
<description>&lt;div readability=&quot;8.5&quot;&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;K-9 Mail is looking to raise 1,000 EUR per week (~52,000 EUR per year) to fund development.&lt;/p&gt;
&lt;p&gt;The app has a lot of users. If everyone who is able to do so donated a small amount we should be able to reach that goal in no time.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;
&lt;p&gt;There is a lot of work that needs doing, both on the app and the project in general. Unfortunately, there are currently not many people around to do it. In the last two years cketti (coincidentally also the author of this post 👋) contributed the largest chunk of work. But there were also a lot of &lt;a href=&quot;https://github.com/k9mail/k-9/graphs/contributors?from=2019-01-01&amp;amp;to=2021-02-14&amp;amp;type=c&quot;&gt;contributions&lt;/a&gt; by other people ❤️&lt;/p&gt;
&lt;p&gt;Only a few developers working on the project in their spare time wasn’t enough to keep up with the pace of the Android platform. The latest stable K-9 Mail version (5.600) was released in 2018 and barely works on modern Android versions. It’s obvious that the project needs more developer time to be able to catch up.&lt;/p&gt;
&lt;h3 id=&quot;what-will-the-money-be-used-for&quot;&gt;What will the money be used for?&lt;/h3&gt;
&lt;p&gt;Introducing money to an open source project can be difficult. Even if people agree that the money should be spent on developers, the question of how it should be distributed can lead to conflicts. Since right now there’s mainly one person working on the app this is currently not an issue for the K-9 Mail project.&lt;/p&gt;
&lt;p&gt;In 2020 I (cketti 👋) decided to work on open source full-time. I’ve spent most of that time on K-9 Mail. If you’re interested in how that went, check out the blog post &lt;a href=&quot;https://cketti.de/2021/01/14/my-first-year-as-a-full-time-open-source-developer/&quot;&gt;My first year as a full-time open source developer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So the money will be used to enable me to continue working on K-9 Mail for about 80% of my time. In particular I intend to work on making K-9 Mail’s core functionality more reliable and easier to use. The initial roadmap is as follows.&lt;/p&gt;
&lt;h4 id=&quot;roadmap&quot;&gt;Roadmap&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;IMAP IDLE&lt;/strong&gt; – This is the last big item blocking the release of a new stable version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Notifications&lt;/strong&gt; – Almost every major Android version in the past few years has changed something about how notifications work. We have some catching up to do in this area. There are also a few annoying bugs that need to be fixed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Account setup&lt;/strong&gt; – Most of the time we should be able to automatically detect the email server settings given a user’s email address. We should probably also add support for the non-standard authentication methods of some of the large email providers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message composition&lt;/strong&gt; – A lot of things can be improved in this area. To name a few: recipient name/address input, rich text editing, handling of draft messages, image attachment handling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Folder management&lt;/strong&gt; – An often requested feature is properly displaying the folder hierarchy. But also creating, renaming, and deleting folders is something we want to add.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search&lt;/strong&gt; – Both local search and remote search can be improved a lot.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrate Autocrypt support&lt;/strong&gt; – The creators of &lt;a href=&quot;https://www.openkeychain.org/&quot;&gt;OpenKeychain&lt;/a&gt; have offered to make parts of their source code available under the Apache 2.0 license (currently GPL 3.0) so we can integrate Autocrypt functionality directly into K-9 Mail.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Message viewing&lt;/strong&gt; – There’s a lot more we can do to optimize displaying emails on a small screen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JMAP support&lt;/strong&gt; – &lt;a href=&quot;https://jmap.io/&quot;&gt;JMAP&lt;/a&gt; is a more modern version of IMAP and will hopefully slowly replace it in the future.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;what-happens-if-the-funding-goal-isnt-reached&quot;&gt;What happens if the funding goal isn’t reached?&lt;/h3&gt;
&lt;p&gt;Nothing dramatic. I’ll go back to working on K-9 Mail in my spare time.&lt;/p&gt;
&lt;h3 id=&quot;what-if-the-funding-goal-is-exceeded&quot;&gt;What if the funding goal is exceeded?&lt;/h3&gt;
&lt;p&gt;In that case the money will pile up in the account and we as a community have to figure out what to do with it. If it’s a significant amount maybe a second person can be paid to work on the project. At least in the foreseeable future there’s no danger of running out of work.&lt;/p&gt;
&lt;h3 id=&quot;okay-youve-convinced-me-how-do-i-donate-to-the-project&quot;&gt;Okay, you’ve convinced me. How do I donate to the project?&lt;/h3&gt;
&lt;p&gt;We’re using &lt;a href=&quot;https://liberapay.com/&quot;&gt;Liberapay&lt;/a&gt;, a platform for recurring donations. The platform itself is free software and run by a team of volunteers ❤️&lt;/p&gt;
&lt;p&gt;Recurring donations are the best way to ensure a relatively stable income. So we’d prefer that. But you can also use Liberapay to make one-time donations by selecting “manual renewal”.&lt;/p&gt;
&lt;div&gt;&lt;noscript&gt;
&lt;p&gt;&lt;a href=&quot;https://liberapay.com/k9mail/donate&quot;&gt;&lt;img alt=&quot;Donate using Liberapay&quot; src=&quot;https://liberapay.com/assets/widgets/donate.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/noscript&gt;&lt;/div&gt;
&lt;h3 id=&quot;can-i-help-out-in-any-other-way&quot;&gt;Can I help out in any other way?&lt;/h3&gt;
&lt;p&gt;The project could always use more help. If you’re a developer check out &lt;a href=&quot;https://github.com/k9mail/k-9&quot;&gt;our source code on GitHub&lt;/a&gt;. If you want to help translating the app head over to &lt;a href=&quot;https://www.transifex.com/k-9/k9mail/&quot;&gt;our Transifex page&lt;/a&gt;. To help out other users who have questions visit our &lt;a href=&quot;https://forum.k9mail.app/&quot;&gt;support forum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course we always appreciate when someone spreads the word about K-9 Mail. Feel free to mention our &lt;a href=&quot;https://k9mail.app/&quot;&gt;website&lt;/a&gt;, or our accounts on the &lt;a href=&quot;https://fosstodon.org/@k9mail&quot;&gt;Fediverse&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/k9mail_app&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, make sure to check out the latest &lt;a href=&quot;https://forum.k9mail.app/t/how-do-i-become-a-beta-tester/68&quot;&gt;beta version of K-9 Mail&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have questions or comments, please let us know in this &lt;a href=&quot;https://forum.k9mail.app/t/k-9-mail-is-looking-for-funding/715&quot;&gt;forum thread&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 14 Feb 2021 11:38:51 +0000</pubDate>
<dc:creator>BubuIIC</dc:creator>
<og:url>https://k9mail.app/2021/02/14/K-9-Mail-is-looking-for-funding.html</og:url>
<og:title>K-9 Mail is looking for funding</og:title>
<og:image>https://k9mail.app/assets/img/posts/campaign.png</og:image>
<og:description>K-9 Mail is an open source email client focused on making it easy to chew through large volumes of email</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://k9mail.app/2021/02/14/K-9-Mail-is-looking-for-funding</dc:identifier>
</item>
<item>
<title>The complexity that lives in the GUI</title>
<link>https://blog.royalsloth.eu/posts/the-complexity-that-lives-in-the-gui/</link>
<guid isPermaLink="true" >https://blog.royalsloth.eu/posts/the-complexity-that-lives-in-the-gui/</guid>
<description>&lt;p&gt;The user interfaces are a weird thing. There are all sorts of libraries and frameworks that are supposed to help you on your journey of writing a GUI, but despite all the best practices and frameworks forcing you to eat your vegetables, the GUI always ends up being a ridiculous mess. After pondering some more about this topic, I’ve finally realized what is the cause of this problem.&lt;/p&gt;
&lt;p&gt;Suppose you start working on a greenfield project for managing a warehouse (gasp). This GUI has everything that a warehouse owner desires, including the irrelevant oversized side bar on the left that scores upvotes on the design related social networks. The user avatar with the details of logged in user are on the left, inventory table is in the middle and all kinds of buttons are everywhere else.&lt;/p&gt;

&lt;p&gt;If I asked you to architect such application from the given user interface concept, you would probably start to mentally compose parts of the GUI into boxes with labels such as: UserSection, InventoryTable, BottomActionButtons and so on. These days such labeled boxes are commonly put into separate classes. Classes are a great building blocks for the GUI, because they let you divide the complexity into smaller parts each containing just the internal state of one little component. When you are programming an inventory table in the middle you don’t want to care about the complexity surrounding the user avatar section. In other words, if you are organizing the stuff in box A you don’t care about the mess that resides in box B.&lt;/p&gt;
&lt;p&gt;For a while this strategy of “mess in other boxes is not my problem” works, but soon enough you hit the next challenge. Suppose the user section of the warehouse GUI has a little light called “Working”. If the user is editing the inventory table that light should be displayed in green and when the user stops editing, the light should be turned back to gray.&lt;/p&gt;
&lt;p&gt;Oops, the “mess in other boxes” is your problem now as you have to connect the editing state of the inventory table with the state of the light in the user avatar section. You find yourself at the crossroads of important design decisions.&lt;/p&gt;

&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Connect the boxes&lt;/strong&gt;: create the user avatar component and pass its instance to the inventory table component. Whenever the edit state of the inventory table changes, the business logic in the inventory table should also trigger a state change in the user avatar component with the help of the user avatar’s public API.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Lift the state up&lt;/strong&gt;: move the internal state of the user avatar component and the state of the inventory table into a separate box/class. The logic of the user avatar and inventory table component will still be neatly separated in their own boxes, but they will be able to communicate without inventory table needing the direct access to the user avatar.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;strong&gt;Introduce a message bus&lt;/strong&gt;: connect the inventory table and the user avatar component to the shared pipe that is used for distributing events in the application. The user avatar component subscribes to the message bus and every time it receives a table edit event, it executes an appropriate action (e.g turn the light on).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It goes without saying, that none of the presented options are without problems.&lt;/p&gt;
&lt;h3 id=&quot;connect-the-boxes&quot;&gt;Connect the boxes&lt;/h3&gt;
&lt;p&gt;If you’ve decided to chicken out of introducing another layer for holding the common state, you may solve this cross box communication problem by injecting the user avatar component directly into the inventory table component. The programming theorists and other purists will tell you that this is a bad idea and you should never even think about it. Think about the &lt;del&gt;children&lt;/del&gt;, err, all the tests that you won’t be able to write.&lt;/p&gt;
&lt;p&gt;I am definitely guilty of such crime against the Holy Church of Unit Testers. When the project is still in its infancy and I have yet to figure out what am I even building, I like to jam the components together without giving it much thought. Sometimes you cut the corners, and sometimes the corners cut you. How bad could it really be?&lt;/p&gt;
&lt;p&gt;It turns out, for small components this strategy works quite well. As usual, it’s often the wrong thing to do when your project grows large and contains hundreds of such inter class communication paths. Not to mention how injecting hundreds of components is tedious, error prone and ugly to look at.&lt;/p&gt;
&lt;p&gt;In hard times like these, the developers like to reach out for one of the fancy pants dependency injection frameworks, which supposedly allow you to clean up the component injection mess. In reality they trade compile time safety for some convenience and runtime crashes [1]. Now, you have two problems:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;You are still injecting hundreds of components.&lt;/li&gt;
&lt;li&gt;The dependency injection framework randomly breaks and nobody knows why.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The main reason why I prefer not to use dependency injection frameworks in large projects is because they tend to make the whole project more convoluted and harder to understand. It’s very easy to add just another component injection and not put any effort towards refactoring the code. This leads to the proliferation of small classes or services, because the injection framework allows you to do with no upfront investment. You pay for this crime later on once you have hundreds of injections all over the place and nobody is able to follow and debug this mesh of small components (see also &lt;a href=&quot;https://blog.royalsloth.eu/posts/on-navigating-a-large-codebase/&quot;&gt;On navigating a large codebase&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&quot;lift-the-state-up&quot;&gt;Lift the state up&lt;/h3&gt;
&lt;p&gt;A preferred way, where preferred means some kind of handwavy generalization of what the majority of developers might do, of handling this accidental complexity is by lifting the state up and storing the state of your component into another box that is usually called the model. Model View Controller (MVC) gang rejoice. This pattern allows you to separate the presentation of your data (view) from the actual data (model), with the use of controller that connects the two together [2].&lt;/p&gt;
&lt;p&gt;Instead of injecting hundreds of components into a god like component that controls all its children, you put the shared state of the relevant GUI components into a god like model that controls the state of all those children. The end result is similar, but separating the data from the view layer might earn you some positive reviews at the end of the year from the unit test groupies. Even though you improved the situation a little bit, you still have a huge model that is full of weird edge cases. The GUIs are inherently a giant state machines and they often get into a weird state that is only discovered when you are actually running the GUI.&lt;/p&gt;
&lt;p&gt;Maintaining a large and messy model is hard, so you decide to saw the model into smaller models that group the state of components which conceptually fit together. At some point during this “saw the model” process you realize that certain things between the two different models should be kept in sync. The more modern GUI frameworks usually arm you with some kind of data binding abstraction, which allows to easily propagate data changes from one model to another via the so called one way, two way data binding.&lt;/p&gt;
&lt;p&gt;Soon enough, you realize that it would be really useful if you could attach a change listener that would trigger and perform an action on every change of the state object. Say we would like to change the background color of the user avatar component every time the working light turns on. The code describing this situation might look something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lightTurnedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;editingInventoryTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lightTurnedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lightTurnedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightTurnedOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;changeBackgroundToRed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;changeBackgroundToIbmGray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is usually the point at which you start losing control of your GUI. Clicking on buttons will start triggering events which will modify the state in the model that will in turn start triggering event listeners causing your GUI to flash like a christmas tree. The problem of data bindings and change listeners is that they make it really easy to introduce a hidden circular event listeners that will trigger one another multiple times (event A changes state B and change of state B triggers event A). Such problems are rarely discovered during development, because developers are normally using powerful machines in comparison to the mortals that are still sticking to their ancient computers. These problems are also rarely discovered through code reviews, as the state changes are well hidden within one of those one line state bindings.&lt;/p&gt;
&lt;p&gt;I still don’t know what the proper solution to this problem would be. Keep your state manipulations as simple as possible and try not to share any data between different models. Every time I went forward with some fancy listener-binding mechanisms, I’ve ended up causing subtle circular listener recalculations that were extremely hard to debug.&lt;/p&gt;
&lt;h3 id=&quot;message-bus&quot;&gt;Message bus&lt;/h3&gt;
&lt;p&gt;Congratulations, a large amount of your effort will go towards resolving weird message bus problems as opposed to writing the business logic of your app. In the beginning, the message bus usually sounds like a good idea because it simplifies a lot of communication problems between the different UI components. You can send some events through the pipe and sure enough other parts of your application will react to them.&lt;/p&gt;
&lt;p&gt;You might be thinking: “Message bus for communicating between components in the GUI? That’s crazy!” Well, it turns out you can have a message bus that is not a huge ram gobbling process. In fact you are probably already using it, as the GUI frameworks usually have some sort of an event queue built in that is used for propagating the events in the system.&lt;/p&gt;
&lt;p&gt;As your application grows you might realize that just spamming messages back and forth causes a lot of performance problems. In case you have hundreds of components that are generating events, your little user avatar component might be sifting through hundreds of messages per second while it is only interested in one. Have no fear, message bus got your back. Any message bus worth their salt allows you to define different channels that introduce rough message type filtering. Why filter out all the irrelevant messages and waste CPU cycles, when you can subscribe to a specific channel that receives only the messages on the topic you are interested in?&lt;/p&gt;
&lt;p&gt;But, it’s so easy to throw yet another message into the void.&lt;/p&gt;
&lt;h2 id=&quot;guis-are-complex&quot;&gt;GUIs are complex&lt;/h2&gt;
&lt;p&gt;It seems to me that most of the GUI complexity stems from the problematic cross component communication. What seems like a simple button change on the screen could be a lot more convoluted change due to problematic component wiring that happens in the background (see also &lt;a href=&quot;https://blog.royalsloth.eu/posts/its-just-a-button/&quot;&gt;It’s just a button&lt;/a&gt;). Just because the components are displayed close together on the screen doesn’t mean that wiring them together will be easy.&lt;/p&gt;
&lt;p&gt;Either class based component modelling is not as appropriate as we would like to think, or we simply haven’t figured out the right abstractions that would allow us to easily connect different chunks of the application together. I’d love to hear what the functional programming camp has to say about this problem, but I guess they are too busy with inventing yet another $20 term for a 5 cent concept.&lt;/p&gt;
&lt;p&gt;There is also another way of making GUIs called Immediate Mode that is commonly used for drawing user interfaces in games. In this mode the GUI components are no longer subscribing and waiting for events to come, but are instead a part of the main loop that runs at 60 fps and re-render themselves based on the current “global” state. One notable example of such immediate mode UI framework would be &lt;a href=&quot;https://github.com/ocornut/imgui&quot;&gt;Dear ImGui&lt;/a&gt; and according to the &lt;a href=&quot;https://github.com/ocornut/imgui/issues/3488&quot;&gt;ImGui gallery&lt;/a&gt; it seems to be a perfectly fine way of doing non trivial and performant GUIs. Immediate Mode GUIs somehow never reached the critical mass and you are probably not going to find it outside of the games industry.&lt;/p&gt;
&lt;p&gt;As far as the common saying goes, don’t complain to your boss about the problem without providing at least one solution. I don’t have a boss and I don’t have a solution.&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] Yeah, yeah not everyone is using type safe language. Some are also trying to outsmart compilers with unit tests - see also &lt;a href=&quot;http://evanfarrer.blogspot.com/2012/06/unit-testing-isnt-enough-you-need.html&quot;&gt;Unit testing is not enough. You need static typing too&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;[2] Talking about MVC usually spawns a heated debate where the business logic of your component should be present, but let’s not go into that because in reality it doesn’t really matter. The messy complexity of this world has to live somewhere regardless of how you call that component.&lt;/p&gt;
</description>
<pubDate>Sun, 14 Feb 2021 10:41:33 +0000</pubDate>
<dc:creator>yes_but_no</dc:creator>
<og:title>The complexity that lives in the GUI</og:title>
<og:image>https://blog.royalsloth.eu/images/logoOpenGraphImage_min.png</og:image>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.royalsloth.eu/posts/the-complexity-that-lives-in-the-gui/</dc:identifier>
</item>
<item>
<title>“Location-Based Pay” – Who Are You to Complain?</title>
<link>https://blackshaw.substack.com/p/pay</link>
<guid isPermaLink="true" >https://blackshaw.substack.com/p/pay</guid>
<description>&lt;div class=&quot;captioned-image-container&quot;&gt;&lt;a class=&quot;image-link image2 image2-667-1000&quot; target=&quot;_blank&quot; href=&quot;https://cdn.substack.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F146b234d-73fa-46df-89c7-d19c606a9324_1000x667.jpeg&quot;&gt;&lt;img src=&quot;https://cdn.substack.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F146b234d-73fa-46df-89c7-d19c606a9324_1000x667.jpeg&quot; data-attrs=&quot;{&amp;quot;src&amp;quot;:&amp;quot;https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/146b234d-73fa-46df-89c7-d19c606a9324_1000x667.jpeg&amp;quot;,&amp;quot;height&amp;quot;:667,&amp;quot;width&amp;quot;:1000,&amp;quot;resizeWidth&amp;quot;:null,&amp;quot;bytes&amp;quot;:null,&amp;quot;alt&amp;quot;:&amp;quot;macbook pro on brown wooden table&amp;quot;,&amp;quot;title&amp;quot;:null,&amp;quot;type&amp;quot;:null,&amp;quot;href&amp;quot;:null}&quot; alt=&quot;macbook pro on brown wooden table&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p&gt;Should remote workers have their pay reduced if they move somewhere cheap? It’s a &lt;a href=&quot;https://sifted.eu/articles/remote-work-pay-debate/&quot;&gt;popular debate&lt;/a&gt; as COVID ravages the world of work. Facebook, one of many giants to be shifting permanently to a more remote-friendly culture, has &lt;a href=&quot;https://www.cnbc.com/2020/05/21/zuckerberg-50percent-of-facebook-employees-could-be-working-remotely.html&quot;&gt;announced&lt;/a&gt; that those who move to lower-priced locales will have their salaries reduced accordingly.&lt;/p&gt;
&lt;p&gt;Some call this unfair, and they’re probably right. Here’s a &lt;a href=&quot;https://news.ycombinator.com/item?id=23264666&quot;&gt;representative comment&lt;/a&gt; from Hacker News:&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;Let’s say you hire me for your company in San Francisco and pay me $150K. You’ve made a calculation: my value to the company is greater than $150K, and $150K is a price you’re willing to pay to leverage that value.&lt;/p&gt;
&lt;p&gt;… But now if I decide to move to Tulsa, OK, you want to cut my pay and reduce it to 90K, because of “cost of living”.&lt;/p&gt;
&lt;p&gt;Why? My value to the company hasn’t changed! I am still worth the same amount as I was before! The only thing that changed is where I choose to reside. What difference is that to the company?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s not an unreasonable point, and I have to wonder if “location-based pay” works in both directions. I live in suburban London, ten-ish Tube stops from the belly of the beast. If I worked remotely for Facebook and wanted to move somewhere central where rents are three times higher, would Zuck give me a raise? Somehow I doubt it.&lt;/p&gt;

&lt;p&gt;I’d love to live far away from San Francisco while making an SF salary (or indeed while not making one), and I’ll advocate huge paycheques for software engineers for as long as that’s in my self-interest, but many before me have made the obvious point about market reality. You don’t get paid what you’re “worth”, you get paid what it takes to make you do the job, and not every CEO is Jason Fried. Companies reduce your pay because they can.&lt;/p&gt;
&lt;p&gt;But there’s another point I haven’t seen get as much attention: what right do any of us in the rich world have to complain about “location-based pay”?&lt;/p&gt;
&lt;p class=&quot;button-wrapper&quot; data-attrs=&quot;{&amp;quot;url&amp;quot;:&amp;quot;https://blackshaw.substack.com/p/pay?&amp;amp;utm_source=substack&amp;amp;utm_medium=email&amp;amp;utm_content=share&amp;amp;action=share&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Share&amp;quot;,&amp;quot;class&amp;quot;:null}&quot;&gt;&lt;a class=&quot;button primary&quot; href=&quot;https://blackshaw.substack.com/p/pay?&amp;amp;utm_source=substack&amp;amp;utm_medium=email&amp;amp;utm_content=share&amp;amp;action=share&quot;&gt;&lt;span&gt;Share&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The label in my shirt says &lt;em&gt;Made in China&lt;/em&gt;. Likewise for my jacket, and my jeans were made in Bangladesh. “Equal pay for equal work” is a nice idea, but I don’t think we apply it universally.&lt;/p&gt;
&lt;p&gt;The average Chinese textile worker makes &lt;a href=&quot;https://www.salaryexpert.com/salary/job/textile-worker/china&quot;&gt;something like&lt;/a&gt; 4,000¥ a month ($620 US). In Bangladesh it’s &lt;a href=&quot;https://www.theguardian.com/business/2019/jan/21/low-wages-garment-workers-bangladesh-analysis&quot;&gt;not much more&lt;/a&gt; than 8,000 Tk ($95), and in Vietnam, another major textile exporter, it &lt;a href=&quot;https://www.statista.com/statistics/1102328/vietnam-monthly-wage-in-garment-sector-by-region/&quot;&gt;might be&lt;/a&gt; 4 million đ ($175). I don’t have to look it up to know that similar jobs pay many, many multiples of that in Europe and North America, to say nothing of the difference in working conditions. And clothing is far from the only thing we import from poorer countries at scale.&lt;/p&gt;
&lt;p&gt;I can imagine if third-world factory workers had an equivalent of Hacker News, they might write posts like this:&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;Let’s say I manufacture a shirt in San Francisco and you buy it for $100. You’ve made a calculation: the shirt’s value to you is greater than $100, and $100 is a price you’re willing to pay to wear it.&lt;/p&gt;
&lt;p&gt;But now if I decide to make the shirt in Dhaka, Bangladesh, you want to cut the price and reduce it to $20, because of “cost of living” for the workers on the assembly line.&lt;/p&gt;
&lt;p&gt;Why? The shirt hasn’t changed! It’s still worth the same amount as it was before! The only thing that changed is where I choose to locate the factory. What difference is that to the wearer?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quite. I don’t have a good answer to this, but I buy Chinese- and Bangladeshi-manufactured clothes anyway. Much else of what I purchase - food, toiletries, furniture, electronics - was grown or built in a faraway country for cheap, and I bet your shopping habits are similar. I’m not sure how much it would cost to make all of our goodies in jobs that a middle-class Brit like me would accept for himself, but it would probably add tens of thousands of pounds/dollars/euros a year to the average household budget.&lt;/p&gt;
&lt;p&gt;I’m not here to make any grand pronouncements about globalisation. I have no idea what the solution is to big structural inequalities, and I know it’s not as simple as just closing down the “sweatshops” as if this will make their workers rich.&lt;/p&gt;
&lt;p&gt;My only point is that, when it comes to “location-based pay”, maybe we should be careful what we wish for. Paying people according to where they live might not be fair, but who are the real winners and losers?&lt;/p&gt;
&lt;p class=&quot;button-wrapper&quot; data-attrs=&quot;{&amp;quot;url&amp;quot;:&amp;quot;https://blackshaw.substack.com/p/pay?&amp;amp;utm_source=substack&amp;amp;utm_medium=email&amp;amp;utm_content=share&amp;amp;action=share&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Share&amp;quot;,&amp;quot;class&amp;quot;:null}&quot;&gt;&lt;a class=&quot;button primary&quot; href=&quot;https://blackshaw.substack.com/p/pay?&amp;amp;utm_source=substack&amp;amp;utm_medium=email&amp;amp;utm_content=share&amp;amp;action=share&quot;&gt;&lt;span&gt;Share&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;button-wrapper&quot; data-attrs=&quot;{&amp;quot;url&amp;quot;:&amp;quot;https://blackshaw.substack.com/p/pay/comments&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Leave a comment&amp;quot;,&amp;quot;class&amp;quot;:null}&quot;&gt;&lt;a class=&quot;button primary&quot; href=&quot;https://blackshaw.substack.com/p/pay/comments&quot;&gt;&lt;span&gt;Leave a comment&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;&lt;em&gt;Thanks for reading. For more, &lt;a href=&quot;https://twitter.com/gjblackshaw&quot;&gt;follow me on Twitter&lt;/a&gt; and &lt;a href=&quot;https://www.goodreads.com/user/show/36922594-george&quot;&gt;Goodreads&lt;/a&gt;, and please consider &lt;a href=&quot;https://blackshaw.substack.com/subscribe&quot;&gt;subscribing.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Image credit: Euan Cameron on &lt;a href=&quot;https://unsplash.com/photos/8p8SMv1dEwY&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 14 Feb 2021 10:35:16 +0000</pubDate>
<dc:creator>whoooooo123</dc:creator>
<og:url>https://blackshaw.substack.com/p/pay</og:url>
<og:type>article</og:type>
<og:title>&quot;Location-Based Pay&quot; - Who Are You to Complain?</og:title>
<og:description>I might regret writing this if I move out of London</og:description>
<og:image>https://cdn.substack.com/image/fetch/w_1200,c_limit,f_jpg,q_auto:good,fl_progressive:steep/https%3A%2F%2Fbucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com%2Fpublic%2Fimages%2F146b234d-73fa-46df-89c7-d19c606a9324_1000x667.jpeg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blackshaw.substack.com/p/pay</dc:identifier>
</item>
<item>
<title>Learn Functional Programming Visually</title>
<link>https://david-peter.de/cube-composer/</link>
<guid isPermaLink="true" >https://david-peter.de/cube-composer/</guid>
<description>&lt;div id=&quot;logo&quot;&gt;&lt;img src=&quot;https://david-peter.de/cube-composer/img/cube-composer.svg&quot; width=&quot;200&quot; height=&quot;35&quot; alt=&quot;cube composer&quot;/&gt;&lt;/div&gt;
            &lt;div id=&quot;panel&quot;&gt;
                &lt;b&gt;Choose level:&lt;/b&gt;&lt;br/&gt;&lt;b&gt;Goal:&lt;/b&gt;
                
                
            &lt;/div&gt;
            &lt;div id=&quot;message&quot;&gt;
                &lt;span id=&quot;solved&quot; class=&quot;animated&quot;&gt;Solved ✓&lt;/span&gt;
                &lt;div class=&quot;buttons&quot;&gt;&lt;a id=&quot;nextlevel&quot; class=&quot;button&quot;&gt;&lt;u&gt;N&lt;/u&gt;ext level&lt;/a&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;canvas id=&quot;canvas&quot; width=&quot;1600&quot; height=&quot;860&quot;/&gt;&lt;div id=&quot;controls&quot;&gt;
                &lt;div class=&quot;controlBox left&quot;&gt;
                    &lt;ul id=&quot;available&quot; class=&quot;sortable&quot;/&gt;&lt;/div&gt;
                &lt;div class=&quot;controlBox right&quot;&gt;
                    &lt;ul id=&quot;program&quot; class=&quot;sortable&quot;/&gt;&lt;div class=&quot;buttons&quot;&gt;
                        &lt;a class=&quot;button&quot; id=&quot;reset&quot;&gt;&lt;u&gt;R&lt;/u&gt;eset&lt;/a&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;p class=&quot;footer&quot;&gt;
                A game by &lt;a href=&quot;https://david-peter.de/&quot;&gt;David Peter&lt;/a&gt;. Source code on &lt;a href=&quot;https://github.com/sharkdp/cube-composer&quot;&gt;GitHub&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;
        </description>
<pubDate>Sun, 14 Feb 2021 10:25:26 +0000</pubDate>
<dc:creator>polyrand</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://david-peter.de/cube-composer/</dc:identifier>
</item>
<item>
<title>GTA III and Vice City fully reverse engineered: re3</title>
<link>https://github.com/GTAmodding/re3</link>
<guid isPermaLink="true" >https://github.com/GTAmodding/re3</guid>
<description>&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/GTAmodding/re3/blob/master/logo.png?raw=true&quot;&gt;&lt;img src=&quot;https://github.com/GTAmodding/re3/raw/master/logo.png?raw=true&quot; alt=&quot;re3 logo&quot; width=&quot;200&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://actions-badge.atrox.dev/GTAmodding/re3/goto?ref=master&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8099df99f34b77b423fd8042ae77f81c6b7f219dc34adcc5e0c6eea3853b0915/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e742e7376673f75726c3d6874747073253341253246253246616374696f6e732d62616467652e6174726f782e6465762532464754416d6f6464696e6725324672653325324662616467652533467265662533446d6173746572267374796c653d666c6174&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2FGTAmodding%2Fre3%2Fbadge%3Fref%3Dmaster&amp;amp;style=flat&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://discord.gg/ERYg58ttcE&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/07de2d553fc3bf803b25eb15384611ac5c1749287cbcb4998bb4ccaf71c71395/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646973636f72642d6a6f696e2d3732383944412e7376673f6c6f676f3d646973636f7264266c6f6e6743616368653d74727565267374796c653d666c6174&quot; data-canonical-src=&quot;https://img.shields.io/badge/discord-join-7289DA.svg?logo=discord&amp;amp;longCache=true&amp;amp;style=flat&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this repository you'll find the fully reversed source code for GTA III (&lt;a href=&quot;https://github.com/GTAmodding/re3/tree/master/&quot;&gt;master&lt;/a&gt; branch) and GTA VC (&lt;a href=&quot;https://github.com/GTAmodding/re3/tree/miami/&quot;&gt;miami&lt;/a&gt; branch).&lt;/p&gt;
&lt;p&gt;It has been tested and works on Windows, Linux and FreeBSD, on x86, amd64, arm and arm64.&lt;br/&gt;Rendering is handled either by original RenderWare (D3D8) or the reimplementation &lt;a href=&quot;https://github.com/aap/librw&quot;&gt;librw&lt;/a&gt; (D3D9, OpenGL 2.1 or above, OpenGL ES 2.0 or above).&lt;br/&gt;Audio is done with MSS (using dlls from original GTA) or OpenAL.&lt;/p&gt;
&lt;p&gt;The project has also been ported to the &lt;a href=&quot;https://github.com/AGraber/re3-nx/&quot;&gt;Nintendo Switch&lt;/a&gt;, &lt;a href=&quot;https://github.com/Rinnegatamante/re3&quot;&gt;Playstation Vita&lt;/a&gt; and &lt;a href=&quot;https://github.com/GaryOderNichts/re3-wiiu/&quot;&gt;Nintendo Wii U&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We cannot build for PS2 or Xbox yet. If you're interested in doing so, get in touch with us.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;re3 requires PC game assets to work, so you &lt;strong&gt;must&lt;/strong&gt; own &lt;a href=&quot;https://store.steampowered.com/app/12100/Grand_Theft_Auto_III/&quot; rel=&quot;nofollow&quot;&gt;a copy of GTA III&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Build re3 or download the latest nightly build:
&lt;/li&gt;
&lt;li&gt;Extract the downloaded zip over your GTA 3 directory and run re3. The zip includes the gamefiles and in case of OpenAL the required dlls.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/1521437/107704085-fbdabd00-6cbc-11eb-8406-8951a80ccb16.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1521437/107704085-fbdabd00-6cbc-11eb-8406-8951a80ccb16.png&quot; alt=&quot;re3 2021-02-11 22-57-03-23&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/1521437/107703339-cbdeea00-6cbb-11eb-8f0b-07daa105d470.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1521437/107703339-cbdeea00-6cbb-11eb-8f0b-07daa105d470.png&quot; alt=&quot;re3 2021-02-11 22-43-44-98&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/1521437/107703343-cd101700-6cbb-11eb-9ccd-012cb90524b7.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1521437/107703343-cd101700-6cbb-11eb-9ccd-012cb90524b7.png&quot; alt=&quot;re3 2021-02-11 22-46-33-76&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://user-images.githubusercontent.com/1521437/107703348-d00b0780-6cbb-11eb-8afd-054249c2b95e.png&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1521437/107703348-d00b0780-6cbb-11eb-8afd-054249c2b95e.png&quot; alt=&quot;re3 2021-02-11 22-50-29-54&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;p&gt;We have implemented a number of changes and improvements to the original game. They can be configured in &lt;code&gt;core/config.h&lt;/code&gt;. Some of them can be toggled at runtime, some cannot.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fixed a lot of smaller and bigger bugs&lt;/li&gt;
&lt;li&gt;User files (saves and settings) stored in GTA root directory&lt;/li&gt;
&lt;li&gt;Settings stored in re3.ini file instead of gta3.set&lt;/li&gt;
&lt;li&gt;Debug menu to do and change various things (Ctrl-M to open)&lt;/li&gt;
&lt;li&gt;Debug camera (Ctrl-B to toggle)&lt;/li&gt;
&lt;li&gt;Rotatable camera&lt;/li&gt;
&lt;li&gt;XInput controller support (Windows)&lt;/li&gt;
&lt;li&gt;No loading screens between islands (&quot;map memory usage&quot; in menu)&lt;/li&gt;
&lt;li&gt;Skinned ped support (models from Xbox or Mobile)&lt;/li&gt;
&lt;li&gt;Rendering
&lt;ul&gt;&lt;li&gt;Widescreen support (properly scaled HUD, Menu and FOV)&lt;/li&gt;
&lt;li&gt;PS2 MatFX (vehicle reflections)&lt;/li&gt;
&lt;li&gt;PS2 alpha test (better rendering of transparency)&lt;/li&gt;
&lt;li&gt;PS2 particles&lt;/li&gt;
&lt;li&gt;Xbox vehicle rendering&lt;/li&gt;
&lt;li&gt;Xbox world lightmap rendering (needs Xbox map)&lt;/li&gt;
&lt;li&gt;Xbox ped rim light&lt;/li&gt;
&lt;li&gt;Xbox screen rain droplets&lt;/li&gt;
&lt;li&gt;More customizable colourfilter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Menu
&lt;ul&gt;&lt;li&gt;Map&lt;/li&gt;
&lt;li&gt;More options&lt;/li&gt;
&lt;li&gt;Controller configuration menu&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Can load DFFs and TXDs from other platforms, possibly with a performance penalty&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;To-Do&lt;/h2&gt;
&lt;p&gt;The following things would be nice to have/do:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fix physics for high FPS&lt;/li&gt;
&lt;li&gt;Improve performance on lower end devices, especially the OpenGL layer on the Raspberry Pi (if you have experience with this, please get in touch)&lt;/li&gt;
&lt;li&gt;Compare code with PS2 code (tedious, no good decompiler)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GTAmodding/re3/wiki/PS2-port&quot;&gt;PS2 port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Xbox port (not quite as important)&lt;/li&gt;
&lt;li&gt;reverse remaining unused/debug functions&lt;/li&gt;
&lt;li&gt;compare CodeWarrior build with original binary for more accurate code (very tedious)&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Modding&lt;/h2&gt;
&lt;p&gt;Asset modifications (models, texture, handling, script, ...) should work the same way as with original GTA for the most part.&lt;/p&gt;
&lt;p&gt;Mods that make changes to the code (dll/asi, CLEO, limit adjusters) will &lt;em&gt;not&lt;/em&gt; work. Some things these mods do are already implemented in re3 (much of SkyGFX, GInput, SilentPatch, Widescreen fix), others can easily be achieved (increasing limis, see &lt;code&gt;config.h&lt;/code&gt;), others will simply have to be rewritten and integrated into the code directly. Sorry for the inconvenience.&lt;/p&gt;
&lt;h2&gt;Building from Source&lt;/h2&gt;
&lt;p&gt;When using premake, you may want to point GTA_III_RE_DIR environment variable to GTA3 root folder if you want the executable to be moved there via post-build script.&lt;/p&gt;
&lt;p&gt;Clone the repository with &lt;code&gt;git clone --recursive https://github.com/GTAmodding/re3.git&lt;/code&gt;. Then &lt;code&gt;cd re3&lt;/code&gt; into the cloned repository.&lt;/p&gt;
&lt;details readability=&quot;2.2153846153846&quot;&gt;Linux Premake
&lt;p&gt;For Linux using premake, proceed: &lt;a href=&quot;https://github.com/GTAmodding/re3/wiki/Building-on-Linux&quot;&gt;Building on Linux&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;&lt;details readability=&quot;7&quot;&gt;Linux Conan
&lt;p&gt;Install python and conan, and then run build.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;conan export vendor/librw librw/master@
mkdir build
cd build
conan install .. re3/master@ -if build -o re3:audio=openal -o librw:platform=gl3 -o librw:gl3_gfxlib=glfw --build missing -s re3:build_type=RelWithDebInfo -s librw:build_type=RelWithDebInfo
conan build .. -if build -bf build -pf package
&lt;/code&gt;
&lt;/pre&gt;&lt;/details&gt;&lt;details readability=&quot;2.0952380952381&quot;&gt;FreeBSD
&lt;p&gt;For FreeBSD using premake, proceed: &lt;a href=&quot;https://github.com/GTAmodding/re3/wiki/Building-on-FreeBSD&quot;&gt;Building on FreeBSD&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;&lt;details readability=&quot;5.7810945273632&quot;&gt;Windows
&lt;p&gt;Assuming you have Visual Studio 2015/2017/2019:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Run one of the &lt;code&gt;premake-vsXXXX.cmd&lt;/code&gt; variants on root folder.&lt;/li&gt;
&lt;li&gt;Open build/re3.sln with Visual Studio and compile the solution.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Microsoft recently discontinued its downloads of the DX9 SDK. You can download an archived version here: &lt;a href=&quot;https://archive.org/details/dxsdk_jun10&quot; rel=&quot;nofollow&quot;&gt;https://archive.org/details/dxsdk_jun10&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you choose OpenAL on Windows&lt;/strong&gt; You must read &lt;a href=&quot;https://github.com/GTAmodding/re3/wiki/Running-OpenAL-build-on-Windows&quot;&gt;Running OpenAL build on Windows&lt;/a&gt;.&lt;/p&gt;
&lt;/details&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;ℹ️ premake has an &lt;code&gt;--lto&lt;/code&gt; option if you want the project to be compiled with Link Time Optimization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;5.4074074074074&quot;&gt;
&lt;p&gt;ℹ️ There are various settings in &lt;a href=&quot;https://github.com/GTAmodding/re3/tree/master/src/core/config.h&quot;&gt;config.h&lt;/a&gt;, you may want to take a look there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;7.8&quot;&gt;
&lt;p&gt;ℹ️ re3 uses completely homebrew RenderWare-replacement rendering engine; &lt;a href=&quot;https://github.com/aap/librw/&quot;&gt;librw&lt;/a&gt;. librw comes as submodule of re3, but you also can use LIBRW enviorenment variable to specify path to your own librw.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you feel the need, you can also use CodeWarrior 7 to compile re3 using the supplied codewarrior/re3.mcp project - this requires the original RW33 libraries, and the DX8 SDK. The build is unstable compared to the MSVC builds though, and is mostly meant to serve as a reference.&lt;/p&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We have a &lt;a href=&quot;https://github.com/GTAmodding/re3/blob/master/CODING_STYLE.md&quot;&gt;Coding Style&lt;/a&gt; document that isn't followed or enforced very well.&lt;/p&gt;
&lt;p&gt;Do not use features from C++11 or later.&lt;/p&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;re3 was started sometime in the spring of 2018, initially as a way to test reversed collision and physics code inside the game. This was done by replacing single functions of the game with their reversed counterparts using a dll.&lt;/p&gt;
&lt;p&gt;After a bit of work the project lay dormant for about a year and was picked up again and pushed to github in May 2019. At the time I (aap) had reversed around 10k lines of code and estimated the final game to have around 200-250k. Others quickly joined the effort (Fire_Head, shfil, erorcun and Nick007J in time order, and Serge a bit later) and we made very quick progress throughout the summer of 2019 after which the pace slowed down a bit.&lt;/p&gt;
&lt;p&gt;Due to everyone staying home during the start of the Corona pandemic everybody had a lot of time to work on re3 again and we finally got a standalone exe in April 2020 (around 180k lines by then).&lt;/p&gt;
&lt;p&gt;After the initial excitement and fixing and polishing the code further, reVC was started in early May 2020 by starting from re3 code, not by starting from scratch replacing functions with a dll. After a few months of mostly steady progress we considered reVC finished in December.&lt;/p&gt;
&lt;p&gt;Since then we have started reLCS, which is currently work in progress.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;We don't feel like we're in a position to give this code a license.&lt;br/&gt;The code should only be used for educational, documentation and modding purposes.&lt;br/&gt;We do not encourage piracy or commercial use.&lt;br/&gt;Please keep derivate work open source and give proper credit.&lt;/p&gt;
</description>
<pubDate>Sun, 14 Feb 2021 07:10:07 +0000</pubDate>
<dc:creator>blewboarwastake</dc:creator>
<og:image>https://avatars.githubusercontent.com/u/24976438?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>GTAmodding/re3</og:title>
<og:url>https://github.com/GTAmodding/re3</og:url>
<og:description>GTA III, Vice City. Contribute to GTAmodding/re3 development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/GTAmodding/re3</dc:identifier>
</item>
<item>
<title>Racket v8.0</title>
<link>https://blog.racket-lang.org/2021/02/racket-v8-0.html</link>
<guid isPermaLink="true" >https://blog.racket-lang.org/2021/02/racket-v8-0.html</guid>
<description>&lt;div id=&quot;&quot;&gt;&lt;p class=&quot;date-and-tags&quot;&gt;13 Feb 2021&lt;/p&gt;
&lt;header&gt;
&lt;/header&gt;&lt;p&gt;&lt;em&gt;posted by John Clements&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Racket version 8.0 is now available from &lt;a href=&quot;https://racket-lang.org/&quot;&gt;https://racket-lang.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;* Racket 8.0 is here!&lt;/strong&gt;*&lt;/p&gt;
&lt;p&gt;Racket 8.0 marks the first release where Racket CS is the default implementation. Creating, polishing, and adopting Racket CS has been a 4-year effort involving the entire Racket community. At this point, Racket CS is faster, easier to maintain and develop, and compatible with existing Racket programs. Racket CS will continue to improve, but at this point it is ready to be the primary variant of Racket for all Racketeers. More details about the current state of Racket CS are available in the recent &lt;a href=&quot;https://blog.racket-lang.org/2021/01/racket-status.html&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other notable changes:&lt;/p&gt;
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Racket CS has better parallel garbage collection, a 10%–30% reduction in the size of generated code, and various targeted optimizations.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;A rewrite of the test-engine package allows the &lt;code&gt;#lang&lt;/code&gt; versions of teaching languages to produce linked test-failure messages.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The release comes with a new mark-up DSL for composing text to appear in the REPL (simple-tree-text-markup).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Redex has an added &lt;code&gt;define-overriding-judgment&lt;/code&gt; form and improved error source location reporting.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Windows scrolling speed reflects the system preference.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The db package uses the utf8mb4 charset for MySQL connections.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The following people contributed to this release:&lt;/p&gt;
&lt;p&gt;Alex Harsányi, Alex Knauth, Alexander Shopov, Alexis King, Bert De Ketelaere, Bogdan Popa, Cameron Moy, David Van Horn, Davis Silverman, Dominik Pantůček, Florian Weimer, Fred Fu, Gustavo Massaccesi, Jack Firth, James Wilcox, Joel Dueck, John Clements, Jonathan Chan, Lîm Tsú-thuàn, Mark, Matthew Flatt, Matthias Felleisen, Michael Ballantyne, Mike Sperber, Paulo Matos, Pavel Panchekha, Peter Zhong, Phil Nguyen, Philip McGrath, Robby Findler, Ryan Culpepper, Sam Tobin-Hochstadt, Sergiu Ivanov, Shu-Hung You, Sorawee Porncharoenwase, Stefan Schwarzer, Stephen Chang, Stephen De Gabrielle, Walter H. Yang, WarGrey Gyoudmon Ju, kurinoku, xxyzz, and yjqww6&lt;/p&gt;
&lt;footer&gt;
&lt;/footer&gt;&lt;/div&gt;&lt;p&gt;Made with &lt;a href=&quot;https://github.com/greghendershott/frog&quot;&gt;Frog&lt;/a&gt;, a static-blog generator written in Racket.&lt;br/&gt;&lt;a href=&quot;https://github.com/racket/racket-lang-org&quot;&gt;Source code&lt;/a&gt; for this blog.&lt;/p&gt;</description>
<pubDate>Sun, 14 Feb 2021 03:46:11 +0000</pubDate>
<dc:creator>azhenley</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.racket-lang.org/2021/02/racket-v8-0.html</dc:identifier>
</item>
<item>
<title>On navigating a large codebase</title>
<link>https://blog.royalsloth.eu/posts/on-navigating-a-large-codebase/</link>
<guid isPermaLink="true" >https://blog.royalsloth.eu/posts/on-navigating-a-large-codebase/</guid>
<description>&lt;p&gt;A while ago, I’ve been working on a very large codebase that consisted of a few million lines of code. Large systems are usually a big mess and this one was no exception. Since this is a rather common problem in software engineering, I thought the internet would be littered with stories about this topic. There is a lot of talk about software carpentry, while software maintenance is rarely debated. Either large programs are being maintained by dark matter developers or nobody thinks that writing stories about large systems are interesting enough.&lt;/p&gt;
&lt;p&gt;In the past I’ve encountered a few of those large monsters and they seem to have a lot in common. This article will try to present some of the problems and tricks that I am using when I have to deal with them. Hopefully this will inspire others to write similar posts and share tips from their own bag of tricks.&lt;/p&gt;
&lt;h2 id=&quot;large-codebase-problems&quot;&gt;Large codebase problems&lt;/h2&gt;
&lt;p&gt;The main problem of any large codebase is the extreme complexity that stems from the fact that we live in a messy world of details that are very hard to describe and put into words. The programming languages that we are using nowadays are still too primitive for that task, and it takes a lot of lines and various layers of abstractions before we are able to convey the rules of our world to the all mighty computer [1].&lt;/p&gt;
&lt;p&gt;The following sections will present some of the common problems which I’ve discovered during my big system adventures.&lt;/p&gt;
&lt;h3 id=&quot;size-related-problems&quot;&gt;Size related problems&lt;/h3&gt;
&lt;p&gt;A common trait of a large codebases is that at some point they become so large and bloated that one person alone is no longer capable of understanding all its pieces. It seems to me that after 100’000 lines of code, the maintenance related problems start to appear as the complexity of the code simply dwarfs the capabilities of the human brain. Such large systems are commonly maintained by more than one person, but with a large group of people also come large organizational problems.&lt;/p&gt;
&lt;p&gt;Within a large group of people the number of possible communication paths between them go bananas and so it often happens that the ass no longer knows what the head is doing. This misunderstanding in turn cause them to build the wrong thing that doesn’t fit into the rest of the system. You might also know this situation under the term of “those people had no idea what they were doing, and we will do it right this time” which is quite often floating around in the latest maintenance team.&lt;/p&gt;
&lt;p&gt;That rarely happens though, because it’s likely the Towel of Babel situation all over again.&lt;/p&gt;
&lt;h3 id=&quot;loss-of-knowledge&quot;&gt;Loss of knowledge&lt;/h3&gt;
&lt;p&gt;Large systems are usually maintained by the ones who did not build them. Initial developers often leave the company or move up in the pecking order to work on other projects and are therefore no longer familiar with the system. Sometimes the bright minds outsourced the initial development of the project in the name of lowering the costs, just to pay tenfold in the later stages once they realize the outsourcers developed the wrong thing. Even worse is the fact that the in house developers didn’t gain the internal domain knowledge that is necessary for further maintenance of the system.&lt;/p&gt;
&lt;p&gt;This presents a big problem for the new maintainers, as they can’t just go around the company and ask the original developers about the initial design decisions. Learning this tribal knowledge usually takes a lot of time, because the code is harder to read and understand than it is to write. These days most developers seem to switch jobs every 2 to 3 years, therefore the learning process has to be constantly going on, otherwise you might end up with a large and expensive monster that nobody knows anything about [2]. For most of the past large projects on which I’ve been working on, the team has usually changed by the end of the first version.&lt;/p&gt;
&lt;p&gt;Rigorously documenting every step is not the cure for this problem, because at some point all that junk will become outdated and nobody will have the time to spend a year just reading the documentation and figuring out how the pieces fit together [3].&lt;/p&gt;
&lt;h3 id=&quot;lack-of-knowledge&quot;&gt;Lack of knowledge&lt;/h3&gt;
&lt;p&gt;Large systems become large, because they are usually trying to solve every problem under the sun. Often the organization that is embarking on such journey does not have enough experienced employees on board to actually pull it off. Some like to say that pressure makes diamonds, but sometimes it also crushes the things that are under.&lt;/p&gt;
&lt;p&gt;It’s fine to have less experienced people working on a large system as long as they have the elders overseeing their work. In the world where senior titles are handed left and right, that is often not the case and it’s how you end up with a very fragile system that is suitable for a replacement as soon as it was built. Most of the larger projects that I was working on and were considered successes, had the core parts of the system written by experienced developers. A significant chunks were also built by greenhorns, but they were usually guided and their blast radius was limited to the less complex parts of the system.&lt;/p&gt;
&lt;h3 id=&quot;the-astronauts&quot;&gt;The astronauts&lt;/h3&gt;
&lt;p&gt;Big projects tend to attract the data modelers and other cultists who like to get in the way of getting shit done. These architecture astronauts will endlessly discuss the finer points of their UML data models and multithreaded layers of abstraction, that will one day allow them to be the heroes of their own story by writing some well encapsulated and “SOLID” code.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Why IBM sales reps don’t have children?&lt;/p&gt;
&lt;p&gt;Because all they do is sit on the bed telling their spouses how great it’s going to be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Meanwhile, the for loopers have to fight this creeping metadata bureaucracy madness on a daily basis. The tools handed down to them from the ivory tower usually don’t stand the heat of the battle, but that doesn’t bother the modelers who will try to fix the problems with more obfuscation patterns. It’s how you end with a homebrewed middleware monstrosity, because the 100 existing ones out there are obviously not up to the task of powering our little CRUD app.&lt;/p&gt;
&lt;h3 id=&quot;documentation-problems&quot;&gt;Documentation problems&lt;/h3&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;I like to keep documentation separated from the code. Who am I?&lt;/p&gt;
&lt;p&gt;A fool, with an out of sync document.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The documentation of any large system is almost always outdated. The code is usually changing faster due to the endless edge cases of the system that were not being thought of early on. The discovered edge case problems are usually fixed by bolting additional functionality right on the spot. The average code change of such patch is usually quite small, but a few tweaks here and there accumulate over time until the original design no longer matches with the reality.&lt;/p&gt;
&lt;p&gt;Tweaking the code is usually simple as most people are familiar with the process. You pull the code from the version control, you make your tweaks and then you push it back. On the other hand updating the documentation is way more convoluted and usually involves the whole ceremony, because the term documentation is actually a spaghetti of Word documents, pdfs, spreadsheets, emails, wiki pages and some text files on some dude’s hard drive.&lt;/p&gt;
&lt;p&gt;The corporate world still loves to use MS Word for writing technical documents, even though it’s entirely unusable for this use case. The Word doesn’t support syntax highlighting for code snippets and you get to play the game of “moving one image for 5 pixels to the left will mess with your headings and right align all text.” It also makes it very hard to have multiple people collaborating on the same document. The version control still treats Word documents in the same way as binary blobs, which makes merging changes and fixing merge conflicts far harder than it should be. I still remember how people collaborated by working each on their own copy of the document and having a documentation officer merging all the copies together manually to avoid any merge conflicts. Fun times.&lt;/p&gt;
&lt;p&gt;If you are lucky, you might be writing documentation in plain text, but then you may have to get familiar with all kinds of weird Lovecraftian toolchains that are relying on all sorts of ancient operating system specifics in order to produce a nicer looking document.&lt;/p&gt;
&lt;p&gt;After all these years of progress, writing documentation is still an unpleasant process due to all the pain surrounding the tools that we have to deal with on a daily basis. Large projects ensure that not only is the documentation hard to write, it’s also impossible to find and read due to the sheer number of documents [4].&lt;/p&gt;
&lt;h2 id=&quot;tackling-the-beast&quot;&gt;Tackling the beast&lt;/h2&gt;
&lt;p&gt;In this section I will describe my ways of tackling the problems of an unknown large codebase that I often encounter in the wild. As mentioned before, the main problem of large systems is that nobody can understand them entirely and often you will be left wondering how the damn thing even works.&lt;/p&gt;
&lt;p&gt;When you are trying to understand a specific part of a large system, it’s worth taking the time to talk to the current maintainers. They usually know it well enough to guide you through the jungle, so you can avoid the traps and get up to speed faster. Sometimes you will encounter a situation where you will just have to figure it out on your own, because nobody will have the answers to your questions.&lt;/p&gt;
&lt;p&gt;Hopefully the following sections might give you some ideas on how to tackle such situations.&lt;/p&gt;
&lt;h3 id=&quot;read-the-documentation&quot;&gt;Read the documentation&lt;/h3&gt;
&lt;p&gt;The easiest way to get familiar with a large system, is by going through its documentation and actually reading it. Large systems usually contain large swaths of outdated documentation, but even a slightly outdated document is often better than not having it at all. Ask the elders about the current state of documentation, so you don’t completely waste your time with deciphering the irrelevant documents.&lt;/p&gt;
&lt;p&gt;Either way, the documentation will only give you an overview of the system. The details behind design decisions are almost never mentioned and you will have to find another way.&lt;/p&gt;
&lt;h3 id=&quot;check-the-tests&quot;&gt;Check the tests&lt;/h3&gt;
&lt;p&gt;When I am trying to decipher how a specific part of the system is supposed to behave, I usually check for tests. If they exist, you might want to scroll through them and hopefully you will get another piece of the puzzle. Sometimes, when I am trying to figure out how to use some obscure unknown library, I try to write some simple learning tests that are using some methods from the library. If the tests are nowhere to be found, you can try to play with the debugger and step through the actual implementation code.&lt;/p&gt;
&lt;p&gt;The common advice on the internet regarding this topic is to always write the missing tests before modifying the unknown code, but that is usually easier said than done. On a large project you often won’t really know how the software is supposed to behave, but you will still be able to deduce the problem to a specific section that has to be changed. Writing the missing tests when you touch a section of code is a good idea, but more often than not, it’s not really feasible.&lt;/p&gt;
&lt;h3 id=&quot;limit-the-blast-radius&quot;&gt;Limit the blast radius&lt;/h3&gt;
&lt;p&gt;When you are trying to tweak the existing functionality of the system, you can probably track it down to just a few places in the code where that tweak is necessary. I usually study the code in those places until I figure out exactly which part should be modified and I ignore the rest of the system. Resist the temptation of fixing the parts that you find horrifying, because first you can’t fix it all and second you will get crushed by the complexity of the system. Mark those places down as a horrifying place to be and keep them in mind when it’s time to refactor.&lt;/p&gt;
&lt;p&gt;If you don’t know the code well enough, you might also break an otherwise working system. Sometimes obvious bugs in the code become an expected behavior that should stay that way even if it’s wrong. At some point somebody might have started to rely on the broken behavior and if you decide to “fix” the broken part, you might actually break an otherwise working system.&lt;/p&gt;
&lt;p&gt;Running the tests is a good way to ensure that your changes did not break anything, but make sure the tests are actually reliable. Far too often you will encounter unit tests with some shady mocks written by the unit test zealots who sleep well at night because they know their mocks are working.&lt;/p&gt;
&lt;h3 id=&quot;check-the-version-control-logs&quot;&gt;Check the version control logs&lt;/h3&gt;
&lt;p&gt;All large systems will have parts where a certain design decisions will not be documented and nobody will now why they were necessary or done that way. Version control usually contains a history of commit messages which may give you some hints for understanding the reasoning behind those decisions. This is why you can find so many blog posts advertising the importance of writing good commit messages.&lt;/p&gt;
&lt;p&gt;On smaller projects or when you are working alone, a good commit messages are not going make much difference. One person can only write so much code in one day of work and you can mostly figure out the intentions just by going through the source. If all else fails, you can still rewrite a small project in a reasonable time.&lt;/p&gt;
&lt;p&gt;On the other hand, large projects are unwieldy and rewrite is normally not economically viable. Taking the time to immortalize the intents of your changes in the commit logs might save your own ass six months down the road when you won’t remember a thing about the code that you have written.&lt;/p&gt;
&lt;h3 id=&quot;check-the-bug-reports&quot;&gt;Check the bug reports&lt;/h3&gt;
&lt;p&gt;Sometimes, the reasons behind a certain design decisions are stored in the past bug reports. Large projects will probably have some kind of a bug tracker with various discussions surrounding the reported bug. These bug reports might be accompanied with the hash of the commit that fixes the bug so you can go deeper into the forest in search for the truth.&lt;/p&gt;
&lt;p&gt;This is a bit more annoying process than going through the commit logs, as the bug trackers are normally not integrated with your editor of choice, but sometimes it’s the only way to obtain the missing piece of the puzzle.&lt;/p&gt;
&lt;h3 id=&quot;visualize&quot;&gt;Visualize&lt;/h3&gt;
&lt;p&gt;When I am struggling to understand how the pieces of system fit together, it usually helps me to visualize things. You don’t have to create a detailed UML diagram; in fact I don’t think I have ever seen an UML diagram that wasn’t a glorious cryptographic mess. Simple boxes and arrows will do just fine in most cases. For navigating through the unfamiliar code you may also use the tools that visualize the structure of the code (like &lt;a href=&quot;https://www.sourcetrail.com/&quot;&gt;SourceTrail&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If necessary, you can write your own tools for drawing such visualizations. For example, if you are trying to visualize a mesh of microservices you can write a script that will automatically generate a graph of service connections by parsing the configuration files of those services. I personally find such connection diagrams much easier to follow and understand than figuring it out through the source code alone.&lt;/p&gt;

&lt;p&gt;Commenting the code is one of the hot topics on which everybody will want to comment on. People will claim that a well written code doesn’t need comments, because its structure and naming conventions will tell you the whole story. Afterwards they will come up with a trivial hundred line example which will show you how much better the non commented code is in comparison to the nasty commented one.&lt;/p&gt;
&lt;p&gt;It’s a baloney that is perpetuated by the book sellers and consultants that no longer work in the trenches. It’s easy to preach and stick to the principles when you don’t have to shovel the dirt on the large system for years. You can rewrite any trivial code into something that doesn’t need comments. After all, most of these silly examples easily fit into your brain just by reading the source code once.&lt;/p&gt;
&lt;p&gt;The problems of non commented code only start to appear at scale, when you have a revolving door of variously skilled developers working on the same code for multiple years. In such case, no amount of cleaning your code and naming variables in this or that way will help you. A project of 10’000 lines behaves completely different in comparison to the project of 100’000 lines or the project of 1 million lines.&lt;/p&gt;
&lt;p&gt;Since the internal domain knowledge and the design decisions are getting lost over time, I like to make my life easier by documenting my decisions and other “trivia” that are not obvious from the code alone. A well placed comment right where the action is will save you a lot of time, because you won’t have to search through the mess of design documents which usually won’t contain the detail that you are looking for. You won’t be able to document all your design decisions just by carefully naming variables and neither will your coworkers and other clean code enthusiasts.&lt;/p&gt;
&lt;p&gt;When I am trying to add a functionality to the system and I realize that I am in an unfamiliar hard to understand territory, I like to put a trail of comments as I read through the code. I find such marked code much easier to understand and next time I have to go through that part, I can simply rely on the guiding comments as opposed to reading and understanding the entire source again.&lt;/p&gt;
&lt;p&gt;I hear you saying: “But the comments might be outdated or misleading, how can you claim to rely on the comments when in my entire career I have never seen one helpful comment?” If that’s the case, you can use the same strategy that you use for dealing with documentation. Finders changers. Revise and update the parts that are wrong, but the real question is: “How did those comments go wrong? You do have code reviews, don’t you?”&lt;/p&gt;
&lt;h3 id=&quot;learn-to-grep&quot;&gt;Learn to grep&lt;/h3&gt;
&lt;p&gt;I often want to know where a certain variable is used and how it is used. Sometimes the developers were to smart for their own good and will come up with an ingenious solutions that will trick your IDE in believing that the code is not used anywhere. This is particularly common in Java, where you will find ridiculous solutions glued together with a bunch of xml files that are spread throughout the entire project.&lt;/p&gt;
&lt;p&gt;Finding such documents manually is pretty much a hopeless task, but with grep this is a trivial thing to do. It’s worth spending some time learning the grep or similar CLI tools that can quickly find the files containing the relevant keywords you are looking for.&lt;/p&gt;
&lt;p&gt;Often you will want to look for a certain keyword across the entire documentation. If you are new to the project, you won’t really know which document is relevant for you. This is actually a much harder problem than you might think, as searching through non plain text files is a world of pain (see also &lt;a href=&quot;https://blog.royalsloth.eu/posts/the-power-of-text-files/&quot;&gt;The power of text files&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Don’t give up though. Word documents are just zip folders of xml files. If you extract them into plain xml files you can easily grep through that mess of content and layout. You might get fancy and use antiword tool instead. For searching through pdf documents you can use utilities like pdfgrep.&lt;/p&gt;
&lt;h3 id=&quot;use-the-ide&quot;&gt;Use the IDE&lt;/h3&gt;
&lt;p&gt;Sometimes you will encounter an old and undocumented codebase with nobody around to ask on how to approach your task. If you want a first hand experience you can try to write a Jenkins plugin. Jenkins is a really flexible continuous integration software that allows you to do everything, but at the same time it also fails to do anything and requires tons of plugins for even the most basic tasks.&lt;/p&gt;
&lt;p&gt;At some point I had to manage a large build pipeline that consisted of multiple job dependencies and somehow that plugin didn’t exist, so I’ve decided to write it (see &lt;a href=&quot;https://www.royalsloth.eu/products/depbuilder/&quot;&gt;DepBuilder - dependency builder for Jenkins&lt;/a&gt;). After spending some time reading the provided documentation for plugin development and poring over the code, I’ve realized it’s one big undocumented mess and the only way to figure out how it works is by trial and error and “reverse engineering” the actual functionality from other plugins.&lt;/p&gt;
&lt;p&gt;In a situations like that, an IDE with a decent autocomplete might help you decipher an otherwise impenetrable codebase. Press a dot and let the editor suggest you the possible options. Far too often I see people noodling around with some half assed vim plugins, as if struggling to get the task done makes you a real developer with chest hair and everything.&lt;/p&gt;
&lt;p&gt;There are people out there who are really productive with plain Emacs and nothing else (names like &lt;a href=&quot;https://en.wikipedia.org/wiki/Jonathan_Blow&quot;&gt;Jon Blow&lt;/a&gt; come to my mind), but unfortunately there are very few that are at that level of skill working in this industry. I’ve spent a lot of time maintaining my dotfiles until I’ve realized I was wasting so much time on the irrelevant nerd turf wars and that espoused productivity never really came around. A modern IDE with some custom key bindings will get you there way faster.&lt;/p&gt;
&lt;h2 id=&quot;it-takes-time&quot;&gt;It takes time&lt;/h2&gt;
&lt;p&gt;Regardless of how you tackle the problems of an unknown large system, keep in mind that large systems did not appear overnight. A lot of people spent a lot of time building them and there are hundreds of hidden edge cases bolted on top that are only there due to the problems that were discovered in production. If it takes a lot of time to build a large system, it also takes a lot of time to understand it.&lt;/p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] As you move through the ranks in the company, the higher you are, the more powerful language you are able to wield. In the beginning you are stuck working with primitive languages in which you have to specify every single detail. For example, if you are trying to read the contents of a file you have to specify exactly how you want that file to be read; either reading the entire file at once or iteratively line by line or character by character.&lt;/p&gt;
&lt;p&gt;As you move up into the higher levels of the foodchain, at some point you gain the access to the power of spoken language. At this level you no longer have to worry about every little detail, as you can simply blurt ambiguous things (like read this file) and it’s up to the grunts below to figure out the necessary details.&lt;/p&gt;

&lt;p&gt;[2] People usually don’t leave the company when everything is fine.&lt;/p&gt;

&lt;p&gt;[3] This loss of knowledge situation is not tied only to the programming world, because it happens everywhere and we as the society haven’t really figured it out how to pass the knowledge through generations. For more on this discussion, you might be interested in &lt;a href=&quot;https://www.youtube.com/watch?v=pW-SOdj4Kkk&quot;&gt;Preventing the Collapse of Civilization (Jon Blow)&lt;/a&gt; talk.&lt;/p&gt;

&lt;p&gt;[4] In 1980’s Tim Berners-Lee realized that the documents are hard to find at CERN, so he started imagining a system of interconnected documents that would supposedly solve this thorny problem for good. Nowadays we know this invention as the internet.&lt;/p&gt;
&lt;p&gt;Despite 40 years of improvements and the internet becoming a part of our daily life, we still face the same problems. You can talk to another person half way across the world while watching a funny cat videos, but somehow we still struggle with finding the important project documents.&lt;/p&gt;

&lt;p&gt;[Extra] You might be interested in reading the &lt;a href=&quot;https://blog.royalsloth.eu/articles/outOfTheTarPit.pdf&quot;&gt;Out of the Tar Pit&lt;/a&gt; article (532kB pdf) that thoroughly tackles problems of large-scale software systems.&lt;/p&gt;
</description>
<pubDate>Sun, 14 Feb 2021 02:41:49 +0000</pubDate>
<dc:creator>mooreds</dc:creator>
<og:title>On navigating a large codebase</og:title>
<og:image>https://blog.royalsloth.eu/images/logoOpenGraphImage_min.png</og:image>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.royalsloth.eu/posts/on-navigating-a-large-codebase/</dc:identifier>
</item>
</channel>
</rss>