<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Write Your Own Virtual Machine</title>
<link>https://justinmeiners.github.io/lc3-vm/</link>
<guid isPermaLink="true" >https://justinmeiners.github.io/lc3-vm/</guid>
<description>&lt;div class=&quot;section&quot; readability=&quot;76.738948250576&quot;&gt;
&lt;h4&gt;2. Introduction&lt;/h4&gt;
&lt;p&gt;In this tutorial, I will teach you how to write your own virtual machine (VM) that can run assembly language programs, such as my friend's &lt;a href=&quot;https://github.com/rpendleton/lc3-2048&quot;&gt;2048&lt;/a&gt; or my &lt;a href=&quot;https://github.com/justinmeiners/lc3-rogue&quot;&gt;Roguelike&lt;/a&gt;. If you know how to program, but would like to gain a deeper understanding of what is going on inside a computer and better understand how programming languages work, then this project is for you. Writing your own VM may sound a little scary, but I promise that you will find it to be surprisingly simple and enlightening.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/lc3.c&quot;&gt;final code&lt;/a&gt; is about 250 lines of C. All you need to know is how to read basic C or C++ and how to do &lt;a href=&quot;https://www.swarthmore.edu/NatSci/echeeve1/Ref/BinaryMath/BinaryMath.html&quot;&gt;binary arithmetic&lt;/a&gt;. To build and run the code, you will need to be on a Unix system (including macOS). A few Unix APIs are used for configuring the terminal input and display, but these are not essential to the main code. (Contributions for Windows support are welcome.)&lt;/p&gt;
&lt;blockquote readability=&quot;7.2779783393502&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This VM is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Literate_programming&quot;&gt;literate program&lt;/a&gt;. This means you are reading the source code right now! Each piece of code from the project will be shown and explained thoroughly, so you can be sure nothing is left out. The final code was then created by &lt;a href=&quot;https://github.com/zyedidia/Literate&quot;&gt;&quot;weaving&quot;&lt;/a&gt; the code blocks together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;What is a virtual machine?&lt;/h3&gt;
&lt;p&gt;A VM is a program that acts like a computer. It simulates a CPU along with a few other hardware components, allowing it to perform arithmetic, read and write to memory, and interact with I/O devices, just like a physical computer. Most importantly, it can understand a machine language which you can you can use to program it.&lt;/p&gt;
&lt;p&gt;The amount of computer hardware the VM attempts to simulate depends on its purpose. Some VMs are designed to reproduce the behavior of some particular computer, such as video game emulators. Most people don't have an NES lying around anymore, but we can still play NES games by simulating the NES hardware in a program. These emulators must &lt;a href=&quot;http://wiki.nesdev.com/w/index.php/Tricky-to-emulate_games&quot;&gt;faithfully recreate&lt;/a&gt; every &lt;a href=&quot;http://wiki.nesdev.com/w/index.php/Emulator_tests&quot;&gt;detail&lt;/a&gt; and major hardware component of the original device.&lt;/p&gt;
&lt;p&gt;Other VMs don't act like any real computer and are entirely made up! This is primarily done to make software development easier. Imagine you wanted to create a program that ran on multiple computer architectures. A VM could offer a standard platform which provided portability for all of them. Instead of rewriting a program in different dialects of assembly for each CPU architecture, you would only need to write the small VM program in each assembly language. Each program would then be written only once in the VM's assembly language.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/no_vm.gif&quot; alt=&quot;architecture specific implementation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/vm.gif&quot; alt=&quot;vm for each architecture&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A compiler solves a similar problem by compiling a standard &lt;em&gt;high-level language&lt;/em&gt; to several CPU architectures. A VM creates one standard &lt;em&gt;CPU architecture&lt;/em&gt; which is simulated on various hardware devices. One advantage of a compiler is that it has no runtime overhead while a VM does. Even though compilers do a pretty good job, writing a new one that targets multiple platforms is very difficult, so VMs are still helpful here. In practice, VMs and compilers are mixed at various levels.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_virtual_machine&quot;&gt;Java Virtual Machine (JVM)&lt;/a&gt; is a very successful example. The JVM itself is a moderately sized program that is small enough for one programmer to understand. This has made it possible to be written for thousands of devices including phones. Once the JVM is implemented on a new device, any Java, Kotlin, or Clojure program ever written can run on it without modification. The only cost is the overhead of the VM itself and the &lt;a href=&quot;https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/&quot;&gt;further abstraction&lt;/a&gt; from the machine. Most of the time, this is a pretty good tradeoff.&lt;/p&gt;
&lt;p&gt;A VM doesn't have to be large or pervasive to provide a similar benefit. Old &lt;a href=&quot;https://fabiensanglard.net/anotherWorld_code_review/&quot;&gt;video games&lt;/a&gt; often used small VMs to provide simple &lt;a href=&quot;https://sf2platinum.wordpress.com/page/1/&quot;&gt;scripting systems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;VMs are also useful for executing code in a secure or isolated way. One application of this is garbage collection. There &lt;a href=&quot;https://www.lua.org/pil/24.2.html&quot;&gt;is no trivial way&lt;/a&gt; to implement automatic garbage collection on top of C or C++ since a program cannot see its own stack or variables. However, a VM is “outside” the program it is running and can observe all of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection&quot;&gt;memory references&lt;/a&gt; on the stack.&lt;/p&gt;
&lt;p&gt;Another example of this behavior is demonstrated by &lt;a href=&quot;https://solidity.readthedocs.io/en/v0.4.24/introduction-to-smart-contracts.html&quot;&gt;Ethereum smart contracts&lt;/a&gt;. Smart contracts are small programs which are executed by each validating node in the blockchain network. This requires the node operators to run programs on their machines that have been written by complete strangers, without any opprotunity to scrutinize them beforehand. To prevent a contract from doing malicious things, they are run inside a &lt;a href=&quot;http://ethdocs.org/en/latest/introduction/what-is-ethereum.html#ethereum-virtual-machine&quot;&gt;VM&lt;/a&gt; that has no access to the file system, network, disc, etc. Ethereum is also a good application of the portability features that result when using a VM. Since Ethereum nodes can be run on many kinds of computers and operating systems, the use of a VM allows smart contracts to be written without any consideration of the many platforms they run on.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;102.82965046203&quot;&gt;
&lt;h4&gt;3. LC-3 Architecture&lt;/h4&gt;
&lt;p&gt;Our VM will simulate a fictional computer called the &lt;a href=&quot;https://en.wikipedia.org/wiki/LC-3&quot;&gt;LC-3&lt;/a&gt;. The LC-3 is popular for teaching university students how to program in assembly language. It has a simplified instruction set &lt;a href=&quot;http://ref.x86asm.net/coder64.html&quot;&gt;compared to x86&lt;/a&gt;, but contains all the main ideas used in modern CPUs.&lt;/p&gt;
&lt;p&gt;First, we need to simulate the essential hardware components of the machine. Try to understand what each component is, but don't worry right now if you are unsure of how it fits into the larger picture. Start by creating a C file. Each of the code snippets in this section should be placed in the global scope of this file.&lt;/p&gt;
&lt;h3&gt;Memory&lt;/h3&gt;
&lt;p&gt;The LC-3 has 65,536 memory locations (the maximum that is addressable by a 16-bit unsigned integer &lt;span class=&quot;math&quot;&gt;2^{16}&lt;/span&gt;), each of which stores a 16-bit value. This means it can store a total of only 128kb, which is a lot smaller than you may be used to! In our program, this memory will be stored in a simple array:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.53125&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Memory Storage &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
/* 65536 locations */
uint16_t memory[UINT16_MAX];
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Registers&lt;/h3&gt;
&lt;p&gt;A register is a slot for storing a single value on the CPU. Registers are like the &quot;workbench&quot; of the CPU. For the CPU to work with a piece of data, it has to be in one of the registers. However, since there are just a few registers, only a minimal amount of data can be loaded at any given time. Programs work around this by loading values from memory into registers, calculating values into other registers, and then storing the final results back in memory.&lt;/p&gt;
&lt;p&gt;The LC-3 has 10 total registers, each of which is 16 bits. Most of them are general purpose, but a few have designated roles.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;8 general purpose registers (&lt;code&gt;R0&lt;/code&gt;-&lt;code&gt;R7&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;1 program counter (&lt;code&gt;PC&lt;/code&gt;) register&lt;/li&gt;
&lt;li&gt;1 condition flags (&lt;code&gt;COND&lt;/code&gt;) register&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The general purpose registers can be used to perform any program calculations. The program counter is an unsigned integer which is the address of the next instruction in memory to execute. The condition flags tell us information about the previous calculation.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;17.608695652174&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Registers &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    R_R0 = 0,
    R_R1,
    R_R2,
    R_R3,
    R_R4,
    R_R5,
    R_R6,
    R_R7,
    R_PC, /* program counter */
    R_COND,
    R_COUNT
};
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Just like the memory, we will store the registers in an array:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.5&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Register Storage &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t reg[R_COUNT];
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Instruction Set&lt;/h3&gt;
&lt;p&gt;An instruction is a command which tells the CPU to do some fundamental task, such as add two numbers. Instructions have both an &lt;strong&gt;opcode&lt;/strong&gt; which indicates the kind of task to perform and a set of &lt;strong&gt;parameters&lt;/strong&gt; which provide inputs to the task being performed.&lt;/p&gt;
&lt;p&gt;Each &lt;strong&gt;opcode&lt;/strong&gt; represents one task that the CPU &quot;knows&quot; how to do. There are just 16 opcodes in LC-3. Everything the computer can calculate is some sequence of these simple instructions. Each instruction is 16 bits long, with the left 4 bits storing the opcode. The rest of the bits are used to store the parameters.&lt;/p&gt;
&lt;p&gt;We will discuss, in detail, what each instruction does later. For now, define the following opcodes. Make sure they stay in this order so that they are assigned the proper enum value:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;24.832962138085&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Opcodes &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    OP_BR = 0, /* branch */
    OP_ADD,    /* add  */
    OP_LD,     /* load */
    OP_ST,     /* store */
    OP_JSR,    /* jump register */
    OP_AND,    /* bitwise and */
    OP_LDR,    /* load register */
    OP_STR,    /* store register */
    OP_RTI,    /* unused */
    OP_NOT,    /* bitwise not */
    OP_LDI,    /* load indirect */
    OP_STI,    /* store indirect */
    OP_JMP,    /* jump */
    OP_RES,    /* reserved (unused) */
    OP_LEA,    /* load effective address */
    OP_TRAP    /* execute trap */
};
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;9.8961937716263&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Intel x86 architecture has hundreds of instructions, while others such as ARM and LC-3 have very few. Small instruction sets are referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Reduced_instruction_set_computer&quot;&gt;RISCs&lt;/a&gt; while larger ones are called &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_instruction_set_computer&quot;&gt;CISCs&lt;/a&gt;. Larger instruction sets typically do not provide any fundamentally new possibilities, but they &lt;a href=&quot;https://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/risccisc/&quot;&gt;often make it more convenient&lt;/a&gt; to write assembly for. A single instruction in CISC might take the place of several in RISC. However, they tend to be more complex and expensive for engineers to design and manufacture. This and other tradeoffs cause the designs to come &lt;a href=&quot;https://cs.stackexchange.com/questions/269/why-would-anyone-want-cisc&quot;&gt;in and out of style&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Condition Flags&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;R_COND&lt;/code&gt; register stores condition flags which provide information about the most recently executed calculation. This allows programs to check logical conditions such as &lt;code&gt;if (x &amp;gt; 0) { ... }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each CPU has a variety of condition flags to signal various situations. The LC-3 uses only 3 condition flags which indicate the sign of the previous calculation.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.7560975609756&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Condition Flags &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    FL_POS = 1 &amp;lt;&amp;lt; 0, /* P */
    FL_ZRO = 1 &amp;lt;&amp;lt; 1, /* Z */
    FL_NEG = 1 &amp;lt;&amp;lt; 2, /* N */
};
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;5.3366834170854&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; (The &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; symbol is called the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/336xbhcz.aspx&quot;&gt;left bitshift operator&lt;/a&gt;. &lt;code&gt;(n &amp;lt;&amp;lt; k)&lt;/code&gt; shifts the bits of &lt;code&gt;n&lt;/code&gt; to the left &lt;code&gt;k&lt;/code&gt; places. Thus &lt;code&gt;1 &amp;lt;&amp;lt; 2&lt;/code&gt; will equal &lt;code&gt;4&lt;/code&gt;. Read that link if you are not familiar. It will be important.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are finished setting up the hardware components of our VM! After adding standard includes (see reference), your file should look something like this:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.083333333333&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{&lt;strong&gt;lc3.c&lt;/strong&gt; &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Includes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Registers, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Opcodes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Condition Flags, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Added to in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;51.180620155039&quot;&gt;
&lt;h4&gt;4. Assembly Examples&lt;/h4&gt;
&lt;p&gt;Now let's look at an LC-3 assembly program to get an idea of what the VM actually runs. You don't need to know how to program assembly or understand everything that is going on. Just try to get a general idea of what is going on. Here is a simple &quot;Hello World&quot;:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.96918767507&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Hello World Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:4&quot;&gt;4&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
.ORIG x3000                        ; this is the address in memory where the program will be loaded
LEA R0, HELLO_STR                  ; load the address of the HELLO_STR string into R0
PUTs                               ; output the string pointed to by R0 to the console
HALT                               ; halt the program
HELLO_STR .STRINGZ &quot;Hello World!&quot;  ; store this string here in the program
.END                               ; mark the end of the file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like in C, the program starts at the top and executes one statement at a time. However, unlike C, there are no nested scopes &lt;code&gt;{}&lt;/code&gt; or control structures such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;; just a flat list of statements. This makes it much easier to execute.&lt;/p&gt;
&lt;p&gt;Notice that some of the statements have names which match the opcodes we defined earlier. Previously, we learned that every instruction was 16 bits, but each line looks like it is a different number of characters. How is this inconsistency possible?&lt;/p&gt;
&lt;p&gt;This is because the code we are reading is written in &lt;strong&gt;assembly&lt;/strong&gt; which is a human-readable and writable form, encoded in plain text. A tool called an &lt;strong&gt;assembler&lt;/strong&gt; is used to transform each line of text into a 16-bit binary instruction the VM can understand. This binary form, which is essentially an array of 16-bit instructions, is called &lt;strong&gt;machine code&lt;/strong&gt; and is what the VM actually runs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/assembler.gif&quot; alt=&quot;assembler diagram&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although a compiler and an assembler play a similar role in development, they are not the same. An assembler simply encodes what the programmer has written in text into binary, replacing symbols with their binary representation and packing them into instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The commands &lt;code&gt;.ORIG&lt;/code&gt; and &lt;code&gt;.STRINGZ&lt;/code&gt; look like instructions but they aren't. They are assembler directives which generate a piece of code or data. For example, the &lt;code&gt;.STRINGZ&lt;/code&gt; inserts a string of characters into the program binary at the location it is written.&lt;/p&gt;
&lt;p&gt;Loops and conditions are done with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Goto&quot;&gt;goto&lt;/a&gt;-like instruction. Here is another example which counts to 10.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;14.942307692308&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Loop Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:4&quot;&gt;4&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
AND R0, R0, 0                      ; clear R0
LOOP                               ; label at the top of our loop
ADD R0, R0, 1                      ; add 1 to R0 and store back in R0
ADD R1, R0, -10                    ; subtract 10 from R0 and store back in R1
BRn LOOP                           ; go back to LOOP if the result was negative
... ; R0 is now 10!
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7.5348837209302&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Learning to write assembly is not necessary for this tutorial. However, if you are interested, you can write and assemble your own LC-3 programs using the &lt;a href=&quot;http://highered.mheducation.com/sites/0072467509/student_view0/lc-3_simulator.html&quot;&gt;LC-3 Tools&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;49.800449269936&quot;&gt;
&lt;h4&gt;5. Executing Programs&lt;/h4&gt;
&lt;p&gt;Once again, the previous examples are just to give you an idea of what the VM does. To write a VM, you don't need to be fluent in assembly. As long as you follow the proper procedure for reading and executing instructions, &lt;em&gt;any&lt;/em&gt; LC-3 program will run correctly, no matter how complicated it is. In theory, it could even run a web browser or an operating system like Linux!&lt;/p&gt;
&lt;p&gt;If you think about this property deeply, it is a philosophically remarkable idea. The programs themselves can do all kinds of intelligent things that we never anticipated and may not be able to understand, but at the same time, everything they can do is limited to the simple code we will write! We simultaneously know everything and nothing about how each program works. Turing discussed this marvelous idea idea:&lt;/p&gt;
&lt;blockquote readability=&quot;10.631578947368&quot;&gt;
&lt;p&gt;&quot;The view that machines cannot give rise to surprises is due, I believe, to a fallacy to which philosophers and mathematicians are particularly subject. This is the assumption that as soon as a fact is presented to a mind all consequences of that fact spring into the mind simultaneously with it. It is a very useful assumption under many circumstances, but one too easily forgets that it is false.&quot; — &lt;a href=&quot;https://academic.oup.com/mind/article-pdf/LIX/236/433/9866119/433.pdf&quot;&gt;Alan M. Turing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Procedure&lt;/h3&gt;
&lt;p&gt;Here is a precise description of the procedure we need to write:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Load one instruction from memory at the address of the &lt;code&gt;PC&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;Increment the &lt;code&gt;PC&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;Look at the &lt;em&gt;opcode&lt;/em&gt; to determine which type of instruction it should perform.&lt;/li&gt;
&lt;li&gt;Perform the instruction using the parameters in the instruction.&lt;/li&gt;
&lt;li&gt;Go back to step 1.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You may be wondering, &quot;if the loop keeps incrementing the &lt;code&gt;PC&lt;/code&gt;, and we don't have &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;, won't it quickly run out of instructions?&quot; The answer is no. As we mentioned before, some goto-like instructions change the execution flow by jumping the &lt;code&gt;PC&lt;/code&gt; around.&lt;/p&gt;
&lt;p&gt;Let's start outlining this process in the main loop:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;27.197007481297&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Main Loop &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;

int main(int argc, const char* argv[])
{
&lt;span class=&quot;nocode pln&quot;&gt;    {Load Arguments, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;    {Setup, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

    /* set the PC to starting position */
    /* 0x3000 is the default */
    enum { PC_START = 0x3000 };
    reg[R_PC] = PC_START;

    int running = 1;
    while (running)
    {
        /* FETCH */
        uint16_t instr = mem_read(reg[R_PC]++);
        uint16_t op = instr &amp;gt;&amp;gt; 12;

        switch (op)
        {
            case OP_ADD:
&lt;span class=&quot;nocode pln&quot;&gt;                {ADD, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_AND:
&lt;span class=&quot;nocode pln&quot;&gt;                {AND, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_NOT:
&lt;span class=&quot;nocode pln&quot;&gt;                {NOT, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_BR:
&lt;span class=&quot;nocode pln&quot;&gt;                {BR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_JMP:
&lt;span class=&quot;nocode pln&quot;&gt;                {JMP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_JSR:
&lt;span class=&quot;nocode pln&quot;&gt;                {JSR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_LD:
&lt;span class=&quot;nocode pln&quot;&gt;                {LD, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_LDR:
&lt;span class=&quot;nocode pln&quot;&gt;                {LDR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_LEA:
&lt;span class=&quot;nocode pln&quot;&gt;                {LEA, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_ST:
&lt;span class=&quot;nocode pln&quot;&gt;                {ST, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_STI:
&lt;span class=&quot;nocode pln&quot;&gt;                {STI, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_STR:
&lt;span class=&quot;nocode pln&quot;&gt;                {STR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_TRAP:
&lt;span class=&quot;nocode pln&quot;&gt;                {TRAP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_RES:
            case OP_RTI:
            default:
&lt;span class=&quot;nocode pln&quot;&gt;                {BAD OPCODE, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
        }
    }
&lt;span class=&quot;nocode pln&quot;&gt;    {Shutdown, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;150.35544531611&quot;&gt;
&lt;h4&gt;6. Implementing Instructions&lt;/h4&gt;
&lt;p&gt;Your task now is to fill in each opcode case with a correct implementation. A detailed specification for each instruction is included in the project &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/docs/lc3-isa.pdf&quot;&gt;documents&lt;/a&gt;. You will need to learn how each instruction works from its specification and write an implementation. This is easier than it sounds. I will demonstrate how to implement two of them here. The code for the rest can be found in the next section.&lt;/p&gt;
&lt;h3&gt;ADD&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ADD&lt;/code&gt; instruction takes two numbers, adds them together, and stores the result in a register. The specification for it is found on page 526. Each &lt;code&gt;ADD&lt;/code&gt; instruction looks like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/add_layout.gif&quot; alt=&quot;Add Encoding&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The encoding shows two rows because there are two different &quot;modes&quot; for this instruction. Before I explain modes, let's try to find the similarities between them. In both rows, we can see that we start with 4 bits, &lt;code&gt;0001&lt;/code&gt;. This is the opcode value for &lt;code&gt;OP_ADD&lt;/code&gt;. The next 3 bits are marked &lt;code&gt;DR&lt;/code&gt;. This stands for destination register. The destination register is where the added sum will be stored. The next 3 bits are &lt;code&gt;SR1&lt;/code&gt;. This is the register containing the first number to add.&lt;/p&gt;
&lt;p&gt;So we know where we want to store the result and we know the first number to add. The last bit of information we need is the second number to add. At this point, the two rows start to look different. Notice that on the top row the 5th bit is a &lt;code&gt;0&lt;/code&gt; and in the second row it is &lt;code&gt;1&lt;/code&gt;. This bit indicates whether it is &lt;em&gt;immediate mode&lt;/em&gt; or &lt;em&gt;register mode&lt;/em&gt;. In &lt;em&gt;register mode&lt;/em&gt;, the second number is stored in a register just like the first. This is marked &lt;code&gt;SR2&lt;/code&gt; and is contained in bits 2-0. Bits 3 and 4 are unused. In assembly this would be written as:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.9186046511628&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Add Register Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
ADD R2 R0 R1 ; add the contents of R0 to R1 and store in R2.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In immediate mode, instead of adding the contents of a register, the value is embedded in the instruction itself. This is convenient because the program doesn't need more instructions to load that number into the register from memory. Instead, it is right inside the instruction when we need it. The tradeoff is that it can only store a small number &lt;span class=&quot;math&quot;&gt;2^{5}=32&lt;/span&gt; (unsigned) to be exact. This is most useful for incrementing a value. In assembly, it could be written as:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.9041095890411&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Add Immediate Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
ADD R0 R0 1 ; add 1 to R0 and store back in R0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a summary from the specification:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;If bit [5] is 0, the second source operand is obtained from &lt;code&gt;SR2&lt;/code&gt;. If bit [5] is 1, the second source operand is obtained by sign-extending the &lt;code&gt;imm5&lt;/code&gt; field to 16 bits. In either case, the second source operand and the contents of &lt;code&gt;SR1&lt;/code&gt; are bitwise ANDed, and the result stored in DR. (Pg. 526)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That sounds just like what we discussed. But what is &quot;sign-extending&quot;? Although the immediate mode value has only 5 bits, it needs to be added to a 16-bit number. Those 5 bits need to be extended to 16 to match the other number. For positive numbers, we can fill in 0's for the additional bits and the value is the same. However, for negative numbers, this causes a problem. For example, -1 stored in 5 bits is &lt;code&gt;1 1111&lt;/code&gt;. If we just extended it with 0's, this is &lt;code&gt;0000 0000 0001 1111&lt;/code&gt; which is equal to 32! Sign extension prevents this problem by filling in 0's for positive numbers and 1's for negative numbers.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.83125&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Sign Extend &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t sign_extend(uint16_t x, int bit_count)
{
    if ((x &amp;gt;&amp;gt; (bit_count - 1)) &amp;amp; 1) {
        x |= (0xFFFF &amp;lt;&amp;lt; bit_count);
    }
    return x;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;8.4418604651163&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are interested in exactly how negative numbers can be represented in binary, you can read about &lt;a href=&quot;https://en.wikipedia.org/wiki/Two%27s_complement&quot;&gt;Two's Complement&lt;/a&gt;. However, this is not essential. You can just copy the code above and use it whenever the specification says to sign extend numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is one last sentence in the specification:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;The condition codes are set based on whether the binary value produced, taken as a 2’s complement integer, is negative, zero, or positive. (Pg. 526)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Earlier we defined a condition flags enum, and now it's time to use them. &lt;em&gt;Any time&lt;/em&gt; a value is written to a register, we need to update the flags to indicate its sign. We will write a function so that this can be reused:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8884297520661&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Update Flags &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void update_flags(uint16_t r)
{
    if (reg[r] == 0)
    {
        reg[R_COND] = FL_ZRO;
    }
    else if (reg[r] &amp;gt;&amp;gt; 15) /* a 1 in the left-most bit indicates negative */
    {
        reg[R_COND] = FL_NEG;
    }
    else
    {
        reg[R_COND] = FL_POS;
    }
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now we are ready to write the code for the &lt;code&gt;ADD&lt;/code&gt; case:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.945945945946&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{ADD &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* destination register (DR) */
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    /* first operand (SR1) */
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    /* whether we are in immediate mode */
    uint16_t imm_flag = (instr &amp;gt;&amp;gt; 5) &amp;amp; 0x1;

    if (imm_flag)
    {
        uint16_t imm5 = sign_extend(instr &amp;amp; 0x1F, 5);
        reg[r0] = reg[r1] + imm5;
    }
    else
    {
        uint16_t r2 = instr &amp;amp; 0x7;
        reg[r0] = reg[r1] + reg[r2];
    }

    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This section contained a lot of information, so let's summarize.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ADD&lt;/code&gt; takes two values and stores them in a register.&lt;/li&gt;
&lt;li&gt;In register mode, the second value to add is found in a register.&lt;/li&gt;
&lt;li&gt;In immediate mode, the second value is embedded in the right-most 5 bits of the instruction.&lt;/li&gt;
&lt;li&gt;Values which are shorter than 16 bits need to be sign extended.&lt;/li&gt;
&lt;li&gt;Any time an instruction modifies a register, the condition flags need to be updated.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You may be feeling overwhelmed about writing 15 more instructions. However, all of what you learned here will be reused. Most of the instructions use some combination of sign extension, different modes, and updating flags.&lt;/p&gt;
&lt;h3&gt;LDI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LDI&lt;/code&gt; stands for &quot;load indirect.&quot; This instruction is used to load a value from a location in memory into a register. The specification is found on page 532.&lt;/p&gt;
&lt;p&gt;Here is what the binary layout looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/ldi_layout.gif&quot; alt=&quot;LDI Encoding&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In contrast to &lt;code&gt;ADD&lt;/code&gt;, there are no modes and fewer parameters. This time, the opcode is &lt;code&gt;1010&lt;/code&gt; which corresponds with the &lt;code&gt;OP_LDI&lt;/code&gt; enum value. Just like &lt;code&gt;ADD&lt;/code&gt;, it contains a 3-bit &lt;code&gt;DR&lt;/code&gt; (the destination register) for storing the loaded value. The remaining bits are labeled &lt;code&gt;PCoffset9&lt;/code&gt;. This is an immediate value embedded in the instruction (similar to &lt;code&gt;imm5&lt;/code&gt;). Since this instruction loads from memory, we can guess that this number is some kind of address which tells us where to load from. The specification provides more detail:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;An address is computed by sign-extending bits &lt;code&gt;[8:0]&lt;/code&gt; to 16 bits and adding this value to the incremented &lt;code&gt;PC&lt;/code&gt;. What is stored in memory at this address is the address of the data to be loaded into &lt;code&gt;DR&lt;/code&gt;. (Pg. 532)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just like before, we need to sign extend this 9-bit value, but this time add it to the current &lt;code&gt;PC&lt;/code&gt;. (If you look back at the execution loop, the &lt;code&gt;PC&lt;/code&gt; was incremented right after this instruction was loaded.) The resulting sum is an address to a location in memory, and that address &lt;em&gt;contains, yet another&lt;/em&gt; value which is the address of the value to load.&lt;/p&gt;
&lt;p&gt;This may seem like a roundabout way to read from memory, but it is indispensable. The &lt;code&gt;LD&lt;/code&gt; instruction is limited to address offsets that are 9 bits, whereas the memory requires 16 bits to address. &lt;code&gt;LDI&lt;/code&gt; is useful for loading values that are stored in locations far away from the current PC, but to use it, the address of the final location needs to be stored in a neighborhood nearby. You can think of it like having a local variable in C which is a pointer to some data:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9722991689751&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{C LDI Sample &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
// the value of far_data is an address
// of course far_data itself (the location in memory containing the address) has an address
char* far_data = &quot;apple&quot;; 

// In memory it may be layed out like this:

// Address Label      Value
// 0x123:  far_data = 0x456
// ...
// 0x456:  string   = 'a'

// if PC was at 0x100
// LDI R0 0x023
// would load 'a' into R0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Same as before, the flags need to be updated after putting the value into &lt;code&gt;DR&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The condition codes are set based on whether the value loaded is negative, zero, or positive. (Pg. 532)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the code for this case: (&lt;code&gt;mem_read&lt;/code&gt; will be discussed in a later section.)&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;11.961165048544&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LDI &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* destination register (DR) */
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    /* PCoffset 9*/
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1ff, 9);
    /* add pc_offset to the current PC, look at that memory location to get the final address */
    reg[r0] = mem_read(mem_read(reg[R_PC] + pc_offset));
    update_flags(r0);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I said, this instruction shared a lot of the code and knowledge learned from &lt;code&gt;ADD&lt;/code&gt;. You will find this is the case with the remaining instructions.&lt;/p&gt;
&lt;p&gt;You now need to go back and implement the rest of the switch cases for the instructions. Follow the specification and use the code listed here to complete the others. The code for all instructions is listed at the end of the tutorial. Two of the opcodes specified before will not be used, they are &lt;code&gt;OP_RTI&lt;/code&gt; and &lt;code&gt;OP_RES&lt;/code&gt;. You can ignore these cases or throw an error if they are executed. After you are done, the bulk of your VM will be completed!&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;34.377657518361&quot;&gt;
&lt;h4&gt;7. Instruction Cheat Sheet&lt;/h4&gt;
&lt;p&gt;This section contains the full implementations of the remaining instructions if you get stuck.&lt;/p&gt;
&lt;h3&gt;RTI &amp;amp; RES&lt;/h3&gt;
&lt;p&gt;(these are unused)&lt;/p&gt;
&lt;div class=&quot;codeblock&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{BAD OPCODE &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
abort();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operation#AND&quot;&gt;Bitwise and&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9354838709677&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{AND &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    uint16_t imm_flag = (instr &amp;gt;&amp;gt; 5) &amp;amp; 0x1;

    if (imm_flag)
    {
        uint16_t imm5 = sign_extend(instr &amp;amp; 0x1F, 5);
        reg[r0] = reg[r1] &amp;amp; imm5;
    }
    else
    {
        uint16_t r2 = instr &amp;amp; 0x7;
        reg[r0] = reg[r1] &amp;amp; reg[r2];
    }
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operation#NOT&quot;&gt;Bitwise not&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.8814814814815&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{NOT &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;

    reg[r0] = ~reg[r1];
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Branch&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.9&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{BR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t pc_offset = sign_extend((instr) &amp;amp; 0x1ff, 9);
    uint16_t cond_flag = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    if (cond_flag &amp;amp; reg[R_COND])
    {
        reg[R_PC] += pc_offset;
    }
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Jump&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RET&lt;/code&gt; is listed as a separate instruction in the specification, since it is a different keyword in assembly. However, it is actually a special case of &lt;code&gt;JMP&lt;/code&gt;. &lt;code&gt;RET&lt;/code&gt; happens whenever &lt;code&gt;R1&lt;/code&gt; is 7.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8691588785047&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{JMP &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* Also handles RET */
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    reg[R_PC] = reg[r1];
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Jump Register&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9310344827586&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{JSR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    uint16_t long_pc_offset = sign_extend(instr &amp;amp; 0x7ff, 11);
    uint16_t long_flag = (instr &amp;gt;&amp;gt; 11) &amp;amp; 1;

    reg[R_R7] = reg[R_PC];
    if (long_flag)
    {
        reg[R_PC] += long_pc_offset;  /* JSR */
    }
    else
    {
        reg[R_PC] = reg[r1]; /* JSRR */
    }
    break;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Load&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8971428571429&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LD &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1ff, 9);
    reg[r0] = mem_read(reg[R_PC] + pc_offset);
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Load Register&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.910447761194&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LDR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    uint16_t offset = sign_extend(instr &amp;amp; 0x3F, 6);
    reg[r0] = mem_read(reg[r1] + offset);
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Load Effective Address&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8915662650602&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LEA &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1ff, 9);
    reg[r0] = reg[R_PC] + pc_offset;
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Store&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.8726114649682&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{ST &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1ff, 9);
    mem_write(reg[R_PC] + pc_offset, reg[r0]);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Store Indirect&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.8809523809524&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{STI &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1ff, 9);
    mem_write(mem_read(reg[R_PC] + pc_offset), reg[r0]);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Store Register&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.8907103825137&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{STR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    uint16_t offset = sign_extend(instr &amp;amp; 0x3F, 6);
    mem_write(reg[r1] + offset, reg[r0]);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;89.25284629981&quot;&gt;
&lt;h4&gt;8. Trap Routines&lt;/h4&gt;
&lt;p&gt;The LC-3 provides a few predefined routines for performing common tasks and interacting with I/O devices. For example, there are routines for getting input from the keyboard and for displaying strings to the console. These are called &lt;em&gt;trap routines&lt;/em&gt; which you can think of as the operating system or API for the LC-3. Each trap routine is assigned a &lt;em&gt;trap code&lt;/em&gt; which identifies it (similar to an opcode). To execute one, the &lt;code&gt;TRAP&lt;/code&gt; instruction is called with the trap code of the desired routine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/trap_layout.gif&quot; alt=&quot;Trap Encoding&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Define an enum for each trap code:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;15.744408945687&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP Codes &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    TRAP_GETC = 0x20,  /* get character from keyboard */
    TRAP_OUT = 0x21,   /* output a character */
    TRAP_PUTS = 0x22,  /* output a word string */
    TRAP_IN = 0x23,    /* input a string */
    TRAP_PUTSP = 0x24, /* output a byte string */
    TRAP_HALT = 0x25   /* halt the program */
};
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You may be wondering why the trap codes are not included in the instructions. This is because they do not actually introduce any new functionality to the LC-3, they just provide a convenient way to perform a task (similar to system functions in C). In the official LC-3 simulator, trap routines are &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/docs/os.asm&quot;&gt;written in assembly&lt;/a&gt;. When a trap code is called, the &lt;code&gt;PC&lt;/code&gt; is moved to that code's address. The CPU executes instructions of the procedure, and when it is complete, the PC is reset to the location the trap was called from.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is why programs start at address &lt;code&gt;0x3000&lt;/code&gt; instead of &lt;code&gt;0x0&lt;/code&gt;. The lower addresses are left empty to leave space for the trap routine code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is no specification for &lt;em&gt;how&lt;/em&gt; trap routines must be implemented, only what they are supposed to do. In our VM, we are going to do things slightly differently by writing them in C. When a trap code is invoked, a C function will be called. When it is completed, execution will return to the instructions.&lt;/p&gt;
&lt;p&gt;Even though the trap routines can be written in assembly and this is what a physical LC-3 computer would do, it isn't the best fit for a VM. Instead of writing our own primitive I/O routines, we can take advantage of the ones available on our OS. This will make the VM run better on our computers, simplify the code, and provide a higher level of abstraction for portability.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Getting input from the keyboard is one specific example of this. The assembly version uses a loop to continuously check the keyboard for input. This consumes a lot of CPU time for nothing! Using a proper OS input function allows the program to sleep until input is received.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the switch case form the &lt;code&gt;TRAP&lt;/code&gt; opcode, add another switch:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;16.401408450704&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
switch (instr &amp;amp; 0xFF)
{
    case TRAP_GETC:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP GETC, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_OUT:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP OUT, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_PUTS:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP PUTS, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_IN:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP IN, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_PUTSP:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP PUTSP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_HALT:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP HALT, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As with instructions, I will show you how to implement a single trap routine and leave the rest to you.&lt;/p&gt;
&lt;h3&gt;PUTS&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;PUTS&lt;/code&gt; trap code is used to output a null-terminated string (similar to &lt;code&gt;printf&lt;/code&gt; in C). The specification is found on page 543.&lt;/p&gt;
&lt;p&gt;To display a string, we must give the trap routine a string to display. This is done by storing the address of the first character in &lt;code&gt;R0&lt;/code&gt; before beginning the trap.&lt;/p&gt;
&lt;p&gt;The specification says:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Write a string of ASCII characters to the console display. The characters are contained in consecutive memory locations, one character per memory location, starting with the address specified in &lt;code&gt;R0&lt;/code&gt;. Writing terminates with the occurrence of &lt;code&gt;x0000&lt;/code&gt; in a memory location. (Pg. 543)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice that unlike C strings, characters are &lt;em&gt;not stored&lt;/em&gt; in a single byte, but in a &lt;em&gt;single memory location&lt;/em&gt;. Memory locations in LC-3 are 16 bits, so each character in the string is 16 bits wide. To display this with a C function, we will need to convert each value to a char and output them individually.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.9333333333333&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP PUTS &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* one char per word */
    uint16_t* c = memory + reg[R_R0];
    while (*c)
    {
        putc((char)*c, stdout);
        ++c;
    }
    fflush(stdout);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's all for this routine. The trap routines are pretty straightforward if you are familiar with C. Go back to the specification and implement the others now. As with the instructions, the full code can be found at the end of the tutorial.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;16.303102625298&quot;&gt;
&lt;h4&gt;9. Trap Routine Cheat Sheet&lt;/h4&gt;
&lt;p&gt;This section contains the full implementations of the remaining trap routines.&lt;/p&gt;
&lt;p&gt;Input Character&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8526315789474&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP GETC &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
/* read a single ASCII char */
reg[R_R0] = (uint16_t)getchar();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Output Character&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.7922077922078&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP OUT &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
putc((char)reg[R_R0], stdout);
fflush(stdout);
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Prompt for Input Character&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8494623655914&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP IN &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
printf(&quot;Enter a character: &quot;);
reg[R_R0] = (uint16_t)getchar();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Output String&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.926910299003&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP PUTSP &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* one char per byte (two bytes per word)
       here we need to swap back to
       big endian format */
    uint16_t* c = memory + reg[R_R0];
    while (*c)
    {
        char char1 = (*c) &amp;amp; 0xFF;
        putc(char1, stdout);
        char char2 = (*c) &amp;gt;&amp;gt; 8;
        if (char2) putc(char2, stdout);
        ++c;
    }
    fflush(stdout);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Halt Program&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8108108108108&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP HALT &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
puts(&quot;HALT&quot;);
fflush(stdout);
running = 0;
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;40.726942298955&quot;&gt;
&lt;h4&gt;10. Loading Programs&lt;/h4&gt;
&lt;p&gt;We have mentioned a lot about loading and executing instructions from memory, but how do instructions get into memory in the first place? When an assembly program is converted to machine code, the result is a file containing an array of instructions and data. This can be loaded by just copying the contents right into an address in memory.&lt;/p&gt;
&lt;p&gt;The first 16 bits of the program file specify the address in memory where the program should start. This address is called the &lt;strong&gt;origin&lt;/strong&gt;. It must be read first, after which the rest of the data can be read from the file into memory starting at the origin address.&lt;/p&gt;
&lt;p&gt;Here is the code for reading an LC-3 program into memory:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;15.868041237113&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Read Image File &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void read_image_file(FILE* file)
{
    /* the origin tells us where in memory to place the image */
    uint16_t origin;
    fread(&amp;amp;origin, sizeof(origin), 1, file);
    origin = swap16(origin);

    /* we know the maximum file size so we only need one fread */
    uint16_t max_read = UINT16_MAX - origin;
    uint16_t* p = memory + origin;
    size_t read = fread(p, sizeof(uint16_t), max_read, file);

    /* swap to little endian */
    while (read-- &amp;gt; 0)
    {
        *p = swap16(*p);
        ++p;
    }
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Notice that &lt;code&gt;swap16&lt;/code&gt; is called on each loaded value. LC-3 programs are big-endian, but most of the modern computers we use are little endian. As a result, we need to swap each &lt;code&gt;uint16&lt;/code&gt; that is loaded. (If you happen to be using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Power_Mac_G4_Cube&quot;&gt;strange computer&lt;/a&gt;, like a &lt;a href=&quot;https://en.wikipedia.org/wiki/PowerPC#Endian_modes&quot;&gt;PPC&lt;/a&gt; then you should not swap.)&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.6818181818182&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Swap &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t swap16(uint16_t x)
{
    return (x &amp;lt;&amp;lt; 8) | (x &amp;gt;&amp;gt; 8);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;12.664082687339&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;Endianness&lt;/a&gt; refers to how bytes of an integer are interpreted. In little-endian, the first byte is the least significant digit, and in big-endian, it is reversed. As far as I know, the decision is &lt;em&gt;mostly&lt;/em&gt; arbitrary. Different companies made different decisions, so now we are left with varying implementations. You do not need to know anything else about endianness for this project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's also add a convenience function for &lt;code&gt;read_image_file&lt;/code&gt; which takes a path a string;&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8085106382979&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Read Image &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
int read_image(const char* image_path)
{
    FILE* file = fopen(image_path, &quot;rb&quot;);
    if (!file) { return 0; };
    read_image_file(file);
    fclose(file);
    return 1;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;42.805255023184&quot;&gt;
&lt;h4&gt;11. Memory Mapped Registers&lt;/h4&gt;
&lt;p&gt;Some special registers are not accessible from the normal register table. Instead, a special address is reserved for them in memory. To read and write to these registers, you just read and write to their memory location. These are called &lt;strong&gt;memory mapped registers&lt;/strong&gt;. They are commonly used to interact with special hardware devices.&lt;/p&gt;
&lt;p&gt;The LC-3 has two memory mapped registers that need to be implemented. They are the keyboard status register (&lt;code&gt;KBSR&lt;/code&gt;) and keyboard data register (&lt;code&gt;KBDR&lt;/code&gt;). The &lt;code&gt;KBSR&lt;/code&gt; indicates whether a key has been pressed, and the &lt;code&gt;KBDR&lt;/code&gt; identifies which key was pressed.&lt;/p&gt;
&lt;p&gt;Although you can request keyboard input using &lt;code&gt;GETC&lt;/code&gt;, this blocks execution until input is received. &lt;code&gt;KBSR&lt;/code&gt; and &lt;code&gt;KBDR&lt;/code&gt; allows you to &lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;poll the state&lt;/a&gt; of the device and continue execution, so the program can stay responsive while waiting for input.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.7611940298507&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Memory Mapped Registers &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    MR_KBSR = 0xFE00, /* keyboard status */
    MR_KBDR = 0xFE02  /* keyboard data */
};
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Memory mapped registers make memory access a bit more complicated. We can't read and write to the memory array directly, but must instead call setter and getter functions. When memory is read from &lt;code&gt;KBSR&lt;/code&gt;, the getter will check the keyboard and update both memory locations.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.8717948717949&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Memory Access &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void mem_write(uint16_t address, uint16_t val)
{
    memory[address] = val;
}

uint16_t mem_read(uint16_t address)
{
    if (address == MR_KBSR)
    {
        if (check_key())
        {
            memory[MR_KBSR] = (1 &amp;lt;&amp;lt; 15);
            memory[MR_KBDR] = getchar();
        }
        else
        {
            memory[MR_KBSR] = 0;
        }
    }
    return memory[address];
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;That completes the last component of the VM! Provided that you implemented the rest of the trap routines and instructions, you are almost ready to try it out!&lt;/p&gt;
&lt;p&gt;All that we have written should have been added to the C file in the following order:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;13.038167938931&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{&lt;strong&gt;lc3.c&lt;/strong&gt; &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;} +=&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Memory Mapped Registers, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{TRAP Codes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Memory Storage, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Register Storage, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Functions, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Main Loop, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;48.406077348066&quot;&gt;
&lt;h4&gt;12. Platform Details&lt;/h4&gt;
&lt;p&gt;This section contains some tedious details that are needed to access the keyboard and behave nicely. These are not insightful or relevant to learning about VMs. Feel free to copy paste!&lt;/p&gt;
&lt;p&gt;If you are trying to run the VM on a non-Unix operating system, such as Windows, these functions need to be replaced with Windows-specific versions.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;13.87610619469&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Check Key &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t check_key()
{
    fd_set readfds;
    FD_ZERO(&amp;amp;readfds);
    FD_SET(STDIN_FILENO, &amp;amp;readfds);

    struct timeval timeout;
    timeout.tv_sec = 0;
    timeout.tv_usec = 0;
    return select(1, &amp;amp;readfds, NULL, NULL, &amp;amp;timeout) != 0;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This extracts the program path from the program arguments and outputs a usage example if they are missing.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;11.761904761905&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Load Arguments &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
if (argc &amp;lt; 2)
{
    /* show usage string */
    printf(&quot;lc3 [image-file1] ...\n&quot;);
    exit(2);
}

for (int j = 1; j &amp;lt; argc; ++j)
{
    if (!read_image(argv[j]))
    {
        printf(&quot;failed to load image: %s\n&quot;, argv[j]);
        exit(1);
    }
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is Unix specific code for setting up terminal input.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;14.908256880734&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Input Buffering &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
struct termios original_tio;

void disable_input_buffering()
{
    tcgetattr(STDIN_FILENO, &amp;amp;original_tio);
    struct termios new_tio = original_tio;
    new_tio.c_lflag &amp;amp;= ~ICANON &amp;amp; ~ECHO;
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;amp;new_tio);
}

void restore_input_buffering()
{
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;amp;original_tio);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the program is interrupted, we want to restore the terminal settings back to normal.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8727272727273&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Handle Interrupt &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void handle_interrupt(int signal)
{
    restore_input_buffering();
    printf(&quot;\n&quot;);
    exit(-2);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.4845360824742&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Setup &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
signal(SIGINT, handle_interrupt);
disable_input_buffering();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.3181818181818&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Shutdown &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
restore_input_buffering();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;16.980676328502&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Functions &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Sign Extend, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Swap, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Update Flags, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Read Image File, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Read Image, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Check Key, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Memory Access, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Input Buffering, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Handle Interrupt, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.795539033457&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Includes &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;signal.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/termios.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;16.310146443515&quot;&gt;
&lt;h4&gt;13. Running the VM&lt;/h4&gt;
&lt;p&gt;You can now build and run the LC-3 VM!&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Compile your program with your favorite C compiler.&lt;/li&gt;
&lt;li&gt;Download the assembled version of &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/bin/2048.obj&quot;&gt;2048&lt;/a&gt; or &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/bin/rogue.obj&quot;&gt;Rogue&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run the program with the obj file as an argument:
&lt;p&gt;&lt;code&gt;lc3-vm path/to/2048.obj&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Play 2048!&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;codeblock&quot; readability=&quot;7.9139784946237&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{2048 Example &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:13&quot;&gt;13&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
Control the game using WASD keys.
Are you on an ANSI terminal (y/n)? y
+--------------------------+
|                          |
|                          |
|                          |
|                     2    |
|                          |
|   2                      |
|                          |
|                          |
|                          |
+--------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Debugging&lt;/h3&gt;
&lt;p&gt;If the program doesn't work correctly, it is likely because you programmed an instruction incorrectly. This can be tricky to debug. I recommend reading through the assembly source code of an LC-3 program while simultaneously using a debugger to step through the VM instructions one at a time. As you read the assembly, make sure the VM goes to the instruction that you expect it to. If a discrepancy occurs, you will then know which instruction caused the issue. Reread its specification and double check your code.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;54.684695512821&quot;&gt;
&lt;h4&gt;14. Alternate C++ Technique&lt;/h4&gt;
&lt;p&gt;This section shows an advanced way of executing instructions that makes the code a whole lot smaller. This section is entirely optional.&lt;/p&gt;
&lt;p&gt;Since C++ has powerful compile-time generics, we can use the compiler to generate parts of the instructions for us. This method reduces code duplication and is actually closer to how the computer would be wired in hardware.&lt;/p&gt;
&lt;p&gt;The idea here is to reuse the steps common to each instruction. For example, several of the instructions use indirect addressing or sign extend a value and add it to the current PC value. Wouldn't it be nice if we could write this code once for all instructions?&lt;/p&gt;
&lt;p&gt;By thinking of the instruction as a pipeline of steps we can see that each instruction is just a permuation of several of the smaller steps. We will use bitwise flags to mark which steps to perform for each instruction. A &lt;code&gt;1&lt;/code&gt; in the bit corresponding to the instruction number indicates the compiler should include this section of code for that instruction.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;22.962356792144&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Instruction C++ &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
template &amp;lt;unsigned op&amp;gt;
void ins(uint16_t instr)
{
    uint16_t r0, r1, r2, imm5, imm_flag;
    uint16_t pc_plus_off, base_plus_off;

    uint16_t opbit = (1 &amp;lt;&amp;lt; op);
    if (0x4EEE &amp;amp; opbit) { r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7; }
    if (0x12E3 &amp;amp; opbit) { r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7; }
    if (0x0022 &amp;amp; opbit)
    {
        r2 = instr &amp;amp; 0x7;
        imm_flag = (instr &amp;gt;&amp;gt; 5) &amp;amp; 0x1;
        imm5 = sign_extend((instr) &amp;amp; 0x1F, 5);
    }
    if (0x00C0 &amp;amp; opbit)
    {   // Base + offset
        base_plus_off = reg[r1] + sign_extend(instr &amp;amp; 0x3f, 6);
    }
    if (0x4C0D &amp;amp; opbit)
    {
        // Indirect address
        pc_plus_off = reg[R_PC] + sign_extend(instr &amp;amp; 0x1ff, 9);
    }
    if (0x0001 &amp;amp; opbit)
    {
        // BR
        uint16_t cond = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
        if (cond &amp;amp; reg[R_COND]) { reg[R_PC] = pc_plus_off; }
    }
    if (0x0002 &amp;amp; opbit)  // ADD
    {
        if (imm_flag)
        {
            reg[r0] = reg[r1] + imm5;
        }
        else
        {
            reg[r0] = reg[r1] + reg[r2];
        }
    }
    if (0x0020 &amp;amp; opbit)  // AND
    {
        if (imm_flag)
        {
            reg[r0] = reg[r1] &amp;amp; imm5;
        }
        else
        {
            reg[r0] = reg[r1] &amp;amp; reg[r2];
        }
    }
    if (0x0200 &amp;amp; opbit) { reg[r0] = ~reg[r1]; } // NOT
    if (0x1000 &amp;amp; opbit) { reg[R_PC] = reg[r1]; } // JMP
    if (0x0010 &amp;amp; opbit)  // JSR
    {
        uint16_t long_flag = (instr &amp;gt;&amp;gt; 11) &amp;amp; 1;
        pc_plus_off = reg[R_PC] +  sign_extend(instr &amp;amp; 0x7ff, 11);
        reg[R_R7] = reg[R_PC];
        if (long_flag)
        {
            reg[R_PC] = pc_plus_off;
        }
        else
        {
            reg[R_PC] = reg[r1];
        }
    }

    if (0x0004 &amp;amp; opbit) { reg[r0] = mem_read(pc_plus_off); } // LD
    if (0x0400 &amp;amp; opbit) { reg[r0] = mem_read(mem_read(pc_plus_off)); } // LDI
    if (0x0040 &amp;amp; opbit) { reg[r0] = mem_read(base_plus_off); }  // LDR
    if (0x4000 &amp;amp; opbit) { reg[r0] = pc_plus_off; } // LEA
    if (0x0008 &amp;amp; opbit) { mem_write(pc_plus_off, reg[r0]); } // ST
    if (0x0800 &amp;amp; opbit) { mem_write(mem_read(pc_plus_off), reg[r0]); } // STI
    if (0x0080 &amp;amp; opbit) { mem_write(base_plus_off, reg[r0]); } // STR
    if (0x8000 &amp;amp; opbit)  // TRAP
    {
&lt;span class=&quot;nocode pln&quot;&gt;         {TRAP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
    }
    //if (0x0100 &amp;amp; opbit) { } // RTI
    if (0x4666 &amp;amp; opbit) { update_flags(r0); }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;22.752688172043&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Op Table &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
static void (*op_table[16])(uint16_t) = {
    ins&amp;lt;0&amp;gt;, ins&amp;lt;1&amp;gt;, ins&amp;lt;2&amp;gt;, ins&amp;lt;3&amp;gt;,
    ins&amp;lt;4&amp;gt;, ins&amp;lt;5&amp;gt;, ins&amp;lt;6&amp;gt;, ins&amp;lt;7&amp;gt;,
    NULL, ins&amp;lt;9&amp;gt;, ins&amp;lt;10&amp;gt;, ins&amp;lt;11&amp;gt;,
    ins&amp;lt;12&amp;gt;, NULL, ins&amp;lt;14&amp;gt;, ins&amp;lt;15&amp;gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6.7777777777778&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I learned about this technique from &lt;a href=&quot;https://www.youtube.com/watch?v=QIUVSD3yqqE&quot;&gt;Bisqwit's NES emulator&lt;/a&gt;. If you are interested in emulation, or the NES, I highly recommend his videos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rest of the C++ version uses the code we already wrote. The full code is &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/lc3-alt.cpp&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;23.767967145791&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{&lt;strong&gt;lc3-alt.cpp&lt;/strong&gt; &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Includes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Registers, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Condition Flags, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Opcodes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Memory Mapped Registers, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{TRAP Codes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Memory Storage, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Register Storage, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Functions, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

int running = 1;
&lt;span class=&quot;nocode pln&quot;&gt;{Instruction C++, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Op Table, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;}&lt;/span&gt;

int main(int argc, const char* argv[])
{
&lt;span class=&quot;nocode pln&quot;&gt;    {Load Arguments, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;    {Setup, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

    enum { PC_START = 0x3000 };
    reg[R_PC] = PC_START;

    while (running)
    {
        uint16_t instr = mem_read(reg[R_PC]++);
        uint16_t op = instr &amp;gt;&amp;gt; 12;
        op_table[op](instr);
    }
&lt;span class=&quot;nocode pln&quot;&gt;    {Shutdown, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 14 Dec 2018 05:36:38 +0000</pubDate>
<dc:creator>vedosity</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://justinmeiners.github.io/lc3-vm/</dc:identifier>
</item>
<item>
<title>Everything you should know about certificates and PKI but are too afraid to ask</title>
<link>https://smallstep.com/blog/everything-pki.html</link>
<guid isPermaLink="true" >https://smallstep.com/blog/everything-pki.html</guid>
<description>&lt;p class=&quot;meta&quot;&gt;&lt;span class=&quot;author&quot;&gt;By Mike Malone&lt;/span&gt; &lt;span class=&quot;publish-date&quot;&gt;December 11, 2018&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Certificates and public key infrastructure (PKI) are hard. No shit, right? I know a lot of smart people who’ve avoided this particular rabbit hole. Personally, I avoided it for a long time and felt some shame for not knowing more. The obvious result was a vicious cycle: I was too embarrassed to ask questions so I never learned.&lt;/p&gt;
&lt;p&gt;Eventually I was forced to learn this stuff because of what it enables: PKI lets you define a system cryptographically. It’s universal and vendor neutral. It works everywhere so bits of your system can run anywhere and communicate securely. It’s conceptually simple and super flexible. It lets you &lt;a href=&quot;https://smallstep.com/blog/use-tls.html&quot;&gt;use TLS&lt;/a&gt; and ditch VPNs. You can ignore everything about your network and still have strong security characteristics. It’s pretty great.&lt;/p&gt;
&lt;p&gt;Now that I have learned, I regret not doing so sooner. PKI is really powerful, and really interesting. The math is complicated, and the standards are stupidly baroque, but the core concepts are actually quite simple. Certificates are the best way to identify code and devices, and identity is super useful for security, monitoring, metrics, and a million other things. Using certificates is not that hard. No harder than learning a new language or database. It’s just slightly annoying and poorly documented.&lt;/p&gt;
&lt;p&gt;This is the missing manual. I reckon most engineers can wrap their heads around all the most important concepts and common quirks in less than an hour. That’s our goal here. An hour is a pretty small investment to learn something you literally can’t do any other way.&lt;/p&gt;
&lt;p&gt;My motives are mostly didactic. But I’ll be using two open source projects we built at smallstep in various demonstrations: the &lt;a href=&quot;https://smallstep.com/cli&quot;&gt;step CLI&lt;/a&gt; and &lt;a href=&quot;https://smallstep.com/certificates&quot;&gt;step certificates&lt;/a&gt;. If you want to follow along you can &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install smallstep/smallstep/cli&lt;/code&gt; to get both (see &lt;a href=&quot;https://github.com/smallstep/cli#installing&quot;&gt;full install instructions here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Let’s start with a one sentence tl;dr: the goal of certificates and PKI is to bind names to public keys. That’s it. The rest is just implementation details.&lt;/p&gt;
&lt;h2 id=&quot;a-broad-overview-and-some-words-you-should-know&quot;&gt;A broad overview and some words you should know&lt;/h2&gt;
&lt;p&gt;I’m going to use some technical terms, so let’s go ahead and define them before we start.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;entity&lt;/strong&gt; is anything that exists, even if it only exists logically or conceptually. Your computer is an entity. So is some code you wrote. So are you. So is the burrito you ate for lunch. So is the ghost that you saw when you were six – even if your mom was right and it was just a figment of your imagination.&lt;/p&gt;
&lt;p&gt;Every entity has an &lt;strong&gt;identity&lt;/strong&gt;. This one’s hard to define. Identity is what makes you you, ya know? On computers identity is usually represented as a bag of attributes describing some entity: group, age, location, favorite color, shoe size, whatever. An &lt;strong&gt;identifier&lt;/strong&gt; is not the same as an identity. Rather, it’s a unique reference to some entity that has an identity. I’m Mike, but Mike isn’t my identity. It’s a &lt;strong&gt;name&lt;/strong&gt; – identifier and name are synonyms (at least for our purposes).&lt;/p&gt;
&lt;p&gt;Entities can &lt;strong&gt;claim&lt;/strong&gt; that they have some particular name. Other entities might be able to authenticate that claim, confirming its truth. But a claim needn’t be related to a name: I can make a claim about anything: my age, your age, access rights, the meaning of life, etc. &lt;strong&gt;Authentication&lt;/strong&gt;, in general, is the process of confirming the truth of some claim.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;subscriber&lt;/strong&gt; or &lt;strong&gt;end entity&lt;/strong&gt; is an entity that’s participating in a PKI and can be the &lt;strong&gt;subject&lt;/strong&gt; of a certificate. A &lt;strong&gt;certificate authority&lt;/strong&gt; (CA) is an entity that issues certificates to subscribers — a certificate &lt;strong&gt;issuer&lt;/strong&gt;. Certificates that belong to subscribers are sometimes called end entity certificates or &lt;strong&gt;leaf certificates&lt;/strong&gt; for reasons that’ll become clearer once we discuss certificate chains. Certificates that belong to CAs are usually called &lt;strong&gt;root certificates&lt;/strong&gt; or &lt;strong&gt;intermediate certificates&lt;/strong&gt; depending on the sort of CA. Finally, a &lt;strong&gt;relying party&lt;/strong&gt; is a certificate user that verifies and trusts certificates issued by a CA. To confuse matters a bit, an entity can be both a subscriber and a relying party. That is, a single entity can have its own certificate and use other certificates to authenticate remote peers (this is what happens with mutual TLS, for instance).&lt;/p&gt;
&lt;p&gt;That’s enough to get us started, but if pedagogy excites you consider putting &lt;a href=&quot;https://tools.ietf.org/html/rfc4949&quot;&gt;RFC 4949&lt;/a&gt; on your kindle. For everyone else, let’s get concrete. How do we make claims and authenticate stuff in practice? Let’s talk crypto.&lt;/p&gt;
&lt;h2 id=&quot;macs-and-signatures-authenticate-stuff&quot;&gt;MACs and signatures authenticate stuff&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;message authentication code&lt;/strong&gt; (MAC) is a bit of data that’s used to verify which entity sent a message, and to ensure that a message hasn’t been modified. The basic idea is to feed a shared secret (a password) along with a message through a hash function. The hash output is a MAC. You send the MAC along with the message to some recipient.&lt;/p&gt;
&lt;p&gt;A recipient that also knows the shared secret can produce their own MAC and compare it to the one provided. Hash functions have a simple contract: if you feed them the same input twice you’ll get the exact same output. If the input is different – even by a single bit – the output will be totally different. So if the recipient’s MAC matches the one sent with the message it can be confident that the message was sent by another entity that knows the shared secret. Assuming only trusted entities know the shared secret, the recipient can trust the message.&lt;/p&gt;
&lt;p&gt;Hash functions are also one-way: it’s computationally infeasible to take the output of a hash function and reconstruct its input. This is critical to maintaining the confidentiality of a shared secret: otherwise some interloper could snoop your MACs, reverse your hash function, and figure out your secrets. That’s no good. Whether this property holds depends critically on subtle details of how hash functions are used to build MACs. Subtle details that I’m not going to get into here. So beware: don’t try to invent your own MAC algorithm. Use &lt;a href=&quot;https://en.wikipedia.org/wiki/HMAC&quot;&gt;HMAC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-hmac.jpg&quot; alt=&quot;HMAC&quot;/&gt;&lt;/p&gt;
&lt;p&gt;All this talk of MACs is prologue: our real store starts with &lt;em&gt;signatures&lt;/em&gt;. A &lt;strong&gt;signature&lt;/strong&gt; is conceptually similar to a MAC, but instead of using a shared secret you use a key pair (defined soon). With a MAC, at least two entities need to know the shared secret: the sender and the recipient. A valid MAC could have been generated by either party, and you can’t tell which. Signatures are different. A signature can be verified using a public key but can only be generated with a corresponding private key. Thus, a recipient that only has a public key can verify signatures, but can’t generate them. This gives you tighter control over who can sign stuff. If only one entity knows the private key you get a property called &lt;strong&gt;non-repudiation&lt;/strong&gt;: the private key holder can’t deny (repudiate) the fact that they signed some data.&lt;/p&gt;
&lt;p&gt;If you’re already confused, chill. They’re called signatures for a reason: they’re just like signatures in the real world. You have some stuff you want someone to agree to? You want to make sure you can prove they’ve agreed later on? Cool. Write it down and have them sign it.&lt;/p&gt;
&lt;h2 id=&quot;public-key-cryptography-lets-computers-see&quot;&gt;Public key cryptography lets computers see&lt;/h2&gt;
&lt;p&gt;Certificates and PKI are built on &lt;strong&gt;public key cryptography&lt;/strong&gt; (also called &lt;strong&gt;asymmetric cryptography&lt;/strong&gt;), which uses &lt;strong&gt;key pairs&lt;/strong&gt;. A key pair consists of a &lt;strong&gt;public key&lt;/strong&gt; that can be distributed and shared with the world, and a corresponding &lt;strong&gt;private key&lt;/strong&gt; that should be kept confidential by the owner.&lt;/p&gt;
&lt;p&gt;Let’s repeat that last part because it’s important: the security of a public key cryptosystem depends on keeping private keys private.&lt;/p&gt;
&lt;p&gt;There are two things you can do with a key pair:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You can &lt;strong&gt;encrypt&lt;/strong&gt; some data with the public key. The only way to decrypt that data is with the corresponding private key.&lt;/li&gt;
&lt;li&gt;You can &lt;strong&gt;sign&lt;/strong&gt; some data with the private key. Anyone who knows the corresponding public key can verify the signature, proving which private key produced it.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Public key cryptography is a magical gift from mathematics to computer science. &lt;a href=&quot;https://www.math.auckland.ac.nz//~sgal018/crypto-book/crypto-book.html&quot;&gt;The math&lt;/a&gt; is complicated, for sure, but you don’t need to understand it to appreciate its value. Public key cryptography lets computers do something that’s otherwise impossible: &lt;strong&gt;public key cryptography lets computers see&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ok, let me explain… public key cryptography lets one computer (or bit of code) prove to another that it knows something without sharing that knowledge directly. To prove you know a password you have to share it. Whoever you share it with can use it themselves. Not so with a private key. It’s like vision. If you know what I look like you can tell who I am – authenticate my identity – by looking at me. But you can’t shape-shift to impersonate me.&lt;/p&gt;
&lt;p&gt;Public key cryptography does something similar. If you know my public key (what I look like) you can use it to see me across the network. You could send me a big random number, for example. I can sign your number and send you my signature. Verifying that signature is good evidence you’re talking to me. This effectively allows computers to see who they’re talking to across a network. This is so crazy useful we take it for granted in the real world. Across a network it’s straight magic. Thanks math.&lt;/p&gt;
&lt;h2 id=&quot;certificates-drivers-licenses-for-computers-and-code&quot;&gt;Certificates: driver’s licenses for computers and code&lt;/h2&gt;
&lt;p&gt;What if you don’t already know my public key? That’s what certificates are for.&lt;/p&gt;
&lt;p&gt;Certificates are fundamentally &lt;em&gt;really&lt;/em&gt; simple. A certificate is a data structure that contains a public key and a name. The data structure is then &lt;em&gt;signed&lt;/em&gt;. The signature &lt;em&gt;binds&lt;/em&gt; the public key to the name. The entity that signs a certificate is called the &lt;strong&gt;issuer&lt;/strong&gt; (or certificate authority) and the entity named in the certificate is called the &lt;strong&gt;subject&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;Some Issuer&lt;/em&gt; signs a certificate for &lt;em&gt;Bob&lt;/em&gt;, that certificate can be interpreted as the statement: “&lt;em&gt;Some Issuer&lt;/em&gt; says &lt;em&gt;Bob&lt;/em&gt;’s public key is 01:23:42…“.This is a claim made by &lt;em&gt;Some Issuer&lt;/em&gt; about &lt;em&gt;Bob&lt;/em&gt;. The claim is signed by &lt;em&gt;Some Issuer&lt;/em&gt;, so if you know &lt;em&gt;Some Issuer&lt;/em&gt;’s public key you can authenticate it by verifying the signature. If you trust &lt;em&gt;Some Issuer&lt;/em&gt; you can trust the claim. Thus, certificates let you use trust, and knowledge of an issuer’s public key, to learn another entity’s public key (in this case, &lt;em&gt;Bob&lt;/em&gt;’s). That’s it. Fundamentally, that’s all a certificate is.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-drivers-license-cert.jpg&quot; alt=&quot;Simplified Certificate&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Certificates are like driver’s licenses or passports for computers and code. If you’ve never met me before, but you trust the DMV, you can use my license for authentication: verify that the license is valid (check hologram, etc), look at picture, look at me, read name. Computers use certificates to do the same thing: if you’ve never met some computer before, but you trust some certificate authority, you can use a certificate for authentication: verify that the certificate is valid (check signature, etc), look at public key, “look at private key” across network (as described above), read name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-license-vs-cert.jpg&quot; alt=&quot;License Compared to Certificate&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Let’s take a quick look at a real certificate:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-step-certificate-inspect.jpg&quot; alt=&quot;Step Certificate Inspect&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Yea so I might have simplified the story a little bit. Like a driver’s license, there’s other stuff in certificates. Licenses say whether you’re an organ donor and whether you’re authorized to drive a commercial vehicle. Certificates say whether you’re a CA and whether your public key is supposed to be used for signing or encryption. Both also have expirations.&lt;/p&gt;
&lt;p&gt;There’s a bunch of detail here, but it doesn’t change what I said before: fundamentally, a certificate is just a thing that binds a public key to a name.&lt;/p&gt;
&lt;h2 id=&quot;x509-asn1-oids-der-pem-pkcs-oh-my&quot;&gt;X.509, ASN.1, OIDs, DER, PEM, PKCS, oh my…&lt;/h2&gt;
&lt;p&gt;Let’s look at how certificates are represented as bits and bytes. This part actually is annoyingly complicated. In fact, I suspect that the esoteric and poorly defined manner in which certificates and keys are encoded is the source of most confusion and frustration around PKI in general. This stuff is dumb. Sorry.&lt;/p&gt;
&lt;p&gt;Usually when people talk about certificates without additional qualification they’re referring to X.509 v3 certificates. More specifically, they’re usually talking about the PKIX variant described in &lt;a href=&quot;https://tools.ietf.org/html/rfc5280&quot;&gt;RFC 5280&lt;/a&gt; and further refined by the CA/Browser Forum’s &lt;a href=&quot;https://cabforum.org/baseline-requirements-documents/&quot;&gt;Baseline Requirements&lt;/a&gt;. In other words, they’re referring to the sort of certificates that browsers understand and use for HTTPS (HTTP over TLS). There are other certificate formats. Notably, SSH and PGP both have their own. But we’re going to focus on X.509. If you can understand X.509 you’ll be able to figure everything else out.&lt;/p&gt;
&lt;p&gt;Since these certificates are so broadly supported – they have good libraries and whatnot – they’re frequently used in other contexts, too. They’re certainly the most common format for certificates issued by internal PKI (defined in a bit). Importantly, these certificates work out of the box with TLS and HTTPS clients and servers.&lt;/p&gt;
&lt;p&gt;You can’t fully appreciate X.509 without a small history lesson. X.509 was first standardized in 1988 as part of the broader X.500 project under the auspices of the ITU-T (the International Telecommunications Union’s standards body). X.500 was an effort by the telcos to build a global telephone book. That never happened, but vestiges remain. If you’ve ever looked at an X.509 certificate and wondered why something designed for the web encodes a locality, state, and country here’s your answer: X.509 wasn’t designed for the web. It was designed thirty years ago to build a phone book.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-cert-distinguished-name.jpg&quot; alt=&quot;Distinguised Name Close-Up&quot;/&gt;&lt;/p&gt;
&lt;p&gt;X.509 builds on ASN.1, another ITU-T standard (defined by X.208 and X.680). ASN stands for Abstract Syntax Notation (1 stands for One). ASN.1 is a notation for defining data types. You can think of it like JSON for X.509 but it’s actually more like protobuf or thrift or SQL DDL. RFC 5280 uses ASN.1 to define an X.509 certificate as an object that contains various bits of information: a name, key, signature, etc.&lt;/p&gt;
&lt;p&gt;ASN.1 has normal data types like integers, strings, sets, and sequences. It also has an unusual type that’s important to understand: object identifiers (OIDs). An OID is like a URI, but more annoying. They’re (supposed to be) universally unique identifiers. Structurally, OIDs are a sequence of integers in a hierarchical namespace. You can use an OID to &lt;em&gt;tag&lt;/em&gt; a bit of data with a type. A string is just a string, but if I tag a string with OID &lt;code class=&quot;highlighter-rouge&quot;&gt;2.5.4.3&lt;/code&gt; then it’s no longer an ordinary string – it’s an X.509 &lt;em&gt;common name&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-oids.jpg&quot; alt=&quot;OIDs Close-Up&quot;/&gt;&lt;/p&gt;
&lt;p&gt;ASN.1 is &lt;em&gt;abstract&lt;/em&gt; in the sense that the standard doesn’t say anything about how stuff should be represented as bits and bytes. For that there are various &lt;em&gt;encoding rules&lt;/em&gt; that specify concrete representations for ASN.1 data values. It’s an additional abstraction layer that’s supposed to be useful, but is mostly just annoying. It’s sort of like the difference between unicode and utf8 (eek).&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One#Encodings&quot;&gt;a bunch of encoding rules&lt;/a&gt; for ASN.1, but there’s only one that’s commonly used for X.509 certificates and other crypto stuff: distinguished encoding rules or DER (though the non-canonical basic encoding rules (BER) are also occasionally used). DER is a pretty simple type-length-value encoding, but you really don’t need to worry about it since libraries will do most of the heavy lifting.&lt;/p&gt;
&lt;p&gt;Unfortunately, the story doesn’t stop here. You don’t have to worry much about encoding and decoding DER but you &lt;em&gt;definitely will&lt;/em&gt; need to figure out whether a particular certificate is a plain DER-encoded X.509 certificate or something fancier. There are two potential dimensions of fanciness: we might be looking at something more than raw DER, and we might be looking at something more than just a certificate.&lt;/p&gt;
&lt;p&gt;Starting with the former dimension, DER is straight binary, and binary data is hard to copy-paste and otherwise shunt around the web. So most certificates are packaged up in &lt;a href=&quot;https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail&quot;&gt;PEM&lt;/a&gt; files (which stands for &lt;em&gt;Privacy Enhanced EMail&lt;/em&gt;, another weird historical vestige). If you’ve ever worked with &lt;a href=&quot;https://en.wikipedia.org/wiki/MIME&quot;&gt;MIME&lt;/a&gt;, PEM is similar: a base64 encoded payload sandwiched between a header and a footer. The PEM header has a label that’s supposed to describe the payload. Shockingly, this simple job is mostly botched and PEM labels are often inconsistent between tools (&lt;a href=&quot;https://tools.ietf.org/html/rfc7468&quot;&gt;RFC 7468&lt;/a&gt; attempts to standardize the use of PEM in this context, but it’s not complete and not always followed). Without further ado, here’s what a PEM-encoded X.509 v3 certificate looks like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;-----BEGIN CERTIFICATE-----
MIIBwzCCAWqgAwIBAgIRAIi5QRl9kz1wb+SUP20gB1kwCgYIKoZIzj0EAwIwGzEZ
MBcGA1UEAxMQTDVkIFRlc3QgUm9vdCBDQTAeFw0xODExMDYyMjA0MDNaFw0yODEx
MDMyMjA0MDNaMCMxITAfBgNVBAMTGEw1ZCBUZXN0IEludGVybWVkaWF0ZSBDQTBZ
MBMGByqGSM49AgEGCCqGSM49AwEHA0IABAST8h+JftPkPocZyuZ5CVuPUk3vUtgo
cgRbkYk7Ong7ey/fM5fJdRNdeW6SouV5h3nF9JvYKEXuoymSNjGbKomjgYYwgYMw
DgYDVR0PAQH/BAQDAgGmMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAS
BgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQWBBRc+LHppFk8sflIpm/XKpbNMwx3
SDAfBgNVHSMEGDAWgBTirEpzC7/gexnnz7ozjWKd71lz5DAKBggqhkjOPQQDAgNH
ADBEAiAejDEfua7dud78lxWe9eYxYcM93mlUMFIzbWlOJzg+rgIgcdtU9wIKmn5q
FU3iOiRP5VyLNmrsQD3/ItjUN1f1ouY=
-----END CERTIFICATE-----
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;PEM-encoded certificates will usually carry a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.crt&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;.cer&lt;/code&gt; extension. A raw certificate encoded using DER will usually carry a &lt;code class=&quot;highlighter-rouge&quot;&gt;.der&lt;/code&gt; extension. Again, there’s not much consistency here, so your mileage may vary.&lt;/p&gt;
&lt;p&gt;Returning to our other dimension of fanciness: in addition to fancier encoding using PEM, a certificate might be wrapped up in fancier packaging. Several &lt;em&gt;envelope formats&lt;/em&gt; define larger data structures (still using ASN.1) that can contain certificates, keys, and other stuff. Some things ask for “a certificate” when they really want a certificate in one of these envelopes. So beware.&lt;/p&gt;
&lt;p&gt;The envelope formats you’re likely to encounter are part of a suite of standards called PKCS (Public Key Cryptography Standards) published by RSA labs (actually the story is &lt;a href=&quot;https://security.stackexchange.com/questions/73156/whats-the-difference-between-x-509-and-pkcs7-certificate&quot;&gt;slightly more complicated&lt;/a&gt;, but whatever). The first is &lt;a href=&quot;https://tools.ietf.org/html/rfc2315&quot;&gt;PKCS#7&lt;/a&gt;, rebranded &lt;a href=&quot;https://tools.ietf.org/html/rfc5652&quot;&gt;Cryptographic Message Syntax&lt;/a&gt; (CMS) by IETF, which can contain one or more certificates (encoding a full certificate chain, described shortly). PKCS#7 is commonly used by Java. Common extensions are &lt;code class=&quot;highlighter-rouge&quot;&gt;.p7b&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.p7c&lt;/code&gt;. The other common envelope format is &lt;a href=&quot;https://tools.ietf.org/html/rfc7292&quot;&gt;PKCS#12&lt;/a&gt; which can contain a certificate chain (like PKCS#7) along with an (encrypted) private key. PKCS#12 is commonly used by Microsoft products. Common extensions are &lt;code class=&quot;highlighter-rouge&quot;&gt;.pfx&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.p12&lt;/code&gt;. Again, the PKCS#7 and PKCS#12 envelopes also use ASN.1. That means both can be encoded as raw DER or BER or PEM. That said, in my experience they’re almost always raw DER.&lt;/p&gt;
&lt;p&gt;Key encoding is similarly convoluted, but the pattern is generally the same: some ASN.1 data structure describes the key, DER is used as a binary encoding, and PEM (hopefully with a useful header) might be used as a slightly friendlier representation. Deciphering the sort of key you’re looking at is half art, half science. If you’re lucky &lt;a href=&quot;https://tools.ietf.org/html/rfc7468&quot;&gt;RFC 7468&lt;/a&gt; will give good guidance to figure out what your PEM payload is. Elliptic curve keys are usually labeled as such, though there &lt;a href=&quot;https://tools.ietf.org/html/rfc5915#section-4&quot;&gt;doesn’t seem to be any standardization&lt;/a&gt;. Other keys are simply “PRIVATE KEY” by PEM. This usually indicates a &lt;a href=&quot;https://tools.ietf.org/html/rfc5208&quot;&gt;PKCS#8&lt;/a&gt; payload, an envelope for private keys that includes key type and other metadata. Here’s an example of a PEM-encoded elliptic curve key:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ step crypto keypair --kty EC --no-password --insecure ec.pub ec.prv
$ cat ec.pub ec.prv
&lt;span class=&quot;gd&quot;&gt;-----BEGIN PUBLIC KEY-----
&lt;/span&gt;MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEc73/+JOESKlqWlhf0UzcRjEe7inF
uu2z1DWxr+2YRLfTaJOm9huerJCh71z5lugg+QVLZBedKGEff5jgTssXHg==
&lt;span class=&quot;gd&quot;&gt;-----END PUBLIC KEY-----
-----BEGIN EC PRIVATE KEY-----
&lt;/span&gt;MHcCAQEEICjpa3i7ICHSIqZPZfkJpcRim/EAmUtMFGJg6QjkMqDMoAoGCCqGSM49
AwEHoUQDQgAEc73/+JOESKlqWlhf0UzcRjEe7inFuu2z1DWxr+2YRLfTaJOm9hue
rJCh71z5lugg+QVLZBedKGEff5jgTssXHg==
&lt;span class=&quot;gd&quot;&gt;-----END EC PRIVATE KEY-----
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s also quite common to see private keys encrypted using a password (a shared secret or symmetric key). Those will look something like this (&lt;code class=&quot;highlighter-rouge&quot;&gt;Proc-Type&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DEK-Info&lt;/code&gt; are part of PEM and indicate that this PEM payload is encrypted using &lt;code class=&quot;highlighter-rouge&quot;&gt;AES-256-CBC&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;-----BEGIN EC PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-256-CBC,b3fd6578bf18d12a76c98bda947c4ac9

qdV5u+wrywkbO0Ai8VUuwZO1cqhwsNaDQwTiYUwohvot7Vw851rW/43poPhH07So
sdLFVCKPd9v6F9n2dkdWCeeFlI4hfx+EwzXLuaRWg6aoYOj7ucJdkofyRyd4pEt+
Mj60xqLkaRtphh9HWKgaHsdBki68LQbObLOz4c6SyxI=
-----END EC PRIVATE KEY-----
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;PKCS#8 objects can also be encrypted, in which case the header label should be “ENCRYPTED PRIVATE KEY” per RFC 7468. You won’t have &lt;code class=&quot;highlighter-rouge&quot;&gt;Proc-Type&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Dek-Info&lt;/code&gt; headers in this case as this information is encoded in the payload instead.&lt;/p&gt;
&lt;p&gt;Public keys will usually have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pub&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; extension. Private keys may carry a &lt;code class=&quot;highlighter-rouge&quot;&gt;.prv,&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;.key&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;.pem&lt;/code&gt; extension. Once again, your mileage may vary.&lt;/p&gt;
&lt;p&gt;Quick summary. ASN.1 is used to define data types like certificates and keys. DER is a set of encoding rules for turning ASN.1 into bits and bytes. X.509 is defined in ASN.1. PKCS#7 and PKCS#12 are bigger data structures, also defined using ASN.1, that can contain certificates and other stuff. They’re commonly used by Java and Microsoft, respectively. Since raw binary DER is hard to shunt around the web most certificates are PEM-encoded, which base64 encodes the DER and labels it. Private keys are usually represented as PEM-encoded PKCS#8 objects. Sometimes they’re also encrypted with a password.&lt;/p&gt;
&lt;p&gt;If that’s confusing, it’s not you. It’s the world. I tried.&lt;/p&gt;
&lt;h3 id=&quot;public-key-infrastructure&quot;&gt;Public Key Infrastructure&lt;/h3&gt;
&lt;p&gt;It’s good to know what a certificate is, but that’s less than half the story. Let’s look at how certificates are created and used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Public key infrastructure&lt;/strong&gt; (PKI) is the umbrella term for all of the stuff we need in order to issue, distribute, store, use, verify, revoke, and otherwise manage and interact with certificates and keys. It’s an intentionally vague term, like “database infrastructure”. Certificates are the building blocks of most PKIs, and certificate authorities are the foundation. That said, PKI is so much more. It includes libraries, cron jobs, protocols, conventions, clients, servers, people, processes, names, discovery mechanisms, and all the other stuff you’ll need to use public key cryptography effectively.&lt;/p&gt;
&lt;p&gt;If you build your own PKI from scratch you’ll enjoy a ton of discretion. Just like if you build your own database infrastructure. In fact, many simple PKIs don’t even use certificates. When you edit &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.ssh/authorized_keys&lt;/code&gt; you’re configuring a simple certificate-less form of PKI that SSH uses to bind public keys to names in flat files. PGP uses certificates, but doesn’t use CAs. Instead it uses a &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_of_trust&quot;&gt;web-of-trust&lt;/a&gt; model. You can even &lt;a href=&quot;http://www.aaronsw.com/weblog/squarezooko&quot;&gt;use a blockchain&lt;/a&gt; to assign names and bind them to public keys. The only thing that’s truly mandatory if you’re building a PKI from scratch is that, definitionally, you’ve got to be using public keys. Everything else can change.&lt;/p&gt;
&lt;p&gt;That said, you probably don’t want to build a PKI entirely from scratch. We’ll focus on the sort of PKI used on the web, and internal PKIs that are based on Web PKI technologies and leverage existing standards and components.&lt;/p&gt;
&lt;p&gt;As we proceed remember the simple goal of certificates and PKI: to bind names to public keys.&lt;/p&gt;
&lt;h3 id=&quot;web-pki-vs-internal-pki&quot;&gt;Web PKI vs Internal PKI&lt;/h3&gt;
&lt;p&gt;You interact with Web PKI via your browser whenever you access an HTTPS URL — like when you loaded this website. This is the only PKI many people are (at least vaguely) familiar with. It creaks and clanks and bumbles along but it mostly works. Despite its problems, it substantially improves security on the web and it’s mostly transparent to users. You should use it everywhere your system communicates with the outside world over the internet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web PKI&lt;/strong&gt; is mostly defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc5280&quot;&gt;RFC 5280&lt;/a&gt; and refined by the &lt;a href=&quot;https://cabforum.org/&quot;&gt;CA/Browser Forum&lt;/a&gt; (a.k.a., CA/B or CAB Forum). It’s sometimes called “Internet PKI” or PKIX (after the working group that created it). The PKIX and CAB Forum documents cover a lot of ground. They define the variety of certificates we talked about in the last section. They also define what a “name” is and where it goes in a certificate, what signature algorithms can be used, how a relying party determines the issuer of a certificate, how a certificate’s validity period (issue and expiry dates) is specified, how revocation and certificate path validation works, the process that CAs use to determine whether someone owns a domain, and a whole lot more.&lt;/p&gt;
&lt;p&gt;Web PKI is important because Web PKI certificates work by default with browsers and pretty much everything else that uses TLS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internal PKI&lt;/strong&gt; is PKI you run yourself, for your own stuff: production infrastructure like services, containers, and VMs; enterprise IT applications; corporate endpoints like laptops and phones; and any other code or device you want to identify. It allows you to authenticate and establish cryptographic channels so your stuff can run anywhere and securely communicate, even across the public internet.&lt;/p&gt;
&lt;p&gt;Why run your own internal PKI if Web PKI already exists? The simple answer is that Web PKI wasn’t designed to support internal use cases. Even with a CA like &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt;, which offers free certificates and automated provisioning, you’ll have to deal with &lt;a href=&quot;https://letsencrypt.org/docs/rate-limits/&quot;&gt;rate limits&lt;/a&gt; and &lt;a href=&quot;https://statusgator.com/services/lets-encrypt&quot;&gt;availability&lt;/a&gt;. That’s no good if you have lots of services that you deploy all the time.&lt;/p&gt;
&lt;p&gt;Further, with Web PKI you have little or no control over important details like certificate lifetime, revocation mechanisms, renewal processes, key types, and algorithms (all important stuff we’ll explain in a moment).&lt;/p&gt;
&lt;p&gt;Finally, the CA/Browser Forum &lt;a href=&quot;https://cabforum.org/baseline-requirements-documents/&quot;&gt;Baseline Requirements&lt;/a&gt; actually prohibit Web PKI CAs from binding internal IPs (e.g., stuff in &lt;code class=&quot;highlighter-rouge&quot;&gt;10.0.0.0/8&lt;/code&gt;) or internal DNS names that aren’t fully-qualified and resolvable in public global DNS (e.g., you can’t bind a kubernetes cluster DNS name like &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.ns.svc.cluster.local&lt;/code&gt;). If you want to bind this sort of name in a certificate, issue lots of certificates, or control certificate details, you’ll need your own internal PKI.&lt;/p&gt;
&lt;p&gt;In the next section we’ll see that trust (or lack thereof) is yet &lt;em&gt;another&lt;/em&gt; reason to avoid Web PKI for internal use. In short, use Web PKI for your public website and APIs. Use your own internal PKI for everything else.&lt;/p&gt;
&lt;h3 id=&quot;trust--trustworthiness&quot;&gt;Trust &amp;amp; Trustworthiness&lt;/h3&gt;
&lt;h4 id=&quot;trust-stores&quot;&gt;Trust Stores&lt;/h4&gt;
&lt;p&gt;Earlier we learned to interpret a certificate as a statement, or claim, like: “&lt;em&gt;issuer says subject’s public key is blah blah blah&lt;/em&gt;”. This claim is signed by the issuer so it can be authenticated by relying parties. We glossed over something important in this description: how does the relying party know the &lt;em&gt;issuer&lt;/em&gt;’s public key?&lt;/p&gt;
&lt;p&gt;The answer is simple, if not satisfying: relying parties are pre-configured with a list of trusted &lt;strong&gt;root certificates&lt;/strong&gt; (or trust anchors) in a &lt;strong&gt;trust store&lt;/strong&gt;. The manner in which this pre-configuration occurs is an important aspect of any PKI. One option is to bootstrap off of another PKI: you could have some automation tool use SSH to copy root certificates to relying parties, leveraging the SSH PKI described earlier. If you’re running in the cloud your SSH PKI, in turn, is bootstrapped off of Web PKI plus whatever authentication your cloud vendor did when you created your account and gave them your credit card. If you follow this &lt;em&gt;chain of trust&lt;/em&gt; back far enough you’ll always find people: every trust chain ends in meatspace.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-chain-of-trust.jpg&quot; alt=&quot;Chain of Trust&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Root certificates in trust stores are &lt;strong&gt;self-signed&lt;/strong&gt;. The issuer and the subject are the same. Logically it’s a statement like “&lt;em&gt;Mike&lt;/em&gt; says &lt;em&gt;Mike&lt;/em&gt;’s public key is &lt;em&gt;blah blah blah&lt;/em&gt;”. The signature on a self-signed certificate provides assurance that the subject/issuer knows the relevant private key, but anyone can generate a self-signed certificate with any name they want in it. So provenance is critical: a self-signed certificate should only be trusted insofar as the process by which it made its way into the trust store is trusted. On macOS the trust store is managed by the keychain. On many Linux distributions it’s simply some file(s) in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt; or elsewhere on disk. If your users can modify these files you better trust all your users.&lt;/p&gt;
&lt;p&gt;So where do trust stores come from? For Web PKI the most important relying parties are browsers. The trust stores used by default by the major browsers – and pretty much everything else that uses TLS – are maintained by four organizations:&lt;/p&gt;
&lt;p&gt;Operating system trust stores typically ship with the OS. Firefox ships with its own trust store (distributed using TLS from mozilla.org — bootstrapping off of Web PKI using some other trust store). Programming languages and other non-browser stuff like &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; typically use the OS trust store by default. So the trust stores typically used by default by pretty much everything come pre-installed and are updated via software updates (which are usually code signed using yet another PKI).&lt;/p&gt;
&lt;p&gt;There are more than 100 certificate authorities commonly included in the trust stores maintained by these programs. You probably know the big ones: Let’s Encrypt, Symantec, DigiCert, Entrust, etc. It can be interesting to peruse them. If you’d like to do so programmatically, Cloudflare’s &lt;a href=&quot;https://github.com/cloudflare/cfssl&quot;&gt;cfssl&lt;/a&gt; project maintains a &lt;a href=&quot;https://github.com/cloudflare/cfssl_trust&quot;&gt;github repository&lt;/a&gt; that includes the trusted certificates from various trust stores to assist with certificate bundling (which we’ll discuss momentarily). For a more human-friendly experience you can query &lt;a href=&quot;https://censys.io/&quot;&gt;Censys&lt;/a&gt; to see which certificates are trusted by &lt;a href=&quot;https://censys.io/certificates?q=validation.nss.valid%3A+true+AND+parsed.extensions.basic_constraints.is_ca%3A+true&quot;&gt;Mozilla&lt;/a&gt;, &lt;a href=&quot;https://censys.io/certificates?q=validation.apple.valid%3A+true+AND+parsed.extensions.basic_constraints.is_ca%3A+true&quot;&gt;Apple&lt;/a&gt;, and &lt;a href=&quot;https://censys.io/certificates?q=validation.microsoft.valid%3A+true+AND+parsed.extensions.basic_constraints.is_ca%3A+true&quot;&gt;Microsoft&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;trustworthiness&quot;&gt;Trustworthiness&lt;/h4&gt;
&lt;p&gt;These 100+ certificate authorities are trusted in the descriptive sense — browsers and other stuff trust certificates issued by these CAs by default. But that doesn’t mean they’re &lt;em&gt;trustworthy&lt;/em&gt; in the moral sense. On the contrary, there are documented cases of Web PKI certificate authorities providing governments with fraudulent certificates in order to snoop on traffic and impersonate websites. Some of these “trusted” CAs operate out of authoritarian jurisdictions like China. Democracies don’t really have a moral high ground here, either. NSA takes every available opportunity to undermine Web PKI. In 2011 the “trusted” DigiNotar and Comodo certificate authorities were &lt;a href=&quot;https://en.wikipedia.org/wiki/DigiNotar&quot;&gt;both&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Comodo_Group#Certificate_hacking&quot;&gt;compromised&lt;/a&gt;. The DigiNotar breach was probably NSA. There are also numerous examples of CAs mistakenly issuing malformed or non-compliant certificates. So while these CAs are de-facto trusted, as a group they’re empirically &lt;em&gt;not&lt;/em&gt; trustworthy. We’ll soon see that Web PKI in general is only as secure as the least secure CA, so this is not good.&lt;/p&gt;
&lt;p&gt;The browser community has taken some action to address this issue. The CA/Browser Forum Baseline Requirements rationalize the rules that these trusted certificate authorities are supposed to follow before issuing certificates. CAs are audited for compliance with these rules as part of the WebTrust audit program, which is required by some root certificate programs for inclusion in their trust stores (e.g., Mozilla’s).&lt;/p&gt;
&lt;p&gt;Still, if you’re using TLS for internal stuff, you probably don’t want to trust these public CAs any more than you have to. If you do, you’re probably opening up the door to NSA and others. You’re accepting the fact that your security depends on the discipline and scruples of 100+ other organizations. Maybe you don’t care, but fair warning.&lt;/p&gt;
&lt;h4 id=&quot;federation&quot;&gt;Federation&lt;/h4&gt;
&lt;p&gt;To make matters worse, Web PKI relying parties (RPs) trust every CA in their trust store to sign certificates for any subscriber. The result is that the overall security of Web PKI is only as good as the least secure Web PKI CA. The 2011 DigiNotar attack demonstrated the problem here: as part of the attack a certificate was fraudulently issued for google.com. This certificate was trusted by major web browsers and operating systems despite the fact that Google had no relationship with DigiNotar. Dozens more fraudulent certificates were issued for companies like Yahoo!, Mozilla, and The Tor Project. DigiNotar root certificates were ultimately removed from the major trust stores, but a lot of damage had almost certainly already been done.&lt;/p&gt;
&lt;p&gt;More recently, Sennheiser &lt;a href=&quot;https://medium.com/asecuritysite-when-bob-met-alice/your-headphones-might-break-the-security-of-your-computer-4f304ed86611&quot;&gt;got called out for installing a self-signed root certificate&lt;/a&gt; in trust stores with their HeadSetup app, then embedding the corresponding private key in the app’s configuration. Anyone can extract this private key and use it to issue a certificate for any domain. Any computer that has the Sennheiser certificate in its trust store would trust these fraudulent certificates. This completely undermines TLS. Oops.&lt;/p&gt;
&lt;p&gt;There are a number of mitigation mechanisms that can help reduce these risks. &lt;a href=&quot;https://tools.ietf.org/html/rfc6844&quot;&gt;Certificate Authority Authorization&lt;/a&gt; (CAA) allows you to restrict which CAs can issue certificates for your domain using a special DNS record. &lt;a href=&quot;https://www.certificate-transparency.org/&quot;&gt;Certificate Transparency&lt;/a&gt; (CT) (&lt;a href=&quot;https://tools.ietf.org/html/rfc6962&quot;&gt;RFC 6962&lt;/a&gt;) mandates that CAs submit every certificate they issue to an impartial observer that maintains a &lt;a href=&quot;https://crt.sh/?Identity=smallstep.com&quot;&gt;public certificate log&lt;/a&gt; to detect fraudulently issued certificates. Cryptographic proof of CT submission is included in issued certificates. &lt;a href=&quot;https://tools.ietf.org/html/rfc7469&quot;&gt;HTTP Public Key Pinning&lt;/a&gt; (HPKP or just “pinning”) lets a subscriber (a website) tell an RP (a browser) to only accept certain public keys in certificates for a particular domain.&lt;/p&gt;
&lt;p&gt;The problem with all of these things is RP support, or lack thereof. The CAB Forum now mandates CAA checks in browsers. Some browsers also have some support for CT and HPKP. For other RPs (e.g., most TLS standard library implementations) this stuff is almost never enforced. This issue will come up repeatedly: a lot of certificate policy must be enforced by RPs, and RPs can rarely be bothered. If RPs don’t check CAA records and don’t require proof of CT submission this stuff doesn’t do much good.&lt;/p&gt;
&lt;p&gt;In any case, if you run your own internal PKI you should maintain a separate trust store for internal stuff. That is, instead of adding your root certificate(s) to the existing system trust store, configure internal TLS requests to use only your roots. If you want better federation internally (e.g., you want to restrict which certificates your internal CAs can issue) you might try CAA records and properly configured RPs. You might also want to check out &lt;a href=&quot;https://spiffe.io/&quot;&gt;SPIFFE&lt;/a&gt;, an evolving standardization effort that addresses this problem and a number of others related to internal PKI.&lt;/p&gt;
&lt;h3 id=&quot;whats-a-certificate-authority&quot;&gt;What’s a Certificate Authority&lt;/h3&gt;
&lt;p&gt;We’ve talked a lot about certificate authorities (CAs) but haven’t actually defined what one is. A CA is a trusted certificate issuer. It vouches for the binding between a public key and a name by signing a certificate. Fundamentally, a certificate authority is just another certificate and a corresponding private key that’s used to sign other certificates.&lt;/p&gt;
&lt;p&gt;Obviously some logic and process needs to be wrapped around these artifacts. The CA needs to get its certificate distributed in trust stores, accept and process certificate requests, and issue certificates to subscribers. A CA that exposes remotely accessible APIs to automate this stuff it’s called an &lt;em&gt;online CA&lt;/em&gt;. A CA with a self-signed root certificate included in trust stores is called a &lt;em&gt;root CA&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;intermediates-chains-and-bundling&quot;&gt;Intermediates, Chains, and Bundling&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://cabforum.org/wp-content/uploads/CA-Browser-Forum-BR-1.6.1.pdf&quot;&gt;CAB Forum Baseline Requirements&lt;/a&gt; stipulate that a root private key belonging to a Web PKI root CA can only be used to sign a certificate by issuing a direct command (see section 4.3.1). In other words, Web PKI root CAs can’t automate certificate signing. They can’t be online. This is a problem for any large scale CA operation. You can’t have someone manually type a command into a machine to fulfill every certificate order.&lt;/p&gt;
&lt;p&gt;The reason for this stipulation is security. Web PKI root certificates are broadly distributed in trust stores and hard to revoke. Compromising a root CA private key would affect literally billions of people and devices. Best practice, therefore, is to keep root private keys offline, ideally on some &lt;a href=&quot;https://en.wikipedia.org/wiki/Hardware_security_module&quot;&gt;specialized hardware&lt;/a&gt; connected to an air gapped machine, with good physical security, and with strictly enforced procedures for use.&lt;/p&gt;
&lt;p&gt;Many internal PKIs also follow these same practices, though it’s far less necessary. If you can automate root certificate rotation (e.g., update your trust stores using configuration management or orchestration tools) you can easily rotate a compromised root key. People obsess so much over root private key management for internal PKIs that it delays or prevents internal PKI deployment. Your AWS root account credentials are at least as sensitive, if not more. How do you manage those credentials?&lt;/p&gt;
&lt;p&gt;To make certificate issuance scalable (i.e., to make automation possible) when the root CA isn’t online, the root private key is only used infrequently to sign a few &lt;em&gt;intermediate certificates&lt;/em&gt;. The corresponding &lt;em&gt;intermediate private keys&lt;/em&gt; are used by intermediate CAs (also called subordinate CAs) to sign and issue leaf certificates to subscribers. Intermediates aren’t generally included in trust stores, making them easier to revoke and rotate, so certificate issuance from an intermediate typically is online and automated.&lt;/p&gt;
&lt;p&gt;This &lt;strong&gt;bundle&lt;/strong&gt; of certificates – leaf, intermediate, root – forms a chain (called a &lt;em&gt;certificate chain&lt;/em&gt;). The leaf is signed by the intermediate, the intermediate is signed by the root, and the root signs itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-cert-chain.jpg&quot; alt=&quot;Certificate Chain&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Technically this is another simplification. There’s nothing stopping you from creating longer chains and more complex graphs (e.g., by &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/seccertenroll/about-cross-certification&quot;&gt;cross-certification&lt;/a&gt;). This is generally discouraged though, as it can become very complicated very quickly. In any case, end entity certificates are leaf nodes in this graph. Hence the name “leaf certificate”.&lt;/p&gt;
&lt;p&gt;When you configure a subscriber (e.g., a web server like Apache or Nginx or Linkerd or Envoy) you’ll typically need to provide not just the leaf certificate, but a certificate bundle that includes intermediate(s). PKCS#7 and PKCS#12 are sometimes used here because they can include a full certificate chain. More often, certificate chains are encoded as a simple sequence of line-separated PEM objects. Some stuff expects the certs to be ordered from leaf to root, other stuff expects root to leaf, and some stuff doesn’t care. More annoying inconsistency. Google and Stack Overflow help here. Or trial and error.&lt;/p&gt;
&lt;p&gt;In any case, here’s an example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ cat server.crt
&lt;span class=&quot;gd&quot;&gt;-----BEGIN CERTIFICATE-----
&lt;/span&gt;MIICFDCCAbmgAwIBAgIRANE187UXf5fn5TgXSq65CMQwCgYIKoZIzj0EAwIwHzEd
MBsGA1UEAxMUVGVzdCBJbnRlcm1lZGlhdGUgQ0EwHhcNMTgxMjA1MTc0OTQ0WhcN
MTgxMjA2MTc0OTQ0WjAUMRIwEAYDVQQDEwlsb2NhbGhvc3QwWTATBgcqhkjOPQIB
BggqhkjOPQMBBwNCAAQqE2VPZ+uS5q/XiZd6x6vZSKAYFM4xrYa/ANmXeZ/gh/n0
vhsmXIKNCg6vZh69FCbBMZdYEVOb7BRQIR8Q1qjGo4HgMIHdMA4GA1UdDwEB/wQE
AwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHQYDVR0OBBYEFHee
8N698LZWzJg6SQ9F6/gQBGkmMB8GA1UdIwQYMBaAFAZ0jCINuRtVd6ztucMf8Bun
D++sMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDBWBgwrBgEEAYKkZMYoQAEERjBEAgEB
BBJtaWtlQHNtYWxsc3RlcC5jb20EK0lxOWItOEdEUWg1SmxZaUJwSTBBRW01eHN5
YzM0d0dNUkJWRXE4ck5pQzQwCgYIKoZIzj0EAwIDSQAwRgIhAPL4SgbHIbLwfRqO
HO3iTsozZsCuqA34HMaqXveiEie4AiEAhUjjb7vCGuPpTmn8HenA5hJplr+Ql8s1
d+SmYsT0jDU=
&lt;span class=&quot;gd&quot;&gt;-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
&lt;/span&gt;MIIBuzCCAWKgAwIBAgIRAKBv/7Xs6GPAK4Y8z4udSbswCgYIKoZIzj0EAwIwFzEV
MBMGA1UEAxMMVGVzdCBSb290IENBMB4XDTE4MTIwNTE3MzgzOFoXDTI4MTIwMjE3
MzgzOFowHzEdMBsGA1UEAxMUVGVzdCBJbnRlcm1lZGlhdGUgQ0EwWTATBgcqhkjO
PQIBBggqhkjOPQMBBwNCAAT8r2WCVhPGeh2J2EFdmdMQi5YhpMp3hyVZWu6XNDbn
xd8QBUNZTHqdsMKDtXoNfmhH//dwz78/kRnbka+acJQ9o4GGMIGDMA4GA1UdDwEB
/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwEgYDVR0TAQH/
BAgwBgEB/wIBADAdBgNVHQ4EFgQUBnSMIg25G1V3rO25wx/wG6cP76wwHwYDVR0j
BBgwFoAUcITNjk2XmInW+xfLJjMYVMG7fMswCgYIKoZIzj0EAwIDRwAwRAIgTCgI
BRvPAJZb+soYP0tnObqWdplmO+krWmHqCWtK8hcCIHS/es7GBEj3bmGMus+8n4Q1
x8YmK7ASLmSCffCTct9Y
&lt;span class=&quot;gd&quot;&gt;-----END CERTIFICATE-----
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Again, annoying and baroque, but not rocket science.&lt;/p&gt;
&lt;h4 id=&quot;certificate-path-validation&quot;&gt;Certificate path validation&lt;/h4&gt;
&lt;p&gt;Since intermediate certificates are not included in trust stores they need to be distributed and verified just like leaf certificates. You provide these intermediates when you configure subscribers, as described above. Then subscribers pass them along to RPs. With TLS this happens as part of the handshake that establishes a TLS connection. When a subscriber sends its certificate to a relying party it includes any intermediate(s) necessary to chain back up to a trusted root. The relying party verifies the leaf and intermediate certificates in a process called &lt;strong&gt;certificate path validation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-cert-path-validation.jpg&quot; alt=&quot;Certificate Path Validation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The complete &lt;a href=&quot;https://tools.ietf.org/html/rfc5280#section-6&quot;&gt;certificate path validation&lt;/a&gt; algorithm is complicated. It includes checking certificate expirations, revocation status, various certificate policies, key use restrictions, and a bunch of other stuff. Proper implementation of this algorithm by PKI RPs is absolutely critical. People are shockingly casual about disabling certificate path validation (e.g., by passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; flag to &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;). Don’t do this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t disable certificate path validation.&lt;/strong&gt; It’s not that hard to do proper TLS, and certificate path validation is the part of TLS that does authentication. People sometimes argue that the channel is still encrypted, so it doesn’t matter. That’s wrong. It does matter. Encryption without authentication is pretty worthless. It’s like a blind confessional: your conversation is private but you have no idea who’s on the other side of the curtain. Only this isn’t a church, it’s the internet. So &lt;strong&gt;don’t disable certificate path validation&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;key--certificate-lifecycle&quot;&gt;Key &amp;amp; Certificate Lifecycle&lt;/h3&gt;
&lt;p&gt;Before you can use a certificate with a protocol like TLS you need to figure out how to get one from a CA. Abstractly this is a pretty simple process: a subscriber that wants a certificate generates a key pair and submits a request to a certificate authority. The CA makes sure the name that will be bound in the certificate is correct and, if it is, signs and returns a certificate.&lt;/p&gt;
&lt;p&gt;Certificates expire, at which point they’re no longer trusted by RPs. If you’re still using a certificate that’s about to expire you’ll need to renew and rotate it. If you want RPs to stop trusting a certificate before it expires, it can (sometimes) be revoked.&lt;/p&gt;
&lt;p&gt;Like much of PKI this simple process is deceptively intricate. Hidden in the details are the two hardest problems in computer science: cache invalidation and naming things. Still, it’s all easy enough to reason about once you understand what’s going on.&lt;/p&gt;
&lt;h4 id=&quot;naming-things&quot;&gt;Naming things&lt;/h4&gt;
&lt;p&gt;Historically, X.509 used X.500 &lt;em&gt;distinguished names&lt;/em&gt; (DNs) to name the subject of a certificate (a subscriber). A DN includes a &lt;em&gt;common name&lt;/em&gt; (for me, that’d be “Mike Malone”). It can also include a &lt;em&gt;locality&lt;/em&gt;, &lt;em&gt;country&lt;/em&gt;, &lt;em&gt;organization&lt;/em&gt;, &lt;em&gt;organizational unit&lt;/em&gt;, and a whole bunch of other irrelevant crap (recall that this stuff was originally meant for a digital phone book). No one understands distinguished names. They don’t really make sense for the web. Avoid them. If you do use them, keep them simple. You don’t have to use every field. In fact, you &lt;em&gt;shouldn’t&lt;/em&gt;. A common name is probably all you need, and perhaps an organization name if you’re a thrill seeker.&lt;/p&gt;
&lt;p&gt;PKIX originally specified that the DNS hostname of a website should be bound in the the DN &lt;em&gt;common name&lt;/em&gt;. More recently, the CAB Forum has deprecated this practice and made the entire DN optional (see sections 7.1.4.2 of the &lt;a href=&quot;https://cabforum.org/wp-content/uploads/CA-Browser-Forum-BR-1.6.1.pdf&quot;&gt;Baseline Requirements&lt;/a&gt;). Instead, the modern best practices is to leverage the &lt;a href=&quot;https://tools.ietf.org/html/rfc5280#section-4.2.1.6&quot;&gt;subject alternative name (SAN) X.509 extension&lt;/a&gt; to bind a name in a certificate.&lt;/p&gt;
&lt;p&gt;There are four sorts of SANs in common use, all of which bind names that are broadly used and understood: domain names (DNS), email addresses, IP addresses, and URIs. These are already supposed to be unique in the contexts we’re interested in, and they map pretty well to the things we’re interested in identifying: email addresses for people, domain names and IP addresses for machines and code, URIs if you want to get fancy. Use SANs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-inspect-san-dns.jpg&quot; alt=&quot;Step Certificate Inspect SAN vs DN&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Note also that Web PKI allows for multiple names to be bound in a certificate and allows for wildcards in names. A certificate can have multiple SANs, and can have SANs like &lt;code class=&quot;highlighter-rouge&quot;&gt;*.smallstep.com&lt;/code&gt;. This is useful for websites that respond to multiple names (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;smallstep.com&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;www.smallstep.com&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&quot;generating-key-pairs&quot;&gt;Generating key pairs&lt;/h4&gt;
&lt;p&gt;Once we’ve got a name we need to generate a key pair before we can create a certificate. Recall that the security of a PKI depends critically on a simple invariant: that the only entity that knows a given private key is the subscriber named in the corresponding certificate. To be sure that this invariant holds, best practice is to have the subscriber generate its own key pair so it’s the only thing that &lt;em&gt;ever&lt;/em&gt; knows it. Definitely avoid transmitting a private key across the network.&lt;/p&gt;
&lt;p&gt;You’ll need to decide what type of key you want to use. That’s another post entirely, but here’s some quick guidance (as of December 2018). There’s a slow but ongoing transition from RSA to elliptic curve keys (&lt;a href=&quot;https://blog.cloudflare.com/ecdsa-the-digital-signature-algorithm-of-a-better-internet/&quot;&gt;ECDSA&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc8032&quot;&gt;EdDSA&lt;/a&gt;). If you decide to use RSA keys make them at least 2048 bits, and don’t bother with anything bigger than 4096 bits. If you use ECDSA, the P-256 curve is probably best (&lt;code class=&quot;highlighter-rouge&quot;&gt;secp256k1&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;prime256v1&lt;/code&gt; in openssl)… unless you’re worried about the NSA in which case you may opt to use something fancier like EdDSA with Curve25519 (though support for these keys is not great).&lt;/p&gt;
&lt;p&gt;Here’s an example of generating a elliptic curve P-256 key pair using &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;openssl ecparam -name prime256v1 -genkey -out k.prv
openssl ec -in es256.key -pubout -out k.pub
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here’s an example of generating the same sort of key pair using &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;step crypto keypair --kty EC --curve P-256 k.pub k.prv
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also do this programmatically and never let your private keys touch disk.&lt;/p&gt;
&lt;p&gt;Choose your poison.&lt;/p&gt;
&lt;h4 id=&quot;issuance&quot;&gt;Issuance&lt;/h4&gt;
&lt;p&gt;Once a subscriber has a name and key pair the next step is to obtain a leaf certificate from a CA. The CA is going to want to authenticate (prove) two things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The public key to be bound in the certificate is the subscriber’s public key (i.e., the subscriber knows the corresponding private key)&lt;/li&gt;
&lt;li&gt;The name to be bound in the certificate is the subscriber’s name&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The former is typically achieved via a simple technical mechanism: a certificate signing request. The latter is harder. Abstractly, the process is called identity proofing or registration.&lt;/p&gt;
&lt;h5 id=&quot;certificate-signing-requests&quot;&gt;Certificate signing requests&lt;/h5&gt;
&lt;p&gt;To request a certificate a subscriber submits a &lt;em&gt;certificate signing request&lt;/em&gt; (CSR) to a certificate authority. The CSR is another ASN.1 structure, defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc2986&quot;&gt;PKCS#10&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like a certificate, a CSR is a data structure that contains a public key, a name, and a signature. It’s self-signed using the private key that corresponds to the public key in the CSR. This signature proves that whatever created the CSR knows the private key. It also allows the CSR to be copy-pasted and shunted around without the possibility of modification by some interloper.&lt;/p&gt;
&lt;p&gt;CSRs include lots of options for specifying certificate details. In practice most of this stuff is ignored by CAs. Instead most CAs use a template or provide an administrative interface to collect this information.&lt;/p&gt;
&lt;p&gt;You can generate a key pair and create a CSR using &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; in one command like so:&lt;/p&gt;
&lt;p&gt;step certificate create –csr test.smallstep.com test.csr test.key&lt;/p&gt;
&lt;p&gt;OpenSSL is super powerful, but &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man1/openssl-req.html&quot;&gt;a lot more annoying&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;identity-proofing&quot;&gt;Identity proofing&lt;/h5&gt;
&lt;p&gt;Once a CA receives a CSR and verifies its signature the next thing it needs to do is figure out whether the name to be bound in the certificate is actually the correct name of the subscriber. This is tricky. The whole point of certificates is to allow RPs to authenticate subscribers, but how is the CA supposed to authenticate the subscriber before a certificate’s been issued?&lt;/p&gt;
&lt;p&gt;The answer is: it depends. For Web PKI there are three kinds of certificates and the biggest differences are how they identify subscribers and the sort of identity proofing that’s employed. They are: domain validation (DV), organization validation (OV), and extended validation (EV) certificates.&lt;/p&gt;
&lt;p&gt;DV certificates bind a DNS name and are issued based on proof of control over a domain name. Proofing typically proceeds via a simple ceremony like sending a confirmation email to the administrative contact listed in WHOIS records. The &lt;a href=&quot;https://ietf-wg-acme.github.io/acme/draft-ietf-acme-acme.html&quot;&gt;ACME protocol&lt;/a&gt;, originally developed and used by Let’s Encrypt, improves this process with better automation: instead of using email verification an ACME CA issues a challenge that the subscriber must complete to prove it controls a domain. The challenge portion of the ACME specification is an extension point, but common challenges include serving a random number at a given URL (the HTTP challenge) and placing a random number in a DNS TXT record (the DNS challenge).&lt;/p&gt;
&lt;p&gt;OV and EV certificates build on DV certificates and include the name and location of the organization that owns the bound domain name. They connect a certificate not just to a domain name, but to the legal entity that controls it. The verification process for OV certificates is not consistent across CAs. To address this, CAB Forum introduced EV certificates. They include the same basic information but mandate strict verification (identity proofing) requirements. The EV process can take days or weeks and can include public records searches and attestations (on paper) signed by corporate officers (with pens). After all this, when you visit a website that uses an EV certificate some browsers display the name of the organization in the URL bar. Outside this limited use in browsers, EV certificates aren’t widely leveraged or required by Web PKI relying parties.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-github-ev.jpg&quot; alt=&quot;Github EV&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Essentially every Web PKI RP only requires DV level assurance, based on “proof” of control of a domain. It’s important to consider what, precisely, a DV certificate &lt;em&gt;actually&lt;/em&gt; proves. It’s &lt;em&gt;supposed&lt;/em&gt; to prove that the entity requesting the certificate owns the relevant domain. It &lt;em&gt;actually&lt;/em&gt; proves that, at some point in time, the entity requesting the certificate was able to read an email &lt;em&gt;or&lt;/em&gt; configure DNS &lt;em&gt;or&lt;/em&gt; serve a secret via HTTP. The underlying security of DNS, email, and BGP that these processes rely on is not great. Attacks against this infrastructure &lt;a href=&quot;https://doublepulsar.com/hijack-of-amazons-internet-domain-service-used-to-reroute-web-traffic-for-two-hours-unnoticed-3a6f0dda6a6f&quot;&gt;have occurred&lt;/a&gt; with the intent to obtain fraudulent certificates.&lt;/p&gt;
&lt;p&gt;For internal PKI you can use any process you want for identity proofing. You can probably do better than relying on DNS or email the way Web PKI does. This might seem hard at first, but it’s really not. You can leverage existing trusted infrastructure: whatever you use to provision your stuff should also be able to measure and attest to the identity of whatever’s being provisioned. If you trust Chef or Puppet or Ansible or Kubernetes to put code on servers, you can trust them for identity attestations. If you’re using raw AMIs on AWS you can use &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-identity-documents.html&quot;&gt;instance identity documents&lt;/a&gt; (&lt;a href=&quot;https://cloud.google.com/compute/docs/instances/verifying-instance-identity&quot;&gt;GCP&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token&quot;&gt;Azure&lt;/a&gt; have similar functionality).&lt;/p&gt;
&lt;p&gt;Your provisioning infrastructure &lt;em&gt;must&lt;/em&gt; have some notion of identity in order to put the right code in the right place and start things up. And you &lt;em&gt;must&lt;/em&gt; trust it. You can leverage this knowledge and trust to configure RP trust stores and bootstrap subscribers into your internal PKI. All you need to do is come up with some way for your provisioning infrastructure to tell your CA the identity of whatever’s starting up. Incidentally, this is precisely the gap &lt;a href=&quot;https://smallstep.com/certificates/&quot;&gt;step certificates&lt;/a&gt; was designed to fill.&lt;/p&gt;
&lt;h4 id=&quot;expiration&quot;&gt;Expiration&lt;/h4&gt;
&lt;p&gt;Certificates expire… usually. This isn’t a strict requirement, per se, but it’s almost always true. Including an expiration in a certificate is important because certificate use is disaggregated: in general there’s no central authority that’s interrogated when a certificate is verified by an RP. Without an expiration date, certificates would be trusted forever. A rule of thumb for security is that, as we approach forever, the probability of a credential becoming compromised approaches 100%. Thus, certificates expire.&lt;/p&gt;
&lt;p&gt;In particular, X.509 certificates include a validity period: an &lt;em&gt;issued at&lt;/em&gt; time, a &lt;em&gt;not before&lt;/em&gt; time, and a &lt;em&gt;not after&lt;/em&gt; time. Time marches forward, eventually passes the &lt;em&gt;not after&lt;/em&gt; time, and the certificate dies. This seemingly innocuous inevitability has a couple important subtleties.&lt;/p&gt;
&lt;p&gt;First, there’s nothing stopping a particular RP from accepting an expired certificate by mistake (or bad design). Again, certificate use is disaggregated. It’s up to each RP to check whether a certificate has expired, and sometimes they mess up. This might happen if your code depends on a system clock that isn’t properly synchronized. A common scenario is a system whose clock is reset to the unix epoch that doesn’t trust any certificates because it thinks it’s January 1, 1970 — well before the &lt;em&gt;not before&lt;/em&gt; time on any recently issued certificate. So make sure your clocks are synchronized!&lt;/p&gt;
&lt;p&gt;On the subscriber side, private key material needs to be dealt with properly after certificate expiration. If a key pair was used for signing/authentication (e.g., with TLS) you’ll want to delete the private key once it’s no longer needed. Keeping a signing key around is an unnecessary security risk: it’s no good for anything but fraudulent signatures. However, if your key pair was used for encryption the situation is different. You’ll need to keep the private key around as long as there’s still data encrypted under the key. If you’ve ever been told not to use the same key pair for signing and encryption, this is the main reason. Using the same key for signing and encryption makes it impossible to implement key lifecycle management best practices when a private key is no longer needed for signing: it forces you to keep signing keys around longer than necessary if it’s still needed to decrypt stuff.&lt;/p&gt;
&lt;h4 id=&quot;renewal&quot;&gt;Renewal&lt;/h4&gt;
&lt;p&gt;If you’re still using a certificate that’s about to expire you’re going to want to renew it before that happens. There’s actually no standard renewal process for Web PKI – there’s no formal way to extend the validity period on a certificate. Instead you just replace the expiring certificate with a new one. So the renewal process is the same as the issuance process: generate and submit a CSR and fulfill any identity proofing obligations.&lt;/p&gt;
&lt;p&gt;For internal PKI we can do better. The easiest thing to do is to use your old certificate with a protocol like mutual TLS to renew. The CA can authenticate the client certificate presented by the subscriber, re-sign it with an extended expiry, and return the new certificate in response. This makes automated renewal very easy and still forces subscribers to periodically check in with a central authority. You can use this checkin process to easily build monitoring and revocation facilities.&lt;/p&gt;
&lt;p&gt;In either case the hardest part is simply remembering to renew your certificates before they expire. Pretty much everyone who manages certificates for a public website has had one expire unexpectedly, producing an error &lt;a href=&quot;https://expired.badssl.com/&quot;&gt;like this&lt;/a&gt;. My best advice here is: if something hurts, do it more. Use short lived certificates. That will force you to improve your processes and automate this problem away. Let’s Encrypt makes automation easy and issues 90 day certificates, which is pretty good for Web PKI. For internal PKI you should probably go even shorter: twenty-four hours or less. There are some implementation challenges – &lt;a href=&quot;https://diogomonica.com/2017/01/11/hitless-tls-certificate-rotation-in-go/&quot;&gt;hitless certificate rotation&lt;/a&gt; can be a bit tricky – but it’s worth the effort.&lt;/p&gt;
&lt;p&gt;Quick tip, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt; to check the expiry time on a certificate from the command line:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;step certificate inspect cert.pem --format json | jq .validity.end
step certificate inspect https://smallstep.com --format json | jq .validity.end
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s a little thing, but if you combine this with a DNS zone transfer in a little bash script you can get decent monitoring around certificate expiration for all your domains to help catch issues before they become outages.&lt;/p&gt;
&lt;h4 id=&quot;revocation&quot;&gt;Revocation&lt;/h4&gt;
&lt;p&gt;If a private key is compromised or a certificate’s simply no longer needed you might want to revoke it. That is, you might want to actively mark it as invalid so that it stops being trusted by RPs immediately, even before it expires. Revoking X.509 certificates is &lt;a href=&quot;https://maikel.pro/blog/current-state-certificate-revocation-crls-ocsp/&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;https://scotthelme.co.uk/revocation-is-broken/&quot;&gt;big&lt;/a&gt; &lt;a href=&quot;https://www.imperialviolet.org/2014/04/19/revchecking.html&quot;&gt;mess&lt;/a&gt;. Like expiration, the onus is on RPs to enforce revocations. Unlike expiration, the revocation status can’t be encoded in the certificate. The RP has to determine the certificate’s revocation status via some out-of-band process. Unless explicitly configured, &lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=745837&quot;&gt;most&lt;/a&gt; &lt;a href=&quot;https://github.com/golang/go/issues/18323&quot;&gt;Web&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/38301283/java-ssl-certificate-revocation-checking&quot;&gt;PKI&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/39297240/python-failed-to-verify-any-crls-for-ssl-tls-connections?rq=1&quot;&gt;TLS&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/16244084/how-to-programmatically-check-if-a-certificate-has-been-revoked&quot;&gt;RPs&lt;/a&gt; &lt;a href=&quot;https://github.com/nodejs/node/issues/16338&quot;&gt;don’t&lt;/a&gt; &lt;a href=&quot;https://forums.developer.apple.com/thread/24298&quot;&gt;bother&lt;/a&gt;. In other words, by default, most TLS implementations will happily accept revoked certificates.&lt;/p&gt;
&lt;p&gt;For internal PKI the trend is towards accepting this reality and using &lt;em&gt;passive revocation&lt;/em&gt;. That is, issuing certificates that expire quickly enough that revocation isn’t necessary. If you want to “revoke” a certificate you simply disallow renewal and wait for it to expire. For this to work you need to use short-lived certificates. How short? That depends on your threat model (that’s how security professionals say ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯). Twenty-four hours is pretty typical, but so are much shorter expirations like five minutes. There are obvious challenges around scalability and availability if you push lifetimes too short: every renewal requires interaction with an online CA, so your CA infrastructure better be scalable and highly available. As you decrease certificate lifetime, remember to keep all your clocks in sync or you’re gonna have a bad time.&lt;/p&gt;
&lt;p&gt;For the web and other scenarios where passive revocation won’t work, the first thing you should do is stop and reconsider passive revocation. If you &lt;em&gt;really&lt;/em&gt; must have revocation you have two options:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Certificate Revocation Lists (CRLs)&lt;/li&gt;
&lt;li&gt;Online Certificate Signing Protocol (OCSP)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;CRLs are defined along with a million other things in RFC 5280. They’re simply a signed list of serial numbers identifying revoked certificates. The list is served from a &lt;em&gt;CRL distribution point&lt;/em&gt;: a URL that’s included in the certificate. The expectation is that relying parties will download this list and interrogate it for revocation status whenever they verify a certificate. There are some obvious problems here: CRLs can be big, and distribution points can go down. If RPs check CRLs at all they’ll heavily cache the response from the distribution point and only sync periodically. On the web CRLs are often cached for days. If it’s going to take that long for CRLs to propagate you might as well just use passive revocation. It’s also common for RPs to &lt;em&gt;fail open&lt;/em&gt; – to accept a certificate if the the CRL distribution point is down. This can be a security issue: you can trick an RP into accepting a revoked certificate by mounting a denial of service attack against the CRL distribution point.&lt;/p&gt;
&lt;p&gt;For what it’s worth, even if you’re using CRLs you should consider using short-lived certificates to keep CRL size down. The CRL only needs to include serial numbers for certificates that are revoked &lt;em&gt;and&lt;/em&gt; haven’t yet expired. If your certs have shorter lifetimes, your CRLs will be shorter.&lt;/p&gt;
&lt;p&gt;If you don’t like CRL your other option is &lt;a href=&quot;https://www.ietf.org/rfc/rfc2560.txt&quot;&gt;OCSP&lt;/a&gt;, which allows RPs to query an &lt;em&gt;OCSP responder&lt;/em&gt; with a certificate serial number to obtain the revocation status of a particular certificate. Like the CRL distribution point, the OCSP responder URL is included in the certificate. OCSP sounds sweet (and obvious), but it has its own problems. It raises serious privacy issues for Web PKI: the OCSP responder can see what sites I’m visiting based on the certificate status checks I’ve submitted. It also adds overhead to every TLS connection: an additional request has to be made to check revocation status. Like CRL, many RPs (including browsers) fail open and assume a certificate is valid if the OCSP responder is down or returns an error.&lt;/p&gt;
&lt;p&gt;OCSP stapling is a variant of OCSP that’s supposed to fix these issues. Instead of the relying party hitting the OCSP responder the subscriber that owns the certificate does. The OCSP response is a signed attestation with a short expiry stating that the certificate is not revoked. The attestation is included in the TLS handshake (“stapled to” the certificate) between subscriber and RP. This provides the RP with a reasonably up-to-date revocation status without having to query the OCSP responder directly. The subscriber can use a signed OCSP response multiple times, until it expires. This reduces the load on the responder, mostly eliminates performance problems, and addresses the privacy issue with OCSP. However, all of this is a bit of a rube goldberg device. If subscribers are hitting some authority to obtain a short-lived signed attestation saying that a certificate hasn’t expired why not cut out the middleman: just use short-lived certificates.&lt;/p&gt;
&lt;h3 id=&quot;using-certificates&quot;&gt;Using certificates&lt;/h3&gt;
&lt;p&gt;With all of this background out of the way, actually &lt;em&gt;using&lt;/em&gt; certificates is really easy. We’ll demonstrate with TLS, but most other uses are pretty similar.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;To configure a PKI relying party you tell it which root certificates to use&lt;/li&gt;
&lt;li&gt;To configure a PKI subscriber you tell it which certificate and private key to use (or tell it how to generate its own key pair and exchange a CSR for a certificate itself)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It’s pretty common for one entity (code, device, server, etc) to be both an RP and a subscriber. Such entities will need to be configured with the root certificate(s) and a certificate and private key. Finally, for Web PKI the right root certificates are generally trusted by default, so you can skip that part.&lt;/p&gt;
&lt;p&gt;Here’s a complete example demonstrating certificate issuance, root certificate distribution, and TLS client (RP) and server (subscriber) configuration:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://smallstep.com/images/blog/2018-12-11-step-ca-certificate-flow.jpg&quot; alt=&quot;step ca certificate Flow&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Hopefully this illustrates how straightforward right and proper internal PKI and TLS can be. You don’t need to use self-signed certificates or do dangerous things like disabling certificate path validation (passing &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Pretty much every TLS client and server takes these same parameters. Almost all of them punt on the key and certificate lifecycle bit: they generally assume certificates magically appear on disk, are rotated, etc. That’s the hard part. Again, if you need that, that’s what step certificates does.&lt;/p&gt;
&lt;h2 id=&quot;in-summary&quot;&gt;In Summary&lt;/h2&gt;
&lt;p&gt;Public key cryptography lets computers “see” across networks. If I have a public key, I can “see” you have the corresponding private key, but I can’t use it myself. If I don’t have your public key, certificates can help. Certificates bind public keys to the name of the owner of the corresponding private key. They’re like driver’s licenses for computers and code. Certificate authorities (CAs) sign certificates with their private keys, vouching for these bindings. They’re like the DMV. If you’re the only one who looks like you, and you show me a driver’s license from a DMV I trust, I can figure out your name. If you’re the only one who knows a private key, and you send me a certificate from a CA I trust, I can figure out your name.&lt;/p&gt;
&lt;p&gt;In the real world most certificates are X.509 v3 certificates. They’re defined using ASN.1 and usually serialized as PEM-encoded DER. The corresponding private keys are usually represented as PKCS#8 objects, also serialized as PEM-encoded DER. If you use Java or Microsoft you might run into PKCS#7 and PKCS#12 envelope formats. There’s a lot of historical baggage here that can make this stuff pretty frustrating to work with, but it’s more annoying than it is difficult.&lt;/p&gt;
&lt;p&gt;Public key infrastructure is the umbrella term for all the stuff you need to build and agree on in order to use public keys effectively: names, key types, certificates, CAs, cron jobs, libraries, etc. Web PKI is the public PKI that’s used by default by web browsers and pretty much everything else that uses TLS. Web PKI CAs are trusted but not trustworthy. Internal PKI is your own PKI that you build and run yourself. You want one because Web PKI wasn’t designed for internal use cases, and because internal PKI is easier to automate, easier to scale, and gives you more control over a lot of important stuff like naming and certificate lifetime. Use Web PKI for public stuff. Use your own internal PKI for internal stuff (e.g., to &lt;a href=&quot;https://smallstep.com/blog/use-tls.html&quot;&gt;use TLS&lt;/a&gt; to replace VPNs). &lt;span class=&quot;widget&quot;&gt;&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/smallstep/certificates&quot; data-icon=&quot;octicon-star&quot; aria-label=&quot;Star smallstep/certificates on GitHub&quot;&gt;Star&lt;/a&gt;&lt;/span&gt; &lt;a href=&quot;https://github.com/smallstep/certificates&quot;&gt;smallstep/certificates&lt;/a&gt; makes building an internal PKI pretty easy.&lt;/p&gt;
&lt;p&gt;To get a certificate you need to name stuff and generate keys. Use SANs for names: DNS SANs for code and machines, EMAIL SANs for people. Use URI SANs if these won’t work. Key type is a big topic that’s mostly unimportant: you can change key types and the actual crypto won’t be the weakest link in your PKI. To get a certificate from a CA you submit a CSR and prove your identity. Use short-lived certificates and passive revocation. Automate certificate renewal. Don’t disable certificate path validation.&lt;/p&gt;
&lt;p&gt;Remember: certificates and PKI bind names to public keys. The rest is just details.&lt;/p&gt;
&lt;section class=&quot;call-to-action framed&quot; readability=&quot;2.4391304347826&quot;&gt;&lt;p class=&quot;disclaimer&quot;&gt;Smallstep is currently piloting our technology with select design partners. Subscribe for infrequent updates and we’ll let you know when our technology is more generally available.&lt;/p&gt;
&lt;hr/&gt;&lt;a href=&quot;mailto:info@smallstep.com&quot; class=&quot;button&quot;&gt;Request a demo&lt;/a&gt; or &lt;a href=&quot;https://smallstep.com/subscribe&quot;&gt;subscribe to our mailing list&lt;/a&gt;&lt;/section&gt;</description>
<pubDate>Fri, 14 Dec 2018 04:03:04 +0000</pubDate>
<dc:creator>zodvik</dc:creator>
<og:type>website</og:type>
<og:url>https://smallstep.com/blog/everything-pki.html</og:url>
<og:title>Everything you should know about certificates and PKI but are too afraid to ask</og:title>
<og:description>Certificates and public key infrastructure (PKI) are hard. No shit, right? I know a lot of smart people who've avoided this particular rabbit hole. Personally, I avoided it for a long time and felt some shame for not knowing more. The obvious result was a vicious cycle: I was too embarrassed to ask questions so I never learned. Eventually I was forced to learn this stuff because of what it enables: PKI lets you define a system cryptographically. It's universal and vendor neutral. It works everywhere so bits of your system can run anywhere and communicate securely. It's conceptually simple and super flexible. It lets you use TLS and ditch VPNs. You can ignore everything about your network and still have strong security characteristics. It's pretty great.</og:description>
<og:image>https://smallstep.com/images/blog/2018-12-11-license-vs-cert.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://smallstep.com/blog/everything-pki.html</dc:identifier>
</item>
<item>
<title>Introduction to Applied Linear Algebra: Vectors, Matrices, and Least Squares</title>
<link>http://vmls-book.stanford.edu/</link>
<guid isPermaLink="true" >http://vmls-book.stanford.edu/</guid>
<description>&lt;p&gt;&lt;br/&gt;This book is used as the textbook for the course &lt;a href=&quot;http://www.stanford.edu/class/ee103&quot;&gt;EE103&lt;/a&gt; (Stanford) and &lt;a href=&quot;http://www.seas.ucla.edu/~vandenbe/ee133a.html&quot;&gt;EE133A&lt;/a&gt; (UCLA), where you will find additional related material.&lt;/p&gt;
&lt;p&gt;If you find an error not listed in our &lt;a href=&quot;http://vmls-book.stanford.edu/vmls_errata.html&quot;&gt;errata list&lt;/a&gt;, please do let us know about it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.stanford.edu/~boyd/&quot;&gt;Stephen Boyd&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://www.ee.ucla.edu/~vandenbe/&quot;&gt;Lieven Vandenberghe&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Download&lt;/h2&gt;
&lt;p&gt;Copyright in this book is held by Cambridge University Press, who have kindly agreed to allow us to keep the book available on the web.&lt;/p&gt;
&lt;h2&gt;Additional material&lt;/h2&gt;
&lt;p&gt;You're welcome to use the lecture slides posted below, but we'd appreciate it if you acknowledge the source.&lt;/p&gt;
&lt;h2&gt;Catalog links&lt;/h2&gt;

</description>
<pubDate>Fri, 14 Dec 2018 03:48:32 +0000</pubDate>
<dc:creator>yarapavan</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://vmls-book.stanford.edu/</dc:identifier>
</item>
<item>
<title>Parachute use to prevent death and major trauma when jumping from aircraft</title>
<link>https://www.bmj.com/content/363/bmj.k5094</link>
<guid isPermaLink="true" >https://www.bmj.com/content/363/bmj.k5094</guid>
<description>&lt;div id=&quot;abstract-1&quot; readability=&quot;20.5&quot;&gt;
&lt;h2 class=&quot;&quot;&gt;Abstract&lt;/h2&gt;
&lt;div id=&quot;sec-1&quot; class=&quot;subsection&quot; readability=&quot;8&quot;&gt;
&lt;p id=&quot;p-1&quot;&gt;&lt;strong&gt;Objective&lt;/strong&gt; To determine if using a parachute prevents death or major traumatic injury when jumping from an aircraft.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-2&quot; class=&quot;subsection&quot; readability=&quot;7&quot;&gt;
&lt;p id=&quot;p-2&quot;&gt;&lt;strong&gt;Design&lt;/strong&gt; Randomized controlled trial.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-3&quot; class=&quot;subsection&quot; readability=&quot;7&quot;&gt;
&lt;p id=&quot;p-3&quot;&gt;&lt;strong&gt;Setting&lt;/strong&gt; Private or commercial aircraft between September 2017 and August 2018.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-4&quot; class=&quot;subsection&quot; readability=&quot;8&quot;&gt;
&lt;p id=&quot;p-4&quot;&gt;&lt;strong&gt;Participants&lt;/strong&gt; 92 aircraft passengers aged 18 and over were screened for participation. 23 agreed to be enrolled and were randomized.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-5&quot; class=&quot;subsection&quot; readability=&quot;8&quot;&gt;
&lt;p id=&quot;p-5&quot;&gt;&lt;strong&gt;Intervention&lt;/strong&gt; Jumping from an aircraft (airplane or helicopter) with a parachute versus an empty backpack (unblinded).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-6&quot; class=&quot;subsection&quot; readability=&quot;8&quot;&gt;
&lt;p id=&quot;p-6&quot;&gt;&lt;strong&gt;Main outcome measures&lt;/strong&gt; Composite of death or major traumatic injury (defined by an Injury Severity Score over 15) upon impact with the ground measured immediately after landing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-7&quot; class=&quot;subsection&quot; readability=&quot;11&quot;&gt;
&lt;p id=&quot;p-7&quot;&gt;&lt;strong&gt;Results&lt;/strong&gt; Parachute use did not significantly reduce death or major injury (0% for parachute &lt;em&gt;v&lt;/em&gt; 0% for control; P&amp;gt;0.9). This finding was consistent across multiple subgroups. Compared with individuals screened but not enrolled, participants included in the study were on aircraft at significantly lower altitude (mean of 0.6 m for participants &lt;em&gt;v&lt;/em&gt; mean of 9146 m for non-participants; P&amp;lt;0.001) and lower velocity (mean of 0 km/h &lt;em&gt;v&lt;/em&gt; mean of 800 km/h; P&amp;lt;0.001).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-8&quot; class=&quot;subsection&quot; readability=&quot;14&quot;&gt;
&lt;p id=&quot;p-8&quot;&gt;&lt;strong&gt;Conclusions&lt;/strong&gt; Parachute use did not reduce death or major traumatic injury when jumping from aircraft in the first randomized evaluation of this intervention. However, the trial was only able to enroll participants on small stationary aircraft on the ground, suggesting cautious extrapolation to high altitude jumps. When beliefs regarding the effectiveness of an intervention exist in the community, randomized trials might selectively enroll individuals with a lower perceived likelihood of benefit, thus diminishing the applicability of the results to clinical practice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;sec-9&quot; readability=&quot;23.884931506849&quot;&gt;
&lt;h2 class=&quot;&quot;&gt;Introduction&lt;/h2&gt;
&lt;p id=&quot;p-9&quot;&gt;Parachutes are routinely used to prevent death or major traumatic injury among individuals jumping from aircraft. However, evidence supporting the efficacy of parachutes is weak and guideline recommendations for their use are principally based on biological plausibility and expert opinion.&lt;a id=&quot;xref-ref-1-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-1&quot;&gt;1&lt;/a&gt;&lt;a id=&quot;xref-ref-2-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-2&quot;&gt;2&lt;/a&gt; Despite this widely held yet unsubstantiated belief of efficacy, many studies of parachutes have suggested injuries related to their use in both military and recreational settings,&lt;a id=&quot;xref-ref-3-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-3&quot;&gt;3&lt;/a&gt;&lt;a id=&quot;xref-ref-4-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-4&quot;&gt;4&lt;/a&gt; and parachutist injuries are formally recognized in the World Health Organization’s ICD-10 (international classification of diseases, 10th revision).&lt;a id=&quot;xref-ref-5-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-5&quot;&gt;5&lt;/a&gt; This could raise concerns for supporters of evidence-based medicine, because numerous medical interventions believed to be useful have ultimately failed to show efficacy when subjected to properly executed randomized clinical trials.&lt;a id=&quot;xref-ref-6-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-6&quot;&gt;6&lt;/a&gt;&lt;a id=&quot;xref-ref-7-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-7&quot;&gt;7&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;p-10&quot;&gt;Previous attempts to evaluate parachute use in a randomized setting have not been undertaken owing to both ethical and practical concerns. Lack of equipoise could inhibit recruitment of participants in such a trial. However, whether pre-existing beliefs about the efficacy of parachutes would, in fact, impair the enrolment of participants in a clinical trial has not been formally evaluated. To address these important gaps in evidence, we conducted the first randomized clinical trial of the efficacy of parachutes in reducing death and major injury when jumping from an aircraft.&lt;/p&gt;
&lt;/div&gt;&lt;div id=&quot;sec-10&quot; readability=&quot;66.965334368128&quot;&gt;
&lt;h2 class=&quot;&quot;&gt;Methods&lt;/h2&gt;
&lt;div id=&quot;sec-11&quot; class=&quot;subsection&quot; readability=&quot;37&quot;&gt;
&lt;h3&gt;Study protocol&lt;/h3&gt;
&lt;p id=&quot;p-11&quot;&gt;Between September 2017 and August 2018, individuals were screened for inclusion in the PArticipation in RAndomized trials Compromised by widely Held beliefs aboUt lack of Treatment Equipoise (PARACHUTE) trial. Prospective participants were approached and screened by study investigators on commercial or private aircraft.&lt;/p&gt;
&lt;p id=&quot;p-12&quot;&gt;For the commercial aircraft, travel was related to trips the investigators were scheduled to take for business or personal reasons unrelated to the present study. Typically, passengers seated close to the study investigator (typically not known acquaintances) would be approached mid-flight, between the time of initial seating and time of exiting the aircraft. The purpose and design of the study were explained. Owing to difficulty in enrolling patients at several thousand meters above the ground, we expanded our approach to include screening members of the investigative team, friends, and family. For the private aircraft, the boarding of aircraft was done for the explicit purpose of participating in the trial.&lt;/p&gt;
&lt;p id=&quot;p-13&quot;&gt;All participants were asked whether they would be willing to be randomized to jump from the aircraft at its current altitude and velocity. Potential study participants completed an anonymous survey using a survey app on the screening investigator’s phone or tablet. Responses were transmitted to an online database upon landing for later analysis.&lt;/p&gt;
&lt;p id=&quot;p-14&quot;&gt;We enrolled individuals willing to participate in the trial and meeting inclusion criteria in the study. We randomized patients (1:1) to the intervention or the control. We obtained written informed consent. Participants were then instructed to jump from the aircraft after being provided their assigned device. Jumps were conducted at two sites in the US: Katama Airfield in Martha’s Vineyard, MA (conducted by investigators from the Beth Israel Deaconess Medical Center), and the Yankee Air Museum in Belleville, MI (conducted by investigators from the University of Michigan). The same protocol was followed at each site, but the type of aircraft (airplane &lt;em&gt;v&lt;/em&gt; helicopter) differed between the two sites.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-12&quot; class=&quot;subsection&quot; readability=&quot;12&quot;&gt;
&lt;h3&gt;Study population&lt;/h3&gt;
&lt;p id=&quot;p-15&quot;&gt;Participants aged 18 and over, seated on an aircraft, and deemed to be rational decision makers by the enrolling investigator were eligible. Only participants who were willing to be randomized in the study were ultimately enrolled and randomized. Most of the participants who were randomized were study investigators.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-13&quot; class=&quot;subsection&quot; readability=&quot;23&quot;&gt;
&lt;h3&gt;Interventions&lt;/h3&gt;
&lt;p id=&quot;p-16&quot;&gt;Participants were randomized to wear either a parachute (National 360, National Parachute Industries, Inc, Palenville, NY; or Javelin Odyssey, Sun Path Products, Inc, Raeford, NC; supplementary materials fig 1) or an empty backpack (The North Face, Inc, Alameda, CA; or Javelin Odyssey Gearbag, Sun Path Products, Inc). The interventions were not blinded to either participants or study investigators.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-14&quot; class=&quot;subsection&quot; readability=&quot;13&quot;&gt;
&lt;h3&gt;Randomization&lt;/h3&gt;
&lt;p id=&quot;p-17&quot;&gt;We used block randomization, stratified by site and sex with a block size of two. The trial statistician created the randomization sequence by using the R package blockrand. The research team had previously assigned unique numeric identifiers to each participant. At both sites, only one team member had access to the list of numeric identifiers. Participants were verbally assigned their treatment, which was done by order of enrolment. Allocation was not concealed to the investigator who assigned the treatment.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-15&quot; class=&quot;subsection&quot; readability=&quot;33.973986228003&quot;&gt;
&lt;h3&gt;Data collection&lt;/h3&gt;
&lt;p id=&quot;p-18&quot;&gt;We collected data on basic demographic characteristics during screening by using paper forms or the survey app.&lt;a id=&quot;xref-ref-8-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-8&quot;&gt;8&lt;/a&gt; Characteristics included age, sex, ethnic group, height, and weight. We also collected information on participants’ medical history including a history of broken bones, acrophobia (fear of heights), previous parachute use, family history of parachute use, and frequent flier status. Flight characteristics included carrier, velocity, altitude, make and model of the aircraft, the individual’s seating section, and whether the flight was international or domestic. Velocity and altitude were captured by using flight information provided by aircraft on individual television screens when available, as well as through pilot announcements. When neither was directly available, visual estimations were made by the study investigators.&lt;/p&gt;
&lt;p id=&quot;p-19&quot;&gt;At the time of each jump, researchers recorded the altitude and velocity of the aircraft, and conducted a follow-up interview with each participant to ascertain vital status and to record any injuries sustained from the free fall within five minutes of impact with the ground, and again at 30 days after impact. We collected data electronically or with paper forms and uploaded the data to an online deidentified, password protected database.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-16&quot; class=&quot;subsection&quot; readability=&quot;13.951162790698&quot;&gt;
&lt;h3&gt;Outcomes&lt;/h3&gt;
&lt;p id=&quot;p-20&quot;&gt;The primary outcome was the composite of death and major traumatic injury, defined by an Injury Severity Score greater than 15, within five minutes of impact. The Injury Severity Score is a commonly used anatomical scoring system to grade the severity of traumatic injuries.&lt;a id=&quot;xref-ref-9-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-9&quot;&gt;9&lt;/a&gt; Separate scores are assigned to each of six anatomical regions, and the three most highly injured regions contribute to a final score ranging from 0 to 75. Higher scores indicate a more severe injury. Secondary outcomes included death and major traumatic injury assessed at 30 days after impact using the Injury Severity Score, as well as 30 day quality of life assessed by the Short Form Health Survey. The Short Form Health Survey is a multipurpose questionnaire that measures a patient’s overall health-related quality of life based on mental and physical functioning.&lt;a id=&quot;xref-ref-10-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-10&quot;&gt;10&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-17&quot; class=&quot;subsection&quot; readability=&quot;26&quot;&gt;
&lt;h3&gt;Statistical analysis&lt;/h3&gt;
&lt;p id=&quot;p-21&quot;&gt;The primary efficacy analysis tested the hypothesis that parachute use is superior to the control in preventing death and major traumatic injury. Based on an assumption of an average jump altitude of 4000 meters (typical of skydiving) and the anticipated effect of impact with the Earth at terminal velocity on human tissue, we projected that 99% of the control arm would experience the primary outcome at ground impact with a relative risk reduction of 95% in the intervention arm. A sample size of 14 (7 in each arm) would yield 99% power to detect this difference at a two sided α of 0.05. In anticipation of potential withdrawal after enrolment owing to last minute anxieties, a total sample size of 20 participants was targeted. Analysis was performed on an intention-to-treat basis. We performed secondary subgroup analyses stratified by aircraft type (airplane &lt;em&gt;v&lt;/em&gt; helicopter) and previous parachute use through formal tests of statistical interaction.&lt;/p&gt;
&lt;p id=&quot;p-22&quot;&gt;We summarized continuous variables by mean (standard deviation) and categorical variables by frequency and percentage. We tabulated baseline characteristics of the two trial arms to examine for potential imbalance in variables. We tested for differences between the outcomes of the two trial arms by using Student’s t test (continuous variables) and Fisher’s exact test (categorical variables). To better understand what drove the willingness to participate in the trial, we also compared characteristics of individuals who were screened but chose not to enroll with individuals who enrolled. Baseline characteristics between those enrolled and not enrolled were compared using the same statistical tests. Confidence intervals for the difference in continuous outcomes between the two arms were constructed using T distributions. We could not calculate confidence intervals for the difference between arms (eg, risk difference, odds ratio, or relative risk) because no events were observed for any of the binary outcomes in either arm.&lt;/p&gt;
&lt;p id=&quot;p-23&quot;&gt;We performed all analyses by using SAS version 9.4 (SAS Institute Inc, Cary, NC). A P value greater than 0.05 was statistically significant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;sec-18&quot; readability=&quot;21.000487646294&quot;&gt;
&lt;h2 class=&quot;&quot;&gt;Results&lt;/h2&gt;
&lt;div id=&quot;sec-19&quot; class=&quot;subsection&quot; readability=&quot;28.439570695287&quot;&gt;
&lt;h3&gt;Study population&lt;/h3&gt;
&lt;p id=&quot;p-24&quot;&gt;A total of 92 individuals were screened and surveyed regarding their interest in participating in the PARACHUTE trial. Among those screened, 69 (75%) were unwilling to be randomized or found to be otherwise ineligible by investigators. &lt;a id=&quot;xref-fig-1-1&quot; class=&quot;xref-fig&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#F1&quot;&gt;Figure 1&lt;/a&gt; shows that a total of 23 individuals were deemed eligible for randomization.&lt;/p&gt;
&lt;div id=&quot;F1&quot; class=&quot;fig pos-float type-figure odd&quot;&gt;
&lt;div class=&quot;fig-inline&quot;&gt;
&lt;div class=&quot;highwire-figure&quot;&gt;
&lt;div class=&quot;fig-inline-img-wrapper&quot;&gt;
&lt;div class=&quot;fig-inline-img&quot;&gt;&lt;a href=&quot;https://www.bmj.com/content/bmj/363/bmj.k5094/F1.large.jpg?width=800&amp;amp;height=600&quot; title=&quot;Study flow diagram&quot; class=&quot;colorbox fragment-images colorbox-load&quot; rel=&quot;gallery-fragment-images&quot; data-figure-caption=&quot;&amp;lt;div class=&amp;quot;highwire-markup&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;fig-caption&amp;quot; xmlns:xhtml=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;fig-label&amp;quot;&amp;gt;Fig 1&amp;lt;/span&amp;gt; &amp;lt;p id=&amp;quot;p-25&amp;quot; class=&amp;quot;first-child&amp;quot;&amp;gt;Study flow diagram&amp;lt;/p&amp;gt;&amp;lt;div class=&amp;quot;sb-div caption-clear&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot;&gt;&lt;img class=&quot;fragment-image&quot; src=&quot;https://www.bmj.com/content/bmj/363/bmj.k5094/F1.medium.jpg&quot; alt=&quot;Fig 1&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot; class=&quot;fig-caption&quot;&gt;&lt;span class=&quot;fig-label&quot;&gt;Fig 1&lt;/span&gt;
&lt;p id=&quot;p-25&quot; class=&quot;first-child&quot;&gt;Study flow diagram&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p id=&quot;p-26&quot;&gt;&lt;a id=&quot;xref-table-wrap-1-1&quot; class=&quot;xref-table&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#T1&quot;&gt;Table 1&lt;/a&gt; shows that the baseline characteristics of enrolled participants were generally similar between the intervention and control arms. The median age of randomized participants was 38 years and 13 (57%) were male. Three (13%) of the randomized participants had previous parachute use and nine (39%) had a history of acrophobia. &lt;a id=&quot;xref-table-wrap-2-1&quot; class=&quot;xref-table&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#T2&quot;&gt;Table 2&lt;/a&gt; shows that participants in the study were similar to those screened but not enrolled with regard to most demographic and clinical characteristics. However, participants were less likely to be on a jetliner, and instead were on a biplane or helicopter (0% &lt;em&gt;v&lt;/em&gt; 100%; P&amp;lt;0.001), were at a lower mean altitude (0.6 m, SD 0.1 &lt;em&gt;v&lt;/em&gt; 9146 m, SD 2164; P&amp;lt;0.001), and were traveling at a slower velocity (0 km/h, SD 0 &lt;em&gt;v&lt;/em&gt; 800 km/h, SD 124; P&amp;lt;0.001) (&lt;a id=&quot;xref-table-wrap-2-2&quot; class=&quot;xref-table&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#T2&quot;&gt;table 2&lt;/a&gt;).&lt;/p&gt;
&lt;div id=&quot;T1&quot; class=&quot;table pos-float&quot;&gt;
&lt;div class=&quot;table&quot; readability=&quot;5.7621621621622&quot;&gt;
&lt;div class=&quot;table-caption&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;table-label&quot;&gt;Table 1&lt;/span&gt;
&lt;p id=&quot;p-27&quot; class=&quot;first-child&quot;&gt;Baseline characteristics of participants randomized to parachute versus control. Values are numbers (percentages) unless stated otherwise&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;table-inline&quot;&gt;
&lt;div class=&quot;callout&quot;&gt;&lt;span&gt;View this table:&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;T2&quot; class=&quot;table pos-float&quot;&gt;
&lt;div class=&quot;table&quot; readability=&quot;5.7155172413793&quot;&gt;
&lt;div class=&quot;table-caption&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;table-label&quot;&gt;Table 2&lt;/span&gt;
&lt;p id=&quot;p-28&quot; class=&quot;first-child&quot;&gt;Baseline characteristics of participants versus screened individuals. Values are numbers (percentages) unless stated otherwise&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;table-inline&quot;&gt;
&lt;div class=&quot;callout&quot;&gt;&lt;span&gt;View this table:&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p id=&quot;p-30&quot;&gt;Among the 12 participants randomized to the intervention arm, the parachute did not deploy in all 12 (100%) owing to the short duration and altitude of falls. Among the 11 participants randomized to receive an empty backpack, none crossed over to the intervention arm. &lt;a id=&quot;xref-fig-2-1&quot; class=&quot;xref-fig&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#F2&quot;&gt;Figure 2&lt;/a&gt; shows a representative jump (additional jumps are shown in supplementary materials fig 2).&lt;/p&gt;
&lt;div id=&quot;F2&quot; class=&quot;fig pos-float type-figure odd&quot;&gt;
&lt;div class=&quot;fig-inline&quot;&gt;
&lt;div class=&quot;highwire-figure&quot; readability=&quot;5.025462962963&quot;&gt;
&lt;div class=&quot;fig-inline-img-wrapper&quot;&gt;
&lt;div class=&quot;fig-inline-img&quot;&gt;&lt;a href=&quot;https://www.bmj.com/content/bmj/363/bmj.k5094/F2.large.jpg?width=800&amp;amp;height=600&quot; title=&quot;Representative study participant jumping from aircraft with an empty backpack. This individual did not incur death or major injury upon impact with the ground &quot; class=&quot;colorbox fragment-images colorbox-load&quot; rel=&quot;gallery-fragment-images&quot; data-figure-caption=&quot;&amp;lt;div class=&amp;quot;highwire-markup&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;fig-caption&amp;quot; xmlns:xhtml=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&quot;&gt;&lt;img class=&quot;fragment-image&quot; src=&quot;https://www.bmj.com/content/bmj/363/bmj.k5094/F2.medium.jpg&quot; alt=&quot;Fig 2&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div xmlns:xhtml=&quot;http://www.w3.org/1999/xhtml&quot; class=&quot;fig-caption&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;fig-label&quot;&gt;Fig 2&lt;/span&gt;
&lt;p id=&quot;p-31&quot; class=&quot;first-child&quot;&gt;Representative study participant jumping from aircraft with an empty backpack. This individual did not incur death or major injury upon impact with the ground&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-20&quot; class=&quot;subsection&quot; readability=&quot;13.575757575758&quot;&gt;
&lt;h3&gt;Outcomes&lt;/h3&gt;
&lt;p id=&quot;p-32&quot;&gt;&lt;a id=&quot;xref-table-wrap-3-1&quot; class=&quot;xref-table&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#T3&quot;&gt;Table 3&lt;/a&gt; shows the results for the primary and secondary outcomes. There was no significant difference in the rate of death or major traumatic injury between the treatment and control arms within five minutes of ground impact (0% for parachute &lt;em&gt;v&lt;/em&gt; 0% for control; P&amp;gt;0.9) or at 30 days after impact (0% for parachute &lt;em&gt;v&lt;/em&gt; 0% for control; P&amp;gt;0.9). Health status as measured by the Short Form Health Survey was similar between groups (43.9, SD 1.8 for parachute &lt;em&gt;v&lt;/em&gt; 44.0, SD 2.4 for control; P=0.9; mean difference of 0.1, 95% confidence interval −2.0 to 2.2). In subgroup analyses, there were no significant differences in the effect of parachute use on outcomes when stratified by type of aircraft or previous parachute use (P&amp;gt;0.9 for interaction for both comparisons).&lt;/p&gt;
&lt;div id=&quot;T3&quot; class=&quot;table pos-float&quot;&gt;
&lt;div class=&quot;table&quot; readability=&quot;5.6078431372549&quot;&gt;
&lt;div class=&quot;table-caption&quot; readability=&quot;8&quot;&gt;&lt;span class=&quot;table-label&quot;&gt;Table 3&lt;/span&gt;
&lt;p id=&quot;p-33&quot; class=&quot;first-child&quot;&gt;Event rates for primary and secondary endpoints. Values are numbers (percentages) unless stated otherwise&lt;/p&gt;

&lt;/div&gt;
&lt;div class=&quot;table-inline&quot;&gt;
&lt;div class=&quot;callout&quot;&gt;&lt;span&gt;View this table:&lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div id=&quot;sec-21&quot; readability=&quot;91.336418130192&quot;&gt;
&lt;h2 class=&quot;&quot;&gt;Discussion&lt;/h2&gt;
&lt;p id=&quot;p-34&quot;&gt;We have performed the first randomized clinical trial evaluating the efficacy of parachutes for preventing death or major traumatic injury among individuals jumping from aircraft. Our groundbreaking study found no statistically significant difference in the primary outcome between the treatment and control arms. Our findings should give momentary pause to experts who advocate for routine use of parachutes for jumps from aircraft in recreational or military settings.&lt;/p&gt;
&lt;p id=&quot;p-35&quot;&gt;Although decades of anecdotal experience have suggested that parachute use during jumps from aircraft can save lives, these observations are vulnerable to selection bias and confounding. Indeed, in seminal work published in the &lt;em&gt;BMJ&lt;/em&gt; in 2003, a systematic search by Smith and Pell for randomized clinical trials evaluating the efficacy of parachutes during gravitational challenge yielded no published studies.&lt;a id=&quot;xref-ref-1-2&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-1&quot;&gt;1&lt;/a&gt; In part, our study was designed as a response to their call to (broken) arms in order to address this critical knowledge gap.&lt;/p&gt;
&lt;p id=&quot;p-36&quot;&gt;Beliefs about the efficacy of commonly used, but untested, interventions often influence daily clinical decision making. These beliefs can expose patients to unnecessary risk without clear benefit and increase healthcare costs.&lt;a id=&quot;xref-ref-11-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-11&quot;&gt;11&lt;/a&gt; Beliefs grounded in biological plausibility and expert opinion have been proven wrong by subsequent rigorous randomized evaluations.&lt;a id=&quot;xref-ref-12-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-12&quot;&gt;12&lt;/a&gt; The PARACHUTE trial represents one more such historic moment.&lt;/p&gt;
&lt;p id=&quot;p-37&quot;&gt;Should our results be reproduced in future studies, the end of routine parachute use during jumps from aircraft could save the global economy billions of dollars spent annually to prevent injuries related to gravitational challenge.&lt;/p&gt;
&lt;p id=&quot;p-38&quot;&gt;A minor caveat to our findings is that the rate of the primary outcome was substantially lower in this study than was anticipated at the time of its conception and design, which potentially underpowered our ability to detect clinically meaningful differences, as well as important interactions. Although randomized participants had similar characteristics compared with those who were screened but did not enroll, they could have been at lower risk of death or major trauma because they jumped from an average altitude of 0.6 m (SD 0.1) on aircraft moving at an average of 0 km/h (SD 0). Clinicians will need to consider this information when extrapolating to their own settings of parachute use.&lt;/p&gt;
&lt;p id=&quot;p-39&quot;&gt;Opponents of evidence-based medicine have frequently argued that no one would perform a randomized trial of parachute use. We have shown this argument to be flawed, having conclusively shown that it is possible to randomize participants to jumping from an aircraft with versus without parachutes (albeit under limited and specific scenarios). In our study, we had to screen many more individuals to identify eligible and willing participants. This is not dissimilar to the experiences of other contemporary trials that frequently enroll only a small fraction of the thousands of patients screened. Previous research has suggested that participants in randomized clinical trials are at lower risk than patients who are treated in routine practice.&lt;a id=&quot;xref-ref-13-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-13&quot;&gt;13&lt;/a&gt;&lt;a id=&quot;xref-ref-14-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-14&quot;&gt;14&lt;/a&gt; This is particularly relevant to trials examining interventions that the medical community believes to be effective: lack of equipoise often pushes well meaning but ill-informed doctors or study investigators to withhold patients from study participation, as they might believe it to be unethical to potentially deny their patients a treatment they (wrongly) believe is effective.&lt;/p&gt;
&lt;p id=&quot;p-40&quot;&gt;Critics of the PARACHUTE trial are likely to make the argument that even the most efficacious of treatments can be shown to have no effect in a randomized trial if individuals who would derive the greatest benefit selectively decline participation. The critics will claim that although few medical treatments are likely to be as effective as parachutes,&lt;a id=&quot;xref-ref-15-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-15&quot;&gt;15&lt;/a&gt; the exclusion of selected patients could result in null trial results, whether or not the intervention being evaluated was truly effective. The critics might further argue that although randomized controlled trials are the gold standard for evaluating treatments, their results are not always guaranteed to be relevant for clinicians. It will be up to the reader to determine the relevance of these findings in the real world.&lt;/p&gt;
&lt;div id=&quot;sec-22&quot; class=&quot;subsection&quot; readability=&quot;68.889864325619&quot;&gt;
&lt;h3&gt;Strengths and weaknesses of this study&lt;/h3&gt;
&lt;p id=&quot;p-41&quot;&gt;A key strength of the PARACHUTE trial was that it was designed and initially powered to detect differences in the combination of death and major traumatic injury. Although the use of softer endpoints, such as levels of fear before and after jumping, or its surrogates, such as loss of urinary continence, could have yielded more power to detect an effect of parachutes, we believe that that our selection of bias-resistant endpoints that are meaningful to all patients increases the clinical relevance of the trial.&lt;/p&gt;
&lt;p id=&quot;p-42&quot;&gt;The study also has several limitations. First and most importantly, our findings might not be generalizable to the use of parachutes in aircraft traveling at a higher altitude or velocity. Consideration could be made to conduct additional randomized clinical trials in these higher risk settings. However, previous theoretical work supporting the use of parachutes could reduce the feasibility of enrolling participants in such studies.&lt;a id=&quot;xref-ref-16-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-16&quot;&gt;16&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;p-43&quot;&gt;Second, our study was not blinded to treatment assignment. We did not anticipate a strong placebo effect for our primary endpoint, but it is possible that other subjective endpoints would have necessitated the use of a blinded sham parachute as a control.&lt;/p&gt;
&lt;p id=&quot;p-44&quot;&gt;Third, the individuals screened but not enrolled in the study were limited to passengers unfortunate enough to be seated near study investigators during commercial flights, and might not be representative of all aircraft passengers. The participants who did ultimately enroll, agreed with the knowledge that the aircraft were stationary and on the ground.&lt;/p&gt;
&lt;p id=&quot;p-45&quot;&gt;Finally, although all endpoints in the study were prespecified, we were unable to register the PARACHUTE trial prospectively. We attempted to register this study with the Sri Lanka Clinical Trials Registry (application number APPL/2018/040), a member of the World Health Organization’s Registry Network of the International Clinical Trials Registry Platform. After several rounds of discussion, the Registry declined to register the trial because they thought that “the research question lacks scientific validity” and “the trial data cannot be meaningful.” We appreciated their thorough review (and actually agree with their decision).&lt;/p&gt;
&lt;p id=&quot;p-46&quot;&gt;The PARACHUTE trial satirically highlights some of the limitations of randomized controlled trials. Nevertheless, we believe that such trials remain the gold standard for the evaluation of most new treatments. The PARACHUTE trial does suggest, however, that their accurate interpretation requires more than a cursory reading of the abstract. Rather, interpretation requires a complete and critical appraisal of the study. In addition, our study highlights that studies evaluating devices that are already entrenched in clinical practice face the particularly difficult task of ensuring that patients with the greatest expected benefit from treatment are included during enrolment.&lt;/p&gt;
&lt;p id=&quot;p-47&quot;&gt;To safeguard this last issue, we see several solutions. First, overcoming such a hurdle requires extreme commitment on the part of the investigators, clinicians, and patients; thankfully, recent examples of such efforts do exist.&lt;a id=&quot;xref-ref-17-1&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-17&quot;&gt;17&lt;/a&gt; Second, stronger efforts could be made to ensure that definitive trials are conducted before new treatments become inculcated into routine practice, when greater equipoise is likely to exist. Third, the comparison of baseline characteristics and outcomes of study participants and non-participants should be utilized more frequently and reported consistently to facilitate the interpretation of results and the assessment of study generalizability.&lt;a id=&quot;xref-ref-14-2&quot; class=&quot;xref-bibr&quot; href=&quot;https://www.bmj.com/content/363/bmj.k5094#ref-14&quot;&gt;14&lt;/a&gt; Finally, there could be instances where clinical beliefs justifiably prevent a true randomized evaluation of a treatment from being conducted.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;sec-23&quot; class=&quot;subsection&quot; readability=&quot;14&quot;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p id=&quot;p-48&quot;&gt;Parachute use compared with a backpack control did not reduce death or major traumatic injury when used by participants jumping from aircraft in this first randomized evaluation of the intervention. This largely resulted from our ability to only recruit participants jumping from stationary aircraft on the ground. When beliefs regarding the effectiveness of an intervention exist in the community, randomized trials evaluating their effectiveness could selectively enroll individuals with a lower likelihood of benefit, thereby diminishing the applicability of trial results to routine practice. Therefore, although we can confidently recommend that individuals jumping from small stationary aircraft on the ground do not require parachutes, individual judgment should be exercised when applying these findings at higher altitudes.&lt;/p&gt;
&lt;div class=&quot;boxed-text&quot; id=&quot;boxed-text-1&quot;&gt;
&lt;div id=&quot;sec-24&quot; class=&quot;subsection&quot;&gt;
&lt;h4&gt;What is already known on this topic&lt;/h4&gt;
&lt;ul class=&quot;list-simple&quot; id=&quot;list-1&quot; readability=&quot;1&quot;&gt;&lt;li id=&quot;list-item-1&quot; readability=&quot;1&quot;&gt;
&lt;p id=&quot;p-49&quot;&gt;Parachutes are routinely used to prevent death or major traumatic injury among individuals jumping from aircraft, but their efficacy is based primarily on biological plausibility and expert opinion&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;list-item-2&quot; readability=&quot;1&quot;&gt;
&lt;p id=&quot;p-50&quot;&gt;No randomized controlled trials of parachute use have yet been attempted, presumably owing to a lack of equipoise&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;sec-25&quot; class=&quot;subsection&quot;&gt;
&lt;h4&gt;What this study adds&lt;/h4&gt;
&lt;ul class=&quot;list-simple&quot; id=&quot;list-2&quot; readability=&quot;-0.5&quot;&gt;&lt;li id=&quot;list-item-3&quot; readability=&quot;0&quot;&gt;
&lt;p id=&quot;p-51&quot;&gt;This randomized trial of parachute use found no reduction in death or major injury compared with individuals jumping from aircraft with an empty backpack&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;list-item-4&quot; readability=&quot;-1&quot;&gt;
&lt;p id=&quot;p-52&quot;&gt;Lack of enrolment of individuals at high risk could have influenced the results of the trial&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 14 Dec 2018 00:49:03 +0000</pubDate>
<dc:creator>pentestercrab</dc:creator>
<og:title>Parachute use to prevent death and major trauma when jumping from aircraft: randomized controlled trial</og:title>
<og:url>https://www.bmj.com/content/363/bmj.k5094</og:url>
<og:image>https://www.bmj.com/sites/default/files/highwire/bmj/363/8180.cover-source.jpg</og:image>
<og:description>Objective To determine if using a parachute prevents death or major traumatic injury when jumping from an aircraft. Design Randomized controlled trial. Setting Private or commercial aircraft between September 2017 and August 2018. Participants 92 aircraft passengers aged 18 and over were screened for participation. 23 agreed to be enrolled and were randomized. Intervention Jumping from an aircraft (airplane or helicopter) with a parachute versus an empty backpack (unblinded). Main outcome measures Composite of death or major traumatic injury (defined by an Injury Severity Score over 15) upon impact with the ground measured immediately after landing. Results Parachute use did not significantly reduce death or major injury (0% for parachute v 0% for control; P&gt;0.9). This finding was consistent across multiple subgroups. Compared with individuals screened but not enrolled, participants included in the study were on aircraft at significantly lower altitude (mean of 0.6 m for participants v mean of 9146 m for non-participants; P&lt;0.001) and lower velocity (mean of 0 km/h v mean of 800 km/h; P&lt;0.001). Conclusions Parachute use did not reduce death or major traumatic injury when jumping from aircraft in the first randomized evaluation of this intervention. However, the trial was only able to enroll participants on small stationary aircraft on the ground, suggesting cautious extrapolation to high altitude jumps. When beliefs regarding the effectiveness of an intervention exist in the community, randomized trials might selectively enroll individuals with a lower perceived likelihood of benefit, thus diminishing the applicability of the results to clinical practice.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bmj.com/content/363/bmj.k5094</dc:identifier>
</item>
<item>
<title>Exploring the .NET Core Runtime</title>
<link>http://www.mattwarren.org/2018/12/13/Exploring-the-.NET-Core-Runtime/</link>
<guid isPermaLink="true" >http://www.mattwarren.org/2018/12/13/Exploring-the-.NET-Core-Runtime/</guid>
<description>&lt;p&gt;
If you're looking to support a charity this Christmas, consider helping out the Book Trust&lt;/p&gt;&lt;div readability=&quot;197.95769866829&quot;&gt;

&lt;span class=&quot;post-date&quot;&gt;13 Dec 2018 - 1984 words&lt;/span&gt;
&lt;p&gt;It seems like this time of year anyone with a blog is doing some sort of ‘advent calendar’, i.e. 24 posts leading up to Christmas. For instance there’s a &lt;a href=&quot;https://sergeytihon.com/2018/10/22/f-advent-calendar-in-english-2018/&quot;&gt;F# one&lt;/a&gt; which inspired a &lt;a href=&quot;https://crosscuttingconcerns.com/The-Second-Annual-C-Advent&quot;&gt;C# one&lt;/a&gt; (&lt;em&gt;C# copying from F#, that never happens&lt;/em&gt; 😉)&lt;/p&gt;
&lt;p&gt;However, that’s a bit of a problem for me, I struggled to write 24 posts &lt;a href=&quot;https://mattwarren.org/postsByYear/#2016-ref&quot;&gt;in my most productive year&lt;/a&gt;, let alone a single month! Also, I mostly blog about &lt;a href=&quot;https://mattwarren.org/tags/#Internals&quot;&gt;‘.NET Internals’&lt;/a&gt;, a subject which doesn’t necessarily lend itself to the more ‘&lt;em&gt;light-hearted&lt;/em&gt;’ posts you get in these ‘advent calendar’ blogs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Until now!&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Recently I’ve been giving a talk titled &lt;strong&gt;from ‘dotnet run’ to ‘hello world’&lt;/strong&gt;, which attempts to explain everything that the .NET Runtime does from the point you launch your application till “Hello World” is printed on the screen:&lt;/p&gt;


&lt;p&gt;But as I was researching and presenting this talk, it made me think about the &lt;em&gt;.NET Runtime&lt;/em&gt; as a whole, &lt;a href=&quot;https://mattwarren.org/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/#high-level-overview&quot;&gt;&lt;em&gt;what does it contain&lt;/em&gt;&lt;/a&gt; and most importantly &lt;strong&gt;what can you do with it&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is mostly for &lt;em&gt;informational&lt;/em&gt; purposes, for the &lt;em&gt;recommended way&lt;/em&gt; of achieving the same thing, take a look at this excellent &lt;a href=&quot;https://natemcmaster.com/blog/2017/12/21/netcore-primitives/&quot;&gt;Deep-dive into .NET Core primitives&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/natemcmaster&quot;&gt;Nate McMaster&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;In this post I will explore what you can do &lt;strong&gt;using only the code in the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;dotnet/coreclr&lt;/a&gt; repository&lt;/strong&gt; and along the way we’ll find out more about how the runtime interacts with the wider &lt;a href=&quot;https://dotnet.microsoft.com/&quot;&gt;.NET Ecosystem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To makes things clearer, there are &lt;strong&gt;3 challenges&lt;/strong&gt; that will need to be solved before a simple “Hello World” application can be run. That’s because in the &lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;dotnet/coreclr&lt;/a&gt; repository there is:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;No &lt;strong&gt;compiler&lt;/strong&gt;, that lives in &lt;a href=&quot;https://github.com/dotnet/roslyn/&quot;&gt;dotnet/Roslyn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No &lt;strong&gt;Framework Class Library (FCL)&lt;/strong&gt; a.k.a. ‘&lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;dotnet/CoreFX&lt;/a&gt;’&lt;/li&gt;
&lt;li&gt;No &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; as it’s implemented in the &lt;a href=&quot;https://github.com/dotnet/cli/tree/release/2.2.2xx/src/dotnet/commands/dotnet-run&quot;&gt;dotnet/CLI&lt;/a&gt; repository&lt;/li&gt;
&lt;/ol&gt;&lt;hr/&gt;&lt;h2 id=&quot;building-the-coreclr&quot;&gt;Building the CoreCLR&lt;/h2&gt;
&lt;p&gt;But before we even work through these ‘challenges’, we need to build the CoreCLR itself. Helpfully there is really nice guide available in &lt;a href=&quot;https://github.com/dotnet/coreclr#building-the-repository&quot;&gt;‘Building the Repository’&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;11.195512820513&quot;&gt;
&lt;p&gt;The build depends on Git, CMake, Python and of course a C++ compiler. Once these prerequisites are installed the build is simply a matter of invoking the ‘build’ script (&lt;code class=&quot;highlighter-rouge&quot;&gt;build.cmd&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt;) at the base of the repository.&lt;/p&gt;
&lt;p&gt;The details of installing the components differ depending on the operating system. See the following pages based on your OS. There is no cross-building across OS (only for ARM, which is built on X64). You have to be on the particular platform to build that platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you follow these steps successfully, you’ll end up with the following files (at least on Windows, other OSes may produce something slightly different):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://mattwarren.org/images/2018/12/CoreCLR%20Build%20Artifacts.png&quot; alt=&quot;CoreCLR Build Artifacts&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;no-compiler&quot;&gt;No Compiler&lt;/h2&gt;
&lt;p&gt;First up, how do we get around the fact that we don’t have a compiler? After all we need some way of turing our simple “Hello World” code into a .exe?&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Hello_World&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Fortunately we do have access to the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/ilasm&quot;&gt;ILASM tool (IL Assembler)&lt;/a&gt;, which can turn &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot;&gt;Common Intermediate Language (CIL)&lt;/a&gt; into an .exe file. But how do we get the correct IL code? Well, one way is to write it from scratch, maybe after reading &lt;a href=&quot;https://amzn.to/2QPpiTY&quot;&gt;Inside NET IL Assembler&lt;/a&gt; and &lt;a href=&quot;https://amzn.to/2Ca34UI&quot;&gt;Expert .NET 2.0 IL Assembler&lt;/a&gt; by Serge Lidin (yes, amazingly, 2 books have been written about IL!)&lt;/p&gt;
&lt;p&gt;Another, much easier way, is to use the amazing &lt;a href=&quot;https://sharplab.io/&quot;&gt;SharpLab.io site&lt;/a&gt; to do it for us! If you paste the C# code from above into it, you’ll &lt;a href=&quot;https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgqA7CMOKABwgGM4CAJODDAewD6AdT4IMAEyoBvKgTlEATEWIB2WfJmV525QDYiAFgIBZCGhoAKEngDaAXQIQEAcygBKdToKavXkgE4LACJuXj4CETFxAEIgtwotXwBfTwIUyiSgA==&quot;&gt;get the following IL code&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;.class private auto ansi '&amp;lt;Module&amp;gt;'
{
} // end of class &amp;lt;Module&amp;gt;

.class private auto ansi beforefieldinit Hello_World.Program
    extends [mscorlib]System.Object
{
    // Methods
    .method private hidebysig static 
        void Main (
            string[] args
        ) cil managed 
    {
        // Method begins at RVA 0x2050
        // Code size 11 (0xb)
        .maxstack 8

        IL_0000: ldstr &quot;Hello World!&quot;
        IL_0005: call void [mscorlib]System.Console::WriteLine(string)
        IL_000a: ret
    } // end of method Program::Main

    .method public hidebysig specialname rtspecialname 
        instance void .ctor () cil managed 
    {
        // Method begins at RVA 0x205c
        // Code size 7 (0x7)
        .maxstack 8

        IL_0000: ldarg.0
        IL_0001: call instance void [mscorlib]System.Object::.ctor()
        IL_0006: ret
    } // end of method Program::.ctor

} // end of class Hello_World.Program
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then, if we save this to a file called ‘HelloWorld.il’ and run the cmd &lt;code class=&quot;highlighter-rouge&quot;&gt;ilasm HelloWorld.il /out=HelloWorld.exe&lt;/code&gt;, we get the following output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Microsoft (R) .NET Framework IL Assembler.  Version 4.5.30319.0
Copyright (c) Microsoft Corporation.  All rights reserved.
Assembling 'HelloWorld.il'  to EXE --&amp;gt; 'HelloWorld.exe'
Source file is ANSI

HelloWorld.il(38) : warning : Reference to undeclared extern assembly 'mscorlib'. Attempting autodetect
Assembled method Hello_World.Program::Main
Assembled method Hello_World.Program::.ctor
Creating PE file

Emitting classes:
Class 1:        Hello_World.Program

Emitting fields and methods:
Global
Class 1 Methods: 2;

Emitting events and properties:
Global
Class 1
Writing PE file
Operation completed successfully
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Nice, so part 1 is done, we now have our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.exe&lt;/code&gt; file!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;no-base-class-library&quot;&gt;No Base Class Library&lt;/h2&gt;
&lt;p&gt;Well, not exactly, one problem is that &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Console&lt;/code&gt; lives in &lt;a href=&quot;https://github.com/dotnet/corefx/tree/release/2.2/src/System.Console/src/System&quot;&gt;dotnet/corefx&lt;/a&gt;, in there you can see the different files that make up the implementation, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Console.cs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ConsolePal.Unix.cs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ConsolePal.Windows.cs&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Fortunately, the nice CoreCLR developers included a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt; implementation in &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Private.CoreLib.dll&lt;/code&gt;, the &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib&quot;&gt;managed part of the CoreCLR&lt;/a&gt;, which was previously known as &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/release/2.2/src/mscorlib&quot;&gt;‘mscorlib’&lt;/a&gt; (before it &lt;a href=&quot;https://github.com/dotnet/coreclr/pull/17926&quot;&gt;was renamed&lt;/a&gt;). This internal version of &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt; is &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/Internal/Console.cs&quot;&gt;pretty small and basic&lt;/a&gt;, but it provides enough for what we need.&lt;/p&gt;
&lt;p&gt;To use this ‘workaround’ we need to edit our &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWorld.il&lt;/code&gt; to look like this (note the change from &lt;code class=&quot;highlighter-rouge&quot;&gt;mscorlib&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Private.CoreLib&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;.class public auto ansi beforefieldinit C
       extends [System.Private.CoreLib]System.Object
{
    .method public hidebysig static void M () cil managed 
    {
        .entrypoint
        // Code size 11 (0xb)
        .maxstack 8

        IL_0000: ldstr &quot;Hello World!&quot;
        IL_0005: call void [System.Private.CoreLib]Internal.Console::WriteLine(string)
        IL_000a: ret
    } // end of method C::M
    ...
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can achieve the same thing with C# code instead of raw IL, by invoking the C# compiler with the following cmd-line:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;csc -optimize+ -nostdlib -reference:System.Private.Corelib.dll -out:HelloWorld.exe HelloWorld.cs
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;So we’ve completed part 2, we are able to at least print “Hello World” to the screen without using the CoreFX repository!&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Now this is a nice little trick, but I wouldn’t ever recommend writing real code like this. Compiling against &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Private.CoreLib&lt;/code&gt; isn’t the right way of doing things. What the compiler normally does is compile against the publicly exposed surface area that lives in &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;dotnet/corefx&lt;/a&gt;, but then at run-time a process called &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/app-domains/type-forwarding-in-the-common-language-runtime&quot;&gt;‘Type-Forwarding’&lt;/a&gt; is used to make that ‘reference’ implementation in CoreFX map to the ‘real’ implementation in the CoreCLR. For more on this entire process see &lt;a href=&quot;https://blog.lextudio.com/the-rough-history-of-referenced-assemblies-7d752d92c18c&quot;&gt;The Rough History of Referenced Assemblies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, only a &lt;a href=&quot;https://mattwarren.org/2017/03/23/Hitchhikers-Guide-to-the-CoreCLR-Source-Code/#high-level-overview&quot;&gt;small amount of managed code&lt;/a&gt; (i.e. C#) actually exists in the CoreCLR, to show this, the directory tree for &lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib&quot;&gt;/dotnet/coreclr/src/System.Private.CoreLib&lt;/a&gt; is &lt;a href=&quot;https://gist.github.com/mattwarren/6b36567b51e3adca6c1ca684e72b8f6f&quot;&gt;available here&lt;/a&gt; and the tree with all ~1280 .cs files included is &lt;a href=&quot;https://gist.github.com/mattwarren/abc4e194b71e78eb9fa5a550a379a0a1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a concrete example, if you look in CoreFX, you’ll see that the &lt;a href=&quot;https://github.com/dotnet/corefx/tree/master/src/System.Reflection/src&quot;&gt;System.Reflection implementation&lt;/a&gt; is pretty empty! That’s because it’s a ‘partial facade’ that is eventually &lt;a href=&quot;https://github.com/dotnet/corefx/blob/release/2.2/src/System.Reflection.Emit/src/System.Reflection.Emit.csproj#L19&quot;&gt;‘type-forwarded’ to System.Private.CoreLib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re interested, the entire API that is exposed in CoreFX (but actually lives in CoreCLR) is &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs&quot;&gt;contained in System.Runtime.cs&lt;/a&gt;. But back to our example, here is the code that describes all the &lt;a href=&quot;https://github.com/dotnet/corefx/blob/master/src/System.Runtime/ref/System.Runtime.cs#L3035-L3048&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GetMethod(..)&lt;/code&gt; functions&lt;/a&gt; in the ‘System.Reflection’ API.&lt;/p&gt;
&lt;p&gt;To learn more about ‘type forwarding’, I recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=vg6nR7hS2lI&quot;&gt;‘.NET Standard - Under the Hood’&lt;/a&gt; (&lt;a href=&quot;https://www.slideshare.net/terrajobst/net-standard-under-the-hood&quot;&gt;slides&lt;/a&gt;) by &lt;a href=&quot;https://twitter.com/terrajobst&quot;&gt;Immo Landwerth&lt;/a&gt; and there is also some more in-depth information in &lt;a href=&quot;https://github.com/dotnet/standard/blob/master/docs/history/evolution-of-design-time-assemblies.md&quot;&gt;‘Evolution of design time assemblies’&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But why is this code split useful&lt;/strong&gt;, from the &lt;a href=&quot;https://github.com/dotnet/corefx#net-core-libraries-corefx&quot;&gt;CoreFX README&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;6.6048387096774&quot;&gt;
&lt;p&gt;&lt;strong&gt;Runtime-specific library code&lt;/strong&gt; (&lt;a href=&quot;https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib&quot;&gt;mscorlib&lt;/a&gt;) lives in the CoreCLR repo. It needs to be built and versioned in tandem with the runtime. The rest of CoreFX is &lt;strong&gt;agnostic of runtime-implementation and can be run on any compatible .NET runtime&lt;/strong&gt; (e.g. &lt;a href=&quot;https://github.com/dotnet/corert&quot;&gt;CoreRT&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And from the other point-of-view, in the &lt;a href=&quot;https://github.com/dotnet/coreclr#relationship-with-the-corefx-repository&quot;&gt;CoreCLR README&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;19.632768361582&quot;&gt;
&lt;p&gt;By itself, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft.NETCore.Runtime.CoreCLR&lt;/code&gt; package is actually not enough to do much. One reason for this is that the CoreCLR package tries to minimize the amount of the class library that it implements. &lt;strong&gt;Only types that have a strong dependency on the internal workings of the runtime are included&lt;/strong&gt; (e.g, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Object&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.String&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Threading.Thread&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Threading.Tasks.Task&lt;/code&gt; and most foundational interfaces).&lt;/p&gt;
&lt;p&gt;Instead most of the class library is implemented as independent NuGet packages that simply use the .NET Core runtime as a dependency. Many of the most familiar classes (&lt;code class=&quot;highlighter-rouge&quot;&gt;System.Collections&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Xml&lt;/code&gt; and so on), live in packages defined in the &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;dotnet/corefx&lt;/a&gt; repository.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One &lt;strong&gt;huge benefit&lt;/strong&gt; of this approach is that &lt;a href=&quot;https://www.mono-project.com/&quot;&gt;Mono&lt;/a&gt; can share &lt;a href=&quot;https://mobile.twitter.com/matthewwarren/status/987292012520067072&quot;&gt;large amounts of the CoreFX code&lt;/a&gt;, as shown in this tweet:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;6.2417582417582&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How Mono reuses .NET Core sources for BCL (doesn't include runtime, tools, etc) according to my calculations 🙂 &lt;a href=&quot;https://t.co/8JCDxqwnNi&quot;&gt;pic.twitter.com/8JCDxqwnNi&lt;/a&gt;&lt;/p&gt;
— Egor Bogatov (@EgorBo) &lt;a href=&quot;https://twitter.com/EgorBo/status/978737460061458432?ref_src=twsrc%5Etfw&quot;&gt;March 27, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;hr/&gt;&lt;h2 id=&quot;no-launcher&quot;&gt;No Launcher&lt;/h2&gt;
&lt;p&gt;So far we’ve ‘compiled’ our code (well technically ‘assembled’ it) and we’ve been able to access a simple version of &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Console&lt;/code&gt;, but how do we actually run our &lt;code class=&quot;highlighter-rouge&quot;&gt;.exe&lt;/code&gt;? Remember we can’t use the &lt;code class=&quot;highlighter-rouge&quot;&gt;dotnet run&lt;/code&gt; command because that lives in the &lt;a href=&quot;https://github.com/dotnet/cli/tree/release/2.2.2xx/src/dotnet/commands/dotnet-run&quot;&gt;dotnet/CLI&lt;/a&gt; repository (and that would be breaking the rules of this &lt;em&gt;slightly contrived&lt;/em&gt; challenge!!).&lt;/p&gt;
&lt;p&gt;Again, fortunately those clever runtime engineers have thought of this exact scenario and they built the very helpful &lt;code class=&quot;highlighter-rouge&quot;&gt;corerun&lt;/code&gt; application. You can read more about in &lt;a href=&quot;https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingCoreRun.md&quot;&gt;Using corerun To Run .NET Core Application&lt;/a&gt;, but the td;dr is that it will only look for dependencies in the same folder as your .exe.&lt;/p&gt;
&lt;p&gt;So, to complete the challenge, we can now run &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreRun HelloWorld.exe&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;# CoreRun HelloWorld.exe
Hello World!
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Yay, the least impressive demo you’ll see this year!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For more information on how you can ‘host’ the CLR in your application I recommend this excellent tutorial &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting&quot;&gt;Write a custom .NET Core host to control the .NET runtime from your native code&lt;/a&gt;. In addition, the docs page on &lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/a51xd4ze(v=vs.100)&quot;&gt;‘Runtime Hosts’&lt;/a&gt; gives a nice overview of the different hosts that are available:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;The .NET Framework ships with a number of different runtime hosts, including the hosts listed in the following table.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Runtime Host&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;ASP.NET&lt;/td&gt;
&lt;td&gt;Loads the runtime into the process that is to handle the Web request. ASP.NET also creates an application domain for each Web application that will run on a Web server.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;Microsoft Internet Explorer&lt;/td&gt;
&lt;td&gt;Creates application domains in which to run managed controls. The .NET Framework supports the download and execution of browser-based controls. The runtime interfaces with the extensibility mechanism of Microsoft Internet Explorer through a mime filter to create application domains in which to run the managed controls. By default, one application domain is created for each Web site.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Shell executables&lt;/td&gt;
&lt;td&gt;Invokes runtime hosting code to transfer control to the runtime each time an executable is launched from the shell.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;/div&gt;</description>
<pubDate>Thu, 13 Dec 2018 20:30:36 +0000</pubDate>
<dc:creator>matthewwarren</dc:creator>
<og:title>Exploring the .NET Core Runtime (in which I set myself a challenge)</og:title>
<og:description>It seems like this time of year anyone with a blog is doing some sort of ‘advent calendar’, i.e. 24 posts leading up to Christmas. For instance there’s a F# one which inspired a C# one (C# copying from F#, that never happens 😉)</og:description>
<og:url>http://www.mattwarren.org/2018/12/13/Exploring-the-.NET-Core-Runtime/</og:url>
<og:type>article</og:type>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mattwarren.org/2018/12/13/Exploring-the-.NET-Core-Runtime/</dc:identifier>
</item>
<item>
<title>China harvested organs from political prisoners, says tribunal</title>
<link>https://www.bmj.com/content/363/bmj.k5250</link>
<guid isPermaLink="true" >https://www.bmj.com/content/363/bmj.k5250</guid>
<description>&lt;div class=&quot;contributors&quot;&gt;
&lt;ol class=&quot;contributor-list&quot; id=&quot;contrib-group-1&quot;&gt;&lt;li class=&quot;last&quot; id=&quot;contrib-1&quot;&gt;&lt;span class=&quot;name&quot;&gt;Richard Hurley&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;ol class=&quot;affiliation-list&quot;&gt;&lt;li class=&quot;aff&quot;&gt;
&lt;address&gt;The BMJ&lt;/address&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;p id=&quot;p-1&quot;&gt;Forced harvesting of organs from prisoners of conscience in China has been “substantial,” says an interim judgment of an independent “people’s tribunal” set up to determine whether the country’s transplantation practices breached international criminal law.&lt;/p&gt;
&lt;p id=&quot;p-2&quot;&gt;The former English judge Geoffrey Nice QC, the tribunal’s chair, said after a three day evidence gathering session, “We, the tribunal members, are all certain, unanimously, beyond reasonable doubt, that in China forced organ harvesting from prisoners of conscience has been practised for a substantial period of time, involving a very substantial number of victims . . . by state organised or approved organisations or individuals.”&lt;/p&gt;
&lt;p id=&quot;p-3&quot;&gt;The tribunal found that the practices breached the Universal Declaration of Human Rights, including articles 3 (right to life), 6 (recognition as a person before the law), 7 (equality before the law), 9 (not to be subject to arbitrary arrest), 10 (full equality to a fair and public …&lt;/p&gt;
</description>
<pubDate>Thu, 13 Dec 2018 18:48:30 +0000</pubDate>
<dc:creator>crunchiebones</dc:creator>
<og:title>China harvested organs from political prisoners on substantial scale, says tribunal</og:title>
<og:url>https://www.bmj.com/content/363/bmj.k5250</og:url>
<og:image>https://www.bmj.com/sites/default/files/highwire/bmj/363/8180.cover-source.jpg</og:image>
<og:description>Forced harvesting of organs from prisoners of conscience in China has been “substantial,” says an interim judgment of an independent “people’s tribunal” set up to determine whether the country’s transplantation practices breached international criminal law. The former English judge Geoffrey Nice QC, the tribunal’s chair, said after a three day evidence gathering session, “We, the tribunal members, are all certain, unanimously, beyond reasonable doubt, that in China forced organ harvesting from prisoners of conscience has been practised for a substantial period of time, involving a very substantial number of victims . . . by state organised or approved organisations or individuals.” The tribunal found that the practices breached the Universal Declaration of Human Rights, including articles 3 (right to life), 6 (recognition as a person before the law), 7 (equality before the law), 9 (not to be subject to arbitrary arrest), 10 (full equality to a fair and public …</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bmj.com/content/363/bmj.k5250</dc:identifier>
</item>
<item>
<title>Virgin Galactic successfully reaches space</title>
<link>https://www.bbc.com/news/business-46550862</link>
<guid isPermaLink="true" >https://www.bbc.com/news/business-46550862</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Virgin Galactic plane&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/1E38/production/_104763770_vg_third_powered_flight_-_take_off_hd_ready.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Virgin Galactic&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Virgin Galactic's plane will be carried to a height of 12,000m before its rocket ignites
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;The latest test flight by Sir Richard Branson's Virgin Galactic successfully rocketed to the edge of space and back. &lt;/p&gt;&lt;p&gt;The firm's SpaceShipTwo passenger rocket ship reached a height of 82.7km, beyond the altitude at which US agencies have awarded astronaut wings.&lt;/p&gt;&lt;p&gt;It marked the plane's fourth test flight and followed earlier setbacks in the firm's space programme.&lt;/p&gt;&lt;p&gt;Sir Richard is in a race with Elon Musk and Jeff Bezos to send the first fee-paying passengers into space.&lt;/p&gt;&lt;p&gt;He founded the commercial spaceflight company in 2004, shortly after Mr Musk started SpaceX and Jeff Bezos established Blue Origin.&lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/science-environment-45494204&quot; class=&quot;story-body__link&quot;&gt;Champagne for space tourists takes flight&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/business-45919650&quot; class=&quot;story-body__link&quot;&gt;The billionaires fuelling a space race&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In 2008, Virgin Galactic first promised sub-orbital spaceflight trips for tourists would be taking place &quot;within 18 months&quot;. It has since regularly made similar promises to have space flights airborne in the near future.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;But delays and a fatal crash in 2014 prevented Sir Richard's original ambitions.&lt;/p&gt;&lt;p&gt;On Thursday, the SpaceShipTwo passenger rocket ship took off from the Mojave Desert in California.&lt;/p&gt;&lt;p&gt;The company said the space ship's motor burned for 60 seconds, travelling at 2.9 times the speed of sound as it gained height.&lt;/p&gt;&lt;p&gt;The rocket carried two pilots and a mannequin named Annie as a stand-in passenger, as well as four research experiments for NASA.  &lt;/p&gt;&lt;p&gt;&quot;Today we have shown Virgin Galactic can open space to the world,&quot; Sir Richard said.&lt;/p&gt;&lt;p&gt;The US government has awarded astronaut wings to pilots who ventured farther than roughly 80km beyond earth's surface.&lt;/p&gt;&lt;p&gt;But Thursday's flight did not breach the 100km Karman Line, which many organisations use to resolve debates about where space begins. &lt;/p&gt;&lt;p&gt;While the trip marked a milestone for Virgin Galactic, the firm's rivals have already ventured farther - albeit without humans on board.&lt;/p&gt;&lt;p&gt;SpaceX, in partnership with NASA, is planning crewed missions for early next year. Mr Bezos has also said Blue Origin plans to send its first crew to space in 2019. &lt;/p&gt;&lt;p&gt;Virgin Galactic, which is charging $250,000 for a 90-minute flight, has said more than 600 people have bought tickets or put down deposits for an eventual voyage.  &lt;/p&gt;
            </description>
<pubDate>Thu, 13 Dec 2018 17:33:51 +0000</pubDate>
<dc:creator>adzicg</dc:creator>
<og:title>Virgin Galactic reaches edge of space</og:title>
<og:type>article</og:type>
<og:description>The latest test flight by Sir Richard Branson's Virgin Galactic makes it to the edge of space and back.</og:description>
<og:url>https://www.bbc.com/news/business-46550862</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/1E38/production/_104763770_vg_third_powered_flight_-_take_off_hd_ready.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/business-46550862</dc:identifier>
</item>
<item>
<title>Mail Loop From Hell (2012)</title>
<link>https://blog.dbrgn.ch/2012/7/29/mail-loop-from-hell/</link>
<guid isPermaLink="true" >https://blog.dbrgn.ch/2012/7/29/mail-loop-from-hell/</guid>
<description>&lt;p&gt;Found in &lt;cite&gt;#django&lt;/cite&gt; on freenode, Jul 12, 2012. All names are edited.&lt;/p&gt;
&lt;pre class=&quot;literal-block&quot;&gt;
11:16 &amp;lt; abrt&amp;gt; since it's quiet in here I'll tell you a story.
11:16 &amp;lt; abrt&amp;gt; back in 1992, I had just graduated university and was interning at a government facility in
              newport news
11:16 &amp;lt; abrt&amp;gt; along with some friends from college. We made $7.25/hr and were living large.
11:16 &amp;lt; qns&amp;gt; hahahaha
11:17 &amp;lt; qns&amp;gt; You sound like Kevin Mitinick.
11:17 &amp;lt; abrt&amp;gt; we used to play practical jokes on each other all the time.
11:17 &amp;lt; abrt&amp;gt; mitnick was a pussy compared to us
11:17 &amp;lt; qns&amp;gt; :O
11:17 &amp;lt; abrt&amp;gt; anyway, I managed to break into my friend's university UNIX account. guessed his password. easy.
11:17 &amp;lt; abrt&amp;gt; how well do you know UNIX?
11:18 &amp;lt; qns&amp;gt; not well yet
11:18 &amp;lt; abrt&amp;gt; well, back in the day, they didn't have postfix or qmail any of these fancy mailservers
11:18 &amp;lt; abrt&amp;gt; they ran sendmail
11:18 &amp;lt; abrt&amp;gt; and they allowed individual .forward files
11:19 &amp;lt; abrt&amp;gt; the purpose of the .forward file was to forward your email that came to your account to the
              address in the .forward file.
11:19 &amp;lt; abrt&amp;gt; anyway, after I broke into my friend Matt's account, I set up his .forward file to be
              &quot;everyone@***.edu&quot; which I knew was an alias for the entire college.
11:19 &amp;lt; abrt&amp;gt; I had just learned how to forge sendmail headers and was going to send him a very embarrassing
              email &quot;from his girlfriend&quot;
11:20 &amp;lt; abrt&amp;gt; fortunately for me, I decided to do a test run at 1730 on a Friday. Assuming the test run went
              well, the embarrassing forged email would go out the following Monday.
11:20 &amp;lt; abrt&amp;gt; so I sent a &quot;this is a test&quot; to Matt.
11:21 &amp;lt; abrt&amp;gt; and went home, drank some beers with Matt and Steve, and had a great weekend
11:21 &amp;lt; abrt&amp;gt; Monday morning I get into the lab and everyone's quiet, sort of whispering, and looking at me
11:21 &amp;lt; abrt&amp;gt; fuck me, right?
11:21 &amp;lt; abrt&amp;gt; I log into the gov UNIX system - and I have 13000 emails
11:22 &amp;lt; abrt&amp;gt; what I had forgotten was that &quot;everyone@***.edu&quot; included Matt.
11:22 &amp;lt; abrt&amp;gt; so the email would get sent to everyone, including him, then he would add 10 lines of header,
              forward it to everyone, including him, ....
11:22 &amp;lt; abrt&amp;gt; mail loop from hell.
11:22 &amp;lt; qns&amp;gt; Did you get in trouble?
11:22 &amp;lt; abrt&amp;gt; well, here's the thing
11:22 &amp;lt; abrt&amp;gt; this was summer '92
11:22 &amp;lt; abrt&amp;gt; nobody at school, right?
11:23 &amp;lt; abrt&amp;gt; everyone had their email forwarded elsewhere
11:23 &amp;lt; abrt&amp;gt; and the professors got jobs at places like Camp Peary, and FBI, and other research
              organizations, ....
11:23 &amp;lt; qns&amp;gt; So you help them?
11:23 &amp;lt; abrt&amp;gt; and those systems couldn't handle the volume of mail, and they never thought to put the mail
              spool on its on separate partition
11:23 &amp;lt; abrt&amp;gt; so their systems crashed.
11:24 &amp;lt; qns&amp;gt; haha
11:24 &amp;lt; qns&amp;gt; So you triggered chaos all over.
11:24 &amp;lt; abrt&amp;gt; I managed to bring down 13 CIA offices, all FBI offices east of the Mississippi, and the entire
              Southeastern university Research Network.
11:24 &amp;lt; etgr&amp;gt; You can claim to have hacked the FBI
11:24 &amp;lt; qns&amp;gt; using e-mail.
11:24 &amp;lt; abrt&amp;gt; along with various other systems, but those were the biggies
11:24 &amp;lt; qns&amp;gt; I'd have shat myself
11:24 &amp;lt; abrt&amp;gt; I pretty much did.
11:25 &amp;lt; abrt&amp;gt; But back then, like possession of a fake ID, nobody really knew what to do to you for this sort
              of thing
11:25 &amp;lt; abrt&amp;gt; so I got a slap on the wrist, almost fired, and had to write a letter of apology to the head of
              the computer lab at university
11:25 &amp;lt; abrt&amp;gt; and I lost my university email account. :(
11:26 &amp;lt; qns&amp;gt; hahahahaha
11:26 &amp;lt; abrt&amp;gt; today I'd probably be sent to Guantanamo
11:26 &amp;lt; qns&amp;gt; Or you'd mysteriously disappear.  :P
11:26 &amp;lt; abrt&amp;gt; anyway, that's my story for the evening.
11:26 &amp;lt; qns&amp;gt;  I need a story like that on my resume.
11:26 &amp;lt; abrt&amp;gt; nah
11:26 &amp;lt; abrt&amp;gt; here's the thing
11:26 &amp;lt; abrt&amp;gt; that story doesn't go on a resume
11:27 &amp;lt; abrt&amp;gt; but - fast forward 10 years later.
11:27 &amp;lt; qns&amp;gt; Ahh
11:27 &amp;lt; abrt&amp;gt; I'm getting my clearance
11:27 &amp;lt; abrt&amp;gt; being interviewed by the suits from OPM
11:27 &amp;lt; abrt&amp;gt; and they leave the room, come back with a folder, and say, &quot;Tell us about SURANet and the CIA
              in 1992&quot;
11:27 &amp;lt; abrt&amp;gt; THAT's when I shat myself.
11:28 &amp;lt; abrt&amp;gt; BUT - good news - I got my clearance despite my history :)
11:28 &amp;lt; qns&amp;gt; Were they impressed?
11:28 &amp;lt; abrt&amp;gt; nah, they were laughing
&lt;/pre&gt;
&lt;p&gt;After reading this story, I started a new bookmark list: &lt;a class=&quot;reference external&quot; href=&quot;https://dbrgn.ch/stories-from-the-internet.html&quot;&gt;Stories from the Internet&lt;/a&gt;. Feel free to follow it, and also send me new candidates if you know of any :)&lt;/p&gt;
</description>
<pubDate>Thu, 13 Dec 2018 17:14:42 +0000</pubDate>
<dc:creator>dbrgn</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.dbrgn.ch/2012/7/29/mail-loop-from-hell/</dc:identifier>
</item>
<item>
<title>AWS Outperforms GCP in the 2018 Cloud Report</title>
<link>https://www.cockroachlabs.com/blog/2018_cloud_report/</link>
<guid isPermaLink="true" >https://www.cockroachlabs.com/blog/2018_cloud_report/</guid>
<description>&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Our customers rely on us to help them navigate the complexities of the increasingly competitive cloud wars. Should they use Amazon Web Services (AWS)? Google Cloud Platform (GCP)? Microsoft Azure? How should they tune their workload for different offerings? Which is more reliable?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We are committed to building a cloud neutral product, and we run test clusters on all three leading US cloud providers. As we were testing features for our 2.1 release, we noticed something interesting: AWS offered 40% greater throughput than GCP.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We were curious as to why AWS offered such a stark difference in throughput, and set out to test the performance of GCP and AWS in more detail. Ultimately, we compared the two platforms on TPC-C performance (e.g., throughput and latency), CPU, Network, I/O, and cost.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;This inspired what has become the &lt;a href=&quot;https://www.cockroachlabs.com/guides/2018-cloud-report/&quot;&gt;2018 Cloud Report&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;strong&gt;Our conclusion? AWS outperforms GCP on nearly every criteria we tested — including cost.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Note: We did not test Microsoft Azure due to bandwidth constraints but plan to do so in the near future.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;machine-type&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;Machine Type&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;GCP has a variety of instance types (including standard and high CPU) but we focused on the &lt;a href=&quot;https://cloud.google.com/compute/docs/cpu-platforms&quot;&gt;n1-standard-16&lt;/a&gt; machine with Intel Xeon Scalable Processor (Skylake) in the &lt;a href=&quot;https://cloud.google.com/compute/docs/regions-zones/&quot;&gt;us-east region&lt;/a&gt;. We were familiar with this instance type as we used it to conduct our previous performance benchmarking.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;A similar configuration isn’t quite as trivial as it sounds for AWS. AWS has more flavors of instances than GCP. It has the standard high CPU and general instances. We chose the latest compute-optimized AWS instance type, &lt;a href=&quot;https://aws.amazon.com/blogs/aws/ec2-instance-update-c5-instances-with-local-nvme-storage-c5d/&quot;&gt;c5d.4xlarge&lt;/a&gt; instances, to match n1-standard-16, because they both have 16 cpus and SSDs (although AWS only offers 32 GB of RAM as compared to 60 GB of RAM on GCP) within the us-east-2 region.&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;experiments&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;Experiments&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We designed our experiment to first tease out whether or not AWS and GCP performance differed on a simulated customer workload. We started with a customer workload (and not micro-benchmarks) because it most directly simulates real-world customer behavior.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;It was only after observing differences in applied workloads that we moved onto micro-benchmarks like CPU, network, and I/O performance. Differences in micro-benchmarks matter more when informed by the knowledge that the overall customer workload performance of the platforms differ. CPU, Network, and I/O all represent separate hypothesis for why performance might vary between GCP and AWS.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;tpc-c-performance&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;TPC-C Performance&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We chose to test workload performance by using &lt;a href=&quot;http://www.tpc.org/tpcc/&quot;&gt;TPC-C&lt;/a&gt;, a popular OLTP benchmark tool that simulates an e-commerce business, &lt;a href=&quot;https://www.cockroachlabs.com/blog/cockroachdb-2dot1-performance/&quot;&gt;given our familiarity with this workload&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/9162b09b19d2872bd31181f25d09e5872ebbb051/b83cc/uploads/2018/12/aws_vs_gcp_tpcc_throughput.png&quot; alt=&quot;AWS vs GCP: TPC-C Throughput&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;CockroachDB 2.1 achieves 40% more throughput (tpmC) on TPC-C when tested on AWS using &lt;code&gt;c5d.4xlarge&lt;/code&gt; than on GCP via &lt;code&gt;n1-standard-16&lt;/code&gt;. We were shocked that AWS offered such superior performance.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Previously, our internal testing suggested more equitable outcomes between AWS and GCP. We decided to expand beyond the &lt;code&gt;c5&lt;/code&gt; series to test TPC-C against some of the most popular AWS instance types.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/e8173bb979f206440e4649ab0edb013b9282b9a3/0f4c3/uploads/2018/12/3node_tpcc_throughput_aws_v_gcp_ssd_ebs.png&quot; alt=&quot;AWS vs GCP: 3-Node TPC-C Performance on SSD and EBS Machines&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;At first blush, it appears that SSDs offered by &lt;code&gt;c5d&lt;/code&gt; and &lt;code&gt;m5d&lt;/code&gt; outperform EBS. Unfortunately, it’s a bit more complicated than that as AWS offers EBS out of the box with &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html&quot;&gt;gp2 volume types&lt;/a&gt; rather than the higher performing &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html&quot;&gt;io1 volume type&lt;/a&gt;. To isolate this change, we focused on the higher performing &lt;code&gt;c5&lt;/code&gt; series with SSDs, EBS-gp2, and EBS-io1 volume types:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/6b1dbd88f0f03abb4364fdc5a88403c3feb46d84/a9ad5/uploads/2018/12/3node_tpcc_throughput_aws_v_gcp_c5series.png&quot; alt=&quot;AWS vs GCP: 3-Node TPC-C Performance on c5 Series Machines&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Clearly, EBS volumes can offer effective performance if tuned to the io1 volume type and provided with sufficient iOPS.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;So if the difference isn’t explained by SSD vs. EBS, what else might explain it? AWS recently introduced their new &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances&quot;&gt;Nitro System&lt;/a&gt; present in &lt;code&gt;c5&lt;/code&gt; and &lt;code&gt;m5&lt;/code&gt; series. The AWS Nitro System offers approximately the same or superior performance when compared to a similar GCP instance.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/88cfea0a14ad8316f805d35506c9be70483377f2/3b063/uploads/2018/12/3node_tpcc_throughput_aws_v_gcp_with_nitro.png&quot; alt=&quot;AWS vs GCP: 3-Node TPC-C Performance on Machines with Nitro System&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;The results were clear: AWS wins on TPC-C benchmark performance. But what causes such large performance differentials? We set out to learn more by testing a series of micro-benchmarks on CPU, network, and I/O.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;cpu-experiment&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;CPU Experiment&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We began our testing like any aspirational scientists by seeking to disprove our main hypothesis:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;that cloud platforms’ different provisioning policies might affect CPU performance.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We focused on a CPU performance microbenchmark first as it can have a large impact on performance.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;To test CPU performance, we needed a 3rd party easy to use benchmark. The two most frequently used benchmark test suites in the market today are &lt;a href=&quot;https://github.com/akopytov/sysbench&quot;&gt;sysbench&lt;/a&gt; and &lt;a href=&quot;http://kernel.ubuntu.com/~cking/stress-ng/&quot;&gt;stress-ng&lt;/a&gt;. We chose stress-ng because it offered more benchmarks and provided more flexible configurations than sysbench.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We ran the following Stress-ng command five times on both AWS and GCP: &lt;code&gt;stress-ng --metrics-brief --cpu 16 -t 1m&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/efa90277ab9588a75eecf2482b3c0ec45e045292/87cef/uploads/2018/12/cpu_throughput_aws-vs-gcp.png&quot; alt=&quot;AWS vs GCP: CPU Throughput&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS offered 28% more throughput (~2,900) on stress-ng than GCP. Both AWS and GCP offered generally consistent CPU performance across runs. This is a credit to the investments made by both platforms as unpredictability can have a material cost for business paid in the over-provisioning of virtual machines. Note that the Skylake series (used in this experiment) offers a marginal 4% improvement over standard hardware on GCPs &lt;code&gt;n1-standard-16.&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Now that we observed an initial difference in both CPU performance on GCP and AWS, we couldn’t help ourselves from continuing to investigate other potential differences. Was the entirety of the TPC-C difference generated from the advantage in CPU performance?&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;network-experiment&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;Network Experiment&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Next, we tested network throughput and latency. To test network, we measured throughput using a popular tool called &lt;a href=&quot;https://github.com/esnet/iperf&quot;&gt;iPerf&lt;/a&gt; and latency via another popular tool &lt;a href=&quot;https://linux.die.net/man/8/ping&quot;&gt;PING&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;iPerf’s configurations include a buffer data size (128kb), a protocol, a server and and a client. iPerf attempts to connect the client and the server with the data from buffer size via the protocol. We setup iPerf similarly to this &lt;a href=&quot;http://dtrace.org/blogs/brendan/2014/01/10/benchmarking-the-cloud/&quot;&gt;blog post&lt;/a&gt;. This test provides a throughout for the network which allows for us to compare the performance of the network on AWS and GCP. We ran the test four times each for AWS and GCP and aggregated the results of all four tests in histograms (each 1 sec run is stacked to form this chart):&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/72d47edd31f2298928060a19e2a6ad6cf5f73321/8b2e0/uploads/2018/12/aws_v_gcp_network-throughput-graph.png&quot; alt=&quot;AWS vs GCP: Network Throughput Graph&quot;/&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/2b98ce541cc6c34156620de4c33d21a5b3ba8e8e/c8acc/uploads/2018/12/aws_v_gcp_network-throughput-table.png&quot; alt=&quot;AWS vs GCP: Network Throughput Table&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;GCP shows a fairly normal distribution of network throughput centered at ~5.6 GB/sec. In addition to the raw network throughput, we also care about the variance of the network throughput so that we can have consistent expectations for the network performance. Throughput ranges from 4.01 GB/sec to 6.67 GB/sec — a somewhat unpredictable spread of network performance, reinforced by the observed average variance for GCP of 0.487 GB/sec.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS, on the other hand, stands out as it offers significantly higher throughput, centered on 9.6 GB/sec, while providing a much tighter spread between 9.60 GB/sec and 9.63 GB/sec when compared to GCP. On AWS, iPerf transferred a total network throughput of 2,296 GB. This is an increase of 70% over GCP. On average this is more than 4 GB/sec increase in throughput.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;What about network throughput variance? On AWS, the variance is only 0.006 GB/sec. This means that the &lt;strong&gt;GCP network throughput is 81x more variable when compared to AWS.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We tested network latency, in addition to the throughput and variance. Without testing for latency we can miss significant delays in service that may be masked by overall performance. We used the industry standard tool PING to measure latency.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/e804bc6083233d2189c8aa70987339ec11e1c143/42f32/uploads/2018/12/aws_v_gcp_network-latency-graph.png&quot; alt=&quot;AWS vs GCP: Network Latency Graph&quot;/&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/ce3bcffe68469c6aaf0b3df2fedb3381247f1db5/3a4ef/uploads/2018/12/aws_v_gcp_network-latency-table_1.png&quot; alt=&quot;AWS vs GCP: Network Latency Table&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Like network throughput, AWS has a tighter network latency than GCP. Looking at the data closely, we can see that there are several outliers such that the max latency, 1.25 ms, is more than 5 times the average!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Similarly, to network throughput, AWS offers a stark difference to GCP.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS’s values are centered on an average latency, 0.057 ms. In fact the spread is so tight it can’t be visualized on the same scale as GCP. The max latency is only 0.077 — a difference of only .02 ms (or 35%) from the average!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS offers significantly better network throughput and latency with none of the variability present in GCP. Further, it looks like Amazon may be racing further ahead in network performance with the introduction of the &lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2018/11/introducing-amazon-ec2-c5n-instances/&quot;&gt;&lt;code&gt;c5n&lt;/code&gt; machine type&lt;/a&gt; that offers significantly higher network performance across all instance sizes as compared to the rest of the c series.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;i-o-experiment&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;I/O Experiment&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;We tested I/O using a configuration of Sysbench that simulates small writes with frequent syncs for both write and read performance. We ran the sysbench test writing to an SSD to achieve similar results to running a database in production.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;This test measures throughput based on a fixed set of threads, or the number of items concurrently writing to disk.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;First, we tested write performance:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/166a1177e8579b0f7de618be9117fe48338a545e/d0bc7/uploads/2018/12/aws_v_gcp_io_write-performance.png&quot; alt=&quot;AWS vs GCP: I/O Write Performance&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS consistently offers more write throughput across all thread variance from 1 thread up to 64. In fact, &lt;strong&gt;it can be as high as 67x difference in throughput.&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/6c60007ba3a41656cb99a1eef7e353a15b60ee30/cefca/uploads/2018/12/aws_v_gcp_write-latency.png&quot; alt=&quot;AWS vs GCP: Write Latency&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS also offers better average and 95th percentile write latency across all thread tests.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS held clear advantages in write throughput and latency.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/aec8f808cc236fb124736dc3d6d7ce6a93856abf/82021/uploads/2018/12/aws_v_gcp_io_read-performance.png&quot; alt=&quot;AWS vs GCP: I/O Read Performance&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS provides more read throughput from 1 to 16 threads. At 32 and 64 threads, GCP provides marginally more throughput.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/1d9f9cec5f25a184f0cbe34d0c4595ae68c7dbbb/2a413/uploads/2018/12/aws_v_gcp_read-latency.png&quot; alt=&quot;AWS vs GCP: Read Latency&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Similarly to write latency, AWS wins the read latency battle up to 32 threads. At 32 and 64 threads GCP and AWS split the results.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Overall, AWS wins for write and read performance up to 16 threads. GCP offers a marginally better performance with similar latency to AWS for read performance at 32 threads and up.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;strong&gt;No Barrier&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;What about performing this experiment with no barrier? As a refresher, &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/storage_administration_guide/writebarrieronoff&quot;&gt;no barrier&lt;/a&gt; is a method of writing directly to disk without waiting for the write cache to be flushed. This is faster, but in the event of a crash, data can be corrupted. Note that no barrier can be safely used with battery-backed write caches. We were curious how big a performance advantage this offered so we tested nobarrier on GCP and AWS and saw large changes in performance.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Compared to not setting no barrier, GCP with no barrier speeds things up by 6x! On AWS, no barrier (vs. not setting no barrier) is only a 25% speed up. As such, we decided to re-run the entirety of the above experiment with no barrier. Even with the benefit of no barrier, the head-to-head results remain largely unchanged. And, since running with no barrier offers some additional risk, we think it reinforces our original conclusion that AWS beats GCP on I/O performance.&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;cost&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;Cost&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;On applied benchmarks (e.g., TPC-C) and the more descriptive micro-benchmark — CPU, network, and I/O — AWS outperformed GCP. But at what cost? Do you pay for this increased performance on AWS?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Let’s circle back to the TPC-C setup discussed at the beginning. For TPC-C, we used n1-standard-16 on GCP with local SSD and c5d.4xlarge on AWS. For both clouds we assumed the most generous discounts available:&lt;/span&gt;&lt;/p&gt;
&lt;ul readability=&quot;-0.96273291925466&quot;&gt;&lt;li readability=&quot;-0.96907216494845&quot;&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;On &lt;a href=&quot;https://cloud.google.com/products/calculator/#id=8c0b842f-2b3f-47d1-8260-f8cbab8dd11d&quot;&gt;GCP&lt;/a&gt; we assumed a three-year committed use price discount with local SSD in the central region.&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.95238095238095&quot;&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;On &lt;a href=&quot;https://aws.amazon.com/ec2/pricing/reserved-instances/pricing/&quot;&gt;AWS&lt;/a&gt; we assumed a three-year standard contract paid up front.&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/04441c08098755f0d8a1228681ec2dca9f9275ee/a032f/uploads/2018/12/aws_v_gcp_price_per_performance.png&quot; alt=&quot;AWS vs. GCP: Price Per Performance on the TPC-C Benchmark&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Not only is GCP more expensive than AWS, but it also achieves worse performance. This is doubly reflected in the price per performance (below), which &lt;strong&gt;shows GCP costing 2.5 times more than AWS per tpmC&lt;/strong&gt; (&lt;a href=&quot;https://www.cockroachlabs.com/blog/cockroachdb-2dot1-performance/&quot;&gt;the primary metric of throughput in TPC-C&lt;/a&gt;)!&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;AWS outperformed GCP on applied performance (e.g., TPC-C) and a variety of micro-benchmarks (e.g, CPU, network, and I/O) as well as cost. We recommend using AWS for your most important workloads.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;CockroachDB remains committed to our stance as a cloud-agnostic database. We will continue to use GCP, AWS, Microsoft Azure, and others for internal stability and performance testing. We also expect that these results will change over time as all three companies continue to invest in the modern infrastructure ecosystem.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Note, the &lt;a href=&quot;https://www.cockroachlabs.com/guides/2018-cloud-report/&quot;&gt;2018 Cloud Report&lt;/a&gt; focused on evaluating AWS and GCP because they are the most popular cloud platforms among our customers. In future editions, we plan to expand upon our testing with Microsoft Azure, Digital Ocean, and other cloud platforms.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;article-sidebar standard-content&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;article-sidebar__close&quot;&gt;&lt;span class=&quot;author-comma&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/2a3b4a5c251a0f372393770bd645d46056b7923e/44e7c/images/blog/close.svg&quot; alt=&quot;close icon&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;article-sidebar__content&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;span class=&quot;author-comma&quot;&gt;Get blog posts to your inbox.&lt;/span&gt;&lt;/p&gt;
&lt;span class=&quot;author-comma&quot;&gt;&lt;span class=&quot;hbspt-form&quot; id=&quot;hubspot-form-1ab229c6039c3af7e223f5366c2e5e40b45bb900&quot;/&gt;&lt;/span&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Thu, 13 Dec 2018 16:28:17 +0000</pubDate>
<dc:creator>awoods187</dc:creator>
<og:type>website</og:type>
<og:title>AWS Outperforms GCP in the 2018 Cloud Report</og:title>
<og:description>Customers rely on us to help navigate the complexities of the increasingly competitive cloud wars. This inspired the 2018 Cloud Computing Report, where we benchmark performance, latency, CPU, network, I/O, and cost of AWS and GCP.</og:description>
<og:url>https://www.cockroachlabs.com/blog/2018_cloud_report/</og:url>
<og:image>https://www.cockroachlabs.com//uploads/2018/1/cross-cloud-deployment-by-zoe-van-dijk.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cockroachlabs.com/blog/2018_cloud_report/</dc:identifier>
</item>
<item>
<title>Robinhood launches 3% checking account</title>
<link>https://techcrunch.com/2018/12/13/robinhood-free-checking-and-savings-accounts/</link>
<guid isPermaLink="true" >https://techcrunch.com/2018/12/13/robinhood-free-checking-and-savings-accounts/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;&lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/robinhood&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;robinhood&quot;&gt;Robinhood&lt;/a&gt; is undercutting the big banks by forgoing brick-and-mortar branches with its new zero-fee checking and savings account features. With no overdraft or monthly fees, a juicy 3 percent interest rate and a claim of more U.S. ATMs than the five biggest banks combined, Robinhood is using the scalability of software to pass impressive perks on to customers. &lt;span&gt;The free stock trading app already used that approach to attack brokers like E*Trade and Charles Schwab that charge a per-trade fee. Now it’s breaking into the larger financial services market with a model that could put the squeeze on Wells Fargo, Chase and Bank of America.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Today Robinhood &lt;a href=&quot;https://blog.robinhood.com/news/2018/12/13/introducing-robinhood-checking-amp-savings&quot;&gt;launches&lt;/a&gt; checking and savings accounts in the U.S. with a Mastercard debit card issued through Sutton Bank that starts shipping December 18th. Users earn 3 percent on all the dough they keep with Robinhood, yet there’s no minimum balance or fees for monthly membership, overdrafts, foreign transactions or card replacements. That’s a pretty sweet deal compared to the other leading banks that all charge for some of that or offer much lower interest rates. The trade-off is that while customers get 24/7 live text chat support, they won’t be able to walk into a local bank branch. Users who want early access can &lt;a href=&quot;https://checking.robinhood.com/&quot;&gt;sign up here&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-1758478&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/12/RH_Checking_Savings_Phone-Grid.png?w=680&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;453&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Robinhood expects to turn a profit thanks to a lean 300-employee operation, earning a margin on investing your money in U.S. treasuries and a revenue share with Mastercard on interchange fees charged to merchants when you swipe. The launch could be critical to keeping Robinhood worthy of its $5.6 billion valuation from when it took a $363 million Series D in March just a year after raising at a $1.3 billion valuation. The 6 million-user app invested in&lt;/span&gt;&lt;span&gt; launching a free cryptocurrency trading exchange early this year only to see coin prices plummet and mainstream interest fall off. But with banks hammering users with surprise fees and mediocre user experience, there’s a huge opportunity for a mobile-first startup to disrupt how we store money.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;“Brick-and-mortar locations are costly. Our goal with this product was to build a completely digital experience so we can reduce our overhead so we can pass more of the value back to customers,” Robinhood co-CEO Baiju Bhatt tells me. [Disclosure: I know Bhatt and co-CEO Vlad Tenev from college.] “Saving accounts in the U.S. pay on average 0.09 percent and we all know the banks are making far more than that from the deposits. With Robinhood you earn 3 percent off all of your money. Mental math is hard, so if you look at the median U.S. household that has about $8,000 in liquid savings, they’d earn&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;$240 a year.”&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-1758506&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/12/Robinhood-Checking-Savings-Fee-Comparison-Chart.png?w=680&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;327&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Robinhood will be sending invites to users in January for the new feature that they can use exclusively or alongside their existing bank. Anyone approved to use Robinhood’s stock brokerage is eligible, but users can also sign up directly for checking and savings with no obligation to trade stocks. Robinhood claims signing up won’t impact your credit score. Users get to customize a Robinhood-branded debit card that’s accepted wherever Mastercard is. Because the feature is run within Robinhood’s brokerage, it’s ensured by the SIPC instead of the FDIC.&lt;/p&gt;
&lt;p&gt;[Update 12/14/2018: It’s increasingly unclear whether the SIPC’s insurance would cover Robinhood’s checking and savings feature to protect users in the event that Robinhood loses their money investing it in treasury securities if there was a market downturn. It’s also unclear if Robinhood or its partner Sutton Bank had explicit approval from the SIPC to use its insurance for checking/savings instead of as a brokerage. Robinhood initially told TechCrunch users would be fully protected by the SIPC. We’re awaiting a response to a followup inquiry to Robinhood and the SIPC. We’ll update here with more information when we have it.]&lt;/p&gt;
&lt;p&gt;One of the most appealing features of Robinhood checking and savings is getting access to 75,000 free-to-use ATMs in places like Target, Walgreens and 7-Eleven. Users won’t be able to tell just by looking at an ATM whether it’s in the network, but the Robinhood app features a map for finding the nearest one. You can deposit checks via Robinhood’s app too, and if you need to send a check, you can just tell the startup how much to deliver to whom and it will mail the check for you.&lt;/p&gt;
&lt;p class=&quot;p1&quot;&gt;“These fees like overdraft fees — they’re not fees millionaires are paying. It’s ordinary folks paying. It’s actually more expensive for those that have less money and it’s cheaper for those that have more money. We think that isn’t right and we think that’s bad business,” Bhatt gripes. Because Robinhood built its own clearing house for moving money, and it lacks the overhead of traditional banks, it’s able to save enough money to make its no-fee structure work. “We want to build a financial services company that democratizes America’s financial system.”&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter size-large wp-image-1758489&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2018/12/Robinhood-debit-card.png?w=680&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;453&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Robinhood will have to convince users it’s worthy of their trust, as a security breach could be disastrous. There’s also the question of whether people are ready to ditch their bank branch. “Behaviors about and going into a branch are definitely changing,” says Bhatt. My biggest concern was not having any consistency in who I talk to when I need banking help. Bhatt tells me the company plans to roll out more personalized customer service features in the coming months, but there may always be edge cases that make the lack of in-person support annoying.&lt;/p&gt;
&lt;p&gt;Getting into banking could open a lucrative revenue stream for Robinhood as it charts its path to IPO. The startup &lt;a href=&quot;https://techcrunch.com/2018/11/27/robinhood-hires-20-year-amazon-veteran-to-cfo-role-as-high-flying-startup-eyes-ipo/&quot;&gt;recently hired Jason Warnick&lt;/a&gt;, a 20-year veteran of Amazon, to be its CFO and get it prepped to go public. Wall Street will want to see a more robust business that’s not as vulnerable to foes like stock brokerage Charles Schwab, which is already lowering fees to stay competitive with Robinhood. Not only will checking and savings see users move more money into their Robinhood accounts that it can invest to earn a profit, but it also poises the startup to tackle more financial services in the future. More lucrative products like loans could make paying 3 percent much easier for Robinhood to handle.&lt;/p&gt;

</description>
<pubDate>Thu, 13 Dec 2018 15:31:09 +0000</pubDate>
<dc:creator>ccwilson10</dc:creator>
<og:title>Robinhood launches no-fee checking/savings with Mastercard &amp; the most ATMs</og:title>
<og:description>Robinhood is undercutting the big banks by forgoing brick-and-mortar branches with its new zero-fee checking and savings account features. With no overdraft or monthly fees, a juicy 3 percent interest rate and a claim of more U.S. ATMs than the five biggest banks combined, Robinhood is using the sc…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2018/12/Robinhood-Checking-and-savings.png?w=740</og:image>
<og:url>http://social.techcrunch.com/2018/12/13/robinhood-free-checking-and-savings-accounts/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2018/12/13/robinhood-free-checking-and-savings-accounts/</dc:identifier>
</item>
</channel>
</rss>