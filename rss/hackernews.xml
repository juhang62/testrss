<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>3D cartoon-like explosion in 180 lines of bare C++</title>
<link>https://github.com/ssloy/tinykaboom/wiki</link>
<guid isPermaLink="true" >https://github.com/ssloy/tinykaboom/wiki</guid>
<description>&lt;div class=&quot;markdown-body&quot;&gt;

&lt;p&gt;&lt;strong&gt;This is a software ray marching rendering. It is closely related to my &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;software raytracer&lt;/a&gt;. If you are looking for a software rasterizer, check the &lt;a href=&quot;https://github.com/ssloy/tinyrenderer/wiki&quot;&gt;other part of the lectures&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This article shows a trivial implementation of a ray marching, the goal is to go a little bit beyond simple spheres I rendered in my &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;raytracer project&lt;/a&gt;. I do not aim at getting photorealistic images, I want to have a &lt;em&gt;simple&lt;/em&gt; stuff applicable to video games.&lt;/p&gt;
&lt;p&gt;As always, we only have a bare compiler at our disposal, no third-party libraries are allowed. I don't want to bother with window managers, mouse/keyboard processing and so on. The result of our program will be a simple picture saved on the disk. I do not pursue speed/optimization at all, my goal is to show the underlying principles.&lt;/p&gt;
&lt;p&gt;So, how to draw such a picture in 180 lines of code under such restrictions?&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/master/out.jpg&quot;/&gt;&lt;p&gt;Here is how an animation would look like:&lt;/p&gt;
&lt;img src=&quot;https://github.com/ssloy/tinykaboom/raw/master/kaboom.gif&quot;/&gt;&lt;p&gt;Let us split the task into simple steps. As in the raytracing article, to ease the reading flow I adopt the rule &lt;strong&gt;1 step = 1 commit&lt;/strong&gt;. This way the built-in github diff visualization tool comes extremely handy.&lt;/p&gt;

Well, for the step 0 there is no commit. Yup, that's right. The first thing you need to do is to read &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;the previous chapter&lt;/a&gt;, which describes the basics of ray tracing. It is very short, in fact, you can skip the reflections and refractions, but I recommend to read at least up to the diffuse lighting stage. The code is quite simple, people even launch it on microcontrollers:
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/1893754/51790311-aabe0600-2193-11e9-8a06-4f7101b1af59.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

Let's draw one sphere without being obsessed with materials or lighting. For simplicity this sphere will live in the center of coordinates. I want to get such a picture: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/c45987e9c4ad8594282e2af40775910b2b1c51ec/out.jpg&quot;/&gt;&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/ssloy/tinykaboom/tree/c45987e9c4ad8594282e2af40775910b2b1c51ec&quot;&gt;here&lt;/a&gt;, but it is short, so let's list it:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
#&lt;span class=&quot;pl-k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;_USE_MATH_DEFINES&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;cmath&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;algorithm&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;limits&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;iostream&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;fstream&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;vector&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;geometry.h&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; sphere_radius   = &lt;span class=&quot;pl-c1&quot;&gt;1.5&lt;/span&gt;;

&lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;signed_distance&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;p) {
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;pl-c1&quot;&gt;norm&lt;/span&gt;() - sphere_radius;
}

&lt;span class=&quot;pl-k&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;sphere_trace&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;orig, &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;dir, Vec3f &amp;amp;pos) {
    pos = orig;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; i=&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;128&lt;/span&gt;; i++) {
        &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; d = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos);
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (d &amp;lt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;;
        pos = pos + dir*&lt;span class=&quot;pl-c1&quot;&gt;std::max&lt;/span&gt;(d*&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;1f&lt;/span&gt;, .&lt;span class=&quot;pl-c1&quot;&gt;01f&lt;/span&gt;);
    }
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;false&lt;/span&gt;;
}

&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;() {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;   width    = &lt;span class=&quot;pl-c1&quot;&gt;640&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;   height   = &lt;span class=&quot;pl-c1&quot;&gt;480&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; fov      = M_PI/&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;.;
    std::vector&amp;lt;Vec3f&amp;gt; &lt;span class=&quot;pl-c1&quot;&gt;framebuffer&lt;/span&gt;(width*height);

#&lt;span class=&quot;pl-k&quot;&gt;pragma&lt;/span&gt; omp parallel for
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; j = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; j&amp;lt;height; j++) { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; actual rendering loop&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i&amp;lt;width; i++) {
            &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; dir_x =  (i + &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;) -  width/&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.;
            &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; dir_y = -(j + &lt;span class=&quot;pl-c1&quot;&gt;0.5&lt;/span&gt;) + height/&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.;    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; this flips the image at the same time&lt;/span&gt;
            &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; dir_z = -height/(&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.*&lt;span class=&quot;pl-c1&quot;&gt;tan&lt;/span&gt;(fov/&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.));
            Vec3f hit;
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;sphere_trace&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;), &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(dir_x, dir_y, dir_z).&lt;span class=&quot;pl-c1&quot;&gt;normalize&lt;/span&gt;(), hit)) { &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; the camera is placed to (0,0,3) and it looks along the -z axis&lt;/span&gt;
                framebuffer[i+j*width] = &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;);
            } &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; {
                framebuffer[i+j*width] = &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.8&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; background color&lt;/span&gt;
            }
        }
    }

    std::ofstream &lt;span class=&quot;pl-smi&quot;&gt;ofs&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;./out.ppm&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, std::ios::binary); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; save the framebuffer to file&lt;/span&gt;
    ofs &amp;lt;&amp;lt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;P6&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; width &amp;lt;&amp;lt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &amp;lt;&amp;lt; height &amp;lt;&amp;lt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;255&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; i &amp;lt; height*width; ++i) {
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;size_t&lt;/span&gt; j = &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;; j++) {
            ofs &amp;lt;&amp;lt; (&lt;span class=&quot;pl-k&quot;&gt;char&lt;/span&gt;)(&lt;span class=&quot;pl-c1&quot;&gt;std::max&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;std::min&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-c1&quot;&gt;255&lt;/span&gt;*framebuffer[i][j]))));
        }
    }
    ofs.&lt;span class=&quot;pl-c1&quot;&gt;close&lt;/span&gt;();

    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class of vectors lives in the file geometry.h, I will not describe it here: it is really a trivial manipulation of two and three-dimensional vectors (addition, subtraction, assignment, multiplication by a scalar, scalar product).&lt;/p&gt;
&lt;p&gt;So, in main() function I have two loops: the second one simply saves the picture on a disk, and the first loop iterates through all the pixels of the picture, emits a ray from the camera through this pixel, and checks whether this ray intersects with our sphere.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attention, the main idea of the approach:&lt;/strong&gt; If in the raytracing article we solved for the intersection of the ray and a sphere analytically, now I compute it numerically. The idea is simple: the sphere has an equation of the form x^2 + y^2 + z^2 - r^2 = 0 ; but the function f(x,y,z) = x^2 + y^2 + y^2 + z^2 - r^2 is defined anywhere in the 3D space. Inside the sphere, the function f(x,y,z) takes negative values, and outside the sphere it is positive. That is, the function f(x,y,z) computes the signed distance to our sphere for each point (x,y,z). Therefore, we will simply slide along the ray until either we get bored or the function f(x,y,z) becomes negative. This is exactly what sphere_trace() does.&lt;/p&gt;

Let us implement the simplest diffuse lighting, this is the image I want to get: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/ef22c62142f293cc84a15cc4a6a64882ac1b2f6e/out.jpg&quot;/&gt;&lt;p&gt;The changes are visible &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/ef22c62142f293cc84a15cc4a6a64882ac1b2f6e&quot;&gt;in the diff tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the diffuse lighting, in addition to the point of intersection, whe need to know the vector of normal to the surface at this point. I compute this normal vector by simple &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite_difference&quot; rel=&quot;nofollow&quot;&gt;finite differences&lt;/a&gt; on our signed distance function:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
Vec3f &lt;span class=&quot;pl-en&quot;&gt;distance_field_normal&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;pos) {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; eps = &lt;span class=&quot;pl-c1&quot;&gt;0.1&lt;/span&gt;;
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; d = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos);
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; nx = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos + &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(eps, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)) - d;
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; ny = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos + &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, eps, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)) - d;
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; nz = &lt;span class=&quot;pl-c1&quot;&gt;signed_distance&lt;/span&gt;(pos + &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, eps)) - d;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(nx, ny, nz).&lt;span class=&quot;pl-c1&quot;&gt;normalize&lt;/span&gt;();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, since we draw a simple sphere, the normal can be obtained much easier, but this approach will serve me later.&lt;/p&gt;

Let's draw a pattern on our sphere, for example, this one: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/45ea36a1568ca8e1b2f44a1ea55a792709983ef9/out.jpg&quot;/&gt;&lt;p&gt;For this rendering I only modified &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/45ea36a1568ca8e1b2f44a1ea55a792709983ef9&quot;&gt;two lines in the code!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How did I draw the image? Of course, I don't have any textures. I just took the function g(x,y,z) = sin(x) * sin(y) * sin(z); it is defined for each point of the 3D space. When my ray crosses the sphere at some point (x,y,z), the value of the function g(x,y,z) sets the pixel color of the sphere.&lt;/p&gt;
&lt;p&gt;By the way, note the concentric circles on the sphere - these are the artifacts of my numerical calculation of the intersection.&lt;/p&gt;

Why would I want to draw this pattern? In fact, it will help me draw a hedgehog like this: &lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/2c9e70fcee4f09fb563e5272f349763654b1eaad/out.jpg&quot;/&gt;&lt;p&gt;Where my pattern was black, I want to make a dent on our sphere, and where it was white, on the contrary, I'll do a hump. This trick is known under the name of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Displacement_mapping&quot; rel=&quot;nofollow&quot;&gt;displacement mapping&lt;/a&gt;. To implement it, it suffices to &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/2c9e70fcee4f09fb563e5272f349763654b1eaad&quot;&gt;modify three lines&lt;/a&gt; in the source code:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;signed_distance&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;p) {
    Vec3f s = &lt;span class=&quot;pl-c1&quot;&gt;Vec3f&lt;/span&gt;(p).&lt;span class=&quot;pl-c1&quot;&gt;normalize&lt;/span&gt;(sphere_radius);
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; displacement = &lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*s.&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*s.&lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*s.&lt;span class=&quot;pl-smi&quot;&gt;z&lt;/span&gt;)*noise_amplitude;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;pl-c1&quot;&gt;norm&lt;/span&gt;() - (sphere_radius + displacement);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In fact, I re-defined the distance to the surface, I compute it as x^2+y^2+z^2 - r^2 - sin(x)*sin(y)*sin(z). We have just drew an &lt;a href=&quot;https://en.wikipedia.org/wiki/Implicit_surface&quot; rel=&quot;nofollow&quot;&gt;implicit surface&lt;/a&gt;.&lt;/p&gt;

Why do I evaluate the product of sines only for the points lying on the sphere? Let us re-define the distance function:
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;signed_distance&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &amp;amp;p) {
    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; displacement = &lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*p.&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*p.&lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;)*&lt;span class=&quot;pl-c1&quot;&gt;sin&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;*p.&lt;span class=&quot;pl-smi&quot;&gt;z&lt;/span&gt;)*noise_amplitude;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; p.&lt;span class=&quot;pl-c1&quot;&gt;norm&lt;/span&gt;() - (sphere_radius + displacement);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The difference is very small, it is better visible &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/ec1ed71b23bf398af1aade84e1a7a45afcbe57b5&quot;&gt;in the github diff&lt;/a&gt; tool. Here is the render:&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/ec1ed71b23bf398af1aade84e1a7a45afcbe57b5/out.jpg&quot;/&gt;&lt;p&gt;In such a way we can draw disconnected components!&lt;/p&gt;

The previous picture is already starting to resemble an explosion, but the product of sines gives a very regular pattern. I'd like to have some more &quot;torn&quot;, more &quot;random&quot; function... We will be helped by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Perlin_noise&quot; rel=&quot;nofollow&quot;&gt;Perlin's noise&lt;/a&gt;. Something like this would be much better for our purposes: &lt;img src=&quot;https://camo.githubusercontent.com/9597e2847e8c399cfef43f95b37d77fdbc9ef9e6/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f656e2f652f65352f5065726c696e2e706e67&quot; data-canonical-src=&quot;https://upload.wikimedia.org/wikipedia/en/e/e5/Perlin.png&quot;/&gt;&lt;p&gt;How to generate such noise - is out of the scope of this article, but here's the main idea: you need to generate random images with different resolutions, smooth them out to get something like this set:&lt;/p&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/d99b2db17dc8dba3083c09dfa1cc1c9bcc64c622/68747470733a2f2f63646e2d696d616765732d312e6d656469756d2e636f6d2f6d61782f3830302f312a494b5759634a6d73784b674c674a49745041766758512e706e67&quot; data-canonical-src=&quot;https://cdn-images-1.medium.com/max/800/1*IKWYcJmsxKgLgJItPAvgXQ.png&quot;/&gt;&lt;p&gt;And then simply sum all of them:&lt;/p&gt;
&lt;img src=&quot;https://camo.githubusercontent.com/11169e6b64d524121b48f1190e58fa09bd6d3a5f/68747470733a2f2f6c6962726172792e6372656174697665636f772e6e65742f61727469636c65732f7a7761725f63687269732f6672616374616c5f6e6f6973652f33645f64656d6f2e6a7067&quot; data-canonical-src=&quot;https://library.creativecow.net/articles/zwar_chris/fractal_noise/3d_demo.jpg&quot;/&gt;&lt;p&gt;You can find more details &lt;a href=&quot;https://medium.com/100-days-of-algorithms/day-88-perlin-noise-96d23158a44c&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://library.creativecow.net/articles/zwar_chris/fractal_noise.php&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let us add &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/6ac4658d75cadaf095af7994572d79ceb395af9a&quot;&gt;a little bit of code&lt;/a&gt;, allowing us to generate the noise, and our render transforms magically:&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/6ac4658d75cadaf095af7994572d79ceb395af9a/out.jpg&quot;/&gt;&lt;p&gt;Please notice that we did not modify the actual rendering code! We have only redefined the distance to the surface, i.e. the function that &quot;crumples&quot; the sphere and &quot;tears&quot; it apart.&lt;/p&gt;

The only thing I have added in this commit, is the fire colors. Instead of uniform white color I apply colors as a function of the noise amount, &lt;a href=&quot;https://github.com/ssloy/tinykaboom/commit/585c779712baa7bdae89e6eeccdb90da12bcbf06&quot;&gt;check the modifications&lt;/a&gt;:
&lt;div class=&quot;highlight highlight-source-c++&quot;&gt;
&lt;pre&gt;
Vec3f &lt;span class=&quot;pl-en&quot;&gt;palette_fire&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; d) {
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f   &lt;span class=&quot;pl-smi&quot;&gt;yellow&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1.7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1.3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;); &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; note that the color is &quot;hot&quot;, i.e. has components &amp;gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f   &lt;span class=&quot;pl-smi&quot;&gt;orange&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.0&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f      &lt;span class=&quot;pl-smi&quot;&gt;red&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.0&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f &lt;span class=&quot;pl-smi&quot;&gt;darkgray&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.2&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; Vec3f     &lt;span class=&quot;pl-smi&quot;&gt;gray&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0.4&lt;/span&gt;);

    &lt;span class=&quot;pl-k&quot;&gt;float&lt;/span&gt; x = &lt;span class=&quot;pl-c1&quot;&gt;std::max&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;std::min&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;, d));
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (x&amp;lt;.&lt;span class=&quot;pl-c1&quot;&gt;25f&lt;/span&gt;)
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(gray, darkgray, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (x&amp;lt;.&lt;span class=&quot;pl-c1&quot;&gt;5f&lt;/span&gt;)
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(darkgray, red, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (x&amp;lt;.&lt;span class=&quot;pl-c1&quot;&gt;75f&lt;/span&gt;)
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(red, orange, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;-&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;lerp&lt;/span&gt;(orange, yellow, x*&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;-&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;f&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The colors are defined as a simple linear ramp between five key colors. Here is the final render!&lt;/p&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/ssloy/tinykaboom/master/out.jpg&quot;/&gt;
This raytracing technique is known as the ray marching. The home assignement: take the previous &lt;a href=&quot;https://github.com/ssloy/tinyraytracer/wiki&quot;&gt;raytracer&lt;/a&gt; with blackjack and refractions, and merge it with the KABOOM! Make the KABOOM! illuminate the scene. Add transparency. KABOOM!&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 18:07:59 +0000</pubDate>
<dc:creator>haqreu</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/1029298?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>ssloy/tinykaboom</og:title>
<og:url>https://github.com/ssloy/tinykaboom</og:url>
<og:description>A brief computer graphics / rendering course. Contribute to ssloy/tinykaboom development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/ssloy/tinykaboom/wiki</dc:identifier>
</item>
<item>
<title>What it’s like to pursue a dream for 30 years and fail</title>
<link>https://thehustle.co/bionic-boot/</link>
<guid isPermaLink="true" >https://thehustle.co/bionic-boot/</guid>
<description>&lt;p&gt;&lt;span&gt;For 30 years, Keahi Seymour pursued a dream.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;That dream wasn’t to play in the NFL. It wasn’t to front a rock band. It wasn’t to grace the silver screen. It wasn’t to cure cancer. It wasn’t to walk on the moon, discover Atlantis, or lead a nation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Keahi Seymour wanted to invent a boot that enabled him to run like an ostrich. And he wanted to share it with the world.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But this story isn’t about boots: It’s about the relentless pursuit of a vision in the face of repeated setbacks. What drives someone to stick with an idea for 30 years? To give up everything for a device that seems, to most people, inconsequential? To sacrifice hundreds of thousands of dollars in life savings, time, and opportunity cost?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;And can something really be called a failure if the journey was self-fulfilling?&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;An idea strikes&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Like other young lads, Seymour spent his youth in England drawing sketches of cars, hoverboards, and model planes — anything that “moved fast and looked futuristic.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But on a fateful day in 1987, the 12-year-old saw a TV show about kangaroos that would change the course of his life.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“They were talking about how these hyper-fast animals store elastic energy in their Achilles tendons,” he recalls. “And I immediately thought, ‘Why can’t a human use that same spring-like energy to run faster?”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He grabbed a piece of paper and drew out his grand vision: A 1980s running shoe with a pivot, and a lever attached to a big spring with rubber bands.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He called it the ‘Bionic Boot.’&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12131&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;37&quot;&gt;&lt;img class=&quot;size-full wp-image-12131&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/sketchesz.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Seymour’s first sketches of the Bionic Boot, age 12. “My mom always told me to sign, date, and save all my sketches,” he says. (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Seymour was soon consumed by the idea. His “mates” recall him spending hours sketching out different iterations of the device throughout grade school. His mother fed his obsession by taking him to a Leonardo da Vinci exhibit that expounded on&lt;/span&gt; &lt;a href=&quot;https://www.nasa.gov/larc/da-vinci-s-key-to-creativity-came-straight-from-nature&quot;&gt;&lt;span&gt;drawing inspiration&lt;/span&gt;&lt;/a&gt; &lt;span&gt;from the natural world.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I started really deeply researching biology and nature,” says Seymour. “I found out that the ostrich was the&lt;/span&gt; &lt;a href=&quot;https://www.tswalu.com/media/blog-article/the-fastest-creature-on-two-legs&quot;&gt;&lt;span&gt;fastest&lt;/span&gt;&lt;/a&gt; &lt;span&gt;bipedal animal [it runs at 43 MPH] and started looking into its physiology, how it moved.”&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The first build&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;At 17, Seymour was tasked with designing a technology product for a school project.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Until this point, the Bionic Boot had been more of an ethereal pipedream than a tangible device. But the project, which required students to design a physical invention from start to finish, gave Seymour his first chance to make a full-fledged prototype.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The aim of his design was to give humans (who are&lt;/span&gt; &lt;em&gt;&lt;span&gt;plantigrade&lt;/span&gt;&lt;/em&gt;&lt;span&gt;, or flat-footed) the mechanical advantage of fast&lt;/span&gt; &lt;em&gt;&lt;span&gt;digitigrade&lt;/span&gt;&lt;/em&gt; &lt;span&gt;animals (which walk and run on their toes). He’d achieve this by raising himself a foot off the ground on a set of levers attached to 6-10 big rubber springs.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When activated with a step, the lever would flex back behind the heel; elastic energy stored in the rubber “tendons” would recoil, catapulting him up to 4 feet off the ground, and elongating his stride to 7 feet in length.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The first iteration wasn’t pretty. Seymour utilized a hodge-podge of equipment he found lying around: An old rollerblade boot, metal struts, and a rusty lever — all disconcertingly lashed together with a tangle of bungee cords.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Before a small crowd of curious students, he strapped them on and bounded across the school parking lot. They fell apart after a few strides.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Everyone was laughing,” says Seymour. “But in those few strides, I could feel the power and speed. I knew I had something special.”&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12132&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;33&quot;&gt;&lt;img class=&quot;size-full wp-image-12132&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/firstproto.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The very first prototype of the Bionic Boot, circa 1997 (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Seymour enrolled at Coventry University to study transportation design and soon shifted his focus to designing cars. But it wasn’t long before the Bionic Boot beckoned again.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For his final year “thesis,” he was asked to design a product that catered to “youth crazes” — something new, novel, and transportation-based.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though Seymour’s aim with the Bionic Boot was to mimic the “experience of running fast like an animal,” he realized it could be branded as a form of environmentally-sound, all-terrain transportation. Once again, the boots became his project.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The stakes were high. His instructors would select the best projects and submit them to a national design competition put on by the Royal Society of Arts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Unfortunately, I got a failing grade,” says Seymour. “So I decided to submit it myself.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Seymour drove to the London competition and walked into a room full of England’s design czars: Product designers from Land Rover, Aston Martin, and Lotus sat stoically at a 30-foot-long table. Snobbery filled the air.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I clapped my hands, and my buddy, Chris, walked out in the boots,” recalls Seymour. “All of a sudden, it was as if the designers turned to schoolchildren: They all stood up, taking pictures, marveling, murmuring.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Miraculously, the Bionic Boot won the competition, secured a small grant of £1,125 (~$1,500 US), and picked up a little press.&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12133&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;36&quot;&gt;&lt;img class=&quot;size-full wp-image-12133&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/papersBW.jpg&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The Bionic Boot received a burst of press in England in the late ‘90s after they won a prestigious design competition put on the Royal Society of Arts (The Sunday Times, The Birmingham Post, Daily Mail)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;College came to an end and Seymour’s friends all settled into 9 to 5 jobs with high-end car manufacturers. For a short time, he joined them, taking a role in Jaguar’s styling department. A promising future lay before him.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But he couldn’t shake the exhilaration he’d felt bounding across the school parking lot. The Bionic Boot consumed his mind like a virus.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;So, in 1999, Seymour packed a suitcase full of shoe molds, springs, and speargun rubber, and ventured to the foggy shores of San Francisco.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Going to California&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;At the time, California was a mecca for young entrepreneurs in the outdoors sector. After all, it was the birthplace of the first fiberglass surfboard, the first urethane skateboard wheel, the boogie board, and the mountain bike.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;San Francisco seemed to be a fertile testing ground for Seymour’s futuristic boot, and a prime location for his target customers: “Well-to-do adventure-seekers in their mid-30s who had tried every type of extreme sport and wanted something new.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I’d take them out for a run around the city and people would&lt;/span&gt; &lt;em&gt;&lt;span&gt;lose&lt;/span&gt;&lt;/em&gt; &lt;span&gt;their minds,” he says. “Everywhere I went, people would say, ‘&lt;/span&gt;&lt;em&gt;&lt;span&gt;What the hell is that!&lt;/span&gt;&lt;/em&gt;&lt;span&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The garage of a Potrero Hill apartment became his mad scientist’s lab; his bathroom became a makeshift carbon fiber oven. Everything was painstakingly made by hand with a drill, an angle grinder, and a hacksaw.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“It looked like&lt;/span&gt; &lt;a href=&quot;https://fanbasepress.com/index.php/about/newsfeed/item/5258-back-to-back-to-the-future-doc-brown-s-garage-june-21-2015&quot;&gt;&lt;span&gt;Doc Brown’s house&lt;/span&gt;&lt;/a&gt; &lt;span&gt;from&lt;/span&gt; &lt;em&gt;&lt;span&gt;Back to the Future&lt;/span&gt;&lt;/em&gt;&lt;span&gt;,” he says.&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12138&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;33&quot;&gt;&lt;img class=&quot;size-full wp-image-12138&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/worksop.jpg&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Top: Seymour in the Bionic Boot warehouse… his garage; Bottom: Mock-ups of the Bionic Boot (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;He sourced parts from Metal Supermarkets, a specialty store in Hayward, California that sells things like aircraft-grade&lt;/span&gt; &lt;a href=&quot;https://www.makeitfrom.com/material-properties/6061-T1-Aluminum&quot;&gt;&lt;span&gt;6061 aluminum&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. He hired a lawyer and secured patents in 15 countries around the world. He spent countless nights blasting emails to companies and investors in an effort to raise funds.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Meanwhile, Seymour worked 6 nights a week at bars and nightclubs — Matrix, Infusion Lounge, The Tipsy Pig. Few people knew about his side-hustle.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Nobody in my life, even my girlfriend at the time, could understand my obsession,” he says. “I was completely consumed. And I knew my clock was ticking. I needed money… I need investors and partnerships.”&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;A break and a letdown&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;A year passed. 5 years. A decade. Despite his efforts, Seymour wasn’t able to convince investors that the Bionic Boot was worth taking a risk on.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;By 2014, Seymour had constructed more than 200 prototypes of his Bionic Boot. He managed to increase max speed from 15 to 25 MPH, reduce weight from 10 to 6 pounds, and achieve minor celebrity on the streets of San Francisco.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Periodically, his roommate’s grandma would come by to hassle him:&lt;/span&gt; &lt;em&gt;&lt;span&gt;“You still workin’ on those boots, Keahi?! When are they gonna start making some money?”&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;By this point, he’d invested his entire life savings — more than $200k — and tens of thousands of hours in the boots. His life, his essence, was this invention. But the payoff he’d envisioned didn’t come and he had to make a decision:&lt;/span&gt; &lt;em&gt;&lt;span&gt;“Do I keep funding the boots, or do I let them die?&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12135&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;33&quot;&gt;&lt;img class=&quot;size-full wp-image-12135&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/protos.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;The evolution of the Bionic Boot: Prototypes, 2005-2014 (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;He decided to take his creation to the New York Maker Faire. Fortuitously, an impromptu&lt;/span&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=vaPk7FFP7sg&quot;&gt;&lt;em&gt;&lt;span&gt;Make Magazine&lt;/span&gt;&lt;/em&gt;&lt;/a&gt; &lt;span&gt;interview with him was posted on YouTube and went “viral.” Overnight, his inbox was flooded with media requests.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Seymour was branded as “The World’s Fastest Man,” the “Bionic Man,” a slew of other hyperbolic monikers. He was flown around the world to appear on TV shows — Spain, France, England, Denmark. He was asked to race a train in Japan, an ostrich in Los Angeles, and an Olympic hurdler in China. He ran across Manhattan in 12 minutes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though the boots became a part of his personal aura and gained him international recognition, they still weren’t seen as a viable product — even with 8k emails from interested buyers.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Many parties were interested in learning more, including SRI International, DARPA, Intel, and even the US Special Operations Command (SOCOM). But this interest never translated to a partnership, grant, or investment.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Companies just didn’t want to take a risk on something that wasn’t proven, or that didn’t have an existing market,” he says. “Nobody wanted to be the first to take a big risk.”&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12136&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;size-full wp-image-12136&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/ostrich-racez.png&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Seymour races an ostrich outside of Los Angeles (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;At the time, the media attention inspired a slew of knock-offs: A Korean company replicated the boots and developed partnerships with 10-15 online retailers. More egregiously, a Chinese firm nicked Seymour’s design, mass-produced the product, and sold it under the “Bionic Boot” name on Amazon.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though he’d spent a small fortune securing international patents, Seymour didn’t have the means to fight infringements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Bionic Boot, it seemed, had reached a hitch in the road.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The crossroads&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Today, Seymour’s apartment is still littered with the remnants of Bionic Boot prototypes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Some people work on old hot rods or bikes,” he says. “I work on my boots. That’s my passion.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;But after nearly 30 years of dedication, he’s toying with the idea of letting his invention go. He tells me I’ve reached out to him at an interesting time in his life — a moral and emotional crossroads.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I’m starting to think the boots are dead in the water,” he says. “I can’t sell them. It’s my life-long passion, but I don’t know what to do at this point.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Seymour faces another big setback: His patents are expiring in a few months, stripping him of the little leverage he has left to strike a manufacturing deal.&lt;/span&gt;&lt;/p&gt;
&lt;div id=&quot;attachment_12137&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;32&quot;&gt;&lt;img class=&quot;size-full wp-image-12137&quot; src=&quot;https://thehustle.co/wp-content/uploads/2019/01/final-1.jpg&quot; alt=&quot;&quot; width=&quot;2400&quot; height=&quot;100%&quot;/&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Seymour sprints along a Bay Area trail (Keahi Seymour)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span&gt;He’s been toying with new ideas that might be more “monetarily viable:” A carbon fiber articulated snowboard is currently “cooking” in his bathroom.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Though the Bionic Boot — the invention he’s been obsessed with since he was 12 years old — is at an impasse, he’ll never fully abandon it. The boots have been there with him through the trial and error, the tribulations, the long years of letdowns and bilked meetings. They are one and same, welded together like a steel lever.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This weekend, somewhere in the hills of Pacifica, Seymour will bound down a rocky path with the jaunty agility of an ostrich.&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;If you’re interested in learning more about Keahi Seymour, his boots, and/or his latest inventions, check out &lt;a href=&quot;http://www.bionicboot.com/&quot;&gt;his personal website&lt;/a&gt;. &lt;/em&gt;&lt;/div&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;
&lt;h3&gt;Share and discuss&lt;/h3&gt;
&lt;/p&gt;

&lt;br clear=&quot;all&quot;/&gt;
&lt;div readability=&quot;6.44&quot;&gt;
&lt;hr/&gt;&lt;div readability=&quot;8.28&quot;&gt;&lt;a href=&quot;https://thehustle.co/&quot; onclick=&quot;ga('send', 'event', 'nav', 'advertorial', 'ps');&quot;&gt;Sign up here&lt;/a&gt; for our daily news email to get all the non-political news you never knew you needed. All it takes is 5 minutes and BOOM, you're smarter.&lt;/div&gt;
&lt;br clear=&quot;all&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 16:14:55 +0000</pubDate>
<dc:creator>davesailer</dc:creator>
<og:type>article</og:type>
<og:title>What it’s like to pursue a dream for 30 years — and fail</og:title>
<og:description>For every successful, hot-selling invention, there are a million others that don’t make it. But what does ‘failure’ really mean?</og:description>
<og:url>https://thehustle.co/bionic-boot/</og:url>
<og:image>https://thehustle.co/wp-content/uploads/2019/01/share-3.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://thehustle.co/bionic-boot/</dc:identifier>
</item>
<item>
<title>How Hacker News Stays Interesting</title>
<link>https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</link>
<guid isPermaLink="true" >https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</guid>
<description>&lt;p&gt;Last week I wrote &lt;a href=&quot;https://jameshfisher.com/2019/01/20/my-parents-are-flat-earthers&quot;&gt;a post called “My parents are Flat-Earthers”&lt;/a&gt;, a history of conspiracy theories in my family. &lt;a href=&quot;https://news.ycombinator.com/item?id=18951569&quot;&gt;Someone submitted it to Hacker News&lt;/a&gt;, and it sat at the top for an hour or so. Then, suddenly, the post dropped to position #26! Here, I describe how that happened, why it happened, and why it’s a good thing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hnrankings.info/18951569/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/d802f9cdb653dc2e8e771bdfc7d6a89042930199/b253f/assets/2019-01-26-buried/ranking.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Truly my father’s son, my first reaction to this plunge was: “it’s a conspiracy!” After calming down, I learned that you can reach the moderators at &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;hn@ycombinator.com&lt;/a&gt;. I received a quick reply:&lt;/p&gt;
&lt;blockquote readability=&quot;20.360995850622&quot;&gt;
&lt;p&gt;A few things happened with that post: a moderator put a penalty on it, and then a software overheated-discussion detector kicked in, and users flagged it. Those are primarily about dampening the kinds of discussion that results from articles like this one, not about the article itself.&lt;/p&gt;
&lt;p&gt;Hacker News (but probably not just HN!) reacts to speculative, exploratory content on controversial topics with all their own pent-up speculation and anecdotes, and the problem is that it just gets nasty. Religious flamewars, harsh judgements of others (including one’s own grandparents!), blame, etc. This is not the discussion by which we gratify our &lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;intellectual curiosity&lt;/a&gt;, and so it gets cleared away for other threads that might.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My website doesn’t have a comments section. Reading the comments on that Hacker News post, you can appreciate why! It’s a circlejerk. Most comments were &lt;em&gt;science vs. religion&lt;/em&gt; debates, the kind that only science-types have. Others were “How do Flat-Earthers explain &lt;em&gt;X&lt;/em&gt;?”, knowing full well that no Flat-Earthers are around to answer. Many other comments were armchair psychoanalysis, without the patient present in the room. Several comments were pretty mean. “It’s really fucked up he wrote this about his parents,” or “I hope my kids have the decency not to trash me in a blog post when they’re older.” I tried hard in my post to describe my family respectfully. My parents’ ideas are wacky and get what they deserve, but I tried hard to avoid &lt;em&gt;ad hominem&lt;/em&gt;, and to show that I appreciate my relationship with them.&lt;/p&gt;
&lt;p&gt;But were these the comments that triggered the “overheated-discussion detector”? Perhaps not! The detector is said to actually fire &lt;a href=&quot;https://github.com/minimaxir/hacker-news-undocumented#flame-war-detector&quot;&gt;“when the number of comments on a submission exceeds its score”&lt;/a&gt;. With 211 comments vs. 173 points, my post was way above average. A simple algorithm which avoids any textual analysis, but isn’t this terribly ripe for abuse?&lt;/p&gt;
&lt;p&gt;I don’t think so. The overheated-discussion detector was outweighed by humans. The moderator’s reply showed he had spent time and thought, reading the post and comments before judging. Burying this post was closer to &lt;em&gt;curation&lt;/em&gt; than censorship. See the difference: unlike censorship, I received a polite explanation for it; and unlike censorship, burying is a &lt;em&gt;visible&lt;/em&gt; action, right there on the homepage! My new post was sandwiched between much older, un-buried posts, and you can frequently see such posts whenever you open the homepage:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/935ec6a1d60003cffe37732082fcd66916cd9fac/13500/assets/2019-01-26-buried/buried.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you want to blame Facebook and YouTube for allowing the spread of wild conspiracy theories, it’s hard to also blame calmer forums like Hacker News for moderation. Thanks to moderation, when I open &lt;a href=&quot;https://news.ycombinator.com&quot;&gt;news.ycombinator.com&lt;/a&gt; right now, I’m pleased to see interesting new posts about C, Chopin, and concurrency; and no new posts about fake news, anti-vaxxers, or Flat Earth.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/intent/follow?screen_name=MrJamesFisher&amp;amp;original_referer=https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html&quot;&gt;Get updates on Twitter&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;More by Jim&lt;/h3&gt;

&lt;p&gt;I wrote this because I felt like it. This post is not associated with my employer. &lt;a href=&quot;https://github.com/jameshfisher/jameshfisher.com/edit/master/_posts/2019-01-26-how-hacker-news-stays-interesting.md&quot;&gt;Found an error? Edit this page.&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 27 Jan 2019 09:06:39 +0000</pubDate>
<dc:creator>zwischenzug</dc:creator>
<og:title>How Hacker News stays interesting</og:title>
<og:type>website</og:type>
<og:image>https://jameshfisher.com/assets/jim_512.jpg</og:image>
<og:url>https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</og:url>
<og:description>Last week I wrote a post called “My parents are Flat-Earthers”, a history of conspiracy theories in my family. Someone submitted it to Hacker News, and it sat at the top for an hour or so. Then, suddenly, the post dropped to position #26! Here, I describe how that happened, why it happened, and why it’s a good thing.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jameshfisher.com/2019/01/26/how-hacker-news-stays-interesting.html</dc:identifier>
</item>
<item>
<title>Ten minutes a day</title>
<link>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</link>
<guid isPermaLink="true" >https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</guid>
<description>&lt;p name=&quot;cff6&quot; id=&quot;cff6&quot; class=&quot;graf graf--p graf--leading&quot;&gt;Ten minutes a day&lt;/p&gt;
&lt;p name=&quot;6142&quot; id=&quot;6142&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In early 2012, I published &lt;a href=&quot;https://www.amazon.com/dp/B00F9311YC/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; data-href=&quot;https://www.amazon.com/dp/B00F9311YC/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Jumping into C++&lt;/a&gt;. According to the calendar, I wrote the book between January 2010 and January 2012, but it took me less than 200 hours of work. I know this because for most of the time I worked on the book, I kept careful track of my time spent. Between 1/4/2010 and 9/29/2011 (when I stopped keeping track), I’d worked on the book for almost exactly 156 hours and written over 70,000 words.&lt;/p&gt;
&lt;p name=&quot;b485&quot; id=&quot;b485&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;How, exactly, did I manage to write a book in this short a time? I had one simple rule: I had to work on the book for just ten minutes, every day, no excuses. Ever.&lt;/p&gt;
&lt;p name=&quot;d9cd&quot; id=&quot;d9cd&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The original reason I tracked my time, in fact, was that I wanted to motivate myself by having a streak of days, and I figured that instead of just tallying check marks, I’d write down exactly how long I spent. It worked — I never missed a day.&lt;/p&gt;
&lt;p name=&quot;4b91&quot; id=&quot;4b91&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Now, I didn’t say I &lt;em class=&quot;markup--em markup--p-em&quot;&gt;wrote&lt;/em&gt; the book every day — just that I worked on it. Some (many) days, I would work on sample code, futz with formatting, brainstorm ideas, or make edits. All I needed to do was stare at the page for ten minutes and try to do something that felt like progress.&lt;/p&gt;
&lt;p name=&quot;00b8&quot; id=&quot;00b8&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Even when I was in the zone, I really didn’t spend very long on any given day — on 499 days, I spent 15 minutes or less. There were only 5 days where I worked for more than one hour, and the most time I ever spent was 72 minutes. It definitely helped that I was sometimes able to get into a zone, but it was never the flaming hot zone &lt;a href=&quot;https://www.npr.org/templates/story/story.php?storyId=11709924&quot; data-href=&quot;https://www.npr.org/templates/story/story.php?storyId=11709924&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;Jack Kerouac described in claiming to have written &lt;em class=&quot;markup--em markup--p-em&quot;&gt;On the Road&lt;/em&gt; in a 3 week blur&lt;/a&gt;.&lt;/p&gt;
&lt;p name=&quot;204a&quot; id=&quot;204a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Instead, I got into a different kind of zone — one where the work was omnipresent, but in the background. More sous vide than flame grilled. Writing every day kept ideas top of mind. When I finished writing, I’d carry the puzzles to my commute or the shower, and I’d talk to people about them. My ideas were always nearby, making it easy to jump back in. If I’d worked for 70 minutes, every Saturday, I’m sure I’d have made far less progress. I’d have forgotten where I was every time I was ready to start.&lt;/p&gt;
&lt;p name=&quot;1d8e&quot; id=&quot;1d8e&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;On some days, despite that, I’d get stuck. On those days, I gave myself permission to make small tweaks rather than forcing myself to write reams of new words. If I had writer’s block, I didn’t beat myself up about it — today might not be a good day, so let’s use it for something I have to do anyway. There’s always tomorrow to take another crack at writing.&lt;/p&gt;
&lt;p name=&quot;e588&quot; id=&quot;e588&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;On those days, I would often review and edit dozens of pages, which kick-started my thinking by reminding me of the big picture — and of the gaps — in a way that I couldn’t when my cursor was sitting and blinking in the middle of a sentence. I rarely found myself unable to write for more than a few days or a week at a time.&lt;/p&gt;
&lt;p name=&quot;355c&quot; id=&quot;355c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The other thing that really helped is that I didn’t allow myself to check my email until I worked on the book. It wasn’t until recently that I realized (after reading &lt;a href=&quot;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&quot; data-href=&quot;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noreferrer nofollow noopener nofollow noopener&quot; target=&quot;_blank&quot;&gt;http://dimitarsimeonov.com/2016/05/13/the-blinking-cursor-and-the-hot-towel&lt;/a&gt;) that I was really creating a habit loop — I gave myself the reward of checking my personal email in exchange for putting in the time on the book. It also tied the concept of working on the book to something very concrete; it was impossible to forget to do.&lt;/p&gt;
&lt;p name=&quot;f7e9&quot; id=&quot;f7e9&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;There were certainly times where I felt like the book was never going to come together — that it was an enormous hill that I was barely scratching. When that happened, going back over what was already there and making edits showed me just how far I’d come and inspired the next wave of work.&lt;/p&gt;
&lt;p name=&quot;1319&quot; id=&quot;1319&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;So, what are you doing for the next ten minutes?&lt;/p&gt;
</description>
<pubDate>Sun, 27 Jan 2019 03:57:02 +0000</pubDate>
<dc:creator>alexallain</dc:creator>
<og:title>Ten minutes a day – Alex Allain – Medium</og:title>
<og:url>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</og:url>
<og:description>In early 2012, I published Jumping into C++. According to the calendar, I wrote the book between January 2010 to January 2012, but it took…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@alexallain/ten-minutes-a-day-e2fa1084f924</dc:identifier>
</item>
<item>
<title>Verilog sources for Western Digital&amp;#039;s open source RISC-V core</title>
<link>https://github.com/westerndigitalcorporation/swerv_eh1</link>
<guid isPermaLink="true" >https://github.com/westerndigitalcorporation/swerv_eh1</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;This repository contains the SweRV core design RTL&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;By contributing to this project, you agree that your contribution is governed by &lt;a href=&quot;https://github.com/westerndigitalcorporation/swerv_eh1/blob/master/LICENSE&quot;&gt;Apache-2.0&lt;/a&gt;.&lt;br/&gt;Files under the &lt;a href=&quot;https://github.com/westerndigitalcorporation/swerv_eh1/blob/master/tools&quot;&gt;tools&lt;/a&gt; directory may be available under a different license. Please review individual file for details.&lt;/p&gt;
&lt;h2&gt;Directory Structure&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;├── configs                 # Configurations Dir
│   └── snapshots           # Where generated configuration files are created
├── design                  # Design root dir
│   ├── dbg                 #   Debugger
│   ├── dec                 #   Decode, Registers and Exceptions
│   ├── dmi                 #   DMI block
│   ├── exu                 #   EXU (ALU/MUL/DIV)
│   ├── ifu                 #   Fetch &amp;amp; Branch Prediction
│   ├── include             
│   ├── lib
│   └── lsu                 #   Load/Store
├── docs
├── tools                   # Scripts/Makefiles
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Verilator &lt;strong&gt;(3.926 or later)&lt;/strong&gt; must be installed on the system&lt;/li&gt;
&lt;li&gt;If addding/reoving instructions, espresso must be installed (used by &lt;em&gt;tools/coredecode&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Quickstart guide&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;li&gt;Setup RV_ROOT to point to the path in your local filesystem&lt;/li&gt;
&lt;li&gt;Determine your configuration {optional}&lt;/li&gt;
&lt;li&gt;Run make with tools/Makefile&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Configurations&lt;/h3&gt;
&lt;p&gt;SweRV can be configured by running the &lt;code&gt;$RV_ROOT/configs/swerv.config&lt;/code&gt; script:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;% $RV_ROOT/configs/swerv.config -h&lt;/code&gt; for detailed help options&lt;/p&gt;
&lt;p&gt;For example to build with a DCCM of size 64 :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;% $RV_ROOT/configs/swerv.config -dccm_size=64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will update the &lt;strong&gt;default&lt;/strong&gt; snapshot in $RV_ROOT/configs/snapshots/default/ with parameters for a 64K DCCM.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;-snapshot=dccm64&lt;/code&gt;, for example, if you wish to name your build snapshot &lt;em&gt;dccm64&lt;/em&gt; and refer to it during the build.&lt;/p&gt;
&lt;p&gt;This script derives the following consistent set of include files :&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$RV_ROOT/configs/snapshots/default
├── common_defines.vh                       # `defines for testbench or design
├── defines.h                               # #defines for C/assembly headers
├── pd_defines.vh                           # `defines for physical design
├── perl_configs.pl                         # Perl %configs hash for scripting
├── pic_ctrl_verilator_unroll.sv            # Unrolled verilog based on PIC size
├── pic_map_auto.h                          # PIC memory map based on configure size
└── whisper.json                            # JSON file for swerv-iss
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Building a model&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Set the RV_ROOT environment variable to the root of the SweRV directory structure&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RV_ROOT = /path/to/swerv&lt;/code&gt;&lt;br/&gt;&lt;code&gt;export RV_ROOT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create your configuration&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Skip if default is sufficient)&lt;/em&gt;&lt;br/&gt;&lt;em&gt;(Name your snapshot to distinguish it from the default. Without an explicit name, it will update/override the &lt;strong&gt;default&lt;/strong&gt; snapshot)&lt;/em&gt;&lt;br/&gt;&lt;code&gt;$RV_ROOT/configs/swerv.config [configuration options..] -snapshot=mybuild&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Snapshots are placed in &lt;code&gt;$RV_ROOT/configs/snapshots/&amp;lt;snapshot name&amp;gt;/&lt;/code&gt; directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build with &lt;strong&gt;verilator&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;make -f $RV_ROOT/tools/Makefile verilator [snapshot=name]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This will create and populate the verilator &lt;em&gt;obj_dir/&lt;/em&gt; in the current work dir.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Other targets supported&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;vcs  (Synopsys)  
irun (Cadence)  
&lt;/code&gt;
&lt;/pre&gt;&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 27 Jan 2019 00:07:13 +0000</pubDate>
<dc:creator>obl</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8161321?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>westerndigitalcorporation/swerv_eh1</og:title>
<og:url>https://github.com/westerndigitalcorporation/swerv_eh1</og:url>
<og:description>A directory of Western Digital’s RISC-V SweRV Cores - westerndigitalcorporation/swerv_eh1</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/westerndigitalcorporation/swerv_eh1</dc:identifier>
</item>
<item>
<title>Game Loop</title>
<link>http://gameprogrammingpatterns.com/game-loop.html</link>
<guid isPermaLink="true" >http://gameprogrammingpatterns.com/game-loop.html</guid>
<description>&lt;nav class=&quot;top&quot;/&gt;


&lt;p&gt;&lt;em&gt;Decouple the progression of game time from user input and processor speed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If there is one pattern this book couldn’t live without, this is it. Game loops are the quintessential example of a “game programming pattern”. Almost every game has one, no two are exactly alike, and relatively few programs outside of games use them.&lt;/p&gt;
&lt;p&gt;To see how they’re useful, let’s take a quick trip down memory lane. In the olden days of computer programming when everyone had &lt;span name=&quot;beard&quot;&gt;beards&lt;/span&gt;, programs worked like your dishwasher. You dumped a load of code in, pushed a button, waited, and got results out. Done. These were &lt;em&gt;batch mode&lt;/em&gt; programs — once the work was done, the program stopped.&lt;/p&gt;
&lt;aside name=&quot;beard&quot; readability=&quot;2&quot;&gt;&lt;p&gt;Ada Lovelace and Rear Admiral Grace Hopper had honorary beards.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;You still see these today, though thankfully we don’t have to write them on punch cards anymore. Shell scripts, command line programs, and even the little Python script that turns a pile of Markdown into this book are all batch mode programs.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#interview-with-a-cpu&quot; name=&quot;interview-with-a-cpu&quot;&gt;Interview with a CPU&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Eventually, programmers realized having to drop off a batch of code at the computing office and come back a few hours later for the results was a terribly slow way to get the bugs out of a program. They wanted immediate feedback. &lt;em&gt;Interactive&lt;/em&gt; programs were born. Some of the first interactive programs were games:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;YOU&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STANDING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;END&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROAD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BEFORE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SMALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BRICK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BUILDING&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AROUND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YOU&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOREST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SMALL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STREAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLOWS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUILDING&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GULLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;YOU&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSIDE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BUILDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WELL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOUSE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LARGE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SPRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;aside name=&quot;cave&quot; readability=&quot;1.8103448275862&quot;&gt;&lt;p&gt;This is &lt;a href=&quot;http://en.wikipedia.org/wiki/Colossal_Cave_Adventure&quot;&gt;Colossal Cave Adventure&lt;/a&gt;, the first adventure game.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;You could have a live conversation with the program. It waited for your input, then it would respond to you. You would reply back, taking turns just like you learned to do in kindergarten. When it was your turn, it sat there doing nothing. Something like:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;handleCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;aside name=&quot;exit&quot; readability=&quot;4&quot;&gt;&lt;p&gt;This loops forever, so there’s no way to quit the game. A real game would do something like &lt;code&gt;while (!done)&lt;/code&gt; and set &lt;code&gt;done&lt;/code&gt; to exit. I’ve omitted that to keep things simple.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#event-loops&quot; name=&quot;event-loops&quot;&gt;Event loops&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Modern graphic UI applications are surprisingly similar to old adventure games once you shuck their skin off. Your word processor usually just sits there doing nothing until you press a key or click something:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waitForEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main difference is that instead of &lt;em&gt;text commands&lt;/em&gt;, the program is waiting for &lt;em&gt;user input events&lt;/em&gt; — mouse clicks and key presses. It still works basically like the old text adventures where the program &lt;span name=&quot;idle&quot;&gt;&lt;em&gt;blocks&lt;/em&gt;&lt;/span&gt; waiting for user input, which is a problem.&lt;/p&gt;
&lt;p&gt;Unlike most other software, games keep moving even when the user isn’t providing input. If you sit staring at the screen, the game doesn’t freeze. Animations keep animating. Visual effects dance and sparkle. If you’re unlucky, that monster keeps chomping on your hero.&lt;/p&gt;
&lt;aside name=&quot;idle&quot; readability=&quot;4&quot;&gt;&lt;p&gt;Most event loops do have “idle” events so you can intermittently do stuff without user input. That’s good enough for a blinking cursor or a progress bar, but too rudimentary for games.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This is the first key part of a real game loop: &lt;em&gt;it processes user input, but doesn’t wait for it&lt;/em&gt;. The loop always keeps spinning:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll refine this later, but the basic pieces are here. &lt;code&gt;processInput()&lt;/code&gt; handles any user input that has happened since the last call. Then, &lt;span name=&quot;update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/span&gt; advances the game simulation one step. It runs AI and physics (usually in that order). Finally, &lt;code&gt;render()&lt;/code&gt; draws the game so the player can see what happened.&lt;/p&gt;
&lt;aside name=&quot;update&quot; readability=&quot;2.5760869565217&quot;&gt;&lt;p&gt;As you might guess from the name, &lt;code&gt;update()&lt;/code&gt; is a good place to use the &lt;a href=&quot;http://gameprogrammingpatterns.com/update-method.html&quot; class=&quot;pattern&quot;&gt;Update Method&lt;/a&gt; pattern.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#a-world-out-of-time&quot; name=&quot;a-world-out-of-time&quot;&gt;A world out of time&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If this loop isn’t blocking on input, that leads to the obvious question: how &lt;em&gt;fast&lt;/em&gt; does it spin? Each turn through the game loop advances the state of the game by some amount. From the perspective of an inhabitant of the game world, the hand of their clock has &lt;span name=&quot;tick&quot;&gt;ticked&lt;/span&gt; forward.&lt;/p&gt;
&lt;aside name=&quot;tick&quot; readability=&quot;2&quot;&gt;&lt;p&gt;The common terms for one crank of the game loop are “tick” and “frame”.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Meanwhile, the &lt;em&gt;player’s&lt;/em&gt; actual clock is ticking. If we measure how quickly the game loop cycles in terms of real time, we get the game’s “frames per second”. If the game loop cycles quickly, the FPS is high and the game moves smoothly and quickly. If it’s slow, the game jerks along like a stop motion movie.&lt;/p&gt;
&lt;p&gt;With the crude loop we have now where it just cycles as quickly as it can, two factors determine the frame rate. The first is &lt;em&gt;how much work it has to do each frame&lt;/em&gt;. Complex physics, a bunch of game objects, and lots of graphic detail all will keep your CPU and GPU busy, and it will take longer to complete a frame.&lt;/p&gt;
&lt;p&gt;The second is &lt;em&gt;the speed of the underlying platform.&lt;/em&gt; Faster chips churn through more code in the same amount of time. Multiple cores, GPUs, dedicated audio hardware, and the OS’s scheduler all affect how much you get done in one tick.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#seconds-per-second&quot; name=&quot;seconds-per-second&quot;&gt;Seconds per second&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In early video games, that second factor was fixed. If you wrote a game for the NES or Apple IIe, you knew &lt;em&gt;exactly&lt;/em&gt; what CPU your game was running on and you could (and did) code specifically for that. All you had to worry about was how much work you did each tick.&lt;/p&gt;
&lt;p&gt;Older games were carefully coded to do just enough work each frame so that the game ran at the speed the developers wanted. But if you tried to play that same game on a faster or slower &lt;span name=&quot;turbo&quot;&gt;machine&lt;/span&gt;, then the game itself would speed up or slow down.&lt;/p&gt;
&lt;aside name=&quot;turbo&quot; readability=&quot;3.9118942731278&quot;&gt;&lt;p&gt;This is why old PCs used to have “&lt;a href=&quot;http://en.wikipedia.org/wiki/Turbo_button&quot;&gt;turbo&lt;/a&gt;” buttons. New PCs were faster and couldn’t play old games because the games would run too fast. Turning the turbo button &lt;em&gt;off&lt;/em&gt; would slow the machine down and make old games playable.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;These days, though, few developers have the luxury of knowing exactly what hardware their game will run on. Instead, our games must intelligently adapt to a variety of devices.&lt;/p&gt;
&lt;p&gt;This is the other key job of a game loop: &lt;em&gt;it runs the game at a consistent speed despite differences in the underlying hardware.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;game loop&lt;/strong&gt; runs continuously during gameplay. Each turn of the loop, it &lt;strong&gt;processes user input&lt;/strong&gt; without blocking, &lt;strong&gt;updates the game state&lt;/strong&gt;, and &lt;strong&gt;renders the game&lt;/strong&gt;. It tracks the passage of time to &lt;strong&gt;control the rate of gameplay&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Using the wrong pattern can be worse than using no pattern at all, so this section is normally here to caution against over-enthusiasm. The goal of design patterns isn’t to cram as many into your codebase as you can.&lt;/p&gt;
&lt;p&gt;But this pattern is a bit different. I can say with pretty good confidence that you &lt;em&gt;will&lt;/em&gt; use this pattern. If you’re using a game &lt;span name=&quot;engine&quot;&gt;engine&lt;/span&gt;, you won’t write it yourself, but it’s still there.&lt;/p&gt;
&lt;aside name=&quot;engine&quot; readability=&quot;5&quot;&gt;&lt;p&gt;For me, this is the difference between an “engine” and a “library”. With libraries, you own the main game loop and call into the library. An engine owns the loop and calls into &lt;em&gt;your&lt;/em&gt; code.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;You might think you won’t need this if you’re making a turn-based game. But even there, though the &lt;em&gt;game state&lt;/em&gt; won’t advance until the user takes their turn, the &lt;em&gt;visual&lt;/em&gt; and &lt;em&gt;audible&lt;/em&gt; states of the game usually do. Animation and music keep running even when the game is “waiting” for you to take your turn.&lt;/p&gt;

&lt;p&gt;The loop we’re talking about here is some of the most important code in your game. They say a program spends &lt;span name=&quot;percent&quot;&gt;90%&lt;/span&gt; of its time in 10% of the code. Your game loop will be firmly in that 10%. Take care with this code, and be mindful of its efficiency.&lt;/p&gt;
&lt;aside name=&quot;percent&quot; readability=&quot;3&quot;&gt;&lt;p&gt;Made up statistics like this are why “real” engineers like mechanical and electrical engineers don’t take us seriously.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#you-may-need-to-coordinate-with-the-platform's-event-loop&quot; name=&quot;you-may-need-to-coordinate-with-the-platform's-event-loop&quot;&gt;You may need to coordinate with the platform’s event loop&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re building your game on top of an OS or platform that has a graphic UI and an event loop built in, then you have &lt;em&gt;two&lt;/em&gt; application loops in play. They’ll need to play nice together.&lt;/p&gt;
&lt;p&gt;Sometimes, you can take control and make your loop the only one. For example, if you’re writing a game against the venerable Windows API, your &lt;code&gt;main()&lt;/code&gt; can just have a game loop. Inside, you can call &lt;code&gt;PeekMessage()&lt;/code&gt; to handle and dispatch events from the OS. Unlike &lt;code&gt;GetMessage()&lt;/code&gt;, &lt;code&gt;PeekMessage()&lt;/code&gt; doesn’t block waiting for user input, so your game loop will keep cranking.&lt;/p&gt;
&lt;p&gt;Other platforms don’t let you opt out of the event loop so easily. If you’re targeting a web browser, the event loop is deeply built into browser’s execution model. There, the event loop will run the show, and you’ll use it as your game loop too. You’ll call something like &lt;code&gt;requestAnimationFrame()&lt;/code&gt; and it will call back into your code to keep the game running.&lt;/p&gt;

&lt;p&gt;For such a long introduction, the code for a game loop is actually pretty straightforward. We’ll walk through a couple of variations and go over their good and bad points.&lt;/p&gt;
&lt;p&gt;The game loop drives AI, rendering, and other game systems, but those aren’t the point of the pattern itself, so we’ll just call into fictitious methods here. Actually implementing &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt; and others is left as a (challenging!) exercise for the reader.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#run,-run-as-fast-as-you-can&quot; name=&quot;run,-run-as-fast-as-you-can&quot;&gt;Run, run as fast as you can&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We’ve already seen the simplest possible game loop:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem with it is you have no control over how fast the game runs. On a fast machine, that loop will spin so fast users won’t be able to see what’s going on. On a slow machine, the game will crawl. If you have a part of the game that’s content-heavy or does more AI or physics, the game will actually play slower there.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#take-a-little-nap&quot; name=&quot;take-a-little-nap&quot;&gt;Take a little nap&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first variation we’ll look at adds a simple fix. Say you want your game to run at 60 FPS. That gives you about &lt;span name=&quot;16&quot;&gt;16&lt;/span&gt; milliseconds per frame. As long as you can reliably do all of your game processing and rendering in less than that time, you can run at a steady frame rate. All you do is process the frame and then &lt;em&gt;wait&lt;/em&gt; until it’s time for the next one, like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-simple.png&quot; alt=&quot;A simple game loop flowchart. Process Input → Update Game → Render → Wait, then loop back to the beginning.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The code looks a bit like this:&lt;/p&gt;
&lt;aside name=&quot;16&quot; readability=&quot;2&quot;&gt;&lt;p&gt;&lt;em&gt;1000 ms / FPS = ms per frame&lt;/em&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_FRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;sleep()&lt;/code&gt; here makes sure the game doesn’t run too &lt;em&gt;fast&lt;/em&gt; if it processes a frame quickly. It &lt;em&gt;doesn’t&lt;/em&gt; help if your game runs too &lt;em&gt;slowly&lt;/em&gt;. If it takes longer than 16ms to update and render the frame, your sleep time goes &lt;em&gt;negative&lt;/em&gt;. If we had computers that could travel back in time, lots of things would be easier, but we don’t.&lt;/p&gt;
&lt;p&gt;Instead, the game slows down. You can work around this by doing less work each frame — cut down on the graphics and razzle dazzle or dumb down the AI. But that impacts the quality of gameplay for all users, even ones on fast machines.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#one-small-step,-one-giant-step&quot; name=&quot;one-small-step,-one-giant-step&quot;&gt;One small step, one giant step&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s try something a bit more sophisticated. The problem we have basically boils down to:&lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Each update advances game time by a certain amount.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;It takes a certain amount of &lt;em&gt;real&lt;/em&gt; time to process that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If step two takes longer than step one, the game slows down. If it takes more than 16 ms of processing to advance game time by 16ms, it can’t possibly keep up. But if we can advance the game by &lt;em&gt;more&lt;/em&gt; than 16ms of game time in a single step, then we can update the game less frequently and still keep up.&lt;/p&gt;
&lt;p&gt;The idea then is to choose a time step to advance based on how much &lt;em&gt;real&lt;/em&gt; time passed since the last frame. The longer the frame takes, the bigger steps the game takes. It always keeps up with real time because it will take bigger and bigger steps to get there. They call this a &lt;em&gt;variable&lt;/em&gt; or &lt;em&gt;fluid&lt;/em&gt; time step. It looks like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each frame, we determine how much &lt;em&gt;real&lt;/em&gt; time passed since the last game update (&lt;code&gt;elapsed&lt;/code&gt;). When we update the game state, we pass that in. The engine is then responsible for advancing the game world forward by that amount of time.&lt;/p&gt;
&lt;p&gt;Say you’ve got a bullet shooting across the screen. With a fixed time step, in each frame, you’ll move it according to its velocity. With a variable time step, you &lt;em&gt;scale that velocity by the elapsed time&lt;/em&gt;. As the time step gets bigger, the bullet moves farther in each frame. That bullet will get across the screen in the &lt;em&gt;same&lt;/em&gt; amount of &lt;em&gt;real&lt;/em&gt; time whether it’s twenty small fast steps or four big slow ones. This looks like a winner:&lt;/p&gt;
&lt;p&gt;But, alas, there’s a serious problem lurking ahead: we’ve made the game &lt;span name=&quot;deterministic&quot;&gt;non-deterministic&lt;/span&gt; and unstable. Here’s one example of the trap we’ve set for ourselves:&lt;/p&gt;
&lt;aside name=&quot;deterministic&quot; readability=&quot;16&quot;&gt;&lt;p&gt;“Deterministic” means that every time you run the program, if you give it the same inputs, you get the exact same outputs back. As you can imagine, it’s much easier to track down bugs in deterministic programs — find the inputs that caused the bug the first time, and you can cause it every time.&lt;/p&gt;
&lt;p&gt;Computers are naturally deterministic; they follow programs mechanically. Non-determinism appears when the messy real world creeps in. For example, networking, the system clock, and thread scheduling all rely on bits of the external world outside of the program’s control.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Say we’ve got a two-player networked game and Fred has some beast of a gaming machine while George is using his grandmother’s antique PC. That aforementioned bullet is flying across both of their screens. On Fred’s machine, the game is running super fast, so each time step is tiny. We cram, like, 50 frames in the second it takes the bullet to cross the screen. Poor George’s machine can only fit in about five frames.&lt;/p&gt;
&lt;p&gt;This means that on Fred’s machine, the physics engine updates the bullet’s position 50 times, but George’s only does it five times. Most games use floating point numbers, and those are subject to &lt;em&gt;rounding error&lt;/em&gt;. Each time you add two floating point numbers, the answer you get back can be a bit off. Fred’s machine is doing ten times as many operations, so he’ll accumulate a bigger error than George. The &lt;em&gt;same&lt;/em&gt; bullet will end up in &lt;em&gt;different places&lt;/em&gt; on their machines.&lt;/p&gt;
&lt;p&gt;This is just one nasty problem a variable time step can cause, but there are more. In order to run in real time, game physics engines are approximations of the real laws of mechanics. To keep those approximations from &lt;span name=&quot;blowup&quot;&gt;blowing up&lt;/span&gt;, damping is applied. That damping is carefully tuned to a certain time step. Vary that, and the physics gets unstable.&lt;/p&gt;
&lt;aside name=&quot;blowup&quot; readability=&quot;4&quot;&gt;&lt;p&gt;“Blowing up” is literal here. When a physics engine flakes out, objects can get completely wrong velocities and launch themselves into the air.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This instability is bad enough that this example is only here as a cautionary tale and to lead us to something better…&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#play-catch-up&quot; name=&quot;play-catch-up&quot;&gt;Play catch up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One part of the engine that usually &lt;em&gt;isn’t&lt;/em&gt; affected by a variable time step is &lt;span name=&quot;render&quot;&gt;rendering&lt;/span&gt;. Since the rendering engine captures an instant in time, it doesn’t care how much time advanced since the last one. It renders things wherever they happen to be right then.&lt;/p&gt;
&lt;aside name=&quot;render&quot; readability=&quot;5&quot;&gt;&lt;p&gt;This is more or less true. Things like motion blur can be affected by time step, but if they’re a bit off, the player doesn’t usually notice.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;We can use this fact to our advantage. We’ll &lt;em&gt;update&lt;/em&gt; the game using a fixed time step because that makes everything simpler and more stable for physics and AI. But we’ll allow flexibility in when we &lt;em&gt;render&lt;/em&gt; in order to free up some processor time.&lt;/p&gt;
&lt;p&gt;It goes like this: A certain amount of real time has elapsed since the last turn of the game loop. This is how much game time we need to simulate for the game’s “now” to catch up with the player’s. We do that using a &lt;em&gt;series&lt;/em&gt; of &lt;em&gt;fixed&lt;/em&gt; time steps. The code looks a bit like:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getCurrentTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s a few pieces here. At the beginning of each frame, we update &lt;code&gt;lag&lt;/code&gt; based on how much real time passed. This measures how far the game’s clock is behind compared to the real world. We then have an inner loop to update the game, one fixed step at a time, until it’s caught up. Once we’re caught up, we render and start over again. You can visualize it sort of like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-fixed.png&quot; alt=&quot;A modified flowchart. Process Input → Update Game → Wait, then loop back to this step then → Render → Loop back to the beginning.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Note that the time step here isn’t the &lt;em&gt;visible&lt;/em&gt; frame rate anymore. &lt;code&gt;MS_PER_UPDATE&lt;/code&gt; is just the &lt;em&gt;granularity&lt;/em&gt; we use to update the game. The shorter this step is, the more processing time it takes to catch up to real time. The longer it is, the choppier the gameplay is. Ideally, you want it pretty short, often faster than 60 FPS, so that the game simulates with high fidelity on fast machines.&lt;/p&gt;
&lt;p&gt;But be careful not to make it &lt;em&gt;too&lt;/em&gt; short. You need to make sure the time step is greater than the time it takes to process an &lt;code&gt;update()&lt;/code&gt;, even on the &lt;span name=&quot;bail&quot;&gt;slowest&lt;/span&gt; hardware. Otherwise, your game simply can’t catch up.&lt;/p&gt;
&lt;aside name=&quot;bail&quot; readability=&quot;5&quot;&gt;&lt;p&gt;I left it out here, but you can safeguard this by having the inner update loop bail after a maximum number of iterations. The game will slow down then, but that’s better than locking up completely.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Fortunately, we’ve bought ourselves some breathing room here. The trick is that we’ve &lt;em&gt;yanked rendering out of the update loop&lt;/em&gt;. That frees up a bunch of CPU time. The end result is the game &lt;em&gt;simulates&lt;/em&gt; at a constant rate using safe fixed time steps across a range of hardware. It’s just that the player’s &lt;em&gt;visible window&lt;/em&gt; into the game gets choppier on a slower machine.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#stuck-in-the-middle&quot; name=&quot;stuck-in-the-middle&quot;&gt;Stuck in the middle&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There’s one issue we’re left with, and that’s residual lag. We update the game at a fixed time step, but we render at arbitrary points in time. This means that from the user’s perspective, the game will often display at a point in time between two updates.&lt;/p&gt;
&lt;p&gt;Here’s a timeline:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-timeline.png&quot; alt=&quot;A timeline containing evenly spaced Updates and intermittent Renders.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we update at a nice tight, fixed interval. Meanwhile, we render whenever we can. It’s less frequent than updating, and it isn’t steady either. Both of those are OK. The lame part is that we don’t always render right at the point of updating. Look at the third render time. It’s right between two updates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://gameprogrammingpatterns.com/images/game-loop-timeline-close.png&quot; alt=&quot;Close-up of the timeline showing Renders falling between Update steps.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Imagine a bullet is flying across the screen. On the first update, it’s on the left side. The second update moves it to the right side. The game is rendered at a point in time between those two updates, so the user expects to see that bullet in the center of the screen. With our current implementation, it will still be on the left side. This means motion looks jagged or stuttery.&lt;/p&gt;
&lt;p&gt;Conveniently, we actually know &lt;em&gt;exactly&lt;/em&gt; how far between update frames we are when we render: it’s stored in &lt;code&gt;lag&lt;/code&gt;. We bail out of the update loop when it’s less than the update time step, not when it’s &lt;em&gt;zero&lt;/em&gt;. That leftover amount? That’s how far into the next frame we are.&lt;/p&gt;
&lt;p&gt;When we go to render, we’ll pass that in:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_PER_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;aside name=&quot;normal&quot; readability=&quot;7&quot;&gt;&lt;p&gt;We divide by &lt;code&gt;MS_PER_UPDATE&lt;/code&gt; here to &lt;em&gt;normalize&lt;/em&gt; the value. The value passed to &lt;code&gt;render()&lt;/code&gt; will vary from 0 (right at the previous frame) to just under 1.0 (right at the next frame), regardless of the update time step. This way, the renderer doesn’t have to worry about the frame rate. It just deals in values from 0 to 1.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;The renderer knows each game object &lt;em&gt;and its current velocity&lt;/em&gt;. Say that bullet is 20 pixels from the left side of the screen and is moving right 400 pixels per frame. If we are halfway between frames, then we’ll end up passing 0.5 to &lt;code&gt;render()&lt;/code&gt;. So it draws the bullet half a frame ahead, at 220 pixels. Ta-da, smooth motion.&lt;/p&gt;
&lt;p&gt;Of course, it may turn out that that extrapolation is wrong. When we calculate the next frame, we may discover the bullet hit an obstacle or slowed down or something. We rendered its position interpolated between where it was on the last frame and where we &lt;em&gt;think&lt;/em&gt; it will be on the next frame. But we don’t know that until we’ve actually done the full update with physics and AI.&lt;/p&gt;
&lt;p&gt;So the extrapolation is a bit of a guess and sometimes ends up wrong. Fortunately, though, those kinds of corrections usually aren’t noticeable. At least, they’re less noticeable than the stuttering you get if you don’t extrapolate at all.&lt;/p&gt;

&lt;p&gt;Despite the length of this chapter, I’ve left out more than I’ve included. Once you throw in things like synchronizing with the display’s refresh rate, multithreading, and GPUs, a real game loop can get pretty hairy. At a high level, though, here are a few questions you’ll likely answer:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#do-you-own-the-game-loop,-or-does-the-platform&quot; name=&quot;do-you-own-the-game-loop,-or-does-the-platform&quot;&gt;Do you own the game loop, or does the platform?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is less a choice you make and more one that’s made for you. If you’re making a game that runs in a web browser, you pretty much &lt;em&gt;can’t&lt;/em&gt; write your own classic game loop. The browser’s event-based nature precludes it. Likewise, if you’re using an existing game engine, you will probably rely on its game loop instead of rolling your own.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#how-do-you-manage-power-consumption&quot; name=&quot;how-do-you-manage-power-consumption&quot;&gt;How do you manage power consumption?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This wasn’t an issue five years ago. Games ran on things plugged into walls or on dedicated handheld devices. But with the advent of smartphones, laptops, and mobile gaming, the odds are good that you do care about this now. A game that runs beautifully but turns players’ phones into space heaters before running out of juice thirty minutes later is not a game that makes people happy.&lt;/p&gt;
&lt;p&gt;Now, you may need to think not only about making your game look great, but also use as little CPU as possible. There will likely be an &lt;em&gt;upper&lt;/em&gt; bound to performance where you let the CPU sleep if you’ve done all the work you need to do in a frame.&lt;/p&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;Run as fast as it can:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is what you’re likely to do for PC games (though even those are increasingly being played on laptops). Your game loop will never explicitly tell the OS to sleep. Instead, any spare cycles will be spent cranking up the FPS or graphic fidelity.&lt;/p&gt;
&lt;p&gt;This gives you the best possible gameplay experience but, it will use as much power as it can. If the player is on a laptop, they’ll have a nice lap warmer.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Clamp the frame rate:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mobile games are often more focused on the quality of gameplay than they are on maximizing the detail of the graphics. Many of these games will set an upper limit on the frame rate (usually 30 or 60 FPS). If the game loop is done processing before that slice of time is spent, it will just sleep for the rest.&lt;/p&gt;
&lt;p&gt;This gives the player a “good enough” experience and then goes easy on their battery beyond that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href=&quot;http://gameprogrammingpatterns.com/game-loop.html#how-do-you-control-gameplay-speed&quot; name=&quot;how-do-you-control-gameplay-speed&quot;&gt;How do you control gameplay speed?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A game loop has two key pieces: non-blocking user input and adapting to the passage of time. Input is straightforward. The magic is in how you deal with time. There are a &lt;span name=&quot;platform&quot;&gt;near-infinite&lt;/span&gt; number of platforms that games can run on, and any single game may run on quite a few. How it accommodates that variation is key.&lt;/p&gt;
&lt;aside name=&quot;platform&quot; readability=&quot;8&quot;&gt;&lt;p&gt;Game-making seems to be part of human nature, because every time we’ve built a machine that can do computing, one of the first things we’ve done is made games on it. The PDP-1 was a 2 kHz machine with only 4,096 words of memory, yet Steve Russell and friends managed to create Spacewar! on it.&lt;/p&gt;
&lt;/aside&gt;&lt;ul readability=&quot;7.9627906976744&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fixed time step with no synchronization:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was our first sample code. You just run the game loop as fast as you can.&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;em&gt;It’s simple&lt;/em&gt;. This is its main (well, only) virtue.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;Game speed is directly affected by hardware and game complexity.&lt;/em&gt; And its main vice is that if there’s any variation, it will directly affect the game speed. It’s the fixie of game loops.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1.9780960404381&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fixed time step with synchronization:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The next step up on the complexity ladder is running the game at a fixed time step but adding a delay or synchronization point at the end of the loop to keep the game from running too fast.&lt;/p&gt;
&lt;ul readability=&quot;6.9051094890511&quot;&gt;&lt;li readability=&quot;1.9087719298246&quot;&gt;
&lt;p&gt;&lt;em&gt;Still quite simple.&lt;/em&gt; It’s only one line of code more than the probably-too-simple-to-actually-work example. In most game loops, you will likely do synchronization &lt;em&gt;anyway&lt;/em&gt;. You will probably &lt;a href=&quot;http://gameprogrammingpatterns.com/double-buffer.html&quot;&gt;double buffer&lt;/a&gt; your graphics and synchronize the buffer flip to the refresh rate of the display.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;em&gt;It’s power-friendly.&lt;/em&gt; This is a surprisingly important consideration for mobile games. You don’t want to kill the user’s battery unnecessarily. By simply sleeping for a few milliseconds instead of trying to cram ever more processing into each tick, you save power.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;em&gt;The game doesn’t play too fast.&lt;/em&gt; This fixes half of the speed concerns of a fixed loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em&gt;The game can play too slowly.&lt;/em&gt; If it takes too long to update and render a game frame, playback will slow down. Because this style doesn’t separate updating from rendering, it’s likely to hit this sooner than more advanced options. Instead of just dropping &lt;em&gt;rendering&lt;/em&gt; frames to catch up, gameplay will slow down.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Variable time step:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ll put this in here as an option in the solution space with the caveat that most game developers I know recommend against it. It’s good to remember &lt;em&gt;why&lt;/em&gt; it’s a bad idea, though.&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;It adapts to playing both too slowly and too fast.&lt;/em&gt; If the game can’t keep up with real time, it will just take larger and larger time steps until it does.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;It makes gameplay non-deterministic and unstable.&lt;/em&gt; And this is the real problem, of course. Physics and networking in particular become much harder with a variable time step.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fixed update time step, variable rendering:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The last option we covered in the sample code is the most complex, but also the most adaptable. It updates with a fixed time step, but it can drop &lt;em&gt;rendering&lt;/em&gt; frames if it needs to to catch up to the player’s clock.&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;em&gt;It adapts to playing both too slowly and too fast.&lt;/em&gt; As long as the game can &lt;em&gt;update&lt;/em&gt; in real time, the game won’t fall behind. If the player’s machine is top-of-the-line, it will respond with a smoother gameplay experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;em&gt;It’s more complex.&lt;/em&gt; The main downside is there is a bit more going on in the implementation. You have to tune the update time step to be both as small as possible for the high-end, while not being too slow on the low end.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul readability=&quot;0.43308550185874&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The classic article on game loops is Glenn Fiedler’s “&lt;a href=&quot;http://gafferongames.com/game-physics/fix-your-timestep/&quot;&gt;Fix Your Timestep&lt;/a&gt;“. This chapter wouldn’t be the same without it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.81481481481481&quot;&gt;
&lt;p&gt;Witters’ article on &lt;a href=&quot;http://www.koonsolo.com/news/dewitters-gameloop/&quot;&gt;game loops&lt;/a&gt; is a close runner-up.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.8953488372093&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://unity3d.com/&quot;&gt;Unity&lt;/a&gt; framework has a complex game loop detailed in a wonderful illustration &lt;a href=&quot;http://www.richardfine.co.uk/2012/10/unity3d-monobehaviour-lifecycle/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;nav/&gt;</description>
<pubDate>Sat, 26 Jan 2019 23:17:50 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://gameprogrammingpatterns.com/game-loop.html</dc:identifier>
</item>
<item>
<title>When a Bike Company Put a TV on Its Box, Shipping Damages Went Down (2017)</title>
<link>https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</link>
<guid isPermaLink="true" >https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</guid>
<description>&lt;p class=&quot;body-text&quot;&gt;Sometimes, to make a product truly great, a company must think outside the box. But for Dutch bike manufacturer VanMoof, thinking about the box itself solved a major problem when it came to shipping.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;According to &lt;a class=&quot;body-link&quot; href=&quot;http://money.cnn.com/2017/10/03/smallbusiness/vanmoof-bike-box-tv/index.html&quot; target=&quot;_blank&quot; data-vars-ga-outbound-link=&quot;http://money.cnn.com/2017/10/03/smallbusiness/vanmoof-bike-box-tv/index.html&quot;&gt;CNN&lt;/a&gt;, the company reported that more than 25 percent of its bikes were damaged before even being delivered last year. The problem was especially bad when shipping to the U.S.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&quot;Your covetable products, your frictionless website, your killer brand — they all count for nothing when your delivery partner drops the ball,&quot; Bex Rad, Vanmoof's creative director, wrote in a Medium post last year.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&lt;strong&gt;RELATED: &lt;a class=&quot;body-link&quot; href=&quot;https://www.bicycling.com/news/strava-premium-updates/&quot; data-vars-ga-outbound-link=&quot;https://www.bicycling.com/news/strava-premium-updates/&quot;&gt;Strava Will Now Reimburse You for Phone Damage and a Taxi Home&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;The solution? Reconsider the packaging. &quot;We asked ourselves, what do Americans really love? What would prompt couriers to be delicate with a parcel?&quot; VanMoof co-founder Taco Carlier told CNN.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;A TV was the obvious answer.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;A big-screen TV box is roughly the same size and weight as a bike box. So to convince shippers to handle its products with more care, VanMoof began printing photos of TVs on its packaging. The boxes still depicted the bike, too, but at a glance it does look like you would find a massive widescreen TV inside instead of a high-end &lt;a class=&quot;body-link&quot; href=&quot;https://www.bicycling.com/bikes-gear/reviews/16-for-2016-the-years-best-city-and-commuter-bikes/&quot; data-vars-ga-outbound-link=&quot;https://www.bicycling.com/bikes-gear/reviews/16-for-2016-the-years-best-city-and-commuter-bikes/&quot;&gt;commuter bike&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&lt;strong&gt;RELATED: &lt;a class=&quot;body-link&quot; href=&quot;https://www.bicycling.com/beginners/cycling-apparel/the-5-worst-mistakes-you-make-when-washing-your-cycling-clothes/&quot; data-vars-ga-outbound-link=&quot;https://www.bicycling.com/beginners/cycling-apparel/the-5-worst-mistakes-you-make-when-washing-your-cycling-clothes/&quot;&gt;The 5 Worst Mistakes You Make When Washing Your Cycling Clothes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;Damages dropped by 80 percent since then, according to the company. Even after a &lt;em&gt;Wall Street Journal&lt;/em&gt; reporter spilled the beans by tweeting about the deception last year, the drop in damages has reportedly stayed consistent. (&lt;em&gt;Learn the secrets to bike upkeep in Rodale's&lt;/em&gt; &lt;a class=&quot;body-link&quot; href=&quot;https://offers.rodale.com/offer/600290?keycode=258504&amp;amp;rdl_source=bicycling.com&amp;amp;rdl_medium=textlink&amp;amp;rdl_campaign=%20vanmoof-tv-on-box-damaged-bikes&amp;amp;rdl_term=Repair&quot; target=&quot;_blank&quot; data-vars-ga-outbound-link=&quot;https://offers.rodale.com/offer/600290?keycode=258504&amp;amp;rdl_source=bicycling.com&amp;amp;rdl_medium=textlink&amp;amp;rdl_campaign=%20vanmoof-tv-on-box-damaged-bikes&amp;amp;rdl_term=Repair&quot;&gt;Guide to Bicycle Maintenance &amp;amp; Repair&lt;/a&gt;.)&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;6.5968586387435&quot;&gt;
&lt;p class=&quot;body-text&quot;&gt;genius idea alert: &lt;a class=&quot;body-link&quot; href=&quot;https://twitter.com/VanMoof?ref_src=twsrc%5Etfw&quot; data-vars-ga-outbound-link=&quot;https://twitter.com/VanMoof?ref_src=twsrc%5Etfw&quot;&gt;@vanmoof&lt;/a&gt; bikes had problem with shipping damage. So it put flat TVs on its boxes. Problem solved. &lt;a class=&quot;body-link&quot; href=&quot;https://t.co/dsomNATUoY&quot; data-vars-ga-outbound-link=&quot;https://t.co/dsomNATUoY&quot;&gt;pic.twitter.com/dsomNATUoY&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&amp;amp;mdash; Jason Gay (@jasongay) &lt;a class=&quot;body-link&quot; href=&quot;https://twitter.com/jasongay/status/772556605548326912?ref_src=twsrc%5Etfw&quot; data-vars-ga-outbound-link=&quot;https://twitter.com/jasongay/status/772556605548326912?ref_src=twsrc%5Etfw&quot;&gt;September 4, 2016&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;body-text&quot;&gt;The &quot;cheeky&quot; bike box was so successful, in fact, that VanMoof began talking it up nearly as much as it did the bikes inside.&quot;The pared-back VanMoof TV box comes with a free bike box inside, making it a great addition to your house for children, pets, or grown-ups,&quot; its &lt;a class=&quot;body-link&quot; href=&quot;https://www.vanmoof.com/en_us/bikes/tv-box#language&quot; target=&quot;_blank&quot; data-vars-ga-outbound-link=&quot;https://www.vanmoof.com/en_us/bikes/tv-box#language&quot;&gt;website reads&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;Cyclists who have suffered shipping woes in their personal lives may wish to take heed. &lt;/p&gt;
&lt;p class=&quot;body-text&quot;&gt;&lt;em&gt;Learn some quick and easy bike maintenance tips:&lt;/em&gt;&lt;/p&gt;
​

​

</description>
<pubDate>Sat, 26 Jan 2019 21:01:10 +0000</pubDate>
<dc:creator>edward</dc:creator>
<og:type>article</og:type>
<og:title>Why This Bike Company Put a TV on Its Box</og:title>
<og:description>Dutch bike manufacturer VanMoof got fed up with how often U.S. shippers damaged its products—so they got creative</og:description>
<og:url>https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</og:url>
<og:image>https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/1/170920163812-vanmoof-bike-box-780x439-1507926687.jpg?crop=1xw:0.888xh;center,top&amp;resize=1200:*</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bicycling.com/news/a20027122/vanmoof-tv-on-box-damaged-bikes/</dc:identifier>
</item>
<item>
<title>Bill Gates promises to add his own billions if Congress does nuclear power push</title>
<link>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</link>
<guid isPermaLink="true" >https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</guid>
<description>&lt;img class=&quot;size-full-width wp-image-365941&quot; src=&quot;https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-630x536.jpg&quot; alt=&quot;&quot; width=&quot;630&quot; height=&quot;536&quot; srcset=&quot;https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-630x536.jpg 630w, https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-768x654.jpg 768w, https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-1260x1073.jpg 1260w&quot; sizes=&quot;(max-width: 630px) 100vw, 630px&quot;/&gt;Microsoft co-founder and philanthropist Bill Gates. (GeekWire Photo / Kevin Lisota)
&lt;p&gt;Bill Gates said in his &lt;a href=&quot;https://www.geekwire.com/2018/china-option-fades-bill-gates-urges-u-s-take-lead-nuclear-power-good-planet/&quot;&gt;year-end letter last month&lt;/a&gt; that he planned to work to persuade U.S. leaders to embrace advanced nuclear technologies as a solution to curbing climate change. That work appears to have begun as &lt;a href=&quot;https://www.washingtonpost.com/national/health-science/bill-gates-comes-to-washington--selling-the-promise-of-nuclear-energy/2019/01/25/4bd9c030-1445-11e9-b6ad-9cfd62dbb0a8_story.html?utm_term=.b3903fced86b&quot;&gt;The Washington Post reported&lt;/a&gt; Friday that Gates is making the rounds on Capitol Hill looking for support — and billions of dollars.&lt;/p&gt;&lt;p&gt;Gates founded the Bellevue, Wash.-based TerraPower in 2006, and the venture had been working toward building a pilot project for its traveling-wave nuclear technology in China. Policy regulations put in place by the Trump administration have made that unlikely and Gates is hoping to make his grand plan happen in the U.S.&lt;/p&gt;
&lt;p&gt;The Post reported, based on accounts from congressional staffers, that the Microsoft co-founder is telling lawmakers that he personally would invest $1 billion and raise $1 billion more in private capital to go along with federal funds for TerraPower’s pilot plan.&lt;/p&gt;

&lt;p&gt;Gates has reportedly met with lawmakers from both parties, including Sens. Lamar Alexander (R-Tenn.) and Dianne Feinstein (D-Calif.). He also met with Sen. Lisa Murkowski (R-Alaska) and three other senators last month.&lt;/p&gt;
&lt;p&gt;Jonah Goldman, of Gates Ventures, stressed to The Post that Gates was not advocating for TerraPower alone. Gates thinks the U.S. has “the best minds, the best lab systems and entrepreneurs willing to take risk,” Goldman told the newspaper. “But what we don’t have is a commitment on Congress’ part.”&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The world needs energy breakthroughs that improve people’s lives without contributing to climate change. As &lt;a href=&quot;https://twitter.com/IEA?ref_src=twsrc%5Etfw&quot;&gt;@IEA&lt;/a&gt; highlights in its latest report, governments have an incredible opportunity to shape the future of energy. &lt;a href=&quot;https://t.co/YCPep4ytgn&quot;&gt;https://t.co/YCPep4ytgn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Bill Gates (@BillGates) &lt;a href=&quot;https://twitter.com/BillGates/status/1085225853963956224?ref_src=twsrc%5Etfw&quot;&gt;January 15, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 26 Jan 2019 20:23:14 +0000</pubDate>
<dc:creator>jkuria</dc:creator>
<og:image>https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-1260x1073.jpg</og:image>
<og:type>article</og:type>
<og:title>Report: Bill Gates promises to add his own billions if Congress helps with his nuclear power push</og:title>
<og:description>Bill Gates said in his year-end letter last month that he planned to work to persuade U.S. leaders to embrace advanced nuclear technologies as a solution to curbing climate change. That work appears to have begun.</og:description>
<og:url>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</dc:identifier>
</item>
<item>
<title>Memory usage of a toy C# server and client with 500K concurrent connections on</title>
<link>https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/README.md</link>
<guid isPermaLink="true" >https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/README.md</guid>
<description>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In our &lt;a href=&quot;https://github.com/kjpgit/techdemo/blob/master/dotnet_task_memory_usage&quot;&gt;last episode&lt;/a&gt;, we measured the memory overhead of the simplest possible .NET Core task / coroutine. Now let's step it up and make a network server that echoes back bytes.&lt;/p&gt;
&lt;p&gt;Source code for the client and server is &lt;a href=&quot;https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/Program.cs&quot;&gt;here&lt;/a&gt;. It uses the standard .NET Core networking library, nothing fancy.&lt;/p&gt;
&lt;h2&gt;Details&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;.NET Core 2.2.102 on Ubuntu 18.04 (&lt;code&gt;dotnet --version&lt;/code&gt;). Memory information from &lt;code&gt;top&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default threadpool settings, which appear to use 10-12 actual threads for the client, on my dual core Pentium&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unix stream sockets to make it simple (TCP is just annoying, even on loopback)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server baseline (1 client): 79 MB RSS / 3260 MB VSS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server loaded (500000 persistent client connections, sending requests every 30 seconds): 1000-1300 MB RSS / 4430 MB VSS (RSS fluctuates due to GC) (&lt;code&gt;dotnet run -c Release -- client 500000 30&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delta: 1000-1200 MB RSS, 1200 MB VSS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Per client overhead (C# server process only, not including kernel): &lt;strong&gt;2000-2400 bytes RSS, 2400 bytes VSS&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also, the client process has a very similar memory usage profile as the server process. They both end up settling at 1GB RSS after a period of time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Again, very impressive! This is only about 2x of what the toy coroutine allocated. It's likely that the memory overhead of the language / runtime is going to be small compared to your application-specific data.&lt;/p&gt;
&lt;p&gt;Obviously C/C++/Rust (or unsafe C#) with handwritten state machines could make this way smaller, e.g. under 100 bytes. But at some point there are diminishing returns, and also developer productivity, bugs, and security are big tradeoffs.&lt;/p&gt;
&lt;p&gt;I appreciate the exceptions thrown by the runtime when I was up against max file descriptor limits. &quot;Errors must not pass silently&quot; - I'm glad C# agrees.&lt;/p&gt;
&lt;p&gt;I also appreciate that everything &quot;just worked&quot; with 500K Unix sockets. I was expecting something in the runtime (e.g. epoll) to break. .NET just keeps surprising me.&lt;/p&gt;
&lt;h2&gt;Additional Testing Tips&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;del&gt;When testing, note that &lt;code&gt;/proc/self/statm&lt;/code&gt; is in 4K pages, unlike &lt;code&gt;top&lt;/code&gt;.&lt;/del&gt; Ruh roh, a commenter pointed out this is NOT true, it can be a mix of small and large pages, so it's useless. Better stick to &lt;code&gt;/proc/self/status&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;swapoff -a&lt;/code&gt; so swap isn't hiding memory usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To increase file descriptors in a GUI session: Set in &lt;code&gt;DefaultLimitNOFILE=2000000&lt;/code&gt; in &lt;code&gt;/etc/systemd/system.conf&lt;/code&gt; and &lt;code&gt;/etc/systemd/user.conf&lt;/code&gt;. Then reboot (yes, reboot). Also update &lt;code&gt;/proc/sys/fs/file-max&lt;/code&gt; to 3000000. Alternatively, just spawn some shells via root...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 26 Jan 2019 20:20:18 +0000</pubDate>
<dc:creator>pplonski86</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8010221?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>kjpgit/techdemo</og:title>
<og:url>https://github.com/kjpgit/techdemo</og:url>
<og:description>Random investigations. A very low level tech blog. - kjpgit/techdemo</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/kjpgit/techdemo/blob/master/dotnet_client_server/README.md</dc:identifier>
</item>
<item>
<title>LaTeX Coffee Stains (2009) [pdf]</title>
<link>http://hanno-rein.de/downloads/coffee.pdf</link>
<guid isPermaLink="true" >http://hanno-rein.de/downloads/coffee.pdf</guid>
<description>&lt;a href=&quot;http://hanno-rein.de/downloads/coffee.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Sat, 26 Jan 2019 20:02:03 +0000</pubDate>
<dc:creator>Tomte</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/8010221?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>kjpgit/techdemo</og:title>
<og:url>https://github.com/kjpgit/techdemo</og:url>
<og:description>Random investigations. A very low level tech blog. - kjpgit/techdemo</og:description>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>http://hanno-rein.de/downloads/coffee.pdf</dc:identifier>
</item>
</channel>
</rss>