<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>ZedRipper: A 16-core Z80 laptop</title>
<link>http://www.chrisfenton.com/the-zedripper-part-1/</link>
<guid isPermaLink="true" >http://www.chrisfenton.com/the-zedripper-part-1/</guid>
<description>&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_top.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-767&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_top.jpg 568w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_top-300x216.jpg 300w&quot; sizes=&quot;(max-width: 568px) 100vw, 568px&quot;/&gt;&lt;p&gt;Meet the ZedRipper – a 16-core, 83 MHz Z80 powerhouse as portable as it is impractical. The ZedRipper is my latest attempt to build a fun ‘project’ machine, with a couple of goals in mind:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Finally use one of the giant FPGA boards I had lying around&lt;/li&gt;
&lt;li&gt;Play a little ‘alternate-history computer engineering’ with a hardware-focused approach to multitasking&lt;/li&gt;
&lt;li&gt;Build a machine that I could write fun, small programs for on my daily train ride&lt;/li&gt;
&lt;li&gt;Build a platform that would allow for relatively easy computer-architecture experiments&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Glamour Shots&lt;/h2&gt;
&lt;p&gt;For those that don’t have time for a wall of text about impractical computer architecture…&lt;/p&gt;
&lt;h2&gt;What is this beast?&lt;/h2&gt;
&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_arch.png&quot; alt=&quot;&quot; class=&quot;wp-image-760&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_arch.png 834w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_arch-300x169.png 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_arch-768x433.png 768w&quot; sizes=&quot;(max-width: 834px) 100vw, 834px&quot;/&gt;&lt;p&gt;The ZedRipper is basically my attempt to build the ultimate &lt;a href=&quot;https://en.wikipedia.org/wiki/CP/M&quot;&gt;CP/M 2.2&lt;/a&gt; computer.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;16-core Z80 processor running at 83.33 MHz&lt;/li&gt;
&lt;li&gt;64KB of dedicated RAM for each Z80&lt;/li&gt;
&lt;li&gt;16-way ANSI-compatible “Multiterm” terminal accelerator&lt;/li&gt;
&lt;li&gt;All CPUs and devices connected with a fully-synchronous, uni-directional ring network operating at 83 MHz&lt;/li&gt;
&lt;li&gt;128MB of storage on SD Card (available via 16 x 8MB disk drives in CP/M)&lt;/li&gt;
&lt;li&gt;A ‘server’ core that boots into CP/M 2.2 and runs a CP/NET file server (written in Turbo Pascal 3 &lt;em&gt;on the machine&lt;/em&gt;!) allowing shared access to the SD card&lt;/li&gt;
&lt;li&gt;15 ‘client’ cores running CP/NOS from ROM. Each client can access the shared storage and run any CP/M 2.2 programs without resource contention with the other cores.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;The Road Not Taken&lt;/h2&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_multitasking.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-773&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_multitasking.jpg 1008w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_multitasking-300x225.jpg 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_multitasking-768x576.jpg 768w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_multitasking-880x660.jpg 880w&quot; sizes=&quot;(max-width: 1008px) 100vw, 1008px&quot;/&gt;Is that a game of Chess &lt;em&gt;and&lt;/em&gt; Planetfall to distract me from my Turbo Pascal editor?&lt;/div&gt;
&lt;p&gt;My adventures with &lt;a href=&quot;http://www.chrisfenton.com/dd9-kaypro-edition/&quot;&gt;porting a game to my Kaypro&lt;/a&gt; left me with surprisingly warm feelings towards this primitive, 40 year old operating system, and I had an idea that I wanted to explore – what if history had taken a different turn, and personal computers had gone down the multi-CPU path right from the start? Even in the 1980s the CPUs themselves (and pretty quickly, the RAM, too) were fairly cheap, but multi-tasking for personal computers was exclusively focused on a ‘time-slicing’ approach whereby one big resource (the RAM or the CPU) got split between competing programs. The hardware just wasn’t really up to the task (and it was extremely difficult to make programs for OSes like DOS play nicely with one another) until we got well into the 386-era and computers with 4MB+ of RAM.&lt;/p&gt;
&lt;p&gt;In the course of my historical computing hobbies, I stumbled upon something that I thought was very fascinating – relatively early in its history, CP/M supported a ‘networked’ version called &lt;a href=&quot;https://www.autometer.de/unix4fun/z80pack/cpnet/cpnet.htm&quot;&gt;CP/NET&lt;/a&gt;. The idea behind it was was one that will still feel pretty familiar to most people – that an office might have one or two ‘real’ machines with large disk drives and printers that it shared with ‘thin-client’ style machines that we’re basically just terminals with CPUs and RAM attached. Each user could basically act as if they had their own private CP/M machine with access to large disks and printers.&lt;/p&gt;
&lt;p&gt;As I mentioned, the CPU and RAM (typically a Z80 with 64KB of DRAM) weren’t terribly expensive, but all of the trappings required to make something a useful computer (disks, printers, monitors, etc.) really added up. Adding additional CPU(s)+RAM somehow just felt too decadent at the time for someone to consider providing a single user with multiple CPUs and RAM. Even CP/M went the time-sliced multi-tasking route with the MP/M OS.&lt;/p&gt;
&lt;p&gt;I found a company called Exidy that came the closest – in 1981 they released their “Multi-NET 80” machine, which allowed up to 16 Z80+RAM cards to be added to it, but it was once again designed to serve 16 individual users rather than a power user with 16 simultaneously running programs.&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/multinet_80-300x219.png&quot; alt=&quot;&quot; class=&quot;wp-image-778&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/multinet_80-300x219.png 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/multinet_80-768x560.png 768w, http://www.chrisfenton.com/wp-content/uploads/2019/12/multinet_80-1024x747.png 1024w, http://www.chrisfenton.com/wp-content/uploads/2019/12/multinet_80.png 1162w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;So close…&lt;/div&gt;
&lt;p&gt;Fast-forward 40 years, and transistors are very cheap indeed. I inherited some pretty monster FPGA boards (Stratix IV 530GX parts) following a lab cleanup, and was looking for something fun to do with one of them. I had stumbled upon &lt;a href=&quot;http://www.searle.wales/&quot;&gt;Grant Searle’s extremely fun “Multi-Comp” project&lt;/a&gt; at some point, and it was pretty easy to get a single-CPU CP/M machine up and running. But I wanted more. I had 530,000 LUTs and megabytes of on-die block ram just waiting for a cool idea. I decided to go big and see if I could build my own multi-core CP/M machine with true-multitasking – nothing clever, just brute force.&lt;/p&gt;
&lt;h2&gt;Getting the software up and running&lt;/h2&gt;
&lt;p&gt;I took a pretty hardware-centric approach to this project, and I didn’t actually write a single line of assembly. CPU 0 boots straight from the ROM Grant provided for his multi-comp project, and the other nodes actually boot from a 4KB CP/NOS ROM I found from an Altair simulator.&lt;/p&gt;
&lt;p&gt;Both ROMs expect to interface with a serial terminal with a pretty standard interface, and the CP/NOS clients expect another serial port connected to a server. As custom logic is basically free on such a large FPGA, I designed some custom address-decoding logic that makes each CPU’s Z-Ring interface appear where it’s expected in the I/O address map.&lt;/p&gt;
&lt;h2&gt;The Internals&lt;/h2&gt;
&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_internals.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-768&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_internals.jpg 1008w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_internals-300x225.jpg 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_internals-768x576.jpg 768w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_internals-880x660.jpg 880w&quot; sizes=&quot;(max-width: 1008px) 100vw, 1008px&quot;/&gt;&lt;p&gt;The heart of the ZedRipper is one of these &lt;a href=&quot;https://www.intel.com/content/www/us/en/programmable/products/boards_and_kits/dev-kits/altera/kit-siv-gx.html&quot;&gt;monsters&lt;/a&gt; sporting a Stratix IV 530GX FPGA. An HSMC breakout card is used to drive the display, receive data from the keyboard controller and connect to the SD Card. You actually use ethernet to upload a new firmware image, so the ethernet port is routed to the side of the case, along with the SD Card adapter and a (currently unused) slot for an external serial port.&lt;/p&gt;
&lt;h2&gt;The Keyboard and Controller&lt;/h2&gt;
&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_keyboard.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-770&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_keyboard.jpg 1008w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_keyboard-300x225.jpg 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_keyboard-768x576.jpg 768w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_keyboard-880x660.jpg 880w&quot; sizes=&quot;(max-width: 1008px) 100vw, 1008px&quot;/&gt;The keyboard and conspicuous hole where a future pointing device will go
&lt;p&gt;I had a compact PS/2 keyboard lying around (salvaged from one of my old laptop projects, actually) that I wanted to interface with the 2.5V I/O on my FPGA. I decided to go the ‘easy’ route, and toss in a Teensy 2.0 microcontroller.&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_kbd_ctrl-300x183.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-771&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_kbd_ctrl-300x183.jpg 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_kbd_ctrl-768x468.jpg 768w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_kbd_ctrl-1024x624.jpg 1024w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_kbd_ctrl.jpg 1104w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;The keyboard controller hot-glued to the underside of the keyboard&lt;/div&gt;
&lt;p&gt;This does the PS/2-to-ASCII translation, and also allows easy mapping of some of the weirder keys (like F1-F12) to ‘magic’ terminal sequences for convenience. The Teensy then outputs bytes to the Z80 over a 9600 baud UART (with a simple resistor voltage divider to change the 5V output into 2.5V for the FPGA). Given that this whole project is basically cobbled together from things lying around my workshop, this was a convenient solution that worked out quite well.&lt;/p&gt;
&lt;h2&gt;The Display&lt;/h2&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/IMG_1917-1024x768.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-762&quot; width=&quot;436&quot; height=&quot;327&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/IMG_1917-1024x768.jpg 1024w, http://www.chrisfenton.com/wp-content/uploads/2019/12/IMG_1917-300x225.jpg 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/IMG_1917-768x576.jpg 768w, http://www.chrisfenton.com/wp-content/uploads/2019/12/IMG_1917-880x660.jpg 880w&quot; sizes=&quot;(max-width: 436px) 100vw, 436px&quot;/&gt;The boot screen with the server running in the upper left and three user programs running on separate CPU cores&lt;/div&gt;
&lt;p&gt;The display is a 1280×800 10.1″ display that accepts VGA input. The FPGA uses a simple resistor network to generate up to 64 colors (R2G2B2). The screen requires an 83.33 MHz pixel clock (1280×800@60Hz), so for simplicity’s sake, the entire design runs synchronously at that frequency.&lt;/p&gt;
&lt;p&gt;Grant’s Multicomp project included VHDL code for a basic ANSI-compatible terminal. I re-wrote the terminal logic in Verilog (just for my own sanity), and then designed a video controller that supports 16 fully independent terminals, all connected via a single Z-Ring node. The 1280×800 display is effectively treated as a 160×50 character-based display (using an 8×16 font), and each terminal acts like an 80×25 ‘sprite’ that can be re-positioned anywhere on the screen (with a priority list to configure the order of precedence for the terminals being drawn). As each terminal is fully independent, it contains its own state machine, along with a 2KB character RAM and 2KB ‘attribute’ RAM (to hold the color information). Each character supports a 4-bit foreground and background color. Since all of the terminals must maintain the same character alignment, any given 8×16 ‘cell’ on the screen can only contain a single character, and all 16 terminals can share a 2KB ROM containing the font. In total then, the display logic uses up around 66KB of Block RAM.&lt;/p&gt;
&lt;p&gt;The general effect of this is that I have an extremely simple window manager for my CP/M terminals, almost entirely in hardware. This is one of the areas that’s most fertile for exploring – at the moment only the server CPU is capable of re-positioning the terminals, but I have longer term plans to add in a mouse-like positioning device to allow a hardware-only mechanism for dragging windows around and changing the display priority.&lt;/p&gt;
&lt;p&gt;As the terminal controller is just another node on the Z-Ring (and the Z-Ring interface for each Z80 is straightforward to re-target), future plans include possibly adding a ‘full-screen’ 160×50 terminal (possibly as a ‘background’) and an actual 1280x800x64-color bitmapped display using some of the fast external SRAM on the board.&lt;/p&gt;
&lt;h2&gt;The Z-Ring&lt;/h2&gt;
&lt;p&gt;Conjuring a pile of Z80s into existence is as easy as writing a generate loop in verilog, but how to connect them up in a sane way? One thing I’ve learned from my day job is that designing a network can be hard. General goals for this network:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Simple implementation&lt;/li&gt;
&lt;li&gt;Simple Interface&lt;/li&gt;
&lt;li&gt;Arbitrarily expandable&lt;/li&gt;
&lt;li&gt;Adequate Performance&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As I mentioned earlier, my Z80s were expecting to interface with some serial ports, so the interface was fairly simple – make it look like a serial port! At its core, the Z-Ring is a synchronous, uni-directional ring network that uses credits for flow control. Each node contains a 1-byte receive buffer for every other node on the network. Coming out of reset then, each node has 1 ‘credit’ for every other node on the network. The design is parameterized, so it could easily scale up to hundreds of nodes with only a bit more logic, but as it’s currently implemented the Z-Ring supports up to 32 nodes (so each node requires a 32-byte buffer).&lt;/p&gt;
&lt;p&gt;The actual ‘bus’ consists of a valid bit, a ‘source’ ID, a ‘destination’ ID and a 1-byte payload (so 19 bits wide). I think it would be pretty straightforward to implement this using TTL logic (if one found themselves transported back to 1981 and couldn’t use FPGAs). Each ‘node’ has 2 pipelined sets of flops on the bus – stage 0 and stage 1 – and when you inject a message, it waits until stage 0 is empty before muxing it into stage 1. Messages are injected at the ‘source’ node and travel around the ring until they reach their destination node, at which point they land in the corresponding buffer and update a ‘data ready’ flag. When the receiving node reads from the buffer, it ‘re-injects’ the original message which continues around the ring until it reaches the source again, thus returning the credit. A ‘feature’ of this scheme is that if you do send a packet to non-existent address, the credit will be automatically returned to you when it loops back around.&lt;/p&gt;
&lt;p&gt;As each stop on the ring consists of 2 pipeline stages, and there is no backpressuring, each message takes no more than 2*(number of nodes) cycles to be delivered. The current implementation has 17 nodes (16 CPUs + the display/keyboard controller) and runs with a 12nS clock, so to deliver a message and receive the credit back you are looking at a minimum of ~400 nS. The display controller can basically sink traffic as quickly as it arrives, so each CPU has ~2-2.5 MB/s of bandwidth to its own terminal (with enough shared bandwidth on the bus to accommodate all 16 CPUs), which is quite a bit as far as terminals go.&lt;/p&gt;
&lt;p&gt;The current implementation is perfectly adequate to get things up and running, but there are a number of pretty straightforward improvements that could be made:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Adding deeper receive buffers would potentially allow much higher bandwidth from a given node – there are plenty of free 1KB block rams on the FPGA, which would allow 32 credits x 32 nodes, so each CPU would in theory be capable of saturating the bus.&lt;/li&gt;
&lt;li&gt;Add support for an ‘address’ mode – Adding a 16-bit (or more!) address would allow DMA operations between nodes (and adding a simple DMA engine to each node would be pretty easy). The FPGA board has a ton of extra hardware (several megabytes of varying static RAMs, and a gigabyte or so of DDR3) that could be potentially fun to interface with.&lt;/li&gt;
&lt;li&gt;Add some sort of flow-control (and buffering) between nodes to allow more flexible decoupling.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But I’m perfectly content to leave those for a future rainy day for now.&lt;/p&gt;
&lt;h2&gt;Power!&lt;/h2&gt;
&lt;p&gt;The FPGA dev board requires a 14V-20V input, while the display requires a 12V input, and the Teensy and PS/2 keyboard requires a 5V input. Conveniently, the FPGA board has 3.3V, 5V and 12V regulators that are relatively easy to tap into, so the FPGA board accepts power directly from a beefy 5000 mAh / 14.4V LiPo battery pack and then supplies power to all of the other devices. One of the trickier bits of this project was that I didn’t want to have to dis-assemble the laptop to re-charge it, but the battery has both the normal +/- power connector, as well as a ‘balance’ connector that connects to each individual cell for recharging purposes. My somewhat ‘meh’ solution to this was to have the power switch toggle between connecting the main supply to the FPGA and to a charging plug (along with the balance connector) in a little internal compartment exposed by a sliding door. It’s kind of awkward, but you can just slide the door open and fish out the connectors to plug into the charger without needing to break out an M3 hex key.&lt;/p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;&lt;img src=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_charging-300x262.jpg&quot; alt=&quot;&quot; class=&quot;wp-image-769&quot; srcset=&quot;http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_charging-300x262.jpg 300w, http://www.chrisfenton.com/wp-content/uploads/2019/12/zr_charging.jpg 754w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;Charging is . . . slightly awkward&lt;/div&gt;
&lt;p&gt;I haven’t actually tested it properly, but the battery lasts for 3+ hours (which is more than adequate to cover my daily train ride). If I had to guess it’s probably closer to the ~6 hour range without any power optimization effort on my part. It doesn’t support simultaneous charging / usage, but the battery life is sufficiently good that it hasn’t been a problem.&lt;/p&gt;
&lt;h2&gt;The Case&lt;/h2&gt;
&lt;p&gt;The case is fairly standard ‘hackerspace’ construction – a combination of laser-cut 3mm plywood and 3D printed plastic for everything else. I sprung for proper position-control hinges for the screen, so it feels like a relatively normal (if somewhat less svelte) laptop when you’re using it. I wanted to give it some 1980’s flair, so the screen actually has some “Cray”-ish angles at the top, and there is a pleather wrist-rest. The actual edge of the laser-cut plywood is pretty uncomfortable against your wrists while typing, so the wrist-rest is surprisingly functional.&lt;/p&gt;
&lt;h2&gt;Benchmarking!&lt;/h2&gt;
&lt;p&gt;I haven’t tried any actual CP/M benchmarking programs (I assume there are some out there, but I’ve never looked very hard), but, as this machine was mostly built with writing Turbo Pascal in mind, I did at least try some micro benchmarks. I can do between 15k-35k floating point operations/sec (using the 48-bit Real type in TP), and ~1 million integer operations/sec (using the 16-bit Integer type in TP), so all-in-all not too bad for an 8-bit CPU and a fairly nice programming environment.&lt;/p&gt;
&lt;p&gt;Designing a floating point accelerator might be a fun project some day, and there is plenty of logic resources to support it.&lt;/p&gt;
&lt;h2&gt;FPGA Utilization&lt;/h2&gt;
&lt;p&gt;As I’ve mentioned before, all of the logic so far is pretty lightweight, occupying a mere 7% of on-chip logic resources (although ~40% of the total on-chip block ram and 100% of the big M144k block rams).&lt;/p&gt;
&lt;p&gt;Combinational ALUTs 31,808 / 424,960 ( 7 % )&lt;br/&gt;Memory ALUTs 0 / 212,480 ( 0 % )&lt;br/&gt;Dedicated logic registers 10,231 / 424,960 ( 2 % )&lt;br/&gt;Logic utilization 10 %&lt;br/&gt;Total registers 10231&lt;br/&gt;Total block memory bits 9,005,056 / 21,233,664 ( 42 % )&lt;br/&gt;DSP block 18-bit elements 0 / 1,024 ( 0 % )&lt;/p&gt;
&lt;p&gt;There is plenty of room for fun experimentation going forward (and remarkably, compiling this project only takes ~10 minutes).&lt;/p&gt;
&lt;h2&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;I have immediate plans (as in, I have the hardware lying around, I just haven’t had time to solder it yet) for the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Stain and seal things! It’s made of thin plywood. It really wants to be coated in something.&lt;/li&gt;
&lt;li&gt;Joystick-like pointing device – to be connected to the Teensy that acts as a keyboard controller and fill that conspicuous hole.&lt;/li&gt;
&lt;li&gt;Battery Monitoring – once again, the ADC on the Teensy is going to provide some lightweight battery monitoring so that I have some idea how charged things are&lt;/li&gt;
&lt;li&gt;WiFi – I have an ESP32 lying around waiting to run Zimodem! Coupled with my phone in wifi hotspot mode, it should allow me to have ‘net access on the go =) There are good terminal apps available for CP/M, but it would be fun to try to write things like an IRC client or a very simple web browser. It also allows convenient use of kermit for file transfers to a modern computer running linux.&lt;/li&gt;
&lt;li&gt;Add an externally-accessible serial port for communicating with another machine (there is already a 3D-printed slot for the connector, I just need to wire it in)&lt;/li&gt;
&lt;li&gt;Status LED! There’s already a mounting hole in the front – current plan is to connect it to the SD Card’s drive access signal.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Longer term, there are lots of neat hardware ideas that might be fun to experiment with:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How fast can you make a Z80 go? The first step would be to decouple the CPU speed from the pixel clock, but it would also be fun to try applying some modern computer architecture techniques to a Z80 (pipelining, register re-naming, branch prediction, wider memory for pre-fetching, etc.)&lt;/li&gt;
&lt;li&gt;Similarly, adding custom accelerators for things like floating point might be fun. There are 1024 completely unused DSP blocks on this chip, and I bet no one has tried to build an accelerator for the 48-bit Real format that turbo pascal uses.&lt;/li&gt;
&lt;li&gt;Use the existing hardware! This development board is brimming with unused memory, primarily:
&lt;ul&gt;&lt;li&gt;512 MB DDR3 SDRAM with a 64 bit data bus&lt;/li&gt;
&lt;li&gt;128 MB DDR3 SDRAM with a 16 bit data bus&lt;/li&gt;
&lt;li&gt;Two 4 MB QDR II+ SRAMs with 18 bit data buses&lt;/li&gt;
&lt;li&gt;64 MB flash&lt;/li&gt;
&lt;li&gt;2 MB SSRAM&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Better video hardware! The first step would probably be to add support for a ‘full-screen’ 160×50 terminal and the ability to scale a regular 80×25 terminal up by 2x. The aforementioned external SSRAM would also make it quite straightforward to add a full 1280×800@6-bit, fully bit-mapped display.&lt;/li&gt;
&lt;li&gt;Expand the capabilities of the current terminal – I think I could add compatibility with the ADM-3A-ish terminal (plus graphics support) used by the Kaypro/84 series, so that way I would have access to a slightly larger set of software (and not have to port DD9!). I could also probably think of custom escape sequences that might be convenient to add.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I’ve only had the machine up and running for a few days, but I’ve got to say, it’s pretty great. The screen is nice and clear, the keyboard is spacious and comfortable, and it’s bulky, but it doesn’t actually weigh all that much (and still easily fits in my backpack). It’s even surprisingly ergonomic to use on the train.&lt;/p&gt;
&lt;p&gt;Usage-wise, I also think I’m really on to something. Just the ability to have a text editor open for taking notes in one window while I’m debugging some turbo pascal code in another window is extremely convenient (or taking notes while playing Zork!). It feels like this could have been a genuinely viable approach towards building a low-cost, multi-tasking CP/M environment.&lt;/p&gt;
&lt;h2&gt;Itching to build your own?&lt;/h2&gt;
&lt;p&gt;I don’t actually have an easy way to get files *off* of the machine yet, so for now the most useful part (the CP/Net file server written in Turbo Pascal) is kind of trapped on the machine. Stay tuned for a future update with all of the Verilog and TP code though (and shoot me an e-mail if you really can’t wait). At some point I should probably join the 21st century and get a github account, too. Alas, that whole ‘free time’ thing…&lt;/p&gt;
</description>
<pubDate>Tue, 10 Dec 2019 19:59:14 +0000</pubDate>
<dc:creator>pmarin</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.chrisfenton.com/the-zedripper-part-1/</dc:identifier>
</item>
<item>
<title>OpenLayers</title>
<link>https://openlayers.org/</link>
<guid isPermaLink="true" >https://openlayers.org/</guid>
<description>&lt;p&gt;OpenLayers makes it easy to put a dynamic map in any web page. It can display map tiles, vector data and markers loaded from any source. OpenLayers has been developed to further the use of geographic information of all kinds. It is completely free, Open Source JavaScript, released under the 2-clause BSD License (also known as the FreeBSD).&lt;/p&gt;
</description>
<pubDate>Tue, 10 Dec 2019 17:37:49 +0000</pubDate>
<dc:creator>devicetray0</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://openlayers.org/</dc:identifier>
</item>
<item>
<title>Things that are illegal to build in most American cities now</title>
<link>https://twitter.com/CascadianSolo/status/1204306278173958145</link>
<guid isPermaLink="true" >https://twitter.com/CascadianSolo/status/1204306278173958145</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://twitter.com/CascadianSolo/status/1204306278173958145&quot;&gt;https://twitter.com/CascadianSolo/status/1204306278173958145&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=21754205&quot;&gt;https://news.ycombinator.com/item?id=21754205&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 277&lt;/p&gt;
&lt;p&gt;# Comments: 235&lt;/p&gt;
</description>
<pubDate>Tue, 10 Dec 2019 16:55:11 +0000</pubDate>
<dc:creator>oftenwrong</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/CascadianSolo/status/1204306278173958145</dc:identifier>
</item>
<item>
<title>Facebook Tells Barr It Won’t Open Up Encrypted Messages</title>
<link>https://www.nytimes.com/2019/12/10/technology/whatsapp-barr-encryption.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/12/10/technology/whatsapp-barr-encryption.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;WASHINGTON — Facebook executives and Attorney General William P. Barr sparred on Monday over whether encrypted messaging products should be open to law enforcement, escalating a standoff over privacy and policing.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In a letter to Mr. Barr, the executives overseeing Facebook’s &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/10/03/us/politics/barr-whatsapp-facebook-encryption.html&quot; title=&quot;&quot;&gt;WhatsApp and Messenger&lt;/a&gt;, Will Cathcart and Stan Chudnovsky, wrote that creating a so-called backdoor into their services for law enforcement would make their users less safe.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“The ‘backdoor’ access you are demanding for law enforcement would be a gift to criminals, hackers and repressive regimes, creating a way for them to enter our systems and leaving every person on our platforms more vulnerable to real-life harm,” the executives said. Their letter was sent ahead of a Senate hearing on Tuesday about encryption, at which Facebook and Apple executives testified.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;At an afternoon event, Mr. Barr said dealing with problems that strong encryption created for law enforcement was one of the Justice Department’s “highest priorities.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-hidden=&quot;true&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Mr. Barr said drug cartels, child pornographers and other criminals increasingly used and hid behind messaging apps that were beyond investigators’ access even with a warrant. Companies like Facebook are selling the idea that “no matter what you do, you’re completely impervious to government surveillance,” Mr. Barr said.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“Do we want to live in a society like that?” he asked. “I don’t think we do.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The dueling comments were the latest volleys in a yearslong fight between tech companies and law enforcement officials over how to balance privacy and security with digital communications. It has ensnared not only Facebook but also Apple, and it promises to become more intense as more messaging services become encrypted.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In 2016, a &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2016/02/17/us/judge-tells-apple-to-help-unlock-san-bernardino-gunmans-iphone.html&quot; title=&quot;&quot;&gt;federal judge ordered&lt;/a&gt; Apple to help the Federal Bureau of Investigation unlock an iPhone tied to a 2015 mass shooting in San Bernardino, Calif. The agency ultimately &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2016/03/29/technology/apple-iphone-fbi-justice-department-case.html&quot; title=&quot;&quot;&gt;unlocked the phone&lt;/a&gt; without Apple’s help, easing tensions for a time.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-hidden=&quot;true&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Mr. Barr renewed the debate this year, saying Facebook’s moves toward end-to-end encryption — which shields the content of messages from everyone but the sender and recipient — makes it harder for law enforcement officers to track malicious behavior online. The technology &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/10/02/technology/encryption-online-child-sex-abuse.html&quot; title=&quot;&quot;&gt;hinders investigations of child predators&lt;/a&gt; and terrorists, he has said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-hidden=&quot;true&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Mr. Barr, joined by his British and Australian counterparts, wrote an open letter to Facebook’s chief executive, Mark Zuckerberg, in October asking that he take steps to enable “law enforcement to obtain lawful access to content in a readable and usable format.” Companies, they said, “should not deliberately design their systems to preclude any form of access to content,” especially for the investigations of the most serious crimes.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-hidden=&quot;true&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Lawmakers of both parties echoed those worries on Tuesday, threatening to take action if the companies didn’t satisfy their concerns.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“You’re going to find a way to do this, or we’re going to do this for you,” said Senator Lindsey Graham, Republican of South Carolina and the chairman of the Judiciary Committee. “You’re either the solution or you’re the problem.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;If Mr. Barr wants to push the issue with Facebook or another tech company, he could take the issue to court, as the government did during the fight over encryption with Apple in 2016. In that case, the Justice Department had secured a search warrant for the phone of an attacker in the San Bernardino shooting. Prosecutors successfully pursued a court order compelling Apple’s assistance. Apple opposed the order. But when the agency found another way to unlock the phone, it dropped the case.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Throughout the hearing on Tuesday, Facebook and Apple representatives said the companies were committed to working with law enforcement. The witness from Facebook detailed how the company could detect malicious content despite encryption.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Encrypting its messaging products is the central aspect of &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/03/06/technology/mark-zuckerberg-facebook-privacy.html&quot; title=&quot;&quot;&gt;Facebook’s plan to rebrand itself as privacy focused&lt;/a&gt;, after being battered for years by revelations that it mishandled user data. But it has also put the company, which is already the subject of consumer privacy and antitrust investigations, on another collision course with governments around the world.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-hidden=&quot;true&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In recent years, Facebook has undergone a networkwide shift from spreading information openly through the News Feed to more private channels, like Messenger, WhatsApp and Instagram Direct. As users have flocked to one-to-one and private group messaging, it has become more difficult to root out the spread of illicit activity — drug dealing, child pornography, firearms trafficking.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The network also has come under intense criticism for the role private messaging has played in the proliferation of misinformation. In the months before the Brazilian presidential election in October 2018, WhatsApp groups created by anonymous users spread misleading voting and candidate information.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In most regions outside the United States, WhatsApp plays an outsize role in how people communicate with one another, surpassing standard text messaging and other methods. Facebook’s strategy, led by Mr. Zuckerberg, has been to seize on that popularity and focus more on private and group-chat experiences.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In March, Mr. Zuckerberg &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2019/03/06/technology/mark-zuckerberg-facebook-privacy.html&quot; title=&quot;&quot;&gt;unveiled a grand plan to encrypt and knit together&lt;/a&gt; the back ends of the company’s messaging services, an enormous feat of coding that could take years. The move could eventually help Facebook monetize those services, which account for relatively little revenue.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Jay Sullivan, who oversees privacy and integrity for Messenger, told lawmakers at Tuesday’s hearing, “We think it is critical that American companies lead in the area of secure, encrypted messaging.”&lt;/p&gt;
&lt;p class=&quot;css-jwz2nf etfikam0&quot;&gt;David McCabe and Katie Benner reported from Washington, and Mike Isaac from San Francisco.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-ew4tgv&quot; aria-hidden=&quot;true&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 10 Dec 2019 15:15:42 +0000</pubDate>
<dc:creator>i_am_not_elon</dc:creator>
<og:url>https://www.nytimes.com/2019/12/10/technology/whatsapp-barr-encryption.html</og:url>
<og:type>article</og:type>
<og:title>Facebook and Barr Escalate Standoff Over Encrypted Messages</og:title>
<og:image>https://static01.nyt.com/images/2019/12/10/business/10facebook-sub/10facebook-sub-facebookJumbo.jpg</og:image>
<og:description>With 1.5 billion users, Facebook’s WhatsApp is perhaps the world’s most commonly used encrypted communications platform.</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/12/10/technology/whatsapp-barr-encryption.html</dc:identifier>
</item>
<item>
<title>White House Veterans Helped Gulf Monarchy Build Secret Surveillance Unit</title>
<link>https://www.reuters.com/investigates/special-report/usa-raven-whitehouse/</link>
<guid isPermaLink="true" >https://www.reuters.com/investigates/special-report/usa-raven-whitehouse/</guid>
<description>&lt;section class=&quot;content main&quot; itemprop=&quot;mainContentOfPage&quot;&gt;&lt;nav class=&quot;special-report-nav header navbar navbar-full fixed-top bg-dark navbar-dark navbar-expand-md &quot; role=&quot;navigation&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/SiteNavigationElement&quot;&gt;&lt;div class=&quot;navbar-brand&quot;&gt;
            &lt;a class=&quot;logo-container&quot; href=&quot;https://www.reuters.com/&quot;&gt;
                &lt;img class=&quot;logo reuters-investigates&quot; src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/images/reuters-investigates.png?v=361818101219&quot;/&gt;&lt;/a&gt;
            &lt;p&gt;
                
                
                            Made in America
                
                
            &lt;/p&gt;
        &lt;/div&gt;
        &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#Reuters-Main-Nav&quot; aria-controls=&quot;navbarSupportedContent&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt;
			&lt;span class=&quot;navbar-toggler-icon&quot;/&gt;
		&lt;/button&gt;

        &lt;div class=&quot;collapse navbar-collapse nav-spied&quot; id=&quot;Reuters-Main-Nav&quot;&gt;
            
            
                &lt;div class=&quot;social navbar-nav ml-auto flex-row&quot;&gt;
                    &lt;div class=&quot;nav-item&quot;&gt;
                        &lt;a data-id=&quot;twitter&quot; href=&quot;https://twitter.com/intent/tweet?text=Made%20in%20America&amp;amp;via=SpecialReports&amp;amp;url=https%3A//www.reuters.com/investigates/special-report/usa-raven-whitehouse&quot;&gt;
                            &lt;i class=&quot;fab fa-twitter&quot; aria-hidden=&quot;true&quot;/&gt;
                        &lt;/a&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;nav-item&quot;&gt;
                        &lt;a data-id=&quot;facebook&quot; href=&quot;https://www.facebook.com/sharer/sharer.php?u=https%3A//www.reuters.com/investigates/special-report/usa-raven-whitehouse&amp;amp;t=Made%20in%20America&quot; onclick=&quot;javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=300,width=600');return false;&quot; target=&quot;_blank&quot; title=&quot;Share on Facebook&quot;&gt;
                            &lt;i class=&quot;fab fa-facebook-f&quot; aria-hidden=&quot;true&quot;/&gt;
                        &lt;/a&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            
        &lt;/div&gt;
    &lt;/nav&gt;



        &lt;/section&gt;
    
            &lt;nav class=&quot;footer navbar bg-dark navbar-inverse flex-row&quot;&gt;&lt;div class=&quot;navbar-brand&quot;&gt;
                    &lt;a class=&quot;logo-container&quot; href=&quot;https://www.reuters.com/&quot;&gt;
                        &lt;img src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/images/reuters-footer.png?v=361818101219&quot; class=&quot;footer-logo&quot;/&gt;&lt;/a&gt;
                &lt;/div&gt;
                &lt;div class=&quot;mx-auto&quot;&gt;
                    &lt;ul class=&quot;navbar-nav d-block&quot;&gt;&lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link&quot; href=&quot;http://thomsonreuters.com/&quot;&gt;
                                Thomsonreuters.com
                            &lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link&quot; href=&quot;https://www.reuters.com/privacy-policy&quot;&gt;
                                Privacy Policy
                            &lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link&quot; href=&quot;https://www.reuters.com/terms-of-use&quot;&gt;
                                Terms of Use
                            &lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link&quot; href=&quot;https://thomsonreuters.com/copyright/&quot;&gt;
                                Copyright
                            &lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li class=&quot;nav-item&quot;&gt;
                            &lt;a class=&quot;nav-link&quot; href=&quot;https://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;
                                Trust Principles
                            &lt;/a&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;&lt;/div&gt;
            &lt;/nav&gt;&lt;!-- Google Analytics --&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/node_modules/jquery/dist/jquery.js&quot;&gt;&lt;/scr ipt&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/bower_components/underscore/underscore.js&quot;&gt;&lt;/sc ript&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/bower_components/backbone/backbone.js&quot;&gt;&lt;/scr ipt&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/bower_components/pym.js/dist/pym.js&quot;&gt;&lt;/scr ipt&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/bower_components/moment/moment.js&quot;&gt;&lt;/sc ript&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/bower_components/waypoints/lib/noframework.waypoints.js&quot;&gt;&lt;/sc ript&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/node_modules/popper.js/dist/umd/popper.js&quot;&gt;&lt;/sc ript&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/node_modules/bootstrap/dist/js/bootstrap.js&quot;&gt;&lt;/sc ript&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/scripts/vendor/riveted.min.js&quot;&gt;&lt;/scr ipt&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/scripts/vendor/jquery.scrolldepth.min.js&quot;&gt;&lt;/sc ript&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/scripts/utils.js&quot;&gt;&lt;/scr ipt&gt;--&gt;&lt;!-- &lt;scr ipt src=&quot;https://www.reuters.com/investigates/static/4-3-1/en/scripts/main.js&quot;&gt;&lt;/scr ipt&gt;--&gt;&lt;!--
            &lt;scr ipt&gt;
                $(document).on('ready', function(){
                    try{
                        Reuters.Graphics.generateGraphic('#ReutersGraphic');
                    }catch(e){
                        console.log('unable to load graphic.');
                    }
                });
            &lt;/scr ipt&gt;
        --&gt;</description>
<pubDate>Tue, 10 Dec 2019 15:14:29 +0000</pubDate>
<dc:creator>mzs</dc:creator>
<og:url>https://www.reuters.com/investigates/special-report/usa-raven-whitehouse/</og:url>
<og:title>Made in America</og:title>
<og:type>article</og:type>
<og:image>https://www.reuters.com/investigates/special-report/assets/usa-raven-whitehouse/mastheads/share-card.jpg?v=361818101219</og:image>
<og:description>The ex-White House staff who helped devise the UAE's bold spying mission</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/investigates/special-report/usa-raven-whitehouse/</dc:identifier>
</item>
<item>
<title>Apple Sues Nuvia’s CEO, a Former Employee</title>
<link>https://www.eetimes.com/apple-sues-nuvias-ceo-a-former-employee/</link>
<guid isPermaLink="true" >https://www.eetimes.com/apple-sues-nuvias-ceo-a-former-employee/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.eetimes.com/apple-sues-nuvias-ceo-a-former-employee/&quot;&gt;https://www.eetimes.com/apple-sues-nuvias-ceo-a-former-employee/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=21752781&quot;&gt;https://news.ycombinator.com/item?id=21752781&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 261&lt;/p&gt;
&lt;p&gt;# Comments: 259&lt;/p&gt;
</description>
<pubDate>Tue, 10 Dec 2019 14:36:32 +0000</pubDate>
<dc:creator>JoachimS</dc:creator>
<dc:identifier>https://www.eetimes.com/apple-sues-nuvias-ceo-a-former-employee/</dc:identifier>
</item>
<item>
<title>Machine Learning Crash Course</title>
<link>https://developers.google.com/machine-learning/crash-course</link>
<guid isPermaLink="true" >https://developers.google.com/machine-learning/crash-course</guid>
<description>&lt;h3 id=&quot;a-self-study-guide-for-aspiring-machine-learning-practitioners&quot;&gt;A self-study guide for aspiring machine learning practitioners&lt;/h3&gt;
&lt;p&gt;Machine Learning Crash Course features a series of lessons with video lectures, real-world case studies, and hands-on practice exercises.&lt;/p&gt;
</description>
<pubDate>Tue, 10 Dec 2019 13:31:20 +0000</pubDate>
<dc:creator>TakakiTohno</dc:creator>
<og:type>website</og:type>
<og:title>Machine Learning Crash Course  |  Google Developers</og:title>
<og:description>An intensive, practical 20-hour introduction to machine learning fundamentals, with companion TensorFlow exercises.</og:description>
<og:url>https://developers.google.com/machine-learning/crash-course</og:url>
<og:image>/machine-learning/crash-course/images/mlcc-hero.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developers.google.com/machine-learning/crash-course</dc:identifier>
</item>
<item>
<title>Asciinema – Record and share terminal sessions</title>
<link>https://asciinema.org/</link>
<guid isPermaLink="true" >https://asciinema.org/</guid>
<description>&lt;pre class=&quot;asciinema-terminal font-small&quot;&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;([0 0] [0 1] [0 2] [0 3] [0 4] [0 5] [0 6] [0 7] [0 8] [0 9] [1 0] [1 1] [1 2] [&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;] [1 6] [1 7] [1 8] [1 9] [2 0] [2 1] [2 2] [2 3] [2 4] [2 5] [2 6] [2 7] [2 8] &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;1] [3 2] [3 3] [3 4] [3 5] [3 6] [3 7] [3 8] [3 9] [4 0] [4 1] [4 2] [4 3] [4 4]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt; 7] [4 8] [4 9])                                                                &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;user=&amp;gt; &lt;/span&gt;&lt;span class=&quot;bright fg-243&quot;&gt;;; Ctrl-X Ctrl-D will give you the documentation for the current var&lt;/span&gt;&lt;span class=&quot;&quot;&gt;     &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;user=&amp;gt; (&lt;/span&gt;&lt;span class=&quot;bright fg-39&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;&quot;&gt; [x (&lt;/span&gt;&lt;span class=&quot;bright fg-178&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;&quot;&gt; 5)                                                        &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;  #_=&amp;gt;       y (&lt;/span&gt;&lt;span class=&quot;bright fg-178&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;&quot;&gt; 10)]                                                      &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;  #_=&amp;gt;   [x y])                                                                 &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;([0 0] [0 1] [0 2] [0 3] [0 4] [0 5] [0 6] [0 7] [0 8] [0 9] [1 0] [1 1] [1 2] [&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;] [1 6] [1 7] [1 8] [1 9] [2 0] [2 1] [2 2] [2 3] [2 4] [2 5] [2 6] [2 7] [2 8] &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;1] [3 2] [3 3] [3 4] [3 5] [3 6] [3 7] [3 8] [3 9] [4 0] [4 1] [4 2] [4 3] [4 4]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt; 7] [4 8] [4 9])                                                                &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;user=&amp;gt; &lt;/span&gt;&lt;span class=&quot;bright fg-243&quot;&gt;;; What if the documentation is too long, you ask?&lt;/span&gt;&lt;span class=&quot;&quot;&gt;                       &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;  #_=&amp;gt; &lt;/span&gt;&lt;span class=&quot;bright fg-243&quot;&gt;;; a interactive less view of the docs allows scrolling&lt;/span&gt;&lt;span class=&quot;&quot;&gt;                  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;&quot;&gt;user=&amp;gt; (de                                                                      &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;</description>
<pubDate>Tue, 10 Dec 2019 08:39:16 +0000</pubDate>
<dc:creator>tomerbd</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://asciinema.org/</dc:identifier>
</item>
<item>
<title>Informer: A bot library that allows masquerading as real users on Telegram</title>
<link>https://github.com/paulpierre/informer</link>
<guid isPermaLink="true" >https://github.com/paulpierre/informer</guid>
<description>&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/informer-logo.gif&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/informer-logo.gif&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Informer (TGInformer) is a bot library that allows you to masquerade as multiple REAL users on telegram&lt;/strong&gt; and spy on 500+ Telegram channels &lt;strong&gt;per account&lt;/strong&gt;. Details are logged to a MySQL database, a private Google Sheet and your own private channel for analysis.&lt;/p&gt;
&lt;p&gt;This is a functioning proof-of-concept project with known bugs. Feel free to fork, share and drop me a line.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/13.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/13.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Potential Business Applications&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Sock puppeteering to overthrow a despotic regime&lt;/li&gt;
&lt;li&gt;Brand monitoring and sentiment analysis&lt;/li&gt;
&lt;li&gt;Shilling cryptocurrency at a moments notice for financial gain&lt;/li&gt;
&lt;li&gt;Influencing sentiment on topical issues&lt;/li&gt;
&lt;li&gt;Getting in on price action early&lt;/li&gt;
&lt;li&gt;Running analysis of a telegram channel&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Run all your bots in the cloud while you sleep. Support for Google App Engine Flexible Environment and Docker&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/14.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/14.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Write all notifications to private Google Sheet&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/9.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/9.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/8.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/8.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Logging contextual message and channel data to a private channel and database&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Stores meta information about sender of message, channel, number of participants in the channel&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/7.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/7.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Auto-joins channels from CSV list containing Telegram channel URLs&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/10.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/10.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Persists session of channels joined&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Login once, bot stays logged in forever without needing 2FA re-authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Join up to 500 channels per account&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/4.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/4.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Uses REAL accounts avoiding bot detection, &lt;strong&gt;THIS IS NOT A TELEGRAM BOT&lt;/strong&gt; but a real automated user account. This is an important distinction because the official bot API is limited and bots are often restricted in public channels.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;h3&gt;OS / Infrastructure&lt;/h3&gt;
&lt;h3&gt;Python packages&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Jinja2 (2.10.3)&lt;/li&gt;
&lt;li&gt;SQLAlchemy (1.3.11)&lt;/li&gt;
&lt;li&gt;Werkzeug (0.16.0)&lt;/li&gt;
&lt;li&gt;pytz (2019.3)&lt;/li&gt;
&lt;li&gt;sqlalchemy-migrate (0.13.0)&lt;/li&gt;
&lt;li&gt;requests (2.7.0)&lt;/li&gt;
&lt;li&gt;Flask (1.1.1)&lt;/li&gt;
&lt;li&gt;Telethon (1.10.8)&lt;/li&gt;
&lt;li&gt;mysql-connector-python (8.0.18)&lt;/li&gt;
&lt;li&gt;gspread (3.1.0)&lt;/li&gt;
&lt;li&gt;oauth2client (4.1.3)&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h3&gt;Run locally without Docker&lt;/h3&gt;
&lt;p&gt;If you’re not interested in kicking the tires and want to light some fires instead, you can run the Informer bot locally and not in a docker instance. A licky boom boom down.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create a virtual environment in the local directory&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;virtualenv venv&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;Install the depencies in requirements.txt&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot; readability=&quot;2.2625698324022&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Use the instructions below to retrieve your Telegram user API ID and API hash and supply this information in &lt;code&gt;build_database.py&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.5659574468085&quot;&gt;
&lt;p&gt;Create a MySQL database locally and supply the credentials in the bot.py. MySQL comes with MacOS. You can also install the latest version for your OS and follow the instructions here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/mysql-getting-started/en/&quot; rel=&quot;nofollow&quot;&gt;https://dev.mysql.com/doc/mysql-getting-started/en/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Run &lt;code&gt;python3 build_database.py&lt;/code&gt; . This will create the models in &lt;code&gt;models.py&lt;/code&gt; inside your new MySQL database and ensure it is unicode safe for those fun eye-bleeding emojis on TG.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It will also setup some default values for keywords to monitor and channels to join supplied in channels.csv.&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;&lt;li&gt;Create a group or channel on Telegram and retrieve its channel ID. This will be the channel where your snitching bot will drop all its notifications of keywords mentioned in other channels. Provide this value in &lt;code&gt;tg_notifications_channel_id=&amp;lt;your_channel_id&amp;gt;&lt;/code&gt; inside &lt;code&gt;bot.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/2.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/2.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;If all is well we can go ahead and fire up Informer by running &lt;code&gt;python3 bot.py &amp;lt;your_api_user_id&amp;gt;&lt;/code&gt; which will take your configuration and spin up an instance of the &lt;code&gt;TGInformer&lt;/code&gt; class and begin surveillance. You will need to provide the API ID you generated from the instructions below as an argument so the bot knows which account to log into.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If this is your first time logging in, it will send you an authorization code via SMS or via the Telegram app. You will need to enter this to authenticate the bot and log into the Telegram servers. You will only need to do this once as a session file will be generated locally to persist all sessions. This entire process is handled by the Telethon Telegram client SDK.&lt;/p&gt;
&lt;h3&gt;Create a telegram account with Burner App&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Install the app Burner&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/3.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/3.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot; readability=&quot;0&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;You first will need to create Telegram API credentials by providing a phone number here: &lt;a href=&quot;https://my.telegram.org/auth&quot; rel=&quot;nofollow&quot;&gt;https://my.telegram.org/auth&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Validate with Burner. You will be sent an authcode via SMS, you will need to provide&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/1.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/1.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&quot;5&quot; readability=&quot;-2&quot;&gt;&lt;li&gt;
&lt;p&gt;Log into Telegram&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Attempt to login with the app by running&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;python3 bot.py &amp;lt;api_user_id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;&lt;li&gt;Since you are logging in with Telethon it will ask you for your authcode in the terminal. This was sent via Telegram message or SMS. Provide this and it will save your session credentials in the session file mentioned below. You will no longer need to authenticate so long as you have the session file saved.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Sessions are saved in the &lt;code&gt;session/&lt;/code&gt; folder as &lt;code&gt;&amp;lt;telegram_phone_number&amp;gt;.session&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Scaling Telegram accounts&lt;/h2&gt;
&lt;p&gt;Figuring out how to scale accounts was a bit of a nightmare as I needed an automated process. Telegram requires you use a real phone number that can recieve texts from a shortcode.&lt;/p&gt;
&lt;p&gt;Unfortunately services with APIs like Twilio are prohibited from receiving SMS from shortcodes in the US, Canada and UK &lt;a href=&quot;https://support.twilio.com/hc/en-us/articles/223181668-Can-Twilio-numbers-receive-SMS-from-a-short-code-&quot; rel=&quot;nofollow&quot;&gt;https://support.twilio.com/hc/en-us/articles/223181668-Can-Twilio-numbers-receive-SMS-from-a-short-code-&lt;/a&gt; for fraud purposes. This would’ve been ideal, bahumbug.&lt;/p&gt;
&lt;p&gt;A whole evening was wasted on this endeavor until I remembered a great app I used in the past: Burner (&lt;a href=&quot;https://www.burnerapp.com/&quot; rel=&quot;nofollow&quot;&gt;https://www.burnerapp.com/&lt;/a&gt;) — which coincidentally does have an API (&lt;a href=&quot;https://developer.burnerapp.com/api-documentation/incoming-webhooks/&quot; rel=&quot;nofollow&quot;&gt;https://developer.burnerapp.com/api-documentation/incoming-webhooks/&lt;/a&gt;). Meaning you can dynamically generate numbers, instantiate a new account and authenticate it all via Telegram’s client SDK in Python (Telethon: &lt;a href=&quot;https://docs.telethon.dev/en/latest/&quot; rel=&quot;nofollow&quot;&gt;https://docs.telethon.dev/en/latest/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The best part is Burner numbers are free for 14 days. Telegram accounts connected via client API need only login once and permanently persist sessions. I have not integrated with the Burner API, but the process is straight forward.&lt;/p&gt;
&lt;h3&gt;Telethon SDK&lt;/h3&gt;
&lt;p&gt;The bot is built on top of the Telethon Python SDK (&lt;a href=&quot;https://docs.telethon.dev/en/latest/&quot; rel=&quot;nofollow&quot;&gt;https://docs.telethon.dev/en/latest/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A few things to note and gotchas encountered in building this proof of concept:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Rate Limiting&lt;/strong&gt; Telegram does intense rate limiting which will throw FloodWaitErrors. In my research it seems like no one knows the algorithm for this but you want your back off waits to scale in response because when you violate and exceed the unknown rate limit, the waits become exponential. I’ve found a happy medium with my approach to waiting.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;FloodWaitErrors can occur when you are submitting too many requests to the API whether it is querying users information or joining too many channels too fast&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;strong&gt;Telethon Sessions&lt;/strong&gt; Telethon will create a session file. You can set the name of the session file when you instantiate the Telethon client:&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;TelegramClient(&amp;lt;session_file_name&amp;gt;, &amp;lt;api_user_id&amp;gt;, &amp;lt;api_user_hash&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;This file happens to be a sqlite database which you can connect to. It       
acts like a cache and stores historical data as well as your session 
authentication information so you will not have to re-authenticate with 
Telegram’s 2FA . Note that you will need to login for a first time and 
authenticate when you first use the API.
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Docker&lt;/h3&gt;
&lt;p&gt;If you want to run the bot as a containerized instance on a server with AWS, GCP or Digital ocean you can.&lt;/p&gt;
&lt;p&gt;You will need to create an account with a container registry service, available on most enterprise cloud providers but Docker Hub will do (&lt;a href=&quot;https://hub.docker.com/signup&quot; rel=&quot;nofollow&quot;&gt;https://hub.docker.com/signup&lt;/a&gt;)&lt;/p&gt;
&lt;ol readability=&quot;-0.37423312883436&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Create a Docker repository, instructions here: &lt;a href=&quot;https://docs.docker.com/docker-hub/repos/&quot; rel=&quot;nofollow&quot;&gt;https://docs.docker.com/docker-hub/repos/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Build the Docker image. We’re running on a lean Alpine Python 3.7 image.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;docker build -t &amp;lt;user_name&amp;gt;/&amp;lt;repo_name&amp;gt;/informer:latest .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You will want an entry point to run bot.py and provide it a Telegram API user ID. There are a few ways to approach this:&lt;/p&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;You can comment out and include the CMD instruction and provide the API user ID via environment variable: &lt;code&gt;CMD [“python”,”bot.py”,”${SHILLOMATIC_ACCOUNT_ID}”]&lt;/code&gt; You will need to set the environment variable &lt;code&gt;SHILLOMATIC_ACCOUNT_ID&lt;/code&gt; to your Telegram accounts API user ID inside your Cloud Provider’s console or export it in your shell environment with &lt;code&gt;export SHILLOMATIC_ACCOUNT_ID=“1234567”&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Or you can set or over-ride the entry point in your cloud provider just make sure you provide the Telegram API user ID as an argument:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;code&gt;python3 bot.py 1234567&lt;/code&gt;&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Or you can run the bot inside the shell environment with Docker:&lt;/p&gt;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;SSH into your remote shell environment&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Pull the Docker image from the remote repository:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;docker pull &amp;lt;user_name&amp;gt;/&amp;lt;repo_name&amp;gt;/informer:latest&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Get the Docker container ID with:&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;docker container ls&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;Run the Docker image and script in interactive mode:&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;docker run -ti &amp;lt;container_id&amp;gt; python3 bot.py 1234567&lt;/code&gt; Where 1234567 is your Telegram API user ID.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Push the Docker image to your remote repository:&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;code&gt;docker push &amp;lt;user_name&amp;gt;/&amp;lt;repo_name&amp;gt;/informer:latest&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;Assuming some entry point was set either in the Docker file, your cloud provider container dashboard, or manually in the shell with &lt;code&gt;docker run&lt;/code&gt; you can open Telegram and login with the same account as above.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;As the bot runs and joins channel, you will see your client update in real time and display the new channels you have joined.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/4.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/paulpierre/informer/master/screenshots/4.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TIP: TelegramX is by far the better client to use for these purposes as it supports multiple login. Download here:&lt;/p&gt;
&lt;h2&gt;Google Sheets Integration&lt;/h2&gt;
&lt;p&gt;The python library gspread is used for managing io with Google Sheets. You will need to have a Google Cloud Platform account and enable Google Drive APIs. Afterwards you must generate server credentials with a json api key.&lt;/p&gt;
&lt;p&gt;Instructions are here: &lt;a href=&quot;https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html&quot; rel=&quot;nofollow&quot;&gt;https://www.twilio.com/blog/2017/02/an-easy-way-to-read-and-write-to-a-google-spreadsheet-in-python.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Known Bugs&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Currently a channel must have already been joined in order to begin monitoring of keywords. It is likely you will need to run the &lt;code&gt;bot.py&lt;/code&gt; twice, once to let it join channels and another time to monitor them. I’m aware of this glaring bug and will fix it in the next revision.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Todo&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Create user interface dashboard for bot management
&lt;ul&gt;&lt;li&gt;Create new accounts&lt;/li&gt;
&lt;li&gt;Add / remove channels&lt;/li&gt;
&lt;li&gt;Add / remove keywords to monitor&lt;/li&gt;
&lt;li&gt;View notifications&lt;/li&gt;
&lt;li&gt;Recieve web push notifications&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Automatically poll the database to update the keywords to monitor in memory&lt;/li&gt;
&lt;li&gt;Automate creation of phone numbers via Burner API and authcode process&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Getting in touch&lt;/h2&gt;
&lt;p&gt;Did you find this project interesting? Please star it if so.&lt;/p&gt;
&lt;p&gt;It was made in two days as a proof of concept for a friend in the cryptocurrency space. If you find any interesting or lucrative applications, I’m always happy to collaborate. You can reach me at:&lt;/p&gt;
&lt;p&gt;@paulpierre on Twitter or hi (at) paulpierre (dot) com&lt;/p&gt;
&lt;p&gt;Most of my interesting projects are private on github, but feel free to check them out: &lt;a href=&quot;http://www.github.com/paulpierre&quot;&gt;http://www.github.com/paulpierre&lt;/a&gt; or past work at &lt;a href=&quot;http://www.paulpierre.com&quot; rel=&quot;nofollow&quot;&gt;http://www.paulpierre.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Open Source License&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;Copyright (c) 2020 Paul Pierre Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;
</description>
<pubDate>Tue, 10 Dec 2019 07:10:19 +0000</pubDate>
<dc:creator>riter</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/142327?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>paulpierre/informer</og:title>
<og:url>https://github.com/paulpierre/informer</og:url>
<og:description>A Telegram Mass Surveillance Bot in Python. Contribute to paulpierre/informer development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/paulpierre/informer</dc:identifier>
</item>
<item>
<title>L-systems</title>
<link>https://jsantell.com/l-systems</link>
<guid isPermaLink="true" >https://jsantell.com/l-systems</guid>
<description>&lt;head&gt;&lt;title&gt;L-systems&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;An overview of L-systems, a string rewriting framework commonly used in computer graphics to visualize and simulate organic growth.&quot;/&gt;&lt;meta charset=&quot;utf8&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;meta property=&quot;og:title&quot; content=&quot;L-systems&quot;/&gt;&lt;meta property=&quot;og:description&quot; content=&quot;An overview of L-systems, a string rewriting framework commonly used in computer graphics to visualize and simulate organic growth.&quot;/&gt;&lt;meta property=&quot;og:url&quot; content=&quot;https://jsantell.com/l-systems&quot;/&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://jsantell.com/l-systems/lsystem-header.png&quot;/&gt;&lt;meta property=&quot;og:site_name&quot; content=&quot;jsantell.com&quot;/&gt;&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;/&gt;&lt;meta name=&quot;twitter:site&quot; content=&quot;@jsantell&quot;/&gt;&lt;meta name=&quot;twitter:creator&quot; content=&quot;@jsantell&quot;/&gt;&lt;link rel=&quot;canonical&quot; href=&quot;https://jsantell.com/l-systems&quot;/&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/jpg&quot; href=&quot;/favicon.jpg&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/styles/core.css&quot;/&gt;&lt;link rel=&quot;preload&quot; href=&quot;/fonts/fira-sans-v8-latin-200.woff2&quot; as=&quot;font&quot; type=&quot;font/woff2&quot; crossorigin=&quot;anonymous&quot;/&gt;&lt;link rel=&quot;preload&quot; href=&quot;/fonts/fira-sans-v8-latin-300.woff2&quot; as=&quot;font&quot; type=&quot;font/woff2&quot; crossorigin=&quot;anonymous&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/styles/note.css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/styles/katex/katex.min.css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;286.44948892039&quot;&gt;
&lt;header&gt;
&lt;span class=&quot;subtitle&quot;&gt;open web engineer&lt;/span&gt;

&lt;nav/&gt;&lt;/header&gt;
&lt;p&gt;&lt;span class=&quot;published&quot;&gt;Notes published &lt;time datetime=&quot;2019-12-09&quot;&gt;December 09, 2019&lt;/time&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Biologist &lt;a href=&quot;https://en.wikipedia.org/wiki/Aristid_Lindenmayer&quot;&gt;Aristid Lindenmayer&lt;/a&gt; created &lt;dfn&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/L-system&quot;&gt;Lindenmayer systems&lt;/a&gt;&lt;/dfn&gt;, or &lt;abbr title=&quot;Lindenmayer systems&quot;&gt;L-systems&lt;/abbr&gt;, in 1968 as a way of formalizing patterns of bacteria growth. L-systems are a recursive, string-rewriting framework, commonly used today in computer graphics to visualize and simulate organic growth, with applications in &lt;a href=&quot;http://algorithmicbotany.org&quot; title=&quot;Algorithmic Botany&quot;&gt;plant development&lt;/a&gt;, &lt;a href=&quot;http://pcgbook.com/wp-content/uploads/chapter05.pdf&quot; title=&quot;Procedural Content Generation in Games&quot;&gt;procedural content generation&lt;/a&gt;, and &lt;a href=&quot;http://www.motionesque.com/beautyoffractals/&quot; title=&quot;The Beauty of Fractals - L-system in Houdini&quot;&gt;fractal-like art&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jsantell.com/l-systems/lsystem-header.png&quot; loading=&quot;lazy&quot;/&gt; A rendering of several L-systems.&lt;/p&gt;
&lt;p&gt;The following describes L-system fundamentals, how they can be visually represented, and several classes of L-systems, like &lt;a href=&quot;https://jsantell.com/l-systems#context-sensitive-l-systems&quot;&gt;context-sensitive L-systems&lt;/a&gt; and &lt;a href=&quot;https://jsantell.com/l-systems#stochastic-l-systems&quot;&gt;stochastic L-systems&lt;/a&gt;. Much of the following has been derived from &lt;a href=&quot;https://en.wikipedia.org/wiki/Przemys%C5%82aw_Prusinkiewicz&quot;&gt;Przemyslaw Prusinkiewicz&lt;/a&gt; and Lindenmayer's seminal work, &lt;a href=&quot;http://algorithmicbotany.org/papers/#abop&quot;&gt;The Algorithmic Beauty of Plants&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;string-rewriting&quot;&gt; String Rewriting&lt;/h2&gt;
&lt;p&gt;Fundamentally, an L-system is a set of rules that describe how to iteratively transform a string of symbols. A string, in this context, is a series of symbols, like &quot;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&quot; or &quot;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;ababaabaaaaababaabaaaa&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&quot;, and can be thought of as a word comprised of characters. Each rule, known as a &lt;em&gt;production&lt;/em&gt;, describes the transformation of one symbol to another symbol, series of symbols, or no symbol at all. On each iteration, the productions are applied to each character simultaneously, resulting in a new series of symbols.&lt;/p&gt;
&lt;p&gt;Productions in this rewriting system can be described with &quot;before&quot; and &quot;after&quot; states, often described as the &lt;em&gt;predecessor&lt;/em&gt; and &lt;em&gt;successor&lt;/em&gt;; for example, the production &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;a⟶aba \longrightarrow ab&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; represents that the symbol &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; transforms into the symbols &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;abab&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; on every iteration. The length of derivation, or the number of iterations, is represented by &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. Given a word &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and productions &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;a⟶aba \longrightarrow ab&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;b⟶ab \longrightarrow a&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, the following illustrates how the word transforms over several iterations, from &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;n=0n=0&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;n=4n=4&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;aababaabaababaababa\begin{aligned} &amp;amp;a \\ &amp;amp;ab \\ &amp;amp;aba \\ &amp;amp;abaab \\ &amp;amp;abaababa \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;Figure 1&lt;/strong&gt; Word &lt;em&gt;a&lt;/em&gt; transforming over 4 iterations of an L-system with the productions &lt;em&gt;a → ab&lt;/em&gt; and &lt;em&gt;b → a&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;formalizing-l-systems&quot;&gt; Formalizing L-systems&lt;/h3&gt;
&lt;p&gt;L-systems are formalized as a tuple with the following definition:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;G=⟨V,w,P⟩G = \langle V, w, P \rangle&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;⟨&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;⟩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Where the components are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;VV&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, the alphabet, or all potential symbols in the string.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;ww&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, the starting word, also known as the &lt;em&gt;axiom&lt;/em&gt;, comprised of symbols from &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;VV&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;V&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;PP&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;P&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, a series of productions describing the transformations or rules.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The L-system in &lt;strong&gt;Figure 1&lt;/strong&gt; can be formalized by defining its &lt;em&gt;axiom&lt;/em&gt; (&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;ww&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) and a series of productions (&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;p1,...,pnp_{1}, ..., p_{n}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mathdefault mtight&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;w:ap1:b⟶ap2:a⟶ab\begin{aligned} w &amp;amp;: a \\ p_{1} &amp;amp;: b \longrightarrow a \\ p_{2} &amp;amp;: a \longrightarrow ab \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The alphabet of all valid symbols can be inferred. It is implied that a symbol without a matching production has an identity production, e.g. &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;a⟶aa \longrightarrow a&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id=&quot;d0l-systems&quot;&gt; D0L-systems&lt;/h3&gt;
&lt;p&gt;This fundamental form of an L-system is described as a deterministic, context-free L-system, or &lt;abbr title=&quot;deterministic, context-free L-system&quot;&gt;D0L-system&lt;/abbr&gt; (or sometimes &lt;em&gt;DOL-system&lt;/em&gt;). &lt;abbr title=&quot;Context-free L-system&quot;&gt;0L-systems&lt;/abbr&gt; are &lt;a href=&quot;https://en.wikipedia.org/wiki/Context-free_grammar&quot;&gt;context-free&lt;/a&gt;, meaning that each predecessor is transformed regardless of its position in the string and its neighbors. &lt;em&gt;Deterministic&lt;/em&gt; L-systems always produce the same result given the same configurations, as there is only one matching production for each predecessor.&lt;/p&gt;
&lt;aside class=&quot;note info&quot;&gt;&lt;a href=&quot;https://jsantell.com/l-systems#context-sensitive-l-systems&quot;&gt;Context-sensitive L-systems&lt;/a&gt; and &lt;a href=&quot;https://jsantell.com/l-systems#stochastic-l-systems&quot;&gt;non-deterministic L-systems&lt;/a&gt; are described in more detail below.&lt;/aside&gt;&lt;h2 id=&quot;graphical-representation-of-l-systems&quot;&gt; Graphical Representation of L-systems&lt;/h2&gt;
&lt;p&gt;L-systems can be represented visually via &lt;a href=&quot;https://en.wikipedia.org/wiki/Turtle_graphics&quot;&gt;turtle graphics&lt;/a&gt;, of &lt;a href=&quot;https://en.wikipedia.org/wiki/Logo_(programming_language)&quot;&gt;Logo&lt;/a&gt; fame. While L-systems are string rewriting systems, these strings are comprised of symbols, each which can represent some command. A turtle in computer graphics is similar to a pen plotter drawing lines in a 2D space. Imagine giving instructions to a pen plotter to draw a square: &quot;&lt;em&gt;draw 1cm. turn right. draw 1cm. turn right. draw 1cm. turn right. draw 1cm&lt;/em&gt;&quot;. Though plotters don't really have an orientation, an L-system's turtle can be represented by Cartesian coordinates &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;yy&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and an angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;α\alpha&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;α&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; that describes its forward direction. From there, symbols in a string can represent commands to change the state of the turtle.&lt;/p&gt;
&lt;p&gt;To move a turtle around in 2D, symbols must be chosen to represent movement and rotation. The symbols &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;FF&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;−-&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; will be used here, as they are commonly selected for these commands in L-system interpreters. After deriving the result of an L-system using its production rules, the string can then be parsed from left to right, with the following symbols modifying the turtle state:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;FF&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; move forward by &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; units while drawing a line.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; rotate left by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;−-&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; rotate right by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The variables &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; are global values indicating the magnitude of each symbol's rotation or movement. In non-parametric L-systems, each symbol's rotation and movement magnitude is a constant in the system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jsantell.com/l-systems/abop-fig-1.5b.png&quot; loading=&quot;lazy&quot;/&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;FFF−FF−F−F+F+FF−F−FFFFFF-FF-F-F+F+FF-F-FFF&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;Figure 2&lt;/strong&gt; Visualizing the movement of a turtle and the line it creates from parsing the above string. From &lt;a href=&quot;http://algorithmicbotany.org/papers/#abop&quot;&gt;The Algorithmic Beauty of Plants&lt;/a&gt; &lt;em&gt;Figure 1.5b&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Following the line in &lt;strong&gt;Figure 2&lt;/strong&gt; from the bottom left corner, the string can be read as &lt;em&gt;&quot;forward, forward, forward, right, forward, forward, right...&quot;&lt;/em&gt; and so on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jsantell.com/l-systems/lsystembot.png&quot; loading=&quot;lazy&quot;/&gt; An &lt;a href=&quot;https://twitter.com/LSystemBot/status/1197624489552408576&quot;&gt;L-system generated&lt;/a&gt; by Twitter bot &lt;a href=&quot;https://twitter.com/LSystemBot&quot;&gt;LSystemBot 2.0&lt;/a&gt;, tweeting an L-system and it's production rules every few hours.&lt;/p&gt;
&lt;p&gt;A turtle may be decoupled from an L-system. The L-system has a starting string and a set of productions and outputs the resulting string. A turtle may take that final string as an input, and output some visual representation. For example, many of the illustrations shown here use the same L-system solvers, while using different turtles where appropriate, like one turtle built using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D&quot;&gt;CanvasRenderingContext2D&lt;/a&gt; and another using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API&quot;&gt;WebGL&lt;/a&gt;.&lt;/p&gt;
&lt;aside class=&quot;note info&quot;&gt;It is important to note that these turtle commands are only idioms, and the turtle interpretation of any symbol is up to the implementor. While &lt;a href=&quot;http://algorithmicbotany.org/papers/#abop&quot;&gt;The Algorithmic Beauty of Plants&lt;/a&gt; and &lt;a href=&quot;https://www.sidefx.com/docs/houdini/nodes/sop/lsystem.html&quot;&gt;Houdini's L-system implementation&lt;/a&gt; share many common symbol commands, each have their own set of symbols it understands.&lt;/aside&gt;&lt;h3 id=&quot;space-filling-curves&quot;&gt; Space-Filling Curves&lt;/h3&gt;
&lt;p&gt;Space-filling curves can be formalized via L-systems, resulting in a recursive, fractal-like pattern. More specifically, &lt;a title=&quot;Synthesis of Space-Filling Curves on the Square Grid&quot; href=&quot;http://algorithmicbotany.org/papers/fass.html&quot;&gt;&lt;dfn&gt;&lt;abbr title=&quot;space-filling, self-avoiding, simple, self-similar&quot;&gt;FASS&lt;/abbr&gt; curves&lt;/dfn&gt;&lt;/a&gt;, defined as &lt;a href=&quot;https://en.wikipedia.org/wiki/Space-filling_curve&quot;&gt;space-&lt;strong&gt;f&lt;/strong&gt;illing&lt;/a&gt;, self-&lt;strong&gt;a&lt;/strong&gt;voiding, &lt;strong&gt;s&lt;/strong&gt;imple, and self-&lt;strong&gt;s&lt;/strong&gt;imilar. That is, a single, non-overlapping, recursive, continuous curve.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ:90w:Xp1:X⟶+YF−XFX−FY+p2:Y⟶−XF+YFY+FX−\begin{aligned} \delta &amp;amp;: 90 \\ w &amp;amp;: X \\ p_{1} &amp;amp;: X \longrightarrow + Y F - X F X - F Y + \\ p_{2} &amp;amp;: Y \longrightarrow - X F + Y F Y + F X - \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;Figure 3&lt;/strong&gt; An L-system definition for a space-filling &lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_curve&quot;&gt;Hilbert Curve&lt;/a&gt;, animated over 7 iterations.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_curve&quot;&gt;Hilbert Curve&lt;/a&gt; (&lt;strong&gt;Figure 3&lt;/strong&gt;) is an example of a FASS curve that can be represented as an L-system. Considered a &lt;a href=&quot;http://www.selcukergen.net/ncca_lsystems_research/lsystems.html&quot;&gt;Node-rewriting&lt;/a&gt; technique, this L-system's productions declare that on each iteration, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;XX&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;YY&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; symbols are replaced with more &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;FF&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;XX&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;YY&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; symbols. With the angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; defined as 90, this results in recursively generated &lt;a href=&quot;https://en.wikipedia.org/wiki/Square_wave&quot;&gt;square wave&lt;/a&gt; shape along a curve. While &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;FF&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;−-&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; are interpreted by the turtle, other symbols can be used for productions. In this case, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;XX&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;YY&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; are ignored when rendering, and only relevant when rewriting the string and matching productions.&lt;/p&gt;
&lt;h3 id=&quot;3d-interpretation&quot;&gt; 3D Interpretation&lt;/h3&gt;
&lt;p&gt;In addition to a turtle traversing on a 2D plane, symbols may be introduced that instruct the turtle to draw in 3D. &lt;a href=&quot;http://algorithmicbotany.org/papers/#abop&quot;&gt;The Algorithmic Beauty of Plants&lt;/a&gt; uses the following symbols to control rendering in three dimensions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; turn left by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;−-&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; turn right by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;amp;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; pitch down by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;∧\wedge&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;∧&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; pitch up by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;\\backslash&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; roll left by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; roll right by angle &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ\delta&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;∣|&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; turn around by 180°.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Like the 2D Hilbert Curve (&lt;strong&gt;Figure 3&lt;/strong&gt;), a three-dimensional version can also be created (&lt;strong&gt;Figure 4&lt;/strong&gt;) using these additional symbols, resulting in a 3D FASS curve.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;δ:90w:Xp1:X⟶∧\XF∧\XFX−F∧//XFX&amp;amp;F+//XFX−F/X−/\begin{aligned} \delta &amp;amp;: 90 \\ w &amp;amp;: X \\ p_{1} &amp;amp;: X \longrightarrow &amp;amp; \wedge \backslash X F \wedge \backslash X F X \\ &amp;amp; &amp;amp; - F \wedge / / X F X \\ &amp;amp; &amp;amp; \&amp;amp; F + / / X F X \\ &amp;amp; &amp;amp; - F / X - / \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;δ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;∧&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∧&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;∧&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;Figure 4&lt;/strong&gt; A space-filling &lt;a href=&quot;https://en.wikipedia.org/wiki/Hilbert_curve&quot;&gt;Hilbert Curve&lt;/a&gt; from 1 to 4 iterations in 3D.&lt;/p&gt;
&lt;h2 id=&quot;bracketed-l-systems&quot;&gt; Bracketed L-Systems&lt;/h2&gt;
&lt;p&gt;The space-filling Hilbert curve can be represented as a single, continuous line. For organic, tree-like structures, &lt;em&gt;branching&lt;/em&gt; is used to represent a diverging fork. Two new symbols, square brackets, are introduced to represent a tree in an L-system's string, with an opening bracket indicating the start of a new branch, with the remaining symbols between the brackets being members of that branch. Symbols after the end bracket indicate returning to the point of the branch's origin. A &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_%28abstract_data_type%29&quot;&gt;stack&lt;/a&gt; is used to implement branching, storing the state of the turtle on the stack.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; push the current turtle state onto the stack.&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; pop the top state from the stack and this becomes the current turtle state.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Symbols in a branch are transformed and replaced just as they were outside of a branch. This allows recursive, fractal-like behavior, with each branch forking into more branches, and so on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 5&lt;/strong&gt; Animated branching L-systems, from 1 to 5 iterations. Definitions from &lt;a href=&quot;http://algorithmicbotany.org/papers/#abop&quot;&gt;The Algorithmic Beauty of Plants&lt;/a&gt; &lt;em&gt;Figure 1.24&lt;/em&gt;.&lt;/p&gt;
&lt;aside class=&quot;note info&quot;&gt;In addition to position and rotation, the turtle may contain additional state, like line width or color, with new symbols introduced to manipulate that data.&lt;/aside&gt;&lt;h2 id=&quot;context-sensitive-l-systems&quot;&gt; Context-sensitive L-systems&lt;/h2&gt;
&lt;p&gt;Rather than productions evaluating symbols in isolation (context-free), rules may be defined that only matches a symbol when it proceeds or succeeds another specific symbol. &lt;dfn&gt;Context-sensitive L-systems&lt;/dfn&gt; contain production rules that specify symbols that must come before or after the predecessor in order to match, as opposed to context-free systems that evaluate predecessors in isolation.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;w:baaaap1:b&amp;lt;a⟶bp2:b⟶a\begin{aligned} w &amp;amp;: baaaa \\ p_{1} &amp;amp;: b &amp;lt; a \longrightarrow b \\ p_{2} &amp;amp;: b \longrightarrow a \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;Figure 5&lt;/strong&gt; A context-sensitive L-system simulating signal propagation.&lt;/p&gt;
&lt;p&gt;These context rules are defined using &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; in the production rule, adjacent to the predecessor. In &lt;strong&gt;Figure 5&lt;/strong&gt;, the first production rule only matches when the &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; symbol is immediately after &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, thus replacing the &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; predecessor with its successor, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;. This results in the &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; symbol moving towards the right:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;baaaaabaaaaabaaaaabaaaaab\begin{aligned} &amp;amp;baaaa \\ &amp;amp;abaaa \\ &amp;amp;aabaa \\ &amp;amp;aaaba \\ &amp;amp;aaaab \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A similar system could be defined that propagates &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; from right to left, defined via production &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;a&amp;gt;b⟶ba &amp;gt; b \longrightarrow b&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, replacing &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;aa&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; when there is a &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;bb&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; after it in the string.&lt;/p&gt;
&lt;aside class=&quot;note info&quot;&gt;Context-sensitive productions take precedence over context-free productions if there are more than one production rule matches for a given predecessor.&lt;/aside&gt;&lt;p&gt;&lt;strong&gt;Figure 6&lt;/strong&gt; Animated variants of context-sensitive L-systems, iterations 1 to 35. Definition from &lt;a href=&quot;https://dspace.library.uu.nl/bitstream/handle/1874/17806/hogeweg_74_model.pdf&quot;&gt;A model study on biomorphological description&lt;/a&gt;, illustrated in &lt;em&gt;Figure 1.31&lt;/em&gt; from &lt;a href=&quot;http://algorithmicbotany.org/papers/#abop&quot;&gt;The Algorithmic Beauty of Plants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;L-systems with these one-sided context productions may be considered &lt;abbr title=&quot;single-context L-system&quot;&gt;1L-systems&lt;/abbr&gt;. Productions may also have both a before-context and an after-context in systems considered &lt;abbr title=&quot;double-context L-system&quot;&gt;2L-systems&lt;/abbr&gt;. They can be represented as:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;A&amp;lt;X&amp;gt;B⟶YA &amp;lt; X &amp;gt; B \longrightarrow Y&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;⟶&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This production rule indicates that the predecessor &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;XX&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; will be replaced by successor &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;YY&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; when it is between an &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;AA&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; and a &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&quot;stochastic-l-systems&quot;&gt; Stochastic L-systems&lt;/h2&gt;
&lt;p&gt;The previously described systems are all deterministic; the same system with the same input will always generate the same result. Stochastic L-systems are non-deterministic, defined by several productions that match the same predecessor, chosen randomly given their weight on each iteration. The following production rules define that on each iteration, &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;XX&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; has a 50% chance to be rewritten as &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;AA&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, and a 50% chance to be rewritten as &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;BB&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;X→.5AX→.5B\begin{aligned} X &amp;amp; \xrightarrow{.5} A \\ X &amp;amp; \xrightarrow{.5} B \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel x-arrow&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight x-arrow-pad&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel x-arrow&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight x-arrow-pad&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This non-determinism is useful for procedurally creating variety and the seemingly random results of nature.&lt;/p&gt;
&lt;aside class=&quot;note info&quot;&gt;Stochastic productions with the same predecessor and context must add up to 1.&lt;/aside&gt;&lt;p&gt;&lt;span class=&quot;katex-display&quot;&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;w:Fp1:F→.33F[+F]F[−F]Fp2:F→.33F[+F]Fp3:F→.33F[−F]F\begin{aligned} w &amp;amp;: F \\ p_{1} &amp;amp;: F \xrightarrow{.33} F[+F]F[-F]F \\ p_{2} &amp;amp;: F \xrightarrow{.33} F[+F]F \\ p_{3} &amp;amp;: F \xrightarrow{.33} F[-F]F \\ \end{aligned}&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mtable&quot;&gt;&lt;span class=&quot;col-align-r&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;w&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;msupsub&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;col-align-l&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mrel x-arrow&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight x-arrow-pad&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mrel x-arrow&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight x-arrow-pad&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mrel x-arrow&quot;&gt;&lt;span class=&quot;vlist-t vlist-t2&quot;&gt;&lt;span class=&quot;vlist-r&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span&gt;&lt;span class=&quot;sizing reset-size6 size3 mtight x-arrow-pad&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;&lt;span class=&quot;mord mtight&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;mord mtight&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mopen&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;F&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;vlist-s&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;strong&gt;Figure 7&lt;/strong&gt; A stochastic L-system animating over several variants. Definition from &lt;a href=&quot;http://algorithmicbotany.org/papers/#abop&quot;&gt;The Algorithmic Beauty of Plants&lt;/a&gt; &lt;em&gt;Figure 1.27&lt;/em&gt;.&lt;/p&gt;
&lt;aside class=&quot;note todo&quot;&gt;Parametric L-systems will be documented in a future post.&lt;/aside&gt;&lt;h2 id=&quot;resources&quot;&gt; Resources&lt;/h2&gt;
&lt;footer readability=&quot;4&quot;&gt;&lt;p&gt;© 2018-2019 Jordan Santell, All Rights Reserved&lt;/p&gt;

&lt;/footer&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://stats.jsantell.com/image.gif&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;/body&gt;</description>
<pubDate>Tue, 10 Dec 2019 05:16:51 +0000</pubDate>
<dc:creator>signa11</dc:creator>
<og:title>L-systems</og:title>
<og:description>An overview of L-systems, a string rewriting framework commonly used in computer graphics to visualize and simulate organic growth.</og:description>
<og:url>https://jsantell.com/l-systems</og:url>
<og:image>https://jsantell.com/l-systems/lsystem-header.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jsantell.com/l-systems</dc:identifier>
</item>
</channel>
</rss>