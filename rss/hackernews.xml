<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>How badly are we being ripped off on eyewear? Former industry execs tell all</title>
<link>https://www.latimes.com/business/lazarus/la-fi-lazarus-glasses-lenscrafters-luxottica-monopoly-20190305-story.html</link>
<guid isPermaLink="true" >https://www.latimes.com/business/lazarus/la-fi-lazarus-glasses-lenscrafters-luxottica-monopoly-20190305-story.html</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.latimes.com/business/lazarus/la-fi-lazarus-glasses-lenscrafters-luxottica-monopoly-20190305-story.html&quot;&gt;https://www.latimes.com/business/lazarus/la-fi-lazarus-glasses-lenscrafters-luxottica-monopoly-20190305-story.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19312499&quot;&gt;https://news.ycombinator.com/item?id=19312499&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 261&lt;/p&gt;
&lt;p&gt;# Comments: 241&lt;/p&gt;
</description>
<pubDate>Tue, 05 Mar 2019 17:56:23 +0000</pubDate>
<dc:creator>ilamont</dc:creator>
<og:url>https://www.latimes.com/business/lazarus/la-fi-lazarus-glasses-lenscrafters-luxottica-monopoly-20190305-story.html</og:url>
<og:title>How badly are we being ripped off on eyewear? Former industry execs tell all</og:title>
<og:image>https://www.latimes.com/resizer/olATAueyWSqFiLNKuINaGpyvB3o=/1200x0/arc-anglerfish-arc2-prod-tronc.s3.amazonaws.com/public/2LA3DGV2ORHVZL3OJADZFWWSMY.jpg</og:image>
<og:description>Charles Dahan was a leading supplier of frames to LensCrafters, before the company was purchased by Luxottica. Glasses that cost him $20 to make would be sold for five times that amount.</og:description>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.latimes.com/business/lazarus/la-fi-lazarus-glasses-lenscrafters-luxottica-monopoly-20190305-story.html</dc:identifier>
</item>
<item>
<title>Achieving 100k connections per second with Elixir</title>
<link>https://stressgrid.com/blog/100k_cps_with_elixir/</link>
<guid isPermaLink="true" >https://stressgrid.com/blog/100k_cps_with_elixir/</guid>
<description>&lt;p&gt;Both HTTP 1.x and HTTP/2 rely on lower level connection-oriented protocols, namely TCP/IP and TLS. These protocols provide reliable delivery and correct order when data is chunked into multiple packets. TLS also includes encryption and authentication.&lt;/p&gt;
&lt;p&gt;The HTTP client needs to open a connection before it can send a request. For efficiency, each connection is likely to be reused for sending subsequent requests. To ensure this is the case while using HTTP 1.0, the client can set the &lt;code&gt;connection: keep-alive&lt;/code&gt; header, while HTTP 1.1 and HTTP/2 keep connections alive by default.&lt;/p&gt;
&lt;p&gt;Web browsers maintain “warm” connections for &lt;a href=&quot;https://fastmail.blog/2011/06/28/http-keep-alive-connection-timeouts/&quot;&gt;a few minutes&lt;/a&gt;, and server-to-server connections are usually kept alive much longer. The WebSocket protocol (built on top of HTTP) only allows for explicit closure of underlying HTTP connections.&lt;/p&gt;
&lt;p&gt;What this means, performance-wise, is that measuring requests per second gets a lot more attention than connections per second. Usually, the latter can be one or two orders of magnitude lower than the former. Correspondingly, benchmarks use long-living connections to simulate multiple requests from the same device.&lt;/p&gt;
&lt;p&gt;However, there are scenarios where this assumption does not hold true. For example, low-power IoT devices cannot afford to maintain active connections. A sensor could “wake up”, then establish a connection to a server, send a payload request, receive an acknowledgment response, close the connection, and go back to “sleep”. With such a workload, the connection-per-second and request-per-second rates would be the same.&lt;/p&gt;
&lt;p&gt;In this article, we look at scaling Elixir to handle 100k connections per second.&lt;/p&gt;
&lt;p&gt;The workload consists of 100k devices, each simply opening a TCP/IP connection, waiting for 1±10% seconds, and closing the connection. The test consists of three phases: a 15-minute rampup, 1 minute sustained load, and 15-minute rampdown. The following &lt;a href=&quot;https://gitlab.com/stressgrid/stressgrid&quot;&gt;Stressgrid&lt;/a&gt; script represents the workload:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;delay(1000, 0.1)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We tested against &lt;a href=&quot;https://ninenines.eu/docs/en/ranch/1.7/manual/&quot;&gt;Ranch&lt;/a&gt;, which is the socket acceptor pool at the heart of the &lt;a href=&quot;https://ninenines.eu/docs/en/cowboy/2.6/manual/&quot;&gt;Cowboy&lt;/a&gt; web server. With Ranch, it is possible to implement a server for any TCP/IP- and TSL-based protocol, which makes our benchmark not specific to HTTP. We used Ubuntu 18.04 with the 4.15.0-1031-aws kernel, with sysctld overrides seen in our &lt;a href=&quot;https://gitlab.com/stressgrid/dummies/blob/b0f95dcd152eeeba4461f71ba784a21c9b3c5dcc/etc/sysctl.d/10-dummy.conf&quot;&gt;/etc/sysctl.d/10-dummy.conf&lt;/a&gt;. We used Erlang 21.2.6-1 on a 36-core c5.9xlarge instance.&lt;/p&gt;
&lt;p&gt;To run this test, we used Stressgrid with twenty c5.xlarge generators.&lt;/p&gt;
&lt;h2 id=&quot;ranch-1-7&quot;&gt;Ranch 1.7&lt;/h2&gt;
&lt;p&gt;In the first test, we used unmodified Ranch 1.7. The connection rate graph shows a clear breaking point at 70k connections per second. After this point, connection latency grows, causing the rate to peak at 82k connections per second.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/1_7_rate.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/1_7_rate.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another good way of oberving the bottleneck effect is the 90th percentile latency. At 14th minute mark, the latency jumps from single-digit milliseconds to 1 second.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/1_7_lat90.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/1_7_lat90.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To understand this bottleneck, we need to take a quick dive into the architecture of Ranch.&lt;/p&gt;
&lt;p&gt;Ranch maintains a pool of acceptors to enable more throughput when handling new connections. By default, Ranch starts with 10 acceptors. In this test, we set it to 36—the number of CPU cores on our c5.9xlarge. We also performed the same test with acceptors set to 4x and 16x number of CPU cores, with negligible differences.&lt;/p&gt;
&lt;p&gt;This behavior makes it possible for our server to accept new connections with a high degree of parallelism. When a socket is accepted, it is passed to to a newly-started connection process. However, all connection processes are started by a single connection supervisor. This supervisor becomes our primary suspect in our search for the bottleneck.&lt;/p&gt;
&lt;p&gt;To test this theory, we modified our test server &lt;a href=&quot;https://gitlab.com/stressgrid/dummies/blob/7e8aaddfd545d1ce735175a67b998d0a130b246a/elixir_dummy/lib/elixir_dummy/reporter.ex&quot;&gt;to report&lt;/a&gt; the supervisor’s message queue length. Indeed, we observed between 20 and 200 messages in the 90th percentile, starting at 9th minute mark.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/1_7_sup_queue.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/1_7_sup_queue.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The good news is that Ranch maintainers are well aware of this problem. There is &lt;a href=&quot;https://github.com/ninenines/ranch/pull/198/files&quot;&gt;a pull request with a proof of concept&lt;/a&gt; that introduces acceptor-supervisor pairs.&lt;/p&gt;
&lt;h2 id=&quot;multi-supervisor-ranch&quot;&gt;Multi-supervisor Ranch&lt;/h2&gt;
&lt;p&gt;With acceptor-supervisor pairs, there should no longer be any points of contention in the path of creating new connections within Ranch. To verify this, we collected a similar report for the total message queue length for all 36 connection supervisors. The 90th percentile now stays below 3.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/sup_queue.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/sup_queue.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But is it too early to celebrate—at 15th minute mark, 90th percentile latency jumps to 1 second again.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/mulsup_lat90.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/mulsup_lat90.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The breaking point in the connection rate graph is less pronounced, but remains at about 70k connections per second.&lt;/p&gt;
&lt;p&gt;We hit another bottleneck.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/mulsup_rate.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/mulsup_rate.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To understand this bottleneck, we need to understand how TCP/IP is implemented inside the Linux kernel.&lt;/p&gt;
&lt;p&gt;When the client wants to &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_establishment&quot;&gt;establish a new connection&lt;/a&gt;, it sends a SYN packet. When the server receives SYN, it places the new connection in SYN queue and reports it as being in a &lt;code&gt;syn-recv&lt;/code&gt; state. The connection stays in &lt;code&gt;syn-recv&lt;/code&gt; state until it is moved to the accept queue. When the userland program—in our case Ranch—invokes the &lt;code&gt;accept()&lt;/code&gt; function, it removes the connection from the accept queue, and the connection becomes established. Cloudflare has &lt;a href=&quot;https://blog.cloudflare.com/syn-packet-handling-in-the-wild/&quot;&gt;a blog post&lt;/a&gt; with a detailed explanation of this mechanism.&lt;/p&gt;
&lt;p&gt;We created &lt;a href=&quot;https://gitlab.com/stressgrid/dummies/blob/b0f95dcd152eeeba4461f71ba784a21c9b3c5dcc/etc/syn_stats.sh&quot;&gt;a bash script&lt;/a&gt; that records the number of connections in &lt;code&gt;syn-recv&lt;/code&gt; state during our test.&lt;/p&gt;
&lt;p&gt;Around 11th minute, the number of connections quickly reaches 1k. With the maximum SYN queue length set to 1024 with the &lt;code&gt;net.core.somaxconn&lt;/code&gt; sysctl parameter, overflowing SYN packets get dropped. The clients back off and re-send SYN packets later. This results in the 90th percentile latency we saw earlier.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/mulsup_syn_queue.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/mulsup_syn_queue.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modified Ranch is able to accept with higher degree of parallelism, but the &lt;code&gt;accept()&lt;/code&gt; function gets invoked on a single shared listener socket. It turns out, the Linux kernel experiences contention when it comes to invoking &lt;code&gt;accept()&lt;/code&gt; on the same listener socket.&lt;/p&gt;
&lt;p&gt;In 2010, a group of engineers from Google discussed the issues with lock contention and suboptimal load balancing in &lt;a href=&quot;https://domsch.com/linux/lpc2010/Scaling_techniques_for_servers_with_high_connection%20rates.pdf&quot;&gt;a presentation&lt;/a&gt;, where they also estimate the maximum connections per second rate to be around 50k (on 2010 hardware). Furthermore, they proposed &lt;a href=&quot;https://lwn.net/Articles/542629/&quot;&gt;a Linux kernel patch&lt;/a&gt; that introduced the &lt;code&gt;SO_REUSEPORT&lt;/code&gt; socket option, that makes it possible to open many listener sockets &lt;em&gt;on the same port&lt;/em&gt;, causing the sockets to be load-balanced when accepting new connections.&lt;/p&gt;
&lt;h2 id=&quot;multi-supervisor-ranch-with-so-reuseport&quot;&gt;Multi-supervisor Ranch with &lt;code&gt;SO_REUSEPORT&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To find out if the &lt;code&gt;SO_REUSEPORT&lt;/code&gt; socket option would help, we created &lt;a href=&quot;https://gitlab.com/stressgrid/dummies/blob/ae3be721e7a73fb22d26b3c15107e15ae5c3e798/elixir_dummy/lib/elixir_dummy/application.ex&quot;&gt;a proof of concept application&lt;/a&gt; in which we ran multiple Ranch listeners on the same port with &lt;code&gt;SO_REUSEPORT&lt;/code&gt; set using the &lt;a href=&quot;http://erlang.org/doc/man/inet.html#setopts-2&quot;&gt;raw&lt;/a&gt; &lt;code&gt;setops&lt;/code&gt; option. We set the number of listeners to be the same as the number of available CPUs.&lt;/p&gt;
&lt;p&gt;With this proof of concept, we again measured the number of connections in &lt;code&gt;syn-recv&lt;/code&gt; state during our test. This number never gets close to 1k, meaning we’re no longer dropping SYN messages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/syn_queue.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/syn_queue.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;90th percentile latency confirms our findings: it remains consistently low throughout the test.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/reuseport_lat90.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/reuseport_lat90.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When zooming in, 90th percentile latency measures between 1 and 2 milliseconds.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/reuseport_only_lat90.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/reuseport_only_lat90.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We also observed much better CPU utilization, which resulted from less contention and fairer load balancing when accepting new connections.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/cpu.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/cpu.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally, the connections per second rate reaches 99k, with network latency and available CPU resources contributing to the next bottleneck.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/reuseport_rate.png&quot;&gt;&lt;img src=&quot;https://stressgrid.com/blog/100k_cps_with_elixir/reuseport_rate.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By analyzing the initial test results, proposing a theory, and confirming it by measuring against modified software, we were able to find two bottlenecks on the way to getting to 100k connections per second with Elixir and Ranch. The combination of multiple connection supervisors in Ranch and multiple listener sockets in the Linux kernel is necessary to achieve full utilization of the 36-core machine under the target workload.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://lobste.rs/s/doeft1/achieving_100k_connections_per_second&quot;&gt;Discussion on lobste.rs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=19311750&quot;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 05 Mar 2019 16:40:19 +0000</pubDate>
<dc:creator>slashdotdash</dc:creator>
<og:title>Achieving 100k connections per second with Elixir</og:title>
<og:description>In this article, we explain how to scale Elixir to handle 100k connections per second.</og:description>
<og:type>article</og:type>
<og:url>/blog/100k_cps_with_elixir/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://stressgrid.com/blog/100k_cps_with_elixir/</dc:identifier>
</item>
<item>
<title>Debian Buster will only be 54% reproducible, while we could be at 90%</title>
<link>https://lists.debian.org/debian-devel/2019/03/msg00017.html</link>
<guid isPermaLink="true" >https://lists.debian.org/debian-devel/2019/03/msg00017.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;Debian Buster will only be 54% reproducible (while we could be at &amp;gt;90%)&lt;/title&gt;&lt;link rev=&quot;made&quot; href=&quot;mailto:holger@layer-acht.org&quot; /&gt;&lt;link rel=&quot;index&quot; href=&quot;maillist.html&quot; /&gt;&lt;link rel=&quot;top&quot; href=&quot;threads.html&quot; /&gt;&lt;link rel=&quot;up&quot; href=&quot;msg00017.html&quot; /&gt;&lt;link rel=&quot;prev&quot; href=&quot;msg00016.html&quot; /&gt;&lt;link rel=&quot;next&quot; href=&quot;msg00018.html&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;37.804974916388&quot;&gt;
&lt;hr /&gt;

&lt;hr /&gt;&lt;hr /&gt;&lt;pre&gt;
hi,

disclaimer: this has not yet been verified by anyone other than myself,
so I could very well be wrong. Reproducible builds are about enabling
anyone to independently verify that... ;p


== Reproducibility in theory ==

According to &lt;a rel=&quot;nofollow&quot; href=&quot;https://tests.reproducible-builds.org/debian/buster/index_suite_amd64_stats.html&quot;&gt;https://tests.reproducible-builds.org/debian/buster/index_suite_amd64_stats.html&lt;/a&gt;
we have 26476 source packages (92.8%) which can be built reproducibly in
buster/amd64, out of 28523 source packages in total. 
(These 28523 source packages build 57448 binary packages.)

But these tests are done without looking at the actual .deb files distributed
from ftp.debian.org (and we always knew that and pointed it out: 
&quot;93% reproducible _in our current test framework_&quot;.)


== Looking at binary packages Debian actually distributes ==

So, Vagrant came up with an idea [1] to check buildinfo.debian.net for
.deb files for which 2 or more .buildinfo exist (where &quot;exist&quot; means
that the .deb files sha1sum is listed in the .buildinfo file) and I
turned that into a jenkins job doing this check for all 57448 binary
packages in amd64/buster/main (incl downloading all those .deb files from
ftp.d.o). 

The current main results (from this job [2]) are:

reproducible packages in buster/amd64: 30885: (53.7600%)
unreproducible packages in buster/amd64: 26543: (46.2000%)

and

reproducible binNMUs in buster/amd64: 0: (0%)
unreproducible binNMU in buster/amd64: 7423: (12.9200%)


== why are binNMUs unreproducible? ==

Because of their design, binNMUs are unreproducible, see #894441 [3] for
the details (in short: binNMUs are not what they are ment to be: the source
is changed and thrown away) and our proposed solution: 'binNMUs should
be replaced by easy &quot;no-change-except-debian/changelog-uploads'.

So that accounts for 12%, but 12% are not enough to explain the
difference between 54% and 93%...


== packages which have not been rebuilt since December 2016 ==

And today I remember a thread I started last year in May, titled
&quot;packages which have not been rebuilt since December 2016&quot; [4] (because
these packages were build with an old dpkg not producing .buildinfo
files, which Chris turned into #900837 [5] &quot;release.debian.org: 
Mass-rebuild of packages  for reproducible builds&quot; and so today I ran
Chris' script [6] again on coccia.d.o, and today it showed that 'only'
6804 source packages need a rebuild (compared to 9192 eight months ago).

6804 of of 28523 is 23.9%. And 54%+12%+24% equals 90%. Bingo. Bummer.

(While #900837 was only filed in 2018 we knew about this issue since
2015 or so... probably earlier. Sigh.)


== After the release is before the release. ==

So, as we first need to fix #894441 before we can sensibly fix #900837 and
because Buster is practically frozen, I think we can just conclude that
Buster is quite reproducible in theory (similar but better than
Stretch...)  and that we need to make sure to address #894441 ASAP, which 
means for Bullseye, the release after Buster.

Fur future reference, a summary of the current status of Debian's
reproducibiliy is available at
&lt;a rel=&quot;nofollow&quot; href=&quot;https://wiki.debian.org/ReproducibleBuilds#Big_outstanding_issues&quot;&gt;https://wiki.debian.org/ReproducibleBuilds#Big_outstanding_issues&lt;/a&gt; [7]

Happy hacking and many many thanks to everyone who has contributed so far!


[1] &lt;a rel=&quot;nofollow&quot; href=&quot;https://lists.reproducible-builds.org/pipermail/rb-general/2018-October/001239.html&quot;&gt;https://lists.reproducible-builds.org/pipermail/rb-general/2018-October/001239.html&lt;/a&gt;
[2] &lt;a rel=&quot;nofollow&quot; href=&quot;https://jenkins.debian.net/job/reproducible_compare_Debian_sha1sums/103/console&quot;&gt;https://jenkins.debian.net/job/reproducible_compare_Debian_sha1sums/103/console&lt;/a&gt;
[3] &lt;a rel=&quot;nofollow&quot; href=&quot;https://bugs.debian.org/894441&quot;&gt;https://bugs.debian.org/894441&lt;/a&gt;
[4] &lt;a rel=&quot;nofollow&quot; href=&quot;https://lists.debian.org/debian-devel/2018/05/msg00499.html&quot;&gt;https://lists.debian.org/debian-devel/2018/05/msg00499.html&lt;/a&gt;
[5] &lt;a rel=&quot;nofollow&quot; href=&quot;https://bugs.debian.org/900837&quot;&gt;https://bugs.debian.org/900837&lt;/a&gt;
[6] &lt;a rel=&quot;nofollow&quot; href=&quot;https://lists.debian.org/debian-devel/2018/06/msg00007.html&quot;&gt;https://lists.debian.org/debian-devel/2018/06/msg00007.html&lt;/a&gt;
[7] &lt;a rel=&quot;nofollow&quot; href=&quot;https://wiki.debian.org/ReproducibleBuilds#Big_outstanding_issues&quot;&gt;https://wiki.debian.org/ReproducibleBuilds#Big_outstanding_issues&lt;/a&gt;


-- 
tschau,
        Holger

-------------------------------------------------------------------------------
               holger@(debian|reproducible-builds|layer-acht).org
       PGP fingerprint: B8BF 5413 7B09 D35C F026 FE9D 091A B856 069A AA1C
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Attachment: &lt;a href=&quot;https://lists.debian.org/debian-devel/2019/03/pgpro2GB8RB03.pgp&quot;&gt;&lt;tt&gt;signature.asc&lt;/tt&gt;&lt;/a&gt;&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;Description:&lt;/em&gt; PGP signature&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;&lt;strong&gt;Reply to:&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;/body&gt;</description>
<pubDate>Tue, 05 Mar 2019 14:19:32 +0000</pubDate>
<dc:creator>JNRowe</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lists.debian.org/debian-devel/2019/03/msg00017.html</dc:identifier>
</item>
<item>
<title>FaunaDB 2.5.4</title>
<link>https://jepsen.io/analyses/faunadb-2.5.4</link>
<guid isPermaLink="true" >https://jepsen.io/analyses/faunadb-2.5.4</guid>
<description>&lt;p&gt;In 2012, Thomson, Diamond, Weng, et al. published &lt;a href=&quot;http://cs.yale.edu/homes/thomson/publications/calvin-sigmod12.pdf&quot;&gt;Calvin: Fast Distributed Transactions for Partitioned Database Systems&lt;/a&gt;: a transactional protocol optimized for geographic replication. Each Calvin cluster is comprised of multiple &lt;em&gt;replicas&lt;/em&gt;, where a replica is a collection of nodes which store a complete copy of the dataset. Communication within replicas is assumed to be relatively fast, whereas communication between replicas (e.g. those situated in different datacenters) may incur high latency costs.&lt;/p&gt;
&lt;p&gt;Calvin’s key insight is that &lt;em&gt;ordering&lt;/em&gt; transactions, and actually &lt;em&gt;executing&lt;/em&gt; those transactions, are separable problems. Traditional databases lock objects, or use multi-version concurrency control over read and write sets to provide an implicit transaction order. Calvin, by contrast, establishes a total order of transactions &lt;em&gt;up front&lt;/em&gt;, then executes those transactions in parallel across all replicas.&lt;/p&gt;
&lt;p&gt;In order to do this, Calvin transactions must be submitted in a single request, rather than the interactive sessions provided by many traditional databases. An ordering system, called the &lt;em&gt;sequencer&lt;/em&gt;, accepts transactions, batches them up into time windows, and appends those batches to a sharded, totally ordered log. In FaunaDB, this process requires a round trip to a majority of log replicas in order to obtain consensus.&lt;/p&gt;
&lt;p&gt;With consensus on log entries, each Calvin replica can read the log and execute the transactions in it &lt;em&gt;independently&lt;/em&gt;: no coordination with other replicas is required. This is possible so long as transactions are pure—i.e., they do not perform external IO, and execute the same way given the same state at each replica. Purity also allows Calvin-based systems to batch and pipeline transactions before consensus, improving throughput.&lt;/p&gt;
&lt;p&gt;Because replicas execute transactions independently, the only time replicas must communicate is when the sequencer is constructing the log. Rather than the multiple rounds required by two-phase commit, Calvin transactions require only a single round trip between replicas (as well as a few short message delays &lt;em&gt;within&lt;/em&gt; each replica).&lt;/p&gt;
&lt;p&gt;In addition, Calvin avoids a common problem with distributed transaction protocols: there is no single point of coordination for cross-shard transactions. While many databases can execute operations on each shard independently, they may fail to support transactions across shards (e.g. MongoDB, Cassandra), or introduce a global coordinator (e.g. Zookeeper, VoltDB). Calvin has no single coordinator in the transaction path–sequencers can be made up of independent shards, each backed by a consensus system like Raft or Paxos. The total order is derived by deterministically combining short windows of transactions from each shard. This introduces a fixed latency floor, since executors must wait for each window to complete before they can begin executing that window’s transactions, but this floor can be tuned to be small, relative to the inter-replica latency within a shard’s consensus group.&lt;/p&gt;
&lt;p&gt;Some systems, like Spanner and CockroachDB, avoid the need for coordination between shards by relying on semi-synchronized wall clocks. If clock skew exceeds a certain critical threshold, such systems can exhibit transactional anomalies. In Calvin, clock skew has no impact on correctness.&lt;/p&gt;
&lt;h2 id=&quot;faunadb&quot;&gt; FaunaDB&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://fauna.com/&quot;&gt;FaunaDB&lt;/a&gt; adapts the Calvin protocol for use in a modern, indexed, and temporal document store. FaunaDB bypasses Calvin’s requirement that transactions know their read &amp;amp; write sets before execution; instead, snapshot-isolated reads are executed by a coordinator &lt;em&gt;before&lt;/em&gt; sequencing the transaction. An optimistic concurrency control protocol includes read timestamps in the transaction sent to the sequencer, allowing executors to identify whether objects have been modified since they were last read. Since transactions are pure, these conflicts can be transparently retried.&lt;/p&gt;
&lt;p&gt;FaunaDB’s records are JSON-style objects, called &lt;a href=&quot;https://app.fauna.com/documentation/reference/instances&quot;&gt;instances&lt;/a&gt;; each instance is identified by a primary key called a &lt;em&gt;ref&lt;/em&gt;. Instances belong to a collection, called a &lt;em&gt;class&lt;/em&gt;, which defines a namespace for keys as well as an optional, partial schema. An &lt;a href=&quot;https://app.fauna.com/documentation/reference/indexconfig&quot;&gt;index system&lt;/a&gt; extracts data from instances and maintains maps of terms to values, providing uniqueness constraints, secondary indices, and materialized views. Indices and classes are namespaced inside of logical &lt;em&gt;databases&lt;/em&gt;, which can be nested.&lt;/p&gt;
&lt;p&gt;To ensure purity, each transaction is a single query expression; there is no concept of an interactive transaction. To accommodate this, FaunaDB’s query language is richer than most databases’, embedding a full functional programming language based on the lambda calculus. FaunaDB queries include composite datatypes like vectors and maps, first-order anonymous functions, &lt;code&gt;let&lt;/code&gt; bindings, &lt;code&gt;do&lt;/code&gt; notation for executing multiple side effects like writes, and higher-order functional constructs like &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;. For instance, to extract names and ages from a collection of cats, indexed by type:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;sourceCode clj&quot;&gt;
&lt;code class=&quot;sourceCode clojure&quot;&gt;(q/map (q/paginate (q/match cats &lt;span class=&quot;st&quot;&gt;&quot;tabby&quot;&lt;/span&gt;))
  (q/fn [cat-ref]
    (q/let [cat (q/get cat-ref)]
      [(q/select [&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;name&quot;&lt;/span&gt;] cat)
       (q/select [&lt;span class=&quot;st&quot;&gt;&quot;data&quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&quot;age&quot;&lt;/span&gt;] cat)])))&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve written this query in a Clojure DSL, but the JSON AST it constructs is essentially the same—just a little more verbose. We take our index &lt;code&gt;cats&lt;/code&gt;, and ask for every value matching the term &lt;code&gt;&quot;tabby&quot;&lt;/code&gt;, paginating those results. Each result is a reference to a cat instance, which we transform using an anonymous function. That function looks up the value of each reference, binds that value to a variable &lt;code&gt;cat&lt;/code&gt;, and returns an array with two elements: the cat’s name and age. This query might return results like:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;sourceCode clj&quot;&gt;
&lt;code class=&quot;sourceCode clojure&quot;&gt;[[&lt;span class=&quot;st&quot;&gt;&quot;Professor Tiddlywinks&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;11&lt;/span&gt;]
 [&lt;span class=&quot;st&quot;&gt;&quot;Little Miss Snookums&quot;&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;]
 ...]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This expression-oriented syntax makes for easily composable queries that lend themselves well to programmatic construction.&lt;/p&gt;
&lt;h2 id=&quot;consistency&quot;&gt; Consistency&lt;/h2&gt;
&lt;p&gt;Fauna’s &lt;a href=&quot;https://fauna.com&quot;&gt;home page&lt;/a&gt; advertises “strong consistency”. Its &lt;a href=&quot;http://www2.fauna.com/fdbdatasheet&quot;&gt;datasheet&lt;/a&gt; claims FaunaDB is “100% ACID”, providing “data accuracy and transactional correctness without compromise”, thanks to “global strongly consistent replication”.&lt;/p&gt;
&lt;p&gt;In the October 2018 blog post &lt;a href=&quot;https://fauna.com/blog/consistency-without-clocks-faunadb-transaction-protocol&quot;&gt;Consistency Without Clocks&lt;/a&gt;, Fauna claimed their consistency protocol, unlike many competitors, prevents stale reads:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;… once a transaction commits, it is guaranteed that any subsequent transaction—no matter which replica is processing it—will read all data that was written by the earlier transaction. Other NoSQL systems, and even most SQL systems, cannot guarantee global replica consistency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And goes on to say:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;FaunaDB is an elegant, software-only solution for achieving global ACID transactions, with complete guarantees of serializability and consistency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href=&quot;https://app.fauna.com/documentation/&quot;&gt;official documentation&lt;/a&gt; has little to say about consistency invariants. However, Fauna wrote their own Jepsen tests, and published a &lt;a href=&quot;https://www2.fauna.com/correctnessreport&quot;&gt;report&lt;/a&gt; which made more specific claims:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;FaunaDB provides strict serializability—or linearizability—for transactions that write, and serializability for transactions that only read data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is, however, not entirely correct. A more nuanced story may be found in an &lt;a href=&quot;https://fauna.com/blog/acid-transactions-in-a-globally-distributed-database&quot;&gt;architecture blog post&lt;/a&gt; from 2017, which lays out FaunaDB’s replication algorithm and guarantees in detail:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Read-write transactions in FaunaDB where all reads opt in to optimistic locking as described above are strictly serializable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The key detail here is “where all reads opt in”: indices in Fauna do not participate in optimistic locking by default, and only guarantee snapshot isolation. However, by enabling an index’s &lt;code&gt;serialized&lt;/code&gt; mode, we can recover serializability for indices. Unique indices imply &lt;code&gt;serialized&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;Furthermore, read-only transactions, for performance reasons, also execute at snapshot isolation, and may return stale data:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Since read-only transactions in FaunaDB always have a specific snapshot time but are not sequenced via the transaction log, they run at snapshot isolation, which for read-only transactions is equivalent to serializable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After careful consultation with Fauna’s engineers, we believe FaunaDB’s intended consistency levels fall between &lt;a href=&quot;https://jepsen.io/consistency/models/snapshot-isolation&quot;&gt;snapshot isolation&lt;/a&gt; and &lt;a href=&quot;https://jepsen.io/consistency/models/strict-serializable&quot;&gt;strict serializability&lt;/a&gt;, depending on whether the transaction is read-only, whether indices are used, and whether those indices are flagged as serializable.&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;No indices&lt;/td&gt;
&lt;td&gt;Strict-1SR&lt;/td&gt;
&lt;td&gt;Serializable&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Serializable indices&lt;/td&gt;
&lt;td&gt;Strict-1SR&lt;/td&gt;
&lt;td&gt;Serializable&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Indices&lt;/td&gt;
&lt;td&gt;SI&lt;/td&gt;
&lt;td&gt;SI&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Although snapshot isolation allows anomalies like stale reads and write skew, it’s still a relatively strong consistency model. We expect to observe snapshot isolation at a minimum, and where desired, we can promote SI or serializable transactions to strict serializability: the gold standard for concurrent systems.&lt;/p&gt;

&lt;p&gt;Fauna wrote their own Jepsen tests, which we refined and expanded throughout our collaboration. We evaluated FaunaDB 2.5.4 and 2.5.5, as well as several development builds up to 2.6.0-rc10. Our tests used three replicas, and 5–10 nodes, striped across replicas evenly. Log node topologies in 2.5.4 and 2.5.5 were explicitly partitioned, with a copy in every replica. We waited for data movement to complete, and for all indices to signal readiness, before beginning testing.&lt;/p&gt;
&lt;p&gt;Starting a FaunaDB cluster in 2.5.5 and 2.5.6 was a slow process, requiring ~10 minutes to stabilize. While FaunaDB will service requests during this time, latencies are highly variable. Moreover, queries against newly created indices can return inconsistent data until data movement completes. To speed up testing, we shut down every node and &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/auto.clj#L77-L88&quot;&gt;cache their data files&lt;/a&gt; after completing the initial join process, and begin subsequent tests by resetting the cluster to that saved state. Fauna reports that cluster bootstrap time has been improved in version 2.6.1.&lt;/p&gt;
&lt;p&gt;We evaluated a &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/nemesis.clj#L20&quot;&gt;variety of network failure modes&lt;/a&gt;, including partitions isolating a single node, majority/minority partitions within a single replica, and partitions isolating a single replica from the others. We checked FaunaDB’s behavior through process crashes and restarts, small and large jumps in clock skew, and rapidly strobing clocks. We also tested with rolling restarts, while changing FaunaDB’s log node configuration, and removing and adding nodes to the cluster.&lt;/p&gt;
&lt;p&gt;We designed a &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/runner.clj#L30-L57&quot;&gt;family of workloads&lt;/a&gt; for FaunaDB using the &lt;a href=&quot;https://github.com/jepsen-io/jepsen&quot;&gt;Jepsen&lt;/a&gt; library, designed to stress inserts, single-key linearizable transactions, multi-key snapshot isolation, pagination, phantoms, monotonicity, temporal queries, and internal consistency within transactions.&lt;/p&gt;
&lt;h2 id=&quot;sets&quot;&gt; Sets&lt;/h2&gt;
&lt;p&gt;Our &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/set.clj&quot;&gt;set test&lt;/a&gt; inserts a series of unique numbers as separate instances, one per transaction, and attempts to read them back through an index. Previous Jepsen analyses relied on a single final read to determine the fate of each element, but for FaunaDB, we designed a &lt;a href=&quot;https://github.com/jepsen-io/jepsen/blob/3e215342a2678cde716e2875faccb5adbdcc8644/jepsen/src/jepsen/checker.clj#L388-L503&quot;&gt;more thorough, quantitative analyzer&lt;/a&gt;: we &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/set.clj#L88&quot;&gt;read throughout the test&lt;/a&gt;, and measure whether successfully inserted instances eventually disappeared, or were visible to all reads after some time &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt;. We also compute latency distributions for both lost and stable reads, e.g. how long must one wait to ensure that a successful write is visible to all future reads.&lt;/p&gt;
&lt;p&gt;Because FaunaDB treats read-only and update transactions differently, a variant of the set test uses a “strong read” transaction, which includes a spurious write to an unrelated class in order to force the transaction to go through the full commit path.&lt;/p&gt;
&lt;h2 id=&quot;registers&quot;&gt; Registers&lt;/h2&gt;
&lt;p&gt;Strict serializability implies &lt;a href=&quot;https://jepsen.io/consistency/models/linearizable&quot;&gt;linearizability&lt;/a&gt;, so we &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/register.clj#L30-L62&quot;&gt;evaluated&lt;/a&gt; whether FaunaDB supports linearizable operations on single instances, using an undocumented &lt;code&gt;/linearized&lt;/code&gt; endpoint in the FaunaDB API. We &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/register.clj#L78-L81&quot;&gt;generate&lt;/a&gt; randomized reads, writes, and compare-and-set operations, and measure whether the resulting history is linearizable using the &lt;a href=&quot;https://github.com/jepsen-io/knossos&quot;&gt;Knossos&lt;/a&gt; linearizability checker.&lt;/p&gt;
&lt;h2 id=&quot;bank&quot;&gt; Bank&lt;/h2&gt;
&lt;p&gt;As with other transactional systems like &lt;a href=&quot;https://jepsen.io/analyses/cockroachdb-beta-20160829&quot;&gt;CockroachDB&lt;/a&gt; and &lt;a href=&quot;https://jepsen.io/analyses/dgraph-1-0-2&quot;&gt;Dgraph&lt;/a&gt;, we stressed FaunaDB’s snapshot isolation in a simulated &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/bank.clj&quot;&gt;bank-account system&lt;/a&gt;. We model each account as a single FaunaDB instance, and &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/bank.clj#L102-L129&quot;&gt;transfer money between accounts in transactions&lt;/a&gt;. Because transfers write every value they read, transfer transactions are serializable under snapshot isolation. Snapshot reads should therefore observe a constant total balance, across all accounts.&lt;/p&gt;
&lt;p&gt;To stress reads of recently created and deleted instances, one variant of this test deletes accounts when their balance falls to zero, and creates new ones when necessary. To explore both instance and index reads, we perform reads by directly querying all &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; accounts, or by reading their balances from an index. We can also test temporal queries by reading at a particular snapshot time, vs reading the current value.&lt;/p&gt;

&lt;p&gt;Exploratory testing suggested that reading multiple pages of records (e.g. from an index) could result in inconsistent results. To quantify this behavior, we designed a test specifically to &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/pages.clj&quot;&gt;stress FaunaDB’s query pagination mechanism&lt;/a&gt;. We insert groups of &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; instances in a single transaction, and, concurrently, paginate through all records in the index. We &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/pages.clj#L67-L144&quot;&gt;expect&lt;/a&gt; that if any instance from an insert transaction is present in a read, then that read should also contain all other instances inserted in the same transaction; violations imply read skew.&lt;/p&gt;
&lt;h2 id=&quot;g2&quot;&gt; G2&lt;/h2&gt;
&lt;p&gt;The bank test verifies snapshot isolation, but serializability implies more restrictive invariants—for instance, the absence of &lt;a href=&quot;http://pmg.csail.mit.edu/papers/adya-phd.pdf&quot;&gt;Adya’s&lt;/a&gt; phenomenon G2: anti-dependency cycles. To stress FaunaDB’s support for serializable indices, we execute &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/g2.clj#L56-L62&quot;&gt;pairs of transactions&lt;/a&gt;, each of which performs an index read looking for a specific write which would have been performed by the other transaction. If the other transaction’s write is detected, we abort the transaction. In a serializable system, &lt;a href=&quot;https://github.com/jepsen-io/jepsen/blob/d85dfd497d4f981b4fb84cae7476404c49752b82/jepsen/src/jepsen/tests/adya.clj#L69-L84&quot;&gt;at most one of these transactions may commit&lt;/a&gt;, but in a weaker isolation model, like snapshot isolation or repeatable read, these anti-dependency cycles may be allowed.&lt;/p&gt;
&lt;h2 id=&quot;internal&quot;&gt; Internal&lt;/h2&gt;
&lt;p&gt;Many of our tests measure the isolation boundaries between different transactions; ensuring, for instance, that a transaction’s effects become visible all at once, or that there exists an apparent total order of transactions. However, transactions should also exhibit &lt;em&gt;internal&lt;/em&gt; consistency: changes made within a transaction should be visible to later reads within that same transaction.&lt;/p&gt;
&lt;p&gt;We explore internal ordering effects by &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/internal.clj#L79-L120&quot;&gt;creating objects matching a predicate&lt;/a&gt;, and within the same transaction, querying that predicate to check whether or not they appear. We also &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/internal.clj#L122-L131&quot;&gt;alter those objects&lt;/a&gt;, changing what predicate they fall under, and confirm that &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/internal.clj#L139-L190&quot;&gt;old and new predicates reflect that change&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;monotonic&quot;&gt; Monotonic&lt;/h2&gt;
&lt;p&gt;FaunaDB clients keep track of the highest timestamp they’ve interacted with, and provide it with each request to ensure that they always read successive states of the system; although reads may observe stale states, they should never observe an older state than one that client previously observed. To verify this, we set up a counter which &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/monotonic.clj#L100-L110&quot;&gt;increments over time&lt;/a&gt;. Since the counter value always increases, successive reads of that value by any single client should observe &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/monotonic.clj#L151-L172&quot;&gt;monotonically increasing transaction timestamps and values&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also perform &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/monotonic.clj#L118-L128&quot;&gt;temporal queries&lt;/a&gt;, reading from a timestamp a few seconds in the past or future. Of course the resulting timestamps and values are non-monotonic, since we are reading from random times. However, the &lt;em&gt;relationship&lt;/em&gt; between timestamps and values &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/monotonic.clj#L194-L219&quot;&gt;should be globally monotonic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We observed sporadic failures in the monotonic test, and designed a variant optimized for read and write throughput, while removing write contention. Instead of performing increment transactions (which read a register’s value, add one, and write the resulting value back) we perform blind writes of &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/multimonotonic.clj#L318-L331&quot;&gt;sequential values from a single process&lt;/a&gt;. This still guarantees that the values in the database should increase monotonically, but reduces transaction retries (and potential race conditions) due to increment contention. Unlike the monotonic test, which observes only a single register, we work with &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/multimonotonic.clj#L97-L105&quot;&gt;several registers concurrently&lt;/a&gt;, giving us more chances to observe non-monotonic behavior.&lt;/p&gt;
&lt;p&gt;Read transactions fetch the current values of a randomly selected subset of recently written keys, and record not only the time that the read transaction executed, but also the modification timestamps from each observed register. We then order reads by transaction timestamp, and verify that &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/multimonotonic.clj#L179-L242&quot;&gt;the values observed for each key monotonically increase&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;performance-limitations&quot;&gt; Performance Limitations&lt;/h2&gt;
&lt;p&gt;FaunaDB’s recovery from a network partition was relatively slow: in 2.5.4 and 2.5.5, it took 20–80 seconds, depending on cluster topology, to recover from a partition isolating a single replica. This limited the rate at which we could create meaningful network faults, and reduced our probability of reaching interesting failure states. Fauna is aiming for recovery times of 500 ms or less—in line with similar consensus systems. Presently, development builds of 2.6.1 can take 30 seconds to recover from some network partitions. Fauna reports that this issue is related to the responsiveness of the &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;Φ&lt;/em&gt;&lt;/span&gt;-accrual failure detector, and has been fixed in the upcoming 2.6.2 release.&lt;/p&gt;
&lt;h2 id=&quot;possible-surprises&quot;&gt; Possible Surprises&lt;/h2&gt;
&lt;p&gt;FaunaDB’s query documentation says that &lt;a href=&quot;https://app.fauna.com/documentation/reference/queryapi#let&quot;&gt;let bindings&lt;/a&gt; and &lt;a href=&quot;https://app.fauna.com/documentation/reference/queryapi#do&quot;&gt;do expressions&lt;/a&gt; evaluate their forms sequentially, left-to-right. However, the evaluation semantics for collection literals, like &lt;code&gt;[1, 2, 3]&lt;/code&gt; or &lt;code&gt;{type: &quot;cat&quot;, sound: &quot;meow&quot;}&lt;/code&gt; were not explicitly specified. As it turns out, those forms are &lt;em&gt;also&lt;/em&gt; evaluated in array or object literal order, so a query like…&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{a: Paginate(Match(index ...))
 b: Create(...)
 c: Paginate(Match(index ...))}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;means that &lt;code&gt;a&lt;/code&gt; will not reflect the results of the &lt;code&gt;Create&lt;/code&gt; call, but &lt;code&gt;c&lt;/code&gt; will. Users should be careful to use order-preserving maps when constructing FaunaDB queries in their language, to avoid the accidental reordering of side effects. Fauna has since documented this.&lt;/p&gt;
&lt;p&gt;This also applies to temporal queries: normally, &lt;code&gt;At(some-timestamp, Paginate(...))&lt;/code&gt; will always return the same results, based on the state of the database at the given timestamp. However, if a temporal query’s timestamp is the same as the current transaction timestamp, the value of that temporal query depends on that transaction’s prior writes.&lt;/p&gt;
&lt;h2 id=&quot;minor-issues&quot;&gt; Minor Issues&lt;/h2&gt;
&lt;p&gt;FaunaDB’s data definition language (DDL) is non-transactional: schema changes are asynchronously cached, and may take several seconds to apply. This allows some unusual transient behaviors, including:&lt;/p&gt;
&lt;ul readability=&quot;11.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;In 2.5.4, you cannot create a class and an index on that class in the same transaction; you have to perform a second transaction to create the index.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;Classes and indices cannot be transactionally upserted. Queries that create a class iff that class does not currently exist may fail to observe an already created class, then, on inserting, throw an “instance not unique” error. This behavior was a known bug in 2.5.4, and a fix is planned for 2.7.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Creating a class does not necessarily guarantee a subsequent transaction will be able to insert into that class. In FaunaDB 2.5.4, for example, inserts into recently created classes may return errors like “invalid ref: Ref refers to undefined class”. A fix is planned for 2.7.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;Newly created indices are queryable, but are built asynchronously. Even if the collection being indexed is empty, transactions using that index could return inconsistent data for several seconds (and, for clusters undergoing data movement, potentially much longer). Users should be careful to poll newly created indices until they show &lt;code&gt;active: true&lt;/code&gt;, which indicates that the index is ready for use. We observed this problem in 2.5.4 through 2.6.0-rc10; it is fixed in development builds of 2.6.1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We also encountered problems changing cluster topology:&lt;/p&gt;
&lt;ul readability=&quot;18.287722317843&quot;&gt;&lt;li readability=&quot;2.75&quot;&gt;
&lt;p&gt;In 2.5.5, we found that one cannot follow the &lt;a href=&quot;https://app.fauna.com/documentation/howto/operations/removenode&quot;&gt;documented procedure&lt;/a&gt; for removing a node: asking a node to remove itself from the cluster will always fail. Instead, removes must be initiated on a different node. Fauna fixed this in 2.6.0-rc1.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;We were unable to remove nodes from 2.5.5 clusters, either by removing the node before killing it, or by stopping or killing the node to be removed first, then asking remaining nodes to remove it. Removed nodes would complete the drain process, but never actually leave the cluster. This bug was fixed in 2.5.6-rc4.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;In 2.5.5, configuration and topology changes could result in nodes returning unexpected internal server errors to clients, including “FaunaDB Service is uninitialized” and “Transaction Log is uninitialized.” These errors include a warning to contact Fauna’s support team, but appear harmless; Fauna fixed these in 2.6.0-rc1.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;In 2.5.5 and 2.5.6-rc4, rebooting nodes to apply topology changes could result in nodes throwing “operator error: No configured replica for key: 0x…” until the topology had stabilized. These errors appear harmless, and Fauna removed them in 2.6.0-rc1.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;In 2.6.0-rc1, Fauna removed the need to manually assign nodes to log shards in the config file, allowing FaunaDB to manage log topology automatically. However, we identified a bug in this system: nodes could leave the cluster before their log partitions had been spun down or migrated to other nodes, which could cause future node leave operations to stall indefinitely. Fauna addressed this in 2.6.0-rc7.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;In 2.6.0-rc7, removing nodes could stall when transaction pipelines blocked, awaiting transactions from a log segment that was already closed (but not yet destroyed). Fixed in 2.6.0-rc10.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And availability issues on startup:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In 2.5.6-rc4 and -rc9, concurrently rebooting nodes to apply configuration changes, or rebooting nodes when other nodes are inaccessible due to a network partition, could result in nodes connecting to the cluster, but never binding port 8444, which is used for client queries and administrative operations. When a node is unable to join the consensus ring which manages the cluster, it blocks the node from completing the startup process. This issue is addressed in 2.6.0-rc10.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;clock-skew-unavailability&quot;&gt; Clock Skew Unavailability&lt;/h2&gt;
&lt;p&gt;FaunaDB’s replication protocol uses consensus, not wall clocks, to construct its transaction logs. Indeed, in &lt;a href=&quot;https://fauna.com/blog/consistency-without-clocks-faunadb-transaction-protocol&quot;&gt;Consistency Without Clocks&lt;/a&gt;, Fauna repeatedly claims that “FaunaDB requires no clock synchronization.” However, the &lt;a href=&quot;https://app.fauna.com/documentation/howto/operations/newclustersetup&quot;&gt;installation instructions&lt;/a&gt; mention that one must first install “NTP, with the clocks synced across nodes”.&lt;/p&gt;
&lt;p&gt;Specifically, FaunaDB still relies on wall clocks to decide when to seal time windows in the log, which means that clock skew can delay transaction processing. We tested FaunaDB with a range of clock skews from milliseconds to hundreds of seconds, over multi-second windows, and strobing rapidly every few milliseconds, as well as gradually increasing and decreasing offsets. We applied these clock adjustments to randomly selected single nodes, repeatedly to a single node, and to randomly selected subsets.&lt;/p&gt;
&lt;p&gt;In none of our clock tests did FaunaDB exhibit new safety violations. However, clock skew &lt;em&gt;can&lt;/em&gt; cause partial or total unavailability. Specifically, when a single node is skewed by &lt;code&gt;offset&lt;/code&gt; seconds relative to the rest of the cluster…&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Small positive skews appear to have little impact.&lt;/li&gt;
&lt;li&gt;Skews over 10 seconds can result in 5-second timeouts for all requests on the affected node, until the clock skew is resolved. Once the clock is resynchronized, it takes an additional &lt;code&gt;offset&lt;/code&gt; seconds for the node to recover.&lt;/li&gt;
&lt;li&gt;Small negative skews can result in elevated latencies (~20 seconds) on single nodes.&lt;/li&gt;
&lt;li&gt;Negative skews more than 10 seconds can result in 60 second timeouts on that node, which persist until the clock skew is resolved. However, &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181204T004801-20-second-negative-skew.zip&quot;&gt;they can also cause cluster-wide disruption&lt;/a&gt;, where most requests encounter 60 second timeouts, while a few requests proceed normally. Ending the clock skew resolves the unavailability immediately.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Skews on multiple nodes, or skews which change over time, can result in complex combinations of these behaviors, including total unavailability. Predicting exactly how FaunaDB will respond is somewhat difficult; we believe effects depend on whether the primary node for a given log partition was affected, and whether the skew was forward or backwards in time. There may also be a dependence on internal and client timeouts.&lt;/p&gt;
&lt;p&gt;Clock synchronization is theoretically not required for FaunaDB availability; Fauna plans to address this issue in 2.7.&lt;/p&gt;
&lt;h2 id=&quot;missing-negative-integer-values&quot;&gt; Missing Negative Integer Values&lt;/h2&gt;
&lt;p&gt;Initial designs of the pagination test inserted positive and negative pairs of integers in the same transaction, e.g &lt;code&gt;[-5, 5]&lt;/code&gt;. To our surprise, querying the index for all values returned only positive numbers, never negative ones. This occurred because FaunaDB began paginating result sets at 0, not at &lt;code&gt;MIN_LONG&lt;/code&gt;. Because FaunaDB sorts doubles after longs, and traversal begins at the long value &lt;code&gt;0&lt;/code&gt;, this problem only affected integers, not floating-point numbers.&lt;/p&gt;
&lt;p&gt;We found this issue in 2.5.4, and it was fixed in 2.5.5. As a workaround, users on 2.5.4 and lower can begin any pagination of sets containing negative integer values with &lt;code&gt;{after: MIN_LONG}&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;time-is-a-flat-circle&quot;&gt; Time is a Flat Circle&lt;/h2&gt;
&lt;p&gt;As a temporal database, FaunaDB exposes an &lt;code&gt;events&lt;/code&gt; query which returns the history of events (e.g. creates, updates, and deletes) affecting a given instance, or predicate query. However, when we used event queries to check the history of a single instance, we discovered the returned sequence of events formed an infinite loop.&lt;/p&gt;
&lt;p&gt;When paginating through events, FaunaDB returns the most recent page of events first, but in chronological order. That is, if we number events 0, 1, 2, …, then the first page of results might return events &lt;code&gt;[10, 11, 12, 13]&lt;/code&gt;. This makes some sense; one is typically more interested in recent than ancient history. However, the pointers to request additional pages are broken: there is no &lt;code&gt;before&lt;/code&gt; page, and the &lt;code&gt;next&lt;/code&gt; page begins at event 9. Requesting the next page iterates in ascending order from 9, returning the exact same page: &lt;code&gt;[10, 11, 12, 13]&lt;/code&gt;, rather than &lt;code&gt;[6, 7, 8, 9]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Fauna fixed this issue in 2.6.0-rc10.&lt;/p&gt;

&lt;p&gt;By design, FaunaDB has no way to return unbounded result sets. Instead, one requests a &lt;a href=&quot;https://app.fauna.com/documentation/reference/queryapi#paginate&quot;&gt;page of results&lt;/a&gt; of a certain size—by default, 64 elements. Page objects also include references to the previous and next pages of results, which provides “cursor-like semantics”.&lt;/p&gt;
&lt;p&gt;The mechanism Fauna used in their Jepsen tests was to fetch the first page of results, and with the &lt;code&gt;after&lt;/code&gt; cursor from that page, make the same paginated query, but after the given cursor, and to continue traversing the result set until no &lt;code&gt;after&lt;/code&gt; cursor remained. This is also how the &lt;a href=&quot;https://github.com/fauna/faunadb-js/blob/be691716c076d1277849a77b521d275da273fc7f/src/PageHelper.js&quot;&gt;FaunaDB Javascript client&lt;/a&gt; iterates through results.&lt;/p&gt;
&lt;p&gt;This approach is intuitive, sensible, and wrong. Pagination cursors only encode the &lt;em&gt;value&lt;/em&gt; that the next page should begin after, not the &lt;em&gt;time&lt;/em&gt;. Since each page is fetched in a separate query, and since each query executes at a different transaction time, modifications to result sets during traversal may result in inconsistent snapshots. For instance, a transaction could insert the numbers 80 and 81 together, but if the two elements happen to fall on different pages, a paginated query could observe 81 but &lt;em&gt;not&lt;/em&gt; 80, which violates snapshot isolation.&lt;/p&gt;
&lt;p&gt;The documentation says that pagination can be used to “walk the result set in blocks”, but doesn’t actually claim that result sets are transactional. Whether this behavior violates Fauna’s claimed invariants depends on how users interpret the documentation. FaunaDB is a temporal database, so one might reasonably expect pagination cursors to include temporal information. However, each page &lt;em&gt;is&lt;/em&gt; fetched in a different query, and FaunaDB generally does not enforce transactional isolation across queries.&lt;/p&gt;
&lt;p&gt;When paginating, users should be aware of the possibility of read skew, missing elements, duplicated elements, etc., and use the same timestamp for all pages where snapshot isolation is required.&lt;/p&gt;

&lt;p&gt;To work around this issue, we redesigned how Jepsen iterates through paginated results; we fetch the snapshot time &lt;code&gt;ts&lt;/code&gt; along with the first page of results, and &lt;a href=&quot;https://github.com/fauna/jepsen/blob/b5c3b20d27166ca87796b48077ac17feec2937f9/src/jepsen/faunadb/client.clj#L224-L265&quot;&gt;wrap every subsequent page query&lt;/a&gt; in &lt;code&gt;At(ts, Paginate(...))&lt;/code&gt;, ensuring that every page observes the same logical timestamp. Unfortunately, pagination tests &lt;a href=&quot;https://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181011T111249.000-0400-pages-serialized-index-inconsistent.zip&quot;&gt;continued to show read skew&lt;/a&gt;, both with normal and serialized indices.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[{:op
  {:type :ok,
   :f :read,
   :value
   [-9750
    -9282
    ...
    9937
    9991],
   :process 18,
   :time 667358917338,
   :index 82},
  :errors
  #{{:expected #{2392 -1576 -3715 3539},
     :found #{3539}}
    ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this particular read, several transactions were only partly visible: for instance, 2392, -1576, -3715, and 3539 were inserted in the same transaction, but of those, only 3539 was actually visible in the read. These problems occurred in version 2.5.4, in healthy clusters without faults.&lt;/p&gt;
&lt;p&gt;This anomaly manifested regardless of whether indices had one or multiple data partitions. Moreover, careful inspection revealed that not only could FaunaDB exhibit read skew between pages, but that a &lt;em&gt;single page&lt;/em&gt; could include incomplete writes from other transactions. This suggested a more fundamental problem than pagination—perhaps the index structure itself was improperly isolated.&lt;/p&gt;
&lt;h2 id=&quot;inconsistent-indices&quot;&gt; Inconsistent Indices&lt;/h2&gt;
&lt;p&gt;To explore this more fully, we designed two variants of the bank test: one which reads all accounts by making requests for &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; specific keys, and one which requests all values from an index. We found that although instance reads appeared safe, index reads could observe wildly inconsistent values. For instance, in a system of 8 bank accounts containing $100, with 10 clients making concurrent transfers up to $5, the &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181011T151047.000-0400-bank-serialized-index-fixed-instances.zip&quot;&gt;observed total of all account values could fluctuate&lt;/a&gt; between $27 and $126. This clearly violates FaunaDB’s claims of snapshot and serializable isolation for indices.&lt;/p&gt;
&lt;img src=&quot;https://jepsen.io/analyses/faunadb-2.5.4/bank-serialized-index-fixed-instances.png&quot; alt=&quot;Plot of total balances over time, colored by node. In a snapshot isolated system, every read would return exactly 100.&quot;/&gt;Plot of total balances over time, colored by node. In a snapshot isolated system, every read would return exactly 100.
&lt;p&gt;In healthy clusters, on versions 2.5.4, 2.5.5, and 2.6.0-rc7, we found roughly 60% of reads could observe inconsistent states. This occurred with both serialized and normal indices, and both fixed and dynamic pools of account instances.&lt;/p&gt;
&lt;p&gt;These read skew issues stemmed from an incomplete implementation of &lt;em&gt;bitemporal indices&lt;/em&gt;: while Fauna planned to allow queries to observe a consistent view of an index at any point in time, that system was only partly implemented prior to 2.6.0.&lt;/p&gt;
&lt;p&gt;Internally, changes to FaunaDB instances are tracked by assigning each change a distinct &lt;em&gt;version&lt;/em&gt;, and retaining old versions of instances for a configurable period (by default, 30 days) before garbage collection. To read the state of an instance &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; at timestamp &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt;, a transaction would ensure that the server had applied every transaction up to &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; in the log, then find the version of &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; with the highest timestamp &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;r&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; such that &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;&lt;em&gt;r&lt;/em&gt;&lt;/sub&gt; &amp;lt; &lt;em&gt;t&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Unlike instances, index entries did not always store a separate version for every change. Instead, if an index entry with the same value already existed, that entry’s timestamp &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt; would be &lt;em&gt;overwritten&lt;/em&gt; with a new timestamp &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now imagine an index read executed at some time &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; between &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt; and &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;—either one executed explicitly in the past, or circa some update to the given index entry. That read should observe our index entry, since it was present at &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;. However, because the index entry’s timestamp was changed to &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;, the read would &lt;em&gt;skip&lt;/em&gt; that entry, and instead observe some older state for that index term—perhaps the empty state, or some prior value. Voilà: read skew! Fauna fixed this issue in 2.6.0-rc9.&lt;/p&gt;

&lt;p&gt;Unfortunately, bitemporal indices were not the only problem leading to read skew. In FaunaDB 2.6.0-rc7, our pagination test observed that reads of uniformly distributed integers could return fewer records than expected—in some cases, less than a quarter of instances that should have been present. For instance, a read might observe:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;sourceCode clj&quot;&gt;
&lt;code class=&quot;sourceCode clojure&quot;&gt; [-&lt;span class=&quot;dv&quot;&gt;9759&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;9748&lt;/span&gt; -&lt;span class=&quot;dv&quot;&gt;9714&lt;/span&gt; ... &lt;span class=&quot;dv&quot;&gt;4279&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4291&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5195&lt;/span&gt;]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181205T153816-serialized-indices-pages.zip&quot;&gt;particular history&lt;/a&gt;, elements -9714, -6722, 7406, and 7901 were inserted in the same transaction, but traversal appears to have stopped after 5195: elements 7406 and 7901 are missing. These read skew errors were ubiquitous, even in healthy clusters, with both normal and serialized indices.&lt;/p&gt;
&lt;p&gt;This occurred because of a bug in index traversal: the query engine filtered out unapplied transactions from the index, but still counted those unapplied transactions towards the total number of results for a given page—effectively skipping &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; records at the end of each page, where &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; was the number of uncommitted transactions visible during the traversal. Fauna fixed this bug in 2.6.0-rc9.&lt;/p&gt;
&lt;h2 id=&quot;non-temporal-temporal-queries&quot;&gt; Non-temporal Temporal Queries&lt;/h2&gt;
&lt;p&gt;As a temporal database, FaunaDB allows queries to inspect the state of the database at any point in time. Any query can be wrapped with &lt;code&gt;At(t, ...)&lt;/code&gt; to observe what that query would have seen at timestamp &lt;code&gt;t&lt;/code&gt;. However, temporal queries for the state of a single instance at time &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; exhibited inconsistent behavior similar to the bitemporal index problem: queries would be prohibited from returning the state of that instance after &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt;, but could observe any state—not just the most recent state—before &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;img src=&quot;https://jepsen.io/analyses/faunadb-2.5.4/non-monotonic-temporal-100s.png&quot; alt=&quot;Plot of register values vs FaunaDB timestamps, broken down by process. Queries are performed at the current FaunaDB timestamp, plus or minus 100 seconds. Notice that the values of registers can appear to decrease as timestamps increase, even for a single process talking to a single server.&quot;/&gt;Plot of register values vs FaunaDB timestamps, broken down by process. Queries are performed at the current FaunaDB timestamp, plus or minus 100 seconds. Notice that the values of registers can appear to decrease as timestamps increase, even for a single process talking to a single server.
&lt;p&gt;This resulted in apparent paradoxes where transaction &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt; would read at time &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;, and &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; read at a later time &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;—but &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; observed an &lt;em&gt;earlier&lt;/em&gt; state than &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;. This issue affected instance reads, not just indices.&lt;/p&gt;
&lt;p&gt;For example, in the monotonic test, we read an instance with a monotonically increasing value. Because the value never decreases, reads at higher times should show higher values. However, if we perform temporal queries at the current transaction time plus or minus, say, 10 seconds, we observe a distinctly &lt;em&gt;non&lt;/em&gt;-monotonic relationship between timestamps and values.&lt;/p&gt;
&lt;p&gt;In this graph, note that the spread of timestamps which can observe the same value is roughly 100 seconds. This occurs because reads at &lt;em&gt;future&lt;/em&gt; timestamps (up to 100 seconds from the current time) observe whatever &lt;em&gt;current&lt;/em&gt; state some node has available, resulting in a spread of possible values for the same timestamp, whereas reads at &lt;em&gt;past&lt;/em&gt; timestamps observe the fixed value for that timestamp, giving rise to the clean upper bound on observed values.&lt;/p&gt;
&lt;p&gt;Moreover, this bug allowed temporal reads of multiple instances to return the state of one instance at &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;, and the state of another at &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;t&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;, allowing read skew. For instance, in &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181026T110252-bank-at-queries.zip&quot;&gt;this bank test&lt;/a&gt;, we replace our normal reads with temporal reads, +/- 10 seconds from the current time. Network partitions cause some replicas to lag behind others in applying transactions. Out of 7190 reads, 5 observed an inconsistent state.&lt;/p&gt;
&lt;img src=&quot;https://jepsen.io/analyses/faunadb-2.5.4/bank-at-query.png&quot; alt=&quot;Plot of total balances over time, colored by node. In a snapshot isolated system, every read should have observed $100.&quot;/&gt;Plot of total balances over time, colored by node. In a snapshot isolated system, every read should have observed $100.
&lt;p&gt;Unusually, some reads observed &lt;em&gt;no&lt;/em&gt; accounts whatsoever, which would be a legal read of the database state before the test had ever begun. However, this test reads at most 10 seconds into the past—and the read of zero occurred over a hundred seconds into the test. We found that temporal reads in 2.5.5 weren’t just able to read recent (but non-monotonic) states—in general, they can read quite old ones, including the empty state.&lt;/p&gt;
&lt;p&gt;Fauna was aware of this bug before Jepsen identified it in 2.5.5, and fixed the issue in FaunaDB 2.6.0-rc9. Near-present and future reads no longer result in frequent non-monotonic anomalies.&lt;/p&gt;
&lt;h2 id=&quot;non-monotonicity-long-fork-read-skew&quot;&gt; Non-monotonicity, Long Fork, Read Skew&lt;/h2&gt;
&lt;p&gt;While 2.6.0-rc9 resolved the largest cause of read skew in temporal queries, Jepsen continued to see occasional test failures in monotonic, multi-monotonic, and bank tests. We observed these errors sporadically in healthy clusters and more frequently with process crashes and restarts, and they occurred with both normal and temporal queries.&lt;/p&gt;
&lt;p&gt;For instance, in monotonic tests (even without temporal reads) a single process reading a single increment-only instance could read 4, 5, 6, then 5 again. This is legal under snapshot isolation, because read-only transactions are allowed to observe &lt;em&gt;any&lt;/em&gt; past timestamp. However, this behavior violates FaunaDB’s session guarantee: clients should always read a state &lt;em&gt;at least&lt;/em&gt; as recent as any they have in the past.&lt;/p&gt;
&lt;p&gt;As it turns out, Fauna discovered a race condition in the client, which updated the client’s highest-seen timestamp &lt;em&gt;after&lt;/em&gt;, not &lt;em&gt;before&lt;/em&gt;, returning results to a caller. However, our anomalies were caused by something different: read timestamps &lt;em&gt;did&lt;/em&gt; increase monotonically, but values occasionally &lt;em&gt;went backwards&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We designed the multi-monotonic test to explore this behavior in more detail, and discovered two things. First, this behavior occurs only sporadically, but when it &lt;em&gt;does&lt;/em&gt; occur, several reads may observe non-monotonic state, which suggests some sort of transition within the FaunaDB cluster may be to blame. Second, the problem is worse than simple non-monotonicity.&lt;/p&gt;
&lt;p&gt;To understand why, consider &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181213T192148-non-monotonic-long-fork.zip&quot;&gt;this test run&lt;/a&gt;, which exhibited six non-monotonic reads. The fourth (at index 526670) observed a value and write timestamp for key 3676 which were &lt;em&gt;lower&lt;/em&gt; than observed by a prior read (at index 526569).&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;00:38:13.695940&lt;/td&gt;
&lt;td&gt;1544747893688800&lt;/td&gt;
&lt;td&gt;291&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;00:38:13.752572&lt;/td&gt;
&lt;td&gt;1544747893588600&lt;/td&gt;
&lt;td&gt;290&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;However, these two read transactions observed &lt;em&gt;more&lt;/em&gt; than key 3676—they read other keys as well. We’ll consider just a few of those here, for illustrative purposes:&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;Read 1&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;291&lt;/td&gt;
&lt;td&gt;264&lt;/td&gt;
&lt;td&gt;347&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;Read 2&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;290&lt;/td&gt;
&lt;td&gt;265&lt;/td&gt;
&lt;td&gt;348&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Key 3297 is unchanged, 3676 has decreased, and 4189 &amp;amp; 5432 both increased. Consider the possible orders of writes which could lead to such a snapshot: in order to observe 4189 increasing, read 1 must precede the write increasing 4189 to 265, and read 2 must come thereafter. Therefore, read 1 must precede read 2. However, the exact &lt;em&gt;opposite&lt;/em&gt; constraint applies on key 3676: read 2 must precede read 1. These snapshots are not compatible with a total order of write transactions.&lt;/p&gt;
&lt;p&gt;This particular anomaly is known as “long fork”: two write transactions &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt; &amp;amp; &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; which write disjoint keys can have their writes observed in contradictory orders: one read observes &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt; but not &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt;, while another observes &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; but not &lt;span class=&quot;math inline&quot;&gt;&lt;em&gt;T&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;&lt;/span&gt;. This violates snapshot isolation, although it is legal under &lt;a href=&quot;http://www.news.cs.nyu.edu/~jinyang/pub/walter-sosp11.pdf&quot;&gt;parallel snapshot isolation&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;https://jepsen.io/analyses/faunadb-2.5.4/bank-occasional-read-skew.png&quot; alt=&quot;In this run, process crashes and restarts allowed bank queries to occasionally read a total value of accounts slightly lower or higher than expected.&quot;/&gt;In this run, process crashes and restarts allowed bank queries to occasionally read a total value of accounts slightly lower or higher than expected.
&lt;p&gt;We believe the bug which underlies this issue also allows for sporadic bank test failures. For instance, in &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181219T000947-bank-occasional-read-skew.zip&quot;&gt;this run&lt;/a&gt;, version 2.6.0-rc9 returned incorrect total balances for five reads. Since the value returned to normal, rather than shifting permanently, we suspect this read-skew anomaly may only affect read-only transactions.&lt;/p&gt;
&lt;p&gt;Careful inspection of the histories suggests that all of these anomalies have a common etiology: reads may fail to observe the most recent state of some (but not necessarily all) instances read in a transaction, instead observing some other, past state. Specifically, when a transaction reads a version of an instance with a timestamp equal to the query snapshot time, that version is interpreted as being in the present, and then rewritten.&lt;/p&gt;
&lt;p&gt;This problem was introduced in 2.6.0-rc9 by a patch for the bitemporal index problem, and did not impact production releases. Fauna fixed the issue in 2.6.0-rc10.&lt;/p&gt;
&lt;h2 id=&quot;acute-persistent-read-skew&quot;&gt; Acute, Persistent Read Skew&lt;/h2&gt;
&lt;p&gt;Finally, version 2.6.0-rc9 introduced a new class of behavior: under rare conditions, randomized process crashes &amp;amp; restarts could put FaunaDB into a state where almost every read observes an incorrect balance. In some cases, FaunaDB recovers and returns the correct value after a burst of incorrect reads. More often, though, reads remain wildly inconsistent for the remainder of the test, even if we restart every node and allow the cluster to stabilize.&lt;/p&gt;
&lt;p&gt;For example, in &lt;a href=&quot;http://jepsen.io.s3.amazonaws.com/analyses/faunadb-2.5.4/20181218T164321-bank-catastrophe.zip&quot;&gt;this test run&lt;/a&gt;, we transfer money between a pool of 8 fixed bank accounts, containing $100 total. All reads are performed directly on instances, not indices, and we use normal, non-temporal reads—although this problem manifests with temporal queries too.&lt;/p&gt;
&lt;img src=&quot;https://jepsen.io/analyses/faunadb-2.5.4/bank-catastrophe.png&quot; alt=&quot;An acute, persistent bank failure, beginning at 1069 seconds. Values fluctuate from 30 to 222, instead of 100.&quot;/&gt;An acute, persistent bank failure, beginning at 1069 seconds. Values fluctuate from 30 to 222, instead of 100.
&lt;p&gt;746 seconds into the test, something terrible happens: observed values fluctuate randomly between 30 and 222. There are some windows of downtime due to additional process crashes and restarts; finally, at 1069 seconds, we restart every node and let the cluster run in a healthy state until 1636 seconds. Despite this long window for recovery, observed values do not stabilize. More worryingly, a dense streak of reads at ~160 suggests that perhaps skewed reads were written back to the database, permanently corrupting state—since the value never stabilizes, it’s hard to tell.&lt;/p&gt;
&lt;p&gt;During this time, FaunaDB fails some transfer transactions with errors like “Mismatched transaction results Vector”, which begin at 750 seconds, and continue throughout the remainder of the test. This error suggests that FaunaDB’s internal isolation mechanisms have failed.&lt;/p&gt;
&lt;p&gt;Every transaction epoch in FaunaDB is partitioned across segments. In 2.6.0-rc9, Fauna made changes to the dynamic log management code which introduced an off-by-one error in recovery after a node restarts. This error involves three conditions:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;&lt;li&gt;The applied transaction state for the current epoch had been partially synced to disk on the node.&lt;/li&gt;
&lt;li&gt;The node shut down immediately after the partial sync, before additional epochs were applied.&lt;/li&gt;
&lt;li&gt;The node restarted immediately thereafter.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;After restarting, a node has two types of on-disk state to recover from: the transaction log (where every committed entry is fsynced to disk), and the applied transaction state, which is periodically synced—by default, every two minutes, or when buffers are full. The node needs to take the last applied state, and replay transactions from the log against that state to catch up.&lt;/p&gt;
&lt;p&gt;However, when the applied transaction state is only partially synced, the node would choose the &lt;em&gt;next&lt;/em&gt; log segment, rather than the segment which had not been completely applied. Any transactions in the tail of the previous log segment would be skipped on this particular node, which led to nodes disagreeing about the applied transaction state.&lt;/p&gt;
&lt;p&gt;Moreover, the timestamps of those missing transactions would be applied to the &lt;em&gt;next&lt;/em&gt; transaction in the epoch. Future epochs would be unaffected, as would transactions executed on other nodes. This divergence also contributed to read skew.&lt;/p&gt;
&lt;p&gt;Operators could recover from this scenario by running a repair task, or by identifying and replacing the affected node, recovering data from their (hopefully correct) peers.&lt;/p&gt;
&lt;p&gt;Fauna introduced this issue in 2.6.0-rc9, and fixed it in 2.6.0-rc10. It did not impact production releases.&lt;/p&gt;
&lt;img src=&quot;https://jepsen.io/analyses/faunadb-2.5.4/bank-good.png&quot; alt=&quot;A successful bank test in 2.6.0-rc10, in which no reads observed inconsistent state.&quot;/&gt;A successful bank test in 2.6.0-rc10, in which no reads observed inconsistent state.

&lt;p&gt;FaunaDB’s core operations on single instances in 2.5.4 appeared solid: in our tests, we were able to reliably create, read, update, and delete records transactionally at snapshot, serializable, and strict serializable isolation. Acknowledged instance updates were never lost to single-instance reads. In 2.6.0-rc10, with serialized indices, FaunaDB even prohibited subtle anomalies like predicate phantoms.&lt;/p&gt;
&lt;p&gt;However, we found serious safety issues in index, temporal, and event queries, race conditions in index and class creation, and multiple safety issues in pagination, including read skew and missing records. We also found a number of bugs in cluster topology changes, including nodes getting stuck leaving and rebooting to apply configuration changes. There were serious safety issues in individual-instance operations in release candidates, but these did not impact production releases.&lt;/p&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody readability=&quot;22.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Can’t create a class &amp;amp; index on that class in same txn&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;Unresolved&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Can’t upsert classes or indices&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;Unresolved&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Can’t insert into newly created class&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;Unresolved&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;New indices return inconsistent data&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;2.6.1-dev&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Can’t ask nodes to remove themselves&lt;/td&gt;
&lt;td&gt;Node removed&lt;/td&gt;
&lt;td&gt;2.6.0-rc1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Removed nodes stall, never leave cluster&lt;/td&gt;
&lt;td&gt;Node removed&lt;/td&gt;
&lt;td&gt;2.5.6-rc4&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Unexpected, harmless component uninitialized errors&lt;/td&gt;
&lt;td&gt;Topology change&lt;/td&gt;
&lt;td&gt;2.6.0-rc1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;3&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Unexpected, harmless operator errors&lt;/td&gt;
&lt;td&gt;Topology change&lt;/td&gt;
&lt;td&gt;2.6.0-rc1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Removed nodes stall due to impossible log topologies&lt;/td&gt;
&lt;td&gt;Node removed&lt;/td&gt;
&lt;td&gt;2.6.0-rc1&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Removed nodes stall due to closed transaction pipelines&lt;/td&gt;
&lt;td&gt;Node removed&lt;/td&gt;
&lt;td&gt;2.6.0-rc10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;Failure to bind port 8444 when consensus ring unavailable&lt;/td&gt;
&lt;td&gt;Restart + isolated&lt;/td&gt;
&lt;td&gt;2.6.0-rc10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Elevated latencies &amp;amp; unavailability due to clock skew&lt;/td&gt;
&lt;td&gt;Clock skew&lt;/td&gt;
&lt;td&gt;Unresolved&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Default pagination never returns negative integers&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;2.5.5&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;Infinite loop paginating instance events&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;2.6.0-rc10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;Incomplete bitemporal indexes&lt;/td&gt;
&lt;td&gt;Index read&lt;/td&gt;
&lt;td&gt;2.6.0-rc9&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;2&quot;&gt;&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;Missing records during pagination&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;2.6.0-rc9&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;2&quot;&gt;&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;Temporal queries for future times observe local present&lt;/td&gt;
&lt;td&gt;Temporal read&lt;/td&gt;
&lt;td&gt;2.6.0-rc9&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot; readability=&quot;4&quot;&gt;&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;Occasional non-monotonic reads, long fork, read skew&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;2.6.0-rc10&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;Acute, persistent read skew, possible write corruption&lt;/td&gt;
&lt;td&gt;Restart after sync&lt;/td&gt;
&lt;td&gt;2.6.0-rc10&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2 id=&quot;recommendations&quot;&gt; Recommendations&lt;/h2&gt;
&lt;p&gt;Two major bugs impacted transactional safety in released versions of FaunaDB.&lt;/p&gt;
&lt;p&gt;First, index queries in 2.5.4 through 2.6.0-rc7 did not necessarily return the current (as of the read timestamp) state of records, due to an incomplete implementation of bitemporal indices. Users can mitigate this problem by fetching specific instances instead of using indices. This problem is fixed in 2.6.0-rc9.&lt;/p&gt;
&lt;p&gt;Second, temporal queries in 2.5.5 and prior could return incorrect values for instance reads when a node had not yet applied all updates prior to the requested time. Users can mitigate this problem by avoiding temporal queries for recent (or future) timestamps. This problem is also fixed in 2.6.0-rc9.&lt;/p&gt;
&lt;p&gt;While 2.6.0-rc9 fixed several safety issues, it also exhibited new bugs, including occasional non-monotonicity, long fork, and read skew. These issues appear transient and, so far, limited to read-only transactions. In addition, when nodes are restarted, FaunaDB 2.6.0-rc9 can wind up in a state where most queries return dramatically inconsistent data. FaunaDB occasionally recovers on its own, but in the majority of our testing, read skew persists even after nodes are restarted, and the cluster allowed to stabilize. Fauna has since released version 2.6.0, which includes fixes for the problems we identified in 2.6.0-rc9.&lt;/p&gt;
&lt;p&gt;Jepsen recommends all users upgrade to 2.6.0 as quickly as practical.&lt;/p&gt;
&lt;p&gt;Users should also be aware of issues around pagination: prior to 2.5.5, pagination would skip negative integers by default. In 2.5.4 and prior versions, users can work around this issue by explicitly beginning pagination at &lt;code&gt;MIN_LONG&lt;/code&gt;. Users should also be aware that pagination may skip some records at the end of each page when records are modified concurrently with pagination; this issue is fixed in 2.6.0-rc9. Finally, users should be careful to explicitly pass a timestamp to paginated queries to avoid duplicated or missing items, or read skew, when traversing multiple pages. Some official client libraries, like the FaunaDB Javascript client, fail to do this correctly.&lt;/p&gt;
&lt;p&gt;In 2.5.4 and 2.5.5, schema operations were non-transactional in several ways—for instance, one cannot create a class and index on that class in the same transaction, creating a class does not guarantee that one can immediately insert instances into that class, and classes and indices can not be safely upserted. Since schema operations are generally infrequent in production environments, and rarely concurrent, we do not expect these issues to manifest often in production—although development and testing environments may be more likely to encounter them. These issues are now documented and scheduled to be addressed in 2.7, but users can work around some of them in the mean time: for instance, it’s safe to simply ignore duplicate record errors when concurrently creating classes or indices.&lt;/p&gt;
&lt;p&gt;Index creation in FaunaDB is asynchronous: newly created indices are queryable, but may return incomplete or transactionally invalid data for several minutes, depending on data volume and cluster state. Users should be careful to poll indices after creation, and avoid querying them until they return &lt;code&gt;active: true&lt;/code&gt;. Fauna has changed this behavior in 2.6.1, so that querying an incomplete index throws an error.&lt;/p&gt;
&lt;p&gt;Our work also uncovered several bugs in topology changes, mostly involving clusters which locked up while trying to remove nodes. Some of these issues were resolved in 2.6.0-rc9, and the remaining problems addressed in 2.6.0. However, our tests for topology changes did not exercise these processes thoroughly, and in general, topology changes are a hard problem. Users should exercise caution when adding and removing nodes.&lt;/p&gt;
&lt;p&gt;FaunaDB is based on peer-reviewed research into transactional systems, combining Calvin’s cross-shard transactional protocol with Raft’s consensus system for individual shards. We believe Fauna’s approach is fundamentally sound: the bugs that we’ve found appear to be implementation problems, and Fauna has shown a commitment to fixing these bugs as quickly as possible.&lt;/p&gt;
&lt;p&gt;However, Fauna’s documentation for consistency properties was sparse, inconsistent, and overly optimistic: claiming, for example, that FaunaDB offered “100% ACID” transactions and strict serializability, when, in fact, users might experience only snapshot isolation. We recommend that Fauna clarify that strict serializability only applies to read-write transactions using serializable indices, that read-only transactions may observe stale state, and that transactions interacting with default indices may only experience snapshot isolation.&lt;/p&gt;
&lt;p&gt;Fauna has since dramatically expanded their &lt;a href=&quot;https://docs.fauna.com/fauna/current/reference/isolation_levels.html&quot;&gt;documentation for isolation levels&lt;/a&gt;, discussing the isolation levels for different types of transactions, how to promote transactions to stronger isolation levels by adding writes and changing index flags, and the impact of those isolation levels on transactional correctness.&lt;/p&gt;

&lt;p&gt;FaunaDB’s composable query language, temporal queries, and support for transactional consistency models ranging from snapshot isolation to strict serializability are welcome choices, and they work together well. For example, the &lt;code&gt;At&lt;/code&gt; form establishes lexical temporal scope for any query expression, and allows users to compare two states of the database at different times in a single transaction. Many databases offer a total order of updates through snapshot isolation or even serializability, but making time explicit allows users to obtain consistent views across multiple transactions, and thread causality through multiple actors. We’re pleased to see these ideas brought together in FaunaDB.&lt;/p&gt;
&lt;p&gt;Many consensus systems rely on fixed node membership, which is cumbersome for operators. FaunaDB is designed to support online addition and removal of nodes with appropriate backpressure. Moreover, Fauna recently removed the need for manual assignment of log shard topologies, making FaunaDB membership fully dynamic. Membership changes are &lt;em&gt;notoriously&lt;/em&gt; difficult to get right, especially in consensus systems, and we appreciate Fauna’s efforts on behalf of their users.&lt;/p&gt;
&lt;p&gt;We’re also excited to see commercial adaptations of the Calvin paper, as it makes a distinct set of tradeoffs specifically intended for geographically distributed transaction processing. While Jepsen focuses on &lt;em&gt;safety&lt;/em&gt;, rather than &lt;em&gt;performance&lt;/em&gt;, we suspect that Calvin-based systems like FaunaDB could play an important future role in the distributed database landscape.&lt;/p&gt;
&lt;p&gt;Finally, note that Jepsen takes an experimental approach to safety verification: we can prove the presence of bugs, but not their absence. While we believe FaunaDB’s replication and transactional algorithm are theoretically sound, and although we make extensive efforts to uncover potential bugs, we cannot prove the correctness of FaunaDB in general.&lt;/p&gt;
&lt;h2 id=&quot;future-work&quot;&gt; Future Work&lt;/h2&gt;
&lt;p&gt;In keeping with its temporal model, FaunaDB allows any query to be expressed as a stream of change events. Our work did not evaluate this functionality in detail. Nor have we examined conjunctions of node failures with changes to cluster topology; topology changes are sensitive to failure, and our technique for introducing randomized topology changes could have deadlocked or made unsafe changes (e.g. removing the only copy of some data) in the presence of faults.&lt;/p&gt;
&lt;p&gt;Indeed, our mechanism for causing automated topology changes remain fragile—our tests deadlock every few hours. While issues with nodes joining, parting, and restarting were addressed in FaunaDB just prior to the conclusion of our research, we have not yet resolved deadlock issues in the test suite itself. A more robust test suite could give us more confidence in the correctness of topology changes.&lt;/p&gt;
&lt;p&gt;We have also not explored coordinated crashes (e.g. those affecting an entire replica, log partition, or cluster), which might expose weaknesses in error recovery and write-ahead logs, or filesystem-level faults.&lt;/p&gt;
&lt;p&gt;FaunaDB has a more complex topology than many systems Jepsen has tested, involving log shards distributed across multiple nodes, each replicated across multiple replicas. The flow of messages through this system is more complex than single-shard systems like Zookeeper or Etcd, which makes the space of distinct meaningful faults larger. Moreover, with FaunaDB, we typically tested clusters of nine (rather than five) nodes, which further increases the space of potential faults. We chose to test the isolation of single nodes, of single replicas, and of partitions &lt;em&gt;within&lt;/em&gt; replicas, but did not explore asymmetric or generally randomized partitions. Future work could employ more sophisticated failure modes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This work was funded by &lt;a href=&quot;https://fauna.com&quot;&gt;Fauna&lt;/a&gt;, and conducted in accordance with the &lt;a href=&quot;https://jepsen.io/ethics&quot;&gt;Jepsen ethics policy&lt;/a&gt;. We wish to thank the Fauna team for their invaluable assistance—especially Evan Weaver, Brandon Mitchell, Matt Freels, Jeff Smick, and Attila Szegedi.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 05 Mar 2019 14:02:53 +0000</pubDate>
<dc:creator>aphyr</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jepsen.io/analyses/faunadb-2.5.4</dc:identifier>
</item>
<item>
<title>Introduction to Theoretical Computer Science</title>
<link>https://introtcs.org</link>
<guid isPermaLink="true" >https://introtcs.org</guid>
<description>&lt;p&gt;&lt;strong&gt;Boaz Barak&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Work in progress&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a textbook in preparation for an introductory undergraduate course on theoretical computer science. I am using this text for &lt;a href=&quot;http://cs121.boazbarak.org&quot;&gt;Harvard CS 121&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See below for individual chapters. You can also download:&lt;/p&gt;
&lt;p&gt;If you have any &lt;em&gt;comments, suggestions, typo fixes&lt;/em&gt;, etc.. I would be very grateful if you post them as an &lt;a href=&quot;https://github.com/boazbk/tcs/issues&quot;&gt;&lt;strong&gt;issue&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/boazbk/tcs/pulls&quot;&gt;&lt;strong&gt;pull request&lt;/strong&gt;&lt;/a&gt; in the &lt;a href=&quot;https://github.com/boazbk/tcs&quot;&gt;&lt;strong&gt;GitHub repository boazbk/tcs&lt;/strong&gt;&lt;/a&gt; where I am maintaining the source files for these notes. You can also post comments on each chapter in the links below. The repository &lt;a href=&quot;https://github.com/boazbk/tcscode&quot;&gt;github.com/boazbk/tcscode&lt;/a&gt; will eventually contain all supplemantary code and online appendices for this book.&lt;/p&gt;
&lt;p&gt;I am revising the book in the spring of 2019. For prior versions of the book, see the &lt;a href=&quot;https://github.com/boazbk/tcs/releases&quot;&gt;repository release page&lt;/a&gt;. The most updated version of this book is always on this page.&lt;/p&gt;
&lt;h2&gt;Book chapters&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_00_0_preface.html&quot;&gt;&lt;strong&gt;Chapter p:&lt;/strong&gt; Preface&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_00_0_preface.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_00_0_preface.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_01_introduction.html&quot;&gt;&lt;strong&gt;Chapter 0:&lt;/strong&gt; Introduction&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_01_introduction.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_01_introduction.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_00_1_math_background.html&quot;&gt;&lt;strong&gt;Chapter 1:&lt;/strong&gt; Mathematical Background&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_00_1_math_background.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_00_1_math_background.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_02_representation.html&quot;&gt;&lt;strong&gt;Chapter 2:&lt;/strong&gt; Computation and Representation&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_02_representation.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_02_representation.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_03_computation.html&quot;&gt;&lt;strong&gt;Chapter 3:&lt;/strong&gt; Defining computation&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_03_computation.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_03_computation.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_03a_computing_every_function.html&quot;&gt;&lt;strong&gt;Chapter 4:&lt;/strong&gt; Syntactic sugar, and computing every function&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_03a_computing_every_function.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_03a_computing_every_function.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_04_code_and_data.html&quot;&gt;&lt;strong&gt;Chapter 5:&lt;/strong&gt; Code as data, data as code&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_04_code_and_data.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_04_code_and_data.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_06_loops.html&quot;&gt;&lt;strong&gt;Chapter 6:&lt;/strong&gt; Loops and infinity&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_06_loops.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_06_loops.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_07_other_models.html&quot;&gt;&lt;strong&gt;Chapter 7:&lt;/strong&gt; Equivalent models of computation&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_07_other_models.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_07_other_models.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_08_uncomputability.html&quot;&gt;&lt;strong&gt;Chapter 8:&lt;/strong&gt; Universality and uncomputability&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_08_uncomputability.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_08_uncomputability.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_08a_restricted_models.html&quot;&gt;&lt;strong&gt;Chapter 9:&lt;/strong&gt; Restricted computational models&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_08a_restricted_models.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_08a_restricted_models.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_09_godel.html&quot;&gt;&lt;strong&gt;Chapter 10:&lt;/strong&gt; Is every theorem provable?&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_09_godel.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_09_godel.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_10_efficient_alg.html&quot;&gt;&lt;strong&gt;Chapter 11:&lt;/strong&gt; Efficient computation&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_10_efficient_alg.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_10_efficient_alg.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_11_running_time.html&quot;&gt;&lt;strong&gt;Chapter 12:&lt;/strong&gt; Modeling running time&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_11_running_time.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_11_running_time.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_12_NP.html&quot;&gt;&lt;strong&gt;Chapter 13:&lt;/strong&gt; Polynomial-time reductions&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_12_NP.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_12_NP.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_13_Cook_Levin.html&quot;&gt;&lt;strong&gt;Chapter 14:&lt;/strong&gt; NP, NP completeness, and the Cook-Levin Theorem&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_13_Cook_Levin.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_13_Cook_Levin.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_14_PvsNP.html&quot;&gt;&lt;strong&gt;Chapter 15:&lt;/strong&gt; What if P equals NP?&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_14_PvsNP.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_14_PvsNP.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_14a_space_complexity.html&quot;&gt;&lt;strong&gt;Chapter 16:&lt;/strong&gt; Space bounded computation&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_14a_space_complexity.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_14a_space_complexity.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_15_probability.html&quot;&gt;&lt;strong&gt;Chapter 17:&lt;/strong&gt; Probability Theory 101&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_15_probability.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_15_probability.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_16_randomized_alg.html&quot;&gt;&lt;strong&gt;Chapter 18:&lt;/strong&gt; Probabilistic computation&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_16_randomized_alg.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_16_randomized_alg.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_17_model_rand.html&quot;&gt;&lt;strong&gt;Chapter 19:&lt;/strong&gt; Modeling randomized computation&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_17_model_rand.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_17_model_rand.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_19_cryptography.html&quot;&gt;&lt;strong&gt;Chapter 20:&lt;/strong&gt; Cryptography&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_19_cryptography.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_19_cryptography.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_24_proofs.html&quot;&gt;&lt;strong&gt;Chapter 21:&lt;/strong&gt; Proofs and algorithms&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_24_proofs.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_24_proofs.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://introtcs.org/public/lec_26_quantum_computing.html&quot;&gt;&lt;strong&gt;Chapter 22:&lt;/strong&gt; Quantum computing&lt;/a&gt; &lt;small&gt;(&lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_26_quantum_computing.pdf&quot;&gt;PDF: best formatting&lt;/a&gt; , &lt;a href=&quot;https://files.boazbarak.org/introtcs/lec_26_quantum_computing.docx&quot;&gt;Word: buggy&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Compiled on 02/15/2019 10:37:47&lt;/p&gt;
&lt;p&gt;Copyright 2019, Boaz Barak.&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; src=&quot;https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png&quot;/&gt;&lt;/a&gt;&lt;br/&gt;This work is licensed under a &lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Produced using &lt;a href=&quot;http://pandoc.org/&quot;&gt;pandoc&lt;/a&gt; and &lt;a href=&quot;http://scorreia.com/software/panflute/&quot;&gt;panflute&lt;/a&gt; with templates derived from &lt;a href=&quot;https://www.gitbook.com/&quot;&gt;gitbook&lt;/a&gt; and &lt;a href=&quot;https://bookdown.org/&quot;&gt;bookdown&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Tue, 05 Mar 2019 13:32:21 +0000</pubDate>
<dc:creator>lainon</dc:creator>
<og:title>Introduction to Theoretical Computer Science: index</og:title>
<og:type>book</og:type>
<og:url>https://introtcs.org/</og:url>
<og:image>icons/cover.png</og:image>
<og:description>Textbook on Theoretical Computer Science by Boaz Barak</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://introtcs.org/public/index.html</dc:identifier>
</item>
<item>
<title>A random dungeon generator in C, small enough to fit on a business card</title>
<link>https://gist.github.com/munificent/b1bcd969063da3e6c298be070a22b604</link>
<guid isPermaLink="true" >https://gist.github.com/munificent/b1bcd969063da3e6c298be070a22b604</guid>
<description>&lt;div readability=&quot;6.7878787878788&quot;&gt;
&lt;p&gt;A random dungeon generator that fits on a business card&lt;/p&gt;
&lt;div class=&quot;js-gist-file-update-container js-task-list-container file-box&quot;&gt;
&lt;div id=&quot;file-generate-c&quot; class=&quot;file&quot;&gt;

&lt;div itemprop=&quot;text&quot; class=&quot;blob-wrapper data type-c&quot;&gt;
&lt;table class=&quot;highlight tab-size js-file-line-container&quot; data-tab-size=&quot;8&quot; readability=&quot;26.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L1&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;1&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC1&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;time.h&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; Robert Nystrom&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L2&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;2&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC2&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;stdio.h&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; @munificentbob&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L3&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;3&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC3&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;#&lt;span class=&quot;pl-k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&amp;lt;&lt;/span&gt;stdlib.h&lt;span class=&quot;pl-pds&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; for Ginny&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L4&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;4&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC4&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;#&lt;span class=&quot;pl-k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;//&lt;/span&gt; 2008-2019&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td id=&quot;file-generate-c-L5&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;5&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC5&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;#&lt;span class=&quot;pl-k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;l&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;a, b, c, d&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (i y=a;y\&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L6&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;6&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC6&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&amp;lt;b; y++) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; x = c; x &amp;lt; d; x++)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L7&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;7&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC7&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;int&lt;/span&gt; i;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; i H=&lt;span class=&quot;pl-c1&quot;&gt;40&lt;/span&gt;;&lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; i W&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L8&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;8&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC8&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;=&lt;span class=&quot;pl-c1&quot;&gt;80&lt;/span&gt;;i m[&lt;span class=&quot;pl-c1&quot;&gt;40&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;80&lt;/span&gt;];i &lt;span class=&quot;pl-en&quot;&gt;g&lt;/span&gt;(i x){r &lt;span class=&quot;pl-c1&quot;&gt;rand&lt;/span&gt;()%x;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L9&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;9&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC9&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;}&lt;span class=&quot;pl-k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;cave&lt;/span&gt;(i s){i w=&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)+&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;;i h=&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L10&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;10&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC10&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;+&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;;i t=&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(W-w-&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;i u=&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(H-h-&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)+&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;pl-c1&quot;&gt;l&lt;/span&gt;(u&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td id=&quot;file-generate-c-L11&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;11&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC11&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,u+h+&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,t-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; ,t+w+&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(m[&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L12&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;12&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC12&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;y][x]==&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;.&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; )r;i d=&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L13&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;13&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC13&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;;i e,f ;&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(!s){&lt;span class=&quot;pl-c1&quot;&gt;l&lt;/span&gt;( u-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,u+&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td id=&quot;file-generate-c-L14&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;14&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC14&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;h+&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,t- &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,t+w+&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;){i s=x&amp;lt;t ||x&amp;gt;t&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L15&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;15&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC15&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;+w;i t=y&amp;lt;u|| y&amp;gt; u+h;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L16&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;16&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC16&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(s ^t&amp;amp;&amp;amp; m[ y]&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L17&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;17&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC17&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;[x ]==&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;#&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; ){d++; &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt; (d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L18&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;18&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC18&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;) ==&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;) e=x,f=y; }}&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (d&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L19&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;19&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC19&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;== &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)r; }&lt;span class=&quot;pl-c1&quot;&gt;l&lt;/span&gt;(u-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,u +h+&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt; ,t&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L20&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;20&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC20&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; ,t+w +&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;){i s= x&amp;lt; t ||&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L21&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;21&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC21&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;x&amp;gt; t+w; i t= y&amp;lt;u ||y&amp;gt; u+&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L22&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;22&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC22&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;h; m[y] [x]= s &amp;amp;&amp;amp;t? &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L23&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;23&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC23&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;:s^t ?&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;#&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; :&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;.&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L24&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;24&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC24&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;;}&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; (d&amp;gt;&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)m [f][&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L25&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;25&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC25&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;e]=&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt; )?&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;+&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt;(i j=&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;j&amp;lt;(s?&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L26&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;26&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC26&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;) +&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;);j++)m[&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(h)+u][&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(w)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L27&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;27&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC27&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;+t]=s?&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;@&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; :&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;) ==&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;?&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td id=&quot;file-generate-c-L28&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;28&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC28&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;$&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-c1&quot;&gt;65&lt;/span&gt;+&lt;span class=&quot;pl-c1&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;62&lt;/span&gt;) ;}i &lt;span class=&quot;pl-en&quot;&gt;main&lt;/span&gt;(i&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td id=&quot;file-generate-c-L29&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;29&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC29&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;argc, &lt;span class=&quot;pl-k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;char&lt;/span&gt;* argv[]) {&lt;span class=&quot;pl-c1&quot;&gt;srand&lt;/span&gt;((i)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td id=&quot;file-generate-c-L30&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;30&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC30&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-c1&quot;&gt;time&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;NULL&lt;/span&gt;));&lt;span class=&quot;pl-c1&quot;&gt;l&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, H, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,W)m[y][x]=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td id=&quot;file-generate-c-L31&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;31&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC31&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt;(i j=&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;j&amp;lt;&lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;;j++)&lt;span class=&quot;pl-c1&quot;&gt;cave&lt;/span&gt;(j==&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;);&lt;span class=&quot;pl-c1&quot;&gt;l&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td id=&quot;file-generate-c-L32&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;32&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC32&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;H,&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,W) {i c=m[y][x]; &lt;span class=&quot;pl-c1&quot;&gt;putchar&lt;/span&gt;(c==&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;!&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;?&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td id=&quot;file-generate-c-L33&quot; class=&quot;blob-num js-line-number&quot; data-line-number=&quot;33&quot;/&gt;
&lt;td id=&quot;file-generate-c-LC33&quot; class=&quot;blob-code blob-code-inner js-file-line&quot;&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;#&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:c);&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt;(x==W-&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;pl-c1&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);}r &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;;}&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Tue, 05 Mar 2019 09:42:35 +0000</pubDate>
<dc:creator>DyslexicAtheist</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/46275?s=400&amp;v=4</og:image>
<og:type>article</og:type>
<og:title>A random dungeon generator that fits on a business card</og:title>
<og:url>https://gist.github.com/munificent/b1bcd969063da3e6c298be070a22b604</og:url>
<og:description>A random dungeon generator that fits on a business card - generate.c</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gist.github.com/munificent/b1bcd969063da3e6c298be070a22b604</dc:identifier>
</item>
<item>
<title>Spotify adds 1M unique listeners in India in less than a week</title>
<link>https://www.reuters.com/article/us-spotify-india-idUSKCN1QL22C</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-spotify-india-idUSKCN1QL22C</guid>
<description>&lt;div class=&quot;PrimaryAsset_container&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s4.reutersmedia.net/resources/r/?m=02&amp;amp;d=20190305&amp;amp;t=2&amp;amp;i=1362867590&amp;amp;r=LYNXNPEF231BT&amp;amp;w=20&quot; aria-label=&quot;FILE PHOTO: A trader is reflected in a computer screen displaying the Spotify brand before the company begins selling as a direct listing on the floor of the New York Stock Exchange in New York, U.S., April 3, 2018. REUTERS/Lucas Jackson&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span&gt;FILE PHOTO: A trader is reflected in a computer screen displaying the Spotify brand before the company begins selling as a direct listing on the floor of the New York Stock Exchange in New York, U.S., April 3, 2018. REUTERS/Lucas Jackson&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;(Reuters) - Spotify Technology SA, the world’s most popular paid music streaming service, said it racked up more than 1 million unique users in India across its free and premium tiers since launching less than a week ago.&lt;/p&gt;
&lt;p&gt;Spotify launched in India on Tuesday, stepping into a price-sensitive market crowded by well-funded players such as Reliance Industries’ JioSaavn and Apple’s Apple Music.&lt;/p&gt;
&lt;p&gt;The Swedish company is offering a free version that will run with ads, alongside a premium ad-free variant that will charge users 119 Indian rupees ($1.68) per month.&lt;/p&gt;
&lt;p&gt;India, with a population of 1.3 billion and more than 400 million smartphone users, is a potentially huge market for the Swedish company.&lt;/p&gt;
&lt;p&gt;According to media reports, Tencent-backed Gaana leads the Indian streaming market with over 80 million monthly users. Spotify has 207 million monthly active users globally and 96 million subscribers.&lt;/p&gt;
&lt;p&gt;In India, the streaming service also competes with other players including Amazon’s Prime Music, Alphabet Inc’s Google Play Music and Xiaomi-backed Hungama.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting by Akanksha Rana in Bengaluru; Editing by Sriraj Kalluvila and Alistair Bell&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 05 Mar 2019 05:11:07 +0000</pubDate>
<dc:creator>doener</dc:creator>
<og:title>Spotify adds 1 million unique listeners in India in less than a week</og:title>
<og:url>https://www.reuters.com/article/us-spotify-india-idUSKCN1QL22C</og:url>
<og:type>article</og:type>
<og:description>Spotify Technology SA, the world's most popular paid music streaming servic...</og:description>
<og:image>https://s4.reutersmedia.net/resources/r/?m=02&amp;d=20190305&amp;t=2&amp;i=1362867590&amp;w=1200&amp;r=LYNXNPEF231BT</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-spotify-india-idUSKCN1QL22C</dc:identifier>
</item>
<item>
<title>Studying the demise of historic civilisations</title>
<link>http://www.bbc.com/future/story/20190218-are-we-on-the-road-to-civilisation-collapse</link>
<guid isPermaLink="true" >http://www.bbc.com/future/story/20190218-are-we-on-the-road-to-civilisation-collapse</guid>
<description>&lt;p&gt;Great civilisations are not murdered. Instead, they take their own lives.&lt;/p&gt;&lt;!-- callout-box start --&gt;
&lt;div class=&quot;callout-box&quot;&gt;
    &lt;div class=&quot;content&quot; readability=&quot;31.694352159468&quot;&gt;
        &lt;div class=&quot;callout-box-head&quot;&gt;
                &lt;p class=&quot;callout-box-title&quot;&gt;DEEP CIVILISATION&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&quot;callout-box-body&quot; readability=&quot;36.821917808219&quot;&gt;
            &lt;p&gt;This article is part of a &lt;strong&gt;&lt;a href=&quot;http://www.bbc.com/future/columns/deep-civilisation&quot;&gt;new BBC Future series about the long view of humanity&lt;/a&gt;&lt;/strong&gt;, which aims to stand back from the daily news cycle and widen the lens of our current place in time. Modern society is suffering from “&lt;strong&gt;&lt;a href=&quot;https://books.google.co.uk/books?id=utkyW3MzDJMC&amp;amp;lpg=PA110&amp;amp;ots=zASGGoV8_v&amp;amp;dq=elise%20boulding%20temporal%20exhaustion&amp;amp;pg=PA110#v=onepage&amp;amp;q=elise%20boulding%20temporal%20exhaustion&amp;amp;f=false&quot;&gt;temporal exhaustion&lt;/a&gt;&lt;/strong&gt;”, the sociologist Elise Boulding once said. “If one is mentally out of breath all the time from dealing with the present, there is no energy left for imagining the future,” she wrote.&lt;/p&gt;
&lt;p&gt;That’s why the Deep Civilisation season will explore what really matters in the broader arc of human history and what it means for us and our descendants.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;!-- callout-box end --&gt;&lt;p&gt;So concluded the historian Arnold Toynbee in his 12-volume magnum opus A Study of History. It was an exploration of the rise and fall of 28 different civilisations.&lt;/p&gt;&lt;p&gt;He was right in some respects: civilisations are often responsible for their own decline. However, their self-destruction is usually assisted.  &lt;/p&gt;&lt;p&gt;The Roman Empire, for example, was the victim of many ills including overexpansion, climatic change, environmental degradation and poor leadership. But it was also brought to its knees when Rome was sacked by the Visigoths in 410 and the Vandals in 455.&lt;/p&gt;&lt;p&gt;Collapse is often quick and greatness provides no immunity. The Roman Empire covered 4.4 million sq km (1.9 million sq miles) in 390. Five years later, it had plummeted to 2 million sq km (770,000 sq miles). By 476, the empire’s reach was zero.&lt;/p&gt;&lt;p&gt;Our deep past is marked by recurring failure. As part of my research at the Centre for the Study of Existential Risk at the University of Cambridge, I am attempting to find out why collapse occurs through a historical autopsy. What can the rise and fall of historic civilisations tell us about our own? What are the forces that precipitate or delay a collapse? And do we see similar patterns today?&lt;/p&gt;&lt;p&gt;&lt;em&gt;You might also like:&lt;/em&gt;&lt;/p&gt;&lt;p&gt;The first way to look at past civilisations is to compare their longevity. This can be difficult, because there is no strict definition of civilisation, nor an overarching database of their births and deaths.&lt;/p&gt;&lt;p&gt;In the graphic below, I have compared the lifespan of various civilisations, which I define as a society with agriculture, multiple cities, military dominance in its geographical region and a continuous political structure. Given this definition, all empires are civilisations, but not all civilisations are empires. The data is drawn from two studies on the growth and decline of empires (for &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/0049089X78900108&quot;&gt;3000-600BC&lt;/a&gt; and &lt;a href=&quot;https://www.jstor.org/stable/1170959?seq=1#metadata_info_tab_contents&quot;&gt;600BC-600&lt;/a&gt;), and an informal, crowd-sourced &lt;a href=&quot;https://owlcation.com/humanities/How-long-do-empires-last&quot;&gt;survey of ancient civilisations&lt;/a&gt; (which I have amended).&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://ichef.bbci.co.uk/images/ic/raw/p0715m80.png&quot; alt=&quot;“Historic&quot; civilisations=&quot;&quot; width=&quot;100%&quot;/&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Click/pinch to enlarge. &lt;a href=&quot;http://www.bbc.com/future/story/20190218-the-lifespans-of-ancient-civilisations-compared&quot;&gt;Here's the full list of the civilisations displayed above.&lt;/a&gt; (Credit: Nigel Hawtin)&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Collapse can be defined as a rapid and enduring loss of population, identity and socio-economic complexity. Public services crumble and disorder ensues as government loses control of its monopoly on violence.&lt;/p&gt;&lt;p&gt;Virtually all past civilisations have faced this fate. Some recovered or transformed, such as the Chinese and Egyptian. Other collapses were permanent, as was the case of Easter Island. Sometimes the cities at the epicentre of collapse are revived, as was the case with Rome. In other cases, such as the Mayan ruins, they are left abandoned as a mausoleum for future tourists. &lt;/p&gt;&lt;p&gt;What can this tell us about the future of global modern civilisation? Are the lessons of agrarian empires applicable to our post-18th Century period of industrial capitalism?&lt;/p&gt;&lt;blockquote readability=&quot;7&quot;&gt;&lt;p&gt; Collapse may be a normal phenomenon for civilisations, regardless of their size and technological stage &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;I would argue that they are. Societies of the past and present are just complex systems composed of people and technology. The theory of “normal accidents” suggests that complex technological systems regularly give way to failure. So collapse may be a normal phenomenon for civilisations, regardless of their size and stage.&lt;/p&gt;&lt;p&gt;We may be more technologically advanced now. But this gives little ground to believe that we are immune to the threats that undid our ancestors. Our newfound technological abilities even bring new, unprecedented challenges to the mix.&lt;/p&gt;&lt;p&gt;And while our scale may now be global, collapse appears to happen to both sprawling empires and fledgling kingdoms alike. There is no reason to believe that greater size is armour against societal dissolution. Our tightly-coupled, globalised economic system is, if anything, more likely to make crisis spread.&lt;/p&gt;&lt;p&gt;If the fate of previous civilisations can be a roadmap to our future, what does it say? One method is to examine the trends that preceded historic collapses and see how they are unfolding today.&lt;/p&gt;&lt;p&gt;While there is no single accepted theory for why collapses happen, historians, anthropologists and others have proposed various explanations, including:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CLIMATIC CHANGE: &lt;/strong&gt;When climatic stability changes, the results can be disastrous, resulting in crop failure, starvation and desertification. The collapse of the Anasazi, the Tiwanaku civilisation, the Akkadians, the Mayan, the Roman Empire, and many others have all coincided with abrupt climatic changes, usually droughts.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ENVIRONMENTAL DEGRADATION: &lt;/strong&gt;Collapse can occur when societies overshoot the carrying capacity of their environment. This ecological collapse theory, which has been the subject of &lt;a href=&quot;https://books.google.co.uk/books?id=jNQd9RpuJ-4C&amp;amp;printsec=frontcover&amp;amp;dq=collapse+jared+diamond+bbc&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=0ahUKEwij9Y-y1LPgAhXnRBUIHRh2DVEQ6AEIKjAA#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;bestselling books&lt;/a&gt;, points to excessive deforestation, water pollution, soil degradation and the loss of biodiversity as precipitating causes.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;INEQUALITY AND OLIGARCHY&lt;/strong&gt;: Wealth and political inequality can be central drivers of social disintegration, as &lt;a href=&quot;https://books.google.co.uk/books/about/Radical_Transformation.html?id=x3VZDwAAQBAJ&amp;amp;printsec=frontcover&amp;amp;source=kp_read_button&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;can oligarchy and centralisation of power&lt;/a&gt; among leaders. This not only causes social distress, but handicaps a society’s ability to respond to ecological, social and economic problems.&lt;/p&gt;&lt;p&gt;The field of cliodynamics models how factors such as equality and demography correlate with political violence. Statistical analysis of previous societies suggests that this &lt;a href=&quot;https://www.nature.com/news/human-cycles-history-as-science-1.11078&quot;&gt;happens in cycles&lt;/a&gt;. As population increases, the supply of labour outstrips demand, workers become cheap and society becomes top-heavy. This inequality undermines collective solidarity and political turbulence follows.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;COMPLEXITY: &lt;/strong&gt;Collapse expert and historian Joseph Tainter has proposed that societies eventually &lt;a href=&quot;https://books.google.co.uk/books?hl=en&amp;amp;lr=&amp;amp;id=YdW5wSPJXIoC&amp;amp;oi=fnd&amp;amp;pg=PA1&amp;amp;dq=tainter+collapse&amp;amp;ots=OJJUnhQer_&amp;amp;sig=AHslul9mziZjLJodJaLbxqEPwnA#v=onepage&amp;amp;q=tainter%20collapse&amp;amp;f=false&quot;&gt;collapse under the weight&lt;/a&gt; of their own accumulated complexity and bureaucracy. Societies are problem-solving collectives that grow in complexity in order to overcome new issues. However, the returns from complexity eventually reach a point of diminishing returns. After this point, collapse will eventually ensue.&lt;/p&gt;&lt;p&gt;Another measure of increasing complexity is called Energy Return on Investment (EROI). This refers to the ratio between the amount of energy produced by a resource relative to the energy needed to obtain it. Like complexity, EROI appears to have a point of diminishing returns. In his book &lt;a href=&quot;https://homerdixon.com/writing/books/the-upside-of-down/&quot;&gt;The Upside of Down&lt;/a&gt;, the political scientist Thomas Homer-Dixon observed that environmental degradation throughout the Roman Empire led to falling EROI from their staple energy source: crops of wheat and alfalfa. The empire fell alongside their EROI. Tainter also blames it as a chief culprit of collapse, including for the Mayan. &lt;/p&gt;&lt;p&gt;&lt;strong&gt;EXTERNAL SHOCKS: &lt;/strong&gt;In other words, the “four horsemen”: war, natural disasters, famine and plagues. The Aztec Empire, for example, was brought to an end by Spanish invaders. Most early agrarian states were fleeting due to deadly epidemics. The concentration of humans and cattle in walled settlements with poor hygiene made disease outbreaks unavoidable and catastrophic. Sometimes disasters combined, as was the case with the &lt;a href=&quot;https://www.biorxiv.org/content/10.1101/106740v2&quot;&gt;Spanish introducing salmonella&lt;/a&gt; to the Americas.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;RANDOMNESS/BAD LUCK: &lt;/strong&gt;&lt;a href=&quot;https://pdfs.semanticscholar.org/4bbf/b77db6ef43649c998757cf77d9258dabc010.pdf&quot;&gt;Statistical analysis on empires&lt;/a&gt; suggests that collapse is random and independent of age. Evolutionary biologist and data scientist Indre Zliobaite and her colleagues have observed a similar pattern in the evolutionary record of species. A common explanation of this apparent randomness is the &lt;a href=&quot;https://www.nature.com/articles/nature24656&quot;&gt;“Red Queen Effect”&lt;/a&gt;: if species are constantly fighting for survival in a changing environment with numerous competitors, extinction is a consistent possibility.&lt;/p&gt;&lt;p&gt;--&lt;/p&gt;&lt;p&gt;Despite the abundance of books and articles, we don’t have a conclusive explanation as to why civilisations collapse. What we do know is this: the factors highlighted above can all contribute. Collapse is a tipping point phenomena, when compounding stressors overrun societal coping capacity.  &lt;/p&gt;&lt;p&gt;We can examine these indicators of danger to see if our chance of collapse is falling or rising. Here are four of those possible metrics, measured over the past few decades:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://climate.nasa.gov/vital-signs/global-temperature/&quot;&gt;Temperature&lt;/a&gt; is a clear metric for climate change, &lt;a href=&quot;https://data.worldbank.org/indicator/NY.GDP.MKTP.CD&quot;&gt;GDP is a proxy&lt;/a&gt; for complexity and &lt;a href=&quot;https://www.footprintnetwork.org/our-work/ecological-footprint/&quot;&gt;the ecological footprint&lt;/a&gt; is an indicator for environmental degradation. Each of these has been trending steeply upwards.&lt;/p&gt;&lt;p&gt;Inequality is more difficult to calculate. The typical measurement of the &lt;a href=&quot;https://data.worldbank.org/indicator/SI.POV.GINI&quot;&gt;Gini Index suggests that inequality&lt;/a&gt; has decreased slightly globally (&lt;a href=&quot;http://blogs.worldbank.org/developmenttalk/increasingly-inequality-within-not-across-countries-rising&quot;&gt;although it is increasing within countries&lt;/a&gt;). However, the Gini Index can be misleading as it only measures relative changes in income. In other words, if two individuals earning $1 and $100,000 both doubled their income, the Gini would show no change. But the gap between the two would have jumped from $99,999 to $198,998.&lt;/p&gt;&lt;p&gt;Because of this, I have also depicted the &lt;a href=&quot;https://wid.world/&quot;&gt;income share of the global top 1%.&lt;/a&gt; The 1% have increased in their share of global income from approximately 16% in 1980 to over 20% today. Importantly, wealth inequality is even worse. The share of global wealth from the &lt;a href=&quot;https://www.nber.org/papers/w25462.pdf&quot;&gt;1% has swelled&lt;/a&gt; from 25-30% in the 1980s to approximately 40% in 2016. The reality is likely to be starker as these numbers do not &lt;a href=&quot;https://www.nber.org/papers/w25462.pdf&quot;&gt;capture wealth and income siphoned&lt;/a&gt; into overseas tax havens.&lt;/p&gt;&lt;p&gt;Studies suggest that the EROI for fossil fuels has been &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0301421513003856&quot;&gt;steadily decreasing over time&lt;/a&gt; as the easiest to reach and richest reserves are depleted. Unfortunately, most renewable replacements, such as solar, have a markedly lower EROI, largely due to their energy density and the rare earth metals and manufacturing required to produce them.&lt;/p&gt;&lt;p&gt;This has led much of the literature to discuss the possibility of an &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/21332492&quot;&gt;“energy cliff”&lt;/a&gt; as EROI declines to a point where current societal levels of affluence can no longer be maintained. The energy cliff &lt;a href=&quot;https://ideas.repec.org/a/eee/ecolec/v146y2018icp722-729.html&quot;&gt;need not be terminal&lt;/a&gt; if renewable technologies continue to improve and energy efficiency measures are speedily implemented.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Measures of resilience &lt;/strong&gt;&lt;/p&gt;&lt;p&gt;The somewhat reassuring news is that collapse metrics are not the entire picture. Societal resilience may be able to delay or prevent collapse.&lt;/p&gt;&lt;p&gt;For example, globally “economic diversity” – a measurement of the diversity and sophistication of country exports ­– is greater today than it was in the 1960s and 1970s, as measured by the &lt;a href=&quot;https://atlas.media.mit.edu/en/rankings/country/eci/&quot;&gt;Economic Complexity Index&lt;/a&gt; (ECI). Nations are, on average, less reliant on single types of exports than they once were. For example, a nation that had diversified beyond only exporting agricultural products would be more likely to weather ecological degradation or the loss of trading partners. The ECI also measures the knowledge-intensity of exports. More skilled populations may have a greater capacity to respond to crises as they arise.&lt;/p&gt;&lt;blockquote readability=&quot;8&quot;&gt;&lt;p&gt; There are some reasons to be optimistic, thanks to our ability to innovate and diversify away from disaster. Yet the world is worsening in areas that have contributed to the collapse of previous societies &lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Similarly, innovation – as measured by &lt;a href=&quot;https://www3.wipo.int/ipstats/index.htm?tab=patent&quot;&gt;per capita patent applications&lt;/a&gt; – is also rising. In theory, a civilisation might be less vulnerable to collapse if new technologies can mitigate against pressures such as climate change.&lt;/p&gt;&lt;p&gt;It’s also possible that “collapse” can happen without violent catastrophe. As Rachel Nuwer &lt;a href=&quot;http://www.bbc.com/future/story/20170418-how-western-civilisation-could-collapse&quot;&gt;wrote on BBC Future in 2017&lt;/a&gt;, “in some cases, civilisations simply fade out of existence – becoming the stuff of history not with a bang but a whimper”.&lt;/p&gt;&lt;p&gt;Still, when we look at all these collapse and resilience indicators as a whole, the message is clear that we should not be complacent. There are some reasons to be optimistic, thanks to our ability to innovate and diversify away from disaster. Yet the world is worsening in areas that have contributed to the collapse of previous societies. The climate is changing, the gap between the rich and poor is widening, the world is becoming increasingly complex, and our demands on the environment are outstripping planetary carrying capacity.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;The rungless ladder&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;That's not all. Worryingly, the world is now deeply interconnected and interdependent. In the past, collapse was confined to regions – it was a temporary setback, and people often could easily return to agrarian or hunter-gatherer lifestyles. For many, it was even a welcome reprieve from the oppression of early states. Moreover, the weapons available during social disorder were rudimentary: swords, arrows and occasionally guns.&lt;/p&gt;&lt;p&gt;Today, societal collapse is a more treacherous prospect. The weapons available to a state, and sometimes even groups, during a breakdown now range from biological agents to nuclear weapons. New instruments of violence, such as &lt;a href=&quot;http://www.bbc.com/future/story/20150715-killer-robots-the-soldiers-that-never-sleep&quot;&gt;lethal autonomous weapons&lt;/a&gt;, may be available in the near future. People are increasingly specialised and disconnected from the production of food and basic goods. And a changing climate may irreparably damage our ability to return to simple farming practices.&lt;/p&gt;&lt;p&gt;Think of civilisation as a poorly-built ladder. As you climb, each step that you used falls away. A fall from a height of just a few rungs is fine. Yet the higher you climb, the larger the fall. Eventually, once you reach a sufficient height, any drop from the ladder is fatal.&lt;/p&gt;&lt;p&gt;With the proliferation of nuclear weapons, we may have already reached this point of civilisational “terminal velocity”. Any collapse – any fall from the ladder – risks being permanent. Nuclear war in itself could result in an existential risk: either the extinction of our species, or a permanent catapult back to the Stone Age.  &lt;/p&gt;&lt;p&gt;While we are becoming more economically powerful and resilient, our technological capabilities also present unprecedented threats that no civilisation has had to contend with. For example, the climatic changes we face are of a different nature to what undid the Maya or Anazasi. They are global, human-driven, quicker, and more severe.&lt;/p&gt;&lt;p&gt;Assistance in our self-imposed ruin will not come from hostile neighbors, but from our own technological powers. Collapse, in our case, would be a &lt;a href=&quot;https://www.amazon.co.uk/Short-History-Progress-Ronald-Wright/dp/1841958301&quot;&gt;progress trap&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;The collapse of our civilisation is not inevitable. History suggests it is likely, but we have the unique advantage of being able to learn from the wreckages of societies past.&lt;/p&gt;&lt;p&gt;We know what needs to be done: emissions can be reduced, inequalities levelled, environmental degradation reversed, innovation unleashed and economies diversified. The policy proposals are there. Only the political will is lacking. We can also invest in recovery. There are already well-developed ideas for improving the ability of &lt;a href=&quot;https://books.google.co.uk/books/about/Feeding_Everyone_No_Matter_What.html?id=zP2cBAAAQBAJ&amp;amp;printsec=frontcover&amp;amp;source=kp_read_button&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;food&lt;/a&gt; and &lt;a href=&quot;https://books.google.co.uk/books/about/The_Knowledge.html?id=MCNGAgAAQBAJ&amp;amp;printsec=frontcover&amp;amp;source=kp_read_button&amp;amp;redir_esc=y#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;knowledge&lt;/a&gt; systems to be recuperated after catastrophe. Avoiding the creation of dangerous and widely-accessible technologies is also critical. Such steps will lessen the chance of a future collapse becoming irreversible.&lt;/p&gt;&lt;p&gt;We will only march into collapse if we advance blindly. We are only doomed if we are unwilling to listen to the past.&lt;/p&gt;&lt;p&gt;--&lt;/p&gt;&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://www.cser.ac.uk/team/luke-kemp/&quot;&gt;Luke Kemp&lt;/a&gt;&lt;/em&gt;&lt;em&gt; is a researcher based at the Centre for the Study of Existential Risk at the University of Cambridge. He tweets &lt;a href=&quot;https://twitter.com/lukakemp?lang=en&quot;&gt;@lukakemp&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Join 900,000+ Future fans by liking us on &lt;strong&gt;&lt;a href=&quot;https://www.facebook.com/BBCFuture&quot;&gt;Facebook&lt;/a&gt;&lt;/strong&gt;, or follow us on &lt;strong&gt;&lt;a href=&quot;https://twitter.com/bbc_future&quot;&gt;Twitter&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&quot;https://www.instagram.com/bbcfuture_official/&quot;&gt;Instagram&lt;/a&gt;&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;If you liked this story, &lt;strong&gt;&lt;a href=&quot;http://pages.emails.bbc.com/subscribe/?ocid=fut.bbc.email.we.email-signup&quot;&gt;sign up for the weekly bbc.com features newsletter&lt;/a&gt;&lt;/strong&gt;, called “If You Only Read 6 Things This Week”. A handpicked selection of stories from BBC Future, Culture, Capital, and Travel, delivered to your inbox every Friday.&lt;/em&gt; &lt;/p&gt;
                        </description>
<pubDate>Tue, 05 Mar 2019 03:02:27 +0000</pubDate>
<dc:creator>pitzahoy</dc:creator>
<og:title>Are we on the road to civilisation collapse?</og:title>
<og:type>article</og:type>
<og:url>http://www.bbc.com/future/story/20190218-are-we-on-the-road-to-civilisation-collapse</og:url>
<og:description>Studying the demise of historic civilisations can tell us about the risk we face today, says collapse expert Luke Kemp. Worryingly, the signs are worsening.</og:description>
<og:image>http://ichef.bbci.co.uk/wwfeatures/live/624_351/images/live/p0/71/40/p07140sl.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.bbc.com/future/story/20190218-are-we-on-the-road-to-civilisation-collapse</dc:identifier>
</item>
<item>
<title>What is it like working at a company after releasing a negatively-received game?</title>
<link>https://www.reddit.com/r/Games/comments/ax9uyj/what_is_it_like_working_at_a_company_during_and/</link>
<guid isPermaLink="true" >https://www.reddit.com/r/Games/comments/ax9uyj/what_is_it_like_working_at_a_company_during_and/</guid>
<description>&lt;p class=&quot;s90z9tc-10 fHRkcP&quot;&gt;With the recent trend of several high-profile AAA games and companies receiving an exorbitant amount of negative press and backlash (Anthem, Fallout 76, COD, etc.), it all had me wondering what it's like to be on the other side of it all - working for a company like EA or Bethesda or really any company going through something like this. I've personally never worked in the gaming sector, so I've always been curious about this. At my current job, we don't have public reception available for the work we do, unlike game developers.&lt;/p&gt;
&lt;p class=&quot;s90z9tc-10 fHRkcP&quot;&gt;What's the atmosphere like in the workplace once the game is released and subsequently panned vs during production? Are there certain decisions made during development by management that were considered dubious or questionable by lower level workers, or did it not seem apparent at the time? What kind of changes are made structurally at a company once they release a game like that?&lt;/p&gt;
&lt;p class=&quot;s90z9tc-10 fHRkcP&quot;&gt;I'm really looking forward to any stories people might have.&lt;/p&gt;
</description>
<pubDate>Tue, 05 Mar 2019 01:03:45 +0000</pubDate>
<dc:creator>danso</dc:creator>
<og:title>r/Games - What is it like working at a company during and after the release of a negatively received game?</og:title>
<og:type>website</og:type>
<og:url>https://www.reddit.com/r/Games/comments/ax9uyj/what_is_it_like_working_at_a_company_during_and/</og:url>
<og:description>1,541 votes and 755 comments so far on Reddit</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reddit.com/r/Games/comments/ax9uyj/what_is_it_like_working_at_a_company_during_and/</dc:identifier>
</item>
<item>
<title>HIV Is Reported Cured in a Second Patient</title>
<link>https://www.nytimes.com/2019/03/04/health/aids-cure-london-patient.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/03/04/health/aids-cure-london-patient.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;For just the second time since the global epidemic began, a patient appears to have been cured of infection with H.I.V., the virus that causes AIDS.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The news comes nearly 12 years to the day after the first patient known to be cured, a feat that researchers have long tried, and failed, to duplicate. The surprise success now confirms that a cure for H.I.V. infection is possible, if difficult, researchers said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The investigators are to publish their report on Tuesday in the journal Nature and to present some of the details at the Conference on Retroviruses and Opportunistic Infections in Seattle.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Publicly, the scientists are describing the case as a long-term remission. In interviews, most experts are calling it a cure, with the caveat that it is hard to know how to define the word when there are only two known instances.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Both milestones resulted from bone-marrow transplants given to infected patients. But the transplants were intended to treat cancer in the patients, not H.I.V.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Bone-marrow transplantation is unlikely to be a realistic treatment option in the near future. Powerful drugs are now available to control H.I.V. infection, while the transplants are risky, with harsh side effects that can last for years.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But rearming the body with immune cells similarly modified to resist H.I.V. might well succeed as a practical treatment, experts said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“This will inspire people that cure is not a dream,” said Dr. Annemarie Wensing, a virologist at the University Medical Center Utrecht in the Netherlands. “It’s reachable.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;&lt;strong class=&quot;css-8qgvsz ebyp5n10&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;[&lt;/em&gt;&lt;/strong&gt;&lt;strong class=&quot;css-8qgvsz ebyp5n10&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://on.fb.me/1paTQ1h&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Like the Science Times page on Facebook.&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;| Sign up for the&lt;/em&gt; &lt;strong class=&quot;css-8qgvsz ebyp5n10&quot;&gt;&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://nyti.ms/1MbHaRU&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;Science Times newsletter.&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;&lt;strong class=&quot;css-8qgvsz ebyp5n10&quot;&gt;&lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;]&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Dr. Wensing is co-leader of &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.icistem.org/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;IciStem&lt;/a&gt;, a consortium of European scientists studying stem cell transplants to treat H.I.V. infection. The consortium is supported by AMFAR, the American AIDS research organization.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The new patient has chosen to remain anonymous, and the scientists referred to him only as the “London patient.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“I feel a sense of responsibility to help the doctors understand how it happened so they can develop the science,” he told The New York Times in an email.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Learning that he could be cured of both cancer and H.I.V. infection was “surreal” and “overwhelming,” he added. “I never thought that there would be a cure during my lifetime.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;At the same conference in 2007, a German doctor described the first such cure in the “Berlin patient,” later identified as Timothy Ray Brown, 52, who now lives in Palm Springs, Calif.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;That news, displayed on a poster at the back of a conference room, initially gained little attention. Once it became clear that Mr. Brown was cured, scientists set out to duplicate his result with other cancer patients infected with H.I.V.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In case after case, the virus came roaring back, often around nine months after the patients stopped taking antiretroviral drugs, or else the patients died of cancer. The failures left scientists wondering whether Mr. Brown’s cure would remain a fluke.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Brown had had leukemia, and after chemotherapy failed to stop it, needed two bone-marrow transplants.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The transplants were from a donor with a mutation in a protein called CCR5, which rests on the surface of certain immune cells. H.I.V. uses the protein to enter those cells but cannot latch on to the mutated version.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Brown was given harsh immunosuppressive drugs of a kind that are no longer used, and suffered intense complications for months after the transplant. He was placed in an induced coma at one point and nearly died.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 erfvjey0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2019/03/05/science/05HIV3/merlin_151580673_0fb6d0aa-5b4d-4b98-935b-a62449bbd5a1-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2019/03/05/science/05HIV3/merlin_151580673_0fb6d0aa-5b4d-4b98-935b-a62449bbd5a1-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2019/03/05/science/05HIV3/merlin_151580673_0fb6d0aa-5b4d-4b98-935b-a62449bbd5a1-jumbo.jpg?quality=90&amp;amp;auto=webp 732w,https://static01.nyt.com/images/2019/03/05/science/05HIV3/merlin_151580673_0fb6d0aa-5b4d-4b98-935b-a62449bbd5a1-superJumbo.jpg?quality=90&amp;amp;auto=webp 1463w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2019/03/05/science/05HIV3/merlin_151580673_0fb6d0aa-5b4d-4b98-935b-a62449bbd5a1-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-8i9d0s e13ogyst0&quot;&gt;Timothy Ray Brown, the first person to be cured of H.I.V., almost died during the treatment.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Grant Hindsley for The New York Times&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“He was really beaten up by the whole procedure,” said Dr. Steven Deeks, an AIDS expert at the University of California, San Francisco, who has treated Mr. Brown. “And so we’ve always wondered whether all that conditioning, a massive amount of destruction to his immune system, explained why Timothy was cured but no one else.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The London patient has answered that question: A near-death experience is not required for the procedure to work.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;He had Hodgkin’s lymphoma and received a bone-marrow transplant from a donor with the CCR5 mutation in May 2016. He, too, received immunosuppressive drugs, but the treatment was much less intense, in line with current standards for transplant patients.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;He quit taking anti-H.I.V. drugs in September 2017, making him the first patient since Mr. Brown known to remain virus-free for more than a year after stopping.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“I think this does change the game a little bit,” said Dr. Ravindra Gupta, a virologist at University College London who presented the findings at the Seattle meeting. “Everybody believed after the Berlin patient that you needed to nearly die basically to cure H.I.V., but now maybe you don’t.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Although the London patient was not as ill as Mr. Brown had been after the transplant, the procedure worked about as well: The transplant destroyed the cancer without harmful side effects. The transplanted immune cells, now resistant to H.I.V., seem to have fully replaced his vulnerable cells.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Most people with the H.I.V.-resistant mutation, called delta 32, are of Northern European descent. IciStem maintains a database of about 22,000 such donors.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;So far, its scientists are tracking 38 H.I.V.-infected people who have received bone-marrow transplants, including &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://annals.org/aim/fullarticle/2707334/mechanisms-contribute-profound-reduction-hiv-1-reservoir-after-allogeneic-stem&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;six from donors without the mutation&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The London patient is 36 on this list. Another one, number 19 on the list and referred to as the “Düsseldorf patient,” has been off anti-H.I.V. drugs for four months. Details of that case will be presented at the Seattle conference later this week.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The consortium’s scientists have repeatedly analyzed the London patient’s blood for signs of the virus. They saw a weak indication of continued infection in one of 24 tests, but say this may be the result of contamination in the sample.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The most sensitive test did not find any circulating virus. Antibodies to H.I.V. were still present in his blood, but their levels declined over time, in a trajectory similar to that seen in Mr. Brown.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;None of this guarantees that the London patient is forever out of the woods, but the similarities to Mr. Brown’s recovery offer reason for optimism, Dr. Gupta said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“In a way, the only person to compare with directly is the Berlin patient,” he said. “That’s kind of the only standard we have at the moment.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;

&lt;span class=&quot;css-8i9d0s e13ogyst0&quot;&gt;Timothy Ray Brown, the first person to be cured of H.I.V., and Dr. Ravindra Gupta, a virologist, speak on the second patient who appears to have been cured of an H.I.V. infection. That patient has chosen to remain anonymous.&lt;/span&gt;&lt;span class=&quot;css-cch8ym&quot;&gt;&lt;span class=&quot;css-1dv1kvn&quot;&gt;Credit&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;emkp2hg2 css-1nwzsjy e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Jane Stockdale for The New York Times&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Most experts who know the details agree that the new case seems like a legitimate cure, but some are uncertain of its relevance for AIDS treatment overall.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“I’m not sure what this tells us,” said Dr. Anthony Fauci, director of the National Institute of Allergy and Infectious Diseases. “It was done with Timothy Ray Brown, and now here’s another case — ok, so now what? Now where do we go with it?”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;One possibility, said Dr. Deeks and others, is to develop gene-therapy approaches to knock out CCR5 on immune cells or their predecessor stem cells. Resistant to H.I.V. infection, these modified cells should eventually clear the body of the virus.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;(CCR5 is the protein that He Jiankui, a scientist in China, claimed to have modified with gene editing in at least two children, in an attempt to make them resistant to H.I.V. — an experiment that set off international condemnation.)&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Several companies are pursuing gene therapies but have not yet been successful. The modification must target the right number of cells, in the right place — only the bone marrow, for example, and not the brain — and tweak only the genes directing production of CCR5.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“There are a number of levels of precision that must be reached,” said Dr. Mike McCune, a senior adviser on global health to the Bill and Melinda Gates Foundation. “There are also concerns that you might do something untoward, and if so you might wish to have a kill switch.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Several teams are working on all of these obstacles, Dr. McCune said. Eventually, they may be able to develop a viral delivery system that, when injected into the body, seeks out all CCR5 receptors and deletes them, or even a donor stem cell that is resistant to H.I.V. but could be given to any patient.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“These are dreams, right? Things on the drawing table,” Dr. McCune said. “These dreams are motivated by cases like this — it helps us to imagine what might be done in the future.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;One important caveat to any such approach is that the patient would still be vulnerable to a form of H.I.V. called X4, which employs a different protein, CXCR4, to enter cells.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“This is only going to work if someone has a virus that really only uses CCR5 for entry — and that’s actually probably about 50 percent of the people who are living with H.I.V., if not less,” said Dr. Timothy J. Henrich, an AIDS specialist at the University of California, San Francisco.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Even if a person harbors only a small number of X4 viruses, they may multiply in the absence of competition from their viral cousins. There is at least &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nejm.org/doi/full/10.1056/NEJMc1405805&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;one reported case&lt;/a&gt; of an individual who got a transplant from a delta 32 donor but later rebounded with the X4 virus. (As a precaution against X4, Mr. Brown is taking a daily pill to prevent H.I.V. infection.)&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Brown says he is hopeful that the London patient’s cure proves as durable as his own. “If something has happened once in medical science, it can happen again,” Mr. Brown said. “I’ve been waiting for company for a long time.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e13ogyst0&quot;&gt;A cake presented to Mr. Brown marking 12 years since he was cured, at a workshop at the Seattle Public Library on Sunday.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Grant Hindsley for The New York Times&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-g92qtk epkadsg3&quot;&gt;
&lt;div class=&quot;css-1owp1gq epkadsg0&quot;&gt;More reporting on H.I.V. and AIDS&lt;/div&gt;
&lt;div class=&quot;css-15g2oxy epkadsg2&quot;&gt;
&lt;div class=&quot;css-2b3w4o e16ij5yr6&quot;&gt;
&lt;div class=&quot;css-i9gxme e16ij5yr4&quot;&gt;
&lt;div class=&quot;css-1hma5rr e16ij5yr2&quot;&gt;Loss and Bravery: Intimate Snapshots From the First Decade of the AIDS Crisis&lt;/div&gt;
&lt;time class=&quot;css-1yil5bp e16638kd0&quot; datetime=&quot;2018-12-01&quot;&gt;Dec. 1, 2018&lt;/time&gt;&lt;/div&gt;
&lt;div class=&quot;css-rxyfbr e16ij5yr0&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2018/12/01/nyregion/01AIDS-ast/01AIDSAST-1-threeByTwoSmallAt2X.jpg&quot; class=&quot;css-32rbo2 e16ij5yr1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-2b3w4o e16ij5yr6&quot;&gt;
&lt;div class=&quot;css-i9gxme e16ij5yr4&quot;&gt;
&lt;div class=&quot;css-1hma5rr e16ij5yr2&quot;&gt;He Took a Drug to Prevent AIDS. Then He Couldn’t Get Disability Insurance.&lt;/div&gt;
&lt;time class=&quot;css-1yil5bp e16638kd0&quot; datetime=&quot;2018-02-12&quot;&gt;Feb. 12, 2018&lt;/time&gt;&lt;/div&gt;
&lt;div class=&quot;css-rxyfbr e16ij5yr0&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2018/02/13/science/00AIDS/00AIDS-videoLarge.jpg&quot; class=&quot;css-32rbo2 e16ij5yr1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-2b3w4o e16ij5yr6&quot;&gt;
&lt;div class=&quot;css-i9gxme e16ij5yr4&quot;&gt;
&lt;div class=&quot;css-1hma5rr e16ij5yr2&quot;&gt;H.I.V. Arrived in the U.S. Long Before ‘Patient Zero’&lt;/div&gt;
&lt;time class=&quot;css-1yil5bp e16638kd0&quot; datetime=&quot;2016-10-26&quot;&gt;Oct. 26, 2016&lt;/time&gt;&lt;/div&gt;
&lt;div class=&quot;css-rxyfbr e16ij5yr0&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2016/10/27/science/27AIDS4/27AIDS4-videoLarge.jpg&quot; class=&quot;css-32rbo2 e16ij5yr1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-2b3w4o e16ij5yr6&quot;&gt;
&lt;div class=&quot;css-i9gxme e16ij5yr4&quot;&gt;
&lt;div class=&quot;css-1hma5rr e16ij5yr2&quot;&gt;San Francisco Is Changing Face of AIDS Treatment&lt;/div&gt;
&lt;time class=&quot;css-1yil5bp e16638kd0&quot; datetime=&quot;2015-10-05&quot;&gt;Oct. 5, 2015&lt;/time&gt;&lt;/div&gt;
&lt;div class=&quot;css-rxyfbr e16ij5yr0&quot;&gt;&lt;img src=&quot;https://static01.nyt.com/images/2015/10/06/science/06HIVCOVER1/06HIVCOVER1-videoLarge-v2.jpg&quot; class=&quot;css-32rbo2 e16ij5yr1&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 05 Mar 2019 00:44:43 +0000</pubDate>
<dc:creator>aaronbrethorst</dc:creator>
<og:url>https://www.nytimes.com/2019/03/04/health/aids-cure-london-patient.html</og:url>
<og:type>article</og:type>
<og:title>H.I.V. Is Reported Cured in a Second Patient, a Milestone in the Global AIDS Epidemic</og:title>
<og:image>https://static01.nyt.com/images/2019/03/06/science/05HIV1/05HIV1-facebookJumbo.jpg</og:image>
<og:description>Scientists have long tried to duplicate the procedure that led to the first long-term remission 12 years ago. With the so-called London patient, they seem to have succeeded.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/03/04/health/aids-cure-london-patient.html</dc:identifier>
</item>
</channel>
</rss>