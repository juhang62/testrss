<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Discord bans r/WallStreetBets server, subreddit goes private</title>
<link>https://www.theverge.com/2021/1/27/22253251/discord-bans-the-r-wallstreetbets-server</link>
<guid isPermaLink="true" >https://www.theverge.com/2021/1/27/22253251/discord-bans-the-r-wallstreetbets-server</guid>
<description>&lt;p id=&quot;JDsAv0&quot;&gt;Discord has banned the r/WallStreetBets server, the company confirmed to &lt;em&gt;The Verge&lt;/em&gt;. Reddit’s WallStreetBets subreddit is the driver of &lt;a href=&quot;https://www.theverge.com/22251427/reddit-gamestop-stock-short-wallstreetbets-robinhood-wall-street&quot;&gt;an unprecedented rally of GameStop stock,&lt;/a&gt; and has received a great deal of attention in the press as the stock continues to soar.&lt;/p&gt;
&lt;p id=&quot;tIgwNu&quot;&gt;Discord says it did not ban the server for financial fraud — rather, it was banned because it continued to allow “hateful and discriminatory content after repeated warnings.” &lt;em&gt;The Verge&lt;/em&gt; gained access to the server and can confirm the claim that users of the channel were spamming hateful language, including racial slurs.&lt;/p&gt;
&lt;p id=&quot;AZoNEs&quot;&gt;Here is Discord’s full statement:&lt;/p&gt;
&lt;blockquote readability=&quot;23&quot;&gt;
&lt;p id=&quot;eBVyJl&quot;&gt;The server has been on our Trust &amp;amp; Safety team’s radar for some time due to occasional content that violates our Community Guidelines, including hate speech, glorifying violence, and spreading misinformation. Over the past few months, we have issued multiple warnings to the server admin.&lt;/p&gt;
&lt;p id=&quot;RjRZJQ&quot;&gt;Today, we decided to remove the server and its owner from Discord for continuing to allow hateful and discriminatory content after repeated warnings.&lt;/p&gt;
&lt;p id=&quot;UIL02D&quot;&gt;To be clear, we did not ban this server due to financial fraud related to GameStop or other stocks. Discord welcomes a broad variety of personal finance discussions, from investment clubs and day traders to college students and professional financial advisors. We are monitoring this situation and in the event there are allegations of illegal activities, we will cooperate with authorities as appropriate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;gO5d2y&quot;&gt;r/WallStreetBets describes itself as “like 4chan found a Bloomberg Terminal,” and many comments on the subreddit contain offensive language.&lt;/p&gt;
&lt;aside id=&quot;9M335U&quot;&gt;
&lt;/aside&gt;&lt;p id=&quot;sDHhp4&quot;&gt;If you were able to get into the Discord, it was chaotic, with messages coming in at a rapid rate and many voices talking over each other simultaneously. Check out &lt;a href=&quot;https://twitter.com/tomwarren/status/1354532238524874753&quot;&gt;this video&lt;/a&gt; from my colleague Tom Warren to get an idea of what was like (note: you may want to turn down your volume before clicking play, as the voices are quite loud):&lt;/p&gt;

</description>
<pubDate>Wed, 27 Jan 2021 23:17:06 +0000</pubDate>
<dc:creator>icpmacdo</dc:creator>
<og:description>Discord says it did not ban the server due to financial fraud.</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/JEbTJCG21qMOej_dxhZkUsUoxVs=/0x146:2040x1214/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/19816263/acastro_200318_1777_discord_0001.0.jpg</og:image>
<og:title>Discord bans the r/WallStreetBets server</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2021/1/27/22253251/discord-bans-the-r-wallstreetbets-server</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2021/1/27/22253251/discord-bans-the-r-wallstreetbets-server</dc:identifier>
</item>
<item>
<title>WebRTC is now a W3C and IETF standard</title>
<link>https://web.dev/webrtc-standard-announcement/</link>
<guid isPermaLink="true" >https://web.dev/webrtc-standard-announcement/</guid>
<description>&lt;header class=&quot;w-article-header&quot; readability=&quot;26.762376237624&quot;&gt;

&lt;p class=&quot;w-article-header__subhead w-mb--non&quot;&gt;A brief overview of the history, architecture, use cases, and future of WebRTC.&lt;/p&gt;
&lt;p&gt;&lt;time&gt;Jan 26, 2021&lt;/time&gt;&lt;span class=&quot;w-author__separator&quot;&gt;•&lt;/span&gt; Updated &lt;time&gt;Jan 26, 2021&lt;/time&gt;&lt;/p&gt;
&lt;div class=&quot;w-authors w-mt--xl w-pt--sm&quot;&gt;
&lt;div class=&quot;w-author&quot;&gt;&lt;a href=&quot;https://web.dev/authors/huib&quot;&gt;&lt;img class=&quot;w-author__image&quot; src=&quot;https://webdev.imgix.net/images/authors/huib.jpg&quot; alt=&quot;Huib Kleinhout&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/header&gt;&lt;p&gt;The process of defining a web standard is a lengthy process that ensures usefulness, consistency and compatibility across browsers. Today &lt;a href=&quot;https://www.w3.org/2021/01/pressrelease-webrtc-rec.html.en&quot;&gt;the W3C and IETF&lt;/a&gt; mark the completion of perhaps one of the most important standards during the pandemic: WebRTC.&lt;/p&gt;

&lt;h2 id=&quot;history&quot;&gt;History &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#history&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebRTC is a platform giving browsers, mobile apps, and desktop apps real-time communication capabilities, typically used for video calling. The platform consists of a comprehensive set of technologies and standards. Google initiated the idea to create WebRTC in 2009, as an alternative to Adobe Flash and desktop applications that couldn't run in the browser. The previous generation of browser-based products were built on top of licensed proprietary technology. Various products were built with this technology, including Hangouts. Google then acquired the companies it had been licensing the technology from and made it available as the open source WebRTC project. This codebase is integrated in Chrome and used by the majority of applications using WebRTC. Together with other browser vendors and industry leaders such as Mozilla, Microsoft, Cisco, and Ericsson, the standardization of WebRTC was kicked off in both the W3C and IETF. In 2013, Mozilla and Google &lt;a href=&quot;https://blog.chromium.org/2013/02/hello-firefox-this-is-chrome-calling.html&quot;&gt;demonstrated&lt;/a&gt; video calling between their browsers. Through the evolution of the standard, many architectural discussions had led to implementation differences across browsers and challenged compatibility and interoperability. Most of these disagreements were ultimately settled as the standard became finalized in the past years. The WebRTC specification is now accompanied with a &lt;a href=&quot;https://wpt.fyi/results/webrtc?label=experimental&amp;amp;label=master&amp;amp;aligned&quot;&gt;full set of platform tests&lt;/a&gt; and tools to address compatibility and browsers have largely adapted their implementations accordingly. This brings an end to a challenging period where web developers had to continuously adopt their services to different browser implementations and specification changes.&lt;/p&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture and functionality &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#architecture&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt; API&lt;/a&gt; is the central part of the WebRTC specification. &lt;code&gt;RTCPeerConnection&lt;/code&gt; deals with connecting two applications on different endpoints to communicate using a peer-to-peer protocol. The &lt;code&gt;PeerConnection&lt;/code&gt; API interacts closely with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia&quot;&gt;&lt;code&gt;getUserMedia&lt;/code&gt;&lt;/a&gt; for accessing camera and microphone, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia&quot;&gt;&lt;code&gt;getDisplayMedia&lt;/code&gt;&lt;/a&gt; for capturing screen content. WebRTC allows you to send and receive streams that include audio and/or video content, as well as arbitrary binary data through the &lt;code&gt;DataChannel&lt;/code&gt;. The media functionality for processing, encoding, and decoding audio and video provides the core of any WebRTC implementation. WebRTC supports various audio codecs, with Opus being the most used and versatile. WebRTC implementations are required to support both Google's free-to-use VP8 video codec and H.264 for processing video. WebRTC connections are always encrypted, which is achieved through two existing protocols: DTLS and SRTP. WebRTC leans heavily on existing standards and technologies, from video codecs (VP8,H264), network traversal (ICE), transport (RTP, SCTP), to media description protocols (SDP). This is tied together in over 50 RFCs.&lt;/p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use cases: when it's a matter of milliseconds &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#use-cases&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebRTC is widely used in time-critical applications such as remote surgery, system monitoring, and remote control of autonomous cars, and voice or video calls built on UDP where buffering is not possible. Nearly all browser-based video callings services from companies such as Google, Facebook, Cisco, RingCentral, and Jitsi use WebRTC. Google Stadia and NVidia Geforce Now use WebRTC to get the stream of gameplay from the cloud to the web browser without perceivable delay.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Pandemic puts focus on video calling performance &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over the past year, WebRTC has seen a 100X increase of usage in Chrome due to increased video calling from within the browser. Recognizing that video calling has become a fundamental part of many people's lives during the pandemic, browser vendors have begun to optimize the technologies that video calling depends on. This was particularly important as resource demanding large meetings and video effects in video meetings became more common when employees and students started to work and study from home. In the past year Chrome has become up to 30% more battery friendly for video calling, with more optimizations to come for heavy usage scenarios. Mozilla, Apple, and Microsoft all &lt;a href=&quot;https://www.youtube.com/watch?v=YZROn-WsyO4&quot;&gt;have made significant improvements&lt;/a&gt; in their implementation of WebRTC through the pandemic, in particular in making sure they adhere to the now formalized standard.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;The future of WebRTC &lt;a class=&quot;w-headline-link&quot; href=&quot;https://web.dev/webrtc-standard-announcement/#&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While WebRTC is now completed as a W3C standard, improvements continue. The new video codec AV1 which &lt;a href=&quot;https://blog.google/products/duo/4-new-google-duo-features-help-you-stay-connected/&quot;&gt;saves up to 50% of bandwidth&lt;/a&gt; is becoming available in WebRTC and web browsers. Continued improvements in the open source code base are expected to further reduce delay and improve the quality of video that can be streamed. &lt;a href=&quot;https://www.w3.org/TR/webrtc-nv-use-cases/&quot;&gt;WebRTC NV&lt;/a&gt; gathers the initiative to create supplementary APIs to enable new use cases. These consist of extensions to existing APIs to give more control over existing functionality such as &lt;a href=&quot;https://www.w3.org/TR/webrtc-svc/&quot;&gt;Scalable Video Coding&lt;/a&gt; as well as APIs that give access to &lt;a href=&quot;https://github.com/w3c/mediacapture-insertable-streams/blob/main/explainer.md&quot;&gt;lower-level components&lt;/a&gt;. The latter gives more flexibility to web developers to innovate by integrating high-performance custom WebAssembly components. With emerging 5G networks and demand for more interactive services, we're expecting to see a continued increase of services building on top of WebRTC in the year to come.&lt;/p&gt;

&lt;div class=&quot;w-post-github-link w-mt--l w-mb--l&quot;&gt;&lt;span class=&quot;w-mr--sm&quot;&gt;Last updated: &lt;time&gt;Jan 26, 2021&lt;/time&gt;&lt;/span&gt; &lt;a href=&quot;https://github.com/GoogleChrome/web.dev/blob/master/src/site/content/en/blog/webrtc-standard-announcement/index.md&quot;&gt;Improve article&lt;/a&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 27 Jan 2021 19:50:54 +0000</pubDate>
<dc:creator>kaycebasques</dc:creator>
<og:type>article</og:type>
<og:url>https://web.dev/webrtc-standard-announcement/</og:url>
<og:title>WebRTC is now a W3C and IETF standard</og:title>
<og:description>A brief overview of the history, architecture, use cases, and future of WebRTC.</og:description>
<og:image>https://webdev.imgix.net/images/social.png?auto=format&amp;fit=max&amp;w=1200</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://web.dev/webrtc-standard-announcement/</dc:identifier>
</item>
<item>
<title>The Mark Cuban Cost Plus Drug Company</title>
<link>https://costplusdrugs.com/</link>
<guid isPermaLink="true" >https://costplusdrugs.com/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://costplusdrugs.com/&quot;&gt;https://costplusdrugs.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25932233&quot;&gt;https://news.ycombinator.com/item?id=25932233&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 853&lt;/p&gt;
&lt;p&gt;# Comments: 559&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jan 2021 18:53:44 +0000</pubDate>
<dc:creator>yawnxyz</dc:creator>
<og:title>Mark Cuban Cost Plus Drug Company</og:title>
<og:description>Radically transparent, low cost versions of high cost generic drugs</og:description>
<og:image>images/hero-home.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://costplusdrugs.com/</dc:identifier>
</item>
<item>
<title>GameStop Is Rage Against the Financial Machine</title>
<link>https://www.bloomberg.com/opinion/articles/2021-01-27/gamestop-short-squeeze-is-rage-against-the-financial-machine</link>
<guid isPermaLink="true" >https://www.bloomberg.com/opinion/articles/2021-01-27/gamestop-short-squeeze-is-rage-against-the-financial-machine</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/opinion/articles/2021-01-27/gamestop-short-squeeze-is-rage-against-the-financial-machine&quot;&gt;https://www.bloomberg.com/opinion/articles/2021-01-27/gamestop-short-squeeze-is-rage-against-the-financial-machine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25930214&quot;&gt;https://news.ycombinator.com/item?id=25930214&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 598&lt;/p&gt;
&lt;p&gt;# Comments: 668&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jan 2021 16:29:45 +0000</pubDate>
<dc:creator>tempsy</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=59770d70-6104-11eb-85a1-2b981222f088&amp;url=L29waW5pb24vYXJ0aWNsZXMvMjAyMS0wMS0yNy9nYW1lc3RvcC1zaG9ydC1zcXVlZXplLWlzLXJhZ2UtYWdhaW5zdC10aGUtZmluYW5jaWFsLW1hY2hpbmU=</dc:identifier>
</item>
<item>
<title>Automating my job with GPT-3</title>
<link>https://blog.seekwell.io/gpt3</link>
<guid isPermaLink="true" >https://blog.seekwell.io/gpt3</guid>
<description>&lt;h2 id=&quot;block-0b792f0a345649b8998578511252d5aa&quot; class=&quot;notion-heading&quot;&gt;&lt;span class=&quot;notion-heading__anchor&quot; id=&quot;0b792f0a345649b8998578511252d5aa&quot;/&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Using GPT-3 to generate database-ready SQL to answer business questions&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;div id=&quot;block-f7facb7669b74be5969ca2b2409e52d2&quot; class=&quot;notion-text&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;As an analyst, I spend a lot of my time writing SQL (or other code) to answer questions about our business. These questions can range from simple customer support queries (&quot;Does user X have the right plan?&quot;) to evaluating KPI's and growth metrics (&quot;How many users signed up in the last month and what percent of those converted to paid?&quot;) to the more open-ended (&quot;How much revenue will we have in 12 months?&quot;).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-3e9cd828f5334adda85fdbfb4b4cc69a&quot; class=&quot;notion-column-list&quot;&gt;
&lt;div id=&quot;block-71f39a4ef039454287b8caa8e53eea89&quot; class=&quot;notion-column&quot; readability=&quot;11.713432835821&quot;&gt;
&lt;div id=&quot;block-847686ecdc3e46a2b7eafb7b780a31e3&quot; class=&quot;notion-text&quot; readability=&quot;42.949253731343&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;To make my job easier, I try to automate as many of these questions as I can. My company,&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://seekwell.io/blog-gpt3&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SeekWell&lt;/a&gt;&lt;/span&gt;&lt;span&gt;, builds awesome tools to help with this, like a unified team SQL repository and seamless scheduling of queries, reports, and alerts. Many things, though, like actually writing SQL code, are difficult to automate—or at least have been.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-05f0094e96104a55b608aecb7c35791b&quot; class=&quot;notion-column&quot;&gt;
&lt;div id=&quot;block-fd67e43c00754a16b725e54946093bb4&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/74a62dc5-b3f1-45ba-a090-36e1f21cd166.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;block-f0f41f92c9ed46f88da1c7319c105013&quot; class=&quot;notion-heading&quot;&gt;&lt;span class=&quot;notion-heading__anchor&quot; id=&quot;f0f41f92c9ed46f88da1c7319c105013&quot;/&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Enter GPT-3&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div id=&quot;block-fb3f065a6a5547e8863b05c7bb33b005&quot; class=&quot;notion-text&quot; readability=&quot;34.049568965517&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;a href=&quot;https://openai.com/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Openai&lt;/a&gt;&lt;/span&gt;&lt;span&gt;'s&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://beta.openai.com/docs/introduction&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GPT-3&lt;/a&gt;&lt;/span&gt; &lt;span&gt;is starting to break the conventional wisdom of what tasks can and can't be automated. At the most basic level, GPT-3 is a text-completion engine, trained on huge swaths of the internet. It takes inputted text and returns the text that it thinks would appear next. Many have already used it to generate HTML and CSS&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://twitter.com/sharifshameem/status/1282676454690451457?s=20&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;code&lt;/a&gt;&lt;/span&gt; &lt;span&gt;from specific design instructions. Others have made&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://www.theverge.com/2020/8/16/21371049/gpt3-hacker-news-ai-blog&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;#1 trending blog posts&lt;/a&gt;&lt;/span&gt; &lt;span&gt;generated mostly by GPT-3 with some creative prompts.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-1ad563578d764a53a3a004347a53f57e&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;In my case, since so much of my job is writing SQL, I want to be able to describe a question in plain English and have GPT-3 convert it into the SQL code that, if executed on my Postgres database, would answer the question.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-f0c5897ccc324c3cae2a1b78ceb4a405&quot; class=&quot;notion-text&quot; readability=&quot;36.363636363636&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;To accomplish this, I found more success using&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://beta.openai.com/docs/engines/the-instruct-series-beta&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GPT-3 Instruct&lt;/a&gt;&lt;/span&gt; &lt;span&gt;(still in beta) than the more generalized GPT-3 engines. GPT-3 Instruct (in particular,&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://beta.openai.com/playground?model=davinci-instruct-beta&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;davinci-instruct&lt;/a&gt;&lt;/span&gt;&lt;span&gt;) lets you give specific instructions, like &quot;Only respond in correct SQL syntax&quot;, that guides GPT-3's responses. If you're interested in trying it out, you can sign up for the waitlist for the GPT-3 API&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://share.hsforms.com/1Lfc7WtPLRk2ppXhPjcYY-A4sk30&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-a7053a41f2f14fe194cac2cac1774d60&quot; class=&quot;notion-text&quot; readability=&quot;39&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Below, I'll detail my experience with the API. In each example, I'll include a gif of asking GPT-3 a question. Below the gif will be the input question (generated by me, in green) and GPT-3's response translating it into SQL (generated by GPT-3, in blue). I'll also include my instructions to GPT-3 (in yellow) and examples I fed GPT-3 (in orange).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-de7a7495e2cb4a0780d57376f09f68c8&quot; class=&quot;notion-text&quot; readability=&quot;34&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Here's the first instruction I gave it, a question, and the response from GPT-3:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-48ecab24b59a4404bae7f20fb8caf501&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/d99a5fe5-1ca9-43f2-a233-818d878160ac.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-3d093bf39b994581b800d0c85693f366&quot; class=&quot;notion-text bg-yellow&quot; readability=&quot;34&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Instruction:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;Given an input question, respond with syntactically correct PostgreSQL. Be creative but the SQL must be correct.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-423e45d050b141668e2dd1787d3df63d&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how many users signed up in the past month?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-ece1eeada4cb4eb4b6e21f1d54fe3f02&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT COUNT(*) FROM users WHERE signup_time &amp;gt; now() - interval '1 month'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-d0f8749351a64d0b971554f43e24f8c0&quot; class=&quot;notion-text&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Woah. I never gave it my database schema but it assumes I have a table called &quot;users&quot; (which is accurate) and that there's a timestamp field called &quot;signup_time&quot; for when a user signed up. Pretty logical. It also knew the correct way to subtract a month from today's date in PostgreSQL (now() - interval '1 month') without seeing an example. Pretty cool!&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-cfd05c156c2f4b99afbefef1710a0c54&quot; class=&quot;notion-text&quot; readability=&quot;34&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;To give GPT-3 a little more context, I'll add information about my database schema to the instruction. My new Instruction:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-09339938ed1d463dbf1f7b4deeaefef7&quot; class=&quot;notion-text bg-yellow&quot; readability=&quot;41&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Instruction:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;Given an input question, respond with syntactically correct PostgreSQL. Be creative but the SQL must be correct. Only use tables called &quot;users&quot; and &quot;charges&quot;. The &quot;users&quot; table has columns: id (integer), signup_dt (timestamp), email (character varying), and plan_type (character varying). The &quot;charges&quot; table has columns: amount (bigint), user_id (integer), and charge_dt (timestamp).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-20624d83f9dc49e19638eb036407959d&quot; class=&quot;notion-text&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Now I'll try asking another question, and see if GPT-3 can respond based on my actual database:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-a4da842d10ee45bdaee9837e612a0afb&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/85ecbb57-3212-4ebd-8d13-534d98573a64.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-59e02e45aaef416fa3b64540ac11290d&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue did we have in the past 7 days?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-8928e608da8a451987586628cea6f207&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(amount) FROM charges WHERE charge_dt &amp;gt; now() - interval '7 days'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-6bcf2069020b4bad9b9d7dbd4c068d29&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Nice. I gave it a little more information on the tables and columns in my database, and it correctly inferred that &quot;amount&quot; = &quot;revenue&quot; and knew to SUM() that amount for the past 7 days of charges to answer the question. Clearly, it already knows some basic SQL syntax, and can make inferences about what I mean.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;block-77e3952dbf77411c987d2139118a5c14&quot; class=&quot;notion-heading&quot;&gt;&lt;span class=&quot;notion-heading__anchor&quot; id=&quot;77e3952dbf77411c987d2139118a5c14&quot;/&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Priming GPT-3 with examples&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div id=&quot;block-85ad1f7a3f1f4a64b31a9056c2ccc567&quot; class=&quot;notion-text&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;I'll try another question but first it might make sense to explicitly tell GPT-3 the columns in my tables via a simple example. Examples are a great way to give GPT-3 context and flesh out subtleties that might not be obvious in just an instruction. I found this helpful for really hammering into it which columns and tables are eligible to use (GPT-3 sometimes likes to &quot;invent&quot; columns to make answering the question easier). Here are the examples I added to the prompt:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-726f1ec8890348ecb4f8d192061744b5&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;select all available columns from users table.&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT id, signup_dt, email, plan_type FROM users&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-e2cd982ce3c94b98a3ba90db4aef0ee3&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;select all available columns from charges table.&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT amount, user_id, and charge_dt FROM charges&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-e8d39f1456024fd684d0b294fc448641&quot; class=&quot;notion-text&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Now with those examples fed to GPT-3, I'll ask another question:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-58c943723b154475bf698435c315d98d&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/b349a134-f123-4451-bee0-b1ab88b3a3dc.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-638f26ac298c4c33bb12a18457f77148&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;what was the largest payment amount made in the past 30 days?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-16819f0f77374888aa22028e287359df&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT MAX(amount) FROM charges WHERE charge_dt &amp;gt; NOW() - INTERVAL '30 days'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-fbfa0e68dc2d420c852e82bf54712b97&quot; class=&quot;notion-text&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;It knew to use MAX(amount) to get the largest payment and set the date condition correctly without seeing an example on how to subtract a number of days from the current date. It's doing pretty well, but let's try something a little trickier now, using the same instruction and examples:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-1af088fb733248dc82c23d45d4f90707&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/bc58b0bf-c5ab-46c6-903c-989e2d5bd0c0.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-8d6e182157a0483880f517d6f0e0841c&quot; class=&quot;notion-text bg-green&quot; readability=&quot;24.444444444444&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;when did user with email&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;mailto:brian@seekwell.io&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;brian@seekwell.io&lt;/a&gt;&lt;/span&gt; &lt;span&gt;make his last payment?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-3a50648b72fb413a8a324e9c7e720292&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT MAX(charge_dt) FROM charges WHERE user_id = 1 AND email = 'brian@seekwell.io'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-af1352685d77469ca832afcad3d52c2a&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Okay, not&lt;/span&gt; &lt;span&gt;&lt;em&gt;quite&lt;/em&gt;&lt;/span&gt; &lt;span&gt;right. The &quot;charges&quot; table doesn't have a column for email, so this query would fail. I also never said the user with email = &quot;brian@seekwell.io&quot; has user_id = 1—don't know where it got that idea from. To answer the question correctly, you would have to join the &quot;charges&quot; table with the &quot;users&quot; table since only &quot;users&quot; has an email column.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-ab1f9283c1604483b667389f2f7499e6&quot; class=&quot;notion-text&quot; readability=&quot;33.679245283019&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Since it's a big leap to know to join those tables on&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id (even if that seems perfectly logical to a human analyst), I'll give GPT-3 an example of a &quot;join&quot; so it has something to go off of:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-5b7510ce3ec14726b10682529a60475d&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;28.64039408867&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;when did jane&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;mailto:mike@seekwell.io&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@seekwell.io&lt;/a&gt;&lt;/span&gt; &lt;span&gt;make her first payment?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT MIN(charge_dt) as last_payment_dt from charges LEFT JOIN users ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id WHERE users.email = 'jane&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;mailto:mike@seekwell.io&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@seekwell.io&lt;/a&gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-d4e9bc18fc834d4bb827c7868ddfdff7&quot; class=&quot;notion-text&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Now I'll try again:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-f72440390edc4af5a45a8c530582b236&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/a9502b6e-cadf-4c9f-bc2c-f52c6dfb1a15.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-8e289f2534d648948153ebdaaca12d06&quot; class=&quot;notion-text bg-green&quot; readability=&quot;24.444444444444&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;when did user with email&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;mailto:brian@seekwell.io&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;brian@seekwell.io&lt;/a&gt;&lt;/span&gt; &lt;span&gt;make his last payment?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-e6508d63b5ae42fca120e184830709e9&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;27.677419354839&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT MAX(charge_dt) as last_payment_dt from charges LEFT JOIN users ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id WHERE users.email = '&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;mailto:brian@seekwell.io&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;brian@seekwell.io&lt;/a&gt;&lt;/span&gt;&lt;span&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-05941645b6c24c968da87350f21713f9&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;So maybe this made it a little&lt;/span&gt; &lt;span&gt;&lt;em&gt;too&lt;/em&gt;&lt;/span&gt; &lt;span&gt;easy based on the example, but it correctly changed MIN() → MAX() and replaced the email with the one I asked for—so it wasn't a total gimme. Let's try another level of difficulty, but first, I'll add in a few more examples to provide more context and improve the responses. New examples:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-eaeec5c97a144e0ebe1525ce7d90ad65&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how many users signed up in the past 30 days?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT COUNT(*) FROM users WHERE signup_dt &amp;gt;= now() - interval '30 days'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-4c0d2a6daa8643f4adda524b7460f76c&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;28.6171875&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;&lt;strong&gt;nput:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;when did user with email&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;mailto:brian@seekwell.io&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;brian@seekwell.io&lt;/a&gt;&lt;/span&gt; &lt;span&gt;sign up?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT signup_dt FROM users WHERE email = 'brian@seekwell.io'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-f1e9a7d617f64fc192ced01b6fcd8b26&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue did we have in the past 7 days?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(amount) from charges WHERE charge_dt &amp;gt;= now() - interval '7 days'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-ddcf357e211e4e01913aaa6b4a56aecd&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;34&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue did we have from 10-01-20 through 11-15-20?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(case when charge_dt&amp;gt;= '10-01-20'::date and charge_dt &amp;lt; '11-15-20'::date then amount else 0 end) as revenue FROM charges&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-6577313318c146daa5601ee5d3d89bae&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;32.817391304348&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue have we had from users that signed up in the last 6 months?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(charges.amount) FROM users INNER JOIN charges ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id WHERE users.signup_dt&amp;gt;= now() - interval '6 months'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-cd0f11249abc493eb2dbeb3dcbf466d9&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;30.171171171171&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;when did user with email&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;mailto:brian@seekwell.io&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;brian@seekwell.io&lt;/a&gt;&lt;/span&gt; &lt;span&gt;make his first payment?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT MIN(charge_dt) as last_payment_dt from users INNER JOIN charges ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id WHERE users.email = 'brian@seekwell.io'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-5b5906d4059d459886b038525db36606&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how many new users signed up in each of the last 2 months?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT sum(case when signup_dt&amp;gt;= now() - interval '1 month' then 1 else 0 end) as signups_this_month, sum(case when signup_dt&amp;gt;= now() - interval '2 months' and signup_dt &amp;lt; now() - interval '1 month' then 1 else 0 end) as signups_last_month FROM users&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-23b167adc703478382ea8443101ea023&quot; class=&quot;notion-text&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;These examples give it some basic queries so it's more familiar with my database and the specific terms and concepts of my use case (like that a &quot;paid user&quot; means their plan_type=&quot;pro&quot;). I also gave it a taste of some more advanced concepts like aggregating a metric (revenue) between 2 dates. Now I'll try something harder:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-6441ce9d88ce4930a612ba57661ab84d&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/7a7fdfbb-5a5e-40e3-8190-551be566af21.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-18b369cf81324662a709ad4fbb328dda&quot; class=&quot;notion-text bg-green&quot; readability=&quot;23.652173913043&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how many payments has user with email&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;mailto:joe@freshpizza.com&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;joe@freshpizza.com&lt;/a&gt;&lt;/span&gt; &lt;span&gt;made?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-a7fcd58c02484a838721d1d9729d4a0e&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;31&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT COUNT(*) FROM users INNER JOIN charges ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id WHERE users.email = 'joe@freshpizza.com'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-df9661ff30c14412ba60a557851f4228&quot; class=&quot;notion-text&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Cool! GPT-3 intuited that COUNT() was the appropriate expression here, knew to join the &quot;users&quot; with the &quot;charges&quot; table, and correctly set the email to the one that I asked about. Another question for GPT-3:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-ffa8bb2d8599471281fb42c295d51031&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/dc73f28b-a0c0-4ccd-9713-af5f77c72710.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-13584960d9e649b2ad6a2c78e2814e85&quot; class=&quot;notion-text bg-green&quot; readability=&quot;29.72972972973&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;I&lt;/span&gt;&lt;span&gt;&lt;strong&gt;nput:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue have we received from users with an email ending in '&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://seekwell.io/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;seekwell.io&lt;/a&gt;&lt;/span&gt;&lt;span&gt;' in the last 3 months?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-d24b202625f44d18b5e1b0f0f8bb944f&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;29.717277486911&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(charges.amount) FROM users INNER JOIN charges ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id WHERE users.email LIKE '%&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://seekwell.io/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;seekwell.io&lt;/a&gt;&lt;/span&gt;&lt;span&gt;%' AND users.signup_dt&amp;gt;= now() - interval '3 months'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-95f47ffa15e841fc9e36801d17b2e6c4&quot; class=&quot;notion-text&quot; readability=&quot;32.366812227074&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Perfect! It knew that &quot;email ending in seekwell.io&quot; translated in SQL to &quot;&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://users.email&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.email&lt;/a&gt;&lt;/span&gt; &lt;span&gt;LIKE '%seekwell.io%' &quot; (even though it hadn't seen that before) and took the sum of all charges for users matching that condition. And another:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-1ee818b1773e4f0dbe354d9931e0cff2&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/062641b3-8814-4823-8249-9d47690082bc.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-4a0a794c6ccd49bc88cc9af28f85167c&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue did we have between June 1st and August 1st 2020?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-ff83943926d84c438a480218d6b2096d&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(case when charge_dt &amp;gt;= '06-01-2020'::date and charge_dt &amp;lt; '08-01-2020'::date then amount else 0 end) as revenue FROM charges&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-5ce4cb3131ba459eb26c1002742a1061&quot; class=&quot;notion-text&quot; readability=&quot;37&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;This one was a little easier since I already taught it how to get revenue from 10-01-20 through 11-15-20, but it did know to convert June 1st and August 1st to their appropriate date formats in SQL ('06-01-2020' and '08-01-2020' respectively). If it had just replaced the dates from my example with &quot;June 1st&quot; and &quot;August 1st&quot; then I'd know it wasn't getting the concept of dates but just pattern matching to the closest example. With this result, I can tell GPT-3 is at least somewhat getting the&lt;/span&gt; &lt;span&gt;&lt;em&gt;concept&lt;/em&gt;&lt;/span&gt; &lt;span&gt;of dates.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;block-0a629a07a3264dd6bd593e39fd1fe0a6&quot; class=&quot;notion-heading&quot;&gt;&lt;span class=&quot;notion-heading__anchor&quot; id=&quot;0a629a07a3264dd6bd593e39fd1fe0a6&quot;/&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Taking GPT-3 to the next level&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div id=&quot;block-40b7bf5e41b7489e8b9d685a32723463&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Thus far I've been asking pretty basic questions about users, revenue, and growth metrics, which GPT-3 has been handling well. So let's make it a little more challenging. I want to know what percent of users converted to paid. GPT-3, your go:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-fe0ffeef11aa45e5ba09297ea5a6587a&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/97efb246-d2c1-492e-9057-f8058e56e6d4.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-b249e25119d5442d92e9998694277211&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;what percent of users who signed up converted to paid?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-5f4122ed866b45a18b44ba0425a13271&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT COUNT(&lt;/span&gt;&lt;span&gt;&lt;em&gt;) as&lt;/em&gt;&lt;/span&gt; &lt;span&gt;total_users&lt;/span&gt;&lt;span&gt;&lt;em&gt;, COUNT(&lt;/em&gt;&lt;/span&gt;&lt;span&gt;) as total_paid_users, 100.0*(COUNT(&lt;/span&gt;&lt;span&gt;&lt;em&gt;) as&lt;/em&gt;&lt;/span&gt; &lt;span&gt;total_paid_users&lt;/span&gt;&lt;span&gt;&lt;em&gt;) / COUNT(&lt;/em&gt;&lt;/span&gt;&lt;span&gt;) as total_users AS percent_converted FROM users&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-10e8a64837ba446fbbf682db876b30e0&quot; class=&quot;notion-text&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Okay, not quite what I was going for, and definitely not correct SQL. I don't think it really understands the concept of &quot;percent&quot;—just that it involves COUNT() and multiplying by 100. I'll add an example that implements that concept and see if GPT-3 can catch on. My new example using &quot;percent&quot;:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-03334b4f1eae4b989f16479e1f36eb10&quot; class=&quot;notion-text bg-orange&quot; readability=&quot;29.586206896552&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;what percent of users have an email ending in '&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://gmail.com/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;gmail.com&lt;/a&gt;&lt;/span&gt;&lt;span&gt;'?&lt;/span&gt; &lt;span&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(CASE WHEN email like '%&lt;/span&gt;&lt;span&gt;&lt;a href=&quot;http://gmail.com/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;gmail.com&lt;/a&gt;&lt;/span&gt;&lt;span&gt;' then 1 else 0 end)/COUNT(*) as percent_gmail FROM users&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-9991a35bc4834fcfa6154ee1f0fa34fb&quot; class=&quot;notion-text&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Now when I try the same question I get:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-18455cb25aad41eb94106a2e1bc944e8&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/a82ffea8-5b38-46fe-829f-166df06432c4.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-cd4300acc1f64d7ea720786210d7b66e&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;what percent of users who signed up converted to paid?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-4698b5c469b8450b8bafd5f9e3d91035&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(CASE WHEN plan_type = 'pro' THEN 1 else 0 end)/COUNT(*) as percent_paid FROM users&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-aab26c15b9204ff08a9aab1d67be0f21&quot; class=&quot;notion-text&quot; readability=&quot;34&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Much cleaner. It knew to divide the number of users with plan_type = 'pro' by the total number of users to get the percent I asked for. I can also ask the same thing for a subset of users (e.g. users that signed up in the last 6 months) and get an accurate response:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-de06f347efee468ba004f3a8e221a7b0&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/95f515c5-17eb-4f4f-83d0-8fc3015f1076.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-ce12fc9c976a4c329fe3e993581c2898&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;what percent of users that signed up in the past 6 months converted to paid?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-3f00334ec34c4296b8bb6a0a60301ef1&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(CASE WHEN plan_type='pro' THEN 1 ELSE 0 END)/COUNT(*) AS percent_paid FROM users WHERE users.signup_dt&amp;gt;= now() - interval '6 months'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;block-fd433b11f09543c1acf19eefd7751650&quot; class=&quot;notion-heading&quot;&gt;&lt;span class=&quot;notion-heading__anchor&quot; id=&quot;fd433b11f09543c1acf19eefd7751650&quot;/&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Tuning GPT-3's parameters&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div id=&quot;block-8b95790a280544d3bb63f8c8431d9644&quot; class=&quot;notion-text&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Besides giving GPT-3 an instruction and some examples, there are a few parameters that can be tuned to increase GPT-3's effectiveness. An important one is &quot;temperature&quot; which translates essentially to how much randomness GPT-3 incorporates into its response. If you just want the highest probability response (i.e. no randomness) then you can set the temperature = 0.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-aa84033fb03c49fca40a64d06db4324e&quot; class=&quot;notion-text&quot; readability=&quot;36&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Take, for example, the (somewhat tricky) prompt, &quot;how much revenue did we have in each of the last 2 months?&quot;. Setting the temperature to .8 gives you something utterly nonsensical:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-771fc9d7fd1841639245263b24a3f30e&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/1ac94aa3-14ed-48c5-a337-7af6980b9750.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-9c255bf4c64042db9e032ce297ae9f33&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue did we have in each of the last 2 months?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-0ad0799060c3463b9c6906b0e5b70c52&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;35.320754716981&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;.8 Temperature response GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(case when charge_dt&amp;gt;= now() - interval '1 month' then charges.amount else 0 end) as revenue_this_month, CASE WHEN signup_dt&amp;gt;= now() - interval '2 months' AND signup_dt &amp;lt; now() - interval '1 month' THEN SUM(charges.amount) else 0 end as revenue_last_month FROM charges LEFT OUTER JOIN users ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id \ WHERE users.signup_dt &amp;gt;= now() - interval '1 month'&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-6475eadfbf084c2d89e425dfe8d09ec6&quot; class=&quot;notion-text&quot; readability=&quot;34&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Meanwhile, setting the temperature to a cooler .3 gives you a working query that answers the question:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-412a67acad234243a455c4539b3c47ac&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/59523cb6-d6cd-4543-b3d2-6cdb211ac278.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-7be6e9d051f1453cae45770235670503&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue did we have in each of the last 2 months?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-c3693a708a9a48ffb2a0d27e611736c7&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;35&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;.3 Temperature GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(case when charge_dt&amp;gt;= now() - interval '1 month' then amount else 0 end) as revenue_this_month, SUM(case when charge_dt&amp;gt;= now() - interval '2 months' and charge_dt &amp;lt; now() - interval '1 month' then amount else 0 end) as revenue_last_month FROM charges&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-138f4a62f149447fbbb0cd632c9ec50f&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;The higher temperature GPT-3 is being more &quot;creative&quot;, using expressions and techniques it hasn't seen before, but also overcomplicates it and gives a mostly nonsensical response. The .3 temperature response, on the other hand, correctly converted the question to SQL.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-a1177ba2324d404e84596e1ebb30c591&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;In my experience, if you're asking a question that follows a pattern already established by an example, cooler temperatures tend to perform better. But if you're asking something that demands more creativity, higher temperatures are optimal since GPT-3 is more likely to try something it hasn't been explicitly taught.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-a69e23447d9a45e98c49a79489d32a3a&quot; class=&quot;notion-text&quot; readability=&quot;39&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;In the case below I ask, &quot;how much revenue have we had from users that signed up in the last 6 months?&quot; (after removing it from my examples). With a lower temperature, GPT-3 tried to invent a &quot;signup_dt&quot; column in the &quot;charges&quot; table so it didn't have to join the &quot;users&quot; and &quot;charges&quot; tables together. With a higher temperature, it did join them, which was necessary to answer the question correctly. Here is the .8 temperature response:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-77fe9f9b26344dac808bc01016e19f2d&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/cc548838-7411-4950-a27e-5ce7ac5ccf7e.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-f666d3a053e14805b242c320b845d38e&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue have we had from users that signed up in the last 6 months?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-e59cdeecc6964ccca2ea8795fb1b09bd&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;32.42774566474&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;.8 Temperature GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(charges.amount) FROM users INNER JOIN charges ON&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;http://users.id/&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;users.id&lt;/a&gt;&lt;/span&gt; &lt;span&gt;= charges.user_id WHERE signup_dt &amp;gt;= DATE_SUB(now(), INTERVAL '6 months')&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;block-1055bd258ca54307a281e013155cc5c8&quot; class=&quot;notion-text&quot; readability=&quot;40&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;To be sure, &quot;DATE_SUB(now(), INTERVAL '6 months')&quot; is not a valid Postgres expression (one of the drawbacks of higher temperatures is it tries things that might not work), so this query would technically fail. But structurally, it's on the right path by joining &quot;charges&quot; and &quot;users&quot; so it can condition on &quot;signup_dt&quot;. Meanwhile, the .2 temperature response was totally inaccurate in using a &quot;signup_dt&quot; column that doesn't actually exist in the &quot;charges&quot; table:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-d25e83f70f7a4783b7eb7f444ddcb960&quot; class=&quot;notion-image page-width&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://api.super.so/asset/blog.seekwell.io/9ea53d7c-7995-4af5-b64e-182e16f44030.gif&quot; alt=&quot;image&quot; width=&quot;100%&quot; height=&quot;auto&quot; objectfit=&quot;contain&quot; objectposition=&quot;center&quot; loading=&quot;lazy&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;block-32c82c0f914c4d39852db154c9dd3b42&quot; class=&quot;notion-text bg-green&quot; readability=&quot;32&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;Input:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;how much revenue have we had from users that signed up in the last 6 months?&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-e583eb1f88f642a68c966e197adee258&quot; class=&quot;notion-text bg-blue&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;&lt;strong&gt;.2 Temperature GPT-3 Response:&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;SELECT SUM(CASE WHEN signup_dt &amp;gt;= now() - interval '6 months' THEN amount ELSE 0 END) AS revenue FROM charges&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;block-785396624ec84f42bab4e769f24fdad9&quot; class=&quot;notion-heading&quot;&gt;&lt;span class=&quot;notion-heading__anchor&quot; id=&quot;785396624ec84f42bab4e769f24fdad9&quot;/&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Conclusion&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div id=&quot;block-15c547ddb9c9450f9be2affea83212a5&quot; class=&quot;notion-text&quot; readability=&quot;38&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Now, I've got a GPT-3 instance that take a plain English question and translates it to SQL that really works on my database. It's not always perfect, and still needs some handholding for more complex concepts like &quot;growth rate&quot; or &quot;percent&quot; but it's definitely useful. Now I can save a little time when I have a simple question that needs to be asked about my database, and don't feel like writing the SQL myself.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-32fe067cecb84e2c982bc2e0863eaec4&quot; class=&quot;notion-text&quot; readability=&quot;37&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Even just the fact that GPT-3 knew SQL concepts like adding or subtracting time intervals from dates—without having seen an example of it first—means that it can be useful for beginners unfamiliar with SQL syntax. Simply asking, &quot;GPT-3, how do you subtract 30 days from today's date in SQL?&quot; seems easier than googling or reading documentation.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-5d0e76e0c21e4307b9d0186141d819c2&quot; class=&quot;notion-text&quot; readability=&quot;33&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;As for actually acting on the answers you get from GPT-3—that's still a human job, for now.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-dd83004147694454a3db895db83a45bd&quot; class=&quot;notion-callout bg-gray-light border&quot; readability=&quot;10.650793650794&quot;&gt;
&lt;p&gt;&lt;span class=&quot;notion-icon text&quot;&gt;🔌&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;notion-callout__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Quick plug: We're currently testing a feature for&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://seekwell.io/blog-gpt3&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;SeekWell&lt;/a&gt;&lt;/span&gt; &lt;span&gt;customers that uses GPT-3 to automatically generate SQL from plain English, customized to your database schema. If you're interested in trying this out, let us know at contact@seekwell.io.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-bbed95a517dc479b9abce07e46edd539&quot; class=&quot;notion-text&quot; readability=&quot;28.377358490566&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;Code used for this project can be found on my&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://github.com/bkane1/gpt3-instruct-sandbox&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;github&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;block-ec2f4c24faaf41f681e49e93fa0a96b0&quot; class=&quot;notion-text color-gray&quot;&gt;
&lt;p class=&quot;notion-text__content&quot;&gt;&lt;span class=&quot;notion-semantic-string&quot;&gt;&lt;span&gt;By Brian Kane&lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://seekwell.io/blog-gpt3&quot; class=&quot;notion-link link&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;@SeekWell&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Wed, 27 Jan 2021 16:27:21 +0000</pubDate>
<dc:creator>daolf</dc:creator>
<og:url>https://blog.seekwell.io/gpt3</og:url>
<og:type>website</og:type>
<og:title>Automating My Job with GPT-3</og:title>
<og:description>SeekWell blog</og:description>
<og:image>https://s3.amazonaws.com/super-notion/images/707d9225-8f86-489c-9ecc-795816aa2998.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.seekwell.io/gpt3</dc:identifier>
</item>
<item>
<title>U.S. Suffers Sharpest Rise in Poverty Rate in More Than 50 Years</title>
<link>https://www.bloomberg.com/news/articles/2021-01-25/u-s-suffers-sharpest-rise-in-poverty-rate-in-more-than-50-years</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2021-01-25/u-s-suffers-sharpest-rise-in-poverty-rate-in-more-than-50-years</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2021-01-25/u-s-suffers-sharpest-rise-in-poverty-rate-in-more-than-50-years&quot;&gt;https://www.bloomberg.com/news/articles/2021-01-25/u-s-suffers-sharpest-rise-in-poverty-rate-in-more-than-50-years&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25930000&quot;&gt;https://news.ycombinator.com/item?id=25930000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 329&lt;/p&gt;
&lt;p&gt;# Comments: 224&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jan 2021 16:12:45 +0000</pubDate>
<dc:creator>paulpauper</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=59d6e0b0-6104-11eb-b4d3-2d620d0c1ca0&amp;url=L25ld3MvYXJ0aWNsZXMvMjAyMS0wMS0yNS91LXMtc3VmZmVycy1zaGFycGVzdC1yaXNlLWluLXBvdmVydHktcmF0ZS1pbi1tb3JlLXRoYW4tNTAteWVhcnM=</dc:identifier>
</item>
<item>
<title>My 2 Year Journey to $10K MRR</title>
<link>https://www.bannerbear.com/journey-to-10k-mrr/</link>
<guid isPermaLink="true" >https://www.bannerbear.com/journey-to-10k-mrr/</guid>
<description>&lt;div class=&quot;journey_page_modal_info&quot; data-id=&quot;The 12 Startups Challenge&quot; readability=&quot;44&quot;&gt;
&lt;p&gt;If I was to do the 12 startups challenge over, I would focus on one particular area of tech or industry and create several solutions in the same space.&lt;/p&gt;
&lt;p&gt;The way I did it, I launched several totally-unrelated products. In retrospect I don't think this was a good idea, but it did have the unintended side-effect of allowing me to see what general space I enjoyed the most.&lt;/p&gt;
&lt;p&gt;If you're direction-less (as I largely was) then the 12 Startups challenge can accelerate you towards a certain direction. But it can also be a fruitless waste of time, so be warned!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;journey_page_modal_info&quot; data-id=&quot;The North Star&quot; readability=&quot;43&quot;&gt;
&lt;p&gt;It only really occurred to me part way through this journey, but the reason automated image generation resonated with me so much is because I had felt the pain before.&lt;/p&gt;
&lt;p&gt;I had previously worked in an Ecommerce company where we would manually create visual assets every day for all the new products being uploaded to the store. It was a tedious process that I would have loved to automate at the time, but there was no solution.&lt;/p&gt;
&lt;p&gt;My North Star became trying to create a product that would have solved that past problem, for companies in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;journey_page_modal_info&quot; data-id=&quot;Not Solving a Top 50 Problem&quot; readability=&quot;37.069716775599&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.indiehackers.com/product/mojosaas/real-talk-time--LwDyKPEChHn02IlAgcL?commentId=-LwHCGp0rJ5hR0dZj8c4&quot; target=&quot;_blank&quot;&gt;This comment reply from the founder of Wavve&lt;/a&gt; was a good wake-up call.&lt;/p&gt;
&lt;p&gt;Ultimately, auto-generating Open Graph images is not a hair on fire problem. It's *part of* a hair on fire problem, that being &quot;we need to automate some of our marketing because we don't have time&quot; but it's a very niche part of that.&lt;/p&gt;
&lt;p&gt;By now I was already thinking about how to pivot the tech so it could have a more universal application rather than being confined to this single use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;journey_page_modal_info&quot; data-id=&quot;New Uses Cases&quot; readability=&quot;40&quot;&gt;
&lt;p&gt;This pivot away from a standalone Open Graph image tool was risky, as for existing customers, that's what they signed up for.&lt;/p&gt;
&lt;p&gt;The API launch definitely alienated some of these early customers and they churned.&lt;/p&gt;
&lt;p&gt;Note: early customers still had full access to the old product but I made it clear that the API would be the focus going forward.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;YMMV but I did not have much good fortune as a Shopify app developer. I found the API to be a bit dated (I'm sure it has been improved now though) and the customer expectation on pricing was around $5 to $10 per month, it seemed. For me it was not the right place to launch a niche SaaS tool.&lt;/p&gt;
&lt;p&gt;7 days of code, 7 days of marketing, and end the cycle with a newsletter report to subscribers on what's new. This rhythm worked well for me and is adapted from my previous experience working in Scrum Sprints.&lt;/p&gt;
&lt;div class=&quot;journey_page_modal_info&quot; data-id=&quot;Jobs to Be Done&quot; readability=&quot;45&quot;&gt;
&lt;p&gt;You can Google some literature on the topic, there wasn't one particular resource that I found helpful.&lt;/p&gt;
&lt;p&gt;But essentially the mindset shift is... everyone always says that you need to know your target market. Even better, is knowing what job your target market is trying to get done.&lt;/p&gt;
&lt;p&gt;Once you have figured that out, use that language in how you market your solution.&lt;/p&gt;
&lt;p&gt;I will add that, these &quot;jobs to be done&quot; for my app were not obvious in the beginning and it took months of looking at usage trends to understand what they were.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;journey_page_modal_info&quot; data-id=&quot;Upgrade Your User&quot; readability=&quot;33.760765550239&quot;&gt;
&lt;p&gt;This is maybe a bit of an abstract concept, especially if you're like me and you're a technical founder building a product.&lt;/p&gt;
&lt;p&gt;But here's an illustration by &lt;a href=&quot;https://twitter.com/SamuelHulick&quot; target=&quot;_blank&quot;&gt;@SamuelHulick&lt;/a&gt; that I think captures the idea perfectly:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/23f092c7da7ef6dcd0b36ada6d803bb25ec6c317/d7ae7/images/journey/mario.jpg&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;


</description>
<pubDate>Wed, 27 Jan 2021 15:22:19 +0000</pubDate>
<dc:creator>ronyfadel</dc:creator>
<og:title>Here's How I Bootstrapped a SaaS to 10k MRR</og:title>
<og:description>Startups are hard, bootstrapping is harder! Here's how I bootstrapped a SaaS product to $10k MRR over the course of 2 years.</og:description>
<og:url>https://www.bannerbear.com/journey-to-10k-mrr/</og:url>
<og:image>https://www.bannerbear.com/images/journey-og.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bannerbear.com/journey-to-10k-mrr/</dc:identifier>
</item>
<item>
<title>Heavy social media use associated with lower mental health in adolescents</title>
<link>https://www.bbc.com/news/technology-55826238</link>
<guid isPermaLink="true" >https://www.bbc.com/news/technology-55826238</guid>
<description>&lt;p&gt;“The transition from childhood to adolescence can be turbulent, and the findings of this report underline why addressing and supporting young people’s mental health will only become more crucial as the impact of the pandemic unfolds,” said Jonathan Townsend, UK chief executive of The Prince’s Trust.&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jan 2021 13:59:03 +0000</pubDate>
<dc:creator>alexrustic</dc:creator>
<og:description>Heavy social media use had a negative impact on wellbeing, the study found.</og:description>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/8FFA/production/_116685863_hi043825875.jpg</og:image>
<og:title>Social media damages teenagers' mental health, report says</og:title>
<og:type>article</og:type>
<og:url>https://www.bbc.com/news/technology-55826238</og:url>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/technology-55826238</dc:identifier>
</item>
<item>
<title>Vue Native (2018)</title>
<link>https://vue-native.io/</link>
<guid isPermaLink="true" >https://vue-native.io/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://vue-native.io/&quot;&gt;https://vue-native.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25927184&quot;&gt;https://news.ycombinator.com/item?id=25927184&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 203&lt;/p&gt;
&lt;p&gt;# Comments: 177&lt;/p&gt;
</description>
<pubDate>Wed, 27 Jan 2021 12:03:20 +0000</pubDate>
<dc:creator>alokrai</dc:creator>
<og:type>article</og:type>
<og:title>Vue Native</og:title>
<og:description>Vue Native - The Progressive JavaScript Framework For Mobile Apps</og:description>
<og:image>https://vue-native.io/images/logo.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://vue-native.io/</dc:identifier>
</item>
<item>
<title>Telephoto fear: how lenses affect views of crowds</title>
<link>https://mainichi.jp/english/articles/20210126/p2a/00m/0op/009000c</link>
<guid isPermaLink="true" >https://mainichi.jp/english/articles/20210126/p2a/00m/0op/009000c</guid>
<description>&lt;p class=&quot;txt&quot;&gt;TOKYO -- One photography-specific term that has been flying around since the coronavirus pandemic took hold is &quot;compression effect,&quot; also called &quot;lens compression.&quot; In short, lens compression occurs when a telephoto lens is used to shoot large groups of people from a distance. Perspective is flattened, making the people look much closer together than they actually are. In the context of the pandemic, this has sparked accusations that photojournalists are &quot;overproducing&quot; or even &quot;fabricating&quot; the scenes they shoot.&lt;/p&gt;

&lt;p class=&quot;txt&quot;&gt;Everything in the photos is real, but the method a person uses to shoot even the same subject changes how people see it. So how should photojournalists represent crowds during the pandemic? As a news photographer, this question is a constant companion for me.&lt;/p&gt;
&lt;div class=&quot;img-top&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;img&quot;&gt;&lt;a data-href=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na004000p/9.jpg?1&quot; data-lightbox=&quot;photos&quot; data-title=&quot;A road lined with gingko trees in Tokyo's Showa Kinen Park, shot with a 400-millimeter telephoto lens on Nov. 17, 2020. (Mainichi/Hiroshi Maruyama)&quot;&gt;&lt;span class=&quot;wrap&quot;&gt;&lt;img src=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na004000p/9.jpg?1&quot; alt=&quot;&quot; class=&quot;horizontal-photo&quot;/&gt;&lt;/span&gt;&lt;/a&gt;


&lt;/div&gt;
A road lined with gingko trees in Tokyo's Showa Kinen Park, shot with a 400-millimeter telephoto lens on Nov. 17, 2020. (Mainichi/Hiroshi Maruyama)&lt;/div&gt;
&lt;p class=&quot;txt&quot;&gt;In November 2020, I went to Showa Kinen Park straddling the western Tokyo cities of Tachikawa and Akishima to photograph the gingko trees in their full autumn glory. When I shot one leaf-covered road with a 400-millimeter telephoto lens, the leaves looked like they were overlapping, and all 98 trees on the 300-meter-long avenue were visible. But the people walking under the golden boughs looked very close together.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;When I took the same scene with a 24mm wide angle lens -- which exaggerates perspective -- the people looked more spread out, but the road and the tree trunks took up a larger chunk of the shot. I worried, &quot;The telephoto lens shot has far more depth, so the park visitors look like they're having a good time. But what if people think they're crowded together?&quot;&lt;/p&gt;
&lt;div class=&quot;img-top&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;img&quot;&gt;&lt;a data-href=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na005000p/9.jpg?1&quot; data-lightbox=&quot;photos&quot; data-title=&quot;The same road in Showa Kinen Park is pictured using a 24-millimeter wide angle lens, on Nov. 17, 2020. (Mainichi/Hiroshi Maruyama)&quot;&gt;&lt;span class=&quot;wrap&quot;&gt;&lt;img src=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na005000p/9.jpg?1&quot; alt=&quot;&quot; class=&quot;horizontal-photo&quot;/&gt;&lt;/span&gt;&lt;/a&gt;


&lt;/div&gt;
The same road in Showa Kinen Park is pictured using a 24-millimeter wide angle lens, on Nov. 17, 2020. (Mainichi/Hiroshi Maruyama)&lt;/div&gt;
&lt;p class=&quot;txt&quot;&gt;On this occasion, I used nine photos for a web-based article, so I was able to use both the telephoto and wide-angle shots. But when it comes to a print article for the newspaper, we can usually use just one photo. If I'd been asked to choose, I think I would have had a hard time.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;If you search for &quot;compression effect corona&quot; in Japanese on the internet, you'll discover a flood of criticism of newspaper and television images related to the pandemic, including allegations of &quot;creating crowding,&quot; &quot;lies,&quot; and &quot;faked shots.&quot; The critiques appear to have started increasing last spring, during the first national state of emergency. Even public figures have joined in the condemnations. Reiko Matsushita, mayor of the western Japanese city of Musashino, tweeted on April 19, 2020, &quot;I am angered by news reports using highly lens-compressed photos as though they told the whole story about Kichijoji,&quot; a Musashino neighborhood.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Recently, an Asahi Shimbun newspaper photographer was attacked on Twitter and branded &quot;compression man&quot; for telephoto shots of rush-hour commuters at Tokyo's Shinagawa station. The photos were lambasted as &quot;exaggerating&quot; the crowding, &quot;manipulative,&quot; and &quot;stoking public anxiety.&quot; However, there is no proof that the photographer was deliberately seeking to create a distorted impression of the scene.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Shooting crowds with a telephoto lens is standard procedure among photojournalists. I had never questioned the practice, because I thought it was intended to express crowdedness. And as far as I am aware, there had never been criticism of the technique before the pandemic.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;I think that the primary reason lens compression has become so suddenly controversial is widespread nervousness about crowds inspired by the coronavirus. Everyone wants accurate information, but the photos and videos in the news seem different from what people themselves see and experience out in the world. I understand that feeling, too.&lt;/p&gt;
&lt;div class=&quot;img-left&quot; readability=&quot;13&quot;&gt;
&lt;div class=&quot;img&quot;&gt;&lt;a data-href=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na006000p/9.jpg?1&quot; data-lightbox=&quot;photos&quot; data-title=&quot;Single lens reflex cameras fitted with a 25-70 millimeter zoom lens, right, and a 400-millimeter telephoto lens, left. The camera in the middle is a compact digital camera with a 30x zoom lens, good for covering wide-angle shots in the 24- to 720-millimeter range. (Mainichi/Hiroshi Maruyama)&quot;&gt;&lt;span class=&quot;wrap&quot;&gt;&lt;img src=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na006000p/6.jpg?1&quot; alt=&quot;&quot; class=&quot;horizontal-photo&quot;/&gt;&lt;/span&gt;&lt;/a&gt;


&lt;/div&gt;
Single lens reflex cameras fitted with a 25-70 millimeter zoom lens, right, and a 400-millimeter telephoto lens, left. The camera in the middle is a compact digital camera with a 30x zoom lens, good for covering wide-angle shots in the 24- to 720-millimeter range. (Mainichi/Hiroshi Maruyama)&lt;/div&gt;
&lt;p class=&quot;txt&quot;&gt;I don't think us news photographers can keep using techniques we'd always taken for granted without talking about why we use them. We are in a time when we must try to shoot our subjects from multiple angles, and explain the effects lens compression and exaggerated perspective can have.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Even then, though, one thing will not change: We cannot escape the subjective perspective of the photographer.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;On Dec. 26 last year, I headed to Ameyoko market in Tokyo's Ueno area intent on capturing the indefatigability of the shop owners there in the face of the pandemic. When I first arrived, I saw the people on the main avenue and thought, &quot;Of course, this is Ameyoko. Even with the coronavirus, the end of the year brings out the shoppers.&quot;&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;But when I ventured deeper into the market, there were startlingly few customers to be seen. Shop owners told me they would be forced out of business if things kept up as they were.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The scene also changed over time. At one moment, the streets might be lively and crowded, but 10 minutes later, devoid of people. I was in Ameyoko for about seven hours that day. What I discovered was a harsh reality that was the opposite of what I had been expecting. According to the Ameyoko merchants' association, some 1.6 million people visited the market in the last five days of 2019. That dropped by half over the same period last year.&lt;/p&gt;
&lt;div class=&quot;img-top&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;img&quot;&gt;&lt;a data-href=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na007000p/9.jpg?1&quot; data-lightbox=&quot;photos&quot; data-title=&quot;People wearing masks walk along the main road in the Ameyoko market in Tokyo's Ueno area, shot at a focal length of 300 millimeters, on Dec. 26, 2020. (Mainichi/Hiroshi Maruyama)&quot;&gt;&lt;span class=&quot;wrap&quot;&gt;&lt;img src=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na007000p/9.jpg?1&quot; alt=&quot;&quot; class=&quot;horizontal-photo&quot;/&gt;&lt;/span&gt;&lt;/a&gt;


&lt;/div&gt;
People wearing masks walk along the main road in the Ameyoko market in Tokyo's Ueno area, shot at a focal length of 300 millimeters, on Dec. 26, 2020. (Mainichi/Hiroshi Maruyama)&lt;/div&gt;
&lt;p class=&quot;txt&quot;&gt;So where, when, and with what lens, should I take photos that best communicate this reality? I thought about this many times as I was reporting. If I had spent just a short time in Ameyoko shooting only the main avenue, that could very well have left a misleading impression. In the end, I put together a report for the Mainichi Shimbun's online edition with 15 photos.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;The controversy over lens compression in news photographs has not been limited to Japan. In September last year, Britain's The Guardian newspaper carried a story from Australia titled, &quot;Picture imperfect: why photos of 'crowded' beaches may not be what they seem.&quot; One part of the article states, &quot;Guardian photographer Mike Bowers uses a drone regularly in his photographic work and says pictures shot from the air more accurately represents how crowded a beach really is.&quot;&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;Indeed, taking photos from above is an obvious way to capture crowd levels. But that photo will show just one slice of reality. And it remains up to the subjective choice of the photographer what bit of area to shoot and when.&lt;/p&gt;
&lt;div class=&quot;img-left&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;img&quot;&gt;&lt;a data-href=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na008000p/9.jpg?1&quot; data-lightbox=&quot;photos&quot; data-title=&quot;There were very few customers to be seen deeper into Ameyoko market, shot here at a focal length of 300 millimeters, on Dec. 26, 2020. (Mainichi/Hiroshi Maruyama)&quot;&gt;&lt;span class=&quot;wrap&quot;&gt;&lt;img src=&quot;https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na008000p/6.jpg?1&quot; alt=&quot;&quot; class=&quot;horizontal-photo&quot;/&gt;&lt;/span&gt;&lt;/a&gt;


&lt;/div&gt;
There were very few customers to be seen deeper into Ameyoko market, shot here at a focal length of 300 millimeters, on Dec. 26, 2020. (Mainichi/Hiroshi Maruyama)&lt;/div&gt;
&lt;p class=&quot;txt&quot;&gt;To completely banish subjectivity, perhaps the only option is to set up multiple surveillance cameras with 50mm lenses -- neither telephoto nor wide angle -- around spots where people congregate, and put the feeds online so that anyone can see the situation for themselves. There is a forerunner of this kind of system in Itami, Shizuoka Prefecture, where last summer, AI-controlled cameras took shots of the city's beaches to provide real-time updates on crowding levels.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;But journalists are not robots. And the keys to understanding all the issues related to the coronavirus go beyond crowding. The ratio of people wearing masks, people's ages and genders, the clothes they wear and the expressions on their faces, the suffering of shop owners; all these are relevant, too, and come into focus through the lens of the photojournalist.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;It is a reporter's job to scoop out facts from the infinite river of events that best represent the essence of reality, and communicate them to the reader or viewer. We are constantly faced with decisions on what to report and what not to. I, for one, humbly accept the problems with lens compression that have been pointed out, and will seek solutions everywhere I go to report.&lt;/p&gt;
&lt;p class=&quot;txt&quot;&gt;(Japanese original by Hiroshi Maruyama, Integrated Digital News Center)&lt;/p&gt;

</description>
<pubDate>Wed, 27 Jan 2021 10:26:45 +0000</pubDate>
<dc:creator>_cs2017_</dc:creator>
<og:title>Telephoto fear: Japanese photojournalist shows how lenses affect views of crowds amid virus - The Mainichi</og:title>
<og:type>article</og:type>
<og:url>https://mainichi.jp/english/articles/20210126/p2a/00m/0op/009000c</og:url>
<og:description>TOKYO -- One photography-specific term that has been flying around since the coronavirus pandemic took hold is</og:description>
<og:image>https://cdn.mainichi.jp/vol1/2021/01/26/20210126p2a00m0na003000p/0c10.jpg?1</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mainichi.jp/english/articles/20210126/p2a/00m/0op/009000c</dc:identifier>
</item>
</channel>
</rss>