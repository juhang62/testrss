<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Robinhood Stored Passwords in Plaintext</title>
<link>https://news.ycombinator.com/item?id=20519281</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=20519281</guid>
<description>&lt;tr readability=&quot;0.58823529411765&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr id=&quot;pagespace&quot; title=&quot;Robinhood Stored Passwords in Plaintext&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.961931290622&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;7.8212627669452&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;20519281&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=20519281&quot; class=&quot;storylink&quot;&gt;Robinhood Stored Passwords in Plaintext&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.77922077922078&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_20519281&quot;&gt;203 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=bdibs&quot; class=&quot;hnuser&quot;&gt;bdibs&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=20519281&quot;&gt;4 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_20519281&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=20519281&amp;amp;goto=item%3Fid%3D20519281&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Robinhood%20Stored%20Passwords%20in%20Plaintext&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Robinhood%20Stored%20Passwords%20in%20Plaintext&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=20519281&amp;amp;auth=79dfd20bdf894c9cc068c4f37eaae94cc865afe2&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=20519281&quot;&gt;91 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;24&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;25&quot;&gt;Just received this email from Robinhood (https://robinhood.com/):
&lt;p&gt;&quot;When you set a password for your Robinhood account, we use an industry-standard process that prevents anyone at our company from reading it. On Monday night, we discovered that some user credentials were stored in a readable format within our internal systems. We wanted to let you know that your Robinhood password may have been included.&lt;/p&gt;
&lt;p&gt;We resolved this issue, and after thorough review, found no evidence that this information was accessed by anyone outside of our response team. Out of an abundance of caution, we still recommend that you change your Robinhood password.&lt;/p&gt;
&lt;p&gt;We take matters like this seriously. Earning and maintaining your trust is our top priority, and we’re committed to protecting your information. Let us know if you have any questions–we’re here to help.&lt;/p&gt;
&lt;p&gt;Sincerely,&lt;/p&gt;
&lt;p&gt;The Robinhood Team&quot;&lt;/p&gt;
&lt;p&gt;If you've used Robinhood in the past, it's a good idea to check your emails!&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Wed, 24 Jul 2019 20:25:55 +0000</pubDate>
<dc:creator>bdibs</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=20519281</dc:identifier>
</item>
<item>
<title>Fast Software, the Best Software</title>
<link>https://craigmod.com/essays/fast_software/</link>
<guid isPermaLink="true" >https://craigmod.com/essays/fast_software/</guid>
<description>&lt;p&gt;I love &lt;em&gt;fast&lt;/em&gt; software. That is, software speedy both in function and interface. Software with minimal to no lag between wanting to activate or manipulate something and the thing happening. Lightness.&lt;/p&gt;
&lt;p&gt;Software that’s speedy usually means it’s focused. Like a good tool, it often means that it’s simple, but that’s not necessarily true. Speed in software is probably the most valuable, least valued asset. To me, speedy software is the difference between an application smoothly integrating into your life, and one called upon with great reluctance. Fastness in software is like great margins in a book — makes you smile without necessarily knowing why.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;One of my most used, most speedy pieces of software is &lt;a href=&quot;https://brettterpstra.com/projects/nvalt/&quot;&gt;nvALT&lt;/a&gt;. It’s an oddly named, very bland application. Just a database of plain text files with a plain text editor bolted on. But it’s fast. The fastest piece of text cataloging software I’ve used. It opens instantly and produces results instantly. My nvALT database is full of ten years of notes. Open it and your cursor is already in the search field. It is keyboard friendly software: If you’re ever not in the search field, just hit &lt;span class=&quot;sc&quot;&gt;ESC&lt;/span&gt;, and you’ll land there. Type a few letters and all the notes with those letters appear. It is the best instantiation of an off-board brain I have. Any piece of text with value in my life gets dumped into nvALT.&lt;/p&gt;
&lt;p&gt;nvALT syncs with &lt;a href=&quot;https://simplenote.com&quot;&gt;Simplenote&lt;/a&gt;. This is handy because nvALT is macOS only. So you can use the Simplenote iOS app to keep your extra brain nearby on the go. Simplenote also has a macOS app. You may think: Why not use the Simplenote desktop application? Because — it’s not &lt;em&gt;quite&lt;/em&gt; as fast. We’re talking milliseconds, but it’s enough that you &lt;em&gt;feel&lt;/em&gt; the difference. It’s the difference between the &lt;a href=&quot;https://www.youtube.com/watch?v=TD2XGwmRJi8&quot;&gt;$1000 Japanese garden shears&lt;/a&gt; and the $150 garden shears. They both cut just fine, but if you work in the garden all day, you will (probably?) feel the difference.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;I write mainly in &lt;a href=&quot;https://ulysses.app/&quot;&gt;Ulysses&lt;/a&gt;. Even now, I’m writing this in Ulysses. Ulysses works well for organizing large-ish bodies of writing. The organization is mostly of why I use it. But it can slow down. Ulysses has slowed down on a number of occasions. If I have a 5,000 word article and type towards the top of it, it sometimes can’t keep up with my typing. It re-renders the whole thing with each keystroke. This drives me bonkers. But the organization and simplicity of the application outweigh this sometimes-slowness. Still, the slowness feels indicative of unseen rot on the inside of the machine. The slowness is like an off smell. I don’t trust the application as much as I would if it didn’t slow down on such a small text file. 5,000 words is nothing. Faith is tested: It makes me wonder how good the sync capabilities are. It makes me wonder if the application will lose data.&lt;/p&gt;
&lt;p&gt;Speed and reliability are often intuited hand-in-hand. Speed can be a good proxy for general engineering quality. If an application slows down on simple tasks, then it can mean the engineers aren’t obsessive detail sticklers. Not always, but it can mean disastrous other issues lurk. I want all my craftspeople to stickle. I don’t think Ulysses is badly made, but I am less confident in it than if it handled input and interface speed with more grace. Speed would make me trust it &lt;em&gt;more&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As a counter example, &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt; never slows down for me. I can throw a 50,000 &lt;em&gt;line&lt;/em&gt; file at it and it zips along. You may wonder why I don’t write in Sublime Text (as I sometimes wonder). And the answer is: It’s just not quite &lt;em&gt;nice&lt;/em&gt; enough for full composition. Sublime’s typography, spell check, file organization (no keywords, inability to organize order willy-nilly, etc) — just not as refined. Sublime Text is optimized for code, not words. Whereas Ulysses is word-focused. The difference is subtle but meaningful. That said, Sublime Text has — in my experience — only gotten faster. I love software that does this: Software that unbloats over time. This should be the goal of all software. The longer it’s around, the more elegant it should become. Smooth over like a river stone. I have full trust in the engineering of Sublime Text because I’ve used it for over a decade, but also because it always feels like a fast, focused tool (even though it’s actually very complicated) and has only become faster the longer I’ve used it.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Adobe Lightroom does not feel like a fast, focused tool. Nor does Photoshop. At one point, they did. It’s why I chose them. Photoshop in the 90s was very fast. I don’t think I’m invoking some halcyon fantasy. It was truly a sparky piece of code. Similarly, I started using Lightroom around 2007 because it was so much faster than Apple’s Aperture. But Aperture is gone and Lightroom has not smoothed out over the years. Lightroom is a gangly blob, with lots of dull, slow edges. Why can’t it get faster? This is a mystery for the ages, but I suspect it’s because of a) feature bloat, and b) core engineering sub-optimized for so much feature bloat. Is this why Adobe released Lightroom CC? Probably. It’s sometimes easier to make a new program than to fix the old one.&lt;/p&gt;
&lt;p&gt;Photoshop is now a turkey. Just opening the new file dialog in Photoshop takes seconds. Seconds to create a new, blank file. In 2019. If you press &lt;span class=&quot;sc&quot;&gt;cmd-opt-shift-w&lt;/span&gt; to export an image, it takes 3-5 seconds to load that screen. (And if you accidentally press cmod-opt-w, it closes all your windows.) Slower and slower with each release. It’s why I spent money on &lt;a href=&quot;https://affinity.serif.com/en-gb/photo/&quot;&gt;Affinity Photo&lt;/a&gt;. Simply for speed. That’s it. I still pay for a Creative Cloud license (for Lightroom and InDesign mainly), but I &lt;em&gt;happily&lt;/em&gt; paid for Affinity — a vote with dollars — because it’s so fast, and especially fast at exporting files for web consumption. I sigh — actually sigh — whenever I have to open Photoshop.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;One could argue that design apps like &lt;a href=&quot;https://www.sketch.com/&quot;&gt;Sketch&lt;/a&gt; have grown in popularity because of speed. Sketch was so much faster, simpler, and more UX design focused than most anything Adobe offered when it was released. It had reliability issues, but we were willing to overlook them because it was, once again, just &lt;em&gt;fun&lt;/em&gt; to use. In this way, speed can be tremendous commercial asset. When it comes to software that people live in all day long, a 3% increase in fun should not be dismissed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.figma.com/&quot;&gt;Figma&lt;/a&gt; is another design tool in the vein of Sketch or Illustrator. In spite of being browser based, Figma is so fast that I laugh from delight whenever I use it. It feels precisely as fast as everything should be on a contemporary computer — which is, extremely. It feels loved. I know the engineering and design teams behind it and I know it &lt;em&gt;is&lt;/em&gt; loved. It is built from a position of craft. Close-to-the-metal craft. And you feel it. Not only in speed as speed, but speed as intuitiveness. That is: The tools work more sensibly than the same tools in, say, Illustrator. The &lt;a href=&quot;https://medium.com/@rajipurcell/figma-a-solid-ui-design-app-thats-finally-improved-the-pen-tool-6103fa7a64b3&quot;&gt;pen tool&lt;/a&gt; for example. In Figma the pen tool operates from a position of rationality. In this sense, “speed” manifests not only in work per computer cycle, but work per user cycle.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Google Maps is dying a tragic, public death by a thousand cuts of slowness. Google has added animations all over Google Maps. They are nice individually, but in aggregate they are very slow. Google Maps used to be a fast, focused tool. It’s now quite bovine. If you push the wrong button, it moos. Clunky, you could say. Overly complex. Unnecessarily layered. Perhaps it’s trying to do too much? To back out of certain modes — directions, for example — a user may have to tap four or five different areas and endure as many slow animations.&lt;/p&gt;
&lt;p&gt;We endure because Google Maps, otherwise, is a treasure trove of data about the world around us. It’s a downright marvel of information, and a marvel of an application. More and more, however, that information is being hidden behind multi-UI variants, and a UI that seems to vary week-by-week. My outside intuition is that this is a management issue perhaps endemic to Google itself, not an engineering issue.&lt;/p&gt;
&lt;p&gt;Google Maps has gotten so slow, that I did the unthinkable: I reinstalled Apple Maps on my iPhone. Apple Maps in contrast, today, is downright zippy and responsive. The data still isn’t as good as Google Maps, but this a good example of where slowness pushed me to reinstall an app I had all but written off. I’ll give Apple Maps more of a chance going forward.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;For the absolute nadir of software clunkery, see exhibit a) iTunes. So slow, so laden, so burdened with being more than it ever was supposed to be that Apple decided to just throw it in the toilet, &lt;a href=&quot;https://www.macrumors.com/2019/05/31/goodbye-itunes/&quot;&gt;reconstitute it as a series of individual applications&lt;/a&gt;. Which is most certainly the best choice.&lt;/p&gt;
&lt;p&gt;It should be said, though, that Apple makes lots of fine software. Keynote is perhaps one of the finest pieces of software on macOS. It is a paragon of power wrapped in a simple interface. You may raise issue that it was simpler in a previous iteration, but this current version feels like it strikes a nice balance between modes, power, and general simplicity. It is fast and intuitive. One of my favorite sub-tools? The Instant Alpha tool. Pure joy. Works well for 90% of the intended use cases, and is &lt;em&gt;precisely&lt;/em&gt; the kind of tool you wouldn’t know you want, and wouldn’t expect to exist, but appears right when you need it. Generally though: Keynote is fast and feels well-made.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;But why is slow bad? Fast software is not always good software, but slow software is rarely able to rise to greatness. Fast software gives the user a chance to “meld” with its toolset. That is, not break flow. When the nerds upon Nerd Hill fight to the death over Vi and Emacs, it’s partly because they have such a strong affinity for the flow of the application and its meldiness. They have invested. The Tool Is Good, so they feel. Not breaking flow is an axiom of great tools.&lt;/p&gt;
&lt;p&gt;A typewriter is an excellent tool because, even though it’s slow in a relative sense, every aspect of the machine itself operates as quickly as the user can move. It is focused. There are no delays when making a new line or slamming a key into the paper. Yes, you have to put a new sheet of paper into the machine at the end of a page, but that action becomes part of the flow of using the machine, and the accumulation of paper a visual indication of work completed. It is not wasted work. There are no fundamental mechanical delays in using the machine. The best software inches ever closer to the physical directness of something like a typewriter. (The machine may break down, of course, ribbons need to be changed — but this is maintenance and separate from the use of the tool. I’d be &lt;em&gt;delighted&lt;/em&gt; to “maintain” Photoshop if it would lighten it up.)&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Speed manifests in the language — the literal words — of software, too. In recent years, macOS dialogs for closing an unsaved file have shifted from “Don’t Save, Cancel, Save” to “Delete, Cancel, Save.” This is only my opinion, but “Delete, Cancel, Save” makes less sense than “Don’t Save, Cancel, Save.” The option to “delete” implies something as having once been saved. Did I save this and forget I saved it? Or did it auto-save? I don’t know. Shake it any which way you like, I am still tripped up seeing this dialog when I close an unsaved file. It slows me down. Pressing delete feels violent. &lt;em&gt;Delete&lt;/em&gt;. So final. I second guess — maybe I don’t want to delete? Maybe I &lt;em&gt;do&lt;/em&gt; want to save. When, no, I just wanted to “Don’t Save.”&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;I am using the iPadOS 13 beta on my iPad. It has one new interface component in particular that is extremely fast and delightful: the so-called “Slide Over.” Just swipe from the right and — &lt;em&gt;sloop&lt;/em&gt; — an app float-over appears. The floating app is a mini-version of a big app and appears as quickly as you swipe. It feels satisfying. You move your finger and — instantly — there is the tiny app under your finger. Swipe back and it is gone. No “redrawing” of the screen. At the bottom of the tiny app is a small bar. Swipe the bar and the mini apps cycle. They cycle with a fast, beautiful animation that indicates where you’ve been and where you’re going. It’s an animation with purpose and that purpose is context iteration. It feels tactile. Excellent touch interfaces feel tactile. The best “touch interfaces,” in my opinion, are actual buttons, things with physicality, haptics. But on a screen, to feel tactile is to move without latency.&lt;/p&gt;
&lt;p&gt;From a speed and user experience point of view, I believe this Slide Over to be &lt;em&gt;vastly&lt;/em&gt; superior to the screen-split on the iPad. The screen-split is slow. You have tap, hold, drag, wait for the screen to “redraw” itself, for the apps to shimmy-blink into their new sizes. The screen-split feels like it controverts the code under the hood. Contrast this with the Slide Over. The Slide Over feels like a natural extension of the iPad environment. It is quickly and reliably invokable. It is predictable. It feels like its code is moving in natural synchronicity with the disposition of the device. &lt;em&gt;And&lt;/em&gt; with a speed commensurate to the power lurking under the glass. The screen-split could work, but the foundation code probably needs to be rewritten. Ideally it would be as smooth and fast as the Slide Over. It would be like cutting a wayward branch on your plum tree with $1,000 shears.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;I can go on and on. But let’s end with an example of a piece of iOS software that is pure craft: &lt;a href=&quot;https://apps.apple.com/us/app/things-3-for-ipad/id904244226&quot;&gt;Things&lt;/a&gt;. Things on iPad and iPhone is one of the most tactile, fast-as-you-can-move apps around. Each animation is purposeful. Mainly, it is &lt;em&gt;fun&lt;/em&gt;. It’s a fun app to be in. To put stuff into, to rearrange. It is old. Things has been around for over ten years. I was glad to open it ten years ago, and I am glad to open it today.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;It feels — intuitively — that software (beyond core functionality) should aim for speed. Speed as a proxy for efficiency. If a piece of software is becoming taurine-esque, unwieldy, then perhaps it shouldn’t be a &lt;em&gt;single&lt;/em&gt; piece of software. Ultimately, to be fast is to be light. And to be light is to lessen the burden on someone or some task. This is the ultimate goal: For our pocket supercomputers to lesson burdens, not increase them. For our mega-powered laptops to enable a kind of fluency — not battle, or struggle — of creation.&lt;/p&gt;
&lt;p&gt;All that said: It’s easy to write an essay about fast software. It’s difficult to make fast software. But when it’s made, we’re all grateful.&lt;/p&gt;
&lt;hr/&gt;&lt;h4 id=&quot;noted&quot;&gt;Noted:&lt;/h4&gt;



</description>
<pubDate>Wed, 24 Jul 2019 16:57:58 +0000</pubDate>
<dc:creator>Tomte</dc:creator>
<og:title>Fast Software, the Best Software</og:title>
<og:type>article</og:type>
<og:url>https://craigmod.com/essays/fast_software/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://craigmod.com/essays/fast_software/</dc:identifier>
</item>
<item>
<title>How not to sign a JSON object</title>
<link>https://latacora.micro.blog/2019/07/24/how-not-to.html</link>
<guid isPermaLink="true" >https://latacora.micro.blog/2019/07/24/how-not-to.html</guid>
<description>&lt;p&gt;Last year we did a blog post on interservice auth. This post is mostly about authenticating consumers to an API. That’s a related but subtly different problem: you can probably impose more requirements on your internal users than your customers. The idea is the same though: you’re trying to differentiate between a legitimate user and an attacker, usually by getting the legitimate user to prove that they know a credential that the attacker doesn’t.&lt;/p&gt;&lt;p&gt;When cryptography engineers say “signature” they tend to mean something asymmetric, like RSA or ECDSA. Developers reach for asymmetric tools too often. There are a lot of ways to screw them up. By comparison, symmetric “signing” (MACs) are easy to use and hard to screw up. HMAC is bulletproof and ubiquitous.&lt;/p&gt;
&lt;p&gt;Unless you have a good reason why you need an (asymmetric) signature, you want a MAC. If you really do want a signature, check out our Cryptographic Right Answers post to make that as safe as possible. For the rest of this blog post, “signing” means symmetrically, and in practice that means HMAC.&lt;/p&gt;

&lt;ol readability=&quot;0.94300518134715&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Serialize however you want.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;HMAC. With SHA256? Sure, whatever. We did &lt;a href=&quot;https://latacora.singles/2018/04/03/cryptographic-right-answers.html&quot;&gt;a blog post&lt;/a&gt; on that too.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Concatenate the tag with the message, maybe with a comma in between for easy parsing or something.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Shut up. Anyway, no, because you need to parse a header to read the JWT, so you inherit all of the problems that stem from that.&lt;/p&gt;

&lt;p&gt;Someone asked how to sign a JSON object “in-band”: where the tag is part of the object you’re signing itself. That’s a niche use case, but it happens. You have a JSON object that a bunch of intermediate systems want to read and it’s important none of them mess with its contents. You can’t just send &lt;code&gt;tag || json&lt;/code&gt;: that may be the cryptographically right answer, but now it’s not a JSON object anymore so third party services and middleboxes will barf. You also can’t get them to reliably pass the tag around as metadata (via a HTTP header or something). You need to put the key &lt;em&gt;on the JSON object&lt;/em&gt;, somehow, to “transparently” sign it. Anyone who cares about validating the signature can, and anyone who cares that the JSON object has a particular structure doesn’t break (because the blob is still JSON and it still has the data it’s supposed to have in all the familiar places).&lt;/p&gt;
&lt;p&gt;This problem sort-of reminds me of format-preserving encryption. I don’t mean that in a nice way, because there’s no nice way to mean that. Format-preserving encryption means you encrypt a credit card number and the result still sorta looks like a credit card number. It’s terrible and you only do it because you have to. Same with in-band JSON signing.&lt;/p&gt;
&lt;p&gt;As stated, in-band JSON signing means modifying a JSON object (e.g. removing the HMAC tag) and validating that it’s the same thing that was signed. You do that by computing the HMAC again and validating the result. Unfortunately there are infinitely many equal JSON objects with distinct byte-level representations (for some useful definition of equality, like Python’s builtin ==).&lt;/p&gt;
&lt;p&gt;Some of those differences are trivial, while others are fiendishly complicated. You can add as many spaces as you want between some parts of the grammar, like after the colon and before the value in an object. You can reorder the keys in an object. You can escape a character using a Unicode escape sequence (\u2603) instead of using the UTF-8 representation. “UTF-8” may be a serialization format for Unicode, but it’s not a canonicalization technique. If a character has multiple diacritics, they might occur in different orders. Some characters can be written as a base character plus a diacritic, but there’s also an equivalent single character. You can’t always know what the “right” character out of context: is this the symbol for the unit of resistance (U+2126 OHM SIGN) or a Greek capital letter Omega (U+03A9)? Don’t even get me started on the different ways you can write the same floating point number!&lt;/p&gt;
&lt;p&gt;Three approaches:&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li&gt;
&lt;p&gt;Canonicalize the JSON.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Add the tag and the exact string you signed to the object, validate the signature and then validate that the JSON object is the same as the one you got.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Create an alternative format with an easier canonicalization than JSON.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;canonicalization&quot;&gt;Canonicalization&lt;/h2&gt;
&lt;p&gt;Canonicalization means taking an object and producing a unique representation for it. Two objects that mean the same thing (“are equal”) but are expressed differently canonicalize to the same representation.&lt;/p&gt;
&lt;p&gt;Canonicalization is a quagnet, which is a term of art in vulnerability research meaning quagmire and vulnerability magnet. You can tell it’s bad just by how hard it is to type ‘canonicalization’.&lt;/p&gt;
&lt;p&gt;My favorite canonicalization bug in recent memory is probably Kelby Ludwig’s SAML bug. Hold onto your butts, because this bug broke basically every SAML implementation under the sun in a masterful stroke. It used NameIds (SAML-speak for “the entity this assertion is about”) that look like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;NameId&amp;gt;barney@latacora.com&amp;lt;!----&amp;gt;.evil.com&amp;lt;/NameId&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The common canonicalization strategy (“exc-c14n”) will remove comments, so that side sees “barney@latacora.com.evil.com”. The common parsing strategy (“yolo”) disagrees, and sees a text node, a comment, and another text node. Since everyone is expecting a NameId to have one text node, you grab the first one. But that says barney@latacora.com, which isn’t what the IdP signed or your XML-DSIG library validated.&lt;/p&gt;
&lt;p&gt;Not to worry: we said we were doing JSON, and JSON is not XML. It’s simpler! Right? There are at least two specs here: Canonical JSON (from OLPC) and an IETF draft (&lt;a href=&quot;https://tools.ietf.org/id/draft-rundgren-json-canonicalization-scheme-05.html&quot;&gt;https://tools.ietf.org/id/draft-rundgren-json-canonicalization-scheme-05.html&lt;/a&gt;). They work? Probably? But they’re not fun to implement.&lt;/p&gt;
&lt;h2 id=&quot;include-the-exact-thing-you-re-signing&quot;&gt;Include the exact thing you’re signing&lt;/h2&gt;
&lt;p&gt;If you interpret the problem as “to validate a signature I need an exact byte representation of what to sign” and canonicalization is just the default mechanism for getting to an exact byte representation, you could also just attach a specific byte serialization to the object with a tag for it.&lt;/p&gt;
&lt;p&gt;You validate the tag matches the specific serialization, and then you validate that the specific serialization matches the outside object with the tag and specific serialization removed. The upside is that you don’t need to worry about canonicalization; the downside is your messages are about twice the size that they need to be. You can maybe make that a little better with compression, since the repeated data is likely to compress well.&lt;/p&gt;
&lt;h2 id=&quot;the-regex-bait-and-switch-trick&quot;&gt;The regex bait and switch trick&lt;/h2&gt;
&lt;p&gt;If you interpret the problem as being about already having a perfectly fine serialization to compute a tag over, but the JSON parser/serializer roundtrip screwing it up after you compute the tag, you might try to do something to the serialized format that doesn’t know it’s JSON. This is a variant of the previous approach: you’re just not adding a &lt;em&gt;second&lt;/em&gt; serialization to compute the tag over.&lt;/p&gt;
&lt;p&gt;The clever trick here is to add a field of the appropriate size for your tag with a well-known fake value, then HMAC, then swap the value. For example, if you know the tag is HMAC-SHA256, your tag size is 256 bits aka 32 bytes aka 64 hex chars. You add a unique key (something like &lt;code&gt;__hmac_tag&lt;/code&gt;) with a value of 64 well-known bytes, e.g. 64 ASCII zero bytes. Serialize the object and compute its HMAC. If you document some subset of JSON serialization (e.g. where CRLFs can occur or where extra spaces can occur), you know that the string &lt;code&gt;&quot;__hmac_tag&quot;: “000...”&lt;/code&gt; will occur in the serialized byte stream. Now, you can use string replacement to shiv in the real HMAC value. Upon receipt, the decoder finds the tag, reads the HMAC value, replaces it with zeroes, computes the expected tag and compares against the previously read value.&lt;/p&gt;
&lt;p&gt;Because there’s no JSON roundtripping, the parser can’t mess up the JSON object’s specific serialization. The key needs to be unique because of course the string replacement or regular expression doesn’t know how to parse JSON.&lt;/p&gt;
&lt;p&gt;This feels weirdly gross? But at the same time probably less annoying than canonicalization. Unfortunately, it breaks if any of the middleboxes decides to change the JSON, e.g. via a parsing and serialization step.&lt;/p&gt;
&lt;h2 id=&quot;an-alternative-format&quot;&gt;An alternative format&lt;/h2&gt;
&lt;p&gt;If you interpret the problem as “canonicalization is hard because JSON is more complex than what I really want to sign”, you might think the answer is to reformat the data you want to sign in a format where canonicalization is easy or even automatic. AWS Signatures do this: there’s a serialization format that’s far less flexible than JSON where you put some key parameters, and then you HMAC that. (There’s an interesting part to it where it also incorporates the hash of the exact message you’re signing – but we’ll get to that later.)&lt;/p&gt;
&lt;p&gt;This is particularly attractive if there’s a fixed set of simple values you have to sign, or more generally if the thing you’re signing has a predictable format.&lt;/p&gt;

&lt;p&gt;Let’s apply this model to a case study of request signing has worked through the years in some popular services. These are not examples of how to do it well, but rather cautionary tales.&lt;/p&gt;
&lt;p&gt;First off, AWS. AWS requires you to sign API requests. The current spec is “v4”, which tells you that there is probably at least one interesting version that preceded it.&lt;/p&gt;
&lt;h2 id=&quot;aws-signing-v1&quot;&gt;AWS Signing v1&lt;/h2&gt;
&lt;p&gt;Let’s say an AWS operation CreateWidget takes attribute Name which can be any ASCII string. It also takes an attribute Unsafe, which is false by default and the attacker wishes were true. V1 concatenates the key-value pairs you’re signing, so something like Operation=CreateWidget&amp;amp;Name=iddqd became OperationCreateWidgetNameiddqd. You then signed the resulting string using HMAC.&lt;/p&gt;
&lt;p&gt;The problem with this is if I can get you to sign messages for creating widgets with arbitrary names, I can get you to sign operations for arbitrary CreateWidget requests: I just put all the extra keys and values I want in the value you’re signing for me. For example, the request signature for creating a widget named &lt;code&gt;iddqdUnsafetrue&lt;/code&gt; is exactly the same as a request signature for creating a widget named &lt;code&gt;iddqd&lt;/code&gt; with Unsafe equal to true: OperationCreateWidgetNameiddqdUnsafetrue.&lt;/p&gt;
&lt;h2 id=&quot;aws-signing-v2&quot;&gt;AWS Signing V2&lt;/h2&gt;
&lt;p&gt;Security-wise: fine.&lt;/p&gt;
&lt;p&gt;Implementation-wise: it’s limited to query-style requests (query parameters for GET, x-www-form-urlencoded for POST bodies) and didn’t support other methods, let alone non-HTTP requests. Sorting request parameters is a burden for big enough requests. Nothing for chunked requests either.&lt;/p&gt;
&lt;p&gt;(Some context: even though most AWS SDKs present you with a uniform interface, there are several different protocol styles in use within AWS. For example, EC2 and S3 are their own thing, some protocols use Query Requests (basically query params in GET queries and POST formencoded bodies), others use REST+JSON, some use REST+XML… There’s even some SOAP! But I think that’s on its way out.)&lt;/p&gt;
&lt;h2 id=&quot;aws-signing-v3&quot;&gt;AWS Signing V3&lt;/h2&gt;
&lt;p&gt;AWS doesn’t seem to like V3 very much. The &lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/sigv4_changes.html&quot;&gt;“what’s new in v4 document”&lt;/a&gt; all but disavows it’s existence, and no live services appear to implement it. It had some annoying problems like distinguishing between signed and unsigned headers (leaving the service to figure it out) and devolving to effectively a bearer token when used over TLS (which is great, as long as it actually gets used over TLS).&lt;/p&gt;
&lt;p&gt;Given how AWS scrubbed it away, it’s hard to say anything with confidence. I’ve found implementations, but that’s not good enough: an implementation may only use a portion of the spec while the badness can be hiding in the rest.&lt;/p&gt;
&lt;h2 id=&quot;aws-signing-v4&quot;&gt;AWS Signing V4&lt;/h2&gt;
&lt;p&gt;Security-wise: fine.&lt;/p&gt;
&lt;p&gt;Addressed some problems noted in V2; for example: just signs the raw body bytes and doesn’t care about parameter ordering. This is pretty close to the original recommendation: don’t do inline signing at all, just sign the exact message you’re sending and put a MAC tag on the outside. A traditional objection is that several equivalent requests would have a different representation, e.g. the same arguments but in a different order. It just turns out that in most cases that doesn’t matter, and API auth is one of those cases.&lt;/p&gt;
&lt;p&gt;Also note that all of these schemes are really outside signing, but they’re still interesting because they had a lot of the problems you see on an inline signing scheme (they were just mostly unforced errors).&lt;/p&gt;
&lt;h2 id=&quot;aws-signing-v0&quot;&gt;AWS Signing V0&lt;/h2&gt;
&lt;p&gt;For completeness. It is even harder to find than V3: you have to spelunk some SDKs for it. I hear it might have been HMAC(k, service || operation || timestamp), so it didn’t really sign much of the request.&lt;/p&gt;
&lt;h2 id=&quot;flickr-s-api-signing&quot;&gt;Flickr’s API signing&lt;/h2&gt;
&lt;p&gt;One commonality of the AWS vulnerabilities is that none of them attacked the primitive. All of them used HMAC and HMAC has always been safe. Flickr had exactly the same bug as AWS V1 signing, but also used a bad MAC. The tag you sent was MD5(secret + your_concatenated_key_value_pairs). We’ll leave the details of extension attacks for a different time, but the punchline is that if you know the value of H(secret + message) and don’t know s, you get to compute H(secret + message + glue + message2), where glue is some binary nonsense and message2 is an arbitrary attacker controlled string.&lt;/p&gt;
&lt;p&gt;A typical protocol where this gets exploited looks somewhat like query parameters. The simplest implementation will just loop over every key-value pair and assign the value into an associative array. So if you have user=lvh&amp;amp;role=user, I might be able to extend that to a valid signature for user=lvh&amp;amp;role=userSOMEBINARYGARBAGE&amp;amp;role=admin.&lt;/p&gt;

&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Just go ahead and always enforce TLS for your APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Maybe you don’t need request signing? A bearer token header is fine, or HMAC(k, timestamp) if you’re feeling fancy, or mTLS if you really care.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Canonicalization is fiendishly difficult.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Add a signature on the outside of the request body, make sure the request body is complete, and don’t worry about “signing what is said versus what is meant” – it’s OK to sign the exact byte sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The corollary here is that it’s way harder to do request signing for a REST API (where stuff like headers and paths and methods matter) than it is to do signing for an RPC-like API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 24 Jul 2019 15:54:22 +0000</pubDate>
<dc:creator>LaSombra</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://latacora.micro.blog/2019/07/24/how-not-to.html</dc:identifier>
</item>
<item>
<title>FTC Imposes $5B Penalty and Sweeping New Privacy Restrictions on Facebook</title>
<link>https://www.ftc.gov/news-events/press-releases/2019/07/ftc-imposes-5-billion-penalty-sweeping-new-privacy-restrictions</link>
<guid isPermaLink="true" >https://www.ftc.gov/news-events/press-releases/2019/07/ftc-imposes-5-billion-penalty-sweeping-new-privacy-restrictions</guid>
<description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: The FTC hosted an IN-PERSON press conference at FTC Headquarters, 600 Pennsylvania Ave, NW, Washington D.C., at 11 am ET TODAY (July 24). &lt;a href=&quot;https://www.ftc.gov/news-events/audio-video/video/ftc-press-conference-facebook-settlement&quot;&gt;Watch archival video of the press conference.&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Participants included: FTC Chairman Joe Simons, FTC Commissioners Noah Joshua Phillips and Christine S. Wilson, and Gustav W. Eyler, Director of the Department of Justice Civil Division’s Consumer Protection Branch.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Facebook, Inc. will pay a record-breaking $5 billion penalty, and submit to new restrictions and a modified corporate structure that will hold the company accountable for the decisions it makes about its users’ privacy, to settle Federal Trade Commission charges that the company violated a 2012 FTC order by deceiving users about their ability to control the privacy of their personal information.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ftc.gov/sites/default/files/u52513/fb-socmed-tw-1200x600-pen.png&quot;&gt;&lt;img alt=&quot;Highest Penalties in Privacy Enforcement Actions - $148 million States vs. Uber, $230 million British Authority vs. British Airways (proposed), $275 million CFPB and States vs. Equifax, $5 billion FTC vs. Facebook. Source: Federal Trade Commission. FTC.gov&quot; src=&quot;https://www.ftc.gov/sites/default/files/u52513/fb-socmed-tw-1200x600-pen.png&quot;/&gt;&lt;/a&gt;The $5 billion penalty against Facebook is the largest ever imposed on any company for violating consumers’ privacy and almost 20 times greater than the largest privacy or data security penalty ever imposed worldwide. It is one of the largest penalties ever assessed by the U.S. government for any violation.&lt;/p&gt;
&lt;p&gt;The settlement order announced today also imposes unprecedented new restrictions on Facebook’s business operations and creates multiple channels of compliance. The order requires Facebook to restructure its approach to privacy from the corporate board-level down, and establishes strong new mechanisms to ensure that Facebook executives are accountable for the decisions they make about privacy, and that those decisions are subject to meaningful oversight.&lt;/p&gt;
&lt;p&gt;“Despite repeated promises to its billions of users worldwide that they could control how their personal information is shared, Facebook undermined consumers’ choices,” said FTC Chairman Joe Simons. “The magnitude of the $5 billion penalty and sweeping conduct relief are unprecedented in the history of the FTC. The relief is designed not only to punish future violations but, more importantly, to change Facebook’s entire privacy culture to decrease the likelihood of continued violations. The Commission takes consumer privacy seriously, and will enforce FTC orders to the fullest extent of the law.”&lt;/p&gt;
&lt;p&gt;“The Department of Justice is committed to protecting consumer data privacy and ensuring that social media companies like Facebook do not mislead individuals about the use of their personal information,” said Assistant Attorney General Jody Hunt for the Department of Justice’s Civil Division. “This settlement’s historic penalty and compliance terms will benefit American consumers, and the Department expects Facebook to treat its privacy obligations with the utmost seriousness.”&lt;/p&gt;
&lt;p&gt;More than 185 million people in the United States and Canada use Facebook on a daily basis. Facebook monetizes user information through targeted advertising, which generated most of the company’s $55.8 billion in revenues in 2018. To encourage users to share information on its platform, Facebook promises users they can control the privacy of their information through Facebook’s privacy settings.&lt;/p&gt;
&lt;p&gt;Following a yearlong investigation by the FTC, the Department of Justice will file a &lt;a href=&quot;https://www.ftc.gov/system/files/documents/cases/182_3109_facebook_complaint_filed_7-24-19.pdf&quot;&gt;complaint on behalf of the Commission alleging that Facebook repeatedly used deceptive disclosures and settings&lt;/a&gt; to undermine users’ privacy preferences in violation of its 2012 FTC order. These tactics allowed the company to share users’ personal information with third-party apps that were downloaded by the user’s Facebook “friends.” The FTC alleges that many users were unaware that Facebook was sharing such information, and therefore did not take the steps needed to opt-out of sharing.&lt;/p&gt;
&lt;p&gt;In addition, the FTC alleges that Facebook took inadequate steps to deal with apps that it knew were violating its platform policies.&lt;/p&gt;
&lt;p&gt;In a related, but separate development, the &lt;a href=&quot;https://www.ftc.gov/news-events/press-releases/2019/07/ftc-sues-cambridge-analytica-settles-former-ceo-app-developer&quot;&gt;FTC also announced today separate law enforcement actions against data analytics company Cambridge Analytica&lt;/a&gt;, its former Chief Executive Officer Alexander Nix, and Aleksandr Kogan, an app developer who worked with the company, alleging they used false and deceptive tactics to harvest personal information from millions of Facebook users. Kogan and Nix have agreed to a settlement with the FTC that will restrict how they conduct any business in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Facebook Order Requirements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To prevent Facebook from deceiving its users about privacy in the future, the &lt;a href=&quot;https://www.ftc.gov/system/files/documents/cases/182_3109_facebook_order_filed_7-24-19.pdf&quot;&gt;FTC’s new 20-year settlement order&lt;/a&gt; overhauls the way the company makes privacy decisions by boosting the transparency of decision making and holding Facebook accountable via overlapping channels of compliance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ftc.gov/sites/default/files/u52513/fb-socmed-tw-1200x600-privsys.png&quot;&gt;&lt;img alt=&quot;New Facebook Privacy Compliance System - A multilayered incentive structure of accountability, transparency, and oversight - Source: Federal Trade Commission. FTC.gov&quot; src=&quot;https://www.ftc.gov/sites/default/files/u52513/fb-socmed-tw-1200x600-privsys.png&quot;/&gt;&lt;/a&gt;The order creates greater accountability at the board of directors level. It establishes an independent privacy committee of Facebook’s board of directors, removing unfettered control by Facebook’s CEO Mark Zuckerberg over decisions affecting user privacy. Members of the privacy committee must be independent and will be appointed by an independent nominating committee. Members can only be fired by a supermajority of the Facebook board of directors.&lt;/p&gt;
&lt;p&gt;The order also improves accountability at the individual level. Facebook will be required to designate compliance officers who will be responsible for Facebook’s privacy program. These compliance officers will be subject to the approval of the new board privacy committee and can be removed only by that committee—not by Facebook’s CEO or Facebook employees. Facebook CEO Mark Zuckerberg and designated compliance officers must independently submit to the FTC quarterly certifications that the company is in compliance with the privacy program mandated by the order, as well as an annual certification that the company is in overall compliance with the order. Any false certification will subject them to individual civil and criminal penalties.&lt;/p&gt;
&lt;p&gt;The order also strengthens external oversight of Facebook. The order enhances the independent third-party assessor’s ability to evaluate the effectiveness of Facebook’s privacy program and identify any gaps. The assessor’s biennial assessments of Facebook’s privacy program must be based on the assessor’s independent fact-gathering, sampling, and testing, and must not rely primarily on assertions or attestations by Facebook management. The order prohibits the company from making any misrepresentations to the assessor, who can be approved or removed by the FTC. Importantly, the independent assessor will be required to report directly to the new privacy board committee on a quarterly basis. The order also authorizes the FTC to use the discovery tools provided by the Federal Rules of Civil Procedure to monitor Facebook’s compliance with the order.&lt;/p&gt;
&lt;p&gt;As part of Facebook’s order-mandated privacy program, which covers WhatsApp and Instagram, Facebook must conduct a privacy review of every new or modified product, service, or practice before it is implemented, and document its decisions about user privacy. The designated compliance officers must generate a quarterly privacy review report, which they must share with the CEO and the independent assessor, as well as with the FTC upon request by the agency. The order also requires Facebook to document incidents when data of 500 or more users has been compromised and its efforts to address such an incident, and deliver this documentation to the Commission and the assessor within 30 days of the company’s discovery of the incident.&lt;/p&gt;
&lt;p&gt;Additionally, the order imposes significant new privacy requirements, including the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Facebook must exercise greater oversight over third-party apps, including by terminating app developers that fail to certify that they are in compliance with Facebook’s platform policies or fail to justify their need for specific user data;&lt;/li&gt;
&lt;li&gt;Facebook is prohibited from using telephone numbers obtained to enable a security feature (e.g., two-factor authentication) for advertising;&lt;/li&gt;
&lt;li&gt;Facebook must provide clear and conspicuous notice of its use of facial recognition technology, and obtain affirmative express user consent prior to any use that materially exceeds its prior disclosures to users;&lt;/li&gt;
&lt;li&gt;Facebook must establish, implement, and maintain a comprehensive data security program;&lt;/li&gt;
&lt;li&gt;Facebook must encrypt user passwords and regularly scan to detect whether any passwords are stored in plaintext; and&lt;/li&gt;
&lt;li&gt;Facebook is prohibited from asking for email passwords to other services when consumers sign up for its services.&lt;/li&gt;
&lt;/ul&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.ftc.gov/sites/default/files/u52513/fb-socmed-tw-1200x600-summary.png&quot;&gt;&lt;img alt=&quot;FTC Settlement with Facebook. $5 billion unprecedented penalty. New privacy structure at Facebook. New tools for FTC to monitor Facebook. Source: Federal Trade Commission. FTC.gov&quot; height:200px=&quot;&quot; src=&quot;https://www.ftc.gov/sites/default/files/u52513/fb-socmed-tw-1200x600-summary.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alleged Violations of 2012 Order&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The settlement stems from alleged violations of the FTC’s &lt;a href=&quot;https://www.ftc.gov/news-events/press-releases/2012/08/ftc-approves-final-settlement-facebook&quot;&gt;2012 settlement order with Facebook&lt;/a&gt;. Among other things, the 2012 order prohibited Facebook from making misrepresentations about the privacy or security of consumers’ personal information, and the extent to which it shares personal information, such as names and dates of birth, with third parties. It also required Facebook to maintain a reasonable privacy program that safeguards the privacy and confidentiality of user information.&lt;/p&gt;
&lt;p&gt;The FTC alleges that Facebook violated the 2012 order by deceiving its users when the company shared the data of users’ Facebook friends with third-party app developers, even when those friends had set more restrictive privacy settings.&lt;/p&gt;
&lt;p&gt;In May 2012, Facebook added a disclosure to its central “Privacy Settings” page that information shared with a user’s Facebook friends could also be shared with the apps used by those friends. The FTC alleges that four months after the 2012 order was finalized in August 2012, Facebook removed this disclosure from the central “Privacy Settings” page, even though it was still sharing data from an app user’s Facebook friends with third-party developers.&lt;/p&gt;
&lt;p&gt;Additionally, Facebook launched various services such as “Privacy Shortcuts” in late 2012 and “Privacy Checkup” in 2014 that claimed to help users better manage their privacy settings. These services, however, allegedly failed to disclose that even when users chose the most restrictive sharing settings, Facebook could still share user information with the apps of the user’s Facebook friends—unless they also went to the “Apps Settings Page” and opted out of such sharing. The FTC alleges the company did not disclose anywhere on the Privacy Settings page or the “About” section of the profile page that Facebook could still share information with third-party developers on the Facebook platform about an app users Facebook friends.&lt;/p&gt;
&lt;p&gt;Facebook announced in April 2014 that it would stop allowing third-party developers to collect data about the friends of app users (“affected friend data”). Despite this promise, the company separately told developers that they could collect this data until April 2015 if they already had an existing app on the platform. The FTC alleges that Facebook waited until at least June 2018 to stop sharing user information with third-party apps used by their Facebook friends.&lt;/p&gt;
&lt;p&gt;In addition, the complaint alleges that Facebook improperly policed app developers on its platform. The FTC alleges that, as a general practice, Facebook did not screen the developers or their apps before granting them access to vast amounts of user data. Instead, Facebook allegedly only required developers to agree to Facebook’s policies and terms when they registered their app with the Facebook Platform. The company claimed to rely on administering consequences for policy violations that subsequently came to its attention after developers had already received data about Facebook users. The complaint alleges, however, that Facebook did not enforce such policies consistently and often based enforcement of its policies on whether Facebook benefited financially from its arrangements with the developer, and that this practice violated the 2012 order’s requirement to maintain a reasonable privacy program.&lt;/p&gt;
&lt;p&gt;The FTC also alleges that Facebook misrepresented users’ ability to control the use of facial recognition technology with their accounts. According to the complaint, Facebook’s data policy, updated in April 2018, was deceptive to tens of millions of users who have Facebook’s facial recognition setting called “Tag Suggestions” because that setting was turned on by default, and the updated data policy suggested that users would need to opt-in to having facial recognition enabled for their accounts.&lt;/p&gt;
&lt;p&gt;In addition to these violations of its 2012 order, the FTC alleges that Facebook violated the FTC Act’s prohibition against deceptive practices when it told users it would collect their phone numbers to enable a security feature, but did not disclose that it also used those numbers for advertising purposes.&lt;/p&gt;
&lt;p&gt;The Commission vote to refer the complaint and stipulated final order to the Department of Justice for filing was 3-2. The Department will file the complaint and stipulated final order in the U.S. District Court for the District of Columbia. &lt;a href=&quot;https://www.ftc.gov/public-statements/2019/07/statement-chairman-joe-simons-commissioners-noah-joshua-phillips-christine&quot;&gt;Chairman Simons along with Commissioners Noah Joshua Phillips and Christine S. Wilson issued a statement&lt;/a&gt; on this matter. Commissioners &lt;a href=&quot;https://www.ftc.gov/public-statements/2019/07/dissenting-statement-commissioner-rohit-chopra-regarding-matter-facebook&quot;&gt;Rohit Chopra&lt;/a&gt; and &lt;a href=&quot;https://www.ftc.gov/public-statements/2019/07/dissenting-statement-commissioner-rebecca-kelly-slaughter-regarding-matter&quot;&gt;Rebecca Kelly Slaughter&lt;/a&gt; issued separate statements on this matter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The Commission files a complaint when it has “reason to believe” that the named defendants are violating or are about to violate the law and it appears to the Commission that a proceeding is in the public interest. Stipulated final orders have the force of law when approved and signed by the district court judge.&lt;/p&gt;
&lt;p&gt;The Federal Trade Commission works to promote competition, and &lt;a href=&quot;https://www.ftc.gov/about-ftc/bureaus-offices/bureau-consumer-protection&quot;&gt;protect and educate consumers&lt;/a&gt;. You can &lt;a href=&quot;https://www.consumer.ftc.gov/&quot;&gt;learn more about consumer topics&lt;/a&gt; and file a &lt;a href=&quot;https://www.ftc.gov/complaint&quot;&gt;consumer complaint online&lt;/a&gt; or by calling 1-877-FTC-HELP (382-4357). Like the FTC on &lt;a href=&quot;https://www.facebook.com/federaltradecommission&quot;&gt;Facebook&lt;/a&gt;, follow us on &lt;a href=&quot;https://twitter.com/FTC&quot;&gt;Twitter&lt;/a&gt;, read our &lt;a href=&quot;https://www.ftc.gov/news-events/blogs&quot;&gt;blogs&lt;/a&gt;, and &lt;a href=&quot;https://www.ftc.gov/stay-connected&quot;&gt;subscribe to press releases&lt;/a&gt; for the latest FTC news and resources.&lt;/p&gt;
</description>
<pubDate>Wed, 24 Jul 2019 13:51:22 +0000</pubDate>
<dc:creator>vonmoltke</dc:creator>
<og:type>article</og:type>
<og:url>https://www.ftc.gov/news-events/press-releases/2019/07/ftc-imposes-5-billion-penalty-sweeping-new-privacy-restrictions</og:url>
<og:title>FTC Imposes $5 Billion Penalty and Sweeping New Privacy Restrictions on Facebook</og:title>
<og:description>NOTE: The FTC hosted an IN-PERSON press conference at FTC Headquarters, 600 Pennsylvania Ave, NW, Washington D.</og:description>
<og:image>https://www.ftc.gov/sites/default/files/styles/social_sharing_image/public/images/press-releases/social-share/ftc_social_share_default_en_2.jpg?itok=XrWSIS2-</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.ftc.gov/news-events/press-releases/2019/07/ftc-imposes-5-billion-penalty-sweeping-new-privacy-restrictions</dc:identifier>
</item>
<item>
<title>Don’t Put Your Work Email on Your Personal Phone</title>
<link>https://onezero.medium.com/dont-put-your-work-email-on-your-personal-phone-ef7fef956c2f</link>
<guid isPermaLink="true" >https://onezero.medium.com/dont-put-your-work-email-on-your-personal-phone-ef7fef956c2f</guid>
<description>&lt;p&gt;
&lt;h2 class=&quot;ap cq jg jh au&quot;&gt;Mobile Device Management potentially gives your company the ability to spy on your location, your web browsing, and more&lt;/h2&gt;
&lt;/p&gt;
&lt;div class=&quot;ji&quot;&gt;
&lt;div class=&quot;ah ag&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;ej jj jk&quot;&gt;&lt;img alt=&quot;Owen Williams&quot; src=&quot;https://miro.medium.com/fit/c/96/96/1*a8z_3zhTUDJcWAGQUWGW9Q.jpeg&quot; class=&quot;n fe jk jj&quot; width=&quot;48&quot; height=&quot;48&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

Credit: Klaus Vedfelt/DigitalVision/Getty
&lt;p id=&quot;9b6f&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb lc&quot;&gt;&lt;span class=&quot;n ld lm lg ej ln&quot;&gt;&lt;img alt=&quot;M&quot; src=&quot;https://miro.medium.com/max/158/1*GzPIUbv3332KPJSLQ7GnBA.png&quot; class=&quot;lo lp lq lr ls lt fx p q fw ac&quot; width=&quot;79&quot; height=&quot;79&quot;/&gt;&lt;span class=&quot;n ld le lf lg lh li lj lk ll ej di&quot;&gt;M&lt;/span&gt;&lt;/span&gt;any of us have given up on the idea of carrying around a dedicated work phone. After all, why bother when you can get everything you need on your personal smartphone?&lt;/p&gt;
&lt;p id=&quot;0dbb&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;Here’s one reason: Your work account might be spying on you in the background.&lt;/p&gt;
&lt;p id=&quot;0b0e&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;When you add a work email address to your phone, you’ll likely be asked to install something called a Mobile Device Management (MDM) profile. Chances are, you’ll blindly accept it. (What other choice do you have?) MDM is set up by your company’s IT department to reach inside your phone in the background, allowing them to ensure your device is secure, know where it is, and remotely erase your data if the phone is stolen.&lt;/p&gt;
&lt;p id=&quot;ec88&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;From your company’s perspective, there are obvious security reasons for installing an MDM on an employee’s phone. But for employees, it’s difficult to tell what these invisible profiles are collecting behind the scenes, as they provide people at your company with invisible control over your device. That’s why when it comes to your phone, no matter how much you trust your IT department, it’s a good idea to keep work and pleasure separate.&lt;/p&gt;

&lt;p id=&quot;841f&quot; class=&quot;ko kp dv aq kq b kr mg kt mh kv mi kx mj kz mk lb&quot;&gt;MDM profiles, paired with device management tools, allow companies to track employee phones in a single dashboard. They can mitigate security breaches or potential harm from a rogue employee; if you work for a law firm, say, and your boss worries you’re leaking sensitive emails from your smartphone, they could remotely wipe your data. MDM profiles can also force you to use a long password on your device, rather than a simple PIN, among other policies.&lt;/p&gt;
&lt;p id=&quot;2478&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;Until the iPhone debuted over a decade ago and brought smartphones to the masses, it was common practice for companies to issue a corporate BlackBerry or Palm Pilot, allowing their employees to check email on the go, and do more work.&lt;/p&gt;
&lt;p id=&quot;eca4&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;When the iPhone arrived, employees suddenly wanted to use their slick, new phones at the office, not the chunky, work-provided one with the physical keyboard. They added their work emails to their smartphone if they could, or devised sneaky workarounds to gain access to it.&lt;/p&gt;
&lt;p id=&quot;c309&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;MDM functionality was around before this shift, but with the smartphone boom, it became a core part of IT policy. Companies were happy to let employees access their email on their own devices, which saved the cost of buying separate work phones and data plans, but it also meant that individuals who accepted the arrangement lost control over their sensitive data.&lt;/p&gt;
&lt;blockquote class=&quot;ml&quot; readability=&quot;5&quot;&gt;
&lt;div id=&quot;f936&quot; class=&quot;mm mn mo aq ip b jg mp mq mr ms mt lb&quot; readability=&quot;9&quot;&gt;
&lt;p class=&quot;ip b mu cf au&quot;&gt;These tools blindly assume that the IT department and management are trustworthy and infallible, and they seem not to consider whether an abuser might have direct access to them.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;4662&quot; class=&quot;ko kp dv aq kq b kr mv kt mw kv mx kx my kz mz lb&quot;&gt;In many cases, MDM gives companies the ability to track your location and install a corporate VPN. This means they can route your traffic through a network the company owns — and if they own that network, the company can monitor traffic on it, providing a one-way mirror into your life, with no way to peer back.&lt;/p&gt;
&lt;p id=&quot;69a4&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;Some third-party MDM tools relate all of this to worker productivity. &lt;a href=&quot;https://www.hexnode.com/mobile-device-management/mdm-location-tracking/?source=post_page---------------------------&quot; class=&quot;cv bu ij ik il im&quot;&gt;Hexnode&lt;/a&gt;, for example, markets its tool by saying that “employee performance can be evaluated by monitoring the location report of these devices” and that “the duration of time spent on a particular location gives an overall idea about their performance.” &lt;a class=&quot;cv bu ij ik il im&quot; href=&quot;https://onezero.medium.com/a-new-study-suggests-employers-track-your-every-move-to-improve-productivity-1b2e5baf6ea7?source=post_page---------------------------&quot;&gt;Sound familiar?&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;94a6&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;Technically, iOS and Android don’t allow tracking location data without a user’s consent. But third-party solutions can circumvent this by forcing you to install an app that performs the tracking itself when you add a corporate email address to your device.&lt;/p&gt;
&lt;p id=&quot;d55a&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;These tools often allow administrators to pry into how the phone is used as well, retrieving call logs, SMS history, and in the most extreme cases, full logs of web browsing. You might reasonably expect this kind of monitoring on a dedicated work device, but perhaps not on your personal phone. Once your work email and MDM is installed, however, the two are essentially the same thing.&lt;/p&gt;

&lt;p id=&quot;c14b&quot; class=&quot;ko kp dv aq kq b kr mg kt mh kv mi kx mj kz mk lb&quot;&gt;A bad actor in the IT department could abuse their access to track employee location, or peer into the private lives of people without them ever knowing it is happening. There’s essentially no way for you to see who has access to your data, or whether or not it’s been viewed. Only the administrator has access to the logs that would show this, despite it being information about a device that you own.&lt;/p&gt;
&lt;p id=&quot;b93a&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;Last year, the &lt;em class=&quot;na&quot;&gt;New York Times&lt;/em&gt; wrote about &lt;a href=&quot;https://www.nytimes.com/2018/06/23/technology/smart-home-devices-domestic-abuse.html?source=post_page---------------------------&quot; class=&quot;cv bu ij ik il im&quot;&gt;how the internet of things&lt;/a&gt; has enabled domestic abuse, and there are many parallels in how little consideration corporate IT tools give to the safety of users being subjected to their surveillance. You probably sort of understand that your boss can access your email — albeit only with genuine cause — but how about tracking your every move, on demand?&lt;/p&gt;
&lt;p id=&quot;0440&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;These tools blindly assume that the IT department and management are trustworthy and infallible, and they seem not to consider whether an abuser might have direct access to them, or how these tools may be used to harass someone within the company.&lt;/p&gt;
&lt;p id=&quot;161e&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;So, it’s a good idea to pause as you’re adding a work email to your device, and it prompts you for the installation of an MDM profile. How can you be sure there are proper controls in place to stop someone from exploiting access to your device?&lt;/p&gt;
&lt;p id=&quot;f7c5&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;On Android, there are tools that help prevent IT from reaching into your phone. If it’s allowed by your admin, you can create a separate “work” profile that contains sandboxed versions of your apps to avoid blurring the line between personal and work. The work profile can then be disabled on demand and flipped back on only when you need it, providing a level of control that iOS doesn’t yet allow.&lt;/p&gt;
&lt;p id=&quot;0064&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;For iOS users, if an app is required to be installed with your work email, flip off location access in the settings to cut it off from GPS, or consider adding a “restriction” via parental controls that doesn’t allow it to start in the first place.&lt;/p&gt;
&lt;p id=&quot;9c7c&quot; class=&quot;ko kp dv aq kq b kr ks kt ku kv kw kx ky kz la lb&quot;&gt;Personally, I would prefer to keep work off of my personal phone altogether. The most powerful thing you can do to protect yourself in the first place might mean keeping your work email off your own phone and demanding a work-provided one. At least nowadays it won’t be a Palm Pilot.&lt;/p&gt;
</description>
<pubDate>Wed, 24 Jul 2019 13:07:40 +0000</pubDate>
<dc:creator>3x3matrix</dc:creator>
<og:type>article</og:type>
<og:title>Don’t Put Your Work Email on Your Personal Phone</og:title>
<og:description>Mobile Device Management potentially gives your company the ability to spy on your location, your web browsing, and more</og:description>
<og:url>https://onezero.medium.com/dont-put-your-work-email-on-your-personal-phone-ef7fef956c2f</og:url>
<og:image>https://miro.medium.com/focal/1200/632/57/31/1*C5Mhw6HPOilLU0kgYZ8OlA.jpeg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://onezero.medium.com/dont-put-your-work-email-on-your-personal-phone-ef7fef956c2f?gi=4aa921ea7921</dc:identifier>
</item>
<item>
<title>Visual Information Theory (2015)</title>
<link>https://colah.github.io/posts/2015-09-Visual-Information/</link>
<guid isPermaLink="true" >https://colah.github.io/posts/2015-09-Visual-Information/</guid>
<description>&lt;div class=&quot;info&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Posted on October 14, 2015&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I love the feeling of having a new way to think about the world. I especially love when there’s some vague idea that gets formalized into a concrete concept. Information theory is a prime example of this.&lt;/p&gt;
&lt;p&gt;Information theory gives us precise language for describing a lot of things. How uncertain am I? How much does knowing the answer to question A tell me about the answer to question B? How similar is one set of beliefs to another? I’ve had informal versions of these ideas since I was a young child, but information theory crystallizes them into precise, powerful ideas. These ideas have an enormous variety of applications, from the compression of data, to quantum physics, to machine learning, and vast fields in between.&lt;/p&gt;
&lt;p&gt;Unfortunately, information theory can seem kind of intimidating. I don’t think there’s any reason it should be. In fact, many core ideas can be explained completely visually!&lt;/p&gt;
&lt;h2 id=&quot;visualizing-probability-distributions&quot;&gt;Visualizing Probability Distributions&lt;/h2&gt;
&lt;p&gt;Before we dive into information theory, let’s think about how we can visualize simple probability distributions. We’ll need this later on, and it’s convenient to address now. As a bonus, these tricks for visualizing probability are pretty useful in and of themselves!&lt;/p&gt;
&lt;p&gt;I’m in California. Sometimes it rains, but mostly there’s sun! Let’s say it’s sunny 75% of the time. It’s easy to make a picture of that:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-1D-rain.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Most days, I wear a t-shirt, but some days I wear a coat. Let’s say I wear a coat 38% of the time. It’s also easy to make a picture for that!&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-1D-coat.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;What if I want to visualize both at the same time? We’ll, it’s easy if they don’t interact – if they’re what we call independent. For example, whether I wear a t-shirt or a raincoat today doesn’t really interact with what the weather is next week. We can draw this by using one axis for one variable and one for the other:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-2D-independent-rain.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Notice the straight vertical and horizontal lines going all the way through. &lt;em&gt;That’s what independence looks like!&lt;/em&gt;  The probability I’m wearing a coat doesn’t change in response to the fact that it will be raining in a week. In other words, the probability that I’m wearing a coat and that it will rain next week is just the probability that I’m wearing a coat, times the probability that it will rain. They don’t interact.&lt;/p&gt;
&lt;p&gt;When variables interact, there’s extra probability for particular pairs of variables and missing probability for others. There’s extra probability that I’m wearing a coat and it’s raining because the variables are correlated, they make each other more likely. It’s more likely that I’m wearing a coat on a day that it rains than the probability I wear a coat on one day and it rains on some other random day.&lt;/p&gt;
&lt;p&gt;Visually, this looks like some of the squares swelling with extra probability, and other squares shrinking because the pair of events is unlikely together:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-2D-dependant-rain-squish.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;But while that might look kind of cool, it’s isn’t very useful for understanding what’s going on.&lt;/p&gt;
&lt;p&gt;Instead, let’s focus on one variable like the weather. We know how probable it is that it’s sunny or raining. For both cases, we can look at the &lt;em&gt;conditional probabilities&lt;/em&gt;. How likely am I to wear a t-shirt if it’s sunny? How likely am I to wear a coat if it’s raining?&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-2D-factored-rain-arrow.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;There’s a 25% chance that it’s raining. If it is raining, there’s a 75% chance that I’d wear a coat. So, the probability that it is raining and I’m wearing a coat is 25% times 75% which is approximately 19%. The probability that it’s raining and I’m wearing a coat is the probability that it is raining, times the probability that I’d wear a coat if it is raining. We write this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[p(\text{rain}, \text{coat}) = p(\text{rain}) \cdot p(\text{coat} ~|~ \text{rain})\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is a single case of one of the most fundamental identities of probability theory:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[p(x,y) = p(x)\cdot p(y|x)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We’re &lt;em&gt;factoring&lt;/em&gt; the distribution, breaking it down into the product of two pieces. First we look at the probability that one variable, like the weather, will take on a certain value. Then we look at the probability that another variable, like my clothing, will take on a certain value conditioned on the first variable.&lt;/p&gt;
&lt;p&gt;The choice of which variable to start with is arbitrary. We could just as easily start by focusing on my clothing and then look at the weather conditioned on it. This might feel a bit less intuitive, because we understand that there’s a causal relationship of the weather influencing what I wear and not the other way around… but it still works!&lt;/p&gt;
&lt;p&gt;Let’s go through an example. If we pick a random day, there’s a 38% chance that I’d be wearing a coat. If we know that I’m wearing a coat, how likely is it that it’s raining? Well, I’m more likely to wear a coat in the rain than in the sun, but rain is kind of rare in California, and so it works out that there’s a 50% chance that it’s raining. And so, the probability that it’s raining and I’m wearing a coat is the probability that I’m wearing a coat (38%), times the probability that it would be raining if I was wearing a coat (50%) which is approximately 19%.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[p(\text{rain}, \text{coat}) = p(\text{coat}) \cdot p(\text{rain} ~|~ \text{coat})\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This gives us a second way to visualize the exact same probability distribution.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-2D-factored1-clothing-B.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Note that the labels have slightly different meanings than in the previous diagram: t-shirt and coat are now &lt;em&gt;marginal probabilities&lt;/em&gt;, the probability of me wearing that clothing without consideration of the weather. On the other hand, there are now two rain and sunny labels, for the probabilities of them conditional on me wearing a t-shirt and me wearing a coat respectively.&lt;/p&gt;
&lt;p&gt;(You may have heard of Bayes’ Theorem. If you want, you can think of it as the way to translate between these two different ways of displaying the probability distribution!)&lt;/p&gt;
&lt;h2 id=&quot;aside-simpsons-paradox&quot;&gt;Aside: Simpson’s Paradox&lt;/h2&gt;
&lt;p&gt;Are these tricks for visualizing probability distributions actually helpful? I think they are! It will be a little while before we use them for visualizing information theory, so I’d like to go on a little tangent and use them to explore Simpson’s paradox. Simpson’s paradox is an extremely unintuitive statistical situation. It’s just really hard to understand at an intuitive level. Michael Nielsen wrote a lovely essay, &lt;a href=&quot;http://michaelnielsen.org/reinventing_explanation/&quot;&gt;Reinventing Explanation&lt;/a&gt;, which explored different ways to explain it. I’d like to try and take my own shot at it, using the tricks we developed in the previous section.&lt;/p&gt;
&lt;p&gt;Two treatments for kidney stones are tested. Half the patients are given treatment A while the other half are given treatment B. The patients who received treatment B were more likely to survive than those who received treatment A.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/simpson-margin.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;However, patients with small kidney stones were more likely to survive if they took treatment A. Patients with large kidney stones were also more likely to survive if they took treatment A! how can this be?&lt;/p&gt;
&lt;p&gt;The core of the issue is that the study wasn’t properly randomized. The patients who received treatment A were likely to have large kidney stones, while the patients who received treatment B were more likely to have small kidney stones.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/simpson-participants.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;As it turns out, patients with small kidney stones are much more likely to survive in general.&lt;/p&gt;
&lt;p&gt;To understand this better, we can combine the two previous diagrams. The result is a 3-dimensional diagram with the survival rate split apart for small and large kidney stones.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/simpson-separated-note.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;We can now &lt;em&gt;see&lt;/em&gt; that in both the small case and the large case, Treatment A beats Treatment B. Treatment B only seemed better because the patients it was applied to were more likely to survive in the first place!&lt;/p&gt;
&lt;h2 id=&quot;codes&quot;&gt;Codes&lt;/h2&gt;
&lt;p&gt;Now that we have ways of visualizing probability, we can dive into information theory.&lt;/p&gt;
&lt;p&gt;Let me tell you about my imaginary friend, Bob. Bob really likes animals. He constantly talks about animals. In fact, he only ever says four words: “dog”, “cat”, “fish” and “bird”.&lt;/p&gt;
&lt;p&gt;A couple weeks ago, despite being a figment of my imagination, Bob moved to Australia. Further, he decided he only wanted to communicate in binary. All my (imaginary) messages from Bob look like this:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/message.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;To communicate, Bob and I have to establish a code, a way of mapping words into sequences of bits.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-2bit.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;To send a message, Bob replaces each symbol (word) with the corresponding codeword, and then concatenates them together to form the encoded string.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/encode-2bit.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2 id=&quot;variable-length-codes&quot;&gt;Variable-Length Codes&lt;/h2&gt;
&lt;p&gt;Unfortunately, communication services in imaginary-Australia are expensive. I have to pay $5 per bit of every message I receive from Bob. Have I mentioned that Bob likes to talk a lot? To prevent me from going bankrupt, Bob and I decided we should investigate whether there was some way we could make our average message length shorter.&lt;/p&gt;
&lt;p&gt;As it turns out Bob doesn’t say all words equally often. Bob really likes dogs. He talks about dogs all the time. On occasion, he’ll talk about other animals – especially the cat his dog likes to chase – but mostly he talks about dogs. Here’s a graph of his word frequency:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/DogWordFreq.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;That seems promising. Our old code uses codewords that are 2 bits long, regardless of how common they are.&lt;/p&gt;
&lt;p&gt;There’s a nice way to visualize this. In the following diagram, we use the vertical axis to visualize the probability of each word, &lt;span class=&quot;math&quot;&gt;\(p(x)\)&lt;/span&gt;, and the horizontal axis to visualize the length of the corresponding codeword, &lt;span class=&quot;math&quot;&gt;\(L(x)\)&lt;/span&gt;. Notice that the area is the average length of a codeword we send – in this case 2 bits.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/OldCode.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Perhaps we could be very clever and make a variable-length code where codewords for common words are made especially short. The challenge is that there’s competition between codewords – making some shorter forces us to make others longer. To minimize the message length, we’d ideally like all codewords to be short, but we especially want the commonly used ones to be. So the resulting code has shorter codewords for common words (like “dog”) and longer codewords for less common words (like “bird”).&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Let’s visualize this again. Notice that the most common codeword became shorter, even as the uncommon ones became longer. The result was, on net, a smaller amount of area. This corresponds to a smaller expected codeword length. On average, the length of a codeword is now 1.75 bits!&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/NewCode.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;(You may wonder: why not use 1 by itself as a codeword? Sadly, this would cause ambiguity when we decode encoded strings. We’ll talk about this more shortly.)&lt;/p&gt;
&lt;p&gt;It turns out that this code is the best possible code. There is no code which, for this distribution, will give us an average codeword length of less than 1.75 bits.&lt;/p&gt;
&lt;p&gt;There is simply a fundamental limit. Communicating what word was said, what event from this distribution occurred, requires us to communicate at least 1.75 bits on average. No matter how clever our code, it’s impossible to get the average message length to be less. We call this fundamental limit the entropy of the distribution – we’ll discuss it in much more detail shortly.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/EntropOptimalLengthExample.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;If we want to understand this limit, the crux of the matter is understanding the trade off between making some codewords short and others long. Once we understand that, we’ll be able to understand what the best possible codes are like.&lt;/p&gt;
&lt;h2 id=&quot;the-space-of-codewords&quot;&gt;The Space of Codewords&lt;/h2&gt;
&lt;p&gt;There are two codes with a length of 1 bit: 0 and 1. There are four codes with a length of 2 bits: 00, 01, 10, and 11. Every bit you add on doubles the number of possible codes.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/CodeSpace.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;We’re interested in variable-length codes, where some codewords are longer than others. We might have simple situations where we have eight codewords that are 3 bits long. We might also have more complicated mixtures, like two codewords of length 2, and four codewords of length 3. What decides how many codewords we can have of different lengths?&lt;/p&gt;
&lt;p&gt;Recall that Bob turns his messages into encoded strings by replacing each word with its codeword and concatenating them.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/encode.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;There’s a slightly subtle issue one needs to be careful of, when crafting a variable length code. How do we split the encoded string back into the codewords? When all the codewords are the same length, it’s easy – just split the string every couple of steps. But since there are codewords of different lengths, we need to actually pay attention to the content.&lt;/p&gt;
&lt;p&gt;We really want our code to be uniquely decodable, with only one way to decode an encoded string. We never want it to be ambiguous which codewords make up the encoded string. If we had some special “end of codeword” symbol, this would be easy. But we don’t – we’re only sending 0s and 1s. We need to be able to look at a sequence of concatenated codewords and tell where each one stops.&lt;/p&gt;
&lt;p&gt;It’s very possible to make codes that aren’t uniquely decodable. For example, imagine that 0 and 01 were both codewords. Then it would be unclear what the first codeword of the encoded string 0100111 is – it could be either! The property we want is that if we see a particular codeword, there shouldn’t be some longer version that is also a codeword. Another way of putting this is that no codeword should be the prefix of another codeword. This is called the prefix property, and codes that obey it are called prefix codes.&lt;/p&gt;
&lt;p&gt;One useful way to think about this is that every codeword requires a sacrifice from the space of possible codewords. If we take the codeword 01, we lose the ability to use any codewords it’s a prefix of. We can’t use 010 or 011010110 anymore because of ambiguity – they’re lost to us.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/CodeSpaceUsed.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Since a quarter of all codewords start with 01, we’ve sacrificed a quarter of all possible codewords. That’s the price we pay in exchange for having one codeword that’s only 2 bits long! In turn this sacrifice means that all the other codewords need to be a bit longer. There’s always this sort of trade off between the lengths of the different codewords. A short codeword requires you to sacrifice more of the space of possible codewords, preventing other codewords from being short. What we need to figure out is what the right trade off to make is!&lt;/p&gt;
&lt;h2 id=&quot;optimal-encodings&quot;&gt;Optimal Encodings&lt;/h2&gt;
&lt;p&gt;You can think of this like having a limited budget to spend on getting short codewords. We pay for one codeword by sacrificing a fraction of possible codewords.&lt;/p&gt;
&lt;p&gt;The cost of buying a codeword of length 0 is 1, all possible codewords – if you want to have a codeword of length 0, you can’t have any other codeword. The cost of a codeword of length 1, like “0”, is 1/2 because half of possible codewords start with “0”. The cost of a codeword of length 2, like “01”, is 1/4 because a quarter of all possible codewords start with “01”. In general, the cost of codewords decreases &lt;em&gt;exponentially&lt;/em&gt; with the length of the codeword.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-costonly.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Note that if the cost decays as a (natural) exponential, it is both the height and the area!&lt;/p&gt;
&lt;p&gt;We want short codewords because we want short average message lengths. Each codeword makes the average message length longer by its probability times the length of the codeword. For example, if we need to send a codeword that is 4 bits long 50% of the time, our average message length is 2 bits longer than it would be if we weren’t sending that codeword. We can picture this as a rectangle.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-lengthcontrib.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;These two values are related by the length of the codeword. The amount we pay decides the length of the codeword. The length of the codeword controls how much it adds to the average message length. We can picture the two of these together, like so.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-cost.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Short codewords reduce the average message length but are expensive, while long codewords increase the average message length but are cheap.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-cost-longshort.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;What’s the best way to use our limited budget? How much should we spend on the codeword for each event?&lt;/p&gt;
&lt;p&gt;Just like one wants to invest more in tools that one uses regularly, we want to spend more on frequently used codewords. There’s one particularly natural way to do this: distribute our budget in proportion to how common an event is. So, if one event happens 50% of the time, we spend 50% of our budget buying a short codeword for it. But if an event only happens 1% of the time, we only spend 1% of our budget, because we don’t care very much if the codeword is long.&lt;/p&gt;
&lt;p&gt;That’s a pretty natural thing to do, but is it the optimal thing to do? It is, and I’ll prove it!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The following proof is visual and should be accessible, but will take work to get through and is definitely the hardest part of this essay. Readers should feel free to skip to accept this as a given and jump to the next section.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s picture a concrete example where we need to communicate which of two possible events happened. Event &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; happens &lt;span class=&quot;math&quot;&gt;\(p(a)\)&lt;/span&gt; of the time and event &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt; happens &lt;span class=&quot;math&quot;&gt;\(p(b)\)&lt;/span&gt; of the time. We distribute our budget in the natural way described above, spending &lt;span class=&quot;math&quot;&gt;\(p(a)\)&lt;/span&gt; of our budget on getting &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; a short codeword, and &lt;span class=&quot;math&quot;&gt;\(p(b)\)&lt;/span&gt; on getting &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt; a short codeword.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-auction-balanced-noderivs.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The cost and length contribution boundaries nicely line up. Does that mean anything?&lt;/p&gt;
&lt;p&gt;Well, consider what happens to the cost and the length contribution if we slightly change the length of the codeword. If we slightly increase the length of the codeword, the message length contribution will increase in proportion to its height at the boundary, while the cost will decrease in proportion to its height at the boundary.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-derivs.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;So, the cost to make the codeword for &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; shorter is &lt;span class=&quot;math&quot;&gt;\(p(a)\)&lt;/span&gt;. At the same time, we don’t care about the length of each codeword equally, we care about them in proportion to how much we have to use them. In the case of &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt;, that is &lt;span class=&quot;math&quot;&gt;\(p(a)\)&lt;/span&gt;. The benefit to us of making the codeword for &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; a bit shorter is &lt;span class=&quot;math&quot;&gt;\(p(a)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;It’s interesting that both derivatives are the same. It means that our initial budget has the interesting property that, if you had a bit more to spend, it would be equally good to invest in making any codeword shorter. What we really care about, in the end, is the benefit/cost ratio – that’s what decides what we should invest more in. In this case, the ratio is &lt;span class=&quot;math&quot;&gt;\(\frac{p(a)}{p(a)}\)&lt;/span&gt;, which is equal to one. This is independent of the value of &lt;span class=&quot;math&quot;&gt;\(p(a)\)&lt;/span&gt; – it’s always one. And we can apply the same argument to other events. The benefit/cost is always one, so it makes equal sense to invest a bit more in any of them.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-auction-balanced.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Infinitesimally, it doesn’t make sense to change the budget. But that isn’t a proof that it’s the best budget. To prove that, we’ll consider a different budget, where we spend a bit extra on one codeword at the expense of another. We’ll invest &lt;span class=&quot;math&quot;&gt;\(\epsilon\)&lt;/span&gt; less in &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt;, and invest it in &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; instead. This makes the codeword for &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; a bit shorter, and the codeword for &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt; a bit longer.&lt;/p&gt;
&lt;p&gt;Now the cost of buying a shorter codeword for &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; is &lt;span class=&quot;math&quot;&gt;\(p(a) + \epsilon\)&lt;/span&gt;, and the cost of buying a shorter codeword for &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt; is &lt;span class=&quot;math&quot;&gt;\(p(b) - \epsilon\)&lt;/span&gt;. But the benefits are still the same. This leads the benefit cost ratio for buying &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; to be &lt;span class=&quot;math&quot;&gt;\(\frac{p(a)}{p(a) + \epsilon}\)&lt;/span&gt; which is less than one. On the other hand, the benefit cost ratio of buying &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt; is &lt;span class=&quot;math&quot;&gt;\(\frac{p(b)}{p(b) - \epsilon}\)&lt;/span&gt; which is greater than one.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/code-auction-eps.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The prices are no longer balanced. &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt; is a better deal than &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt;. The investors scream: “Buy &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt;! Sell &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt;!” We do this, and end back at our original budget plan. All budgets can be improved by shifting towards our original plan.&lt;/p&gt;
&lt;p&gt;The original budget – investing in each codeword in proportion to how often we use it – wasn’t just the natural thing to do, it was the optimal thing to do. (While this proof only works for two codewords, it easily generalizes to more.)&lt;/p&gt;
&lt;p&gt;(A careful reader may have noticed that it is possible for our optimal budget to suggest codes where codewords have fractional lengths. That seems pretty concerning! What does it mean? Well, of course, in practice, if you want to communicate by sending a single codeword, you have to round. But as we’ll see later, there’s a very real sense in which it is possible to send fractional codewords when we send many at a time! I’ll ask you be patient with me on this for now!)&lt;/p&gt;
&lt;h2 id=&quot;calculating-entropy&quot;&gt;Calculating Entropy&lt;/h2&gt;
&lt;p&gt;Recall that the cost of a message of length &lt;span class=&quot;math&quot;&gt;\(L\)&lt;/span&gt; is &lt;span class=&quot;math&quot;&gt;\(\frac{1}{2^L}\)&lt;/span&gt;. We can invert this to get the length of a message that costs a given amount: &lt;span class=&quot;math&quot;&gt;\(\log_2\left(\frac{1}{\text{cost}}\right)\)&lt;/span&gt;. Since we spend &lt;span class=&quot;math&quot;&gt;\(p(x)\)&lt;/span&gt; on a codeword for &lt;span class=&quot;math&quot;&gt;\(x\)&lt;/span&gt;, the length is &lt;span class=&quot;math&quot;&gt;\(\log_2\left(\frac{1}{p(x)}\right)\)&lt;/span&gt;. Those are the best choices of lengths.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/entropy-def-notitle.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Earlier, we discussed how there is a fundamental limit to how short one can get the average message to communicate events from a particular probability distribution, &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt;. This limit, the average message length using the best possible code, is called the entropy of &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(H(p)\)&lt;/span&gt;. Now that we know the optimal lengths of the codewords, we can actually calculate it!&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[H(p) = \sum_x p(x)\log_2\left(\frac{1}{p(x)}\right)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(People often write entropy as &lt;span class=&quot;math&quot;&gt;\(H(p) = - \sum p(x)\log_2(p(x))\)&lt;/span&gt; using the identity &lt;span class=&quot;math&quot;&gt;\(\log(1/a) = -\log(a)\)&lt;/span&gt;. I think the first version is more intuitive, and will continue to use it in this essay.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;No matter what I do, on average I need to send at least that number of bits if I want to communicate which event occurred.&lt;/p&gt;
&lt;p&gt;The average amount of information needed to communicate something has clear implications for compression. But are there other reasons we should care about it? Yes! It describes how uncertain I am and gives a way to quantify information.&lt;/p&gt;
&lt;p&gt;If I knew for sure what was going to happen, I wouldn’t have to send a message at all! If there’s two things that could happen with 50% probability, I only need to send 1 bit. But if there’s 64 different things that could happen with equal probability, I’d have to send 6 bits. The more concentrated the probability, the more I can craft a clever code with short average messages. The more diffuse the probability, the longer my messages have to be.&lt;/p&gt;
&lt;p&gt;The more uncertain the outcome, the more I learn, on average, when I find out what happened.&lt;/p&gt;
&lt;h2 id=&quot;cross-entropy&quot;&gt;Cross-Entropy&lt;/h2&gt;
&lt;p&gt;Shortly before his move to Australia, Bob married Alice, another figment of my imagination. To the surprise of myself, and also the other characters in my head, Alice was not a dog lover. She was a cat lover. Despite this, the two of them were able to find common ground in their shared obsession with animals and very limited vocabulary size.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/DogCatWordFreq.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The two of them say the same words, just at different frequencies. Bob talks about dogs all the time, Alice talks about cats all the time.&lt;/p&gt;
&lt;p&gt;Initially, Alice sent me messages using Bob’s code. Unfortunately, her messages were longer than they needed to be. Bob’s code was optimized to his probability distribution. Alice has a different probability distribution, and the code is suboptimal for it. While the average length of a codeword when Bob uses his own code is 1.75 bits, when Alice uses his code it's 2.25. It would be worse if the two weren’t so similar!&lt;/p&gt;
&lt;p&gt;This length – the average length of communicating an event from one distribution with the optimal code for another distribution – is called the cross-entropy. Formally, we can define cross-entropy as: &lt;span class=&quot;math&quot;&gt;\[H_p(q) = \sum_x q(x)\log_2\left(\frac{1}{p(x)}\right)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this case, it’s the cross-entropy of Alice the cat-lovers word frequency with respect to the Bob the dog-lovers word frequency.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/CrossEntropyDef.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;To keep the cost of our communications down, I asked Alice to use her own code. To my relief, this pushed down her average message length. But it introduced a new problem: sometimes Bob would accidentally use Alice’s code. Surprisingly, it’s worse for Bob to accidentally use Alice's code than for Alice to use his!&lt;/p&gt;
&lt;p&gt;So, now we have four possibilities:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Bob using his own code &lt;span class=&quot;math&quot;&gt;\((H(p) = 1.75 ~\text{bits})\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Alice using Bob’s code &lt;span class=&quot;math&quot;&gt;\((H_p(q) = 2.25 ~\text{bits})\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Alice using her own code &lt;span class=&quot;math&quot;&gt;\((H(q) = 1.75 ~\text{bits})\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Bob using Alice’s code &lt;span class=&quot;math&quot;&gt;\((H_q(p) = 2.375 ~\text{bits})\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This isn’t necessarily as intuitive as one might think. For example, we can see that &lt;span class=&quot;math&quot;&gt;\(H_p(q) \neq H_q(p)\)&lt;/span&gt;. Is there some way we can see how these four values relate to each other?&lt;/p&gt;
&lt;p&gt;In the following diagram, each subplot represents one of these 4 possibilities. Each subplot visualizes average message length the same way our previous diagrams did. They are organized in a square, so that if the messages are coming from the same distribution the plots are beside each other, and if they use the same codes they are on top of each other. This allows you to kind of visually slide the distributions and codes together.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/CrossEntropyCompare.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Can you see why &lt;span class=&quot;math&quot;&gt;\(H_p(q) \neq H_q(p)\)&lt;/span&gt;? &lt;span class=&quot;math&quot;&gt;\(H_q(p)\)&lt;/span&gt; is large because there is an event (blue) which is very common under &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; but gets a long code because it is very uncommon under &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt;. On the other hand, common events under &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt; are less common under &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt;, but the difference is less drastic, so &lt;span class=&quot;math&quot;&gt;\(H_p(q)\)&lt;/span&gt; isn’t as high.&lt;/p&gt;
&lt;p&gt;Cross-entropy isn’t symmetric.&lt;/p&gt;
&lt;p&gt;So, why should you care about cross-entropy? Well, cross-entropy gives us a way to express how different two probability distributions are. The more different the distributions &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt; are, the more the cross-entropy of &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; with respect to &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt; will be bigger than the entropy of &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt;.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/CrossEntropyQP.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Similarly, the more different &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; is from &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt;, the more the cross-entropy of &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt; with respect to &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; will be bigger than the entropy of &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt;.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/CrossEntropyPQ.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The really interesting thing is the difference between the entropy and the cross-entropy. That difference is how much longer our messages are because we used a code optimized for a different distribution. If the distributions are the same, this difference will be zero. As the difference grows, it will get bigger.&lt;/p&gt;
&lt;p&gt;We call this difference the Kullback–Leibler divergence, or just the KL divergence. The KL divergence of &lt;span class=&quot;math&quot;&gt;\(p\)&lt;/span&gt; with respect to &lt;span class=&quot;math&quot;&gt;\(q\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(D_q(p)\)&lt;/span&gt;, is defined:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[D_q(p) = H_q(p) - H(p)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The really neat thing about KL divergence is that it’s like a distance between two distributions. It measures how different they are! (If you take that idea seriously, you end up with information geometry.)&lt;/p&gt;
&lt;p&gt;Cross-Entropy and KL divergence are incredibly useful in machine learning. Often, we want one distribution to be close to another. For example, we might want a predicted distribution to be close to the ground truth. KL divergence gives us a natural way to do this, and so it shows up everywhere.&lt;/p&gt;
&lt;h2 id=&quot;entropy-and-multiple-variables&quot;&gt;Entropy and Multiple Variables&lt;/h2&gt;
&lt;p&gt;Let’s return to our weather and clothing example from earlier:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-2D-factored1-detail.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;My mother, like many parents, sometimes worries that I don’t dress appropriately for the weather. (She has reasonable cause for suspicion – I have often failed to wear coats in winter.) So, she often wants to know both the weather and what clothing I’m wearing. How many bits do I have to send her to communicate this?&lt;/p&gt;
&lt;p&gt;Well, the easy way to think about this is to flatten the probability distribution:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/prob-2D-factored1-flat.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Now we can figure out the optimal codewords for events of these probabilities and compute the average message length:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-flat.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;We call this the joint entropy of &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt;, defined&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[H(X,Y) = \sum_{x,y} p(x,y) \log_2\left(\frac{1}{p(x,y)}\right)\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is the exact same as our normal definition, except with two variables instead of one.&lt;/p&gt;
&lt;p&gt;A slightly nicer way to think about this is to avoid flattening the distribution, and just think of the code lengths as a third dimension. Now the entropy is the volume!&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-3D.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;But suppose my mom already knows the weather. She can check it on the news. Now how much information do I need to provide?&lt;/p&gt;
&lt;p&gt;It seems like I need to send however much information I need to communicate the clothes I’m wearing. But I actually need to send less, because the weather strongly implies what clothing I’ll wear! Let’s consider the case where it’s raining and where it’s sunny separately.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/HxCy-sep.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;In both cases, I don’t need to send very much information on average, because the weather gives me a good guess at what the right answer will be. When it’s sunny, I can use a special sunny-optimized code, and when it’s raining I can use a raining optimized code. In both cases, I send less information than if I used a generic code for both. To get the average amount of information I need to send my mother, I just put these two cases together…&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/HxCy.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;We call this the conditional entropy. If you formalize it into an equation, you get:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;math&quot;&gt;\[H(X|Y) = \sum_y p(y) \sum_x p(x|y) \log_2\left(\frac{1}{p(x|y)}\right)\]&lt;/span&gt; &lt;span class=&quot;math&quot;&gt;\[~~~~ = \sum_{x,y} p(x,y) \log_2\left(\frac{1}{p(x|y)}\right)\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;mutual-information&quot;&gt;Mutual Information&lt;/h2&gt;
&lt;p&gt;In the previous section, we observed that knowing one variable can mean that communicating another variable requires less information.&lt;/p&gt;
&lt;p&gt;One nice way to think about this is to imagine amounts of information as bars. These bars overlap if there’s shared information between them. For example, some of the information in &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt; is shared between them, so &lt;span class=&quot;math&quot;&gt;\(H(X)\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(H(Y)\)&lt;/span&gt; are overlapping bars. And since &lt;span class=&quot;math&quot;&gt;\(H(X,Y)\)&lt;/span&gt; is the information in both, it’s the union of the bars &lt;span class=&quot;math&quot;&gt;\(H(X)\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(H(Y)\)&lt;/span&gt;.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-info-1.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Once we think about things this way, a lot of things become easier to see.&lt;/p&gt;
&lt;p&gt;For example, we previously noted it takes more information to communicate both &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt; (the “joint entropy,” &lt;span class=&quot;math&quot;&gt;\(H(X,Y)\)&lt;/span&gt;) than it takes to just communicate &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; (the “marginal entropy,” &lt;span class=&quot;math&quot;&gt;\(H(X)\)&lt;/span&gt;). But if you already know &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt;, then it takes less information to communicate &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; (the “conditional entropy,” &lt;span class=&quot;math&quot;&gt;\(H(X|Y)\)&lt;/span&gt;) than it would if you didn’t!&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-overview.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;That sounds a bit complicated, but it’s very simple when we think about it from the bar perspective. &lt;span class=&quot;math&quot;&gt;\(H(X|Y)\)&lt;/span&gt; is the information we need to send to communicate &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; to someone who already knows &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt;, the information in &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; which isn’t also in &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt;. Visually, that means &lt;span class=&quot;math&quot;&gt;\(H(X|Y)\)&lt;/span&gt; is the part of &lt;span class=&quot;math&quot;&gt;\(H(X)\)&lt;/span&gt; bar which doesn’t overlap with &lt;span class=&quot;math&quot;&gt;\(H(Y)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;You can now read the inequality &lt;span class=&quot;math&quot;&gt;\(H(X,Y) \geq H(X) \geq H(X|Y)\)&lt;/span&gt; right off the following diagram.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-info-4.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Another identity is that &lt;span class=&quot;math&quot;&gt;\(H(X,Y) = H(Y) + H(X|Y)\)&lt;/span&gt;. That is, the information in &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt; is the information in &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt; plus the information in &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; which is not in &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt;.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-overview-sum.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Again, it’s difficult to see in the equations, but easy to see if you’re thinking in terms of these overlapping bars of information.&lt;/p&gt;
&lt;p&gt;At this point, we’ve broken the information in &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt; up in several ways. We have the information in each variable, &lt;span class=&quot;math&quot;&gt;\(H(X)\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(H(Y)\)&lt;/span&gt;. We have the the union of the information in both, &lt;span class=&quot;math&quot;&gt;\(H(X,Y)\)&lt;/span&gt;. We have the information which is in one but not the other, &lt;span class=&quot;math&quot;&gt;\(H(X|Y)\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(H(Y|X)\)&lt;/span&gt;. A lot of this seems to revolve around the information shared between the variables, the intersection of their information. We call this “mutual information,” &lt;span class=&quot;math&quot;&gt;\(I(X,Y)\)&lt;/span&gt;, defined as: &lt;span class=&quot;math&quot;&gt;\[I(X,Y) = H(X) + H(Y) - H(X,Y)\]&lt;/span&gt; This definition works because &lt;span class=&quot;math&quot;&gt;\(H(X) + H(Y)\)&lt;/span&gt; has two copies of the mutual information, since it’s in both &lt;span class=&quot;math&quot;&gt;\(X\)&lt;/span&gt; and &lt;span class=&quot;math&quot;&gt;\(Y\)&lt;/span&gt;, while &lt;span class=&quot;math&quot;&gt;\(H(X,Y)\)&lt;/span&gt; only has one. (Consider the previous bar diagram.)&lt;/p&gt;
&lt;p&gt;Closely related to the mutual information is the variation of information. The variation of information is the information which isn’t shared between the variables. We can define it like so: &lt;span class=&quot;math&quot;&gt;\[V(X,Y) = H(X,Y) - I(X,Y)\]&lt;/span&gt; Variation of information is interesting because it gives us a metric, a notion of distance, between different variables. The variation of information between two variables is zero if knowing the value of one tells you the value of the other and increases as they become more independent.&lt;/p&gt;
&lt;p&gt;How does this relate to KL divergence, which also gave us a notion of distance? Well, KL divergence gives us a distance between two distributions over the same variable or set of variables. In contrast, variation of information gives us distance between two jointly distributed variables. KL divergence is between distributions, variation of information within a distribution.&lt;/p&gt;
&lt;p&gt;We can bring this all together into a single diagram relating all these different kinds of information:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-info.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;h2 id=&quot;fractional-bits&quot;&gt;Fractional Bits&lt;/h2&gt;
&lt;p&gt;A very unintuitive thing about information theory is that we can have fractional numbers of bits. That’s pretty weird. What does it mean to have half a bit?&lt;/p&gt;
&lt;p&gt;Here’s the easy answer: often, we’re interested in the average length of a message rather than any particular message length. If half the time one sends a single bit, and half the time one sends two bits, on average one sends one and a half bits. There’s nothing strange about averages being fractional.&lt;/p&gt;
&lt;p&gt;But that answer is really dodging the issue. Often, the optimal lengths of codewords are fractional. What do those mean?&lt;/p&gt;
&lt;p&gt;To be concrete, let’s consider a probability distribution where one event, &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt;, happens 71% of the time and another event, &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt;, occurs 29% of the time.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/halfbit-ab.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The optimal code would use 0.5 bits to represent &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt;, and 1.7 bits to represent &lt;span class=&quot;math&quot;&gt;\(b\)&lt;/span&gt;. Well, if we want to send a single one of these codewords, it simply isn’t possible. We’re forced to round to a whole number of bits, and send on average 1 bit.&lt;/p&gt;
&lt;p&gt;… But if we’re sending multiple messages at once, it turns out that we can do better. Let’s consider communicating two events from this distribution. If we sent them independently, we’d need to send two bits. Can we do better?&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/halfbit-ab2.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Half the time, we need to communicate &lt;span class=&quot;math&quot;&gt;\(aa\)&lt;/span&gt;, &lt;span class=&quot;math&quot;&gt;\(21\%\)&lt;/span&gt; of the time we need to send &lt;span class=&quot;math&quot;&gt;\(ab\)&lt;/span&gt; or &lt;span class=&quot;math&quot;&gt;\(ba\)&lt;/span&gt;, and &lt;span class=&quot;math&quot;&gt;\(8\%\)&lt;/span&gt; of the time we need to communicate &lt;span class=&quot;math&quot;&gt;\(bb\)&lt;/span&gt;. Again, the ideal code involves fractional numbers of bits.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/halfbit-ab-idealcode.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;If we round the codeword lengths, we’ll get something like this:&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-09-Visual-Information/img/halfbit-ab-code.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;This codes give us an average message length of 1.8 bits. That’s less than the 2 bits when we send them independently. Another way of thinking of this is that we’re sending 0.9 bits on average for each event. If we were to send more events at once, it would become smaller still. As &lt;span class=&quot;math&quot;&gt;\(n\)&lt;/span&gt; tends to infinity, the overhead due to rounding our code would vanish, and the number of bits per codeword would approach the entropy.&lt;/p&gt;
&lt;p&gt;Further, notice that the ideal codeword length for &lt;span class=&quot;math&quot;&gt;\(a\)&lt;/span&gt; was 0.5 bits, and the ideal codeword length for &lt;span class=&quot;math&quot;&gt;\(aa\)&lt;/span&gt; was 1 bit. Ideal codeword lengths add, even when they’re fractional! So, if we communicate a lot of events at once, the lengths will add.&lt;/p&gt;
&lt;p&gt;There is a very real sense in which one can have fractional numbers of bits of information, even if actual codes can only use whole numbers.&lt;/p&gt;
&lt;p&gt;(In practice, people use particular coding schemes which are efficient to different extents. &lt;a href=&quot;https://en.wikipedia.org/wiki/Huffman_coding&quot;&gt;Huffman coding&lt;/a&gt;, which is basically the kind of code we've sketched out here, doesn't handle fractional bits very gracefully -- you have to group symbols, like we did above, or use more complicated tricks to approach the entropy limit. &lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_coding&quot;&gt;Arithmetic coding&lt;/a&gt; is a bit different, but elegantly handles fractional bits to be asymptotically optimal.)&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If we care about communicating in a minimum number of bits, these ideas are clearly fundamental. If we care about compressing data, information theory addresses the core questions and gives us the fundamentally right abstractions. But what if we don’t care – are they anything other than curiosities?&lt;/p&gt;
&lt;p&gt;Ideas from information theory turn up in lots of contexts: machine learning, quantum physics, genetics, thermodynamics, and even gambling. Practitioners in these fields typically don’t care about information theory because they want to compress information. They care because it has a compelling connection to their field. Quantum entanglement can be described with entropy. Many results in statistical mechanics and thermodynamics can be derived by assuming maximum entropy about the things you don’t know. A gambler’s wins or losses are directly connected to KL divergence, in particular iterated setups.&lt;/p&gt;
&lt;p&gt;Information theory turns up in all these places because it offers concrete, principled formalizations for many things we need to express. It gives us ways of measuring and expressing uncertainty, how different two sets of beliefs are, and how much an answer to one question tells us about others: how diffuse probability is, the distance between probability distributions, and how dependent two variables are. Are there alternative, similar ideas? Sure. But the ideas from information theory are clean, they have really nice properties, and a principled origin. In some cases, they’re precisely what you care about, and in other cases they’re a convenient proxy in a messy world.&lt;/p&gt;
&lt;p&gt;Machine learning is what I know best, so let’s talk about that for a minute. A very common kind of task in machine learning is classification. Let’s say we want to look at a picture and predict whether it’s a picture of a dog or a cat. Our model might say something like “there’s a 80% chance this image is a dog, and a 20% chance it’s a cat.” Let’s say the correct answer is dog – how good or bad is it that we only said there was an 80% chance it was a dog? How much better would it have been to say 85%?&lt;/p&gt;
&lt;p&gt;This is an important question because we need some notion of how good or bad our model is, in order to optimize it to do well. What should we optimize? The correct answer really depends on what we’re using the model for: Do we only care about whether the top guess was right, or do we care about how confident we are in the correct answer? How bad is it to be confidently wrong? There isn’t one right answer to this. And often it isn’t possible to know the right answer, because we don’t know how the model will be used in a precise enough way to formalize what we ultimately care about. The result is that there are situations where cross-entropy really is precisely what we care about, but that isn’t always the case. Much more often we don’t know exactly what we care about and cross-entropy is a really nice proxy.&lt;/p&gt;
&lt;p&gt;Information gives us a powerful new framework for thinking about the world. Sometimes it perfectly fits the problem at hand; other times it’s not an exact fit, but still extremely useful. This essay has only scratched the surface of information theory – there are major topics, like error-correcting codes, that we haven’t touched at all – but I hope I’ve shown that information theory is a beautiful subject that doesn’t need to be intimidating.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To help me become a better writer, please consider filling out this &lt;a href=&quot;https://docs.google.com/forms/d/1zaMvi-yL04GEtS7RnGplZ9TDGO5965GLlDdd50y2zNI/viewform?usp=send_form&quot;&gt;feedback form&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;Claude Shannon’s original paper on information theory, &lt;a href=&quot;http://worrydream.com/refs/Shannon%20-%20A%20Mathematical%20Theory%20of%20Communication.pdf&quot;&gt;A Mathematical Theory of Communication&lt;/a&gt;, is remarkably accessible. (This seems to be a recurring pattern in early information theory papers. Was it the era? A lack of page limits? A culture emanating from Bell Labs?)&lt;/p&gt;
&lt;p&gt;Cover &amp;amp; Thomas’ Elements of Information Theory seems to be the standard reference. I found it helpful.&lt;/p&gt;
&lt;h2 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;I’m very grateful to &lt;a href=&quot;https://github.com/danmane&quot;&gt;Dan Mané&lt;/a&gt;, &lt;a href=&quot;https://www.cs.cmu.edu/~dga/&quot;&gt;David Andersen&lt;/a&gt;, &lt;a href=&quot;http://obsessionwithregression.blogspot.com/&quot;&gt;Emma Pierson&lt;/a&gt; and Dario Amodei for taking time to give really incredibly detailed and extensive comments on this essay. I’m also grateful for the comments of &lt;a href=&quot;http://michaelnielsen.org/&quot;&gt;Michael Nielsen&lt;/a&gt;, &lt;a href=&quot;http://research.google.com/pubs/GregCorrado.html&quot;&gt;Greg Corrado&lt;/a&gt;, &lt;a href=&quot;http://www.iro.umontreal.ca/~bengioy/yoshua_en/index.html&quot;&gt;Yoshua Bengio&lt;/a&gt;, &lt;a href=&quot;https://aaroncourville.wordpress.com/&quot;&gt;Aaron Courville&lt;/a&gt;, &lt;a href=&quot;http://www.nickbeckstead.com/&quot;&gt;Nick Beckstead&lt;/a&gt;, &lt;a href=&quot;http://research.google.com/pubs/JonathonShlens.html&quot;&gt;Jon Shlens&lt;/a&gt;, Andrew Dai, &lt;a href=&quot;http://research.google.com/pubs/ChristianHoward.html&quot;&gt;Christian Howard&lt;/a&gt;, and &lt;a href=&quot;http://www.bewitched.com/&quot;&gt;Martin Wattenberg&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks also to my first two neural network seminar series for acting as guinea pigs for these ideas.&lt;/p&gt;
&lt;p&gt;Finally, thanks to the readers who caught errors and omissions. In particular, thanks to Connor Zwick, Kai Arulkumaran, Jonathan Heusser, Otavio Good, and an anonymous commenter.&lt;/p&gt;
&lt;section&gt;&lt;hr/&gt;&lt;h4&gt;More Posts&lt;/h4&gt;

&lt;div class=&quot;post&quot;&gt;&lt;img src=&quot;https://colah.github.io/posts/2014-07-Understanding-Convolutions/img/fig.png&quot;/&gt;&lt;h3&gt;Understanding Convolutions&lt;/h3&gt;
&lt;/div&gt;

&lt;div class=&quot;post&quot;&gt;&lt;img src=&quot;https://colah.github.io/posts/2014-12-Groups-Convolution/img/fig.png&quot;/&gt;&lt;h3&gt;Groups &amp;amp; Group Convolutions&lt;/h3&gt;
&lt;/div&gt;

&lt;div class=&quot;post&quot;&gt;&lt;img src=&quot;https://colah.github.io/images/post-covers/topology.png&quot;/&gt;&lt;h3&gt;Neural Networks, Manifolds, and Topology&lt;/h3&gt;
&lt;/div&gt;

&lt;div class=&quot;post&quot;&gt;&lt;img src=&quot;https://colah.github.io/posts/2015-01-Visualizing-Representations/img/fig.png&quot;/&gt;&lt;h3&gt;Visualizing Representations&lt;/h3&gt;
&lt;h4&gt;Deep Learning and Human Beings&lt;/h4&gt;
&lt;/div&gt;

&lt;/section&gt;
</description>
<pubDate>Wed, 24 Jul 2019 12:59:51 +0000</pubDate>
<dc:creator>less_penguiny</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://colah.github.io/posts/2015-09-Visual-Information/</dc:identifier>
</item>
<item>
<title>Use plaintext email</title>
<link>https://useplaintext.email/</link>
<guid isPermaLink="true" >https://useplaintext.email/</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;title&gt;Use plaintext email&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;244.15353410341&quot;&gt;

&lt;p&gt;There are two main types of emails on the internet: plaintext and HTML. The former is strongly preferred, but often isn't set up by default. We'll get you set up right.&lt;/p&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://useplaintext.email/#recommended-clients&quot;&gt;Recommended email clients for plaintext users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://useplaintext.email/#other-clients&quot;&gt;How to set up plaintext with other email clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://useplaintext.email/#etiquette&quot;&gt;Etiquette recommendations for plaintext emails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://useplaintext.email/#why-plaintext&quot;&gt;Why is plaintext better than HTML?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://useplaintext.email/#implementation-recommendations&quot;&gt;Recommendations for software which sends emails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://useplaintext.email/#contribute&quot;&gt;How to improve these recommendations&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;muted&quot;&gt;This guide is brought to you by &lt;a href=&quot;https://sourcehut.org&quot;&gt;sourcehut&lt;/a&gt;, the &quot;hacker's forge&quot; for software development, a platform which utilizes plaintext emails for many features. 100% open source and no JavaScript required - &lt;a href=&quot;https://meta.sr.ht/register&quot;&gt;try it today&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://useplaintext.email/certified.svg&quot; alt=&quot;Plaintext certified stamp&quot; width=&quot;200&quot; height=&quot;200&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;recommended-clients&quot;&gt;Recommended email clients for plaintext users&lt;/h2&gt;
&lt;p&gt;The following email clients are known to handle plaintext especially well:&lt;/p&gt;
&lt;p&gt;These clients all compose plaintext emails by default, with correct quoting and text wrapping settings, requiring no additional configuration to use correctly. &lt;a href=&quot;https://useplaintext.email/#contribute&quot;&gt;Want to add your own mail client to this list&lt;/a&gt;?&lt;/p&gt;
&lt;h2 id=&quot;other-clients&quot;&gt;How to set up plaintext with other email clients&lt;/h2&gt;
&lt;p&gt;If your email provider's webmail doesn't have good plain text support, please consider writing to &lt;code&gt;&amp;lt;postmaster@yourdomain.com&amp;gt;&lt;/code&gt; with a complaint, and using one of the &lt;a href=&quot;https://useplaintext.email/#recommended-clients&quot;&gt;recommended clients&lt;/a&gt; over IMAP &amp;amp; SMTP instead.&lt;/p&gt;
&lt;p&gt;Jump to:&lt;/p&gt;
&lt;p&gt;After configuring your client, be sure to review our &lt;a href=&quot;https://useplaintext.email/#etiquette&quot;&gt;etiquette recommendations&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;afterlogic&quot;&gt;Afterlogic&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;red&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Afterlogic does not support plain text email. Please &lt;a href=&quot;https://s.afterlogic.com/forum/forum_posts.asp?TID=2438&quot;&gt;ask them for it&lt;/a&gt; and use a different mail client.&lt;/p&gt;
&lt;h3 id=&quot;alot&quot;&gt;alot&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;alot uses plain text email by default.&lt;/p&gt;
&lt;h3 id=&quot;evolution&quot;&gt;Evolution&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Plaintext is the default. To enable bottom-posting:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Select Edit → Preferences from the menu&lt;/li&gt;
&lt;li&gt;Select Composer Preferences → General&lt;/li&gt;
&lt;li&gt;Enable &quot;Start typing at the bottom&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You can also prefer to show the plain text email by default when viewing multipart messages:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Select Edit → Preferences from the menu&lt;/li&gt;
&lt;li&gt;Select Mail Preferences → HTML Messages&lt;/li&gt;
&lt;li&gt;Select your preference from the &quot;HTML Mode&quot; options&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;fastmail&quot;&gt;Fastmail&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Visit Settings → Customize → Preferences&lt;/li&gt;
&lt;li&gt;Expand &quot;Advanced Preferences&quot; at the bottom of the page&lt;/li&gt;
&lt;li&gt;Change &quot;Compose Format&quot; to &quot;plain text&quot;&lt;/li&gt;
&lt;li&gt;Disable &quot;When replying, use the same format as the original message&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;gmail-web&quot;&gt;Gmail&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Compose a new message&lt;/li&gt;
&lt;li&gt;On the bottom right, click the three-dotted icon&lt;/li&gt;
&lt;li&gt;Select the plaintext option&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Gmail will remember your preference next time.&lt;/p&gt;
&lt;h3 id=&quot;k-9&quot;&gt;K-9 mail&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Tap the three dots on the bottom right&lt;/li&gt;
&lt;li&gt;Select Settings → Account settings → Sending mail&lt;/li&gt;
&lt;li&gt;Change the Message Format to Plain Text&lt;/li&gt;
&lt;li&gt;Select &quot;Reply after quoted text&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It is also recommended that you select &quot;Manage identities&quot;, and for each identity, untick &quot;Use Signature&quot;. This will remove &quot;Sent from K-9&quot; from your emails.&lt;/p&gt;
&lt;h3 id=&quot;mailspring&quot;&gt;Mailspring&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;red&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Mailspring does not support plain text emails. Please &lt;a rel=&quot;noopener nofollow&quot; href=&quot;https://github.com/Foundry376/Mailspring/issues/52&quot;&gt;ask them for it&lt;/a&gt; and use a different mail client.&lt;/p&gt;
&lt;h3 id=&quot;macos&quot;&gt;macOS Mail&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Select Mail → Preferences from the menu&lt;/li&gt;
&lt;li&gt;Visit the &quot;Composing&quot; category&lt;/li&gt;
&lt;li&gt;Change the &quot;Message Format&quot; (or &quot;Format&quot;) option to &quot;Plain Text&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;outlook&quot;&gt;Microsoft Outlook&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Select File → Options → Mail&lt;/li&gt;
&lt;li&gt;Under &quot;Compose Messages&quot;, select &quot;Plain Text&quot; from the &quot;Compose messages in this format&quot; options.&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;mu4e&quot;&gt;mu4e&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To enable automatic wrapping of your emails, add the following to your init file:&lt;/p&gt;
&lt;pre&gt;
(add-hook 'message-mode-hook 'auto-fill-mode)
&lt;/pre&gt;
&lt;p&gt;You may configure the default column to wrap at by changing the value of &lt;code&gt;fill-column&lt;/code&gt; (the default, 70, is suitable). You may also configure it to use format=flowed:&lt;/p&gt;
&lt;pre&gt;
(setq mu4e-compose-format-flowed t)
;; optional:
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
&lt;/pre&gt;
&lt;h3 id=&quot;nine&quot;&gt;Nine&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Open the side menu and click the &quot;gear&quot; icon&lt;/li&gt;
&lt;li&gt;Select General, then Composer&lt;/li&gt;
&lt;li&gt;Under Editor, change the Editor option to &quot;Text editor&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;protonmail&quot;&gt;Protonmail&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;: Use of IMAP and SMTP with Protonmail requires the use of a &lt;a href=&quot;https://github.com/emersion/hydroxide&quot; rel=&quot;nofollow noopener&quot;&gt;special third-party bridge&lt;/a&gt;. Protonmail is not recommended for this reason.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Visit Settings → Appearance&lt;/li&gt;
&lt;li&gt;Set &quot;Composer Mode&quot; to &quot;Plain Text&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It's also recommended that you visit Settings → Account → Identity and remove the default email signature.&lt;/p&gt;
&lt;h3 id=&quot;rainloop&quot;&gt;Rainloop&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Click the &quot;person&quot; icon on the top-right corner and choose &quot;Settings&quot;&lt;/li&gt;
&lt;li&gt;Set &quot;Default text editor&quot; to &quot;Plain&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;roundcube&quot;&gt;Roundcube&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Click Settings on the top-right&lt;/li&gt;
&lt;li&gt;Select Preferences → Composing Messages&lt;/li&gt;
&lt;li&gt;Select &quot;never&quot; under &quot;Compose HTML messages&quot;&lt;/li&gt;
&lt;li&gt;Select Composing Messages&lt;/li&gt;
&lt;li&gt;Select &quot;Start new message below the quote&quot; under &quot;When replying&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Also consider setting &quot;Automatically add signature&quot; to &quot;never&quot;.&lt;/p&gt;
&lt;h3 id=&quot;sogo&quot;&gt;Sogo&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;On the top-right, click the gear to open Preferences&lt;/li&gt;
&lt;li&gt;Select the Mail tab&lt;/li&gt;
&lt;li&gt;Change &quot;Compose messages in&quot; to &quot;Plain text&quot;&lt;/li&gt;
&lt;li&gt;Click the green &quot;Save&quot; icon on the top-right&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;sylpheed&quot;&gt;Sylpheed&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Open Configuration → Common preferences&lt;/li&gt;
&lt;li&gt;Visit the Compose → Editor tab&lt;/li&gt;
&lt;li&gt;Enable &quot;Wrap on input&quot;&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;thunderbird&quot;&gt;Thunderbird&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;green&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Right-click the space to the right of your inbox tab&lt;/li&gt;
&lt;li&gt;Enable the menu bar&lt;/li&gt;
&lt;li&gt;Select Edit → Account Settings&lt;/li&gt;
&lt;li&gt;Select the &quot;Composition &amp;amp; Addressing&quot; settings&lt;/li&gt;
&lt;li&gt;Disable &quot;Compose messages in HTML format&quot;&lt;/li&gt;
&lt;li&gt;Select &quot;Start my reply below the quote&quot;&lt;/li&gt;
&lt;li&gt;Repeat this for any other email accounts&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;tutanota&quot;&gt;Tutanota&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;green&quot;&gt;Compose in plaintext&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Wraps text or format=flowed&lt;/span&gt; &lt;span class=&quot;red&quot;&gt;Supports bottom posting&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;: Use of IMAP and SMTP, open standards for email clients, is not possible with Tutanota. This is not acceptable behavior for an email provider and use of Tutanota is strongly recommended against for this reason. Tutanota's stated reasons for not supporting these protocols are lies and you would be well served by closing your account there.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Visit Settings → Email → Formatting&lt;/li&gt;
&lt;li&gt;Set the format to plain text&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;etiquette&quot;&gt;Etiquette recommendations for plaintext emails&lt;/h2&gt;
&lt;p&gt;In addition to training you that HTML emails are the norm, many harmful mail clients may have trained you with other bad habits. Here are some tips to unlearn them:&lt;/p&gt;
&lt;h3&gt;Top posting&lt;/h3&gt;
&lt;p&gt;When you reply to an email, many email clients will include a quoted version of the message you're replying to beneath the text of your reply. This leads to long email threads containing the entire history of the discussion in an increasingly long and nested footer on every email. This is called &quot;top posting&quot; and is strongly discouraged.&lt;/p&gt;
&lt;p&gt;Though some clients would have you believe otherwise, you can edit the quoted version of the message you're replying to, and you're encouraged to. Feel free to trim it down, cutting out any extra text which isn't directly relevant to your reply - or removing it entirely. Write anything you have to say underneath the quote it pertains to.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: Because it reverses the logical flow of conversation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;: Why is top posting frowned upon?&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Wrapping your text&lt;/h3&gt;
&lt;p&gt;Email writers are encouraged to wrap their text at 72 columns by inserting a newline and resuming your writing on the following line. The &lt;a href=&quot;https://useplaintext.email/#recommended-clients&quot;&gt;recommended clients&lt;/a&gt; will do this for you, as well as any client shown above with &quot;Wraps text or uses format=flowed&quot; checked. Don't worry about re-wrapping the quoted parts of message you're replying to unless you want to. If your client doesn't do this for you, it can easily be the most frustrating part of being a good email netizen, but it's very much appreciated by recipients.&lt;/p&gt;
&lt;h2 id=&quot;why-plaintext&quot;&gt;Why is plaintext better than HTML?&lt;/h2&gt;
&lt;p&gt;HTML emails are mainly used for marketing - that is, emails you probably don't want to see in the first place. The few advantages they offer for end-users, such as links, inline images, and bold or italic text, aren't worth the trade-off.&lt;/p&gt;
&lt;h3&gt;HTML as a vector for phishing&lt;/h3&gt;
&lt;p&gt;HTML emails allow you to make links which hide the URL behind some user-friendly text. However, this is an extremely common vector for phishing attacks, where a malicious sender makes a misleading link which takes you to a different website than you expect. Often these websites are modeled after the login page of a service you use, and will trick you into entering your account password. In plaintext emails, the URL is always visible, and you can more easily make an informed choice to click it.&lt;/p&gt;
&lt;h3&gt;Privacy invasion and tracking&lt;/h3&gt;
&lt;p&gt;Virtually all HTML emails sent by marketers include identifiers in links and inline images which are designed to extract information about you and send it back to the sender. Examine the URLs closely - the strange numbers and letters are unique to you and used to identify you. This information is used to hack your brain, attempting to find advertisements which are more likely to influence your buying habits. HTML emails are good for marketers and bad for you.&lt;/p&gt;
&lt;h3&gt;Mail client vulnerabilities&lt;/h3&gt;
&lt;p&gt;HTML is an extremely large and complicated set of specifications designed without emails in mind. It's designed for browsing the world wide web, on which a huge variety of documents, applications, and more are available. Implementing even a reasonable subset of these standards represents hundreds of thousands of hours of work, or even millions. A large subset (perhaps the majority) of these features are not desirable for emails, and if included can be leveraged to leak information about you, your contacts, your calendar, other emails in your inbox, and so on. However, because of the herculean effort necessary to implement an HTML renderer, no one has built one specialized for emails which is guaranteed to be safe. Instead, general purpose web browsers, with many of their features disabled, are employed in most email clients. This is the number one source of vulnerabilities in email clients which result in information disclosure and even the execution of arbitrary malicious code.&lt;/p&gt;
&lt;h3&gt;HTML emails are less accessible&lt;/h3&gt;
&lt;p&gt;Browsing the web is a big challenge for users who require a screenreader or other assistive tools to use their computer. The same problems apply to email, only more so - making an accessible HTML email is even more difficult than making an accessible website due to the limitations imposed on HTML emails by most mail clients (which they have no choice but to impose - for the security reasons stated above). Plain text emails are a breeze in comparison for screenreaders to recite, especially for users with specialized email clients designed for this purpose. How do you speak bold text aloud? How about your inline image?&lt;/p&gt;
&lt;h3&gt;Some clients can't display HTML emails at all&lt;/h3&gt;
&lt;p&gt;Some email clients don't support HTML emails at all. Many email clients are designed to run in text-only environments, like a terminal emulator, where they're useful to people who spend a lot of time working in these environments. In a text-only interface it's not possible to render an HTML email, and instead the reader will just see a mess of raw HTML text. A lot of people simply send HTML emails directly to spam for this reason.&lt;/p&gt;
&lt;h3&gt;Rich text isn't that great, anyway&lt;/h3&gt;
&lt;p&gt;Rich text features desirable for end users include things like inline images, bold or italicized text, and so on. However, the tradeoff isn't worth it. Images can simply be attached to your email, and you can employ things like *asterisks*, /slashes/, _underscores_, or UPPERCASE for emphasis. You can still communicate your point effectively without bringing along all of the bad things HTML emails come with.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;In short, HTML emails are a security nightmare, are mostly used for advertising to you and tracking you, are less accessible for many users, and don't offer anything especially great for it.&lt;/p&gt;
&lt;h2 id=&quot;implementation-recommendations&quot;&gt;Recommendations for software which sends emails&lt;/h2&gt;
&lt;p&gt;Thanks for your interest in making plaintext emails more accessible to your users!&lt;/p&gt;
&lt;h3&gt;For senders of automated emails&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;If you must use HTML, send a &lt;a href=&quot;https://en.wikipedia.org/wiki/MIME&quot; rel=&quot;noopener nofollow&quot;&gt;multipart/alternative&lt;/a&gt; email with both a plaintext and HTML version included. Your programming language probably includes tools for creating these kinds of emails.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;For senders of user-authored emails&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Allow users to compose emails in plaintext, and consider making this the default. When the user composes a message in plaintext, send a text/plain email instead of a multipart/alternative email with a generated HTML part.&lt;/li&gt;
&lt;li&gt;When composing a plaintext email, hard-wrap their lines at 72 columns by inserting newlines at the nearest word boundary. Optionally, use &lt;a href=&quot;https://www.ietf.org/rfc/rfc2646.txt&quot; rel=&quot;noopener nofollow&quot;&gt;format=flowed&lt;/a&gt; instead to allow plaintext emails to be displayed and composed without hard wrapping.&lt;/li&gt;
&lt;li&gt;When users reply to an email in plaintext, don't encourage top-posting by leaving their cursor above the quoted message. Instead, add two newlines after the quoted message and leave their cursor there. Allow the user to edit the quoted message. Quote each line of the original message with &amp;gt; and a single space, followed by the quote.&lt;/li&gt;
&lt;li&gt;When users send an HTML email explicitly, convert it to text/plain and send a multipart/alternative email which includes both versions.&lt;/li&gt;
&lt;li&gt;When displaying multipart/alternative emails, give the user the option to prefer to view the plaintext part by default.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Email clients which meet all of these criteria and prefer plaintext by default are entitled to a spot on our recommended clients list.&lt;/p&gt;
&lt;h2 id=&quot;contribute&quot;&gt;How to improve these recommendations&lt;/h2&gt;
&lt;p&gt;Do you want to add instructions for a new email client? Have suggestions or questions? Please send a &lt;strong&gt;plain text&lt;/strong&gt; email to &lt;a href=&quot;mailto:~sircmpwn/public-inbox@lists.sr.ht&quot;&gt;~sircmpwn/public-inbox@lists.sr.ht&lt;/a&gt;. You can also &lt;a href=&quot;https://git-send-email.io&quot;&gt;email a patch&lt;/a&gt; to this address: the code may be found on &lt;a href=&quot;https://git.sr.ht/~sircmpwn/useplaintext.email&quot;&gt;git.sr.ht&lt;/a&gt;.&lt;/p&gt;
&lt;hr/&gt;&lt;p class=&quot;muted&quot;&gt;&quot;But if plaintext is so good, why is this page written in HTML?&quot;&lt;br/&gt;This is a reference document, not an email, you twit.&lt;/p&gt;
&lt;p class=&quot;muted&quot;&gt;&quot;Plaintext Certified&quot; graphic by &lt;a href=&quot;https://fosstodon.org/@ohyran&quot;&gt;Jens&lt;/a&gt;, CC-BY-SA.&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 24 Jul 2019 11:13:57 +0000</pubDate>
<dc:creator>Sir_Cmpwn</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://useplaintext.email/</dc:identifier>
</item>
<item>
<title>About the “Security Issue” on VLC</title>
<link>https://twitter.com/videolan/status/1153963312981389312</link>
<guid isPermaLink="true" >https://twitter.com/videolan/status/1153963312981389312</guid>
<description>&lt;p&gt;So, a reporter, opened a bug on our bugtracker, which is outside of the reporting policy, aka, mail us in private on the security alias.
Of course, our bugtracker is public.

We could not, of course reproduce the issue, and tried to contact the security researcher, in private.&lt;/p&gt;
</description>
<pubDate>Wed, 24 Jul 2019 10:09:18 +0000</pubDate>
<dc:creator>tiri</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/videolan/status/1153963312981389312</dc:identifier>
</item>
<item>
<title>Algorithm can pick out almost any American in supposedly anonymized databases</title>
<link>https://www.nytimes.com/2019/07/23/health/data-privacy-protection.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/07/23/health/data-privacy-protection.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Your medical records might be used for scientific research. But don’t worry, you’re told — personally identifying data were removed.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Information about you gathered by the Census Bureau might be made public. But don’t worry — it, too, has been “anonymized.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;On Tuesday, scientists showed that all this information may not be as anonymous as promised. The investigators developed a method to re-identify individuals from just bits of what were supposed to be anonymous data.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In most of the world, anonymous data are not considered personal data — the information can be shared and sold without violating privacy laws. Market researchers are willing to pay brokers for a huge array of data, from dating preferences to political leanings, household purchases to streaming favorites.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Even anonymized data sets often include scores of so-called attributes — characteristics about an individual or household. Anonymized consumer data sold by Experian, the credit bureau, to Alteryx, a marketing firm, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.forbes.com/sites/thomasbrewster/2017/12/19/120m-american-households-exposed-in-massive-consumerview-database-leak/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;included 120 million Americans and 248 attributes per household&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Scientists at Imperial College London and Université Catholique de Louvain, in Belgium, reported in the journal Nature Communications that they had devised a computer algorithm that &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nature.com/articles/s41467-019-10933-3&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;can identify 99.98 percent of Americans from almost&lt;/a&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nature.com/articles/s41467-019-10933-3&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;any&lt;/a&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nature.com/articles/s41467-019-10933-3&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;available data set with as few as 15 attributes&lt;/a&gt;, such as gender, ZIP code or marital status.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Even more surprising, the scientists posted their software code online for anyone to use. That decision was difficult, said Yves-Alexandre de Montjoye, a computer scientist at Imperial College London and lead author of the new paper.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Ordinarily, when scientists discover a security flaw, they alert the vendor or government agency hosting the data. But there are mountains of anonymized data circulating worldwide, all of it at risk, Dr. de Montjoye said.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;So the choice was whether to keep mum, he said, or to publish the method so that data vendors can secure future data sets and prevent individuals from being re-identified.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“This is very hard,” Dr. de Montjoye said. “You have to cross your fingers that you did it properly, because once it is out there, you are never going to get it back.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Some experts agreed with the tactic. “It’s always a dilemma,” said Yaniv Erlich, chief scientific officer at MyHeritage, a consumer genealogy service, and a well-known data privacy researcher.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“Should we publish or not? The consensus so far is to disclose. That is how you advance the field: Publish the code, publish the finding.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;This not the first time that anonymized data has been shown to be not so anonymous after all. In 2016, individuals were identified from the web-browsing histories of three million Germans, data that had been purchased from a vendor. Geneticists have shown that individuals &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2013/06/18/science/poking-holes-in-the-privacy-of-dna.html?module=inline&quot; title=&quot;&quot;&gt;can be identified in supposedly anonymous DNA databases&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The usual ways of protecting privacy include “de-identifying” individuals by removing attributes or substituting fake values, or by releasing only fractions of an anonymized data set.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;But the gathering evidence shows that all of the methods are inadequate, said Dr. de Montjoye. “We need to move beyond de-identification,” he said. “Anonymity is not a property of a data set, but is a property of how you use it.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The balance is tricky: Information that becomes completely anonymous also becomes less useful, particularly to scientists trying to reproduce the results of other studies. But every small bit that is retained in a database makes identification of individuals more possible.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“Very quickly, with a few bits of information, everyone is unique,” said Dr. Erlich.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;One possible solution &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://science.sciencemag.org/content/365/6449/127&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;is to control access&lt;/a&gt;. Those who want to use sensitive data — medical records, for example — would have to access them in a secure room. The data can be used but not copied, and whatever is done with the information must be recorded.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Researchers also can get to the information remotely, but “there are very strict requirements for the room where the access point is installed,” said Kamel Gadouche, chief executive of a research data center in France, C.A.S.D., which relies on these methods.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The center holds information on 66 million individuals, including tax and medical data, provided by governments and universities. “We are not restricting access,” Mr. Gadouche said. “We are controlling access.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;But there is a drawback to restricted access. If a scientist submits a research paper to a journal, for example, others might want to confirm the results by using the data — a challenge if the data were not freely available.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Other ideas include something called “secure multiparty computation.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“It’s a cryptographic trick,” Dr. Erlich said. “Suppose you want to compute the average salary for both or us. I don’t want to tell you my salary and you don’t want to tell me yours.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;So, he said, encrypted information is exchanged that is unscrambled by a computer.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“In theory, it works great,” said Dr. Erlich. But for scientific research, the method has limits. If the end result seems wrong, “you cannot debug it, because everything is so secure you can’t see the raw data.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The records gathered on all of us will never be completely private, he added: “You cannot reduce risk to zero.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Dr. de Montjoye worries that people do not yet appreciate the problem.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Two years ago, when he moved from Boston to London, he had to register with a general practitioner. The doctor’s office gave him a form to sign saying that his medical data would be shared with other hospitals he might go to, and with a system that might distribute his information to universities, private companies and other government departments.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The form added that the although the data are anonymized, “there are those who believe a person can be identified through this information.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“That was really scary,” Dr. de Montjoye said. “We are at a point where we know a risk exists and count on people saying they don’t care about privacy. It’s insane.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-g92qtk epkadsg3&quot;&gt;
&lt;div class=&quot;css-1owp1gq epkadsg0&quot;&gt;More articles about online privacy&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Wed, 24 Jul 2019 09:29:49 +0000</pubDate>
<dc:creator>zoobab</dc:creator>
<og:url>https://www.nytimes.com/2019/07/23/health/data-privacy-protection.html</og:url>
<og:type>article</og:type>
<og:title>Your Data Were ‘Anonymized’? These Scientists Can Still Identify You</og:title>
<og:image>https://static01.nyt.com/images/2019/07/23/science/23PRIVACY/23PRIVACY-facebookJumbo.jpg</og:image>
<og:description>Computer scientists have developed an algorithm that can pick out almost any American in databases supposedly stripped of personal information.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/07/23/health/data-privacy-protection.html</dc:identifier>
</item>
<item>
<title>Winnti: Hackers attacking the heart of German industry</title>
<link>http://br24.de/winnti/english</link>
<guid isPermaLink="true" >http://br24.de/winnti/english</guid>
<description>&lt;div readability=&quot;34&quot;&gt;
&lt;h2 data-observer=&quot;waypoint-4-cybercrime&quot;&gt;Phase 1: Cybercrime&lt;/h2&gt;
&lt;p&gt;It would seem that during the early stages, the hackers were concerned mainly about making money. &lt;span class=&quot;yellow background monospace&quot;&gt;Gameforge&lt;/span&gt; is a case in point: a gaming company based in the German town of Karlsruhe. During its heyday, the company had a staff of 700 working hard at conquering the global gaming market, and boasted annual sales to the tune of 140 million Euros. Gameforge offers so-called “freemium” games. While playing the games is free, those who want more either have to earn virtual money by completing certain tasks, which takes a long time, or shell out real money.&lt;/p&gt;
&lt;p&gt;We are told that in 2011, an email message found its way into Gameforge’s mailbox in Karlsruhe. A staff member opened the attached file and unbeknownst to him started the hackers’ Winnti program. Shortly afterwards, a few players became virtual rich persons.&lt;/p&gt;
&lt;p&gt;The administrators became aware that someone was directly accessing Gameforge’s databases and raising the account balance. They started getting worried. How could this be happening? The technicians used the next maintenance interval to reinstall the servers of the affected game. The players didn’t have a clue about what’s going on. No sooner were the servers back up than the manipulations continued.&lt;/p&gt;
&lt;p&gt;Gameforge decided to implement Kaspersky antivirus software, which didn't cause any alarm bells to ring. Gameforge arranged for Kaspersky's IT security experts to come directly to Karlsruhe. Because obviously there was something weird going on. Nobody thought to inform the State Bureau of Criminal Investigation or the local police. The year was 2011, and many investigators were barely familiar with the term or concept of cybercrime.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;11&quot;&gt;
&lt;p&gt;While keeping an eye on Gameforge’s corporate network, the IT security experts did find suspicious files and decided to analyze them. They noticed that the system had in fact been infiltrated by hackers—who were acting like Gameforge’s administrators most of the time. Which allowed them to remain invisible. It turned out that the hackers have taken over a total of 40 servers.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;This mode of operation is typical of many hacker groups—and especially of Winnti. “They are a very, very &lt;span class=&quot;reference&quot;&gt;persistente&lt;/span&gt; group,” says Costin Raiu, who has been watching Winnti since 2011. Raiu is in charge of Kaspersky’s malware analysis team. “Once the Winnti hackers are inside a network, they take their sweet time to really get a feel for the infrastructure,” he says.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;The hackers will map a company’s network and look for strategically favorable locations for placing their malware. They keep tabs on which programs are used in a company and then exchange a file in one of these programs. The modified file looks like the original, but was secretly supplemented by a few extra lines of code. From now on, this manipulated file does the attackers’ bidding.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;110.23949755757&quot;&gt;
&lt;p&gt;Raiu and his team have followed the digital tracks left behind by some of the Winnti hackers. “Nine years ago, things were much more clear-cut. There was a single team, which developed and used Winnti. It now looks like there is at least a second group that also uses Winnti.” This view is shared by many IT security companies. And it is this second group which is getting the German security authorities so worried. One government official puts it very matter-of-factly: “Winnti is very specific to Germany. It is the attacker group that's being encountered most frequently.&quot;&lt;/p&gt;
&lt;h2 data-observer=&quot;waypoint-5-industry&quot;&gt;Phase 2: Industrial espionage&lt;/h2&gt;
&lt;p&gt;By 2014, the Winnti malware code was no longer limited to game manufacturers. The second group’s job is mainly industrial espionage. Hackers are targeting high-tech companies as well as chemical and pharmaceutical companies. We find evidence going as far as mid-2019. Cases of espionage which were probably still ongoing when we discovered them. Winnti is attacking companies in Japan, France, the U.S. and Germany. Or more precisely: in Düsseldorf.&lt;/p&gt;
&lt;p&gt;Most people probably know the DAX company Henkel as a manufacturer of detergents and shampoos. But Henkel offers a huge range of other products, including adhesives for industrial applications. Modern cars are glued instead of welded. &lt;a href=&quot;https://www.youtube.com/watch?v=1bSjVFawpqs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;In a commercial on Youtube&lt;/a&gt;, Henkel shows staff members successfully joining two metal plates with just three grams of adhesive and then using the plates to pull a 280-ton train. Nearly half of Henkel’s annual sales of 20 billion Euros are generated by Henkel’s so-called “adhesive technologies&quot;.&lt;/p&gt;
&lt;p&gt;The Winnti hackers broke into Henkel’s network in 2014. We have three files showing that this happened. Each of these files contains the same website belonging to Henkel and the name of the hacked server. For example, one starts with the letter sequence DEDUSSV. We realize that server names can be arbitrary, but it is highly probable that DE stands for Germany and DUS for Düsseldorf, where the company headquarters are located. The hackers were able to monitor all activities running on the web server. And they also seemed to be able to reach systems which didn't have direct internet access: Internal storage files and possibly even the intranet.&lt;/p&gt;
&lt;p&gt;The corporation confirms the Winnti incident and issues the following statement: “The cyberattack was discovered in the summer of 2014 and Henkel promptly took all necessary precautions.” Henkel claims that a “very small portion” of its worldwide IT systems had been affected— the systems in Germany. According to Henkel, there was no evidence suggesting that any sensitive data had been diverted.&lt;/p&gt;
&lt;div class=&quot;infobox&quot; aria-label=&quot;info box&quot; readability=&quot;16&quot;&gt;
&lt;h3 data-observer=&quot;waypoint-6-infobox&quot;&gt;How we worked&lt;/h3&gt;
&lt;p&gt;BR and NDR reporters, in collaboration with several IT security experts, have analyzed the Winnti malware. It was notably Moritz Contag of Ruhr University Bochum who managed to extract information from different varieties of the malware. Contag wrote a script for this analysis. Silas Cutler, an IT security expert with US-based Chronicle Security, has confirmed Contag’s analyses.&lt;/p&gt;
&lt;p class=&quot;logo-wrapper&quot;&gt;A collaboration between &lt;span class=&quot;no-break&quot;&gt;&lt;a href=&quot;https://br.de/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;logo&quot; src=&quot;https://web.br.de/interaktiv/winnti/assets/images/br-logo.svg&quot; alt=&quot;Logo BR&quot;/&gt;&lt;/a&gt; and &lt;a href=&quot;https://ndr.de/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img class=&quot;logo&quot; src=&quot;https://web.br.de/interaktiv/winnti/assets/images/ndr-logo.svg&quot; alt=&quot;Logo NDR&quot;/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Far from attacking Henkel and the other companies arbitrarily, Winnti takes a highly strategic approach. Which is perfectly evident from the other cases. Take Covestro, for example, also a manufacturer of adhesives, lacquers and paints. This chemical corporation, a Bayer spin-off, is now listed on the DAX. Covestro is regarded as Germany’s most successful spin-off in the recent past. Up until June 2019, they had at least two systems on which the Winnti malware had been installed. Although there is no concrete evidence of data loss, Covestro considers “this evidence of infection to be a serious attack on our company.” Another manufacturer of adhesives, Bostik of France, was infected with Winnti in early 2019.&lt;/p&gt;
&lt;p&gt;The hackers behind Winnti have also set their sights on Japan’s biggest chemical company, Shin-Etsu Chemical. We have in our hands several varieties of the 2015 malware which was most likely used for the attack. In the case of another Japanese company, Sumitomo Electric, Winnti apparently penetrated their networks during the summer of 2016. And consider Roche, one of the largest pharmaceutical companies in the world: the sheer number of files, 25 in total, gives you an idea of the degree of network penetration by the hackers. Winnti hackers also penetrated the BASF and Siemens networks. Both corporations have confirmed our research data.&lt;/p&gt;
&lt;p&gt;A BASF spokeswoman tells us in an email that in July 2015, hackers had successfully overcome “the first levels” of defense. “When our experts discovered that the attacker was attempting to get around the next level of defense, the attacker was removed promptly and in a coordinated manner from BASF’s network.” She added that no business relevant information had been lost at any time. According to Siemens, they were penetrated by the hackers in June 2016. “We quickly discovered and thwarted the attack,” Siemens told us in a written reply. Siemens claims that even after detailed analyses, no evidence suggesting data loss from the attack has been found to date.&lt;/p&gt;
&lt;div class=&quot;infobox&quot; aria-label=&quot;info box&quot;&gt;
&lt;h3 data-observer=&quot;waypoint-7-companies&quot;&gt;Targeted companies&lt;/h3&gt;
&lt;ul class=&quot;companies&quot;&gt;&lt;li class=&quot;gaming&quot;&gt;&lt;strong&gt;Gaming&lt;/strong&gt;: Gameforge, Valve&lt;/li&gt;
&lt;li class=&quot;software&quot;&gt;&lt;strong&gt;Software&lt;/strong&gt;: Teamviewer&lt;/li&gt;
&lt;li class=&quot;semiconductor&quot;&gt;&lt;strong&gt;Technology&lt;/strong&gt;: Siemens, Sumitomo, Thyssenkrupp&lt;/li&gt;
&lt;li class=&quot;pharma&quot;&gt;&lt;strong&gt;Pharma&lt;/strong&gt;: Bayer, Roche&lt;/li&gt;
&lt;li class=&quot;chemical&quot;&gt;&lt;strong&gt;Chemical&lt;/strong&gt;: BASF, Covestro, Shin-Etsu&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;p&gt;Bostik, Sumitomo and Shin-Etsu didn’t respond to our requests for comments at all. Roche chose to keep their response neutral. A spokesperson replied that “information security and data protection are taken very seriously.” Nearly all major corporations now emphasize that there is no such thing as one hundred percent protection. Hacking attacks on large companies have become almost commonplace. And yet: No company really likes to talk about having hackers in its own networks. In many cases, customers are not informed. They are justifiably scared of damage to their reputation.&lt;/p&gt;
&lt;p&gt;Teamviewer is a case in point. A company based in the southwest of Germany, a bona fide Silicon Valley contender, and a true showpiece enterprise. It was quickly traded at a nine-digit valuation, the highest accolade for a newly incorporated enterprise. Then came the Winnti hackers. &lt;a href=&quot;https://www.spiegel.de/plus/teamviewer-wie-hacker-das-deutsche-vorzeige-start-up-ausspionierten-a-00000000-0002-0001-0000-000163955857&quot;&gt;“Spiegel” magazine was the first to report about it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The corporation offers a remote maintenance software solution which, according to Teamviewer, is installed on two billion devices. To imagine the mayhem a hacker might cause by infiltrating the end users’ devices via the Teamviewer application—it boggles the mind. But things didn’t get that far for Teamviewer, the company assures us. They add that they replaced their entire IT infrastructure and spent millions on removing the hackers from their networks in 2016.&lt;/p&gt;
&lt;h2 data-observer=&quot;waypoint-8-second-way&quot;&gt;The second way to find Winnti&lt;/h2&gt;
&lt;p&gt;For the IT departments, the infected computers are extremely difficult to detect. That is because a new variety of this malware remains perfectly passive as long as it is left alone. How can you find something that’s playing dead? Since 2018 there’s a public tool available designed to systematically trawl the Internet for these infected systems. This network scan works by luring the software out of its hiding spot.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Wed, 24 Jul 2019 06:54:47 +0000</pubDate>
<dc:creator>hakantan</dc:creator>
<og:type>article</og:type>
<og:title>Winnti: Attacking the Heart of the German Industry</og:title>
<og:description>For a number of years now, a group of professional hackers has been busy spying on businesses all over the world: Winnti. Believed to be controlled by China. For the first time, research by German public broadcasters BR and NDR are shedding light on how the hackers work and how much havoc they wreak.</og:description>
<og:url>https://web.br.de/interaktiv/winnti/english</og:url>
<og:image>https://web.br.de/interaktiv/winnti/assets/images/hacker.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://web.br.de/interaktiv/winnti/english/</dc:identifier>
</item>
</channel>
</rss>