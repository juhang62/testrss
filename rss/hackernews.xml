<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>As Facebook Raised a Privacy Wall, It Carved an Opening for Tech Giants</title>
<link>https://www.nytimes.com/2018/12/18/technology/facebook-privacy.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2018/12/18/technology/facebook-privacy.html</guid>
<description>&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;For years, Facebook gave some of the world’s largest technology companies more intrusive access to users’ personal data than it has disclosed, effectively exempting those business partners from its usual privacy rules, according to internal records and interviews.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The special arrangements are detailed in hundreds of pages of Facebook documents obtained by The New York Times. The records, generated in 2017 by the company’s internal system for tracking partnerships, provide the most complete picture yet of the social network’s data-sharing practices. They also underscore how personal data has become the most prized commodity of the digital age, traded on a vast scale by some of the most powerful companies in Silicon Valley and beyond.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The exchange was intended to benefit everyone. Pushing for explosive growth, Facebook got more users, lifting its advertising revenue. Partner companies acquired features to make their products more attractive. Facebook users connected with friends across different devices and websites. But Facebook also assumed extraordinary power over the personal information of its 2.2 billion users — control it has wielded with little transparency or outside oversight.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook allowed Microsoft’s Bing search engine to see the names of virtually all Facebook users’ friends without consent, the records show, and gave Netflix and Spotify the ability to read Facebook users’ private messages.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The social network permitted Amazon to obtain users’ names and contact information through their friends, and it let Yahoo view streams of friends’ posts as recently as this summer, despite public statements that it had stopped that type of sharing years earlier.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook has been reeling from a series of privacy scandals, set off by revelations in March that a political consulting firm, Cambridge Analytica, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/03/17/us/politics/cambridge-analytica-trump-campaign.html?module=inline&quot; title=&quot;&quot;&gt;improperly used Facebook data&lt;/a&gt; to build tools that aided President Trump’s 2016 campaign. Acknowledging that it had breached users’ trust, Facebook insisted that it had instituted stricter privacy protections long ago. Mark Zuckerberg, the chief executive, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://docs.house.gov/meetings/IF/IF00/20180411/108090/HHRG-115-IF00-Transcript-20180411.pdf&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;assured lawmakers&lt;/a&gt; in April that people “have complete control” over everything they share on Facebook.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;But the documents, as well as interviews with about 50 former employees of Facebook and its corporate partners, reveal that Facebook allowed certain companies access to data despite those protections. They also raise questions about whether Facebook ran afoul of a 2011 consent agreement with the Federal Trade Commission that barred the social network from sharing user data without explicit permission.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;[Here are&lt;/em&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/12/18/us/politics/facebook-data-sharing-deals.html?action=click&amp;amp;module=inline&amp;amp;pgtype=Article&quot; title=&quot;&quot;&gt;&lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;five takeaways&lt;/em&gt;&lt;/a&gt; &lt;em class=&quot;css-2fg4z9 ehxkw330&quot;&gt;from The Times’s investigation.]&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;In all, the deals described in the documents benefited more than 150 companies — most of them tech businesses, including online retailers and entertainment sites, but also automakers and media organizations. Their applications sought the data of hundreds of millions of people a month, the records show. The deals, the oldest of which date to 2010, were all active in 2017. Some were still in effect this year.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;In an interview, Steve Satterfield, Facebook’s director of privacy and public policy, said none of the partnerships violated users’ privacy or the F.T.C. agreement. Contracts required the companies to abide by Facebook policies, he added.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Still, Facebook executives have acknowledged missteps over the past year. “We know we’ve got work to do to regain people’s trust,” Mr. Satterfield said. “Protecting people’s information requires stronger teams, better technology and clearer policies, and that’s where we’ve been focused for most of 2018.” He said that the partnerships were “one area of focus” and that Facebook was in the process of winding many of them down.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook has found no evidence of abuse by its partners, a spokeswoman said. Some of the largest partners, including Amazon, Microsoft and Yahoo, said they had used the data appropriately, but declined to discuss the sharing deals in detail. Facebook did say that it had mismanaged some of its partnerships, allowing certain companies’ access to continue long after they had shut down the features that required the data.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;

&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;With most of the partnerships, Mr. Satterfield said, the F.T.C. agreement did not require the social network to secure users’ consent before sharing data because Facebook considered the partners extensions of itself — service providers that allowed users to interact with their Facebook friends. The partners were prohibited from using the personal information for other purposes, he said. “Facebook’s partners don’t get to ignore people’s privacy settings.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Data privacy experts disputed Facebook’s assertion that most partnerships were exempted from the regulatory requirements, expressing skepticism that businesses as varied as device makers, retailers and search companies would be viewed alike by the agency. “The only common theme is that they are partnerships that would benefit the company in terms of development or growth into an area that they otherwise could not get access to,” said Ashkan Soltani, former chief technologist at the F.T.C.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Mr. Soltani and three former employees of the F.T.C.’s consumer protection division, which brought the case that led to the consent decree, said in interviews that its data-sharing deals had probably violated the agreement.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“This is just giving third parties permission to harvest data without you being informed of it or giving consent to it,” said David Vladeck, who formerly ran the F.T.C.’s consumer protection bureau. “I don’t understand how this unconsented-to data harvesting can at all be justified under the consent decree.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Details of the agreements are emerging at a pivotal moment for the world’s largest social network. Facebook has been hammered with questions about its data sharing from lawmakers and regulators in the United States and Europe. The F.T.C. this spring opened a new inquiry into Facebook’s compliance with the consent order, while the Justice Department and Securities and Exchange Commission are also &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/07/02/technology/facebook-federal-investigations.html?module=inline&quot; title=&quot;&quot;&gt;investigating&lt;/a&gt; the company.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook’s stock price has fallen, and a group of shareholders has called for Mr. Zuckerberg to step aside as chairman. Shareholders also have filed a lawsuit alleging that executives failed to impose effective privacy safeguards. Angry users started a #DeleteFacebook movement.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;This month, a British parliamentary committee investigating internet disinformation &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/12/05/technology/facebook-documents-uk-parliament.html?module=inline&quot; title=&quot;&quot;&gt;released internal Facebook emails&lt;/a&gt;, seized from the plaintiff in another lawsuit against Facebook. The messages disclosed some partnerships and depicted a company preoccupied with growth, whose leaders sought to undermine competitors and briefly considered selling access to user data.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 e1vv25i80&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2018/12/17/business/00data4/00data4-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2018/12/17/business/00data4/00data4-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2018/12/17/business/00data4/00data4-jumbo.jpg?quality=90&amp;amp;auto=webp 1024w,https://static01.nyt.com/images/2018/12/17/business/00data4/00data4-superJumbo.jpg?quality=90&amp;amp;auto=webp 2048w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2018/12/17/business/00data4/00data4-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Richard Allan, a Facebook vice president, testifying before Parliament last month next to Mr. Zuckerberg’s vacant seat. The company is under fire from both American and European lawmakers.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Agence France-Presse — Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;As Facebook has &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/14/technology/facebook-data-russia-election-racism.html?module=inline&quot; title=&quot;&quot;&gt;battled&lt;/a&gt; &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/14/technology/facebook-data-russia-election-racism.html?module=inline&quot; title=&quot;&quot;&gt;one crisis after another&lt;/a&gt;, the company’s critics, including some former advisers and employees, have singled out the data-sharing as cause for concern.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“I don’t believe it is legitimate to enter into data-sharing partnerships where there is not prior informed consent from the user,” said Roger McNamee, an early investor in Facebook. “No one should trust Facebook until they change their business model.”&lt;/p&gt;
&lt;h2 class=&quot;css-1505tg eqpy7av0&quot; id=&quot;link-4a08b9a0&quot;&gt;An Engine for Growth&lt;/h2&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Personal data is the oil of the 21st century, a resource worth billions to those who can most effectively extract and refine it. American companies alone are expected to spend close to $20 billion by the end of 2018 to acquire and process consumer data, according to the Interactive Advertising Bureau.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Few companies have better data than Facebook and its rival, Google, whose popular products give them an intimate view into the daily lives of billions of people — and allow them to dominate the digital advertising market.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook has never sold its user data, fearful of user backlash and wary of handing would-be competitors a way to duplicate its most prized asset. Instead, internal documents show, it did the next best thing: granting other companies access to parts of the social network in ways that advanced its own interests.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook began forming data partnerships when it was still a relatively young company. Mr. Zuckerberg was determined to weave Facebook’s services into other sites and platforms, believing it would stave off obsolescence and insulate Facebook from competition. Every corporate partner that integrated Facebook data into its online products helped drive the platform’s expansion, bringing in new users, spurring them to spend more time on Facebook and driving up advertising revenue. At the same time, Facebook got critical data back from its partners.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The partnerships were so important that decisions about forming them were vetted at high levels, sometimes by Mr. Zuckerberg and Sheryl Sandberg, the chief operating officer, Facebook officials said. While many of the partnerships were announced publicly, the details of the sharing arrangements typically were confidential.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Sheryl Sandberg, Facebook’s second-in-command, at a Senate hearing in September. The data-sharing deals were vetted at senior levels, sometimes by her and Mr. Zuckerberg, Facebook officials said.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Jim Watson/Agence France-Presse — Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;By 2013, Facebook had entered into more such partnerships than its midlevel employees could easily track, according to interviews with two former employees. (Like the more than 30 other former employees interviewed for this article, they spoke on the condition of anonymity because they had signed nondisclosure agreements or still maintained relationships with top Facebook officials.)&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;So they built a tool that did the technical work of turning special access on and off and also kept records on what are known internally as “capabilities” — the special privileges enabling companies to obtain data, in some cases without asking permission.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The Times reviewed more than 270 pages of reports generated by the system — records that reflect just a portion of Facebook’s wide-ranging deals. Among the revelations was that Facebook obtained data from multiple partners for a controversial friend-suggestion tool called “People You May Know.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The feature, introduced in 2008, continues even though some Facebook users have objected to it, unsettled by its knowledge of their real-world relationships. Gizmodo and other news outlets &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://gizmodo.com/how-facebook-figures-out-everyone-youve-ever-met-1819822691&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;have reported cases&lt;/a&gt; of the tool’s recommending friend connections between patients of the same psychiatrist, estranged family members, and a harasser and his victim.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook, in turn, used contact lists from the partners, including Amazon, Yahoo and the Chinese company Huawei — which has been flagged as a security threat by American intelligence officials — to gain deeper insight into people’s relationships and suggest more connections, the records show.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Some of the access deals described in the documents were limited to sharing non-identifying information with research firms or enabling game makers to accommodate huge numbers of players. These raised no privacy concerns. But agreements with about a dozen companies did. Some enabled partners to see users’ contact information through their friends — even after the social network, responding to complaints, said in 2014 that it was stripping all applications of that power.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;As of 2017, Sony, Microsoft, Amazon and others could obtain users’ email addresses through their friends.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;One of Facebook’s device partners was Huawei, a Chinese company flagged as a security threat by United States intelligence.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Wang Zhao/Agence France-Presse — Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook also allowed Spotify, Netflix and the Royal Bank of Canada to read, write and delete users’ private messages, and to see all participants on a thread — privileges that appeared to go beyond what the companies needed to integrate Facebook into their systems, the records show. Facebook acknowledged that it did not consider any of those three companies to be service providers. Spokespeople for Spotify and Netflix said those companies were unaware of the broad powers Facebook had granted them. A Royal Bank of Canada spokesman disputed that the bank had any such access.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Spotify, which could view messages of more than 70 million users a month, still offers the option to share music through Facebook Messenger. But Netflix and the Canadian bank no longer needed access to messages because they had deactivated features that incorporated it.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;These were not the only companies that had special access longer than they needed it. Yahoo, The Times and others could still get Facebook users’ personal information in 2017.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Yahoo could view real-time feeds of friends’ posts for a feature that the company had ended in 2011. A Yahoo spokesman declined to discuss the partnership in detail but said the company did not use the information for advertising. The Times — one of nine media companies named in the documents — had access to users’ friend lists for an article-sharing application it also had discontinued in 2011. A spokeswoman for the news organization said it was not obtaining any data.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook’s internal records also revealed more about the extent of sharing deals with over 60 makers of smartphones, tablets and other devices, agreements first &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/interactive/2018/06/03/technology/facebook-device-partners-users-friends-data.html?module=inline&quot; title=&quot;&quot;&gt;reported by The Times&lt;/a&gt; in June.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook empowered Apple to hide from Facebook users all indicators that its devices were asking for data. Apple devices also had access to the contact numbers and calendar entries of people who had changed their account settings to disable all sharing, the records show.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Apple officials said they were not aware that Facebook had granted its devices any special access. They added that any shared data remained on the devices and was not available to anyone other than the users.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Facebook enabled Apple devices to conceal that they were asking for data, making it impossible for users to disable sharing.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Alisa Yuldybaeva/EPA, via Shutterstock&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook officials said the company had disclosed its sharing deals in its privacy policy since 2010. But the language in the policy about its service providers does not specify what data Facebook shares, and with which companies. Mr. Satterfield, Facebook’s privacy director, also said its partners were subject to “rigorous controls.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Yet Facebook has an imperfect track record of policing what outside companies do with its user data. In the Cambridge Analytica case, a Cambridge University psychology professor created an application in 2014 to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/03/17/us/politics/cambridge-analytica-trump-campaign.html?module=inline&quot; title=&quot;&quot;&gt;harvest the personal data&lt;/a&gt; of tens of millions of Facebook users for the consulting firm.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Pam Dixon, executive director of the World Privacy Forum, a nonprofit privacy research group, said that Facebook would have little power over what happens to users’ information after sharing it broadly. “It travels,” Ms. Dixon said. “It could be customized. It could be fed into an algorithm and decisions could be made about you based on that data.”&lt;/p&gt;
&lt;h2 class=&quot;css-1505tg eqpy7av0&quot; id=&quot;link-39d6b34&quot;&gt;400 Million Exposed&lt;/h2&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Unlike Europe, where social media companies have had to adapt to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/05/24/technology/europe-gdpr-privacy.html?module=inline&quot; title=&quot;&quot;&gt;stricter regulation&lt;/a&gt;, the United States has no general consumer privacy law, leaving tech companies free to monetize most kinds of personal information as long as they don’t mislead their users. The F.T.C., which regulates trade, can bring enforcement actions against companies that deceive their customers.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Besides Facebook, the F.T.C. has consent agreements with Google and Twitter stemming from alleged privacy violations.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook’s agreement with regulators is a result of the company’s early experiments with data sharing. In late 2009, it changed the privacy settings of the 400 million people then using the service, making some of their information accessible to all of the internet. Then it shared that information, including users’ locations and religious and political leanings, with Microsoft and other partners.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook called this “instant personalization” and promoted it as a step toward a better internet, where other companies would use the information to customize what people saw on sites like Bing. But the feature drew complaints from privacy advocates and many Facebook users that the social network had shared the information without permission.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The F.T.C. investigated and in 2011 cited the privacy changes as a deceptive practice. Caught off guard, Facebook officials stopped mentioning instant personalization in public and entered into the consent agreement.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Under the decree, the social network introduced a “comprehensive privacy program” charged with reviewing new products and features. It was initially overseen by two chief privacy officers, their lofty title an apparent sign of Facebook’s commitment. The company also hired PricewaterhouseCoopers to assess its privacy practices every two years.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;But the privacy program faced some internal resistance from the start, according to four former Facebook employees with direct knowledge of the company’s efforts. Some engineers and executives, they said, considered the privacy reviews an impediment to quick innovation and growth. And the core team responsible for coordinating the reviews — numbering about a dozen people by 2016 — was moved around within Facebook’s sprawling organization, sending mixed signals about how seriously the company took it, the ex-employees said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Critically, many of Facebook’s special sharing partnerships were not subject to extensive privacy program reviews, two of the former employees said. Executives believed that because the partnerships were governed by business contracts requiring them to follow Facebook data policies, they did not require the same level of scrutiny. The privacy team had limited ability to review or suggest changes to some of those data-sharing agreements, which had been negotiated by more senior officials at the company.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook officials said that members of the privacy team had been consulted on the sharing agreements, but that the level of review “depended on the specific partnership and the time it was created.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;In 2014, Facebook ended instant personalization and walled off access to friends’ information. But in a previously unreported agreement, the social network’s engineers continued allowing Bing; Pandora, the music streaming service; and Rotten Tomatoes, the movie and television review site, access to much of the data they had gotten for the discontinued feature. Bing had access to the information through last year, the records show, and the two other companies did as of late summer, according to tests by The Times.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Facebook continued the access for Pandora, the music-streaming service, and other companies even after an F.T.C. agreement led to an official change in policy.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Shannon Stapleton/Reuters&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook officials said the data sharing did not violate users’ privacy because it allowed access only to public data — though that included data that the social network had made public in 2009. They added that the social network made a mistake in allowing the access to continue for the three companies, but declined to elaborate. Spokeswomen for Pandora and Rotten Tomatoes said the businesses were not aware of any special access.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook also declined to discuss the other capabilities Bing was given, including the ability to see all users’ friends.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Microsoft officials said that Bing was using the data to build profiles of Facebook users on Microsoft servers. They declined to provide details, other than to say the information was used in “feature development” and not for advertising. Microsoft has since deleted the data, the officials said.&lt;/p&gt;
&lt;h2 class=&quot;css-1505tg eqpy7av0&quot; id=&quot;link-918b1ef&quot;&gt;Compliance Questions&lt;/h2&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;For some advocates, the torrent of user data flowing out of Facebook has called into question not only Facebook’s compliance with the F.T.C. agreement, but also the agency’s approach to privacy regulation.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“There has been an endless barrage of how Facebook has ignored users’ privacy settings, and we truly believed that in 2011 we had solved this problem,” said Marc Rotenberg, head of the Electronic Privacy Information Center, an online privacy group that filed one of the first complaints about Facebook with federal regulators. “We brought Facebook under the regulatory authority of the F.T.C. after a tremendous amount of work. The F.T.C. has failed to act.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;According to Facebook, most of its data partnerships fall under an exemption to the F.T.C. agreement. The company argues that the partner companies are service providers — companies that use the data only “for and at the direction of” Facebook and function as an extension of the social network.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;But Mr. Vladeck and other former F.T.C. officials said that Facebook was interpreting the exemption too broadly. They said the provision was intended to allow Facebook to perform the same everyday functions as other companies, such as sending and receiving information over the internet or processing credit card transactions, without violating the consent decree.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;When The Times reported last summer on the partnerships with device makers, Facebook used the term “integration partners” to describe BlackBerry, Huawei and other manufacturers that pulled Facebook data to provide social-media-style features on smartphones. All such integration partners, Facebook asserted, were covered by the service provider exemption.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Since then, as the social network has disclosed its data sharing deals with other kinds of businesses — including internet companies such as Yahoo — Facebook has labeled them integration partners, too.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook even recategorized one company, the Russian search giant Yandex, as an integration partner.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook records show Yandex had access in 2017 to Facebook’s unique user IDs even after the social network stopped sharing them with other applications, citing privacy risks. A spokeswoman for Yandex, which was accused last year by Ukraine’s security service of funneling its user data to the Kremlin, said the company was unaware of the access and did not know why Facebook had allowed it to continue. She added that the Ukrainian allegations “have no merit.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;The Russian company Yandex, which has been accused of funneling information to the Kremlin, had access to Facebook data as recently as last year.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Mikhail Metzel/TASS, via Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;In October, Facebook said Yandex was not an integration partner. But in early December, as The Times was preparing to publish this article, Facebook told congressional lawmakers that it was.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;An F.T.C. spokeswoman declined to comment on whether the commission agreed with Facebook’s interpretation of the service provider exception, which is likely to figure in the F.T.C.’s ongoing Facebook investigation. She also declined to say whether the commission had ever received a complete list of partners that Facebook considered service providers.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;But federal regulators had reason to know about the partnerships — and to question whether Facebook was adequately safeguarding users’ privacy. According to a letter that Facebook sent this fall to Senator Ron Wyden, the Oregon Democrat, PricewaterhouseCoopers &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/12/technology/facebook-data-privacy-users.html?module=inline&quot; title=&quot;&quot;&gt;reviewed at least some of Facebook’s data partnerships&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;The first assessment, sent to the F.T.C. in 2013, found only “limited” evidence that Facebook had monitored those partners’ use of data. The finding was redacted from a public copy of the assessment, which gave Facebook’s privacy program a passing grade over all.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Mr. Wyden and other critics have questioned whether the assessments — in which the F.T.C. essentially outsources much of its day-to-day oversight to companies like PricewaterhouseCoopers — are effective. As with other businesses under consent agreements with the F.T.C., Facebook pays for and largely dictated the scope of its assessments, which are limited mostly to documenting that Facebook has conducted the internal privacy reviews it claims it had.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;How closely Facebook monitored its data partners is uncertain. Most of Facebook’s partners declined to discuss what kind of reviews or audits Facebook subjected them to. Two former Facebook partners, whose deals with the social network dated to 2010, said they could find no evidence that Facebook had ever audited them. One was BlackBerry. The other was Yandex.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;

&lt;span class=&quot;css-8i9d0s e1olku6u0&quot;&gt;Steve Satterfield, Facebook’s director of privacy and public policy, said the sharing deals did not violate privacy rules because the partners functioned as extensions of the social network.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e18m0s9i0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1afaoz0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Isopix/REX/Shutterstock&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-u5vfum StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;Facebook officials said that while the social network audited partners only rarely, it managed them closely.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk e2kc3sl0&quot;&gt;“These were high-touch relationships,” Mr. Satterfield said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-1m2ozyi&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 19 Dec 2018 01:51:55 +0000</pubDate>
<dc:creator>jumelles</dc:creator>
<og:url>https://www.nytimes.com/2018/12/18/technology/facebook-privacy.html</og:url>
<og:type>article</og:type>
<og:title>As Facebook Raised a Privacy Wall, It Carved an Opening for Tech Giants</og:title>
<og:image>https://static01.nyt.com/images/2018/12/17/business/00data10/00data10-facebookJumbo-v2.jpg</og:image>
<og:description>Internal documents show that the social network gave Microsoft, Amazon, Spotify and others far greater access to people’s data than it has disclosed.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2018/12/18/technology/facebook-privacy.html</dc:identifier>
</item>
<item>
<title>Google Tech Dev Guide</title>
<link>https://techdevguide.withgoogle.com/</link>
<guid isPermaLink="true" >https://techdevguide.withgoogle.com/</guid>
<description>&lt;div readability=&quot;17&quot;&gt;

&lt;p&gt;Whether you’re a student or an educator, newer to computer science or a more experienced coder, or otherwise interested in software engineering, we hope there’s something for you here in Google’s Guide to Technical Development.&lt;/p&gt;
&lt;p&gt;We’ve carefully curated a collection of material from many sources, including Google, that you can use to supplement your classwork or direct your own learning.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Wed, 19 Dec 2018 01:31:12 +0000</pubDate>
<dc:creator>myroon5</dc:creator>
<og:image>https://techdevguide.withgoogle.com/static/images/icons/icon.png</og:image>
<og:title>Home – Google Tech Dev Guide</og:title>
<og:type>website</og:type>
<og:url>https://techdevguide.withgoogle.com/</og:url>
<og:description>Whether you’re a student, an educator, or otherwise interested in software engineering, newer to computer science or a more experienced coder, we hope there’s something for you here in Google’s Guide to Technical Development.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techdevguide.withgoogle.com/</dc:identifier>
</item>
<item>
<title>What a Newfound Kingdom Means for the Tree of Life</title>
<link>https://www.quantamagazine.org/what-a-newfound-kingdom-means-for-the-tree-of-life-20181211/</link>
<guid isPermaLink="true" >https://www.quantamagazine.org/what-a-newfound-kingdom-means-for-the-tree-of-life-20181211/</guid>
<description>&lt;p&gt;The tree of life just got another major branch. Researchers recently found a certain rare and mysterious microbe called a hemimastigote in a clump of Nova Scotian soil. &lt;a href=&quot;https://doi.org/10.1038/s41586-018-0708-8&quot;&gt;Their subsequent analysis&lt;/a&gt; of its DNA revealed that it was neither animal, plant, fungus nor any recognized type of protozoan — that it in fact fell far outside any of the known large categories for classifying complex forms of life (eukaryotes). Instead, this flagella-waving oddball stands as the first member of its own “supra-kingdom” group, which probably peeled away from the other big branches of life at least a billion years ago.&lt;/p&gt;
&lt;p&gt;“It’s the sort of result you hope to see once in a career,” said &lt;a href=&quot;http://protists.biology.dal.ca/index.html&quot;&gt;Alastair Simpson&lt;/a&gt;, a microbiologist at Dalhousie University who led the study.&lt;/p&gt;
&lt;p&gt;Impressive as this finding about hemimastigotes is on its own, what matters more is that it’s just the latest (and most profound) of a quietly and steadily growing number of major taxonomic additions. Researchers keep uncovering not just new species or classes but entirely new kingdoms of life — raising questions about how they have stayed hidden for so long and how close we are to finding them all.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://protists.biology.dal.ca/people.html&quot;&gt;Yana Eglit&lt;/a&gt; is a Dalhousie graduate student dedicated to discovering novel lineages of the single-cell eukaryotes called protists. While hiking in Nova Scotia on a cold spring day in 2016, she fell back from her friends to scrape a few grams of dirt into a plastic tube. (Such impromptu soil sampling, she said, is “a professional hazard.”) Back in the lab, Eglit soaked her sample in water, and over the next month she periodically peeked at it through a microscope for signs of unusual life.&lt;/p&gt;
&lt;p&gt;Late one evening, something odd in the sample caught her eye. An elongated cell radiating whiplike flagella was “awkwardly swimming, as though it didn’t realize it had all these flagella that could help it move,” Eglit said. Under a more powerful scope, she saw it fit the description of a hemimastigote, a rare kind of protist that was notoriously hard to cultivate. The next morning, the lab was abuzz with excitement over the opportunity to describe and sequence the specimen. “We dropped everything,” she recalled.&lt;/p&gt;
&lt;p&gt;Hemimastigotes represent one of a handful of Rumsfeldian “known unknown” protist lineages — moderately well-described groups whose positions on the tree of life are not precisely known because they are difficult to culture in a lab and sequence. Protistologists have used peculiarities of hemimastigotes’ structure to infer their close relatives, but their guesses were “‘shotgunned’ all over the phylogeny,” Simpson said. Without molecular data, lineages like hemimastigotes remain orphans of unknown ancestry.&lt;/p&gt;
&lt;p&gt;But a new method called single-cell transcriptomics has revolutionized such studies. It enables researchers to sequence large numbers of genes from just one cell. &lt;a href=&quot;http://protists.biology.dal.ca/people.html&quot;&gt;Gordon Lax&lt;/a&gt;, another graduate student in the Simpson lab and an expert on this method, explained that for hard-to-study organisms like hemimastigotes, single-cell transcriptomics can produce genetic data of a quality previously reserved for more abundant cells, making deeper genomic comparisons finally possible.&lt;/p&gt;
&lt;p&gt;The team sequenced more than 300 genes, and &lt;a href=&quot;http://www.ettemalab.org/laura-eme/&quot;&gt;Laura Eme&lt;/a&gt;, now a postdoctoral researcher at Uppsala University, modeled how those genes evolved to infer a classification for hemimastigotes. “We were fully expecting them to fall within one of the existing supergroups,” she explained. Lab members were instead stunned to find that hemimastigotes fit nowhere on the tree. They represented their own distinct lineage apart from the other half-dozen super groups.&lt;/p&gt;

&lt;p&gt;To understand how evolutionarily distinct the hemimastigote lineage is, imagine the eukaryotic tree splayed out before you on the ground as a narrowing set of paths, which begin with places for all living groups of eukaryotes near your toes and converge far in the distance at our common ancestor. Starting at our mammalian tip, walk down the path and back into history, past the fork where our lineage diverged from reptiles and birds, past the turnoffs for fishes, for starfish and for insects, and then farther still, beyond the split that separates us from fungi. If you turn around and look back, all the diverse organisms you passed fall within just one of the six eukaryote supergroups. Hemimastigotes are still up ahead, in a supergroup of their own, on a path that nothing else occupies.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.burki-lab.net/fabien-asst-prof.html&quot;&gt;Fabien Burki&lt;/a&gt;, a biologist at Uppsala University in Sweden who wasn’t involved in this study, was happy to see this result, but not entirely surprised. “It’s a bit like searching for life on other planets,” he said. “When we finally find it, I don’t think we will be very surprised, but it will be a huge discovery.”&lt;/p&gt;
&lt;p&gt;Burki, Simpson, Eglit and many others also think we have much more of the tree of life to uncover, largely because of how quickly it’s changing. “The tree of life is being reshaped by new data. It is really quite different than even what it was 15 or 20 years ago,” Burki said. “We’re seeing a tree with many more branches than we thought.”&lt;/p&gt;
&lt;p&gt;Finding a lineage as distinct as hemimastigotes is still relatively rare. But if you go down a level or two on the hierarchy, to the mere kingdom level — the one that encompasses, say, all animals — you find that new major lineages are popping up about once a year. “That rate isn’t slowing down,” said Simpson. “If anything, it might be speeding up.”&lt;/p&gt;
</description>
<pubDate>Tue, 18 Dec 2018 20:58:01 +0000</pubDate>
<dc:creator>dnetesn</dc:creator>
<og:title>What a Newfound Kingdom Means for the Tree of Life | Quanta Magazine</og:title>
<og:type>article</og:type>
<og:url>https://www.quantamagazine.org/what-a-newfound-kingdom-means-for-the-tree-of-life-20181211/</og:url>
<og:image>https://d2r55xnwy6nx47.cloudfront.net/uploads/2018/12/02-Hemimastix_520x2921.jpg</og:image>
<og:description>Neither animal, plant, fungus nor familiar protozoan, a strange microbe that sits in its own “supra-kingdom” of life foretells incredible biodiversity yet to be discovered by new sequencing technologies.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.quantamagazine.org/what-a-newfound-kingdom-means-for-the-tree-of-life-20181211/</dc:identifier>
</item>
<item>
<title>Stop Learning Frameworks</title>
<link>https://sizovs.net/2018/12/17/stop-learning-frameworks/</link>
<guid isPermaLink="true" >https://sizovs.net/2018/12/17/stop-learning-frameworks/</guid>
<description>&lt;p&gt;We are developers. We need to stay up to date with technology. Every day, we learn programming languages, frameworks, and libraries. The more modern tools we know — the better.&lt;/p&gt;
&lt;p&gt;Keeping up to date with Angular, React, Vue, Riot, Ember, Knockout is fun.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;But we are wasting our time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr/&gt;&lt;p&gt;Time is the most precious resource we have. Time is limited, nonrenewable and you cannot buy more of it.&lt;/p&gt;
&lt;p&gt;Technology, like fashion, is changing at the speed of light. To catch up, we need to run very fast. This race has no winners because it has no end.&lt;/p&gt;
&lt;img src=&quot;https://sizovs.net/images/wolf.jpg&quot;/&gt; © The Wolf of Wall Street (2013) by Martin Scorsese
&lt;p&gt;&lt;strong&gt;My mentor once taught me a lesson:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mentor: “Ed, what are you doing?”&lt;/p&gt;
&lt;p&gt;Me (proud): “I am reading a book about building modern Java apps with GWT.”&lt;/p&gt;
&lt;p&gt;Mentor: “What for?”&lt;/p&gt;
&lt;p&gt;Me: “As a Java developer, I need to keep up with trends. GWT is a thing.”&lt;/p&gt;
&lt;p&gt;Mentor: “What technology book did you read before GWT?”&lt;/p&gt;
&lt;p&gt;Me: “It’s a 500-page-long Apache Tapestry book. Tapestry was a thing.”&lt;/p&gt;
&lt;p&gt;Mentor: “Is Tapestry still a thing?”&lt;/p&gt;
&lt;p&gt;Me: “Not anymore. GWT is a thing.”&lt;/p&gt;
&lt;p&gt;Mentor: “Can you re-use Tapestry skills to solve current problems?”&lt;/p&gt;
&lt;p&gt;Me: “No, no one is using it today.”&lt;/p&gt;
&lt;p&gt;Mentor: “Does Tapestry knowledge help you understand GWT better?”&lt;/p&gt;
&lt;p&gt;Me: “No, it doesn’t. But I see some overlapping patterns.”&lt;/p&gt;
&lt;p&gt;Mentor: “It’s Design Patterns. Do they help you solve current problems?”&lt;/p&gt;
&lt;p&gt;Me: “Yes. Many of them.”&lt;/p&gt;
&lt;p&gt;Mentor: “Technology come and go, but it has a lot in common. Set priorities right. Invest 80% of your learning time in fundamentals. Leave 20% for frameworks, libraries and tools.”&lt;/p&gt;
&lt;p&gt;Me: “Hmm… Only 20% for frameworks, libraries, and tools?”&lt;/p&gt;
&lt;p&gt;Mentor: “Yes. You’ll learn them at work anyway while solving problems.”&lt;/p&gt;
&lt;p&gt;Me: “Thanks.”&lt;/p&gt;
&lt;p&gt;Mentor: “You’ll thank me later.”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This advice has changed my life&lt;/strong&gt;. I removed all framework books from &lt;a href=&quot;https://www.goodreads.com/eduardsi&quot;&gt;my bookshelf&lt;/a&gt;. The guilt pile shrank from 50 to 0 books. What a relief!&lt;/p&gt;
&lt;p&gt;I bought a set of evergreen books. These books took 80% of my learning time:&lt;/p&gt;
&lt;p&gt;I also bought a single book on the current technology. &lt;strong&gt;The Lindy effect&lt;/strong&gt; suggested that Spring Framework must be a good investment:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The future life expectancy of technology is proportional to its current age. Every extra period of survival implies a longer remaining life expectancy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The longer a technology is on the market, the safer investment it is.&lt;/p&gt;
&lt;p&gt;Don’t rush to learn new technology – it has a high probability of dying.&lt;/p&gt;
&lt;p&gt;Time will show which technology is worth investing. Time is your best advisor. Learn to wait.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Ten years have passed since then. I helped 50 different software projects. Thanks to the advice, everything I learn is portable across companies, teams, domains. My knowledge is still relevant today. &lt;strong&gt;I did not waste my time&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;All projects seem different unless you look under the surface:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Programming languages are different, but design smells are alike.&lt;/li&gt;
&lt;li&gt;Frameworks are different, but the same design patterns shine through.&lt;/li&gt;
&lt;li&gt;Developers are different, but rules of dealing with people are uniform.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Remember – frameworks, libraries and tools come and go. Time is precious.&lt;/p&gt;
&lt;img src=&quot;https://sizovs.net/images/intime.png&quot;/&gt; © In Time (2011) by Andrew Niccol
&lt;p&gt;&lt;strong&gt;Invest your golden time in transferable skills. Skills that will always be relevant.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;del&gt;Microservices frameworks&lt;/del&gt; Evolutionary Architecture&lt;/li&gt;
&lt;li&gt;&lt;del&gt;New programming language&lt;/del&gt; Clean Code, Design Patterns, DDD&lt;/li&gt;
&lt;li&gt;&lt;del&gt;LeSS, SAFe&lt;/del&gt; Lean manufacturing principles&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Hystrix&lt;/del&gt; Fault Tolerance Patterns&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Docker&lt;/del&gt; Continuous Delivery&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Angular&lt;/del&gt; Web, HTTP and REST&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Tue, 18 Dec 2018 14:58:16 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:description>We are developers. We need to stay up to date with technology. Every day, we learn programming languages, frameworks, and libraries. The more modern tools we know — the better.</og:description>
<og:title>Stop Learning Frameworks</og:title>
<og:url>http://sizovs.net/2018/12/17/stop-learning-frameworks/</og:url>
<og:type>website</og:type>
<og:image>http://sizovs.net/images/me.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://sizovs.net/2018/12/17/stop-learning-frameworks/</dc:identifier>
</item>
<item>
<title>How Alexa knows “peanut butter” is one shopping-list item, not two</title>
<link>https://developer.amazon.com/blogs/alexa/post/36ca7d4c-cd98-40a9-a9c5-0cde2ab922ab/how-alexa-knows-that-peanut-butter-is-one-shopping-list-item-not-two</link>
<guid isPermaLink="true" >https://developer.amazon.com/blogs/alexa/post/36ca7d4c-cd98-40a9-a9c5-0cde2ab922ab/how-alexa-knows-that-peanut-butter-is-one-shopping-list-item-not-two</guid>
<description>&lt;p&gt;At a recent &lt;a href=&quot;http://blog.aboutamazon.com/devices/how-alexa-keeps-getting-smarter&quot; target=&quot;_blank&quot;&gt;press event&lt;/a&gt; on Alexa's latest features, Alexa’s head scientist, Rohit Prasad, mentioned multistep requests in one shot, a capability that allows you to ask Alexa to do multiple things at once. For example, you might say, “Alexa, add bananas, peanut butter, and paper towels to my shopping list.” Alexa should intelligently figure out that “peanut butter” and “paper towels” name two items, not four, and that bananas are a separate item. &lt;/p&gt;
&lt;p&gt;Typical spoken-language understanding (SLU) systems map user utterances to intents (actions) and slots (entity names). For example, the utterance “What is the weather like in Boston?” has one intent, WeatherInfo, and one slot type, CityName, whose value is “Boston.” This is an example of a “narrow parse”. &lt;/p&gt;
&lt;p&gt;Narrow parsers usually have rigid constraints, such as allowing only one intent to be associated with an utterance and only one value to be associated with a slot type. In a &lt;a href=&quot;https://arxiv.org/pdf/1810.11497.pdf&quot; target=&quot;_blank&quot;&gt;paper&lt;/a&gt; that we’re presenting at this year’s IEEE Spoken Language Technology conference (SLT 2018), we discuss a way to enable SLU systems to understand compound entities and intents. &lt;/p&gt;
&lt;p&gt;We augment an SLU system with a domain-agnostic parser that can identify syntactic elements that establish relationships between different parts of an utterance, or “coordination structures”. In tests comparing our system to an off-the-shelf broad syntactic parser, we show a 26% increase in accuracy.&lt;/p&gt;
&lt;p&gt;Off-the-shelf broad parsers are intended to detect coordination structures, but they are often trained on written text with correct punctuation. Automatic speech recognition (ASR) outputs, by contrast, often lack punctuation, and spoken language has different syntactic patterns than written language.&lt;/p&gt;
&lt;p&gt;Our new parser is a deep neural network that we train on varied coordination structures in spoken-language data. The training examples are labeled according to the BIO scheme, which indicates groups of words — or “chunks” — that should be treated as ensembles. Most of the words in a sample utterance are labeled with either a &lt;em&gt;B&lt;/em&gt;, to indicate the beginning of a chunk, an &lt;em&gt;I&lt;/em&gt;, to indicate the inside of a chunk, or an &lt;em&gt;O&lt;/em&gt;, to indicate a word that lies outside a chunk. Coordinating conjunctions such as “and” are labeled independently.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;BIO_scheme_examples.png&quot; src=&quot;https://m.media-amazon.com/images/G/01/DeveloperBlogs/AlexaBlogs/default/BIO_scheme_examples.png._CB459952676_.png?t=true&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;sup&gt;Sample utterances, labeled according to the BIO scheme&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inputs to the network undergo &lt;em&gt;embedding&lt;/em&gt;, a process that represents words as points (vectors) in high-dimensional spaces. We experiment with two different types of embeddings: word embeddings, in which words with similar functions are clustered together, and character embeddings, in which words that contain the same subsequences of letters are clustered together. Character embeddings are useful for systems like ours that are intended to generalize across contexts, because they enable educated guesses about the meanings of unfamiliar words on the basis of their roots, prefixes, and suffixes.&lt;/p&gt;
&lt;p&gt;The embeddings then pass through a bidirectional long short-term memory. Long short-term memories (LSTMs) are networks that process sequential data in order, and any given output factors in the outputs that precede it. Bidirectional LSTMs run through a given data sequence both forward and backward.&lt;/p&gt;
&lt;p&gt;The output of the bi-LSTM is a contextual embedding of each word in the input sentence, which captures information about its position in the sentence. On top of the bi-LSTM layer, we have a dense layer to map each contextual word embedding to a distribution over the output labels, which are the B, I, and O of the BIO scheme. &lt;/p&gt;
&lt;p&gt;In our experiments, we evaluated a system that classifies each word of the input according to its most probable output label. But we got better results by passing the label estimates through a conditional-random-field (CRF) layer. The CRF layer learns associations between output labels and chooses the most likely sequence of output labels from all possible sequences.&lt;/p&gt;
&lt;p&gt;When we relied directly on the output of the label-prediction layer, it was possible to get incoherent outputs — such as an &lt;em&gt;O&lt;/em&gt; tag followed by an &lt;em&gt;I&lt;/em&gt; tag — since each label is independently predicted. The CRF layer, however, would learn that such a sequence of output labels is unlikely and assign it a low score. &lt;/p&gt;
&lt;p&gt;Instead of building separate parsers for different slot types (such as ListItem, FoodItem, Appliance, etc.), we built one parser that can handle multiple slot types. For example, our parser can successfully identify ListItems in the utterance “add apples peanut butter and jelly to my list” and Appliances in the utterance “turn on the living room light and kitchen light”.&lt;/p&gt;
&lt;p&gt;To enable our model to generalize, we used a technique called adversarial training. During training, the output of the bi-LSTM layer passes not only to the densely connected layer that learns to predict BIO labels but to another layer that learns to predict &lt;em&gt;domains&lt;/em&gt;, or broad topic categories such as Weather, Music, and Groceries. The network is evaluated not only on how &lt;em&gt;well&lt;/em&gt; it predicts BIO labels but on how &lt;em&gt;badly&lt;/em&gt; it predicts domain labels. That way, we ensure that it learns chunking cues that are not domain-specific.&lt;/p&gt;
&lt;p&gt;To generate data for our experiments, we take annotated single-entity data and replace the single entities with two or more entities of the same slot type with coordinating conjunctions between the penultimate entity and the final entity. For example, the utterance “set the timer for five minutes” might become “set the timer for five and ten minutes”. &lt;/p&gt;
&lt;p&gt;We ran an extensive set of experiments with variations in how the word embeddings are initialized (randomly or with pretrained embeddings, such as FastText, that group words together by meaning), whether or not we use character embeddings, and whether or not we use the CRF layer at the top. We tested separately on two-entity, three-entity, and four-or-more-entity utterances and measured accuracy. &lt;/p&gt;
&lt;p&gt;We noticed a few general trends: irrespective of the model configuration, accuracy degrades as we move from two- to three- to four-or-more-entity utterances; initialization with pretrained embeddings usually helps; and adding a CRF layer almost always improves accuracy. Our best results — the ones that improved most on the off-the-shelf parser — came from a model that used character embeddings, pretrained FastText embeddings, and a CRF layer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sanchit Agarwal is an applied scientist in the Alexa AI organization.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1810.11497.pdf&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Paper&lt;/strong&gt;&lt;/a&gt;: &quot;Parsing Coordination for Spoken Language Understanding&quot;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.amazon.com/alexa/science&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Alexa science&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Acknowledgments&lt;/strong&gt;: Rahul Goel, Tagyoung Chung, Abhishek Sethi, Arindam Mandal, Spyros Matsoukas&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related&lt;/strong&gt;:&lt;/p&gt;
</description>
<pubDate>Tue, 18 Dec 2018 14:44:04 +0000</pubDate>
<dc:creator>georgecarlyle76</dc:creator>
<og:url>https://developer.amazon.com/blogs/alexa/post/36ca7d4c-cd98-40a9-a9c5-0cde2ab922ab/how-alexa-knows-that-peanut-butter-is-one-shopping-list-item-not-two</og:url>
<og:type>article</og:type>
<og:title>How Alexa Knows “Peanut Butter” Is One Shopping-List Item, Not Two</og:title>
<og:description>Amazon Apps &amp; Services Developer Portal</og:description>
<og:image>https://m.media-amazon.com/images/G/01/DeveloperBlogs/AlexaBlogs/default/BIO_scheme_examples.png._CB459952676_.png?t=true</og:image>
<dc:language>en_US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developer.amazon.com/blogs/alexa/post/36ca7d4c-cd98-40a9-a9c5-0cde2ab922ab/how-alexa-knows-that-peanut-butter-is-one-shopping-list-item-not-two</dc:identifier>
</item>
<item>
<title>Analyzing Hacker News book suggestions in Python</title>
<link>https://towardsdatascience.com/hacker-news-book-suggestions-64b88099947</link>
<guid isPermaLink="true" >https://towardsdatascience.com/hacker-news-book-suggestions-64b88099947</guid>
<description>&lt;h3 name=&quot;61a6&quot; id=&quot;61a6&quot; class=&quot;graf graf--h3 graf--leading&quot;&gt;Scraping the thread: Hacker News API&lt;/h3&gt;
&lt;p name=&quot;bf8b&quot; id=&quot;bf8b&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;The first step is getting the data. Luckily, Hacker News provides a &lt;a href=&quot;https://github.com/HackerNews/API&quot; data-href=&quot;https://github.com/HackerNews/API&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;very nice API&lt;/a&gt; to freely scrape all of its content. The API has endpoints for posts, users, top posts a few others. For this article we will use the one for posts. It’s very simple to use, here is the basic syntax: &lt;code class=&quot;markup--code markup--p-code&quot;&gt;v0/item/{id}/.json&lt;/code&gt; where id is the item we are interested in. In this case the thread’s id is &lt;a href=&quot;https://hacker-news.firebaseio.com/v0/item/18661546.json%27%29.json%28%29&quot; data-href=&quot;https://hacker-news.firebaseio.com/v0/item/18661546.json').json()&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;nofollow noopener noopener&quot; target=&quot;_blank&quot;&gt;18661546&lt;/a&gt;, so here is an example on how to get the main page data:&lt;/p&gt;
&lt;pre name=&quot;a0ea&quot; id=&quot;a0ea&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
import requests &lt;br/&gt;main _page = requests.request(‘GET’, ‘&lt;a href=&quot;https://hacker-news.firebaseio.com/v0/item/18661546.json%27%29.json%28%29&quot; data-href=&quot;https://hacker-news.firebaseio.com/v0/item/18661546.json').json()&quot; class=&quot;markup--anchor markup--pre-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://hackernews.firebaseio.com/v0/item/18661546.json').json()&lt;/a&gt;)
&lt;/pre&gt;
&lt;p name=&quot;dd9a&quot; id=&quot;dd9a&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;The same API call is also used for the sub posts of a thread or a post, whose ids can be found in the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;kids&lt;/code&gt; key of the parent post. Looping over the kids we can get the text of every post in the thread.&lt;/p&gt;
&lt;h3 name=&quot;6c8f&quot; id=&quot;6c8f&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Cleaning the data&lt;/h3&gt;
&lt;p name=&quot;bf8c&quot; id=&quot;bf8c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Now that we have the text data we want to extract book titles from it. One possible approach would be to look for all Amazon or Goodreads links in the article and just group by that. This is a clean approach because it doesn’t depend on any text processing. However, just from taking a quick look at the thread it is clear that the vast majority of suggestions do not have any link associated to them. So I decided to go for the more difficult route: grouping ngrams together and match those ngrams with possible books.&lt;/p&gt;
&lt;p name=&quot;3f55&quot; id=&quot;3f55&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;So, after eliminating special characters from the text I grouped together bigrams, trigrams, 4-grams and 5-grams and count the occurrences. This is an example to count bigrams:&lt;/p&gt;
&lt;pre name=&quot;9276&quot; id=&quot;9276&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
import re&lt;br/&gt;from collections import Counter&lt;br/&gt;import operator
&lt;/pre&gt;
&lt;pre name=&quot;e77d&quot; id=&quot;e77d&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
# clean special characters&lt;br/&gt;text_clean = [re.sub(r&quot;[^a-zA-Z0-9]+&quot;, ' ', k)  for t in text for k in t.split(&quot;\n&quot;)]
&lt;/pre&gt;
&lt;pre name=&quot;fc01&quot; id=&quot;fc01&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
# count occurrences of bigrams in different posts&lt;br/&gt;countsb = Counter()&lt;br/&gt;words = re.compile(r'\w+')&lt;br/&gt;for t in text_clean:&lt;br/&gt;w = words.findall(t.lower())&lt;br/&gt;countsb.update(zip(w,w[1:]))
&lt;/pre&gt;
&lt;pre name=&quot;7e73&quot; id=&quot;7e73&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
# sort results&lt;br/&gt;bigrams = sorted(&lt;br/&gt;countsb.items(),&lt;br/&gt;key=operator.itemgetter(1),&lt;br/&gt;reverse=True&lt;br/&gt;)
&lt;/pre&gt;
&lt;p name=&quot;5760&quot; id=&quot;5760&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Usually in text application one of the first thing to do while processing the data is to eliminate stopwords, i.e. the most common words in a language, like articles and prepositions. In our case we did not eliminate stopwords from our text yet, therefore most of these ngrams would be almost exclusively composed of stopwords. In fact, here is a sample output of the top 10 most common bigrams in our data:&lt;/p&gt;
&lt;pre name=&quot;44d2&quot; id=&quot;44d2&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
[((u'of', u'the'), 147),&lt;br/&gt;((u'in', u'the'), 76),&lt;br/&gt;((u'it', u's'), 67),&lt;br/&gt;((u'this', u'book'), 52),&lt;br/&gt;((u'this', u'year'), 49),&lt;br/&gt;((u'if', u'you'), 45),&lt;br/&gt;((u'and', u'the'), 44),&lt;br/&gt;((u'i', u've'), 44),&lt;br/&gt;((u'to', u'the'), 40),&lt;br/&gt;((u'i', u'read'), 37)]
&lt;/pre&gt;
&lt;p name=&quot;bb15&quot; id=&quot;bb15&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;Having stopwords in our data is fine, most title books would have stopwords in them so we want to keep these. However, to avoid looking up too many combinations we eliminate the ngrams that are solely composed of stopwords, keeping all the others.&lt;/p&gt;
&lt;h3 name=&quot;e76c&quot; id=&quot;e76c&quot; class=&quot;graf graf--h3 graf-after--p&quot;&gt;Checking book titles: the Goodreads API&lt;/h3&gt;
&lt;p name=&quot;3062&quot; id=&quot;3062&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;Now that we have a list of possible ngrams we will use the &lt;a href=&quot;https://www.goodreads.com/api&quot; data-href=&quot;https://www.goodreads.com/api&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Goodreads API&lt;/a&gt; to check if these ngrams correspond to book titles. In case multiple matches are available for a search I decided to take the most recent publication as the result of the search. This is assuming that the most recent book would be the most likely match for this context. This is of course an assumption that might lead to errors.&lt;/p&gt;
&lt;p name=&quot;bf2a&quot; id=&quot;bf2a&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;The Goodreads API is a bit less straightforward to use than the Hacker News one as it returns results in XML, which is less friendly to use than the JSON format. In this analysis I used the &lt;code class=&quot;markup--code markup--p-code&quot;&gt;xmltodict&lt;/code&gt; python package to convert the XML to JSON. The API method we need is &lt;code class=&quot;markup--code markup--p-code&quot;&gt;&lt;a href=&quot;https://www.goodreads.com/api/index#search.books&quot; data-href=&quot;https://www.goodreads.com/api/index#search.books&quot; class=&quot;markup--anchor markup--p-anchor&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;search.books&lt;/a&gt;&lt;/code&gt; which allows to search books by title, author or ISBN. Here is a code sample to get book title and author for the most recently published search result:&lt;/p&gt;
&lt;pre name=&quot;2b40&quot; id=&quot;2b40&quot; class=&quot;graf graf--pre graf-after--p&quot;&gt;
import xmltodict
&lt;/pre&gt;
&lt;pre name=&quot;1c96&quot; id=&quot;1c96&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
res = requests.get(&quot;&lt;a href=&quot;https://www.goodreads.com/search/index.xml&quot; data-href=&quot;https://www.goodreads.com/search/index.xml&quot; class=&quot;markup--anchor markup--pre-anchor&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;https://www.goodreads.com/search/index.xml&lt;/a&gt;&quot; , params={&quot;key&quot;: grkey, &quot;q&quot;:'some book title'})
&lt;/pre&gt;
&lt;pre name=&quot;9bc5&quot; id=&quot;9bc5&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
xpars = xmltodict.parse(res.text)&lt;br/&gt;json1 = json.dumps(xpars)&lt;br/&gt;d = json.loads(json1)
&lt;/pre&gt;
&lt;pre name=&quot;8424&quot; id=&quot;8424&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
lst = d['GoodreadsResponse']['search']['results']['work']&lt;br/&gt;ys = [int(lst[j]['original_publication_year']['#text']) for j in range(len(lst))]
&lt;/pre&gt;
&lt;pre name=&quot;422c&quot; id=&quot;422c&quot; class=&quot;graf graf--pre graf-after--pre&quot;&gt;
title = lst[np.argmax(ys)]['best_book']['title']&lt;br/&gt;author = lst[np.argmax(ys)]['best_book']['author']['name']
&lt;/pre&gt;
&lt;p name=&quot;8d75&quot; id=&quot;8d75&quot; class=&quot;graf graf--p graf-after--pre&quot;&gt;This method allows us to associate ngrams to possible books. We check the list of books we get matching all ngrams with the Goodreads API against the full text data. Before performing the actual check we cut the book names eliminating punctuation (particularly semicolumns) and subtitles. We only consider the main title with assumption that most of the time only this part of the title would be used (some of the full titles in the list are actually really long!). Ranking the results we get by number of occurences in the thread we get this list:&lt;/p&gt;
</description>
<pubDate>Tue, 18 Dec 2018 14:19:44 +0000</pubDate>
<dc:creator>MLpractitioner</dc:creator>
<og:title>Hacker News book suggestions – Towards Data Science</og:title>
<og:url>https://towardsdatascience.com/hacker-news-book-suggestions-64b88099947</og:url>
<og:image>https://cdn-images-1.medium.com/max/1200/1*MMmlzztUmGro_ij6RBYMDg.jpeg</og:image>
<og:description>An analysis of an Hacker News thread, using Python, Hacker News API and Goodreads API, and the definitive top 20 book suggestion list!</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://towardsdatascience.com/hacker-news-book-suggestions-64b88099947?gi=f0770459c0c8</dc:identifier>
</item>
<item>
<title>SpaceX Is Raising $500M at a $30.5B Valuation</title>
<link>https://www.wsj.com/articles/elon-musks-spacex-is-raising-500-million-in-funding-11545142054</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/elon-musks-spacex-is-raising-500-million-in-funding-11545142054</guid>
<description>&lt;p&gt; Elon Musk’s rocket company, Space Exploration Technologies Corp., is set to raise $500 million at a $30.5 billion valuation, in a bid to help get its internet-service business off the ground, according to people familiar with the fundraising.&lt;/p&gt; &lt;p&gt;The Hawthorne, Calif., company, known as SpaceX, is raising the capital from existing shareholders and new investor Baillie Gifford &amp;amp; Co., one of the people said. The Scottish money-management firm is one of the largest investors in another Musk-led company, Tesla Inc., with about...
  &lt;/p&gt;</description>
<pubDate>Tue, 18 Dec 2018 14:17:52 +0000</pubDate>
<dc:creator>dcgudeman</dc:creator>
<og:title>Elon Musk’s SpaceX Is Raising $500 Million in Funding</og:title>
<og:description>Elon Musk’s rocket company, Space Exploration Technologies, is set to raise $500 million at a $30.5 billion valuation, in a bid to help get a satellite-internet service off the ground.</og:description>
<og:url>https://www.wsj.com/articles/elon-musks-spacex-is-raising-500-million-in-funding-11545142054</og:url>
<og:image>https://si.wsj.net/public/resources/images/B3-CR487_spacex_SOC_20181217235123.jpg</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/elon-musks-spacex-is-raising-500-million-in-funding-11545142054</dc:identifier>
</item>
<item>
<title>Why you should learn F#</title>
<link>https://dusted.codes/why-you-should-learn-fsharp</link>
<guid isPermaLink="true" >https://dusted.codes/why-you-should-learn-fsharp</guid>
<description>&lt;header&gt;
&lt;div class=&quot;blogpost-metadata&quot;&gt;
&lt;p&gt;&lt;time datetime=&quot;2018-12-17T00:00:00&quot;&gt;17 Dec 2018&lt;/time&gt;&lt;/p&gt;


&lt;/div&gt;
&lt;/header&gt;&lt;p&gt;If you were thinking of learning a new programming language in 2019 then I would highly recommend to have a close look at F#. No matter if you are already a functional developer from a different community (Haskell, Clojure, Scala, etc.) or you are a complete newbie to functional programming (like I was 3 years ago) I think F# can equally impress you. F# is a &lt;a href=&quot;https://dotnet.microsoft.com/languages/fsharp&quot;&gt;functional first language&lt;/a&gt;. This means it is not a pure functional language but it is heavily geared towards the &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming paradigm&lt;/a&gt;. However, because F# is also part of the &lt;a href=&quot;https://dotnet.microsoft.com/languages&quot;&gt;.NET language family&lt;/a&gt; it is equally well equipped to write object oriented code too. Secondly F# is - contrary to common believe - an extremely well designed &lt;a href=&quot;https://fsharpforfunandprofit.com/why-use-fsharp/&quot;&gt;general purpose language&lt;/a&gt;. This means that F# is not only good for all sorts of &quot;mathematical&quot; stuff, but also for so much more. Without doubt F# is, like most other functional (algebraic) languages, greatly suited for this kind of work, but it is certainly not at the forefront of the creators of F# and neither a very common use case by most people who I know work with F#. So what is F# really good for? Well, the honest answer is almost anything! F# is an extremely pragmatic, expressive, statically typed programming language. Whether you want to build a distributed real time application, a service oriented web backend, a fancy looking single page app, mobile games, a line of business application or the next big social internet flop, F# will satisfy most if not all of your needs. As a matter of fact F# is probably a much better language for these types of applications than let's say Python, Java or C#. If you don't believe me then please continue reading and hopefully I will have convinced you by the end of this post!&lt;/p&gt;&lt;h2&gt;Table of contents&lt;/h2&gt;
&lt;h2 id=&quot;domain-driven-development&quot;&gt;Domain Driven Development&lt;/h2&gt;
&lt;p&gt;Before I started to write this article I asked myself why do I like F# so much? There are many reasons which came to my mind, but the one which really stood out to me was the fact that F# has some great capabilities of modelling a domain. After all, the majority of work which we do as software developers is to model real world processes into a digital abstraction of them. A language which makes this kind of work almost feel natural is immensely valuable and should not be missed.&lt;/p&gt;
&lt;p&gt;Let's look at some code examples to demonstrate what I mean. For this task and for the rest of this blog post I'll be comparing F# with C# in order to show some of the benefits. I've chosen C# because many developers consider it as one of the best object oriented languages and mainly because C# is the language which I am the most proficient at myself.&lt;/p&gt;
&lt;h3&gt;Identifying bad design&lt;/h3&gt;
&lt;p&gt;A common use case in a modern application is to read a customer object from a database. In C# this would look something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public Customer GetCustomerById(string customerId)
{
    // do stuff...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have purposefully omitted the internals of this method, because from a caller's point of view the signature of a method is often all we know. Even though this operation is so simple (and very familiar) there are still a lot of unknowns around it:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Which values are accepted for the &lt;code&gt;customerId&lt;/code&gt;? Can it have an empty string? Probably not, but will it instantly throw an &lt;code&gt;ArgumentException&lt;/code&gt; or still try to fetch some user data?&lt;/li&gt;
&lt;li&gt;Does the ID follow a specific format? What if the &lt;code&gt;customerId&lt;/code&gt; has the correct format but is all upper case? Is it case sensitive or will the method normalise the string anyway?&lt;/li&gt;
&lt;li&gt;What happens if a given &lt;code&gt;customerId&lt;/code&gt; doesn't exist? Will it return &lt;code&gt;null&lt;/code&gt; or throw an &lt;code&gt;Exception&lt;/code&gt;? There's no way to find out without checking the internal implementation of this method (docs, decompilation, GitHub, etc.) or by testing against all sorts of input.&lt;/li&gt;
&lt;li&gt;What happens if the database connection is down? Will it return the same result as if the customer didn't exist or will it throw a different type of exception?&lt;/li&gt;
&lt;li&gt;How many different exception types will this code throw anyway?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The interface/signature of this method is not very clear in answering any of these questions. This is pretty poor given that the signature or interface of a method has the only purpose of defining a clear contract between the caller and the method itself. Of course there are many conventions which make C# developers feel safe, mostly by making broad assumptions about the underlying code, but at the end of the day these are only assumptions which can (and will eventually) lead to severe errors. If a library only slightly differs from an established convention then there is a high chance of introducing a bug which will catch them later.&lt;/p&gt;
&lt;p&gt;If anything, conventions are rather weak workarounds for missing language features. Just like C# is perhaps seen as a better language than JavaScript, because of its statically typed feature, many functional programming languages are seen superior to C#, Java, and others, because of their domain modelling features.&lt;/p&gt;
&lt;p&gt;There are ways of improving this code in C#, but none of those options are very straightforward (or often very cumbersome), which is why there is still plenty of code written like the one above.&lt;/p&gt;
&lt;h3&gt;F# makes correct code easy&lt;/h3&gt;
&lt;p&gt;F# on the other hand has a rich type system which allows developers to express the true state of a function. If a function might or might not return a &lt;code&gt;Customer&lt;/code&gt; object then the function can return an object of type &lt;code&gt;Option&amp;lt;'T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Option&amp;lt;'T&amp;gt;&lt;/code&gt; type defines a return value which can either be something or nothing:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let getCustomerById customerId =
    match db.TryFindCustomerById customerId with
    | true, customer -&amp;gt; Some customer
    | false, _       -&amp;gt; None
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It is important to understand that &lt;code&gt;None&lt;/code&gt; is not another way of saying &lt;code&gt;null&lt;/code&gt;, because &lt;code&gt;null&lt;/code&gt; is truly nothing (there is nothing allocated in memory), whereas &lt;code&gt;None&lt;/code&gt; is an actual object/case of type &lt;code&gt;Option&amp;lt;'T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this example the &lt;code&gt;TryFindCustomerId&lt;/code&gt; method is a typical .NET member which has an &lt;code&gt;out&lt;/code&gt; parameter defined like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bool TryFindCustomerById(string customerId, out Customer customer)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In F# you can use simple pattern matching to extract the &lt;code&gt;out&lt;/code&gt; parameter on success:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;match db.TryFindCustomerById customerId with
| true, customer -&amp;gt; Some customer
| false, _       -&amp;gt; None
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The benefit of the &lt;code&gt;Option&amp;lt;'T&amp;gt;&lt;/code&gt; type is not only that it is more expressive (and therefore more honest about the true state of the function), but also that it forces the calling code to implement the case of &lt;code&gt;None&lt;/code&gt;, which means that a developer has to think of this edge case straight from the beginning:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let someOtherFunction customerId =
    match getCustomerById customerId with
    | Some customer -&amp;gt; // Do something when customer exist
    | None          -&amp;gt; // Do something when customer doesn't exist
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Another extremely useful type which comes with F# is the &lt;code&gt;Result&amp;lt;'T,'TError&amp;gt;&lt;/code&gt; type:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let validateCustomerId customerId =
    match customerId with
    | null -&amp;gt; Error &quot;Customer ID cannot be null.&quot;
    | &quot;&quot;   -&amp;gt; Error &quot;Customer ID cannot be empty.&quot;
    | id when id.Length &amp;lt;&amp;gt; 10 -&amp;gt; Error &quot;Invalid Customer ID.&quot;
    | _ -&amp;gt; Ok (customerId.ToLower())
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;validateCustomerId&lt;/code&gt; function will either return &lt;code&gt;Ok&lt;/code&gt; with a normalised &lt;code&gt;customerId&lt;/code&gt; or an &lt;code&gt;Error&lt;/code&gt; object which contains a relevant error message. In this example &lt;code&gt;'T&lt;/code&gt; and &lt;code&gt;'TError&lt;/code&gt; are both of type &lt;code&gt;string&lt;/code&gt;, but it doesn't have to be the same type and you can even wrap multiple types into a much richer return value such as &lt;code&gt;Result&amp;lt;Option&amp;lt;Customer&amp;gt;, string list&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The type system in F# allows for even more flexibility. One can easily create a new type which truly represents all possible outcomes of a function like &lt;code&gt;getCustomerById&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;type DataResult&amp;lt;'T&amp;gt; =
    | Success         of 'T option
    | ValidationError of string
    | DataError       of Exception

let getCustomerById customerId =
    try
        match validateCustomerId customerId with
        | Error msg -&amp;gt; ValidationError msg
        | Ok    id  -&amp;gt;
            match db.TryFindCustomerById id with
            | true, customer -&amp;gt; Some customer
            | false, _       -&amp;gt; None
            |&amp;gt; Success
    with ex -&amp;gt; DataError ex
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The custom defined &lt;code&gt;DataResult&amp;lt;'T&amp;gt;&lt;/code&gt; type declares three distinctive cases which the calling code might want to treat differently. By explicitly declaring a type which represents all these possibilities we can model the &lt;code&gt;getCustomerById&lt;/code&gt; function in such a way that it removes all ambiguity about error- and edge case handling as well as preventing unexpected behaviour and forcing calling code to handle these cases.&lt;/p&gt;
&lt;h3&gt;F# makes invalid state impossible&lt;/h3&gt;
&lt;p&gt;So far we have always assumed that the &lt;code&gt;customerId&lt;/code&gt; is a value of type &lt;code&gt;string&lt;/code&gt;, but as we've seen this creates a lot of ambiguity around the allowed values for it and also forces a developer to write a lot of guard clauses to protect themselves from errors:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public Customer GetCustomerById(string customerId)
{
    if (customerId == null)
        throw new ArgumentNullException(nameof(customerId));

    if (customerId == &quot;&quot;)
        throw new ArgumentException(
            &quot;Customer ID cannot be empty.&quot;, nameof(customerId));

    if (customerId.Length != 10 || customerId.ToLower().StartsWith(&quot;c&quot;))
        throw new ArgumentException(
            &quot;Invalid customer ID&quot;, nameof(customerId));

    // do stuff...
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The correct way of avoiding this anti-pattern is to model the concept of a &lt;code&gt;CustomerId&lt;/code&gt; into its own type. In C# you can either create a &lt;code&gt;class&lt;/code&gt; or &lt;code&gt;struct&lt;/code&gt; to do so, but either way you'll end up writing a lot of boilerplate code to get the type to behave the way it should (eg. GetHashCode, Equality, ToString, etc.):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class CustomerId
{
    public string Value { get; }

    public CustomerId(string customerId)
    {
        if (customerId == null)
            throw new ArgumentNullException(nameof(customerId));

        if (customerId == &quot;&quot;)
            throw new ArgumentException(
                &quot;Customer ID cannot be empty.&quot;,
                nameof(customerId));

        var value = customerId.ToLower();

        if (value.Length != 10 || value.StartsWith(&quot;c&quot;))
            throw new ArgumentException(
                &quot;Invalid customer ID&quot;,
                nameof(customerId));

        Value = value;
    }

    // Lots of overrides to make a
    // CustomerId behave the correct way
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Needless to say that this is extremely annoying and the exact reason why it is so rarely seen in C#. Also a class is less favourable, because code which will accept a &lt;code&gt;CustomerId&lt;/code&gt; will still have to deal with the possibility of &lt;code&gt;null&lt;/code&gt;, which is not really a thing. A &lt;code&gt;CustomerId&lt;/code&gt; should never be &lt;code&gt;null&lt;/code&gt;, just like an &lt;code&gt;int&lt;/code&gt;, a &lt;code&gt;Guid&lt;/code&gt; or a &lt;code&gt;DateTime&lt;/code&gt; can never be &lt;code&gt;null&lt;/code&gt;. Once you've finished implementing a correct &lt;code&gt;CustomerId&lt;/code&gt; type in C# you'll end up with 200 lines of code which itself open up a lot of room for further errors.&lt;/p&gt;
&lt;p&gt;In F# we can define a new type as easily as this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;type CustomerId = private CustomerId of string
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This version of &lt;code&gt;CustomerId&lt;/code&gt; is basically a wrapper of &lt;code&gt;string&lt;/code&gt;, but provides additional type safety, because one couldn't accidentally assign a &lt;code&gt;string&lt;/code&gt; to a parameter of type &lt;code&gt;CustomerId&lt;/code&gt; or vice versa.&lt;/p&gt;
&lt;p&gt;The private access modifier prevents code from different modules or namespaces to create an object of type &lt;code&gt;CustomerId&lt;/code&gt;. This is intentional, because now we can force the creation via a specific function like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;module CustomerId =
    let create (customerId : string) =
        match customerId with
        | null -&amp;gt; Error &quot;Customer ID cannot be null.&quot;
        | &quot;&quot;   -&amp;gt; Error &quot;Customer ID cannot be empty.&quot;
        | id when id.Length &amp;lt;&amp;gt; 10 -&amp;gt; Error &quot;Invalid Customer ID.&quot;
        | _ -&amp;gt; Ok (CustomerId (customerId.ToLower()))
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above implementation is extremely efficient and almost free of any noise. As a developer I didn't have to write a lot of boilerplate code and was able to focus on the actual domain which is what I really want:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The system has a type called &lt;code&gt;CustomerId&lt;/code&gt;, which wraps a &lt;code&gt;string&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The only way to create a &lt;code&gt;CustomerId&lt;/code&gt; is via the &lt;code&gt;CustomerId.create&lt;/code&gt; function, which does all of the relevant checks before emitting an object of &lt;code&gt;CustomerId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If a &lt;code&gt;string&lt;/code&gt; violates the &lt;code&gt;CustomerId&lt;/code&gt; requirements then a meaningful &lt;code&gt;Error&lt;/code&gt; is returned and the calling code is forced to deal with this scenario.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CustomerId&lt;/code&gt; object is immutable and non-nullable. Once successfully created all subsequent code can confidently rely on correct state.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;CustomerId&lt;/code&gt; type automatically inherits all other behaviour from a &lt;code&gt;string&lt;/code&gt;, which means I didn't have to write a &lt;code&gt;GetHashCode&lt;/code&gt; implementation, equality overrides, operator overloads and all of the other nonsense which I would have to do in C#.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This is a perfect example where F# can provide a lot of value with very few lines of code. Also because there is not much code to begin with there is very little room for making a mistake. The only real mistake I could have made is in the actual implementation of the &lt;code&gt;CustomerId&lt;/code&gt; validation, which is more of a domain responsibility rather than a shortcoming of the language itself.&lt;/p&gt;
&lt;p&gt;C# developers are not very used to model real world concepts like a &lt;code&gt;CustomerId&lt;/code&gt;, an &lt;code&gt;OrderId&lt;/code&gt; or an &lt;code&gt;EmailAddress&lt;/code&gt; into their own types, because the language doesn't make it easy. These objects are often represented by very primitive types such as &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; and are being handled very loosely by the domain.&lt;/p&gt;
&lt;p&gt;If you would like to learn more about &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design&lt;/a&gt; in F# then I would highly recommend to watch &lt;a href=&quot;https://vimeo.com/223983252&quot;&gt;Scott Wlaschin's Domain Modeling Made Functional&lt;/a&gt; presentation from NDC London. This is a fantastic talk with lots of food for thought and also the source of some of the ideas which I have introduced in this article:&lt;/p&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/Up7LcbGZFuo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;h2 id=&quot;immutability-and-lack-of-nulls&quot;&gt;Immutability and lack of Nulls&lt;/h2&gt;
&lt;p&gt;One of the greatest features of F# is that &lt;strong&gt;objects in F# are immutable by default and cannot be null&lt;/strong&gt;. This makes it a lot easier to reason about code and also implement bug free applications. Not having to think twice if an object has changed state after passing it into a function or having to check for nulls has a huge impact on how easily someone can write reliable applications.&lt;/p&gt;
&lt;h3&gt;Saying goodbye to nulls&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare&quot;&gt;Tony Hoare&lt;/a&gt;, who invented (amongst many other great things) the null reference &lt;a href=&quot;https://en.wikipedia.org/wiki/Null_pointer#History&quot;&gt;called it his billion dollar mistake&lt;/a&gt;. He even apologised for the creation of &lt;code&gt;null&lt;/code&gt; during QCon London in 2009.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The problem with &lt;code&gt;null&lt;/code&gt; is that it doesn't reflect any real state and yet has too many meanings at the same time.&lt;/strong&gt; It's never clear if &lt;code&gt;null&lt;/code&gt; means &quot;unknown&quot;, &quot;empty&quot;, &quot;does not exist&quot;, &quot;not initialised&quot;, &quot;invalid&quot;, &quot;some other error&quot; or perhaps &quot;end of line/file/stream/etc.&quot;? Today's scholars agree that the existence of &lt;code&gt;null&lt;/code&gt; is certainly a mistake and hence why languages like &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/mt829270.aspx&quot;&gt;C# try to slowly move away from it in their upcoming versions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately F# never had nulls to begin with. The only way to force a &lt;code&gt;null&lt;/code&gt; into F# is by interoperating with C# and not properly fencing it off.&lt;/p&gt;
&lt;h3&gt;Immutability &amp;gt; Mutability&lt;/h3&gt;
&lt;p&gt;Mutability is another topic where functional programming really shines. The problem is not mutability per se, but &lt;strong&gt;whether objects are mutable by default or not&lt;/strong&gt; in a given language. It can only be one of the two and each programming language has to pick which one it wants it to be.&lt;/p&gt;
&lt;p&gt;Immutability has the benefit of making code a lot easier to understand. It also prevents a lot of errors, because no class, method or function can change the state of an object after it had been created. This is particularly useful when objects get passed around between many different methods where the internal implementation is not always known (third party code, etc.).&lt;/p&gt;
&lt;p&gt;On the other hand mutability doesn't have many benefits at all. It makes code arguably harder to follow, introduces a lot more ways for classes and methods to overstep their responsibility and lets poorly written libraries introduce unexpected behaviour. The small benefit of being able to directly mutate an object comes at a rather high cost.&lt;/p&gt;
&lt;p&gt;Now the question is which one is easier, change an object in an immutable-by-default language, or introduce immutability in a mutable-by-default one?&lt;/p&gt;
&lt;p&gt;I can quickly answer the first one by looking at F# and how it deals with the desire of changing an object's state. In F# mutations are performed by creating a new object with the modified values applied:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let c  = { Name = &quot;Susan Doe&quot;; Address = &quot;1 Street, London, UK&quot; }
let c' = { c with Address = &quot;3 Avenue, Oxford, UK&quot; }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is a very elegant solution which produces almost the same outcome as if mutability was allowed (but without the cost).&lt;/p&gt;
&lt;p&gt;Introducing immutability in C# is a little bit more awkward.&lt;/p&gt;
&lt;p&gt;C# has no language construct which allows one to create an immutable object out of the box. First I have to create a new type, but I cannot use a &lt;code&gt;class&lt;/code&gt;, because a &lt;code&gt;class&lt;/code&gt; is a reference type which could be &lt;code&gt;null&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt; can be assigned to an object after it had been created then it is not immutable:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Customer
{
    public string Name { get; set; }
    public string Address { get; set; }
}

// Somewhere later in the program:

var c = new Customer();
c = null;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This leads me to using a &lt;code&gt;struct&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public struct Customer
{
    public string Name { get; set; }
    public string Address { get; set; }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;null&lt;/code&gt; is not an issue anymore, but the properties still are:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var c = new Customer();
c.Name = &quot;Haha gotcha!&quot;;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let's make the setters private then:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public struct Customer
{
    public string Name { get; private set; }
    public string Address { get; private set; }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Better, but not immutable yet. One could still do something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public struct Customer
{
    public string Name { get; private set; }
    public string Address { get; private set; }

    public void ChangeName(string name)
    {
        Name = name;
    }
}

var c = new Customer();
c.ChangeName(&quot;Haha gotcha!&quot;);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is not that &lt;code&gt;ChangeName&lt;/code&gt; is public, but the fact that there is still a method which can alter the object's state after it was created.&lt;/p&gt;
&lt;p&gt;Let's introduce two private backing fields for the properties and remove the setters altogether:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public struct Customer
{
    private string _name;
    private string _address;

    public string Name { get { return _name; } }
    public string Address { get { return _address; } }

    public Customer(string name, string address)
    {
        _name = name;
        _address = address;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This looks perhaps better, but it's not (yet). A class member can still change the &lt;code&gt;_name&lt;/code&gt; and &lt;code&gt;_address&lt;/code&gt; fields from inside.&lt;/p&gt;
&lt;p&gt;We can fix this by making the fields &lt;code&gt;readonly&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public struct Customer
{
    private readonly string _name;
    private readonly string _address;

    public string Name { get { return _name; } }
    public string Address { get { return _address; } }

    public Customer(string name, string address)
    {
        _name = name;
        _address = address;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now this is immutable (at least for now), but a bit verbose. At this point we might as well collapse the properties into &lt;code&gt;public readonly&lt;/code&gt; fields:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public struct Customer
{
    public readonly string Name;
    public readonly string Address;

    public Customer(string name, string address)
    {
        Name = name;
        Address = address;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Alternatively with C# 6 (or later) we could also create readonly properties like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public struct Customer
{
    public string Name { get; }
    public string Address { get; }

    public Customer(string name, string address)
    {
        Name = name;
        Address = address;
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So far so good, but unless someone knows C# very well one could have easily gotten this wrong.&lt;/p&gt;
&lt;p&gt;Unfortunately real world applications are never this simple though.&lt;/p&gt;
&lt;p&gt;What if the &lt;code&gt;Customer&lt;/code&gt; type would look more like this?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class Address
{
    public string Street { get; set; }
}

public struct Customer
{
    public readonly string Name;
    public readonly Address Address;

    public Customer(string name, Address address)
    {
        Name = name;
        Address = address;
    }
}

var address = new Address { Street = &quot;Springfield Road&quot; };
var c = new Customer(&quot;Susan&quot;, address);
address.Street = &quot;Gotcha&quot;;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At this point it should be evident that introducing immutability in C# is not as straightforward as someone might have thought.&lt;/p&gt;
&lt;p&gt;This is another great example where the stark contrast between F# and C# really stands out. Writing correct code shouldn't be that hard and the language of choice can really make a difference.&lt;/p&gt;
&lt;h2 id=&quot;solid-made-easy-in-fsharp&quot;&gt;SOLID made easy in F#&lt;/h2&gt;
&lt;p&gt;Object oriented programming is all about producing &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID&quot;&gt;SOLID&lt;/a&gt; code. In order to understand and write decent C# one has to read at least five different books, &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_design_pattern&quot;&gt;study 20+ design patterns&lt;/a&gt;, follow &lt;a href=&quot;https://en.wikipedia.org/wiki/Composition_over_inheritance&quot;&gt;composition over inheritance&lt;/a&gt;, practise &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD&lt;/a&gt;, apply the &lt;a href=&quot;https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/&quot;&gt;onion architecture&lt;/a&gt;, layer everything into tiers, &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter&quot;&gt;MVP&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel&quot;&gt;MVVM&lt;/a&gt; and most importantly &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility&lt;/a&gt; all the things.&lt;/p&gt;
&lt;p&gt;We all know the importance of these principles, because they are vital in keeping object oriented code in maintainable shape. Object oriented developers are so used to practise these patterns that it is unimaginable to them that someone could possibly produce SOLID code without injecting everything through a constructor. I've been there myself. The first time I saw functional code it looked plain wrong to me. I think most C# developers are put off by F# when they look at functional code for the very first time and don't see anything which looks familiar to them. There is no classes, no constructors and most importantly no IoC containers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functional code is often mistaken for procedural code to the inexperienced eye&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In functional programming everything is a function. The only design pattern which someone has to know is that a function is a first class citizen. Functions can be composed, instantiated, partially applied, passed around and executed.&lt;/p&gt;
&lt;p&gt;There is this &lt;a href=&quot;https://www.slideshare.net/ScottWlaschin/fp-patterns-ndc-london2014&quot;&gt;famous slide&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/ScottWlaschin&quot;&gt;Scott Wlaschin&lt;/a&gt; which nicely sums it up:&lt;/p&gt;

&lt;p&gt;This slide deck is from Scott Wlaschin's &lt;a href=&quot;https://vimeo.com/113588389&quot;&gt;Functional programming design patterns&lt;/a&gt; talk which can be viewed on Vimeo.&lt;/p&gt;
&lt;h3&gt;To hell with interfaces&lt;/h3&gt;
&lt;p&gt;In C# everything requires an interface. For example if a method requires to support multiple sort algorithms then the &lt;a href=&quot;https://en.wikipedia.org/wiki/Strategy_pattern&quot;&gt;strategy pattern&lt;/a&gt; can help with this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface ISortAlgorithm
{
    List&amp;lt;int&amp;gt; Sort(List&amp;lt;int&amp;gt; values);
}

public class QuickSort : ISortAlgorithm
{
    public List&amp;lt;int&amp;gt; Sort(List&amp;lt;int&amp;gt; values)
    {
        // Do QuickSort
        return values;
    }
}

public class MergeSort : ISortAlgorithm
{
    public List&amp;lt;int&amp;gt; Sort(List&amp;lt;int&amp;gt; values)
    {
        // Do MergeSort
        return values;
    }
}

public void DoSomething(ISortAlgorithm sortAlgorithm, List&amp;lt;int&amp;gt; values)
{
    var sorted = sortAlgorithm.Sort(values);
}

public void Main()
{
    var values = new List&amp;lt;int&amp;gt; { 9, 1, 5, 7 };
    DoSomething(new QuickSort(), values);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In F# the same can be done with simple functions:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let quickSort values =
    values // Do QuickSort

let mergeSort values =
    values // Do MergeSort

let doSomething sortAlgorithm values =
    let sorted = sortAlgorithm values
    ()

let main =
    let values = [| 9; 1; 5; 7 |]
    doSomething quickSort values
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Functions in F#, which have the same signature, are interchangeable and don't require an explicit interface declaration. Both sort functions are therefore of type &lt;code&gt;int list -&amp;gt; int list&lt;/code&gt; and can be alternatively passed into the &lt;code&gt;doSomething&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;This is literally all it requires to implement the strategy pattern in in F#!&lt;/p&gt;
&lt;p&gt;Let's look at a slightly more complex example to really demonstrate the strengths of F#.&lt;/p&gt;
&lt;h3&gt;Everything is a function&lt;/h3&gt;
&lt;p&gt;One of the most useful patterns in C# and one of my personal favourites is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;decorator pattern&lt;/a&gt;. It allows adding additional functionality to an existing class without violating the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle&quot;&gt;open-closed principle&lt;/a&gt; of the SOLID guidelines. A password policy is a perfect example for this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface IPasswordPolicy
{
    bool IsValid(string password);
}

public class BasePolicy : IPasswordPolicy
{
    public bool IsValid(string password)
    {
        return true;
    }
}

public class MinimumLengthPolicy : IPasswordPolicy
{
    private readonly int _minLength;
    private readonly IPasswordPolicy _nextPolicy;

    public MinimumLengthPolicy(int minLength, IPasswordPolicy nextPolicy)
    {
        _minLength = minLength;
        _nextPolicy = nextPolicy;
    }

    public bool IsValid(string password)
    {
        return
            password != null
            &amp;amp;&amp;amp; password.Length &amp;gt;= _minLength
            &amp;amp;&amp;amp; _nextPolicy.IsValid(password);
    }
}

public class MustHaveDigitsPolicy : IPasswordPolicy
{
    private readonly IPasswordPolicy _nextPolicy;

    public MustHaveDigitsPolicy(IPasswordPolicy nextPolicy)
    {
        _nextPolicy = nextPolicy;
    }

    public bool IsValid(string password)
    {
        if (password == null) return false;

        return password.ToCharArray().Any(c =&amp;gt; char.IsDigit(c))
            &amp;amp;&amp;amp; _nextPolicy.IsValid(password);
    }
}

public class MustHaveUppercasePolicy : IPasswordPolicy
{
    private readonly IPasswordPolicy _nextPolicy;

    public MustHaveUppercasePolicy(IPasswordPolicy nextPolicy)
    {
        _nextPolicy = nextPolicy;
    }

    public bool IsValid(string password)
    {
        if (password == null) return false;

        return password.ToCharArray().Any(c =&amp;gt; char.IsUpper(c))
            &amp;amp;&amp;amp; _nextPolicy.IsValid(password);
    }
}

public class Programm
{
    public void Main()
    {
        var passwordPolicy =
            new MustHaveDigitsPolicy(
                new MustHaveUppercasePolicy(
                    new MinimumLengthPolicy(
                        8, new BasePolicy())));

        var result = passwordPolicy.IsValid(&quot;Password1&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;During the instantiation of the &lt;code&gt;passwordPolicy&lt;/code&gt; object one can decide which policies to use. A different password policy can be created without having to modify a single class. While this works really well in C#, it is also extremely verbose. There is a lot of code which had to be written for arguably little functionality at this point. I also had to use an additional interface and constructor injection to glue policies together. The &lt;code&gt;passwordPolicy&lt;/code&gt; variable is of type &lt;code&gt;IPasswordPolicy&lt;/code&gt; and can be injected anywhere a password policy is required. This is as good as it gets in C#.&lt;/p&gt;
&lt;p&gt;The only thing which I could have possibly improved (by writing a lot more boilerplate code) would have been to add additional syntactic sugar to compose a policy like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;var passwordPolicy =
    Policy.Create()
        .MustHaveMinimumLength(8)
        .MustHaveDigits()
        .MustHaveUppercase();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In F# the equivalent implementation is &quot;just&quot; functions again:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let mustHaveUppercase (password : string) =
    password.ToCharArray()
    |&amp;gt; Array.exists Char.IsUpper

let mustHaveDigits (password : string) =
    password.ToCharArray()
    |&amp;gt; Array.exists Char.IsDigit

let mustHaveMinimumLength length (password : string) =
    password.Length &amp;gt;= length

let isValidPassword (password : string) =
    mustHaveMinimumLength 8 password
    &amp;amp;&amp;amp; mustHaveDigits password
    &amp;amp;&amp;amp; mustHaveUppercase password
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Just like in C# the &lt;code&gt;passwordPolicy&lt;/code&gt; object implemented the &lt;code&gt;IPasswordPolicy&lt;/code&gt; interface, the &lt;code&gt;isValidPassword&lt;/code&gt; function implements the &lt;code&gt;string -&amp;gt; bool&lt;/code&gt; signature which therefore can be interchanged with any other function which also implements &lt;code&gt;string -&amp;gt; bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The F# solution is almost embarrassingly easy when compared to the overly complex one in C#. Yet I didn't have to compromise on any of the SOLID principles. Each function validates a single requirement (single responsibility) and can be tested in isolation. They can be swapped or mocked for any other function which also implements &lt;code&gt;string -&amp;gt; bool&lt;/code&gt; and I can create multiple new policies without having to modify existing code (open closed principle):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let isValidPassword2 (password : string) =
    mustHaveMinimumLength 12 password
    &amp;amp;&amp;amp; mustHaveUppercase password
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Inversion of Control made functional&lt;/h3&gt;
&lt;p&gt;The only pattern which a functional developer has to understand is functions. To prove my point one last time I'll explore the &lt;a href=&quot;https://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of Control principle&lt;/a&gt; next.&lt;/p&gt;
&lt;p&gt;First let's be clear what the Inversion of Control principle is, because many developers wrongly confuse it with the dependency injection pattern. The Inversion of Control principle states that a class shall never instantiate its own dependencies itself. &lt;a href=&quot;https://martinfowler.com/&quot;&gt;Martin Fowler&lt;/a&gt; uses the term &lt;a href=&quot;https://martinfowler.com/bliki/InversionOfControl.html&quot;&gt;Hollywood Principle&lt;/a&gt; as in &lt;em&gt;&quot;Don't call us, we'll call you&quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are three distinctive design patterns which follow the IoC principle:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Dependency Injection&lt;/li&gt;
&lt;li&gt;Factory&lt;/li&gt;
&lt;li&gt;Service Locator&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;a href=&quot;http://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/&quot;&gt;Service Locator is considered an anti pattern&lt;/a&gt; so I won't go any further here.&lt;/p&gt;
&lt;p&gt;The Factory pattern consists of two further sub-patterns:&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; pattern breaks down into three more sub-patterns:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Constructor Injection&lt;/li&gt;
&lt;li&gt;Method Injection&lt;/li&gt;
&lt;li&gt;Property Injection&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Despite &lt;a href=&quot;https://martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&quot;&gt;Constructor Injection&lt;/a&gt; being the most popular IoC pattern in object oriented programming, it is only one of many other patterns which follow the Dependency Inversion Principle. Each of these patterns is extremely useful and satisfies a specific use case which Constructor Injection couldn't do on its own.&lt;/p&gt;
&lt;p&gt;This has nothing to do with F# directly, but I wanted to underline how the sheer number of different design patterns can sometimes be very confusing. It may take years for an OO software engineer to fully grasp the vast amount of concepts and understand how and when they play an important role.&lt;/p&gt;
&lt;p&gt;Now that I got this out of the way let's take a look at how C# handles Dependency Injection via Constructor Injection:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public interface INotificationService
{
    void SendMessage(Customer customer, string message);
}

public class OrderService
{
    private readonly INotificationService _notificationService;

    public OrderService(INotificationService notificationService)
    {
        _notificationService =
            notificationService
            ?? throw new ArgumentNullException(
                nameof(notificationService));
    }

    public void CompleteOrder(Customer customer, ShoppingBasket basket)
    {
        // Do stuff

        _notificationService.SendMessage(customer, &quot;Your order has been received.&quot;);
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Nothing should be surprising here. The &lt;code&gt;OrderService&lt;/code&gt; has a dependency on an object of type &lt;code&gt;INotificationService&lt;/code&gt; which is responsible for sending order updates to a customer.&lt;/p&gt;
&lt;p&gt;There could be multiple implementations of the &lt;code&gt;INotificationService&lt;/code&gt;, such as an &lt;code&gt;SmsNotificationService&lt;/code&gt; or an &lt;code&gt;EmailNotificationService&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;public class EmailNotificationService : INotificationService
{
    private readonly EmailSettings _settings;

    public EmailNotificationService(EmailSettings settings)
    {
        _settings = settings;
    }

    public void SendMessage(Customer customer, string message)
    {
        // Do stuff
    }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Typically in C# these dependencies would get registered in an IoC container. I've skipped this part in order to keep the C# implementation small as it's already becoming large.&lt;/p&gt;
&lt;p&gt;Now let's take a look at how dependency injection can be done in F#:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let sendEmailNotification emailSettings customer message =
    ()

let sendSmsNotification smsService apiKey customer message =
    ()

let completeOrder notify customer shoppingBasket =
    notify customer &quot;Your order has been received.&quot;
    ()
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That's it - Dependency Injection in functional programming is achieved by simply passing one function into another (basically what I've already been doing in the examples before)!&lt;/p&gt;
&lt;p&gt;The only difference here is that the &lt;code&gt;sendEmailNotification&lt;/code&gt; and &lt;code&gt;sendSmsNotification&lt;/code&gt; functions do not share the same signature at the moment. Not only is &lt;code&gt;emailSettings&lt;/code&gt; of a different type than &lt;code&gt;smsService&lt;/code&gt;, but both functions also differ in the number of parameters they need. The &lt;code&gt;sendEmailNotification&lt;/code&gt; function requires three parameters in total and the &lt;code&gt;sendSmsNotification&lt;/code&gt; requires four. Furthermore the &lt;code&gt;notify&lt;/code&gt; parameter of the &lt;code&gt;completeOrder&lt;/code&gt; function doesn't know which concrete function will be injected and therefore doesn't care about anything except the &lt;code&gt;Customer&lt;/code&gt; object and the &lt;code&gt;string&lt;/code&gt; message. So how does it work?&lt;/p&gt;
&lt;p&gt;The answer is &lt;strong&gt;partial application&lt;/strong&gt;. In functional programming one can partially apply parameters of one function in order to generate a new one:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let sendEmailFromHotmailAccount =
    // Here I only apply the `emailSettings` parameter:
    sendEmailNotification hotmailSettings

let sendSmsWithTwillio =
    // Here I only apply the `smsService` and `apiKey` parameters:
    sendSmsNotification twilioService twilioApiKey
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After partially applying both functions the newly created &lt;code&gt;sendEmailFromHotmailAccount&lt;/code&gt; and &lt;code&gt;sendSmsWithTwillio&lt;/code&gt; functions share the same signature again:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Customer -&amp;gt; string -&amp;gt; unit
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now both functions can be passed into the &lt;code&gt;completeOrder&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;There is no need for an IoC container either. If one doesn't want to repeatedly pass all dependencies into the &lt;code&gt;completeOrder&lt;/code&gt; function then partial application can be utilised once again:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let completeOrderAndNotify =
    emailSettings
    |&amp;gt; sendEmailNotification
    |&amp;gt; completeOrder

// Later in the program one would use:

completeOrderAndNotify customer shoppingBasket
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we compare this solution to the one from C# then there isn't much of a difference (except for simplicity). Classes mainly require their dependencies to be injected through their constructor and functions take other functions as a dependency. In C# all dependencies get registered only once at IoC container level. In F# all dependencies get &quot;registered&quot; only once through partial application. In both cases one can create mocks, stubs and fakes for their dependencies and unit test each class or function in isolation.&lt;/p&gt;
&lt;p&gt;There is a few advantages with the functional approach though:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Dependencies can get &quot;registered&quot; (partially applied) closer to the functions where they belong.&lt;/li&gt;
&lt;li&gt;Simpler by having a lot less code.&lt;/li&gt;
&lt;li&gt;No additional (third party) IoC container required.&lt;/li&gt;
&lt;li&gt;Dependency Injection is a pattern which has to be taught in OO programming whereas passing a function into another function is the most fundamental/normal thing one could do in functional programming.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://blog.ploeh.dk/&quot;&gt;Mark Seeman&lt;/a&gt;, author of &lt;a href=&quot;https://www.manning.com/books/dependency-injection-in-dot-net&quot;&gt;Dependency Injection in .NET&lt;/a&gt;, did a fantastic talk on more advanced dependency patterns in F#. Watch his talk &quot;&lt;a href=&quot;https://www.youtube.com/watch?v=xG5qP5AWQws&quot;&gt;From dependency injection to dependency rejection&lt;/a&gt;&quot; on YouTube:&lt;/p&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/xG5qP5AWQws&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;h2 id=&quot;simplicity&quot;&gt;Simplicity&lt;/h2&gt;
&lt;p&gt;If there is one theme which has been consistent throughout this blog post then it must be the remarkable simplicity of F#. No matter if it is creating a new immutable type, expressing the true state of a function, modelling a domain or applying advanced programming patterns, F# always seems to have a slight edge over C#.&lt;/p&gt;
&lt;p&gt;The abstinence of classes, complex design patterns, IoC containers, mutability, inheritance, overrides and interfaces has a few more benefits which come extremely handy at work.&lt;/p&gt;
&lt;p&gt;First there is a lot less code to write. This makes applications smaller, faster to comprehend and much easier to maintain.&lt;/p&gt;
&lt;p&gt;Secondly it allows for blazingly fast prototyping. In F# one can very quickly hack one function after another until a desired prototype has been reached. Furthermore, the additional work to transition from prototype to production is almost nothing. Since everything is a function and gets naturally compartmentalised into smaller functions the difference between a prototype- and a production-ready function is often very little.&lt;/p&gt;
&lt;h2 id=&quot;asynchronous-programming&quot;&gt;Asynchronous programming&lt;/h2&gt;
&lt;p&gt;Speaking of simplicity, F# makes asynchronous programming strikingly easy:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let readFileAsync fileName =
    async {
        use stream = File.OpenRead(fileName)
        let! content = stream.AsyncRead(int stream.Length)
        return content
    }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is a lot of great content available which explains the differences and benefits of F#'s asynchronous programming model so that I won't rehash everything again, but I would highly recommend to read &lt;a href=&quot;http://tomasp.net/&quot;&gt;Thomans Petricek&lt;/a&gt;'s article on &lt;a href=&quot;http://tomasp.net/blog/csharp-async-gotchas.aspx/&quot;&gt;Async in C# and F#: Asynchronous gotchas in C#&lt;/a&gt;, followed by his blog series on &lt;a href=&quot;http://tomasp.net/blog/csharp-fsharp-async-intro.aspx/&quot;&gt;Asynchronous C# and F#&lt;/a&gt;, including &lt;a href=&quot;http://tomasp.net/blog/async-csharp-differences.aspx/&quot;&gt;How do they differ?&lt;/a&gt; and &lt;a href=&quot;http://tomasp.net/blog/async-compilation-internals.aspx/&quot;&gt;How does it work?&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;net-core&quot;&gt;.NET Core&lt;/h2&gt;
&lt;p&gt;So far I've talked mostly about generic concepts of the functional programming paradigm, but there is a wealth of benefits which come specifically with F#. The obvious one is &lt;a href=&quot;https://github.com/dotnet/core&quot;&gt;.NET Core&lt;/a&gt;. As we all know Microsoft is putting a lot of work into their new open source, cross platform, multi language runtime.&lt;/p&gt;
&lt;p&gt;F# is part of .NET and therefore runs on all .NET runtimes, which include &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Core&quot;&gt;.NET Core&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/.NET_Framework&quot;&gt;.NET Framework&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Xamarin&quot;&gt;Xamarin&lt;/a&gt; (Mono). This means that anyone can develop F# on either Windows, Linux or macOS. It also means that F# developers have access to a large eco system of extremely mature and high quality libraries. Because F# is a multi paradigm language (yes you can write object oriented code too if you want) it can reference and call into any third party package no matter if it was written in F#, C# or VB.NET.&lt;/p&gt;
&lt;h2 id=&quot;open-source&quot;&gt;Open Source&lt;/h2&gt;
&lt;p&gt;Long time before Microsoft embraced the OSS community they debuted with F# as their first language which was born out of &lt;a href=&quot;https://www.microsoft.com/en-us/research/&quot;&gt;Microsoft Research&lt;/a&gt; as an open source project from the get go. The open source community behind F# is very strong, with many contributions coming from outside Microsoft and driving the general direction of the language.&lt;/p&gt;
&lt;p&gt;You can find all &lt;a href=&quot;https://github.com/fsharp&quot;&gt;F# source code&lt;/a&gt; hosted on GitHub and start contributing by submitting an &lt;a href=&quot;https://github.com/fsharp/fslang-suggestions&quot;&gt;F# language suggestion&lt;/a&gt; first. When a suggestion gets approved then an &lt;a href=&quot;https://github.com/fsharp/fslang-design/tree/master/RFCs&quot;&gt;RFC&lt;/a&gt; gets created with a corresponding &lt;a href=&quot;https://github.com/fsharp/fslang-design/issues&quot;&gt;discussion thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The F# language is under the direction of the &lt;a href=&quot;https://fsharp.org/&quot;&gt;F# Foundation&lt;/a&gt; with strong backing by Microsoft who is still the main driver of development.&lt;/p&gt;

&lt;p&gt;There is no match when it comes to tooling. Microsoft's .NET languages have always benefited from excellent tooling. &lt;a href=&quot;https://visualstudio.microsoft.com/vs/&quot;&gt;Visual Studio&lt;/a&gt; was the uncontested leader for a long time, but in recent years the competition has racked up. &lt;a href=&quot;https://www.jetbrains.com/&quot;&gt;JetBrains&lt;/a&gt;, the company who invented &lt;a href=&quot;https://www.jetbrains.com/resharper/&quot;&gt;ReSharper&lt;/a&gt;, has released a new IntelliJ driven cross platform IDE called &lt;a href=&quot;https://www.jetbrains.com/rider/&quot;&gt;Rider&lt;/a&gt;. Meanwhile Microsoft developed a new open source editor called &lt;a href=&quot;https://github.com/Microsoft/vscode&quot;&gt;Code&lt;/a&gt;. &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; has quickly emerged as the &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/#technology-most-popular-development-environments&quot;&gt;most popular development environment&lt;/a&gt; amongst programmers and boasts a huge marketplace of useful plugins. Thanks to &lt;a href=&quot;https://twitter.com/k_cieslak&quot;&gt;Krzysztof Cieślak&lt;/a&gt; there is a superb extension called &lt;a href=&quot;http://ionide.io/&quot;&gt;Ionide&lt;/a&gt; for F#.&lt;/p&gt;
&lt;p&gt;Visual Studio, JetBrains Rider and Visual Studio Code with Ionide are three of the world's best programming IDEs which are cross platform compatible, run on all major operating systems and support F#.&lt;/p&gt;
&lt;h2 id=&quot;fsharp-conquering-the-web&quot;&gt;F# conquering the web&lt;/h2&gt;
&lt;p&gt;As I mentioned at the very beginning F# is not just a language for algebraic stuff. Functional programming in general is a perfect fit for anything web related. A web application is basically a large function with a single parameter input (HTTP request) and a single parameter output (HTTP response).&lt;/p&gt;
&lt;h3&gt;F# on the Backend&lt;/h3&gt;
&lt;p&gt;F# has an abundance of diverse and feature rich web frameworks. My personal favourite is a library called &lt;a href=&quot;https://github.com/giraffe-fsharp/Giraffe&quot;&gt;Giraffe&lt;/a&gt; (disclaimer: I am the core maintainer of this project). &lt;a href=&quot;https://github.com/giraffe-fsharp/Giraffe&quot;&gt;Giraffe&lt;/a&gt; sits on top of &lt;a href=&quot;https://www.asp.net/core&quot;&gt;ASP.NET Core&lt;/a&gt;, which means that it mostly piggybacks off the entire ASP.NET Core environment, its performance attributes and community contributions. In Giraffe a web application is composed through a combination of many smaller functions which get glued together via the Kleisli operator:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;let webApp =
    choose [
        GET &amp;gt;=&amp;gt;
            choose [
                route &quot;/ping&quot; &amp;gt;=&amp;gt; text &quot;pong&quot;
                route &quot;/&quot;     &amp;gt;=&amp;gt; htmlFile &quot;/pages/index.html&quot;
            ]
        POST &amp;gt;=&amp;gt; route &quot;/submit&quot; &amp;gt;=&amp;gt; text &quot;Successful&quot; ]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/giraffe-fsharp/Giraffe&quot;&gt;Giraffe&lt;/a&gt; has also recently joined the &lt;a href=&quot;https://www.techempower.com/benchmarks/#section=data-r17&amp;amp;hw=ph&amp;amp;test=plaintext&quot;&gt;TechEmpower Web Framework Benchmarks&lt;/a&gt; and ranks with a total of &lt;strong&gt;1,649,957 req/sec&lt;/strong&gt; as one of the fastest functional web frameworks available.&lt;/p&gt;
&lt;p&gt;However, if Giraffe is not to your taste then there are many other great F# web libraries available:&lt;/p&gt;
&lt;p&gt;ASP.NET Core and ASP.NET Core MVC are also perfectly compatible with F#.&lt;/p&gt;
&lt;h3&gt;F# on the Frontend&lt;/h3&gt;
&lt;p&gt;After F# set its mark on the server side of things it has also seen a lot of innovation on the frontend of the web.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://fable.io/&quot;&gt;Fable&lt;/a&gt; is an F# to JavaScript transpiler which is built on top of &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;, which itself is an extremely advanced JavaScript compiler. Babel, which is hugely popular and &lt;a href=&quot;https://opencollective.com/babel#contributors&quot;&gt;backed by large organisations&lt;/a&gt; such as Google, AirBnb, Adobe, Facebook, trivago and many more, is doing the heavy lifting of the compilation, whereas Fabel is transpiling from F# to Babel's own abstract syntax tree. In simple terms you get the power of F# combined with the maturity and stability of Babel which allows you to write rich frontends in F#. &lt;a href=&quot;https://twitter.com/alfonsogcnunez&quot;&gt;Alfonso Garcia-Caro&lt;/a&gt; has done a magnificent job in merging the F# and JavaScript communities and recently &lt;a href=&quot;https://fable.io/blog/Introducing-2-0-beta.html&quot;&gt;released Fable 2&lt;/a&gt; which comes with a two-fold speed boost as well as a 30%-40% reduced bundle size.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fable-compiler/Fable&quot;&gt;Fable&lt;/a&gt; and &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; are also open source and have a thriving commumity behind them.&lt;/p&gt;
&lt;p&gt;On a complete different front Microsoft has worked on a new project called &lt;a href=&quot;https://github.com/aspnet/Blazor&quot;&gt;Balzor&lt;/a&gt;. Blazor is a single-page web application framework built on .NET that runs in the browser with WebAssembly. It supports all major .NET languages including F# and is &lt;a href=&quot;https://blogs.msdn.microsoft.com/webdev/2018/11/15/blazor-0-7-0-experimental-release-now-available/&quot;&gt;currently in beta&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the availability of Fabel and Blazor there is a huge potential of what an F# developer can do on the web today.&lt;/p&gt;
&lt;h2 id=&quot;fsharp-everywhere&quot;&gt;F# Everywhere&lt;/h2&gt;
&lt;p&gt;F# is one of very few languages which can truly run anywhere! Thanks to &lt;a href=&quot;https://dotnet.microsoft.com/&quot;&gt;.NET Core&lt;/a&gt; one can develop F# on any OS and run on any system. It can run natively on Windows, Linux and macOS or via a &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; container in a &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; cluster. You can also run F# serverless functions in &lt;a href=&quot;https://aws.amazon.com/lambda/&quot;&gt;AWS Lambda&lt;/a&gt; or &lt;a href=&quot;https://azure.microsoft.com/en-gb/services/functions/&quot;&gt;Azure Functions&lt;/a&gt;. &lt;a href=&quot;https://visualstudio.microsoft.com/xamarin/&quot;&gt;Xamarin App Development&lt;/a&gt; brings F# to Android, iOS and Windows apps, and &lt;a href=&quot;https://fable.io/&quot;&gt;Fable&lt;/a&gt; and &lt;a href=&quot;https://blazor.net/&quot;&gt;Blazor&lt;/a&gt; into the browser. Since &lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/&quot;&gt;.NET Core 2.1&lt;/a&gt; one can even run F# on &lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; and &lt;a href=&quot;https://www.arm.com/&quot;&gt;ARM&lt;/a&gt;! Machine learning, IoT and games are yet other areas where F# can be used today.&lt;/p&gt;
&lt;p&gt;The list of supported platforms and architectures has been growing every year and I'm sure it will expand even further in the future!&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot;&gt;Final Words&lt;/h2&gt;
&lt;p&gt;I've meant to write this blog post for a long time but never found the time to do it up until recently. My background is mainly C#, which is what I have been programming for more than ten years now and what I am still doing today. In the last three years I have taught myself F# and fallen madly in love with it. As a convert I get often asked what I like about F# and therefore I decided to put everything into writing. The list is obviously not complete and only a recollection of my own take on the main benefits of F#. If you think that I have missed something then please do not hesitate and let me know in the comments below. I see this blog post as an ever evolving resource where I hope I can point people to who have an interest in F#.&lt;/p&gt;
&lt;p&gt;This blog post is also part of the &lt;a href=&quot;https://sergeytihon.com/2018/10/22/f-advent-calendar-in-english-2018/&quot;&gt;F# Advent Calendar 2018&lt;/a&gt; which has been kindly organised by &lt;a href=&quot;https://sergeytihon.com/&quot;&gt;Sergey Tihon&lt;/a&gt; again. Sergey does not only organise the &lt;a href=&quot;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&quot;&gt;yearly F# Advent Calendar&lt;/a&gt;, but also runs a &lt;a href=&quot;https://sergeytihon.com/category/f-weekly/&quot;&gt;weekly F#&lt;/a&gt; newsletter. &lt;a href=&quot;https://sergeytihon.com/&quot;&gt;Subscribe to his newsletter&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/sergey_tihon&quot;&gt;follow him on Twitter&lt;/a&gt; and stay up to date with the latest developments on F#!&lt;/p&gt;
&lt;h2 id=&quot;useful-resources&quot;&gt;Useful Resources&lt;/h2&gt;
&lt;h3&gt;Blog and Websites&lt;/h3&gt;
&lt;h3&gt;Videos&lt;/h3&gt;
&lt;h3&gt;Books&lt;/h3&gt;
&lt;h3&gt;Conferences&lt;/h3&gt;
&lt;footer/&gt;</description>
<pubDate>Tue, 18 Dec 2018 13:28:47 +0000</pubDate>
<dc:creator>aloisdg</dc:creator>
<og:title>Why you should learn F# - Dusted Codes</og:title>
<og:url>https://dusted.codes/why-you-should-learn-fsharp</og:url>
<og:type>website</og:type>
<og:image>https://storage.googleapis.com/dusted-codes/stock-images/img1.jpg</og:image>
<og:description>If you were thinking of learning a new programming language in 2019 then I would highly recommend t...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://dusted.codes/why-you-should-learn-fsharp</dc:identifier>
</item>
<item>
<title>Glitter bomb tricks parcel thieves</title>
<link>https://www.bbc.com/news/technology-46604625</link>
<guid isPermaLink="true" >https://www.bbc.com/news/technology-46604625</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Mark Rober youtube&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/160A3/production/_104857209_mediaitem104857208.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Mark Rober&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Mark Rober worked on the Mars Curiosity Rover at Nasa
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;A former Nasa engineer spent six months building a glitter bomb trap to trick thieves after some parcels were stolen from his doorstep.&lt;/p&gt;&lt;p&gt;The device, hidden in an Apple Homepod box, used four smartphones, a circuit board and 1lb (453g) of glitter.&lt;/p&gt;&lt;p&gt;Mark Rober, who is now a YouTuber, caught the original thieves on his home security camera.&lt;/p&gt;&lt;p&gt;He decided to take action after the police said they were unable to investigate the case.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Smelly surprise&lt;/h2&gt;&lt;p&gt;He designed the elaborate bomb so that it would be activated when the package in which it was hidden was opened by thieves. The phone cameras and microphones would record the moment. &lt;/p&gt;&lt;p&gt;The device contained an accelerometer to detect motion.&lt;/p&gt;&lt;p&gt;When the parcel was jostled, the device would check the GPS signal to see if it had been moved from its spot.&lt;/p&gt;&lt;p&gt;If it had, then it would send a signal to activate the phones and start recording.&lt;/p&gt;&lt;p&gt;The glitter was in a cup that spun round on a motor when released as the box was opened.&lt;/p&gt;&lt;p&gt;The device was also engineered to squirt a tube of strong-smelling fart spray every 30 seconds.&lt;/p&gt;&lt;p&gt;The package was left on Mr Rober's porch with a label saying it had been sent by &quot;Kevin McCallister&quot; - the boy played by Macaulay Culkin in the 1990 movie Home Alone.&lt;/p&gt;&lt;p&gt;It was stolen on several occasions and re-set to explode and capture the footage every time. On every occasion, the thieves abandoned the package once it had been triggered and they or their property had been doused in glitter.&lt;/p&gt;&lt;p&gt;Mr Rober's YouTube video has so far had more than six million views.&lt;/p&gt;&lt;p&gt;The former Nasa engineer said: &quot;If anyone was going to make a revenge bait package and over-engineer the crap out of it, it was going to be me.&quot;&lt;/p&gt;&lt;p&gt;Last week, Amazon announced that it is &lt;a href=&quot;https://www.bbc.co.uk/news/technology-46552611&quot; class=&quot;story-body__link&quot;&gt;working with police in New Jersey to combat parcel theft crime&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Officers are planting dummy boxes fitted with GPS trackers, and hidden doorbell cameras outside homes in areas identified by mapping data of theft locations supplied by Amazon as well as local crime data.&lt;/p&gt;&lt;p&gt;One of the parcels was stolen within three minutes.&lt;/p&gt;
            </description>
<pubDate>Tue, 18 Dec 2018 13:16:46 +0000</pubDate>
<dc:creator>tartoran</dc:creator>
<og:title>Glitter bomb tricks parcel thieves</og:title>
<og:type>article</og:type>
<og:description>A former Nasa engineer spent six months building a disguised glitter bomb to surprise thieves stealing parcels from his doorstep.</og:description>
<og:url>https://www.bbc.com/news/technology-46604625</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/160A3/production/_104857209_mediaitem104857208.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/technology-46604625</dc:identifier>
</item>
<item>
<title>Reasons Python Sucks</title>
<link>https://www.hackerfactor.com/blog/index.php?/archives/825-8-Reasons-Python-Sucks.html</link>
<guid isPermaLink="true" >https://www.hackerfactor.com/blog/index.php?/archives/825-8-Reasons-Python-Sucks.html</guid>
<description>Occasionally I go out to lunch with some of my techie friends and we have a great time geeking together. We talk about projects, current events, and various tech-related issues. Inevitably, the discussion will turn to programming languages. One might lament &quot;I have to modify some Java code. I hate Java. (Oh, sorry, Kyle.)&quot; (It probably doesn't help that we gave Kyle the nickname &quot;Java-boy&quot; over a decade ago.) Another will gripe about some old monolithic shell code that nobody wants to rewrite.&lt;p&gt;And me, well... I just blurted it out: I hate Python. I hate it with a passion. If I have the choice between using some pre-existing Python code or rewriting it in C, I'd rather rewrite it in C.&lt;/p&gt;&lt;p&gt;When I finished shouting, Bill humorously added, &quot;But what do you &lt;em&gt;really&lt;/em&gt; think about Python, Neal?&quot; So I'm dedicating this blog entry to Bill.&lt;/p&gt;&lt;p&gt;Here's my list of &quot;8 reasons Python sucks&quot;.&lt;/p&gt;&lt;h3&gt;Reason 1: Versions&lt;/h3&gt;
If you install a default Linux operating system, there's a really good chance that it will install multiple versions of Python. It will probably have Python2 and Python3, and maybe even some fractional versions like 3.5 or 3.7. There's a reason for this: Python3 is not fully compatible with Python2. Even some of the fractional versions are distinct enough to lack backwards compatibility.&lt;p&gt;I'm all for adding new functionality to languages. I don't even mind if some old version becomes obsolete. However, Python installs in separate installations. My code for Python 3.5 won't work with the Python 3.7 installation unless I intentionally port it to 3.7. Enough Linux developers have decided that porting isn't worth the effort, so Ubuntu installs with both Python2 and Python3 -- because they are needed by different core functions.&lt;/p&gt;&lt;p&gt;This lack of backwards compatibility and split versions is usually a death knell. Commodore created one of the first home computers (long before the IBM PC or Apple). But the Commodore PET wasn't compatible with the subsequent Commodore CBM computer. And the CBM wasn't compatible with the VIC-20, Commodore-64, Amiga, etc. So either you spent a lot of time porting code from one platform to another, or you abandoned the platform. (Where's Commodore today? It died out as users abandoned the platform.)&lt;/p&gt;&lt;p&gt;Similarly, Perl used to be very popular. But when Perl3 came out, it wasn't fully backwards compatible with a lot of Perl2 code. The community griped, good code was ported, and the rest was abandoned. Then came Perl4 and the same thing happened. When Perl5 came out, a lot of people just switched to a different programming language that was more stable. Today, there's only a small community of people actively using Perl to maintain existing Perl projects. I haven't seen any major new projects based on Perl.&lt;/p&gt;&lt;p&gt;By the same means, Python has distinct silos of code for each version. And the community keeps dragging along the old versions. So you end up with a lot of old, dead Python code that keeps getting dragged along because nobody wants to spend the time porting it to the latest version. As far as I can tell, nobody creates new code for Python2, but we drag it along because nobody's ported the needed code to Python3.x. At the official &lt;a href=&quot;https://docs.python.org/3/&quot;&gt;Python web site&lt;/a&gt;, their documentation is actively maintained and available for Python 2.7, 3.5, 3.6, and 3.7 -- because they can't decide to give up on the old code. Python is like the zombie of programming languages -- the dead just keep walking on.&lt;/p&gt;&lt;h3&gt;Reason 2: Installation&lt;/h3&gt;
With most software packages, you can easily run apt, yum, rpm, or some other install base and get the most recent code. That isn't the case with Python. If you install using 'apt-get install python', you don't know what version you're actually installing, and it may not be compatible with all of the code you need.&lt;p&gt;So instead, you install the version of Python you need. For one of the projects I was on, we used Python. But we had to use Python3.5 (the latest at that time). My computer ended up with Python2, Python2.6, Python3, and Python3.5 installed. Two were from the operating system, one was for the project, and one came in because of some unrelated software I installed for some other reason. Even though they are all &quot;Python&quot;, they are not all the same.&lt;/p&gt;&lt;p&gt;If you want to install packages for Python, you're supposed to use &quot;pip&quot;. (Pip stands for &quot;Pip Installs Packages&quot;, because someone thinks recursive acronyms are still funny.) But since there's a bunch of versions of Python on the system, you have to remember to use the correct version of pip. Otherwise, 'pip' might run 'pip2' and not the 'pip3.7' that you need. (And you need to specify the actual path for pip3.7 if the name doesn't exist.)&lt;/p&gt;&lt;p&gt;I was advised by one teammate that I needed to &lt;a href=&quot;https://docs.python-guide.org/dev/virtualenvs/&quot;&gt;configure my environment&lt;/a&gt; so that everything uses the Python 3.5 base. This worked great until I started on a second project that needed Python 3.6. Two concurrent projects with two different versions of Python -- no, that wasn't confusing. (What's the emoticon for sarcasm?)&lt;/p&gt;&lt;p&gt;The pip installer places files in the user's local directory. You don't use pip to install system-wide libraries. And Gawd forbid you make the mistake of running 'sudo pip', because that can screw up your entire computer! Running sudo might make some packages install at the system level, some install for the wrong version of Python, and some files in your home directory might end up being owned by root, so future non-sudo pip installs may fail due to permissions. Just don't do it.&lt;/p&gt;&lt;p&gt;By the way, who maintains these pip modules? The community. That is, no clear owner and no enforced chain of provenance or accountability. Earlier this year, a version of PyPI was found to have a &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/backdoored-python-library-caught-stealing-ssh-credentials/&quot;&gt;backdoor&lt;/a&gt; that stole SSH credentials. This doesn't surprise me at all. (I don't use Node.js and npm for the same reason; I don't trust their &lt;a href=&quot;https://www.infoq.com/news/2018/05/npm-getcookies-backdoor&quot;&gt;community repositories&lt;/a&gt;.)&lt;/p&gt;&lt;h3&gt;Reason 3: Syntax&lt;/h3&gt;
I'm a strong believer in readable code. And at first glance, Python seems very readable. That is, until you start making large code bases.&lt;p&gt;Most programming languages use some kind of notation to identify scope -- where a function begins and ends, actions contained in a conditional statement, range of a variable's definition, etc. With C, Java, JavaScript, Perl, and PHP, braces {...} define the scope. Lisp uses parenthesis (...). And Python? It uses spaces. If you need to define a scope for complex code, then you indent the next few lines. The scope ends when the indent ends.&lt;/p&gt;&lt;p&gt;The Python manual says that you can use any number of &lt;a href=&quot;https://docs.python.org/3/reference/lexical_analysis.html#indentation&quot;&gt;spaces or tabs&lt;/a&gt; for defining the scope. However, ALWAYS USE FOUR SPACES PER INDENT! If you want to indent twice for nesting, use eight spaces! The Python community has standardized on this nomenclature, even though it isn't in the Python manual. Forget the fact that the examples in the documentation use tabs, tabs + 1 space, and other indents. The community is rabid about using four spaces. So unless you plan to never show your code to anyone else, always use four spaces for each indent.&lt;/p&gt;&lt;p&gt;When I first saw Python code, I thought that using indents to define the scope seemed like a good idea. However, there's a huge downside. Deep nesting is permitted, but lines can get so wide that they wrap lines in the text editor. Long functions and long conditional actions may make it hard to match the start to the end. And I pity anyone who miscounts spaces and accidentally puts in three spaces instead of four somewhere -- this can take hours to debug and track down.&lt;/p&gt;&lt;p&gt;For other languages, I've picked up the habit of putting debug code without any indents. This way, I can quickly browse the code and easily identify and remove debugging code when I'm done. But with Python? Anything not indented properly generates an indention error. This means debugging code must blend in to the active code.&lt;/p&gt;&lt;h3&gt;Reason 4: Includes&lt;/h3&gt;
Most programming languages have some way to include other chunks of code. For C, it's &quot;#include&quot;. For PHP, there's 'include', 'include_once', 'require', and 'require_once'. And for Python, there's &quot;import&quot;.&lt;p&gt;Python's import permits including an entire module, part of a module, or a specific function from a module. Finding a list of what can be imported is non-intuitive. With C, you can just look in /usr/include/*.h. But with Python? It's best to use 'python -v' to list all of the places it looks, and then search every file in every directory and subdirectory from that list. I have friends who love Python and I've seen them grep through standard modules as they look for the thing they want to import. Seriously.&lt;/p&gt;&lt;p&gt;The import function also allows users to rename the imported code. They basically define a custom namespace. At first glance, this might seem nice, but it ends up impacting readability and long-term support. Renaming modules is great for small scripts, but really bad for long programs. People who use 1-2 letter namespaces, like &quot;import numpy as n&quot; should be shot (or forced to convert all of their code to Perl5).&lt;/p&gt;&lt;p&gt;But that's not the worst part. With most languages, including code just includes the code. A few languages, like object-oriented C++, may execute code if there's a global object with a constructor. Similarly, some PHP code may define global variables, so an import could run code -- but that's typically considered a bad practice. In contrast, many Python modules include initialization functions that run during the import. You don't know what's running, you don't know what it does, and you might not notice. Unless there's a namespace conflict, in which case you get to spend many fun hours tracking down the cause.&lt;/p&gt;&lt;h3&gt;Reason 5: Nomenclature&lt;/h3&gt;
In every other language, arrays are called 'arrays'. In Python, they are called 'lists'. And an associative array is sometimes called a 'hash' (Perl), but Python calls it a 'dictionary'. Python seems to go out of it's way to not use the common terms found throughout the computer and information science field.&lt;p&gt;And then there are the names of libraries. PyPy, PyPi, NumPy, SciPy, SymPy, PyGtk, Pyglet, PyGame... (Yes, those first two are pronounced the same way, but they do very different things.) I understand that the 'py' is for Python. But couldn't they be consistent about whether it comes first or second?&lt;/p&gt;&lt;p&gt;Some common libraries just gave up on the pun-like &quot;Py&quot; naming convention. This includes, matplotlib, nose, Pillow, and SQLAlchemy. And while some of the names may give you a hint to the purpose (e.g., &quot;SQLAlchemy&quot; contains SQL, so it's probably an SQL interface), others are just random words. If you didn't know what &quot;BeautifulSoup&quot; did, could you tell from the name that it's an HTML/XML parser? (As an aside, BeautifulSoup is well documented and easy to use. If every Python module was like this, I wouldn't be complaining so much. Unfortunately, this is the exception and not the norm. Most Python libraries seriously suck at documentation.)&lt;/p&gt;&lt;p&gt;Overall, I view Python as a collection of libraries with horrible and inconsistent naming conventions. I have a &lt;a href=&quot;https://www.hackerfactor.com/blog/index.php?/archives/415-Open-Source-Sucks.html&quot;&gt;standing gripe&lt;/a&gt; that open source projects typically have horrible names. Unless you know the project, you'll never figure out what it does by the name. And unless you know what to look for, you'll probably only find it by accidentally stumbling across someone who mentions it in passing. Most of Python's libraries reinforce this negative criticism.&lt;/p&gt;&lt;h3&gt;Reason 6: Quirks&lt;/h3&gt;
Every language has its quirks. With C, there's the weird nomenclature of using &amp;amp; and * for accessing address space and values. C also has that increment/decrement shortcut using ++ and --. With Bash, there's the whole &quot;when to use a backslash&quot; when quoting special characters like parenthesis and periods for regular expressions. And JavaScript has issues around compatibility (not every browser supports every useful function). However, Python has more quirks than any other language I've ever seen. Consider strings:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;In C, double quotes enclose strings. Single quotes enclose characters.&lt;/li&gt;
&lt;li&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;In PHP and Bash, both types of quotes can enclose strings. However, a double quote can have variables embedded in the string. In contrast, single quoted strings are literals; any embedded variable-like names are not expanded.&lt;/li&gt;
&lt;li&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;In JavaScript, there's really no difference between single quotes and double quotes.&lt;/li&gt;
&lt;li&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;In Python, there's no difference between single quotes and double quotes. However, if you want your string to span lines, then you need to use triple quotes &quot;&quot;&quot;string&quot;&quot;&quot; or '''string'''. And if you want to use binary, then you need to preference the string with b (b'binary') or r (r'raw'). And sometimes you need to cast your strings as strings using str(string), or convert it to utf8 using string.encode('utf-8').&lt;/li&gt;
&lt;/ul&gt;
If you thought that =, ==, and === was initially a little weird in PHP and JavaScript, wait until you play with quotes in Python.&lt;h3&gt;Reason 7: Pass By Object Reference&lt;/h3&gt;
Most programming languages pass function parameters by value. If the function alters the value, the results are not passed back to the calling code. But as I've already explained, Python goes out of its way to be different. Python defaults to doing functions with &lt;a href=&quot;https://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/&quot;&gt;pass-by-object-reference&lt;/a&gt; parameters. This means that changing the source variable may end up changing the value.&lt;p&gt;This is one of the big differences between procedural, functional, and object-oriented programming languages. If every variable is passed by object reference, and any change to the variable changes the reference everywhere, then you might as well use globals for everything. Calling the same object by different names doesn't change the object, so it is effectively global. And as C programmers learned long ago, &lt;a href=&quot;https://www.learncpp.com/cpp-tutorial/4-2a-why-global-variables-are-evil/&quot;&gt;global variables are evil&lt;/a&gt; and &lt;a href=&quot;https://www.quora.com/Is-it-a-bad-practice-to-use-global-variables-in-any-programming-language&quot;&gt;should not be used&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In Python, you have to work to pass variables by value. Saying &quot;a=b&quot; just assigns another name to the same object space; this doesn't copy the value of b into a. If you actually meant to copy the value, then you need to use a copy function. Usually this is &quot;a=b.copy()&quot;. However, notice that I said &quot;usually&quot;. Not all data types have a 'copy' prototype. Or maybe the copy function is incomplete. In those cases, there is a separate library called 'copy' that you can use: &quot;a=copy.deepcopy(b)&quot;.&lt;/p&gt;&lt;h3&gt;Reason 8: Local Names&lt;/h3&gt;
It's a common programming technique to name the program after the library or function being used. For example, if I'm testing a screen capture program with a C library called &quot;libscreencapture.so&quot;, I would call my program &quot;screencapture.c&quot; and compile into &quot;screencapture.exe&quot;.&lt;p&gt;&lt;code&gt;gcc -o screencapture.exe screencapture.c -lscreencapture&lt;/code&gt;&lt;/p&gt;&lt;p&gt;With C, Java, JavaScript, Perl, PHP, etc., this works fine because the language can easily distinguish resource libraries from the local program; they have different paths. But with Python? Don't do this. Never do this. Why? Python assumes you want to import the local code first. If I have a program called &quot;screencapture.py&quot; that uses &quot;import screencapture&quot;, then it will import itself rather than the system library. At minimum, you should call your local program &quot;myscreencapture.py&quot; instead.&lt;/p&gt;&lt;h3&gt;Not All Bad&lt;/h3&gt;
Python is a very popular language and has a huge following. I even have a handful of friends who really like Python -- it's their preferred programming language. Over the years, I've discussed these issues with them, and each time they nod their heads and agree. They don't disagree that these are problems with Python; they just think it's not bad enough for them to stop loving the language.&lt;p&gt;My friends often cite all of the really cool Python libraries that exist. And I agree that some of the libraries are really useful. For example, BeautifulSoup is one of the best HTML parsers I've ever used, NumPy makes multidimensional arrays and complex mathematics easier to implement, and TensorFlow is very useful for machine learning. However, I'm not going to make a monolithic program in Python just because I like TensorFlow or SciPy. I'm not going to give up readability and maintainability for a &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=Free%20Pony&quot;&gt;free pony&lt;/a&gt;; it's not worth the effort.&lt;/p&gt;&lt;p&gt;Usually when I write negative criticisms about a topic, I also try to write something positive. I followed my blog entry on &quot;&lt;a href=&quot;https://www.hackerfactor.com/blog/index.php?/archives/415-Open-Source-Sucks.html&quot;&gt;Open Source Sucks&lt;/a&gt;&quot; with &quot;&lt;a href=&quot;https://www.hackerfactor.com/blog/index.php?/archives/416-Open-Source-Rocks.html&quot;&gt;Open Source Rocks&lt;/a&gt;&quot;. And when I wrote about limitations with &lt;a href=&quot;https://www.hackerfactor.com/blog/index.php?/archives/300-Ten-Little-Endians.html&quot;&gt;FFmpeg&lt;/a&gt;, I explicitly mentioned how it's the best video processing library out there. But I can't make a list of good things about Python because I really think that Python sucks.&lt;/p&gt;&lt;p&gt;(Hey Bill, does this answer your question?)&lt;/p&gt;</description>
<pubDate>Tue, 18 Dec 2018 13:11:30 +0000</pubDate>
<dc:creator>BerislavLopac</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hackerfactor.com/blog/index.php?/archives/825-8-Reasons-Python-Sucks.html</dc:identifier>
</item>
</channel>
</rss>