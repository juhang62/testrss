<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Bytecode compilers and interpreters</title>
<link>https://bernsteinbear.com/blog/bytecode-interpreters/</link>
<guid isPermaLink="true" >https://bernsteinbear.com/blog/bytecode-interpreters/</guid>
<description>&lt;p&gt;Two fun things happened recently and the proximity of the two made something go &lt;em&gt;click&lt;/em&gt; in my head and now I think I understand how bytecode interpreters work.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;I went to a class at work called “Interpreters 101” or something of the sort. In it, the presenter walked through creating a dead-simple tree-walking Lisp interpreter. Then he ended by suggesting we go out and re-implement it as a bytecode interpreter or even a JIT.&lt;/li&gt;
&lt;li&gt;I joined a new team at work that is working on something Python related. Because of my new job responsibilities, I have had to become rather closely acquainted with CPython 3.6 bytecode.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Since learning by writing seems to be something I do frequently, here is a blog post about writing a small bytecode compiler and interpreter in small pieces. We’ll go through it in the same manner as my &lt;a href=&quot;https://bernsteinbear.com/blog/lisp/&quot;&gt;lisp interpreter&lt;/a&gt;: start with the simplest pices and build up the rest of the stack as we need other components.&lt;/p&gt;
&lt;h3 id=&quot;some-definitions&quot;&gt;Some definitions&lt;/h3&gt;
&lt;p&gt;Before we dive right in, I’m going to make some imprecise definitions that should help differentiate types of interpreters:&lt;/p&gt;
&lt;ul readability=&quot;1&quot;&gt;&lt;li&gt;&lt;em&gt;Tree-walking&lt;/em&gt; interpreters process the program AST node by node, recursively evaluating based on some evaluation rules. For a program like &lt;code class=&quot;highlighter-rouge&quot;&gt;Add(Lit 1, Lit 2)&lt;/code&gt;, it might see the add rule, recursively evaluate the arguments, add them together, and then package that result in the appropriate value type.&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;em&gt;Bytecode&lt;/em&gt; interpreters don’t work on the AST directly. They work on preprocessed ASTs. This simplifies the execution model and can produce impressive speed wins. A program like &lt;code class=&quot;highlighter-rouge&quot;&gt;Add(Lit 1, Lit 2)&lt;/code&gt; might be bytecode compiled into the following bytecode:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;PUSH 1
PUSH 2
ADD
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And then the interpreter would go instruction by instruction, sort of like a hardware CPU.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;JIT&lt;/em&gt; interpreters are like bytecode interpreters except instead of compiling to language implementation-specific bytecode, they try to compile to native machine instructions. Most production-level JIT interpreters “warm up” by measuring what functions get called the most and then compiling them to native code in the background. This way, the so-called “hot code” gets optimized and has a smaller performance penalty.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;My &lt;em&gt;Writing a Lisp&lt;/em&gt; series presents a tree-walking interpreter. This much smaller post will present a bytecode interpreter. A future post may present a JIT compiler when I figure out how they work.&lt;/p&gt;
&lt;p&gt;Without further ado, let us learn.&lt;/p&gt;
&lt;h3 id=&quot;in-the-beginning-there-was-a-tree-walking-interpreter&quot;&gt;In the beginning, there was a tree-walking interpreter&lt;/h3&gt;
&lt;p&gt;Lisp interpreters have pretty simple semantics. Below is a sample REPL (read-eval-print-loop) where all the commands are &lt;code class=&quot;highlighter-rouge&quot;&gt;parse&lt;/code&gt;d into ASTs and then &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;ed straightaway. See Peter Norvig’s &lt;a href=&quot;http://norvig.com/lispy.html&quot;&gt;lis.py&lt;/a&gt; for a similar tree-walking interpreter.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; 1
1
&amp;gt;&amp;gt;&amp;gt; '1'
1
&amp;gt;&amp;gt;&amp;gt; &quot;hello&quot;
hello
&amp;gt;&amp;gt;&amp;gt; (val x 3)
None
&amp;gt;&amp;gt;&amp;gt; x
3
&amp;gt;&amp;gt;&amp;gt; (set x 7)
None
&amp;gt;&amp;gt;&amp;gt; x
7
&amp;gt;&amp;gt;&amp;gt; (if True 3 4)
3
&amp;gt;&amp;gt;&amp;gt; (lambda (x) (+ x 1))
&amp;lt;Function instance...&amp;gt;
&amp;gt;&amp;gt;&amp;gt; ((lambda (x) (+ x 1)) 5)
6
&amp;gt;&amp;gt;&amp;gt; (define f (x) (+ x 1))
None
&amp;gt;&amp;gt;&amp;gt; f
&amp;lt;Function instance...&amp;gt;
&amp;gt;&amp;gt;&amp;gt; +
&amp;lt;function + at...&amp;gt;
&amp;gt;&amp;gt;&amp;gt; (f 10)
11
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For our interpreter, we’re going to write a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; that takes in an expression represented by a Python list (something like &lt;code class=&quot;highlighter-rouge&quot;&gt;['+', 5, ['+', 3, 5]]&lt;/code&gt;) and returns a list of bytecode instructions. Then we’ll write &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; that takes in those instructions and returns a Python value (in this case, the int &lt;code class=&quot;highlighter-rouge&quot;&gt;13&lt;/code&gt;). It should behave identically to the tree-walking interpreter, except faster.&lt;/p&gt;
&lt;h3 id=&quot;the-isa&quot;&gt;The ISA&lt;/h3&gt;
&lt;p&gt;For our interpreter we’ll need a surprisingly small set of instructions, mostly lifted from the CPython runtime’s own instruction set architecture. CPython is a stack-based architecture, so ours will be too.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_CONST&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Pushes constants onto the stack.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STORE_NAME&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Stores values into the environment.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_NAME&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Reads values from the environment.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Calls a function (built-in or user-defined).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RELATIVE_JUMP_IF_TRUE&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Jumps if the value on top of the stack is true.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RELATIVE_JUMP&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAKE_FUNCTION&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;Creates a function object from a code object on the stack and pushes it on the stack.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With these instructions we can define an entire language. Most people choose to define math operations in their instruction sets for speed, but we’ll define them as built-in functions because it’s quick and easy.&lt;/p&gt;
&lt;h3 id=&quot;the-opcode-and-instruction-classes&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Opcode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Instruction&lt;/code&gt; classes&lt;/h3&gt;
&lt;p&gt;I’ve written an &lt;code class=&quot;highlighter-rouge&quot;&gt;Opcode&lt;/code&gt; enum:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;enum&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutoNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_generate_next_value_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@enum.unique&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Add opcodes like:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# OP_NAME = enum.auto()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Its sole purpose is to enumerate all of the possible opcodes — we’ll add them later. Python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt; API is pretty horrific so you can gloss over this if you like and pretend that the opcodes are just integers.&lt;/p&gt;
&lt;p&gt;I’ve also written an &lt;code class=&quot;highlighter-rouge&quot;&gt;Instruction&lt;/code&gt; class that stores opcode and optional argument pairs:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;11&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;Instruction.{}({})&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The plan is to declare one &lt;code class=&quot;highlighter-rouge&quot;&gt;Instruction&lt;/code&gt; instance per opcode, naming its argument something sensible. Then when bytecode compiling, we can make instances of each instruction by calling them with a given argument. This is pretty hacky but it works alright.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Creating top-level opcodes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Creating instances&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we’ve got some infrastructure for compilation, let’s start compiling.&lt;/p&gt;
&lt;h3 id=&quot;integers&quot;&gt;Integers&lt;/h3&gt;
&lt;p&gt;This is what our &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; function looks like right now:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It is not a useful compiler, but at least it will let us know what operations it does not yet support. Let’s make it more useful.&lt;/p&gt;
&lt;p&gt;The simplest thing I can think of to compile is an integer. If we see one, we should put it on the stack. That’s all! So let’s first add some instructions that can do that, and then implement it.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I called it &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_CONST&lt;/code&gt; because that’s what Python calls its opcode that does something similar. “Load” is a sort of confusing word for what its doing, because that doesn’t specify &lt;em&gt;where&lt;/em&gt; it’s being loaded. If you want, you can call this &lt;code class=&quot;highlighter-rouge&quot;&gt;PUSH_CONST&lt;/code&gt;, which in my opinion better implies that it is to be pushed onto the VM stack. I also specify &lt;code class=&quot;highlighter-rouge&quot;&gt;CONST&lt;/code&gt; because this instruction should only be used for literal values: &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;hello&quot;&lt;/code&gt;, etc. Something where the value is completely defined by the expression itself.&lt;/p&gt;
&lt;p&gt;Here’s the parallel for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Instruction&lt;/code&gt; class (defined at the module scope):&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;const&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The argument name &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;const&quot;&lt;/code&gt; is there only for bytecode documentation for the reader. It will be replaced by an actual value when this instruction is created and executed. Next, let’s add in a check to catch this case.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Oh, yeah. &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; is going to walk the expression tree and merge together lists of instructions from compiled sub-expressions — so every branch has to return a list. This will look better when we have nested cases. Let’s test it out:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we’ve got an instruction, we should also be able to run it. So let’s set up a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; loop:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here &lt;code class=&quot;highlighter-rouge&quot;&gt;pc&lt;/code&gt; is short for “program counter”, which is equivalent to the term “instruction pointer”, if you’re more familiar with that. The idea is that we iterate through the instructions one by one, executing them in order.&lt;/p&gt;
&lt;p&gt;This loop will throw when it cannot handle a particular instruction, so it is reasonable scaffolding, but not much more. Let’s add a case to handle &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_CONST&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note, since it will come in handy later, that &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; returns the value on the top of the stack. This is the beginning of our calling convention, which we’ll flesh out more as the post continues. Let’s see if this whole thing works, end to end.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And now let’s run it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;willow% python3 ~/tmp/bytecode0.py
willow%
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Swell.&lt;/p&gt;
&lt;h3 id=&quot;naming-things&quot;&gt;Naming things&lt;/h3&gt;
&lt;div readability=&quot;14&quot;&gt;
&lt;p&gt;My name, and yours, and the true name of the sun, or a spring of&lt;br/&gt;water, or an unborn child, all are syllables of the great word that&lt;br/&gt;is very slowly spoken by the shining of the stars. There is no other&lt;br/&gt;power. No other name.&lt;/p&gt;
&lt;br/&gt;&lt;cite&gt;-- Ursula K Le Guin, &lt;em&gt;A Wizard of Earthsea&lt;/em&gt;&lt;/cite&gt;&lt;/div&gt;
&lt;p&gt;Now, numbers aren’t much fun if you can’t do anything with them. Right now the only valid programs are programs that push one number onto the stack. Let’s add some opcodes that put those values into variables.&lt;/p&gt;
&lt;p&gt;We’ll be adding &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE_NAME&lt;/code&gt;, which takes one value off the stack and stores it in the current environment, and &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_NAME&lt;/code&gt;, which reads a value from the current environment and pushes it onto the stack.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@enum.unique&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let’s talk about our representation of environments. Our &lt;code class=&quot;highlighter-rouge&quot;&gt;Env&lt;/code&gt; class looks like this (based on Dmitry Soshnikov’s “Spy” interpreter):&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;14&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# table holds the variable assignments within the env. It is a dict that&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# maps names to values.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# define() maps a name to a value in the current env.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# assign() maps a name to a value in whatever env that name is bound,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# raising a ReferenceError if it is not yet bound.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# lookup() returns the value associated with a name in whatever env it is&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# bound, raising a ReferenceError if it is not bound.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# resolve() finds the env in which a name is bound and returns the whole&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# associated env object, raising a ReferenceError if it is not bound.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ReferenceError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# is_defined() checks if a name is bound.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ReferenceError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Our execution model will make one new &lt;code class=&quot;highlighter-rouge&quot;&gt;Env&lt;/code&gt; per function call frame and one new env per closure frame, but we’re not quite there yet. So if that doesn’t yet make sense, ignore it for now.&lt;/p&gt;
&lt;p&gt;What we care about right now is the global environment. We’re going to make one top-level environment for storing values. We’ll then thread that through the &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; function so that we can use it. But let’s not get ahead of ourselves. Let’s start by compiling.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# (val n v)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’ve added this second branch to check if the expression is a list, since we’ll mostly be dealing with lists now. Since we also have just about zero error-handling right now, I’ve also added some &lt;code class=&quot;highlighter-rouge&quot;&gt;assert&lt;/code&gt;s to help with code simplicity.&lt;/p&gt;
&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; case, we want to extract the name and the subexpression — remember, we won’t just be compiling simple values like &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;; the values might be &lt;code class=&quot;highlighter-rouge&quot;&gt;(+ 1 2)&lt;/code&gt;. Then, we want to compile the subexpression and add a &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE_NAME&lt;/code&gt; instruction. We can’t test that just yet — we don’t have more complicated expressions — but we’ll get there soon enough. Let’s test what we can, though:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s move back to &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opcode&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You’ll notice that I’ve&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Added an &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; parameter, so that we can evaluate expressions in different contexts and get different results&lt;/li&gt;
&lt;li&gt;Added a case for &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE_NAME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We’ll have to modify our other tests to pass an &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; parameter — you can just pass &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; if you are feeling lazy.&lt;/p&gt;
&lt;p&gt;Let’s make our first environment and test out &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE_NAME&lt;/code&gt;. For this, I’m going to make an environment and test that storing a name in it side-effects that environment.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we should probably go about adding compiler and evaluator functionality for reading those stored values. The compiler will just have to check for variable accesses, represented just as strings.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And add a test for it:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now that we can generate &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_NAME&lt;/code&gt;, let’s add &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; support for it. If we did anything right, its implementation should pretty closely mirror that of its sister instruction.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To test it, we’ll first manually store a name into the environment, then see if &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_NAME&lt;/code&gt; can read it back out.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Neat.&lt;/p&gt;
&lt;h3 id=&quot;built-in-functions&quot;&gt;Built-in functions&lt;/h3&gt;
&lt;p&gt;We can add as many opcodes as features we need, or we can add one opcode that allows us to call native (Python) code and extend our interpreter that way. Which approach you take is mostly a matter of taste.&lt;/p&gt;
&lt;p&gt;In our case, we’ll add the &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt; opcode, which will be used both for built-in functions and for user-defined functions. We’ll get to user-defined functions later.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt; will be generated when an expression is of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;(x0 x1 x2 ...)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;x0&lt;/code&gt; is not one of the pre-set recognized names like &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;. The compiler should generate code to load first the function, then the arguments onto the stack. Then it should issue the &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt; instruction. This is very similar to CPython’s implementation.&lt;/p&gt;
&lt;p&gt;I’m not going to reproduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;Opcode&lt;/code&gt; declaration, because all of those look the same, but here is my &lt;code class=&quot;highlighter-rouge&quot;&gt;Instruction&lt;/code&gt; declaration:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nargs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt; instruction takes with it the number of arguments passed to the function so that we can call it correctly. Note that we do this instead of storing the correct number of arguments in the function because functions could take variable numbers of arguments.&lt;/p&gt;
&lt;p&gt;Let’s compile some call expressions.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;arg_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’ve added a default case for list expressions. See that it compiles the name, then the arguments, then issues a &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt;. Let’s test it out with 0, 1, and more arguments.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;11.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s implement &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that we’re reading the arguments off the stack — in reverse order — and then reading the function off the stack. Everything is read the opposite way it is pushed onto the stack, since, you know, it’s a stack.&lt;/p&gt;
&lt;p&gt;We also check that the &lt;code class=&quot;highlighter-rouge&quot;&gt;fn&lt;/code&gt; is callable. This is a Python-ism. Since we’re allowing raw Python objects on the stack, we have to make sure that we’re actually about to call a Python function. Then we’ll call that function with a list of arguments and push its result on the stack.&lt;/p&gt;
&lt;p&gt;Here’s what this looks like in real life, in a test:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]},&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is pretty neat. If we stuff &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt; expressions into environments, we get these super easy built-in functions. But that’s not quite the most optimal &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; function. Let’s make a variadic one for fun.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Since we pass the arguments a list, we can do all sorts of whack stuff like this!&lt;/p&gt;
&lt;p&gt;Since I only alluded to it earlier, let’s add a test for compiling nested expressions in &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE_NAME&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Go ahead and add all the builtin functions that your heart desires… like &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'print'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'print'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You should see the arguments passed in the correct order. Note that if you are using Python 2, you should wrap the print in a &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, since &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; is not a function.&lt;/p&gt;
&lt;h3 id=&quot;conditionals&quot;&gt;Conditionals&lt;/h3&gt;
&lt;p&gt;Without conditionals, we can’t really do much with our language. While we could choose to implement conditionals eagerly as built-in functions, we’re going to do “normal” conditionals. Conditionals that lazily evaluate their branches. This can’t be done with our current execution model because all arguments are evaluated before being passed to built-in functions.&lt;/p&gt;
&lt;p&gt;We’re going to do conditionals the traditional way:&lt;/p&gt;
&lt;div class=&quot;language-scheme highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;will compile to&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;[a BYTECODE]
RELATIVE_JUMP_IF_TRUE b
[c BYTECODE]
RELATIVE_JUMP end
b:
[b BYTECODE]
end:
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’re also going to take the CPython approach in generating &lt;em&gt;relative&lt;/em&gt; jumps instead of absolute jumps. This way we don’t need a separate target resolution step.&lt;/p&gt;
&lt;p&gt;To accomplish this, we’ll add two the opcodes and instructions listed above:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP_IF_TRUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP_IF_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each of them takes an offset in instructions of how far to jump. This could be positive or negative — for loops, perhaps — but right now we will only generate positive offsets.&lt;/p&gt;
&lt;p&gt;We’ll add one new case in the compiler:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iftrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iffalse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;iftrue_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iftrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;iffalse_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iffalse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iftrue_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP_IF_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iffalse_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iffalse_code&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iftrue_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First compile the condition. Then, compile the branch that will execute if the condition passes. The if-false branch is a little bit tricky because I am also including the jump-to-end in there. This is so that the offset calculation for the jump to the if-true branch is correct (I need not add &lt;code class=&quot;highlighter-rouge&quot;&gt;+1&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Let’s add some tests to check our work:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;19.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;34&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP_IF_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; \
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP_IF_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I added the second test to double-check that nested expressions work correctly. Looks like they do. On to &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;This part should be pretty simple — adjust the &lt;code class=&quot;highlighter-rouge&quot;&gt;pc&lt;/code&gt;, sometimes conditionally.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP_IF_TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# pc has already been incremented&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_JUMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# pc has already been incremented&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If it takes a second to convince yourself that this is not off-by-one, that makes sense. Took me a little bit too. And hey, if convincing yourself isn’t good enough, here are some tests.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;15&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;25&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'false'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'false'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;defining-your-own-functions&quot;&gt;Defining your own functions&lt;/h3&gt;
&lt;p&gt;User-defined functions are absolutely key to having a usable programming language. Let’s let our users do that. Again, we’re using Dmitry’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; representation, which is wonderfully simple.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# closure!&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The params will be a tuple of names, the body a tuple of instructions, and the env an &lt;code class=&quot;highlighter-rouge&quot;&gt;Env&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our language, all functions will be closures. They can reference variables defined in the scope where the function is defined (and above). We’ll use the following forms:&lt;/p&gt;
&lt;div class=&quot;language-scheme highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;; or&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In fact, we’re going to use a syntax transformation to re-write &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt;s in terms of &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;. This isn’t required, but it’s kind of neat.&lt;/p&gt;
&lt;p&gt;For this whole thing to work, we’re going to need a new opcode: &lt;code class=&quot;highlighter-rouge&quot;&gt;MAKE_FUNCTION&lt;/code&gt;. This will convert some objects stored on the stack into a &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; object.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;MAKE_FUNCTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Instruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAKE_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nargs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This takes an integer, the number of arguments that the function expects. Right now we only allow positional, non-optional arguments. If we wanted to have additional calling conventions, we’d have to add them later.&lt;/p&gt;
&lt;p&gt;Let’s take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;12.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'lambda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;MAKE_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'define'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lambda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, it’s pretty straightforward. Push the params, push the body code, make a function.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; is a little sneaker. It acts as a macro and &lt;em&gt;rewrites the AST&lt;/em&gt; before compiling it. If we wanted to be more professional, we could make a macro system so that the standard library could define &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;… but that’s too much for right now. But still. It’s pretty neat.&lt;/p&gt;
&lt;p&gt;Before we move on to &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;, let’s quickly check our work.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;18.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;32&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lambda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; \
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)),&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;MAKE_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'define'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; \
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)),&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;LOAD_CONST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;MAKE_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;STORE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Alright alright alright. Let’s get these functions created. We need to handle the &lt;code class=&quot;highlighter-rouge&quot;&gt;MAKE_FUNCTION&lt;/code&gt; opcode in &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAKE_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;body_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As with calling functions, we read everything in the reverse of the order that we pushed it. First the body, then the params — checking that they’re the right length — then push the new &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;But &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt;s aren’t particularly useful without being callable. There are two strategies for calling functions, one slightly slicker than the other. You can choose which you like.&lt;/p&gt;
&lt;p&gt;The first strategy, the simple one, is to add another case in &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt; that handles &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; objects. This is what most people do in most programming languages. It looks like this:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;10&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)][::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;actuals_record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;body_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actuals_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RuntimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cannot call {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that the function environment consists solely of the given arguments and its parent is the stored environment — &lt;em&gt;not&lt;/em&gt; the current one.&lt;/p&gt;
&lt;p&gt;The other approach is more Pythonic, I think. It turns &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; into a callable object, putting the custom setup code into &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; itself. If you opt to do this, leave &lt;code class=&quot;highlighter-rouge&quot;&gt;CALL_FUNCTION&lt;/code&gt; alone and modify &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; this way:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# closure!&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actuals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;actuals_record&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actuals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;body_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actuals_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; should call the &lt;code class=&quot;highlighter-rouge&quot;&gt;Function&lt;/code&gt; as if it were a normal Python function. Cool… or gross, depending on what programming languages you are used to working with.&lt;/p&gt;
&lt;p&gt;They should both work as follows:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;13.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lambda'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'define'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hell, even recursion works! Let’s write ourselves a little factorial function.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;17.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;30&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;operator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'eq'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'define'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'factorial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'eq'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'factorial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]]]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'factorial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which works, but it feels like we’re lacking the ability to sequence operations… because we are! So let’s add that.&lt;/p&gt;
&lt;h3 id=&quot;one-teensy-little-thing-is-missing&quot;&gt;One teensy little thing is missing&lt;/h3&gt;
&lt;p&gt;It should suffice to write a function &lt;code class=&quot;highlighter-rouge&quot;&gt;compile_program&lt;/code&gt; that can take a list of expressions, compile them, and join them. This alone is not enough, though. We should expose that to the user so that they can sequence operations when they need to. So let’s also add a &lt;code class=&quot;highlighter-rouge&quot;&gt;begin&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# flatten&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And then a case in &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'begin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compile_program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;arg_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALL_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And of course a test:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;18&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;31&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;operator&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'eq'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'begin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'define'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'factorial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'if'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'eq'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'factorial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]]],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'factorial'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;and-youre-done&quot;&gt;And you’re done!&lt;/h3&gt;
&lt;p&gt;You’re off to the races. You’ve just written a bytecode interpreter in Python or whatever language you are using to follow along. There are many ways to extend and improve it. Maybe those will be the subject of a future post. Here are a few I can think of:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Make a JIT compiler — generate native code instead of bytecode&lt;/li&gt;
&lt;li&gt;Re-write this in a language whose runtime is faster than CPython&lt;/li&gt;
&lt;li&gt;Choose a file format and write the compiler and interpreter so that they eject to and read from the disk&lt;/li&gt;
&lt;li&gt;Add a foreign-function interface so that the user can call functions from the host language&lt;/li&gt;
&lt;li&gt;Expose &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt; in the environment to add metaprogramming to your language&lt;/li&gt;
&lt;li&gt;Add macros&lt;/li&gt;
&lt;li&gt;Learn from CPython and store local variables in the frame itself instead of in a dict — this is much faster (see &lt;code class=&quot;highlighter-rouge&quot;&gt;LOAD_FAST&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;STORE_FAST&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Target an existing VM’s bytecode so you can compile to, say, actual CPython or Lua or something&lt;/li&gt;
&lt;li&gt;Similar to above: target &lt;a href=&quot;https://github.com/oilshell/oil/tree/master/opy&quot;&gt;OPy&lt;/a&gt; so you can run compiled programs with Andy Chu’s VM&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Fri, 04 Jan 2019 02:25:24 +0000</pubDate>
<dc:creator>tekknolagi</dc:creator>
<og:title>Bytecode compilers and interpreters</og:title>
<og:description>Two fun things happened recently and the proximity of the two made something go click in my head and now I think I understand how bytecode interpreters work.</og:description>
<og:url>https://bernsteinbear.com/blog/bytecode-interpreters/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bernsteinbear.com/blog/bytecode-interpreters/</dc:identifier>
</item>
<item>
<title>Grin – A private and lightweight mimblewimble blockchain</title>
<link>https://grin-tech.org/</link>
<guid isPermaLink="true" >https://grin-tech.org/</guid>
<description>&lt;section readability=&quot;8&quot;&gt;
&lt;h2&gt;Electronic transactions for all. Without censorship or restrictions.&lt;/h2&gt;
&lt;p&gt;Grin empowers anyone to transact or save modern money without the fear of external control or oppression. Grin is designed for the decades to come, not just tomorrow. Grin wants to be usable by everyone, regardless of borders, culture, skills or access.&lt;/p&gt;
&lt;/section&gt;&lt;p readability=&quot;2.3406456953642&quot;&gt;&lt;section class=&quot;columns dots&quot;&gt;&lt;div class=&quot;column&quot;&gt;
&lt;h2 class=&quot;subtitle&quot;&gt;&lt;img src=&quot;https://grin-tech.org/assets/images/privacy.svg&quot;/&gt; Private&lt;/h2&gt;
&lt;span&gt;Grin has no amounts and no addresses. Transactions can be trivially aggregated. To hide where a newly created transaction comes from, it gets relayed privately (a &quot;random walk&quot;) among peers before it is publicly announced.&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;h2 class=&quot;subtitle&quot;&gt;&lt;img src=&quot;https://grin-tech.org/assets/images/scale.svg&quot;/&gt; Scalable&lt;/h2&gt;
&lt;span&gt;MimbleWimble leverages cryptography to allow most of the past transaction data to be removed. This guarantees Grin won't crumble under its own weight in the long term.&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;h2 class=&quot;subtitle&quot;&gt;&lt;img src=&quot;https://grin-tech.org/assets/images/nodes.svg&quot;/&gt; Open&lt;/h2&gt;
&lt;span&gt;Grin is developed openly, by developers distributed all over the world. It's not controlled by any company, foundation or individual. The coin distribution is designed to be as fair (but not gratis) as is known to be possible.&lt;/span&gt;&lt;/div&gt;
&lt;/section&gt;&lt;section&gt;&lt;div class=&quot;columns&quot;&gt;
&lt;div class=&quot;column&quot;&gt;
&lt;div class=&quot;content&quot;&gt;

&lt;div class=&quot;tile is-ancestor&quot;&gt;
&lt;div class=&quot;tile is-vertical is-parent&quot; readability=&quot;7.3301886792453&quot;&gt;
&lt;div class=&quot;tile is-child box&quot; readability=&quot;9.2258064516129&quot;&gt;
&lt;p class=&quot;subtitle&quot;&gt;MainNet, Onwards!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;We’re currently hard at work in stabilizing Grin for our mainnet release, around Jan. 15th 2019.&lt;/p&gt;&lt;p&gt;Check out our &lt;a href=&quot;https://github.com/mimblewimble/grin/milestone/4&quot;&gt;feature list&lt;/a&gt; and jump in.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;&lt;section readability=&quot;4.6035242290749&quot;&gt;
&lt;p&gt;Grin is launched fairly, free of ICO, pre-mine or founder’s reward. We rely on donations to keep working on the project. Support the movement by purchasing some swag or making a donation.&lt;/p&gt;
&lt;br/&gt;&lt;a href=&quot;https://grin-tech.org/funding&quot; class=&quot;button is-warning is-large donate-button&quot;&gt;Donate Now&lt;/a&gt; &lt;a href=&quot;https://tmgox.com&quot; class=&quot;button is-info is-outlined is-large buy-swag-button&quot;&gt;&lt;img src=&quot;https://grin-tech.org/assets/images/hat.png&quot;/&gt;Buy Swag&lt;/a&gt;&lt;/section&gt;&lt;/p&gt;&lt;p readability=&quot;2.6167883211679&quot;&gt;&lt;section class=&quot;patron&quot; readability=&quot;5.2335766423358&quot;&gt;&lt;h2 class=&quot;title&quot;&gt;Patrons&lt;/h2&gt;
&lt;p&gt;If you’re an individual, company or institution excited about the potential of Grin or MimbleWimble, we humbly ask if you’d consider making a financial contribution to the project’s development. We’re experimenting with a &lt;a href=&quot;https://grin-tech.org/funding.html&quot;&gt;100% community-driven funding model&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;&lt;/p&gt;&lt;p&gt;We sincerely thank &lt;a href=&quot;https://grin-tech.org/friends.html&quot;&gt;all our past patrons&lt;/a&gt; for their support.&lt;/p&gt;

</description>
<pubDate>Thu, 03 Jan 2019 23:44:03 +0000</pubDate>
<dc:creator>grincoin</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://grin-tech.org/</dc:identifier>
</item>
<item>
<title>Monorepo: please do</title>
<link>https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70</link>
<guid isPermaLink="true" >https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70</guid>
<description>&lt;div class=&quot;uiScale uiScale-ui--regular uiScale-caption--regular u-flexCenter u-marginVertical24 u-fontSize15 js-postMetaLockup&quot;&gt;
&lt;div class=&quot;u-flex0&quot;&gt;&lt;a class=&quot;link u-baseColor--link avatar&quot; href=&quot;https://medium.com/@adamhjk?source=post_header_lockup&quot; data-action=&quot;show-user-card&quot; data-action-source=&quot;post_header_lockup&quot; data-action-value=&quot;9978525af468&quot; data-action-type=&quot;hover&quot; data-user-id=&quot;9978525af468&quot; dir=&quot;auto&quot;&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/fit/c/100/100/1*9psumsB1sZ7_5R8eVJdANQ.png&quot; class=&quot;avatar-image u-size50x50&quot; alt=&quot;Go to the profile of Adam Jacob&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p name=&quot;de5c&quot; id=&quot;de5c&quot; class=&quot;graf graf--p graf-after--h3&quot;&gt;You should choose a monorepo because the default behavior it encourages in your teams is visibility and shared responsibility, especially as teams scale. You will have to invest in tooling no matter what, but it’s always better when the default behavior is the behavior you want to see in your teams.&lt;/p&gt;
&lt;h4 name=&quot;3ed2&quot; id=&quot;3ed2&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;Why are we talking about this?&lt;/h4&gt;
&lt;p name=&quot;c9dc&quot; id=&quot;c9dc&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;Matt Klein wrote &lt;a href=&quot;https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b&quot; data-href=&quot;https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b&quot; class=&quot;markup--anchor markup--p-anchor&quot; target=&quot;_blank&quot;&gt;“Monorepos: Please don’t!”&lt;/a&gt; — I like Matt, I think he’s very smart, and you should go read his point of view. He originally posted a poll on twitter:&lt;/p&gt;

&lt;p name=&quot;fbca&quot; id=&quot;fbca&quot; class=&quot;graf graf--p graf-after--figure&quot;&gt;My response was “I’m literally both of those people”. Rather than talk about how dope Rust is, lets dig in to why I think he’s wrong about Monorepos. For context, I’m the CTO at Chef Software. We have ~100 engineers, a code base that goes back about 11–12 years, and 4 major product segments. Some of that code lives in Polyrepos (my starting position), some of it in Monorepos (my current position.)&lt;/p&gt;
&lt;p name=&quot;9e5b&quot; id=&quot;9e5b&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Before I start: every single argument I make here an be applied to any repository layout of any kind. There is no technical reason you must choose one or the other, in my opinion. You can, and will, make either layout work. I’m stoked to talk with others about this, but I’m not interested in faux-technical reasons one is superior to the other. From a technical perspective, I think it’s a wash.&lt;/p&gt;
&lt;p name=&quot;bba1&quot; id=&quot;bba1&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Matt and I agree on the first part of this point:&lt;/p&gt;
&lt;blockquote name=&quot;2f7c&quot; id=&quot;2f7c&quot; class=&quot;graf graf--blockquote graf-after--p&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;Because, &lt;em class=&quot;markup--em markup--blockquote-em&quot;&gt;at scale, a monorepo must solve every problem that a polyrepo must solve, with the downside of encouraging tight coupling, and the additional herculean effort of tackling VCS scalability&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p name=&quot;7250&quot; id=&quot;7250&quot; class=&quot;graf graf--p graf-after--blockquote&quot;&gt;You are going to solve the same problems if you choose a monorepo or a polyrepo. How do you release? Whats your approach to upgrades? Backward compatibility? Cross project dependencies? What architectural styles are acceptable? How do you manage your build and test infrastructure? The list is endless, and you will solve for them all as you grow. There is no free lunch.&lt;/p&gt;
&lt;p name=&quot;76ba&quot; id=&quot;76ba&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;I think Matt’s argument is similar to the views shared by lots of engineers (and managers) I respect. I think of it as coming from the perspective of an engineer working on a component, or a team working on a component. You hear things like:&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;270d&quot; id=&quot;270d&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;The code base is unwieldy — I don’t need all this other junk.&lt;/li&gt;
&lt;li name=&quot;d5cd&quot; id=&quot;d5cd&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;It’s harder to test, because I have to test all this other junk I don’t need.&lt;/li&gt;
&lt;li name=&quot;1eee&quot; id=&quot;1eee&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;It’s harder to work with outside dependencies&lt;/li&gt;
&lt;li name=&quot;b408&quot; id=&quot;b408&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;I need custom virtual source control systems&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;4dd0&quot; id=&quot;4dd0&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Certainly, all these points are valid points. They happen in both cases — in a polyrepo, I have my junk, except in order to build… I might need all the other junk. So I “just” build tooling, which checks out the whole project. Or I build a fake monorepo with submodules. We could go around all day. But I think Matt’s argument misses the #1 reason I’ve flipped quite hard to a monorepo perspective as my own level in the organization has gotten higher:&lt;/p&gt;
&lt;h4 name=&quot;dcd5&quot; id=&quot;dcd5&quot; class=&quot;graf graf--h4 graf-after--p&quot;&gt;It forces the conversation, and makes trade-offs visible&lt;/h4&gt;
&lt;p name=&quot;7e3c&quot; id=&quot;7e3c&quot; class=&quot;graf graf--p graf-after--h4&quot;&gt;When we split the repositories up, we are de-facto creating a coordination and visibility problem. It tends to map cleanly to the way we think of teams (especially the way individual contributors think of them): we have responsibility over this component. We work in relative isolation. The boundaries are fixed on my team and the component(s) we work on.&lt;/p&gt;
&lt;p name=&quot;ceee&quot; id=&quot;ceee&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;As the architecture gets bigger, no single team can manage it anymore. Very few engineers hold the whole system in their head. Lets say you manage a shared component, A, which is used by teams B, C, and D. Team A is refactoring, adding a better API, and also changing the way the internals work. The result is the change is not backwards compatible. What advice do you give?&lt;/p&gt;
&lt;ul class=&quot;postList&quot;&gt;&lt;li name=&quot;2b5c&quot; id=&quot;2b5c&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Find all the places where the old API is being used.&lt;/li&gt;
&lt;li name=&quot;30a4&quot; id=&quot;30a4&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Are there cases where the new API cannot be used?&lt;/li&gt;
&lt;li name=&quot;3f05&quot; id=&quot;3f05&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Can you patch and test the other components to know you won’t break them?&lt;/li&gt;
&lt;li name=&quot;9501&quot; id=&quot;9501&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Can those teams validate your change right now?&lt;/li&gt;
&lt;/ul&gt;&lt;p name=&quot;f413&quot; id=&quot;f413&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Note that these questions are the same regardless of layout. You’re going to need to hunt down B, C, and D. You’re going to need to talk to them, figure out the timing, understand their priorities. At least, we hope you do.&lt;/p&gt;
&lt;p name=&quot;346c&quot; id=&quot;346c&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In reality, nobody wants to do any of that shit. It’s way less fun than just fixing the damn API. It’s all human and messy. In a polyrepo, you can just make your change, get it reviewed by others who are focused on that component (likely not B, C, or D), and move on. Team B, C, and D can all just safely stay on their current version for now. They’ll move when they realize your brilliance!&lt;/p&gt;
&lt;p name=&quot;fbbc&quot; id=&quot;fbbc&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In a monorepo, the onus shifts by default. Team A changes their component, and immediately breaks B, C, and D if they aren’t careful. This causes B, C, and D to show up at A’s door, wondering why team A broke the build. This teaches A that they cannot skip my list above. They have to talk about what they’re going to do. Can B, C, and D move? What if B and C can, but D was tightly coupled to a side effect of the behavior of the old algorithm?&lt;/p&gt;
&lt;p name=&quot;ce7d&quot; id=&quot;ce7d&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;We then have to talk about how we get out:&lt;/p&gt;
&lt;ol class=&quot;postList&quot;&gt;&lt;li name=&quot;5b60&quot; id=&quot;5b60&quot; class=&quot;graf graf--li graf-after--p&quot;&gt;Support multiple internal APIs, with the old algorithm deprecated, until D can get off it.&lt;/li&gt;
&lt;li name=&quot;def5&quot; id=&quot;def5&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Support multiple released versions, one with the old interface, one with the new.&lt;/li&gt;
&lt;li name=&quot;eb06&quot; id=&quot;eb06&quot; class=&quot;graf graf--li graf-after--li&quot;&gt;Delay releasing the improvement in A until B, C, and D can all accept it at the same time.&lt;/li&gt;
&lt;/ol&gt;&lt;p name=&quot;dc13&quot; id=&quot;dc13&quot; class=&quot;graf graf--p graf-after--li&quot;&gt;Lets say we choose 1, multiple APIs. In this case, we have two live code paths. The old path and the new one. Pretty manageable in some situations. We put the old behavior back in, deprecate it, and agree on a schedule for its removal with team D. Essentially identical in a poly or mono repo.&lt;/p&gt;
&lt;p name=&quot;9816&quot; id=&quot;9816&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;For multiple released versions, we need to have a fork. We now have two components — A1 and A2. Team B and C are on A2, and D is on A1. We need to have each component be a releasable head — because security updates and other bug fixes may be required before D can move. In a polyrepo, we can hide this away in a long lived branch, which feels good. In a monorepo, we force the code into a new module altogether. Team D has to still take a change — to the “old” component. Everyone can see the cost we pay here — we have twice as much code now, and any bug fixes that apply to A1 and A2 must be applied in both cases. With the branch approach in a polyrepo, this is hidden away behind cherry picking. We intellectualize the cost as being lower, because it’s not literally duplicated. In practical terms, the cost is the same: you will build, release, and maintain two mostly identical code bases until such time as you can retire one. The difference is, with a monorepo, this pain is direct and up front. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;It sucks more, and that’s a good thing.&lt;/strong&gt;&lt;/p&gt;
&lt;p name=&quot;ec20&quot; id=&quot;ec20&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;Finally, we get to 3. Delay the release. It may be that the changes A made are quality of life for team A. Important, but not urgent. Can we just delay? In a polyrepo, we push this to artifact pinning. Sure, team D, we say. Just stay on the old version until you catch up! This sets up a game of chicken. Team A continues to work on their component, ignoring that team D is getting ever more stale (that’s team D’s problem, those stupid heads.) Meanwhile, team D just talks shit about team A’s cavalier attitude to code stability, if they talk about it at all. Months pass. Finally team D decides to take a look at moving, but the changes to A have only gotten bigger. Team A barely remembers when or how they broke D. The upgrade is more painful, and will take longer. Which pushes it further down the priority stack. Until the day we have a security issue in A, when we are forced to fork. Team A has to go backward in time, find the moment where D was stable, fix the issue there, and make it releasable forward in time. &lt;strong class=&quot;markup--strong markup--p-strong&quot;&gt;This is the de-facto choice people make, and it is by far the worst one.&lt;/strong&gt; It feels good at the time, both for team A and D — because we get to ignore each other.&lt;/p&gt;
&lt;p name=&quot;91e7&quot; id=&quot;91e7&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In a monorepo, 3 really isn’t an option. You’re forced to deal with the situation in one of the two sustainable ways. You’re forced to see the upfront cost of having two releasable heads. You teach yourself to be defensive about back-compat breaking upgrades. But most importantly: &lt;em class=&quot;markup--em markup--p-em&quot;&gt;you cannot avoid having the hard conversation&lt;/em&gt;.&lt;/p&gt;
&lt;p name=&quot;1bf2&quot; id=&quot;1bf2&quot; class=&quot;graf graf--p graf-after--p&quot;&gt;In my experience, as the teams get big enough to no longer be able to hold the whole system in their head this is the most important thing in the world. You must raise the visibility of friction in the system. You have to work actively to force teams to look up from their component, and see the perspectives of other teams and consumers.&lt;/p&gt;
&lt;p name=&quot;933f&quot; id=&quot;933f&quot; class=&quot;graf graf--p graf-after--p graf--trailing&quot;&gt;Yes, you can make tooling that tries to force the issue in polyrepos. But my experience with teaching continuous delivery and automation to huge enterprises tells me this: you want the default behavior, without tooling, to be the behaviors you want to see in the world. The default behavior of a polyrepo is isolation — that’s the whole point. The default behavior of a monorepo is shared responsibility and visibility — that’s the whole point. In both cases, I’m going to build tooling to sand off the rough edges. As a leader, I’ll pick the monorepo every time: because tools must reinforce the culture I want, and culture comes from the tiny decisions and behaviors of a team every day.&lt;/p&gt;
</description>
<pubDate>Thu, 03 Jan 2019 23:06:32 +0000</pubDate>
<dc:creator>Soliah</dc:creator>
<og:title>Monorepo: please do! – Adam Jacob – Medium</og:title>
<og:url>https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70</og:url>
<og:description>You should choose a monorepo because the default behavior it encourages in your teams is visibility and shared responsibility, especially…</og:description>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70</dc:identifier>
</item>
<item>
<title>Software Engineering at Google (2017)</title>
<link>https://arxiv.org/abs/1702.01715</link>
<guid isPermaLink="true" >https://arxiv.org/abs/1702.01715</guid>
<description>&lt;div class=&quot;dateline&quot; readability=&quot;10.706666666667&quot;&gt;(Submitted on 6 Feb 2017 (&lt;a href=&quot;https://arxiv.org/abs/1702.01715v1&quot;&gt;v1&lt;/a&gt;), last revised 14 Feb 2017 (this version, v2))&lt;/div&gt;
&lt;blockquote class=&quot;abstract mathjax&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;span class=&quot;descriptor&quot;&gt;Abstract:&lt;/span&gt; We catalog and describe Google's key software engineering practices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;metatable&quot;&gt;
&lt;table summary=&quot;Additional metadata&quot; readability=&quot;3.7113402061856&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td class=&quot;tablecell label&quot;&gt;Comments:&lt;/td&gt;
&lt;td class=&quot;tablecell comments mathjax&quot;&gt;20 pages, single-column, 11pt, version #2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;tablecell label&quot;&gt;Subjects:&lt;/td&gt;
&lt;td class=&quot;tablecell subjects&quot;&gt;&lt;span class=&quot;primary-subject&quot;&gt;Software Engineering (cs.SE)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tablecell label&quot;&gt;&lt;abbr title=&quot;Association of Computing Machinery Classification&quot;&gt;ACM&lt;/abbr&gt; classes:&lt;/td&gt;
&lt;td class=&quot;tablecell acm-classes&quot;&gt;D.2&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tablecell label&quot;&gt;Cite as:&lt;/td&gt;
&lt;td class=&quot;tablecell arxivid&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1702.01715&quot;&gt;arXiv:1702.01715&lt;/a&gt; [cs.SE]&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1.2941176470588&quot;&gt;&lt;td class=&quot;tablecell label&quot;&gt; &lt;/td&gt;
&lt;td class=&quot;tablecell arxividv&quot;&gt;(or &lt;span class=&quot;arxivid&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1702.01715v2&quot;&gt;arXiv:1702.01715v2&lt;/a&gt; [cs.SE]&lt;/span&gt; for this version)&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;submission-history&quot; readability=&quot;9.8920863309353&quot;&gt;
&lt;h2&gt;Submission history&lt;/h2&gt;
From: Fergus Henderson [&lt;a href=&quot;https://arxiv.org/show-email/ca46b0a1/1702.01715&quot;&gt;view email&lt;/a&gt;]&lt;br /&gt;&lt;strong&gt;&lt;a href=&quot;https://arxiv.org/abs/1702.01715v1&quot;&gt;[v1]&lt;/a&gt;&lt;/strong&gt; Mon, 6 Feb 2017 17:22:07 UTC (327 KB)&lt;br /&gt;&lt;strong&gt;[v2]&lt;/strong&gt; Tue, 14 Feb 2017 05:21:00 UTC (328 KB)&lt;br /&gt;&lt;/div&gt;

</description>
<pubDate>Thu, 03 Jan 2019 19:33:58 +0000</pubDate>
<dc:creator>weinzierl</dc:creator>
<og:title>Software Engineering at Google</og:title>
<og:url>https://arxiv.org/abs/1702.01715v2</og:url>
<og:description>We catalog and describe Google's key software engineering practices.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arxiv.org/abs/1702.01715</dc:identifier>
</item>
<item>
<title>How to Eliminate the Dreaded “Blind Spot”</title>
<link>http://pages.cs.wisc.edu/~gdguo/driving/BlindSpot.htm</link>
<guid isPermaLink="true" >http://pages.cs.wisc.edu/~gdguo/driving/BlindSpot.htm</guid>
<description>&lt;p class=&quot;MsoNormal&quot;&gt;&lt;strong&gt;&lt;span&gt;How To Eliminate The Dreaded &quot;Blind Spot&quot;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br /&gt;&lt;strong&gt;A Canadian Direct Insurance Claim:&lt;/strong&gt;&lt;br /&gt;A Canadian Direct customer was driving southbound in the right lane and was wanting to turn left at the next intersection. There was a vehicle beside her and she waited to let it go past so she could move into the left lane. It went by and she checked back to see if any other vehicle was there. There wasn't and she started to change lanes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The customer changed lanes and hit a car that appeared to come out of nowhere. There was no drinking &amp;amp; driving involved. Police were called to the scene and she is now suffering minor neck injuries. However, there was lots of damages to both vehicles.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;Could This Accident Have Been Avoided?&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;br /&gt;Most people's reaction to reading the above claim is that the car in the left lane must have been in the Insured's blind spot, therefore it was an unavoidable accident. I believe that car crashes are not merely &quot;accidents&quot; - something unavoidable. I think that this, and most every collision, should not have occurred. Why? In this case, because I don't believe in &quot;blind spots.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In fact, &quot;blind spots&quot; are a thing of the past! On any car or mini-van built in the last ten or twenty years (assuming it has a right side mirror, which everyone should have), the mirrors can be adjusted so there are no &lt;strong&gt;blind spots.&lt;/strong&gt; How?&lt;/span&gt;&lt;/p&gt;
&lt;ol start=&quot;1&quot; type=&quot;1&quot;&gt;&lt;li class=&quot;MsoNormal&quot;&gt;&lt;span&gt;The first step is to adjust the rear-view mirror to do exactly that - give you a view directly to the rear. Position it so that it best covers your view straight out the rear window. Don't bother tilting it to one side or the other to assist with your view of traffic to either side of your car. That's what the side mirrors are for.&lt;br /&gt; &lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Next, lean your head until it almost touches the driver's side window. Then, adjust your left side mirrors so that you can &lt;strong&gt;just barely&lt;/strong&gt; see the side of your car, and no more than that.&lt;br /&gt; &lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Lean your head to the right towards the middle of the car and adjust the right side mirror so that you can &lt;strong&gt;just barely&lt;/strong&gt; see the right side of your car. You should NOT be able to see the side of your car when your head is perfectly upright. After all, why would you want to? When was the last time your own car ran into itself?&lt;br /&gt; &lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;MsoNormal&quot;&gt;&lt;span&gt;Check for blind spots by doing the following: While driving along a four-lane road in the right lane, note a vehicle in the left lane coming up to pass you from behind. Without moving your head, glance in the rear-view mirror and follow it as it approaches your car in the left lane. Just before it disappears from your view in the rear-view mirror, glance to the left side mirror. There it is. Now follow that vehicle in the side mirror as it begins to pass you. Then, just before it disappears from the side mirror, you should see it with your peripheral vision. Notice that without even turning your head, you never had a blind-spot. Then try it with the right side mirror. Watch as you pass a vehicle travelling in the right lane go from your peripheral vision, to your right side mirror, to your rear-view mirror. Again, no blind-spot. If there is a blind spot for even a fraction of a second, your side mirror adjustment needs some fine-tuning.&lt;br /&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p class=&quot;MsoNormal&quot;&gt;&lt;span&gt;&lt;img width=&quot;498&quot; height=&quot;294&quot; src=&quot;http://pages.cs.wisc.edu/~gdguo/driving/blindspot_files/image001.gif&quot; alt=&quot;Blind Spot Image&quot; border=&quot;0&quot; v:shapes=&quot;_x0000_i1025&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This procedure should be done every time you get into a car in which you have not adjusted the mirrors. It only takes seconds, and can make a big difference.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Far too many drivers do not use their side mirrors enough when changing lanes, instead relying on turning their heads and looking over their shoulder. The problem is as they are not set or adjusted properly - resulting in blind spots - the driver does not trust using the side mirrors. But, once they are adjusted properly, using them and trusting them to give you the information you require will become a habit.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;With the mirrors adjusted properly, a shoulder check to change lanes becomes more of a &quot;shoulder peek&quot;, meaning you don't have to turn your head so far. That means your peripheral vision will still provide a view in front of you - no &quot;blind spot&quot; in front of you either, meaning less chance of rear-ending a vehicle that has suddenly stopped.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;As a side benefit, with the side mirrors tilted out farther, you will no longer have to worry about the bright lights of a vehicle behind you glaring in your eyes.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It may take a little while to feel comfortable with not being able to see the side of your own car in the side mirrors (if you really need to see it every now and then, just tilt your head a little!). Also, it may take a little time to stop relying on the side mirrors for looking to the rear. But once you get used to it, you'll love it. You'll feel much more confident and comfortable in traffic.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;MsoNormal&quot;&gt; &lt;/p&gt;
</description>
<pubDate>Thu, 03 Jan 2019 19:08:43 +0000</pubDate>
<dc:creator>harshulpandav</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://pages.cs.wisc.edu/~gdguo/driving/BlindSpot.htm</dc:identifier>
</item>
<item>
<title>Birding Like It’s 1899: Inside a Blockbuster American West Video Game</title>
<link>https://www.audubon.org/news/birding-its-1899-inside-blockbuster-american-west-video-game</link>
<guid isPermaLink="true" >https://www.audubon.org/news/birding-its-1899-inside-blockbuster-american-west-video-game</guid>
<description>&lt;aside class=&quot;article-aside reflow reflow-into-body&quot;&gt;
        &lt;/aside&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;The first time I see ravens, I flush them out of an alpine meadow carpeted with wildflowers. I pause to watch the flock fly off towards the distant, snow-capped peaks, trailed by their echoing croaks, when a man riding by on horseback bumps into me. Irritated, I shoot the man dead, and take his hat. So it goes in &quot;Red Dead Redemption 2.&quot;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;Available since October, &quot;Red Dead Redemption 2&quot; (RDR2) is a video game set in an imagined version of the American West in the year 1899. It’s a massive release, both one of the &lt;/span&gt;&lt;a href=&quot;https://www.ign.com/articles/2018/12/11/amazons-best-selling-games-of-2018&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;highest-selling&lt;/span&gt;&lt;/a&gt;&lt;span&gt; video games of 2018 and one that sits at or near the top of many of the internet’s &lt;/span&gt;&lt;a href=&quot;https://www.polygon.com/2018/5/29/17386324/best-games-2018-ps4-pc-xbox-one&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;Best Of 2018&lt;/span&gt;&lt;/a&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;video game &lt;/span&gt;&lt;a href=&quot;https://www.thrillist.com/entertainment/nation/best-video-games-2018&quot; target=&quot;_blank&quot;&gt;&lt;span&gt;lists&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. It’s also unique in that the natural world—or, at least, a romanticized and heightened version of it—is one of the main characters. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;You play as outlaw Arthur Morgan and can choose to spend your time marauding across the landscape, holding up wagons and evading lawmen—or you can play a gentler way, as a birder. Of sorts. Birding as a hobby was just getting underway in the late 1800s, and much of the population, especially those living off the land as Arthur Morgan does, still primarily viewed birds as resources for food, materials, and hunting sport. The &lt;a href=&quot;https://www.audubon.org/news/migratory-bird-treaty-act&quot;&gt;nation's landmark law protecting migratory birds&lt;/a&gt; was still two decades away.  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;aside class=&quot;article-aside full-width&quot;&gt;&lt;figure class=&quot;article-image type-default&quot;&gt;&lt;img data-src=&quot;/cdn/farfuture/m13KIQuVSID34BntMCnerAYj7oH8KluZFeL0mbaWAKA/mtime:1546446520/sites/default/files/web_1.jpg&quot; src=&quot;https://www.audubon.org/sites/all/modules/contrib/lazyloader/image_placeholder.gif&quot; width=&quot;1920&quot; height=&quot;1080&quot;/&gt;&lt;figcaption class=&quot;caption article-aside-caption&quot;&gt;&lt;span class=&quot;image-caption&quot;&gt;Arthur Morgan, birder. Image: Courtesy of Rockstar Games&lt;/span&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;/aside&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;The gigantic RDR2 playable map is brimming with life. Hawks perch on exposed branches and ducks flush from riverbanks. Wolves chase deer through the woods, and vultures descend to feed on the carcasses. There are alligators, turtles, snakes, frogs, toads, bats, and dozens of species of fish. In all there are about 200 distinct, interactive species of animals in RDR2, and more than 40 different plant species. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;I spent most of my time finding birds, and was impressed with the breadth and relative accuracy of the species represented. Birds change with habitat: Roseate Spoonbills and Great Egrets feed in the bayous of Saint Denis. Laughing Gulls and Red-footed Boobies roost along the coast, while eagles and condors soar over mountain peaks. Each of these are crafted with accurate field marks and habits. There are dozens of species I couldn’t even find, including Carolina Parakeets, Ferruginous Hawks, and Pileated Woodpeckers. Like real life birding, you’re never guaranteed to see anything. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;The sound design, too, is impressive. The landscape is alive with birdsong, including many species not actually in the game, like Northern Flicker and Ruby-crowned Kinglet. I was riding through a wooded area one time as dusk turned to night, and whip-poor-wills began singing out all around me. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;article-image type-full&quot;&gt;&lt;img data-src=&quot;/cdn/farfuture/Cd6TYuACb-NZZrlKygettqNhXUTovxWBPDNi3oiOOCk/mtime:1546447446/sites/default/files/web_13.jpg&quot; src=&quot;https://www.audubon.org/sites/all/modules/contrib/lazyloader/image_placeholder.gif&quot; width=&quot;1920&quot; height=&quot;1080&quot;/&gt;&lt;figcaption class=&quot;caption&quot;&gt;&lt;span class=&quot;image-caption&quot;&gt;Arthur Morgan watching ravens flying overhead. Image: Courtesy of Rockstar Games&lt;/span&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;Those kinds of natural surprises are what I love most about the game, and they happen frequently. One time I had shot a Mallard and left its body on the lakeshore after taking its feathers and meat. I was nearby about 10 minutes later and noticed a Red Fox emerging from the grass and walking down towards the duck carcass, still on the shore. A pair of Turkey Vultures descended and the trio fed on the duck. I watched from afar through my binoculars (in-game binoculars!) and felt incredibly lucky to have caught such a spontaneous and real-feeling episode.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;There are some minor errors I noticed, however, that as a birder and critic of these things I feel obligated to point out. In addition to the Snowy Egret, there are quite a few Little Egrets in Saint Denis, &lt;/span&gt;&lt;a href=&quot;https://www.audubon.org/field-guide/bird/little-egret&quot;&gt;&lt;span&gt;which would have been&lt;/span&gt;&lt;/a&gt;&lt;span&gt; a truly rare North America sighting.&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;span&gt;What’s called a California Quail is actually a Northern Bobwhite. Tanagers are, for some reason, referred to as Scarlet Tanager Songbird and Western Tanager Songbird. But that’s all. Overall, RDR2 is absolutely the best and boldest representation of American birdlife in any video game. It’s not even close.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;




&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;But that doesn’t mean it’s a game for birders. This game exists in a time where humans mainly viewed birds—and all of the natural world—as ripe for exploitation rather than appreciation. All animals in the game can be hunted, and either eaten or crafted into clothing or materials. Bird flight feathers are used to craft arrows that fly straighter. Special feathers, like those from hawks and eagles, are used to make clothing. All of these parts can be traded or sold.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;Of course, unregulated hunting was a major, very real threat to birds at the time. The demand for egret plumes for fancy hats was driving several species toward extinction. (Snowy Egret plumes can be sold in-game for $2.50 apiece.) Habitat loss and overhunting contributed &lt;/span&gt;&lt;a href=&quot;http://johnjames.audubon.org/last-carolina-parakeet&quot;&gt;&lt;span&gt;to the extinction of the Carolina Parakeet&lt;/span&gt;&lt;/a&gt;&lt;span&gt; soon after the game’s timeframe, in the early 20th century. (Carolina Parakeet flight feathers can be used to make far-flying arrows in the game.) The type of wanton destruction encouraged in Red Dead Redemption 2 is what led the National Audubon Society to lobby for, and Congress to pass, the real &lt;a href=&quot;https://www.audubon.org/news/the-migratory-bird-treaty-act-explained&quot;&gt;Migratory Bird Treaty Act&lt;/a&gt;&lt;a href=&quot;https://www.audubon.org/news/migratory-bird-treaty-act&quot;&gt; &lt;/a&gt;&lt;a href=&quot;https://www.audubon.org/news/the-migratory-bird-treaty-act-explained&quot;&gt;in 1918&lt;/a&gt;, and other environmental legislation in the following decades. But in the game, the player must kill to progress.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;




&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;Thankfully, the game does not shy away from the realities of these interactions. An imprecise shot will wound an animal, leaving it to yelp and squirm before you finish your job. In order to receive meat or parts you need to skin or pluck the animal, a process that though superficial is clearly and gruesomely animated. Nor does RDR2 spare you the experience of the human impact on the land.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;In fact, the disastrous intersection between humans and the environment is the game’s major theme. A sense of foreboding follows me around the lush world, knowledge that humans were at work destroying it all. Much of that destruction is represented in-game, from the factory smokestacks of Saint Denis to the Owanjila Dam, but I could also feel it extended into real life. I couldn’t help but envision the dirt paths becoming busy highways, and each green meadow converted into a housing development. RDR2 presents an idealized version of the natural world, but the loss feels very real.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;article-image type-full&quot;&gt;&lt;img data-src=&quot;/cdn/farfuture/mpjV-1UOsMd2GCkknn3YBFZAYJtFN19XEGyGOanbvVo/mtime:1546447763/sites/default/files/web_3.jpg&quot; src=&quot;https://www.audubon.org/sites/all/modules/contrib/lazyloader/image_placeholder.gif&quot; width=&quot;1920&quot; height=&quot;815&quot;/&gt;&lt;figcaption class=&quot;caption&quot;&gt;&lt;span class=&quot;image-caption&quot;&gt;Mountain vista. Image: Courtesy of Rockstar Games&lt;/span&gt;    &lt;/figcaption&gt;&lt;/figure&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-f925b222-7fff-6a15-d0c0-328c416936be&quot;&gt;&lt;span&gt;The trouble is, as a birder, it’s not a lesson I needed to learn. I know full well about the continued decline of bird populations, habitat loss, and environmental degradation. That the game could elicit such deep feelings of sadness and regret is to its credit, but I was often left feeling hopeless and wanting to get outside to enjoy real nature while I still could. My mom always used to tell me to stop playing video games and go outside, but this is the first game that made me want to. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;h3 dir=&quot;ltr&quot;&gt;&lt;strong&gt;FIELD LIST: BIRDS OF &quot;RED DEAD REDEMPTION 2&quot;&lt;/strong&gt;&lt;/h3&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;Each of these birds is a distinct species in the game. Names are as presented in-game, followed by their most likely locations. Does not count heard-only birds. Does not include domestic chickens. (Information derived directly from game, as well as from &lt;a href=&quot;https://rankedboost.com/red-dead-redemption-2/hunting-wildlife-fishing/&quot;&gt;Ranked Boost&lt;/a&gt;.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;LOONS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Loon, Common; West Elizabeth, Ambarino, and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Loon, Yellow-billed; West Elizabeth and Ambarino&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Loon, Pacific; West Elizabeth, Ambarino, and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;PELICANS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Pelican, American White; West Elizabeth, New Hanover, and Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Pelican, Brown; West Elizabeth, New Hanover, and Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;BOOBIES&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Booby, Red-footed; Guarma&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;CORMORANTS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Cormorant, Double-crested; Lemoyne, New Hanover, and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Cormorant, Neotropic; New Hanover, Lemoyne, and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;EGRETS / HERONS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Egret, Little; Bayou Nwa&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Egret, Snowy; Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Egret, Reddish; Bayou Nwa&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Heron, Great Blue; Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Heron, Tricolored; Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Spoonbill, Roseate; Bayou Nwa&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;VULTURES&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Vulture, Eastern Turkey; New Hanover and Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Vulture, Western Turkey; New Austin and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;GEESE / DUCKS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Mallard;  West Elizabeth, New Hanover and Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Duck, Pekin;  West Elizabeth, New Hanover and Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Goose, Canada; New Hanover and Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;GROUSE / TURKEY / QUAIL&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Prairie Chicken, Greater; Great Plains&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Pheasant, Ring-necked; New Hanover and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Pheasant, Chinese Ring-necked; New Hanover and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Turkey, Eastern Wild; West Elizabeth, New Hanover, and Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Turkey, Rio Grande; New Austin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Quail, California; New Austin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;RAPTORS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Condor, California; New Austin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Hawk, Ferruginous; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Hawk, Red-tailed; New Austin, West Elizabeth, and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Hawk, Rough-legged; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Eagle, Bald; Ambarino and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Eagle, Golden; Ambarino and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;CRANES&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Crane, Sandhill; Lemoyne and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Crane, Whooping; Lemoyne and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;GULLS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Gull, Laughing; Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Gull, Herring; Bluewater Marsh&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Gull, Ring-billed; Saint Denis&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;PARROTS / PARAKEETS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Parakeet, Carolina; Lemoyne&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Macaw, Scarlet; Guarma&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Macaw, Great Green; Guarma&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Macaw, Blue and Yellow; Guarma&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;OWLS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Owl, Great Horned; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Owl, Coastal Horned; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Owl, California Horned; New Austin&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;WOODPECKER&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Woodpecker, Pileated; New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Woodpecker, Red-bellied; Roanoke Ridge&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;JAYS / CROWS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Jay, Blue; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Crow, American; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Raven, Western; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;THRUSHES&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Robin, American;  Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;WAXWINGS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Waxwing, Cedar; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;TANAGERS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Songbird, Scarlet Tanager; Lemoyne, New Hanover, and West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Songbird, Western Tanager; New Austin, West Elizabeth, and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;NEW WORLD SPARROWS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Sparrow, Eurasian Tree; West Elizabeth, and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Sparrow, American Tree; West Elizabeth, and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Sparrow, Golden-crowned; West Elizabeth, and New Hanover&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;CARDINALS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Cardinal, Northern; Widespread&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;ORIOLES AND BLACKBIRDS&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Oriole, Baltimore; Roanoke Ridge&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;span id=&quot;docs-internal-guid-5ca069bb-7fff-2746-b302-8e2c4adc8e26&quot;&gt;&lt;span&gt;___ Oriole, Hooded; West Elizabeth&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                </description>
<pubDate>Thu, 03 Jan 2019 18:58:05 +0000</pubDate>
<dc:creator>alexlrobertson</dc:creator>
<og:type>article</og:type>
<og:title>Birding Like It’s 1899: Inside a Blockbuster American West Video Game</og:title>
<og:url>https://www.audubon.org/news/birding-its-1899-inside-blockbuster-american-west-video-game</og:url>
<og:description>In &quot;Red Dead Redemption 2,&quot; a birder finds joy and despair in a realistic portrayal of wildlife in the pre-conservation era.</og:description>
<og:image>https://cdn.audubon.org/cdn/farfuture/F_msXP0H11Zez5oXYhw5KwTZwGNgyTA-cpaYHYpq4H8/mtime:1546446282/sites/default/files/styles/social_media_photo/public/web_fb_23.jpg?itok=zBnE2qPN</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.audubon.org/news/birding-its-1899-inside-blockbuster-american-west-video-game</dc:identifier>
</item>
<item>
<title>How Space and Time Could Be a Quantum Error-Correcting Code</title>
<link>https://www.quantamagazine.org/how-space-and-time-could-be-a-quantum-error-correcting-code-20190103/</link>
<guid isPermaLink="true" >https://www.quantamagazine.org/how-space-and-time-could-be-a-quantum-error-correcting-code-20190103/</guid>
<description>&lt;p&gt;So, how do quantum error-correcting codes work? The trick to protecting information in jittery qubits is to store it not in individual qubits, but in patterns of entanglement among many.&lt;/p&gt;
&lt;p&gt;As a simple example, consider the three-qubit code: It uses three “physical” qubits to protect a single “logical” qubit of information against bit-flips. (The code isn’t really useful for quantum error correction because it can’t protect against phase-flips, but it’s nonetheless instructive.) The |0⟩ state of the logical qubit corresponds to all three physical qubits being in their |0⟩ states, and the |1⟩ state corresponds to all three being |1⟩’s. The system is in a “superposition” of these states, designated |000⟩ + |111⟩. But say one of the qubits bit-flips. How do we detect and correct the error without directly measuring any of the qubits?&lt;/p&gt;
&lt;p&gt;The qubits can be fed through two gates in a quantum circuit. One gate checks the “parity” of the first and second physical qubit — whether they’re the same or different — and the other gate checks the parity of the first and third. When there’s no error (meaning the qubits are in the state |000⟩ + |111⟩), the parity-measuring gates determine that both the first and second and the first and third qubits are always the same. However, if the first qubit accidentally bit-flips, producing the state |100⟩ + |011⟩, the gates detect a difference in both of the pairs. For a bit-flip of the second qubit, yielding |010⟩ + |101⟩, the parity-measuring gates detect that the first and second qubits are different and first and third are the same, and if the third qubit flips, the gates indicate: same, different. These unique outcomes reveal which corrective surgery, if any, needs to be performed — an operation that flips back the first, second or third physical qubit without collapsing the logical qubit. “Quantum error correction, to me, it’s like magic,” Almheiri said.&lt;/p&gt;

&lt;p&gt;The best error-correcting codes can typically recover all of the encoded information from slightly more than half of your physical qubits, even if the rest are corrupted. This fact is what hinted to Almheiri, Dong and Harlow in 2014 that quantum error correction might be related to the way anti-de Sitter space-time arises from quantum entanglement.&lt;/p&gt;
&lt;p&gt;It’s important to note that AdS space is different from the space-time geometry of our “de Sitter” universe. Our universe is infused with positive vacuum energy that causes it to expand without bound, while anti-de Sitter space has negative vacuum energy, which gives it the hyperbolic geometry of one of M.C. Escher’s &lt;em&gt;Circle Limit&lt;/em&gt; designs. Escher’s tessellated creatures become smaller and smaller moving outward from the circle’s center, eventually vanishing at the perimeter; similarly, the spatial dimension radiating away from the center of AdS space gradually shrinks and eventually disappears, establishing the universe’s outer boundary. AdS space gained popularity among quantum gravity theorists in 1997 after the renowned physicist &lt;a href=&quot;https://www.quantamagazine.org/juan-maldacena-pondering-quantum-gravity-by-the-pond-20170623/&quot;&gt;Juan Maldacena discovered&lt;/a&gt; that the bendy space-time fabric in its interior is “holographically dual” to a quantum theory of particles living on the lower-dimensional, gravity-free boundary.&lt;/p&gt;

&lt;p&gt;In exploring how the duality works, as hundreds of physicists have in the past two decades, Almheiri and colleagues noticed that any point in the interior of AdS space could be constructed from slightly more than half of the boundary — just as in an optimal quantum error-correcting code.&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In their paper conjecturing that holographic space-time and quantum error correction are one and the same, they described how even a simple code could be understood as a 2D hologram. It consists of three “qutrits” — particles that exist in any of three states — sitting at equidistant points around a circle. The entangled trio of qutrits encode one logical qutrit, corresponding to a single space-time point in the circle’s center. The code protects the point against the erasure of any of the three qutrits.&lt;/p&gt;
&lt;p&gt;Of course, one point is not much of a universe. In 2015, Harlow, Preskill, Fernando Pastawski and Beni Yoshida &lt;a href=&quot;https://arxiv.org/abs/1503.06237&quot;&gt;found another holographic code&lt;/a&gt;, nicknamed the HaPPY code, that captures more properties of AdS space. The code tiles space in five-sided building blocks — “little Tinkertoys,” said &lt;a href=&quot;https://web.stanford.edu/~phayden/&quot;&gt;Patrick Hayden&lt;/a&gt; of Stanford University, a leader in the research area. Each Tinkertoy represents a single space-time point. “These tiles would be playing the role of the fish in an Escher tiling,” Hayden said.&lt;/p&gt;

&lt;p&gt;In the HaPPY code and other holographic error-correcting schemes that have been discovered, everything inside a region of the interior space-time called the “entanglement wedge” can be reconstructed from qubits on an adjacent region of the boundary. Overlapping regions on the boundary will have overlapping entanglement wedges, Hayden said, just as a logical qubit in a quantum computer is reproducible from many different subsets of physical qubits. “That’s where the error-correcting property comes in.”&lt;/p&gt;
&lt;p&gt;“Quantum error correction gives us a more general way of thinking about geometry in this code language,” said Preskill, the Caltech physicist. The same language, he said, “ought to be applicable, in my opinion, to more general situations” — in particular, to a de Sitter universe like ours. But de Sitter space, lacking a spatial boundary, has so far proven much harder to understand as a hologram.&lt;/p&gt;
&lt;p&gt;For now, researchers like Almheiri, Harlow and Hayden are sticking with AdS space, which shares many key properties with a de Sitter world but is simpler to study. Both space-time geometries abide by Einstein’s theory; they simply curve in different directions. Perhaps most importantly, both kinds of universes contain black holes. “The most fundamental property of gravity is that there are black holes,” said Harlow, who is now an assistant professor of physics at the Massachusetts Institute of Technology. “That’s what makes gravity different from all the other forces. That’s why quantum gravity is hard.”&lt;/p&gt;
&lt;p&gt;The language of quantum error correction has provided a new way of describing black holes. The presence of a black hole is defined by &lt;strong&gt;&lt;em&gt;“&lt;/em&gt;&lt;/strong&gt;the breakdown of correctability,” Hayden said: “When there are so many errors that you can no longer keep track of what’s going on in the bulk [space-time] anymore, you get a black hole. It’s like a sink for your ignorance.”&lt;/p&gt;
&lt;p&gt;Ignorance invariably abounds when it comes to black hole interiors. Stephen Hawking’s 1974 epiphany that black holes radiate heat, and thus eventually evaporate away, triggered the infamous &lt;a href=&quot;https://www.quantamagazine.org/stephen-hawkings-black-hole-paradox-keeps-physicists-puzzled-20180314/&quot;&gt;“black hole information paradox,”&lt;/a&gt; which asks what happens to all the information that black holes swallow. Physicists need a quantum theory of gravity to understand how things that fall in black holes also get out. The issue may relate to cosmology and the birth of the universe, since expansion out of a Big Bang singularity is much like gravitational collapse into a black hole in reverse.&lt;/p&gt;
</description>
<pubDate>Thu, 03 Jan 2019 18:08:20 +0000</pubDate>
<dc:creator>_Microft</dc:creator>
<og:title>How Space and Time Could Be a Quantum Error-Correcting Code | Quanta Magazine</og:title>
<og:type>article</og:type>
<og:url>https://www.quantamagazine.org/how-space-and-time-could-be-a-quantum-error-correcting-code-20190103/</og:url>
<og:image>https://d2r55xnwy6nx47.cloudfront.net/uploads/2019/01/QuantumError_1200x630-social.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.quantamagazine.org/how-space-and-time-could-be-a-quantum-error-correcting-code-20190103/</dc:identifier>
</item>
<item>
<title>Doom 3 in WebAssembly</title>
<link>http://continuation-labs.com/d3wasm/</link>
<guid isPermaLink="true" >http://continuation-labs.com/d3wasm/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;http://continuation-labs.com/d3wasm/&quot;&gt;http://continuation-labs.com/d3wasm/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18817278&quot;&gt;https://news.ycombinator.com/item?id=18817278&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 217&lt;/p&gt;
&lt;p&gt;# Comments: 135&lt;/p&gt;
</description>
<pubDate>Thu, 03 Jan 2019 17:58:35 +0000</pubDate>
<dc:creator>jsheard</dc:creator>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://continuation-labs.com/d3wasm/</dc:identifier>
</item>
<item>
<title>PyPy for low-latency systems</title>
<link>https://morepypy.blogspot.com/2019/01/pypy-for-low-latency-systems.html</link>
<guid isPermaLink="true" >https://morepypy.blogspot.com/2019/01/pypy-for-low-latency-systems.html</guid>
<description>

Recently I have merged the gc-disable branch, introducing a couple of features which are useful when you need to respond to certain events with the lowest possible latency. This work has been kindly sponsored by &lt;a class=&quot;reference external&quot; href=&quot;https://www.gambitresearch.com/&quot;&gt;Gambit Research&lt;/a&gt; (which, by the way, is a very cool and geeky place where to &lt;a class=&quot;reference external&quot; href=&quot;https://www.gambitresearch.com/jobs.html&quot;&gt;work&lt;/a&gt;, in case you are interested). Note also that this is a very specialized use case, so these features might not be useful for the average PyPy user, unless you have the same problems as described here.&lt;p&gt;The PyPy VM manages memory using a generational, moving Garbage Collector. Periodically, the GC scans the whole heap to find unreachable objects and frees the corresponding memory. Although at a first look this strategy might sound expensive, in practice the total cost of memory management is far less than e.g. on CPython, which is based on reference counting. While maybe counter-intuitive, the main advantage of a non-refcount strategy is that allocation is very fast (especially compared to malloc-based allocators), and deallocation of objects which die young is basically for free. More information about the PyPy GC is available &lt;a class=&quot;reference external&quot; href=&quot;https://pypy.readthedocs.io/en/latest/gc_info.html#incminimark&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;As we said, the total cost of memory managment is less on PyPy than on CPython, and it's one of the reasons why PyPy is so fast. However, one big disadvantage is that while on CPython the cost of memory management is spread all over the execution of the program, on PyPy it is concentrated into GC runs, causing observable pauses which interrupt the execution of the user program.&lt;br/&gt;To avoid excessively long pauses, the PyPy GC has been using an &lt;a class=&quot;reference external&quot; href=&quot;https://morepypy.blogspot.com/2013/10/incremental-garbage-collector-in-pypy.html&quot;&gt;incremental strategy&lt;/a&gt; since 2013. The GC runs as a series of &quot;steps&quot;, letting the user program to progress between each step.&lt;/p&gt;&lt;p&gt;The following chart shows the behavior of a real-world, long-running process:&lt;br/&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-44yKwUVK3BE/XC4X9XL4BII/AAAAAAAABbE/XdTCIoyA-eYxvxIgJhFHaKnzxjhoWStHQCEwYBhgL/s1600/gc-timing.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;620&quot; data-original-width=&quot;1600&quot; height=&quot;246&quot; src=&quot;https://3.bp.blogspot.com/-44yKwUVK3BE/XC4X9XL4BII/AAAAAAAABbE/XdTCIoyA-eYxvxIgJhFHaKnzxjhoWStHQCEwYBhgL/s640/gc-timing.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;The orange line shows the total memory used by the program, which increases linearly while the program progresses. Every ~5 minutes, the GC kicks in and the memory usage drops from ~5.2GB to ~2.8GB (this ratio is controlled by the &lt;a class=&quot;reference external&quot; href=&quot;https://pypy.readthedocs.io/en/latest/gc_info.html#environment-variables&quot;&gt;PYPY_GC_MAJOR_COLLECT&lt;/a&gt; env variable).&lt;br/&gt;The purple line shows aggregated data about the GC timing: the whole collection takes ~1400 individual steps over the course of ~1 minute: each point represent the &lt;strong&gt;maximum&lt;/strong&gt; time a single step took during the past 10 seconds. Most steps take ~10-20 ms, although we see a horrible peak of ~100 ms towards the end. We have not investigated yet what it is caused by, but we suspect it is related to the deallocation of raw objects.&lt;/p&gt;&lt;p&gt;These multi-millesecond pauses are a problem for systems where it is important to respond to certain events with a latency which is both low and consistent. If the GC kicks in at the wrong time, it might causes unacceptable pauses during the collection cycle.&lt;/p&gt;&lt;p&gt;Let's look again at our real-world example. This is a system which continuously monitors an external stream; when a certain event occurs, we want to take an action. The following chart shows the maximum time it takes to complete one of such actions, aggregated every minute:&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-FO9uFHSqZzU/XC4YC8LZUpI/AAAAAAAABa8/B8ZOrEgbVJUHoO65wxvCMVpvciO_d_0TwCLcBGAs/s1600/normal-max.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;604&quot; data-original-width=&quot;1600&quot; height=&quot;240&quot; src=&quot;https://4.bp.blogspot.com/-FO9uFHSqZzU/XC4YC8LZUpI/AAAAAAAABa8/B8ZOrEgbVJUHoO65wxvCMVpvciO_d_0TwCLcBGAs/s640/normal-max.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;You can clearly see that the baseline response time is around ~20-30 ms. However, we can also see periodic spikes around ~50-100 ms, with peaks up to ~350-450 ms! After a bit of investigation, we concluded that most (although not all) of the spikes were caused by the GC kicking in at the wrong time.&lt;p&gt;The work I did in the &lt;tt class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;gc-disable&lt;/span&gt;&lt;/tt&gt; branch aims to fix this problem by introducing &lt;a class=&quot;reference external&quot; href=&quot;https://pypy.readthedocs.io/en/latest/gc_info.html#semi-manual-gc-management&quot;&gt;two new features&lt;/a&gt; to the &lt;tt class=&quot;docutils literal&quot;&gt;gc&lt;/tt&gt; module:&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;ul class=&quot;simple&quot;&gt;&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;gc.disable()&lt;/tt&gt;, which previously only inhibited the execution of finalizers without actually touching the GC, now disables the GC major collections. After a call to it, you will see the memory usage grow indefinitely.&lt;/li&gt;
&lt;li&gt;&lt;tt class=&quot;docutils literal&quot;&gt;gc.collect_step()&lt;/tt&gt; is a new function which you can use to manually execute a single incremental GC collection step.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
It is worth to specify that &lt;tt class=&quot;docutils literal&quot;&gt;gc.disable()&lt;/tt&gt; disables &lt;strong&gt;only&lt;/strong&gt; the major collections, while minor collections still runs. Moreover, thanks to the JIT's virtuals, many objects with a short and predictable lifetime are not allocated at all. The end result is that most objects with short lifetime are still collected as usual, so the impact of &lt;tt class=&quot;docutils literal&quot;&gt;gc.disable()&lt;/tt&gt; on memory growth is not as bad as it could sound.&lt;p&gt;Combining these two functions, it is possible to take control of the GC to make sure it runs only when it is acceptable to do so. For an example of usage, you can look at the implementation of a &lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/antocuni/pypytools/src/0273afc3e8bedf0eb1ef630c3bc69e8d9dd661fe/pypytools/gc/custom.py?at=default&amp;amp;fileviewer=file-view-default&quot;&gt;custom GC&lt;/a&gt; inside &lt;a class=&quot;reference external&quot; href=&quot;https://pypi.org/project/pypytools/&quot;&gt;pypytools&lt;/a&gt;. The peculiarity is that it also defines a &quot;&lt;tt class=&quot;docutils literal&quot;&gt;with &lt;span class=&quot;pre&quot;&gt;nogc():&quot;&lt;/span&gt;&lt;/tt&gt; context manager which you can use to mark performance-critical sections where the GC is not allowed to run.&lt;/p&gt;&lt;p&gt;The following chart compares the behavior of the default PyPy GC and the new custom GC, after a careful placing of &lt;tt class=&quot;docutils literal&quot;&gt;nogc()&lt;/tt&gt; sections:&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-bGqs0WrOEBk/XC4YJN0uZfI/AAAAAAAABbA/4EXOASvy830IKBoTFtrnmY22Vyd_api-ACLcBGAs/s1600/nogc-max.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;606&quot; data-original-width=&quot;1600&quot; height=&quot;242&quot; src=&quot;https://1.bp.blogspot.com/-bGqs0WrOEBk/XC4YJN0uZfI/AAAAAAAABbA/4EXOASvy830IKBoTFtrnmY22Vyd_api-ACLcBGAs/s640/nogc-max.png&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;The yellow line is the same as before, while the purple line shows the new system: almost all spikes have gone, and the baseline performance is about 10% better. There is still one spike towards the end, but after some investigation we concluded that it was &lt;strong&gt;not&lt;/strong&gt; caused by the GC.&lt;p&gt;Note that this does &lt;strong&gt;not&lt;/strong&gt; mean that the whole program became magically faster: we simply moved the GC pauses in some other place which is &lt;strong&gt;not&lt;/strong&gt; shown in the graph: in this specific use case this technique was useful because it allowed us to shift the GC work in places where pauses are more acceptable.&lt;/p&gt;&lt;p&gt;All in all, a pretty big success, I think. These functionalities are already available in the nightly builds of PyPy, and will be included in the next release: take this as a New Year present :)&lt;/p&gt;&lt;p&gt;Antonio Cuni and the PyPy team
&lt;/p&gt;
</description>
<pubDate>Thu, 03 Jan 2019 17:46:55 +0000</pubDate>
<dc:creator>shocks</dc:creator>
<og:url>https://morepypy.blogspot.com/2019/01/pypy-for-low-latency-systems.html</og:url>
<og:title>PyPy for low-latency systems</og:title>
<og:description> PyPy for low-latency systems Recently I have merged the gc-disable branch, introducing a couple of features which are useful when you need...</og:description>
<og:image>https://3.bp.blogspot.com/-44yKwUVK3BE/XC4X9XL4BII/AAAAAAAABbE/XdTCIoyA-eYxvxIgJhFHaKnzxjhoWStHQCEwYBhgL/w1200-h630-p-k-no-nu/gc-timing.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://morepypy.blogspot.com/2019/01/pypy-for-low-latency-systems.html</dc:identifier>
</item>
<item>
<title>The Looking Glass – Holographic Display</title>
<link>https://i.lookingglassfactory.com/</link>
<guid isPermaLink="true" >https://i.lookingglassfactory.com/</guid>
<description>&lt;p&gt;Our team at Looking Glass Factory is a group of 3D creators that uses Unity, Solidworks, Maya, Blender and more every day. To that end, we frequently run holographic experiments with beautiful, expressive, weird, and wild 3D creations made available online. While we’ve done our best to attribute all works to their original creators, we may slip up from time to time. If you’re not properly credited, or we’ve done something that you’d rather we didn’t, &lt;a href=&quot;https://lookingglassfactory.com/cdn-cgi/l/email-protection#91e2fcf7d1fdfefefaf8fff6f6fdf0e2e2f7f0f2e5fee3e8bff2fefc&quot;&gt;don’t hesitate to send me a message&lt;/a&gt; and we’ll fix it.&lt;/p&gt;
&lt;p&gt;Or, if you’re just curious to see a Looking Glass in person and chat with those of us making the hardware and software behind it, come by our labs in Brooklyn or Hong Kong and we’d love to chat and show you what we’re up to. We’re looking forward to building the future of the hologram together with you.&lt;/p&gt;
&lt;p class=&quot;u-margin-top-large&quot;&gt;&lt;span class=&quot;u-text-bold u-text-black&quot;&gt;Shawn Frayne&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Co-Founder &amp;amp; CEO,&lt;/span&gt;&lt;br/&gt;&lt;span&gt;Looking Glass Factory&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 03 Jan 2019 17:17:00 +0000</pubDate>
<dc:creator>kgwxd</dc:creator>
<og:type>website</og:type>
<og:title>A Universal Holographic Display for 3D Creators</og:title>
<og:description>The Looking Glass, a first of its kind 3D holographic display launches for 3D creators. Ready for the third dimension? Pre-order yours today at 30% off the list price. Limited quantities available.</og:description>
<og:url>https://lookingglassfactory.com/</og:url>
<og:image>https://lookingglassfactory.com/wp-content/uploads/2018/07/featured-img-lkg.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://lookingglassfactory.com/</dc:identifier>
</item>
</channel>
</rss>