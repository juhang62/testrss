<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Mathigon – an interactive, personalized mathematics textbook</title>
<link>https://mathigon.org/</link>
<guid isPermaLink="true" >https://mathigon.org/</guid>
<description>&lt;h2&gt;Active Learning&lt;/h2&gt;
&lt;p&gt;Our innovative new content format makes mathematics &lt;strong class=&quot;m-red&quot;&gt;more interactive&lt;/strong&gt; than ever before. At every step students have to actively participate, explore, and discover new ideas.&lt;/p&gt;
&lt;p&gt;Unlike videos and other textbooks, students don’t just &lt;em&gt;consume&lt;/em&gt; information: they &lt;em&gt;engage&lt;/em&gt; through &lt;strong class=&quot;m-red&quot;&gt;problem solving&lt;/strong&gt;, reasoning and &lt;strong class=&quot;m-red&quot;&gt;creativity&lt;/strong&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 18:23:05 +0000</pubDate>
<dc:creator>mr_golyadkin</dc:creator>
<og:title>Mathigon</og:title>
<og:description>Discover Mathigon, a groundbreaking new education platform that adapts to every individual student. Mathematics has never been so colourful.</og:description>
<og:url>https://mathigon.org</og:url>
<og:image>https://mathigon.org/images/og-tile/mathigon.jpg</og:image>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mathigon.org/</dc:identifier>
</item>
<item>
<title>Engineer refusing to file/disclose patents</title>
<link>https://workplace.stackexchange.com/questions/132387/engineer-refusing-to-file-disclose-patents</link>
<guid isPermaLink="true" >https://workplace.stackexchange.com/questions/132387/engineer-refusing-to-file-disclose-patents</guid>
<description>&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;I can offer a one-off bonus, and I can offer him a significant promotion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As far as I've understood, it's a &lt;strong&gt;&quot;cash cow&quot;&lt;/strong&gt; sutiation for this dude.&lt;/p&gt;
&lt;p&gt;So, it's obvious that he'll be looking for other ways to exploit this opportunity, which will surely end up in leaving your company. Empty handed or not - depends on moral qualities and legal agreements, but I really doubt that a lucrative person will hurt his wallet with moral decisions.&lt;/p&gt;
&lt;p&gt;Everything else is just a personal fear for making hard decisions, that's why you've asked about it in the first place.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;I can't give him a raise in his current position, and members of senior management no longer trust him due to his &quot;funny&quot; behavior&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You'll need to find out another source of motivation - it'll be very tricky, and I really doubt that it would be worthy. Having a &quot;single head of knowledge&quot; and a &quot;knight in shining armor&quot; considered as antipatters for a reason. Those mistakes cost from 8 up to 40mil in IBM'ish / wh'Oracle'ish scale.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;doesn't know what I'm talking about&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Playing dumb just proves that it's either &quot;always not enough&quot; game or just a simple bluf - he was trying to be manipulative, but had failed at some point.&lt;/p&gt;
&lt;p&gt;There's a post-soviet &quot;The Tale of the Fisherman and the Fish &quot;, but it's also a set of psychological patterns.&lt;/p&gt;
&lt;p&gt;tldr; People who're playing &quot;always not enough&quot; plate, might not learn a thing even after getting broke.&lt;/p&gt;
&lt;p&gt;It's never too late to make a hard decision, but you'll have to be prepared for what's to come afterwards.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;He's delivered impressive results in the past, so I doubt he was blowing smoke&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nah... 99% of existing projects are low quality ones.&lt;/p&gt;
&lt;p&gt;I really doubt you've got any DevOps/SRE practices applied, decent code coverage and low tech debt.&lt;/p&gt;
&lt;p&gt;Get to at least &lt;strong&gt;80% code coverage&lt;/strong&gt;, and verify it with some &lt;a href=&quot;https://github.com/theofidry/awesome-mutation-testing&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mutational tests&lt;/a&gt; and &lt;a href=&quot;https://github.com/cpuu/awesome-fuzzing&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fuzzing&lt;/a&gt;, so you'll be able to get rid of the linchpin, and reduce the risks while getting new folks on board.&lt;/p&gt;
&lt;p&gt;Managers are often too dumb even to distinguish between Iterative and Incremental development processes (ask about it someone with an opened &quot;&lt;a href=&quot;https://agiletribe.files.wordpress.com/2016/02/6a00d8341ca4d953ef01a511e114a3970c.png?w=645&quot; rel=&quot;nofollow noreferrer&quot;&gt;agile bicycle&lt;/a&gt;&quot; pic).&lt;/p&gt;
&lt;p&gt;Having a set of &quot;cash cows&quot; will surely result in a professional growth stall, I'd suggest looking for a new guy, preferably a humble one, in the middle of nowhere (just like myself :p).&lt;/p&gt;
&lt;p&gt;It doesn't mean much if stuff just works somehow - longterm support and operational costs can be up to 10 times bigger than the development ones.&lt;/p&gt;
&lt;p&gt;Fix your management first, get rid of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mushroom_management&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mushroom Management&lt;/a&gt;, learn how to invest in People in the first place, so you can keep loyal staff and &lt;a href=&quot;https://en.wikipedia.org/wiki/Bus_factor&quot; rel=&quot;nofollow noreferrer&quot;&gt;bus factor&lt;/a&gt; more than 1.&lt;/p&gt;
&lt;p&gt;The definition of loyalty may lack due to psychological compensational needs, but that's completely another story.&lt;/p&gt;
&lt;p&gt;Review some of the existing &lt;a href=&quot;https://en.wikipedia.org/wiki/Anti-pattern&quot; rel=&quot;nofollow noreferrer&quot;&gt;antipatterns&lt;/a&gt; and try to fix at least something, before making any life-turning crucial decisions. Improve the quality of the product itself, so you'll be able to get a &quot;Cash Pillow&quot; if things go sideways.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An Example&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One day. There was &lt;a href=&quot;https://twitter.com/benjchristensen&quot; rel=&quot;nofollow noreferrer&quot;&gt;a smart dude&lt;/a&gt;, who prepped a patent for an API based website &lt;a href=&quot;https://patents.google.com/patent/US20130318154&quot; rel=&quot;nofollow noreferrer&quot;&gt;pre-rendering&lt;/a&gt;, and wanted some cash in return from Netflix.&lt;/p&gt;
&lt;p&gt;Without a trial, he handed some of the rights to Netflix, and gotten himself fired (as far as I know). All his prior related network activity for about 2 years (tweets, chat/forum/facebook posts) miraculously disappeared. People were speculating that he's been assassinated etc, but actually he went rouge (i.e converted to facebook).&lt;/p&gt;
&lt;p&gt;BTW google and facebook has the same prerender patents, because US patent laws are crap.&lt;/p&gt;
&lt;p&gt;You may consider exploiting leaky patent formulas and re-patenting stuff for yourself just as a countermeasure... which may result in bribing here and there, but that's how this thing rolls nowadays.&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 17:35:02 +0000</pubDate>
<dc:creator>chrisbennet</dc:creator>
<og:type>website</og:type>
<og:url>https://workplace.stackexchange.com/questions/132387/engineer-refusing-to-file-disclose-patents</og:url>
<og:image>https://cdn.sstatic.net/Sites/workplace/img/apple-touch-icon@2.png?v=d39b333f5c58</og:image>
<og:title>Engineer refusing to file/disclose patents</og:title>
<og:description>We have a senior engineer on our team that routinely excels at his work. In addition to his regular work, our company has a patent program where engineers can write up a patent for a novel idea, and</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://workplace.stackexchange.com/questions/132387/engineer-refusing-to-file-disclose-patents</dc:identifier>
</item>
<item>
<title>KaTeX – Fast math typesetting library for the web</title>
<link>https://katex.org/</link>
<guid isPermaLink="true" >https://katex.org/</guid>
<description>&lt;div class=&quot;container&quot; readability=&quot;10.322274881517&quot;&gt;
&lt;p&gt;Simple API, no dependencies – yet super-fast on all major browsers.&lt;/p&gt;
&lt;ul class=&quot;features&quot;&gt;&lt;li&gt;&lt;strong&gt;Fast:&lt;/strong&gt; KaTeX renders its math synchronously and doesn’t need to reflow the page.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Print quality:&lt;/strong&gt; KaTeX’s layout is based on Donald Knuth’s TeX, the gold standard for math typesetting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self contained:&lt;/strong&gt; KaTeX has no dependencies and can easily be bundled with your website resources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server side rendering:&lt;/strong&gt; KaTeX produces the same output regardless of browser or environment, so you can pre-render expressions using Node.js and send them as plain HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lightning-fast, even on pages with hundreds of expressions:&lt;/p&gt;



&lt;/div&gt;
</description>
<pubDate>Sun, 24 Mar 2019 09:01:33 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<og:title>KaTeX – The fastest math typesetting library for the web</og:title>
<og:type>website</og:type>
<og:url>https://katex.org/</og:url>
<og:image>https://katex.org/img/og_logo.png</og:image>
<og:description>Simple API, no dependencies – yet super-fast on all major browsers.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://katex.org/</dc:identifier>
</item>
<item>
<title>Chrome “clear cookies on exit” feature does not work</title>
<link>https://superuser.com/questions/1298062/chrome-clear-cookies-on-exit-feature-does-not-work</link>
<guid isPermaLink="true" >https://superuser.com/questions/1298062/chrome-clear-cookies-on-exit-feature-does-not-work</guid>
<description>&lt;p&gt;I see that you first posted this issue around 12 months ago (FEB 18). Fast forward 12 months later to FEB 19 and it is still an issue. This feature to 'Clear on exit' in the Chrome/Privacy and security/Content settings/Cookies area is not working. Cookies are still retained for any added sites after Chrome restarts.&lt;/p&gt;
&lt;p&gt;I have a feeling that this has something to do with not interfering with subscription paywalls, but I digress...&lt;/p&gt;
&lt;p&gt;There is a manual workaround for this. While not fully automated (or ideal!), it barely takes a few seconds to do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One-off step&lt;/strong&gt; In the Chrome browser URL bar, directly input the path 'chrome://settings/siteData' then save a bookmark to it. If - like me - you don't mind having the Chrome bookmarks bar always visible, it gives you instant access to manually clear cookies by site.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At the start of every session (only if you will be visiting the site in question)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Click on the bookmark&lt;/li&gt;
&lt;li&gt;Search for the cookie(s) in question&lt;/li&gt;
&lt;li&gt;Click on the trash icon to clear them&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Note: you don't need to restart the browser after the above steps.&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 08:57:33 +0000</pubDate>
<dc:creator>rdslw</dc:creator>
<og:type>website</og:type>
<og:url>https://superuser.com/questions/1298062/chrome-clear-cookies-on-exit-feature-does-not-work</og:url>
<og:image>https://cdn.sstatic.net/Sites/superuser/img/apple-touch-icon@2.png?v=e869e4459439</og:image>
<og:title>Chrome &quot;clear cookies on exit&quot; feature does not work</og:title>
<og:description>I'd like to remove cookies when I close Chrome, but only for a certain site. Chrome can do this, or says it can, but it doesn't work. When I restart Chrome the cookie for the site is still there. I</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://superuser.com/questions/1298062/chrome-clear-cookies-on-exit-feature-does-not-work</dc:identifier>
</item>
<item>
<title>On Learning Rust and Go: Migrating Away from Python</title>
<link>https://blog.liw.fi/posts/2019/03/24/on_learning_rust_and_go_migrating_away_from_python/</link>
<guid isPermaLink="true" >https://blog.liw.fi/posts/2019/03/24/on_learning_rust_and_go_migrating_away_from_python/</guid>
<description>&lt;p&gt;I first started using Python in 1993. It's been my main programming language since about 2000. I've written a ton of code in Python, both for work and in my free time. For several years now, I've been growing dissatisfied with it. Partly it's because I'd like more help from my programming tools, such as static type checking, better handling of abstractions and code modules, and in general aiding me in writing larger, more complex software. Partly it's because I'm writing more challenging software, and trying to get more out of the hardware I have available. Partly it's because I'm not getting the feeling that the Python community is going in a direction I want to follow. Instead I get the feeling that the Python community is happy to cut corners and compromise on things that I'm not willing to. Which is fine, if it makes their lives better, but leaves me wanting something else.&lt;/p&gt;
&lt;p&gt;I wrote Obnam, my backup application, in Python, over a period of about fourteen years, until I retired it a year ago. During Obnam's life, Python 3 happened. Python 3 is actually a good thing, I think, but the transition was painful, and Obnam never made it. Obnam had other issues, which made it less fun to work on; Python 3 wasn't what killed it.&lt;/p&gt;
&lt;p&gt;Obnam and other large programs I've written in Python gave me the strong feeling that it's a nice language up to a certain size and complexity of program. Obnam is about 15000 lines of Python code. That turned out to be too much for me in Python: too often there were bugs that a static, strong type system would have caught. I could perhaps have been more diligent in how I used Python, and more careful in how I structured my code, but that's my point: a language like Python requires so much self-discipline that at some point it gets too much.&lt;/p&gt;
&lt;p&gt;So over the last few months I've been learning Rust and Go, on and off, in short gaps of free time between other duties. Both have static type systems that can be argued to be strong. Both seem to have decent module systems. Both seem to support concurrency well. Either should be a good replacement for Python for non-small software I write. But I expect to be using Rust for any non-work programming and Go only when work needs me to.&lt;/p&gt;
&lt;p&gt;Rust is developed by a community, and was started by Mozilla. Go development seems to be de facto controlled by Google, who originated the language. I'd rather bet my non-work future on a language that isn't controlled by a huge corporation, especially one of the main players in today's surveillance economy. I write code in my free time because it's fun, and I release it as free software because that's the ethical thing to do. I feel quite strongly that software freedom is one of the corner stones for the long-term happiness for humanity.&lt;/p&gt;
&lt;p&gt;Anyway.&lt;/p&gt;
&lt;p&gt;Ignoring ethical concerns, Rust seems like the better language of the two, so far. It has the better type system, the better compiler, the better tooling in general, and seems to me to have learnt better the lessons of programming languages and tools of the past third of a century. Rust exhibits better taste: things are designed the way they are for good reasons. It's not always as convenient or familiar as Go, but it doesn't seem to make compromises for short-term convenience the way Go does.&lt;/p&gt;
&lt;p&gt;Note that I've not written any significant code in either language, so I'm just writing based on what I've learnt by reading. My opinions may change in the future, as I get more into both languages.&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 08:44:34 +0000</pubDate>
<dc:creator>edward</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.liw.fi/posts/2019/03/24/on_learning_rust_and_go_migrating_away_from_python/</dc:identifier>
</item>
<item>
<title>Show HN: Editable, royalty-free SVG illustrations</title>
<link>https://gallery.manypixels.co</link>
<guid isPermaLink="true" >https://gallery.manypixels.co</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://gallery.manypixels.co&quot;&gt;https://gallery.manypixels.co&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19474853&quot;&gt;https://news.ycombinator.com/item?id=19474853&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 246&lt;/p&gt;
&lt;p&gt;# Comments: 40&lt;/p&gt;
</description>
<pubDate>Sun, 24 Mar 2019 06:52:37 +0000</pubDate>
<dc:creator>vinrob92</dc:creator>
<og:url>http://gallery.manypixels.co/</og:url>
<og:title>Illustrations Gallery</og:title>
<og:description>Unlimited design for a flat monthly price</og:description>
<og:image>/static/share-mp-1b1bdf40f91faaebf232c64c4939ea17.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://gallery.manypixels.co/</dc:identifier>
</item>
<item>
<title>Dell Autism Hiring Program</title>
<link>https://jobs.dell.com/neurodiversity</link>
<guid isPermaLink="true" >https://jobs.dell.com/neurodiversity</guid>
<description>&lt;p&gt;Dell’s people strategy is designed to attract the world's greatest talent and deliver breakthrough performance for our customers, our business and our team members. Our focus is to ensure that Dell is a compelling destination where team members feel valued, engaged and inspired to do their best work.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;a class=&quot;blue-btn&quot; href=&quot;https://jobs.dell.com/diversity-and-inclusion&quot;&gt;Learn More About Diversity at Dell&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Empowering People&lt;/h2&gt;
&lt;p&gt;At Dell, we believe that everyone has unique strengths and skills to contribute in the workplace. We strive to create an environment that is inclusive and accessible for all. As neurodiversity is a broad category, we decided to first focus on an effort for those on the autism spectrum, rethinking the traditional interview process and removing barriers that may limit an individual from fully showcasing their true abilities and potential.&lt;/p&gt;
&lt;p&gt;The Dell Autism Hiring Program was launched with the intent to provide career readiness training and possible full time career opportunities for individuals on the autism spectrum.&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;4.5&quot;&gt;&lt;tr readability=&quot;9&quot;&gt;&lt;td/&gt;
&lt;td readability=&quot;8.5&quot;&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;em&gt;I have been working as a Software Quality Engineer at Dell  since September, and my work has been enjoyable and fulfilling. The people I work with every day are friendly and helpful, and I am learning new ways to contribute to my team every day. I’m really thankful for getting the opportunity to prove myself capable for this job, and I feel confident that I have an exciting future here at Dell Technologies!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A.J., former intern current Dell employee&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2/&gt;
&lt;h2&gt;Redesigning the Interview Process&lt;/h2&gt;
&lt;p&gt;The Autism Hiring Program is an opportunity to rethink the traditional interview process. Our process removes barriers that may limit an individual to fully showcase their true capabilities and potential.&lt;/p&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td/&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;h3&gt;&lt;strong&gt;Our Selection Process&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Our Partners will screen for the skills and qualifications necessary in the identified open roles. Eligible candidates will be pre-screened to determine their interest, skill and experience for the opportunity. Qualified candidates will then be invited in for a two-week skills assessment.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Week One: Enterprise Workplace, Theory of Design Thinking, Project Prototype&lt;/li&gt;
&lt;li&gt;Week Two: Final Project Introduction, Hiring Manager Interactions, Final Presentation.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;
&lt;h3&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/h3&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;2&quot;&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td/&gt;
&lt;td readability=&quot;5&quot;&gt;
&lt;h3/&gt;
&lt;h3&gt;&lt;strong&gt;Summer internships&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Paid summer internships available in the following job categories:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Artificial Intelligence&lt;/li&gt;
&lt;li&gt;Cyber-Security&lt;/li&gt;
&lt;li&gt;Data Analytics&lt;/li&gt;
&lt;li&gt;IT Audit / SOX Compliance&lt;/li&gt;
&lt;li&gt;QE Engineering&lt;/li&gt;
&lt;li&gt;Software Engineering&lt;/li&gt;
&lt;li&gt;Supply Chain&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;2.2641509433962&quot;&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td&gt;&lt;img src=&quot;https://tbcdn.talentbrew.com/company/375/9195/content/partner-2.jpg&quot;/&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src=&quot;https://tbcdn.talentbrew.com/company/375/9195/content/partner-1.jpg&quot;/&gt;&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td/&gt;
&lt;td&gt;If you are local to MA area please follow this link to our partner; HMEA&lt;/td&gt;
&lt;td&gt;If you are local to the Austin or Round Rock area please follow this link to our partner; The Arc of the Capital Area&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;td&gt;&lt;a class=&quot;blue-btn&quot; href=&quot;https://www.hmea.org/autism-advantage/&quot;&gt;Learn More&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class=&quot;blue-btn&quot; href=&quot;https://www.arcaustin.org/the-arcs-autism-assets-work/&quot;&gt;Learn More&lt;/a&gt;&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;5&quot;&gt;&lt;tr readability=&quot;16.5&quot;&gt;&lt;td/&gt;
&lt;td readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;em&gt;From the moment I first met CJ, I knew he was gifted. We spent almost an hour talking about his journey in learning Python. By the end of the initial conversation, my head was spinning with ideas of how to put his incredible skill set to use on my team.&lt;span&gt; &lt;/span&gt;&lt;/em&gt;&lt;em&gt;When CJ first joined my team, he hit the ground running and quickly acclimated to the various development environments we have to work with.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My work with CJ has been one of the most fulfilling professional and personal experiences of my entire career. I am eternally grateful for this program, and I highly encourage anyone interested in this program to reach out for more information.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan, CJ's Manager&lt;/strong&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;table border=&quot;1&quot;&gt;&lt;tbody readability=&quot;7.5&quot;&gt;&lt;tr readability=&quot;19&quot;&gt;&lt;td/&gt;
&lt;td readability=&quot;13.5&quot;&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;img src=&quot;https://tbcdn.talentbrew.com/company/375/9195/content/patrick.png&quot;/&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As co-chair for the True Ability Employee Resource Group, I am personally thrilled and extremely optimistic about the potential for our neurodiversity program. I have great confidence that this talent pipeline will help us differentiate and win in the marketplace because of the new ideas and diverse perspectives that will foster innovation and problem solving.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This program is also central to our values of being an inclusive organization that appreciates diversity and wins together. With our inspired and willing leaders and teams, this is going to be a great success.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Patrick Poljan&lt;/strong&gt;, Global Executive Sponsor of the True Ability ERG and SVP, Global Audit and Transformation&lt;/p&gt;
&lt;/td&gt;
&lt;td/&gt;
&lt;td readability=&quot;8&quot;&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://tbcdn.talentbrew.com/company/375/9195/content/brent-test.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We are excited to see Dell broade&lt;/em&gt;&lt;em&gt;n our talent initiatives to include this program focused on qualified individuals who are neurodiverse. It aligns with our efforts to ensure that we are tapping multiple talent pipelines to broaden our overall inclusion with our incoming hires.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Brent Amundson&lt;/strong&gt;, True Ability Board Member and VP of Global Talent Acquisition&lt;/p&gt;
&lt;/td&gt;
&lt;td/&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description>
<pubDate>Sun, 24 Mar 2019 03:34:20 +0000</pubDate>
<dc:creator>ra7</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://jobs.dell.com/neurodiversity</dc:identifier>
</item>
<item>
<title>Pyright: Static type checker for Python</title>
<link>https://github.com/Microsoft/pyright</link>
<guid isPermaLink="true" >https://github.com/Microsoft/pyright</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/Microsoft/pyright/blob/master/docs/img/PyrightLarge.png&quot;&gt;&lt;img src=&quot;https://github.com/Microsoft/pyright/raw/master/docs/img/PyrightLarge.png&quot; alt=&quot;Pyright&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pyright was created to address gaps in existing Python type checkers like &lt;a href=&quot;http://mypy-lang.org&quot; rel=&quot;nofollow&quot;&gt;mypy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Speed&lt;/h3&gt;
&lt;p&gt;Pyright is typically 5x or more faster than mypy and other type checkers that are written in Python. It is meant for large Python source bases. It can run in a “watch” mode and performs fast incremental updates when files are modified.&lt;/p&gt;
&lt;h3&gt;No Dependency on Python Environment&lt;/h3&gt;
&lt;p&gt;Pyright is written in TypeScript and runs within node. It does not require a Python environment or imported third-party packages to be installed. This is especially useful when used with the VS Code editor, which uses node as its extension runtime.&lt;/p&gt;
&lt;h3&gt;Configurability&lt;/h3&gt;
&lt;p&gt;Pyright supports flexible &lt;a href=&quot;https://github.com/Microsoft/pyright/blob/master/docs/configuration.md&quot;&gt;configuration&lt;/a&gt; that provides granular control over settings. Different “execution environments” can be specified for different subsets of a source base. Each environment can specify different PYTHONPATH settings, python language version, and platform target.&lt;/p&gt;
&lt;h3&gt;Type Checking Features&lt;/h3&gt;
&lt;p&gt;Pyright supports:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0484/&quot; rel=&quot;nofollow&quot;&gt;PEP 484&lt;/a&gt; type hints including generics&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0526/&quot; rel=&quot;nofollow&quot;&gt;PEP 526&lt;/a&gt; syntax for variable annotations&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0544/&quot; rel=&quot;nofollow&quot;&gt;PEP 544&lt;/a&gt; structural subtyping&lt;/li&gt;
&lt;li&gt;Type inference for function return values, instance variables, class variables, and globals&lt;/li&gt;
&lt;li&gt;Smart type constraints that understand conditional code flow constructs like if/else statements&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Built-in Type Stubs&lt;/h3&gt;
&lt;p&gt;Pyright includes a recent copy of the stdlib type stubs from &lt;a href=&quot;https://github.com/python/typeshed&quot;&gt;Typeshed&lt;/a&gt;. It can be configured to use another (perhaps more recent or modified) copy of the Typeshed type stubs. Of course, it also works with custom type stub files that are part of your project.&lt;/p&gt;
&lt;h3&gt;Command-line or Language Service&lt;/h3&gt;
&lt;p&gt;Pyright includes both a &lt;a href=&quot;https://github.com/Microsoft/pyright/blob/master/docs/command-line.md&quot;&gt;command-line tool&lt;/a&gt; and a &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot; rel=&quot;nofollow&quot;&gt;Language Server Protocol&lt;/a&gt; plugin for VS Code.&lt;/p&gt;
&lt;h3&gt;Language Service Features&lt;/h3&gt;
&lt;p&gt;Pyright offers the following language service features:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Hover tool tips that display type information&lt;/li&gt;
&lt;li&gt;Links to symbol definitions&lt;/li&gt;
&lt;li&gt;Smart priority queuing for “live” feedback during editing&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;p&gt;Pyright currently provides support for Python 3.0 and newer. There is currently no plan to support older versions.&lt;/p&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;p&gt;Q: What is the difference between pyright and the &lt;a href=&quot;https://github.com/Microsoft/vscode-python&quot;&gt;Microsoft Python VS Code plugin&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;A: The Python VS Code plugin is the official Python support extension for VS Code. It is officially supported by a team of engineers at Microsoft. It supports a diverse array of features including debugging, linter plugins, type checking plugins, and much more. Pyright is focused entirely on type checking. It is a side project with no dedicated team.&lt;/p&gt;
&lt;p&gt;Q: What is the difference between pyright and the &lt;a href=&quot;https://github.com/Microsoft/python-language-server&quot;&gt;Microsoft Python Language Server&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;A: The Microsoft Python Language Server is a &lt;a href=&quot;https://microsoft.github.io/language-server-protocol/&quot; rel=&quot;nofollow&quot;&gt;language server protocol (LSP)&lt;/a&gt; implementation that works with the Microsoft Python VS Code plugin, and it is officially supported by a team of Microsoft engineers. It also provides type checking capabilities. Pyright provides overlapping functionality but includes some unique features such as more configurabilty, command-line execution, and better performance.&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can install the latest-published version of the Pyright VS Code extension directly from VS Code. Simply open the extensions panel and search for &lt;code&gt;pyright&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The latest verison of the command-line tool can be installed with npm: &lt;code&gt;npm i pyright&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To install it globally: &lt;code&gt;npm i -g pyright&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run the command-line tool: &lt;code&gt;npx pyright &amp;lt;options&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Build Instructions&lt;/h2&gt;
&lt;p&gt;To build the project:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/en/&quot; rel=&quot;nofollow&quot;&gt;nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open terminal window in main directory of cloned source&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;npm run install:all&lt;/code&gt; to install dependencies&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;npm run build&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;To build the VS Code extension package: Same as above, plus&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Execute &lt;code&gt;npm run package&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The resulting package (pyright-X.Y.Z.vsix) can be found in the client directory. To install in VS Code, go to the extensions panel and choose “Install from VSIX...” from the menu, then select the package.&lt;/p&gt;
&lt;h2&gt;Code Structure&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;client/src/extension.ts: Language Server Protocol (LSP) client entry point for VS Code extension.&lt;/li&gt;
&lt;li&gt;client/typeshed-fallback/: Recent copy of Typeshed type stub files for Python stdlib&lt;/li&gt;
&lt;li&gt;server/src/pyright.ts: Main entry point for command-line tool&lt;/li&gt;
&lt;li&gt;server/src/server.ts: Main entry point for LSP server&lt;/li&gt;
&lt;li&gt;server/src/analyzer: Modules that perform analysis passes over Python parse tree&lt;/li&gt;
&lt;li&gt;server/src/common: Modules that are common to the parser and analyzer&lt;/li&gt;
&lt;li&gt;server/src/parser: Modules that perform tokenization and parsing of Python source&lt;/li&gt;
&lt;li&gt;server/src/tests: Tests for the parser and analyzer&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;TODO&lt;/h2&gt;
&lt;p&gt;Pyright is a work in progress. The following functionality is not yet finished. If you would like to contribute to any of these areas, contact the maintainers of the repo.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add enforcement of covariance and contravariance&lt;/li&gt;
&lt;li&gt;Type inference for generators and async functions&lt;/li&gt;
&lt;li&gt;Support for old-style type annotations within comments&lt;/li&gt;
&lt;li&gt;Address the many TODO comments in the code&lt;/li&gt;
&lt;li&gt;Better handling of function decorators (don't punt on type checking)&lt;/li&gt;
&lt;li&gt;Add lots of tests&lt;/li&gt;
&lt;li&gt;Add support for type completion in VS Code extension&lt;/li&gt;
&lt;li&gt;Special-casing @abstract methods so they don't need to return the specified type&lt;/li&gt;
&lt;li&gt;Validate that all @abstractmethod are overridden&lt;/li&gt;
&lt;li&gt;Validate parameters for magic functions&lt;/li&gt;
&lt;li&gt;Validate that overridden methods in subclass have same signature as base class methods&lt;/li&gt;
&lt;li&gt;Verify that exception classes inherit from base Exception&lt;/li&gt;
&lt;li&gt;Validate await / async consistency&lt;/li&gt;
&lt;li&gt;Flag assignments to read-only values (None, True, False, &lt;strong&gt;debug&lt;/strong&gt;) as errors&lt;/li&gt;
&lt;li&gt;Revamp support for properties - model with Descriptor protocol, detect missing setter&lt;/li&gt;
&lt;li&gt;Add numeric codes to diagnostics and a configuration mechanism for disabling errors by code&lt;/li&gt;
&lt;li&gt;Move error strings out of the main code files so they can be localized&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&quot;https://cla.microsoft.com&quot; rel=&quot;nofollow&quot;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt;
&lt;p&gt;This project has adopted the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/&quot; rel=&quot;nofollow&quot;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&quot;https://opensource.microsoft.com/codeofconduct/faq/&quot; rel=&quot;nofollow&quot;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&quot;mailto:opencode@microsoft.com&quot;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 24 Mar 2019 01:55:38 +0000</pubDate>
<dc:creator>JacobHenner</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/6154722?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Microsoft/pyright</og:title>
<og:url>https://github.com/Microsoft/pyright</og:url>
<og:description>Static type checker for Python. Contribute to Microsoft/pyright development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/Microsoft/pyright</dc:identifier>
</item>
<item>
<title>Sonic: Fast, lightweight and schemaless search back end in Rust</title>
<link>https://github.com/valeriansaliou/sonic</link>
<guid isPermaLink="true" >https://github.com/valeriansaliou/sonic</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/valeriansaliou/sonic&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/febc15a023970a72892151c3b3b4c1789206227e/68747470733a2f2f7472617669732d63692e6f72672f76616c657269616e73616c696f752f736f6e69632e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.org/valeriansaliou/sonic.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://deps.rs/repo/github/valeriansaliou/sonic&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/620601563e7418cea51909969a68b6dad09ef4aa/68747470733a2f2f646570732e72732f7265706f2f6769746875622f76616c657269616e73616c696f752f736f6e69632f7374617475732e737667&quot; alt=&quot;Dependency Status&quot; data-canonical-src=&quot;https://deps.rs/repo/github/valeriansaliou/sonic/status.svg&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://www.buymeacoffee.com/valeriansaliou&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/cd005dca0ef55d7725912ec03a936d3a7c8de5b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6275792532306d6525323061253230636f666665652d646f6e6174652d79656c6c6f772e737667&quot; alt=&quot;Buy Me A Coffee&quot; data-canonical-src=&quot;https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sonic is a fast, lightweight and schema-less search backend. It ingests search texts and identifier tuples that can then be queried against in a microsecond's time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sonic can be used as a simple alternative to super-heavy and full-featured search backends such as Elasticsearch in some use-cases. It is capable of normalizing natural language search queries, auto-completing a search query and providing the most relevant results for a query. Sonic is an identifier index, rather than a document index; when queried, it returns IDs that can then be used to refer to the matched documents in an external database.&lt;/p&gt;
&lt;p&gt;A strong attention to performance and code cleanliness has been given when designing Sonic. It aims at being crash-free, super-fast and puts minimum strain on server resources (our measurements have shown that Sonic - when under load - responds to search queries in the μs range, eats ~30MB RAM and has a low CPU footprint; &lt;a href=&quot;https://github.com/valeriansaliou/sonic#how-fast--lightweight-is-it&quot;&gt;see our benchmarks&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🇫🇷 Crafted in Nantes, France.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;📰 The Sonic project was initially announced in &lt;a href=&quot;https://journal.valeriansaliou.name/announcing-sonic-a-super-light-alternative-to-elasticsearch/&quot; rel=&quot;nofollow&quot;&gt;a post on my personal journal&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/bcc95ee95ed8b384ce091330ebc06f7c89910166/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f62616e6e65722e6a7067&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/bcc95ee95ed8b384ce091330ebc06f7c89910166/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f62616e6e65722e6a7067&quot; alt=&quot;Sonic&quot; data-canonical-src=&quot;https://valeriansaliou.github.io/sonic/images/banner.jpg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;« Sonic » is the mascot of the Sonic project. I drew it to look like a psychedelic hipster hedgehog.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Who uses it?&lt;/h2&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;&lt;a href=&quot;https://crisp.chat/&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/d8130493704c28c97f38ec64980e94397b5db6af/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f6c6f676f2d63726973702e706e67&quot; height=&quot;64&quot; data-canonical-src=&quot;https://valeriansaliou.github.io/sonic/images/logo-crisp.png&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Crisp&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;em&gt;👋 You use Sonic and you want to be listed there? &lt;a href=&quot;https://valeriansaliou.name/&quot; rel=&quot;nofollow&quot;&gt;Contact me&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;Sonic is integrated in all Crisp search products on the &lt;a href=&quot;https://crisp.chat/&quot; rel=&quot;nofollow&quot;&gt;Crisp&lt;/a&gt; platform. It is used to index half a billion objects on a $5/mth 1-vCPU SSD cloud server (as of 2019). Crisp users use it to search in their messages, conversations, contacts, helpdesk articles and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can test Sonic live on: &lt;a href=&quot;https://help.crisp.chat/&quot; rel=&quot;nofollow&quot;&gt;Crisp Helpdesk&lt;/a&gt;, and get an idea of the speed and relevance of Sonic search results.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/8588780586f080dc84e80f6af67ce0d64dbbc779/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f63726973702d7365617263682d64656d6f2e676966&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8588780586f080dc84e80f6af67ce0d64dbbc779/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f63726973702d7365617263682d64656d6f2e676966&quot; alt=&quot;Demo on Crisp Helpdesk search&quot; data-canonical-src=&quot;https://valeriansaliou.github.io/sonic/images/crisp-search-demo.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Sonic fuzzy search in helpdesk articles at its best. Lookup for any word or group of terms, get results instantly.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Search terms are stored in collections, organized in buckets&lt;/strong&gt;; you may use a single bucket, or a bucket per user on your platform if you need to search in separate indexes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search results return object identifiers&lt;/strong&gt;, that can be resolved from an external database if you need to enrich the search results. This makes Sonic a simple word index, that points to identifier results. Sonic doesn't store any direct textual data in its index, but it still holds a word graph for auto-completion and typo corrections.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search query typos are corrected&lt;/strong&gt; if there are not enough exact-match results for a given word in a search query, Sonic tries to correct the word and tries against alternate words. You're allowed to make mistakes when searching.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insert and remove items in the index&lt;/strong&gt;; index-altering operations are light and can be committed to the server while it is running. A background tasker handles the job of consolidating the index so that the entries you have pushed or popped are quickly made available for search.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Auto-complete any word&lt;/strong&gt; in real-time via the suggest operation. This helps build a snappy word suggestion feature in your end-user search interface.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Full Unicode compatibility&lt;/strong&gt; on 80+ most spoken languages in the word. Sonic removes useless stop words from any text (eg. 'the' in English), after guessing the text language. This ensures any searched or ingested text is clean before it hits the index; &lt;a href=&quot;https://github.com/valeriansaliou/sonic#which-text-languages-are-supported&quot;&gt;see languages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Networked channel interface (Sonic Channel)&lt;/strong&gt;, that let you search your index, manage data ingestion (push in the index, pop from the index, flush a collection, flush a bucket, etc.) and perform administrative actions. The Sonic Channel protocol was designed to be lightweight on resources and simple to integrate with (the protocol is specified in the sections below); &lt;a href=&quot;https://github.com/valeriansaliou/sonic/blob/master/PROTOCOL.md&quot;&gt;read protocol specification&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easy-to-use libraries&lt;/strong&gt;, that let you connect to Sonic Channel from your apps; &lt;a href=&quot;https://github.com/valeriansaliou/sonic#-sonic-channel-libraries&quot;&gt;see libraries&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;How to use it?&lt;/h2&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Sonic is built in Rust. To install it, either download a version from the &lt;a href=&quot;https://github.com/valeriansaliou/sonic/releases&quot;&gt;Sonic releases&lt;/a&gt; page, use &lt;code&gt;cargo install&lt;/code&gt; or pull the source code from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;👉 Install from source:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you pulled the source code from Git, you can build it using &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
cargo build --release
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find the built binaries in the &lt;code&gt;./target/release&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Install &lt;code&gt;clang&lt;/code&gt; to be able to compile the required RocksDB dependency.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;👉 Install from Cargo:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can install Sonic directly with &lt;code&gt;cargo install&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
cargo install sonic-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ensure that your &lt;code&gt;$PATH&lt;/code&gt; is properly configured to source the Crates binaries, and then run Sonic using the &lt;code&gt;sonic&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;👉 Install from Docker Hub:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You might find it convenient to run Sonic via Docker. You can find the pre-built Sonic image on Docker Hub as &lt;a href=&quot;https://hub.docker.com/r/valeriansaliou/sonic/&quot; rel=&quot;nofollow&quot;&gt;valeriansaliou/sonic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, pull the &lt;code&gt;valeriansaliou/sonic&lt;/code&gt; image:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
docker pull valeriansaliou/sonic:v1.1.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, seed it a configuration file and run it (replace &lt;code&gt;/path/to/your/sonic/config.cfg&lt;/code&gt; with the path to your configuration file):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;
docker run -p 1491:1491 -v /path/to/your/sonic/config.cfg:/etc/sonic.cfg -v /path/to/your/sonic/store/:/var/lib/sonic/store/ valeriansaliou/sonic:v1.1.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the configuration file, ensure that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;channel.inet&lt;/code&gt; is set to &lt;code&gt;0.0.0.0:1491&lt;/code&gt; (this lets Sonic Channel be reached from outside the container)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.kv.path&lt;/code&gt; is set to &lt;code&gt;/var/lib/sonic/store/kv/&lt;/code&gt; (this lets the external KV store directory be reached by Sonic)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store.fst.path&lt;/code&gt; is set to &lt;code&gt;/var/lib/sonic/store/fst/&lt;/code&gt; (this lets the external FST store directory be reached by Sonic)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Sonic Channel will be reachable from &lt;code&gt;tcp://localhost:1491&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Use the sample &lt;a href=&quot;https://github.com/valeriansaliou/sonic/blob/master/config.cfg&quot;&gt;config.cfg&lt;/a&gt; configuration file and adjust it to your own environment.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you are looking to fine-tune your configuration, you may read our &lt;a href=&quot;https://github.com/valeriansaliou/sonic/blob/master/CONFIGURATION.md&quot;&gt;detailed configuration documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Run Sonic&lt;/h3&gt;
&lt;p&gt;Sonic can be run as such:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./sonic -c /path/to/config.cfg&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Perform searches and manage objects&lt;/h2&gt;
&lt;p&gt;Both searches and object management (ie. data ingestion) is handled via the Sonic Channel protocol only. As we want to keep things simple with Sonic (similarly to how Redis does), connecting to Sonic Channel is the way to go when you need to interact with the Sonic search database.&lt;/p&gt;
&lt;p&gt;Sonic distributes official libraries, that let you integrate Sonic to your apps easily. Click on a library below to see library integration documentation and code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you are looking for details on the raw Sonic Channel TCP-based protocol, you can read our &lt;a href=&quot;https://github.com/valeriansaliou/sonic/blob/master/PROTOCOL.md&quot;&gt;detailed protocol documentation&lt;/a&gt;. It can prove handy if you are looking to code your own Sonic Channel library.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;📦 Sonic Channel Libraries&lt;/h3&gt;
&lt;p&gt;Sonic distributes official Sonic Channel bindings for your programming language:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;👉 Cannot find the library for your programming language? Build your own and be referenced here! (&lt;a href=&quot;https://valeriansaliou.name/&quot; rel=&quot;nofollow&quot;&gt;contact me&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Which text languages are supported?&lt;/h2&gt;
&lt;p&gt;Sonic supports a wide range of languages in its lexing system. If a language is not in this list, you will still be able to push this language to the search index, but stop-words will not be eluded, which could lead to lower-quality search results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The languages supported by the lexing system are:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;🇿🇦 Afrikaans&lt;/li&gt;
&lt;li&gt;🇸🇦 Arabic&lt;/li&gt;
&lt;li&gt;🇦🇿 Azerbaijani&lt;/li&gt;
&lt;li&gt;🇧🇩 Bengali&lt;/li&gt;
&lt;li&gt;🇧🇬 Bulgarian&lt;/li&gt;
&lt;li&gt;🇲🇲 Burmese&lt;/li&gt;
&lt;li&gt;🇨🇳 Chinese (Mandarin)&lt;/li&gt;
&lt;li&gt;🇭🇷 Croatian&lt;/li&gt;
&lt;li&gt;🇨🇿 Czech&lt;/li&gt;
&lt;li&gt;🇩🇰 Danish&lt;/li&gt;
&lt;li&gt;🇳🇱 Dutch&lt;/li&gt;
&lt;li&gt;🇺🇸 English&lt;/li&gt;
&lt;li&gt;🏳 Esperanto&lt;/li&gt;
&lt;li&gt;🇪🇪 Estonian&lt;/li&gt;
&lt;li&gt;🇫🇮 Finnish&lt;/li&gt;
&lt;li&gt;🇫🇷 French&lt;/li&gt;
&lt;li&gt;🇩🇪 German&lt;/li&gt;
&lt;li&gt;🇬🇷 Greek&lt;/li&gt;
&lt;li&gt;🇳🇬 Hausa&lt;/li&gt;
&lt;li&gt;🇮🇱 Hebrew&lt;/li&gt;
&lt;li&gt;🇮🇳 Hindi&lt;/li&gt;
&lt;li&gt;🇭🇺 Hungarian&lt;/li&gt;
&lt;li&gt;🇮🇩 Indonesian&lt;/li&gt;
&lt;li&gt;🇮🇹 Italian&lt;/li&gt;
&lt;li&gt;🇯🇵 Japanese&lt;/li&gt;
&lt;li&gt;🇰🇭 Khmer&lt;/li&gt;
&lt;li&gt;🇰🇷 Korean&lt;/li&gt;
&lt;li&gt;🏳 Kurdish&lt;/li&gt;
&lt;li&gt;🇱🇻 Latvian&lt;/li&gt;
&lt;li&gt;🇱🇹 Lithuanian&lt;/li&gt;
&lt;li&gt;🇮🇳 Marathi&lt;/li&gt;
&lt;li&gt;🇳🇵 Nepali&lt;/li&gt;
&lt;li&gt;🇮🇷 Persian&lt;/li&gt;
&lt;li&gt;🇵🇱 Polish&lt;/li&gt;
&lt;li&gt;🇵🇹 Portuguese&lt;/li&gt;
&lt;li&gt;🇮🇳 Punjabi&lt;/li&gt;
&lt;li&gt;🇷🇺 Russian&lt;/li&gt;
&lt;li&gt;🇸🇮 Slovene&lt;/li&gt;
&lt;li&gt;🇸🇴 Somali&lt;/li&gt;
&lt;li&gt;🇪🇸 Spanish&lt;/li&gt;
&lt;li&gt;🇸🇪 Swedish&lt;/li&gt;
&lt;li&gt;🇵🇭 Tagalog&lt;/li&gt;
&lt;li&gt;🇮🇳 Tamil&lt;/li&gt;
&lt;li&gt;🇹🇭 Thai&lt;/li&gt;
&lt;li&gt;🇹🇷 Turkish&lt;/li&gt;
&lt;li&gt;🇺🇦 Ukrainian&lt;/li&gt;
&lt;li&gt;🇵🇰 Urdu&lt;/li&gt;
&lt;li&gt;🇻🇳 Vietnamese&lt;/li&gt;
&lt;li&gt;🇮🇱 Yiddish&lt;/li&gt;
&lt;li&gt;🇳🇬 Yoruba&lt;/li&gt;
&lt;li&gt;🇿🇦 Zulu&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;How fast &amp;amp; lightweight is it?&lt;/h2&gt;
&lt;p&gt;Sonic was built for &lt;a href=&quot;https://crisp.chat/&quot; rel=&quot;nofollow&quot;&gt;Crisp&lt;/a&gt; from the start. As Crisp was growing and indexing more and more search data into a full-text search SQL database, we decided it was time to switch to a proper search backend system. When reviewing Elasticsearch (ELS) and others, we found those were full-featured heavyweight systems that did not scale well with Crisp's freemium-based cost structure.&lt;/p&gt;
&lt;p&gt;At the end, we decided to build our own search backend, designed to be simple and lightweight on resources.&lt;/p&gt;
&lt;p&gt;You can run function-level benchmarks with the command: &lt;code&gt;cargo bench --features benchmark&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;👩‍🔬 Benchmark #1&lt;/h3&gt;
&lt;h4&gt;➡️ Scenario&lt;/h4&gt;
&lt;p&gt;We performed an extract of all messages from the Crisp team used for &lt;a href=&quot;https://crisp.chat/&quot; rel=&quot;nofollow&quot;&gt;Crisp&lt;/a&gt; own customer support.&lt;/p&gt;
&lt;p&gt;We want to import all those messages into a clean Sonic instance, and then perform searches on the index we built. We will measure the time that Sonic spent executing each operation (ie. each &lt;code&gt;PUSH&lt;/code&gt; and &lt;code&gt;QUERY&lt;/code&gt; commands over Sonic Channel), and group results per 1,000 operations (this outputs a mean time per 1,000 operations).&lt;/p&gt;
&lt;h4&gt;➡️ Context&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Our benchmark is ran on the following computer:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Device&lt;/strong&gt;: MacBook Pro (Retina, 15-inch, Mid 2014)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OS&lt;/strong&gt;: MacOS 10.14.3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disk&lt;/strong&gt;: 512GB SSD (formatted under the AFS file system)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 2.5 GHz Intel Core i7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAM&lt;/strong&gt;: 16 GB 1600 MHz DDR3&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Sonic is compiled as following:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Sonic version&lt;/strong&gt;: 1.0.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rustc version&lt;/strong&gt;: &lt;code&gt;rustc 1.35.0-nightly (719b0d984 2019-03-13)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compiler flags&lt;/strong&gt;: &lt;code&gt;release&lt;/code&gt; profile (&lt;code&gt;-03&lt;/code&gt; with &lt;code&gt;lto&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Our dataset is as such:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Number of objects&lt;/strong&gt;: ~1,000,000 messages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Total size&lt;/strong&gt;: ~100MB of raw message text (this does not account for identifiers and other metas)&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;➡️ Scripts&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;The scripts we used to perform the benchmark are:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;PUSH script&lt;/strong&gt;: &lt;a href=&quot;https://gist.github.com/valeriansaliou/e5ab737b28601ebd70483f904d21aa09&quot;&gt;sonic-benchmark_batch-push.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;QUERY script&lt;/strong&gt;: &lt;a href=&quot;https://gist.github.com/valeriansaliou/3ef8315d7282bd173c2cb9eba64fa739&quot;&gt;sonic-benchmark_batch-query.js&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4&gt;⏬ Results&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Our findings:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We imported ~1,000,000 messages of dynamic length (some very long, eg. emails);&lt;/li&gt;
&lt;li&gt;Once imported, the search index weights 20MB (KV) + 1.4MB (FST) on disk;&lt;/li&gt;
&lt;li&gt;CPU usage during import averaged 75% of a single CPU core;&lt;/li&gt;
&lt;li&gt;RAM usage for the Sonic process peaked at 28MB during our benchmark;&lt;/li&gt;
&lt;li&gt;We used a single Sonic Channel TCP connection, which limits the import to a single thread (we could have load-balanced this across as many Sonic Channel connections as there are CPUs);&lt;/li&gt;
&lt;li&gt;We get an import RPS approaching 4,000 operations per second (per thread);&lt;/li&gt;
&lt;li&gt;We get a search query RPS approaching 1,000 operations per second (per thread);&lt;/li&gt;
&lt;li&gt;On the hyper-threaded 4-cores CPU used, we could have parallelized operations to 8 virtual cores, thus theoretically increasing the import RPS to 32,000 operations / second, while the search query RPS would be increased to 8,000 operations / second (we may be SSD-bound at some point though);&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Compared results per operation (on a single object):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We took a sample of 8 results from our batched operations, which produced a total of 1,000 results (1,000,000 items, with 1,000 items batched per measurement report).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is not very scientific, but it should give you a clear idea of Sonic performances.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time spent per operation:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Average&lt;/th&gt;
&lt;th&gt;Best&lt;/th&gt;
&lt;th&gt;Worst&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;PUSH&lt;/td&gt;
&lt;td&gt;275μs&lt;/td&gt;
&lt;td&gt;190μs&lt;/td&gt;
&lt;td&gt;363μs&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;QUERY&lt;/td&gt;
&lt;td&gt;880μs&lt;/td&gt;
&lt;td&gt;852μs&lt;/td&gt;
&lt;td&gt;1ms&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Batch PUSH results as seen from our terminal (from initial index of: 0 objects):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/8e8c2acd0917b60d6a8897c076e7608dd7a62560/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f62656e63686d61726b2d62617463682d707573682e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8e8c2acd0917b60d6a8897c076e7608dd7a62560/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f62656e63686d61726b2d62617463682d707573682e706e67&quot; alt=&quot;Batch PUSH benchmark&quot; data-canonical-src=&quot;https://valeriansaliou.github.io/sonic/images/benchmark-batch-push.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Batch QUERY results as seen from our terminal (on index of: 1,000,000 objects):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://camo.githubusercontent.com/5798a819dd65abf94a5e1d72e890d261207fad80/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f62656e63686d61726b2d62617463682d71756572792e706e67&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5798a819dd65abf94a5e1d72e890d261207fad80/68747470733a2f2f76616c657269616e73616c696f752e6769746875622e696f2f736f6e69632f696d616765732f62656e63686d61726b2d62617463682d71756572792e706e67&quot; alt=&quot;Batch QUERY benchmark&quot; data-canonical-src=&quot;https://valeriansaliou.github.io/sonic/images/benchmark-batch-query.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Indexed data limits&lt;/strong&gt;: Sonic is designed for large search indexes split over thousands of search buckets per collection. An IID (ie. Internal-ID) is stored in the index as a 32 bits number, which theoretically allow up to ~4.2 billion objects to be indexed (ie. OID) per bucket. We've observed storage savings of 30% to 40%, which justifies the trade-off on large databases (versus Sonic using 64 bits IIDs). Also, Sonic only keeps the N most recently pushed results for a given word, in a sliding window way (the sliding window width can be configured).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search query limits&lt;/strong&gt;: Sonic Natural Language Processing system (NLP) does not work at the sentence-level, for storage compactness reasons (we keep the FST graph shallow as to reduce time and space complexity). It works at the word-level, and is thus able to search per-word and can predict a word based on user input, though it is unable to predict the next word in a sentence.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Real-time limits&lt;/strong&gt;: the FST needs to be rebuilt every time a word is pushed or popped from the bucket graph. As this is quite heavy, Sonic batches rebuild cycles. If you have just pushed a new word to the index and you are not seeing it in the &lt;code&gt;SUGGEST&lt;/code&gt; command yet, wait for the next rebuild cycle to kick-in, or force it with &lt;code&gt;TRIGGER consolidate&lt;/code&gt; in a &lt;code&gt;control&lt;/code&gt; channel.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interoperability limits&lt;/strong&gt;: Sonic Channel protocol is the only way to read and write search entries to the Sonic search index. Sonic does not expose any HTTP API. Sonic Channel has been built with performance and minimal network footprint in mind. If you need to access Sonic Channel from an unsupported programming language, you can either &lt;a href=&quot;https://github.com/valeriansaliou/sonic/issues/new&quot;&gt;open an issue&lt;/a&gt; or look at the reference &lt;a href=&quot;https://github.com/valeriansaliou/node-sonic-channel&quot;&gt;node-sonic-channel&lt;/a&gt; implementation and build it in your target programming language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hardware limits&lt;/strong&gt;: Sonic performs the search on the file-system directly; ie. it does not fit the index in RAM. A search query results in a lot of random accesses on the disk, which means that it will be quite slow on old-school HDDs and super-fast on newer SSDs. Do store the Sonic database on SSD-backed file systems only.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;🔥 Report A Vulnerability&lt;/h2&gt;
&lt;p&gt;If you find a vulnerability in Sonic, you are more than welcome to report it directly to &lt;a href=&quot;https://github.com/valeriansaliou&quot;&gt;@valeriansaliou&lt;/a&gt; by sending an encrypted email to &lt;a href=&quot;mailto:valerian@valeriansaliou.name&quot;&gt;valerian@valeriansaliou.name&lt;/a&gt;. Do not report vulnerabilities in public GitHub issues, as they may be exploited by malicious people to target production servers running an unpatched Sonic instance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;⚠️ You must encrypt your email using &lt;a href=&quot;https://github.com/valeriansaliou&quot;&gt;@valeriansaliou&lt;/a&gt; GPG public key: &lt;a href=&quot;https://valeriansaliou.name/files/keys/valeriansaliou.gpg.pub.asc&quot; rel=&quot;nofollow&quot;&gt;🔑valeriansaliou.gpg.pub.asc&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🎁 Based on the severity of the vulnerability, I may offer a $100 (US) bounty to whomever reported it.&lt;/strong&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 23 Mar 2019 17:51:47 +0000</pubDate>
<dc:creator>Artemis2</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/1451907?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>valeriansaliou/sonic</og:title>
<og:url>https://github.com/valeriansaliou/sonic</og:url>
<og:description>🦔 Fast, lightweight &amp; schema-less search backend. An alternative to Elasticsearch that runs on a few MBs of RAM. - valeriansaliou/sonic</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/valeriansaliou/sonic</dc:identifier>
</item>
<item>
<title>Calculating the mean of a list of numbers (2016)</title>
<link>https://hypothesis.works/articles/calculating-the-mean/</link>
<guid isPermaLink="true" >https://hypothesis.works/articles/calculating-the-mean/</guid>
<description>&lt;p&gt;Consider the following problem:&lt;/p&gt;&lt;p&gt;You have a list of floating point numbers. No nasty tricks - these aren’t NaN or Infinity, just normal “simple” floating point numbers.&lt;/p&gt;
&lt;p&gt;Now: Calculate the mean (average). Can you do it?&lt;/p&gt;
&lt;p&gt;It turns out this is a hard problem. It’s hard to get it even &lt;em&gt;close&lt;/em&gt; to right. Lets see why.&lt;/p&gt;
&lt;p&gt;Consider the following test case using Hypothesis:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hypothesis&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hypothesis.strategies&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;floats&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;floats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow_nan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allow_infinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_mean_is_within_reasonable_bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This isn’t testing much about correctness, only that the value of the mean is within reasonable bounds for the list: There are a lot of functions that would satisfy this without being the mean. min and max both satisfy this, as does the median, etc.&lt;/p&gt;
&lt;p&gt;However, almost nobody’s implementation of the mean satisfies this.&lt;/p&gt;
&lt;p&gt;To see why, lets write our own mean:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This seems reasonable enough - it’s just the definition of the mean - but it’s wrong:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;assert inf &amp;lt;= 8.98846567431158e+307
 +  where inf = mean([8.988465674311579e+307, 8.98846567431158e+307])
 +  and   8.98846567431158e+307 = max([8.988465674311579e+307, 8.98846567431158e+307])

Falsifying example: test_mean_is_within_reasonable_bounds(
    ls=[8.988465674311579e+307, 8.98846567431158e+307]
)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The problem is that finite floating point numbers may be large enough that their sum overflows to infinity. When you then divide infinity by a finite number you still get infinity, which is out of the range.&lt;/p&gt;
&lt;p&gt;So to prevent that overflow, lets try to bound the size of our numbers by the length &lt;em&gt;first&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;10.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;assert min(ls) &amp;lt;= mean(ls) &amp;lt;= max(ls)
assert 1.390671161567e-309 &amp;lt;= 1.390671161566996e-309
where 1.390671161567e-309 = min([1.390671161567e-309, 1.390671161567e-309, 1.390671161567e-309])
and   1.390671161566996e-309 = mean([1.390671161567e-309, 1.390671161567e-309, 1.390671161567e-309])

Falsifying example: test_mean_is_within_reasonable_bounds(
    ls=[1.390671161567e-309, 1.390671161567e-309, 1.390671161567e-309]
)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this case the problem you run into is not overflow, but the lack of precision of floating point numbers: Floating point numbers are only exact up to powers of two times an integer, so dividing by three will cause rounding errors. In this case we have the problem that (x / 3) * 3 may not be equal to x in general.&lt;/p&gt;
&lt;p&gt;So now we’ve got a sense of why this might be hard. Lets see how existing implementations do at satisfying this test.&lt;/p&gt;
&lt;p&gt;First let’s try numpy:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This runs into the problem we had in our first implementation:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;9&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;assert min(ls) &amp;lt;= mean(ls) &amp;lt;= max(ls)
assert inf &amp;lt;= 8.98846567431158e+307

where inf = mean([8.988465674311579e+307, 8.98846567431158e+307])
and   8.98846567431158e+307 = max([8.988465674311579e+307, 8.98846567431158e+307])

Falsifying example: test_mean_is_within_reasonable_bounds(
    ls=[8.988465674311579e+307, 8.98846567431158e+307]
)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There’s also the new statistics module from Python 3.4. Unfortunately, this is broken too (&lt;a href=&quot;https://bugs.python.org/issue25177&quot;&gt;this is fixed in 3.5.2&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;OverflowError: integer division result too large for a float

Falsifying example: test_mean_is_within_reasonable_bounds(
    ls=[8.988465674311579e+307, 8.98846567431158e+307]
)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the case where we previously overflowed to infinity this instead raises an error. The reason for this is that internally the statistics module is converting everything to the Fraction type, which is an arbitrary precision rational type. Because of the details of where and when they were converting back to floats, this produced a rational that couldn’t be readily converted back to a float.&lt;/p&gt;
&lt;p&gt;It’s relatively easy to write an implementation which passes this test by simply cheating and not actually calculating the mean:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;9.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;i.e. just restricting the value to lie in the desired range.&lt;/p&gt;
&lt;p&gt;However getting an actually correct implementation of the mean (which &lt;em&gt;would&lt;/em&gt; pass this test) is quite hard:&lt;/p&gt;
&lt;p&gt;To see just how hard, here’s a &lt;a href=&quot;https://hal.archives-ouvertes.fr/file/index/docid/576641/filename/computing-midpoint.pdf&quot;&gt;30 page paper on calculating the mean of two numbers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wouldn’t feel obliged to read that paper if I were you. I &lt;em&gt;have&lt;/em&gt; read it and I don’t remember many of the details.&lt;/p&gt;
&lt;p&gt;This test is a nice instance of a general one: Once you’ve got the &lt;a href=&quot;http://hypothesis.works/articles/getting-started-with-hypothesis/&quot;&gt;this code doesn’t crash&lt;/a&gt;, tests working, you can start to layer on additional constraints on the result value. As this example shows, even when the constraints you impose are &lt;em&gt;very&lt;/em&gt; lax it can often catch interesting bugs.&lt;/p&gt;
&lt;p&gt;It also demonstrates a problem: Floating point mathematics is &lt;em&gt;very&lt;/em&gt; hard, and this makes it somewhat unsuitable for testing with Hypothesis.&lt;/p&gt;
&lt;p&gt;This isn’t because Hypothesis is &lt;em&gt;bad&lt;/em&gt; at testing floating point code, it’s because it’s good at showing you how hard programming actually is, and floating point code is much harder than people like to admit.&lt;/p&gt;
&lt;p&gt;As a result, you probably don’t care about the bugs it will find: Generally speaking most peoples’ attitude to floating point errors is “Eh, those are weird numbers, we don’t really care about that. It’s probably good enough”. Very few people are actually prepared to do the required work of a numerical sensitivity analysis that is needed if you want your floating point code to be correct.&lt;/p&gt;
&lt;p&gt;I used to use this example a lot for demonstrating Hypothesis to people, but because of these problems I tend not to any more: Telling people about bugs they’re not going to want to fix will get you neither bug fixes nor friends.&lt;/p&gt;
&lt;p&gt;But it’s worth knowing that this is a problem: Programming &lt;em&gt;is&lt;/em&gt; really hard, and ignoring the problems won’t make it less hard. You can ignore the correctness issues until they actually bite you, but it’s best not to be surprised when they do.&lt;/p&gt;
&lt;p&gt;And it’s also worth remembering the general technique here, because this isn’t just useful for floating point numbers: Most code can benefit from this, and most of the time the bugs it tells you won’t be nearly this unpleasant.&lt;/p&gt;
</description>
<pubDate>Sat, 23 Mar 2019 15:56:36 +0000</pubDate>
<dc:creator>GregBuchholz</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hypothesis.works/articles/calculating-the-mean/</dc:identifier>
</item>
</channel>
</rss>