<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>15 states are trying to make the electoral college obselete</title>
<link>https://www.nytimes.com/2019/05/22/us/electoral-college.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/05/22/us/electoral-college.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The man who helped invent scratch-off lottery tickets now has his sights set on a bigger prize: overhauling the way the United States elects presidents.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;On Tuesday, Nevada became the latest state to pass a bill that would grant its electoral votes to whoever wins the popular vote across the country, not just in Nevada. The movement is the brainchild of John Koza, a co-founder of National Popular Vote, an organization that is working to eliminate the influence of the Electoral College.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;If Nevada’s governor signs the bill, the state will become the 15th — plus the District of Columbia — to join an interstate pact of states promising to switch to the new system. Those states, including Nevada, have &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nationalpopularvote.com/state-status&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;a total of 195 electoral votes&lt;/a&gt;. The pact would take effect once enough states have joined to guarantee the national winner 270 electoral votes, ensuring election.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Enforcement, however, could be very difficult without congressional approval, according to constitutional law experts. And the pact would be highly vulnerable to legal challenges, they say.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;But while it may seem quixotic, momentum is building. So far in 2019, Colorado, New Mexico and Delaware have passed laws joining the pact. Maine and Oregon may take similar steps this year.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Mr. Koza said he and his colleagues have been lobbying state legislators across the country since 2006 to enact such bills. An Electoral College hobbyist since the 1960s, he watched in frustration in 2004 as the presidential election between President George W. Bush and his Democratic opponent, John Kerry, came down to a few battleground states.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;It wasn’t right, and it happened again, year after year, he said: “Everybody’s vote should count. But entire campaigns run around a couple of states and that, in turn, distorts government policy.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In a presidential election, the Constitution grants states a certain number of electors, equal to their combined representation in the House and the Senate, and the electors choose the president. In general, the candidate who wins the most popular votes in each state gets all that state’s electors, though a handful of states use different rules. The candidate who gets the majority of the electoral votes becomes president.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;But, as in the 2016 election, that is not always the candidate who won the overall popular vote. In 2016, former Secretary of State Hillary Clinton received some three million more votes than President Trump, but the states she won gave her fewer electoral votes than Mr. Trump received.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In all, five presidents in American history have won office while losing the popular vote, including two of the last three: Mr. Trump and Mr. Bush.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Many Democrats believe the current system unfairly favors rural states with smaller populations, which are often strongly Republican.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Of course, not everyone likes the idea of moving away from the current Electoral College system.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In Colorado, with Democrats in control of both the legislature and the governor’s seat, a measure like Nevada’s passed and was signed into law by Gov. Jared Polis in March. But it set off an outcry among conservatives in the state. &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.npr.org/2019/02/24/696827778/after-stinging-presidential-loss-popular-vote-movement-gains-momentum-in-states&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;No Republicans supported it.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;On the state House floor, one legislator suggested renaming the measure the “We Really, Really, Really, Really, Really Hate Donald Trump Act of 2019.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Jerry Sonnenberg, a Republican state senator in Colorado who opposed the bill, said he believed the change would weaken the electoral power of sparsely populated rural states like Wyoming and Utah, while strengthening states like California and New York.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;In his view, the Electoral College was created so that “people in rural areas did not get overrun by the masses.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“I think it’s completely appropriate that we keep the Electoral College,” he said.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;For his part, Mr. Koza said the effort goes far beyond Mr. Trump. “The visible public problem right now with the electoral system is that the candidate who came in second gets the White House,” he said. “But the real problem is that very few states get the attention of the presidential campaigns.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;He believes the movement will not reach a critical mass until the 2024 election, when Mr. Trump most likely would not be on the ballot.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Sanford Levinson, a constitutional law scholar at the University of Texas at Austin, is sharply critical of the Electoral College system, but does not believe the interstate pact would solve all of the problems inherent to America’s election design.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;The Constitution gives disproportionate representation to smaller states in the Electoral College, he said, but he believes the entire system should be replaced, not just circumvented. A popular majority should decide the presidency directly, he said, through runoff elections or tiered-candidate ballots.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“I want to emphasize that I rarely engage in Founder-bashing,” he said. “I don’t think these were stupid arguments in 1787. But times change.”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Even if enough states sign on to the pact to make it effective, Mr. Levinson said he anticipates significant legal challenges if the proposal is not sanctioned by Congress as well.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“What if it turns out that the Republican candidate comes in first, but doesn’t get the majority of the vote, and California says, ‘Wait, we don’t see a reason why our electors should vote for the candidate who didn’t get a majority,’” he said. “Could the other states enforce it, or not?”&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Mr. Koza intends to keep pushing ahead anyway. Most state legislatures adjourn their sessions by the end of June, so for the rest of the year, he and his colleagues, including the movement’s other co-founder, Barry Fadem, will strategize about what comes next.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;Mr. Koza said his approach today is similar to the one he used while lobbying to create state lotteries &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2013/07/07/magazine/who-made-that-scratch-off-lottery-ticket.html?module=inline&quot; title=&quot;&quot;&gt;in the 1970s and 1980s&lt;/a&gt;: Take your time and build relationships, vote by vote.&lt;/p&gt;
&lt;p class=&quot;css-exrw3m evys1bk0&quot;&gt;“This is sort of a seasonal business — I tell people it’s like selling fruit,” Mr. Koza said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Wed, 21 Aug 2019 19:23:28 +0000</pubDate>
<dc:creator>car</dc:creator>
<og:url>https://www.nytimes.com/2019/05/22/us/electoral-college.html</og:url>
<og:type>article</og:type>
<og:title>Should the Electoral College Be Eliminated? 15 States Are Trying to Make It Obsolete</og:title>
<og:image>https://static01.nyt.com/images/2019/05/22/us/22electoralcollege/22electoralcollege-facebookJumbo.jpg</og:image>
<og:description>On Tuesday, Nevada became the latest state to pass a bill that would grant its Electoral College votes to whoever wins the national popular vote.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/05/22/us/electoral-college.html</dc:identifier>
</item>
<item>
<title>Building a distributed time-series database on PostgreSQL</title>
<link>https://blog.timescale.com/blog/building-a-distributed-time-series-database-on-postgresql/</link>
<guid isPermaLink="true" >https://blog.timescale.com/blog/building-a-distributed-time-series-database-on-postgresql/</guid>
<description>&lt;p&gt;&lt;em&gt;Today we are announcing the distributed version of TimescaleDB, which is currently in private beta (public version slated for later this year).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.timescale.com/&quot;&gt;TimescaleDB&lt;/a&gt;, a time-series database on PostgreSQL, has been production-ready for over two years, with millions of downloads and production deployments worldwide. Today, for the first time, we are publicly sharing our design, plans, and benchmarks for the distributed version of TimescaleDB.&lt;/p&gt;
&lt;h3 id=&quot;postgresql-is-making-an-undeniable-comeback&quot;&gt;PostgreSQL is making an undeniable comeback&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.postgresql.org/docs/11/history.html&quot;&gt;First released 30+ years ago&lt;/a&gt;, PostgreSQL today is making an undeniable comeback. &lt;a href=&quot;https://db-engines.com/en/blog_post/79&quot;&gt;It is the fastest growing database right now&lt;/a&gt;, faster than MongoDB, Redis, MySQL, and others. PostgreSQL itself has also matured and broadened in capabilities, thanks to a core group of maintainers and a growing community.&lt;/p&gt;
&lt;p&gt;Yet if one main criticism of PostgreSQL exists, it is that horizontally scaling out workloads to multiple machines is quite challenging. While several PostgreSQL projects have developed scale-out options for OLTP workloads, time-series workloads, which we specialize in, represent a different kind of problem.&lt;/p&gt;
&lt;h3 id=&quot;problem-time-series-workloads-are-different&quot;&gt;Problem: time-series workloads are different&lt;/h3&gt;
&lt;p&gt;Simply put, time-series workloads are different than typical database (OLTP) workloads. This is for several reasons: writes are insert, not update heavy, and those inserts are typically to recent time ranges; reads are typically on continuous time-ranges, not random; writes and reads typically happen independently, rarely in the same transaction. Also, time-series insert volumes tend to be far higher and data tends to accumulate far more quickly than in OLTP. So scaling writes, reads, and storage is a standard concern for time series.&lt;/p&gt;
&lt;p&gt;These were the same principles upon which we developed and first launched TimescaleDB two years ago. Since then, developers all over the world have been able to scale a single TimescaleDB node, with replicas for automated failover, to 2 million metrics per second and 10s of terabytes of data storage.&lt;/p&gt;
&lt;p&gt;This has worked quite well for the vast majority of our users. But of course, workloads grow and software developers (including us!) always want more. What we need is a distributed system on PostgreSQL for time-series workloads.&lt;/p&gt;
&lt;h3 id=&quot;solution-chunking-not-sharding&quot;&gt;Solution: Chunking, not sharding&lt;/h3&gt;
&lt;p&gt;Our new distributed architecture, which a dedicated team has been hard at work developing since last year, is motivated by a new vision: scaling to over 10 million metrics a second, storing petabytes of data, and processing queries even faster via better parallelization. Essentially, a system that can grow with you and your time-series workloads.&lt;/p&gt;
&lt;p&gt;Most database systems that scale-out to multiple nodes rely on horizontally partitioning data by one dimension into &lt;a href=&quot;https://en.wikipedia.org/wiki/Shard_(database_architecture)&quot;&gt;shards&lt;/a&gt;, each of which can be stored on a separate node.&lt;/p&gt;
&lt;p&gt;We chose not to implement traditional sharding for scaling-out TimescaleDB. Instead, we embraced a core concept from our single-node architecture: the chunk. Chunks are created by automatically partitioning data by multiple dimensions (one of which is time). This is done in an fine-grain way such that one dataset may be comprised of 1000s of chunks, even on a single node.&lt;/p&gt;
&lt;p&gt;Unlike sharding, which typically only enables scale-out, chunking is quite powerful in its ability to enable a broad set of capabilities. For example:&lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Scale-up&lt;/strong&gt; (on same node) and &lt;strong&gt;scale-out&lt;/strong&gt; (across multiple nodes)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elasticity:&lt;/strong&gt; Adding and deleting nodes by having data grow onto new nodes and age out of old ones&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Partitioning flexibility:&lt;/strong&gt; Changing the chunk size, or partitioning dimensions, without downtime (e.g., to account for increased insert rates or additional nodes)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data retention policies:&lt;/strong&gt; Deleting chunks older than a threshold&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data tiering:&lt;/strong&gt; Moving older chunks from faster, expensive storage to cheaper, slower storage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data reordering:&lt;/strong&gt; Writing data in one order (e.g., by time) based on write patterns, but then rewriting it later in another order (e.g., device_id) based on query patterns&lt;/li&gt;
&lt;/ul&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Shards&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Chunks&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Creation&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Typically manual&lt;/td&gt;
&lt;td&gt;Automatic&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Number&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&amp;lt; 10 per node&lt;/td&gt;
&lt;td&gt;100-1000s per node&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Scale-out&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Scale-up&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Elasticity&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Partitioning flexibility&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Data retention policies&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Data tiering&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;em&gt;Data reordering&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;A much more detailed discussion is later in this post.&lt;/p&gt;
&lt;h3 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h3&gt;
&lt;p&gt;While we plan to start publishing more benchmarks over the next few months, we wanted to share some early results demonstrating our distributed architecture’s ability to sustain high write rates. As you can see, at 9 nodes the system achieves an insert rate well over 12 million metrics a second:&lt;/p&gt;
&lt;img src=&quot;https://blog.timescale.com/content/images/2019/08/insertperformance1.png&quot; class=&quot;kg-image&quot; alt=&quot;Insert performance of distributed TimescaleDB as cluster size increases&quot;/&gt;&lt;em&gt;&lt;strong&gt;TimescaleDB running the open-source &lt;a href=&quot;https://github.com/timescale/tsbs&quot;&gt;Time Series Benchmarking Suite&lt;/a&gt;, deployed on AWS running m5.2xlarge data nodes and a m5.12xlarge access node, both with standard EBS gp2 storage. More on access and data nodes later in the post.&lt;/strong&gt;&lt;/em&gt;
&lt;h3 id=&quot;next-steps&quot;&gt;Next steps&lt;/h3&gt;
&lt;p&gt;This multi-node version of TimescaleDB is currently in private beta. If you’d like to join the private beta, please fill out &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSeiNj1I1yEULme0oLEv0ddiKBFW4jizd0-HANaQZVSOiRN2QQ/viewform?usp=sf_link&quot;&gt;this form&lt;/a&gt;. You can also &lt;a href=&quot;https://docs.timescale.com/clustering/getting-started/scaling-out&quot;&gt;view the documentation here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The rest of this post describes the underlying design principles of our distributed architecture and how it works. There is also a FAQ at the end of the post with answers to questions we commonly hear about this architecture.&lt;/p&gt;
&lt;p&gt;Please continue reading to learn more.&lt;/p&gt;
&lt;h2 id=&quot;the-five-objectives-of-database-scaling&quot;&gt;The five objectives of database scaling&lt;/h2&gt;
&lt;p&gt;Based on our own experience, combined with our interactions with TimescaleDB users, we have identified five objectives for scaling a database for time-series workloads:&lt;br/&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Total storage volume:&lt;/strong&gt; Scaling to larger amounts of data under management&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insert rate:&lt;/strong&gt; Supporting higher ingestion rates of rows or datapoints per second&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query concurrency:&lt;/strong&gt; Supporting larger numbers of concurrent queries, sometimes via data replication&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query latency:&lt;/strong&gt; Reducing the latency to access a large volume of data to handle a single query, typically through query parallelization&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fault tolerance:&lt;/strong&gt; Storing the same portion of data on multiple servers/disks, with some automation for failover in case of failure&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Today, &lt;a href=&quot;https://docs.timescale.com/latest/tutorials/replication&quot;&gt;TimescaleDB leverages PostgreSQL streaming replication&lt;/a&gt; for primary/replica clustering: There is a single primary node that accepts all writes, which then streams its data (more specifically, its Write Ahead Log) to one or more replicas.&lt;/p&gt;
&lt;p&gt;But ultimately, TimescaleDB using PostgreSQL streaming replication requires that each replica store a full copy of the dataset, and the architecture maxes out its ingest rate at the primary’s write rate and its query latency at a single node’s CPU/IOPS rate.&lt;/p&gt;
&lt;p&gt;While this architecture has worked well so far for our users, we can do even better.&lt;/p&gt;
&lt;h2 id=&quot;designing-for-scale&quot;&gt;Designing for Scale&lt;/h2&gt;
&lt;p&gt;In computer science, the key to solving big problems is breaking them down into smaller pieces and then solving each of those sub-problems, preferably, in parallel.&lt;/p&gt;
&lt;p&gt;In TimescaleDB, &lt;a href=&quot;https://docs.timescale.com/latest/introduction/architecture#chunks&quot;&gt;chunking&lt;/a&gt; is the mechanism by which we break down a problem and scale PostgreSQL for time-series workloads. More specifically, TimescaleDB already automatically partitions a table across multiple chunks on the same instance, whether on the same or different disks. But managing lots of chunks (i.e., “sub-problems”) can also be a daunting task so we came up with &lt;a href=&quot;https://docs.timescale.com/latest/introduction/architecture#hypertables&quot;&gt;the hypertable abstraction&lt;/a&gt; to make partitioned tables easy to use and manage.&lt;/p&gt;
&lt;p&gt;Now, in order to take the next step and scale to multiple nodes, we are adding the abstraction of a &lt;em&gt;&lt;strong&gt;distributed hypertable&lt;/strong&gt;&lt;/em&gt;. Fortunately, hypertables extend naturally to multiple nodes: instead of creating chunks on the same instance, we now place them across different instances.&lt;/p&gt;
&lt;p&gt;Still, distributed hypertables pose new challenges in terms of management and usability when operating at scale. To stay true to everything that makes hypertables great, we carefully designed our system around the following principles.&lt;/p&gt;
&lt;h3 id=&quot;design-principles&quot;&gt;Design Principles&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;Use existing abstractions:&lt;/strong&gt;&lt;/em&gt; Hypertables and chunking extend naturally to multiple nodes. By building on these existing abstractions, together with existing PostgreSQL capabilities, we provide a robust and familiar foundation for scale-out clustering.  &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Be transparent:&lt;/strong&gt;&lt;/em&gt; From a user's perspective, interacting with distributed hypertables should be akin to working with regular hypertables, e.g., familiar environment, commands, functionality, metadata, and tables. Users need not be aware that they are interacting with a distributed system and should not need to take special actions when doing so (e.g., application-aware shard management).&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Scale access and storage independently:&lt;/strong&gt;&lt;/em&gt; Given that access and storage needs vary across workloads (and time), the system should be able to scale access and storage independently. One way of doing this is via two types of database nodes, one for external access (“access node”) and another for data storage (“data node”).&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Be easy to operate:&lt;/strong&gt;&lt;/em&gt; A single instance should be able to function as either an access node or data node (or even both at the same time), with sufficient metadata and discovery to allow each node to play its necessary role.&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Be easy to expand:&lt;/strong&gt;&lt;/em&gt; It should be easy to add new nodes to the system to increase capacity, including upgrading from a single-node deployment (in which a single instance should seamlessly become a data node in a multi-node deployment).&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Provide flexibility in data placement:&lt;/strong&gt;&lt;/em&gt; The design should account for data replication and enable the system to have significant flexibility in data placement. Such flexibility can support collocated JOIN optimizations, heterogeneous nodes, data tiering, AZ-aware placement, and so forth. An instance serving as an access node should also be able to act as a data node, as well as store non-distributed tables.&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Support production deployments:&lt;/strong&gt;&lt;/em&gt; The design should support high-availability deployments, where data is replicated across multiple servers and the system automatically detects and transparently recovers from any node failures.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Now, let’s understand how our distributed architecture begins to follow these principles in practice.&lt;/p&gt;
&lt;h2 id=&quot;introducing-distributed-hypertables&quot;&gt;Introducing Distributed Hypertables&lt;/h2&gt;
&lt;p&gt;Following the above design principles, we built a multi-node database architecture that allows hypertables to &lt;em&gt;distribute&lt;/em&gt; across many nodes to achieve greater scale and performance.&lt;/p&gt;
&lt;p&gt;Users interact with distributed hypertables in much the same way as they would with a regular hypertable (which itself looks just like a regular Postgres table). As a result, inserting data into or querying data from a distributed hypertable looks identical to doing that with a standard table.&lt;/p&gt;
&lt;p&gt;For instance, let’s consider a table with the following schema:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;CREATE TABLE measurements (
        time TIMESTAMPTZ NOT NULL,
        device_id TEXT NOT NULL,
        temperature DOUBLE PRECISION NULL,
        humidity DOUBLE PRECISION NULL
);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This table is turned into a distributed hypertable by partitioning on both the &lt;em&gt;&lt;strong&gt;time&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;device_id&lt;/strong&gt;&lt;/em&gt; columns:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT create_distributed_hypertable(‘measurements’, ‘time’, ‘device_id’);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Following this command, all the normal table operations still work as expected: inserts, queries, schema modifications, etc. Users do not have to worry about tuple routing, chunk (partition) creation, load balancing, and failure recovery: the system handles all these concerns transparently. In fact, users can convert their existing hypertables into distributed hypertables by seamlessly incorporating their standalone TimescaleDB instance into a cluster.&lt;/p&gt;
&lt;p&gt;Now let’s look at the architecture that makes all of this possible.&lt;/p&gt;
&lt;h3 id=&quot;architecture-access-nodes-and-data-nodes&quot;&gt;Architecture: Access nodes and Data nodes&lt;/h3&gt;
&lt;img src=&quot;https://blog.timescale.com/content/images/2019/08/distributed_architecture_2.png&quot; class=&quot;kg-image&quot; alt=&quot;TimescaleDB Distributed Architecture&quot;/&gt;&lt;p&gt;At a high-level, our distributed database architecture consists of &lt;strong&gt;access nodes&lt;/strong&gt;, to which clients connect, and &lt;strong&gt;data nodes&lt;/strong&gt; where data for the distributed hypertable resides. (While we are initially focused on supporting a single access node with optional read replicas, our architecture will extend to a logically distributed access node in the future.)&lt;/p&gt;
&lt;p&gt;Both types of nodes run the same TimescaleDB/PostgreSQL stack, although in different configurations. In particular, an access node needs metadata (e.g., catalog information) to track state across the database cluster, such as the nodes in the cluster and where data resides (stored as “chunks”), so that the access node can insert data on the nodes that have matching chunks and perform query planning to exclude chunks, and ultimately entire nodes, from a query. While the access node has lots of knowledge about the state of the distributed database, data nodes are “dumb”: they are essentially single node instances that can be added and removed using simple administrative functions on the access node.&lt;/p&gt;
&lt;p&gt;The main difference in creating distributed hypertables compared to regular hypertables, however, is that we recommend having a secondary “space” partitioning dimension. While not a strict requirement, the additional “space” dimension ensures that data is evenly spread across all the data nodes when a table experiences (roughly) time-ordered inserts.&lt;/p&gt;
&lt;img src=&quot;https://blog.timescale.com/content/images/2019/08/partitioning3.png&quot; class=&quot;kg-image&quot; alt=&quot;Time vs. time-space partitioning&quot;/&gt;&lt;p&gt;The advantage of a multi-dimensional distributed hypertable is illustrated in the figure above. With time-only partitioning, chunks for two time intervals (t1 and t2) are created on data nodes DN1 and DN2, in that order. While with multi-dimensional partitioning, chunks are created along the space dimension on different nodes for each time interval. Thus, inserts to t1 are distributed across multiple nodes instead of just one of them.&lt;/p&gt;
&lt;h3 id=&quot;question-isn-t-this-just-traditional-sharding&quot;&gt;Question: Isn’t this just traditional sharding?&lt;/h3&gt;
&lt;p&gt;Not really. While many of our goals are achieved by traditional (single dimensional) “database sharding” approaches (where the number of shards are proportional to the number of servers), distributed hypertables are designed for multi-dimensional chunking with a large number of chunks (from 100s to 10,000s), offering more flexibility in how chunks are distributed across a cluster. On the other hand, traditional shards are typically pre-created and tied from the start to individual servers. Thus, adding new servers to a sharded system is often a difficult and disruptive process that might require redistributing (and locking) large amounts of data.&lt;/p&gt;
&lt;p&gt;By contrast, TimescaleDB’s multi-dimensional chunking auto-creates chunks, keeps recent data chunks in memory, and provides time-oriented data lifecycle management (e.g., for data retention, reordering, or tiering policies).&lt;/p&gt;
&lt;p&gt;Within a multi-node context, fine-grain chunking also:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Increases aggregate disk IOPS by parallelizing operations across multiple nodes and disks&lt;/li&gt;
&lt;li&gt;Horizontally balances query load across nodes&lt;/li&gt;
&lt;li&gt;Elastically scales out to new data nodes&lt;/li&gt;
&lt;li&gt;Replicates data for fault tolerance and load balancing&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Chunks are automatically created and sized according to the current partitioning configuration. This can change over time: i.e., a new chunk can be sized or divided differently from a prior one, and both can coexist in the system. This allows a distributed hypertable to seamlessly expand to new data nodes, by writing recent chunks in a new partitioning configuration that covers additional nodes, without affecting existing data or requiring lengthy locking. Together with a retention policy that eventually drops old chunks, the cluster will rebalance over time, as shown in the figure below.&lt;/p&gt;
&lt;img src=&quot;https://blog.timescale.com/content/images/2019/08/repartitioning4-1.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;This is a much less disruptive process than in a similar sharded system since read locks are held on smaller chunks of data at a time.&lt;/p&gt;
&lt;p&gt;One might think that chunking puts additional burden on applications and developers. However, applications in TimescaleDB do not interact directly with chunks (and thus do not need to be aware of this partition mapping themselves, unlike in some sharded systems), nor does the system expose different capabilities for chunks than the entire hypertable (e.g., in a number of other storage systems, one can execute transactions within shards but not across them).&lt;/p&gt;
&lt;p&gt;To illustrate that this is the case, let’s look at how distributed hypertables work internally.&lt;/p&gt;
&lt;h2 id=&quot;how-it-works-the-life-of-a-request-insert-or-query-&quot;&gt;How it works: the life of a request (insert or query)&lt;/h2&gt;
&lt;p&gt;Having learned about how to create distributed hypertables and the underlying architecture, let's look into the &quot;life of a request&quot;, to better understand the interactions between the access node and data nodes.&lt;/p&gt;
&lt;h3 id=&quot;inserting-data&quot;&gt;Inserting data&lt;/h3&gt;
&lt;p&gt;In the following example, we will continue to use the “measurements” table we introduced earlier. To insert data into this distributed hypertable, a single client connects to the access node and inserts a batch of values as normal. Using a batch of values is preferred over row-by-row inserts in order to achieve higher throughput. Such batching is a very common architectural idiom, e.g., when ingesting data into TimescaleDB from Kafka, Kinesis, IoT Hubs, or Telegraf.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;INSERT INTO measurements VALUES
        (‘2019-07-01 00:00:00.00-05’, ‘A001’, 70.0, 50.0),
        (‘2019-07-01 00:00:00.10-05’, ‘B015’, 68.5, 49.7),
        (‘2019-07-01 00:00:00.05-05’, ‘D821’, 69.4, 49.9),
        (‘2019-07-01 00:00:01.01-05’, ‘A001’, 70.1, 50.0);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Since “measurements” is a distributed hypertable, the access node doesn’t insert these rows locally like it would with a regular hypertable. Instead, it uses its catalog information (metadata) to ultimately determine the set of data nodes where the data should be stored. In particular, for new rows to be inserted, it first uses the values of the partitioning columns (e.g., time and device_id) to map each row to a chunk, and then determines the set of rows that should be inserted into each chunk, as shown in the figure below.&lt;/p&gt;
&lt;img src=&quot;https://blog.timescale.com/content/images/2019/08/inserts5-1.png&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;If an appropriate chunk does not yet exist for some of the rows, TimescaleDB will create new chunk(s) as part of the same insert transaction, and then assign each new chunk to at least one data node. The access node creates and assigns new chunks along the “space” dimension (device_id), if such a dimension exists. Thus, each data node is responsible for only a subset of devices, but all of them will take on writes for the same time intervals.&lt;/p&gt;
&lt;p&gt;After the access node has written to each data node, it then executes a two-phase commit of these mini-batches to the involved data nodes so that all data belonging to the original insert batch is inserted atomically within one transaction. This also ensures that all the mini-batches can be rolled back in case of a failure to insert on one of the data nodes (e.g., due to a data conflict or failed data node).  &lt;/p&gt;
&lt;p&gt;The following shows the part of the SQL query that an individual data node receives, which is a subset of the rows in the original insert statement.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;INSERT INTO measurements VALUES
        (‘2019-07-01 00:00:00.00-05’, ‘A001’, 70.0, 50.0),
        (‘2019-07-01 00:00:01.01-05’, ‘A001’, 70.1, 50.0); &lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;leveraging-postgresql-explain-information&quot;&gt;Leveraging PostgreSQL EXPLAIN information&lt;/h3&gt;
&lt;p&gt;One nice thing about how TimescaleDB carefully ties into the PostgreSQL query planner is that it properly exposes EXPLAIN information. You can EXPLAIN any request (such as the INSERT requests above) and get full planning information:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;EXPLAIN (costs off, verbose)
INSERT INTO measurements VALUES
('2019-07-01 00:00:00.00-05', 'A001', 70.0, 50.0),
('2019-07-01 00:00:00.10-05', 'B015', 68.5, 49.7),
('2019-07-01 00:00:00.05-05', 'D821', 69.4, 49.9),
('2019-07-01 00:00:01.01-05', 'A001', 70.1, 50.0);

                                        QUERY PLAN
----------------------------------------------------------------------------------------
 Custom Scan (HypertableInsert)
 Insert on distributed hypertable public.measurements
   Data nodes: data_node_1, data_node_2, data_node_3
   -&amp;gt;  Insert on public.measurements
        -&amp;gt;  Custom Scan (DataNodeDispatch)
                Output: &quot;*VALUES*&quot;.column1, &quot;*VALUES*&quot;.column2, &quot;*VALUES*&quot;.column3, &quot;*VALUES*&quot;.column4
                Batch size: 1000
                Remote SQL: INSERT INTO public.measurements(&quot;time&quot;, device_id, temperature, humidity) VALUES ($1, $2, $3, $4), ..., ($3997, $3998, $3999, $4000)
                -&amp;gt;  Custom Scan (ChunkDispatch)
                        Output: &quot;*VALUES*&quot;.column1, &quot;*VALUES*&quot;.column2, &quot;*VALUES*&quot;.column3, &quot;*VALUES*&quot;.column4
                        -&amp;gt;  Values Scan on &quot;*VALUES*&quot;
                        Output: &quot;*VALUES*&quot;.column1, &quot;*VALUES*&quot;.column2, &quot;*VALUES*&quot;.column3, &quot;*VALUES*&quot;.column4
(12 rows)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In PostgreSQL, plans like the above one are trees where every node produces a tuple (row of data) up the tree when the plan is executed. Essentially, a parent, which is sourced at the root, asks for new tuples until no more tuples can be produced. In this particular insert plan, tuples originate at the ValueScan leaf node, which generates a tuple from the original insert statement whenever the ChunkDispatch parent asks for one. Whenever ChunkDispatch reads a tuple from its child, it “routes” the tuple to a chunk, and creates a chunk on a data node if necessary. The tuple is then handed up the tree to DataNodeDispatch that buffers the tuple in a per-node buffer as given by the chunk routed to in the previous step (every chunk has one or more associated data nodes responsible for the chunk). DataNodeDispatch will buffer up to 1000 tuples per data node (configurable) until it flushes a buffer using the given remote SQL. The servers involved are shown in the EXPLAIN, although not all of them might ultimately receive data since the planner cannot know at plan time how tuples will be routed during execution.&lt;/p&gt;
&lt;p&gt;It should be noted that distributed hypertables also support COPY for further performance during inserts. Inserts using COPY do not execute a plan, like the one shown for INSERT above. Instead, a tuple is read directly from the client connection (in COPY mode) and then routed to the corresponding data node connection (also in COPY mode). Thus, tuples are streamed to data nodes with very little overhead. However, while COPY is suitable for bulk data loads, it does not support things like RETURNING clauses and thus has limitations that prohibit its use in all cases.&lt;/p&gt;
&lt;h2 id=&quot;querying-data&quot;&gt;Querying data&lt;/h2&gt;
&lt;p&gt;Read queries on a distributed hypertable follow a similar path from access node to data nodes.  A client makes a standard SQL request to an access node:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT time_bucket('1 minute', time) as minute,
               device_id, min(temp), max(temp), avg(temp)
FROM measurements
WHERE device_id IN ('A001', 'B015')
AND time &amp;gt; NOW() - interval '1 hour'
GROUP BY minute, device_id;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Making this query performant on distributed hypertables relies on three tactics:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Limiting the amount of work,&lt;/li&gt;
&lt;li&gt;Optimally distributing and pushing down work to data nodes, and&lt;/li&gt;
&lt;li&gt;Executing in parallel across the data nodes&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;TimescaleDB is designed to implement these tactics. However, given the length of this post so far, we’ll cover these topics in an upcoming article.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;Selected users and customers have already been testing distributed TimescaleDB in private beta, and we plan to make an initial version of it more widely available later this year. It will support most of the good properties described above (high write rates, query parallelism and predicate push down for lower latency), as well as some others that we will describe in future posts (elastically growing a cluster to scale storage and compute, and fault tolerance via physical replica sets).&lt;/p&gt;
&lt;p&gt;If you’d like to join the private beta, please fill out this &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSeiNj1I1yEULme0oLEv0ddiKBFW4jizd0-HANaQZVSOiRN2QQ/viewform?usp=sf_link&quot;&gt;form&lt;/a&gt;. You can also &lt;a href=&quot;https://docs.timescale.com/clustering/getting-started/scaling-out&quot;&gt;view the documentation here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And if the challenge of building a next-generation database infrastructure is of interest to you, we’re hiring worldwide and always looking for great engineers to &lt;a href=&quot;https://www.timescale.com/careers&quot;&gt;join the team&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;faq&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;q-what-about-query-performance-benchmarks-what-about-high-availability-elasticity-and-other-operational-topics&quot;&gt;Q: What about query performance benchmarks? What about high-availability, elasticity, and other operational topics?&lt;/h3&gt;
&lt;p&gt;Given the length of this post so far, we opted to cover query performance benchmarks, how our distributed architecture optimizes queries, as well as operational topics, in future posts.&lt;/p&gt;
&lt;h3 id=&quot;q-how-will-multi-node-timescaledb-be-licensed&quot;&gt;Q: How will multi-node TimescaleDB be licensed?&lt;/h3&gt;
&lt;p&gt;We'll announce licensing when multi-node TimescaleDB is more publicly available.&lt;/p&gt;
&lt;h3 id=&quot;q-why-didn-t-you-use-fill-in-the-blank-scale-out-postgresql-option&quot;&gt;Q: Why didn’t you use [fill in the blank] scale-out PostgreSQL option?&lt;/h3&gt;
&lt;p&gt;While there are existing options for scaling PostgreSQL to multiple nodes, we found that none of them provided the architecture and data model needed to enable scaling, performance, elasticity, data retention policies, etc, for time-series data.&lt;/p&gt;
&lt;p&gt;Put another way, we found that by treating time as a first-class citizen in a database architecture, one can enable much better performance and a vastly superior user experience. We find this true for single-node as well as for multi-node. In addition, there are many more capabilities we want to implement, and often these integrate closely into the code. If we didn’t write the code ourselves with these in mind, it would have been quite challenging, if not impossible.&lt;/p&gt;
&lt;h3 id=&quot;q-how-does-this-fit-into-the-cap-theorem&quot;&gt;Q: How does this fit into the CAP Theorem?&lt;/h3&gt;
&lt;p&gt;Any discussion of a distributed database architecture should touch on the &lt;a href=&quot;https://en.wikipedia.org/wiki/CAP_theorem&quot;&gt;CAP Theorem&lt;/a&gt;. As a quick reminder, CAP states that there's an implicit tradeoff between strong Consistency (Linearizability) and Availability in distributed systems, where availability is informally defined as being able to immediately handle reads and writes as long as any servers are alive (regardless of the number of failures). The P states that the system is able to handle partitions, but this is a bit of a misnomer: You can design your system to ultimately provide Consistency or Availability, but you can’t ultimately control whether failures (partitions) happen.  Even if you try really hard through &lt;a href=&quot;https://cloud.google.com/blog/products/gcp/inside-cloud-spanner-and-the-cap-theorem&quot;&gt;aggressive network engineering to make failures rare&lt;/a&gt;, failures still &lt;a href=&quot;https://www.nytimes.com/2019/06/02/technology/google-gmail-snapchat-outage.html&quot;&gt;occasionally happen&lt;/a&gt;, and any system must then be opinionated for C or A.  And if you always want Availability, even if partitions are rare (so that the system can, in the &lt;em&gt;normal&lt;/em&gt; case, provide stronger consistency), then applications must still suffer the complexity of handling inconsistent data for the uncommon case.&lt;/p&gt;
&lt;p&gt;The summary: TimescaleDB doesn’t overcome the CAP Theorem. We do talk about how TimescaleDB achieves “high availability”, using the term as commonly used in the database industry to mean replicated instances that perform prompt and automated recovery from failure. This is different than formal “Big A” Availability from the CAP Theorem, and TimescaleDB today sacrifices Availability for Consistency under failure conditions.&lt;/p&gt;
&lt;p&gt;Time-series workloads introduce an interesting twist to this discussion, however. We’ve talked about how their write workloads are different (inserts to recent time ranges, not random updates), and how this pattern leads to different possibilities for elasticity (and reduced write amplification). But we also see a common idiom across architectures integrating TimescaleDB, whereby the write and read data paths are performed by different applications.  We rarely see read-write transactions (aside from upserts). While queries help drive dashboards, reporting/alerting, or other real-time analytics, data points are often ingested from systems like Kafka, NATS, MQTT brokers, IoT Hubs, or other eventing/logging systems. These upstream systems are typically built around buffering, which greatly ameliorate availability issues if the system temporarily blocks writes (which any “C” system must do): these upstream systems will just buffer and retry upon automated recovery.&lt;/p&gt;
&lt;p&gt;So in short, technically TimescaleDB is a CP system that sacrifices A under failure conditions. But in practice we find that, because of upstream buffers, this generally is much less an issue.&lt;/p&gt;
</description>
<pubDate>Wed, 21 Aug 2019 18:53:43 +0000</pubDate>
<dc:creator>craigkerstiens</dc:creator>
<og:type>article</og:type>
<og:title>Building a distributed time-series database on PostgreSQL</og:title>
<og:description>Today we are announcing the distributed version of TimescaleDB, which is currently in private beta (public version slated for later this year).</og:description>
<og:url>https://blog.timescale.com/blog/building-a-distributed-time-series-database-on-postgresql/</og:url>
<og:image>https://blog.timescale.com/content/images/2019/08/Clustering_post.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.timescale.com/blog/building-a-distributed-time-series-database-on-postgresql/</dc:identifier>
</item>
<item>
<title>Researcher banned on Valve&amp;#039;s bug bounty program publishes second Steam 0-day</title>
<link>https://www.zdnet.com/article/researcher-publishes-second-steam-zero-day-after-getting-banned-on-valves-bug-bounty-program/</link>
<guid isPermaLink="true" >https://www.zdnet.com/article/researcher-publishes-second-steam-zero-day-after-getting-banned-on-valves-bug-bounty-program/</guid>
<description>&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://zdnet4.cbsistatic.com/hub/i/2018/11/08/ca0bf9b4-d91d-4d6f-9e15-cf6eefc92c42/7844a0473607ee3fcfc61d0d07970245/steam.png&quot; class=&quot;&quot; alt=&quot;steam.png&quot;/&gt;&lt;/span&gt;&lt;p&gt;A Russian security researcher has published details about a zero-day in the Steam gaming client. This is the second Steam zero-day the researcher has made public in the past two weeks.&lt;/p&gt;
&lt;p&gt;However, while the security researcher reported the first one to Valve and tried to have it fixed before public disclosure, he said he couldn't do the same with the second because the company banned him from submitting further bug reports via its public bug bounty program on the HackerOne platform.&lt;/p&gt;
&lt;h3&gt;Valve gets criticized&lt;/h3&gt;
&lt;p&gt;The entire chain of events behind the public disclosure of these two zero-days has caused quite a drama and discussions in the infosec community.&lt;/p&gt;
&lt;p&gt;All the negative comments have been aimed at Valve and the HackerOne staff, with both being acused of unprofessional behavior.&lt;/p&gt;
&lt;div class=&quot;twitterContainer&quot; readability=&quot;4.8426395939086&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;4.0355329949239&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;i am disappointed that valve does this kinda stuff &lt;a href=&quot;https://t.co/z1JPKJmHhQ&quot;&gt;https://t.co/z1JPKJmHhQ&lt;/a&gt;&lt;/p&gt;
— D̒͂̕ᵈăᵃn̕ᶰ Ť̾̾̓͐͒͠ᵗe͗̑́̋̂́͡ᵉn̅ᶰtᵗl̀̓͘ᶫe̓̒̂̚ᵉrʳ (@Viss) &lt;a href=&quot;https://twitter.com/Viss/status/1164055856230440960?ref_src=twsrc%5Etfw&quot;&gt;August 21, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;Security researchers and regular Steam users alike are mad because Valve refused to acknowledge the reported issue as a security flaw, and declined to patch it.&lt;/p&gt;

&lt;p&gt;When the security researcher -- named Vasily Kravets-- wanted to publicly disclose the vulnerability, a HackerOne staff member forbade him from doing so, even if Valve had no intention of fixing the issue -- effectively trying to prevent the researcher from letting users know there was a problem with the Steam client at all.&lt;/p&gt;
&lt;p&gt;Kravets did eventually publish &lt;a href=&quot;https://amonitoring.ru/article/steamclient-0day/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;details about the Steam zero-day&lt;/a&gt;, which was an elevation of privilege (also known as a local privilege escalation) bug that allowed other apps or malware on a user's computer to abuse the Steam client to run code with admin rights.&lt;/p&gt;
&lt;section class=&quot;sharethrough-top&quot; data-component=&quot;medusaContentRecommendation&quot; data-medusa-content-recommendation-options=&quot;{&amp;quot;promo&amp;quot;:&amp;quot;promo_ZD_recommendation_sharethrough_top_in_article_desktop&amp;quot;,&amp;quot;spot&amp;quot;:&amp;quot;dfp-in-article&amp;quot;}&quot;&gt;
&lt;/section&gt;&lt;p&gt;Kravets said he was banned from the platform following the public disclosure of the first zero-day. His bug report was heavily covered in the media, and Valve did eventually ship a fix, more as a reaction to all the bad press the company was getting.&lt;/p&gt;
&lt;p&gt;The patch was almost immediatelly proved to be insufficient, and another security researcher found an easy way to go around it almost right away.&lt;/p&gt;

&lt;h3&gt;Valve bungled the same bug report twice&lt;/h3&gt;
&lt;p&gt;Furthermore, a well-known and highly respected security researcher named Matt Nelson also revealed he found the same exact bug, but after Kravets, which he too reported to Valve's HackerOne program, only to go through a similar bad experience as Kravets.&lt;/p&gt;
&lt;p&gt;Nelson said Valve and HackerOne took five days to acknowledge the bug, refused to patch it, and then locked the bug report when Nelson wanted to disclose the bug publicly and warn users.&lt;/p&gt;
&lt;p&gt;Nelson later released proof-of-concept code for the first Steam zero-day, and also criticized Valve and HackerOne for their abysmall handling of his bug report.&lt;/p&gt;
&lt;div class=&quot;twitterContainer&quot; readability=&quot;5.2635869565217&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;4.8586956521739&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The company at fault here is Valve (Steam). Good luck reporting anything that doesn’t fit their crappy bounty scope. &lt;a href=&quot;https://t.co/vLHmTQ0qmq&quot;&gt;https://t.co/vLHmTQ0qmq&lt;/a&gt;&lt;/p&gt;
— Matt Nelson (@enigma0x3) &lt;a href=&quot;https://twitter.com/enigma0x3/status/1148031014171811841?ref_src=twsrc%5Etfw&quot;&gt;July 8, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;twitterContainer&quot; readability=&quot;6.5765765765766&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;7.015015015015&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I'd like to take this Valve fiasco and highlight a few points:&lt;br/&gt;1. Don't scope your program so tightly that it completely removes things like LPE&lt;br/&gt;2. If you do, give researchers a place to go that isn't Twitter.&lt;br/&gt;3. Don't lock an issue when disclosure is mentioned &lt;a href=&quot;https://t.co/lygNLkiUiz&quot;&gt;pic.twitter.com/lygNLkiUiz&lt;/a&gt;&lt;/p&gt;
— Matt Nelson (@enigma0x3) &lt;a href=&quot;https://twitter.com/enigma0x3/status/1160961861560479744?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;h3&gt;Second Steam zero-day disclosed today&lt;/h3&gt;
&lt;p&gt;Today, Kravets published details about a second Valve zero-day, which is another EoP/LPE in the Steam client, allowing malicious apps to gain admin rights through Valve's Steam app. Demos of the second Steam zero-day are embedded below, and a technical write-up is available &lt;a href=&quot;https://amonitoring.ru/article/onemore_steam_eop_0day/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;on Kravets' site&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&quot;shortcode media-source&quot;&gt;&lt;p&gt;&lt;iframe width=&quot;500&quot; height=&quot;282&quot; allowfullscreen=&quot;&quot; title=&quot;YouTube content&quot; id=&quot;iframe_youtube&quot; src=&quot;https://www.youtube.com/embed/ZCHrjP0cMew&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;/section&gt;&lt;section class=&quot;shortcode media-source&quot;&gt;&lt;p&gt;&lt;iframe width=&quot;500&quot; height=&quot;282&quot; allowfullscreen=&quot;&quot; title=&quot;YouTube content&quot; id=&quot;iframe_youtube&quot; src=&quot;https://www.youtube.com/embed/I93aH86BUaE&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;/section&gt;&lt;p&gt;A Valve spokesperson did not reply to a request for comment, but the company rarely comments on security issues.&lt;/p&gt;
&lt;h3&gt;Problem: Valve doesn't view EoP/LPE as security flaws&lt;/h3&gt;
&lt;p&gt;All of Valve's problems seem to come from the fact that the company has placed EoP/LPE vulnerabilities as &quot;out-of-scope&quot; for its HackerOne platform, meaning the company doesn't view them as security issues.&lt;/p&gt;
&lt;p&gt;Nelson, a security researcher who has made a name for himself for finding a slew of interesting bugs in Microsoft products, doesn't agree with Valve's decision.&lt;/p&gt;
&lt;div class=&quot;twitterContainer&quot; readability=&quot;5.6682464454976&quot;&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; readability=&quot;5.2322274881517&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/steam_games?ref_src=twsrc%5Etfw&quot;&gt;@steam_games&lt;/a&gt; that’s not really how that works. You can’t pick and choose what you define as a vulnerability. Your software is breaking the Windows security model.&lt;/p&gt;
— Matt Nelson (@enigma0x3) &lt;a href=&quot;https://twitter.com/enigma0x3/status/1161021122739130371?ref_src=twsrc%5Etfw&quot;&gt;August 12, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p&gt;EoP/LPE vulnerabilities can't allow a threat actor to hack a remote app or computer. They are vulnerabilities abused during post-exploitation, mostly so attackers can take full control over a target by gaining root/admin/system rights.&lt;/p&gt;
&lt;p&gt;While Valve doesn't consider these as security flaws, everyone else does. For example, Microsoft patches tens of EoP/LPE flaws each month, and OWASP considers EoP/LPE as &lt;a href=&quot;https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the fifth most dangerous security flaw&lt;/a&gt; in its infamous Top 10 Vulnerabilities list.&lt;/p&gt;
&lt;p&gt;By refusing to patch the first zero-day, Valve inadvertantly sent a message out that it doesn't care about the security of its product, putting the company's 100+ million Windows users in danger just by having the Steam client installed on their computers.&lt;/p&gt;
&lt;p&gt;Sure! Valve is right, in its own way. An attacker can't use an EoP/LPE to break into a Steam user's client. That's a fact. But, that's not the point.&lt;/p&gt;
&lt;p&gt;When users install the Steam client on their computers, they also don't expect the app to be a launching pad for malware or other attacks.&lt;/p&gt;
&lt;p&gt;An app and users' security is more than remote code execution (RCE) bugs. Otherwise, if EoP/LPE bugs weren't a big deal, everyone else wouldn't bother patching them either.&lt;/p&gt;

&lt;h3&gt;More vulnerability reports:&lt;/h3&gt;
</description>
<pubDate>Wed, 21 Aug 2019 18:45:59 +0000</pubDate>
<dc:creator>tareqak</dc:creator>
<og:type>article</og:type>
<og:url>https://www.zdnet.com/article/researcher-publishes-second-steam-zero-day-after-getting-banned-on-valves-bug-bounty-program/</og:url>
<og:title>Researcher publishes second Steam zero day after getting banned on Valve's bug bounty program | ZDNet</og:title>
<og:description>Valve gets heavily criticized for mishandling a crucial bug report.</og:description>
<og:image>https://zdnet3.cbsistatic.com/hub/i/r/2018/11/08/ca0bf9b4-d91d-4d6f-9e15-cf6eefc92c42/thumbnail/770x578/b52f1900d0ab2ec1db125b603244297c/steam.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.zdnet.com/article/researcher-publishes-second-steam-zero-day-after-getting-banned-on-valves-bug-bounty-program/</dc:identifier>
</item>
<item>
<title>16M Americans will vote on hackable paperless machines</title>
<link>https://www.technologyreview.com/s/614148/16-million-americans-will-vote-on-hackable-paperless-voting-machines/</link>
<guid isPermaLink="true" >https://www.technologyreview.com/s/614148/16-million-americans-will-vote-on-hackable-paperless-voting-machines/</guid>
<description>&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Despite the obvious risk and years of warnings, at least eight American states and 16 million American voters will use completely paperless machines in the 2020 US elections, &lt;a href=&quot;https://www.brennancenter.org/analysis/voting-machine-security-where-we-stand-six-months-new-hampshire-primary&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a new report&lt;/a&gt; by New York University’s Brennan Center for Justice found.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Paperless voting machines persist despite a strong consensus among US cybersecurity and national security experts that paper ballots and vote audits are necessary to ensure the security of the next election. The Brennan Center report points to the Senate Intelligence Committee investigation of Russian interference in the 2016 section, which also recommends paper ballots for security and verification.&lt;/span&gt;&lt;/p&gt;
&lt;aside class=&quot;jsx-2623490083 signup-wrapper&quot;&gt;&lt;aside class=&quot;jsx-3784032550 jsx-3019503940 newsletter-signup&quot; readability=&quot;1&quot;&gt;&lt;div class=&quot;jsx-3784032550 jsx-3019503940 intro&quot; readability=&quot;7&quot;&gt;

&lt;p&gt;
&lt;h4 class=&quot;jsx-3784032550 jsx-3019503940 title&quot;&gt;Sign up for &lt;strong class=&quot;jsx-3784032550 jsx-3019503940&quot;&gt;The Download&lt;/strong&gt; — your daily dose of what's up in emerging technology&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/aside&gt;&lt;/aside&gt;&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;America’s largest election technology company, Election Systems &amp;amp; Software, announced earlier this year that it would stop selling paperless machines. ES&amp;amp;S spokeswoman Katina Granger said the entire industry should follow suit.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;“Using a physical paper record sets the stage for all jurisdictions to perform statistically valid post-election audits,” Granger told MIT Technology Review. “We believe that requiring a paper record for every voter would be a valuable step in securing America’s elections.”&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;ES&amp;amp;S, the largest election tech vendor in the country, covers 44% of American voters, a 2016 &lt;a href=&quot;https://publicpolicy.wharton.upenn.edu/live/files/270-the-business-of-votin&quot;&gt;report&lt;/a&gt; by the University of Pennsylvania’s Wharton School found. Dominion Voting Systems covers 37% of voters, and Hart InterCivic 11%. Both still sell paperless voting machines.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Senator Ron Wyden, a leading Capitol Hill voice on election security, has persistently pushed legislation that would federally mandate paper ballots, among other security measures. The legislation has been blocked by the Republican Senate majority leader, Mitch McConnell.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;“Selling a paperless voting machine is like selling a car without brakes—something is going to go terribly wrong,” Wyden says. “It is obvious that vendors won’t do the right thing on security by themselves. Congress needs to set mandatory federal election security standards that outlaw paperless voting machines and guarantee every American the right to vote with a hand-marked paper ballot. Experts agree that hand-marked paper ballots and post-election audits are the best defense against foreign hacking. Vendors should recognize that fact or get out of the way.”&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Chris Krebs, the top cybersecurity official in the Department of Homeland Security, said last week that &lt;a href=&quot;https://www.cnn.com/2019/08/09/politics/dhs-cyber-paper-ballots-2020/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;paper ballot backups are needed in 2020&lt;/a&gt;. Congressional and law enforcement officials have repeatedly said that &lt;a href=&quot;https://www.technologyreview.com/s/613635/us-elections-are-still-far-too-vulnerable-to-attackat-every-level/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;foreign powers are poised to interfere in the upcoming American elections&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Most of the states using completely paperless machines in 2020 are not historically battleground states, which are seen as the most valuable targets for interference and impact. Texas, Louisiana, Tennessee, Mississippi, Kansas, Indiana, Kentucky, and New Jersey will use paperless machines.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Some of those states, however, are more closely contested than usual. Texas in particular has been turning increasingly purple. In 2016, Democratic Senate candidate Beto O’Rourke stunned national observers by putting up a close race against Republican Ted Cruz. If Texas starts producing more close races, its persistence in using paperless machines—the result of a &lt;a href=&quot;https://www.politico.com/story/2019/08/05/election-security-texas-1445537&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;stalled legislative battle over election security&lt;/a&gt;—will make it a more tempting target.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;“If my goal is to throw another US election, I have limited resources. I can’t attack everywhere. I want to focus on battleground states where even a small push can have a large impact,” says Dan Wallach, a computer science professor at Rice University and a member of the Technical Guidelines Development Committee of the US Election Assistance Commission.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Security experts &lt;a href=&quot;https://www.technologyreview.com/s/611830/hackers-are-out-to-jeopardize-your-vote/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;overwhelmingly agree&lt;/a&gt; that paper ballots and risk-limiting audits are necessary to secure elections in the 21st century. Emblematic of that consensus is  a 2018 report from the National Academies of Sciences, Engineering, and Medicine titled “&lt;a href=&quot;https://www.nap.edu/catalog/25120/securing-the-vote-protecting-american-democracy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Securing the Vote: Protecting American Democracy&lt;/a&gt;.” The conclusions: Elections need human-readable ballots and mandated audits before election results are certified.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Elections are managed primarily by US states as opposed to the federal government. Technical and security requirements vary by state and even by local government. Despite slow movement and resistance from some corners of the country, progress away from paperless machines has been significant: compared with the 16 million Americans who will vote on paperless machines in 2020, 27.5 million did so in 2016, according to the Brennan Center report.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Backups, however, are not a silver bullet for election security. Security experts say paper ballots are so important precisely because subsequent audits are necessary, and 17 of the 42 states requiring paper do not require audits. &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;“The name of the game as election officials is to produce election results that are convincing to the loser,” Wallach says. “The winner is happy to win; the loser requires evidence. In the face of propaganda and interference, you have to produce convincing results—convincing the loser to say, ‘Yeah, I lost.’ This is why people like paper. Once paper has been printed, it’s hard for someone like Vladimir Putin to reach out over the internet and change what’s already been printed on dead trees.”&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Audits mean a high chance that incorrect outcomes can be detected with statistical efficiency, the National Academies of Sciences concluded.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;The experts recommended that all voting machines should use human-readable paper ballots and that machines without the ability for independent auditing should be removed from elections right away.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 21 Aug 2019 17:28:59 +0000</pubDate>
<dc:creator>rbanffy</dc:creator>
<og:title>16 million Americans will vote on hackable paperless machines</og:title>
<og:description>Experts agree that paper ballots are needed, but eight American states will use completely paperless machines in the 2020 elections.</og:description>
<og:type>article</og:type>
<og:url>https://www.technologyreview.com/s/614148/16-million-americans-will-vote-on-hackable-paperless-voting-machines/</og:url>
<og:image>https://cdn.technologyreview.com/i/images/3003636415578a33eb0fo.jpg?cx=0&amp;cy=0&amp;cw=1600&amp;ch=900&amp;sw1200</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.technologyreview.com/s/614148/16-million-americans-will-vote-on-hackable-paperless-voting-machines/</dc:identifier>
</item>
<item>
<title>WebAssembly Interface Types: Interoperate with All the Things</title>
<link>https://hacks.mozilla.org/2019/08/webassembly-interface-types/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2019/08/webassembly-interface-types/</guid>
<description>&lt;p&gt;People are excited about running WebAssembly outside the browser.&lt;/p&gt;&lt;p&gt;That excitement isn’t just about WebAssembly running in its own standalone runtime. People are also excited about running WebAssembly from languages like Python, Ruby, and Rust.&lt;/p&gt;
&lt;p&gt;Why would you want to do that? A few reasons:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Make “native” modules less complicated&lt;/strong&gt;&lt;br/&gt;Runtimes like Node or Python’s CPython often allow you to write modules in low-level languages like C++, too. That’s because these low-level languages are often much faster. So you can use native modules in Node, or extension modules in Python. But these modules are often hard to use because they need to be compiled on the user’s device. With a WebAssembly “native” module, you can get most of the speed without the complication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make it easier to sandbox native code&lt;/strong&gt;&lt;br/&gt;On the other hand, low-level languages like Rust wouldn’t use WebAssembly for speed. But they could use it for security. As we talked about in the &lt;a href=&quot;https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/&quot;&gt;WASI announcement&lt;/a&gt;, WebAssembly gives you lightweight sandboxing by default. So a language like Rust could use WebAssembly to sandbox native code modules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Share native code across platforms&lt;/strong&gt;&lt;br/&gt;Developers can save time and reduce maintainance costs if they can share the same codebase across different platforms (e.g. between the web and a desktop app). This is true for both scripting and low-level languages. And WebAssembly gives you a way to do that without making things slower on these platforms.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/01-01-why.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/01-01-why-500x204.png&quot; alt=&quot;Scripting languages like Python and Ruby saying 'We like WebAssembly's speed', low-level languages like Rust and C++ saying, 'and we like the security it could give us' and all of them saying 'and we all want to make developers more effective'&quot; width=&quot;500&quot; height=&quot;204&quot; class=&quot;alignnone size-large wp-image-33703&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/01-01-why-500x204.png 500w, https://hacks.mozilla.org/files/2019/08/01-01-why-250x102.png 250w, https://hacks.mozilla.org/files/2019/08/01-01-why-768x313.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So WebAssembly could really help other languages with important problems.&lt;/p&gt;
&lt;p&gt;But with today’s WebAssembly, you wouldn’t want to use it in this way. You can &lt;em&gt;run&lt;/em&gt; WebAssembly in all of these places, but that’s not enough.&lt;/p&gt;
&lt;p&gt;Right now, WebAssembly only talks in numbers. This means the two languages can call each other’s functions.&lt;/p&gt;
&lt;p&gt;But if a function takes or returns anything besides numbers, things get complicated. You can either:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Ship one module that has a really hard-to-use API that only speaks in numbers… making life hard for the module’s user.&lt;/li&gt;
&lt;li&gt;Add glue code for every single environment you want this module to run in… making life hard for the module’s developer.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But this doesn’t have to be the case.&lt;/p&gt;
&lt;p&gt;It should be possible to ship a &lt;em&gt;single&lt;/em&gt; WebAssembly module and have it run anywhere… without making life hard for either the module’s user or developer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/01-02-user-and-dev.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/01-02-user-and-dev-500x480.png&quot; alt=&quot;user saying 'what even is this API?' vs developer saying 'ugh, so much glue code to worry about' vs both saying 'wait, it just works?'&quot; width=&quot;500&quot; height=&quot;480&quot; class=&quot;alignnone size-large wp-image-33704&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/01-02-user-and-dev-500x480.png 500w, https://hacks.mozilla.org/files/2019/08/01-02-user-and-dev-250x240.png 250w, https://hacks.mozilla.org/files/2019/08/01-02-user-and-dev-768x737.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the same WebAssembly module could use rich APIs, using complex types, to talk to:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Modules running in their own native runtime (e.g. Python modules running in a Python runtime)&lt;/li&gt;
&lt;li&gt;Other WebAssembly modules written in different source languages (e.g. a Rust module and a Go module running together in the browser)&lt;/li&gt;
&lt;li&gt;The host system itself (e.g. a WASI module providing the system interface to an operating system or the browser’s APIs)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/01-03-star-diagram.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/01-03-star-diagram-500x394.png&quot; alt=&quot;A wasm file with arrows pointing to and from: logos for different runtimes (Ruby, php, and Python), other wasm files compiled from Rust and Go, and host systems like the OS or browser&quot; width=&quot;500&quot; height=&quot;394&quot; class=&quot;alignnone size-large wp-image-33745&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/01-03-star-diagram-500x394.png 500w, https://hacks.mozilla.org/files/2019/08/01-03-star-diagram-250x197.png 250w, https://hacks.mozilla.org/files/2019/08/01-03-star-diagram-768x606.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And with a new, early-stage proposal, we’re seeing how we can make this Just Work™, as you can see in this demo.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Qn_4F3foB3Q&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;So let’s take a look at how this will work. But first, let’s look at where we are today and the problems that we’re trying to solve.&lt;/p&gt;
&lt;h2 id=&quot;webassemblytalkingtojs&quot;&gt;WebAssembly talking to JS&lt;/h2&gt;
&lt;p&gt;WebAssembly isn’t limited to the web. But up to now, most of WebAssembly’s development has focused on the Web.&lt;/p&gt;
&lt;p&gt;That’s because you can make better designs when you focus on solving concrete use cases. The language was definitely going to have to run on the Web, so that was a good use case to start with.&lt;/p&gt;
&lt;p&gt;This gave the MVP a nicely contained scope. WebAssembly only needed to be able to talk to one language—JavaScript.&lt;/p&gt;
&lt;p&gt;And this was relatively easy to do. In the browser, WebAssembly and JS both run in the same engine, so that engine can help them &lt;a href=&quot;https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast&quot;&gt;efficiently talk to each other&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-01-js-interop-01.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-01-js-interop-01-500x374.png&quot; alt=&quot;A js file asking the engine to call a WebAssembly function&quot; width=&quot;500&quot; height=&quot;374&quot; class=&quot;alignnone size-large wp-image-33706&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-01-js-interop-01-500x374.png 500w, https://hacks.mozilla.org/files/2019/08/02-01-js-interop-01-250x187.png 250w, https://hacks.mozilla.org/files/2019/08/02-01-js-interop-01-768x575.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-01-js-interop-02.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-01-js-interop-02-500x374.png&quot; alt=&quot;The engine asking the WebAssembly file to run the function&quot; width=&quot;500&quot; height=&quot;374&quot; class=&quot;alignnone size-large wp-image-33707&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-01-js-interop-02-500x374.png 500w, https://hacks.mozilla.org/files/2019/08/02-01-js-interop-02-250x187.png 250w, https://hacks.mozilla.org/files/2019/08/02-01-js-interop-02-768x575.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But there is one problem when JS and WebAssembly try to talk to each other… they use different types.&lt;/p&gt;
&lt;p&gt;Currently, WebAssembly can only talk in numbers. JavaScript has numbers, but also quite a few more types.&lt;/p&gt;
&lt;p&gt;And even the numbers aren’t the same. WebAssembly has 4 different kinds of numbers: int32, int64, float32, and float64. JavaScript currently only has Number (though it will soon have another number type, &lt;a href=&quot;https://github.com/tc39/proposal-bigint&quot;&gt;BigInt&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The difference isn’t just in the names for these types. The values are also stored differently in memory.&lt;/p&gt;
&lt;p&gt;First off, in JavaScript any value, no matter the type, is put in something called a box (and I explained &lt;a href=&quot;https://hacks.mozilla.org/2018/10/calls-between-javascript-and-webassembly-are-finally-fast/#js-to-wasm&quot;&gt;boxing&lt;/a&gt; more in another article).&lt;/p&gt;
&lt;p&gt;WebAssembly, in contrast, has static types for its numbers. Because of this, it doesn’t need (or understand) JS boxes.&lt;/p&gt;
&lt;p&gt;This difference makes it hard to communicate with each other.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-03-number-mismatch.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-03-number-mismatch-500x403.png&quot; alt=&quot;JS asking wasm to add 5 and 7, and Wasm responding with 9.2368828e+18&quot; width=&quot;500&quot; height=&quot;403&quot; class=&quot;alignnone size-large wp-image-33708&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-03-number-mismatch-500x403.png 500w, https://hacks.mozilla.org/files/2019/08/02-03-number-mismatch-250x201.png 250w, https://hacks.mozilla.org/files/2019/08/02-03-number-mismatch-768x619.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But if you want to convert a value from one number type to the other, there are pretty straightforward rules.&lt;/p&gt;
&lt;p&gt;Because it’s so simple, it’s easy to write down. And you can find this written down in &lt;a href=&quot;https://www.w3.org/TR/wasm-js-api/#tojsvalue&quot;&gt;WebAssembly’s JS API spec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-04-mapping-book.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-04-mapping-book-500x245.png&quot; alt=&quot;A large book that has mappings between the wasm number types and the JS number types&quot; width=&quot;500&quot; height=&quot;245&quot; class=&quot;alignnone size-large wp-image-33709&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-04-mapping-book-500x245.png 500w, https://hacks.mozilla.org/files/2019/08/02-04-mapping-book-250x122.png 250w, https://hacks.mozilla.org/files/2019/08/02-04-mapping-book-768x376.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This mapping is hardcoded in the engines.&lt;/p&gt;
&lt;p&gt;It’s kind of like the engine has a reference book. Whenever the engine has to pass parameters or return values between JS and WebAssembly, it pulls this reference book off the shelf to see how to convert these values.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-05-number-conversion.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-05-number-conversion-500x403.png&quot; alt=&quot;JS asking the engine to call wasm's add function with 5 and 7, and the engine looking up how to do conversions in the book&quot; width=&quot;500&quot; height=&quot;403&quot; class=&quot;alignnone size-large wp-image-33710&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-05-number-conversion-500x403.png 500w, https://hacks.mozilla.org/files/2019/08/02-05-number-conversion-250x201.png 250w, https://hacks.mozilla.org/files/2019/08/02-05-number-conversion-768x619.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Having such a limited set of types (just numbers) made this mapping pretty easy. That was great for an MVP. It limited how many tough design decisions needed to be made.&lt;/p&gt;
&lt;p&gt;But it made things more complicated for the developers using WebAssembly. To pass strings between JS and WebAssembly, you had to find a way to turn the strings into an array of numbers, and then turn an array of numbers back into a string. I explained this in a &lt;a href=&quot;https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/03/04_wasm_bindgen_02.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2018/03/04_wasm_bindgen_02-500x295.png&quot; alt=&quot;JS putting numbers into WebAssembly's memory&quot; width=&quot;500&quot; height=&quot;295&quot; class=&quot;alignnone size-large wp-image-32019&quot; srcset=&quot;https://hacks.mozilla.org/files/2018/03/04_wasm_bindgen_02-500x295.png 500w, https://hacks.mozilla.org/files/2018/03/04_wasm_bindgen_02-250x148.png 250w, https://hacks.mozilla.org/files/2018/03/04_wasm_bindgen_02-768x453.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This isn’t difficult, but it is tedious. So tools were built to abstract this away.&lt;/p&gt;
&lt;p&gt;For example, tools like &lt;a href=&quot;https://rustwasm.github.io/docs/wasm-bindgen/&quot;&gt;Rust’s wasm-bindgen&lt;/a&gt; and &lt;a href=&quot;https://emscripten.org/docs/porting/connecting_cpp_and_javascript/embind.html#embind&quot;&gt;Emscripten’s Embind&lt;/a&gt; automatically wrap the WebAssembly module with JS glue code that does this translation from strings to numbers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-07-js-glue.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-07-js-glue-500x478.png&quot; alt=&quot;JS file complaining about having to pass a string to Wasm, and the JS glue code offering to do all the work&quot; width=&quot;500&quot; height=&quot;478&quot; class=&quot;alignnone size-large wp-image-33711&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-07-js-glue-500x478.png 500w, https://hacks.mozilla.org/files/2019/08/02-07-js-glue-250x239.png 250w, https://hacks.mozilla.org/files/2019/08/02-07-js-glue-768x735.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And these tools can do these kinds of transformations for other high-level types, too, such as complex objects with properties.&lt;/p&gt;
&lt;p&gt;This works, but there are some pretty obvious use cases where it doesn’t work very well.&lt;/p&gt;
&lt;p&gt;For example, sometimes you just want to pass a string through WebAssembly. You want a JavaScript function to pass a string to a WebAssembly function, and then have WebAssembly pass it to another JavaScript function.&lt;/p&gt;
&lt;p&gt;Here’s what needs to happen for that to work:&lt;/p&gt;
&lt;ol readability=&quot;3&quot;&gt;&lt;li&gt;the first JavaScript function passes the string to the JS glue code&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;the JS glue code turns that string object into numbers and then puts those numbers into linear memory&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;then passes a number (a pointer to the start of the string) to WebAssembly&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;the WebAssembly function passes that number over to the JS glue code on the other side&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;the second JavaScript function pulls all of those numbers out of linear memory and then decodes them back into a string object&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;which it gives to the second JS function&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-01.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-01-500x123.png&quot; alt=&quot;JS file passing string 'Hello' to JS glue code&quot; width=&quot;500&quot; height=&quot;123&quot; class=&quot;alignnone size-large wp-image-33712&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-01-500x123.png 500w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-01-250x62.png 250w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-01-768x189.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-02.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-02-500x213.png&quot; alt=&quot;JS glue code turning string into numbers and putting that in linear memory&quot; width=&quot;500&quot; height=&quot;213&quot; class=&quot;alignnone size-large wp-image-33713&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-02-500x213.png 500w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-02-250x107.png 250w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-02-768x328.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-03.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-03-500x332.png&quot; alt=&quot;JS glue code telling engine to pass 2 to wasm&quot; width=&quot;500&quot; height=&quot;332&quot; class=&quot;alignnone size-large wp-image-33714&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-03-500x332.png 500w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-03-250x166.png 250w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-03-768x509.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-04.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-04-500x332.png&quot; alt=&quot;Wasm telling engine to pass 2 to JS glue code&quot; width=&quot;500&quot; height=&quot;332&quot; class=&quot;alignnone size-large wp-image-33715&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-04-500x332.png 500w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-04-250x166.png 250w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-04-768x509.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-05.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-05-500x213.png&quot; alt=&quot;JS glue code taking bytes from linear memory and turning them back into a string&quot; width=&quot;500&quot; height=&quot;213&quot; class=&quot;alignnone size-large wp-image-33716&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-05-500x213.png 500w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-05-250x107.png 250w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-05-768x328.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-06.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-08-encode-decode-06-500x125.png&quot; alt=&quot;JS glue code passing string to JS file&quot; width=&quot;500&quot; height=&quot;125&quot; class=&quot;alignnone size-large wp-image-33717&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-06-500x125.png 500w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-06-250x62.png 250w, https://hacks.mozilla.org/files/2019/08/02-08-encode-decode-06-768x192.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So the JS glue code on one side is just reversing the work it did on the other side. That’s a lot of work to recreate what’s basically the same object.&lt;/p&gt;
&lt;p&gt;If the string could just pass straight through WebAssembly without any transformations, that would be way easier.&lt;/p&gt;
&lt;p&gt;WebAssembly wouldn’t be able to do anything with this string—it doesn’t understand that type. We wouldn’t be solving that problem.&lt;/p&gt;
&lt;p&gt;But it could just pass the string object back and forth between the two JS functions, since they &lt;em&gt;do&lt;/em&gt; understand the type.&lt;/p&gt;
&lt;p&gt;So this is one of the reasons for the &lt;a href=&quot;https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md#language-extensions&quot;&gt;WebAssembly reference types proposal&lt;/a&gt;. That proposal adds a new basic WebAssembly type called &lt;code&gt;anyref&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With an &lt;code&gt;anyref&lt;/code&gt;, JavaScript just gives WebAssembly a reference object (basically a pointer that doesn’t disclose the memory address). This reference points to the object on the JS heap. Then WebAssembly can pass it to other JS functions, which know exactly how to use it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-09-anyref-01.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-09-anyref-01-500x408.png&quot; alt=&quot;JS passing a string to Wasm and the engine turning it into a pointer&quot; width=&quot;500&quot; height=&quot;408&quot; class=&quot;alignnone size-large wp-image-33718&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-09-anyref-01-500x408.png 500w, https://hacks.mozilla.org/files/2019/08/02-09-anyref-01-250x204.png 250w, https://hacks.mozilla.org/files/2019/08/02-09-anyref-01-768x627.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-09-anyref-02.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/02-09-anyref-02-500x435.png&quot; alt=&quot;Wasm passing the string to a different JS file, and the engine just passes the pointer on&quot; width=&quot;500&quot; height=&quot;435&quot; class=&quot;alignnone size-large wp-image-33719&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/02-09-anyref-02-500x435.png 500w, https://hacks.mozilla.org/files/2019/08/02-09-anyref-02-250x218.png 250w, https://hacks.mozilla.org/files/2019/08/02-09-anyref-02-768x668.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So that solves one of the most annoying interoperability problems with JavaScript. But that’s not the only interoperability problem to solve in the browser.&lt;/p&gt;
&lt;p&gt;There’s another, much larger, set of types in the browser. WebAssembly needs to be able to interoperate with these types if we’re going to have good performance.&lt;/p&gt;
&lt;h2 id=&quot;webassemblytalkingdirectlytothebrowser&quot;&gt;WebAssembly talking directly to the browser&lt;/h2&gt;
&lt;p&gt;JS is only one part of the browser. The browser also has a lot of other functions, called Web APIs, that you can use.&lt;/p&gt;
&lt;p&gt;Behind the scenes, these Web API functions are usually written in C++ or Rust. And they have their own way of storing objects in memory.&lt;/p&gt;
&lt;p&gt;Web APIs’ parameters and return values can be lots of different types. It would be hard to manually create mappings for each of these types. So to simplify things, there’s a standard way to talk about the structure of these types—&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/WebIDL_bindings&quot;&gt;Web IDL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you’re using these functions, you’re usually using them from JavaScript. This means you are passing in values that use JS types. How does a JS type get converted to a Web IDL type?&lt;/p&gt;
&lt;p&gt;Just as there is a mapping from WebAssembly types to JavaScript types, there is a mapping from JavaScript types to Web IDL types.&lt;/p&gt;
&lt;p&gt;So it’s like the engine has another reference book, showing how to get from JS to Web IDL. And this mapping is also hardcoded in the engine.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-02-mapping-book.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-02-mapping-book-500x245.png&quot; alt=&quot;A book that has mappings between the JS types and Web IDL types&quot; width=&quot;500&quot; height=&quot;245&quot; class=&quot;alignnone size-large wp-image-33720&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-02-mapping-book-500x245.png 500w, https://hacks.mozilla.org/files/2019/08/03-02-mapping-book-250x122.png 250w, https://hacks.mozilla.org/files/2019/08/03-02-mapping-book-768x376.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For many types, this mapping between JavaScript and Web IDL is pretty straightforward. For example, types like DOMString and JS’s String are compatible and can be mapped directly to each other.&lt;/p&gt;
&lt;p&gt;Now, what happens when you’re trying to call a Web API from WebAssembly? Here’s where we get to the problem.&lt;/p&gt;
&lt;p&gt;Currently, there is no mapping between WebAssembly types and Web IDL types. This means that, even for simple types like numbers, your call has to go through JavaScript.&lt;/p&gt;
&lt;p&gt;Here’s how this works:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;WebAssembly passes the value to JS.&lt;/li&gt;
&lt;li&gt;In the process, the engine converts this value into a JavaScript type, and puts it in the JS heap in memory&lt;/li&gt;
&lt;li&gt;Then, that JS value is passed to the Web API function. In the process, the engine converts the JS value into a Web IDL type, and puts it in a different part of memory, the renderer’s heap.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-03-wasm-to-browser-01.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-03-wasm-to-browser-01-500x274.png&quot; alt=&quot;Wasm passing number to JS&quot; width=&quot;500&quot; height=&quot;274&quot; class=&quot;alignnone size-large wp-image-33721&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-01-500x274.png 500w, https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-01-250x137.png 250w, https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-01-768x422.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-03-wasm-to-browser-02.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-03-wasm-to-browser-02-500x274.png&quot; alt=&quot;Engine converting the int32 to a Number and putting it in the JS heap&quot; width=&quot;500&quot; height=&quot;274&quot; class=&quot;alignnone size-large wp-image-33722&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-02-500x274.png 500w, https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-02-250x137.png 250w, https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-02-768x422.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-03-wasm-to-browser-03.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-03-wasm-to-browser-03-500x274.png&quot; alt=&quot;Engine converting the Number to a double, and putting that in the renderer heap&quot; width=&quot;500&quot; height=&quot;274&quot; class=&quot;alignnone size-large wp-image-33723&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-03-500x274.png 500w, https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-03-250x137.png 250w, https://hacks.mozilla.org/files/2019/08/03-03-wasm-to-browser-03-768x422.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This takes more work than it needs to, and also uses up more memory.&lt;/p&gt;
&lt;p&gt;There’s an obvious solution to this—create a mapping from WebAssembly directly to Web IDL. But that’s not as straightforward as it might seem.&lt;/p&gt;
&lt;p&gt;For simple Web IDL types like &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;unsigned long&lt;/code&gt; (which is a number), there are clear mappings from WebAssembly to Web IDL.&lt;/p&gt;
&lt;p&gt;But for the most part, Web API parameters are more complex types. For example, an API might take a dictionary, which is basically an object with properties, or a sequence, which is like an array.&lt;/p&gt;
&lt;p&gt;To have a straightforward mapping between WebAssembly types and Web IDL types, we’d need to add some higher-level types. And we are doing that—with the &lt;a href=&quot;https://github.com/WebAssembly/gc&quot;&gt;GC proposal&lt;/a&gt;. With that, WebAssembly modules will be able to create GC objects—things like structs and arrays—that could be mapped to complicated Web IDL types.&lt;/p&gt;
&lt;p&gt;But if the only way to interoperate with Web APIs is through GC objects, that makes life harder for languages like C++ and Rust that wouldn’t use GC objects otherwise. Whenever the code interacts with a Web API, it would have to create a new GC object and copy values from its linear memory into that object.&lt;/p&gt;
&lt;p&gt;That’s only slightly better than what we have today with JS glue code.&lt;/p&gt;
&lt;p&gt;We don’t want JS glue code to have to build up GC objects—that’s a waste of time and space. And we don’t want the WebAssembly module to do that either, for the same reasons.&lt;/p&gt;
&lt;p&gt;We want it to be just as easy for languages that use linear memory (like Rust and C++) to call Web APIs as it is for languages that use the engine’s built-in GC. So we need a way to create a mapping between objects in linear memory and Web IDL types, too.&lt;/p&gt;
&lt;p&gt;There’s a problem here, though. Each of these languages represents things in linear memory in different ways. And we can’t just pick one language’s representation. That would make all the other languages less efficient.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-07-picking-lang.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-07-picking-lang-500x324.png&quot; alt=&quot;someone standing between the names of linear memory languages like C, C++, and Rust, pointing to Rust and saying 'I pick... that one!'. A red arrow points to the person saying 'bad idea'&quot; width=&quot;500&quot; height=&quot;324&quot; class=&quot;alignnone size-large wp-image-33724&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-07-picking-lang-500x324.png 500w, https://hacks.mozilla.org/files/2019/08/03-07-picking-lang-250x162.png 250w, https://hacks.mozilla.org/files/2019/08/03-07-picking-lang-768x497.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But even though the exact layout in memory for these things is often different, there are some abstract concepts that they usually share in common.&lt;/p&gt;
&lt;p&gt;For example, for strings the language often has a pointer to the start of the string in memory, and the length of the string. And even if the string has a more complicated internal representation, it usually needs to convert strings into this format when calling external APIs anyways.&lt;/p&gt;
&lt;p&gt;This means we can reduce this string down to a type that WebAssembly understands… two i32s.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-08-types-wasm-understands.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-08-types-wasm-understands-500x267.png&quot; alt=&quot;The string Hello in linear memory, with an offset of 2 and length of 5. Red arrows point to offset and length and say 'types that WebAssembly understands!'&quot; width=&quot;500&quot; height=&quot;267&quot; class=&quot;alignnone size-large wp-image-33725&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-08-types-wasm-understands-500x267.png 500w, https://hacks.mozilla.org/files/2019/08/03-08-types-wasm-understands-250x134.png 250w, https://hacks.mozilla.org/files/2019/08/03-08-types-wasm-understands-768x411.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We could hardcode a mapping like this in the engine. So the engine would have yet another reference book, this time for WebAssembly to Web IDL mappings.&lt;/p&gt;
&lt;p&gt;But there’s a problem here. WebAssembly is a type-checked language. To keep things &lt;a href=&quot;https://webassembly.org/docs/security/&quot;&gt;secure&lt;/a&gt;, the engine has to check that the calling code passes in types that match what the callee asks for.&lt;/p&gt;
&lt;p&gt;This is because there are ways for attackers to exploit type mismatches and make the engine do things it’s not supposed to do.&lt;/p&gt;
&lt;p&gt;If you’re calling something that takes a string, but you try to pass the function an integer, the engine will yell at you. And it &lt;em&gt;should&lt;/em&gt; yell at you.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-09-type-mismatch.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-09-type-mismatch-500x272.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;272&quot; class=&quot;alignnone size-large wp-image-33747&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-09-type-mismatch-500x272.png 500w, https://hacks.mozilla.org/files/2019/08/03-09-type-mismatch-250x136.png 250w, https://hacks.mozilla.org/files/2019/08/03-09-type-mismatch-768x418.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So we need a way for the module to explicitly tell the engine something like: “I know Document.createElement() takes a string. But when I call it, I’m going to pass you two integers. Use these to create a DOMString from data in my linear memory. Use the first integer as the starting address of the string and the second as the length.”&lt;/p&gt;
&lt;p&gt;This is what the Web IDL proposal does. It gives a WebAssembly module a way to map between the types that it uses and Web IDL’s types.&lt;/p&gt;
&lt;p&gt;These mappings aren’t hardcoded in the engine. Instead, a module comes with its own little booklet of mappings.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-10-booklet.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-10-booklet-500x272.png&quot; alt=&quot;Wasm file handing a booklet to the engine and saying `Here's a little guidebook. It will tell you how to translate my types to interface types`&quot; width=&quot;500&quot; height=&quot;272&quot; class=&quot;alignnone size-large wp-image-33727&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-10-booklet-500x272.png 500w, https://hacks.mozilla.org/files/2019/08/03-10-booklet-250x136.png 250w, https://hacks.mozilla.org/files/2019/08/03-10-booklet-768x418.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So this gives the engine a way to say “For this function, do the type checking as if these two integers are a string.”&lt;/p&gt;
&lt;p&gt;The fact that this booklet comes with the module is useful for another reason, though.&lt;/p&gt;
&lt;p&gt;Sometimes a module that would usually store its strings in linear memory will want to use an &lt;code&gt;anyref&lt;/code&gt; or a GC type in a particular case… for example, if the module is just passing an object that it got from a JS function, like a DOM node, to a Web API.&lt;/p&gt;
&lt;p&gt;So modules need to be able to choose on a function-by-function (or even even argument-by-argument) basis how different types should be handled. And since the mapping is provided by the module, it can be custom-tailored for that module.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-11-granularity.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/03-11-granularity-500x272.png&quot; alt=&quot;Wasm telling engine 'Read carefully... For some function that take DOMStrings, I'll give you two numbers. For others, I'll just give you the DOMString that JS gave to me.'&quot; width=&quot;500&quot; height=&quot;272&quot; class=&quot;alignnone size-large wp-image-33728&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/03-11-granularity-500x272.png 500w, https://hacks.mozilla.org/files/2019/08/03-11-granularity-250x136.png 250w, https://hacks.mozilla.org/files/2019/08/03-11-granularity-768x418.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How do you generate this booklet?&lt;/p&gt;
&lt;p&gt;The compiler takes care of this information for you. It adds a custom section to the WebAssembly module. So for many language toolchains, the programmer doesn’t have to do much work.&lt;/p&gt;
&lt;p&gt;For example, let’s look at how the Rust toolchain handles this for one of the simplest cases: passing a string into the &lt;code&gt;alert&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#[wasm_bindgen]
extern &quot;C&quot; {
    fn alert(s: &amp;amp;str);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The programmer just has to tell the compiler to include this function in the booklet using the annotation &lt;code&gt;#[wasm_bindgen]&lt;/code&gt;. By default, the compiler will treat this as a linear memory string and add the right mapping for us. If we needed it to be handled differently (for example, as an &lt;code&gt;anyref&lt;/code&gt;) we’d have to tell the compiler using a second annotation.&lt;/p&gt;
&lt;p&gt;So with that, we can cut out the JS in the middle. That makes passing values between WebAssembly and Web APIs faster. Plus, it means we don’t need to ship down as much JS.&lt;/p&gt;
&lt;p&gt;And we didn’t have to make any compromises on what kinds of languages we support. It’s possible to have all different kinds of languages that compile to WebAssembly. And these languages can all map their types to Web IDL types—whether the language uses linear memory, or GC objects, or both.&lt;/p&gt;
&lt;p&gt;Once we stepped back and looked at this solution, we realized it solved a much bigger problem.&lt;/p&gt;
&lt;h2 id=&quot;webassemblytalkingtoallthethings&quot;&gt;WebAssembly talking to All The Things&lt;/h2&gt;
&lt;p&gt;Here’s where we get back to the promise in the intro.&lt;/p&gt;
&lt;p&gt;Is there a feasible way for WebAssembly to talk to all of these different things, using all these different type systems?&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-01-star-diagram.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-01-star-diagram-500x378.png&quot; alt=&quot;A wasm file with arrows pointing to and from: logos for different runtimes (Ruby, php, and Python), other wasm files compiled from Rust and Go, and host systems like the OS or browser&quot; width=&quot;500&quot; height=&quot;378&quot; class=&quot;alignnone size-large wp-image-33729&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/04-01-star-diagram-500x378.png 500w, https://hacks.mozilla.org/files/2019/08/04-01-star-diagram-250x189.png 250w, https://hacks.mozilla.org/files/2019/08/04-01-star-diagram-768x581.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s look at the options.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; try to create mappings that are hardcoded in the engine, like WebAssembly to JS and JS to Web IDL are.&lt;/p&gt;
&lt;p&gt;But to do that, for each language you’d have to create a specific mapping. And the engine would have to explicitly support each of these mappings, and update them as the language on either side changes. This creates a real mess.&lt;/p&gt;
&lt;p&gt;This is kind of how early compilers were designed. There was a pipeline for each source language to each machine code language. I talked about this more in my &lt;a href=&quot;https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/&quot;&gt;first posts on WebAssembly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/02/03-05-langs05.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/02/03-05-langs05-500x308.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;308&quot; class=&quot;alignnone size-large wp-image-30508&quot; srcset=&quot;https://hacks.mozilla.org/files/2017/02/03-05-langs05-500x308.png 500w, https://hacks.mozilla.org/files/2017/02/03-05-langs05-250x154.png 250w, https://hacks.mozilla.org/files/2017/02/03-05-langs05-768x474.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We don’t want something this complicated. We want it to be possible for all these different languages and platforms to talk to each other. But we need it to be scalable, too.&lt;/p&gt;
&lt;p&gt;So we need a different way to do this… more like modern day compiler architectures. These have a split between front-end and back-end. The front-end goes from the source language to an abstract intermediate representation (IR). The back-end goes from that IR to the target machine code.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/02/03-06-langs06.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2017/02/03-06-langs06-500x317.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;317&quot; class=&quot;alignnone size-large wp-image-30509&quot; srcset=&quot;https://hacks.mozilla.org/files/2017/02/03-06-langs06-500x317.png 500w, https://hacks.mozilla.org/files/2017/02/03-06-langs06-250x159.png 250w, https://hacks.mozilla.org/files/2017/02/03-06-langs06-768x487.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where the insight from Web IDL comes in. When you squint at it, Web IDL kind of looks like an IR.&lt;/p&gt;
&lt;p&gt;Now, Web IDL is pretty specific to the Web. And there are lots of use cases for WebAssembly outside the web. So Web IDL itself isn’t a great IR to use.&lt;/p&gt;
&lt;p&gt;But what if you just use Web IDL as inspiration and create a new set of abstract types?&lt;/p&gt;
&lt;p&gt;This is how we got to the WebAssembly interface types proposal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-06-types-as-IR.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-06-types-as-IR-500x321.png&quot; alt=&quot;Diagram showing WebAssembly interface types in the middle. On the left is a wasm module, which could be compiled from Rust, Go, C, etc. Arrows point from these options to the types in the middle. On the right are host languages like JS, Python, and Ruby; host platforms like .NET, Node, and operating systems, and more wasm modules. Arrows point from these options to the types in the middle.&quot; width=&quot;500&quot; height=&quot;321&quot; class=&quot;alignnone size-large wp-image-33730&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/04-06-types-as-IR-500x321.png 500w, https://hacks.mozilla.org/files/2019/08/04-06-types-as-IR-250x161.png 250w, https://hacks.mozilla.org/files/2019/08/04-06-types-as-IR-768x494.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;These types aren’t concrete types. They aren’t like the &lt;code&gt;int32&lt;/code&gt; or &lt;code&gt;float64&lt;/code&gt; types in WebAssembly today. There are no operations on them in WebAssembly.&lt;/p&gt;
&lt;p&gt;For example, there won’t be any string concatenation operations added to WebAssembly. Instead, all operations are performed on the concrete types on either end.&lt;/p&gt;
&lt;p&gt;There’s one key point that makes this possible: with interface types, the two sides aren’t trying to share a representation. Instead, the default is to copy values between one side and the other.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-07-copy.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-07-copy-500x368.png&quot; alt=&quot;saying 'since this is a string in linear memory, I know how to manipulate it' and browser saying 'since this is a DOMString, I know how to manipulate it'&quot; width=&quot;500&quot; height=&quot;368&quot; class=&quot;alignnone size-large wp-image-33731&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/04-07-copy-500x368.png 500w, https://hacks.mozilla.org/files/2019/08/04-07-copy-250x184.png 250w, https://hacks.mozilla.org/files/2019/08/04-07-copy-768x565.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is one case that would seem like an exception to this rule: the new reference values (like &lt;code&gt;anyref&lt;/code&gt;) that I mentioned before. In this case, what is copied between the two sides is the pointer to the object. So both pointers point to the same thing. In theory, this could mean they need to share a representation.&lt;/p&gt;
&lt;p&gt;In cases where the reference is just passing through the WebAssembly module (like the &lt;code&gt;anyref&lt;/code&gt; example I gave above), the two sides still don’t need to share a representation. The module isn’t expected to understand that type anyway… just pass it along to other functions.&lt;/p&gt;
&lt;p&gt;But there are times where the two sides will want to share a representation. For example, the GC proposal adds a way to &lt;a href=&quot;https://github.com/WebAssembly/gc/blob/master/proposals/gc/MVP-JS.md#type-definition-objects&quot;&gt;create type definitions&lt;/a&gt; so that the two sides can share representations. In these cases, the choice of how much of the representation to share is up to the developers designing the APIs.&lt;/p&gt;
&lt;p&gt;This makes it a lot easier for a single module to talk to many different languages.&lt;/p&gt;
&lt;p&gt;In some cases, like the browser, the mapping from the interface types to the host’s concrete types will be baked into the engine.&lt;/p&gt;
&lt;p&gt;So one set of mappings is baked in at compile time and the other is handed to the engine at load time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-08-mapping-symmetry-host.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-08-mapping-symmetry-host-500x243.png&quot; alt=&quot;Engine holding Wasm's mapping booklet and its own mapping reference book for Wasm Interface Types to Web IDL, saying 'So this maps to a string? Ok, I can take it from here to the DOMString that the function is asking for using my hardcoded bindings'&quot; width=&quot;500&quot; height=&quot;243&quot; class=&quot;alignnone size-large wp-image-33732&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/04-08-mapping-symmetry-host-500x243.png 500w, https://hacks.mozilla.org/files/2019/08/04-08-mapping-symmetry-host-250x122.png 250w, https://hacks.mozilla.org/files/2019/08/04-08-mapping-symmetry-host-768x374.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But in other cases, like when two WebAssembly modules are talking to each other, they both send down their own little booklet. They each map their functions’ types to the abstract types.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-09-mapping-symmetry-wasm.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/04-09-mapping-symmetry-wasm-500x302.png&quot; alt=&quot;Engine reaching for mapping booklets from two wasm files, saying 'Ok, let's see how these map to each other'&quot; width=&quot;500&quot; height=&quot;302&quot; class=&quot;alignnone size-large wp-image-33749&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/04-09-mapping-symmetry-wasm-500x302.png 500w, https://hacks.mozilla.org/files/2019/08/04-09-mapping-symmetry-wasm-250x151.png 250w, https://hacks.mozilla.org/files/2019/08/04-09-mapping-symmetry-wasm-768x464.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This isn’t the only thing you need to enable modules written in different source languages to talk to each other (and we’ll write more about this in the future) but it is a big step in that direction.&lt;/p&gt;
&lt;p&gt;So now that you understand why, let’s look at how.&lt;/p&gt;
&lt;h2 id=&quot;whatdotheseinterfacetypesactuallylooklike&quot;&gt;What do these interface types actually look like?&lt;/h2&gt;
&lt;p&gt;Before we look at the details, I should say again: this proposal is still under development. So the final proposal may look very different.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-01-construction.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-01-construction-500x296.png&quot; alt=&quot;Two construction workers with a sign that says 'Use caution'&quot; width=&quot;500&quot; height=&quot;296&quot; class=&quot;alignnone size-large wp-image-33733&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/05-01-construction-500x296.png 500w, https://hacks.mozilla.org/files/2019/08/05-01-construction-250x148.png 250w, https://hacks.mozilla.org/files/2019/08/05-01-construction-768x455.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, this is all handled by the compiler. So even when the proposal is finalized, you’ll only need to know what annotations your toolchain expects you to put in your code (like in the wasm-bindgen example above). You won’t really need to know how this all works under the covers.&lt;/p&gt;
&lt;p&gt;But the &lt;a href=&quot;https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md&quot;&gt;details of the proposal&lt;/a&gt; are pretty neat, so let’s dig into the current thinking.&lt;/p&gt;
&lt;h3 id=&quot;theproblemtosolve&quot;&gt;The problem to solve&lt;/h3&gt;
&lt;p&gt;The problem we need to solve is translating values between different types when a module is talking to another module (or directly to a host, like the browser).&lt;/p&gt;
&lt;p&gt;There are four places where we may need to do a translation:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For exported functions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;accepting parameters from the caller&lt;/li&gt;
&lt;li&gt;returning values to the caller&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;For imported functions&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;passing parameters to the function&lt;/li&gt;
&lt;li&gt;accepting return values from the function&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And you can think about each of these as going in one of two directions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Lifting, for values leaving the module. These go from a concrete type to an interface type.&lt;/li&gt;
&lt;li&gt;Lowering, for values coming into the module. These go from an interface type to a concrete type.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-02-incoming-outgoing.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-02-incoming-outgoing-500x306.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;306&quot; class=&quot;alignnone size-large wp-image-33734&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/05-02-incoming-outgoing-500x306.png 500w, https://hacks.mozilla.org/files/2019/08/05-02-incoming-outgoing-250x153.png 250w, https://hacks.mozilla.org/files/2019/08/05-02-incoming-outgoing-768x469.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;tellingtheenginehowtotransformbetweenconcretetypesandinterfacetypes&quot;&gt;Telling the engine how to transform between concrete types and interface types&lt;/h3&gt;
&lt;p&gt;So we need a way to tell the engine which transformations to apply to a function’s parameters and return values. How do we do this?&lt;/p&gt;
&lt;p&gt;By defining an interface adapter.&lt;/p&gt;
&lt;p&gt;For example, let’s say we have a Rust module compiled to WebAssembly. It exports a &lt;code&gt;greeting_&lt;/code&gt; function that can be called without any parameters and returns a greeting.&lt;/p&gt;
&lt;p&gt;Here’s what it would look like (in WebAssembly text format) today.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-03-original-function.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-03-original-function-500x162.png&quot; alt=&quot;a Wasm module that exports a function that returns two numbers. See proposal linked above for details.&quot; width=&quot;500&quot; height=&quot;162&quot; class=&quot;alignnone size-large wp-image-33736&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/05-03-original-function-500x162.png 500w, https://hacks.mozilla.org/files/2019/08/05-03-original-function-250x81.png 250w, https://hacks.mozilla.org/files/2019/08/05-03-original-function-768x249.png 768w, https://hacks.mozilla.org/files/2019/08/05-03-original-function.png 1400w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So right now, this function returns two integers.&lt;/p&gt;
&lt;p&gt;But we want it to return the &lt;code&gt;string&lt;/code&gt; interface type. So we add something called an interface adapter.&lt;/p&gt;
&lt;p&gt;If an engine understands interface types, then when it sees this interface adapter, it will wrap the original module with this interface.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-04-interface.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-04-interface-500x184.png&quot; alt=&quot;an interface adapter that returns a string. See proposal linked above for details.&quot; width=&quot;500&quot; height=&quot;184&quot; class=&quot;alignnone size-large wp-image-33737&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/05-04-interface-500x184.png 500w, https://hacks.mozilla.org/files/2019/08/05-04-interface-250x92.png 250w, https://hacks.mozilla.org/files/2019/08/05-04-interface-768x282.png 768w, https://hacks.mozilla.org/files/2019/08/05-04-interface.png 1400w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It won’t export the &lt;code&gt;greeting_&lt;/code&gt; function anymore… just the &lt;code&gt;greeting&lt;/code&gt; function that wraps the original. This new &lt;code&gt;greeting&lt;/code&gt; function returns a string, not two numbers.&lt;/p&gt;
&lt;p&gt;This provides backwards compatibility because engines that don’t understand interface types will just export the original &lt;code&gt;greeting_&lt;/code&gt; function (the one that returns two integers).&lt;/p&gt;
&lt;p&gt;How does the interface adapter tell the engine to turn the two integers into a string?&lt;/p&gt;
&lt;p&gt;It uses a sequence of adapter instructions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-05-adapter-inst-return.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-05-adapter-inst-return-500x252.png&quot; alt=&quot;Two adapter instructions inside of the adapter function. See proposal linked above for details.&quot; width=&quot;500&quot; height=&quot;252&quot; class=&quot;alignnone size-large wp-image-33738&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/05-05-adapter-inst-return-500x252.png 500w, https://hacks.mozilla.org/files/2019/08/05-05-adapter-inst-return-250x126.png 250w, https://hacks.mozilla.org/files/2019/08/05-05-adapter-inst-return-768x387.png 768w, https://hacks.mozilla.org/files/2019/08/05-05-adapter-inst-return.png 1400w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The adapter instructions above are two from a small set of new instructions that the proposal specifies.&lt;/p&gt;
&lt;p&gt;Here’s what the instructions above do:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Use the &lt;code&gt;call-export&lt;/code&gt; adapter instruction to call the original &lt;code&gt;greeting_&lt;/code&gt; function. This is the one that the original module exported, which returned two numbers. These numbers get put on the stack.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;memory-to-string&lt;/code&gt; adapter instruction to convert the numbers into the sequence of bytes that make up the string. We have to specifiy “mem” here because a WebAssembly module could one day have multiple memories. This tells the engine which memory to look in. Then the engine takes the two integers from the top of the stack (which are the pointer and the length) and uses those to figure out which bytes to use.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This might look like a full-fledged programming language. But there is no control flow here—you don’t have loops or branches. So it’s still declarative even though we’re giving the engine instructions.&lt;/p&gt;
&lt;p&gt;What would it look like if our function also took a string as a parameter (for example, the name of the person to greet)?&lt;/p&gt;
&lt;p&gt;Very similar. We just change the interface of the adapter function to add the parameter. Then we add two new adapter instructions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-06-adapter-inst-param.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-06-adapter-inst-param-500x291.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;291&quot; class=&quot;alignnone size-large wp-image-33748&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/05-06-adapter-inst-param-500x291.png 500w, https://hacks.mozilla.org/files/2019/08/05-06-adapter-inst-param-250x145.png 250w, https://hacks.mozilla.org/files/2019/08/05-06-adapter-inst-param-768x447.png 768w, https://hacks.mozilla.org/files/2019/08/05-06-adapter-inst-param.png 1400w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s what these new instructions do:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Use the &lt;code&gt;arg.get&lt;/code&gt; instruction to take a reference to the string object and put it on the stack.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;string-to-memory&lt;/code&gt; instruction to take the bytes from that object and put them in linear memory. Once again, we have to tell it which memory to put the bytes into. We also have to tell it how to allocate the bytes. We do this by giving it an allocator function (which would be an export provided by the original module).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;One nice thing about using instructions like this: we can extend them in the future… just as we can extend the instructions in WebAssembly core. We think the instructions we’re defining are a good set, but we aren’t committing to these being the only instruct for all time.&lt;/p&gt;
&lt;p&gt;If you’re interested in understanding more about how this all works, &lt;a href=&quot;https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md&quot;&gt;the explainer&lt;/a&gt; goes into much more detail.&lt;/p&gt;
&lt;h3 id=&quot;sendingtheseinstructionstotheengine&quot;&gt;Sending these instructions to the engine&lt;/h3&gt;
&lt;p&gt;Now how do we send this to the engine?&lt;/p&gt;
&lt;p&gt;These annotations gets added to the binary file in a custom section.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-07-custom-section.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/05-07-custom-section-500x252.png&quot; alt=&quot;A file split in two. The top part is labeled 'known sections, e.g. code, data'. The bottom part is labeled 'custom sections, e.g. interface adapter'&quot; width=&quot;500&quot; height=&quot;252&quot; class=&quot;alignnone size-large wp-image-33740&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/05-07-custom-section-500x252.png 500w, https://hacks.mozilla.org/files/2019/08/05-07-custom-section-250x126.png 250w, https://hacks.mozilla.org/files/2019/08/05-07-custom-section-768x387.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If an engine knows about interface types, it can use the custom section. If not, the engine can just ignore it, and you can use a polyfill which will read the custom section and create glue code.&lt;/p&gt;
&lt;h2 id=&quot;howisthisdifferentthancorbaprotocolbuffersetc&quot;&gt;How is this different than CORBA, Protocol Buffers, etc?&lt;/h2&gt;
&lt;p&gt;There are other standards that seem like they solve the same problem—for example CORBA, Protocol Buffers, and Cap’n Proto.&lt;/p&gt;
&lt;p&gt;How are those different? They are solving a much harder problem.&lt;/p&gt;
&lt;p&gt;They are all designed so that you can interact with a system that you don’t share memory with—either because it’s running in a different process or because it’s on a totally different machine across the network.&lt;/p&gt;
&lt;p&gt;This means that you have to be able to send the thing in the middle—the “intermediate representation” of the objects—across that boundary.&lt;/p&gt;
&lt;p&gt;So these standards need to define a serialization format that can efficiently go across the boundary. That’s a big part of what they are standardizing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/06-01-cross-boundary-ir.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/06-01-cross-boundary-ir-500x109.png&quot; alt=&quot;Two computers with wasm files on them and multiple lines flowing into a single line connecting connecting them. The single line represents serialization and is labelled 'IR'&quot; width=&quot;500&quot; height=&quot;109&quot; class=&quot;alignnone size-large wp-image-33741&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/06-01-cross-boundary-ir-500x109.png 500w, https://hacks.mozilla.org/files/2019/08/06-01-cross-boundary-ir-250x54.png 250w, https://hacks.mozilla.org/files/2019/08/06-01-cross-boundary-ir-768x167.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even though this looks like a similar problem, it’s actually almost the exact inverse.&lt;/p&gt;
&lt;p&gt;With interface types, this “IR” never needs to leave the engine. It’s not even visible to the modules themselves.&lt;/p&gt;
&lt;p&gt;The modules only see the what the engine spits out for them at the end of the process—what’s been copied to their linear memory or given to them as a reference. So we don’t have to tell the engine what layout to give these types—that doesn’t need to be specified.&lt;/p&gt;
&lt;p&gt;What &lt;em&gt;is&lt;/em&gt; specified is the way that you talk to the engine. It’s the declarative language for this booklet that you’re sending to the engine.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/06-02-no-boundary-ir.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/06-02-no-boundary-ir-500x115.png&quot; alt=&quot;Two wasm files with arrows pointing to the word 'IR' with no line between, because there is no serialization happening.&quot; width=&quot;500&quot; height=&quot;115&quot; class=&quot;alignnone size-large wp-image-33742&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/06-02-no-boundary-ir-500x115.png 500w, https://hacks.mozilla.org/files/2019/08/06-02-no-boundary-ir-250x58.png 250w, https://hacks.mozilla.org/files/2019/08/06-02-no-boundary-ir-768x177.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This has a nice side effect: because this is all declarative, the engine can see when a translation is unnecessary—like when the two modules on either side are using the same type—and skip the translation work altogether.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/06-03-opt.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/06-03-opt-500x327.png&quot; alt=&quot;The engine looking at the booklets for a Rust module and a Go module and saying 'Ooh, you’re both using linear memory for this string... I’ll just do a quick copy between your memories, then'&quot; width=&quot;500&quot; height=&quot;327&quot; class=&quot;alignnone size-large wp-image-33743&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/06-03-opt-500x327.png 500w, https://hacks.mozilla.org/files/2019/08/06-03-opt-250x164.png 250w, https://hacks.mozilla.org/files/2019/08/06-03-opt-768x503.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;howcanyouplaywiththistoday&quot;&gt;How can you play with this today?&lt;/h2&gt;
&lt;p&gt;As I mentioned above, this is an early stage proposal. That means things will be changing rapidly, and you don’t want to depend on this in production.&lt;/p&gt;
&lt;p&gt;But if you want to start playing with it, we’ve implemented this across the toolchain, from production to consumption:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the Rust toolchain&lt;/li&gt;
&lt;li&gt;wasm-bindgen&lt;/li&gt;
&lt;li&gt;the Wasmtime WebAssembly runtime&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;And since we maintain all these tools, and since we’re working on the standard itself, we can keep up with the standard as it develops.&lt;/p&gt;
&lt;p&gt;Even though all these parts will continue changing, we’re making sure to synchronize our changes to them. So as long as you use up-to-date versions of all of these, things shouldn’t break too much.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/07-01-construction.png&quot;&gt;&lt;img src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/07-01-construction-500x296.png&quot; alt=&quot;Construction worker saying 'Just be careful and stay on the path'&quot; width=&quot;500&quot; height=&quot;296&quot; class=&quot;alignnone size-large wp-image-33744&quot; srcset=&quot;https://hacks.mozilla.org/files/2019/08/07-01-construction-500x296.png 500w, https://hacks.mozilla.org/files/2019/08/07-01-construction-250x148.png 250w, https://hacks.mozilla.org/files/2019/08/07-01-construction-768x455.png 768w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So here are the many ways you can play with this today. For the most up-to-date version, check out this &lt;a href=&quot;https://github.com/CraneStation/wasmtime-demos&quot;&gt;repo of demos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Qn_4F3foB3Q&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;h2 id=&quot;thankyou&quot;&gt;Thank you&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;Thank you to the team who brought all of the pieces together across all of these languages and runtimes: Alex Crichton, Yury Delendik, Nick Fitzgerald, Dan Gohman, and Till Schneidereit&lt;/li&gt;
&lt;li&gt;Thank you to the proposal co-champions and their colleagues for their work on the proposal: Luke Wagner, Francis McCabe, Jacob Gravelle, Alex Crichton, and Nick Fitzgerald&lt;/li&gt;
&lt;li&gt;Thank you to my fantastic collaborators, Luke Wagner and Till Schneidereit, for their invaluable input and feedback on this article&lt;/li&gt;
&lt;/ul&gt;&lt;section class=&quot;about&quot; readability=&quot;2.8289473684211&quot;&gt;
&lt;p&gt;Lin works in Advanced Development at Mozilla, with a focus on Rust and WebAssembly.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/lclarkmozilla-com/&quot;&gt;More articles by Lin Clark…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Wed, 21 Aug 2019 16:38:08 +0000</pubDate>
<dc:creator>skellertor</dc:creator>
<og:url>https://hacks.mozilla.org/2019/08/webassembly-interface-types</og:url>
<og:title>WebAssembly Interface Types: Interoperate with All the Things! – Mozilla Hacks - the Web developer blog</og:title>
<og:description>People are excited about running WebAssembly outside the browser. People are also excited about running WebAssembly from languages like Python, Ruby, and Rust. Lin Clark's Code Cartoons are back, illustrating ...</og:description>
<og:image>https://hacks.mozilla.org/files/2019/08/featured-image.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2019/08/webassembly-interface-types/</dc:identifier>
</item>
<item>
<title>Whistle-blower reveals N Dakota leak of 11M gallons of gas condensate in 2015</title>
<link>https://www.desmogblog.com/2019/08/19/north-dakota-regulators-oil-gas-spill-exxon-valdez</link>
<guid isPermaLink="true" >https://www.desmogblog.com/2019/08/19/north-dakota-regulators-oil-gas-spill-exxon-valdez</guid>
<description>&lt;p&gt;In July 2015 workers at the Garden Creek I Gas Processing Plant, in Watford City, North Dakota, noticed a leak in a pipeline and reported a spill to the North Dakota Department of Health that remains &lt;a href=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/EIR3825_Summary_Report%2C%20As%20of%20July%2023%2C%202019.pdf&quot;&gt;officially listed&lt;/a&gt; as 10 gallons, the size of two bottled water delivery jugs.&lt;/p&gt;&lt;p&gt;But a whistle-blower has revealed to DeSmog the incident is actually on par with the 1989 &lt;em&gt;Exxon Valdez&lt;/em&gt; oil spill in Alaska, which released roughly 11 million gallons of thick crude.&lt;/p&gt;
&lt;!--break--&gt;

&lt;p&gt;The Garden Creek spill “is in fact over 11 million gallons of condensate that leaked through a crack in a pipeline for over 3 years,” says the whistle-blower, who has expertise in environmental science but refused to be named or give other background information for fear of losing their job. They provided to DeSmog &lt;a href=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/Garden%20Creek%20Spill%20Remediation%20Document%2C%20Verifies%20Spill%20at%2011%20Million%20Gallons.pdf&quot;&gt;a document&lt;/a&gt; that details remediation efforts and verifies the spill’s monstrous size.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;Up to 5,500,000 gallons” of hydrocarbons have been removed from the site, the 2018 document states, “based upon an…estimate of approximately 11 million gallons released.”&lt;/p&gt;

&lt;p&gt;Garden Creek is operated by the Oklahoma-based oil and gas service company, &lt;span class=&quot;caps&quot;&gt;ONEOK&lt;/span&gt; Partners, and processes natural gas and natural gas liquids, also called natural gas condensate, brought to the facility via pipeline from Bakken wells.&lt;/p&gt;

&lt;p&gt;Neither the National Oceanic and Atmospheric Administration (&lt;span class=&quot;caps&quot;&gt;NOAA&lt;/span&gt;), which monitors coastal spills, nor the Environmental Protection Agency (&lt;span class=&quot;caps&quot;&gt;EPA&lt;/span&gt;) could provide records to put the spill’s size in context, but according to available reports, if the 11-million-gallon figure is accurate, the Garden Creek spill appears to be among the largest recorded oil and gas industry spills in the history of the United States.&lt;/p&gt;

&lt;p&gt;However, the American public is unaware, because the spill remains officially listed as just 10 gallons. That is despite the fact that a North Dakota regulator has acknowledged the spill was much larger, and even the official record, right after stating the spill was 10 gallons, notes that the area was “saturated with natural gas condensate of an unknown volume,” and thus may have been larger.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;gie-single&quot; href=&quot;http://www.gettyimages.com/detail/177984229&quot; id=&quot;fLgdHj71T6hbDIHgLAyZ0Q&quot; target=&quot;_blank&quot;&gt;Embed from Getty Images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scott Skokos, Executive Director of the Dakota Resource Council, an organization that works to protect North Dakota’s natural resources and family farms, questioned whether it was legal for the state to cover up or downplay spills.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;I have seen many instances where it appears spills are being covered up, and there appears to be a pattern of downplaying spills, which makes the narrative surrounding oil and gas development look rosy and makes the industry look better politically,” says Skokos. “If this pattern is as widespread as it seems, then we have a government that is conspiring to protect the oil industry. This is not only reckless and unethical, but also potentially illegal.”&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;In my view,” Skokos added, “this is not looking out for the best interest of the state or the people who live in the state, it is only looking out for corporations. And these are not even corporate citizens of this state, they are corporate citizens of somewhere else.”&lt;/p&gt;

&lt;h3&gt;The Challenge of Oversight&lt;/h3&gt;

&lt;p&gt;Spills are pervasive in North Dakota’s oil industry and have been the focus of numerous media reports. “State regulators have often been unable — or unwilling — to compel energy companies to clean up their mess,” &lt;a href=&quot;https://www.propublica.org/article/the-other-fracking-north-dakotas-oil-boom-brings-damage-along-with-prosperi&quot;&gt;ProPublica&lt;/a&gt; reported in a 2012 investigation.&lt;/p&gt;

&lt;p&gt;A 2015 &lt;a href=&quot;http://insideenergy.org/2015/02/16/state-officials-misrepresent-north-dakotas-spill-problem/&quot;&gt;Inside Energy&lt;/a&gt; article noted state reports “are riddled with inaccuracies and estimates” and cited a 2011 spill of oil and gas wastewater by a Texas-based company listed as 12,600 gallons but later determined to be at least two million gallons. An eight-year database of spills compiled by the &lt;a href=&quot;https://www.nytimes.com/interactive/2014/11/23/us/north-dakota-spill-database.html&quot;&gt;New York Times&lt;/a&gt; in 2014 showed two spills of roughly one million gallons.&lt;/p&gt;

&lt;p&gt;But no news agency has reported on any spill in North Dakota near the magnitude of Garden Creek.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Moisture flare at the Obenour 1 and 2 well on the Evanson family farm in McKenzie County, North Dakota, east of Arnegard and west of Watford City.&quot; src=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/Bernice_wells_flare_North_Dakota_2013_credit-Tim-Evanson.jpg&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;a href=&quot;https://www.flickr.com/photos/23165290@N00/9287130523/&quot;&gt;Pumpjacks and flaring in McKenzie County, North Dakota, east of Arnegard and west of Watford City.&lt;/a&gt; Credit: &lt;a href=&quot;https://www.flickr.com/photos/timevanson/&quot;&gt;Tim Evanson&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/2.0/deed.en&quot;&gt;&lt;span property=&quot;dc:identifier dct:identifier&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;BY&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;SA&lt;/span&gt; 2.0&lt;/span&gt;&lt;/a&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Gas processing plants are sprawling industrial facilities and contain numerous pipes and towers that help clean and separate the stream of natural gas and natural gas liquids like ethane, butane, and propane carried in gathering pipelines that originate at wellheads.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.desmogblog.com/fracking-plastics&quot;&gt;explosion of fracking&lt;/a&gt; across the &lt;span class=&quot;caps&quot;&gt;U.S.&lt;/span&gt; and the booming development of America’s gas-rich shale plays have planted gas processing plants, which emit a near-continuous stream of greenhouse gases and carcinogens, from the Pittsburgh suburbs and Ohio’s Amish country to the high plains of Colorado and the badlands of North Dakota.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;There should be ongoing investigations of these facilities regularly,” says Emily Collins, Executive Director of Fair Shake, an Ohio-based nonprofit environmental law firm. But there isn’t.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;There is so much to keep track of for these regulators that spills, among other things, are lost in the mix,” says Collins. “The old formula of having inspections and investigations where you show up once a year clearly doesn’t work here, not with the pace, not with how many places are at issue all of the sudden. We are just not able to handle it all.”&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Map of western North Dakota that includes well density (number of wells per 5 km radius), reported brine spills from 2007 to 2015 (red circles), and sampling sites of samples collected in July 2015 (green triangles).&quot; src=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/ND-well-density-brine-spills-map_Vengosh-2016.png&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Map of western North Dakota that includes well density (number of wells per 5 km radius), reported brine spills from 2007 to 2015 (red circles), and sampling sites of samples collected in July 2015 (green triangles). Credit: &lt;a href=&quot;https://pubs.acs.org/doi/abs/10.1021/acs.est.5b06349&quot;&gt;Lauer et al. 2016&lt;/a&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, examination of the industry, its spills, and its placid regulators has made its way to the &lt;span class=&quot;caps&quot;&gt;U.S.&lt;/span&gt; Congress. The Subcommittee on Energy and Mineral Resources of the House’s Natural Resource Committee has been holding hearings on the impacts of oil and gas development on local communities, landowners, taxpayers, and the environment.  &lt;/p&gt;

&lt;p&gt;In May, Collins testified before the subcommittee, along with 71-year-old North Dakota farmer Daryl Peterson. He shared harrowing stories about decades of spills of toxic oil and gas industry waste on his farmland, and the utter neglect of the issue by his state’s regulators.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;In my experience, regulators have been reluctant to enforce compliance,” Peterson told Congress. “And have minimized the impacts, rather than holding the oil companies accountable.”&lt;/p&gt;

&lt;h3&gt;North Dakota Regulator Disputes Size of Spill&lt;/h3&gt;

&lt;p&gt;On April 29, 2019, oversight of spills shifted from the North Dakota Department of Health to a new agency, the Department of Environmental Quality, but the state’s Spill Investigation Program Manager has remained Bill Suess.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;I know for a fact that Bill Suess was made aware of Garden Creek’s size in October of 2018 after a 3-year investigation was completed to assess size and scope,” the whistle-blower told DeSmog. “Bill and state staff were presented an updated version of the spill size…at the state Gold Seal building in a PowerPoint presentation.”&lt;/p&gt;

&lt;p&gt;In a phone conversation with DeSmog in mid-July, Suess explained that he had never seen a document showing the spill’s size to be any number other than 10 gallons, and he rejected the fact that the spill was 11 million gallons.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;That would be by far the largest spill on land in &lt;span class=&quot;caps&quot;&gt;U.S.&lt;/span&gt; history. I mean you are talking 261,000 barrels,” Suess said. “That would be significant, and I will guarantee you it is not that volume. I have received no documentation and I have no scientific evidence to show it is anywhere near that volume.”&lt;/p&gt;

&lt;p&gt;Suess readily acknowledged that the officially listed spill size was too low. “We know it is significantly bigger than 10 gallons. We have known that since Day One,” Suess continued. Yet he defended the state’s decision to continue to list the spill as just 10 gallons.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;In North Dakota we do not regulate based on volume,” Suess added. “Whether we put a 10 there, a 100 there, a 1,000 there is not going to change our response to the spill, it is not going to change what the responsible party has to do, not going to change their remediation, it is not going to change anything other than your curiosity.”&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;The One Million Gallon Salt Water (Brine) Spill by Crestwood, Arrow Pipeline LLC discovered July 8, 2014. Located North of Mandaree, ND.&quot; src=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/arrow-pipeline-brine-spill-mandaree_credit-lisa-deville.png&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Crestwood discovered a 1 million gallon brine spill from its Arrow pipeline on July 8, 2014. Located north of Mandaree, North Dakota, on the Fort Berthold Reservation. Mandaree is one of the six segments on Fort Berthold and where most Mandan and Hidatsa people live.&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt; Courtesy of Lisa DeVille&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;DeSmog presented details of the Garden Creek spill to North Dakota environmental attorney Fintan Dooley, who leads the North Dakota Salted Lands Council, an organization dedicated to remediating spills.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;You got a big fish hooked here,” he said. “This has all the signs of a civil conspiracy. If instead of 10, it was 110 or 1010 gallons, one could make the determination the original report was a mistake, but to leave uncorrected a mistake this big is not an accident, it smells of deception and deliberation and this is not the first incident of deceptive record-keeping in North Dakota — I think a good question to ask is, how many state officials are implicated in covering up this story?”&lt;/p&gt;

&lt;p&gt;The North Dakota Century Code, which contains all state laws, covers perjury, falsification, and breach of duty in &lt;a href=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/ND%20Century%20Code%20Section%2012.1%2C%20Breach%20of%20Public%20Duty.pdf&quot;&gt;Chapter 12.1-11&lt;/a&gt;. Subsection 05, “Tampering with public records,” states the following:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;A person is guilty of an offense if he: a. Knowingly makes a false entry in or false alteration of a government record; or b. Knowingly, without lawful authority, destroys, conceals, removes, or otherwise impairs the verity or availability of a government record.”&lt;/p&gt;

&lt;p&gt;The offense, “if committed by a public servant who has custody of the government record,” is a felony. The crime carries a possible five-year prison sentence.&lt;/p&gt;

&lt;p&gt;DeSmog confronted Suess with this portion of the code, and asked him if he believed he, or someone, was guilty of falsifying government records. “No, I am not guilty, but if I changed that number I would be,” he said. “If I were to go in there and just change that [10 gallons] to a larger number that I don’t have any scientific evidence or documentation for, then I would be falsifying it.”&lt;/p&gt;

&lt;p&gt;The environmental attorney Fintan Dooley does not buy that officials behaved appropriately. “There has been a lot of talk around the state capitol lately about official breach of public trust, and I am just wondering how far this practice of falsification of records will be allowed to go?” he said. “The whole thing can be prosecuted, and if this presents an opportunity to prosecute, I think that is just wonderful.” Any decisions regarding prosecution, he stresses, are up to a state attorney.&lt;/p&gt;

&lt;p&gt;When asked exactly who would be charged with a crime, Dooley said, “If anyone is going to file a criminal charge, they must file it against an individual. If there was a whole series of people involved, the best practice would be to identify all of them.”&lt;/p&gt;

&lt;h3&gt;Spill Cleanup Amid Dakota Access Protests&lt;/h3&gt;

&lt;p&gt;&lt;img alt=&quot;North Dakota gas flare near Watford City&quot; src=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/styles/full_width_blog_image/public/blogimages/orvis%20natural%20gas%20flare.jpg?itok=7FMJet8X&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;a href=&quot;https://www.flickr.com/photos/timevanson/9290351154/in/photolist-f9XtJb-mabfdj-fGutxQ-f9XtBQ-99dF9m-qHAAy8-8nX15C-pPWPGp-Sf2WMT-dzfcpn-omMF81-5jg7Gf-7KVXiL-83V1Jq-f9HdQe-7Ld3Zb-4Rtj3s-4BKVCe-pVpN5o-94z3vN-hjV6Fn-f9nGXa-71Bhsf-f9Xtn3-XiaRz5-56HUaq-9RfyVZ-dyKsM2-9RkqPs-fGvTVJ-dtvHsp-fbBChB-9wsLMF-dpuUfm-8nX3SY-bEf6tF-fj3xuG-dZParB-fG57FS-23BWP8V-p1HXhm-81H5Ep-8Bb78d-8XS7Xe-oT6mZh-rzodBo-7suSy4-f9EYm4-83c7yF-dyKsRi&quot; target=&quot;_blank&quot;&gt;Natural gas flares from a flare-head at the Orvis State well on the Evanson family farm in McKenzie County, North Dakota, west of Watford City.&lt;/a&gt; Credit: &lt;a href=&quot;https://www.flickr.com/photos/timevanson/&quot; target=&quot;_blank&quot;&gt;Tim Evanson&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/2.0/&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;BY&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;SA&lt;/span&gt; 2.0&lt;/a&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Garden Creek I became operational in January 2012. The project was applauded by state and industry officials for its ability to reduce the release of the prominent greenhouse gas methane in the oilfield by containing and processing that and other natural gas byproducts. &lt;a href=&quot;https://www.desmogblog.com/2019/01/29/fracking-industry-gas-flaring-problem&quot;&gt;Flaring&lt;/a&gt;, or burning, natural gas is common in the region’s oilfields.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;The completion of this facility is a positive step toward reducing flaring activities in North Dakota,” &lt;span class=&quot;caps&quot;&gt;ONEOK&lt;/span&gt; president Terry Spencer told a &lt;a href=&quot;http://www.watfordcitynd.com/latest-news/garden-creek-natural-gas-plant-goes-online/&quot;&gt;Watford City newspaper&lt;/a&gt; in 2012. In 2015, at the time the spill was noticed, &lt;span class=&quot;caps&quot;&gt;ONEOK&lt;/span&gt; was in the process of constructing a network of additional gas processing plants across the Bakken. In one industry press release, the company bragged of “better-than-expected plant performance at existing and planned processing plants.”&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;There was motive to cover up the actual size of the spill to allow their infrastructure to be completed,” says the whistle-blower. Furthermore, by the summer of 2016, as the cleanup at Garden Creek I was moving along, protests against the construction of the &lt;a href=&quot;https://www.desmogblog.com/energy-transfer-partners-bakken-oil-pipeline-through-iowa&quot;&gt;Dakota Access pipeline&lt;/a&gt; (&lt;span class=&quot;caps&quot;&gt;DAPL&lt;/span&gt;) at the Standing Rock Sioux Indian Reservation were in full swing. One major concern voiced by the tribe was that a spill could destroy farmland and contaminate drinking water for thousands of people.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;On August 31, 2016, “Happy” American Horse from the Sicangu Nation locked himself to construction equipment as a direct action against the Dakota Access pipeline. &quot; src=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/styles/full_width_blog_image/public/blogimages/Happi__American_Horse_direct_action_DAPL_August_2016_Credit-desiree-kane_creative-commons.png?itok=5_xRsR6z&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dakota_Access_Pipeline_protests#/media/File:%22Happi%22_American_Horse_direct_action_against_DAPL,_August_2016.png&quot; target=&quot;_blank&quot;&gt;On August 31, 2016, “Happy” American Horse from the Sicangu Nation locked himself to construction equipment as a direct action against the Dakota Access pipeline.&lt;/a&gt; Credit: &lt;a href=&quot;http://desireekane.com/&quot; target=&quot;_blank&quot;&gt;Desiree Kane&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CC&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;BY&lt;/span&gt; 3.0&lt;/a&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;Public outcry against gas collection could have threatened &lt;span class=&quot;caps&quot;&gt;ONEOK&lt;/span&gt;’s expansion plans and might have stood in the way of the state’s flaring reduction goals,” says the whistle-blower. “It’s also possible that it could have further galvanized public opinion against the &lt;span class=&quot;caps&quot;&gt;DAPL&lt;/span&gt; project. In short, it’s possible that the North Dakota Department of Health faced heavy pressure from both state and industry to keep this on the down low.”&lt;/p&gt;

&lt;p&gt;David Glatt, Director of North Dakota’s Department of Environmental Quality, said, “The state makes public all spill reports it receives, so there is no under reporting by the state.” &lt;span class=&quot;caps&quot;&gt;ONEOK&lt;/span&gt; has not responded to DeSmog’s questions on this incident. DeSmog has filed an open records request with the State of North Dakota for additional information and details related to the Garden Creek I spill.&lt;/p&gt;

&lt;p&gt;In July, Suess told DeSmog, “Remediation is still ongoing. It is going to be a slow process, it will be a few years, I think.” Suess said he was planning to revisit the spill site but did not expect anything he found there would lead him to alter the officially recorded spill size. “I have a schedule to go out there later this month, but I still probably wouldn’t change that 10-gallon number because I still won’t have an accurate number,” he said.&lt;/p&gt;

&lt;h3&gt;North Dakotans Grapple With Impacts of Spills&lt;/h3&gt;

&lt;p&gt;In May, just as North Dakota’s planting season was beginning, I met with several North Dakota residents whose farms or communities had been marred by oil and gas industry spills, including the land of farmer Daryl Peterson, whose 2,500 acres of grains, soybeans, and corn have been contaminated by more than a dozen spills of brine.&lt;/p&gt;

&lt;p&gt;This oil and gas waste product is loaded with salt and also contains toxic heavy metals and radioactivity. Peterson pointed to dead zones on his land that are unfit for crops though still fit for government taxes. The spills have also tainted his groundwater.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Oil and gas industry brine spill impacts on Daryl Peterson's North Dakota farm.&quot; src=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/ND-farm-brine-spill-aerial_credit-daryl-peterson_0.png&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Daryl Peterson's North Dakota farm has suffered from more than a dozen oil and gas industry brine spills. Courtesy of Daryl Peterson&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;State regulators declare most spills are cleaned up to &lt;span class=&quot;caps&quot;&gt;EPA&lt;/span&gt; standards and land productivity is restored but very often this has not been the case,” said Peterson, who, together with his wife Christine, has farmed this land in Bottineau County, near the Canadian border, for more than 40 years.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;The oil industry controls politics in North Dakota and long-term consequences to our precious land, air, and water resources are being ignored with this gold rush mentality. With the prospect of 40,000 more wells in North Dakota, the future of our bountiful agriculture state is in great jeopardy,” said Peterson.&lt;/p&gt;

&lt;p&gt;Suess defended his agency’s methods. “What I believe the North Dakota public wants to know is not how big is it, but is this spill a risk to me,” he said. “Personally, I have actually been told by others that we are one of the most transparent agencies out there. My boss is the North Dakota taxpayer, and my door is always open, any citizen can walk in at any time and talk to me.”&lt;/p&gt;

&lt;p&gt;However, other North Dakota residents dealing with spills strongly disagree. In May DeSmog also toured spills on the Fort Berthold Indian Reservation, in the heart of the Bakken oil boom in western North Dakota, with Lisa DeVille and her husband Walter DeVille Sr. The couple lives in the community of Mandaree and helps lead an environmental advocacy group called Fort Berthold Protectors of Water &lt;span class=&quot;amp&quot;&gt;&amp;amp;&lt;/span&gt; Earth Rights, or &lt;span class=&quot;caps&quot;&gt;POWER&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;You can see the earth slowly dying,” said Lisa, who has two master’s degrees in business and returned to school to get a bachelor’s* degree in environmental science so she could better monitor all the spills and contamination on her land and advocate for her community.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;Every day we have a spill,” she said. “Whether it is frac sand spilled, trucks that stall out and drop their oil on roads, trucks wrecking on the road and spilling oil and gas waste product, or our invisible spill, the methane released into the air from flaring and venting.”&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://www.desmogblog.com/sites/beta.desmogblog.com/files/arrow-pipeline-brine-spill-mandaree-aerial_credit-lisa-deville.png&quot;/&gt;&lt;br/&gt;&lt;span&gt;&lt;em&gt;Aerial view of a 1 million gallon brine spill from Crestwood's Arrow pipeline on July 8, 2014. Located north of Mandaree, North Dakota, on the Fort Berthold Reservation. Mandaree is one of the six segments on Fort Berthold and where most Mandan and Hidatsa peoples live.&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt; Courtesy of Lisa DeVille&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;The North Dakota Spill Investigation Program Manager can say that his door is open, but North Dakota is protecting industry, not people, and it is upsetting to me,” Lisa added.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;My people — the Mandan, Hidatsa, and Arikara Nation — have been here for centuries, there have been many broken promises, and they have been lied to and are still being lied to about all this oil and gas contamination. No one knows the amount of spills on Fort Berthold because industry will lie to our tribal leaders. Also, there is no data for the public to see. There are no studies, research, or analysis to create laws or codes for environmental justice.”&lt;/p&gt;

&lt;p&gt;In July 2014, one million gallons of oil and gas waste spilled from a pipeline and into a ravine that drains into the tribe’s main reservoir for drinking water. In &lt;a href=&quot;https://pubs.acs.org/doi/abs/10.1021/acs.est.5b06349&quot;&gt;a 2016 paper&lt;/a&gt;, Duke University researchers, including geochemist &lt;a href=&quot;https://cee.duke.edu/faculty/avner-vengosh&quot;&gt;Avner Vengosh&lt;/a&gt;, revealed the spill, as well as several others in the Bakken, had laced the land with heavy metals and radioactivity.&lt;/p&gt;

&lt;p&gt;When asked in May 2019 if he was aware of this research, Glatt, director of the North Dakota Department of Environmental Quality, said he questioned Vengosh’s “initial premise” and believed the researchers were “looking for the worst case scenario.”&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;I haven’t seen his report; I just didn’t even know it was out there,” said Glatt. “I knew he was in the state. This is the first time I hear that he wrote a report.”&lt;/p&gt;

&lt;h3&gt;&lt;span class=&quot;quo&quot;&gt;‘&lt;/span&gt;Lack of Accountability’&lt;/h3&gt;

&lt;p&gt;As &lt;a href=&quot;https://www.desmogblog.com/2019/07/15/climate-litigation-global-trend-grantham-report&quot;&gt;lawsuits against the oil and gas industry&lt;/a&gt; for climate impacts continue and a growing web of grassroots groups spotlight the industry’s wide arc of pollution, the uncovering of the oil and gas industry’s vast closet of toxic skeletons seems inevitable.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;dquo&quot;&gt;“&lt;/span&gt;Ultimately I am fed up with the rushed drilling programs and the lack of accountability when it comes to environmental impacts,” says the whistle-blower. “I am also disgusted with how state officials and city council members view these threats and deem it acceptable to potentially harm human health.”&lt;/p&gt;

&lt;p&gt;Why, the whistle-blower added, “are we shielding the truth from public scrutiny?”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Updated 8/20/19: This story has been updated to correct Lisa DeVille's degree in environmental science, which is a bachelor's, not a master's.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;em&gt;Main image: The Exxon Valdez. Credit: National Oceanic and Atmospheric Administration, public domain&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 21 Aug 2019 14:59:10 +0000</pubDate>
<dc:creator>howard941</dc:creator>
<og:type>article</og:type>
<og:url>https://www.desmogblog.com/2019/08/19/north-dakota-regulators-oil-gas-spill-exxon-valdez</og:url>
<og:title>Did North Dakota Regulators Hide an Oil and Gas Industry Spill Larger Than Exxon Valdez?</og:title>
<og:description>In July 2015 workers at the Garden Creek I Gas Processing Plant, in Watford City, North Dakota, noticed a leak in a pipeline and reported a spill to the North Dakota Department of Health that remains officially listed as 10 gallons, the size of two bottled water delivery jugs.</og:description>
<og:image>https://www.desmogblog.com/sites/beta.desmogblog.com/files/blogimages/exxon-valdez_credit-noaa.jpeg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.desmogblog.com/2019/08/19/north-dakota-regulators-oil-gas-spill-exxon-valdez</dc:identifier>
</item>
<item>
<title>Mozilla takes action to protect users in Kazakhstan</title>
<link>https://blog.mozilla.org/blog/2019/08/21/mozilla-takes-action-to-protect-users-in-kazakhstan/</link>
<guid isPermaLink="true" >https://blog.mozilla.org/blog/2019/08/21/mozilla-takes-action-to-protect-users-in-kazakhstan/</guid>
<description>&lt;p&gt;Today, Mozilla and Google took action to protect the online security and privacy of individuals in Kazakhstan. Together the companies deployed technical solutions within Firefox and Chrome to block the Kazakhstan government’s ability to intercept internet traffic within the country.&lt;/p&gt;
&lt;p&gt;The response comes after credible &lt;a href=&quot;https://censoredplanet.org/kazakhstan&quot;&gt;reports&lt;/a&gt; that internet service providers in Kazakhstan have required people in the country to download and install a government-issued certificate on all devices and in every browser in order to access the internet. This certificate is not trusted by either of the companies, and once installed, allowed the government to decrypt and read anything a user types or posts, including intercepting their account information and passwords. This targeted people visiting popular sites Facebook, Twitter and Google, among others.&lt;/p&gt;
&lt;p&gt;“People around the world trust Firefox to protect them as they navigate the internet, especially when it comes to keeping them safe from attacks like this that undermine their security. We don’t take actions like this lightly, but protecting our users and the integrity of the web is the reason Firefox exists.” — &lt;strong&gt;Marshall Erwin, Senior Director of Trust and Security, Mozilla&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“We will never tolerate any attempt, by any organization—government or otherwise—to compromise Chrome users’ data. We have implemented protections from this specific issue, and will always take action to secure our users around the world.” — &lt;strong&gt;Parisa Tabriz, Senior Engineering Director, Chrome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is not the first attempt by the Kazakhstan government to intercept the internet traffic of everyone in the country. In 2015, the Kazakhstan government attempted to have a root certificate included in Mozilla’s trusted root store program. After it was discovered that they were intending to use the certificate to intercept user data, Mozilla denied the request. Shortly after, the government forced citizens to manually install its certificate but that attempt failed &lt;a href=&quot;https://www.itpro.co.uk/network-internet/34051/kazakh-government-will-intercept-the-nation-s-https-traffic&quot;&gt;after organizations took legal action.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Each company will deploy a technical solution unique to its browser. For additional information on those solutions please see the below links.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2019/08/21/protecting-our-users-in-kazakhstan/&quot;&gt;Mozilla&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://security.googleblog.com/&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Russian: &lt;a href=&quot;https://blog.mozilla.org/wp-content/uploads/2019/08/MOZILLA-%D0%98-GOOGLE-%D0%9F%D0%A0%D0%95%D0%94%D0%9F%D0%A0%D0%98%D0%9D%D0%98%D0%9C%D0%90%D0%AE%D0%A2-%D0%9C%D0%95%D0%A0%D0%AB-%D0%94%D0%9B%D0%AF-%D0%97%D0%90%D0%A9%D0%98%D0%A2%D0%AB-%D0%9F%D0%9E%D0%9B%D0%AC%D0%97%D0%9E%D0%92%D0%90%D0%A2%D0%95%D0%9B%D0%95%D0%98%CC%86-%D0%92-%D0%9A%D0%90%D0%97%D0%90%D0%A5%D0%A1%D0%A2%D0%90%D0%9D%D0%95.pdf&quot;&gt;Если вы хотите ознакомиться с этим текстом на русском языке, нажмите здесь.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kazakh: &lt;a href=&quot;https://blog.mozilla.org/wp-content/uploads/2019/08/MOZILLA-%D0%96%C6%8F%D0%9D%D0%95-GOOGLE-%D2%9A%D0%90%D0%97%D0%90%D2%9A%D0%A1%D0%A2%D0%90%D0%9D%D0%94%D0%90%D2%92%D0%AB-%D0%9F%D0%90%D0%98%CC%86%D0%94%D0%90%D0%9B%D0%90%D0%9D%D0%A3%D0%A8%D0%AB%D0%9B%D0%90%D0%A0%D0%AB%D0%9D-%D2%9A%D0%9E%D0%A0%D2%92%D0%90%D0%A3%D2%92%D0%90-%C6%8F%D0%A0%D0%95%D0%9A%D0%95%D0%A2-%D0%96%D0%90%D0%A1%D0%90%D0%98%CC%86%D0%94%D0%AB.pdf&quot;&gt;Бұл постыны қазақ тілінде мына жерден оқыңыз.&lt;/a&gt;&lt;/p&gt;




</description>
<pubDate>Wed, 21 Aug 2019 10:08:28 +0000</pubDate>
<dc:creator>soheilpro</dc:creator>
<og:url>https://blog.mozilla.org/blog/2019/08/21/mozilla-takes-action-to-protect-users-in-kazakhstan</og:url>
<og:title>Mozilla takes action to protect users in Kazakhstan – The Mozilla Blog</og:title>
<og:description>Today, Mozilla and Google took action to protect the online security and privacy of individuals in Kazakhstan. Together the companies deployed technical solutions within Firefox and Chrome to block the ...</og:description>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.mozilla.org/blog/2019/08/21/mozilla-takes-action-to-protect-users-in-kazakhstan/</dc:identifier>
</item>
<item>
<title>Amazon fires: Record number burning in Brazil rainforest</title>
<link>https://www.bbc.com/news/world-latin-america-49415973</link>
<guid isPermaLink="true" >https://www.bbc.com/news/world-latin-america-49415973</guid>
<description>&lt;figure class=&quot;media-with-caption&quot; readability=&quot;-24&quot;&gt;&lt;div class=&quot;player-with-placeholder&quot; readability=&quot;7&quot;&gt;
            &lt;img class=&quot;media-placeholder player-with-placeholder__image lead-video-placeholder&quot; src=&quot;https://ichef.bbci.co.uk/images/ic/720x405/p07l8csk.jpg&quot;/&gt;&lt;p&gt;Media playback is unsupported on your device&lt;/p&gt;
      
    &lt;/div&gt;    &lt;figcaption class=&quot;media-with-caption__caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Media caption&lt;/span&gt;Amazon fires: President Jair Bolsonaro suggests NGOs to blame&lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Brazil's Amazon rainforest has seen a record number of fires this year, new space agency data suggests.&lt;/p&gt;&lt;p&gt;The National Institute for Space Research (Inpe) said &lt;a href=&quot;http://queimadas.dgi.inpe.br/queimadas/portal/situacao-atual&quot; class=&quot;story-body__link-external&quot;&gt;its satellite data showed an 84% increase on the same period in 2018.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It comes weeks after President Jair Bolsonaro sacked the head of the agency amid rows over its deforestation data.&lt;/p&gt;&lt;p&gt;The largest rainforest in the world, the Amazon is a vital carbon store that slows down the pace of global warming.&lt;/p&gt;&lt;p&gt;It is also home to about three million species of plants and animals, and one million indigenous people.&lt;/p&gt;&lt;p&gt;Conservationists have blamed Mr Bolsonaro for the Amazon's plight, saying he has encouraged loggers and farmers to clear the land, and scientists say the rainforest has suffered losses at an accelerated rate since he took office in January.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;Meanwhile, US space agency Nasa said that overall fire activity in the Amazon basin was slightly below average this year.&lt;/p&gt;&lt;p&gt;The agency said that while activity had increased in Amazonas and Rondonia, it had decreased in the states of Mato Grosso and Pará.&lt;/p&gt;&lt;p&gt;It was earlier reported that a blackout on Monday in the city of São Paulo - more than 2,700km (1,700 miles) away - had been caused by smoke from the Amazon fires.&lt;/p&gt;&lt;p&gt;But some meteorologists say the smoke came from major fires burning in Paraguay, which is much closer to the city and not in the Amazon region.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Why are there fires in the Amazon?&lt;/h2&gt;&lt;p&gt;Wildfires often occur in the dry season in Brazil but they are also deliberately started in efforts to illegally deforest land for cattle ranching. &lt;/p&gt;&lt;p&gt;Inpe said it had detected more than 74,000 fires between January and August - the highest number since records began in 2013. It said it had observed more than 9,500 forest fires since Thursday, mostly in the Amazon region. &lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;In comparison, there are slightly more than 40,000 in the same period of 2018, it said. However, the worst recent year was 2016, with more than 68,000 fires in that period.&lt;/p&gt;&lt;p&gt;The satellite images showed Brazil's most northern state, Roraima, covered in dark smoke, while neighbouring Amazonas declared an emergency over the fires.&lt;/p&gt;&lt;p&gt;Mr Bolsonaro brushed off the latest data, saying it was the &quot;season of the queimada&quot;, when farmers use fire to clear land. &quot;I used to be called Captain Chainsaw. Now I am Nero, setting the Amazon aflame,&quot; he was quoted by Reuters news agency as saying.&lt;/p&gt;&lt;p&gt;Later he appeared to suggest that non-governmental organisations had set fires, as revenge for his government slashing their funding. He presented no evidence and gave no names to support this theory, saying there were &quot;no written records about the suspicions&quot;.&lt;/p&gt;&lt;p&gt;&quot;So, there could be..., I'm not affirming it, criminal action by these 'NGOers' to call attention against my person, against the government of Brazil. This is the war that we are facing,&quot; he said in a Facebook Live on Wednesday.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Reuters&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Inpe said it had detected more than 72,000 fires so far this year
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Inpe  noted that the number of fires was not in line with those normally reported during the dry season. &lt;/p&gt;&lt;p&gt;&quot;There is nothing abnormal about the climate this year or the rainfall in the Amazon region, which is just a little below average,&quot; Inpe researcher Alberto Setzer told Reuters. &lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Reuters&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Mr Bolsonaro has been criticised over his environmental policies
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&quot;The dry season creates the favourable conditions for the use and spread of fire, but starting a fire is the work of humans, either deliberately or by accident.&quot;&lt;/p&gt;&lt;p&gt;Ricardo Mello, head of the World Wide Fund for Nature (WWF) Amazon Programme, said the fires were &quot;a consequence of the increase in deforestation seen in recent figures&quot;.&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;Why is Bolsonaro being criticised?&lt;/h2&gt;&lt;p&gt;The reports of a rise in forest fires come amid criticism over Mr Bolsonaro's environmental policies. Scientists say the Amazon has suffered losses at an accelerated rate since the president took office in January, with policies favouring development over conservation.&lt;/p&gt;&lt;figure class=&quot;media-with-caption&quot; readability=&quot;-24&quot;&gt;&lt;div class=&quot;player-with-placeholder&quot; readability=&quot;7&quot;&gt;
            &lt;img class=&quot;media-placeholder player-with-placeholder__image narrative-video-placeholder&quot; src=&quot;https://ichef.bbci.co.uk/images/ic/720x405/p07gdplz.jpg&quot;/&gt;&lt;p&gt;Media playback is unsupported on your device&lt;/p&gt;
      
    &lt;/div&gt;    &lt;figcaption class=&quot;media-with-caption__caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Media caption&lt;/span&gt;How is the rainforest helping to limit global warming?&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Over the past decade, previous governments had managed to reduce deforestation with action by federal agencies and a system of fines. But Mr Bolsonaro and his ministers have criticised the penalties and overseen a fall in confiscations of timber and convictions for environmental crimes.&lt;/p&gt;&lt;p&gt;Last month, &lt;a href=&quot;https://www.bbc.co.uk/news/world-latin-america-49052360&quot; class=&quot;story-body__link&quot;&gt;the far-right president accused Inpe's director of lying about the scale of deforestation&lt;/a&gt; in the Amazon and trying to undermine the government. It came after Inpe published data showing an 88% increase in deforestation there in June compared to the same month a year ago.&lt;/p&gt;&lt;p&gt;The director of the agency &lt;a href=&quot;https://www.bbc.co.uk/news/world-latin-america-49212115&quot; class=&quot;story-body__link&quot;&gt;later announced that he was being sacked amid the row.&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Inpe has previously insisted that its data is 95% accurate. The agency's reliability has also been defended by several scientific institutions, including the Brazilian Academy of Sciences. &lt;/p&gt;&lt;hr class=&quot;story-body__line&quot;/&gt;&lt;p&gt;&lt;strong&gt;Do you have video or pictures of fires in the affected regions?  If it is safe to do so email &lt;/strong&gt;&lt;a href=&quot;mailto:haveyoursay@bbc.co.uk?subject=Brazilfires49415973&quot; class=&quot;story-body__link-email&quot;&gt;&lt;span class=&quot;icon email&quot;/&gt;&lt;span class=&quot;story-body__link-email-text&quot;&gt;haveyoursay@bbc.co.uk&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Please include a contact number if you are willing to speak to a BBC journalist. You can also contact us in the following ways: &lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;WhatsApp: &lt;strong&gt;+44 7756 165803&lt;/strong&gt;
&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;Tweet: &lt;a href=&quot;http://twitter.com/BBC_HaveYourSay&quot; class=&quot;story-body__link-external&quot;&gt;@BBC_HaveYourSay&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;Send pictures/video to &lt;a href=&quot;mailto:yourpics@bbc.co.uk&quot; class=&quot;story-body__link-email&quot;&gt;&lt;span class=&quot;icon email&quot;/&gt;&lt;span class=&quot;story-body__link-email-text&quot;&gt;yourpics@bbc.co.uk&lt;/span&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.co.uk/send/u16904890?ptrt=https://www.bbc.co.uk/news/world-10776546&quot; class=&quot;story-body__link&quot;&gt;Upload your pictures / video here&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;Text an SMS or MMS to &lt;strong&gt;61124 &lt;/strong&gt;or &lt;strong&gt;+44 7624 800 100&lt;/strong&gt;
&lt;/li&gt;
&lt;li class=&quot;story-body__list-item&quot;&gt;Please read our &lt;a href=&quot;http://www.bbc.co.uk/usingthebbc/terms/&quot; class=&quot;story-body__link&quot;&gt;terms of use&lt;/a&gt; and &lt;a href=&quot;http://www.bbc.co.uk/usingthebbc/privacy-policy/&quot; class=&quot;story-body__link&quot;&gt;privacy policy&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 21 Aug 2019 06:41:24 +0000</pubDate>
<dc:creator>andreiursan</dc:creator>
<og:title>'Record number of fires' in Brazilian rainforest</og:title>
<og:type>article</og:type>
<og:description>Fires in the Amazon have risen 84% amid growing deforestation, Brazil's space research agency says.</og:description>
<og:url>https://www.bbc.com/news/world-latin-america-49415973</og:url>
<og:image>https://ichef.bbci.co.uk/images/ic/1024x576/p07l8csk.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/world-latin-america-49415973</dc:identifier>
</item>
<item>
<title>Why does all life use the same 20 amino acids?</title>
<link>https://www.chemistryworld.com/news/why-does-all-life-use-the-same-20-amino-acids/3010824.article</link>
<guid isPermaLink="true" >https://www.chemistryworld.com/news/why-does-all-life-use-the-same-20-amino-acids/3010824.article</guid>
<description>&lt;p&gt;The way in which fragments of proteins formed on the prebiotic Earth has shed light on why all living organisms use the same set of 20 amino acids. Researchers in the US found that proteinogenic amino acids – those used to make natural proteins – more readily link into small peptide chains known as oligomers than those that are similar in structure but that life doesn’t make use of. These chemical properties may have made them more likely to be incorporated into proteins during the evolution of the earliest life forms.&lt;/p&gt;
&lt;p&gt;‘Before life on prebiotic Earth, there would have been a larger set of available amino acids than the 20 that were eventually selected by biology,’ says &lt;a href=&quot;https://www.scripps.edu/faculty/leman/&quot;&gt;Luke Leman&lt;/a&gt; from the Scripps Research Institute in La Jolla, who led the work together with &lt;a href=&quot;https://ww2.chemistry.gatech.edu/~lw26/&quot;&gt;Loren Williams&lt;/a&gt; at the Georgia Institute of Technology. ‘We know this because of experiments simulating the early Earth, and because non-proteinogenic amino acids have been found in meteorites, sometimes in much higher abundance than the amino acids used in proteins.’&lt;/p&gt;
&lt;p&gt;Origin-of-life scientists have long been drawn to intriguing questions surrounding the evolution of proteins. ‘Why does biology use 20 amino acids – why not 12 or 40? And why did nature choose these particular 20 amino acids?’ says Leman. ‘We discovered that there are purely chemical factors, based on higher polymerisation reactivity and fewer side reactions, that might have contributed to this selection process.’&lt;/p&gt;
&lt;p&gt;He explains the group is particularly interested in the three proteinogenic amino acids that have positively-charged side chains – lysine, arginine and histidine – because they are involved in a broader research programme studying co-evolution between early proteins and early nucleic acids. ‘Based on prior work, we knew that peptides and depsipeptides could be generated by simply drying down mixtures of amino acids and hydroxy acids, both of which are produced in prebiotic simulation reactions and found on meteorites,’ says Leman. ‘We decided to try a set of several positively charged amino acids in [these] prebiotic polymerisation reactions.’&lt;/p&gt;
&lt;p&gt;The researchers chose the three positively charged proteinogenic amino acids, as well as three structurally similar positively charged amino acids that are believed to have been abundant on prebiotic Earth but are not found in proteins. They heated each amino acid together with a hydroxy acid – glycolic or lactic acid – at 85°C for a week, before analysing the residue to see what had been produced.&lt;/p&gt;
&lt;p&gt;‘We thought that, in general, all of these amino acids would react similarly because they are structurally similar,’ says Leman. But while almost all the experiments did produce oligomers, the three proteinogenic amino acids reacted more efficiently and produced fewer side products compared with their non-proteinogenic counterparts. ‘That came as a real surprise. We thought “Is this for real?”,’ Leman says.&lt;/p&gt;
&lt;p&gt;The team set up additional reactions to verify the result, each containing two types of amino acid – one proteinogenic and one that wasn’t – that could compete in the reaction. They found that, consistent with their initial results, the proteinogenic amino acids out-competed the non-proteinogenic amino acids.&lt;/p&gt;
&lt;p&gt;‘This … underscores that there are still hidden chemical and physical factors that played important roles in the transition from a prebiotic soup to life,’ Leman says, adding that now the group are investigating interactions between RNA and the positively-charged oligomers that were produced in these reactions.&lt;/p&gt;
&lt;p&gt;‘This is an interesting piece of work showing some of the nuances of polymerisation chemistry, and how they may have affected protein evolution,’ comments &lt;a href=&quot;http://www.elsi.jp/en/research/member/researcher/associate-professor/jim-cleaves.html&quot;&gt;Jim Cleaves&lt;/a&gt;, who researches origin-of-life geochemistry at the Tokyo Institute of Technology in Japan. He adds that there is more to the story of protein evolution, however, as previous work has suggested the amino acids lysine and histidine were later additions to the set used by primitive cells to make proteins. ‘That said, there is an awful lot we don’t know about early biological evolution, and this very nice work helps fill in some gaps in this highly speculative research area,’ he says.&lt;/p&gt;
</description>
<pubDate>Wed, 21 Aug 2019 05:25:00 +0000</pubDate>
<dc:creator>respinal</dc:creator>
<og:title>Why does all life use the same 20 amino acids?</og:title>
<og:type>Article</og:type>
<og:url>https://www.chemistryworld.com/news/why-does-all-life-use-the-same-20-amino-acids/3010824.article</og:url>
<og:description>Chemical properties offer an answer to why nature limits itself to so few protein building blocks</og:description>
<og:image>https://d1w9csuen3k837.cloudfront.net/Pictures/2000x2000fit/9/6/2/144962_GettyImages-615307388.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.chemistryworld.com/news/why-does-all-life-use-the-same-20-amino-acids/3010824.article</dc:identifier>
</item>
<item>
<title>A dream of an ultimate OS (1995)</title>
<link>http://okmij.org/ftp/papers/DreamOSPaper.html</link>
<guid isPermaLink="true" >http://okmij.org/ftp/papers/DreamOSPaper.html</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;A dream of an ultimate OS&lt;/title&gt;&lt;meta name=&quot;description&quot; content=&quot;A vision of an OS that recognizes that any user activity and most of the system activities are nothing but queries, which ought to be treated uniformly and implemented efficiently once and for all; database as a file system; A paper submitted to MacHack'95&quot; /&gt;&lt;meta name=&quot;AuthorAddress&quot; content=&quot;oleg-at-okmij.org&quot; /&gt;&lt;meta name=&quot;Keywords&quot; content=&quot;Operating System, Unification, Database, File System, GUI&quot; /&gt;&lt;meta name=&quot;Date-Revision-yyyymmdd&quot; content=&quot;19971128&quot; /&gt;&lt;meta name=&quot;Date-Creation-yyyymmdd&quot; content=&quot;19950521&quot; /&gt;&lt;/head&gt;&lt;body bgcolor=&quot;#FFFFFF&quot; id=&quot;readabilityBody&quot; readability=&quot;411.5961349951&quot;&gt;

&lt;h3 align=&quot;center&quot;&gt;Oleg Kiselyov&lt;/h3&gt;
&lt;h3 align=&quot;center&quot;&gt;oleg-at-okmij.org, &lt;a href=&quot;http://okmij.org/ftp/&quot;&gt;http://okmij.org/ftp/&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;This is a dream, and as such, it is made of shreds of reality shuffled and rearranged in sometimes bizarre combinations. It has been brewing on for over ten years, feeding on dissatisfaction with many of the major modern Operating Systems.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Indeed, it is glaringly obvious that the only thing a user does at a terminal is requesting, reading and modifying textual information, arranged mainly into tables or scrollable lists. Nevertheless, the user often has to apply different and completely disparate commands to achieve exactly the same modification, for example, to delete an item (line) from a list as in: removing a line in a text document, removing a file, killing a process (that is, removing it from the list of active processes) or canceling a print job. Furthermore, despite the fact that an OS is swarmed with tables -- from a hierarchical database of files to yellow page's maps, to a hash dictionary of an object file archive (library), to relatively flat databases of IP routes, current processes, users, and code revisions -- common database functions like inserting a record into a &quot;table&quot; with hashing a key, retrieving a record/field using a simple/concatenated key and linking tables, are conspicuously missing among the core kernel services.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;This paper is an attempt to imagine what an OS would look like and how it would work if looking for a word 'foo' in &lt;em&gt;something&lt;/em&gt; and deleting/closing/stopping this something, -- be it a paragraph of text, a network connection, a subscribed newsgroup, a process -- would all require roughly the same sequence of mouse clicks or keystrokes, and would be understood and interpreted in the same spirit by the operating system.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Operating Systems are commonly viewed from two major standpoints: managing computing resources, and hiding hardware idiosyncrasies while putting a &lt;em&gt;friendly&lt;/em&gt; face for a user. The latter appears to be the primary OS responsibility: after all, a CPU does not need any OS to run, nor does it care which code, system or user, it currently grapples with. Nevertheless, with a notable exception of MacOS, MagicCap and Newton OS, operating systems have been thrusting upon a user a flood of disparate interfaces, commands, and actions, all aimed at essentially the same thing: filling in and editing a list or table. Moreover, each and every major OS component -- a file system, network services, user management, terminal management, to name a few -- implements and manages its own private incarnation of a simple database.&lt;/p&gt;
&lt;p&gt;It seems obvious then that database services and text/list editing are a core activity that ought to be supported on the very fundamental level in an OS. The paper flashes a few images reflecting particular examples of how this unification could be done and how one can work with it. Here is the preview:&lt;/p&gt;
&lt;p&gt;In MacOS, TextEdit has been elevated to the level of a standard system (toolbox) service. It was a strong statement that the OS was not only about managing files and processes. Furthermore, deleting a piece of text, a file, a directory, a file server connection -- all can be accomplished by the same action: highlighting and dragging into trash. There is still room for improvement however: for example, a list of processes conceptually is not much different from a list of files. One can imagine the Finder manage &lt;span&gt;(arrange, get info, duplicate, trash)&lt;/span&gt; files and folders that are not necessarily ordinary files and folders, but processes, open TCP connections, newsgroups, active and pending print jobs, to-do tasks, etc.&lt;/p&gt;
&lt;p&gt;Deep down, an operating system is nothing but a manager of many databases. Indeed, a file system, the process table, routing tables, list of known AppleShare servers, revision control system (projector) data, Think C projects - they are all databases. Unfortunately, despite a sizable share of common functionality and interface, every one of them is implemented and managed separately.Why not to trade a multitude of &quot;custom&quot; database managers for a single &lt;em&gt;well-designed&lt;/em&gt; distributed database manager?&lt;/p&gt;
&lt;p&gt;Conventional databases are usually implemented on top of a file system. The file system itself however is a database. Mac's HFS and Novell's file systems even use &lt;code&gt;btrees&lt;/code&gt; and other advanced indexing schemes of &quot;real&quot; databases. Querying a database for Jan 1994 sales, and clicking on folders &quot;&lt;code&gt;Sales&lt;/code&gt;&quot;, &quot;&lt;code&gt;1994&lt;/code&gt;&quot;, &quot;&lt;code&gt;January&lt;/code&gt;&quot; are very related activities. Why can't a &quot;real&quot; database then take over a file system entirely? Modern DBMS have all facilities for storing images, sound files, movies and other big and small objects, and provide flexible interfaces for linking and querying records. I wonder, what else do we need files for?&lt;/p&gt;
&lt;p&gt;Unification of the user interface and the underlying database may also bring together parts that presently can't even be conceived as linkable. For example, documents could be made of not only chunks of text, but folders and applications themselves. Just as one stores a link to a picture in a word processing document, he can embed links to menus, applications, or remote servers, or precompiled headers, or &lt;code&gt;mailto:&lt;/code&gt; or other &lt;code&gt;form&lt;/code&gt; or &lt;code&gt;anchors&lt;/code&gt; as well. This can make the desktop look just like a &lt;em&gt;homepage&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;Everything is just editing&lt;/h2&gt;
&lt;p&gt;It is indeed. The document I am editing is a list of lines; to delete one line I press PF4 (assuming emacs as editor). Listing a contents of a directory produces some sort of a table or a list as well. Removing a line from this table requires a different command, &lt;code&gt;rm&lt;/code&gt;. To see which processes are currently running, we use &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt; , or &lt;code&gt;ProcessWatcher&lt;/code&gt;. Again we end up with a table; to &quot;delete a line&quot; from it however we have to use yet another different command, &lt;code&gt;kill process_id&lt;/code&gt; (which does not even take the name of the process as an argument). To delete a line from a table of queued print jobs, yet another command, &lt;code&gt;lprm print_job_id&lt;/code&gt; needs to be used.&lt;/p&gt;
&lt;p&gt;This is not a coincidence that deleting a line of text, removing a file, killing a process or a route or an ARP entry -- are all instances of the same activity, removing a row from a table. This uniformity runs deep, both on the level of implementation &lt;em&gt;and&lt;/em&gt; on the level of presentation. Indeed, there are only few basic methods to manage a collection of objects: via some kind of list or a tree. Also, there are only so many ways to present a collection to a user and let him manipulate it. The sole mode people work at a terminal is browsing and editing, that is, moving the mouse, typing and pressing a PgDn key. Disparate interfaces are not a consequence then of some fundamental differences in user or system activities, they are simply the result of evolution: different subsystem and services were written by different people and modified by even bigger crowd.&lt;/p&gt;
&lt;p&gt;Macintosh definitely stands out in this respect. Many similar functions within MacOS are accomplished by exactly the same action (e.g., removing is by dragging into trash, opening is by double-clicking). This is especially true with a Drag&amp;amp;Drop Manager installed. UNIX is moving towards some UI unification, too, taking CDE, or a &lt;code&gt;proc&lt;/code&gt; filesystem as an example. The latter is long overdue: given a UNIX tenet &quot;everything is a file&quot; one could only wonder why a process should be any different (and why it took so long to implement and popularize this idea). However, the unification is not complete. While it is possible to open &lt;code&gt;/proc/1024&lt;/code&gt; to get hold of a process with id 1024 (to find out who owns this process and when it was created, if for nothing else), one cannot &lt;code&gt;rm /proc/1024&lt;/code&gt; to kill the process, and one cannot &lt;code&gt;ls /proc/1024/open_files&lt;/code&gt; to see the list of all open files for this process. Although why not?&lt;/p&gt;
&lt;p&gt;Since the list of processes conceptually is not much different from the list of files, MacOS could, conceivably, have a folder &quot;&lt;code&gt;Processes&lt;/code&gt;&quot; populated with &quot;&lt;code&gt;files&lt;/code&gt;&quot; standing for processes. A user could apply then the standard Finder operations, &lt;code&gt;View-by&lt;/code&gt;, &lt;code&gt;GetInfo&lt;/code&gt;, &lt;code&gt;Trash&lt;/code&gt;, &lt;code&gt;Duplicate&lt;/code&gt; to manipulate the processes. A Usenet News hierarchy is very similar to that of a filesystem (as a matter of fact, this is exactly how it is stored and managed on an NNTP server). A newsreader Nuntius presents the news hierarchy as a directory tree of &quot;folders&quot; and &quot;files&quot; in a &lt;em&gt;view-by-name&lt;/em&gt; mode. Alas, Nuntius had to emulate much of the Finder functionality to manage these newsgroups-folders. Many applications -- for example, printer and network managers, an FTP utility or a newsreader -- will be easier to develop and use if one can tell the Finder: &quot;here, this is a list of &lt;cite&gt;files&lt;/cite&gt;, manage it as you usually do with a list of files, just tell me when you are about to trash something.&quot;&lt;/p&gt;
&lt;p&gt;Rearranging file icons within a folder view and rearranging paragraphs within a document are essentially the same activity. If they are unified, the overhead and code duplication can be significantly reduced. As a bonus, this would also enable ordinary documents to contain folders, icons and applications: they automatically become &lt;em&gt;hyper-documents&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;The luster and dull of plain text&lt;/h2&gt;
&lt;p&gt;The configuration of a UNIX system is specified and controlled by a huge tangle of &lt;cite&gt;plain text files&lt;/cite&gt;: &lt;code&gt;/etc/hosts&lt;/code&gt;, &lt;code&gt;sendmail.cf&lt;/code&gt;, &lt;code&gt;syslog.conf&lt;/code&gt;, &lt;code&gt;inetd.conf&lt;/code&gt;, &lt;code&gt;/etc/uucp/Systems&lt;/code&gt; to name just very few. &lt;code&gt;.INI&lt;/code&gt; files on some other systems are also plain ASCII. Even MacOS caved in a little with a &lt;code&gt;System Folder:Hosts&lt;/code&gt;, although it is a very isolated example on a Mac. Note that just because symbols displayed on screen must be in ASCII, the information stored on disk does not have to be in the same form. Still, ASCII configuration files abound, for a very simple reason: they can be modified with any text editor from &lt;code&gt;ex&lt;/code&gt; and &lt;code&gt;edlin&lt;/code&gt; upwards, and can be viewed and created even without an editor, with a &lt;code&gt;cat&lt;/code&gt; command. Not that accessing a block of a plain &lt;code&gt;/etc/hosts&lt;/code&gt; file is much easier for an OS than reading a &lt;code&gt;/machines&lt;/code&gt; tree of Next's structured &lt;code&gt;netinfo&lt;/code&gt; database. The ASCII format wins simply because tools for handling text files are present even on a naked system. As long as a file system is treated differently than a database, netinfo, NIS, CVS, etc. packages have to provide tools for converting their internal database table or a set of records into a plain text file, and back.&lt;/p&gt;
&lt;p&gt;But it does not have to be this way. If a database engine is implemented as a core system service, along with simple tools to browse and modify database records, the gordian knot of system configuration files disappears. MacOS comes very close to this ideal, with ResEdit as this universal database editor. Much (if not all) of the system configuration can be set up by opening a resource and toggling a few buttons, retyping strings or adjusting colors. There is no need to learn the syntax of a specific configuration file, and no wasting of the CPU time on parsing that text file and reporting errors if any. Unfortunately, ResEdit and a set of templates for system resources do not come bundled with MacOS. But SimpleText always does. That is why &lt;code&gt;System Folder:Hosts&lt;/code&gt; is a plain text file...&lt;/p&gt;
&lt;p&gt;The very idea of an application as a mere collection of code and configuration resources with a common name is beautiful. It is even possible in some applications a (LaserWriter Utility, for example) to add or delete menu items and corresponding functionality just by adding/removing appropriate resources, without any need to recompile or relink the code. It was with pain that I read a recommendation to refrain from creating code resources with PowerPC native code (which should be moved to the data fork instead). Now an application has a database managed by the resource manager, and a database managed by a fragment manager.&lt;/p&gt;

&lt;h2&gt;Everything is Database&lt;/h2&gt;
&lt;p&gt;This is not an exaggeration: an operating system is permeated with sets, lists, tables, and other collections of something. This something starts with fundamental data structures like a process control block or a page table and goes on to include i/o requests, open window descriptors, resources. Other examples of collections are SCCS, RCS, &lt;code&gt;termcap&lt;/code&gt;/&lt;code&gt;printcap&lt;/code&gt;, networking databases (a name domain service, name resolver, &lt;code&gt;/etc/hosts&lt;/code&gt;, &lt;code&gt;/etc/networks&lt;/code&gt;, &lt;code&gt;/etc/services&lt;/code&gt;, routing tables), &lt;code&gt;whatis&lt;/code&gt; database for man pages. One can hardly spend a millisecond working with a computing system without making some kind of a database query. Each and every one of these databases support basic select/insert/delete functions; advanced options like concatenated keys and linking among several tables are often present as well. Still, almost each system facility has its own implementation of these common functions. One can argue that managing process control blocks and virtual pages &lt;cite&gt;does&lt;/cite&gt; require tailored and painstakingly tuned implementations. However, even a one-second delay in removing a SCCS revision or a host entry does not matter at all. Furthermore, many of OS databases are implemented in the most straightforward and trivial way, as &quot;flat files&quot; permitting only a linear search. Replacing a multitude of quick fixes with a well-designed universal database promises a significant boost in performance (besides, it is just cool).&lt;/p&gt;
&lt;p&gt;A universal database frees the OS or an application from many chores: wildcard resource lookups, time stamping, permission checking, etc. Universality also offers another clear advantage: an ability to link all kinds of records and tables, which is so much a pain now. For example, a link between two records representing files is no different for a universal database manager than a link between a record in a &lt;code&gt;Users&lt;/code&gt; table, a record in a &lt;code&gt;Processes&lt;/code&gt; table, a few records in the &lt;code&gt;Files&lt;/code&gt; table and a &lt;code&gt;Print jobs&lt;/code&gt; table. There is no longer need for multiple IDs and keeping track of them. Many-to-many links are possible as well. Performance also improves: list of all processes belonging to user &lt;code&gt;joe&lt;/code&gt; can be found faster by a database query rather than with &lt;code&gt;ps aux | grep joe&lt;/code&gt;. Surely any database can do a better &lt;em&gt;selection&lt;/em&gt; than in a dumb search like &lt;code&gt;netstat -a | grep finger&lt;/code&gt; (which is used to finger fingerer): Many similar scripts are just database queries, and not very efficient ones. &lt;code&gt;Makefile&lt;/code&gt;s would be easier to generate and maintain. The universal database would also allow linking of an &lt;code&gt;#include&lt;/code&gt; file directly into an includee; this will obsolete the arcane art of specifying compiler's -I and -L flags and trying to predict which of several possible &lt;code&gt;time.h&lt;/code&gt; files the compiler would actually pick.&lt;/p&gt;

&lt;h2&gt;File system is a database, which can use improvement&lt;/h2&gt;
&lt;p&gt;A hierarchical structure common to file systems is not the only possible choice of logical organization of entities. Besides, the widespread use of symbolic links and aliases makes a file system look more like a network database, although kludged. This begs a suggestion of implementing a file system on top of a good network database with extensive indexing capabilities, e.g., Adabas. This database is known for its efficiency; it has its own storage management and transparent multi-level indexing; its journaling capabilities are much better than those of UFS (or HFS for that matter). FileMaker is another fine candidate: there are quite a few applications for cataloging the contents of CDs and floppies in a FileMaker database. If FileMaker is so good at describing the structure and the content of an offline file system, surely it can be used for an on-line file system as well.&lt;/p&gt;
&lt;p&gt;The hierarchical organization of file systems manifests itself in nesting of directories (folders). On the other hand, directories are merely named views of a certain subset of files, selected according to some criteria. Thus, a directory can be thought of as a &quot;database view,&quot; a named database query. It follows immediately that a file may appear in as many &quot;directories&quot; (views) as one wishes to. For example, one &quot;folder&quot; may show all files tagged as &quot;sales reports&quot;, while another directory contains files modified within five days. Searching a file system and creating and populating a folder becomes therefore the same activity. Since saved views are database objects themselves, one can reference views within views if one so wishes. There is no required hierarchy however: one may create two views that refer to each other, or any other network of views that best suits the problem.&lt;/p&gt;
&lt;p&gt;Every database record (item) should have some mandatory attributes: time stamps, owner, permissions, kind (document). Beyond that, a user (or an application/creator) may add anything they want to. For some records, the body is just a lump of binary data without further detalization. On the other hand, records of kind &lt;code&gt;image&lt;/code&gt; (or in table &lt;code&gt;images&lt;/code&gt;) may have additional attributes like the image width, height and depth, a signature of a compression method, etc. Thus, listing all images 512-pixel wide and with a depth of at least 8 with a private colormap should be as easy as viewing files in a folder by date.&lt;/p&gt;
&lt;p&gt;It goes without saying that even a naked OS must include some rudimentary database browser, to view and tinker with these &lt;cite&gt;files&lt;/cite&gt;. It may look like a basic no-frills record browser in Paradox, which displays all fields of a record in columns or as &lt;cite&gt;name=value&lt;/cite&gt; pairs. Of course, an OS should have an ability to generate better looking views and reports, as Paradox does. Still, the basic browser is necessary and useful (like &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;SimpleText&lt;/code&gt;) in a desperate situation.&lt;/p&gt;
&lt;p&gt;A general purpose database &lt;em&gt;as a&lt;/em&gt; file system does not present users with a completely alien environment. Almost all old computer skills will still apply. For example, a file may still be specified by its &lt;em&gt;path&lt;/em&gt;. Indeed, a path is merely a list (or sequence) of keys telling how to locate a file, and as such, the meaning of a file path extends beyond hierarchical file systems. The Web gives an especially good example: consider a URL &lt;code&gt;http://somehost/foo/bar.html&lt;/code&gt;. The most obvious interpretation of the corresponding resource is as a file named &lt;code&gt;bar.html&lt;/code&gt; located in a directory &lt;code&gt;foo&lt;/code&gt; under the &lt;code&gt;DocumentRoot&lt;/code&gt; on the host &lt;code&gt;somehost&lt;/code&gt;. If &lt;code&gt;foo&lt;/code&gt; is a CGI script however, &lt;code&gt;bar.html&lt;/code&gt; is merely a parameter passed to that script. It can be interpreted as a file name, or anything else the script wishes. In short, not everything between slashes in a URL is a name of a directory. It is just &lt;em&gt;a key&lt;/em&gt; specifying an object in question. The same argument holds for the new file system: one still can locate a file by entering some of its attributes separated with slashes. The database approach allows however wildcards &lt;em&gt;really&lt;/em&gt; everywhere, and such &quot;directory names&quot; as file modification date, size etc. Thus running &lt;code&gt;find&lt;/code&gt; and listing a &quot;directory&quot; would be exactly the same activity.&lt;/p&gt;
&lt;p&gt;Many industrial-strength DBMS (e.g., Oracle, Informix) support an efficient and transparent access to remote databases as well as data replication. A distributed DBMS thus subsumes NFS, taking care of authorization, data transmission, local caching, data consistency, etc.&lt;/p&gt;

&lt;h2&gt;Mock-up 'hello world' session&lt;/h2&gt;
&lt;p&gt;Placing a database engine into OS' core certainly changes the entire architecture of an operating system. It may be surprising to realize then how familiar this new OS would look to a user. The ubiquitous Desktop may still be there: only now it means a particular view of the database, with references to other database objects like a table of processes, a table of user-configurable system data (records with attributes &lt;code&gt;System&lt;/code&gt; and &lt;code&gt;UserConfigurable&lt;/code&gt;), a table of recently used objects, etc. Suppose I located a C compiler (well, I wish there were a better language by then, say, Dylan), either on the Desktop, or in one of the subviews, or by doing a plain search for anything with attributes &lt;code&gt;application&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt;. A &quot;C Project Manager&quot;, once launched, prompts to open or create a project, as usual. I create a new project and a new source code &lt;em&gt;file&lt;/em&gt;, which is automatically tagged with project's name, and with &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, etc. attributes. I don't have to worry however where to put the new &lt;em&gt;files&lt;/em&gt;: the project itself is my &quot;folder&quot;. It is certainly possible to annotate the source code with more attributes; some of them can be inferred from the context or from other related database objects. This process of entering new records should look similar to that for personal information managers, which let the user create a new record based on a previous or some other record as a template. Smart PIMs also insert a few fields on their own (a timestamp, for example), and can complete names and numbers as the user types them. All &lt;em&gt;file&lt;/em&gt;'s attributes, system or custom, may be used in search.&lt;/p&gt;
&lt;p&gt;To write a proper C code for &quot;hello world&quot;, I need to include a declaration for the standard i/o package. Working in the source code editor, I may select a tool &quot;enter a db object&quot; and tell it to look for and insert an object with attributes &quot;data, C declaration, owned by system, containing a string 'standard io' in comments&quot;. Or I can simply enter &quot;C declaration for &lt;code&gt;printf()&lt;/code&gt;,&quot; relying on the editor to fill in the rest of the query parameters. Furthermore, I may finish typing the body of the &lt;code&gt;main()&lt;/code&gt; function, then click on &lt;code&gt;printf()&lt;/code&gt; and tell the editor to find and include a header containing a declaration of that function. Whatever the editor inserts, I can click on it to see what this object actually is and has.&lt;/p&gt;
&lt;p&gt;This kind of functionality may become available even tomorrow. Also, doing away with the files as we know them does not mean breaking every habit, every skill and every application. This merely means working with a computer in a more &lt;em&gt;natural&lt;/em&gt; way.&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 21 Aug 2019 04:36:07 +0000</pubDate>
<dc:creator>animalcule</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://okmij.org/ftp/papers/DreamOSPaper.html</dc:identifier>
</item>
</channel>
</rss>