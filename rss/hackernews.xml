<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Banned from Google Ads for Using Apple Card</title>
<link>https://smartprivacy.io/learn/i-got-banned-from-google-ads-for-using-apple-card</link>
<guid isPermaLink="true" >https://smartprivacy.io/learn/i-got-banned-from-google-ads-for-using-apple-card</guid>
<description>&lt;p&gt;Companies like Google have waged war on virtual cards and left Apple Card users without service.&lt;/p&gt;&lt;div readability=&quot;105.5&quot;&gt;
&lt;p&gt;Last week I received my Apple Card and decided to use it on my Google Ads account for another project. Getting a little bit of daily cash back for my meager ad spend was attractive.&lt;/p&gt;
&lt;p&gt;Within a couple of hours of updating my payment method my account had become suspended for suspicious payment activity.&lt;/p&gt;
&lt;p&gt;My ad campaigns came to a grinding halt, and my website traffic (and sales) dried up. I'm an Ads Certified individual, and I've got almost a decade of experience running Google Ads (previously Google Adwords) campaigns. I'm not some huckster with a spam website.&lt;/p&gt;
&lt;p&gt;So, when I received the suspension email, I thought it had to be some kind of issue with the system. I tried calling Google Ads support, but once I typed in my account number I wasn't able to get through to anyone to help support.&lt;/p&gt;
&lt;p&gt;I had the account set up through My Client Center, a portal for agencies that manage multiple clients. I was able to use this master account number to get through to a customer service representative based in the Philippines who informed me that it must be an issue with the billing verification and that it would be 'absolutely unsuspended by end of day'. That unsuspension never came.&lt;/p&gt;
&lt;p&gt;I engaged live chat, who told me to file an appeal, which I promptly did. After a few hours, I received this notice back:&lt;/p&gt;
&lt;pre&gt;
Dear advertiser,
Thanks for your continued patience during this process. We've confirmed that your account is in violation of our Google Ads policies. Since this decision is final, the account will not be reinstated. Please avoid creating additional Google Ads accounts, as they will be subjected to the same suspension.

Our support team will not be able to give you any more specifics on the suspension.

We appreciate your understanding and cooperation.

Sincerely,

Elizabeth
&lt;/pre&gt;
&lt;p&gt;Speaking with live support again, they were unable to give me any details as to the status of my account. I offered to send billing documentation, account statements, and even set my primary payment method back to the previous card.&lt;/p&gt;
&lt;p&gt;I've since worked the grapevine, asking friends to ask their account managers for additional information.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The billing department is a black box. I don't have any information here, they've refused all requests. All I can say is that it's likely that he was either using a virtual card or his identity was tied to a previously suspended account.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This came from a high level account manager for an agency friend. I've never had an Ads account suspended before, and I wasn't using a virtual card, I was using my new Apple Card, which lay in front of me.&lt;/p&gt;
&lt;p&gt;After doing a bit of research, I discovered that the number that is generated in the wallet app (the only way you can get your card number for the Apple Card) is, infact, a virtual card.&lt;/p&gt;
&lt;p&gt;After repeated attempts to contact Google Ads support and explain my predicament, I've finally given up. Every request ends with receiving the same email as above, from Elizabeth.&lt;/p&gt;
&lt;p&gt;I'm writing this to warn anyone else that intended to use the card online that you may experience... difficulties. And if you're planning on using the Apple Card for anything important, think again.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 30 Aug 2019 19:07:12 +0000</pubDate>
<dc:creator>zxlk21e</dc:creator>
<og:type>website</og:type>
<og:url>https://smartprivacy.io/learn/i-got-banned-from-google-ads-for-using-apple-card</og:url>
<og:title>I got banned from Google Ads for using Apple Card | SmartPrivacy</og:title>
<og:description>Companies like Google have waged war on virtual cards and left Apple Card users without service.</og:description>
<og:image>https://smartprivacy.io/assets/images/_1200x630_crop_center-center_82_none/logo_hero.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://smartprivacy.io/learn/i-got-banned-from-google-ads-for-using-apple-card</dc:identifier>
</item>
<item>
<title>Release of “13 Reasons Why” Associated with Increase in Youth Suicide Rates</title>
<link>https://www.nimh.nih.gov/news/science-news/2019/release-of-13-reasons-why-associated-with-increase-in-youth-suicide-rates.shtml</link>
<guid isPermaLink="true" >https://www.nimh.nih.gov/news/science-news/2019/release-of-13-reasons-why-associated-with-increase-in-youth-suicide-rates.shtml</guid>
<description>&lt;p id=&quot;subtitle&quot;&gt;NIH-supported study highlights the importance of responsible portrayal of suicide by the media&lt;/p&gt;&lt;div readability=&quot;163.88995756719&quot;&gt;
&lt;p&gt;The Netflix show “13 Reasons Why” was associated with a 28.9% increase in suicide rates among U.S. youth ages 10-17 in the month (April 2017) following the show's release, after accounting for ongoing trends in suicide rates, according to a study published in &lt;em&gt;Journal of the American Academy of Child and Adolescent Psychiatry&lt;/em&gt;. The findings highlight the necessity of using best practices when portraying suicide in popular entertainment and in the media. The study was conducted by researchers at several universities, hospitals, and the National Institute of Mental Health (NIMH), part of the National Institutes of Health. NIMH also funded the study.&lt;/p&gt;
&lt;p&gt;The number of deaths by suicide recorded in April 2017 was greater than the number seen in any single month during the five-year period examined by the researchers. When researchers analyzed the data by sex, they found the increase in the suicide rate was primarily driven by significant increases in suicide in young males. While suicide rates for females increased after the show’s release, the increase was not statistically significant.&lt;/p&gt;
&lt;p&gt;“The results of this study should raise awareness that young people are particularly vulnerable to the media,” said study author Lisa Horowitz, Ph.D., M.P.H., a clinical scientist in the NIMH Intramural Research Program. “All disciplines, including the media, need to take good care to be constructive and thoughtful about topics that intersect with public health crises.”&lt;/p&gt;
&lt;p&gt; “13 Reasons Why” is a web-based series that tells the story of a young girl who kills herself and leaves behind a series of 13 tapes detailing the reasons why she chose to end her life. Although this show has received critical acclaim, it has also generated questions regarding how the show’s portrayal of suicide affects young people who watch it. The series premiered on Netflix on March 31, 2017.&lt;/p&gt;
&lt;p&gt;To better understand the impact of “13 Reasons Why” on suicide rates, researchers analyzed annual and monthly data on deaths due to suicide sourced from the Centers for Disease Control and Prevention’s &lt;a href=&quot;https://wonder.cdc.gov/&quot; rel=&quot;external&quot;&gt;web-based Wide-ranging Online Data for Epidemiologic Research&lt;/a&gt;. These data included information about the deaths of individuals between the ages of 10 and 64 that occurred between Jan. 1, 2013, and Dec. 31, 2017, a timespan that encompassed the period before and after the release of the series.&lt;/p&gt;
&lt;p&gt;The researchers examined whether the rates of suicide for the period after the release of “13 Reasons Why” were greater than would be expected based on suicide counts and trends observed in previous years. The researchers found that the rates of suicide for 10- to 17- year-olds was significantly higher in the months of April, June, and December 2017 than were expected based on past data. This increase translated into an additional estimated 195 suicide deaths between April 1, 2017, and Dec. 31, 2017. The observed suicide rate for March 2017 — the month prior to the release of “13 Reasons Why” — was also higher than forecast. The researchers note that the show was highly promoted during the month of March, exposing audiences to the show’s premise and content through trailers. The researchers did not find any significant trends in suicide rates in people 18- to 64 years of age.&lt;/p&gt;
&lt;p&gt;As a comparison, the researchers also analyzed deaths due to homicide during the same period, to assess whether other worldly social or environmental events after the release of the show might have influenced suicide rates. Homicide rates can be influenced by some of the same social and environmental factors as suicide rates. The researchers did not find any significant changes in homicide rates following the release of the show. The lack of change in homicide rates during the period of interest lends some strength to the idea that changes in suicide rates were influenced by the show and not some other environmental or social factor that occurred during this period.&lt;/p&gt;
&lt;p&gt;The findings of this study add to a growing body of information suggesting that youth may be particularly sensitive to the way suicide is portrayed in popular entertainment and in the media. This increasing recognition of entertainment and media influence has led a variety of groups, such as &lt;a href=&quot;https://theactionalliance.org/messaging/entertainment-messaging&quot; rel=&quot;external&quot; class=&quot;external-disclaimer&quot;&gt;National Action Alliance for Suicide Prevention&lt;/a&gt;, the &lt;a href=&quot;https://www.who.int/mental_health/suicide-prevention/resource_booklet_2017/en/&quot; rel=&quot;external&quot; class=&quot;external-disclaimer&quot;&gt;World Health Organization&lt;/a&gt;, and &lt;a href=&quot;http://reportingonsuicide.org/&quot; rel=&quot;external&quot; class=&quot;external-disclaimer&quot;&gt;reporting on suicide.org&lt;/a&gt;, to create best practices for talking about and portraying suicide on screen. These guidelines recommend, for example, that the entertainment media should avoid depicting the suicide method used. The entertainment media are also urged to convey the message that help is available and to include accurate information about how people can seek help.&lt;/p&gt;
&lt;p&gt;While compelling, this research had several limitations. For example, the study used a quasi-experimental design, meaning that the researchers cannot make a causal link between the release of “13 Reasons Why” and the observed changes in suicide rates. The researchers cannot, therefore, rule out the possibility that unmeasured events or factors influenced suicide rates during this period.&lt;/p&gt;
&lt;p&gt;The second season of “13 Reasons Why” was released in May 2018, and a third season is currently in production and is expected to be released sometime this year. The findings from this study should serve as a reminder to be mindful of the possible unintended impacts of the portrayal of suicide, and as a call to the entertainment industry and the media to use best practices when engaging with this topic.&lt;/p&gt;
&lt;div class=&quot;setout&quot; readability=&quot;12.230769230769&quot;&gt;
&lt;p&gt;&lt;strong&gt;Suicidal thoughts or actions (even in very young children) are a sign of extreme distress and should not be ignored.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you or someone you know needs immediate help, call the&lt;/strong&gt; &lt;strong&gt;&lt;a href=&quot;https://suicidepreventionlifeline.org/&quot; rel=&quot;external&quot; class=&quot;external-disclaimer&quot;&gt;National Suicide Prevention Lifeline&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;at &lt;strong&gt;1-800-273-TALK (8255) or Crisis Text Line: text “home” to 741 741.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.nimh.nih.gov/health/topics/suicide-prevention/index.shtml&quot; title=&quot;Suicide Prevention&quot;&gt;Learn more&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;about ways you can help someone who might be at risk for self-harm.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Reference:&lt;/h2&gt;
&lt;p&gt;Bridge, J. A., Greenhouse, J. B., Ruch, D., Stevens, J., Ackerman, J., Sheftall, A. H., Horowitz, L. M., Kelleher, K. J., &amp;amp; Campo, J. V. (in press). Association between the release of Netflix’s &lt;em&gt;13 Reasons Why&lt;/em&gt; and suicide rates in the United States: An interrupted times series analysis. &lt;em&gt;Journal of the American Academy of Child and Adolescent Psychiatry&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Grants:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://projectreporter.nih.gov/project_info_description.cfm?aid=9593859&amp;amp;icde=44215681&amp;amp;ddparam=&amp;amp;ddvalue=&amp;amp;ddsub=&amp;amp;cr=1&amp;amp;csb=default&amp;amp;cs=ASC&amp;amp;pball=&quot; rel=&quot;external&quot;&gt;MH117594&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About the National Institute of Mental Health (NIMH):&lt;/strong&gt; The mission of the &lt;abbr title=&quot;National Institute of Mental Health&quot;&gt;NIMH&lt;/abbr&gt; is to transform the understanding and treatment of mental illnesses through basic and clinical research, paving the way for prevention, recovery and cure. For more information, visit the &lt;a href=&quot;http://www.nimh.nih.gov&quot; class=&quot;unmanaged-absolute-internal&quot;&gt;NIMH website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About the National Institutes of Health (NIH)&lt;/strong&gt;: NIH, the nation's medical research agency, includes 27 Institutes and Centers and is a component of the U.S. Department of Health and Human Services. NIH is the primary federal agency conducting and supporting basic, clinical, and translational medical research, and is investigating the causes, treatments, and cures for both common and rare diseases. For more information about &lt;abbr title=&quot;National Institutes of Health&quot;&gt;NIH&lt;/abbr&gt; and its programs, visit the &lt;a href=&quot;https://www.nih.gov&quot; rel=&quot;external&quot;&gt;NIH website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NIH…Turning Discovery Into Health&lt;sup&gt;®&lt;br/&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 30 Aug 2019 18:17:26 +0000</pubDate>
<dc:creator>newsreview1</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nimh.nih.gov/news/science-news/2019/release-of-13-reasons-why-associated-with-increase-in-youth-suicide-rates.shtml</dc:identifier>
</item>
<item>
<title>Facebook scans system libraries on Android and uploads them to their server</title>
<link>https://twitter.com/wongmjane/status/1167463054709334017</link>
<guid isPermaLink="true" >https://twitter.com/wongmjane/status/1167463054709334017</guid>
<description>&lt;p&gt;There doesn’t seem to be an opt-out option for Facebook Global Library Collector, nor does it not seem to be possible to view what they have uploaded from our devices

Not sure what’s the purpose of GLC, but I guess it can be used for determining system integrity, compatibility&lt;/p&gt;
</description>
<pubDate>Fri, 30 Aug 2019 15:46:48 +0000</pubDate>
<dc:creator>akalin</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/wongmjane/status/1167463054709334017</dc:identifier>
</item>
<item>
<title>The Baseline Interpreter: A Faster JavaScript Interpreter in Firefox 70</title>
<link>https://hacks.mozilla.org/2019/08/the-baseline-interpreter-a-faster-js-interpreter-in-firefox-70/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2019/08/the-baseline-interpreter-a-faster-js-interpreter-in-firefox-70/</guid>
<description>&lt;h2&gt;Introduction&lt;/h2&gt;&lt;p&gt;Modern web applications load and execute a lot more JavaScript code than they did just a few years ago. While &lt;a href=&quot;https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/&quot;&gt;JIT (just-in-time) compilers&lt;/a&gt; have been very successful in making JavaScript performant, we needed a better solution to deal with these new workloads.&lt;/p&gt;
&lt;p&gt;To address this, we’ve added a new, generated JavaScript bytecode interpreter to the JavaScript engine in Firefox 70. The interpreter is available now in the Firefox Nightly channel, and will go to general release in October. Instead of writing or generating a new interpreter from scratch, we found a way to do this by sharing most code with our existing Baseline JIT.&lt;/p&gt;
&lt;p&gt;The new Baseline Interpreter has resulted in performance improvements, memory usage reductions and code simplifications. Here’s how we got there:&lt;/p&gt;
&lt;h2&gt;Execution tiers&lt;/h2&gt;
&lt;p&gt;In modern JavaScript engines, each function is initially executed in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bytecode&quot;&gt;bytecode interpreter&lt;/a&gt;. Functions that are called a lot (or perform many loop iterations) are compiled to native machine code. (This is called &lt;a href=&quot;https://hacks.mozilla.org/2017/02/a-crash-course-in-just-in-time-jit-compilers/&quot;&gt;JIT compilation&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Firefox has an interpreter written in C++ and multiple JIT tiers:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;strong&gt;Baseline JIT&lt;/strong&gt;. Each bytecode instruction is compiled directly to a small piece of machine code. It uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Inline_caching&quot;&gt;Inline Caches (ICs)&lt;/a&gt; both as performance optimization and to collect type information for Ion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IonMonkey&lt;/strong&gt; (or just Ion), the optimizing JIT. It uses advanced compiler optimizations to generate fast code for hot functions (at the expense of slower compile times).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Ion JIT code for a function can be ‘deoptimized’ and thrown away for various reasons, for example when the function is called with a new argument type. This is called a &lt;em&gt;bailout&lt;/em&gt;. When a bailout happens, execution continues in the Baseline code until the next Ion compilation.&lt;/p&gt;
&lt;p&gt;Until Firefox 70, the execution pipeline for a very hot function looked like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/Execution-tiers.svg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-33762&quot; role=&quot;img&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/Execution-tiers.svg&quot; alt=&quot;Timeline showing C++ Interpreter, Baseline Compilation, Baseline JIT Code, Prepare for Ion, Ion JIT Code with an arrow (called bailout) from Ion JIT Code back to Baseline JIT Code&quot; width=&quot;250&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;Although this works pretty well, we ran into the following problems with the first part of the pipeline (C++ Interpreter and Baseline JIT):&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Baseline JIT compilation is fast, but modern web applications like Google Docs or Gmail execute so much JavaScript code that we could spend quite some time in the Baseline compiler, compiling thousands of functions.&lt;/li&gt;
&lt;li&gt;Because the C++ interpreter is so slow and doesn’t collect type information, delaying Baseline compilation or moving it off-thread would have been a performance risk.&lt;/li&gt;
&lt;li&gt;As you can see in the diagram above, optimized Ion JIT code was only able to bail out to the Baseline JIT. To make this work, Baseline JIT code required extra metadata (the machine code offset corresponding to each bytecode instruction).&lt;/li&gt;
&lt;li&gt;The Baseline JIT had some complicated code for bailouts, debugger support, and exception handling. This was especially true where these features intersect!&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Solution: generate a faster interpreter&lt;/h2&gt;
&lt;p&gt;We needed type information from the Baseline JIT to enable the more optimized tiers, and we wanted to use JIT compilation for runtime speed. However, the modern web has such large codebases that even the relatively fast Baseline JIT Compiler spent a lot of time compiling. To address this, Firefox 70 adds a new tier called the Baseline Interpreter to the pipeline:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-33763&quot; role=&quot;img&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/Execution-tiers-new.svg&quot; alt=&quot;Same timeline of execution tiers as before but now has the 'Baseline Interpreter' between C++ interpreter and Baseline compilation. The bailout arrow points to Baseline Interpreter instead of Baseline JIT Code.&quot; width=&quot;250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The Baseline Interpreter sits between the C++ interpreter and the Baseline JIT and has elements from both. It executes all bytecode instructions with a fixed interpreter loop (like the C++ interpreter). In addition, it uses Inline Caches to improve performance and collect type information (like the Baseline JIT).&lt;/p&gt;
&lt;p&gt;Generating an interpreter isn’t a new idea. However, we found a nice new way to do it by reusing most of the Baseline JIT Compiler code. The Baseline JIT is a template JIT, meaning each bytecode instruction is compiled to a mostly fixed sequence of machine instructions. We generate those sequences into an interpreter loop instead.&lt;/p&gt;
&lt;h2&gt;Sharing Inline Caches and profiling data&lt;/h2&gt;
&lt;p&gt;As mentioned above, the Baseline JIT uses Inline Caches (ICs) both to make it fast and to help Ion compilation. To get type information, the Ion JIT compiler can inspect the Baseline ICs.&lt;/p&gt;
&lt;p&gt;Because we wanted the Baseline Interpreter to use exactly the same Inline Caches and type information as the Baseline JIT, we added a new data structure called &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/325c1a707819602feff736f129cb36055ba6d94f/js/src/jit/JitScript.h#54-113&quot;&gt;JitScript&lt;/a&gt;. JitScript contains all type information and IC data structures used by both the Baseline Interpreter and JIT.&lt;/p&gt;
&lt;p&gt;The diagram below shows what this looks like in memory. Each arrow is a pointer in C++. Initially, the function just has a JSScript with the bytecode that can be interpreted by the C++ interpreter. After a few calls/iterations we create the JitScript, attach it to the JSScript and can now run the script in the Baseline Interpreter.&lt;/p&gt;
&lt;p&gt;As the code gets warmer we may also create the BaselineScript (Baseline JIT code) and then the IonScript (Ion JIT code).&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/JIT-script-data-structures.svg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-33764&quot; role=&quot;img&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/JIT-script-data-structures.svg&quot; alt=&quot;JSScript (bytecode) points to JitScript (IC and profiling data). JitScript points to BaselineScript (Baseline JIT Code) and IonScript (Ion JIT code).&quot; width=&quot;250&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that the Baseline JIT data for a function is now just the machine code. We’ve moved all the inline caches and profiling data into JitScript.&lt;/p&gt;
&lt;h2&gt;Sharing the frame layout&lt;/h2&gt;
&lt;p&gt;The Baseline Interpreter uses the same frame layout as the Baseline JIT, but we’ve added some &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/325c1a707819602feff736f129cb36055ba6d94f/js/src/jit/BaselineFrame.h#55-58&quot;&gt;interpreter-specific fields&lt;/a&gt; to the frame. For example, the bytecode PC (program counter), a pointer to the bytecode instruction we are currently executing, is not updated explicitly in Baseline JIT code. It can be determined from the return address if needed, but the Baseline Interpreter has to store it in the frame.&lt;/p&gt;
&lt;p&gt;Sharing the frame layout like this has a lot of advantages. We’ve made almost no changes to C++ and IC code to support Baseline Interpreter frames—they’re just like Baseline JIT frames. Furthermore, When the script is warm enough for Baseline JIT compilation, switching from Baseline Interpreter code to Baseline JIT code is a matter of &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/8ea946dcf51f0d6400362cc1d49c8d4808eeacf1/js/src/jit/BaselineCodeGen.cpp#1385-1392&quot;&gt;jumping from&lt;/a&gt; the interpreter code &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/8ea946dcf51f0d6400362cc1d49c8d4808eeacf1/js/src/jit/BaselineCodeGen.cpp#1262-1275&quot;&gt;into JIT code&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Sharing code generation&lt;/h2&gt;
&lt;p&gt;Because the Baseline Interpreter and JIT are so similar, a lot of the code generation code can be shared too. To do this, we added a templated &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/8ea946dcf51f0d6400362cc1d49c8d4808eeacf1/js/src/jit/BaselineCodeGen.h#264-269&quot;&gt;&lt;code&gt;BaselineCodeGen&lt;/code&gt; base class&lt;/a&gt; with two derived classes:&lt;/p&gt;
&lt;p&gt;The base class has a Handler C++ template argument that can be used to specialize behavior for either the Baseline Interpreter or JIT. A lot of Baseline JIT code can be shared this way. For example, the implementation of the &lt;code&gt;JSOP_GETPROP&lt;/code&gt; bytecode instruction (for a property access like &lt;code&gt;obj.foo&lt;/code&gt; in JavaScript code) &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/8ea946dcf51f0d6400362cc1d49c8d4808eeacf1/js/src/jit/BaselineCodeGen.cpp#3446-3459&quot;&gt;is shared code&lt;/a&gt;. It calls the &lt;code&gt;emitNextIC&lt;/code&gt; helper method that’s &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/8ea946dcf51f0d6400362cc1d49c8d4808eeacf1/js/src/jit/BaselineCodeGen.cpp#531-588&quot;&gt;specialized&lt;/a&gt; for either Interpreter or JIT mode.&lt;/p&gt;
&lt;h2&gt;Generating the Interpreter&lt;/h2&gt;
&lt;p&gt;With all these pieces in place, we were able to implement the &lt;code&gt;BaselineInterpreterGenerator&lt;/code&gt; class to generate the Baseline Interpreter! It generates a threaded interpreter loop: The code for each bytecode instruction is &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/8ea946dcf51f0d6400362cc1d49c8d4808eeacf1/js/src/jit/BaselineCodeGen.cpp#6920-6922&quot;&gt;followed by&lt;/a&gt; an indirect jump to the next bytecode instruction.&lt;/p&gt;
&lt;p&gt;For example, on x64 we currently generate the following machine code to interpret &lt;a href=&quot;https://searchfox.org/mozilla-central/rev/8ea946dcf51f0d6400362cc1d49c8d4808eeacf1/js/src/jit/BaselineCodeGen.cpp#2402-2406&quot;&gt;&lt;code&gt;JSOP_ZERO&lt;/code&gt;&lt;/a&gt; (bytecode instruction to push a zero value on the stack):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;js&quot;&gt;// Push Int32Value(0).
movabsq $-0x7800000000000, %r11
pushq  %r11
// Increment bytecode pc register.
addq   $0x1, %r14
// Patchable NOP for debugger support.
nopl   (%rax,%rax)
// Load the next opcode.
movzbl (%r14), %ecx
// Jump to interpreter code for the next instruction.
leaq   0x432e(%rip), %rbx
jmpq   *(%rbx,%rcx,8)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When we enabled the Baseline Interpreter in Firefox Nightly (version 70) back in July, we increased the Baseline JIT warm-up threshold from 10 to 100. The warm-up count is determined by counting the number of calls to the function + the number of loop iterations so far. The Baseline Interpreter has a threshold of 10, same as the old Baseline JIT threshold. This means that the Baseline JIT has a lot less code to compile.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;h3&gt;Performance and memory usage&lt;/h3&gt;
&lt;p&gt;After this landed in Firefox Nightly our performance testing infrastructure detected several improvements:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Various 2-8% &lt;a href=&quot;https://treeherder.mozilla.org/perf.html#/alerts?id=21879&quot;&gt;page load improvements&lt;/a&gt;. A lot happens during page load in addition to JS execution (parsing, style, layout, graphics). Improvements like this are quite significant.&lt;/li&gt;
&lt;li&gt;Many devtools performance tests &lt;a href=&quot;https://treeherder.mozilla.org/perf.html#/alerts?id=21880&quot;&gt;improved by 2-10%&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some small memory usage wins.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note that we’ve landed more performance improvements since this first landed.&lt;/p&gt;
&lt;p&gt;To measure how the Baseline Interpreter’s performance compares to the C++ Interpreter and the Baseline JIT, I ran Speedometer and Google Docs on Windows 10 64-bit on Mozilla’s Try server and enabled the tiers one by one. (The following numbers reflect the best of 7 runs.):&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/Google-Docs-page-load.svg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-33765&quot; role=&quot;img&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/Google-Docs-page-load.svg&quot; alt=&quot;C++ Interpreter 901 ms, + Baseline Interpreter 676 ms, + Baseline JIT 633 ms&quot; width=&quot;250&quot;/&gt;&lt;/a&gt;&lt;br/&gt;On Google Docs we see that the Baseline Interpreter is much faster than just the C++ Interpreter. Enabling the Baseline JIT too makes the page load only a little bit faster.&lt;/p&gt;
&lt;p&gt;On the Speedometer benchmark we get noticeably better results when we enable the Baseline JIT tier. The Baseline Interpreter does again much better than just the C++ Interpreter:&lt;br/&gt;&lt;a href=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/Speedometer.svg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-33766&quot; role=&quot;img&quot; src=&quot;https://2r4s9p1yi1fa2jd7j43zph8r-wpengine.netdna-ssl.com/files/2019/08/Speedometer.svg&quot; alt=&quot;C++ Interpreter 31 points, + Baseline Interpreter 52 points, + Baseline JIT 69 points&quot; width=&quot;250&quot;/&gt;&lt;/a&gt;&lt;br/&gt;We think these numbers are great: the Baseline Interpreter is much faster than the C++ Interpreter and its start-up time (JitScript allocation) is much faster than Baseline JIT compilation (at least 10 times faster).&lt;/p&gt;
&lt;h3&gt;Simplifications&lt;/h3&gt;
&lt;p&gt;After this all landed and stuck, we were able to simplify the Baseline JIT and Ion code by taking advantage of the Baseline Interpreter.&lt;/p&gt;
&lt;p&gt;For example, deoptimization bailouts from Ion now resume in the Baseline Interpreter instead of in the Baseline JIT. The interpreter can re-enter Baseline JIT code at the next loop iteration in the JS code. Resuming in the interpreter is much easier than resuming in the middle of Baseline JIT code. We now have to record less metadata for Baseline JIT code, so Baseline JIT compilation got faster too. Similarly, we were able to &lt;a href=&quot;https://hg.mozilla.org/mozilla-central/rev/49a2da59aa3e#l3.535&quot;&gt;remove a lot of complicated code&lt;/a&gt; for debugger support and exception handling.&lt;/p&gt;
&lt;h2&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;With the Baseline Interpreter in place, it should now be possible to move Baseline JIT compilation off-thread. We will be working on that in the coming months, and we anticipate more performance improvements in this area.&lt;/p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Although I did most of the Baseline Interpreter work, many others contributed to this project. In particular Ted Campbell and Kannan Vijayan reviewed most of the code changes and had great design feedback.&lt;/p&gt;
&lt;p&gt;Also thanks to Steven DeTar, Chris Fallin, Havi Hoffman, Yulia Startsev, and Luke Wagner for their feedback on this blog post.&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;4.8363636363636&quot;&gt;
&lt;p&gt;Jan is a software engineer at Mozilla where he works on SpiderMonkey, the JavaScript Engine in Firefox. He lives in the Netherlands.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/jdemooijmozilla-com/&quot;&gt;More articles by Jan de Mooij…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Fri, 30 Aug 2019 15:33:02 +0000</pubDate>
<dc:creator>edmorley</dc:creator>
<og:url>https://hacks.mozilla.org/2019/08/the-baseline-interpreter-a-faster-js-interpreter-in-firefox-70</og:url>
<og:title>The Baseline Interpreter: a faster JS interpreter in Firefox 70 – Mozilla Hacks - the Web developer blog</og:title>
<og:description>Modern web applications load and execute a lot more JavaScript code than they did just a few years ago. While JIT (just-in-time) compilers have been very successful in making JavaScript ...</og:description>
<og:image>https://hacks.mozilla.org/files/2019/08/speedo-soc.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2019/08/the-baseline-interpreter-a-faster-js-interpreter-in-firefox-70/</dc:identifier>
</item>
<item>
<title>NPM Bans Terminal Ads</title>
<link>https://www.zdnet.com/article/npm-bans-terminal-ads/</link>
<guid isPermaLink="true" >https://www.zdnet.com/article/npm-bans-terminal-ads/</guid>
<description>&lt;span class=&quot;img aspect-set&quot;&gt;&lt;img src=&quot;https://zdnet4.cbsistatic.com/hub/i/2019/08/29/456d3b4e-9cd6-44b2-a3e2-6a7393a93f32/832690e897b59eb8eafbb4445c21a6ba/npm-standard-ad.png&quot; class=&quot;&quot; alt=&quot;npm-standard-ad.png&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;credit&quot;&gt;Image via William Hilton&lt;/span&gt;
&lt;p&gt;After last week &lt;a href=&quot;https://www.zdnet.com/article/popular-javascript-library-starts-showing-ads-in-its-terminal/&quot; target=&quot;_blank&quot;&gt;a popular JavaScript library started showing full-blown ads&lt;/a&gt; in the npm command-line interface, npm, Inc., the company that runs the npm tool and website, has taken a stance and plans to ban such behavior in the future.&lt;/p&gt;

&lt;div class=&quot;relatedContent alignRight&quot;&gt;
&lt;h3 class=&quot;heading&quot;&gt;&lt;span class=&quot;int&quot;&gt;techrepublic cheat sheet&lt;/span&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;&quot;We are always working on improving our policies and expand on our commitments to the community,&quot; Ahmad Nassri, npm, Inc. CTO told &lt;em&gt;ZDNet&lt;/em&gt; in an email this week.&lt;/p&gt;
&lt;p&gt;&quot;To that end, we're making updates to our policies to be more explicit about the type of commercial content we do deem not acceptable.&quot;&lt;/p&gt;
&lt;p&gt;According to these upcoming updates, npm will ban:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Packages that display ads at runtime, on installation, or at other stages of the software development lifecycle, such as via npm scripts.&lt;/li&gt;
&lt;li&gt;Packages with code that can be used to display ads are fine. Packages that themselves display ads are not.&lt;/li&gt;
&lt;li&gt;Packages that themselves function primarily as ads, with only placeholder or negligible code, data, and other technical content.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;The &quot;Standard&quot; scandal&lt;/h3&gt;
&lt;p&gt;Npm took a stance after last week, &lt;a href=&quot;https://github.com/feross/standard&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Standard&lt;/a&gt;, a popular JavaScript library, started showing ads in the npm terminal after being installed.&lt;/p&gt;

&lt;p&gt;The ads were being shown via another npm package called Funding that was included in Standard's codebase. Both Standard and &lt;a href=&quot;https://www.npmjs.com/package/funding&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Funding&lt;/a&gt; were developed by Feross Aboukhadijeh, a JavaScript developer seeking a way to alleviate costs for running the Standard project, a JavaScript style guide, linter, and automatic code fixer.&lt;/p&gt;
&lt;p&gt;Aboukhadijeh hoped other JavaScript projects would also integrate Funding int their codebase, as a way to support the development costs of their open-source work.&lt;/p&gt;
&lt;section class=&quot;sharethrough-top&quot; data-component=&quot;medusaContentRecommendation&quot; data-medusa-content-recommendation-options=&quot;{&amp;quot;promo&amp;quot;:&amp;quot;promo_ZD_recommendation_sharethrough_top_in_article_desktop&amp;quot;,&amp;quot;spot&amp;quot;:&amp;quot;dfp-in-article&amp;quot;}&quot;&gt;
&lt;/section&gt;&lt;p&gt;However, the JavaScript community didn't react in the way Aboukhadijeh hoped, and his initiative was criticized by most developers, who claimed the ads were polluting application logs.&lt;/p&gt;
&lt;p&gt;One developer went as far as creating &lt;a href=&quot;https://github.com/kethinov/no-cli-ads&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;the first-ever terminal ad blocker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Linode and LogRocket, the two companies who signed up to show ads via Funding in developers' npm terminals, also backed out in the face of negative comments from web developers -- their primary customers.&lt;/p&gt;
&lt;h3&gt;Development on &quot;Funding&quot; project ceases&lt;/h3&gt;
&lt;p&gt;Yesterday, shortly after Nassri reached out to &lt;em&gt;ZDNet&lt;/em&gt; to inform us of the upcoming npm policy change, Aboukhadijeh also announced he was &lt;a href=&quot;https://feross.org/funding-experiment-recap/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;stopping development on the Funding library&lt;/a&gt;, effectively killing the project.&lt;/p&gt;
&lt;p&gt;In a blog post explaining the full Funding backstory and the motives behind the project, Aboukhadijeh cited &lt;a href=&quot;https://github.com/npm/cli/pull/187&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;ongoing work from the npm team&lt;/a&gt; to standardize CLI post-install scripts -- the mechanism used by Funding to show ads.&lt;/p&gt;
&lt;p&gt;The upcoming change will allow developers to silence any type of non-error terminal messages, such as ads, or calls for donations -- an issue many times more widespread[&lt;a href=&quot;https://github.com/opencollective/opencollective-postinstall/issues/21&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://github.com/zloirock/core-js/issues/548&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://github.com/cssinjs/jss/issues/881&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;https://github.com/cssinjs/jss/issues/881&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;https://github.com/styled-components/styled-components/issues/1590&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;https://github.com/styled-components/styled-components/issues/1590&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;6&lt;/a&gt;] than Funding's ads ever were.&lt;/p&gt;
&lt;p&gt;&quot;The days of free-form post-install solicitations seem numbered,&quot; Aboukhadijeh said. &quot;So while terminal ads may work for a little while longer, there are clearly better paths forward.&quot;&lt;/p&gt;



</description>
<pubDate>Fri, 30 Aug 2019 12:55:59 +0000</pubDate>
<dc:creator>slovenlyrobot</dc:creator>
<og:type>article</og:type>
<og:url>https://www.zdnet.com/article/npm-bans-terminal-ads/</og:url>
<og:title>npm bans terminal ads | ZDNet</og:title>
<og:description>JavaScript community's negative reaction to recent experiment kills potential avenue for funding open-source projects.</og:description>
<og:image>https://zdnet3.cbsistatic.com/hub/i/r/2019/08/29/456d3b4e-9cd6-44b2-a3e2-6a7393a93f32/thumbnail/770x578/ec04c24928056151f3342aa6f7e621b3/npm-standard-ad.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.zdnet.com/article/npm-bans-terminal-ads/</dc:identifier>
</item>
<item>
<title>Websites have been quietly hacking iPhones for years, says Google</title>
<link>https://www.technologyreview.com/s/614243/websites-have-been-quietly-hacking-iphones-for-years-says-google/</link>
<guid isPermaLink="true" >https://www.technologyreview.com/s/614243/websites-have-been-quietly-hacking-iphones-for-years-says-google/</guid>
<description>&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;The largest ever known attack against iPhone users lasted at least two years and hit potentially thousands of people, according to &lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html&quot;&gt;research&lt;/a&gt; published by Google. &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;The malware could ransack the entire iPhone to steal passwords, encrypted messages, location, contacts, and other extremely sensitive information. The data was then sent to a command and control server which the hackers used to run the operation. The scope, execution, and persistence of the unprecedented hacking campaign points to a potential nation-backed operation but the identity of both the hackers and their targets is still unknown.  &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;“The data taken is the ‘juicy’ data,&quot; says Jonathan Levin, an author of three books on the internals of Apple's operating systems. &quot;Take all the passwords from the keychain, location data, chats/contacts/etc, and build a shadow network of connections of all your victims. Surely by six degrees of separation you'll find interesting targets there.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;aside class=&quot;jsx-2623490083 signup-wrapper&quot;&gt;&lt;aside class=&quot;jsx-3784032550 jsx-3019503940 newsletter-signup&quot; readability=&quot;1&quot;&gt;&lt;div class=&quot;jsx-3784032550 jsx-3019503940 intro&quot; readability=&quot;7&quot;&gt;

&lt;p&gt;
&lt;h4 class=&quot;jsx-3784032550 jsx-3019503940 title&quot;&gt;Sign up for &lt;strong class=&quot;jsx-3784032550 jsx-3019503940&quot;&gt;The Download&lt;/strong&gt; — your daily dose of what's up in emerging technology&lt;/h4&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/aside&gt;&lt;/aside&gt;&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Apple patched the bugs quickly in February 2019 so everyone who has updated their iPhone since then is protected. Rebooting the iPhone wiped the malware but the data had already been taken. Exactly who was infected remains an open question. iPhone users themselves likely wouldn’t know because the malware runs in the background with no visual indicator and no way for an iOS user to view the processes running on the device. &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;In January 2019, Google’s Threat Analysis Group (TAG), the tech giant’s counterespionage specialists, first found hacked websites that were delivering malware to thousands of visitors per week. The tactic is known as a watering-hole attack: attackers lace carefully selected websites with malware and wait for expected visitors to arrive to be infected. Just visiting the site was enough to download the malware.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Google’s discovery included, over a period of years, five so-called &quot;exploit chains&quot; with 14 vulnerabilities including at least one active zero-day vulnerability, the term used to describe an exploitable bug undiscovered by a company like Apple. When one exploit chain was rendered useless by an Apple patch, the hacker quickly implemented the next one.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;TAG passed the intelligence to Apple, who issued iOS patch 12.1.4 on February 7 with a fix, as well as to others within Google. Google’s Project Zero, the company’s security analysis team, has spent the last seven months dissecting these bugs.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;&quot;There was no target discrimination; simply visiting the hacked site was enough for the exploit server to attack your device, and if it was successful, install a monitoring implant. We estimate that these sites receive thousands of visitors per week,&quot; Google’s Ian Beer &lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html&quot;&gt;wrote&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;It’s not clear who was infected. Google's Project Zero did not release key information including which websites were infected. It seems likely that neither Apple nor Google would have a full accounting of victims but there could be other clues, including which populations typically visit the infected website. &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;So, who is behind it? There is an entire offensive hacking industry that creates and sells hacking tools to governments and companies around the world. NSO Group is the most famous but their tools have reportedly been tightly targeted. But Levin thinks the signs point to a nation state being behind this attack, as the model used is not something a typical hacker or small company could afford to run. &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;The revelation instantly made waves throughout the cybersecurity industry. &quot;This is the first time evidence has been found of such exploits being used massively, indiscriminately as ‘net fishing’ against whatever unsuspecting individuals end up visiting the infected websites,&quot; says Levin.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;One of the most notable victims of iPhone malware ever is Ahmed Mansoor. Mansoor, a world-renowned human rights activist imprisoned for criticizing the United Arab Emirates government, is nicknamed “&lt;a href=&quot;https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/&quot;&gt;the million dollar dissident&lt;/a&gt;” because of the high cost of the malware used to hack his iPhone and spy on him.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;Until now, the implication of the high prices had been that deploying these weapons is rare and tightly targeted. Exploiting Apple’s iOS operating system, the software that powers both the iPhone and iPad, is a complex and expensive process. &quot;iOS exploitation requires sidestepping and bypassing Apple's formidable defenses, in multiple layers,&quot; says Levin. Google’s discovery throws some of those assumptions in the air.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;It will also upend perceptions of the security of iPhones. High-risk individuals including journalists, lawyers, activists, and more use iPhones in the hope that the devices will provide a real defense against hackers who, in some cases, can be a genuine life or death threat.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;jsx-671803276&quot;&gt;&lt;span class=&quot;jsx-671803276&quot;&gt;“Real users make risk decisions based on the public perception of the security of these devices,” Beer wrote. “The reality remains that security protections will never eliminate the risk of attack if you're being targeted.&quot;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 30 Aug 2019 12:33:27 +0000</pubDate>
<dc:creator>gopalggk</dc:creator>
<og:title>Websites have been quietly hacking iPhones for years, says Google</og:title>
<og:description>Websites delivered iOS malware to thousands of visitors in the biggest iPhone hack ever. There’s no telling who was infected—or who was behind it.</og:description>
<og:type>article</og:type>
<og:url>https://www.technologyreview.com/s/614243/websites-have-been-quietly-hacking-iphones-for-years-says-google/</og:url>
<og:image>https://cdn.technologyreview.com/i/images/ap19242261656353.jpg?cx=0&amp;cy=0&amp;cw=2801&amp;ch=1576&amp;sw1200</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.technologyreview.com/s/614243/websites-have-been-quietly-hacking-iphones-for-years-says-google/</dc:identifier>
</item>
<item>
<title>Go Module Mirror and Checksum Database Launched</title>
<link>https://blog.golang.org/module-mirror-launch</link>
<guid isPermaLink="true" >https://blog.golang.org/module-mirror-launch</guid>
<description>&lt;p class=&quot;author&quot;&gt;Katie Hockman&lt;br/&gt;29 August 2019&lt;/p&gt;
&lt;p&gt;We are excited to share that our module &lt;a href=&quot;https://proxy.golang.org&quot; target=&quot;_blank&quot;&gt;mirror&lt;/a&gt;, &lt;a href=&quot;https://index.golang.org&quot; target=&quot;_blank&quot;&gt;index&lt;/a&gt;, and &lt;a href=&quot;https://sum.golang.org&quot; target=&quot;_blank&quot;&gt;checksum database&lt;/a&gt; are now production ready! The &lt;code&gt;go&lt;/code&gt; command will use the module mirror and checksum database by default for &lt;a href=&quot;https://tip.golang.org/doc/go1.13#introduction&quot; target=&quot;_blank&quot;&gt;Go 1.13 module users&lt;/a&gt;. See &lt;a href=&quot;https://proxy.golang.org/privacy&quot; target=&quot;_blank&quot;&gt;proxy.golang.org/privacy&lt;/a&gt; for privacy information about these services and the &lt;a href=&quot;https://tip.golang.org/cmd/go/#hdr-Module_downloading_and_verification&quot; target=&quot;_blank&quot;&gt;go command documentation&lt;/a&gt; for configuration details, including how to disable the use of these servers or use different ones. If you depend on non-public modules, see the &lt;a href=&quot;https://tip.golang.org/cmd/go/#hdr-Module_configuration_for_non_public_modules&quot; target=&quot;_blank&quot;&gt;documentation for configuring your environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post will describe these services and the benefits of using them, and summarizes some of the points from the &lt;a href=&quot;https://youtu.be/KqTySYYhPUE&quot; target=&quot;_blank&quot;&gt;Go Module Proxy: Life of a Query&lt;/a&gt; talk at Gophercon 2019. See the &lt;a href=&quot;https://youtu.be/KqTySYYhPUE&quot; target=&quot;_blank&quot;&gt;recording&lt;/a&gt; if you are interested in the full talk.&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.1.&quot;&gt;Module Mirror&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.golang.org/versioning-proposal&quot; target=&quot;_blank&quot;&gt;Modules&lt;/a&gt; are sets of Go packages that are versioned together, and the contents of each version are immutable. That immutability provides new opportunities for caching and authentication. When &lt;code&gt;go get&lt;/code&gt; runs in module mode, it must fetch the module containing the requested packages, as well as any new dependencies introduced by that module, updating your &lt;a href=&quot;https://golang.org/cmd/go/#hdr-The_go_mod_file&quot; target=&quot;_blank&quot;&gt;go.mod&lt;/a&gt; and &lt;a href=&quot;https://golang.org/cmd/go/#hdr-Module_downloading_and_verification&quot; target=&quot;_blank&quot;&gt;go.sum&lt;/a&gt; files as needed. Fetching modules from version control can be expensive in terms of latency and storage in your system: the &lt;code&gt;go&lt;/code&gt; command may be forced to pull down the full commit history of a repository containing a transitive dependency, even one that isn’t being built, just to resolve its version.&lt;/p&gt;
&lt;p&gt;The solution is to use a module proxy, which speaks an API that is better suited to the &lt;code&gt;go&lt;/code&gt; command’s needs (see &lt;code&gt;go help goproxy&lt;/code&gt;). When &lt;code&gt;go get&lt;/code&gt; runs in module mode with a proxy, it will work faster by only asking for the specific module metadata or source code it needs, and not worrying about the rest. Below is an example of how the &lt;code&gt;go&lt;/code&gt; command may use a proxy with &lt;code&gt;go get&lt;/code&gt; by requesting the list of versions, then the info, mod, and zip file for the latest tagged version.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/module-mirror-launch/proxy-protocol.png&quot; width=&quot;800&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;A module mirror is a special kind of module proxy that caches metadata and source code in its own storage system, allowing the mirror to continue to serve source code that is no longer available from the original locations. This can speed up downloads and protect you from disappearing dependencies. See &lt;a href=&quot;https://blog.golang.org/modules2019&quot; target=&quot;_blank&quot;&gt;Go Modules in 2019&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;The Go team maintains a module mirror, served at &lt;a href=&quot;https://proxy.golang.org&quot; target=&quot;_blank&quot;&gt;proxy.golang.org&lt;/a&gt;, which the &lt;code&gt;go&lt;/code&gt; command will use by default for module users as of Go 1.13. If you are running an earlier version of the &lt;code&gt;go&lt;/code&gt; command, then you can use this service by setting &lt;code&gt;GOPROXY=https://proxy.golang.org&lt;/code&gt; in your local environment.&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.2.&quot;&gt;Checksum Database&lt;/h4&gt;
&lt;p&gt;Modules introduced the &lt;code&gt;go.sum&lt;/code&gt; file, which is a list of SHA-256 hashes of the source code and &lt;code&gt;go.mod&lt;/code&gt; files of each dependency when it was first downloaded. The &lt;code&gt;go&lt;/code&gt; command can use the hashes to detect misbehavior by an origin server or proxy that gives you different code for the same version.&lt;/p&gt;
&lt;p&gt;The limitation of this &lt;code&gt;go.sum&lt;/code&gt; file is that it works entirely by trust on &lt;em&gt;your&lt;/em&gt; first use. When you add a version of a dependency that you’ve never seen before to your module (possibly by upgrading an existing dependency), the &lt;code&gt;go&lt;/code&gt; command fetches the code and adds lines to the &lt;code&gt;go.sum&lt;/code&gt; file on the fly. The problem is that those &lt;code&gt;go.sum&lt;/code&gt; lines aren’t being checked against anyone else’s: they might be different from the &lt;code&gt;go.sum&lt;/code&gt; lines that the &lt;code&gt;go&lt;/code&gt; command just generated for someone else, perhaps because a proxy intentionally served malicious code targeted to you.&lt;/p&gt;
&lt;p&gt;Go's solution is a global source of &lt;code&gt;go.sum&lt;/code&gt; lines, called a &lt;a href=&quot;https://go.googlesource.com/proposal/+/master/design/25530-sumdb.md#checksum-database&quot; target=&quot;_blank&quot;&gt;checksum database&lt;/a&gt;, which ensures that the &lt;code&gt;go&lt;/code&gt; command always adds the same lines to everyone's &lt;code&gt;go.sum&lt;/code&gt; file. Whenever the &lt;code&gt;go&lt;/code&gt; command receives new source code, it can verify the hash of that code against this global database to make sure the hashes match, ensuring that everyone is using the same code for a given version.&lt;/p&gt;
&lt;p&gt;The checksum database is served by &lt;a href=&quot;https://sum.golang.org&quot; target=&quot;_blank&quot;&gt;sum.golang.org&lt;/a&gt;, and is built on a &lt;a href=&quot;https://research.swtch.com/tlog&quot; target=&quot;_blank&quot;&gt;Transparent Log&lt;/a&gt; (or “Merkle tree”) of hashes backed by &lt;a href=&quot;https://github.com/google/trillian&quot; target=&quot;_blank&quot;&gt;Trillian&lt;/a&gt;. The main advantage of a Merkle tree is that it is tamper proof and has properties that don’t allow for misbehavior to go undetected, which makes it more trustworthy than a simple database. The &lt;code&gt;go&lt;/code&gt; command uses this tree to check “inclusion” proofs (that a specific record exists in the log) and “consistency” proofs (that the tree hasn’t been tampered with) before adding new &lt;code&gt;go.sum&lt;/code&gt; lines to your module’s &lt;code&gt;go.sum&lt;/code&gt; file. Below is an example of such a tree.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/module-mirror-launch/tree.png&quot; width=&quot;800&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The checksum database supports &lt;a href=&quot;https://go.googlesource.com/proposal/+/master/design/25530-sumdb.md#checksum-database&quot; target=&quot;_blank&quot;&gt;a set of endpoints&lt;/a&gt; used by the &lt;code&gt;go&lt;/code&gt; command to request and verify &lt;code&gt;go.sum&lt;/code&gt; lines. The &lt;code&gt;/lookup&lt;/code&gt; endpoint provides a “signed tree head” (STH) and the requested &lt;code&gt;go.sum&lt;/code&gt; lines. The &lt;code&gt;/tile&lt;/code&gt; endpoint provides chunks of the tree called &lt;em&gt;tiles&lt;/em&gt; which the &lt;code&gt;go&lt;/code&gt; command can use for proofs. Below is an example of how the &lt;code&gt;go&lt;/code&gt; command may interact with the checksum database by doing a &lt;code&gt;/lookup&lt;/code&gt; of a module version, then requesting the tiles required for the proofs.&lt;/p&gt;
&lt;div class=&quot;image&quot;&gt;&lt;img src=&quot;https://blog.golang.org/module-mirror-launch/sumdb-protocol.png&quot; width=&quot;800&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;This checksum database allows the &lt;code&gt;go&lt;/code&gt; command to safely use an otherwise untrusted proxy. Because there is an auditable security layer sitting on top of it, a proxy or origin server can’t intentionally, arbitrarily, or accidentally start giving you the wrong code without getting caught. Even the author of a module can’t move their tags around or otherwise change the bits associated with a specific version from one day to the next without the change being detected.&lt;/p&gt;
&lt;p&gt;If you are using Go 1.12 or earlier, you can manually check a &lt;code&gt;go.sum&lt;/code&gt; file against the checksum database with &lt;a href=&quot;https://godoc.org/golang.org/x/mod/gosumcheck&quot; target=&quot;_blank&quot;&gt;gosumcheck&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;code&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ go get golang.org/x/mod/gosumcheck
$ gosumcheck /path/to/go.sum
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to verification done by the &lt;code&gt;go&lt;/code&gt; command, third-party auditors can hold the checksum database accountable by iterating over the log looking for bad entries. They can work together and gossip about the state of the tree as it grows to ensure that it remains uncompromised, and we hope that the Go community will run them.&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.3.&quot;&gt;Module Index&lt;/h4&gt;
&lt;p&gt;The module index is served by &lt;a href=&quot;https://index.golang.org&quot; target=&quot;_blank&quot;&gt;index.golang.org&lt;/a&gt;, and is a public feed of new module versions that become available through &lt;a href=&quot;https://proxy.golang.org&quot; target=&quot;_blank&quot;&gt;proxy.golang.org&lt;/a&gt;. This is particularly useful for tool developers that want to keep their own cache of what’s available in &lt;a href=&quot;https://proxy.golang.org&quot; target=&quot;_blank&quot;&gt;proxy.golang.org&lt;/a&gt;, or keep up-to-date on some of the newest modules that people are using.&lt;/p&gt;
&lt;h4 id=&quot;TOC_1.4.&quot;&gt;Feedback or bugs&lt;/h4&gt;
&lt;p&gt;We hope these services improve your experience with modules, and encourage you to &lt;a href=&quot;https://github.com/golang/go/issues/new?title=proxy.golang.org&quot; target=&quot;_blank&quot;&gt;file issues&lt;/a&gt; if you run into problems or have feedback!&lt;/p&gt;
</description>
<pubDate>Fri, 30 Aug 2019 12:10:46 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.golang.org/module-mirror-launch</dc:identifier>
</item>
<item>
<title>Dqlite – High-Availability SQLite</title>
<link>https://dqlite.io/</link>
<guid isPermaLink="true" >https://dqlite.io/</guid>
<description>&lt;h2&gt;Enterprise-grade SQL database for the Edge and IoT&lt;/h2&gt;
&lt;p&gt;Modern edge computing moves high-value applications to the edge of the network with fewer guarantees about hardware availability and management. Appliances in the cabinet or remote locations cannot be monitored, managed, or replaced very quickly, and cannot assume strict environmental controls. That makes the hardware less reliable and increases the cost of human intervention.&lt;/p&gt;
&lt;p&gt;Dqlite provides edge applications with an ultra-fast SQL database that is automatically replicated across multiple hosts and guarantees fast failover. SQLite is the world’s most widely used embedded SQL implementation. Dqlite extends SQLite with robust Raft consensus and failover semantics.&lt;/p&gt;
</description>
<pubDate>Fri, 30 Aug 2019 06:22:34 +0000</pubDate>
<dc:creator>stubish</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://dqlite.io/</dc:identifier>
</item>
<item>
<title>Verified by Twilio</title>
<link>https://www.twilio.com/blog/introducing-verified-twilio</link>
<guid isPermaLink="true" >https://www.twilio.com/blog/introducing-verified-twilio</guid>
<description>&lt;p&gt;We have big news. Trust us—you’re going to love this. At SIGNAL today, we announced Verified By Twilio to give consumers the confidence to answer the phone again. &lt;/p&gt;
&lt;p&gt;We’re partnering with leading call identification apps to help more than 200 million consumers know exactly who is calling them and why to help them determine what calls are real and needed versus those that are unwanted.&lt;/p&gt;
&lt;p&gt;Imagine a world where you receive a phone call and know exactly who it’s coming from and what they’re calling about before you press the answer button. Crazy, right? That’s the vision we’re working towards, and Verified by Twilio is one major step towards this world of trusted communications.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EBYjZl9VAAQfSNq.jpg-large.jpg&quot; class=&quot;richtext-image full-width&quot; height=&quot;600&quot; sizes=&quot;800px&quot; src=&quot;https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/EBYjZl9VAAQfSNq.jpg-large.width-800.jpg&quot; srcset=&quot;https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/EBYjZl9VAAQfSNq.jpg-large.width-800.jpg 800w, https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/EBYjZl9VAAQfSNq.jpg-large.width-1600.jpg 1200w&quot; width=&quot;800&quot;/&gt;&lt;/p&gt;
&lt;h2&gt;What Is Verified By Twilio?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://hiya.com/state-of-the-call&quot;&gt;Americans are answering&lt;/a&gt; only a little more than 50% of the calls they receive on their cell phones. Even more concern, &lt;a href=&quot;https://www.consumerreports.org/robocalls/mad-about-robocalls/&quot;&gt;70% of consumers&lt;/a&gt; don’t answer a call if the caller’s number is anonymous. While that might cut down  the number of unwanted robocalls, it also potentially prevents consumers from receiving vital communications—calls from the doctor, banks that are flagging issues, schools calling about parents’ children. Calls you &lt;em&gt;don’t&lt;/em&gt; want to miss.  &lt;/p&gt;
&lt;p&gt;Verified By Twilio is on a mission to make sure you have the information you need to make an informed decision about whether you want to answer the phone or not. Soon, you will be able to start answering  legitimate, wanted calls and avoid annoying robocalls with full transparency.&lt;/p&gt;
&lt;p&gt;“At Twilio, we want to help consumers take back their phones, so that when their phone rings, they know it's a trusted, wanted call,” said Jeff Lawson, co-founder and chief executive officer, Twilio. &lt;/p&gt;
&lt;p&gt;“A lot of work is being done in the industry to stop unwanted calls and phone scams, and we want to ensure consumers continue to receive the wanted calls. Verified By Twilio is aimed at providing consumers with the context to know who's calling so they answer the important and wanted calls happening in their lives, such as from doctors, schools, and banks.”&lt;/p&gt;
&lt;p&gt;With Verified By Twilio, every call will clearly display the business or organization that is calling and the reason for the call. For example, if an airline company is trying to you about a canceled flight, as the call comes in, you’ll see the name of the airline with a short note indicating why they are calling. With that information, you can make the decision about stepping out of a meeting or putting another call on hold to answer this critically important call.&lt;/p&gt;
&lt;p&gt;To power Verified By Twilio, we’re creating a repository to host verified information of businesses that will populate the screens as a call comes in. Through the programmability of the Twilio platform, businesses will also be able to assign a purpose for each call to give further context. Both efforts will result in calls that are verified as legitimate and indeed coming from who is displayed on the phone screen.&lt;/p&gt;
&lt;p&gt;This is just the first phase of our broader initiative to build greater trust in traditional communications.&lt;/p&gt;&lt;p&gt;To learn more visit &lt;a href=&quot;https://www.twilio.com/verified-calls&quot;&gt;twilio.com/verified-by-twilio&lt;/a&gt;&lt;/p&gt;

</description>
<pubDate>Fri, 30 Aug 2019 02:08:45 +0000</pubDate>
<dc:creator>HugoHobling</dc:creator>
<og:title>Introducing Verified by Twilio</og:title>
<og:url>https://www.twilio.com/blog/introducing-verified-twilio</og:url>
<og:type>article</og:type>
<og:image>https://s3.amazonaws.com/com.twilio.prod.twilio-docs/original_images/Signal_Day_2-1049.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.twilio.com/blog/introducing-verified-twilio</dc:identifier>
</item>
<item>
<title>A deep dive into iOS Exploit chains found in the wild</title>
<link>https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html</link>
<guid isPermaLink="true" >https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html</guid>
<description>&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Posted by Ian Beer, Project Zero&lt;/span&gt;&lt;/div&gt;
&lt;strong id=&quot;docs-internal-guid-5c0059b4-7fff-4f74-0c43-3ceb2501fd34&quot;&gt;&lt;br/&gt;&lt;/strong&gt;&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Project Zero’s mission is to make 0-day hard. We often work with other companies to find and report security vulnerabilities, with the ultimate goal of advocating for structural security improvements in popular systems to help protect people everywhere.  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Earlier this year Google's Threat Analysis Group (TAG) discovered a small collection of hacked websites. The hacked sites were being used in indiscriminate watering hole attacks against their visitors, using iPhone 0-day.  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There was no target discrimination; simply visiting the hacked site was enough for the exploit server to attack your device, and if it was successful, install a monitoring implant. We estimate that these sites receive thousands of visitors per week.  &lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;TAG was able to collect five separate, complete and unique iPhone exploit chains, covering almost every version from iOS 10 through to the latest version of iOS 12. This indicated a group making a sustained effort to hack the users of iPhones in certain communities over a period of at least two years.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I’ll investigate what I assess to be the root causes of the vulnerabilities and discuss some insights we can gain into Apple's software development lifecycle. The root causes I highlight here are not novel and are often overlooked: we'll see cases of code which seems to have never worked, code that likely skipped QA or likely had little testing or review before being shipped to users.&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;

&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-97vEtS5TpiM/XWfds8hYAyI/AAAAAAAANNw/a0YVvaxU2xsHxtG0rXzH-CuT1M1_Iq-hgCLcBGAs/s1600/ios_timeline.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img alt=&quot;This diagram shows a timeline from 13 September 2016 through 22 January 2019 and a breakdown during that period of which versions of iOS where supported by which exploit chain. The only gap appears between 12 December 2016 and 27 March 2017. The iPhone 8, 8+ and X are supported from their launch version of iOS (iOS 11) but the Xr and Xs aren't.&quot; border=&quot;0&quot; data-original-height=&quot;620&quot; data-original-width=&quot;1600&quot; height=&quot;246&quot; src=&quot;https://1.bp.blogspot.com/-97vEtS5TpiM/XWfds8hYAyI/AAAAAAAANNw/a0YVvaxU2xsHxtG0rXzH-CuT1M1_Iq-hgCLcBGAs/s640/ios_timeline.png&quot; title=&quot;&quot; width=&quot;640&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt; &lt;span&gt;Working with TAG, we discovered exploits for a total of fourteen vulnerabilities across the five exploit chains: seven for the iPhone’s web browser, five for the kernel and two separate sandbox escapes. Initial analysis indicated that at least one of the privilege escalation chains was still 0-day and unpatched at the time of discovery (CVE-2019-7287 &amp;amp; CVE-2019-7286). We reported these issues to Apple with a 7-day deadline on 1 Feb 2019, which resulted in the out-of-band release of iOS 12.1.4 on 7 Feb 2019. We also shared the complete details with Apple, which were&lt;/span&gt; &lt;a href=&quot;https://support.apple.com/en-us/HT209520&quot;&gt;&lt;span&gt;disclosed publicly on 7 Feb 2019&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Now, after several months of careful analysis of almost every byte of every one of the exploit chains, I’m ready to share these insights into the real-world workings of a campaign exploiting iPhones en masse.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;This post will include:&lt;/span&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li dir=&quot;ltr&quot;&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;detailed write-ups of all five privilege escalation exploit chains;&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;a teardown of the implant used, including a demo of the implant running on my own devices, talking to a reverse-engineered command and control server and demonstrating the capabilities of the implant to steal private data like iMessages, photos and GPS location in real-time, and&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;analysis by fellow team member Samuel Groß on the browser exploits used as initial entry points.&lt;/span&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Let’s also keep in mind that this was a failure case for the attacker: for this one campaign that we’ve seen, there are almost certainly others that are yet to be seen.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Real users make risk decisions based on the public perception of the security of these devices. The reality remains that&lt;/span&gt; &lt;span&gt;security protections will never eliminate the risk of attack if you're being targeted.&lt;/span&gt; &lt;span&gt;To be targeted might mean simply being born in a certain geographic region or being part of a certain ethnic group. All that users can do is be conscious of the fact that mass exploitation still exists and behave accordingly; treating their mobile devices as both integral to their modern lives, yet also as devices which when compromised, can upload their every action into a database to potentially be used against them.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I hope to guide the general discussion around exploitation away from a focus on the the&lt;/span&gt; &lt;a href=&quot;https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/&quot;&gt;&lt;span&gt;million dollar dissident&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and towards discussion of the marginal cost for monitoring the&lt;/span&gt; &lt;span&gt;n+1'th potential future dissident&lt;/span&gt;&lt;span&gt;. I shan't get into a discussion of whether these exploits cost $1 million, $2 million, or $20 million. I will instead suggest that all of those price tags seem low for the capability to target and monitor the private activities of entire populations in real time.&lt;/span&gt;&lt;br/&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I recommend that these posts are read in the following order:&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;ol&gt;&lt;li dir=&quot;ltr&quot;&gt;

&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;

&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;

&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;

&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;

&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;

&lt;/li&gt;
&lt;li dir=&quot;ltr&quot;&gt;

&lt;/li&gt;
&lt;/ol&gt;&lt;br/&gt;
</description>
<pubDate>Fri, 30 Aug 2019 01:22:57 +0000</pubDate>
<dc:creator>troydavis</dc:creator>
<og:url>https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html</og:url>
<og:title>A very deep dive into iOS Exploit chains found in the wild</og:title>
<og:description>Posted by Ian Beer, Project Zero Project Zero’s mission is to make 0-day hard. We often work with other companies to find and report se...</og:description>
<og:image>https://1.bp.blogspot.com/-97vEtS5TpiM/XWfds8hYAyI/AAAAAAAANNw/a0YVvaxU2xsHxtG0rXzH-CuT1M1_Iq-hgCLcBGAs/w1200-h630-p-k-no-nu/ios_timeline.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html</dc:identifier>
</item>
</channel>
</rss>