<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Open source collaborative text editors</title>
<link>https://juretriglav.si/open-source-collaborative-text-editors/</link>
<guid isPermaLink="true" >https://juretriglav.si/open-source-collaborative-text-editors/</guid>
<description>&lt;img src=&quot;https://juretriglav.si/content/images/2019/04/opensourcecollaborativetexteditorsillustration-1.svg&quot; class=&quot;kg-image&quot;/&gt;&lt;p&gt;For years now I've had this itch, trying to find the &quot;perfect&quot; collaborative text editor. But not just any collaborative text editor, oh no, my speciality is finding (well, at least looking for) &lt;strong&gt;open source real-time collaborative web-based rich text editors&lt;/strong&gt; (i.e. not just plain text, but structured content as well). The focus of this post is thus on this quite niche category of open source tools and the tech that powers them, but if your interests are wider, you can check out this &lt;a href=&quot;https://github.com/JefMari/awesome-wysiwyg&quot;&gt;constantly updated list of editors&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Story time.&lt;/strong&gt; Now, I've gone &lt;em&gt;off the deep end&lt;/em&gt; üé∂ and dove into the virtually endless pool of resources on real-time collaboration many times before, and the path down, that invigorating plunge towards the bottom of the pool, has become quite familiar to me. Usually it starts with a burst of initial excitement and amazement (&lt;em&gt;the jump&lt;/em&gt;) with the newly available low-level technologies and research papers, which is followed by a sense of being overwhelmed and wanting to surface a bit (&lt;em&gt;hey, this pool is pretty deep&lt;/em&gt;) and explore the applied research side of the equation, followed by a period of where my outlook can perhaps be best described with: &quot;am I really too dumb for this stuff?&quot; (quite likely) as invariably the docs, demos and code don't quite match up or make sense, or the collaboration component on the server doesn't start, or there's an edge-case with more than two users typing in the same word, or... you get where I'm going (&lt;em&gt;surfaced,&lt;/em&gt; &lt;em&gt;gasping for air&lt;/em&gt;). It's difficult to pick up the subject again after this, so the next phase is a sort of winter of related ideas, being dormant and letting the harsh weather pass, when I usually let the half-working code sit for months... or years. &lt;em&gt;Until we meet again, conflict-free replicated data type!&lt;/em&gt;&lt;/p&gt;
&lt;img src=&quot;https://juretriglav.si/content/images/2019/04/Frame.svg&quot; class=&quot;kg-image&quot;/&gt;Figure 1: The dive.
&lt;p&gt;Case in point is that time in 2017 I was so excited by the prospects of an algorithm (a type of &lt;a href=&quot;http://archagon.net/blog/2018/03/24/data-laced-with-history/#conflict-free-replicated-data-types&quot;&gt;CRDT&lt;/a&gt;) described in a &lt;a href=&quot;http://dx.doi.org/10.1016/j.aei.2016.10.005&quot;&gt;research paper&lt;/a&gt;, that I took a few days and implemented it &lt;a href=&quot;https://github.com/jure/rgass&quot;&gt;in JavaScript&lt;/a&gt;, only to find out that the paper itself has an edge-case it isn't addressing (well... maybe?). I've reached out to the author at the time and got no response, and found that this particular edge-case has been addressed in a similar algorithm by a different team, but ah, they're subtly different implementations, maybe I could port the Lisp...WAIT A MINUTE! What's going on here? I certainly do not want to be implementing a novel algorithm from a research paper and fixing its issues! What am I doing, how did I get here? &lt;strong&gt;Let's rewind!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What I (and probably you too, dear reader) really want is a &lt;strong&gt;plug-and-play editor usable in a product&lt;/strong&gt;. One that solves the problem of real-time collaboration for you. One that enables a few connected users, thousands of miles apart, to edit a structured document by pressing keys on their keyboards and see each other's changes displayed on their screens. That's it. &lt;em&gt;Editors are hard, though...&lt;/em&gt; and I have never been able to find such a tool.&lt;/p&gt;
&lt;p&gt;Until now.&lt;/p&gt;
&lt;p&gt;It's 2019 (&lt;em&gt;the itch is back with a vigour&lt;/em&gt;), and this time not only has a magical editor appeared, but there are actually &lt;strong&gt;two contenders&lt;/strong&gt; to fulfil the long-sought specification. Initially, I wanted to fly with you above the landscape and list pretty much every collaborative text editor out there, but it seems like that &lt;a href=&quot;https://duckduckgo.com/?q=collaborative+open+source+text+editor&quot;&gt;wouldn't add much value&lt;/a&gt;. Instead, let us focus on the two editors that both could be &quot;the one&quot;.&lt;/p&gt;
&lt;p&gt;That's still two editors, a choice to make ‚Äì and it would be nice to see somewhat objectively which one is a better fit. I propose a deeply scientific grading system with the following categories (using kiwis as a standard unit of goodness):&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Open&lt;/strong&gt; license: adds 1 kiwi ü•ù (this is actually an exclusion criterion as well)&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;images&lt;/strong&gt;: adds 1 kiwi ü•ù&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;tables&lt;/strong&gt;: adds 1 kiwi ü•ù&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;lists&lt;/strong&gt;: adds 1 kiwi ü•ù&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;math&lt;/strong&gt;: adds 1 kiwi ü•ù&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;real-time collaboration&lt;/strong&gt;: adds 1 kiwi ü•ù&lt;/li&gt;
&lt;li&gt;Available required &lt;strong&gt;server bits&lt;/strong&gt;: 1 kiwi ü•ù&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;remote cursors&lt;/strong&gt; and selections: 1 kiwi ü•ù (so you can see other users' cursors)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offline&lt;/strong&gt; support: 1 kiwi ü•ù (this is quite tricky to determine)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Used&lt;/strong&gt; in production: 1 kiwi ü•ù&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile&lt;/strong&gt; support: 1 kiwi ü•ù&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;So, with the scoring system above, an editor can be given a maximum of 11 kiwi units of goodness. Let's get to it!&lt;/p&gt;

&lt;img src=&quot;https://juretriglav.si/content/images/2019/04/image.png&quot; class=&quot;kg-image&quot;/&gt;Figure 2: CKEditor 5 interface (one possible variant). From: &lt;a href=&quot;https://ckeditor.com/docs/ckeditor5/latest/builds/guides/overview.html#available-builds&quot;&gt;https://ckeditor.com/docs/ckeditor5/latest/builds/guides/overview.html#available-builds&lt;/a&gt;
&lt;p&gt;Let's start with CKEditor 5, a newly released editor from a &lt;a href=&quot;https://ckeditor.com/&quot;&gt;long line of quality editors&lt;/a&gt;. CKEditor 5 is beautiful. Now I know, I know, it's not one of the criteria, neither does it &lt;em&gt;really&lt;/em&gt; matter (and we might even not agree), but I just had to say it. This editor promises to take a lot of the kiwis for itself: it is licensed under GPL (&lt;a href=&quot;https://github.com/ckeditor/ckeditor5/issues/991&quot;&gt;some discussion of limitations here&lt;/a&gt;, (+1), supports images, tables, lists (+3), math is supported with a plugin (+1), and it &lt;strong&gt;&lt;a href=&quot;https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/real-time-collaboration/real-time-collaboration.html?docId=edef3b3c3cda4a0d2e5d85433e8815cea&quot;&gt;supports real-time collaboration&lt;/a&gt;&lt;/strong&gt; with remote cursor and selections too (+2). The team behind CKEditor has written an amazing &lt;a href=&quot;https://ckeditor.com/blog/Lessons-learned-from-creating-a-rich-text-editor-with-real-time-collaboration/&quot;&gt;in-depth blog post about how they've implemented it&lt;/a&gt; using operational transformations.&lt;/p&gt;
&lt;p&gt;However, I was &lt;strong&gt;unable to find the required server implementation&lt;/strong&gt; for the real-time collaboration to work, and all documentation points to their cloud services as a required (and paid) component, even in GPL-compatible projects.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://news.ycombinator.com/item?id=18232655&quot;&gt;level of offline support is difficult to determine&lt;/a&gt;, but it looks like it's not entirely there (e.g. briefly interrupted connectivity is fine, but there might be dragons if you're offline for days). Half a kiwi, I guess? Same goes for mobile support, &lt;a href=&quot;https://news.ycombinator.com/item?id=18232865&quot;&gt;work is underway for full support there as well&lt;/a&gt; (+0.5). And the last point, CKEditor is surely used in production, but I was unable to find a list of products built with it (+0.5).&lt;/p&gt;
&lt;p&gt;A nice editor, but the lack of an available open source collaboration server is a bummer indeed.&lt;/p&gt;
&lt;p&gt;Total goodness: 8.5/11 ü•ùü•ùü•ùü•ùü•ùü•ùü•ùü•ù‚ö™Ô∏è‚ö™Ô∏è &lt;em&gt;(just realised I'm actually using half a kiwi to represent a whole, hmm...)&lt;/em&gt;&lt;/p&gt;

&lt;img src=&quot;https://juretriglav.si/content/images/2019/04/Screenshot-2019-04-21-at-01.03.02.png&quot; class=&quot;kg-image&quot;/&gt;Figure 3: Atlassian's Atlaskit's Editor
&lt;p&gt;About a year or so ago, &lt;a href=&quot;https://atlaskit.atlassian.com/&quot;&gt;Atlassian's Atlaskit design system&lt;/a&gt; was launched and open sourced, and with it came a &lt;em&gt;lot&lt;/em&gt; of goodies, including a fully-fledged production ready editor, the &lt;a href=&quot;https://prosemirror.net/&quot;&gt;ProseMirror&lt;/a&gt;-based Atlaskit Editor. &lt;em&gt;I really feel like this could be the editor we've been searching for!&lt;/em&gt; ü§ûThe editor is licensed under the Apache 2.0 license, which is arguably a &lt;a href=&quot;https://tldrlegal.com/license/apache-license-2.0-%28apache-2.0%29&quot;&gt;very permissive open source license&lt;/a&gt; (+1 kiwi). It not only supports images, tables, and lists, it supports them exceptionally well (+3 kiwis)! The table implementation, something sorely missing from the majority of editors out there, is especially exceptionally well done:&lt;/p&gt;
&lt;img src=&quot;https://juretriglav.si/content/images/2019/05/table-atlaskit.gif&quot; class=&quot;kg-image&quot;/&gt;Figure 4: Table management in Atlaskit Editor
&lt;p&gt;Math, unfortunately, isn't supported, but since the editor itself is ProseMirror-based, it shouldn't be too difficult to add an &lt;a href=&quot;https://pboysen.github.io/&quot;&gt;existing solution to it&lt;/a&gt; (+0.5). It definitely supports real-time collaboration with remote cursors and selections (+2), with one of the best implementation of its UI bits I've ever seen (e.g. remote cursors dimmed if overlapping with your own and other lovely details). Additionally, from my testing offline supports seems to be very sturdy indeed (+1) ‚Äì this is likely due to the &lt;a href=&quot;http://marijnhaverbeke.nl/blog/collaborative-editing.html&quot;&gt;central authority approach that ProseMirror uses for collaboration&lt;/a&gt;. Wow, we're already up to 7.5 kiwis, and we're not close to done yet! Onwards! Unfortunately, right about here's where we get a bit of a reality check. Just like with CKEditor, there are &lt;strong&gt;no available server bits for real-time collaboration&lt;/strong&gt;. Bummer. Major bummer. &lt;em&gt;I do wonder if there's something we can do about that...&lt;/em&gt; Anyway, if we continue making our way down the ranking criteria, all I see is kiwis: it is absolutely used in production (by millions of users), and it does have mobile support (+2). Just as I was about to declare a winner (with a grand total of 9.5 kiwis) and publish this post, &lt;a href=&quot;https://opensource.stackexchange.com/questions/7488/atlaskit-in-commercial-projects&quot;&gt;something else&lt;/a&gt; &lt;a href=&quot;https://community.developer.atlassian.com/t/license-to-use-atlaskit/23541&quot;&gt;came up&lt;/a&gt;. Turns out the logos and icons used in the editor, and a lot of the other Atlaskit components, are licensed under the very restrictive &lt;a href=&quot;https://atlassian.design/server/license/&quot;&gt;ADG license&lt;/a&gt;, which states that you cannot use them outside of the Atlassian universe. The icons, in particular, are extensively used and tightly integrated into the editor. Major bummer number 2 and I'm taking that kiwi away. We're back down to 8.5, for those counting, which means the race is now even. And finished.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But what if we could also do something about those icons...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I thought it would be too unfortunate if we were, after all these recent advancements in the state of the art for collaborative text editors, still left with two editors, that despite their amazing features, we simply couldn't use in open source projects ‚Äì either due to licensing issues, lack of openly available building blocks, or both.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So first I built the server parts&lt;/strong&gt; (backed by PostgreSQL, powered by the PubSweet framework and a mix of REST/WebSockets), and the code for that is available here: &lt;a href=&quot;https://github.com/jure/pubsweet-blogger/blob/master/server/component-atlaskit-collab/src/collab.js&quot;&gt;https://github.com/jure/pubsweet-blogger/blob/master/server/component-atlaskit-collab/src/collab.js&lt;/a&gt;. It's quite simple but gets the job done and provides document persistence and a real-time communication channel. It's amazing that due to the vast ProseMirror community, I was able to piece together how this is supposed to work without having an exact interface specification (+1 kiwi).&lt;/p&gt;
&lt;p&gt;And then I &lt;strong&gt;replaced the icons&lt;/strong&gt; used by the editor with icons from the &lt;a href=&quot;https://feathericons.com/&quot;&gt;Feather set&lt;/a&gt;. Specifically, this amounted to replacing three packages, and since the ADG license prohibits any sort of derivative work, among other things, these packages had to be redone from scratch. There's probably some functionality lost due to this, mainly in terms of accessibility, but it provides a good open base for further development. For example, the icons themselves are &lt;a href=&quot;https://github.com/jure/pubsweet-blogger/blob/master/app/components/component-atlaskit-editor/icon/build.js&quot;&gt;missing better alternatives in some cases&lt;/a&gt;, perhaps if you're looking to contribute to this project, that's a good first issue (+1 kiwi)!&lt;/p&gt;
&lt;p&gt;What all this means is that we're now only half a kiwi away from a perfect score (but we can probably sort math), something I did not believe was possible when starting on this journey. It also means we have a clear winner in this battle, and ultimately Atlaskit's Editor was victorious &lt;strong&gt;due to the diverse, open and helpful ProseMirror community&lt;/strong&gt;. Check out the &lt;a href=&quot;https://github.com/jure/pubsweet-blogger&quot;&gt;project's docs for instructions&lt;/a&gt; on how to start playing around. I do believe that if you're starting a new project and you're considering having real-time collaboration as a feature, this is a great place to start exploring, even with all the &lt;a href=&quot;https://github.com/jure/pubsweet-blogger/blob/master/README.md&quot;&gt;caveats&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width=&quot;480&quot; height=&quot;270&quot; src=&quot;https://www.youtube.com/embed/0cLAOhFp9ug?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;Figure 5: A demo of Atlaskit Editor's real-time editing capabilities
&lt;p&gt;Total (enhanced) goodness: 10.5/11 ü•ùü•ùü•ùü•ùü•ùü•ùü•ùü•ùü•ùü•ùÔ∏è‚ö™Ô∏è&lt;/p&gt;

&lt;p&gt;There are two editors I'd like to point out here, even though they don't have ready-to-go real-time collaboration built in right now, as they're both built on top of libraries that have support for it, and adding it is either possible, planned or both.&lt;/p&gt;
&lt;img src=&quot;https://juretriglav.si/content/images/2019/04/Screenshot-2019-04-08-at-09.57.46.png&quot; class=&quot;kg-image&quot;/&gt;Figure 6: Wax editor (ProseMirror-based word processor)
&lt;p&gt;First is &lt;strong&gt;Wax&lt;/strong&gt; (named after the ancient wax tablets), the Coko Foundation's editor ‚Äì nay, &lt;a href=&quot;https://www.adamhyde.net/html-word-processors/&quot;&gt;word processor&lt;/a&gt; ‚Äì built first on top of the &lt;a href=&quot;https://github.com/substance/substance&quot;&gt;Substance library&lt;/a&gt; (&lt;a href=&quot;https://gitlab.coko.foundation/wax/wax&quot;&gt;repo&lt;/a&gt;), and now being rebuilt with &lt;a href=&quot;https://prosemirror.net/&quot;&gt;ProseMirror&lt;/a&gt; (&lt;a href=&quot;https://gitlab.coko.foundation/wax/wax-prosemirror&quot;&gt;repo&lt;/a&gt;), is absolutely packed with features. They're not exactly the same features that we're giving kiwis for, but they're great features nonetheless. Wax, initially built for a &lt;a href=&quot;https://editoria.pub/&quot;&gt;book production app&lt;/a&gt;, has support for notes (numbered annotations common in books), track changes, find and replace, ornaments, and others. Maybe we could give oranges üçäfor these? In that case, Wax would score 4 kiwis (open license, images, lists, used in production) and a couple of oranges, maybe 4. ü•ùü•ùü•ùü•ùüçäüçäüçäüçä. That's a lot of fruit!&lt;/p&gt;

&lt;img src=&quot;https://juretriglav.si/content/images/2019/05/Screenshot-2019-05-07-at-02.50.06-2.png&quot; class=&quot;kg-image&quot;/&gt;Figure 7: Texture, a Substance-based editor
&lt;p&gt;And last but not least, we have &lt;a href=&quot;http://substance.io/texture/&quot;&gt;Texture&lt;/a&gt;, a very specific, professional (but open source) editor for producing scientific content in JATS format (an XML standard for journal articles). If we do the fruit counting exercise here, we'll almost certainly run out of fingers: Open license, tables, images, deep support for math, references and cross-references, lists, metadata support, the list goes on! ü•ùüçäüçéTo reiterate, &lt;strong&gt;both Wax and Texture are amazing editors&lt;/strong&gt;, and the only thing that's keeping them from the top kiwi rankings is the lack of real-time collaboration features, which this post focuses on.&lt;/p&gt;

&lt;p&gt;If you're building a system where real-time collaboration in an editor is a key component, you've chosen the right time to do it. In the last year, the landscape has matured and there are &lt;a href=&quot;https://github.com/jure/pubsweet-blogger/&quot;&gt;almost&lt;/a&gt; plug-and-play open solutions out there. With your help, perhaps this time next year we'll have a whole suite of open projects to learn from. And perhaps, just perhaps, we'll also be using tools built on top of these open layers, without even knowing it. ü•ù&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Join the discussion on &lt;a href=&quot;https://news.ycombinator.com/item?id=19845776&quot;&gt;Hacker News&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/juretriglav/status/1125585580014940160&quot;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Data Laced with History: Causal Trees &amp;amp; Operational CRDTs: &lt;a href=&quot;http://archagon.net/blog/2018/03/24/data-laced-with-history/#conflict-free-replicated-data-types&quot;&gt;http://archagon.net/blog/2018/03/24/data-laced-with-history/#conflict-free-replicated-data-types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lessons learned from creating a rich-text editor with real-time collaboration: &lt;a href=&quot;https://ckeditor.com/blog/Lessons-learned-from-creating-a-rich-text-editor-with-real-time-collaboration/&quot;&gt;https://ckeditor.com/blog/Lessons-learned-from-creating-a-rich-text-editor-with-real-time-collaboration/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Case for HTML Word Processors: &lt;a href=&quot;https://www.adamhyde.net/html-word-processors/&quot;&gt;https://www.adamhyde.net/html-word-processors/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Collaborative Editing in ProseMirror: &lt;a href=&quot;http://marijnhaverbeke.nl/blog/collaborative-editing.html&quot;&gt;http://marijnhaverbeke.nl/blog/collaborative-editing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
<pubDate>Tue, 07 May 2019 02:06:43 +0000</pubDate>
<dc:creator>juretriglav</dc:creator>
<og:type>article</og:type>
<og:title>Open source collaborative text editors</og:title>
<og:description>The best open source collaborative text editors and the tech behind them.</og:description>
<og:url>https://juretriglav.si/open-source-collaborative-text-editors/</og:url>
<og:image>https://juretriglav.si/content/images/2019/05/opensourcecollaborativeeditorsillustration-1.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://juretriglav.si/open-source-collaborative-text-editors/</dc:identifier>
</item>
<item>
<title>Chinese Spies Got the NSA‚Äôs Hacking Tools, and Used Them for Attacks</title>
<link>https://www.nytimes.com/2019/05/06/us/politics/china-hacking-cyber.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/05/06/us/politics/china-hacking-cyber.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Chinese intelligence agents acquired National Security Agency hacking tools and repurposed them in 2016 to attack American allies and private companies in Europe and Asia, a leading cybersecurity firm has discovered. The episode is the latest evidence that the United States has lost control of key parts of its cybersecurity arsenal.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Based on the timing of the attacks and clues in the computer code, researchers with the firm Symantec believe the Chinese did not steal the code but captured it from an N.S.A. attack on their own computers ‚Äî like a gunslinger who grabs an enemy‚Äôs rifle and starts blasting away.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The Chinese action shows how proliferating cyberconflict is creating a digital wild West with few rules or certainties, and how difficult it is for the United States to keep track of the malware it uses to break into foreign networks and attack adversaries‚Äô infrastructure.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The losses have touched off a debate within the intelligence community over whether the United States should continue to develop some of the world‚Äôs most high-tech, stealthy cyberweapons if it is unable to keep them under lock and key.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The Chinese hacking group that co-opted the N.S.A.‚Äôs tools is considered by the agency‚Äôs analysts to be among the most dangerous Chinese contractors it tracks, according to a classified agency memo reviewed by The New York Times. The group is responsible for numerous attacks on some of the most sensitive defense targets inside the United States, including space, satellite and nuclear propulsion technology makers.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Now, Symantec‚Äôs discovery, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.symantec.com/blogs/threat-intelligence/buckeye-windows-zero-day-exploit&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;unveiled on Monday&lt;/a&gt;, suggests that the same Chinese hackers the agency has trailed for more than a decade have turned the tables on the agency.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Some of the same N.S.A. hacking tools acquired by the Chinese were later dumped on the internet &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2017/11/12/us/nsa-shadow-brokers.html?module=inline&quot; title=&quot;&quot;&gt;by a still-unidentified group that calls itself the Shadow Brokers&lt;/a&gt; and used by Russia and North Korea in devastating global attacks, although there appears to be no connection between China‚Äôs acquisition of the American cyberweapons and the Shadow Brokers‚Äô later revelations.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But Symantec‚Äôs discovery &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.symantec.com/blogs/threat-intelligence/buckeye-windows-zero-day-exploit&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;provides the first evidence&lt;/a&gt; that Chinese state-sponsored hackers acquired some of the tools months before the Shadow Brokers first appeared on the internet in August 2016.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Repeatedly over the past decade, American intelligence agencies have had their hacking tools and details about highly classified cybersecurity programs resurface in the hands of other nations or criminal groups.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The N.S.A. used sophisticated malware to destroy Iran‚Äôs nuclear centrifuges ‚Äî and then saw the same code proliferate around the world, doing damage to random targets, including American business giants like Chevron. Details of secret American cybersecurity programs were disclosed to journalists by Edward J. Snowden, a former N.S.A. contractor now living in exile in Moscow. A collection of C.I.A. cyberweapons, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/06/18/us/politics/charges-cia-breach-vault-7.html?module=inline&quot; title=&quot;&quot;&gt;allegedly leaked by an insider&lt;/a&gt;, was posted on WikiLeaks.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;‚ÄúWe‚Äôve learned that you cannot guarantee your tools will not get leaked and used against you and your allies,‚Äù said Eric Chien, a security director at Symantec.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Now that nation-state cyberweapons have been leaked, hacked and repurposed by American adversaries, Mr. Chien added, it is high time that nation states ‚Äúbake that into‚Äù their analysis of the risk of using cyberweapons ‚Äî and the very real possibility they will be reassembled and shot back at the United States or its allies.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In the latest case, Symantec researchers are not certain exactly how the Chinese obtained the American-developed code. But they know that Chinese intelligence contractors used the repurposed American tools to carry out cyberintrusions in at least five countries: Belgium, Luxembourg, Vietnam, the Philippines and Hong Kong. The targets included scientific research organizations, educational institutions and the computer networks of at least one American government ally.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;One attack on a major telecommunications network may have given Chinese intelligence officers access to hundreds of thousands or millions of private communications, Symantec said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Symantec did not explicitly name China in its research. Instead, it identified the attackers as the Buckeye group, Symantec‚Äôs own term for hackers that the Department of Justice and several other cybersecurity firms have identified as a Chinese Ministry of State Security contractor operating out of Guangzhou.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Because cybersecurity companies operate globally, they often concoct their own nicknames for government intelligence agencies to avoid offending any government; Symantec and other firms refer to N.S.A. hackers as the Equation group. Buckeye is also referred to as APT3, for Advanced Persistent Threat, and other names.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In 2017, the Justice Department announced &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.justice.gov/opa/pr/us-charges-three-chinese-hackers-who-work-internet-security-firm-hacking-three-corporations&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;the indictment of three Chinese hackers&lt;/a&gt; in the group Symantec calls Buckeye. While prosecutors did not assert that the three were working on behalf of the Chinese government, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.recordedfuture.com/chinese-mss-behind-apt3/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;independent researchers&lt;/a&gt; and the classified N.S.A. memo that was reviewed by The Times made clear the group contracted with the Ministry of State Security and had carried out sophisticated attacks on the United States.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;A &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://media.defense.gov/2019/May/02/2002127082/-1/-1/1/2019_CHINA_MILITARY_POWER_REPORT.pdf&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Pentagon report about Chinese military competition&lt;/a&gt;, issued last week, describes Beijing as among the most skilled and persistent players in military, intelligence and commercial cyberoperations, seeking ‚Äúto degrade core U.S. operational and technological advantages.‚Äù&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In this case, however, the Chinese simply seem to have spotted an American cyberintrusion and snatched the code, often developed at huge expense to American taxpayers.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Symantec discovered that as early as March 2016, the Chinese hackers were using tweaked versions of two N.S.A. tools, called Eternal Synergy and Double Pulsar, in their attacks. Months later, in August 2016, the Shadow Brokers released their first samples of stolen N.S.A. tools, followed by their April 2017 internet dump of its entire collection of N.S.A. exploits.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Symantec researchers noted that there were many previous instances in which malware discovered by cybersecurity researchers was released publicly on the internet and subsequently grabbed by spy agencies or criminals and used for attacks. But they did not know of a precedent for the Chinese actions in this case ‚Äî covertly capturing computer code used in an attack, then co-opting it and turning it against new targets.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;‚ÄúThis is the first time we‚Äôve seen a case ‚Äî that people have long referenced in theory ‚Äî of a group recovering unknown vulnerabilities and exploits used against them, and then using these exploits to attack others,‚Äù Mr. Chien said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The Chinese appear not to have turned the weapons back against the United States, for two possible reasons, Symantec researchers said. They might assume Americans have developed defenses against their own weapons, and they might not want to reveal to the United States that they had stolen American tools.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;For American intelligence agencies, Symantec‚Äôs discovery presents a kind of worst-case scenario that United States officials have said they try to avoid using a White House program known as the Vulnerabilities Equities Process.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Under that process, started in the Obama administration, a White House cybersecurity coordinator and representatives from various government agencies weigh the trade-offs of keeping the American stockpile of undisclosed vulnerabilities secret. Representatives debate the stockpiling of those vulnerabilities for intelligence gathering or military use against the very real risk that they could be discovered by an adversary like the Chinese and used to hack Americans.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The Shadow Brokers‚Äô release of the N.S.A.‚Äôs most highly coveted hacking tools in 2016 and 2017 forced the agency to turn over its arsenal of software vulnerabilities to Microsoft for patching and to shut down some of the N.S.A.‚Äôs most sensitive counterterrorism operations, two former N.S.A. employees said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The N.S.A.‚Äôs tools were picked up by North Korean and Russian hackers and used for attacks that crippled the British health care system, shut down operations at the shipping corporation Maersk and cut short critical supplies of a vaccine manufactured by Merck. In Ukraine, the Russian attacks paralyzed critical Ukrainian services, including the airport, Postal Service, gas stations and A.T.M.s.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;‚ÄúNone of the decisions that go into the process are risk free. That‚Äôs just not the nature of how these things work,‚Äù said Michael Daniel, the president of the Cyber Threat Alliance, who previously was cybersecurity coordinator for the Obama administration. ‚ÄúBut this clearly reinforces the need to have a thoughtful process that involves lots of different equities and is updated frequently.‚Äù&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Beyond the nation‚Äôs intelligence services, the process involves agencies like the Department of Health and Human Services and the Treasury Department that want to ensure N.S.A. vulnerabilities will not be discovered by adversaries or criminals and turned back on American infrastructure, like hospitals and banks, or interests abroad.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;That is exactly what appears to have happened in Symantec‚Äôs recent discovery, Mr. Chien said. In the future, he said, American officials will need to factor in the real likelihood that their own tools will boomerang back on American targets or allies. An N.S.A. spokeswoman said the agency had no immediate comment on the Symantec report.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-53u6y8&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;One other element of Symantec‚Äôs discovery troubled Mr. Chien. He noted that even though the Buckeye group went dark after the Justice Department indictment of three of its members in 2017, the N.S.A.‚Äôs repurposed tools continued to be used in attacks in Europe and Asia through last September.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;‚ÄúIs it still Buckeye?‚Äù Mr. Chien asked. ‚ÄúOr did they give these tools to another group to use? That is a mystery. People come and go. Clearly the tools live on.‚Äù&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 23:50:42 +0000</pubDate>
<dc:creator>tysone</dc:creator>
<og:url>https://www.nytimes.com/2019/05/06/us/politics/china-hacking-cyber.html</og:url>
<og:type>article</og:type>
<og:title>How Chinese Spies Got the N.S.A.‚Äôs Hacking Tools, and Used Them for Attacks</og:title>
<og:image>https://static01.nyt.com/images/2019/05/06/us/politics/06dc-hack/merlin_63424340_1b67f0d3-4117-4edc-a51b-34ed5ecd6e42-facebookJumbo.jpg</og:image>
<og:description>The latest case of cyberweapons escaping American control raises questions about the United States‚Äô expensive and dangerous digital arsenal.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/05/06/us/politics/china-hacking-cyber.html</dc:identifier>
</item>
<item>
<title>Microsoft is going to ship a full Linux kernel in Windows 10</title>
<link>https://www.theverge.com/2019/5/6/18534687/microsoft-windows-10-linux-kernel-feature</link>
<guid isPermaLink="true" >https://www.theverge.com/2019/5/6/18534687/microsoft-windows-10-linux-kernel-feature</guid>
<description>&lt;p id=&quot;iDxz0y&quot;&gt;Microsoft has surprised many in the Linux developer community in recent years. Surprises have included bringing things like the &lt;a href=&quot;https://www.theverge.com/2016/3/30/11331014/microsoft-windows-linux-ubuntu-bash&quot;&gt;Bash shell to Windows&lt;/a&gt;, or &lt;a href=&quot;https://www.theverge.com/2017/12/14/16775764/microsoft-windows-10-openssh-client-support&quot;&gt;native OpenSSH in Windows 10&lt;/a&gt;, and even including Ubuntu, SUSE Linux, and Fedora in the Windows Store. Microsoft is now going even further, with plans to ship a full Linux kernel directly in Windows 10.&lt;/p&gt;
&lt;p id=&quot;rPZPL2&quot;&gt;‚ÄúBeginning with Windows Insiders builds this Summer, we will include an in-house custom-built Linux kernel to underpin the newest version of the Windows Subsystem for Linux (WSL),‚Äù &lt;a href=&quot;https://devblogs.microsoft.com/commandline/shipping-a-linux-kernel-with-windows/&quot;&gt;explains Microsoft program manager Jack Hammons&lt;/a&gt;. ‚ÄúThe kernel itself will initially be based on version 4.19, the latest long-term stable release of Linux. The kernel will be rebased at the designation of new long-term stable releases to ensure that the WSL kernel always has the latest Linux goodness.‚Äù&lt;/p&gt;
&lt;p id=&quot;4MvmBK&quot;&gt;Microsoft‚Äôs integration of Linux in Windows 10 will interface with a userspace installed via the Windows Store. It‚Äôs a big shift for Microsoft, and marks the first time that the Linux kernel will be included as part of Windows. It sounds like this Linux kernel integration will be available later this year, with a Windows 10 update that‚Äôs codenamed 19H2.&lt;/p&gt;
&lt;p id=&quot;H8mm7o&quot;&gt;For developers it should dramatically improve the performance of Microsoft‚Äôs Linux subsystem in Windows. Microsoft is also promising to update this kernel through Windows Update, and it will be fully open source with the ability for developers to create their own WSL kernel and contribute changes.&lt;/p&gt;
&lt;p id=&quot;AIli3u&quot;&gt;Microsoft also &lt;a href=&quot;https://www.theverge.com/2019/5/6/18527870/microsoft-windows-terminal-command-line-tool&quot;&gt;announced Windows Terminal&lt;/a&gt; today, a new command line app for Windows. It‚Äôs designed to be the central location for access to environments like PowerShell, Cmd, and the Windows Subsystem for Linux (WSL).&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 23:32:02 +0000</pubDate>
<dc:creator>oldjokes</dc:creator>
<og:description>Available in testing this summer</og:description>
<og:image>https://cdn.vox-cdn.com/thumbor/0m-LgMD_8Df25knhBRnRg5iIICI=/0x138:1920x1143/fit-in/1200x630/cdn.vox-cdn.com/uploads/chorus_asset/file/7105443/microsoftloveslinux.0.jpg</og:image>
<og:title>Microsoft is going to ship a full Linux kernel in Windows 10</og:title>
<og:type>article</og:type>
<og:url>https://www.theverge.com/2019/5/6/18534687/microsoft-windows-10-linux-kernel-feature</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theverge.com/2019/5/6/18534687/microsoft-windows-10-linux-kernel-feature</dc:identifier>
</item>
<item>
<title>Introducing Windows Terminal</title>
<link>https://devblogs.microsoft.com/commandline/introducing-windows-terminal/</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/commandline/introducing-windows-terminal/</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/4ff0bac8219cb60196079a83faf4d6a8?s=58&amp;amp;d=identicon&amp;amp;r=g&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 photo avatar-default&quot;/&gt;&lt;p&gt;Kayla&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;May 6th, 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We are beyond excited to announce Windows Terminal! Windows Terminal is a new, modern, fast, efficient, powerful, and productive terminal application for users of command-line tools and shells like Command Prompt, PowerShell, and WSL.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://aka.ms/terminal-video&quot;&gt;https://aka.ms/terminal-video&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows Terminal will be delivered via the Microsoft Store in Windows 10 and will be updated regularly, ensuring you are always up to date and able to enjoy the newest features and latest improvements with minimum effort.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/terminal-screenshot.png&quot;&gt;&lt;img src=&quot;https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/terminal-screenshot.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;668&quot; class=&quot;alignnone size-full wp-image-4652&quot; srcset=&quot;https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/terminal-screenshot.png 1024w, https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/terminal-screenshot-300x196.png 300w, https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/terminal-screenshot-768x501.png 768w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Windows Terminal key features&lt;/h2&gt;
&lt;h3&gt;Multiple tabs&lt;/h3&gt;
&lt;p&gt;You‚Äôve asked and we‚Äôve listened! The most frequently requested feature for the Terminal is multiple tab support and we are SUPER excited to FINALLY be able to deliver this key feature. You will now be able to open any number of tabs, each connected to a command-line shell or app of your choice, e.g. Command Prompt, PowerShell, Ubuntu on WSL, a Raspberry Pi via SSH, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/tab-menu.png&quot;&gt;&lt;img src=&quot;http://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/tab-menu-1024x546.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;341&quot; class=&quot;alignnone size-large wp-image-4656&quot; srcset=&quot;https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/tab-menu.png 1024w, https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/tab-menu-300x160.png 300w, https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/tab-menu-768x410.png 768w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Beautiful text&lt;/h3&gt;
&lt;p&gt;The Windows Terminal uses a GPU accelerated DirectWrite/DirectX-based text rendering engine. This new text rendering engine will display text characters, glyphs, and symbols present within fonts on your PC, including CJK ideograms, emoji, powerline symbols, icons, programming ligatures, etc. This engine also renders text much faster than the previous Console‚Äôs GDI engine!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/emojis.png&quot;&gt;&lt;img src=&quot;http://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/emojis-300x223.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;auto&quot; class=&quot;alignnone size-medium wp-image-4657&quot; display=&quot;inline-block&quot; srcset=&quot;https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/emojis-300x223.png 300w, https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/emojis.png 713w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You will also have the option of using our new font! We wanted to create a fun, new, monospaced font to enhance the modern look and feel of the Terminal. Not only will this font include programming ligatures, but it will also be open sourced and have its own repository. Stay tuned for more information on the new font project!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/ligatures.png&quot;&gt;&lt;img src=&quot;http://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/ligatures-300x155.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;auto&quot; class=&quot;alignnone size-medium wp-image-4661&quot; srcset=&quot;https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/ligatures-300x155.png 300w, https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/ligatures.png 718w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Settings and configurability&lt;/h3&gt;
&lt;p&gt;We have connected with so many command-line users who LOVE to customize their terminals and command-line applications. Windows Terminal provides many settings and configuration options that give you a great deal of control over the Terminal‚Äôs appearance and each of the shells/profiles that you can open as new tabs. Settings are stored in a structured text file making it easy for users and/or tools to configure.&lt;/p&gt;
&lt;p&gt;Using Terminal‚Äôs configuration mechanism, you will be able to create multiple ‚Äúprofiles‚Äù for each shell/app/tool you want to use, whether it be PowerShell, Command Prompt, Ubuntu, or even SSH connections to Azure or IoT devices. These profiles can have their own combination of font styles and sizes, color themes, background blur/transparency levels, etc. You can now create your own custom-styled Terminal that is personalized to your unique taste!&lt;/p&gt;
&lt;h3&gt;More!&lt;/h3&gt;
&lt;p&gt;After we‚Äôve shipped Windows Terminal 1.0, we plan to get started on many of the features already in our backlog, in addition to the many features you as the community are likely to add!&lt;/p&gt;
&lt;h2&gt;When can I get my hands on it?&lt;/h2&gt;
&lt;p&gt;As of today, the Windows Terminal and Windows Console have been made open source and you can clone, build, run, and test the code from the repository on GitHub: &lt;a href=&quot;https://github.com/Microsoft/Terminal&quot;&gt;https://github.com/Microsoft/Terminal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This summer in 2019, Windows Terminal previews will be released to the Microsoft Store for early adopters to use and provide feedback.&lt;/p&gt;
&lt;p&gt;This winter in 2019, our goal is to launch Windows Terminal 1.0 and we‚Äôll work with the community to ensure it‚Äôs ready before we release!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/11sBLVxNs7v6WA/giphy.gif&quot; alt=&quot;Happy Joy Gif - Giphy&quot;/&gt;&lt;br/&gt;&lt;a href=&quot;https://giphy.com/gifs/cheer-cheering-11sBLVxNs7v6WA&quot;&gt;[Happy Joy Gif ‚Äì Giphy]&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Wait‚Ä¶ did you say open source?&lt;/h2&gt;
&lt;p&gt;Yes we did! We are excited to announce that we are open sourcing not just Windows Terminal, but also the Windows Console which hosts the command-line infrastructure in Windows and provides the traditional Console UX.&lt;/p&gt;
&lt;p&gt;We can‚Äôt wait to work with you on improving and enhancing the Windows command-line experience!&lt;/p&gt;
&lt;h2&gt;This sounds awesome, but why couldn‚Äôt you just improve the existing Windows Console?&lt;/h2&gt;
&lt;p&gt;The primary goal of the Windows Console is to preserve backward compatibility with existing command-line tools, scripts, etc. While we‚Äôve managed to introduce many key improvements to the Console‚Äôs features (e.g. adding VT and 24-bit color support, etc. &lt;a href=&quot;https://devblogs.microsoft.com/commandline/new-experimental-console-features/&quot;&gt;see this blog post&lt;/a&gt;), we are unable to introduce further meaningful improvements to the Console‚Äôs UI without ‚Äúbreaking the world.‚Äù&lt;/p&gt;
&lt;p&gt;Therefore, the time has come for a new, fresh approach.&lt;/p&gt;
&lt;p&gt;Windows Terminal installs and runs alongside the existing in-box Windows Console application. If you run Cmd/PowerShell/etc. directly, they will start attached to a traditional Console instance in the exact same way they do today. This way, backward compatibility remains intact while providing you the option of experiencing Windows Terminal if/when you wish to do so. Windows Console will continue to ship within Windows for decades to come in order to support existing/legacy applications and systems.&lt;/p&gt;
&lt;h2&gt;Okay, but what about contributing to an existing open source terminal/app project instead?&lt;/h2&gt;
&lt;p&gt;We carefully explored this option during planning and determined our involvement in an existing project would require changing the project‚Äôs requirements and architecture in ways that would be too disruptive.&lt;/p&gt;
&lt;p&gt;Instead, by creating a new open-source terminal application, and open-sourcing Windows Console, we can now invite the community to collaborate with us on improving the code and leveraging it in their respective projects.&lt;/p&gt;
&lt;p&gt;We believe there is plenty of room in the market for new/different ideas about what a terminal can and should do and we aim to help the ecosystem of terminal (and related) applications flourish and grow through the introduction of new ideas, interesting approaches, and exciting innovations in this space.&lt;/p&gt;
&lt;h2&gt;I‚Äôm sold! How can I get involved?&lt;/h2&gt;
&lt;p&gt;Visit the repo at &lt;a href=&quot;https://github.com/Microsoft/Terminal&quot;&gt;https://github.com/Microsoft/Terminal&lt;/a&gt; to clone, build, test, and run the Terminal! You can file bugs and share feedback with us and the community as well as fix issues and make improvements on GitHub.&lt;/p&gt;
&lt;p&gt;Starting this summer, try installing and running Windows Terminal from the Microsoft Store. If you come across any bugs, share feedback either via the Feedback Hub or GitHub issues for detailed issues/discussions.&lt;/p&gt;
&lt;p&gt;We are thrilled to be working with you! If you have any questions or feedback, don‚Äôt hesitate to reach out to Kayla &lt;a href=&quot;https://twitter.com/cinnamon_msft&quot;&gt;@cinnamon_msft&lt;/a&gt; and/or Rich &lt;a href=&quot;https://twitter.com/richturn_ms&quot;&gt;@richturn_ms&lt;/a&gt; on Twitter. We can‚Äôt wait to see what exciting improvements and features you make to Windows Terminal and Windows Console.&lt;/p&gt;
&lt;p&gt;Authors: &lt;a href=&quot;https://devblogs.microsoft.com/commandline/author/cinnamonmicrosoft-com/&quot;&gt;Kayla Cinnamon&lt;/a&gt;, &lt;a href=&quot;https://devblogs.microsoft.com/commandline/author/richturnmicrosoft-com/&quot;&gt;Rich Turner&lt;/a&gt;&lt;/p&gt;


&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/4ff0bac8219cb60196079a83faf4d6a8?s=96&amp;amp;d=identicon&amp;amp;r=g&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 photo avatar-default&quot;/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h5&gt;&lt;a class=&quot;no-underline&quot; aria-label=&quot;Kayla Cinnamon&quot; target=&quot;_blank&quot; href=&quot;https://devblogs.microsoft.com/commandline/author/cinnamonmicrosoft-com/&quot;&gt;Kayla Cinnamon&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Program Manager,¬†Windows Console, Command-Line, &amp;amp; WSL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow Kayla&lt;/strong&gt;¬†¬†¬†&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 22:41:02 +0000</pubDate>
<dc:creator>ghewgill</dc:creator>
<og:type>article</og:type>
<og:title>Introducing Windows Terminal | Windows Command Line Tools For Developers</og:title>
<og:description>We are beyond excited to announce Windows Terminal! Windows Terminal is a new, modern, fast, efficient, powerful, and productive terminal application for users of command-line tools and shells like Command Prompt, PowerShell, and WSL. https://aka.ms/terminal-video Windows Terminal will be delivered via the Microsoft Store in Windows 10 and will be updated regularly,</og:description>
<og:url>https://devblogs.microsoft.com/commandline/introducing-windows-terminal/</og:url>
<og:image>https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/terminal-screenshot.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/commandline/introducing-windows-terminal/</dc:identifier>
</item>
<item>
<title>Using Altair for most of my visualization in Python</title>
<link>http://fernandoi.cl/blog/posts/altair/</link>
<guid isPermaLink="true" >http://fernandoi.cl/blog/posts/altair/</guid>
<description>&lt;p&gt;&lt;a href=&quot;http://fernandoi.cl/blog/&quot;&gt;home&lt;/a&gt; ¬∑ &lt;a href=&quot;http://fernandoi.cl/blog/about/&quot;&gt;about&lt;/a&gt; ¬∑ &lt;a href=&quot;http://fernandoi.cl/blog/feed.atom&quot;&gt;subscribe&lt;/a&gt;&lt;/p&gt;
May 04, 2019 ¬∑ &lt;span&gt;&lt;a href=&quot;http://fernandoi.cl/posts/altair/&quot;&gt;‚àû&lt;/a&gt;&lt;/span&gt; 
&lt;p&gt;Sadly, in Python, we do not have a ggplot2.&lt;/p&gt;
&lt;p&gt;Python‚Äôs go to visualization library, matplotlib, is &lt;strong&gt;very powerful&lt;/strong&gt;&lt;span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-1&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;matplotlib recently came into the spotlight again for being &lt;a href=&quot;https://twitter.com/matplotlib/status/1116477991763218432&quot;&gt;attributed the first black hole image&lt;/a&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt; but has severe limitations. At times its flexibility is a blessing, but it is easy to get frustrated adding a small feature to your graph. Also, matplotlib dual &lt;a href=&quot;https://matplotlib.org/tutorials/introductory/lifecycle.html&quot;&gt;object oriented and state-based interface&lt;/a&gt; is confusing. I still don‚Äôt completely grasp it even though I have been using matplotlib for years. Lastly, it is not easy to make interactive charts.&lt;/p&gt;
&lt;h3 id=&quot;altair-and-the-grammar-of-graphics&quot;&gt;Altair and the grammar of graphics&lt;/h3&gt;
&lt;p&gt;Enter Altair. Altair is a wrapper for &lt;a href=&quot;https://vega.github.io/vega-lite/&quot;&gt;Vega-Lite&lt;/a&gt;, a JavaScript high-level visualization library. One of Vega-Lite&lt;span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-2&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;In the rest of the article, I will mainly refer to Altair, but Vega-Lite deserves as much (or more) credit.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt; most important features is that its API is based in the grammar of graphics.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Grammar of graphics&lt;/em&gt; may sound like an abstract feature, but it is the main difference between Altair and other Python visualization libraries. Altair matches the way we &lt;em&gt;reason&lt;/em&gt; about visualizing data.&lt;/p&gt;
&lt;p&gt;Altair only needs three main parameters:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Marks&lt;/strong&gt;. Do you want the data represented by points? lines? bars? circles?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Channels&lt;/strong&gt;. Which variable should be mapped to the x-axis? to the y-axis? to the color of the mark? to the size of the mark?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encoding&lt;/strong&gt;. Is the variable a date? a number? a category?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Based on these Altair will pick sensible defaults to display your data.&lt;/p&gt;
&lt;p&gt;My favorite example of Altair‚Äôs sensibility is how it chooses colors. If you tell Altair to color a &lt;strong&gt;quantitative variable&lt;/strong&gt; then it will use a continuous color scale (light blue, blue, dark blue). If you tell Altair to color a &lt;strong&gt;categorical variable&lt;/strong&gt;&lt;span&gt;&lt;input type=&quot;checkbox&quot; id=&quot;sn-3&quot; class=&quot;margin-toggle&quot;/&gt;&lt;span class=&quot;sidenote&quot;&gt;Vega-Lite has two types of categorical data: &lt;a href=&quot;https://altair-viz.github.io/user_guide/encoding.html#encoding-data-types&quot;&gt;nominal and ordinal&lt;/a&gt;. Nominal are categories where the order doesn‚Äôt have meaning. For example, the continents which are Europe, Asia, Africa, America, and Oceania (for me America is a continent, not the USA). Ordinal are categories where the order has meaning. For example, an Amazon review can be one, two, three, four or five stars.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt; then it will use a different color for each category (red, yellow, blue).&lt;/p&gt;
&lt;p&gt;Let‚Äôs see a concrete example:&lt;/p&gt;
&lt;p&gt;I made up 6 countries and population numbers. The data looks like this:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot; readability=&quot;0.54945054945055&quot;&gt;
&lt;pre class=&quot;sourceCode python&quot;&gt;
&lt;code class=&quot;sourceCode python&quot;&gt;&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-1&quot; title=&quot;1&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; pd&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-2&quot; title=&quot;2&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; altair &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; alt&lt;/a&gt;

&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-4&quot; title=&quot;4&quot;&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; pd.DataFrame({&lt;span class=&quot;st&quot;&gt;'country_id'&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;6&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-5&quot; title=&quot;5&quot;&gt;                     &lt;span class=&quot;st&quot;&gt;'population'&lt;/span&gt;: [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;],&lt;/a&gt;
&lt;a class=&quot;sourceLine&quot; id=&quot;cb1-6&quot; title=&quot;6&quot;&gt;                     &lt;span class=&quot;st&quot;&gt;'income'&lt;/span&gt;:     [&lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;150&lt;/span&gt;]})&lt;/a&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;&lt;thead/&gt;&lt;tbody&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;even&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;We will first plot the population data for each country:&lt;/p&gt;

&lt;img src=&quot;http://fernandoi.cl/blog/static/img/altair_color_cont_1d.svg&quot; title=&quot;Altair Quantitative Color&quot; alt=&quot;Does this coloring makes sense?&quot;/&gt;Does this coloring makes sense?
&lt;p&gt;Altair picked a continuous color scale. That doesn‚Äôt make sense! The problem is that we defined the &lt;strong&gt;country_id&lt;/strong&gt; as a quantitative variable, but it is really a categorical one.&lt;/p&gt;

&lt;img src=&quot;http://fernandoi.cl/blog/static/img/altair_color_cat_1d.svg&quot; title=&quot;Altair Categorical Color&quot; alt=&quot;This makes more sense! Each country should be represented by its own distinctive color!&quot;/&gt;This makes more sense! Each country should be represented by its own distinctive color!
&lt;p&gt;We only changed the encoding of the variable &lt;em&gt;country_id&lt;/em&gt;. Instead of using Q (Quantitative) we use N (Nominal). That‚Äôs enough for Altair to know that it shouldn‚Äôt use a continuous color scale.&lt;/p&gt;
&lt;h3 id=&quot;extending-your-graphs&quot;&gt;Extending your graphs&lt;/h3&gt;
&lt;p&gt;Another beauty of Altair than usually you easily build-up from an existing graph. For example, let‚Äôs say that now we want to add income to our graph. We simply tell Altair to map the y-axis to income:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fernandoi.cl/blog/static/img/altair_color_cat_2d.svg&quot; title=&quot;Two dimensional Altair plot&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Want to add tooltips? One line is all you need:&lt;/p&gt;

&lt;h3 id=&quot;is-that-all&quot;&gt;Is that all?&lt;/h3&gt;
&lt;p&gt;At first, I was skeptical of using a wrapper of another library as my main visualization tool. Wrappers are often a bad idea. For example, there are many wrappers for ggplot2 that haven‚Äôt been widely adopted by the Python community. It is hard to create one that is feature complete and up to date. But Altair is different:&lt;/p&gt;
&lt;ul readability=&quot;3.3853779429988&quot;&gt;&lt;li readability=&quot;2.7077363896848&quot;&gt;
&lt;p&gt;&lt;strong&gt;Altair‚Äôs API is comprehensive&lt;/strong&gt;. Thanks to &lt;a href=&quot;https://twitter.com/jakevdp/status/1006929120628916224&quot;&gt;Jake Vanderplas (JVP) great design&lt;/a&gt; everything you can do in Vega-Lite you can do it in Python. Altair is simply a Python API for generating valid Vega-Lite jsons. The beauty is that the API is &lt;em&gt;programmatically generated&lt;/em&gt;, allowing Altair to be comprehensive and quickly updated after Vega-Lite new releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;Intuitive and pythonic interface&lt;/strong&gt;. Like every library, it takes some time to get used to. But what‚Äôs brilliant about Altair is that everything is set up to match the way we &lt;em&gt;reason&lt;/em&gt;. It just makes sense. You will quickly understand its inner workings and become increasingly more productive.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Interactivity&lt;/strong&gt;. Vega-Lite interactivity is very powerful. You can &lt;a href=&quot;https://altair-viz.github.io/gallery/scatter_tooltips.html&quot;&gt;add tooltips with one line of code&lt;/a&gt;. You can &lt;a href=&quot;https://altair-viz.github.io/gallery/seattle_weather_interactive.html&quot;&gt;link the selection of a graph with another visualization&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;http://fernandoi.cl/blog/static/img/altair_interactive_low.gif.pagespeed.ce.eVkgzwFHfy.gif&quot; title=&quot;Interactive chart using Altair&quot; alt=&quot;Gif showing Altair interactivity&quot;/&gt;Gif showing Altair interactivity
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;. Altair marks can be thought of as building blocks. For example, I made the graph below (the example has fake data) using a combination of circle marks, line marks, and text marks. The code ends up being readable and easy to modify, something that would be hard to say for a similar implementation in matplotlib.&lt;/li&gt;
&lt;/ul&gt;&lt;img src=&quot;http://fernandoi.cl/blog/static/img/dot_comparison.svg&quot; title=&quot;Dot comparison chart&quot; alt=&quot;Combination of line, circle, and text marks. The output can easily be made interactive.&quot;/&gt;Combination of line, circle, and text marks. The output can easily be made interactive.
&lt;h3 id=&quot;altair-main-disadvantages&quot;&gt;Altair main disadvantages&lt;/h3&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;No 3d plotting&lt;/strong&gt;. If 3d visualizations are important for your day-to-day, Altair is not the right tool for you.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Altair is no D3.js&lt;/strong&gt;. Like many high-level visualization frameworks, Altair it is not 100% customizable and at some point you will find a chart you can‚Äôt do with it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;Not great statistical support&lt;/strong&gt;. I still rely on Seaborn for quick visualization that needs to fit a linear regression.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;p&gt;If this got you excited (or at least curious) I highly recommend &lt;a href=&quot;https://altair-viz.github.io/&quot;&gt;Altair‚Äôs documentation&lt;/a&gt;. It is a concise and clear place to start. Don‚Äôt forget to check out the &lt;a href=&quot;https://altair-viz.github.io/gallery/index.html&quot;&gt;example gallery&lt;/a&gt; and the details of &lt;a href=&quot;https://altair-viz.github.io/user_guide/internals.html#&quot;&gt;Altair internals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to Ilya Altshteyn for comments on an earlier version.&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 21:37:45 +0000</pubDate>
<dc:creator>cuchoi</dc:creator>
<og:title>The reason I am using Altair for most of my visualization in Python</og:title>
<og:type>website</og:type>
<og:description>Visualizing data in Python.</og:description>
<og:url>/posts/altair/</og:url>
<og:image>/blog/static/img/athena.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://fernandoi.cl/blog/posts/altair/</dc:identifier>
</item>
<item>
<title>Shipping a Linux Kernel with Windows</title>
<link>https://devblogs.microsoft.com/commandline/shipping-a-linux-kernel-with-windows/</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/commandline/shipping-a-linux-kernel-with-windows/</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/jack_headshot-150x150.jpg&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Jack Hammons&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 alignnone photo&quot;/&gt;&lt;p&gt;Jack&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;May 6th, 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Beginning with Windows Insiders builds this Summer, we will include an in-house custom-built Linux kernel to underpin the newest version of the Windows Subsystem for Linux (WSL). This marks the first time that the Linux kernel will be included as a component in Windows. This is an exciting day for all of us on the Linux team at Microsoft and we are thrilled to be able to tell you a little bit about it.&lt;/p&gt;
&lt;h3&gt;Tuned for WSL&lt;/h3&gt;
&lt;p&gt;The term ‚ÄúLinux‚Äù is often used to refer both to the Linux kernel as well as the GNU userspace. As with WSL1, WSL2 will not provide any userspace binaries. Instead, the Microsoft kernel will interface with a userspace selected by the user. This will generally come through installation &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;via the Windows store&lt;/a&gt; but can also be ‚Äúsideloaded‚Äù through the creation of a &lt;a href=&quot;https://github.com/Microsoft/WSL-DistroLauncher&quot;&gt;custom distribution package&lt;/a&gt;. The only exception to this rule is a small init script that is injected to bootstrap the startup process, forming the connections between Windows and Linux that make WSL so magical.&lt;/p&gt;
&lt;p&gt;The kernel itself will initially be based on &lt;a href=&quot;https://www.kernel.org/&quot;&gt;version 4.19&lt;/a&gt;, the latest long-term stable release of Linux. The kernel will be rebased at the designation of new long-term stable releases to ensure that the WSL kernel always has the latest Linux goodness.&lt;/p&gt;
&lt;p&gt;In addition to the LTS source from Kernel.org, a number of local patches are being applied. These patches tune the resulting binary for use in WSL2 by improving launch times, reducing the memory footprint and curating a minimal set of supported devices. The result is a small, lightweight kernel that is purpose built for WSL2 to be a drop-in replacement for &lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/&quot;&gt;the emulation architecture&lt;/a&gt; featured in the design of WSL1.&lt;/p&gt;
&lt;h3&gt;Code goes upstream&lt;/h3&gt;
&lt;p&gt;Microsoft employs a growing number of Linux contributors who have brought industry leading Linux knowhow into the company. For years now, these Linux developers have enabled Microsoft to support new platform features in the wide number of distributions provided in the &lt;a href=&quot;https://azuremarketplace.microsoft.com/en-us/marketplace/apps/category/compute&quot;&gt;Azure Marketplace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An important philosophy of Linux at Microsoft is that all changes go upstream. Maintaining downstream patches adds complexity and is not standard practice in the open source community. In leveraging Linux, we are making a commitment to be good citizens and contribute back the changes that we make.&lt;/p&gt;
&lt;p&gt;However, during development it is necessary to work with local patches that enable new features or address issues in upstream. In these cases, we either create, or find patches that fulfill our product requirements and then work with the community to get that code integrated as soon as possible. To protect the stability of the LTS branches, some patches ‚Äì such as for new features ‚Äì might only be included in future versions of the kernel, and not be back-ported to the current LTS version.&lt;/p&gt;
&lt;p&gt;When the WSL kernel source becomes available it will consist of links to a set of patches in addition to the long-term stable source. Over time, we hope this list will shrink as patches make it upstream and grow as we add new local patches to support new WSL features.&lt;/p&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;p&gt;The WSL kernel will be built using Microsoft‚Äôs world-class &lt;a href=&quot;https://en.wikipedia.org/wiki/CI/CD&quot;&gt;CI/CD&lt;/a&gt; systems and serviced through Windows Update in an operation transparent to the user. The kernel will stay up to date with the newest features and fixes in the latest stable branch of Linux. To ensure the provenance of our sources we mirror repositories locally. We continually monitor Linux security mailing lists and partner with several CVE database companies to help ensure that our kernel has the most recent fixes and mitigations.&lt;/p&gt;
&lt;p&gt;One of the great things about Linux is its stable and backwards compatible system call interface. This will enable us to ship the latest stable branch of the Linux kernel to all versions of WSL2. We will rebase the kernel when a new LTS is established and when we have sufficiently validated it.&lt;/p&gt;
&lt;h3&gt;Open Source&lt;/h3&gt;
&lt;p&gt;The kernel provided for WSL2 will be fully open source! When WSL2 is released in &lt;a href=&quot;https://insider.windows.com/en-us/&quot;&gt;Windows Insider builds&lt;/a&gt;, instructions for creating your own WSL kernel will be made available on Github. We will work with developers interested in contributing to help get changes upstream. Check back in a few weeks for more information.&lt;/p&gt;
&lt;h3&gt;Thanks!&lt;/h3&gt;
&lt;p&gt;This is the culmination of years of effort from the Linux Systems Group as well as multiple other teams across Microsoft. We are excited to be able to share the result and look forward to the new and interesting ways in which you will use WSL. If you are interested in positions at Microsoft working with Linux &lt;a href=&quot;https://careers.microsoft.com/us/en/job/601660/Sr-Software-Engineer&quot;&gt;check out this job listing&lt;/a&gt;.&lt;/p&gt;


&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://devblogs.microsoft.com/commandline/wp-content/uploads/sites/33/2019/05/jack_headshot-150x150.jpg&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Jack Hammons&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 alignnone photo&quot;/&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h5&gt;&lt;a class=&quot;no-underline&quot; aria-label=&quot;Jack Hammons&quot; target=&quot;_blank&quot; href=&quot;https://devblogs.microsoft.com/commandline/author/jahammomicrosoft-com/&quot;&gt;Jack Hammons&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;Program Manager,¬†Linux Systems Group&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow Jack&lt;/strong&gt;¬†¬†¬†&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 19:23:50 +0000</pubDate>
<dc:creator>MikusR</dc:creator>
<og:type>article</og:type>
<og:title>Shipping a Linux Kernel with Windows | Windows Command Line Tools For Developers</og:title>
<og:description>Beginning with Windows Insiders builds this Summer, we will include an in-house custom-built Linux kernel to underpin the newest version of the Windows Subsystem for Linux (WSL). This marks the first time that the Linux kernel will be included as a component in Windows.</og:description>
<og:url>https://devblogs.microsoft.com/commandline/shipping-a-linux-kernel-with-windows/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/commandline/shipping-a-linux-kernel-with-windows/</dc:identifier>
</item>
<item>
<title>Launch HN: Prometheus (YC W19) ‚Äì Remove CO2 from Air and Turn It into Gasoline</title>
<link>https://news.ycombinator.com/item?id=19842240</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=19842240</guid>
<description>&lt;td colspan=&quot;2&quot;/&gt;&lt;td readability=&quot;65.173162583519&quot;&gt;Hi HN! I‚Äôm Rob, Founder of Prometheus. We‚Äôre removing CO2 from the air and turning it gasoline, diesel, and jet fuel. Since we use zero-carbon electricity from sources like solar and wind to make our fuel, there are no net CO2 emissions when you use it.
&lt;p&gt;An article about us came up on HN recently and people seemed interested (&lt;a href=&quot;https://news.ycombinator.com/item?id=19792412&quot; rel=&quot;nofollow&quot;&gt;https://news.ycombinator.com/item?id=19792412&lt;/a&gt;), so we thought it would be good to try to answer some of the questions we saw there and try to dive in some more to any questions that follow!&lt;/p&gt;
&lt;p&gt;The only inputs to make the fuel are CO2 and water (both from the air) and electricity. The only outputs are fuel and oxygen. One way to think about it is that making fuel is reverse combustion. The process isn‚Äôt super efficient (we expect 50-60% overall efficiency at maturity), but it turns out that doesn‚Äôt matter as long as the electricity is zero carbon and low cost. If the cost of our equipment is also low, then we believe we can not only make zero carbon fuel, but actually compete on price with fossil fuel.&lt;/p&gt;
&lt;p&gt;We‚Äôre not the first to make fuel from the air - in fact Google, Audi, Carbon Engineering, Global Thermostat, Climeworks, and labs at universities and national labs have all done it before us. What no one has been able to do so far is do it at a low enough cost to compete with fossil fuel.&lt;/p&gt;
&lt;p&gt;The thing that‚Äôs new about what we‚Äôre doing is that we have gotten rid of all the thermal processes normally used, and instead use a process that uses only electricity (no natural gas, etc) and does it at room temperature. This is a big deal for both capital cost and for being truly carbon zero. We can use inexpensive materials, which keeps our cost low, and can start up and shut down quickly, which allows us to run intermittently, matching the intermittent nature of many renewable energy sources. We can also only run when the power is at the price we want.&lt;/p&gt;
&lt;p&gt;Digging in to some more details, we absorb CO2 and water vapor from the air into an aqueous electrolyte. We then react the CO2 in the water with a copper catalyst to directly make alcohols like ethanol, butanol, propanol, etc. Both of these things have been done by many others and the science is known. Normally at this point one would have to use a thermal process (distillation) to get the fuel out of the water, and this is expensive and makes the economics really hard to get right. We don‚Äôt have to do this step thermally though, because we have a carbon nanotube membrane that replaces it, extracting the alcohols from water in a single step at room temperature. This makes a huge difference in cost. The last step is that we up-convert the alcohols to gasoline, diesel, and jet fuel. This last step is also well known and we can actually buy this step from others.&lt;/p&gt;
&lt;p&gt;The carbon nanotube membrane that makes this all work is the product of 6 years at my previous startup, Mattershift. I was developing it for desalination and water purification. About 3 years ago I realized it could do this job, but it wasn‚Äôt clear that a startup could raise money for such an ambitious effort, especially one linked to a political issue (unfortunately) like climate change. When I saw the YC request for startups in carbon removal, I knew that the timing was right, and I founded Prometheus to do it.&lt;/p&gt;
&lt;p&gt;Please let me know if you have more questions or feedback. I‚Äôll do my best to answer any questions, but please excuse if I‚Äôm not able to go too far into details like our piping and instrumentation design, or other really specific things we wouldn‚Äôt want to help competitors with.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;/td&gt;
</description>
<pubDate>Mon, 06 May 2019 18:21:58 +0000</pubDate>
<dc:creator>rmcginnis</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=19842240</dc:identifier>
</item>
<item>
<title>How I manage customer feedback for my bootstrapped SaaS</title>
<link>https://blog.checklyhq.com/how-i-manage-customer-feedback-for-my-bootstrapped-saas/</link>
<guid isPermaLink="true" >https://blog.checklyhq.com/how-i-manage-customer-feedback-for-my-bootstrapped-saas/</guid>
<description>&lt;p&gt;Over the last year or so, I experimented with different ways of getting customer feedback for Checkly. This post is about what worked for us and how I was totally wrong about chat widgets.&lt;/p&gt;&lt;p&gt;We'll look at some common tools like Hotjar, Drift, SurveyMonkey, straight up email and even Github. This is a pretty anecdotal story, no science was hurt in the process of writing this post, YMMV and all that.&lt;/p&gt;
&lt;p&gt;Also, I focussed mostly on the free(mium) parts of the tools mentioned above, as Checkly is an early stage company. &lt;em&gt;No tengo dinero.&lt;/em&gt; Yet!&lt;/p&gt;
&lt;h2 id=&quot;the-private-beta-period&quot;&gt;The private beta period&lt;/h2&gt;
&lt;p&gt;We launched a private beta period in February 2018. Most signups came through a combination of Betalist, Hackernews, a tiny bit of Twitter and some Reddit posts.&lt;/p&gt;
&lt;p&gt;Shamefully, I did not really have a strategy to collect, manage and structure customer feedback outside of installing a Hotjar widget and just following along with the recommendations from the onboarding emails.&lt;/p&gt;
&lt;p&gt;Surprisingly, this was quite successful but only because of Hotjar's &lt;em&gt;Incoming&lt;/em&gt; feature. &lt;em&gt;Incoming&lt;/em&gt; allows users to express how happy they are by selecting an emoticon and optionally point out details on a page by adding some text and a (partial) screenshot. You've seen it on a million sites by now.&lt;/p&gt;
&lt;img src=&quot;https://blog.checklyhq.com/content/images/2019/05/image-1.png&quot; class=&quot;kg-image&quot;/&gt;A small sample of Hotjar Incoming responses
&lt;p&gt;Over the weeks, I collected about 50 to 75 responses ranging from gushing praise and super nice tips to sharp critiques on obvious bugs and even some colorful profanity!&lt;/p&gt;
&lt;p&gt;I weighed the feedback, adjust my backlog and reported updates and fixes over Twitter. This directly highlights a pretty big issue with &lt;em&gt;Incoming:&lt;/em&gt; It's only incoming! Silliness aside, users can leave an email address, but any back and forth is disconnected from the initial report.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; readability=&quot;7.7981366459627&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Another day, another bug fix and feature! ‚úÖ fixed an issue where comparing integer values in nested JSON objects failed. ‚úÖ Added a feature (was already on the work bench, but specifically requested by a user) to run API checks from the edit screen! &lt;a href=&quot;https://t.co/B0skwVoS5p&quot;&gt;pic.twitter.com/B0skwVoS5p&lt;/a&gt;&lt;/p&gt;
‚Äî Checkly (@checklyHQ) &lt;a href=&quot;https://twitter.com/checklyHQ/status/963107017341767682?ref_src=twsrc%5Etfw&quot;&gt;February 12, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Using &lt;em&gt;Incoming&lt;/em&gt; was really helpful, but I struggled with almost all of Hotjar's other features. Admittedly, I was a noob on configuring this but I'm also a pretty quick learner. After some iteration and tweaking of copy, placement etc. I still was not getting any value out of the &lt;em&gt;Survey&lt;/em&gt;'s and &lt;em&gt;Poll&lt;/em&gt;'s features. I got one response to a survey and a maximum of 15 responses to a poll.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I used Hotjar's&lt;/em&gt; Analytics &lt;em&gt;suite of tools a bit, but strictly speaking they are not customer feedback tools, at least by my own definition. Something for another post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;People also emailed me directly, but Hotjar took care of most direct application feedback. Remember, no one was paying yet and there was no pricing to haggle about.&lt;/p&gt;
&lt;p&gt;All in all, &lt;em&gt;Incoming&lt;/em&gt; is pretty useful, especially at an early stage / beta launch. Its entry barrier is super low, so non invested users (i.e. not paying or thinking about paying) easily leave pretty useful feedback. However, &lt;em&gt;Incoming&lt;/em&gt; really means just incoming.&lt;/p&gt;
&lt;p&gt;Total score: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ¬†recommended&lt;/p&gt;
&lt;h2 id=&quot;adding-chat-and-a-survey&quot;&gt;Adding chat and a survey&lt;/h2&gt;
&lt;p&gt;Near the end of the private beta period, I added two things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A Drift chat widget. This seemed to be the hot thing to do. Why Drift? They have a pretty generous free tier. I turned off the *&lt;em&gt;ping&lt;/em&gt;* sound.&lt;/li&gt;
&lt;li&gt;A Survey Monkey survey send out to all users when they are at the end of their trial.&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;chat&quot;&gt;Chat&lt;/h3&gt;
&lt;p&gt;I was SUPER skeptical about the chat widget. I personally found them annoying, overbearing and could not imagine them working for customer support or sales.&lt;/p&gt;
&lt;p&gt;Boy was I wrong. As in completely, utterly, totally wrong.&lt;/p&gt;
&lt;p&gt;Within the roughly one year since I installed the chat widget it has become my number one communication channel with customers and trial users.&lt;/p&gt;
&lt;img src=&quot;https://blog.checklyhq.com/content/images/2019/05/Screen-Shot-2019-05-06-at-15.09.32.png&quot; class=&quot;kg-image&quot;/&gt;I can't really post a screenshot of Drift as there is too much user info on the screens, but here is a picture of the widget in the Checkly app. The widget does not open when loaded not does it go *&lt;em&gt;ping&lt;/em&gt;*. That is just annoying.¬†
&lt;p&gt;Here is random overview of chats from my &lt;em&gt;Conversations&lt;/em&gt; tab in Drift right now. Notice they go from feature suggestions, to sales enquiries to actual complaints.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Feature request:&lt;/strong&gt; Customer suggests a tweak to how read-only users can have better access to some parts of the application. The customer added a screenshot to clarify the point. This was implemented and rolled out the next week.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feature request:&lt;/strong&gt; Customer asks about exposing 95 and 99 percentile metrics on our &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; integration. This is a bit harder. Pushed to our roadmap.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complaint:&lt;/strong&gt; Customers requests how we deal with refunds because we totally dropped the ball one part of our alerting service. Case was discussed and refund was issued to said customer within the hour.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sales:&lt;/strong&gt; Customer asks if there is an option to customize her plan to add just a bit more browser checks without having to jump to the next plan. Yes, this is an option and we modify the plan on the fly.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;At this point, I'm not actually using any of the other Drift features yet, except for pushing some custom attributes like &lt;code&gt;accountID&lt;/code&gt; and &lt;code&gt;planName&lt;/code&gt; so I can quickly match see what type of customer I'm dealing with.&lt;/p&gt;
&lt;p&gt;Interestingly, I now always opt for the chat widget myself when reaching out for support and I now judge the customer service of a SaaS app by how well their chat integration works.&lt;/p&gt;
&lt;p&gt;Total score: ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è A++ would buy again.&lt;/p&gt;
&lt;h3 id=&quot;survey&quot;&gt;Survey&lt;/h3&gt;
&lt;p&gt;We send out a &quot;trial expiry reminder&quot; email using Mailchimp. It's a pretty short, friendly voiced email with a very friendly call to action button to fill out a 2-minute survey on how the trial experience was.&lt;/p&gt;
&lt;img src=&quot;https://blog.checklyhq.com/content/images/2019/05/image-2.png&quot; class=&quot;kg-image&quot;/&gt;521 sends, 32.5% opens, 2.2% clicks resulted in 8 filled out surveys üòê
&lt;p&gt;After 521 sends I stopped sending that specific email as the goal of the email ‚Äî collecting feedback about the trial period ‚Äî was clearly not being met.&lt;/p&gt;
&lt;p&gt;The SurveyMonkey survey was filled out eight times in total. The survey itself was actually put together quite carefully and followed all the best practices and examples I could find.&lt;/p&gt;
&lt;p&gt;Maybe I was still really bad at making surveys, or maybe surveys just have a super low response rate? In any case, the survey was not working for me at this moment. I will try out &lt;a href=&quot;https://mailchimp.com/help/send-a-simple-poll-or-survey-to-subscribers/&quot;&gt;Mailchimp's built in one-click survey&lt;/a&gt; pretty soon and see if that lowers the bar enough for users to actually click.&lt;/p&gt;
&lt;p&gt;Users still got a heads up about their trial expiring, just so you know.&lt;/p&gt;
&lt;p&gt;Total score: üççüêº ¬†not sure, I probably did something wrong.&lt;/p&gt;
&lt;h2 id=&quot;adding-a-public-roadmap-with-voting&quot;&gt;Adding a public roadmap with voting&lt;/h2&gt;
&lt;p&gt;After a pretty intense six to eight months of iteration and listening to direct feedback I hit a new phase in Checkly's lifecycle. There were a couple dozen paying customers and some were very passionate and vocal about Checkly's roadmap.&lt;/p&gt;
&lt;p&gt;A pattern started appearing.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Many paying customers requested very similar features or tweaks.&lt;/li&gt;
&lt;li&gt;Many of these features/tweak were already in my private back log.&lt;/li&gt;
&lt;li&gt;I sometimes had a hard time recognizing what customers deemed important.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;How to align all of this? How to communicate to customers you are aware of their needs and allow them to vote and interact with the respective backlog items? Public roadmap to the rescue!&lt;/p&gt;
&lt;p&gt;Now there a gazillion tools out there that fulfill this need but I started out with two simple, free things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A Github project with an issue template and project Kanban board. Users can add issues in the normal issue view and use the voting feature Github added fairly recently. Using some tags that describe the feature areas such as &lt;code&gt;dashboards&lt;/code&gt; and &lt;code&gt;API checks&lt;/code&gt; issues are organized. The board has three columns just to keep things as simple as possible.&lt;br/&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;img src=&quot;https://blog.checklyhq.com/content/images/2019/05/Screen-Shot-2019-05-06-at-16.18.23.png&quot; class=&quot;kg-image&quot;/&gt;See the Kanban board at https://github.com/checkly/product-roadmap/projects/1
&lt;p&gt;2. ¬†A small addition to the UI to draw attention to the roadmap and prompt users to suggest feature. This was 100% &lt;s&gt;stolen from&lt;/s&gt; inspired by Hotjar.&lt;/p&gt;
&lt;img src=&quot;https://blog.checklyhq.com/content/images/2019/05/image-3.png&quot; class=&quot;kg-image&quot;/&gt;Navbar dropdown buttons to focus attention on the roadmap.
&lt;p&gt;To be completely honest, it took a while for this to catch on but over the last months more and more customers are actively contributing and voting. I guess you need a certain critical mass of invested, paying customers for this to work and I just hit that mass recently.&lt;/p&gt;
&lt;p&gt;I also actively direct questions raised on Twitter and in the Drift chat widget to issues in the public roadmap and customers seem to be totally fine with that.&lt;/p&gt;
&lt;p&gt;Yes, you need a Github account to contribute to this. And yes, there is no direct link between a Checkly user and a Github user. However, this has not been a problem yet but might account for the slow uptake.&lt;/p&gt;
&lt;h2 id=&quot;what-about-email&quot;&gt;What about email?&lt;/h2&gt;
&lt;p&gt;Customers and trial users still actively email about all kinds of things. Replying to email and interacting with customers should just be a basic hygiene factor.&lt;/p&gt;
&lt;p&gt;Just one pet peeve ‚Äî Don't use a &quot;no-reply&quot; address on your automated mails. People should just be able to reply to a Mailchimp mail and get a human on the line.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;banner image: detail from &quot;People enjoying spring on a picnic&quot;, Katshushika Hokusai, Japan. Reproduction from circa 1960. &lt;a href=&quot;https://www.etsy.com/listing/480028907/japanese-ukiyoe-woodblock-print?ref=unav_listing-same-5&quot;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 16:36:28 +0000</pubDate>
<dc:creator>tnolet</dc:creator>
<og:type>article</og:type>
<og:title>How I manage customer feedback for my bootstrapped SaaS</og:title>
<og:description>I experimented with different ways to get customer feedback for my SaaS. This blog post is about what worked during launch and later stages.</og:description>
<og:url>https://blog.checklyhq.com/how-i-manage-customer-feedback-for-my-bootstrapped-saas/</og:url>
<og:image>https://blog.checklyhq.com/content/images/2019/05/spring.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.checklyhq.com/how-i-manage-customer-feedback-for-my-bootstrapped-saas/</dc:identifier>
</item>
<item>
<title>.NET 5</title>
<link>https://devblogs.microsoft.com/dotnet/introducing-net-5/</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/dotnet/introducing-net-5/</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/37f91ebe219df737566a4dc7cdd53b68?s=58&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 photo avatar-default&quot;/&gt;&lt;p&gt;Richard&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;May 6th, 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Today, we‚Äôre announcing that the next release after &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-5/&quot;&gt;.NET Core 3.0&lt;/a&gt; will be .NET 5. This will be the next big release in the .NET family.&lt;/p&gt;
&lt;p&gt;There will be just one .NET going forward, and you will be able to use it to target Windows, Linux, macOS, iOS, Android, tvOS, watchOS and WebAssembly and more.&lt;/p&gt;
&lt;p&gt;We will introduce new .NET APIs, runtime capabilities and language features as part of .NET 5.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-22975 size-full&quot; src=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform.png&quot; alt=&quot;&quot; width=&quot;1837&quot; height=&quot;979&quot; srcset=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform.png 1837w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform-300x160.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform-768x409.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet5_platform-1024x546.png 1024w&quot; sizes=&quot;(max-width: 1837px) 100vw, 1837px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the inception of the .NET Core project, we‚Äôve added around fifty thousand .NET Framework APIs to the platform. .NET Core 3.0 closes much of the remaining capability gap with .NET Framework 4.8, enabling Windows Forms, WPF and Entity Framework 6. .NET 5 builds on this work, taking &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/&quot; rel=&quot;nofollow&quot;&gt;.NET Core&lt;/a&gt; and the best of &lt;a href=&quot;https://www.mono-project.com/&quot; rel=&quot;nofollow&quot;&gt;Mono&lt;/a&gt; to create a single platform that you can use for all your modern .NET code.&lt;/p&gt;
&lt;p&gt;We intend to release .NET 5 in November 2020, with the first preview available in the first half of 2020. It will be supported with future updates to Visual Studio 2019, Visual Studio for Mac and Visual Studio Code.&lt;/p&gt;
&lt;h2&gt;.NET 5 = .NET Core vNext&lt;/h2&gt;
&lt;p&gt;.NET 5 is the next step forward with .NET Core. The project aims to improve .NET in a few key ways:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Produce a single .NET runtime and framework that can be used everywhere and that has uniform runtime behaviors and developer experiences.&lt;/li&gt;
&lt;li&gt;Expand the capabilities of .NET by taking the best of .NET Core, .NET Framework, Xamarin and Mono.&lt;/li&gt;
&lt;li&gt;Build that product out of a single code-base that developers (Microsoft and the community) can work on and expand together and that improves all scenarios.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This new project and direction are a game-changer for .NET. With .NET 5, your code and project files will look and feel the same no matter which type of app you‚Äôre building. You‚Äôll have access to the same runtime, API and language capabilities with each app. This includes new &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-core-2-1/&quot; rel=&quot;nofollow&quot;&gt;performance improvements&lt;/a&gt; that get committed to corefx, practically daily.&lt;/p&gt;
&lt;p&gt;Everything you love about .NET Core will continue to exist:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Open source and community-oriented on GitHub.&lt;/li&gt;
&lt;li&gt;Cross-platform implementation.&lt;/li&gt;
&lt;li&gt;Support for leveraging platform-specific capabilities, such as Windows Forms and WPF on Windows and the native bindings to each native platform from Xamarin.&lt;/li&gt;
&lt;li&gt;High performance.&lt;/li&gt;
&lt;li&gt;Side-by-side installation.&lt;/li&gt;
&lt;li&gt;Small project files (SDK-style).&lt;/li&gt;
&lt;li&gt;Capable command-line interface (CLI).&lt;/li&gt;
&lt;li&gt;Visual Studio, Visual Studio for Mac, and Visual Studio Code integration.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here‚Äôs what will be new:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;You will have more choice on runtime experiences (more on that below).&lt;/li&gt;
&lt;li&gt;Java interoperability will be available on all platforms.&lt;/li&gt;
&lt;li&gt;Objective-C and Swift interoperability will be supported on multiple operating systems.&lt;/li&gt;
&lt;li&gt;CoreFX will be extended to support static compilation of .NET (ahead-of-time ‚Äì AOT), smaller footprints and support for more operating systems.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We will ship .NET Core 3.0 this September, .NET 5 in November 2020, and then we intend to ship a major version of .NET once a year, every November:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule.png&quot;&gt;&lt;img class=&quot;alignnone wp-image-22976 size-full&quot; src=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule.png&quot; alt=&quot;&quot; width=&quot;1837&quot; height=&quot;1015&quot; srcset=&quot;https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule.png 1837w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule-300x166.png 300w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule-768x424.png 768w, https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/05/dotnet_schedule-1024x566.png 1024w&quot; sizes=&quot;(max-width: 1837px) 100vw, 1837px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We‚Äôre skipping the version 4 because it would confuse users that are familiar with the .NET Framework, which has been using the 4.x series for a long time. Additionally, we wanted to clearly communicate that .NET 5 is the future for the .NET platform.&lt;/p&gt;
&lt;p&gt;We are also taking the opportunity to simplify naming. We thought that if there is only one .NET going forward, we don‚Äôt need a clarifying term like ‚ÄúCore‚Äù. The shorter name is a simplification and also communicates that .NET 5 has uniform capabilities and behaviors. Feel free to continue to use the ‚Äú.NET Core‚Äù name if you prefer it.&lt;/p&gt;
&lt;h2&gt;Runtime experiences&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mono/mono&quot;&gt;Mono&lt;/a&gt; is the original cross-platform implementation of .NET. It started out as an open-source alternative to .NET Framework and transitioned to targeting mobile devices as iOS and Android devices became popular. Mono is the runtime used as part of Xamarin.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dotnet/coreclr&quot;&gt;CoreCLR&lt;/a&gt; is the runtime used as part of .NET Core. It has been primarily targeted at supporting cloud applications, including the largest services at Microsoft, and now is also being used for Windows desktop, IoT and machine learning applications.&lt;/p&gt;
&lt;p&gt;Taken together, the .NET Core and Mono runtimes have a lot of similarities (they are both .NET runtimes after all) but also valuable unique capabilities. It makes sense to make it possible to pick the runtime experience you want. We‚Äôre in the process of making CoreCLR and Mono drop-in replacements for one another. We will make it as simple as a build switch to choose between the different runtime options.&lt;/p&gt;
&lt;p&gt;The following sections describe the primary pivots we are planning for .NET 5. They provide a clear view on how we plan to evolve the two runtimes individually, and also together.&lt;/p&gt;
&lt;h3&gt;High throughput and high productivity&lt;/h3&gt;
&lt;p&gt;From the very beginning, .NET has relied on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Just-in-time_compilation&quot; rel=&quot;nofollow&quot;&gt;just-in-time compiler (JIT)&lt;/a&gt; to translate &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Intermediate_Language&quot; rel=&quot;nofollow&quot;&gt;Intermediate Language (IL) code&lt;/a&gt; to optimized machine code. Since that time, we‚Äôve built an industry-leading JIT-based managed runtime that is capable of very high throughput and also enabled developer experiences that make programming fast and easy.&lt;/p&gt;
&lt;p&gt;JITs are well suited for long-running cloud and client scenarios. They are able to generate code that targets a specific machine configuration, including specific CPU instructions. A JIT can also &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/tiered-compilation-preview-in-net-core-2-1/&quot; rel=&quot;nofollow&quot;&gt;re-generate methods at runtime&lt;/a&gt;, a technique used to JIT quickly while still having the option to produce a highly-tuned version of the code if this becomes a frequently used method.&lt;/p&gt;
&lt;p&gt;Our efforts to make ASP.NET Core run faster on the &lt;a href=&quot;https://www.techempower.com/benchmarks/&quot; rel=&quot;nofollow&quot;&gt;TechEmpower benchmarks&lt;/a&gt; is a good example of the power of JIT and our investments in CoreCLR. Our efforts to &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/&quot; rel=&quot;nofollow&quot;&gt;harden .NET Core for containers&lt;/a&gt; also demonstrates the runtime‚Äôs ability to dynamically adapt to constrained environments.&lt;/p&gt;
&lt;p&gt;Developer tools are another good example where JIT shines, such as with the &lt;code&gt;dotnet watch&lt;/code&gt; tool or edit and continue. Tools often require compiling and loading code multiple times in a single process without restarting and need to do it very quickly.&lt;/p&gt;
&lt;p&gt;Developers using .NET Core or .NET Framework have primarily relied on JIT. As a result, this experience should seem familiar.&lt;/p&gt;
&lt;p&gt;The default experience for most .NET 5 workloads will be using the JIT-based CoreCLR runtime. The two notable exceptions are iOS and client-side Blazor (web assembly) since both require ahead-of-time (AOT) native compilation.&lt;/p&gt;
&lt;h3&gt;Fast startup, low footprint, and lower memory usage&lt;/h3&gt;
&lt;p&gt;The Mono Project has spent much of its effort focused on mobile and gaming consoles. A key capability and outcome of that project is an AOT compiler for .NET, based on the industry-leading &lt;a href=&quot;http://llvm.org/&quot; rel=&quot;nofollow&quot;&gt;LLVM compiler project&lt;/a&gt;. The Mono AOT compiler enables .NET code to be built into a single native code executable that can run on a machine, much like C++ code. AOT-compiled apps can run efficiently in small places, and trades throughput for startup if needed.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://blazor.net&quot; rel=&quot;nofollow&quot;&gt;Blazor project&lt;/a&gt; is already using the Mono AOT. It will be one of the first projects to transition to .NET 5. We are using it as one of the scenarios to prove out this plan.&lt;/p&gt;
&lt;p&gt;There are two types of AOT solutions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;solutions that require 100% AOT compilation.&lt;/li&gt;
&lt;li&gt;solutions where most code is AOT-compiled but where a JIT or interpreter is available and used for code patterns that are not friendly to AOT (like generics).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The Mono AOT supports both cases. The first type of AOT is required by Apple for iOS and some game consoles, typically for security reasons. The second is the preferred choice since it offers the benefits of AOT without any of its drawbacks.&lt;/p&gt;
&lt;p&gt;.NET Native is the AOT compiler we use for Windows UWP applications and is an example of the first type of AOT listed above. With that particular implementation, we limited the .NET APIs and capabilities that you can use. We learned from that experience that AOT solutions need to cover the full spectrum of .NET APIs and patterns.&lt;/p&gt;
&lt;p&gt;AOT compilation will remain required for iOS, web assembly and some game consoles. We will make AOT compilation an option for applications that are more appliance-like, that require fast startup and/or low footprint.&lt;/p&gt;
&lt;h3&gt;Fundamentals and overlapping experiences&lt;/h3&gt;
&lt;p&gt;It is critical that we continue to move forward as an overall platform with startup, throughput, memory use, reliability, and diagnostics. At the same time, it also makes sense to focus our efforts. We‚Äôll invest more in throughput and reliability in CoreCLR while we invest more in startup and size reduction with the Mono AOT compiler. We think that these are good pairings. Throughput and reliability go together as do startup and size reduction.&lt;/p&gt;
&lt;p&gt;While there are some characteristics where it makes sense to make different investments, there are others that do not.&lt;/p&gt;
&lt;p&gt;Diagnostics capabilities need to be the same across .NET 5, for both functional and performance diagnostics. It is also important to support the same chips and operating systems (with the exception of iOS and web assembly).&lt;/p&gt;
&lt;p&gt;We will continue to optimize .NET 5 for each workload and scenario, for whatever makes sense. There will be even greater emphasis on optimizations, particular where multiple workloads have overlapping needs.&lt;/p&gt;
&lt;p&gt;All .NET 5 applications will use the &lt;a href=&quot;https://github.com/dotnet/corefx&quot;&gt;CoreFX framework&lt;/a&gt;. We will ensure that CoreFX works well in the places it is not used today, which is primarily the Xamarin and client-side Blazor workloads.&lt;br/&gt;All .NET 5 applications will be buildable with the &lt;a href=&quot;https://github.com/dotnet/cli&quot;&gt;.NET CLI&lt;/a&gt;, ensuring that you have common command-line tooling across projects.&lt;/p&gt;
&lt;p&gt;C# will move forward in lock-step with .NET 5. Developers writing .NET 5 apps will have access to the latest C# version and features.&lt;/p&gt;
&lt;h2&gt;The birth of the project&lt;/h2&gt;
&lt;p&gt;We met as a technical team in December 2018 in Boston to kick off this project. Design leaders from .NET teams (Mono/Xamarin and .NET Core) and also from &lt;a href=&quot;https://unity.com/&quot; rel=&quot;nofollow&quot;&gt;Unity&lt;/a&gt; presented on various technical capabilities and architectural direction.&lt;/p&gt;
&lt;p&gt;We are now moving forward on this project as a single team with one set of deliverables. Since December, we have made a lot of progress on a few projects:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Defined a minimal layer that defines the runtime &amp;lt;-&amp;gt; managed code layer, with the goal making &amp;gt;99% of CoreFX common code.&lt;/li&gt;
&lt;li&gt;MonoVM can now use CoreFX and its class libraries.&lt;/li&gt;
&lt;li&gt;Run all CoreFX tests on MonoVM using the CoreFX implementation.&lt;/li&gt;
&lt;li&gt;Run ASP.NET Core 3.0 apps with MonoVM.&lt;/li&gt;
&lt;li&gt;Run MonoDevelop and then Visual Studio for Mac on CoreCLR.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Moving to a single .NET implementation raises important questions. What will the target framework be? Will NuGet package compatibility rules be the same? Which workloads should be supported out-of-the-box by the .NET 5 SDK? How does writing code for a specific architecture work? Do we still need .NET Standard? We are working through these issues now and will soon be sharing design docs for you to read and give feedback on.&lt;/p&gt;
&lt;h2&gt;Closing&lt;/h2&gt;
&lt;p&gt;The .NET 5 project is an important and exciting new direction for .NET. You will see .NET become simpler but also have broader and more expansive capability and utility. All new development and feature capabilities will be part of .NET 5, including new C# versions.&lt;/p&gt;
&lt;p&gt;We see a bright future ahead in which you can use the same .NET APIs and languages to target a broad range of application types, operating systems, and chip architectures. It will be easy to make changes to your build configuration to build your applications differently, in Visual Studio, Visual Studio for Mac, Visual Studio Code, Azure DevOps or at the command line.&lt;/p&gt;
&lt;p&gt;See: &lt;a href=&quot;https://news.ycombinator.com/item?id=19840763&quot;&gt;.NET 5 on Hacker News&lt;/a&gt;&lt;/p&gt;


&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/37f91ebe219df737566a4dc7cdd53b68?s=96&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 photo avatar-default&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Mon, 06 May 2019 16:14:18 +0000</pubDate>
<dc:creator>benaadams</dc:creator>
<og:type>article</og:type>
<og:title>Introducing .NET 5 | .NET Blog</og:title>
<og:description>Today, we‚Äôre announcing that the next release after .NET Core 3.0 will be .NET 5. This will be the next big release in the .NET family. There will be just one .NET going forward, and you will be able to use it to target Windows,</og:description>
<og:url>https://devblogs.microsoft.com/dotnet/introducing-net-5/</og:url>
<og:image>https://devblogs.microsoft.com/dotnet/wp-content/uploads/sites/10/2019/02/swimlane-cross-platform.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/dotnet/introducing-net-5/</dc:identifier>
</item>
<item>
<title>Windows gets a new terminal</title>
<link>https://techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;Windows 10 is getting &lt;a href=&quot;https://aka.ms/build2019terminalannounce&quot;&gt;a new terminal&lt;/a&gt; for command-line users, Microsoft &lt;a href=&quot;https://blogs.windows.com/&quot;&gt;announced&lt;/a&gt; at its Build developer conference today.&lt;/p&gt;
&lt;p&gt;The new so-called ‚ÄúWindows Terminal‚Äù will launch in mid-June and promises to be a major update of the existing Windows Command Prompt and PowerShell experience. Indeed, it seems like the Terminal will essentially become the default environment for PowerShell, Command Prompt and Windows Subsystem for Linux users going forward.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png&quot;&gt;&lt;img class=&quot;breakout aligncenter size-full wp-image-1822258&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;665&quot; srcset=&quot;https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png 1522w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=150,97 150w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=300,195 300w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=768,499 768w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=680,441 680w, https://techcrunch.com/wp-content/uploads/2019/05/Screen-Shot-2019-05-03-at-5.58.24-PM.png?resize=50,32 50w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The new terminal will feature faster GPU-accelerated text rending and ‚Äúemoji-rich‚Äù fonts, because everything these days needs to support emojis, and those will sure help lighten up the command-line user experience. More importantly, though, the Windows Terminal will also support shortcuts, tabs, tear-away windows and theming, as well as extensions. It also will natively support Unicode and East Asian fonts.&lt;/p&gt;
&lt;p&gt;The idea here, &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/microsoft&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;microsoft&quot;&gt;Microsoft&lt;/a&gt; says, is to ‚Äúelevate the command-line user experience on Windows.‚Äù&lt;/p&gt;
&lt;p&gt;The first preview of the new Windows Terminal is now available.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://techcrunch.com/tag/ms-build-2019/&quot;&gt;&lt;img src=&quot;https://techcrunch.com/wp-content/uploads/2019/05/msft-build-2019-banner.png&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 06 May 2019 15:46:05 +0000</pubDate>
<dc:creator>MikusR</dc:creator>
<og:title>Windows gets a new terminal ‚Äì TechCrunch</og:title>
<og:description>Windows 10 is getting a new terminal for command-line users, Microsoft announced at its Build developer conference today. The new so-called ‚ÄúWindows Terminal‚Äù will launch in mid-June and promises to be a major update of the existing Windows Command Prompt and PowerShell experience. Inde‚Ä¶</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2019/05/GettyImages-985008060.jpg?w=600</og:image>
<og:url>http://social.techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/05/06/windows-gets-a-new-terminal/</dc:identifier>
</item>
</channel>
</rss>