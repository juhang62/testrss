<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The FCC Has Fined Robocallers $208M, Collected $6,790</title>
<link>https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803?mod=rsswn</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803?mod=rsswn</guid>
<description>&lt;div class=&quot;is-lead-inset&quot;&gt;
      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--header&amp;#10;    article__inset--lead&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-header article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-63149?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-63149?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-63149?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-63149?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-63149?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-63149?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-63149?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-63149?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;Large wireless carriers are currently working on a call-verification system that regulators and executives say...&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;Large wireless carriers are currently working on a call-verification system that regulators and executives say will help consumers identify legitimate calls.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        andreu dalmau/epa/Shutterstock
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 
    &lt;/div&gt;

  &lt;div class=&quot;clearfix byline-wrap&quot;&gt;


      
      &lt;div class=&quot;byline article__byline&quot;&gt;
      
      
          &lt;span&gt;By&lt;/span&gt;
              &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;Sarah Krouse&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/8102&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;twitter&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://twitter.com/bysarahkrouse&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;@bysarahkrouse&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;facebook&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://facebook.com/&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;email&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;mailto:sarah.krouse@wsj.com&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;sarah.krouse@wsj.com&amp;quot;}]}&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;Sarah Krouse&lt;/span&gt;
                  &lt;/div&gt;

      &lt;/div&gt;
      
        &lt;time class=&quot;timestamp article__timestamp flexbox__flex--1&quot;&gt;
          March 28, 2019 7:00 am ET
        &lt;/time&gt;&lt;/div&gt;

  

  &lt;div class=&quot;article-content &quot;&gt;

       &lt;p&gt;America’s telecommunications watchdogs have levied hefty financial penalties against illegal robocallers and demanded that bad actors repay millions to their victims. But years later, little money has been collected. &lt;/p&gt; &lt;p&gt;Since 2015, the Federal Communications Commission has ordered violators of the Telephone Consumer Protection Act, a law governing telemarketing and robodialing, to pay $208.4 million. That sum includes so-called forfeiture orders in cases involving robocalling, Do Not Call Registry and telephone solicitation violations.&lt;/p&gt;




      &lt;div class=&quot;paywall&quot;&gt;




       &lt;p&gt;So far, the government has collected $6,790 of that amount, according to records obtained by The Wall Street Journal through a Freedom of Information Act request.&lt;/p&gt; &lt;p&gt;The total amount of money secured by the Federal Trade Commission through court judgments in cases involving civil penalties for robocalls or National Do Not Call Registry-related violations, plus the sum requested for consumer redress in fraud-related cases, is $1.5 billion since 2004. It has collected $121 million of that total, said 




      Ian Barlow, 




       coordinator of the agency’s Do Not Call program, or about 8%. The agency operates the National Do Not Call Registry and regulates telemarketing. &lt;/p&gt; &lt;p&gt;“That number stands on its own. We’re proud of it; we think our enforcement program is pretty strong,” Mr. Barlow said.&lt;/p&gt; 





      &lt;div data-layout=&quot;wrap&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetDynamic&amp;#10;          wrap&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetDynamic&amp;#10;          article__inset--wrap&amp;#10;  &quot;&gt;
      
      
      
      
      
      
      
      
      
      
      
      
        &lt;div class=&quot;dynamic-inset-container article__inset__dynamic&quot;&gt;
            
&lt;/div&gt;

      
      
      
      
      
      
      
      
      
      
      
      
      
      &lt;/div&gt; 



       &lt;p&gt;An FCC spokesman said his agency lacks the authority to enforce the forfeiture orders it issues and has passed all unpaid penalties to the Justice Department, which has the power to collect the fines. Many of the spoofers and robocallers the agency tries to punish are individuals and small operations, he added, which means they are at times unable to pay the full penalties.&lt;/p&gt; &lt;p&gt;“Fines serve to penalize bad conduct and deter future misconduct,” the FCC spokesman said. A spokeswoman for the Justice Department, which can settle or drop cases, declined to comment. &lt;/p&gt; &lt;p&gt;The dearth of financial penalties collected by the U.S. government for violations of telemarketing and auto-dialing rules shows the limits the sister regulators face in &lt;a href=&quot;https://www.wsj.com/articles/stop-robocalling-me-i-didnt-11546261200?mod=article_inline&quot; class=&quot;icon none&quot;&gt;putting a stop&lt;/a&gt; to illegal robocalls. It also shows why the threat of large fines can fail to deter bad actors.&lt;/p&gt; &lt;p&gt;“It’s great that we have these laws; it’s great that we have public enforcement, but because there are so many calls and so many callers, the public enforcement is a joke,” said 




      Margot Saunders, 




       senior counsel at consumer advocacy group National Consumer Law Center. “It doesn’t even make a dent.”&lt;/p&gt; 





      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaVideo&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaVideo&amp;#10;          article__inset--header&amp;#10;  &quot;&gt;
      
      
      
          &lt;figure class=&quot;media-object-video article__inset__video media-object-video--standard&quot;&gt;
  
    &lt;figcaption class=&quot;wsj-article-caption article__inset__video__caption&quot;&gt;
          Robocalls—those pre-recorded, unwanted phone calls—are at a record high. WSJ’s Joanna Stern explains how you can fight back against them, and why it matters. Photo: Drew Evans/The Wall Street Journal. (Originally published June 28, 2016)
        &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 



       &lt;p&gt;There were 26.3 billion &lt;a href=&quot;https://www.wsj.com/articles/everyone-loathes-robocalls-some-people-try-to-get-even-11545321458?mod=article_inline&quot; class=&quot;icon none&quot;&gt;unwanted robocalls&lt;/a&gt; made to U.S. mobile phones in 2018, by one measure from robocall-blocking app Hiya. Another company that offers such services, YouMail Inc., puts the number of unwanted and illegal robocalls made in the U.S. last year even higher, at nearly 48 billion. &lt;/p&gt; &lt;p&gt; 






        &lt;a href=&quot;https://quotes.wsj.com/T&quot;&gt;AT&amp;amp;T&lt;/a&gt;&lt;span&gt; Inc.&lt;/span&gt;


       and other large wireless carriers are currently working to implement a call-verification system by the end of the year that regulators and telecom industry executives say will help consumers identify legitimate calls. That system won’t block calls, but will signal that the caller has the right to use a given number and that it hasn’t been spoofed. &lt;/p&gt; &lt;p&gt;The FCC and FTC say there are challenges to collecting penalties for robocall-related wrongdoing. Small illegal operations can quickly close up shop and change their names, enforcement officials say. Some are based overseas, making it &lt;a href=&quot;https://www.wsj.com/articles/why-robocallers-win-even-if-you-dont-answer-1528104600?mod=article_inline&quot; class=&quot;icon none&quot;&gt;difficult to identify or seize assets&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Fines are “a deterrent on legitimate companies that have real assets in the U.S.,” said 




      Daniel Delnero, 




       a senior attorney at Squire Patton Boggs in Atlanta that advises companies on consumer class-action suits related to the Telephone Consumer Protection Act. &lt;/p&gt; &lt;p&gt;For a spam caller or overseas operator, “that’s really just pushing for Social Security numbers or bank account information—it’s less of a deterrent, because they don’t really have anything that could be collected anyway,” Mr. Delnero said. &lt;/p&gt; 





      &lt;div data-layout=&quot;wrap&amp;#10;              &quot; data-layout-mobile=&quot;inline&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetNewsletterSignup&amp;#10;          wrap&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetNewsletterSignup&amp;#10;          article__inset--wrap&amp;#10;  &quot;&gt;
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
          &lt;div class=&quot;strap-container&quot;&gt;
      &lt;h4 class=&quot;strap&quot; itemprop=&quot;description&quot;&gt;Newsletter Sign-up&lt;/h4&gt;
    &lt;/div&gt;
    

      
      
      &lt;/div&gt; 



       &lt;p&gt;In many FTC cases involving civil penalties, the agency secures judgments for large fines and settles for a smaller sum, contingent upon the accused person or company being transparent about their assets, Mr. Barlow said. Congress requires the agency to consider an individual’s ability to pay. &lt;/p&gt; &lt;p&gt;In the 2017 case of a “recidivist robocaller” that placed illegal robocalls for nearly a decade, for example, two defendants faced civil penalties of $2.7 million in a California suit filed by the FTC. They were each ultimately ordered to pay $225,000 or less, if their financial disclosures were complete and accurate. &lt;/p&gt; &lt;p&gt; 




      Ajit Pai, 




       chairman of the FCC since January 2017, said in an interview on robocalls earlier this month that in the past, few financial penalties have been collected, but that he is working to change that. It is “important to &lt;a href=&quot;https://www.wsj.com/podcasts/instant-message/20-tesla-got-a-brand-new-car/6603b252-8c58-4caf-a7a0-25fee391b3ec?mod=article_inline&quot; class=&quot;icon none&quot;&gt;send a signal&lt;/a&gt; to other would-be robocallers that you’re not going to be able to get away with it,” Mr. Pai said. &lt;/p&gt; &lt;p&gt;Still, none of the $202 million demanded in what the FCC calls forfeiture orders against alleged rulebreakers during Mr. Pai’s tenure has been collected. &lt;/p&gt; &lt;p&gt;The agency in May 2018, for example, fined a Florida-based company and its top executive $120 million for making 100 million illegal robocalls during a three-month period in 2016. Agency records as of late December indicate that no funds had been collected.&lt;/p&gt; &lt;p&gt; &lt;strong&gt;Write to &lt;/strong&gt;Sarah Krouse at &lt;a href=&quot;mailto:sarah.krouse@wsj.com&quot; target=&quot;_blank&quot; class=&quot;icon &quot;&gt;sarah.krouse@wsj.com&lt;/a&gt;&lt;/p&gt;






      &lt;/div&gt;



  
  &lt;p&gt;Copyright ©2019 Dow Jones &amp;amp; Company, Inc. All Rights Reserved. 87990cbe856818d5eddac44c7b1cdeb8&lt;/p&gt;
  
  &lt;/div&gt;


</description>
<pubDate>Sat, 09 Nov 2019 17:27:39 +0000</pubDate>
<dc:creator>simonebrunozzi</dc:creator>
<og:title>The FCC Has Fined Robocallers $208 Million. It’s Collected $6,790. </og:title>
<og:description>Telecommunications regulators have levied hefty financial penalties against illegal robocallers and demanded that bad actors repay millions to their victims. But years later, little money has been collected.</og:description>
<og:url>https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803</og:url>
<og:image>https://images.wsj.net/im-63149/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/the-fcc-has-fined-robocallers-208-million-its-collected-6-790-11553770803?mod=rsswn</dc:identifier>
</item>
<item>
<title>Time Series Prediction – A short introduction for pragmatists</title>
<link>https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</link>
<guid isPermaLink="true" >https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</guid>
<description>&lt;div class=&quot;text-lead&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;Are you trying to predict time series but don't know where to start? This blog post will provide a comparison of the most prominent techniques and show you how to implement them.&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;Business Problem&lt;/h2&gt;
&lt;p&gt;Time Series prediction can be used in a number of business areas. You can think of a number of areas and questions. For example&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Marketing/Sales: How are our sales numbers going to be in Q4?&lt;/li&gt;
&lt;li&gt;Health: Do we need more beds in the hospital next year?&lt;/li&gt;
&lt;li&gt;Sports: When is the outdoor pool temperature finally going to reach 21°C this year?&lt;/li&gt;
&lt;li&gt;Sales: Will we sell enough watches this year to make the target we have set?&lt;/li&gt;
&lt;li&gt;Energy: What will the energy consumption of this household be tomorrow?&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Generally, a prediction problem involves using past observations to predict or forecast one or more possible future observations. The goal is to guess about what might happen in the future. Knowing the future can impact our decisions today so we have a great interest in predicting it. So in this blog article I want to show you a couple of techniques that you might try and provide you with a couple of tools that you can try right away.&lt;/p&gt;
&lt;p&gt;This blog post was heavily inspired by the book &lt;a href=&quot;https://machinelearningmastery.com/deep-learning-for-time-series-forecasting/&quot;&gt;“Deep Learning for Time Series Forecasting - Predict the Future with MLPs, CNNs and LSTMs in Python”&lt;/a&gt; from Jason Brownlee who did an excellent job summarizing all of the approaches and methods in one big 700 pages book. If you feel you want to deep dive into time series prediction make sure give it a try.&lt;/p&gt;
&lt;h2&gt;Challenges&lt;/h2&gt;
&lt;p&gt;Generally when predicting time series there are a number of challenges that are specific for this set of problems:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In a time series, the observations for an input variable depend upon one another. For example, the observation at time t is dependent upon the observation at t−1; t−1 may depend on t−2, and so on. We call such variables endogenous because it is affected by other variables in the system and the output variable depends on it. Although time series might also have exogenous variables (variables that are not influenced by other variables) it's usually these endogenous property of variables that distinguishes them from other problems.&lt;/li&gt;
&lt;li&gt;Time series may have obvious patterns, such as a trend or seasonal cycles.&lt;/li&gt;
&lt;li&gt;Sometimes we just want to predict the next time step, but sometimes we might even want to predict multiple steps, which makes our prediction harder.&lt;/li&gt;
&lt;li&gt;Additionally some models age well over time, thus meaning they are “static” and have not to be updated, while others are dynamic, e.g. you have to retrain your model every week.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;To make things even harder sometimes we have contiguous data, meaning that we have uniform observations over time, but more often than not we have discontinuous data, where the observations are not uniform over time and so needs additional preparation.&lt;/p&gt;
&lt;h3&gt;Choosing a framework to work with&lt;/h3&gt;
&lt;p&gt;Generally there are a number of different approaches to predicting time series, some of them are able to reflect the number of different challenges while others are not. Thus it totally depends on your problem what the right choice is. Let's dive in.&lt;/p&gt;
&lt;p&gt;Usually you already have your dataset (a database, csv, etc..) and you know what needs to be forecasted and maybe you even have a clue how to evaluate a model that you have built. The fastest and most secure way forward from my experience is to start with easy models and make your way up to the more complex ones, in order to figure out if you are making any progress. So we will be following &lt;a href=&quot;https://en.wikipedia.org/wiki/Occam%27s_razor&quot;&gt;occam's razor&lt;/a&gt; which says: one should select the solution with the fewest assumptions.&lt;/p&gt;
&lt;p&gt;So our progression in this blog post will look like the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Make a simple baseline e.g. average the data&lt;/li&gt;
&lt;li&gt;Try autoregression e.g. SARIMA models (Seasonal Autoregressive Integrated Moving Average Models)&lt;/li&gt;
&lt;li&gt;Try exponential smoothing e.g. smooth the s*** out of the data, but this time use explicitly exponential functions not linear&lt;/li&gt;
&lt;li&gt;Try a simple neural network&lt;/li&gt;
&lt;li&gt;Try deep learning CNN, LSTM, etc..&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now you are probably reading this because you want to know how number 5 works, but more often than not you really don’t need a deep learning model, often just having number 1 through 3 gives you enough precision to support your business.&lt;/p&gt;
&lt;p&gt;Of course if precision is your big goal then trying the complicated models may be worth your time, otherwise not. We will cover all techniques except for number 5, which we will cover explicitly in the next blog post of this series.&lt;/p&gt;
&lt;p&gt;Yet, let me first present you with a couple of useful concepts that help us train, test, tune and evaluate our models. I will only cover here the simplest way aka predicting the next step in time series. So for example if you have daily data, this means we just look one day ahead. If you predict multiple days ahead you will need slightly different ways to test the data, but the rough idea stays the same.&lt;/p&gt;
&lt;h3&gt;How to train our models?&lt;/h3&gt;
&lt;p&gt;Generally in machine learning we split the data into train and test in order to see how well our model performs, but time series data is kind of special because it has an ordering. Thus we have to write a split function that maintains this ordering while taking a number of ordered observations. So we are not splitting our data by random but instead we leave the ordering and just take chunks of data for training and testing.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# split the train and test data, maintaining the order
def train_test_split(data, n_test):
    return data[:-n_test], data[-n_test:]&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;How to test our models?&lt;/h3&gt;
&lt;p&gt;After having fitted the model (see below) we want to make a forecast for the given history, then compare the prediction to the actual value that was going to come next. For this we can use the root mean squared error, which is a pretty standard way of measuring errors in machine learning.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# measure the root mean squared error
def measure_rmse(actual, predicted):
    return sqrt(mean_squared_error(actual, predicted))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So to test how our model works not just for one data point but the whole points contained in the test data, we have to split our model multiple times, each time adding one datapoint to the training data and seeing what the model will predict. This way of constantly splitting the data and looking ahead is called walk forward validation.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# walk forward validation in a step by step manner
def walk_forward_validation(data, n_test):
    predictions = list()
    train, test = train_test_split(data, n_test)
    model = model_fit(train)
    history = [x for x in train] #seed history with training data
      # walk forward
    for i in range(len(test)):
        # fit model and make forecast for history
        yhat = model_predict(model, history)
        predictions.append(yhat) #store the forecast
        history.append(test[i]) #add it to history for next loop
    # estimate error
    error = measure_rmse(test, predictions)
    print(' &amp;gt; %.3f' % error)&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;How to tune our models?&lt;/h3&gt;
&lt;p&gt;Since the methods that we will try depend heavily on a number of hyperparameters (e.g. how many seasons does a year have, do we want to average over the last 3,4,5 or 10 data points, …) we cannot know which hyperparameters are going to give us the best result. For this one way of approaching the problem can be to simply try all of the combinations and see which ones work best on the test data. This is also called a grid search.&lt;/p&gt;
&lt;p&gt;A simple example would be: for the average baseline model try averaging over the last 1,2,3, … all values in the dataset and see which n returns the best results. So here we have one hyperparameter. In other models we might have to tweak multiple parameters to find which combination works best.&lt;/p&gt;
&lt;h2&gt;Lets predict something!&lt;/h2&gt;
&lt;p&gt;To see how well our models do we can test them on 4 different datasets.&lt;/p&gt;
&lt;h3&gt;Female births in California in 1959&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/380a1d/baby.jpg&quot;/&gt;&lt;p&gt;The first dataset has almost no “trend” - which means that the numbers are roughly not going up or down over a longer period. In our case the dataset is called &lt;a href=&quot;https://www.kaggle.com/dougcresswell/daily-total-female-births-in-california-1959&quot;&gt;“female births in California in 1959”&lt;/a&gt;. Regarding the business case, we can easily think how it would be good to know the next years numbers in order to know if we need more staff, or more beds, so we don’t run out of capacity and can offer a good service. One step is one day in this dataset.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/fe63ae/female.png&quot;/&gt;&lt;h3&gt;Shampoo sales over a three year period&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/f10392/shampoo.png&quot;/&gt;&lt;p&gt;The second dataset has a “trend”. Its called &lt;a href=&quot;https://www.kaggle.com/guangningyu/sales-of-shampoo&quot;&gt;https://www.kaggle.com/guangningyu/sales-of-shampoo&lt;/a&gt; sales of shampoo over a three year period. We can clearly see that this company is selling more and more shampoo each year, so they better should know ahead how much they are going to sell next year in order to be able to plan ahead nicely. One step is one month.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/16110f/shampoo.jpg&quot;/&gt;&lt;h3&gt;Average monthly temperature over three years&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/427371/temperature.jpg&quot;/&gt;&lt;p&gt;The third dataset has no trend but a new thing called seasonality. It is called &lt;a href=&quot;https://github.com/jbrownlee/Datasets/blob/master/monthly-mean-temp.csv&quot;&gt;monthly average temperature over three years&lt;/a&gt;. Here we can roughly say we don’t see an average rise in temperature, but it seems to fluctuate a lot during the year in a regular way aka. it's hot in the summer and cold in the winter - what a surprise :). We might think of a business case where an ice cream factory needs to know when it needs to ramp up their production in order to not run out of stock. One step is one month.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/f34c5e/temp.jpg&quot;/&gt;&lt;h3&gt;Car sales in quebec in the 60ties&lt;/h3&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/ce074b/cars.jpg&quot;/&gt;&lt;p&gt;The fourth dataset has seasonality and a trend. Its called &lt;a href=&quot;https://data.world/perceptron/monthly-car-sales-quebec-1960&quot;&gt;monthly car sales in quebec in the 60ties&lt;/a&gt;. We see that although on average the number of car sales is going up over the years, the sales also depend a lot on the season of the year. It seems that people love to buy their cars in spring and autumn. One step is one month.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/b0166c/cars.jpg&quot;/&gt;&lt;p&gt;After having introduced the datasets let us dive into the methods.&lt;/p&gt;
&lt;h2&gt;1. Baseline average&lt;/h2&gt;
&lt;p&gt;One of the simplest things that we can try is to take the n-last value from the data and simply do a median or mean on this subset. Depending on the n we are either taking into consideration a long or short history.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# use mean or median to predict the future
def average_forecast(history, config):
    n, avg_type = config
    if avg_type is 'mean':
        return mean(history[-n:])
    return median(history[-n:])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Although this model looks a bit “stupid” it might do the job well for data where there is a lot of noise, are where we want to put a strong emphasis only on the last values. So how does it do on our datasets? Let's have a look: The brown line is the history that we trained it on, the blue line is the “future” and the orange line is the prediction of our model.&lt;/p&gt;
&lt;p&gt;Female births: It got the best results, aka it got the lowest RMSE of 6.37, when it was looking back on the last 192 days and used a mean to average the history. Although our prediction does not model all the peaks of the data, at least it seems to get that the data doesn’t change much, so it predicts the same value every time.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/9cd247/famale-births-average.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: Here we got the best results looking back at the last 2 months, using a median and our RMSE was 113. Our model seems to somehow doing ok, it simply sticks to rather new data and is able to keep up with the trend somehow.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/4edec8/shampoo-average.jpg&quot;/&gt;&lt;p&gt;Temperature: Here we got the best results looking back 1 months using a median strategy. Our RMSE was 5.14. We see that our average strategy seems to be lagging behind the actual data and it is.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/66e592/temp-average.jpg&quot;/&gt;&lt;p&gt;Car Sales: Here we got the best results looking back 1 months using a median strategy. The RMSE was 3647. We see that somehow our average strategy simply relies on sticking to the present. Another good result is also obtained with a mean of 14 days, resulting in a RMSE of 4085.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/8057c0/cars-average.jpg&quot;/&gt;&lt;h2&gt;2. SARIMA models&lt;/h2&gt;
&lt;p&gt;The next family of models we are going to look at are the SARIMA (Seasonal Autoregressive Integrated Moving Average) models. You can very easily use them because they come in the form of a library that can be imported directly from statsmodels. It has basically three different parameter-types:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Order: A tuple p, d, and q parameters for the modeling of the trend. They control the order of the autoregression, of the difference and of the moving average.&lt;/li&gt;
&lt;li&gt;Seasonal order: A tuple of p,d, q, and m parameters for the modeling the seasonality. These also control the order of the seasonal autoregression, seasonal difference, seasonal moving average and the number of steps that contribute towards one seasonal period.&lt;/li&gt;
&lt;li&gt;Trend: A parameter for controlling a model of the deterministic trend. It can either be ‘n’, ‘c’,‘t’, and ‘ct’ for: no trend, constant, linear, and constant with linear trend, respectively.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If we know enough about the problem we might specify them correctly or we can just try to grid-search them. We will just do this as we did for the average models. We see below that we can supply these parameters fit the model and then use it to predict the results for the next step.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# A simple way to use SARIMAX from statsmodels
def sarima_forecast(history, order, sorder, trend):
    model = SARIMAX(history, order=order, seasonal_order=sorder, trend=trend,
      enforce_stationarity=False, enforce_invertibility=False)
    # fit model
    model_fit = model.fit(disp=False)
    # make one step forecast
    yhat = model_fit.predict(len(history), len(history))
    return yhat[0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So how does this model do on our data?&lt;/p&gt;
&lt;p&gt;Female births: It seems to have picked up a small pattern in the data, with a RMSE of 6,16 so it actually improved on the baseline method.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/0c15df/famale-births-sarima.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: For the shampoo sales we see that the model picked up the trend very nicely. The best parameters resulted in a RMSE of 62.8 so a big improvement against the baseline of 113 in the average model.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/1eb929/shampoo-sarima.jpg&quot;/&gt;&lt;p&gt;Temperature: Here we see an almost perfect fit in the data, notice how nicely the orange (predicted) curve matches the blue (actual data) one. This results in a RMSE of 2.27 so a big improvement on the 5.14 of the baseline model.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/70e447/temp-sarima.jpg&quot;/&gt;&lt;p&gt;Car sales: Here we see nicely how the best fitting SARIMA model picked up the trend and seasonality. This results in a RMSE of 2600 vs the 3647 in the baseline model. So quite an improvement.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/5d7635/cars-sarima.jpg&quot;/&gt;&lt;p&gt;We see that the family of SARIMA models is very capable to model different types of time series, each time hugely improving on the baseline of simply going with an average. Let’s find out if the exponential smoothing can improve on this.&lt;/p&gt;
&lt;h2&gt;3. Exponential Smoothing or Winter-Holt models&lt;/h2&gt;
&lt;p&gt;Exponential smoothing models are a time series forecasting method for univariate data. While in the SARIMA models the prediction is simply a weighted linear sum of recent past observations, in exponential smoothing the model explicitly uses an exponentially decreasing weight for past observations. Specifically, past observations are weighted with a geometrically decreasing ratio.&lt;/p&gt;
&lt;p&gt;There are basically three types of exponential smoothing time series forecasting methods. A simple method that assumes no systematic structure, an upgrade that explicitly handles trends, and the most advanced method that has additionally support for seasonality. We will use the most advanced model in our forecast.&lt;br/&gt;The implementation from statsmodels already has an optimizer that automatically tunes these &lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_smoothing&quot;&gt;hyperparameters&lt;/a&gt; for us: the smoothing coefficient for the level (alpha), the smoothing coefficient for the trend (beta), the smoothing coefficient for the seasonal component (gamma) and the coefficient for the damped trend (phi).&lt;/p&gt;
&lt;p&gt;Yet we need to grid search these parameters:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;trend (t): The type of trend component, as either add for additive or mul for multiplicative. It can also be set to None.&lt;/li&gt;
&lt;li&gt;damped(d): Whether or not the trend component should be damped, either True or False.&lt;/li&gt;
&lt;li&gt;seasonality(s): The type of seasonal component, as either add for additive or mul for multiplicative. It can be turned off with None.&lt;/li&gt;
&lt;li&gt;seasonal periods (p): The number of time steps in a seasonal period, e.g. 12 for 12 months in a yearly seasonal structure.&lt;/li&gt;
&lt;li&gt;boxcox(b): Whether or not to perform a power transform of the series.&lt;/li&gt;
&lt;li&gt;Remove bias(r): If the bias/trend should be removed from the data&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# Exponential smoothing with statsmodels
def exp_smoothing_forecast(history, t,d,s,p,b,r):
    history = array(history)
    model = ExponentialSmoothing(history, trend=t, damped=d, seasonal=s, seasonal_periods=p)
    # fit model
    model_fit = model.fit(optimized=True, use_boxcox=b, remove_bias=r)
    # make one step forecast
    yhat = model_fit.predict(len(history), len(history))
    return yhat[0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So how does this family of models do on our data?&lt;/p&gt;
&lt;p&gt;Female-births: Well here we are rather closer to the solution that the average baseline offered us. Apparently the models didn’t pick up on the fluctuations, which results in a RMSE of 6,74 which is the worst of all models so far.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/625c96/famale-births-exp.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: Here the prediction looks better although I feel like it has a certain lag. This can be taken care of with additional modeling but with an RMSE of 97 we are a little bit better than the average model but worse than the SARIMA model.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/9dc02d/shampoo-exp.jpg&quot;/&gt;&lt;p&gt;Temperature: Here we got quite a mediocre fit to the data. The RMSE of 4.57 is much worse than the 2.45 of the SARIMA models and only slightly better than the baseline.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/288d8f/temp-exp.jpg&quot;/&gt;&lt;p&gt;Car sales: The fit to the care sales looks pretty good although we also have this “lag” problem here. With a RMSE of 3635 we are quite a bit worse than the SARIMA solutions.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/314a76/cars-exp.jpg&quot;/&gt;&lt;h3&gt;Little Mid-Resume&lt;/h3&gt;
&lt;p&gt;Based on our little experiments so far we see that the average models seem not to be so bad in comparison to the much more complicated models. Yet the Winter-Holt models seem to do worse than the SARIMA models, which have shown a very good performance, given that they had so little training data (e.g. often only less than 100 data points).&lt;/p&gt;
&lt;h2&gt;4. Neural networks&lt;/h2&gt;
&lt;p&gt;Before we can try different methods, we have to re-shape our data a little bit to make it work with normal machine learning methods.&lt;/p&gt;
&lt;h3&gt;Time series as a supervised learning problem&lt;/h3&gt;
&lt;p&gt;While we can use special methods that work on time-series data only we can also re-frame time series as a simple supervised learning problem. We go from representing the data like this:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;time&lt;/th&gt;
&lt;th&gt;measure&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;To this:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;y&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;110&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;110&lt;/td&gt;
&lt;td&gt;108&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;108&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Doing this is called a window approach or a lag method. The number of previous states is the window size or lag, so in our example above 1. The benefit is that now we can work with any linear or nonlinear standard ml method giving us more flexibility in our toolkit. In code it looks like this - using the pandas shift method we can copy and shift the data next to each other.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# Transforming time-series to a supervised problem
def series_to_supervised(data, n_in, n_out=1):
    df = DataFrame(data)
    cols = list()
    # input sequence (t-n, ... t-1)
    for i in range(n_in, 0, -1):
        cols.append(df.shift(i))
    # forecast sequence (t, t+1, ... t+n)
    for i in range(0, n_out):
        cols.append(df.shift(-i))
    # put it all together
    agg = concat(cols, axis=1)
    # drop rows with NaN values
    agg.dropna(inplace=True)
    return agg.values&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So for our example of car sales this method would produce the following results:&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/9e70bb/shift.jpg&quot;/&gt;&lt;p&gt;Now we can write the forecast using a simple neural network with keras.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# Fit a NN model
def neural_network_forecast(history, n_input,n_nodes,n_epochs,n_batch):
    data = series_to_supervised(history, n_input)   # prepare data
    train_x, train_y = data[:, :-1], data[:, -1] # first col input, last pred
    # define model
    model = Sequential()
    model.add(Dense(n_nodes, activation='relu', input_dim=n_input))
    model.add(Dense(1))
    model.compile(loss='mse', optimizer='adam')
    # fit
    model_fit = model.fit(train_x, train_y, epochs=n_epochs, batch_size=n_batch, verbose=0)
    x_input = array(history[-n_input:]).reshape(1, n_input)
    # make one step forecast
    yhat = model.predict(x_input, verbose=0)
    return yhat[0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We are basically doing the same as above, with the added step that we transform the data in the way described above. The neural network is modeled with keras where we have one Dense layer that takes the input that is connected to one dense layer that is the output of our model. We can experiment with the number of data points that we look at at the same time (e.g. 12/24) the number of nodes that our network has (e.g. 50/100/500…), number of epochs (e.g. 100) and the batch size (e.g 100).&lt;/p&gt;
&lt;h2&gt;So how does it do on our data?&lt;/h2&gt;
&lt;p&gt;Female Births: We see that the model picked up quite a bit of the fluctuations, giving us a RMSE of 6.7 . Yet this is not better than the baseline and the SARIMA models.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/632cfa/pred-births-nn.jpg&quot;/&gt;&lt;p&gt;Shampoo sales: We did quite bad on the shampoo sales. We got a RMSE of 115, so not even an improvement against the baseline and much worse than the SARIMA (RMSE 62) models and somewhere similar than the Winter Holt models (RMSE 97)&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/e709d1/pred-shampoo-nn.jpg&quot;/&gt;&lt;p&gt;Temperature: With a RMSE of 2.20 we have even managed to beat the results of the SARIMA models (2.27) which is a nice surprise!&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/4f17bc/pred-temp-nn.jpg&quot;/&gt;&lt;p&gt;Car sales: With a RMSE of 2091 we did excellent modeling a trend and seasonality. We have outperformed the SARIMA models (RMSE 2600) by quite a bit.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/2e16f4/pred-cars-nn.jpg&quot;/&gt;&lt;p&gt;So there you have it, apparently our very simple neural network wasn’t best in all categories, but it managed to give us a great performance for the temperature seasonal time series and the trend+seasonal time series when modeling the car sales.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Given our little contest we can draw the following table below. We see that SARIMA ant the simple neural network gave us the best results for our small examples. This should not lead you to the conclusion that you should only use these methods and forget the rest, but instead, that it's worth trying them all. We might for example notice that a simple average does pretty well sometimes (e.g. for the female births) and that it might not be worth it to add that much complexity in order to improve just a few percent.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;No-Trend&lt;/th&gt;
&lt;th&gt;Trend&lt;/th&gt;
&lt;th&gt;Seasonality&lt;/th&gt;
&lt;th&gt;Trend+Seasonality&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Dataset / Method&lt;/td&gt;
&lt;td&gt;Female births&lt;/td&gt;
&lt;td&gt;Shampoo Sales&lt;/td&gt;
&lt;td&gt;Temperature&lt;/td&gt;
&lt;td&gt;Car Sales&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Average&lt;/td&gt;
&lt;td&gt;6,37&lt;/td&gt;
&lt;td&gt;113,15&lt;/td&gt;
&lt;td&gt;5,14&lt;/td&gt;
&lt;td&gt;3647&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SARIMA&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.16 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;62.83 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2,27&lt;/td&gt;
&lt;td&gt;2600&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Holt-Winters&lt;/td&gt;
&lt;td&gt;6,74&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;4,57&lt;/td&gt;
&lt;td&gt;3635&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Simple Neural-Network&lt;/td&gt;
&lt;td&gt;6,7&lt;/td&gt;
&lt;td&gt;115&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2.20 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;2091 (WINNER)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Aaaand one more thing - If you are still here, it seems I might as well share with you one secret that will make your life easier when working with time series. There is a very nice library called &lt;a href=&quot;https://facebook.github.io/prophet/&quot;&gt;Prophet&lt;/a&gt; out there, that makes predicting time series an almost effortless endeavour. Apparently the engineers at Facebook were tired to reinvent the wheel every time they “just” needed to predict some data into the future. So they’ve built their own open source tool.&lt;/p&gt;
&lt;p&gt;“Prophet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.”&lt;/p&gt;
&lt;p&gt;Let me show you how it works. First you need to whip the data a little bit into shape, by giving it the right column names and types and then you are basically ready to go.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# A few simple preprocessing steps
series = pd.read_csv('monthly-car-sales.csv', header=0, index_col=None)
series['ds']  = pd.to_datetime(series['Month'])
series[['y']] = series[['Sales']].astype(float)
series = series[[&quot;ds&quot;,&quot;y&quot;]]
series.head()&lt;/code&gt;
&lt;/pre&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/e2ea12/headwide.jpg&quot;/&gt;&lt;p&gt;Then you supply it with the most important parameters: which is the number of periods it should predict and what the frequency of your data is (e.g. months) . You select a seasonality mode and can also add different seasonalities for weeks, months, etc… and then fit the data.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-python&quot;&gt;# A simple prediction
m = Prophet(mcmc_samples=500,seasonality_mode='multiplicative').fit(series);
future = m.make_future_dataframe(periods=48,freq='M')
forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The outcome is a model that can predict your data not only one step into the future but multiple. Of course each step will have more uncertainty in it. We can as well do this with our methods above, I am just saying that with prophet it already comes in the box, which is a nice thing. So how does a prediction look like? Let's have a look at the car sales.&lt;/p&gt;
&lt;p&gt;Below you see a standard output from prophet, where it shows us the data points in black and the prediction in blue. It even shows us the rising uncertainty in the future (light blue)&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/e72490/prophet.jpg&quot;/&gt;&lt;p&gt;We also get the trend and seasonal components right out of the box, where we can investigate that car sales happen mostly around spring and autumn, but less in the hot summer days.&lt;/p&gt;
&lt;img alt=&quot;&quot; src=&quot;https://liip.rokka.io/www_inarticle_3/7673a1/components.jpg&quot;/&gt;&lt;h3&gt;So how does it do vs the other methods?&lt;/h3&gt;
&lt;p&gt;We will even be a bit unfair and just see how well the multi-step predictions of prophet match up with the one-step predictions we have used before.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;No-Trend&lt;/th&gt;
&lt;th&gt;Trend&lt;/th&gt;
&lt;th&gt;Seasonality&lt;/th&gt;
&lt;th&gt;Trend+Seasonality&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Dataset / Method&lt;/td&gt;
&lt;td&gt;Female births&lt;/td&gt;
&lt;td&gt;Shampoo Sales&lt;/td&gt;
&lt;td&gt;Temperature&lt;/td&gt;
&lt;td&gt;Car Sales&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Best Method&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;6.16 (SARIMA)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;62.83 (SARIMA)&lt;/td&gt;
&lt;td&gt;2.2 (Neural Network)&lt;/td&gt;
&lt;td&gt;2091 (Neural Network)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Prophet&lt;/td&gt;
&lt;td&gt;6,64&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;37,67&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1,91&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;1382&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;It turns out Prophet has beaten almost all of our simple methods by quite a bit. So should we always just use prohphet and forget the rest? Well it still depends. If you need something where you quickly get a prediction then use prophet. If you need to have influence over the method or want to have a prediction more sophisticated than our simple examples then you should invest the time into modeling it yourself.&lt;/p&gt;
&lt;p&gt;Also when it comes to a multivariate prediction you might be better of using your own method although prophet might also work using the &lt;a href=&quot;https://www.analyticsvidhya.com/blog/2018/09/multivariate-time-series-guide-forecasting-modeling-python-codes/&quot;&gt;VAR method&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So what’s the lesson here? Maybe we have a couple:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you want to predict time series, start simple and a simple method might just be enough.&lt;/li&gt;
&lt;li&gt;If you add complexity, then measure if it was worth it.&lt;/li&gt;
&lt;li&gt;When working with more complex methods, you can gridsearch the solution although it is rather costly.&lt;/li&gt;
&lt;li&gt;You have multiple options on which methods to use, including more recent machine learning methods like deep learning.&lt;/li&gt;
&lt;li&gt;If you need something out of the box, for a simple univariate time series libraries like prophet might be just right to do the job.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That's it folks! You can find the code that was used to generate these time series prediction as usual in our &lt;a href=&quot;https://github.com/plotti/timeseries_demo&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 16:25:00 +0000</pubDate>
<dc:creator>makaimc</dc:creator>
<og:title>Time Series Prediction - A short introduction for pragmatists · Blog · Liip</og:title>
<og:type>article</og:type>
<og:url>https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</og:url>
<og:image>https://liip.rokka.io/www_socialmedia_3/609ed2/collage.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.liip.ch/en/blog/time-series-prediction-a-short-comparison-of-best-practices</dc:identifier>
</item>
<item>
<title>My name causes an issue with any booking</title>
<link>https://travel.stackexchange.com/questions/149323/my-name-causes-an-issue-with-any-booking-names-end-with-mr-and-mrs</link>
<guid isPermaLink="true" >https://travel.stackexchange.com/questions/149323/my-name-causes-an-issue-with-any-booking-names-end-with-mr-and-mrs</guid>
<description>&lt;p&gt;Airlines were early pioneers in communication technologies, and have been very slow to modernize. For example, &lt;em&gt;today&lt;/em&gt;, airline IT systems still communicate extensively using &lt;a href=&quot;https://en.wikipedia.org/wiki/Airline_teletype_system&quot; rel=&quot;noreferrer&quot;&gt;TTY&lt;/a&gt;: Type-A for synchronous communication, and Type-B for asynchronous communications.&lt;/p&gt;
&lt;p&gt;There is a standard for TTY, which nobody follows, a de-facto standard by SITA, which is mostly followed, and many parties have quirks in their implementation, either not being able to parse some fields/special indicators, or emitting incorrect ones; everything you'd expect from a 100 years old format which grew organically as new needs and ideas arose.&lt;/p&gt;
&lt;p&gt;This is a pervasive theme in Airline IT, with multiple epochs of technology being used side by side as companies migrate very slowly.&lt;/p&gt;
&lt;hr/&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The airlines will swear that they received the name as A and the agent will swear that the name was sent as Amr.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They are both right, quite likely, and the issue lies between the Travel Agency and the GDS.&lt;/p&gt;
&lt;p&gt;GDS -- such as Amadeus and Sabre -- generally offer multiple interfaces into their systems, from old ones kept for compatibility reasons to more modern ones. More modern interfaces will accept structured messages which leave no room for ambiguity; the old ones however... are full of quirks.&lt;/p&gt;
&lt;p&gt;In general, Travel Agencies are loathe to modernize their IT: it requires re-training the agents, and buying new software, which costs quite a bit of money with little to no benefits to them.&lt;/p&gt;
&lt;p&gt;In the case of a Travel Agency connected to Amadeus, for example, this means that they are likely using ATE: the Amadeus Terminal Emulator, which as the name implies emulates the terminals of old.&lt;/p&gt;
&lt;p&gt;Check the &lt;a href=&quot;http://www.amadeus.com/bg/documents/aco/bg/basic-qrg.pdf&quot; rel=&quot;noreferrer&quot;&gt;Quick Reference Guide, p. 33&lt;/a&gt; on how to create a PNR:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;NM1SMITH/JOHN MR
&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;NM&lt;/code&gt;: &quot;Name&quot; command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt;: 1 passenger with the following surname.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SMITH&lt;/code&gt;: surname.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JOHN&lt;/code&gt;: first name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MR&lt;/code&gt;: title.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Using a space, the parsing is unambiguous, however not all agents put a space, thus if instead the agent types:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;NM1ELADAWY/AMR
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then the command will be parsed as (NM, 1, ELADAWY, A, MR) to be &quot;helpful&quot;.&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;The Good&lt;/h3&gt;
&lt;p&gt;As mentioned, internally a GDS will use structured records. If you solve the data entry issue, and your first name is properly recorded into the system, then you should not have to worry about further issues.&lt;/p&gt;
&lt;h3&gt;The Bad&lt;/h3&gt;
&lt;p&gt;You'll need to double-check the agents' work. Just because they type &lt;code&gt;AMR&lt;/code&gt; does not mean that the system will interpret it as &lt;code&gt;AMR&lt;/code&gt;, as we've seen.&lt;/p&gt;
&lt;p&gt;They can fix the issue by explicitly specifying the title: &lt;code&gt;NM1ELADAWY/AMR MR&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;The Ugly&lt;/h3&gt;
&lt;p&gt;Agents may not be entering your name in the system immediately, for a variety of reasons. If they do not, you cannot double-check that they did it properly. You may have to insist that they do it immediately.&lt;/p&gt;
&lt;h3&gt;Online Travel Agencies&lt;/h3&gt;
&lt;p&gt;OTAs generally have more modern, automatized, systems. As such they are more likely to rely on the more modern interfaces of a GDS.&lt;/p&gt;
&lt;p&gt;Using an OTA may be a simpler way for you to ensure your name is properly entered in the system.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Good luck&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 11:17:31 +0000</pubDate>
<dc:creator>signa11</dc:creator>
<og:type>website</og:type>
<og:url>https://travel.stackexchange.com/questions/149323/my-name-causes-an-issue-with-any-booking-names-end-with-mr-and-mrs</og:url>
<og:image>https://cdn.sstatic.net/Sites/travel/img/apple-touch-icon@2.png?v=c2b2aadd2cbd</og:image>
<og:title>My name causes an issue with any booking! (names end with MR and MRS)</og:title>
<og:description>My name is Amr Eladawy. Whenever I get a ticket through an agent and they put my first name as Amr, it lands as A only in the Airlines system. That happened with many airlines and different agents....</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://travel.stackexchange.com/questions/149323/my-name-causes-an-issue-with-any-booking-names-end-with-mr-and-mrs</dc:identifier>
</item>
<item>
<title>It’s Not Enough to Be Right – You Also Have to Be Kind</title>
<link>https://forge.medium.com/its-not-enough-to-be-right-you-also-have-to-be-kind-b8814111fe1</link>
<guid isPermaLink="true" >https://forge.medium.com/its-not-enough-to-be-right-you-also-have-to-be-kind-b8814111fe1</guid>
<description>&lt;p id=&quot;177a&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il im&quot;&gt;&lt;span class=&quot;r in iv en eg iw&quot;&gt;&lt;img alt=&quot;T&quot; class=&quot;ix iy iz ja jb jc es t u hj ak&quot; src=&quot;https://miro.medium.com/max/158/1*J_UYmMIPZ2maLQr1EV-DUg.png&quot; width=&quot;79&quot; height=&quot;79&quot;/&gt;&lt;span class=&quot;r in io ip en iq ir is it iu eg em&quot;&gt;T&lt;/span&gt;&lt;/span&gt;he ridiculous thing is that political correctness is a real problem. I’ve &lt;a href=&quot;https://observer.com/2015/09/the-real-reason-we-need-to-stop-trying-to-protect-everyones-feelings/&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;written&lt;/a&gt; about it &lt;a href=&quot;https://observer.com/2017/07/unpacking-the-absurd-logic-of-cultural-appropriation-and-what-it-will-cost-us-media-robbie-robertson/&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;before&lt;/a&gt;. No society can succeed if it runs from or denies uncomfortable truths. And just because a fact is inconvenient does not mean it is offensive. This game of “behalfism” where we are offended—often in advance—on behalf of other marginalized groups has become utterly absurd. A white woman &lt;a href=&quot;https://www.nytimes.com/2017/03/21/arts/design/painting-of-emmett-till-at-whitney-biennial-draws-protests.html&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;can’t paint a picture&lt;/a&gt; of Emmett Till. Little girls &lt;a href=&quot;https://people.com/parents/moana-halloween-costume-cultural-appropriation-debate/&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;can’t dress up&lt;/a&gt; as their favorite princess. A TV show has to &lt;a href=&quot;https://www.irishtimes.com/culture/tv-radio-web/the-simpsons-drop-indian-character-apu-over-racial-backlash-1.3678553&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;get rid of&lt;/a&gt; a character that had been in the show for nearly 30 years. Young adult novelists &lt;a href=&quot;https://reason.com/blog/2019/02/01/amelie-wen-zhao-young-adult-blood-heir&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;get cast aside&lt;/a&gt; for not being woke enough.&lt;/p&gt;
&lt;p id=&quot;c837&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;Anti-intellectualism is also a real problem. We should be worried about the death of expertise. What we feel about an issue does not change the fundamental facts or dispute data. &lt;a href=&quot;https://www.newsweek.com/how-ignorant-are-americans-66053&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;One in three&lt;/a&gt; citizens can’t name who the vice president is, &lt;a href=&quot;https://geog.ucsb.edu/americans-geographical-ignorance-and-disinclination-to-travel-abroad/&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;one in three&lt;/a&gt; can’t identify the Pacific Ocean on a map, and more than &lt;a href=&quot;https://www.annenbergpublicpolicycenter.org/americans-are-poorly-informed-about-basic-constitutional-provisions/?utm_source=news-release&amp;amp;utm_medium=email&amp;amp;utm_campaign=2017_civics_survey&amp;amp;utm_term=survey&amp;amp;utm_source=Media&amp;amp;utm_campaign=e5f213892a-Civics_survey_2017_2017_09_12&amp;amp;utm_medium=email&amp;amp;utm_term=0_9e3d9bcd8a-e5f213892a-425997897&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;one in three&lt;/a&gt; can’t name a single right protected by the First Amendment. Not reading is not a badge of honor. People think &lt;a href=&quot;https://www.cnn.com/2015/02/26/politics/james-inhofe-snowball-climate-change/index.html&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;bringing a snowball&lt;/a&gt; to the Senate floor is an argument against climate change. There are &lt;a href=&quot;https://www.motherjones.com/politics/2016/02/idaho-lawmaker-still-thinks-rape-cant-result-pregnancy-and-its-2016/&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;politicians who think&lt;/a&gt; rape victims can’t get pregnant. Yet, no amount of yelling or condescension or trolling is going to fix any of this. It never has and never will.&lt;/p&gt;
&lt;blockquote class=&quot;jd&quot; readability=&quot;4.5&quot;&gt;
&lt;div id=&quot;59ee&quot; class=&quot;je jf jg at fe b fv jh ji jj jk jl il&quot; readability=&quot;8&quot;&gt;
&lt;p class=&quot;fe b jm jn ax&quot;&gt;I thought if I was just overwhelmingly right enough, I could get people to listen.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;58cc&quot; class=&quot;hy hz du at ia b ib jo id jp if jq ih jr ij js il&quot;&gt;When &lt;a href=&quot;https://medium.com/s/story/why-are-we-so-certain-about-our-mistakes-e7f8ee6ab4c2&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;I look back at some of my own writing&lt;/a&gt;, I see versions of that same mistake Jeff Bezos made as a kid. I thought if I was just overwhelmingly right enough, people would listen. If I humiliated my opponent, they would have to admit I was right and they were wrong. I’ve even said in interviews that the goal of my first book was to rip back the curtain on how media really works so people could not turn away. But guess what? A lot of people still did. Of course they did. I was right, but I was also being an asshole.&lt;/p&gt;
&lt;p id=&quot;cf7b&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;Indeed, most of the writing that I look back on and regret is characterized by a similar tone that has way too much superiority and certainty and not nearly enough intellectual humility or empathy. It’s something I am guilty of in writing since and will be guilty of again—because it’s so much easier to be certain and clever than it is to be nuanced and nice.&lt;/p&gt;
&lt;p id=&quot;dd9b&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;You can see some version of this in a lot of the media opposition to populist politics (both left and right). There is this unshakeable assumption that if they can just present the right fact—if they can prove indisputably that Donald Trump is a liar or that Alexandria Ocasio-Cortez is a Marxist—that people will change their minds. If they can just show you the right study that proves there is no link between vaccines and autism or that the planet is getting warmer, they’ll have to tap out and admit, “Okay, that was stupid. We’re wrong. We’ll agree with you now.” And when that doesn’t happen, that’s when the shaming and the humiliation and the personal attacks begin: “I showed you the study. It’s from Harvard. What more do you want, you inbred idiot?” “Face facts, you Hillary-loving socialist!”&lt;/p&gt;
&lt;p id=&quot;0505&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;After spending years and millions of words and hours of video on this, we’ve had almost zero success. Why? Because you can’t reason people out of positions they didn’t reason themselves into. No one responds well to having their identity attacked. No argument made in bad faith—that the person on the other side is a moron or a dupe or a racist or a snowflake—is ever going to be received in good faith.&lt;/p&gt;
&lt;p id=&quot;d72b&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;Reason is easy. Being clever is easy. Humiliating someone in the wrong is easy too. But putting yourself in their shoes, kindly nudging them to where they need to be, understanding that they have emotional and irrational beliefs just like you have emotional and irrational beliefs—that’s all much harder. So is not writing off other people. So is spending time working on the plank in your own eye than the splinter in theirs. We know we wouldn’t respond to someone talking to us that way, but we seem to think it’s okay to do it to other people.&lt;/p&gt;
&lt;p id=&quot;78a3&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;There is a great clip of &lt;a href=&quot;https://www.youtube.com/watch?v=SrriqlDF_PI&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Joe Rogan talking&lt;/a&gt; during the immigration crisis last year. He doesn’t make some fact-based argument about whether immigration is or isn’t a problem. He doesn’t attack anyone on either side of the issue. He just talks about what it feels like—to him—to hear a mother screaming for the child she’s been separated from. The clip has been seen millions of times now and undoubtedly has changed more minds than a government shutdown, than the squabbles and fights on CNN, than the endless op-eds and think-tank reports.&lt;/p&gt;
&lt;p id=&quot;6422&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;Rogan doesn’t even tell anyone what to think. (Though, ironically, &lt;a href=&quot;http://digg.com/video/joe-rogan-dsa&quot; class=&quot;da by ju jv jw jx&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;the clip was abused&lt;/a&gt; by plenty of editors who tried to make it partisan). He just says that if you can’t relate to that mom and her pain, you’re not on the right team. That’s the right way to think about it.&lt;/p&gt;
&lt;p id=&quot;b98d&quot; class=&quot;hy hz du at ia b ib ic id ie if ig ih ii ij ik il&quot;&gt;If you can’t be kind, if you won’t empathize, then you’re not on the team. That team is Team Humanity, where we are all in this thing together. Where we are all flawed and imperfect. Where we treat other people’s point of view as charitably as we treat our own. Where we are civilized and respectful and, above all, kind to each other—particularly the less fortunate, the mistaken, and the afraid.&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 10:34:14 +0000</pubDate>
<dc:creator>victorbojica</dc:creator>
<og:type>article</og:type>
<og:title>It’s Not Enough to Be Right. You Also Have to Be Kind.</og:title>
<og:description>Takedowns and clever quips are easy, but empathy and persuasion are better</og:description>
<og:url>https://forge.medium.com/its-not-enough-to-be-right-you-also-have-to-be-kind-b8814111fe1</og:url>
<og:image>https://miro.medium.com/focal/1200/632/49/56/1*nWPTTQVXFuy43bAuQ7ZoBQ.jpeg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://forge.medium.com/its-not-enough-to-be-right-you-also-have-to-be-kind-b8814111fe1?gi=65a12c5ae8e4</dc:identifier>
</item>
<item>
<title>I got my money back from a scammer by contacting his mom on Facebook (2016)</title>
<link>https://blog.haschek.at/2016/how-a-scammer-stole-500-dollars-from-me</link>
<guid isPermaLink="true" >https://blog.haschek.at/2016/how-a-scammer-stole-500-dollars-from-me</guid>
<description>&lt;p&gt;[Update] If you have been scammed then you might want to read my newer post &lt;a href=&quot;https://blog.haschek.at/2018/so-you-have-been-scammed.html&quot;&gt;So you have been scammed&lt;/a&gt; to learn how to fight back and find your scammer like I did. Good luck!&lt;/p&gt;
&lt;p&gt;In 2012 I won the &lt;a href=&quot;https://thwack.solarwinds.com/community/solarwinds-community/contests-missions/sysadmin-day-contest-2012&quot;&gt;Solar winds sysadmin contest&lt;/a&gt; with a funny story from my first job. I won a 500$ Apple store gift card and they even immortalized my story in a small comic strip:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://thwack.solarwinds.com/servlet/JiveServlet/showImage/73-1675-6693/sysadmin+contest+winner.jpg&quot;&gt;&lt;img src=&quot;https://www.pictshare.net/1024/40726d1b66.jpg&quot; class=&quot;img-responsive&quot;/&gt;Comic strip about sysadmin contest story&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since then I have repeatedly tried to use or sell them but since I'm not currently living in the US it wasn't possible for me.&lt;/p&gt;
&lt;p&gt;My last attempt to sell them was &lt;a href=&quot;https://www.reddit.com/r/applehelp/comments/4ukizy/xpost_rapple_won_apple_gift_cards_at_sysadmin/&quot;&gt;via reddit&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;I know there are a lot of scammers out there&lt;/h2&gt;
&lt;p&gt;So I thought Bitcoin would be the right choice since the scammer can't just reclaim their money after I gave them the card codes.&lt;/p&gt;
&lt;p&gt;I talked a bit with a few potential buyers but some didn't respond after a time or didn't want to pay more than 50% of what the cards were worth.&lt;/p&gt;
&lt;h2&gt;The scammers first contact&lt;/h2&gt;
&lt;p&gt;came via reddit. &lt;strong&gt;His usernames are changed&lt;/strong&gt; for reasons you'll find out later. Since I had nothing to hide I gave them my real identity to build trust.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ungustly:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Still selling the $500 Apple giftcard? Is it apple store or Itunes? I can do $380 BTC for it. Pm me back with info.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6.7576923076923&quot;&gt;
&lt;p&gt;yes still selling It's apple Store (US only) Card numbers:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;6066 XXXX XXXX 2453&lt;/li&gt;
&lt;li&gt;6066 XXXX XXXX 2012&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can call 1-800-MY-APPLE to verify the 250$. To verify my identity:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Go to &lt;a href=&quot;http://www.wired.com/2015/07/proxy-services-totally-unsecure-alternatives/&quot;&gt;this WIRED article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow the first link &quot;wrote a script that analyzed 443 open proxies&quot; it goes to my blog&lt;/li&gt;
&lt;li&gt;Go to &quot;About me&quot; -&amp;gt; &quot;my usernames on the web&quot; If you are happy with the values you can send me the 0.6400BTC to the Address listed on my blog under every post: 1ChrisHMgr4DvEVXzAv1vamkviZNLPS7yx After confirmation I'll send you the PINs&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ungustly:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;I am not interested in going first as I have done a good amount of trades in different sub reddits and I have over 150+ feedbacks on eBay. For all I know you can be someone who brought this reddit account (just a scenario). In either case I am not willing to go first and I have feedback to back me up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This didn't strike me as odd since everyone who has traded on the internet knows that scammers exist and I might be one of them. But I still wasn't convinced that he is a valid trader. He may have bought the ebay account, which I told him and he responded with:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ungustly:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;You can't buy ebay accounts and keep it. They check everything from address to geo ip location and if something changes they lock you out. I am the owner of my eBay account and I can pm you on there to confirm it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He wrote me on ebay &lt;img src=&quot;https://www.pictshare.net/3048bd956d.jpg&quot; class=&quot;img-responsive&quot;/&gt;Message from the scammer&lt;/p&gt;
&lt;p&gt;and fair enough he has good cred on ebay &lt;img src=&quot;https://www.pictshare.net/3b5de76536.jpg&quot; class=&quot;img-responsive&quot;/&gt;ebay user account of scammer&lt;/p&gt;
&lt;h3&gt;I tried to sell these cards for 4 years. F*ck it, let's give him the benefit of the doubt&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;ok here are the pins: -Card ending with &quot;2012&quot; PIN: XXXXXXX -Card ending with &quot;2453&quot; PIN: XXXXXXX&lt;/p&gt;
&lt;p&gt;Awaiting 0.6400BTC on Address 1ChrisHMgr4DvEVXzAv1vamkviZNLPS7yx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He then wanted me to ship the cards to him because he said he wanted to use the cards in a store where you need the physical cards. He gave me a fake address and I sent the cards along the way.&lt;/p&gt;
&lt;h2&gt;Thank god I sent him pictures of the cards!&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pictshare.net/1024/6d62f5c139.jpg&quot; class=&quot;img-responsive&quot;/&gt;Pictures of the cards As I prepared the cards to ship them to him I sent him photos I uploaded via my &lt;a href=&quot;https://github.com/chrisiaut/pictshare&quot;&gt;open source&lt;/a&gt; image hosting service: &lt;a href=&quot;https://www.pictshare.net/&quot;&gt;PictShare&lt;/a&gt;. This fact is very important later on.&lt;/p&gt;
&lt;p&gt;I also sent him the tracking code. Look, it's still on its way to the fake address: &lt;a href=&quot;https://www.post.at/en/track_trace.php/details?pnum1=RS316003643AT&quot;&gt;https://www.post.at/en/track_trace.php/details?pnum1=RS316003643AT&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;UPDATE September 27th '16&lt;/h4&gt;
&lt;p&gt;The cards have been returned to me after 2 months. The scammer told me he used a random address generator and I stupidly sent it to him without checking. &lt;img src=&quot;https://www.pictshare.net/af11c188a4.jpg&quot; class=&quot;img-responsive&quot;/&gt;got the cards back&lt;/p&gt;
&lt;h2&gt;Hello [deleted]!&lt;/h2&gt;
&lt;p&gt;I checked my bitcoin wallet every day and a few days later I checked reddit again only to find..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pictshare.net/54356c5358.jpg&quot; class=&quot;img-responsive&quot;/&gt;he deleted his account&lt;/p&gt;
&lt;p&gt;He deleted his account. &lt;img src=&quot;https://www.pictshare.net/250/77d1d0614b.jpg&quot; class=&quot;img-responsive&quot;/&gt;Fuuuuuuuu&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;I now knew without a doubt he was a scammer and the first thing I did was to write him on &lt;strong&gt;ebay&lt;/strong&gt;. Still trying to be nice, still trying to get the money.&lt;/p&gt;
&lt;h3&gt;Ebay chat&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Hello! It's geek_at from reddit. I see you have deleted your reddit account. Is the deal still on? Have you ordered the products yet?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ungustly:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Excuse me, but who are you? I don't use this account except when I occasionally buy items.&lt;/p&gt;
&lt;p&gt;my ebay was hacked recently along with my email because I was keylogged. The hacked then proceeded to access my bank paypal and ebay. So no. I won't send you money for someone else hacking you but I do feel sorry for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Me:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;nice try -firstname-, you have 4 days until I press charges&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ungustly:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Please do. I will take you to court for defamation and false accusation. I am a college graduate with a law degree and you are just trying to use baseless threat and accusation. When clearly I have not contacted you and have no idea what you are talking about. You randomly message me about deals and products when this is ebay and you have listed nothing that I have bought or bid on. If you try to keep contacting me and continue to pester me further with threats I will contact my local police office as you have looked up my information and have been baselessly accusing me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scammer confirmed.&lt;/strong&gt; I knew his account wasn't hacked because after a little google search I found a direct link between the two nick names he used on reddit and ebay because he has used both of them on Steam.&lt;/p&gt;
&lt;p&gt;He also changed his nickname on ebay right after this message. &lt;img src=&quot;https://www.pictshare.net/2459cae200.jpg&quot; class=&quot;img-responsive&quot;/&gt;Scammer changed name on ebay&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;His first major mistake: Looking for a job&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://usersearch.org/&quot;&gt;usersearch.org&lt;/a&gt; I found many sites where he re-used the nickname from ebay. One of them was a freelancer job website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pictshare.net/ee61c0c5ba.jpg&quot; class=&quot;img-responsive&quot;/&gt;Job website of the scammer&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By now I knew:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;His first name&lt;/li&gt;
&lt;li&gt;The first letter of his last name&lt;/li&gt;
&lt;li&gt;The city location matched the one on ebay&lt;/li&gt;
&lt;li&gt;His IP address from opening the image I sent him (also confirmed his location)&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h2&gt;His second major mistake: Having friends&lt;/h2&gt;
&lt;p&gt;On facebook I just entered the username he was using on ebay and I found a post from someone with an anime profile pic, linking the user name of the scammer in a post&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pictshare.net/c4f12563a3.jpg&quot; class=&quot;img-responsive&quot;/&gt;Scammer linked&lt;/p&gt;
&lt;p&gt;Sure enough it was only text and not a link to a facebook profile. The post had one like but..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pictshare.net/db9a879116.jpg&quot; class=&quot;img-responsive&quot;/&gt;post like info on facebook&lt;/p&gt;
&lt;h4&gt;Damn you, facebook privacy settings!!!&lt;/h4&gt;
&lt;p&gt;But this friend of the scammer had posted everything public. Hundreds of posts a month. I scrolled through 4 years of posts until I found something that I now reffer to as the holy grail.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.pictshare.net/2d5312b8d6.jpg&quot;&gt;&lt;img src=&quot;https://www.pictshare.net/1024/2d5312b8d6.jpg&quot; class=&quot;img-responsive&quot;/&gt;scammers friends facebook post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pictshare.net/250/68ed7ce805.png&quot; class=&quot;img-responsive&quot;/&gt;Fuck yeah&lt;/p&gt;
&lt;p&gt;He made a screenshot of some LoL game he played and had facebook open in the background. You could see all of his online friends.&lt;/p&gt;
&lt;p&gt;One of them was the scammer! So now I knew his full name.&lt;/p&gt;
&lt;hr/&gt;&lt;h2&gt;His third major mistake: Having a family&lt;/h2&gt;
&lt;p&gt;10 minutes later I had the facebook profiles of his whole family. Brother, father, mother, cousins.&lt;/p&gt;
&lt;p&gt;I found multiple photos of him on his mothers profile I thought I'll save them if I need to go to the police.&lt;/p&gt;
&lt;p&gt;I added his older brother who is in college and wrote him and his mom this nice message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.pictshare.net/fae195e29f.jpg&quot; class=&quot;img-responsive&quot;/&gt;Message to scammers brother&lt;/p&gt;
&lt;p&gt;I was basically telling him about his brother scamming people and that I didn't want to go the police because it would ruin his whole life and so on.&lt;/p&gt;
&lt;h3&gt;The brother-bomb hit hard&lt;/h3&gt;
&lt;p&gt;About 10 minutes after his brother read the message I got this message on reddit from a new user:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ungustly:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;This is ungustly from before. I am sorry for what I did. I am young and stupid and always in a really bad place. I ama full time student and I have no job. I contacted Apple and got a giftcard back. I can. Give you your giftcard back I have a card for $477 and one of the existing card you gave me should have the remaining balance. Please leave me alone after this I won't do anything like this anymore I am having panic of attacks just thinking about this.&lt;/p&gt;
&lt;p&gt;I do not have the bitcoins if I did I would have sent it to you already. I have literally 0 money and as a full time college student I have no savings please I beg you to understand I have had a handful of anxiety attacks in the past few days over this issue and I am extremely scared. All I want is to leave me alone I know what I did was wrong please I beg you to forgive me&lt;/p&gt;
&lt;p&gt;I will never do anything like this again. I have 6 classes and I am a full time student I can't even go to work to pay you back. I would immediately pay I back if I could but I am broke and living on cheap fast-food. Please I beg you to forgive me and accept the card I returned I am very sorry I did this to you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wow he really seems to be scared. He wanted to give my my cards back but I tried for years to get rid of them so I say he can sell them and give me the BTC. Which he did and our deal was finally forfilled.&lt;/p&gt;
&lt;p&gt;I said I won't go to the police but if I ever catch him scamming people I'd drop everything I have about him.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ungustly:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Again I am so sorry and thank you. Can I also ask you to delete all contact with my family and friends you contacted my brother and he is freaked out. Can you please delete or make something up before my mother sees the message you wrote her and avoid further contact with my brother and delete him. Please and thank you&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Lessons learned:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Your privacy settings on facebook are only as good as your friends'&lt;/li&gt;
&lt;li&gt;Don't re-use usernames on the web (cred is your enemy)&lt;/li&gt;
&lt;li&gt;Use an escrow service like &lt;a href=&quot;http://transpact.com/&quot;&gt;Transpact&lt;/a&gt; if you want to make trades via bitcoin&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Sat, 09 Nov 2019 10:15:16 +0000</pubDate>
<dc:creator>geek_at</dc:creator>
<og:title>How a scammer stole 500$ from me and in the end begged me not to tell his parents</og:title>
<og:type>article</og:type>
<og:url>https://blog.haschek.at/2016/how-a-scammer-stole-500-dollars-from-me</og:url>
<og:image>https://blog.haschek.at/data/renderedposts/f3281.jpg</og:image>
<og:description>Thank god not all scammers are professionals</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.haschek.at/2016/how-a-scammer-stole-500-dollars-from-me</dc:identifier>
</item>
<item>
<title>Curl to shell isn&amp;#039;t so bad</title>
<link>https://arp242.net/curl-to-sh.html</link>
<guid isPermaLink="true" >https://arp242.net/curl-to-sh.html</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://0x46.net/thoughts/2019/04/27/piping-curl-to-shell/&quot;&gt;Piping curl to s(hell)&lt;/a&gt; claims that using &lt;code&gt;curl example.com/install.sh | sh&lt;/code&gt; to install software is a “glaring security vulnerability”. I’ve seen this claim many times in other places as well, with strong terms like “malpractice”.&lt;/p&gt;
&lt;p&gt;I don’t get it. you’re not running some random shell script from a random author, you’re running it from a software vendor who you &lt;em&gt;already trust&lt;/em&gt; to run software. Are you going to audit all of oh-my-zsh? Probably not. So why give extra gravity to their install script? If you trust oh-my-zsh, then why distrust their install script?&lt;/p&gt;
&lt;p&gt;There is no fundamental difference between &lt;code&gt;curl .. | sh&lt;/code&gt; versus cloning a repo and building it from source. Do you know what’s in &lt;code&gt;./configure&lt;/code&gt;? GNU configure scripts are tens of thousands of lines of unreadable autogenerated code. No one audits that and it’s &lt;em&gt;the&lt;/em&gt; perfect place to hide nefarious commands.&lt;sup id=&quot;fnref:autoconf&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It’s worth pointing out that the install scripts for all the cited examples are in source control&lt;sup id=&quot;fnref:vcs&quot;/&gt;, and subjected to the same kind of auditing as the software itself. Of course, there is no hard guarantee that the file in git is the same as the one you download from &lt;code&gt;https://sh.rustup.rs&lt;/code&gt;, but you also have no guarantees that &lt;code&gt;https://rust-lang.org/rust-1.39.tar.gz&lt;/code&gt; is really the same as git, and I don’t see anyone calling this a “glaring security vulnerability” or “malpractice”.&lt;/p&gt;
&lt;p&gt;The only real difference I see is that &lt;code&gt;curl | sh&lt;/code&gt; is a very direct way to run code from the internet, whereas the other methods are running code from the internet, but with extra steps. It may “feel” different, but in reality it’s just the same. In the end it’s still just running code you didn’t personally audit on your computer, and a matter of trust.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;To break down the bullet points in the article in some more detail:&lt;/p&gt;
&lt;ul readability=&quot;24.5&quot;&gt;&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;em&gt;Man-in-the-middle attacks&lt;/em&gt;: as the article already mentions, this is only a problem “if the developers omit the usage of TLS”. This is increasingly rare, and all of the cited examples use TLS.&lt;/p&gt;
&lt;p&gt;Either way, it’s not a problem with just pipe-to-shell, it’s a problem with any code you retrieve without TLS.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;21&quot;&gt;
&lt;p&gt;&lt;em&gt;Hidden text attacks&lt;/em&gt;: it’s possible to trick browsers in copying “hidden” text with some HTML and CSS trickery. This is known as “pastejacking”.&lt;/p&gt;
&lt;p&gt;What this misses is that you’re copying the command from a software vendor that you trust enough to run software on your computer. If I trust docker.com enough to run &lt;code&gt;dockerd&lt;/code&gt;, then why shouldn’t I trust their website to not inject hidden stuff?&lt;/p&gt;
&lt;p&gt;As a more general point, people &lt;em&gt;are&lt;/em&gt; going to paste stuff in their terminals regardless (keys, passwords, code snippets, what have you) so this is best fixed in the terminal or shell instead of telling people to “not do that really convenient thing”. zsh has been doing this by default for years; and it looks like newer versions of bash do too.&lt;/p&gt;
&lt;p&gt;As far as I’ve been able to find, there has never been any real-world attack using this technique, so it almost becomes a philosophical question: “if there is a potential security problem and no one is exploiting it, then is it still a security problem?”&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;em&gt;User-Agent based attacks&lt;/em&gt;: a server can send a different version to Firefox than curl.&lt;/p&gt;
&lt;p&gt;As with the previous issue: you’re already trusting the vendor and site, and you’re already going to run the software that &lt;code&gt;install.sh&lt;/code&gt; downloads. No need for these kind of tricks.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;em&gt;Partial content&lt;/em&gt;: the shell may execute half the script due to a network error.&lt;/p&gt;
&lt;p&gt;Easily fixable by running in a function:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;do_work() {
   :
}

do_work
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;All of the cited examples already do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;em&gt;Not knowing what the script is going to do&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is valid and I tend to avoid these kind of scripts (or read them) for exactly this reason; I wish scripts would clearly state what &lt;em&gt;exactly&lt;/em&gt; they’re going to do in the docs.&lt;/p&gt;
&lt;p&gt;But this is a UX issue and not a security one. It’s fine to not like these scripts, but that doesn’t make them “glaring security vulnerability” or “malpractice”.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;postscript&quot;&gt;&lt;strong&gt;Footnotes&lt;/strong&gt;
&lt;ol readability=&quot;1.6666666666667&quot;&gt;&lt;li id=&quot;fn:autoconf&quot; readability=&quot;1&quot;&gt;
&lt;p&gt;You can regenerate them from autoconf, but I don’t think many do? Even systems like FreeBSD ports just use existing configure scripts. &lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:vcs&quot; readability=&quot;0.80487804878049&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/blob/master/tools/install.sh&quot;&gt;oh-my-zsh&lt;/a&gt;, &lt;a href=&quot;https://github.com/kovidgoyal/calibre/blob/master/setup/linux-installer.sh&quot;&gt;calibre&lt;/a&gt;, &lt;a href=&quot;https://github.com/docker/docker-install/blob/master/install.sh&quot;&gt;docker&lt;/a&gt;, &lt;a href=&quot;https://github.com/yarnpkg/website/blob/master/install.sh&quot;&gt;yarn&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-lang/rustup.rs/blob/master/rustup-init.sh&quot;&gt;rust&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;footer class=&quot;postscript&quot; readability=&quot;17.021739130435&quot;&gt;&lt;strong&gt;Feedback&lt;/strong&gt;
&lt;p&gt;Mail me at &lt;a href=&quot;mailto:martin@arp242.net&quot;&gt;martin@arp242.net&lt;/a&gt; or &lt;a href=&quot;https://github.com/arp242/arp242.net/issues/new&quot;&gt;create a GitHub issue&lt;/a&gt; for feedback, questions, etc.&lt;/p&gt;
&lt;/footer&gt;</description>
<pubDate>Sat, 09 Nov 2019 07:22:14 +0000</pubDate>
<dc:creator>stargrave</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://arp242.net/curl-to-sh.html</dc:identifier>
</item>
<item>
<title>Bye, Chrome: Why I’m switching to Firefox (2018)</title>
<link>https://www.fastcompany.com/90174010/bye-chrome-why-im-switching-to-firefox-and-you-should-too</link>
<guid isPermaLink="true" >https://www.fastcompany.com/90174010/bye-chrome-why-im-switching-to-firefox-and-you-should-too</guid>
<description>&lt;div readability=&quot;10.880434782609&quot;&gt;
&lt;p&gt;You’re probably &lt;a href=&quot;https://www.fastcodesign.com/3067094/our-apathy-toward-privacy-will-destroy-us-designers-can-help&quot;&gt;sick of hearing about data and privacy by now&lt;/a&gt;–especially because, if you live in the United States, you might feel like there’s very little you can do to protect yourself from giant corporations feeding off your time, interests, and personal information.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;ad-wrapper ad-wrapper--mobileparallax_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_mid_article_inject&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;58.375566690527&quot;&gt;
&lt;p&gt;So how do you walk the line between taking advantage of the internet’s many benefits while protecting yourself from the corporate interests that aim to use your data for gain? This is the push-and-pull I’ve had with myself over the past year, as I’ve grappled with the revelations that Cambridge Analytica &lt;a href=&quot;https://www.fastcodesign.com/90165245/the-4-design-changes-facebook-should-really-make&quot;&gt;has the personal data&lt;/a&gt; of more than 50 million Americans, courtesy of Facebook, and used it to manipulate people in the 2016 elections. I’ve watched companies &lt;a href=&quot;https://www.theguardian.com/technology/2018/may/24/sites-block-eu-users-before-gdpr-takes-effect&quot;&gt;shut down their European branches&lt;/a&gt; because Europe’s data privacy regulations invalidate their business models. And given the &lt;a href=&quot;https://www.fastcodesign.com/3059293/security-vs-ux-how-to-reconcile-one-of-the-biggest-challenges-in-interface-design&quot;&gt;number of data breaches&lt;/a&gt; that have occurred over the past decade, there’s a good chance that malicious hackers have my info–and if they don’t, it’s only a matter of time.&lt;/p&gt;
&lt;img class=&quot;size-large wp-image-90174039 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;295&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2018/05/4-bye-chrome-why-im-switching-to-firefox.jpg&quot;/&gt;[Screenshot: Mozilla]
&lt;p&gt;While the amount of data about me may not have caused harm in my life yet–as far as I know–I don’t want to be the victim of monopolistic internet oligarchs as they continue to cash in on &lt;a href=&quot;https://www.fastcodesign.com/90165388/admit-it-you-dont-really-understand-facebook&quot;&gt;surveillance-based business models&lt;/a&gt;. What’s a concerned citizen of the internet to do? Here’s one no-brainer: Stop using Chrome and switch to Firefox.&lt;/p&gt;
&lt;p&gt;Google already runs a lot of my online life–it’s my email, my calendar, my go-to map, and all my documents. I use Duck Duck Go as my primary search engine because I’m aware of how much information about myself I voluntarily give to Google in so many other ways. I can’t even remember why I decided to use Chrome in the first place. The browser has become such a default for American internet users that I never even questioned it. &lt;a href=&quot;https://en.wikipedia.org/wiki/Usage_share_of_web_browsers&quot;&gt;Chrome has about 60% of the browser market, and Firefox has only 10%&lt;/a&gt;. But why should I continue to use the company’s browser, which acts as literally the window through which I experience much of the internet, when its incentives–to learn a lot about me so it can sell advertisements–don’t align with mine?&lt;/p&gt;
&lt;p&gt;Firefox launched in 2004. It’s not a new option among internet privacy wonks. But I only remembered it existed recently while reporting on data privacy. Unlike Chrome, Firefox is run by Mozilla, a nonprofit organization that advocates for a “healthy” internet. Its &lt;a href=&quot;https://www.mozilla.org/en-US/about/manifesto/&quot;&gt;mission&lt;/a&gt; is to help build an internet in an open-source manner that’s accessible to everyone–and where privacy and security are built in. Contrast that to Chrome’s privacy policy, which states that it stores your browsing data locally unless you are signed in to your Google account, which &lt;a href=&quot;https://www.google.com/chrome/privacy/&quot;&gt;enables the browser to send that information back to Google&lt;/a&gt;. The policy also states that Chrome allows third-party websites to access your IP address and any information that site has tracked using cookies. If you care about privacy at all, you should ditch the browser that supports a company using data to sell advertisements and enabling other companies to track your online movements for one that does not use your data at all.&lt;/p&gt;
&lt;p&gt;Though Mozilla itself is a nonprofit, Firefox is developed within a corporation owned by the nonprofit. This enables the Mozilla Corporation to collect revenue to support its development of Firefox and other internet services. Ironically, Mozilla supports its developers using revenue from Google, which pays the nonprofit to have Google Search as Firefox’s default search engine. That’s not its sole revenue: Mozilla also has other agreements with search engines around the world, like Baidu in China, to be the default search engine in particular locations. But because it relies on these agreements rather than gathering user data so it can sell advertisements, the Mozilla Corporation has a fundamentally different business model than Google. Internet service providers pay Mozilla, rather than Mozilla having to create revenue out of its user base. It’s more of a subscription model than a surveillance model, and users always have the choice to change their search engine to whichever they prefer.&lt;/p&gt;
&lt;p&gt;I spoke to Madhava Enros, the senior director of Firefox UX, and Peter Dolanjski, a product manager for Firefox, to learn more about how Mozilla’s browser builds privacy into its architecture. Core to their philosophy? Privacy and convenience don’t have to be mutually exclusive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--mobilerectangle_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;57.412887828162&quot;&gt;
&lt;p&gt;Instead, Firefox’s designers and developers try to make the best decision on behalf of the user, while always leaning toward privacy first. “We put the user first in terms of privacy,” Dolanjski says. “We do not collect personally identifiable data, not what you do or what websites you go to.”&lt;/p&gt;
&lt;p&gt;That’s not just lip service, like it often is when companies like Facebook &lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2018/04/12/no-mark-zuckerberg-were-not-really-in-control-of-our-data/?utm_term=.a74a2eef6356&quot;&gt;claim that users are in control of their data&lt;/a&gt;. For instance, Firefox  protects you from being tracked by advertising networks across websites, which has the lovely side effect of &lt;a href=&quot;https://venturebeat.com/2015/05/24/firefoxs-optional-tracking-protection-reduces-load-time-for-top-news-sites-by-44/&quot;&gt;making sites load faster&lt;/a&gt;. “As you move from website to website, advertising networks essentially follow you so they can see what you’re doing so they can serve you targeted advertisements,” Dolanjski says. “Firefox is the only [major] browser out of the box that prevents that from happening.” The browser’s Tracking Protection feature &lt;a href=&quot;https://support.mozilla.org/en-US/kb/tracking-protection?as=u&amp;amp;utm_source=inproduct&quot;&gt;automatically blocks a list of common trackers&lt;/a&gt; in private browsing mode and can be enabled to run all the time, something you need a specific, third-party browser extension to do on Chrome.&lt;/p&gt;
&lt;p&gt;The “out of the box” element of Firefox’s privacy protection is crucial. Chrome does give you many privacy controls, but &lt;a href=&quot;https://support.google.com/chrome/answer/114836?co=GENIE.Platform%3DDesktop&amp;amp;hl=en&quot;&gt;the default for most of them&lt;/a&gt; is to allow Google to collect the greatest amount of information about you as possible. For instance, Google Chrome &lt;a href=&quot;https://www.google.com/chrome/privacy/whitepaper.html&quot;&gt;gives users the option&lt;/a&gt; to tell every website you go to not to track you, but it’s not automatically turned on. Firefox offers the same function to add a &lt;a href=&quot;https://support.mozilla.org/en-US/kb/how-do-i-turn-do-not-track-feature&quot;&gt;“Do Not Track” tag&lt;/a&gt; to every site you visit–but when I downloaded the browser, the default was set to “always.”&lt;/p&gt;
&lt;img class=&quot;size-large wp-image-90174038 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;295&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2018/05/3-bye-chrome-why-im-switching-to-firefox.jpg&quot;/&gt;[Screenshot: Mozilla]
&lt;p&gt;Because Chrome settings that don’t encourage privacy are the default, users are encouraged to leave them as they are from the get-go, and likely don’t understand what data Google vacuums up. Even if you do care, reading through Google Chrome’s 13,500-word &lt;a href=&quot;https://www.google.com/chrome/privacy/whitepaper.html&quot;&gt;privacy white paper&lt;/a&gt;, which uses a lot of technical jargon and obfuscates exactly what data the browser is tracking, isn’t helpful either. When I reached out to Google with questions about what data Chrome tracks, the company sent me that white paper but didn’t answer any of my specific questions.&lt;/p&gt;
&lt;p&gt;One downside to using Firefox is that many browser extensions are built primarily for Chrome–my password manager luckily has a Firefox extension but it often causes the browser to crash. However, Mozilla also builds extensions you can use exclusively on Firefox. After the Facebook and Cambridge Analytica firestorm, Firefox released &lt;a href=&quot;https://www.fastcodesign.com/90165735/quarantine-facebooks-toxic-data-practices-with-this-new-extension&quot;&gt;an extension called the Facebook Container&lt;/a&gt;, which allows you to browse Facebook or Instagram normally, but prevents Facebook from tracking where you went when you left the site–and thus stops the company from tracking you around the web and using that information to build out a more robust personal profile of you.&lt;/p&gt;
&lt;img class=&quot;size-large wp-image-90174041 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;295&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/sites/4/2018/05/6-bye-chrome-why-im-switching-to-firefox.jpg&quot;/&gt;[Screenshot: Mozilla]
&lt;p&gt;Firefox isn’t even Mozilla’s most private browser. The nonprofit also has a mobile-only browser called Firefox Focus that basically turns Firefox’s private browsing mode (akin to incognito browsing on Chrome, but with much less data leakage) into a full-fledged browser on its own. Privacy is built right into Focus’s UX: There’s a large “erase” button on every screen that lets you delete all of your history with a single tap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--mobilerectangle_2&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;64.014463407579&quot;&gt;
&lt;p&gt;Firefox’s private browsing mode also has a feature called “origin referrer trimming,” where the browser automatically deletes the information about which site you’re coming from when you land on the next page. Focus also blocks any analytics services that would take this information. “The user doesn’t need to think about that,” Dolanjski says. “It’s not heavily advertised, but it’s the little decisions we make along the way that meant the user doesn’t have to make the choice”–or even know what origin referrer trimming is in the first place.&lt;/p&gt;
&lt;img class=&quot;size-large wp-image-90174037 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;295&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/sites/4/2018/05/2-bye-chrome-why-im-switching-to-firefox.jpg&quot;/&gt;Firefox Focus [Screenshot: Mozilla]
&lt;p&gt;Many of these decisions, both in Firefox and in Focus, are to guard against what Enros calls the “uncanny valley” of internet browsing–when ads follow you around the internet for weeks. “I buy a toaster, and now it feels like the internet has decided I’m a toaster enthusiast and I want to hear about toasters for the rest of my life,” he says. “It’s not a scary thing. I’m not scared of toasters, but it’s in an uncanny valley in which I wonder what kinds of decisions they’re making about me.”&lt;/p&gt;
&lt;p&gt;Ultimately, Firefox’s designers have the leeway to make these privacy-first decisions because Mozilla’s motivations are fundamentally different from Google’s. Mozilla is a nonprofit with a mission, and Google is a for-profit corporation with an advertising-based business model. To a large degree, Google’s business model relies on users giving up their data, making it incompatible with the kind of internet that Firefox is mission-bound to build. It comes back to money: While Firefox and Chrome ultimately perform the same service, the browsers’ developers approached their design in a radically different way because one organization has to serve a bottom line, and the other doesn’t.&lt;/p&gt;
&lt;p&gt;That also means Firefox’s mission is aligned with its users. The browser is explicitly designed to help people like me navigate the convenience versus privacy conundrum. “To a great degree, people like us need solutions that aren’t going to detrimentally impact our convenience. This is where privacy is often difficult online,” Dolanjski says. “People say, go install this VPN, do this and do that, and add all these layers of complexity. The average user or even tech-savvy user that doesn’t have the time to do all these things will choose convenience over privacy. We try to make meaningful decisions on behalf of the user so we don’t need to put something else in front of them.”&lt;/p&gt;
&lt;p&gt;When GDPR, the most sweeping privacy law in recent years, went into effect last week, we saw firsthand how much work companies were requiring users to do–just think of &lt;a href=&quot;https://www.fastcodesign.com/90173590/the-best-worst-and-most-repetitive-emails-of-gdpr&quot;&gt;all those opt-in emails&lt;/a&gt;. Those emails are certainly a step toward raising people’s awareness about privacy, but I deleted almost all of them without reading them, and you probably did, too. Mozilla’s approach is to make the best decision for users’ privacy in the first place, without requiring so much effort on the users’ part.&lt;/p&gt;
&lt;p&gt;Because who really spends any time in their privacy settings? Settings pages &lt;a href=&quot;https://www.fastcodesign.com/90171699/what-is-gdpr-and-why-should-designers-care&quot;&gt;aren’t a good UX solution to providing clear information about how data is used&lt;/a&gt;, which is now required in Europe because of GDPR. “Control can’t mean the responsibility to scrutinize every possible option to keep yourself safe,” Enros says. “We assume a position to keep you safe, and then introducing more controls for experts.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--mobileparallax_2&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;12&quot;&gt;
&lt;p&gt;Firefox doesn’t always work better than Chrome–sometimes it’ll freeze on my older work computer, and I do need to clear my history more frequently so the browser doesn’t get too slow. But these are easy trade-offs to make, knowing that by using Firefox, my data is safe with me.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_recommendationlink&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Sat, 09 Nov 2019 01:06:18 +0000</pubDate>
<dc:creator>commoner</dc:creator>
<og:type>article</og:type>
<og:title>Bye, Chrome: Why I’m switching to Firefox and you should too</og:title>
<og:url>https://www.fastcompany.com/90174010/bye-chrome-why-im-switching-to-firefox-and-you-should-too</og:url>
<og:description>The time has come.</og:description>
<og:image>https://images.fastcompany.net/image/upload/w_1280,f_auto,q_auto,fl_lossy/wp-cms/uploads/2018/05/p-1-bye-chrome-why-im-switching-to-firefox.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fastcompany.com/90174010/bye-chrome-why-im-switching-to-firefox-and-you-should-too</dc:identifier>
</item>
<item>
<title>How Swift Achieved Dynamic Linking Where Rust Couldn&amp;#039;t</title>
<link>https://gankra.github.io/blah/swift-abi/</link>
<guid isPermaLink="true" >https://gankra.github.io/blah/swift-abi/</guid>
<description>&lt;header&gt;&lt;p class=&quot;author&quot;&gt;Alexis Beingessner&lt;/p&gt;
&lt;p class=&quot;date&quot;&gt;November 7th, 2019&lt;/p&gt;
&lt;/header&gt;&lt;nav id=&quot;TOC&quot;/&gt;&lt;p&gt;For those who don't follow Swift's development, ABI stability has been one of its most ambitious projects and possibly it's defining feature, &lt;a href=&quot;https://swift.org/blog/abi-stability-and-more/&quot;&gt;and it finally shipped in Swift 5&lt;/a&gt;. The result is something I find endlessly fascinating, because I think Swift has pushed the notion of ABI stability farther than any language without much compromise.&lt;/p&gt;
&lt;p&gt;So I decided to write up a bunch of the interesting high-level details of Swift's ABI. This &lt;strong&gt;is not&lt;/strong&gt; a complete reference for Swift's ABI, but rather an abstract look at its implementation strategy. If you really want to know exactly how it allocates registers or mangles names, look somewhere else.&lt;/p&gt;
&lt;p&gt;Also for context on why I'm writing this, I'm just naturally inclined to compare the design of Swift to Rust, because those are the two languages I have helped develop. Also some folks like to complain that Rust doesn't bother with ABI stability, and I think looking at how Swift &lt;em&gt;does&lt;/em&gt; helps elucidate why that is.&lt;/p&gt;
&lt;p&gt;This article is broken up into two sections: background and details. Feel free to skip to the details if you're very comfortable with the problems inherent to producing a robust dynamically linked system interface.&lt;/p&gt;
&lt;p&gt;If you aren't comfortable with the basic concepts of type layouts, ABIs, and calling conventions, I recommend reading the article I wrote on &lt;a href=&quot;https://gankra.github.io/blah/rust-layouts-and-abis/&quot;&gt;the basic concepts of type layout and ABI as they pertain to Rust&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also huge thanks to the Swift devs for answering all of the questions I had and correcting my misunderstandings!&lt;/p&gt;


&lt;p&gt;I know a lot of people don't really follow Swift, and it can be hard to understand what they've really accomplished without some context of what the language is like, so here's a TL;DR of the language's shape:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Exists to replace Objective-C on Apple's platforms, oriented at application development
&lt;ul&gt;&lt;li&gt;natively interoperates with Objective-C&lt;/li&gt;
&lt;li&gt;has actual classes and inheritance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;At a distance, very similar to Rust (but &quot;higher-level&quot;)
&lt;ul&gt;&lt;li&gt;interfaces, generics, closures, enums with payloads, unsafe escape hatch&lt;/li&gt;
&lt;li&gt;no lifetimes; Automatic Reference Counting (ARC) used for complex cases&lt;/li&gt;
&lt;li&gt;simple function-scoped mutable borrows (inout)&lt;/li&gt;
&lt;li&gt;Ahead-Of-Time (AOT) compiled&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;An emphasis on &quot;value semantics&quot;
&lt;ul&gt;&lt;li&gt;structs/primitives (&quot;values&quot;) are &quot;mutable xor shared&quot;, stored inline&lt;/li&gt;
&lt;li&gt;collections implement value semantics by being Copy-On-Write (CoW) (using ARC)&lt;/li&gt;
&lt;li&gt;classes are mutably shared and boxed (using ARC), undermining value semantics (can even cause data races)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;An emphasis on things Just Working
&lt;ul&gt;&lt;li&gt;language may freely allocate to make things Work&lt;/li&gt;
&lt;li&gt;generic code may be polymorphically compiled&lt;/li&gt;
&lt;li&gt;fields may secretly be getter-setter pairs&lt;/li&gt;
&lt;li&gt;ARC and CoW can easily result in surprising performance cliffs&lt;/li&gt;
&lt;li&gt;tons of overloading and syntactic sugar&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Don't worry about fully understanding all of these, we'll dig into the really important ones and their implications as we go on.&lt;/p&gt;

&lt;p&gt;When the Swift developers talk about &quot;ABI Stability&quot; they have exactly one thing in mind: they want native system APIs for MacOS and iOS to be written in Swift, and for you to dynamically link to them. This includes dynamically linking to a single system-wide copy of the Swift Standard Library.&lt;/p&gt;
&lt;p&gt;Ok so what's dynamic linking? For our purposes it's a system where you can compile an application against some abstract &lt;em&gt;description&lt;/em&gt; of an interface without providing an actual implementation of it. This produces an application that on its own will not work properly, as part of its implementation is missing.&lt;/p&gt;
&lt;p&gt;To run properly, it must tell the system's &lt;em&gt;dynamic linker&lt;/em&gt; about all of the interfaces it needs implementations for, which we call &lt;em&gt;dynamic libraries&lt;/em&gt; (dylibs). Assuming everything goes right, those implementations get hooked up to the application and everything Just Works.&lt;/p&gt;
&lt;p&gt;Dynamic linking is very important to system APIs because it's what allows the system's implementation to be updated without also rebuilding all the applications that run on it. The applications don't care about what implementation they get, as long as it conforms to the interface they were built against.&lt;/p&gt;
&lt;p&gt;It can also significantly reduce a system's memory footprint by making every application share the same implementation of a library (Apple cares about this a lot on its mobile devices).&lt;/p&gt;
&lt;p&gt;Since Swift is AOT compiled, the application and the dylib both have to make a bunch of assumptions on how to communicate with the other side long before they're linked together. These assumptions are what we call ABI (an Application's &lt;em&gt;Binary&lt;/em&gt; Interface), and since it needs to be consistent over a long period of time, that ABI better be stable.&lt;/p&gt;
&lt;p&gt;So dynamic linking is our goal, and ABI stability is just a means to that end.&lt;/p&gt;
&lt;p&gt;For our purposes, an ABI can be regarded as 3 things:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://gankra.github.io/blah/rust-layouts-and-abis/#layout&quot;&gt;The layout of types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gankra.github.io/blah/rust-layouts-and-abis/#calling-conventions&quot;&gt;The calling convention of functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Name_mangling&quot;&gt;The names of symbols&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If you can define these details and never break them, you have a stable ABI, and dynamic linking can be performed. (Ignoring trivial cases where both the dylib and application were built together and ABI stability is irrelevant.)&lt;/p&gt;
&lt;p&gt;Now to be clear, ABI stability isn't technically a property of a programming language. It's really a property of a system and its toolchain. To understand this, let's look at history's greatest champion of ABI stability and dynamic linking: C.&lt;/p&gt;
&lt;p&gt;All the major OSes make use of C for their dynamically linked system APIs. From this we can conclude that C &quot;has&quot; a stable ABI. But here's the catch: if you compile some C code for dynamic linking on Ubuntu, that compiled artifact won't work on MacOS or Windows. Heck, even if you compile it for 64-bit Windows it won't work on 32-bit Windows!&lt;/p&gt;
&lt;p&gt;Why? Because ABI is something defined by the &lt;em&gt;platform&lt;/em&gt;. It's not even something that necessarily needs to be documented. The platform vendor can just require you to use a particular compiler toolchain that happens to implement their stable ABI.&lt;/p&gt;
&lt;p&gt;(As it turns out, this is actually the reality of Swift's Stabilized ABIs on Apple platforms. They're not actually properly documented, xcode just implements it and the devs will do their best not to break it. They're not opposed to documenting it, it's just a lot of work and shipping was understandably higher-priority. Thankfully I don't really care about the details, or the difference between the ABIs on MacOS and iOS, or implementations other than Apple's, so I can keep saying &quot;Swift's ABI&quot; and it won't be a problem.)&lt;/p&gt;
&lt;p&gt;But if that's the case, why don't platform vendors provide stable ABIs for lots of other languages? Well it turns out that the language isn't completely irrelevant here. Although ABI isn't &quot;part&quot; of C itself, it &lt;em&gt;is&lt;/em&gt; relatively friendly to the concept. Many other languages aren't.&lt;/p&gt;
&lt;p&gt;To understand why C is friendly to ABI stability, let's look at its much less friendly big brother, C++.&lt;/p&gt;
&lt;p&gt;Templated C++ functions cannot have their implementations dynamically linked. If I provide you with a system header that provides the following declaration, you simply can't use it:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cpp&quot;&gt;template &amp;lt;typename T&amp;gt;
bool process(T value);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is because &lt;em&gt;it has no symbol&lt;/em&gt;. C++ templates are monomorphically compiled, which is a fancy way of saying that the way to use them is to copy-paste the implementation with all the templates replaced with a particular value.&lt;/p&gt;
&lt;p&gt;So if I want to call &lt;code&gt;process&amp;lt;int&amp;gt;(0)&lt;/code&gt;, I need to have the implementation available to copy-paste it with &lt;code&gt;int&lt;/code&gt; replacing &lt;code&gt;T&lt;/code&gt;. Needing to have the implementation available at compile-time completely undermines the concept of dynamic linking.&lt;/p&gt;
&lt;p&gt;Now perhaps the platform could make a promise that it has precompiled several monomorphic instances, so say symbols for &lt;code&gt;process&amp;lt;int&amp;gt;&lt;/code&gt; and &lt;code&gt;process&amp;lt;bool&amp;gt;&lt;/code&gt; are available. You could make that work, but then the function wouldn't really be meaningfully templated anymore, as only those two explicitly blessed substitutions would be valid.&lt;/p&gt;
&lt;p&gt;There would be little difference from simply providing a header containing:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-cpp&quot;&gt;bool process(int value);
bool process(bool value);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now a header &lt;em&gt;could&lt;/em&gt; just include the template's implementation, but what that would really be guaranteeing is that that particular implementation will &lt;em&gt;always&lt;/em&gt; be valid. Future versions of the header could introduce new implementations, but a robust system would have to assume applications could using either, or perhaps even both at the same time.&lt;/p&gt;
&lt;p&gt;This is no different from a C macro or &lt;code&gt;inline&lt;/code&gt; function, but I think it's fair to say that templates are a little more important in C++.&lt;/p&gt;
&lt;p&gt;For comparison, most platforms provide a dynamically linked version of the C standard library, and everyone uses it. On the other hand, C++'s standard library isn't very useful to dynamically link to; it's literally called the Standard &lt;em&gt;Template&lt;/em&gt; Library!&lt;/p&gt;
&lt;p&gt;In spite of this issue (and many others), C++ &lt;em&gt;can&lt;/em&gt; be dynamically linked and used in an ABI-stable way! It's just that it ends up looking a lot more like a C interface due to the limitations.&lt;/p&gt;
&lt;p&gt;Idiomatic Rust is similarly hostile to dynamic linking (it also uses monomorphization), and so an ABI-stable Rust would also end up only really supporting C-like interfaces. Rust has largely just embraced that fact, focusing its attention on other concerns.&lt;/p&gt;

&lt;p&gt;I have now made some seemingly contradictory claims:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Swift has similar features to Rust&lt;/li&gt;
&lt;li&gt;Rust's features make it hostile to dynamic linking&lt;/li&gt;
&lt;li&gt;Swift is great at dynamic linking&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The secret lies in where the two languages diverge: dynamism. Rust is a &lt;em&gt;very&lt;/em&gt; static and explicit language, reflecting the sensibilities of its developers and early adopters. Swift's developers preferred a much more dynamic and implicit design, and so that's what they made.&lt;/p&gt;
&lt;p&gt;As it turns out, hiding implementation details and doing more work at runtime is &lt;em&gt;really&lt;/em&gt; friendly to dynamic linking. Who'd've thought dynamic linking was dynamic?&lt;/p&gt;
&lt;p&gt;But what's really interesting about Swift is the ways it's &lt;em&gt;not&lt;/em&gt; dynamic.&lt;/p&gt;
&lt;p&gt;It's actually fairly trivial to dynamically link a system where all the implementation details are hidden behind uniformity and dynamism. In the extreme case, we could make a system where everything is an opaque pointer and there's only one function that just sends things strings containing commands. Such a system would have a very simple ABI!&lt;/p&gt;
&lt;p&gt;And indeed, in the 90's there was a big push in this direction with Microsoft embracing &lt;a href=&quot;https://en.wikipedia.org/wiki/Component_Object_Model&quot;&gt;COM&lt;/a&gt; and Apple embracing &lt;a href=&quot;https://developer.apple.com/documentation/objectivec/1456712-objc_msgsend&quot;&gt;Objective-C&lt;/a&gt; as ways to build system interfaces with simple and robust ABIs.&lt;/p&gt;
&lt;p&gt;But Swift didn't do this. Swift tries its hardest to generate code comparable to what you would expect from Rust or C++, and how it accomplishes that is what makes its ABI so interesting.&lt;/p&gt;
&lt;p&gt;It's worth noting that the Swift devs disagree with the Rust and C++ codegen orthodoxy in one major way: they care much more about code sizes (as in the amount of executable code produced). More specifically, they care a lot more about making efficient usage of the cpu's instruction cache, because they believe it's better for system-wide power usage. Apple championing this concern makes a lot of sense, given their suite of battery-powered devices.&lt;/p&gt;
&lt;p&gt;It's harder for third party developers to care about this, as they will naturally only control some small part of the software running on a device, and typical benchmarking strategies don't really capture &quot;this change made your application run faster but is making some background services less responsive and hurting battery life&quot;. Hence C++ and Rust inevitably pushing towards &quot;more code, more fast&quot;.&lt;/p&gt;
&lt;p&gt;This is all to say that some things which seem like compromises made for ABI stability's sake are genuinely just regarded as desirable.&lt;/p&gt;
&lt;p&gt;I never got any great concrete numbers on this concern from the Swift or Foundation folks, would definitely love to see some! &lt;em&gt;Waves at the Apple employees reading this&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst&quot;&gt;The Swift developers cover this topic fairly well in their documentation&lt;/a&gt;. I'll just be giving a simplified version, focusing on the basic motivation.&lt;/p&gt;
&lt;p&gt;Resilience is the core concept behind Swift's dynamic linking story. It means that things default to having ABIs that are &lt;em&gt;resilient&lt;/em&gt; to breaking when the implementation changes in an API-preserving way (nothing can save API-breaking changes). This allows developers to create dynamically linked and idiomatic-feeling libraries that can still easily evolve their implementations.&lt;/p&gt;
&lt;p&gt;This is in contrast to C, which only makes it &lt;em&gt;possible&lt;/em&gt; to create a stable ABI with proper vigilance and foresight. This is because C requires you to commit to many of the ABI details of your interface upfront, even if you're uncertain about them. If you don't want to commit to those details, you'll have to change the shape of your API to hide them.&lt;/p&gt;
&lt;p&gt;When compiled as a dylib, Swift defaults to implicitly hiding as many details as possible, requiring you to opt into guarantees by adding annotations. Crucially, these annotations don't affect the shape of an API, they're &quot;only&quot; for optimizing the ABI, at the cost of resilience.&lt;/p&gt;
&lt;p&gt;Additionally, &lt;em&gt;some&lt;/em&gt; ABI annotations can be added after a library has been published without breaking the old ABI. Applications compiled against new annotations are able to use that information to run faster, at the cost of compatibility with older versions of the library.&lt;/p&gt;
&lt;p&gt;(It seems the Swift devs ran out of time/resources and quite reasonably cut a few corners in this department. Several annotations which plausibly could be done in a backwards-compatible way are ultimately breaking to add. Ah well, pobody's nerfect.)&lt;/p&gt;
&lt;p&gt;This is all very abstract, let's look at a simple library evolution example.&lt;/p&gt;
&lt;p&gt;Let's say we draft up a simple FileMetadata interface in C:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;

&lt;span class=&quot;ident&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; {
    &lt;span class=&quot;ident&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;size&lt;/span&gt;;
} &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt;;

&lt;span class=&quot;ident&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;get_file_metadata&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;path&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;output&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which would be called as:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;
&lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;metadata&lt;/span&gt;;
&lt;span class=&quot;kw&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;get_file_metadata&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/my/sweet/file.txt&quot;&lt;/span&gt;, &lt;span class=&quot;kw-2&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;metadata&lt;/span&gt;) {
    &lt;span class=&quot;ident&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;error!&quot;&lt;/span&gt;);
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt;;
}
&lt;span class=&quot;ident&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;file size %lld&quot;&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;metadata&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;size&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let's say we realize that this function should also provide info on when it was last modified:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;

&lt;span class=&quot;ident&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; {
    &lt;span class=&quot;ident&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;last_modified_time&lt;/span&gt;; 
    &lt;span class=&quot;ident&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;size&lt;/span&gt;;
} &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt;;

&lt;span class=&quot;ident&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;get_file_metadata&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;path&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;output&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oops, we've messed up our ABI! Our hypothetical caller is stack allocating a FileMetadata, so they're assuming it has a particular size and alignment. Additionally, they're directly accessing the &lt;code&gt;size&lt;/code&gt; field, which they assume is at a particular offset in the struct.&lt;/p&gt;
&lt;p&gt;Both of those assumptions were violated by our change. This didn't necessarily have to happen. There's a few common approaches we could have taken to allow for this change. For instance we could have:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Reserved space in our struct for future use&lt;/li&gt;
&lt;li&gt;Made FileMetadata an opaque type, requiring function calls to get the fields&lt;/li&gt;
&lt;li&gt;Given FileMetadata a pointer to its &quot;version 2&quot; data (opaque in &quot;version 1&quot;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Unfortunately, all of these require us to have the foresight to do them while also changing the way users make use of our API. In some sense, the API becomes less &quot;idiomatic&quot; to accommodate future changes. Additionally, we will forever be burdened with this complexity even if we eventually determine that the API is complete enough to guarantee its details.&lt;/p&gt;
&lt;p&gt;Swift doesn't require you to make this compromise.&lt;/p&gt;
&lt;p&gt;The following two designs are totally ABI compatible while remaining perfectly idiomatic to use:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;

&lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt; {
    &lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;Int64&lt;/span&gt;
}

&lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;getFileMetadata&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;String&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt;&lt;span class=&quot;question-mark&quot;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;

&lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt; {
    &lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;lastModifiedTime&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;Int64&lt;/span&gt; 
    &lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;size&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;Int64&lt;/span&gt;
}

&lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;getFileMetadata&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;String&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;FileMetadata&lt;/span&gt;&lt;span class=&quot;question-mark&quot;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, guaranteeing the layout of FileMetadata using the &lt;code&gt;@frozen&lt;/code&gt; attribute in future versions &lt;em&gt;would&lt;/em&gt; be an ABI breaking change under the current design. Hopefully it will be clear why by the end of this document.&lt;/p&gt;

&lt;p&gt;Ok! Now for the details, where I will in fact be ignoring the &lt;em&gt;actual&lt;/em&gt; details and instead discussing the high level ideas behind them.&lt;/p&gt;
&lt;p&gt;Once again, feel free to check out &lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst&quot;&gt;Swift's documentation of the annotations that are used to manage abi resilience&lt;/a&gt;. That covers a lot of motivation and the fine-grain details of what you can and can't do.&lt;/p&gt;

&lt;p&gt;By default, a type that is defined by a dylib has a &lt;em&gt;resilient&lt;/em&gt; layout. This means that the size, alignment, &lt;a href=&quot;https://developer.apple.com/documentation/swift/memorylayout&quot;&gt;stride&lt;/a&gt;, and &lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md#enums&quot;&gt;extra inhabitants&lt;/a&gt; of that type aren't statically known to the application. To get that information, it must ask the dylib for that type's &lt;em&gt;value witness table&lt;/em&gt; at runtime.&lt;/p&gt;
&lt;p&gt;&quot;Witness tables&quot; are Swift's term for what are ultimately vtables. The details of how these tables are acquired and laid out don't really interest me, so I won't discuss that.&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Ok actually it is Interesting that Swift needs to be able to generate witness tables at runtime to deal with the fact that generic type substitutions can't be statically predicted in the face of dynamic linking of generic code, but that's getting way ahead of ourselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; witness table is just the &quot;vtable of basic stuff you might want to know about any type&quot;, much like how Java's &lt;code&gt;Object&lt;/code&gt; type is used. So it has all the stuff like size, alignment, stride, extra inhabitants, move/copy constructors (for ARC), and destructors.&lt;/p&gt;
&lt;p&gt;At this point those with experience in language design probably suspect this results in resilient types having to be boxed and passed around as a pointer. And those suspicions are indeed correct... but not quite.&lt;/p&gt;
&lt;p&gt;See what's really interesting about resilient layout is that it's only something that the application is forced to deal with, and only in a very limited way. Inside the boundaries of the dylib where all of its own implementation details are statically known, the type is handled as if it wasn't resilient.&lt;/p&gt;
&lt;p&gt;Inside the dylib a resilient struct is stored inline, stored on the stack, passed around by value, and even scalarized. But once we move outside the dylib something else must be done.&lt;/p&gt;
&lt;p&gt;We could potentially accomplish this with expensive type layout conversion at the boundaries, but we don't! Type layouts are always the same on both sides of the resilience boundary!&lt;/p&gt;
&lt;p&gt;Type layouts are always the same on both sides of the resilience boundary!?!?&lt;/p&gt;
&lt;p&gt;Yes!&lt;/p&gt;
&lt;p&gt;The key insight here is that laying out things inline can actually be done dynamically with relative ease. Memory allocators and pointers don't care about static layouts, they just work with completely untyped sizes, alignments, and offsets. So as long as you have all the relevant value witness tables, everything works basically fine, just with more dynamic values than usual.&lt;/p&gt;
&lt;p&gt;The real major problem is stack allocations. llvm really doesn't like dynamic stack allocations. Yes, &lt;a href=&quot;https://llvm.org/docs/LangRef.html#alloca-instruction&quot;&gt;alloca&lt;/a&gt; does exist, but it's a bit messy. I believe the Swift devs managed to get it working all the time for resilient layout, but not for some of its cousins we'll see in the next section. In the general case, local variables need to actually be boxed up onto the heap. For convenience, I'll just generically refer to these dynamic stack allocations as &quot;boxed&quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Crucially&lt;/strong&gt; this boxing this doesn't change layouts, just where local variables are stored and how they're passed in the calling convention (more on that later). Also, once there is &lt;em&gt;some&lt;/em&gt; indirection everything is still stored inline. So types which already come with indirection like &lt;code&gt;Array&amp;lt;MyResilientStruct&amp;gt;&lt;/code&gt; or &lt;code&gt;MyResilientClass&lt;/code&gt; require &lt;em&gt;no&lt;/em&gt; additional allocation, and consequently no ABI changes.&lt;/p&gt;
&lt;p&gt;I've left out some key details, but let's address them while looking at polymorphic generics, since it turns out those are quite similar, but also more interesting!&lt;/p&gt;

&lt;p&gt;Unlike Rust and C++ which must monomorphize (copy+paste) implementations for each generic/template substitution, Swift is able to compile a generic function into a single implementation that can handle every substitution dynamically.&lt;/p&gt;
&lt;p&gt;This has several benefits:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Massively reducing code size&lt;/li&gt;
&lt;li&gt;Massively reducing the amount of code that must be compiled&lt;/li&gt;
&lt;li&gt;Allowing generic code to be dynamically linked&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A polymorphic implementation can't be inlined or optimized as well as a monomorphic one (without a JIT), so the Swift compiler still monomorphizes things when it's possible and seems profitable. But we're making a dylib, so it's not possible for our public API.&lt;/p&gt;
&lt;p&gt;As it turns out, polymorphically compiled generic code is really quite similar to code that handles resilient types. In both cases the basic value-witnessy properties of the type aren't statically known, and so stack values need boxing. The generic code just needs to be able to find the generic type's protocol implementations too. We can get that from the type's &lt;em&gt;protocol witness tables&lt;/em&gt; which can be acquired using the same machinery we use for the value witness tables.&lt;/p&gt;
&lt;p&gt;So really this is basically the same problem!&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;💃 Brief Aside About Existentials 💃&lt;/p&gt;
&lt;p&gt;The resilient/polymorphic type machinery solves a big chunk of &lt;a href=&quot;http://huonw.github.io/blog/2015/01/object-safety/&quot;&gt;the Object Safety problem&lt;/a&gt; that heavily limits Rust's trait objects. Swift calls these &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID275&quot;&gt;Protocols as Types&lt;/a&gt; or just &lt;em&gt;existentials&lt;/em&gt;, depending on who you ask. Generic code actually having symbols means there's no problem with it being stuffed in a vtable. Resilient layout eliminates the problems that come with dynamic &quot;by value&quot; manipulation of Self and any of its associated types.&lt;/p&gt;
&lt;p&gt;Existentials are the really tricky case for stack allocations, because they can prevent the caller from knowing the size of the return value before making the call, and that really messes up alloca. So once existentials get involved, alloca goes out the window and actual boxing needs to happen.&lt;/p&gt;
&lt;p&gt;Also associated types in function signatures still prevent existentials from being created because that creates fundamental type system problems unrelated to ABI. Every instance of MyProtocol could have a different associated type, and you can't let them get mixed up. No I'm not going to get into how Swift could use path-dependent types to deal with this.&lt;/p&gt;
&lt;p&gt;Associated types are fine for normal polymorphic code, since generics enforce that every instance has the &lt;em&gt;same&lt;/em&gt; type, which is the only issue with them in existentials.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Now, what does the presence of resilient/polymorphic types do to calling conventions?&lt;/p&gt;
&lt;p&gt;Well first off, we have the witness tables. In the resilient case all the types are statically known, and so the implementation theoretically has all the information it needs to look up witness tables for itself. Polymorphic code has no such luxury.&lt;/p&gt;
&lt;p&gt;Polymorphic code needs to work with any type, and structs don't contain any identifying runtime information. Worse yet, polymorphic code can be called without providing any values of that type! So the &lt;em&gt;caller&lt;/em&gt; needs to pass in type information. Abstractly, we &lt;em&gt;could&lt;/em&gt; pass in minimal information and have the polymorphic code look up all the witness tables, but that's really wasteful (consider calling the function in a loop). So instead Swift's actual implementation has the caller pass in pointers to every required witness table as extra arguments (automatically handled by the compiler).&lt;/p&gt;
&lt;p&gt;With the witness tables handled, we just have the problem of passing/returning actual values. The main thing is that storing these kinds of values in registers is totally off limits; we really need to pass them around as pointers. That's sometimes a bit slower, but not a terribly huge deal given we're already signed up for dynamic linking and polymorphic compilation.&lt;/p&gt;
&lt;p&gt;But to really understand passing these values, we need to talk about &lt;em&gt;reabstraction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Resilient compilation forces us to use a particular calling convention that's different from what we would use statically. For instance, in the &lt;a href=&quot;https://www.uclibc.org/docs/psABI-x86_64.pdf#section.3.2&quot;&gt;x64 SysV ABI&lt;/a&gt;, the following would have all of its fields passed in registers:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;Vec4&lt;/span&gt; { &lt;span class=&quot;ident&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;x&lt;/span&gt;; &lt;span class=&quot;ident&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;y&lt;/span&gt;; &lt;span class=&quot;ident&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;z&lt;/span&gt;; &lt;span class=&quot;ident&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;w&lt;/span&gt;; }

&lt;span class=&quot;ident&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;process&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;Vec4&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;vector&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If Vec4 were resilient, it would instead have to be passed by-reference. But remember, not all code that works with a type &lt;em&gt;needs&lt;/em&gt; to handle it resiliently. For instance, if a dynamic library defines Vec4 resiliently, it should ideally still be able to handle it non-resiliently inside of itself.&lt;/p&gt;
&lt;p&gt;Similarly, the polymorphicness (polymorphicity?) of things can be changed by their context. Consider the following Swift code that manipulates a closure:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;

&lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;: (&lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;)
}


&lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapInt&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;: (&lt;span class=&quot;ident&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;) 
}


&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapInt&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt;: { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; })
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assuming &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;mapInt&lt;/code&gt; are compiled polymorphically, the closure has 3 potentially different ABIs:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;(Int) -&amp;gt; Bool&lt;/li&gt;
&lt;li&gt;(Int) -&amp;gt; U&lt;/li&gt;
&lt;li&gt;(T) -&amp;gt; U&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;(Int) -&amp;gt; Bool&lt;/code&gt; ABI can potentially be ignored and discarded because we know we're passing it to something that expects &lt;code&gt;(Int) -&amp;gt; U&lt;/code&gt;, but the &lt;code&gt;(T) -&amp;gt; U&lt;/code&gt; ABI is completely hidden from us!&lt;/p&gt;
&lt;p&gt;This naively results in an unfortunate conclusion: closures (and function pointers) must have the maximally generic ABI just in case that's needed. Thankfully, this conclusion is incorrect.&lt;/p&gt;
&lt;p&gt;Instead Swift uses &lt;em&gt;reabstraction thunks&lt;/em&gt;. These thunks simply wrap a function with the wrong ABI in a function with the right one. So what the compiler &quot;actually&quot; generates is more like this:&lt;/p&gt;
&lt;p&gt;(note: not real Swift code because you can't explicitly talk about generics/conventions in this way)&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;

&lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;: (&lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt; {
    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;)
}


&lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapInt&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;: (&lt;span class=&quot;ident&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt; {
    
    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;thunk&lt;/span&gt;: &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;,&lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;T&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapper&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) }

    &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;map&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;input&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;thunk&lt;/span&gt;) 
}


&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;temp_closure&lt;/span&gt;: (&lt;span class=&quot;ident&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; }

&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;thunk&lt;/span&gt;: &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;Int&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;temp_closure&lt;/span&gt;($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) }

&lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;mapInt&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;ident&quot;&gt;with&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;thunk&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this way everything can use the best possible calling convention while still allowing for more generic ones to be used in different contexts.&lt;/p&gt;
&lt;p&gt;Even without this closure passing problem, reabstraction also allows a single implementation to be used in several different contexts without having to compile different versions of it. So for instance we can reabstract a concrete protocol implementation into a polymorphic one by just wrapping all the functions in reabstraction thunks. A nice code size win!&lt;/p&gt;
&lt;p&gt;(I believe the Swift devs don't technically call that one Reabstraction but it's close enough that I'm happy to conflate the concepts. Thunk away ABI complexities!)&lt;/p&gt;
&lt;p&gt;Now that we have a basic idea of how resilience and polymorphism affects calling conventions, it should hopefully be clear why it's an ABI-breaking change to mark a type as &lt;code&gt;@frozen&lt;/code&gt;, removing its resilient layout: it would change the way the type is passed to functions.&lt;/p&gt;
&lt;p&gt;This could have potentially been &quot;fixed&quot; by making resilience part of the name mangle and providing both the resilient and non-resilient versions, but that requires robust versioning info for every attribute and could lead to a huge combinatoric explosion in the number of symbols a dylib provides. Not necessarily a great idea.&lt;/p&gt;

&lt;p&gt;Resilient layout could be generalized to provide the offsets to a resilient type's public fields, but Swift actually takes this to another level: public fields don't actually need to exist by default.&lt;/p&gt;
&lt;p&gt;Resiliently exposed fields are only exposed as getters and setters!&lt;/p&gt;
&lt;p&gt;Getters and setters are actually a first class feature of Swift that can be used explicitly, but for resilience the compiler will implicitly introduce those getters and setters just to hide the fact that the fields physically exist, in case you change your mind.&lt;/p&gt;
&lt;p&gt;A computed field in Swift is manipulated in exactly the same way as a real one, and so even without resilience library authors are free to replace physical fields with computed ones without changing their A&lt;strong&gt;P&lt;/strong&gt;I. Mandating computed access just makes it A&lt;strong&gt;B&lt;/strong&gt;I stable as well.&lt;/p&gt;
&lt;p&gt;But here's the catch: you can take a mutable reference (inout) to a field. Even a computed one!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Swift let's you take references to things that don't exist.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The secret to this is &lt;em&gt;materialization&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Inouts can only appear as arguments to a function, and so they're naturally scoped to a function call. As such, we can &quot;take a reference&quot; to a computed field by using a temporary with cleanup. So this code:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;
&lt;span class=&quot;kw&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;MyStruct&lt;/span&gt; {
    &lt;span class=&quot;ident&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;myField&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;FieldTy&lt;/span&gt;
}

&lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;doTheThing&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;FieldTy&lt;/span&gt;)

&lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;myVal&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;MyStruct&lt;/span&gt;(..)
&lt;span class=&quot;ident&quot;&gt;doTheThing&lt;/span&gt;(&lt;span class=&quot;kw-2&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;myVal&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;myField&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is (very roughly) compiled to:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;
&lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;myVal&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;MyStruct&lt;/span&gt;(..)

&lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;temp&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;FieldTy&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;myVal&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;get_myField&lt;/span&gt;();
&lt;span class=&quot;ident&quot;&gt;doTheThing&lt;/span&gt;(&lt;span class=&quot;kw-2&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;temp&lt;/span&gt;)
&lt;span class=&quot;ident&quot;&gt;myVal&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;set_myField&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;temp&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or to break that into steps:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Allocate a temporary local variable (temp)&lt;/li&gt;
&lt;li&gt;Initialize temp with the getter&lt;/li&gt;
&lt;li&gt;Call the inout-using function with the address of temp&lt;/li&gt;
&lt;li&gt;Feed the value of temp into the setter&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This creates a very interesting difference from references in Rust and C++: if you take a reference to a field, it may point to a temporary that's only valid for the scope of the call it was passed to!&lt;/p&gt;
&lt;p&gt;Another interesting consequence of this is that Swift's mutable references all actually have a finalizer which must be executed for a write to &quot;stick&quot;. This means they cannot be returned or stored, as the finalizer would be lost and the referent would be deallocated.&lt;/p&gt;
&lt;p&gt;This in turn creates a hilarious footgun many Swift developers run into where they think they're clever and convert an inout into a raw pointer (using &lt;a href=&quot;https://developer.apple.com/documentation/swift/2429788-withunsafemutablepointer&quot;&gt;withUnsafeMutablePointer&lt;/a&gt;) that they store for later and -- oops it's dangling!&lt;/p&gt;
&lt;p&gt;However you can overcome this limitation with callbacks, as follows:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;
&lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;doSomeWork&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;callback&lt;/span&gt;: (&lt;span class=&quot;ident&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;Float&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; ()) {
    &lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;Vec4&lt;/span&gt;()
    

    
    &lt;span class=&quot;ident&quot;&gt;callback&lt;/span&gt;(&lt;span class=&quot;kw-2&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;vec&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;x&lt;/span&gt;)
    

    
}


&lt;span class=&quot;ident&quot;&gt;doSomeWork&lt;/span&gt; { (&lt;span class=&quot;ident&quot;&gt;val&lt;/span&gt;: &lt;span class=&quot;ident&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;Float&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; ()
    &lt;span class=&quot;ident&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Callbacks are of course very annoying and noisy, &lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/OwnershipManifesto.md#mutating-iteration&quot;&gt;and so this was solved with the slayer of callbacks, coroutines&lt;/a&gt;! The same code can be rewritten as:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;


&lt;span class=&quot;ident&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;doSomeWork&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;Int&lt;/span&gt; {
    &lt;span class=&quot;ident&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;Vec4&lt;/span&gt;()
    

    
    &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;kw-2&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;vec&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;x&lt;/span&gt;
    

    
}

&lt;span class=&quot;ident&quot;&gt;doSomeWork&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nifty!&lt;/p&gt;

&lt;p&gt;Swift makes extensive use of reference counting, and as it turns out it's really expensive to constantly modify the count! Especially when you make all your collections copy-on-write (CoW), so an errant reference count bump can make an O(n) algorithm O(n&lt;sup&gt;2&lt;/sup&gt;)! (I actually consider this a correctness error in the case of data structures and algorithms, but reasonable people may disagree.)&lt;/p&gt;
&lt;p&gt;To help deal with this, Swift made ownership of reference-counted values (~classes) part of its calling convention. The most important aspect is &quot;+0&quot; vs &quot;+1&quot;, referring to how the caller should change the refcount:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;+1: callee has an &quot;owned&quot; value it's responsible for releasing (if it doesn't escape)&lt;/li&gt;
&lt;li&gt;+0: callee has a &quot;borrowed&quot; value it's responsible for retaining (if it escapes)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Since we're talking about ownership, I'm legally required to compare this system to Rust, and the comparison is pretty straight-forward:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;+1 is a move (&lt;code&gt;T&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;+0 is a shared immutable reference (&lt;code&gt;&amp;amp;T&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;inout is a mutable exclusive reference (&lt;code&gt;&amp;amp;mut T&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But there's a few key differences, due to ARC:&lt;/p&gt;
&lt;p&gt;First and foremost, classes break &quot;shared xor mutable&quot; reasoning, and are effectively like using &lt;code&gt;Arc&amp;lt;UnsafeCell&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; in Rust. This is why Swift's collections provide CoW semantics, &lt;a href=&quot;https://doc.rust-lang.org/std/sync/struct.Arc.html#method.make_mut&quot;&gt;which Rust's Arc also safely provides&lt;/a&gt;. Yes, you can indeed trivially introduce Data Races into Swift code with classes.&lt;/p&gt;
&lt;p&gt;Second, all Swift types can always be implicitly cloned, so a +0 can always be upgraded to an owned value without ceremony. That said, cloning in Swift (they just call it copying) is always just bumping reference counts. Other non-trivial operations, like copying an array's buffer to a new allocation, are only performed by mutations that trigger CoW. Note also that this means that if you trigger CoW on an array of arrays, you will get two independent outer arrays that still point to the same inner arrays (which are now primed to CoW if either side mutates them).&lt;/p&gt;
&lt;p&gt;Third, +0 isn't strictly bound to pass-by-reference, and can just be a trivial bitwise copy of the value. Unfortunately, &lt;a href=&quot;https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html#ID52&quot;&gt;weak references&lt;/a&gt; require non-trivial moves because their locations are tracked for auto-nulling, so those &lt;em&gt;are&lt;/em&gt; passed by reference when using +0 to keep it cheap. Yes, Swift has both copy and move constructors, although they're currently entirely ARC and not user-defined. Swift &lt;em&gt;also&lt;/em&gt; has unowned references which are the same as Rust's Weak references, which have trivial moves.&lt;/p&gt;
&lt;p&gt;In Swift's current design, +0/+1 is mostly just something the compiler does internally to optimize different calling conventions, but I think more explicit annotations are theoretically on the road map.&lt;/p&gt;
&lt;p&gt;There's also a special path for field materialization, &quot;modify&quot;, which returns an inout. This handles the fact that getters are naively +1, which is especially nasty for nested array operations like &lt;code&gt;array[0][2] *= 2&lt;/code&gt;, as they would always trigger a huge temporary copy of the inner array!&lt;/p&gt;
&lt;p&gt;And indeed, the subscript operator of Array contains a modify implementation:&lt;/p&gt;
&lt;div class=&quot;example-wrap&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;rust rust-example-rendered&quot;&gt;
 &lt;span class=&quot;ident&quot;&gt;_modify&lt;/span&gt; {
  &lt;span class=&quot;ident&quot;&gt;_makeMutableAndUnique&lt;/span&gt;()
  &lt;span class=&quot;ident&quot;&gt;_checkSubscript_native&lt;/span&gt;(&lt;span class=&quot;ident&quot;&gt;index&lt;/span&gt;)
  &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;_buffer&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;subscriptBaseAddress&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;ident&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;kw-2&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ident&quot;&gt;address&lt;/span&gt;.&lt;span class=&quot;ident&quot;&gt;pointee&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Interestingly, this implementation is marked as &lt;code&gt;inlineable&lt;/code&gt;, and so it's actually guaranteed to always work. Array's ABI details were pretty aggressively guaranteed since it's a &lt;em&gt;relatively&lt;/em&gt; simple fundamental type whose performance matters a lot.)&lt;/p&gt;
&lt;p&gt;There's also a read-only version of modify, &quot;read&quot;, which provides a +0 getter. That one isn't as strongly motivated, but hey it's a nice little optimization to avoid a needless retain+release.&lt;/p&gt;

&lt;p&gt;Resilience is nifty but it clearly comes with some performance overhead. So of course Swift also provides special attributes to opt out of resilience. I had originally intended to write a whole bunch about this but it's actually really complex and subtle, so I really need to &lt;a href=&quot;https://github.com/apple/swift/blob/master/docs/LibraryEvolution.rst&quot;&gt;punt to Swift's actual docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TL;DR you can mark things as having a frozen (non-resilient) layout, exhaustively matchable, inlineable, non-subclassable, non-escaping, and a bunch of other whacky stuff which variously affects API and ABI in subtle ways.&lt;/p&gt;

&lt;p&gt;This is already &lt;s&gt;17&lt;/s&gt; &lt;s&gt;18&lt;/s&gt; &lt;s&gt;19&lt;/s&gt; &lt;s&gt;20&lt;/s&gt; 21 pages and it was supposed to just be a warmup for something else I need to do and I NEED TO STOP SO BULLET POINTS:&lt;/p&gt;
&lt;ul readability=&quot;24.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Swift reserves a callee-preserved register for a method's &lt;code&gt;self&lt;/code&gt; argument (pointer) to make repeated calls faster. Cool?&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;Swift's exceptions (which are implemented more like Result and less like unwinding) have the error type always boxed. The caller initializes the &quot;swift error&quot; register to 0, and if there's an exception the callee sets that register to hold the boxed error's pointer. This makes error propagation really fast (just don't change the register), and also doesn't require a Result to actually be materialized in the success case (avoid a ton of copies). Sadly this doesn't transfer over to Rust well, so they can't easily use the native Swift machinery that was added to llvm (swiftcc).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;Swift's implicit boxes don't actually have to be pointers, I think? They can pack small values in there and just set a high bit to distinguish an &lt;code&gt;Int32&lt;/code&gt; 0 from null or something? They spent a lot of time messing around with making really-not-pointer-sized things pointer-sized with whacky hacks, and also messed around with boxes being 3 pointers wide to make the &quot;small&quot; box trick happen more, so I can never keep reality straight here.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Swift used to have copy-array-of-self and move-array-of-self entries in the value witness table to deal with the &quot;calling a bunch of copy/move constructors which might do nothing interesting&quot; problem that C++ has, but this was replaced by just adding a flag to the witness table for whether the type is trivial for copies/moves. Less bloaty.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Swift decouples size from stride to distinguish trailing padding from actual content. Trailing padding shows up in the stride so that arrays properly align their contents. Trailing padding doesn't show up in size so that things like enum tags and neighboring fields can use that space. It's really neat!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Swift actually does insert a bunch of magical layout conversions when bridging between Swift and Objective-C. Initially this bridging was lazy in the case of collections, and that was super whacky. Specifically if you had an &lt;code&gt;Array&amp;lt;MySwiftType&amp;gt;&lt;/code&gt; it might have been an &lt;code&gt;NSArray&lt;/code&gt; containing opaque pointers, with type conversion was performed when you accessed the element. They later moved to a more eager model because this was really nasty and expensive for heavily-accessed collections. Also object-identity was messy to deal with.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;The main piece of complexity in the system for getting witness tables is that it provides a runtime reflection system for spidering through the type metadata of generic types and their associated types because you need to be able to get their witnesses too.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;I think Swift technically stabilized the set of enum tag packing optimizations it can perform, but no clue what those are. Sorry eddyb.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Zero cost abstractions Really Aren't if they ever need to be compiled polymorphically, watch out!&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Pure Trivia: Rust actually originally tried a polymorphic design similar to Swift's, but they eventually backed off from it once the difficulties became clear. Supporting both polymorphic &lt;em&gt;and&lt;/em&gt; monomorphic compilation helped Swift a lot, but I think the key difference was ultimately just that Apple had a more significant motivation than Mozilla to pursue dynamic linking and &lt;em&gt;way&lt;/em&gt; more resources to throw at this very hard problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;em&gt;collapses&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 09 Nov 2019 00:14:16 +0000</pubDate>
<dc:creator>gok</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gankra.github.io/blah/swift-abi/</dc:identifier>
</item>
<item>
<title>We do not use foreign keys (2016)</title>
<link>https://github.com/github/gh-ost/issues/331#issuecomment-266027731</link>
<guid isPermaLink="true" >https://github.com/github/gh-ost/issues/331#issuecomment-266027731</guid>
<description>&lt;p&gt;At GitHub we do not use foreign keys, ever, anywhere.&lt;/p&gt;
&lt;p&gt;Personally, it took me quite a few years to make up my mind about whether foreign keys are good or evil, and for the past 3 years I'm in the unchanging strong opinion that foreign keys should not be used. Main reasons are:&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;FKs are in your way to shard your database. Your app is accustomed to rely on FK to maintain integrity, instead of doing it on its own. It may even rely on FK to cascade deletes (shudder).&lt;br/&gt;When eventually you want to shard or extract data out, you need to change &amp;amp; test the app to an unknown extent.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;FKs are a performance impact. The fact they require indexes is likely fine, since those indexes are needed anyhow. But the lookup made for each &lt;code&gt;insert&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt; is an overhead.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;FKs don't work well with online schema migrations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This last bullet is not a chicken and an egg, as you might think. FKs impose a lot of constraints on what's possible and what's not possible.&lt;/p&gt;
&lt;p&gt;Here's an old post of mine, reviewing the first appearance of Facebook's OSC, and which includes some thoughts on foreign keys: &lt;a rel=&quot;nofollow&quot; href=&quot;http://code.openark.org/blog/mysql/mk-schema-change-check-out-ideas-from-oak-online-alter-table&quot;&gt;http://code.openark.org/blog/mysql/mk-schema-change-check-out-ideas-from-oak-online-alter-table&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let's say you have two tables, P &amp;amp; C, standing for Parent &amp;amp; Child, respectively. There's a foreign key in C such that each row in C points to some &quot;parent&quot; value in P.&lt;/p&gt;
&lt;p&gt;Doing schema migration of C is possible. However since foreign keys have unique names, the new (migrated) C table will have a FK with a different name than the original one.&lt;/p&gt;
&lt;p&gt;Doing schema migration of P is just not going to work. Recall that &lt;code&gt;gh-ost&lt;/code&gt; renames the table at the end. Alas, when renaming a table away, the FK will move with the renamed table. To create a parent-side FK on the &lt;em&gt;ghost&lt;/em&gt; table, one would need to migrate C ; and because &lt;code&gt;gh-ost&lt;/code&gt; uses async approach, P and P-ghost are never in complete sync at any point in time (except at lock time) which makes it impossible for C to have both a FK to P and to P-ghost. some integrity will be broken.&lt;/p&gt;
&lt;p&gt;There's more discussion on the documentation of &lt;a href=&quot;https://www.percona.com/doc/percona-toolkit/2.2/pt-online-schema-change.html&quot; rel=&quot;nofollow&quot;&gt;pt-online-schema-change&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 08 Nov 2019 20:41:20 +0000</pubDate>
<dc:creator>Scarbutt</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/9919?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>Thoughts on Foreign Keys? · Issue #331 · github/gh-ost</og:title>
<og:url>https://github.com/github/gh-ost/issues/331</og:url>
<og:description>Hello, Thanks for your hard work on gh-ost! As I familiarize myself with the way it all works, I noted that foreign keys are explicitly not supported, but that they may be to some extent in the fut...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/github/gh-ost/issues/331</dc:identifier>
</item>
<item>
<title>Apple has made it difficult to use web-based technology on its platforms</title>
<link>https://onezero.medium.com/apple-is-trying-to-kill-web-technology-a274237c174d</link>
<guid isPermaLink="true" >https://onezero.medium.com/apple-is-trying-to-kill-web-technology-a274237c174d</guid>
<description>&lt;p&gt;
&lt;h2 class=&quot;as cu et eu ax&quot;&gt;The company has made it extremely difficult to use web-based technology on its platforms, and it hopes developers won’t bother&lt;/h2&gt;
&lt;/p&gt;
&lt;div class=&quot;ev&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;&lt;a href=&quot;https://onezero.medium.com/@ow?source=post_page-----a274237c174d----------------------&quot; rel=&quot;noopener&quot;&gt;&lt;img alt=&quot;Owen Williams&quot; class=&quot;r ew ex ey&quot; src=&quot;https://miro.medium.com/fit/c/96/96/2*W0zZWZkd4F5GQ2LjW75Hmw.jpeg&quot; width=&quot;48&quot; height=&quot;48&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

Credit: SOPA Images/Getty Images
&lt;p id=&quot;5efa&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl hm&quot;&gt;&lt;span class=&quot;r hn hw hq gf hx&quot;&gt;&lt;img alt=&quot;T&quot; class=&quot;hy hz ia ib ic id do t u gj ak&quot; src=&quot;https://miro.medium.com/max/158/1*x3MLNrKVby4_GZ1VCCYktA.png&quot; width=&quot;79&quot; height=&quot;79&quot;/&gt;&lt;span class=&quot;r hn ho hp hq hr hs ht hu hv gf gh&quot;&gt;T&lt;/span&gt;&lt;/span&gt;he programming languages used to build the web often find their way into apps, too. That’s largely due to software that allows developers to “reuse” the code they write for the web in products they build to run on operating systems like Linux, Android, Windows, and macOS.&lt;/p&gt;
&lt;p id=&quot;85e7&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;But Apple has a reason not to like this recycling of web technology. It wants its Mac App Store to be filled with apps that you can’t find anywhere else, not apps that are available on every platform. &lt;a href=&quot;https://9to5mac.com/2019/11/04/electron-app-rejections/&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;With a recent policy change&lt;/a&gt;, the company has made it a little more difficult for developers to submit apps containing web code.&lt;/p&gt;
&lt;p id=&quot;92d7&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;The Mac App Store has quietly started rejecting apps made with a popular tool called Electron that allows developers to base all of their apps on the web-based code. Some of the most popular apps in the App Store, like Slack, Spotify, Discord, and WhatsApp, fall into this category.&lt;/p&gt;
&lt;p id=&quot;2ce7&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;&lt;a href=&quot;https://github.com/electron/electron/issues/20027&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;In a discussion&lt;/a&gt; on the programming community Github, several developers say rejections for apps that they built using Electron — which would were approved in the past — came with an explanation that these apps “attempt to hide the use of private APIs,” which are APIs built for Apple’s internal usage, rather than for third-party developers. Using private APIs to build public-facing apps is commonly frowned upon because they may change or break over time, and Apple &lt;a href=&quot;https://developer.apple.com/app-store/review/guidelines/#software-requirements&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;bans&lt;/a&gt; apps that use them.&lt;/p&gt;
&lt;p id=&quot;0969&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Electron has used these private APIs for years without issue. These private APIs allow developers to, for instance, &lt;a href=&quot;https://mozillagfx.wordpress.com/2019/10/22/dramatically-reduced-power-usage-in-firefox-70-on-macos-with-core-animation/&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;drastically improve power usage&lt;/a&gt; whereas Apple’s sanctioned tools make the user experience worse. In the majority of these cases, Apple doesn’t provide real alternatives for developers who want to access these private API features.&lt;/p&gt;
&lt;p id=&quot;2e70&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Now it’s unlikely that the thousands of developers who have built their apps using Electron can release updates to them unless the Electron framework releases a major change to its implementation.&lt;/p&gt;
&lt;p id=&quot;5aab&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Developers could distribute their apps from their own websites, asking users to download them directly. But that means abandoning features like Apple’s auto-update mechanism from the Mac App Store and iCloud sync. And this direct-to-consumer method could soon be locked down, too, with Apple’s controversial &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;notarization requirements&lt;/a&gt; potentially requiring their review.&lt;/p&gt;
&lt;p id=&quot;7f1d&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Apple has a history of stunting the web’s progress on its platforms. On iOS, &lt;a href=&quot;https://www.howtogeek.com/184283/why-third-party-browsers-will-always-be-inferior-to-safari-on-iphone-and-ipad/&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Apple doesn’t allow fully independent third-party browsers&lt;/a&gt;, requiring all apps to leverage its Safari browser when rendering web-based content. While browsers like Chrome and Opera are available in the App Store, they must use Apple’s Safari browser behind the scenes to render web pages, rather than their own. That means Apple has a monopoly on how iPhone and iPad users access the web. To push developers toward building native apps on iOS rather than using web technologies, Apple ignores popular parts of the &lt;a href=&quot;https://www.w3.org/TR/&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;open web specification&lt;/a&gt; that other browsers implement, to its own benefit.&lt;/p&gt;
&lt;blockquote class=&quot;ii&quot; readability=&quot;5.5&quot;&gt;
&lt;div id=&quot;0fa2&quot; class=&quot;ij ik il at ec b et im in io ip iq hl&quot; readability=&quot;10&quot;&gt;
&lt;p class=&quot;ec b ir is ax&quot;&gt;Apple’s subtle, anti-competitive practices don’t look terrible in isolation, but together they form a clear strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p id=&quot;b1c4&quot; class=&quot;gy gz eb at ha b hb it hd iu hf iv hh iw hj ix hl&quot;&gt;A technology called WebRTC, for example, allows video calling in a web browser without additional software. It powers tools like Google Meet. But Apple was incredibly slow to &lt;a href=&quot;https://webkit.org/blog/8672/on-the-road-to-webrtc-1-0-including-vp8/&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;implement the specification&lt;/a&gt;, leaving out key pieces of functionality, and the technology didn’t work &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=183201&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;when embedded inside apps&lt;/a&gt;.&lt;/p&gt;
&lt;p id=&quot;dbe2&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Apple also handicapped an emerging standard called Progressive Web Apps (PWAs) — which, like Electron, allows developers to build native-like apps for both desktop and mobile — by &lt;a href=&quot;https://caniuse.com/#feat=web-app-manifest&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;partially&lt;/a&gt; &lt;a href=&quot;https://medium.com/@firt/whats-new-on-ios-12-2-for-progressive-web-apps-75c348f8e945&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;implementing&lt;/a&gt; it in a way that makes it too inconsistent to rely on. PWA doesn’t have the same problem if users open apps in Chrome or Firefox, but iPhone and iPad users can’t install third-party browsers, which makes PWA-based technology a non-starter.&lt;/p&gt;
&lt;p id=&quot;c7ff&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Developers use technologies like Electron and PWA because they allow for faster updates across platforms without an array of different codebases. Some argue that this results in lower quality apps, but I’d argue the alternative is no app at all or apps that are rarely updated because maintaining unique Windows, Mac, and web-based products is complex and expensive. Apple recently launched a &lt;a class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://onezero.medium.com/to-revive-the-mac-apple-wants-to-kill-electron-154873336e78&quot;&gt;competing framework called Catalyst&lt;/a&gt;, which allows developers with iPad apps to bring them to macOS quickly — a great tool for developers exclusively targeting Apple users, but not those building cross-platform apps.&lt;/p&gt;
&lt;p id=&quot;a1ee&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Apple’s subtle, anti-competitive practices don’t look terrible in isolation, but together they form a clear strategy: Make it so painful to build with web-based technology on Apple platforms that developers won’t bother. Now that the App Store is not accepting apps built using Electron, developers will likely find creative ways to work around it, but Apple is setting up for a continual cat-and-mouse game as it &lt;a href=&quot;https://www.macrumors.com/2019/09/03/apple-macos-catalina-notarization-mac-apps/&quot; class=&quot;cy by ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;plans to exert more control&lt;/a&gt; over which apps can run on the platform in the future.&lt;/p&gt;
&lt;p id=&quot;48a8&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;These types of changes may be made in the name of privacy or security, but the reality is that the argument looks weak when both users and developers simply don’t have a choice because Apple controls the platform, browser engine, and the distribution method. Regardless of your opinion of Electron app quality, choice is important.&lt;/p&gt;
&lt;p id=&quot;cd4f&quot; class=&quot;gy gz eb at ha b hb hc hd he hf hg hh hi hj hk hl&quot;&gt;Apple’s control over its app ecosystem is a new type of monopoly that’s hard to understand for lawmakers, and difficult for us to fight back against — because there simply isn’t a way out of these restrictions when the company controls both the distribution method and the platform itself.&lt;/p&gt;
</description>
<pubDate>Fri, 08 Nov 2019 20:33:33 +0000</pubDate>
<dc:creator>Lordarminius</dc:creator>
<og:type>article</og:type>
<og:title>Apple Is Trying to Kill Web Technology</og:title>
<og:description>The company has made it extremely difficult to use web-based technology on its platforms, and it hopes developers won’t bother</og:description>
<og:url>https://onezero.medium.com/apple-is-trying-to-kill-web-technology-a274237c174d</og:url>
<og:image>https://miro.medium.com/focal/1200/632/48/33/1*zqENj8mfvANOuM2PEcFPxw.jpeg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://onezero.medium.com/apple-is-trying-to-kill-web-technology-a274237c174d?gi=7120064dd4ae</dc:identifier>
</item>
</channel>
</rss>