<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>First contact made with melted nuclear fuel at Fukushima plant</title>
<link>http://www.asahi.com/ajw/articles/AJ201902140041.html</link>
<guid isPermaLink="true" >http://www.asahi.com/ajw/articles/AJ201902140041.html</guid>
<description>&lt;p&gt;A probe touched melted nuclear fuel debris in a destroyed reactor at the Fukushima No. 1 nuclear plant, a long-awaited milestone in the battle toward decommissioning, Tokyo Electric Power Co. said Feb. 13.&lt;/p&gt;
&lt;p&gt;The rod-like probe, fitted with 3-centimeter-long claws, lifted pieces of the nuclear fuel debris during the eight-hour operation at the bottom of the No. 2 reactor at the plant, the utility said.&lt;/p&gt;
&lt;p&gt;Data obtained through the investigation, such as the hardness, temperature and radioactivity of the debris, will be used to develop equipment and containers for the eventual removal of the melted fuel. The probe, which was recovered after the investigation, also took pictures of the inside of the containment vessel.&lt;/p&gt;
&lt;p&gt;No debris was taken outside the reactor, according to TEPCO.&lt;/p&gt;
&lt;p&gt;The retrieval process will start in earnest at one of the reactors in 2021, according to the plan drawn up jointly by the central government and TEPCO.&lt;/p&gt;
&lt;p&gt;It was the first physical contact with melted fuel at the plant since the Great East Japan Earthquake and tsunami on March 11, 2011, caused the meltdowns of three reactors there.&lt;/p&gt;
&lt;p&gt;It took TEPCO years just to locate the melted fuel debris because of the high radiation levels in the reactor buildings.&lt;/p&gt;
&lt;p&gt;The utility said workers manually inserted the probe through a crack created early in the disaster on the side of the No. 2 reactor’s containment vessel.&lt;/p&gt;
&lt;p&gt;The probe, which resembles a prize-grabbing crane machine at a game arcade, was also equipped with a dosimeter and a camera. It can extend 15 meters and can lift pieces up to 8 centimeters in diameter and weighing 2 kilograms.&lt;/p&gt;
&lt;p&gt;Workers remotely operated the probe from the operating room in a building close to the No. 2 reactor building, and lowered it to the bottom of the reactor’s containment vessel.&lt;/p&gt;
&lt;p&gt;The probe lifted pebble-like nuclear fuel debris and structural parts up to 8 cm in diameter at five spots in the 2,500-square-cm area that was investigated. It failed to pick up debris at one spot.&lt;/p&gt;
&lt;p&gt;TEPCO said the probe could not lift clay-like debris likely because it had adhered to the bottom of the containment vessel.&lt;/p&gt;
&lt;p&gt;The probe also touched nuclear fuel debris lying at several spots on the lattice-shaped scaffold for workers directly below the reactor’s pressure vessel.&lt;/p&gt;
&lt;p&gt;The previous investigation of the No. 2 reactor in 2017 located melted fuel debris on the scaffold. But a robot deployed for a further investigation broke down on its way to the debris.&lt;/p&gt;
&lt;p&gt;In a survey last year, the utility used the rod-like probe to take images of the inside of the reactor.&lt;/p&gt;
&lt;p&gt;TEPCO is expected to remove a small amount of nuclear fuel debris in the second half of fiscal 2019 as part of preparations for full-scale retrieval.&lt;/p&gt;
</description>
<pubDate>Fri, 15 Feb 2019 19:46:20 +0000</pubDate>
<dc:creator>howard941</dc:creator>
<og:title>1st contact made with melted nuclear fuel at Fukushima plant：The Asahi Shimbun</og:title>
<og:url>http://www.asahi.com/ajw/articles/AJ201902140041.html</og:url>
<og:image>http://www.asahicom.jp/ajw/articles/images/AS20190214003281_comm.jpg</og:image>
<og:type>article</og:type>
<og:description>A probe touched melted nuclear fuel debris in a destroyed reactor at the Fukushima No. 1 nuclear pla</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.asahi.com/ajw/articles/AJ201902140041.html</dc:identifier>
</item>
<item>
<title>Modern Alternatives to PGP</title>
<link>https://blog.gtank.cc/modern-alternatives-to-pgp/</link>
<guid isPermaLink="true" >https://blog.gtank.cc/modern-alternatives-to-pgp/</guid>
<description>&lt;p&gt;Did your last Yubikey just break? Perhaps you forgot an offline backup password. Maybe you're just tired of &lt;a href=&quot;https://gist.github.com/grugq/03167bed45e774551155&quot;&gt;living like a spy&lt;/a&gt; and never using smartphones. Whatever it is, you're here, and you're finally ready to &lt;a href=&quot;https://blog.filippo.io/giving-up-on-long-term-pgp&quot;&gt;give up on PGP&lt;/a&gt;. That's great!&lt;/p&gt;
&lt;img src=&quot;https://blog.gtank.cc/content/images/2019/02/225357.jpg&quot; class=&quot;kg-image&quot;/&gt;We're here to help!
&lt;p&gt;No one was sending you encrypted emails anyway, so that's easy enough. But the most widespread uses of PGP are machine-oriented, for needs like package signing and local file encryption. I recently got into this again on a thread that mentioned &lt;a href=&quot;https://github.com/golang/go/issues/30141&quot;&gt;deprecating Go's OpenPGP package&lt;/a&gt; and people always ask the same question: if not PGP, then what?&lt;/p&gt;
&lt;p&gt;The thing is, there can't be a direct modern alternative to PGP. It's a do-everything design that predates modern cryptographic engineering and hasn't worked out well. The &quot;modern alternative&quot; is to use a much more specific and much less configurable solution to your problem.&lt;/p&gt;
&lt;p&gt;Here are the most common uses of PGP and their modern, focused alternatives.&lt;/p&gt;
&lt;h2 id=&quot;signatures-for-os-or-package-updates&quot;&gt;Signatures for OS or package updates&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Original need:&lt;/strong&gt; &lt;a href=&quot;https://tutorials.ubuntu.com/tutorial/tutorial-how-to-verify-ubuntu#0&quot;&gt;Linux distributions&lt;/a&gt; and many other software update mechanisms use PGP signatures to prevent malicious mirrors or network attackers from altering the contents of their packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modern alternative:&lt;/strong&gt; a lightweight signing tool like OpenBSD's &lt;a href=&quot;https://https.www.google.com.tedunangst.com/flak/post/signify&quot;&gt;signify&lt;/a&gt; or &lt;a href=&quot;https://jedisct1.github.io/minisign/&quot;&gt;minisign&lt;/a&gt;, either of which you could quickly build in Go using &lt;a href=&quot;https://godoc.org/golang.org/x/crypto/ed25519&quot;&gt;x/crypto/ed25519&lt;/a&gt;. I wrote one as a &lt;a href=&quot;https://github.com/gtank/sshsign&quot;&gt;party trick&lt;/a&gt; last month – it's less than 200 lines of code and that includes some silly key parsing tricks.&lt;/p&gt;
&lt;p&gt;These tools are extremely simple and robust because they only support one algorithm, lack state or any notion of a keyring, and are usually decoupled from complex messaging formats (which should be a separate concern from your signature cryptography). As a bonus they're mostly compatible with each other because the keys are all &lt;a href=&quot;https://tools.ietf.org/html/rfc8032&quot;&gt;EdDSA&lt;/a&gt; keys. Need I even mention that EdDSA is much, much faster than RSA?&lt;/p&gt;
&lt;p&gt;If you're a maintainer of self-serve packaging infrastructure or otherwise have more complex needs, you should take a look at &lt;a href=&quot;https://theupdateframework.github.io/&quot;&gt;TUF&lt;/a&gt;. It's a modern toolkit meant to resist all kinds of update-related attacks that PGP signatures simply don't address. For an idea of how it works in practice, check out the designs for Python's package infrastructure (&lt;a href=&quot;https://www.python.org/dev/peps/pep-0458/&quot;&gt;PEP 458&lt;/a&gt;, &lt;a href=&quot;https://www.python.org/dev/peps/pep-0480/&quot;&gt;PEP 480&lt;/a&gt;). The &lt;a href=&quot;https://github.com/theupdateframework/notary&quot;&gt;Notary project&lt;/a&gt; is a productionized and audited implementation.&lt;/p&gt;
&lt;h2 id=&quot;encrypting-data-blobs&quot;&gt;Encrypting data blobs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Original need:&lt;/strong&gt; You want to store individual pieces of data without making their contents accessible to anyone else on your system. For some reason this isn't built into operating systems yet, so programs like &lt;a href=&quot;https://www.passwordstore.org&quot;&gt;pass&lt;/a&gt; use PGP.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modern alternative:&lt;/strong&gt; &lt;a href=&quot;https://godoc.org/golang.org/x/crypto/nacl/box&quot;&gt;nacl/box&lt;/a&gt; and &lt;a href=&quot;https://godoc.org/golang.org/x/crypto/nacl/secretbox&quot;&gt;nacl/secretbox&lt;/a&gt;. These are general-purpose replacements for encrypting any kind of data. They support public-key and secret-key encryption, respectively, and both use secure modern modes and ciphers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://keybase.io&quot;&gt;Keybase&lt;/a&gt; made a very solid attempt to specify nacl in a storable message format with &lt;a href=&quot;https://saltpack.org&quot;&gt;saltpack&lt;/a&gt;, which has a good Go implementation using the above x/crypto package. It works as a nearly drop-in replacement anywhere you were using ASCII-armored PGP data.&lt;/p&gt;
&lt;h2 id=&quot;sending-files-securely&quot;&gt;Sending files securely&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Original need:&lt;/strong&gt; You have files that you want to send to another person, but you don't want the data to be visible in transit or stored in the cloud. For this, folks often attach an encrypted ZIP file to an email.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modern alternative:&lt;/strong&gt; &lt;a href=&quot;https://magic-wormhole.readthedocs.io/en/latest/welcome.html&quot;&gt;magic-wormhole&lt;/a&gt;. If you need to send files to another person securely, use this. It's based on a modern cryptographic technique called &lt;a href=&quot;https://blog.cryptographyengineering.com/2018/10/19/lets-talk-about-pake/&quot;&gt;PAKE&lt;/a&gt;, which basically means it keeps your data safe in transit while giving an attacker no chance to crack the password. It generates those passwords for you, and they're short, one-time-use combinations of three English words – all your recipient needs to do is enter the words. There's nothing to remember long-term and no account information to lose in a data breach. Wormhole also works through firewalls and optionally supports Tor.&lt;/p&gt;
&lt;p&gt;We live in the future. There are better options than emailing encrypted files around.&lt;/p&gt;
&lt;h2 id=&quot;something-else&quot;&gt;Something else?&lt;/h2&gt;
&lt;p&gt;What's your lingering use case for PGP? Hit me up &lt;a href=&quot;https://twitter.com/gtank__&quot;&gt;on Twitter&lt;/a&gt; or send me &lt;a href=&quot;mailto:blog@gtank.cc?subject=I'm%20still%20using%20PGP&quot;&gt;an email&lt;/a&gt; and let's talk about getting you off PGP for good.&lt;/p&gt;
</description>
<pubDate>Fri, 15 Feb 2019 18:22:23 +0000</pubDate>
<dc:creator>tptacek</dc:creator>
<og:type>article</og:type>
<og:title>Modern Alternatives to PGP</og:title>
<og:description>Did your last Yubikey just break? Perhaps you forgot an offline backup password. Maybe you're just tired of living like a spy [https://gist.github.com/grugq/03167bed45e774551155] and never using smartphones. Whatever it is, you're here, and you're finally ready to give up on PGP [https://blog.filippo.io/giving-up-on-long-term-pgp]. That's great! We're here to help!No one was sending you encrypted emails anyway, so that's easy enough. But the most widespread uses of PGP are machine-oriented, fo</og:description>
<og:url>https://blog.gtank.cc/modern-alternatives-to-pgp/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.gtank.cc/modern-alternatives-to-pgp/</dc:identifier>
</item>
<item>
<title>Don’t Get Clever with Login Forms</title>
<link>http://bradfrost.com/blog/post/dont-get-clever-with-login-forms/</link>
<guid isPermaLink="true" >http://bradfrost.com/blog/post/dont-get-clever-with-login-forms/</guid>
<description>&lt;p&gt;As time goes on I find myself increasingly annoyed with login forms. As password managers like &lt;a href=&quot;https://1password.com/&quot;&gt;1Password&lt;/a&gt; (which is what I use) and Chrome’s password manager (which I also sorta use) become more popular, it’s important for websites to be aware of how users go about logging into their sites.&lt;/p&gt;
&lt;p&gt;Let’s walk through some login patterns and why I think they’re not ideal. And then let’s look at some better ways of tackling login. &lt;strong&gt;TL;DR; create login forms that are simple, linkable, predictable, and play nicely with password managers.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Don’ts&lt;/h2&gt;
&lt;p&gt;Here are some patterns that I encounter on websites that I think should be avoided.&lt;/p&gt;
&lt;h3&gt;Don’t put logins in modals&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-12543&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-13-22.41.20-1-700x364.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;364&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-13-22.41.20-1-700x364.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-13-22.41.20-1-768x399.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-13-22.41.20-1-1024x532.png 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Hertz and a whole bunch of other sites keep their login form in a modal window or a drawer. The problems with this pattern are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Extra steps for the user&lt;/strong&gt; – “1. Click on the menu button, 2. select login, 3. fill out form” rather than visiting a login page (via search, customer support chat, bookmark, password manager, directly, or via the primary navigation) and filling out the form.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not being able to link directly to the login&lt;/strong&gt;, which can be a pain for customer support people (since they have to give a bunch of instructions described above rather than simply providing a link). It also prevents password managers from doing their thing since the modal is hidden. 1Password has an awesome “open and fill” feature allowing you to visit a website and populate the login form with your credentials. This feature doesn’t work with modal login forms.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Don’t hide fields&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;alignnone wp-image-12544 size-medium&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/ooijScreenshot-2019-02-13-14.54.08-700x606.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;606&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/ooijScreenshot-2019-02-13-14.54.08-700x606.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/ooijScreenshot-2019-02-13-14.54.08-768x665.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/ooijScreenshot-2019-02-13-14.54.08-1024x887.png 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Delta’s site hides a required “Last Name” field, which I’d assume is to clean up the UI by introducing a bit of progressive disclosure.   The problem is that field is required, and because it’s hidden &lt;strong&gt;password managers can’t pre-fill the field&lt;/strong&gt;. Users have to exit out of another field in order to expose this surprise extra field to fill. It’s just one additional, unnecessary hoop they have to jump through in order to login.&lt;/p&gt;
&lt;p&gt;MacOS login screen also buries the password field to “clean up” the UI (and I’d also assume to encourage users to login via TouchID), but that cleanliness leads to (in my view) a more confusing experience.&lt;/p&gt;
&lt;h3&gt;Don’t get funky with magic links&lt;/h3&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-12546&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.00.01-700x444.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;444&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.00.01-700x444.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.00.01-768x487.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.00.01-1024x649.png 1024w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I think this may have started with Slack, but I’m seeing other digital products like &lt;a href=&quot;https://www.notion.so&quot;&gt;Notion&lt;/a&gt; (which I love by the way) send users a temporary password to their email in order to login. I can appreciate the cleverness of this pattern as it avoids the rigamarole of users having to remember yet another password and building out all the “Forgot password” flow stuff. But.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;This pattern is incredibly tedious&lt;/strong&gt;. 1. Enter email into login form. 2. Open new tab or switch programs. 3. Open your inbox. 4. Find message from service (if you don’t get distracted by other emails first). 5. Open message. 6. Copy gobbledygook password. 7. Go back to website. 8. Paste in gobbledygook password. 9. Submit login form. Holy shit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This doesn’t work at all with password managers,&lt;/strong&gt; which is incredibly annoying as I want to lean on password managers to, uh, manage my passwords. With the advent of design systems we talk a lot about consistency. But it’s not just about creating consistency within your own ecosystem, it’s about being consistent with the rest of the internet.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It forces users to learn a new convention&lt;/strong&gt; – Users learn patterns (login, checkout, navigation, etc) by experiencing them again and again in many applications over many years. While I’m not saying we shouldn’t ever innovate, it’s important to recognize users come to your product or service with a lifetime of hard-earned knowledge about how to use the internet. When we try to get too clever we force users to learn new conventions which slows them down (at least initially).&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Don’t split login across multiple pages&lt;/h2&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-12551&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/shopify-1-1-700x700.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;700&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/shopify-1-1-700x700.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/shopify-1-1-768x768.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/shopify-1-1.png 960w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-12552&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/shopify-2-700x700.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;700&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/shopify-2-700x700.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/shopify-2-768x768.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/shopify-2.png 960w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-12553&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/shopify-3-700x689.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;689&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/shopify-3-700x689.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/shopify-3-768x756.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/shopify-3.png 996w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Shopify (another service I love) annoyingly splits its login across three separate screens. Again, I can appreciate the intention here: they’re not trying to overload a user with too much info at once. And while I agree with this pattern for certain contexts (like in an e-commerce flow you typically see billing information, shipping method and address, credit card info, etc chunked out into discrete steps), this is overkill for what’s essentially a three-field form.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Adds unnecessary steps to login&lt;/strong&gt; – Again this is a three-field form, but now users have to slog through three screens to log in. This no doubt slows users down.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Doesn’t work with password managers&lt;/strong&gt; – While they sort of work, password managers are only able to fill in the one field on the page.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Do&lt;/h2&gt;
&lt;p&gt;So what should web designers do instead? I think having a boring old predictable login form is just fine. Here’s &lt;a href=&quot;https://www.getharvest.com/&quot;&gt;Harvest&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-12560&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.43.43-700x767.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;767&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.43.43-700x767.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.43.43-768x842.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.43.43-935x1024.png 935w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.43.43.png 982w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And here’s WordPress:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-medium wp-image-12561&quot; src=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.44.04-700x901.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;901&quot; srcset=&quot;http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.44.04-700x901.png 700w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.44.04-768x988.png 768w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.44.04-796x1024.png 796w, http://bradfrost.com/wp-content/uploads/2019/02/Screenshot-2019-02-14-09.44.04.png 802w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Simple, concise, predictable. Works with password managers. Good stuff. Here’s some considerations:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Have a dedicated page for login&lt;/strong&gt; – Customer support people can direct people to a URL (domain.com/login) rather than having to spell out a bunch of instructions on where to find the login form on the page. Password managers can store that login page and with a click of a button open that page and pre-fill the form.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Expose all required fields&lt;/strong&gt; – If you need to enter your last name in order to log in, expose that field!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keep all fields on one page&lt;/strong&gt; – login should be a swift process, not an unnecessary slog through multiple pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don’t get fancy&lt;/strong&gt; – There may be something to the whole magic link thing and other inventive login patterns, but I think it’s important to recognize how users are used to logging in across the internet. Lean into that boring, predictable settled science.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This list isn’t exhaustive and I haven’t touched on things like social login or two-factor authentication, so I’d love to hear more from you about other patterns to be avoided or gotchas to look out for.&lt;/p&gt;
</description>
<pubDate>Fri, 15 Feb 2019 15:02:30 +0000</pubDate>
<dc:creator>octosphere</dc:creator>
<og:title>Don't Get Clever with Login Forms</og:title>
<og:url>http://bradfrost.com/blog/post/dont-get-clever-with-login-forms/</og:url>
<og:type>article</og:type>
<og:description>As time goes on I find myself increasingly annoyed with login forms. As password managers like 1Password (which is what I use) and Chrome's password manager (which I also sorta use) become more popular, it's important for websites to be aware of how users go about logging into their sites. Let's</og:description>
<og:image>http://bradfrost.com/wp-content/uploads/2019/02/ooijScreenshot-2019-02-13-14.54.08.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://bradfrost.com/blog/post/dont-get-clever-with-login-forms/</dc:identifier>
</item>
<item>
<title>Altavista: The rise and fall of the biggest pre-Google search engine</title>
<link>https://digital.com/about/altavista/</link>
<guid isPermaLink="true" >https://digital.com/about/altavista/</guid>
<description>&lt;p&gt;Google is currently the leading search engine by a large margin, but it owes a lot to AltaVista. In the early days of the web, AltaVista broke ground in search technology. It pioneered many techniques that search engines still use today, and was the first tool to index the full text content of web pages.&lt;/p&gt;
&lt;img src=&quot;https://digital.com/wp-content/uploads/6795467691_3d5ba8e7e2_o.png&quot; class=&quot;wp-image-9445 size-full sp-no-webp&quot; alt=&quot;AltaVista header&quot; width=&quot;500&quot; height=&quot;152&quot; srcset=&quot;https://digital.com/wp-content/uploads/6795467691_3d5ba8e7e2_o.png 500w, https://digital.com/wp-content/uploads/6795467691_3d5ba8e7e2_o-300x91.png 300w&quot; sizes=&quot;(max-width: 500px) 100vw, 500px&quot;/&gt;Peter Morville/ Flickr. CC BY 2.0
&lt;p&gt;When AltaVista was in its prime, Google didn’t exist. But Google didn’t take long to dispose of its rival and force it into the arms of Yahoo. The demise of AltaVista is a cautionary tale for any successful online business. Despite being a pioneer, and far more advanced than its competitors, it proved fallible when its users deserted it.&lt;/p&gt;
&lt;h2&gt;The Web Before AltaVista&lt;/h2&gt;
&lt;p&gt;When Tim Berners-Lee first created the web, he compiled a Virtual Library. It was a manual record of all of the websites that users had published. (An archived copy is &lt;a href=&quot;http://vlib.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;still available online&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Various search engines offered lists of the content available online, compiled using user submissions and manual indexing.&lt;/p&gt;
&lt;p&gt;Naturally, manually created directories had a limited lifespan. Once the web began to explode in popularity, there was no way they could cover every site.&lt;/p&gt;
&lt;p&gt;All search engines or directories had a shared problem; they all showed different results. And they couldn’t automatically find new websites, either. &lt;a href=&quot;https://www.w3catalog.com/&quot;&gt;W3Catalog&lt;/a&gt; was the first search engine to automatically harvest website data and format it in a searchable database, but it relied upon other directories for its listings.&lt;/p&gt;
&lt;p&gt;There was a clear opportunity for a new competitor to offer a complete search database, compiled through automated scanning. Ironically, the search engine that eventually filled this position did so almost by accident.&lt;/p&gt;
&lt;h2&gt;Enter AltaVista.Digital.Com&lt;/h2&gt;
&lt;p&gt;AltaVista was officially launched in 1995 by Digital Equipment Corporation, which was known simply as ‘Digital.’ Digital was the original owner of the domain that you’re reading now; www.&lt;a href=&quot;https://digital.com&quot;&gt;digital.com&lt;/a&gt;. That’s why AltaVista’s original URL used a subdomain of it: altavista.digital.com. &lt;a href=&quot;http://thisdayintechhistory.com/12/15/altavista-launches/&quot;&gt;ThisDayInTechHistory has a screenshot of its original homepage design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;AltaVista was not created to take the internet by storm, or tap into a booming commercial opportunity that its developers had spotted. In fact, AltaVista was essentially a test case for one of Digital’s supercomputers, the &lt;a href=&quot;https://en.wikipedia.org/wiki/AlphaServer#Turbolaser_Family&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;AlphaServer 8400 TurboLaser&lt;/a&gt;. With its 64-bit processor, it could search &lt;a href=&quot;http://www.websearchworkshop.co.uk/altavista_history.php&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;very large databases very quickly&lt;/a&gt;. A search engine was an obvious demonstration of its might.&lt;/p&gt;
&lt;img src=&quot;https://digital.com/wp-content/uploads/Alphaserver.gif&quot; class=&quot;wp-image-9446 size-full sp-no-webp&quot; alt=&quot;Alphaserver 8400 specifications&quot; width=&quot;580&quot; height=&quot;467&quot;/&gt;&lt;a href=&quot;http://www-sld.slac.stanford.edu/sldwww/talks/tonyj/collab-96/tsld001.htm&quot;&gt;Tony Johnson, Stanford University&lt;/a&gt;
&lt;p&gt;AltaVista’s name came from the scenic views in Palo Alto, where Digital was based. Louis Monier created the web crawler tool, Scooter. He was a computer scientist at Digital’s Western Research Lab. Scooter completed its first complete web crawl in August 1995, returning around 10 million pages to the primitive AltaVista index. Paul Flaherty is credited with coming up with the idea for AltaVista, while Michael Burrows is credited for writing the indexer itself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.thehistoryofseo.com/The-Industry/Short_History_of_Early_Search_Engines.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;After being tested with Digital’s 10,000 employees&lt;/a&gt;, the AltaVista search engine was rolled out to the general public on December 15th of the same year.&lt;/p&gt;
&lt;h2&gt;The Rise of AltaVista&lt;/h2&gt;
&lt;p&gt;AltaVista quickly became a hit with web users. It indexed around ten times the number of pages that competing search engines could handle.&lt;/p&gt;
&lt;p&gt;Visitors could suddenly access more content than ever before, simply because AltaVista was better at indexing the furthest reaches of the web. And it gave them more control over results, too.&lt;/p&gt;
&lt;p&gt;The launch of AltaVista was a noted event in the media in 1995, largely due to the power of Digital’s AlphaServer hardware. The &lt;a href=&quot;http://www.nytimes.com/1995/12/18/business/digital-equipment-offers-web-browsers-its-super-spider.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;New York Times noted that AltaVista enabled users to carry out “highly targeted searches”&lt;/a&gt;, and referred to AltaVista’s tech as a “super spider.”&lt;/p&gt;
&lt;p&gt;At first, there was some uncertainty around whether AltaVista would continue to be provided free to the general public, or whether users would be asked to pay. But Digital saw AltaVista as a useful demo of its computer hardware capabilities; a marketing tool. AltaVista’s popularity as a search engine was secondary to Digital’s goal of showing what its server could do.&lt;/p&gt;
&lt;img src=&quot;https://digital.com/wp-content/uploads/4307188078_f290aecf49_o.png&quot; class=&quot;wp-image-9447 size-full sp-no-webp&quot; alt=&quot;Altavista in 1998&quot; width=&quot;569&quot; height=&quot;477&quot; srcset=&quot;https://digital.com/wp-content/uploads/4307188078_f290aecf49_o.png 569w, https://digital.com/wp-content/uploads/4307188078_f290aecf49_o-300x251.png 300w&quot; sizes=&quot;(max-width: 569px) 100vw, 569px&quot;/&gt;Brent Payne/ Flickr. CC BY 2.0
&lt;p&gt;However, Digital underestimated just how much users would love AltaVista. On its launch day in 1995, the new search engine saw around 300,000 visitors. One year later in 1996, it was serving 19 million visitors each day. And by 1997, it was attracting 80 million visitors daily. By 1998, it required 20 multi-processor servers to carry out all of the search queries it received.&lt;/p&gt;
&lt;h2&gt;AltaVista Firsts&lt;/h2&gt;
&lt;p&gt;AltaVista’s rocketing popularity was not just because of the quality of its results. It was a groundbreaker in the search engine sector, and it introduced many advanced features that other search engines had not even thought of when they launched:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;AltaVista was the &lt;a href=&quot;http://www.wordstream.com/articles/internet-search-engines-history&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;first search engine to allow users to search for things using natural language&lt;/a&gt;. This meant that typing, for example, “What is a server”, would return search results about servers, not the words “what”, “is”, and “a”.&lt;/li&gt;
&lt;li&gt;It was the first search engine to attempt to &lt;a href=&quot;http://www.irkawebpromotions.com/search-engines/others-list/&quot;&gt;create a complete index of the web&lt;/a&gt; using its own data, rather than a curated directory of listings or partial results compiled from different sources.&lt;/li&gt;
&lt;li&gt;Its crawler, Scooter, was capable of &lt;a href=&quot;http://www.internet-guide.co.uk/Scooter.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;indexing full text pages&lt;/a&gt;, making AltaVista the first searchable full text database of the web.&lt;/li&gt;
&lt;li&gt;It broadened the use of boolean operators in search. Like some competing search engines, it supported &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, and &lt;code&gt;NOT&lt;/code&gt;. But it &lt;a href=&quot;http://www.public.iastate.edu/~hschmidt/srch.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;also supported two additional operators&lt;/a&gt;: &lt;code&gt;NEAR&lt;/code&gt; and &lt;code&gt;( )&lt;/code&gt; (parentheses).&lt;/li&gt;
&lt;li&gt;It allowed searchers to &lt;a href=&quot;http://www.writerswrite.com/journal/may98/effective-use-of-search-engines-5987&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;limit the amount of results that were returned from one domain&lt;/a&gt;. That cut back in noise and duplicate pages in results, which was important in an age where duplicate content on the web was commonplace.&lt;/li&gt;
&lt;li&gt;It was the first to allow &lt;a href=&quot;http://www.optimus01.co.za/about-altavista/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;multi-lingual search&lt;/a&gt;. It launched &lt;a href=&quot;http://www.prnewswire.com/news-releases/altavista-search-provides-first-multilingual-search-capabilities-on-the-internet-76074137.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;mirror sites in Malaysia and Spain in 1997&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It was the first to allow people to search for &lt;a href=&quot;http://www.thehistoryofseo.com/The-Industry/Short_History_of_Early_Search_Engines.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;images, video, and audio&lt;/a&gt; alongside text content.&lt;/li&gt;
&lt;li&gt;It was the first tool that could translate entire websites to (and from) English, Spanish, French, German, Portuguese, Italian, and Russian. It did this using its Babel Fish translator, which would later become part of Yahoo.&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;AltaVista’s Demise&lt;/h2&gt;
&lt;p&gt;AltaVista’s relationship with Yahoo started in 1996, when it began to provide supplementary results for Yahoo’s search portal queries. From this point, AltaVista entered a turbulent phase that eventually resulted in it being acquired by its key rival.&lt;/p&gt;
&lt;p&gt;The first big shift was &lt;a href=&quot;http://news.cnet.com/Compaq-to-buy-Digital-for-9.6-billion/2100-1001_3-207442.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Digital’s sale to Compaq in 1998&lt;/a&gt;. All of Digital’s hardware was rebranded with the Compaq name. Around this time, Compaq also paid &lt;a href=&quot;https://www.cnet.com/news/compaq-buys-altavista-domain/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;somewhere between $2.3 million and $3.3 million&lt;/a&gt; for the domain altavista.com, depending on the source you believe. (The actual figure was a closely guarded secret.)&lt;/p&gt;
&lt;img src=&quot;https://digital.com/wp-content/uploads/18598795371_e0e89a85e9_k-1024x576.jpg&quot; class=&quot;wp-image-9448 size-large sp-no-webp&quot; alt=&quot;AltaVista in the 90s&quot; width=&quot;1024&quot; height=&quot;576&quot; srcset=&quot;https://digital.com/wp-content/uploads/18598795371_e0e89a85e9_k-1024x576.jpg 1024w, https://digital.com/wp-content/uploads/18598795371_e0e89a85e9_k-300x169.jpg 300w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;Christiaan Colen/ Flickr. CC BY 2.0
&lt;p&gt;Compaq’s Internet Services division decided that it would try beat Yahoo at its own game by &lt;a href=&quot;https://www.cnet.com/uk/news/compaq-banks-on-altavista/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;diversifying its features&lt;/a&gt;. It turned AltaVista into a more complex web portal, doing away with the simple search form that users had enjoyed before, and replacing it with an increasingly cluttered &lt;a href=&quot;https://digital.com/&quot;&gt;homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This move away from AltaVista’s streamlined search experience made AltaVista more similar to its competitors. Users gradually began to switch to a newcomer, Google, for the simple search they missed.&lt;/p&gt;
&lt;p&gt;In 1999, 83% of AltaVista was purchased by CMGI, owners of the Lycos search engine. It was valued at around $2.3 billion, and an IPO was on the cards. But by 2001, &lt;a href=&quot;https://www.cnet.com/news/altavista-cancels-proposed-ipo/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;its IPO was canceled&lt;/a&gt; and staff were laid off as CMGI reportedly struggled to make AltaVista profitable.&lt;/p&gt;
&lt;p&gt;Around this time, Google &lt;a href=&quot;http://searchengineland.com/altavista-eulogy-165366&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;surpassed AltaVista’s popularity&lt;/a&gt; with users, processing more search queries than its rival for the first time. AltaVista began to backtrack on its portal layout experiment and return to a simple search form, but the damage was already done.&lt;/p&gt;
&lt;p&gt;The ailing AltaVista brand was acquired again in February 2003 for just $140 million by Overture. Then, Yahoo acquired Overture four months later, which marked the beginning of the end for the AltaVista name. All of the search technology that had been built up under the AltaVista brand was absorbed into Yahoo search in 2011, just as its search results had been co-opted by Yahoo 15 years earlier.&lt;/p&gt;
&lt;p&gt;Yahoo closed AltaVista quietly in 2013.&lt;/p&gt;
&lt;h2&gt;The Legacy of Altavista&lt;/h2&gt;
&lt;p&gt;AltaVista arguably never had a fair shot at reaching its full potential. It was an &lt;a href=&quot;http://searchengineland.com/altavista-eulogy-165366&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;accidental success story&lt;/a&gt; for Digital, which saw it as a marketing tool rather than a useful service in its own right. With hindsight, it’s easy to see how popular web search would become. But AltaVista was the victim of poor strategic direction at the height of its success.&lt;/p&gt;
&lt;p&gt;By the time AltaVista was considered a serious search tool, its focus was changed to a portal, and users didn’t like it. And while acquisitions and financial struggles had been playing out for AltaVista, Google started to gain ground.&lt;/p&gt;
&lt;p&gt;Additionally, Google foresaw a problem with spam and low quality search results. Its 1996 search engine &lt;a href=&quot;https://graphics.stanford.edu/~dk/google_name_origin.html&quot;&gt;BackRub&lt;/a&gt; was based on a primitive version of PageRank. This approach gave it an important advantage as spam on the web increased.&lt;/p&gt;
&lt;p&gt;Many experts believe that Yahoo was rather hasty in its decision to close AltaVista without fanfare. It was criticized for having a similar attitude towards GeoCities, too. But by the time AltaVista was closed in 2013, the internet community had moved on; the people that mourned its demise almost certainly didn’t use it for search any longer.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;AltaVista was considered a dinosaur of the web by the time Yahoo closed it down. But it was hugely important in changing users’ expectations of search. And while lacked the right strategic direction to give it an edge over Google, it paved the way for modern search engines and proved that it was possible for one single website to index (almost) the entire web.&lt;/p&gt;

&lt;span id=&quot;tho-end-content&quot;/&gt;


</description>
<pubDate>Fri, 15 Feb 2019 14:01:57 +0000</pubDate>
<dc:creator>cromat3</dc:creator>
<og:type>article</og:type>
<og:title>Altavista: The Rise &amp; Fall of The Biggest Pre-Google Search Engine - Digital.com</og:title>
<og:description>AltaVista was the first search engine to index the entire web. Learn how AltaVista changed the way we search forever, and how it met its end.</og:description>
<og:url>https://digital.com/about/altavista/</og:url>
<og:image>https://digital.com/wp-content/uploads/6795467691_3d5ba8e7e2_o.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://digital.com/about/altavista/</dc:identifier>
</item>
<item>
<title>My Chromecast Ultra would not start until I began answering 8.8.8.8</title>
<link>https://mailarchive.ietf.org/arch/msg/dnsop/WCVv57IizUSjNb2RQNP84fBclI0</link>
<guid isPermaLink="true" >https://mailarchive.ietf.org/arch/msg/dnsop/WCVv57IizUSjNb2RQNP84fBclI0</guid>
<description>&lt;h3&gt;[DNSOP] my chromecast ultra would not start until i began answering 8.8.8.8&lt;/h3&gt;


&lt;div class=&quot;msg-payload&quot; readability=&quot;26&quot;&gt;
&lt;pre class=&quot;wordwrap&quot;&gt;
google, this is bogus as hell. my dhcp server gives you dns servers to 
use. please don't make me route and answer 8.8.8.8 just to watch youtube.

&amp;gt; [71] 2019-02-13 16:39:40.548137 [#68 vtnet0 4095] \
&amp;gt;         [24.104.150.186].56915 [8.8.8.8].53  \
&amp;gt;         dns QUERY,NOERROR,7357,rd \
&amp;gt;         1 lh3.googleusercontent.com,IN,A 0 0 0
&amp;gt; [71] 2019-02-13 16:39:40.548210 [#69 vtnet0 4095] \
&amp;gt;         [24.104.150.186].56915 [8.8.8.8].53  \
&amp;gt;         dns QUERY,NOERROR,49247,rd \
&amp;gt;         1 lh3.googleusercontent.com,IN,AAAA 0 0 0

(no, this device i've paid for, will NOT be allowed to send you any 
information, other than what i personally approve, which will never 
include DNS traffic. if you don't like that deal, buy it back from me 
and i'll find some other video appliance that doesn't twist my arm.)

-- 
P Vixie

&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 15 Feb 2019 13:23:06 +0000</pubDate>
<dc:creator>baptou12</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://mailarchive.ietf.org/arch/msg/dnsop/WCVv57IizUSjNb2RQNP84fBclI0</dc:identifier>
</item>
<item>
<title>The Lonely Life of a Yacht Influencer</title>
<link>https://melmagazine.com/en-us/story/the-lonely-life-of-a-yacht-influencer</link>
<guid isPermaLink="true" >https://melmagazine.com/en-us/story/the-lonely-life-of-a-yacht-influencer</guid>
<description>&lt;p&gt;&lt;span&gt;While chasing a 2017&lt;/span&gt; &lt;a href=&quot;https://www.instagram.com/p/BszVs4ABzVD/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;story about medical tourism and Slovakian stem cells&lt;/span&gt;&lt;/a&gt; &lt;span&gt;that had already taken me to hospital facilities in&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Bratislava&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;Bratislava&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and Vienna, I wound up partying on a 283-foot yacht floating in the French Riviera. As I watched intoxicated rich people having expensive fun in their cheap white shower slippers — first rule of yacht club is there are no shoes on the yacht, which are instead piled in a big heap at the yacht’s entrance — I began to wonder, “How could anyone spend their whole life doing this?”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Then, almost on cue, seated at a table on the&lt;/span&gt; &lt;a href=&quot;https://www.instagram.com/p/BUU1Kj0D2UZ/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;rear deck with Lindsay Lohan&lt;/span&gt;&lt;/a&gt; &lt;span&gt;and her entourage, I spotted a dude who had, in fact, spent his entire life doing this.&lt;/span&gt; &lt;a href=&quot;https://www.instagram.com/theyachtguy/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;Alex Jimenez&lt;/span&gt;&lt;/a&gt; &lt;span&gt;was a professional yacht influencer, and he was hard at work.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/BpT3Yu4Bo2Z/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot;&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;I didn’t know that at the time, of course. I just saw an open chair next to&lt;/span&gt; &lt;a href=&quot;https://www.instagram.com/p/Bp2L2ZhBt8g/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;a lanky guy&lt;/span&gt;&lt;/a&gt; &lt;span&gt;wearing a loose polo shirt and a flat-brimmed Yankees hat, and sat down in it. As everyone else gradually made their way toward the raucous festivities taking place on the foredeck, Jimenez struck up a conversation with me. He remarked that I seemed both thoughtful and decidedly out of place.&lt;/span&gt;&lt;/p&gt;
&lt;img class=&quot;wp-image-33809 size-full&quot; src=&quot;https://melmagazine.com/wp-content/uploads/2019/02/image1-1.jpg&quot; alt=&quot;&quot; width=&quot;960&quot; height=&quot;720&quot; srcset=&quot;https://melmagazine.com/wp-content/uploads/2019/02/image1-1.jpg 960w, https://melmagazine.com/wp-content/uploads/2019/02/image1-1-300x225.jpg 300w, https://melmagazine.com/wp-content/uploads/2019/02/image1-1-768x576.jpg 768w, https://melmagazine.com/wp-content/uploads/2019/02/image1-1-640x480.jpg 640w&quot; sizes=&quot;(max-width: 960px) 100vw, 960px&quot;/&gt;Aboard the Yacht Chakra, 2017 (author in light blue)
&lt;p&gt;&lt;span&gt;“I’m working,” I said. “I never stop working. All I can think about is work.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Hey, me too,” he replied. “I’m working right now.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I used to feel all messed up about my career,” he continued. “I was a short-haul truck driver in the Bronx, and I guess I caught the yacht bug. I’d go to a bookstore, grab a table and read everything I could about yachts. Then, on the very first weekend after I downloaded the Instagram app, right after Instagram became a thing you could download, I went to a luxury boat show and took some of pictures of the yachts. I added some hashtags, and pretty soon I had 800,000 followers. But the quantity doesn’t really matter to the folks who pay me, it’s the quality. Influential people follow me,&lt;/span&gt; &lt;a href=&quot;https://yachtharbour.com/news/how-russian-oligarchs-shaped-the-yachting-industry-825&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;Gulf state princes and Russian moguls&lt;/span&gt;&lt;/a&gt; &lt;span&gt;who might actually be able to buy these yachts.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Wait, what?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;When Jimenez said that he was working, I assumed he was “working” the same way Lindsay Lohan was — that is, “working the crowd.” He looked important enough, wearing an expensive, custom-made watch with all of the wheels, ratchets and levers exposed.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Nah, I’m nobody you’d know,” he assured me. “I’m here to take some pictures and post some video stories of the yacht, which a brokerage group is trying to sell. The watch is a loaner from a friend. I wear it, take a picture of my wrist and tag his company on my Instagram account. It’s just a small part of the hustle.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The yacht hustle, I soon learned, was the all-consuming passion of Jimenez’s life. He went from a guy who took Instagram pictures, always head-on yacht shots run through one of the generic filters, to a guy that yacht brokers paid to stay on their yachts in order to mention that said yachts were docked in a port and available for sale or charter. He was helicoptered from yacht to yacht, and slept in the smallest guest cabins.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/BngtXxPBT2N/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot;&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;“The&lt;/span&gt; &lt;a href=&quot;https://www.yachtcharterfleet.com/yacht-reviews/chakra-61.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;yacht we’re on right now&lt;/span&gt;&lt;/a&gt; &lt;span&gt;used to be a cruise ship that they retrofitted,” he told me. “You can sleep a dozen or more people on here, and the decks can fit a bunch more, but it’s all kind of crowded.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I mentioned that the bathrooms were both tiny, and with a hundred or so people aboard the yacht, already rather foul.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Yeah, that’s just how it goes,” he said. “It’s an endless party, especially on the yachts that are 200 feet and up, the so-called ‘superyachts.’ Conditions are cramped, everyone’s out of their mind on some substance, and the bathrooms are being used for who knows what. There’s a kitchen and a big dining area, but good luck getting food out of there when you really want it. You’re not on here to eat a sit-down meal, even though they usually have nice dining rooms. The bars on each level are the focal points of these things.”&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/BpPZG0IBGgW/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot;&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;We took a walk around the yacht while people boozed and bumped into each other, their words slurring together and distorted further by the deep bass thump of the music playing from the upper and lower decks. Jimenez’s own cabin was indeed tiny, very nearly a capsule hotel. He showed me the heavy-duty metal suitcase where he secured his borrowed valuables, a collection of watches on loan from various business acquaintances.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“The watches are heavy on the wrist,” he said. “They’re great to look at, but their bands often cut into the wrist. And yeah, the room is small, but with my nocturnal schedule, it’s not like I sleep very much. I take maybe one picture a day and post a few Instagram stories, but I’m expected to be up on the deck, mingling with partygoers and selling the mystique of the yacht.”&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/BkWSJKLDlAy/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot;&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;Jimenez leveled with me — once upon a time, he had been excited by the idea of partying on a yacht. After all, who wouldn’t be? But now he was basically just a working stiff. He too had a home and a family, with kids he didn’t see as much as he could because his “feet were never on dry land.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;He had considerable yacht expertise and knew all the major players in the yacht world, buyers and sellers and their glorious boats. He had been on the 100-foot yachts and the 500-foot yachts, and seen yacht-related activities he assured me exceeded any fantasies, dark or light, that I could ever imagine. Yet all that meant he was now just another yacht worker, someone who punched the clock — or the pearl-faced wristwatch, in his case — the same as the kitchen staff, the bartenders and the yacht’s crew.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-captioned=&quot;&quot; data-instgrm-permalink=&quot;https://www.instagram.com/p/BUU1Kj0D2UZ/?utm_source=ig_embed&amp;amp;utm_medium=loading&quot; data-instgrm-version=&quot;12&quot;&gt;

&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;“You’ve seen the crew,” he told me. “It’s about 30 people on this yacht, and they’re Greek and serious as a heart attack. Nine times out of ten, the crews on these yachts are either Greek or Russian. The rich people that staff these yachts talk at length about whether it’s better to go with one or the other. They can make pretty decent money, and on a 500-footer with a 60 or 70 person crew, you’re probably talking $5,000 or $6,000 a month plus room and board.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;After years of yacht influence, the true appeal of high-class maritime life had become clear to Jimenez. “You have to be really rich to own one of these,” he said. “I mean, you have to be so rich to own a yacht that’s 300 feet or more. You can’t be rich like LeBron James, because that’s nothing. You can’t be rich like Tiger Woods or Johnny Depp. They’re not rich in super-yacht terms. We’re talking 10 percent or more of the purchase cost of the yacht paid out in upkeep every month. The brokerages and buying groups can swing it because there’s a bunch of investors, and because they charter the yachts to offset costs.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“But for the guy who owns the&lt;/span&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Eclipse_(yacht)&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;em&gt;&lt;span&gt;Eclipse&lt;/span&gt;&lt;/em&gt;&lt;/a&gt; &lt;span&gt;[&lt;/span&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Roman_Abramovich&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;Roman Abramovich&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, a Russian oligarch], that’s not the point. He’s not chartering that thing out. It has a submarine and a missile detection system. See, the power of owning a magnificent yacht like that is in how you’re telling the world that you’re beyond buying and selling. You have more money than there is money to have. You’ve transcended. There are no frontiers left for you on dry land. I mean,&lt;/span&gt; &lt;a href=&quot;https://gamepedia.cursecdn.com/dota2_gamepedia/c/ca/Kunk_respawn_08.mp3&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;true peace is only at sea&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.”&lt;/span&gt;&lt;/p&gt;
&lt;iframe width=&quot;568&quot; height=&quot;320&quot; src=&quot;https://www.youtube.com/embed/bK8EO07naT8?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;&lt;span&gt;Jimenez, a poor Puerto Rican kid, grew up hustling. He worked 50- and 60-hour shifts at whatever job he had; he considered overtime to be a necessary part of his base pay and counts himself among those annoying grinders who dismiss 40 hours of work per week as a “&lt;/span&gt;&lt;a href=&quot;https://pics.me.me/you-have-a-40-hour-work-week-remember-my-first-4032463.png&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;part-time job&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.” He now made a “comfortable middle-class living,” but sitting there with me in the cabin, fretted that it could go away at any time. “This is me working a little network I’ve built using someone else’s social media platform,” he said. “If Instagram changes its algorithm slightly, there goes a bit of my business. If Instagram disconnects some of the tools I use to build and monitor my account, there goes a bit of my business. And if Instagram goes away and is replaced by something newer and better, I need to get there first, just like I did with this account. If I don’t, I’m done. I’m totally dependent on a platform that’s completely out-of-control.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;For Jimenez, Instagram is essentially a money tree that must be fertilized and harvested as much as possible before its popularity wanes. As another side hustle, he “plants” subsidiary yacht accounts, accounts with soundalike names and images, and uses cross-promotion from his primary account to grow them until they’re large enough to sell to yacht brokers or manufacturers. “I build them up and then sell them off, and my client gets a ready-made account that has real followers and legitimate engagement,” he told me. “I started focusing on that when I realized that this wasn’t just a ‘life of the party’ job, that pushing social media is something you do all day and all night long.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I fire off these posts while I’m sitting around on the yacht, when things are very slow. I’m not in this for the fun of it, I’m not posting silly stuff. I basically do sponsored advertisements that follow a set format. I watch Instagram like a hawk to see if anything is hampering the growth of these other accounts, and to see if I’m continuing to get the activity I need on my primary posts.”&lt;/span&gt;&lt;/p&gt;
&lt;iframe width=&quot;568&quot; height=&quot;320&quot; src=&quot;https://www.youtube.com/embed/yfE02NGAxcs?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;
&lt;p&gt;&lt;span&gt;After surveying his cabin, Jimenez and I walked to the side deck and slouched over the railing. The sun had set, and we studied&lt;/span&gt; &lt;a href=&quot;https://media.gettyimages.com/photos/cannes-at-night-picture-id184611729?b=1&amp;amp;k=6&amp;amp;m=184611729&amp;amp;s=612x612&amp;amp;w=0&amp;amp;h=hP1UL8lWOvRcl2-DtYR4zywt6SizGZtv5I-Sw_mrKQ4=&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot;&gt;&lt;span&gt;the well-lit coastline of Cannes&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. “If you could have anything at all, anything in the world, what would you want?” he asked me.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“I guess I’d want to keep writing and keep getting paid for it,” I responded.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“Well, I want to own a yacht,” Jimenez said. “I used to just want to be on yachts, because I thought the parties were cool and the technology was awesome, but now that I’ve spent a good portion of my life partying on them, I actually want to own a yacht. Owning a yacht, really owning it in full and being able to pay for its upkeep, means that you’ve somehow freed yourself from work and want. If you own the yacht that way, you’re a free man. The hustle and grind are things of the past.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;I asked him if he had plans to leave the yacht while we were in the French Riviera.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“No, I’m going to hang back here, because I’m scheduled to be on another one of these yachts tomorrow,” he said. “I know pretty much every boat in this harbor — owners, captains, specifications. People say, ‘Alex, you’re on yachts all day — that’s the life.’ Well, for me, it’s not&lt;/span&gt; &lt;em&gt;&lt;span&gt;the&lt;/span&gt;&lt;/em&gt; &lt;span&gt;life, it’s&lt;/span&gt; &lt;em&gt;&lt;span&gt;my&lt;/span&gt;&lt;/em&gt; &lt;span&gt;life. It’s not some permanent summer or year-long vacation. It’s my living. I help rich people and rich companies advertise their yachts. I’ve got all this knowledge that I gained when I loved yachts so much that I’d spend all weekend studying them for free, and now, I sell my knowledge to people. I sell that know-how all day long, and everything I know is worth something. I’m always on the clock, always tracking my time on these expensive wristwatches with the big clock faces. And so, I’m sure to never set foot on dry land when I’m working.”&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;post-authors&quot;&gt;
&lt;hr/&gt;&lt;div class=&quot;contributor-item -wide&quot;&gt;
&lt;div class=&quot;contributor-image&quot;&gt;&lt;a href=&quot;https://melmagazine.com/en-us/story/author/oliver-lee-bateman&quot;&gt;&lt;img src=&quot;https://melmagazine.com/wp-content/uploads/2018/08/IMG_8289-80x80.jpg&quot; width=&quot;80&quot; height=&quot;80&quot; alt=&quot;IMG_8289&quot; title=&quot;IMG_8289&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;contributor-info&quot;&gt;
&lt;h3&gt;&lt;a href=&quot;https://melmagazine.com/en-us/story/author/oliver-lee-bateman&quot;&gt;Oliver Lee Bateman&lt;/a&gt;&lt;/h3&gt;
&lt;p class=&quot;contributor-bio&quot;&gt;Oliver Bateman is a contributing writer to MEL Magazine. He writes about the extreme sides of fitness, the weirder sides of MMA and pro wrestling, and the unorthodox lifestyles of professional athletes. His writing on these topics has appeared in publications such as the Paris Review, the Atlantic, and the New Republic. Ever since he was a little kid, he's been really good at exercising.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 15 Feb 2019 10:49:54 +0000</pubDate>
<dc:creator>microtherion</dc:creator>
<og:type>article</og:type>
<og:title>The Lonely Life of a Yacht Influencer - MEL Magazine</og:title>
<og:description>While chasing a 2017 story about medical tourism and Slovakian stem cells that had already taken me to hospital facilities in Bratislava and Vienna, I...</og:description>
<og:url>https://melmagazine.com/en-us/story/the-lonely-life-of-a-yacht-influencer</og:url>
<og:image>https://melmagazine.com/wp-content/uploads/2019/02/yachtguy.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://melmagazine.com/en-us/story/the-lonely-life-of-a-yacht-influencer</dc:identifier>
</item>
<item>
<title>Chrome will Soon Let You Share Links to a Specific Word or Sentence on a Page</title>
<link>https://www.chromestory.com/2019/02/chrome-scroll-to-text/</link>
<guid isPermaLink="true" >https://www.chromestory.com/2019/02/chrome-scroll-to-text/</guid>
<description>&lt;p&gt;Here is a really innovative and interesting Chrome feature that’s getting ready. I cannot explain this new feature in just one sentence, so stay with me.&lt;/p&gt;

&lt;p&gt;When you share a YouTube video, you now have an option to create a link that will start the video at a specific spot. For example, if you want your friend start playing the video at two minutes mark, you can create a link for that specific spot.&lt;/p&gt;
&lt;p&gt;Now, imagine you are sharing a link to a web page. There is one specific sentence or paragraph that you want your friend to read. The page does not have any anchor links.&lt;/p&gt;
&lt;p&gt;What will you do?&lt;/p&gt;
&lt;p&gt;Highlight in a screenshot? Ask him to do a Ctrl + F on the page for a specific word or phrase? Well, what if they are on mobile? It is difficult to even dot he Ctrl + F thing there!&lt;/p&gt;
&lt;h2&gt;Enter Scroll to Text&lt;/h2&gt;
&lt;p&gt;Scroll to Text is a new Chrome feature that will let you create a link targeting a word or phrase on a page.&lt;/p&gt;
&lt;p&gt;Here is the flag description, explaining this feature:&lt;/p&gt;
&lt;p&gt;“Enables scrolling to text specified in URL’s fragment.” The flag is named “Enable Text Fragment Anchor”&lt;/p&gt;
&lt;p&gt;You can see the &lt;a href=&quot;https://chromium-review.googlesource.com/c/chromium/src/+/1470735&quot;&gt;code commit here&lt;/a&gt;. But wait. I have plenty more to show you! Looks like this is a small project available on GitHub and is being ported to Chrome. The &lt;a href=&quot;https://github.com/bokand/ScrollToTextFragment&quot;&gt;GitHub page&lt;/a&gt; is well documented and explains this feature in great detail.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;When referencing a specific section of a web page, for example as part of sharing that content via email or on social media, it is desirable to be able to link directly to the specific section. If a section is not linkable by a named anchor or element with id, it is not currently possible to share a link directly to a specific section. Users may work around this by sharing screenshots of the relevant portion of the document (preventing the recipient of the content from engaging with the actual web page that hosts the content), or by including extra instructions to scroll to a specific part of the document (e.g. “skip to the sixth paragraph”). We would like to enable users to link to the relevant section of a document directly. Linking directly to the relevant section of a document preserves attribution, and allows the user following the URL to engage directly with the original publisher.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I highly recommend reading the whole introduction on GitHub. It is a well-written document.&lt;/p&gt;
&lt;p&gt;This feature is being added as a flag to Chrome. It might take a week or so to show up in the Canary channel. I am hoping to get you a video demo of this feature pretty soon. (&lt;a href=&quot;https://www.youtube.com/user/chromestory&quot;&gt;Subscribe to my channel here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.chromestory.com/wp-content/uploads/2019/02/chrome-scroll-to-text-1024x986.png&quot; alt=&quot;&quot; class=&quot;wp-image-25798&quot; srcset=&quot;https://www.chromestory.com/wp-content/uploads/2019/02/chrome-scroll-to-text-1024x986.png 1024w, https://www.chromestory.com/wp-content/uploads/2019/02/chrome-scroll-to-text-350x337.png 350w, https://www.chromestory.com/wp-content/uploads/2019/02/chrome-scroll-to-text-768x739.png 768w, https://www.chromestory.com/wp-content/uploads/2019/02/chrome-scroll-to-text.png 1498w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/p&gt;

&lt;h2&gt;Here is How This will Work&lt;/h2&gt;
&lt;p&gt;Borrowing from the Github document:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;We propose encoding a text snippet in the URL fragment, prefixed with the &lt;code&gt;targetText=&lt;/code&gt; string. Since text can contain characters invalid in a URL (e.g. spaces), the text must be percent encoded. For example, &lt;code&gt;#targetText=My%20Heading&lt;/code&gt; would cause the first occurance of “My Heading” on the page to be selected as the indicated part of the document.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.example.com/&quot; class=&quot;&quot;&gt;www.example.com&lt;/a&gt;#targetText=alpha%20beta,psi%20omega Will scroll and highlight a block of text starting with “alpha beta” and ending with “psi omega”&lt;/p&gt;
&lt;h2&gt;Beyond Chrome&lt;/h2&gt;
&lt;p&gt;Here is what I think. Let me know your opinion too, in comments. I would say this is not going to be a Chrome-only feature. It is most likely that this will be added to other browsers like Firefox too.&lt;/p&gt;
&lt;p&gt;Microsoft’s &lt;a href=&quot;https://www.chromestory.com/2015/04/microsofts-edge-browser-will-run-chrome-and-firefox-extensions/&quot;&gt;new version of Edge is going to be based on Chromium&lt;/a&gt;, so this will be available on Edge too.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;h2&gt;Latest Video from Chrome Story&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;embed-youtube&quot;&gt;&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/GVN-WJw7x5U?version=3&amp;amp;rel=1&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
&lt;h3 class=&quot;jp-relatedposts-headline&quot;&gt;&lt;em&gt;Related&lt;/em&gt;&lt;/h3&gt;
&lt;/p&gt;
</description>
<pubDate>Fri, 15 Feb 2019 04:22:11 +0000</pubDate>
<dc:creator>kumaranvpl</dc:creator>
<og:type>article</og:type>
<og:title>Chrome will Soon Let You Share Link to Specific Word or Sentence on a Page - Chrome Story</og:title>
<og:description>Here is a really innovative and interesting Chrome feature that’s getting ready. I cannot explain this new feature in just one sentence, so stay with me. When you share a YouTube video, you now have an option to create a link that will start the video at a specific spot. For example, if you want …</og:description>
<og:url>https://www.chromestory.com/2019/02/chrome-scroll-to-text/</og:url>
<og:image>https://www.chromestory.com/wp-content/uploads/2019/02/chrome-scroll-to-text.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.chromestory.com/2019/02/chrome-scroll-to-text/</dc:identifier>
</item>
<item>
<title>Sample cloud-native application with microservices</title>
<link>https://github.com/GoogleCloudPlatform/microservices-demo</link>
<guid isPermaLink="true" >https://github.com/GoogleCloudPlatform/microservices-demo</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;This project contains a 10-tier microservices application. The application is a web-based e-commerce app called &lt;strong&gt;“Hipster Shop”&lt;/strong&gt; where users can browse items, add them to the cart, and purchase them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Google uses this application to demonstrate use of technologies like Kubernetes/GKE, Istio, Stackdriver, gRPC and OpenCensus&lt;/strong&gt;. This application works on any Kubernetes cluster (such as a local one), as well as Google Kubernetes Engine. It’s &lt;strong&gt;easy to deploy with little to no configuration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you’re using this demo, please &lt;strong&gt;★Star&lt;/strong&gt; this repository to show your interest!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;👓&lt;strong&gt;Note to Googlers:&lt;/strong&gt; Please fill out the form at &lt;a href=&quot;http://go/microservices-demo&quot; rel=&quot;nofollow&quot;&gt;go/microservices-demo&lt;/a&gt; if you are using this application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Home Page&lt;/th&gt;
&lt;th&gt;Checkout Screen&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/docs/img/hipster-shop-frontend-1.png&quot;&gt;&lt;img src=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/raw/master/docs/img/hipster-shop-frontend-1.png&quot; alt=&quot;Screenshot of store homepage&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/docs/img/hipster-shop-frontend-2.png&quot;&gt;&lt;img src=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/raw/master/docs/img/hipster-shop-frontend-2.png&quot; alt=&quot;Screenshot of checkout screen&quot;/&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Service Architecture&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hipster Shop&lt;/strong&gt; is composed of many microservices written in different languages that talk to each other over gRPC.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/docs/img/architecture-diagram.png&quot;&gt;&lt;img src=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/raw/master/docs/img/architecture-diagram.png&quot; alt=&quot;Architecture of microservices&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Find &lt;strong&gt;Protocol Buffers Descriptions&lt;/strong&gt; at the &lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/pb&quot;&gt;&lt;code&gt;./pb&lt;/code&gt; directory&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Service&lt;/th&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/frontend&quot;&gt;frontend&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;Exposes an HTTP server to serve the website. Does not require signup/login and generates session IDs for all users automatically.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/cartservice&quot;&gt;cartservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;Stores the items in the user's shipping cart in Redis and retrieves it.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/productcatalogservice&quot;&gt;productcatalogservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;Provides the list of products from a JSON file and ability to search products and get individual products.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/currencyservice&quot;&gt;currencyservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;Converts one money amount to another currency. Uses real values fetched from European Central Bank. It's the highest QPS service.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/paymentservice&quot;&gt;paymentservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;Charges the given credit card info (mock) with the given amount and returns a transaction ID.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/shippingservice&quot;&gt;shippingservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;Gives shipping cost estimates based on the shopping cart. Ships items to the given address (mock)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/emailservice&quot;&gt;emailservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Sends users an order confirmation email (mock).&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/checkoutservice&quot;&gt;checkoutservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;Retrieves user cart, prepares order and orchestrates the payment, shipping and the email notification.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/recommendationservice&quot;&gt;recommendationservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Recommends other products based on what's given in the cart.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/adservice&quot;&gt;adservice&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;Provides text ads based on given context words.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/src/loadgenerator&quot;&gt;loadgenerator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Python/Locust&lt;/td&gt;
&lt;td&gt;Continuously sends requests imitating realistic user shopping flows to the frontend.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://kubernetes.io&quot; rel=&quot;nofollow&quot;&gt;Kubernetes&lt;/a&gt;/&lt;a href=&quot;https://cloud.google.com/kubernetes-engine/&quot; rel=&quot;nofollow&quot;&gt;GKE&lt;/a&gt;:&lt;/strong&gt; The app is designed to run on Kubernetes (both locally on &quot;Docker for Desktop&quot;, as well as on the cloud with GKE).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://grpc.io&quot; rel=&quot;nofollow&quot;&gt;gRPC&lt;/a&gt;:&lt;/strong&gt; Microservices use a high volume of gRPC calls to communicate to each other.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://istio.io&quot; rel=&quot;nofollow&quot;&gt;Istio&lt;/a&gt;:&lt;/strong&gt; Application works on Istio service mesh.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://opencensus.io/&quot; rel=&quot;nofollow&quot;&gt;OpenCensus&lt;/a&gt; Tracing:&lt;/strong&gt; Most services are instrumented using OpenCensus trace interceptors for gRPC/HTTP.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://cloud.google.com/stackdriver/&quot; rel=&quot;nofollow&quot;&gt;Stackdriver APM&lt;/a&gt;:&lt;/strong&gt; Many services are instrumented with &lt;strong&gt;Profiling&lt;/strong&gt;, &lt;strong&gt;Tracing&lt;/strong&gt; and &lt;strong&gt;Debugging&lt;/strong&gt;. In addition to these, using Istio enables features like Request/Response &lt;strong&gt;Metrics&lt;/strong&gt; and &lt;strong&gt;Context Graph&lt;/strong&gt; out of the box. When it is running out of Google Cloud, this code path remains inactive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold&quot;&gt;Skaffold&lt;/a&gt;:&lt;/strong&gt; Application is deployed to Kubernetes with a single command using Skaffold.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Synthetic Load Generation:&lt;/strong&gt; The application demo comes with a background job that creates realistic usage patterns on the website using &lt;a href=&quot;https://locust.io/&quot; rel=&quot;nofollow&quot;&gt;Locust&lt;/a&gt; load generator.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Installation&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; that the first build can take up to 20-30 minutes. Consequent builds will be faster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Option 1: Running locally with “Docker for Desktop”&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Recommended if you're planning to develop the application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Install tools to run a Kubernetes cluster locally:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;kubectl (can be installed via &lt;code&gt;gcloud components install kubectl&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Docker for Desktop (Mac/Windows): It provides Kubernetes support as &lt;a href=&quot;https://docs.docker.com/docker-for-mac/kubernetes/&quot; rel=&quot;nofollow&quot;&gt;noted here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold/#installation&quot;&gt;skaffold&lt;/a&gt; (ensure version ≥v0.20)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launch “Docker for Desktop”. Go to Preferences:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;choose “Enable Kubernetes”,&lt;/li&gt;
&lt;li&gt;set CPUs to at least 3, and Memory to at least 6.0 GiB&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;kubectl get nodes&lt;/code&gt; to verify you're connected to “Kubernetes on Docker”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;skaffold run&lt;/code&gt; (first time will be slow, it can take ~20-30 minutes). This will build and deploy the application. If you need to rebuild the images automatically as you refactor the code, run &lt;code&gt;skaffold dev&lt;/code&gt; command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;kubectl get pods&lt;/code&gt; to verify the Pods are ready and running. The application frontend should be available at &lt;a href=&quot;http://localhost:80&quot; rel=&quot;nofollow&quot;&gt;http://localhost:80&lt;/a&gt; on your machine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Option 2: Running on Google Kubernetes Engine (GKE)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Recommended for demos and making it available publicly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Install tools specified in the previous section (Docker, kubectl, skaffold)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Google Kubernetes Engine cluster and make sure &lt;code&gt;kubectl&lt;/code&gt; is pointing to the cluster.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; gcloud services enable container.googleapis.com

 gcloud container clusters create demo --enable-autoupgrade \
     --enable-autoscaling --min-nodes=3 --max-nodes=10 --num-nodes=5 --zone=us-central1-a

 kubectl get nodes
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable Google Container Registry (GCR) on your GCP project and configure the &lt;code&gt;docker&lt;/code&gt; CLI to authenticate to GCR:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;gcloud services enable containerregistry.googleapis.com

gcloud auth configure-docker -q
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the root of this repository, run &lt;code&gt;skaffold run --default-repo=gcr.io/[PROJECT_ID]&lt;/code&gt;, where [PROJECT_ID] is your GCP project ID.&lt;/p&gt;
&lt;p&gt;This command:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;builds the container images&lt;/li&gt;
&lt;li&gt;pushes them to GCR&lt;/li&gt;
&lt;li&gt;applies the &lt;code&gt;./kubernetes-manifests&lt;/code&gt; deploying the application to Kubernetes.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Troubleshooting:&lt;/strong&gt; If you get &quot;No space left on device&quot; error on Google Cloud Shell, you can build the images on Google Cloud Build: &lt;a href=&quot;https://console.cloud.google.com/flows/enableapi?apiid=cloudbuild.googleapis.com&quot; rel=&quot;nofollow&quot;&gt;Enable the Cloud Build API&lt;/a&gt;, then run &lt;code&gt;skaffold run -p gcb --default-repo=gcr.io/[PROJECT_ID]&lt;/code&gt; instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the IP address of your application, then visit the application on your browser to confirm installation.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl get service frontend-external
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Troubleshooting:&lt;/strong&gt; A Kubernetes bug (will be fixed in 1.12) combined with a Skaffold &lt;a href=&quot;https://github.com/GoogleContainerTools/skaffold/issues/887&quot;&gt;bug&lt;/a&gt; causes load balancer to not to work even after getting an IP address. If you are seeing this, run &lt;code&gt;kubectl get service frontend-external -o=yaml | kubectl apply -f-&lt;/code&gt; to trigger load balancer reconfiguration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;Option 3: Using Static Images&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 Recommended for test-driving the application on an existing cluster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Prerequisite&lt;/strong&gt;: a running Kubernetes cluster.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Clone this repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the application: &lt;code&gt;kubectl apply -f ./release/kubernetes-manifests&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;kubectl get pods&lt;/code&gt; to see pods are in a healthy and ready state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the IP address of your application, then visit the application on your browser to confirm installation.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl get service frontend-external
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;(Optional) Deploying on a Istio-installed GKE cluster&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you followed GKE deployment steps above, run &lt;code&gt;skaffold delete&lt;/code&gt; first to delete what's deployed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Create a GKE cluster (described above).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href=&quot;https://cloud.google.com/istio/docs/istio-on-gke/installing&quot; rel=&quot;nofollow&quot;&gt;Istio on GKE add-on&lt;/a&gt; to install Istio to your existing GKE cluster.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;gcloud beta container clusters update demo \
    --zone=us-central1-a \
    --update-addons=Istio=ENABLED \
    --istio-config=auth=MTLS_PERMISSIVE
&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: If you need to enable &lt;code&gt;MTLS_STRICT&lt;/code&gt; mode, you will need to update several manifest files:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;kubernetes-manifests/frontend.yaml&lt;/code&gt;: delete &quot;livenessProbe&quot; and &quot;readinessProbe&quot; fields.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubernetes-manifests/loadgenerator.yaml&lt;/code&gt;: delete &quot;initContainers&quot; field.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Enable Stackdriver Tracing/Logging with Istio Stackdriver Adapter by &lt;a href=&quot;https://cloud.google.com/istio/docs/istio-on-gke/installing#enabling_tracing_and_logging&quot; rel=&quot;nofollow&quot;&gt;following this guide&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the automatic sidecar injection (annotate the &lt;code&gt;default&lt;/code&gt; namespace with the label):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl label namespace default istio-injection=enabled
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apply the manifests in &lt;a href=&quot;https://github.com/GoogleCloudPlatform/microservices-demo/blob/master/istio-manifests&quot;&gt;&lt;code&gt;./istio-manifests&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;kubectl apply -f ./istio-manifests
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is required only once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy the application with &lt;code&gt;skaffold run --default-repo=gcr.io/[PROJECT_ID]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;kubectl get pods&lt;/code&gt; to see pods are in a healthy and ready state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the IP address of your istio gateway Ingress or Service, and visit the application.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;INGRESS_HOST=&quot;$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')&quot;

echo &quot;$INGRESS_HOST&quot;

curl -v &quot;http://$INGRESS_HOST&quot;
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Conferences featuring Hipster Shop&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;This is not an official Google project.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 15 Feb 2019 01:25:20 +0000</pubDate>
<dc:creator>zdw</dc:creator>
<og:image>https://avatars2.githubusercontent.com/u/2810941?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>GoogleCloudPlatform/microservices-demo</og:title>
<og:url>https://github.com/GoogleCloudPlatform/microservices-demo</og:url>
<og:description>Sample cloud-native application with 10 microservices showcasing Kubernetes, Istio, gRPC and OpenCensus. Provided for illustration and demo purposes. - GoogleCloudPlatform/microservices-demo</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/GoogleCloudPlatform/microservices-demo</dc:identifier>
</item>
<item>
<title>A RISC-V CPU for $8</title>
<link>https://hackaday.com/2019/02/14/new-part-day-a-risc-v-cpu-for-eight-dollars/</link>
<guid isPermaLink="true" >https://hackaday.com/2019/02/14/new-part-day-a-risc-v-cpu-for-eight-dollars/</guid>
<description>&lt;p&gt;RISC-V is the new hotness, and companies are churning out code and announcements, but little actual hardware. Eventually, we’re going to get to the point where RISC-V microcontrollers and SoCs cost just a few bucks. This day might be here, with &lt;a href=&quot;https://www.seeedstudio.com/sipeed&quot; target=&quot;_blank&quot;&gt;Seeed’s Sipeed MAix modules&lt;/a&gt;. it’s a RISC-V chip you can buy right now, the bare module costs eight US dollars, there are several modules, and it has ‘AI’.&lt;/p&gt;
&lt;p&gt;Those of you following the developments in the RISC-V world may say this chip looks familiar. You’re right; last October, a seller on Taobao opened up preorders for the &lt;a href=&quot;https://hackaday.com/2018/10/08/new-part-day-the-risc-v-chip-with-built-in-neural-networks/&quot;&gt;Sipeed M1 K210 chip&lt;/a&gt;, a chip with neural networks. Cool, we can ignore some buzzwords if it means new chips. Seeed has been busy these last few months, and they’re now selling modules, dev boards, and peripherals that include a camera, mic array, and displays. It’s here now, and you can buy one. If it seems a little weird for Seeed Studios to get their hands on this, remember: the ESP8266 just &lt;em&gt;showed up&lt;/em&gt; on their web site one day a few years ago. Look where we are with that now.&lt;/p&gt;
&lt;p&gt;The big deal here is the &lt;a href=&quot;https://www.seeedstudio.com/Sipeed-MAIX-I-module-WiFi-version-1st-RISC-V-64-AI-Module-K210-insid-p-3206.html&quot; target=&quot;_blank&quot;&gt;Sipeed MAix-I module&lt;/a&gt; &lt;em&gt;with&lt;/em&gt; WiFi, sold out because it costs nine bucks. Inside this module is a Kendryte K210 RISC-V CPU with 8MB of on-chip SRAM and a 400MHz clock. This chip is also loaded up with a Neural Network Processor, an Audio Processor with support for eight microphones, and a ‘Field Programmable IO array’, which sounds like it’s a crossbar on the 48 GPIOs on the chip. Details and documentation are obviously lacking.&lt;/p&gt;
&lt;p&gt;In addition to a chip that’s currently out of stock, we also have the same chip as above, without WiFi, for a dollar less. It’ll probably be out of stock by the time you read this. &lt;a href=&quot;https://www.seeedstudio.com/Sipeed-MAix-Go-Suit-for-RISC-V-AI-IoT-p-2874.html&quot; target=&quot;_blank&quot;&gt;There’s a ‘Go Suit’&lt;/a&gt; that puts one of these chips in an enclosure with a camera and display, and there’s a microphone array add-on. There’s a binocular camera module if you want to play around with depth sensing.&lt;/p&gt;
&lt;p&gt;The first time we heard of this chip, it was just a preorder on Taobao. It told us two things: RISC-V chips are coming sooner than we expected, and you can do preorders on Taobao. Seeed has a history of bringing interesting chips to the wider world, and if you want a RISC-V chip right now, here you go. &lt;a href=&quot;https://hackaday.com/submit-a-tip/&quot;&gt;Just be sure to tell us what you did with it.&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Thu, 14 Feb 2019 21:42:43 +0000</pubDate>
<dc:creator>heywire</dc:creator>
<og:type>article</og:type>
<og:title>New Part Day: A RISC-V CPU For Eight Dollars</og:title>
<og:url>https://hackaday.com/2019/02/14/new-part-day-a-risc-v-cpu-for-eight-dollars/</og:url>
<og:description>RISC-V is the new hotness, and companies are churning out code and announcements, but little actual hardware. Eventually, we’re going to get to the point where RISC-V microcontrollers and SoC…</og:description>
<og:image>https://hackadaycom.files.wordpress.com/2019/02/rifroheader.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hackaday.com/2019/02/14/new-part-day-a-risc-v-cpu-for-eight-dollars/</dc:identifier>
</item>
<item>
<title>Replacing JavaScript Hot Path with WebAssembly</title>
<link>https://developers.google.com/web/updates/2019/02/hotpath-with-wasm</link>
<guid isPermaLink="true" >https://developers.google.com/web/updates/2019/02/hotpath-with-wasm</guid>
<description>&lt;h2 id=&quot;its_consistently_fast_yo&quot;&gt;It's consistently fast, yo.&lt;/h2&gt;
&lt;section class=&quot;wf-byline&quot; itemprop=&quot;author&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot;&gt;&lt;div class=&quot;attempt-left&quot;&gt;&lt;img itemprop=&quot;image&quot; src=&quot;https://developers.google.com/web/images/contributors/surma.jpg&quot; alt=&quot;Surma &quot;/&gt;&lt;/div&gt;
&lt;section class=&quot;wf-byline-meta&quot;&gt;
&lt;div class=&quot;wf-byline-desc&quot;&gt;Surma is a contributor to Web&lt;strong&gt;Fundamentals&lt;/strong&gt;&lt;/div&gt;
&lt;/section&gt;&lt;/section&gt;&lt;p&gt;In my &lt;a href=&quot;https://developers.google.com/web/updates/2018/03/emscripting-a-c-library&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;https://developers.google.com/web/updates/2019/01/emscripten-npm&quot;&gt;articles&lt;/a&gt; I talked about how WebAssembly allows you to bring the library ecosystem of C/C++ to the web. One app that makes extensive use of C/C++ libraries is &lt;a href=&quot;https://squoosh.app/&quot;&gt;squoosh&lt;/a&gt;, our web app that allows you compress images with a variety of codecs that have been compiled from C++ to WebAssembly.&lt;/p&gt;
&lt;p&gt;WebAssembly is a low-level virtual machine that runs the bytecode that is stored in &lt;code&gt;.wasm&lt;/code&gt; files. This byte code is strongly typed and structured in such a way that it can be compiled and optimized for the host system much quicker than JavaScript can. WebAssembly provides an environment to run code that had sandboxing and embedding in mind from the very start.&lt;/p&gt;
&lt;p&gt;In my experience, most performance problems on the web are caused by forced layout and excessive paint but every now and then an app needs to do a computationally expensive task that takes a lot of time. WebAssembly can help here.&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;Due to legal concerns, I won’t name any browsers in this article.&lt;/span&gt;&lt;/aside&gt;&lt;h2 id=&quot;the_hot_path&quot;&gt;The Hot Path&lt;/h2&gt;
&lt;p&gt;In squoosh we wrote a &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/blob/edd2c51eb6d0676a2e7b7e974337d58cbf00f1d1/src/codecs/rotate/processor.ts&quot;&gt;JavaScript function&lt;/a&gt; that rotates an image buffer by multiples of 90 degrees. While &lt;a href=&quot;https://developers.google.com/web/updates/2018/08/offscreen-canvas&quot;&gt;OffscreenCanvas&lt;/a&gt; would be ideal for this, it isn't supported across the browsers we were targeting, and a little &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=906619&quot;&gt;buggy in Chrome&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This function iterates over every pixel of an input image and copies it to a different position in the output image to achieve rotation. For a 4094px by 4096px image (16 megapixels) it would need over 16 million iterations of the inner code block, which is what we call a &quot;hot path&quot;. Despite that rather big number of iterations, two out of three browsers we tested finish the task in 2 seconds or less. An acceptable duration for this type of interaction.&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;for (let d2 = d2Start; d2 &amp;gt;= 0 &amp;amp;&amp;amp; d2 &amp;lt; d2Limit; d2 += d2Advance) {
  for (let d1 = d1Start; d1 &amp;gt;= 0 &amp;amp;&amp;amp; d1 &amp;lt; d1Limit; d1 += d1Advance) {
    const in_idx = ((d1 * d1Multiplier) + (d2 * d2Multiplier));
    outBuffer[i] = inBuffer[in_idx];
    i += 1;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;One browser, however, takes over 8 seconds. The way browsers optimize JavaScript is &lt;em&gt;really complicated&lt;/em&gt;, and different engines optimize for different things. Some optimize for raw execution, some optimize for interaction with the DOM. In this case, we've hit an unoptimized path in one browser.&lt;/p&gt;
&lt;p&gt;WebAssembly on the other hand is built entirely around raw execution speed. So if we want fast, &lt;em&gt;predictable&lt;/em&gt; performance across browsers for code like this, WebAssembly can help.&lt;/p&gt;
&lt;h2 id=&quot;webassembly_for_predictable_performance&quot;&gt;WebAssembly for predictable performance&lt;/h2&gt;
&lt;p&gt;In general, JavaScript and WebAssembly can achieve the same peak performance. However, for JavaScript this performance can only be reached on the &quot;fast path&quot;, and it's often tricky to stay on that &quot;fast path&quot;. One key benefit that WebAssembly offers is predictable performance, even across browsers. The strict typing and low-level architecture allows the compiler to make stronger guarantees so that WebAssembly code only has to be optimized once and will always use the “fast path”.&lt;/p&gt;
&lt;h3 id=&quot;writing_for_webassembly&quot;&gt;Writing for WebAssembly&lt;/h3&gt;
&lt;p&gt;Previously we took C/C++ libraries and compiled them to WebAssembly to use their functionality on the web. We didn't really touch the code of the libraries, we just wrote small amounts of C/C++ code to form the bridge between the browser and the library. This time our motivation is different: We want to write something from scratch with WebAssembly in mind so we can make use of the advantages that WebAssembly has.&lt;/p&gt;
&lt;h4 id=&quot;webassembly_architecture&quot;&gt;WebAssembly architecture&lt;/h4&gt;
&lt;p&gt;When writing &lt;em&gt;for&lt;/em&gt; WebAssembly, it's beneficial to understand a bit more about what WebAssembly actually is.&lt;/p&gt;
&lt;p&gt;To quote &lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly.org&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you compile a piece of C or Rust code to WebAssembly, you get a &lt;code&gt;.wasm&lt;/code&gt; file that contains a module declaration. This declaration consists of a list of &quot;imports&quot; the module expects from its environment, a list of exports that this module makes available to the host (functions, constants, chunks of memory) and of course the actual binary instructions for the functions contained within.&lt;/p&gt;
&lt;p&gt;Something that I didn't realize until I looked into this: The stack that makes WebAssembly a &quot;stack-based virtual machine&quot; is not stored in the chunk of memory that WebAssembly modules use. The stack is completely VM-internal and inaccessible to web developers (except through DevTools). As such it is possible to write WebAssembly modules that don't need any additional memory at all and only use the VM-internal stack.&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;(for the curious) Compilers like Emscripten still use the WebAssembly memory to implement their own stack. This is necessary so you can access values anywhere on the stack through constructs like pointers in C, something the VM-internal stack does not allow. So, somewhat confusingly, when you run C via WebAssembly, &lt;em&gt;two&lt;/em&gt; stacks are in use!&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;In our case we will need to use some additional memory to allow arbitrary access to the pixels of our image and generate a rotated version of that image. This is what &lt;code&gt;WebAssembly.Memory&lt;/code&gt; is for.&lt;/p&gt;
&lt;h4 id=&quot;memory_management&quot;&gt;Memory management&lt;/h4&gt;
&lt;p&gt;Commonly, once you use additional memory you will find the need to somehow manage that memory. Which parts of the memory are in use? Which ones are free? In C, for example, you have the &lt;code&gt;malloc(n)&lt;/code&gt; function that finds a memory space of &lt;code&gt;n&lt;/code&gt; consecutive bytes. Functions of this kind are also called &quot;allocators&quot;. Of course the implementation of the allocator in use must be included in your WebAssembly module and will increase your file size. This size and performance of these memory management functions can vary quite significantly depending on the algorithm used, which is why many languages offer multiple implementations to choose from (&quot;dmalloc&quot;, &quot;emmalloc&quot;, &quot;wee_alloc&quot;,...).&lt;/p&gt;
&lt;p&gt;In our case we know the dimensions of the input image (and therefore the dimensions of the output image) before we run the WebAssembly module. Here we saw an opportunity: Traditionally, we'd pass the input image's RGBA buffer as a parameter to a WebAssembly function and return the rotated image as a return value. To generate that return value we would have to make use of the allocator. But since we know the total amount of memory needed (twice the size of the input image, once for input and once for output), we can put the input image into the WebAssembly memory using &lt;em&gt;JavaScript&lt;/em&gt;, run the WebAssembly module to generate a 2nd, rotated image and then use JavaScript to read back the result. We can get away without using any memory management at all!&lt;/p&gt;
&lt;h3 id=&quot;spoiled_for_choice&quot;&gt;Spoiled for choice&lt;/h3&gt;
&lt;p&gt;If you looked at the &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/blob/edd2c51eb6d0676a2e7b7e974337d58cbf00f1d1/src/codecs/rotate/processor.ts&quot;&gt;original JavaScript function&lt;/a&gt; that we want to WebAssembly-fy, you can see that it's a purely computational code with no JavaScript-specific APIs. As such it should be fairly straight forward to port this code to any language. We evaluated 3 different languages that compile to WebAssembly: C/C++, Rust and AssemblyScript. The only question we need to answer for each of the languages is: How do we access raw memory without using memory management functions?&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;I skipped the &quot;boring&quot; parts in the code samples and focused on the actual hot path and the memory access. The full version of each sample along with the benchmark can be found in the &lt;a href=&quot;https://gist.github.com/surma/0eb306fa9acc8bdf2f58150b2f1e82b4&quot;&gt;gist&lt;/a&gt;.&lt;/span&gt;&lt;/aside&gt;&lt;h4 id=&quot;c_and_emscripten&quot;&gt;C and Emscripten&lt;/h4&gt;
&lt;p&gt;Emscripten is a C compiler for the WebAssembly target. Emscripten's goal is to function as a drop-in replacement for well-known C compilers like GCC or clang and is mostly flag compatible. This is a core part of the Emscripten's mission as it wants to make compiling existing C and C++ code to WebAssembly as easy as possible.&lt;/p&gt;
&lt;p&gt;Accessing raw memory is in the very nature of C and pointers exist for that very reason:&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;uint8_t* ptr = (uint8_t*)0x124;
ptr[0] = 0xFF;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here we are turning the number &lt;code&gt;0x124&lt;/code&gt; into a pointer to unsigned, 8-bit integers (or bytes). This effectively turns the &lt;code&gt;ptr&lt;/code&gt; variable into an array starting at memory address &lt;code&gt;0x124&lt;/code&gt;, that we can use like any other array, allowing us to access individual bytes for reading and writing. In our case we are looking at an RGBA buffer of an image that we want to re-order to achieve rotation. To move a pixel we actually need to move 4 consecutive bytes at once (one byte for each channel: R, G, B and A). To make this easier we can create an array of unsigned, &lt;em&gt;32-bit&lt;/em&gt; integers. By convention, our input image will start at address 4 and our output image will start directly after the input image ends:&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;int bpp = 4;
int imageSize = inputWidth * inputHeight * bpp;
uint32_t* inBuffer = (uint32_t*) 4;
uint32_t* outBuffer = (uint32_t*) (inBuffer + imageSize);

for (int d2 = d2Start; d2 &amp;gt;= 0 &amp;amp;&amp;amp; d2 &amp;lt; d2Limit; d2 += d2Advance) {
  for (int d1 = d1Start; d1 &amp;gt;= 0 &amp;amp;&amp;amp; d1 &amp;lt; d1Limit; d1 += d1Advance) {
    int in_idx = ((d1 * d1Multiplier) + (d2 * d2Multiplier));
    outBuffer[i] = inBuffer[in_idx];
    i += 1;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;The reason we chose to start at address 4 and not 0 is because address 0 has a special meaning in many languages: It's the dreaded null pointer. While technically 0 is a perfectly valid address, many languages exclude 0 as a valid value for pointers and either throw an exception or just tumble into undefined behavior.&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;After porting the entire JavaScript function to C, we can compile &lt;a href=&quot;https://gist.github.com/surma/0eb306fa9acc8bdf2f58150b2f1e82b4#file-rotate-c&quot;&gt;the C file&lt;/a&gt; with &lt;code&gt;emcc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;$ emcc -O3 -s ALLOW_MEMORY_GROWTH=1 -o c.js rotate.c
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As always, emscripten generates a glue code file called &lt;code&gt;c.js&lt;/code&gt; and a wasm module called &lt;code&gt;c.wasm&lt;/code&gt;. Note that the wasm module gzips to only ~260 Bytes, while the glue code is around 3.5KB after gzip. After some fiddling, we were able to ditch the glue code and instantiate the WebAssembly modules with the vanilla APIs. This is often possible with Emscripten as long as you are not using anything from the C standard library.&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;We are working with the Emscripten team to make the glue code smaller or even non-existent at times.&lt;/span&gt;&lt;/aside&gt;&lt;h4 id=&quot;rust&quot;&gt;Rust&lt;/h4&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;Since the release of this article, we have learned more about how to optimize Rust for WebAssembly. Please see the &lt;a href=&quot;https://developers.google.com/web/updates/2019/02/hotpath-with-wasm#update-rust&quot;&gt;update section&lt;/a&gt; at the end of this article.&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;Rust is a new, modern programming language with a rich type system, no runtime and an ownership model that guarantees memory-safety and thread-safety. Rust also supports WebAssembly as a first-class citizen and the Rust team has contributed a lot of excellent tooling to the WebAssembly ecosystem.&lt;/p&gt;
&lt;p&gt;One of these tools is &lt;a href=&quot;https://rustwasm.github.io/wasm-pack/&quot;&gt;&lt;code&gt;wasm-pack&lt;/code&gt;&lt;/a&gt;, by the &lt;a href=&quot;https://github.com/rustwasm/team&quot;&gt;rustwasm working group&lt;/a&gt;. &lt;code&gt;wasm-pack&lt;/code&gt; takes your code and turns it into a web-friendly module that works out-of-the-box with bundlers like webpack. &lt;code&gt;wasm-pack&lt;/code&gt; is an extremely convenient experience, but currently only works for Rust. The group is considering to add support for other WebAssembly-targeting languages.&lt;/p&gt;
&lt;p&gt;In Rust, slices are what arrays are in C. And just like in C, we need to create slices that use our start addresses. This goes against the memory safety model that Rust enforces, so to get our way we have to use the &lt;code&gt;unsafe&lt;/code&gt; keyword, allowing us to write code that doesn't comply with that model.&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;This is not a best practice. In our experience it is usually worth it to use binding mechanisms like &lt;a href=&quot;https://developers.google.com/web/updates/2018/08/embind&quot;&gt;embind in Emscripten&lt;/a&gt; or &lt;a href=&quot;https://rustwasm.github.io/wasm-bindgen/&quot;&gt;wasm-bindgen&lt;/a&gt; for Rust to work at a higher level.&lt;/span&gt;&lt;/aside&gt;&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;let imageSize = (inputWidth * inputHeight) as usize;
let inBuffer: &amp;amp;mut [u32];
let outBuffer: &amp;amp;mut [u32];
unsafe {
  inBuffer = slice::from_raw_parts_mut::&amp;lt;u32&amp;gt;(4 as *mut u32, imageSize);
  outBuffer = slice::from_raw_parts_mut::&amp;lt;u32&amp;gt;((imageSize * 4 + 4) as *mut u32, imageSize);
}

for d2 in 0..d2Limit {
  for d1 in 0..d1Limit {
    let in_idx = (d1Start + d1 * d1Advance) * d1Multiplier + (d2Start + d2 * d2Advance) * d2Multiplier;
    outBuffer[i as usize] = inBuffer[in_idx as usize];
    i += 1;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Compiling the Rust files using&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;$ wasm-pack build
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;yields a 7.6KB wasm module with about 100 bytes of glue code (both after gzip).&lt;/p&gt;
&lt;h4 id=&quot;assemblyscript&quot;&gt;AssemblyScript&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/AssemblyScript/assemblyscript&quot;&gt;AssemblyScript&lt;/a&gt; is a fairly young project that aims to be a TypeScript-to-WebAssembly compiler. It's important to note, however, that it won't just consume any TypeScript. AssemblyScript uses the same syntax as TypeScript but switches out the standard library for their own. Their standard library models the capabilities of WebAssembly. That means you can't just compile any TypeScript you have lying around to WebAssembly, but it &lt;em&gt;does&lt;/em&gt; mean that you don't have to learn a new programming language to write WebAssembly!&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;for (let d2 = d2Start; d2 &amp;gt;= 0 &amp;amp;&amp;amp; d2 &amp;lt; d2Limit; d2 += d2Advance) {
  for (let d1 = d1Start; d1 &amp;gt;= 0 &amp;amp;&amp;amp; d1 &amp;lt; d1Limit; d1 += d1Advance) {
    let in_idx = ((d1 * d1Multiplier) + (d2 * d2Multiplier));
    store&amp;lt;u32&amp;gt;(offset + i * 4 + 4, load&amp;lt;u32&amp;gt;(in_idx * 4 + 4));
    i += 1;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Considering the small type surface that our &lt;code&gt;rotate()&lt;/code&gt; function has, it was fairly easy to port this code to AssemblyScript. The functions &lt;code&gt;load&amp;lt;T&amp;gt;(ptr: usize)&lt;/code&gt; and &lt;code&gt;store&amp;lt;T&amp;gt;(ptr: usize, value: T)&lt;/code&gt; are provided by AssemblyScript to access raw memory. To compile &lt;a href=&quot;https://gist.github.com/surma/0eb306fa9acc8bdf2f58150b2f1e82b4#file-rotate-ts&quot;&gt;our AssemblyScript file&lt;/a&gt;, we only need to install the &lt;code&gt;AssemblyScript/assemblyscript&lt;/code&gt; npm package and run&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;$ asc rotate.ts -b assemblyscript.wasm --validate -O3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;AssemblyScript will provide us with a ~300 Bytes wasm module and &lt;em&gt;no&lt;/em&gt; glue code. The module just works with the vanilla WebAssembly APIs.&lt;/p&gt;
&lt;h3 id=&quot;webassembly_forensics&quot;&gt;WebAssembly Forensics&lt;/h3&gt;
&lt;p&gt;Rust's 7.6KB is surprisingly big when compared to the 2 other languages. There are a couple of tools in the WebAssembly ecosystem that can help you analyze your WebAssembly files (regardless of the language the got created with) and tell you what is going on and also help you improve your situation.&lt;/p&gt;
&lt;h4 id=&quot;twiggy&quot;&gt;Twiggy&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rustwasm/twiggy&quot;&gt;Twiggy&lt;/a&gt; is another tool from Rust's WebAssembly team that extracts a bunch of insightful data from a WebAssembly module. The tool is not Rust-specific and allows you to inspect things like the module's call graph, determine unused or superfluous sections and figure out which sections are contributing to the total file size of your module. The latter can be done with Twiggy's &lt;code&gt;top&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;$ twiggy top rotate_bg.wasm
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://developers.google.com/web/updates/images/2019/02/hotpath-with-wasm/twiggy.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this case we can see that a majority of our file size stems from the allocator. That was surprising since our code is not using dynamic allocations. Another big contributing factor is a &quot;function names&quot; subsection.&lt;/p&gt;
&lt;h4 id=&quot;wasm-strip&quot;&gt;wasm-strip&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;wasm-strip&lt;/code&gt; is a tool from the &lt;a href=&quot;https://github.com/WebAssembly/wabt&quot;&gt;WebAssembly Binary Toolkit&lt;/a&gt;, or wabt for short. It contains a couple of tools that allow you to inspect and manipulate WebAssembly modules. &lt;code&gt;wasm2wat&lt;/code&gt; is a disassembler that turns a binary wasm module into a human-readable format. Wabt also contains &lt;code&gt;wat2wasm&lt;/code&gt; which allows you to turn that human-readable format back into a binary wasm module. While we did use these two complementary tools to inspect our WebAssembly files, we found &lt;code&gt;wasm-strip&lt;/code&gt; to be the most useful. &lt;code&gt;wasm-strip&lt;/code&gt; removes unnecessary sections and metadata from a WebAssembly module:&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;$ wasm-strip rotate_bg.wasm
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This reduces the file size of the rust module from 7.5KB to 6.6KB (after gzip).&lt;/p&gt;
&lt;h4 id=&quot;wasm-opt&quot;&gt;wasm-opt&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;wasm-opt&lt;/code&gt; is a tool from &lt;a href=&quot;https://github.com/WebAssembly/binaryen&quot;&gt;Binaryen&lt;/a&gt;. It takes a WebAssembly module and tries to optimize it both for size and performance based only on the bytecode. Some tools like Emscripten already run this tool, some others do not. It's usually a good idea to try and save some additional bytes by using these tools.&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;wasm-opt -O3 -o rotate_bg_opt.wasm rotate_bg.wasm
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With &lt;code&gt;wasm-opt&lt;/code&gt; we can shave off another handful of bytes to leave a total of 6.2KB after gzip.&lt;/p&gt;
&lt;h4 id=&quot;no_std&quot;&gt;#![no_std]&lt;/h4&gt;
&lt;p&gt;After some consultation and research, we re-wrote our Rust code without using Rust's standard library, using the &lt;a href=&quot;https://doc.rust-lang.org/unstable-book/language-features/lang-items.html#writing-an-executable-without-stdlib&quot;&gt;&lt;code&gt;#![no_std]&lt;/code&gt;&lt;/a&gt; feature. This also disables dynamic memory allocations altogether, removing the allocator code from our module. Compiling &lt;a href=&quot;https://gist.github.com/surma/0eb306fa9acc8bdf2f58150b2f1e82b4#file-rotate-rs&quot;&gt;this Rust file&lt;/a&gt; with&lt;/p&gt;
&lt;pre class=&quot;prettyprint notranslate&quot; translate=&quot;no&quot;&gt;
&lt;code&gt;$ rustc --target=wasm32-unknown-unknown -C opt-level=3 -o rust.wasm rotate.rs
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;yielded a 1.6KB wasm module after &lt;code&gt;wasm-opt&lt;/code&gt;, &lt;code&gt;wasm-strip&lt;/code&gt; and gzip. While it is still bigger than the modules generated by C and AssemblyScript, it is small enough to be considered a lightweight.&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;According to Twiggy, the main contributor to the file size is &lt;code&gt;core::fmt&lt;/code&gt;, a module that generates turns data into strings (like C's &lt;code&gt;printf()&lt;/code&gt;). It is used by code paths that could trigger an exception as they generate a human-readable exception messages. Rust's WebAssembly team is aware of this and is actively working on improvements here.&lt;/span&gt;&lt;/aside&gt;&lt;h3 id=&quot;performance&quot;&gt;Performance&lt;/h3&gt;
&lt;p&gt;Before we jump to conclusions based on file size alone — we went on this journey to optimize performance, not file size. So how did we measure performance and what were the results?&lt;/p&gt;
&lt;h4 id=&quot;how_to_benchmark&quot;&gt;How to benchmark&lt;/h4&gt;
&lt;p&gt;Despite WebAssembly being a low-level bytecode format, it still needs to be sent through a compiler to generate host-specific machine code. Just like JavaScript, the compiler works in multiple stages. Said simply: The first stage is much faster at compiling but tends to generate slower code. Once the module starts running, the browser observes which parts are frequently used and sends those through a more optimizing but slower compiler.&lt;/p&gt;
&lt;p&gt;Our use-case is interesting in that the code for rotating an image will be used once, maybe twice. So in the vast majority of cases we will never get the benefits of the optimizing compiler. This is important to keep in mind when benchmarking. Running our WebAssembly modules 10,000 times in a loop would give unrealistic results. To get realistic numbers, we should run the module once and make decisions based on the numbers from that single run.&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;Ideally, we should have automated this process of reloading the page and running the module once, and doing that process a large number of times. We decided that a few manual runs are good enough to make an informed decision based on those averaged numbers.&lt;/span&gt;&lt;/aside&gt;&lt;h4 id=&quot;performance_comparison&quot;&gt;Performance comparison&lt;/h4&gt;
&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://developers.google.com/web/updates/images/2019/02/hotpath-with-wasm/speed-per-lang.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://developers.google.com/web/updates/images/2019/02/hotpath-with-wasm/speed-per-browser.svg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;These two graphs are different views onto the same data. In the first graph we compare per browser, in the second graph we compare per language used. Please note that I chose a logarithmic timescale. It’s also important that all benchmarks were using the same 16 megapixel test image and the same host machine, except for one browser, which could not be run on the same machine.&lt;/p&gt;
&lt;p&gt;Without analyzing these graphs too much, it is clear that we solved our original performance problem: All WebAssembly modules run in ~500ms or less. This confirms what we laid out at the start: WebAssembly gives you &lt;em&gt;predictable&lt;/em&gt; performance. No matter which language we choose, the variance between browsers and languages is minimal. To be exact: The standard deviation of JavaScript across all browsers is ~400ms, while the standard deviation of all our WebAssembly modules across all browsers is ~80ms.&lt;/p&gt;
&lt;h3 id=&quot;effort&quot;&gt;Effort&lt;/h3&gt;
&lt;p&gt;Another metric is the amount of effort we had to put in to create and integrate our WebAssembly module into squoosh. It is hard to assign a numeric value to effort, so I won't create any graphs but there are a few things I would like to point out:&lt;/p&gt;
&lt;p&gt;AssemblyScript was frictionless. Not only does it allow you to use TypeScript to write WebAssembly, making code-review very easy for my colleagues, but it also produces glue-free WebAssembly modules that are very small with decent performance. The tooling in the TypeScript ecosystem, like prettier and tslint, will likely just work.&lt;/p&gt;
&lt;p&gt;Rust in combination with &lt;code&gt;wasm-pack&lt;/code&gt; is also extremely convenient, but excels more at bigger WebAssembly projects were bindings and memory management are needed. We had to diverge a bit from the happy-path to achieve a competitive file size.&lt;/p&gt;
&lt;p&gt;C and Emscripten created a very small and highly performant WebAssembly module out of the box, but without the courage to jump into glue code and reduce it to the bare necessities the total size (WebAssembly module + glue code) ends up being quite big.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So what language should you use if you have a JS hot path and want to make it faster or more consistent with WebAssembly. As always with performance questions, the answer is: It depends. So what did we ship?&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;100%&quot; src=&quot;https://developers.google.com/web/updates/images/2019/02/hotpath-with-wasm/scatter.svg&quot;/&gt;&lt;/p&gt;
&lt;aside class=&quot;note&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;span&gt;Again, please note that &lt;em&gt;both&lt;/em&gt; axis are logarithmic and that the x axis goes to 2000 Bytes, while the y axis goes up to 10 seconds.&lt;/span&gt;&lt;/aside&gt;&lt;p&gt;Comparing at the module size / performance tradeoff of the different languages we used, the best choice seems to be either C or AssemblyScript. &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/pull/438/files&quot;&gt;We decided to ship Rust&lt;/a&gt;. There are multiple reasons for this decision: All the codecs shipped in Squoosh so far are compiled using Emscripten. We wanted to broaden our knowledge about the WebAssembly ecosystem and use a different language &lt;em&gt;in production&lt;/em&gt;. AssemblyScript is a strong alternative, but the project is relatively young and the compiler isn't as mature as the Rust compiler.&lt;/p&gt;
&lt;p&gt;While the difference in file size between Rust and the other languages size looks quite drastic in the scatter graph, it is not that big a deal in reality: Loading 500B or 1.6KB even over 2G takes less than a 1/10th of a second. And Rust will hopefully close the gap in terms of module size soon.&lt;/p&gt;
&lt;p&gt;In terms of runtime performance, Rust has a faster average across browsers than AssemblyScript. Especially on bigger projects Rust will be more likely to produce faster code without needing manual code optimizations. But that shouldn't keep you from using what you are most comfortable with.&lt;/p&gt;
&lt;p&gt;That all being said: AssemblyScript has been a great discovery. It allows web developers to produce WebAssembly modules without having to learn a new language. The AssemblyScript team has been very responsive and is actively working on improving their toolchain. We will definitely keep an eye on AssemblyScript in the future.&lt;/p&gt;
&lt;h2 id=&quot;update-rust&quot;&gt;Update: Rust&lt;/h2&gt;
&lt;p&gt;After publishing this article, &lt;a href=&quot;https://twitter.com/fitzgen&quot;&gt;Nick Fitzgerald&lt;/a&gt; from the Rust team pointed us to their excellent Rust Wasm book, which contains &lt;a href=&quot;https://rustwasm.github.io/book/reference/code-size.html&quot;&gt;a section on optimizing file size&lt;/a&gt;. Following the instructions there (most notably enabling link time optimizations and manual panic handling) allowed us to write “normal” Rust code and go back to using &lt;code&gt;Cargo&lt;/code&gt; (the &lt;code&gt;npm&lt;/code&gt; of Rust) without bloating the file size. The Rust module ends up with 370B after gzip. For details, please take a look at &lt;a href=&quot;https://github.com/GoogleChromeLabs/squoosh/pull/462&quot;&gt;the PR I opened on Squoosh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href=&quot;https://twitter.com/ag_dubs&quot;&gt;Ashley Williams&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/steveklabnik&quot;&gt;Steve Klabnik&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/fitzgen&quot;&gt;Nick Fitzgerald&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/MaxGraey&quot;&gt;Max Graey&lt;/a&gt; for all their help on this journey.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;devsite-tracking-question&quot;&gt;
&lt;div&gt;Was this page helpful?&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Helpful&quot; data-value=&quot;1&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;

&lt;div class=&quot;devsite-tracking-question&quot;&gt;
&lt;div&gt;What was the best thing about this page?&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Goals&quot; data-value=&quot;1&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It helped me complete my goal(s)&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Completeness&quot; data-value=&quot;1&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It had the information I needed&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Accuracy&quot; data-value=&quot;1&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It had accurate information&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Writing&quot; data-value=&quot;1&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It was easy to read&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Other&quot; data-value=&quot;1&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;Something else&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Helpful&quot; data-value=&quot;0&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;

&lt;div class=&quot;devsite-tracking-question&quot;&gt;
&lt;div&gt;What was the worst thing about this page?&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Goals&quot; data-value=&quot;0&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It didn't help me complete my goal(s)&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Completeness&quot; data-value=&quot;0&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It was missing information I needed&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Accuracy&quot; data-value=&quot;0&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It had inaccurate information&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Writing&quot; data-value=&quot;0&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;It was hard to read&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;gc-analytics-event&quot; data-category=&quot;Other&quot; data-value=&quot;0&quot; data-label=&quot;/web/updates/2019/02/hotpath-with-wasm&quot;&gt;
&lt;div&gt;Something else&lt;/div&gt;
&lt;div&gt;Thank you for the feedback. If you have specific ideas on how to improve this page, please &lt;a href=&quot;https://github.com/google/webfundamentals/issues/new&quot;&gt;create an issue&lt;/a&gt;.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;webFuRSSWidget&quot;&gt;&lt;span class=&quot;material-icons&quot;&gt;rss_feed&lt;/span&gt; Subscribe to our &lt;a href=&quot;https://goo.gl/siLiwf&quot; class=&quot;gc-analytics-event&quot; data-category=&quot;webFu&quot; data-label=&quot;feed-updates-rss-link&quot;&gt;RSS&lt;/a&gt; or &lt;a href=&quot;https://goo.gl/oc2PGP&quot; class=&quot;gc-analytics-event&quot; data-category=&quot;webFu&quot; data-label=&quot;feed-updates-atom-link&quot;&gt;Atom&lt;/a&gt; feed and get the latest &lt;strong&gt;updates&lt;/strong&gt; in your favorite feed reader!&lt;/p&gt;
</description>
<pubDate>Thu, 14 Feb 2019 21:28:24 +0000</pubDate>
<dc:creator>markdog12</dc:creator>
<og:type>website</og:type>
<og:url>https://developers.google.com/web/updates/2019/02/hotpath-with-wasm</og:url>
<og:title>Replacing a hot path in your app's JavaScript with WebAssembly  |  Web  |  Google Developers</og:title>
<og:description>One key benefit that WebAssembly offers is _predictable_ performance across browsers. But how do you turn hot path written in JavaScript into WebAssembly?</og:description>
<og:image>https://developers.google.com/web/images/social-webfu-16x9.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developers.google.com/web/updates/2019/02/hotpath-with-wasm</dc:identifier>
</item>
</channel>
</rss>