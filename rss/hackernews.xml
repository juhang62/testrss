<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The AMD Radeon Graphics Driver Makes Up Roughly 10.5% of the Linux Kernel</title>
<link>https://www.phoronix.com/scan.php?page=news_item&amp;px=Linux-5.9-AMDGPU-Stats</link>
<guid isPermaLink="true" >https://www.phoronix.com/scan.php?page=news_item&amp;px=Linux-5.9-AMDGPU-Stats</guid>
<description>&lt;div&gt;&lt;img alt=&quot;LINUX KERNEL -- &quot; src=&quot;https://www.phoronix.com/assets/categories/linuxkernel.jpg&quot; width=&quot;100&quot; height=&quot;100&quot;/&gt;&lt;/div&gt;
Given the impending release of &lt;a href=&quot;https://www.phoronix.com/scan.php?page=search&amp;amp;q=Linux+5.9&quot;&gt;Linux 5.9&lt;/a&gt;, I was having some fun with &lt;em&gt;cloc&lt;/em&gt; today looking at the current lines of code count for this near-final Linux 5.9 kernel state.&lt;p&gt;As of today in Linux 5.9 Git, the kernel is about 20.49 million lines of code plus another 3.58 million lines of code comments and another 3.72 million blank lines. Or all in, Linux 5.9 comes in at roughly 27.81 million lines distributed among some fifty-nine thousand source files.&lt;br/&gt;&lt;/p&gt;&lt;pre&gt;
   69964 text files.
   69494 unique files.                                          
   10737 files ignored.

github.com/AlDanial/cloc v 1.82  T=95.88 s (618.0 files/s, 290045.7 lines/s)
------------------------------------------------------------------------------
Language                    files          blank        comment           code
------------------------------------------------------------------------------
C                           29198        2900014        2367000       14781314
C/C++ Header                21123         588426        1022774        4640918
reStructuredText             2685         135238          59051         369738
Assembly                     1275          45960          99012         225085
JSON                          287              0              0         165799
YAML                         1089          18494           4966          83627
Bourne Shell                  657          16823          11350          66043
make                         2592           9808          10864          44192
SVG                            59            118           1365          37555
Perl                           60           6686           4767          34393
Python                        123           5345           4804          27720
yacc                            9            695            354           4755
PO File                         5            791            918           3077
lex                             9            349            304           2130
C++                            10            345            134           1993
Bourne Again Shell             52            338            297           1750
awk                            10            139            116           1051
Glade                           1             58              0            603
NAnt script                     2            143              0            549
Cucumber                        1             28             50            175
Windows Module Definition       2             15              0            109
m4                              1             15              1             95
CSS                             1             28             29             80
XSLT                            5             13             26             61
vim script                      1              3             12             27
Ruby                            1              4              0             25
INI                             1              1              0              6
sed                             1              2              5              5
------------------------------------------------------------------------------
SUM:                        59260        3729879        3588199       20492875
------------------------------------------------------------------------------
&lt;/pre&gt;
&lt;br/&gt;(Keep in mind the kernel source tree also has various tools, the build system, and plenty of documentation and the like that explains for some of the cloc data that may otherwise seem rather peculiar.)&lt;p&gt;For a while now the AMDGPU kernel graphics driver has been around 2+ million lines of code making it the largest in-tree kernel driver. With Linux 5.9, it comes in at 2.16 million lines of code plus another 247k lines of code comments and another 109k blank lines... Or up to 2.51 million lines of code is the AMD DRM driver code including AMDKFD, PowerPlay, DC, and all the kernel code ultimately making up the AMD Radeon support on that driver (but not the older Radeon DRM driver -- that older Radeon driver is at around 157k lines of code).&lt;/p&gt;&lt;p&gt;Though as reported previously, much of the AMDGPU driver code base is so large because of auto-generated header files for GPU registers, etc. In fact, 1.79 million lines as of Linux 5.9 for AMDGPU is simply header files that are predominantly auto-generated. It's 366k lines of the 2.71 million lines of code that is actual C code.&lt;br/&gt;&lt;/p&gt;&lt;pre&gt;
    1471 text files.
    1470 unique files.                                          
       5 files ignored.

github.com/AlDanial/cloc v 1.82  T=6.85 s (214.1 files/s, 367938.0 lines/s)
---------------------------------------------------------------------
Language           files          blank        comment           code
---------------------------------------------------------------------
C/C++ Header         927          39761         195391        1794207
C                    501          68528          50377         366823
Assembly               3            557            408           1909
make                  35            276            906            636
---------------------------------------------------------------------
SUM:                1466         109122         247082        2163575
&lt;/pre&gt;
&lt;br/&gt;For GPU driver size comparison, the Intel &quot;i915&quot; kernel driver supporting form old i915 graphics through Gen12 / Xe Graphics with Linux 5.9 is at 209k lines of code with another 39.2k lines of comments and 48k blank lines.&lt;pre&gt;
     529 text files.
     528 unique files.                                          
       6 files ignored.

github.com/AlDanial/cloc v 1.82  T=0.72 s (728.7 files/s, 413015.9 lines/s)
----------------------------------------------------------------------
Language            files          blank        comment           code
----------------------------------------------------------------------
C                     281          42116          31405         180728
C/C++ Header          238           5920           7719          27974
make                    2             23             29            260
Assembly                2             28             94            114
----------------------------------------------------------------------
SUM:                  523          48087          39247         209076
----------------------------------------------------------------------
&lt;/pre&gt;
&lt;br/&gt;Or in the case of the open-source NVIDIA &quot;Nouveau&quot; driver is just 149k lines of code, 25.6k lines of comments, and another 19.9k blank lines.&lt;p&gt;Those are the latest numbers for those wondering about the current size of the AMDGPU kernel driver in relation to the overall size of the mainline Linux 5.9 kernel. Obviously keep in mind these metrics are simply for the kernel side and not the user-space OpenGL/Vulkan and compute components.&lt;/p&gt;&lt;p&gt;In any case, there are &lt;a href=&quot;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Linux-5.9-Prominent-Features&quot;&gt;lots of great Linux 5.9 kernel features&lt;/a&gt; to enjoy once released as stable in the coming hours.&lt;/p&gt;</description>
<pubDate>Sun, 11 Oct 2020 19:45:23 +0000</pubDate>
<dc:creator>akvadrako</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.phoronix.com/scan.php?page=news_item&amp;px=Linux-5.9-AMDGPU-Stats</dc:identifier>
</item>
<item>
<title>Rust After the Honeymoon</title>
<link>http://dtrace.org/blogs/bmc/2020/10/11/rust-after-the-honeymoon/</link>
<guid isPermaLink="true" >http://dtrace.org/blogs/bmc/2020/10/11/rust-after-the-honeymoon/</guid>
<description>&lt;p&gt;Two years ago, I had a blog entry describing &lt;a href=&quot;http://dtrace.org/blogs/bmc/2018/09/18/falling-in-love-with-rust/&quot;&gt;falling in love with Rust&lt;/a&gt;. Of course, a relationship with a technology is like any other relationship: as novelty and infatuation wears off, it can get on a longer term (and often more realistic and subdued) footing — or it can begin to fray. So well one might ask: how is Rust after the honeymoon?&lt;/p&gt;
&lt;p&gt;By way of answering that, I should note that about a year ago (and a year into my relationship with Rust) &lt;a href=&quot;http://dtrace.org/blogs/bmc/2019/12/02/the-soul-of-a-new-computer-company/&quot;&gt;we started Oxide&lt;/a&gt;. On the one hand, the name was no accident — we saw Rust playing a large role in our future. But on the other, we hadn’t yet started to build in earnest, so it was really more pointed question than assertion: where might Rust fit in a stack that stretches from the bowels of firmware through a hypervisor and control plane and into the lofty heights of REST APIs?&lt;/p&gt;
&lt;p&gt;The short answer from &lt;a href=&quot;https://www.youtube.com/watch?v=vvZA9n3e5pc&quot;&gt;an Oxide perspective&lt;/a&gt; is that Rust has proven to be a really good fit — remarkably good, honestly — at more or less all layers of the stack. You can expect much, much more to come from Oxide on this (we intend to open source more or less everything we’re building), but for a teaser of the scope, you can see it in the work of Oxide engineers: see &lt;a href=&quot;http://cliffle.com/blog/&quot;&gt;Cliff’s blog&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ahl/status/1308421852931461126&quot;&gt;Adam and Dave’s talk on Dropshot&lt;/a&gt;, &lt;a href=&quot;https://blog.jessfraz.com/post/the-automated-cio/&quot;&gt;Jess on using Dropshot within Oxide&lt;/a&gt;, &lt;a href=&quot;https://www.labbott.name/blog/2020/03/30/rust-macros.html&quot;&gt;Laura on Rust macros&lt;/a&gt;, and &lt;a href=&quot;https://steveklabnik.com/writing/today-is-my-first-day-at-oxide-computer-company&quot;&gt;Steve Klabnik on why he joined Oxide&lt;/a&gt;. (Requisite aside: &lt;a href=&quot;https://oxide.computer/careers/&quot;&gt;we’re hiring&lt;/a&gt;!)&lt;/p&gt;
&lt;p&gt;So Rust is going really well for us at Oxide, but for the moment I want to focus on more personal things — reasons that I &lt;em&gt;personally&lt;/em&gt; have enjoyed implementing in Rust. These run the gamut: some are tiny but beautiful details that allow me to indulge in the pleasure of the craft; some are much more profound features that represent important advances in the state of the art; and some are bodies of software developed by the Rust community, notable as much for their reflection of who is attracted to Rust (and why) as for the artifacts themselves. It should also be said that I stand by absolutely everything &lt;a href=&quot;http://dtrace.org/blogs/bmc/2018/09/18/falling-in-love-with-rust/&quot;&gt;I said two years ago&lt;/a&gt;; this is not as a replacement for that list, but rather a supplement to it. Finally, this list is highly incomplete; there’s a lot to love about Rust and this shouldn’t be thought of as any way exhaustive!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;1. &lt;tt&gt;no_std&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;When developing for embedded systems — and especially for the flotilla of microcontrollers that surround a host CPU on the kinds of servers we’re building at Oxide — memory use is critical. Historically, C has been the best fit for these applications just because it so lean: by providing essentially nothing other than the portable assembler that is the language itself, it avoids the implicit assumptions (and girth) of a complicated runtime. But the nothing that C provides reflects history more than minimalism; it is not an elegant nothing, but rather an ill-considered nothing that leaves those who build embedded systems building effectively everything themselves — and in a language that does little to help them write correct software.&lt;/p&gt;
&lt;p&gt;Meanwhile, having been generally designed around modern machines with seemingly limitless resources, higher-level languages and environments are simply too full-featured to fit into (say) tens of kilobytes or into the (highly) constrained environment of a microcontroller. And even where one could cajole these other languages into the embedded use case, it has generally been as a reimplementation, leaving developers on a fork that isn’t necessarily benefiting from development in the underlying language.&lt;/p&gt;
&lt;p&gt;Rust has taken a different approach: a rich, default standard library but &lt;em&gt;also&lt;/em&gt; a first-class mechanism for programs to opt out of that standard library. By marking themselves as &lt;a href=&quot;https://rust-embedded.github.io/book/intro/no-std.html&quot;&gt;no_std&lt;/a&gt;, programs confine themselves to the functionality found in &lt;a href=&quot;https://doc.rust-lang.org/core/&quot;&gt;libcore&lt;/a&gt;. This functionality, in turn, makes no system assumptions — and in particular, performs no heap allocations. This is not easy for a system to do; it requires extraordinary discipline by those developing it (who must constantly differentiate between core functionality and standard functionality) and a broad empathy with the constraints of embedded software. Rust is blessed with both, and the upshot is remarkable: a safe, powerful language that can operate in the highly constrained environment of a microcontroller — with binaries every bit as small as those generated by C. This makes &lt;tt&gt;no_std&lt;/tt&gt; — as &lt;a href=&quot;http://cliffle.com/blog/m4vga-in-rust/#on-no-std&quot;&gt;Cliff has called it&lt;/a&gt; — the killer feature of embedded Rust, without real precedence or analogue.&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;2. &lt;tt&gt;{:#x?}&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Two years ago, I mentioned that I love &lt;tt&gt;format!&lt;/tt&gt;, and in particular the &lt;tt&gt;{:?}&lt;/tt&gt; format specifier. What took me longer to discover was &lt;tt&gt;{:#?}&lt;/tt&gt;, which formats a structure but also pretty-prints it (i.e., with newlines and indentation). This can be coupled with &lt;tt&gt;{:#x}&lt;/tt&gt; to yield &lt;tt&gt;{:#x?}&lt;/tt&gt; which pretty-prints a structure &lt;em&gt;in hex&lt;/em&gt;. So this:&lt;/p&gt;
&lt;pre&gt;
    println!(&quot;dumping {:#x?}&quot;, region);
&lt;/pre&gt;
&lt;p&gt;Becomes this:&lt;/p&gt;
&lt;pre&gt;
dumping Region {
    daddr: Some(
        0x4db8,
    ),
    base: 0x10000,
    size: 0x8000,
    attr: RegionAttr {
        read: true,
        write: false,
        execute: true,
        device: false,
        dma: false,
    },
    task: Task(
        0x0,
    ),
}
&lt;/pre&gt;
&lt;p&gt;My fingers now type &lt;tt&gt;{:#x?}&lt;/tt&gt; by default, and hot damn is it ever nice!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;3. Integer literal syntax&lt;/h3&gt;
&lt;p&gt;Okay, another small one: I love the Rust integer literal syntax! In hardware-facing systems, we are often expressing things in terms of masks that ultimately map to binary. It is beyond me why C thought to introduce octal and hexadecimal but not binary in their literal syntax; Rust addresses this gap with the same “&lt;tt&gt;0b&lt;/tt&gt;” prefix as found in &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Binary-constants.html&quot;&gt;some non-standard C compiler extensions&lt;/a&gt;. Additionally, Rust allows for integer literals to be arbitrarily intra-delimited with an underscore character. Taken together, this allows for a mask consisting of bits 8 through 10 and bit 12 (say) to be expressed as &lt;tt&gt;0b0000_1011_1000_0000&lt;/tt&gt; — which to me is clearer as to its intent and less error prone than (say) &lt;tt&gt;0xb80&lt;/tt&gt; or &lt;tt&gt;0b101110000000&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;And as long as we’re on the subject of integer literals: I also love that the types (and the suffix that denotes a literal’s type) explicitly encode bit width and signedness. Instead of dealing with the implicit signedness and width of &lt;tt&gt;char&lt;/tt&gt;, &lt;tt&gt;short&lt;/tt&gt;, &lt;tt&gt;long&lt;/tt&gt; and &lt;tt&gt;long long&lt;/tt&gt;, we have &lt;tt&gt;u8&lt;/tt&gt;, &lt;tt&gt;u16&lt;/tt&gt;, &lt;tt&gt;u32&lt;/tt&gt;, &lt;tt&gt;u64&lt;/tt&gt;, etc. Much clearer!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;4. DWARF support&lt;/h3&gt;
&lt;p&gt;Debugging software — and more generally, the debuggability of software systems — is in my marrow; it may come as no surprise that one of the things that I personally have been working on is the debugger for a &lt;em&gt;de novo&lt;/em&gt; Rust operating system that we’re developing. To be useful, debuggers need help from the compiler in the way of type information — but this information has been historically excruciating to extract, especially in production systems. (Or as &lt;a href=&quot;http://dtrace.org/blogs/rm/2013/11/14/userland-ctf-in-dtrace/&quot;&gt;Robert phrased it concisely years ago&lt;/a&gt;: “the compiler is the enemy.”) And while &lt;a href=&quot;https://en.wikipedia.org/wiki/DWARF&quot;&gt;DWARF&lt;/a&gt; is the &lt;em&gt;de facto&lt;/em&gt; standard, it is only as good as the compiler’s willingness to supply it.&lt;/p&gt;
&lt;p&gt;Given how much debuggability can (sadly) lag development, I wasn’t really sure what I would find with respect to Rust, but I have been delighted to discover thorough DWARF support. This is especially important for Rust because it (rightfully) makes extensive use of inlining; without DWARF support to make sense of this inlining, it can be hard to make any sense of the generated assembly. I have been able to use the DWARF information to build some pretty powerful Rust-based tooling — with much promise on the horizon. (You can see an early study for this work in &lt;a href=&quot;https://github.com/oxidecomputer/tockilator&quot;&gt;Tockilator&lt;/a&gt;.)&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;5. Gimli and Goblin&lt;/h3&gt;
&lt;p&gt;Lest I sound like I am heaping too much praise on DWARF, let me be clear that DWARF is historically acutely painful to deal with. The specification (to the degree that one can call it that) is an elaborate mess, and the format itself seems to go out of its way to inflict pain on those who would consume it. Fortunately, the &lt;a href=&quot;https://github.com/gimli-rs/gimli&quot;&gt;Gimli crate&lt;/a&gt; that consumes DWARF is really good, having made it easy to build DWARF-based tooling. (I have found that whenever I am frustrated with Gimli, I am, in fact, frustrated with some strange pedantry of DWARF — which Gimli rightfully refuses to paper over.)&lt;/p&gt;
&lt;p&gt;In addition to Gimli, I have also enjoyed using &lt;a href=&quot;https://github.com/m4b/goblin&quot;&gt;Goblin&lt;/a&gt; to consume ELF. ELF — in stark contrast to DWARF — is tight and crisp (and the traditional C-based tooling for ELF is quite good), but it was nice nonetheless that Goblin makes it so easy to zing through an ELF binary.&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;6. Data-bearing enums&lt;/h3&gt;
&lt;p&gt;Enums — that is, the “sum” class of algebraic types — are core to Rust, and give it the beautiful error handling that I described falling in love with two years ago. Algebraic types allow much more than just beautiful error handling, e.g. Rust’s ubiquitous &lt;a href=&quot;https://doc.rust-lang.org/std/option/&quot;&gt;&lt;tt&gt;Option&lt;/tt&gt; type&lt;/a&gt;, which allows for sentinel values to be eliminated from one’s code — and with it some significant fraction of defects. But it’s one thing to use these constructs, and another to begin to develop algebraic types for one’s own code, and I have found the ability for enums to optionally bear data to be incredibly useful. In particular, when parsing a protocol, one is often taking a stream of bytes and turning it into one of several different kinds of things; it is really, really nice to have the type system guide how software should consume the protocol. For example, here’s an enum that I defined when parsing data from ARM’s &lt;a href=&quot;https://developer.arm.com/documentation/ihi0014/q/ETMv3-Signal-Protocol/Packet-types?lang=en&quot;&gt;Embedded Trace Macrocell signal protocol&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
#[derive(Copy, Clone, Debug)]
pub enum ETM3Header {
    BranchAddress { addr: u8, c: bool },
    ASync,
    CycleCount,
    ISync,
    Trigger,
    OutOfOrder { tag: u8, size: u8 },
    StoreFailed,
    ISyncCycleCount,
    OutOfOrderPlaceholder { a: bool, tag: u8 },
    VMID,
    NormalData { a: bool, size: u8 },
    Timestamp { r: bool },
    DataSuppressed,
    Ignore,
    ValueNotTraced { a: bool },
    ContextID,
    ExceptionExit,
    ExceptionEntry,
    PHeaderFormat1 { e: u8, n: u8 },
    PHeaderFormat2 { e0: bool, e1: bool },
}
&lt;/pre&gt;
&lt;p&gt;That variants can have wildly different types (and that some can bear data while others don’t — and some can be structured, while others are tuples) allows for the type definition to closely match the specification, and helps higher-level software consume the protocol correctly.&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;7. Ternary operations&lt;/h3&gt;
&lt;p&gt;In C, the &lt;a href=&quot;https://en.wikipedia.org/wiki/%3F:&quot;&gt;ternary operator&lt;/a&gt; allows for a terse conditional expression that can be used as an rvalue, e.g.:&lt;/p&gt;
&lt;pre&gt;
        x = is_foo ? foo : bar;
&lt;/pre&gt;
&lt;p&gt;This is equivalent to:&lt;/p&gt;
&lt;pre&gt;
        if (is_foo) {
                x = foo;
        } else {
                x = bar;
        }
&lt;/pre&gt;
&lt;p&gt;This construct is particularly valuable when not actually assigning to an lvalue, but when (for example) returning a value or passing a parameter. And indeed, I would estimate that a plurality — if not a majority — of my lifetime-use of the ternary operator has been in &lt;a href=&quot;https://github.com/illumos/illumos-gate/blob/4d503977b10eb9d89d0aa5114bb17fd9861d2177/usr/src/cmd/mdb/common/modules/genunix/kmem.c#L2279-L2281&quot;&gt;arguments to printf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While Rust has no ternary operator &lt;em&gt;per se&lt;/em&gt;, it is &lt;a href=&quot;https://en.wikipedia.org/wiki/Expression-oriented_programming_language&quot;&gt;expression-oriented&lt;/a&gt;: statements have values. So the above example becomes:&lt;/p&gt;
&lt;pre&gt;
        x = if is_foo { foo } else { bar };
&lt;/pre&gt;
&lt;p&gt;That’s a bit more verbose than its C equivalent (though I personally like its explicitness), but it really starts to shine when things can marginally more complicated: nested ternary operators get gnarly in C, but they are easy to follow as simple nested if-then-else statements in Rust. And (of course) &lt;tt&gt;match&lt;/tt&gt; is an expression as well — and I found that I often use &lt;tt&gt;match&lt;/tt&gt; where I would have used a ternary operator in C, with the added benefit that I am forced to deal with every case. As a concrete example, take this code that is printing a slice of little-endian bytes as an 8-bit, 16-bit, or 32-bit quantity depending on a &lt;tt&gt;size&lt;/tt&gt; parameter:&lt;/p&gt;
&lt;pre&gt;
    print!(&quot;{:0width$x} &quot;,
        match size {
            1 =&amp;gt; line[i - offs] as u32,
            2 =&amp;gt; u16::from_le_bytes(slice.try_into().unwrap()) as u32,
            4 =&amp;gt; u32::from_le_bytes(slice.try_into().unwrap()) as u32,
            _ =&amp;gt; {
                panic!(&quot;invalid size&quot;);
            }
        },
        width = size * 2
    );
&lt;/pre&gt;
&lt;p&gt;For me, this is all of the power of the ternary operator, but without its pitfalls!&lt;/p&gt;
&lt;p&gt;An interesting footnote on this: Rust once &lt;em&gt;had&lt;/em&gt; the C-like ternary operator, &lt;a href=&quot;https://github.com/rust-lang/rust/issues/1698&quot;&gt;but removed it&lt;/a&gt;, as the additional syntax &lt;a href=&quot;https://github.com/rust-lang/rfcs/issues/1362#issuecomment-156116312&quot;&gt;didn’t carry its weight&lt;/a&gt;. This pruning in Rust’s early days — the idea that syntax should carry its weight by bringing unique expressive power — has kept Rust from the fate of languages that suffered from debilitating addictions to new syntax and concomitant complexity overdose; when &lt;a href=&quot;https://en.wikipedia.org/wiki/There%27s_more_than_one_way_to_do_it&quot;&gt;there is more than one way to do it&lt;/a&gt; for absolutely everything, a language becomes so baroque as to become &lt;a href=&quot;https://en.wikipedia.org/wiki/Write-only_language&quot;&gt;write-only&lt;/a&gt;!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;8. &lt;tt&gt;paste!&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;This is a small detail, but one that took me a little while to find. As I described in my blog entry two years ago, I have historically made heavy use of the C preprocessor. One (arcane) example of this is the &lt;a href=&quot;https://en.wikipedia.org/wiki/C_preprocessor#Token_concatenation&quot;&gt;&lt;tt&gt;##&lt;/tt&gt; token concatenation operator&lt;/a&gt;, which I have needed only rarely — but found essential in those moments. (Here’s a &lt;a href=&quot;https://github.com/illumos/illumos-gate/blob/28de4f3c3209c81f9a96e2019d44a0b9adcb74cb/usr/src/uts/common/dtrace/dtrace.c#L419-L454&quot;&gt;concrete example&lt;/a&gt;.) As part of a macro that I was developing, I found that I needed the equivalent for Rust, and was delighted to find David Tolnay’s &lt;a href=&quot;https://github.com/dtolnay/paste&quot;&gt;paste crate&lt;/a&gt;. &lt;tt&gt;paste!&lt;/tt&gt; was exactly what I needed — and more testament to both the singular power of Rust’s macro system and David’s knack for build singularly useful things with it!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;9. &lt;tt&gt;unsafe&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;A great strength of Rust is its safety — but something I &lt;em&gt;also&lt;/em&gt; appreciate about it is the escape hatch offered via &lt;a href=&quot;https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html&quot;&gt;&lt;tt&gt;unsafe&lt;/tt&gt;&lt;/a&gt;, whereby certain actions are permitted that are otherwise disallowed. It should go without saying that one should not use &lt;tt&gt;unsafe&lt;/tt&gt; without good reason — but such good reasons can and do exist, and I appreciate that Rust trusts the programmer enough to allow them to take their safety into their own hands. Speaking personally, most of my own uses of &lt;tt&gt;unsafe&lt;/tt&gt; have boiled down to accesses to register blocks on a microcontroller: on the one hand, unsafe because they dereference arbitrary memory — but on the other, safe by inspection. That said, the one time I had to write unsafe code that &lt;em&gt;actually&lt;/em&gt; felt dangerous (namely, &lt;a href=&quot;https://github.com/capstone-rust/capstone-rs/issues/84&quot;&gt;in dealing with an outrageously unsafe C library&lt;/a&gt;), I was definitely in a heightened state of alert! Indeed, my extreme caution around unsafe code reflects how much Rust has changed my disposition: after nearly three decades working in C, I thought I appreciated its level of unsafety, but the truth is I had just become numb to it; to implement in Rust is to eat the fruit from the tree of knowledge of unsafe programs — and to go back to unsafe code is to realize that you were naked all along!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;10. Multi-platform support&lt;/h3&gt;
&lt;p&gt;When Steve Klabnik joined Oxide, we got not only an important new addition to the team, but a new platform as well: Steve is using Windows as his daily driver, in part because of his own personal dedication to keeping Rust multi-platform. While I’m not sure that anything could drive me personally to use Windows (aside: MS-DOS robbed me of my childhood), I do strongly believe in platform heterogeneity. I love that Rust forces the programmer to really think about implicitly platform-specific issues: Rust refuses to paper over the cracks in computing’s foundation for sake of expediency. If this can feel unnecessarily pedantic (can’t I just have a timestamp?!), it is in multi-platform support where this shines: software that I wrote just… worked on Windows. (And where it didn’t, it was despite Rust’s best efforts: when a standard library gives you first-class support to abstract the path separator, you have no one to blame but yourself if you hard-code your own!)&lt;/p&gt;
&lt;p&gt;Making and keeping Rust multi-platform is hard work for everyone involved; but as someone who is currently writing Rust for multiple operating systems (Linux, &lt;a href=&quot;https://twitter.com/papertigerss/status/1314210195178881027&quot;&gt;illumos&lt;/a&gt; and — thanks to Steve — Windows) and multiple ISAs (e.g., x86-64, ARM Thumb-2), I very much appreciate that this is valued by the Rust community!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;11. &lt;tt&gt;anyhow!&lt;/tt&gt; + &lt;tt&gt;RUST_BACKTRACE&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;In my original piece, I praised the error handling of Rust, and that is certainly truer than ever: I simply cannot imagine going back to a world without algebraic types for error handling. The challenge that remained was that there were &lt;a href=&quot;https://blog.yoshuawuyts.com/error-handling-survey/&quot;&gt;several conflicting crates&lt;/a&gt; building different error types and supporting routines, resulting in some confusion as to best practice. All of this left me — like many — simply rolling my own via &lt;tt&gt;Box&amp;lt;dyn Error&amp;gt;&lt;/tt&gt;, which works well enough, but it doesn’t really help a thorny question: when an error emerges deep within a stack of composed software, where did it &lt;em&gt;actually&lt;/em&gt; come from?&lt;/p&gt;
&lt;p&gt;Enter David Tolnay (again!) and his handy &lt;a href=&quot;https://docs.rs/anyhow/&quot;&gt;&lt;tt&gt;anyhow!&lt;/tt&gt; crate&lt;/a&gt;, which pulls together best practices and ties that into the &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2504-fix-error.md&quot;&gt;improvements in the &lt;tt&gt;std::error::Error&lt;/tt&gt; trait&lt;/a&gt; to yield a crate that is powerful without being imposing. Now, when an error emerges from within a stack of software, we can get a crisp chain of causality, e.g.:&lt;/p&gt;
&lt;pre&gt;
readmem failed: A core architecture specific error occurred

Caused by:
    0: Failed to read register CSW at address 0x00000000
    1: Didn't receive any answer during batch processing: [Read(AccessPort(0), 0)]
&lt;/pre&gt;
&lt;p&gt;And we can set &lt;tt&gt;RUST_BACKTRACE&lt;/tt&gt; to get a full backtrace where an error actually originates — which is especially useful when a failure emerges from a surprising place, like this one from a Drop implementation in &lt;a href=&quot;https://github.com/probe-rs/probe-rs&quot;&gt;probe-rs&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
Stack backtrace:
   0: probe_rs::probe::daplink::DAPLink::process_batch
   1: probe_rs::probe::daplink::DAPLink::batch_add
   2: ::read_register
   3: probe_rs::architecture::arm::communication_interface::ArmCommunicationInterface::read_ap_register
   4: probe_rs::architecture::arm::memory::adi_v5_memory_interface::ADIMemoryInterface::read_word_32
   5: &amp;lt;probe_rs::architecture::arm::memory::adi_v5_memory_interface::ADIMemoryInterface as probe_rs::memory::MemoryInterface&amp;gt;::read_word_32
   6: ::get_available_breakpoint_units
   7: &amp;lt;core::iter::adapters::ResultShunt&amp;lt;I&amp;gt; as core::iter::traits::iterator::Iterator&amp;gt;::next
   8: &amp;lt;alloc::vec::Vec as alloc::vec::SpecFromIter&amp;gt;::from_iter
   9: ::drop
  10: core::ptr::drop_in_place
  11: main
  12: std::sys_common::backtrace::__rust_begin_short_backtrace
  13: std::rt::lang_start::{{closure}}
  14: core::ops::function::impls::&amp;lt;impl core::ops::function::FnOnce&amp;lt;A&amp;gt; for &amp;amp;F&amp;gt;::call_once
  15: main
  16: __libc_start_main
  17: _start) })
&lt;/pre&gt;
&lt;h3&gt;12. &lt;tt&gt;asm!&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;When writing software at the hardware/software interface, there is inevitably some degree of direct machine interaction that must be done via assembly. Historically, I have done this via &lt;a href=&quot;https://github.com/illumos/illumos-gate/blob/master/usr/src/uts/intel/dtrace/dtrace_asm.s&quot;&gt;dedicated .s files&lt;/a&gt; — which are inconvenient, but explicit.&lt;/p&gt;
&lt;p&gt;Over the years, compilers added the capacity to drop assembly into C, but the verb here is apt: the resulting assembly was often dropped on its surrounding C like a Looney Tunes anvil, with the interface between the two often being ill-defined, compiler-dependent or both. Rust took this approach at first too, but it suffered from all of the historical problems of inline assembly — which in Rust’s case meant being highly dependent on LLVM implementation details. This in turn meant that it was unlikely to ever become stabilized, which would relegate those who need inline assembly to forever be on nightly Rust.&lt;/p&gt;
&lt;p&gt;Fortunately, Amanieu d’Antras took on this gritty problem, and landed &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2020/06/08/new-inline-asm.html&quot;&gt;a new &lt;tt&gt;asm!&lt;/tt&gt; syntax&lt;/a&gt;. The new syntax is a pleasure to work with, and frankly Rust has now leapfrogged C in terms of ease and robustness of integrating inline assembly!&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;13. String continuations&lt;/h3&gt;
&lt;p&gt;Okay, this is another tiny one, but meaningful for me and one that took me too long to discover. So first, something to know about me: I am an eighty column purist. For me, this has nothing to do with punchcards or whatnot, but rather with &lt;a href=&quot;https://visualdesignfordh.files.wordpress.com/2014/06/type-readability.pdf&quot;&gt;type readability&lt;/a&gt;, which tends to result in 50-100 characters per line — and generally about 70 or so. (I would redirect rebuttals to your bookshelf, where most any line of most any page of most any book will show this to be more or less correct.) So I personally embrace the “hard 80″, and have found that the rework that that can sometimes require results in more readable, better factored code. There is, however, one annoying exception to this: when programmatically printing a string that is itself long, one is left with much less horizontal real estate to work with! In C, this is a snap: string literals without intervening tokens are automatically concatenated, so the single literal can be made by multiple literals across multiple lines. But in Rust, string literals can span multiple lines (generally a feature!), so splitting the line will also embed the newline and any leading whitespace. e.g.:&lt;/p&gt;
&lt;pre&gt;
    println!(
        &quot;...government of the {p}, by the {p}, for the {p},
        shall not perish from the earth.&quot;,
        p = &quot;people&quot;
    );
&lt;/pre&gt;
&lt;p&gt;Results in a newline and some leading whitespace that represent the structure of the program, not the desired structure of the string:&lt;/p&gt;
&lt;pre&gt;
...government of the people, by the people, for the people,
        shall not perish from the earth.
&lt;/pre&gt;
&lt;p&gt;I have historically worked around this by using the &lt;tt&gt;concat!&lt;/tt&gt; macro to concatenate two (or more) static strings, which works well enough, but looks pretty clunky, e.g.:&lt;/p&gt;
&lt;pre&gt;
    println!(
        concat!(
            &quot;...government of the {p}, by the {p}, for the {p}, &quot;,
            &quot;shall not perish from the earth.&quot;
        ),
        p = &quot;people&quot;
    );
&lt;/pre&gt;
&lt;p&gt;As it turns out, I was really overthinking it, though it took an embarrassingly long time to discover: Rust has support for continuation of string literals! If a line containing a string literal ends in a backslash, the literal continues on the next line, &lt;em&gt;with the newline and any leading whitespace elided&lt;/em&gt;. This is one of those really nice things that Rust lets us have; the above example becomes:&lt;/p&gt;
&lt;pre&gt;
    println!(
        &quot;...government of the {p}, by the {p}, for the {p}, \
        shall not perish from the earth.&quot;,
        p = &quot;people&quot;
    );
&lt;/pre&gt;
&lt;p&gt;So much cleaner!&lt;/p&gt;
&lt;h3&gt;14. &lt;tt&gt;--pretty=expanded&lt;/tt&gt; and &lt;tt&gt;cargo expand&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;In C — especially C that makes heavy use of the preprocessor — the &lt;tt&gt;-E&lt;/tt&gt; option can be invaluable: it stops the compilation after the preprocessing phase and dumps the result to standard output. Rust, as it turns out has an equivalent in the &lt;tt&gt;--pretty=expanded&lt;/tt&gt; unstable compiler option. The output out of this can be a little hard on the eyes, so you want to send it through &lt;tt&gt;rustfmt&lt;/tt&gt; — but the result can be really enlightening as to how things actually work. Take, for example, the following program:&lt;/p&gt;
&lt;pre&gt;
fn main() {
    println!(&quot;{} has been quite a year!&quot;, 2020);
}
&lt;/pre&gt;
&lt;p&gt;Here is the &lt;tt&gt;--pretty=expanded&lt;/tt&gt; output:&lt;/p&gt;
&lt;pre&gt;
$ &lt;strong&gt;rustc -Z unstable-options --pretty=expanded year.rs | rustfmt --emit stdout&lt;/strong&gt;
#![feature(prelude_import)]
#![no_std]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
fn main() {
    {
        ::std::io::_print(::core::fmt::Arguments::new_v1(
            &amp;amp;[&quot;&quot;, &quot; has been quite a year!\n&quot;],
            &amp;amp;match (&amp;amp;2020,) {
                (arg0,) =&amp;gt; [::core::fmt::ArgumentV1::new(
                    arg0,
                    ::core::fmt::Display::fmt,
                )],
            },
        ));
    };
}
&lt;/pre&gt;
&lt;p&gt;As an aside, &lt;a href=&quot;https://doc.rust-lang.org/std/macro.format_args.html&quot;&gt;&lt;tt&gt;format_args!&lt;/tt&gt;&lt;/a&gt; is really magical — and a subject that really merits its own blog post from someone with more expertise on the subject. (Yes, this is the Rust blogging equivalent of Chekhov’s gun!)&lt;/p&gt;
&lt;p&gt;With so many great David Tolnay crates, it’s fitting we end on one final piece of software from him: &lt;a href=&quot;https://github.com/dtolnay/cargo-expand&quot;&gt;cargo expand&lt;/a&gt; is a pleasant wrapper around &lt;tt&gt;--pretty=expanded&lt;/tt&gt; that (among other things) allows you to only dump a particular function.&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;The perfect marriage?&lt;/h2&gt;
&lt;p&gt;All of this is not to say that Rust is perfect; there are certainly some minor annoyances (rustfmt: &lt;a href=&quot;https://github.com/rust-lang/rustfmt/issues/4306&quot;&gt;looking at you&lt;/a&gt;!), and some forthcoming features that I eagerly await (e.g., safe transmutes, const generics). And in case it needs to be said: just because Rust makes it easier to write robust software doesn’t mean that it makes it impossible to write shoddy software!&lt;/p&gt;
&lt;p&gt;Dwelling on the imperfections, though, would be a mistake. When getting into a long-term relationship with anything — be it a person, or a company, or a technology — it can be tempting to look at its surface characteristics: does this person, or company or technology have &lt;em&gt;attributes&lt;/em&gt; that I do or don’t like? And those are important, but they can be overemphasized: because things change over time, we sometimes look too much at what things &lt;em&gt;are&lt;/em&gt; rather than &lt;em&gt;what guides them&lt;/em&gt;. And in this regard, my relationship with Rust feels particularly sound: it feels like my values and &lt;a href=&quot;https://www.infoq.com/presentations/rust-tradeoffs/&quot;&gt;Rust’s values&lt;/a&gt; are a good fit for one another — and that my growing relationship with Rust will be one of the most important of my career!&lt;/p&gt;


&lt;br /&gt;</description>
<pubDate>Sun, 11 Oct 2020 17:31:14 +0000</pubDate>
<dc:creator>psanford</dc:creator>
<og:image>http://dtrace.org/blogs/ahl/files/2011/10/icon.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://dtrace.org/blogs/bmc/2020/10/11/rust-after-the-honeymoon/</dc:identifier>
</item>
<item>
<title>We Need a Nuclear New Deal, Not a Green New Deal</title>
<link>https://www.thebellows.org/we-need-a-nuclear-new-deal-not-a-green-new-deal/</link>
<guid isPermaLink="true" >https://www.thebellows.org/we-need-a-nuclear-new-deal-not-a-green-new-deal/</guid>
<description>&lt;p class=&quot;has-drop-cap&quot;&gt;In July, presidential candidate Joe Biden released his climate and infrastructure plan, “&lt;a href=&quot;https://joebiden.com/clean-energy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;The Biden Plan to Build a Modern, Sustainable Infrastructure and an Equitable Clean Energy Future&lt;/a&gt;.” From the automotive industry, to infrastructure, to addressing racial inequality, to labor protections, to a massive renewable energy build out, Biden aims to remake the American industrial base, right past wrongs, and generate a gobsmacking 10 million “good union jobs” in the process. For comparison, the Works Progress Administration under the New Deal created &lt;a href=&quot;https://www.nytimes.com/1943/07/01/archives/wpa-pays-up-and-quits-turns-back-130000000-after-spending-10-12.html&quot;&gt;8.5 million jobs&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Biden’s capacious plan has raised eyebrows. Some believe it speaks to his “&lt;a href=&quot;https://www.ft.com/content/f207fc7e-2afc-407c-beda-6e7e38100739&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;deceptive radicalism&lt;/a&gt;;” others &lt;a href=&quot;https://www.theguardian.com/commentisfree/2020/jul/20/joe-biden-has-endorsed-the-green-new-deal-in-all-but-name&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;rightly point out&lt;/a&gt; that he’s “endorsed the Green New Deal in all but name.” Both Biden’s plan and the Green New Deal rely heavily on “variable renewables” (i.e. wind and solar, the output of which varies with the weather) to decarbonize the economy. Renewables like solar and wind, which don’t create greenhouse gas emissions, play a starring role in what is called an “energy mix”: a combination of existing nuclear energy, variable renewables, hydropower, and &lt;a href=&quot;https://www.eia.gov/energyexplained/biomass/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;biomass&lt;/a&gt;. Unfortunately, the view of renewables as a naturally harmonious, carbon-neutral technology is more romantic than scientific.&lt;/p&gt;
&lt;p&gt;Take California as an example. Since 2001, the state has sought to replace its fossil fuel energy with renewables. The subsequent instability of their electrical grid &lt;a href=&quot;https://www.mercurynews.com/2020/08/17/california-blackouts-expose-problems-in-states-transition-to-clean-energy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;caused blackouts&lt;/a&gt; during a heatwave this August; when wildfires broke out the following month, a blanket of ash blotted out the sun in some places, cutting the state’s solar energy output by &lt;a href=&quot;https://www.eenews.net/stories/1063713459&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;one-third&lt;/a&gt;. &lt;/p&gt;
&lt;div id=&quot;block_5f6e335ef7b77&quot; class=&quot;pull-right block-quote&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Any climate plan that doesn’t prioritize nuclear is destined to exacerbate climate problems.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;But the grid’s efficacy is only part of the problem. Energy in California is incredibly expensive for ratepayers, despite the &lt;a href=&quot;https://www.forbes.com/sites/brianmurray1/2019/06/17/the-paradox-of-declining-renewable-costs-and-rising-electricity-prices/#4311f37d61d5&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;declining cost&lt;/a&gt; of wind and solar installations. Since the state further &lt;a href=&quot;https://energyathaas.wordpress.com/2017/02/21/breaking-news-california-electricity-prices-are-high/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;expanded&lt;/a&gt; its variable renewables portfolio between 2011 and 2019, consumer electricity prices &lt;a href=&quot;https://www.theintelligencer.net/opinion/local-columns/2019/08/mandated-wind-solar-power-makes-electric-bills-soar/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;have leapt 30%&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;California could be a preview of what American life will look like if Biden’s plan or the Green New Deal succeeds, but it doesn’t have to be this way. Had California spent its money on nuclear energy instead of renewables, it could have &lt;a href=&quot;https://environmentalprogress.org/big-news/2018/9/11/california-and-germany-decarbonization-with-alternative-energy-investments&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;decarbonized by now&lt;/a&gt;. That is why any climate plan that doesn’t prioritize nuclear above all other energy sources is destined to exacerbate climate problems rather than solve them. &lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;Nuclear Superiority&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;Much of the anxiety about nuclear energy is due to the displacement of &lt;a href=&quot;https://blogs.scientificamerican.com/guest-blog/the-rise-of-nuclear-fear-how-we-learned-to-fear-the-bomb/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Cold War-era fears&lt;/a&gt; of military nuclear weapons. Fortunately, despite their shared history and basic science, nuclear weapons and civilian nuclear energy couldn’t be more dissimilar. Reactors from civilian plants don’t blow up &lt;a href=&quot;https://science.fusion4freedom.com/why-a-nuclear-reactor-cannot-explode-like-an-atom-bomb/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;like atomic bombs&lt;/a&gt; and nuclear waste isn’t a glowing toxic ooze.&lt;/p&gt;
&lt;p&gt;Throughout seven decades of service, nuclear power has consistently been proven to be &lt;a href=&quot;https://ourworldindata.org/safest-sources-of-energy&quot;&gt;safer&lt;/a&gt; than every other mass scale form of energy production. In one year, residents who live near a nuclear power plant are exposed to less radiation than anyone who has eaten &lt;a href=&quot;https://www.universityofcalifornia.edu/longform/what-know-you-go-bananas-about-radiation&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;a single banana&lt;/a&gt;. Though it may sound counterintuitive, because elements such as uranium and plutonium have such long half-lives, the radiation they emit is low enough to safely hold in your hand. Nuclear is also far and away the &lt;a href=&quot;https://www.energy.gov/ne/articles/nuclear-power-most-reliable-energy-source-and-its-not-even-close&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;most reliable&lt;/a&gt; form of energy generation in the US, which makes it ideal for providing baseload power for the electrical grid. Nuclear reactors routinely spend years in continuous operation. The current fleet of nuclear power plants have no technical limits that prevent them from being in service for &lt;a href=&quot;https://www.energy.gov/ne/articles/whats-lifespan-nuclear-reactor-much-longer-you-might-think&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;80 years&lt;/a&gt;, if not a century.&lt;/p&gt;
&lt;div id=&quot;block_5f6e33cff7b78&quot; class=&quot;pull-left block-quote&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;Waste from the entire history of American nuclear power can fit within an area the size of a football field.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://grist.org/energy/nuclear-powers-big-new-idea-is-really-small/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Many nuclear advocates&lt;/a&gt; direct attention to the innovative (though pointedly market-based) nuclear technology breakthroughs that always seem to be &lt;a href=&quot;https://www.washingtonexaminer.com/policy/energy/nuclear-advocates-fret-as-first-maker-of-small-reactors-encounters-trouble&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;years away&lt;/a&gt; from commercialization and are dependent on massive, inconstant &lt;a href=&quot;https://thebulletin.org/2019/06/what-will-be-required-for-a-significant-expansion-of-global-nuclear-energy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;government grants&lt;/a&gt;. As impressive and potentially useful as these developments may be, many existing reactors in the global fleet have capabilities that could be considered “advanced” in and of themselves: the currently operating &lt;a href=&quot;https://www.world-nuclear-news.org/NN-Russian-fast-reactor-reaches-full-power-1708165.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;BN-800 plant&lt;/a&gt; in Russia is a fast breeder reactor, which means it can use nuclear waste as fuel, and the 1950s design &lt;a href=&quot;https://inis.iaea.org/collection/NCLCollectionStore/_Public/14/720/14720546.pdf&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;CANDU reactor&lt;/a&gt; is small enough to be considered “modular” and can also use unenriched uranium or thorium as fuel. Nuclear power works now and works well. &lt;/p&gt;
&lt;img src=&quot;https://lh5.googleusercontent.com/y6D0-PCEyOjxETliFjWqAl34h-jcyJ082pxS2egDt5IhFhUi88unOp8W7IiZsqt0PT7fDOFqfi37ZKeQBtGMsL3LGYJsfbaHmZ2VL9EIwywgQY188bVLChrvwv01kTcaa_dyUgJC&quot; alt=&quot;&quot;/&gt;&lt;p&gt;Probably the biggest bugbear for anti-nuclear environmentalists is the question of radioactive waste disposal. But not all nuclear waste is created equal; in fact, most is composed of low-level waste (LLW) made up of protective clothing, cleaning materials, equipment, and tools exposed to neutron radiation. LLW accounts for &lt;a href=&quot;https://www.world-nuclear.org/nuclear-essentials/what-is-nuclear-waste-and-what-do-we-do-with-it.aspx&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;90% of nuclear waste by volume but only 1% of its total radioactivity&lt;/a&gt; and can be disposed of safely and permanently. After about half a decade of providing carbon-free energy in the reactor core, the uranium fuel itself must be replaced. This high-level waste (HLW) is the highly radioactive and long-living stuff that you see caricatured in popular imagination. Yet this type of waste comprises &lt;a href=&quot;https://www.world-nuclear.org/information-library/nuclear-fuel-cycle/nuclear-wastes/radioactive-wastes-myths-and-realities.aspx&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;only 3%&lt;/a&gt; of total nuclear waste. To put this in perspective, all of the waste from the entire history of American nuclear power plants can fit within an area &lt;a href=&quot;https://environmentalprogress.org/the-complete-case-for-nuclear&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;the size of a football field&lt;/a&gt;, 50 feet high—half the height of a single wind turbine. &lt;/p&gt;
&lt;img src=&quot;https://lh3.googleusercontent.com/YZgc8FsRYP6AOHeHwILcDeeYKwkU_PHGjVdn7kcAyhwEPIeJl9TVfVn1m2cthkIzkSX8b5iI4IAmACz21QACd3O-f2z9vbF3gibNaLO1owaKVcTRT8KqN49I9EdjSw_UHTQ5tHj0&quot; alt=&quot;&quot;/&gt;Graphic provided by &lt;a href=&quot;https://www.linkedin.com/in/erikvogtchicago/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Erik Vogt&lt;/a&gt;
&lt;p&gt;Meanwhile, weather-dependent renewables require 400-450 times the land to produce the same amount of electricity as nuclear. Leveling an area of land larger than almost a third of all U.S. states for energy production might be an acceptable compromise to some, but it does not solve the weather-dependent nature of those sources. Further complicating matters is the fact renewable energy must be stored for later, which requires the use of lithium batteries. But the sheer scale of mining and land use required, and the fact that it involves the domination and exploitation of predominantly developing countries, makes the choice not only inefficient, but unethical. With the abundant uranium reserves already in the United States today, we have the capacity to &lt;a href=&quot;https://www.energy.gov/ne/articles/building-uranium-reserve-first-step-preserving-us-nuclear-fuel-cycle&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;cultivate an industry&lt;/a&gt; to domestically fuel our reactors right now.&lt;/p&gt;
&lt;div data-style=&quot;right&quot; class=&quot;patreon-banner&quot;&gt;
&lt;h4 class=&quot;patreon-banner__title&quot;&gt;We are 100% funded by readers like you.&lt;/h4&gt;
&lt;h3 class=&quot;patreon-banner__subtitle&quot;&gt;Subscribe to our Patreon today to keep the Bellows alive.&lt;/h3&gt;
&lt;a class=&quot;patreon-banner__button&quot; href=&quot;https://www.patreon.com/thebellows&quot; target=&quot;_blank&quot;&gt;Subscribe&lt;/a&gt;

&lt;/div&gt;
&lt;h5&gt;&lt;strong&gt;The Nuclear New Deal&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;No nuclear energy program has ever launched without heavy state intervention—the capital costs are just too high for private entities to take on. The Biden campaign &lt;a href=&quot;https://joebiden.com/clean-energy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;says&lt;/a&gt; it wants to rely on “innovation” and “rapid commercialization” to drive down costs for nuclear energy, but that means praying to the gods of Silicon Valley for rain. &lt;/p&gt;
&lt;p&gt;The price-trolling is disingenuous. Other countries, especially those that at least partially subsidize their nuclear industries &lt;a href=&quot;https://thebulletin.org/2019/06/why-nuclear-power-plants-cost-so-much-and-what-can-be-done-about-it/#:~:text=The%20design%20and%20construction%20of,costs%2C%20which%20can%20become%20significant.&amp;amp;text=Because%20of%20its%20high%20construction,plants%20by%20the%20discount%20rate.&quot;&gt;pay&lt;/a&gt; &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://thebulletin.org/2019/06/why-nuclear-power-plants-cost-so-much-and-what-can-be-done-about-it/#:~:text=The%20design%20and%20construction%20of,costs%2C%20which%20can%20become%20significant.&amp;amp;text=Because%20of%20its%20high%20construction,plants%20by%20the%20discount%20rate.&quot; target=&quot;_blank&quot;&gt;l&lt;/a&gt;&lt;a href=&quot;https://thebulletin.org/2019/06/why-nuclear-power-plants-cost-so-much-and-what-can-be-done-about-it/#:~:text=The%20design%20and%20construction%20of,costs%2C%20which%20can%20become%20significant.&amp;amp;text=Because%20of%20its%20high%20construction,plants%20by%20the%20discount%20rate.&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;ess&lt;/a&gt; than we do for nuclear. Russia’s Rosatom, for example, &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://www.rbth.com/economics/2015/02/27/why_electricity_from_russian_nuclear_power_plants_is_cheaper_41689&quot; target=&quot;_blank&quot;&gt;benefits&lt;/a&gt; from its industrial capacity and experience, the two ingredients necessary for cheaper nuclear production. Unlike most industries, innovation actually makes nuclear more expensive. As researchers Michel Berthélemy and Lina Escobar Rangel have &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://hal.archives-ouvertes.fr/hal-00956292/document&quot; target=&quot;_blank&quot;&gt;pointed out&lt;/a&gt;, construction costs can only be reduced by mass-producing identical reactors, assembly-line style.&lt;/p&gt;
&lt;p&gt;In order for this to work in the United States, the federal government could consolidate the nuclear arms of General Atomics, General Electric, Westinghouse, and others into a single public corporation. This federal entity would be mandated to decarbonize the American electricity grid. &lt;/p&gt;
&lt;p&gt;First, the US will need to commit to an industrial policy like those of &lt;a href=&quot;https://www.google.com/books/edition/The_Radiance_of_France_new_edition/8yl2BbxqFY0C?hl=en&amp;amp;gbpv=1&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;France&lt;/a&gt; and &lt;a href=&quot;https://www.world-nuclear.org/information-library/country-profiles/countries-o-s/south-korea.aspx#:~:text=History%20of%20the%20nuclear%20sector,was%20established%20by%20the%20government.&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;South Korea&lt;/a&gt;, which allowed them to create their own nuclear programs to manufacture the necessary reactors. These reactors (and their plants) will need to be standardized if they’re going to recoup the aforementioned benefits of repetitive construction. A &lt;a href=&quot;https://thebulletin.org/2019/06/what-will-be-required-for-a-significant-expansion-of-global-nuclear-energy/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;substantial number&lt;/a&gt; of new reactors will need to be built per year, so American industry would have to increase its construction capacity, especially to provide the necessary &lt;a href=&quot;https://www.industryweek.com/the-economy/environment/article/21946577/us-cedes-capability-for-largest-nuclear-forgings&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;heavy forging&lt;/a&gt;. Reactors already in service should undergo safety reviews that extend their licensing. They should also undergo refurbishment and retrofitting with technical upgrades to increase efficiency and safety. Alongside the reactor buildout, &lt;a href=&quot;https://cnpp.iaea.org/countryprofiles/France/France.htm&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;a strong domestic fuel cycle industry&lt;/a&gt; to provide the uranium would need to be developed.&lt;/p&gt;
&lt;p&gt;Second, the US will have to train a workforce. Staffing these new plants would strain the capacity of the currently existing nuclear engineering programs in both academia and industry, which need to pass along decades of expertise to a new generation of nuclear workers. In the original spirit of the &lt;a href=&quot;https://www.nsf.gov/about/history/nsf50/nsf8816.jsp#chapter3&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;National Defense Education Act of 1958&lt;/a&gt;, the federal government should forgo market incentives and directly award government grants to higher education institutions, &lt;a href=&quot;https://www.nrc.gov/reactors/operator-licensing/licensing-process.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;vocational schools&lt;/a&gt;, and students in nuclear energy and related fields to scale up along with the growing industry as quickly as possible. Not counting construction, and taking the &lt;a href=&quot;https://www.sanluisobispo.com/news/business/article121404573.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Diablo Canyon plant&lt;/a&gt; as a model, an estimated 250,000 workers will be needed to operate some 230 of these plants &lt;em&gt;in perpetuity&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;If the American rollout of its 21st century nuclear fleet is in line with &lt;a href=&quot;https://thebreakthrough.org/issues/energy/the-green-new-deal-and-the-legacy-of-public-power&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;historical nuclearizations&lt;/a&gt;, the annual decarbonization rate should end up being 0.5% less than the 5% per-year “&lt;a href=&quot;https://www.stockholmresilience.org/research/research-news/2017-03-23-curbing-emissions-with-a-new-carbon-law.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;carbon law&lt;/a&gt;” emissions reduction suggested by  the Stockholm Resilience Centre. This steep rate would reduce the risk of blowing past our carbon budget to stay under 2°C by 2050.&lt;/p&gt;
&lt;p&gt;But the emissions reduction does not stop there. Once the energy grid is nuclear and carbon-free, we could then turn our attention to producing district heat, high-temperature industrial heat, and hydrogen and ammonia production. We could also decarbonize transport and agriculture. Decarbonizing electricity would only be the first part of a larger goal of completely decarbonizing the US.&lt;/p&gt;
&lt;p&gt;Since the 1970s, America has seen rapid deindustrialization, offshoring, and an ever-strengthening sense of diminishing expectations. Plans that rely on renewables speak to a waning sense of confidence in the national ability to overcome problems. Whereas we once dreamed of a future of plenty for all, many wonder how much will be left to go around. &lt;/p&gt;
&lt;p&gt;But a carbon-free and abundant future is possible. We must commit ourselves to an American Prometheanism, a commitment to persevere and excel through even the toughest of problems by virtue of industry and pursuit of the public good. A Green Nuclear Deal would be the realization of this dream. &lt;/p&gt;
&lt;div class=&quot;bellows-signature&quot;&gt;&lt;img src=&quot;https://www.thebellows.org/wp-content/themes/bellows/assets/img/b.png&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 11 Oct 2020 15:23:37 +0000</pubDate>
<dc:creator>oedmarap</dc:creator>
<og:type>article</og:type>
<og:title>We Need a Nuclear New Deal, Not a Green New Deal - The Bellows</og:title>
<og:description>We already have the technology to stave off climate change, what we need now is the political will to use it.</og:description>
<og:url>https://www.thebellows.org/we-need-a-nuclear-new-deal-not-a-green-new-deal/</og:url>
<og:image>https://www.thebellows.org/wp-content/uploads/2020/09/RIAN_archive_168114_Technical_control_at_Atommash_plant2.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.thebellows.org/we-need-a-nuclear-new-deal-not-a-green-new-deal/</dc:identifier>
</item>
<item>
<title>A Note about Spotify Transfers</title>
<link>https://songshift.com/blog/spotify_transfers</link>
<guid isPermaLink="true" >https://songshift.com/blog/spotify_transfers</guid>
<description>&lt;p&gt;Unfortunately, as of SongShift v5.1.2, you will no longer be able to create transfers from Spotify to another music service. We understand this will be a disappointment for a lot of you. We wish we didn't have to.&lt;/p&gt;&lt;h6 id=&quot;whythen&quot;&gt;Why then?&lt;/h6&gt;
&lt;p&gt;The Spotify Developer Platform Team reached out and let us know we'd need to remove transferring from their service to a competing music service or have our API access revoked due to TOS violation. While this is not the news we wanted to hear, we respect their decision.&lt;/p&gt;
&lt;h6 id=&quot;asweadvance&quot;&gt;As we advance&lt;/h6&gt;
&lt;p&gt;To continue to provide some level of support for Spotify, we'll still be supporting transferring from other services to Spotify.&lt;/p&gt;
&lt;p&gt;We will continue to roll out planned features for SongShift. Some quality of life improvements, some new supported services, and other things best left a surprise.&lt;/p&gt;
&lt;p&gt;*Any new features will have the same limitation of not supporting transfers out of Spotify.&lt;/p&gt;
&lt;h6 id=&quot;closingwords&quot;&gt;Closing Words&lt;/h6&gt;
&lt;p&gt;This update is a painful one to push out to you all. We hope to continue to be of help with all your other music transferring needs.&lt;/p&gt;
</description>
<pubDate>Sun, 11 Oct 2020 14:23:54 +0000</pubDate>
<dc:creator>davidbarker</dc:creator>
<og:url>https://songshift.com/blog/spotify_transfers</og:url>
<og:title>A Note about Spotify Transfers</og:title>
<og:description>Find out more about how Spotify transfers are changing in SongShift.</og:description>
<og:image>https://songshift.com/images/icon_1024x1024.png</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://songshift.com/blog/spotify_transfers</dc:identifier>
</item>
<item>
<title>There are only four billion floats, so test them all (2014)</title>
<link>https://randomascii.wordpress.com/2014/01/27/theres-only-four-billion-floatsso-test-them-all/</link>
<guid isPermaLink="true" >https://randomascii.wordpress.com/2014/01/27/theres-only-four-billion-floatsso-test-them-all/</guid>
<description>&lt;p&gt;A few months ago I saw a blog post touting fancy new SSE3 functions for implementing vector &lt;em&gt;floor&lt;/em&gt;, &lt;em&gt;ceil&lt;/em&gt;, and &lt;em&gt;round&lt;/em&gt; functions. There was the inevitable proud proclaiming of impressive performance and correctness. However the &lt;em&gt;ceil&lt;/em&gt; function gave the wrong answer for many numbers it was supposed to handle, including odd-ball numbers like ‘one’.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;floor&lt;/em&gt; and &lt;em&gt;round&lt;/em&gt; functions were similarly flawed. The reddit discussion of these problems then discussed two other sets of vector math functions. Both of them were similarly buggy.&lt;/p&gt;
&lt;p&gt;Fixed versions of some of these functions were produced, and they are greatly improved, but some of them still have bugs.&lt;/p&gt;
&lt;p&gt;Floating-point math is hard, but testing these functions is trivial, and fast. Just do it.&lt;/p&gt;

&lt;p&gt;The functions &lt;em&gt;ceil,&lt;/em&gt; &lt;em&gt;floor&lt;/em&gt;, and &lt;em&gt;round&lt;/em&gt; are particularly easy to test because there are presumed-good CRT functions that you can check them against. And, you can test every float bit-pattern (all four billion!) in about ninety seconds. It’s actually very easy. Just iterate through all four-billion (technically 2^32) bit patterns, call your test function, call your reference function, and make sure the results match. Properly comparing &lt;a href=&quot;https://randomascii.wordpress.com/2012/04/21/exceptional-floating-point/&quot;&gt;NaN&lt;/a&gt; and zero results takes a bit of care but it’s still not too bad.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aside: floating-point math has a reputation for producing results that are unpredictably wrong. This reputation is then used to justify sloppiness, which then justifies the reputation. In fact IEEE floating-point math is designed to, whenever practical, give the best possible answer (correctly rounded), and functions that extend floating-point math should follow this pattern, and only deviate from it when it is clear that correctness is too expensive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Later on I’ll show the implementation for my &lt;em&gt;ExhaustiveTest&lt;/em&gt; function but for now here is the function declaration:&lt;/p&gt;
&lt;pre class=&quot;brush: cpp; light: true; title: ; notranslate&quot; title=&quot;&quot;&gt;
typedef float(*Transform)(float);

// Pass in a range of float representations to compare against.
// start and stop are inclusive. Pass in 0, 0xFFFFFFFF to scan all
// floats. The floats are iterated through by incrementing
// their integer representation.
void ExhaustiveTest(uint32_t start, uint32_t stop, Transform TestFunc,
            Transform RefFunc, const char* desc)
&lt;/pre&gt;
&lt;p&gt;Typical test code that uses ExhaustiveTest is shown below. In this case I am testing the original SSE 2 &lt;em&gt;_mm_ceil_ps2&lt;/em&gt; function that started the discussion, with a wrapper to translate between float and __m128. The function didn’t claim to handle floats outside of the range of 32-bit integers so I restricted the test range to just those numbers:&lt;/p&gt;
&lt;pre class=&quot;brush: cpp; light: true; title: ; notranslate&quot; title=&quot;&quot;&gt;
float old_mm_ceil_ps2(float f)
{
    __m128 input = { f, 0, 0, 0 };
    __m128 result = old_mm_ceil_ps2(input);
    return result.m128_f32[0];
}

int main()
{
    // This is the biggest number that can be represented in
    // both float and int32_t. It’s 2^31-128.
    Float_t maxfloatasint(2147483520.0f);
    const uint32_t signBit = 0×80000000;
    ExhaustiveTest(0, (uint32_t)maxfloatasint.i, old_mm_ceil_ps2, ceil,
                &quot;old _mm_ceil_ps2&quot;);
    ExhaustiveTest(signBit, signBit | maxfloatasint.i, old_mm_ceil_ps2, ceil,
                &quot;old _mm_ceil_ps2&quot;);
}
&lt;/pre&gt;
&lt;p&gt;Note that this code uses the Float_t type to get the integer representation of a particular float. I described Float_t years ago in &lt;a href=&quot;https://randomascii.wordpress.com/2012/01/11/tricks-with-the-floating-point-format/&quot;&gt;Tricks With the Floating-Point Format&lt;/a&gt; .&lt;/p&gt;
&lt;h2&gt;How did the original functions do?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;_mm_ceil_ps2&lt;/em&gt; claimed to handle all numbers in the range of 32-bit integers, which is already ignoring about 38% of floating-point numbers. Even in that limited range it had 872,415,233 errors – that’s a 33% failure rate over the 2,650,800,128 floats it tried to handle. &lt;em&gt;_mm_ceil_ps2&lt;/em&gt; got the wrong answer for all numbers between 0.0 and &lt;em&gt;FLT_EPSILON&lt;/em&gt; * 0.25, all odd numbers below 8,388,608, and a few other numbers. A fixed version was quickly produced after the errors were pointed out.&lt;/p&gt;
&lt;p&gt;Another set of vector math functions that was discussed was DirectXMath. The 3.03 version of DirectXMath’s &lt;em&gt;XMVectorCeiling&lt;/em&gt; claimed to handle all floats. However it failed on lots of tiny numbers, and on most odd numbers. In total there were 880,803,839 errors out of the 4,294,967,296 numbers (all floats) that it tried to handle. The one redeeming point for &lt;em&gt;XMVectorCeiling&lt;/em&gt; is that these bugs have been known and fixed for a while, but you need the latest Windows SDK (comes with VS 2013) in order to get the fixed 3.06 version. And even the 3.06 version doesn’t entirely fix &lt;em&gt;XMVectorRound&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The LiraNuna / glsl-sse2 family of functions were the final set of math functions that were mentioned. The LiraNuna &lt;em&gt;ceil&lt;/em&gt; function claimed to handle all floats but it gave the wrong answer on 864,026,625 numbers. That’s better than the others, but not by much.&lt;/p&gt;
&lt;p&gt;I didn’t exhaustively test the &lt;em&gt;floor&lt;/em&gt; and &lt;em&gt;round&lt;/em&gt; functions because it would complicate this article and wouldn’t add significant value. Suffice it to say that they have similar errors.&lt;/p&gt;
&lt;h2&gt;Sources of error&lt;/h2&gt;
&lt;p&gt;Several of the &lt;em&gt;ceil&lt;/em&gt; functions were implemented by adding 0.5 to the input value and rounding to nearest. This does not work. This technique fails in several ways:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Round to nearest even is the default IEEE rounding mode. This means that 5.5 rounds to 6, and 6.5 also rounds to 6. That’s why many of the &lt;em&gt;ceil&lt;/em&gt; functions fail on odd integers. This technique also fails on the largest float smaller than 1.0 because this plus 0.5 gives 1.5 which rounds to 2.0.&lt;/li&gt;
&lt;li&gt;For very small numbers (less than about &lt;em&gt;FLT_EPSILON&lt;/em&gt; * 0.25) adding 0.5 gives 0.5 exactly, and this then rounds to zero. Since about 40% of the positive floating-point numbers are smaller than FLT_EPSILON*0.25 this results in a lot of errors – over 850 million of them!&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The 3.03 version of DirectXMath’s &lt;em&gt;XMVectorCeiling&lt;/em&gt; used a variant of this technique. Instead of adding 0.5 they added &lt;em&gt;g_XMOneHalfMinusEpsilon&lt;/em&gt;. Perversely enough the value of this constant doesn’t match its name – it’s actually one half minus 0.75 times &lt;em&gt;FLT_EPSILON&lt;/em&gt;. Curious. Using this constant avoids errors on 1.0f but it still fails on small numbers and on odd numbers greater than one.&lt;/p&gt;
&lt;h2&gt;NaN handling&lt;/h2&gt;
&lt;p&gt;The fixed version of &lt;em&gt;_mm_ceil_ps2&lt;/em&gt; comes with a handy template function that can be used to extend it to support the full range of floats. Unfortunately, due to an implementation error, it fails to handle NaNs. This means that if you call &lt;em&gt;_mm_safeInt_ps&amp;lt;new_mm_ceil_ps2&amp;gt;()&lt;/em&gt; with a NaN then you get a normal number back. Whenever possible NaNs should be ‘sticky’ in order to aid in tracking down the errors that produce them.&lt;/p&gt;
&lt;p&gt;The problem is that the wrapper function uses &lt;em&gt;cmpgt&lt;/em&gt; to create a mask that it can use to retain the value of large floats – this mask is all ones for large floats. However since all comparisons with NaNs are false this mask is zero for NaNs, so a garbage value is returned for them. If the comparison is switched to &lt;em&gt;cmple&lt;/em&gt; and the two mask operations (&lt;em&gt;and&lt;/em&gt; and &lt;em&gt;andnot&lt;/em&gt;) are switched then NaN handling is obtained for free. Sometimes correctness doesn’t cost anything. Here’s a fixed version:&lt;/p&gt;
&lt;pre class=&quot;brush: cpp; light: true; title: ; notranslate&quot; title=&quot;&quot;&gt;
template&amp;lt; __m128 (FuncT)(const __m128&amp;amp;) &amp;gt;
inline __m128 _mm_fixed_safeInt_ps(const __m128&amp;amp; a){
    __m128 v8388608 = *(__m128*)&amp;amp;_mm_set1_epi32(0x4b000000);
    __m128 aAbs = _mm_and_ps(a, *(__m128*)&amp;amp;_mm_set1_epi32(0x7fffffff));
    // In order to handle NaNs correctly we need to use le instead of gt.
    // Using le ensures that the bitmask is clear for large numbers *and*
    // NaNs, whereas gt ensures that the bitmask is set for large numbers
    // but not for NaNs.
    __m128 aMask = _mm_cmple_ps(aAbs, v8388608);
    // select a if greater then 8388608.0f, otherwise select the result of
    // FuncT. Note that 'and' and 'andnot' were reversed because the
    // meaning of the bitmask has been reversed.
    __m128 r = _mm_xor_ps(_mm_andnot_ps(aMask, a), _mm_and_ps(aMask, FuncT(a)));
    return r;
}
&lt;/pre&gt;
&lt;p&gt;With this fix and the latest version of &lt;em&gt;_mm_ceil_ps2&lt;/em&gt; it becomes possible to handle all 4 billion floats correctly.&lt;/p&gt;
&lt;h2&gt;Conventional wisdom Nazis&lt;/h2&gt;
&lt;p&gt;Conventional wisdom says that you should never compare two floats for equality – you should always use an epsilon. Conventional wisdom is wrong.&lt;/p&gt;
&lt;p&gt;I’ve written in great detail about how to compare floating-point values using an epsilon, but there are times when it is just not appropriate. Sometimes there really is an answer that is correct, and in those cases anything less than perfection is just sloppy.&lt;/p&gt;
&lt;p&gt;So yes, I’m proudly comparing floats to see if they are equal.&lt;/p&gt;
&lt;h2&gt;How did the fixed versions do?&lt;/h2&gt;
&lt;p&gt;After the flaws in these functions were pointed out fixed versions of &lt;em&gt;_mm_ceil_ps2&lt;/em&gt; and its sister functions were quickly produced and these new versions work better.&lt;/p&gt;
&lt;p&gt;I didn’t test every function, but here are the results from the final versions of functions that I did test:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;ul&gt;&lt;li&gt;XMVectorCeiling 3.06: zero failures&lt;/li&gt;
&lt;li&gt;XMVectorFloor 3.06: zero failures&lt;/li&gt;
&lt;li&gt;XMVectorRound 3.06: 33,554,432 errors on incorrectly handled boundary conditions&lt;/li&gt;
&lt;li&gt;_mm_ceil_ps2 with _mm_safeInt_ps: 16777214 failures on NaNs&lt;/li&gt;
&lt;li&gt;_mm_ceil_ps2 with _mm_fixed_safeInt_ps: zero failures&lt;/li&gt;
&lt;li&gt;LiraNuna ceil: this function was not updated so it still has&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;864,026,625 failures.&lt;/p&gt;
&lt;p&gt;Exhaustive testing works brilliantly for functions that take a single float as input. I used this to great effect when rewriting all of the CRT math functions for a game console some years ago. On the other hand, if you have a function that takes multiple floats or a double as input then the search space is too big. In that case a mixture of test cases for suspected problem areas and random testing should work. A trillion tests can complete in a reasonable amount of time, and it should catch most problems.&lt;/p&gt;
&lt;h2&gt;Test code&lt;/h2&gt;
&lt;p&gt;Here’s a simple function that can be used to test a function across all floats. The sample code linked below contains a more robust version that tracks how many errors are found.&lt;/p&gt;
&lt;pre class=&quot;brush: cpp; light: true; title: ; notranslate&quot; title=&quot;&quot;&gt;
// Pass in a uint32_t range of float representations to test.
// start and stop are inclusive. Pass in 0, 0xFFFFFFFF to scan all
// floats. The floats are iterated through by incrementing
// their integer representation.
void ExhaustiveTest(uint32_t start, uint32_t stop, Transform TestFunc,
    Transform RefFunc, const char* desc)
{
    printf(&quot;Testing %s from %u to %u (inclusive).\n&quot;, desc, start, stop);
    // Use long long to let us loop over all positive integers.
    long long i = start;
    while (i &amp;lt;= stop)
    {
        Float_t input;
        input.i = (int32_t)i;
        Float_t testValue = TestFunc(input.f);
        Float_t refValue = RefFunc(input.f);
        // If the results don’t match then report an error.
        if (testValue.f != refValue.f &amp;amp;&amp;amp;
            // If both results are NaNs then we treat that as a match.
            (testValue.f == testValue.f || refValue.f == refValue.f))
        {
            printf(&quot;Input %.9g, expected %.9g, got %1.9g        \n&quot;,
            input.f, refValue.f, testValue.f);
        }

        ++i;
    }
}
&lt;/pre&gt;
&lt;h2&gt;Subtle errors&lt;/h2&gt;
&lt;p&gt;My test code misses one subtle difference – it fails to detect one type of error. Did you spot it?&lt;/p&gt;
&lt;p&gt;The correct result for ceil(-0.5f) is -0.0f. The sign bit should be preserved. The vector math functions all fail to do this. In most cases this doesn’t matter, at least for game math, but I think it is at least important to acknowledge this (minor) imperfection. If the compare function was put into ‘fussy’ mode (just compare the representation of the floats instead of the floats) then each of the &lt;em&gt;ceil&lt;/em&gt; functions would have an additional billion or so failures, from all of the floats between -0.0 and -1.0.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;The original post that announced &lt;em&gt;_mm_ceil_ps2&lt;/em&gt; can be found here – with corrected code:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;http://dss.stephanierct.com/DevBlog/?p=8&quot; href=&quot;http://dss.stephanierct.com/DevBlog/?p=8&quot;&gt;http://dss.stephanierct.com/DevBlog/?p=8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post discusses the bugs in the 3.03 version of DirectXMath and how to get fixed versions:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;http://blogs.msdn.com/b/chuckw/archive/2013/03/06/known-issues-directxmath-3-03.aspx&quot; href=&quot;http://blogs.msdn.com/b/chuckw/archive/2013/03/06/known-issues-directxmath-3-03.aspx&quot;&gt;http://blogs.msdn.com/b/chuckw/archive/2013/03/06/known-issues-directxmath-3-03.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post links to the LiraNuna glsl-sse2 math library:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;https://github.com/LiraNuna/glsl-sse2&quot; href=&quot;https://github.com/LiraNuna/glsl-sse2&quot;&gt;https://github.com/LiraNuna/glsl-sse2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The original reddit discussion of these functions can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;http://w3.reddit.com/r/programming/comments/1p2yys/sse3_optimized_vector_floor_ceil_round_and_mod/&quot; href=&quot;http://w3.reddit.com/r/programming/comments/1p2yys/sse3_optimized_vector_floor_ceil_round_and_mod/&quot;&gt;http://w3.reddit.com/r/programming/comments/1p2yys/sse3_optimized_vector_floor_ceil_round_and_mod/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sample code for VC++ 2013 to run these tests. Just uncomment the test that you want to run from the body of &lt;em&gt;main&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cygnus-software.com/ftp_pub/test4billion.zip&quot;&gt;https://www.cygnus-software.com/ftp_pub/test4billion.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reddit discussion of this post can be found &lt;a href=&quot;http://www.reddit.com/r/programming/comments/1wc4dg/theres_only_four_billion_floatsso_test_them_all/&quot;&gt;here&lt;/a&gt;, and then &lt;a href=&quot;https://www.reddit.com/r/programming/comments/705lxv/there_are_only_four_billion_floatsso_test_them_all/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The hacker news discussion of this post can be found &lt;a href=&quot;https://news.ycombinator.com/item?id=7135261&quot;&gt;here&lt;/a&gt;, and then &lt;a href=&quot;https://news.ycombinator.com/item?id=15252426#15253328&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve written before about running tests on all of the floats. The last time I was exhaustively testing round-tripping of printed floats, which took long enough that I showed how to &lt;a href=&quot;https://randomascii.wordpress.com/2012/03/11/c-11-stdasync-for-fast-float-format-finding/&quot;&gt;easily parallelize it&lt;/a&gt; and then I &lt;a href=&quot;https://randomascii.wordpress.com/2013/02/07/float-precision-revisited-nine-digit-float-portability/&quot;&gt;verified that they round-tripped between VC++ and gcc&lt;/a&gt;. This time the tests ran so quickly that it wasn’t even worth spinning up extra threads.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-18565082-1552-5f83aaab9b9f0&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20200826#blog_id=18565082&amp;amp;post_id=1552&amp;amp;origin=randomascii.wordpress.com&amp;amp;obj_id=18565082-1552-5f83aaab9b9f0&quot; data-name=&quot;like-post-frame-18565082-1552-5f83aaab9b9f0&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Sun, 11 Oct 2020 13:19:05 +0000</pubDate>
<dc:creator>tape_measure</dc:creator>
<og:type>article</og:type>
<og:title>There are Only Four Billion Floats–So Test Them All!</og:title>
<og:url>https://randomascii.wordpress.com/2014/01/27/theres-only-four-billion-floatsso-test-them-all/</og:url>
<og:description>A few months ago I saw a blog post touting fancy new SSE3 functions for implementing vector floor, ceil, and round functions. There was the inevitable proud proclaiming of impressive performance an…</og:description>
<og:image>https://randomascii.files.wordpress.com/2017/07/cropped-uiforetwicon2.png?w=200</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://randomascii.wordpress.com/2014/01/27/theres-only-four-billion-floatsso-test-them-all/</dc:identifier>
</item>
<item>
<title>Plan Your Route Privately: DuckDuckGo Now Has Driving and Walking Directions</title>
<link>https://spreadprivacy.com/duckduckgo-search-map-directions/</link>
<guid isPermaLink="true" >https://spreadprivacy.com/duckduckgo-search-map-directions/</guid>
<description>&lt;p&gt;We've been providing users with mapping features within DuckDuckGo Search for many years, along the way improving them with greater accuracy, &lt;a href=&quot;https://spreadprivacy.com/duckduckgo-apple-mapkit-js-update/&quot;&gt;dark mode, local re-querying and more&lt;/a&gt;. Now we're excited to announce a big step forward with the introduction of directions – private, as always, and like our embedded maps, powered by &lt;a href=&quot;https://developer.apple.com/maps/web/&quot;&gt;Apple's MapKit JS framework&lt;/a&gt; and already familiar to millions of users.&lt;/p&gt;&lt;p&gt;You'll now see a new addition to location and map search results that will help you plan trips by showing you a route overview, distance and travel time. Look out for it both at the top of search results that display a map, as well as within our expanded map module. Let's see an example of the latter…&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A location query such as &lt;a href=&quot;https://duckduckgo.com/?q=directions+from+big+ben+to+tower+of+london&amp;amp;ia=directions&amp;amp;iaxm=directions&amp;amp;start=what%3ABig%2520Ben%2520London%252C%2520SW1A%25200AA%252C%2520England&amp;amp;end=what%3ATower%2520of%2520London%2520London%252C%2520EC3N%25204AB%252C%2520England&amp;amp;transport=drive&quot;&gt;Tower of London&lt;/a&gt; can open our expanded maps, as usual.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://spreadprivacy.com/content/images/2020/09/screenshot01C_optimised.jpg&quot; alt=&quot;Screenshot showing a local map on DuckDuckGo Search.&quot;/&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;Clicking the &lt;em&gt;Directions&lt;/em&gt; button in the map sidebar will now display boxes to enter a starting point and a destination. For convenience, the starting point by default will be set to your current location, which works anonymously (as explained below). The best routes and their estimated durations will be shown on the map, and updating the starting point will redraw the available routes.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img src=&quot;https://spreadprivacy.com/content/images/2020/10/screenshot03E_optimised.jpg&quot; alt=&quot;Screenshot showing the directions feature within maps on DuckDuckGo Search.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As with all our search features, your privacy is still protected when using these directions thanks to our &lt;a href=&quot;https://duckduckgo.com/privacy&quot;&gt;strict privacy policy&lt;/a&gt; of not collecting or sharing any personal information. In the case of location-related searches, your browser sends location information which we isolate from any personal information the browser sends, and which we discard after use, enabling us to provide anonymous localized results and features. Our help page has more detail on &lt;a href=&quot;https://duck.co/help/privacy/anonymous-localized-results&quot;&gt;how we keep location searches private&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Route planning was a missing piece in DuckDuckGo Search. Integrating it means our maps now have the functionality you expect with the privacy you deserve, with no trade-offs.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;For more privacy advice &lt;a href=&quot;https://twitter.com/duckduckgo&quot;&gt;follow us on Twitter&lt;/a&gt;, and stay protected and informed with our &lt;a href=&quot;https://duckduckgo.com/newsletter&quot;&gt;privacy newsletters&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Sun, 11 Oct 2020 13:09:14 +0000</pubDate>
<dc:creator>doener</dc:creator>
<og:type>article</og:type>
<og:title>Plan Your Route Privately: DuckDuckGo Now Has Driving &amp; Walking Directions</og:title>
<og:description>We're excited to announce a big step forward with the introduction of route-planning directions on DuckDuckGo Search – private, as always.</og:description>
<og:url>https://spreadprivacy.com/duckduckgo-search-map-directions/</og:url>
<og:image>https://spreadprivacy.com/content/images/2020/10/directions-header-img02_optimised.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://spreadprivacy.com/duckduckgo-search-map-directions/</dc:identifier>
</item>
<item>
<title>Please stop using CDNs for external JavaScript libraries</title>
<link>https://shkspr.mobi/blog/2020/10/please-stop-using-cdns-for-external-javascript-libraries/</link>
<guid isPermaLink="true" >https://shkspr.mobi/blog/2020/10/please-stop-using-cdns-for-external-javascript-libraries/</guid>
<description>&lt;p&gt;I want to discuss a (minor) antipattern that I think is (slightly) harmful.&lt;/p&gt;
&lt;p&gt;Lots of websites use large Javascript libraries. They often include them by using a 3rd party Content Delivery Network like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.example.com/js/library-v1.2.3.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There are, supposedly, a couple of advantages to doing things this way.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Users may already have the JS library in their cache from visiting another site.&lt;/li&gt;
&lt;li&gt;Faster download speeds of large libraries from CDNs.&lt;/li&gt;
&lt;li&gt;Latest software versions automatically when the CDN updates.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I think these advantages are overstated and lead to some significant disadvantages.&lt;/p&gt;
&lt;h2&gt;Cacheing&lt;/h2&gt;
&lt;p&gt;I get the superficial appeal of this. But there are dozens of popular Javascript CDNs available. What are the chances that your user has visited a site which uses the &lt;em&gt;exact&lt;/em&gt; same CDN as your site?&lt;/p&gt;
&lt;p&gt;How much of an advantage does that really give you?&lt;/p&gt;
&lt;h2&gt;Speed&lt;/h2&gt;
&lt;p&gt;You probably shouldn’t be using multi-megabyte libraries. Have some respect for your users’ download limits. But if you are truly worried about speed, surely your whole site should be behind a CDN – not just a few JS libraries?&lt;/p&gt;
&lt;h2&gt;Versioning&lt;/h2&gt;
&lt;p&gt;There are some CDN’s which let you include the latest version of a library. But then you have to deal with breaking changes with little warning.&lt;/p&gt;
&lt;p&gt;So most people only include a specific version of the JS they want. And, of course, if you’re using v1.2 and another site is using v1.2.1 the browser can’t take advantage of cacheing.&lt;/p&gt;
&lt;h2&gt;Reliability&lt;/h2&gt;
&lt;p&gt;Is your CDN reliable? You hope so! But if a user’s network blocks a CDN or interrupts the download, you’re now serving your site without Javascript. That isn’t necessarily a bad thing – you do progressive enhancement, right? But it isn’t ideal.&lt;/p&gt;
&lt;p&gt;If you serve your JS from the same source as your main site, there is less chance of a user getting a broken experience.&lt;/p&gt;
&lt;h2&gt;Privacy&lt;/h2&gt;
&lt;p&gt;What’s your CDN’s privacy policy? Do you need to tell your user that their browsing data are being sent to a shadowy corporation in a different legal jurisdiction?&lt;/p&gt;
&lt;p&gt;What is your CDN doing with all that data?&lt;/p&gt;
&lt;h2&gt;Security&lt;/h2&gt;
&lt;p&gt;British Airways’ payments page was &lt;a href=&quot;https://www.riskiq.com/blog/labs/magecart-british-airways-breach/&quot;&gt;hacked by compromised 3rd party Javascript&lt;/a&gt;. A malicious user changed the code on site which wasn’t in BA’s control – then BA served it up to its customers.&lt;/p&gt;
&lt;p&gt;What happens if someone hacks your CDN?&lt;/p&gt;
&lt;p&gt;You gain extra security by using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&quot;&gt;SubResource Integrity&lt;/a&gt;. That lets you write code like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&quot;https://cdn.example.com/js/library-v1.2.3.js&quot;&amp;gt;
   integrity=&quot;sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC&quot;
   crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If even a single byte of that JS file is changed, the hash won’t match and the browser should refuse to run the code.&lt;/p&gt;
&lt;p&gt;Of course, that means that you could end up with a broken experience on your site. So just serve the JS from your own site.&lt;/p&gt;
&lt;h2&gt;So what?&lt;/h2&gt;
&lt;p&gt;This isn’t the biggest issue on the web. And I’m certainly guilty of misusing CDNs like this.&lt;/p&gt;
&lt;p&gt;Back when there were only a few CDNs, and their libraries didn’t change rapidly, there was an advantage to using them.&lt;/p&gt;
&lt;p&gt;Nowadays, in an era of rampant privacy and security violations, I think using 3rd party sources for Javascript should be treated as an anti-pattern.&lt;/p&gt;
</description>
<pubDate>Sun, 11 Oct 2020 11:58:10 +0000</pubDate>
<dc:creator>edent</dc:creator>
<og:type>article</og:type>
<og:title>Please stop using CDNs for external Javascript libraries</og:title>
<og:url>https://shkspr.mobi/blog/2020/10/please-stop-using-cdns-for-external-javascript-libraries/</og:url>
<og:description>I want to discuss a (minor) antipattern that I think is (slightly) harmful. Lots of websites use large Javascript libraries. They often include them by using a 3rd party Content Delivery Network li…</og:description>
<og:image>https://shkspr.mobi/blog/wp-content/uploads/2018/01/HTML5_Badge_512.png</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://shkspr.mobi/blog/2020/10/please-stop-using-cdns-for-external-javascript-libraries/</dc:identifier>
</item>
<item>
<title>Artvee – Download Hi-Res Public Domain Art, Posters and Illustrations</title>
<link>https://www.artvee.com</link>
<guid isPermaLink="true" >https://www.artvee.com</guid>
<description>&lt;div data-vc-full-width=&quot;true&quot; data-vc-full-width-init=&quot;false&quot; data-vc-stretch-content=&quot;true&quot; class=&quot;vc_row wpb_row vc_row-fluid tpgbg vc_custom_1601547276235 vc_row-has-fill woodmart-disable-overflow woodmart-row-gradient-enable&quot;&gt;


&lt;div class=&quot;wpb_column vc_column_container vc_col-sm-12 vc_hidden-lg vc_hidden-md vc_hidden-sm vc_col-has-fill&quot;&gt;
&lt;div class=&quot;vc_column-inner vc_custom_1601507361791&quot;&gt;
&lt;div class=&quot;wpb_wrapper&quot;&gt;
&lt;div class=&quot;vc_row wpb_row vc_inner vc_row-fluid&quot;&gt;
&lt;div class=&quot;wpb_column vc_column_container vc_col-sm-12&quot;&gt;
&lt;div class=&quot;vc_column-inner vc_custom_1584716689879&quot;&gt;
&lt;div class=&quot;wpb_wrapper&quot;&gt;

&lt;div id=&quot;wd-5ef9749ecacc7&quot; class=&quot;woodmart-text-block-wrapper color-scheme-custom woodmart-title-size-custom woodmart-title-width-50 text-left vc_custom_1593406629517 text-larger&quot;&gt;
&lt;div class=&quot;woodmart-title-container woodmart-text-block font-primary woodmart-font-weight-400&quot;&gt;Classical Art&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;vc_row wpb_row vc_inner vc_row-fluid&quot;&gt;
&lt;div class=&quot;wpb_column vc_column_container vc_col-sm-12&quot;&gt;
&lt;div class=&quot;vc_column-inner vc_custom_1601382453023&quot;&gt;
&lt;div class=&quot;wpb_wrapper&quot;&gt;
&lt;div id=&quot;wd-5f73248854882&quot; class=&quot;woodmart-text-block-wrapper color-scheme-custom woodmart-title-size-custom woodmart-title-width-80 text-left vc_custom_1601381521626 text-larger&quot;&gt;
&lt;div class=&quot;woodmart-title-container woodmart-text-block font-text woodmart-font-weight-400&quot;&gt;Browse and download high-resolution, public domain artworks.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div data-vc-full-width=&quot;true&quot; data-vc-full-width-init=&quot;false&quot; data-vc-stretch-content=&quot;true&quot; class=&quot;vc_row wpb_row vc_row-fluid vc_custom_1601491769658 vc_row-has-fill vc_row-no-padding vc_row-o-equal-height vc_row-o-content-middle vc_row-flex woodmart-bg-right-center&quot;&gt;
&lt;div class=&quot;wpb_column vc_column_container vc_col-sm-12 vc_col-lg-12 vc_col-md-6 vc_hidden-md vc_hidden-sm vc_hidden-xs&quot;&gt;
&lt;div class=&quot;vc_column-inner vc_custom_1601523742177&quot;&gt;
&lt;div class=&quot;wpb_wrapper&quot;&gt;
&lt;div class=&quot;vc_row wpb_row vc_inner vc_row-fluid ticon vc_custom_1601489109123&quot;&gt;
&lt;div class=&quot;wpb_column vc_column_container vc_col-sm-6&quot;&gt;
&lt;div class=&quot;vc_column-inner vc_custom_1593332568334&quot;&gt;
&lt;div class=&quot;wpb_wrapper&quot;&gt;
&lt;div class=&quot;info-box-wrapper&quot;&gt;
&lt;div id=&quot;wd-5f7503765e096&quot; class=&quot; woodmart-info-box text-left box-icon-align-left box-style- color-scheme- woodmart-bg-none box-title-custom tboxy vc_custom_1601504126705&quot;&gt;
&lt;div class=&quot;box-icon-wrapper box-with-icon box-icon-simple&quot;&gt;
&lt;div class=&quot;info-box-icon&quot;&gt;&lt;img width=&quot;512&quot; height=&quot;512&quot; src=&quot;https://artvee.com/dupapev/images/lazy.png&quot; class=&quot;info-icon image-1 attachment-full woodmart-lazy-load woodmart-lazy-fade&quot; alt=&quot;&quot; srcset=&quot;&quot; sizes=&quot;(max-width: 512px) 100vw, 512px&quot; data-wood-src=&quot;https://artvee.com/saconud/2020/05/image.png&quot; data-srcset=&quot;https://artvee.com/saconud/2020/05/image.png 512w, https://artvee.com/saconud/2020/05/image-350x350.png 350w&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;info-box-content&quot;&gt;
&lt;div class=&quot;info-box-inner reset-mb-10&quot;&gt;
&lt;p&gt;Explore Paintings, Drawings and Illustrations from some of the best artists the world has ever known.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;wpb_column vc_column_container vc_col-sm-6 vc_hidden-sm vc_hidden-xs&quot;&gt;
&lt;div class=&quot;vc_column-inner vc_custom_1593332577694&quot;&gt;
&lt;div class=&quot;wpb_wrapper&quot;&gt;
&lt;div class=&quot;info-box-wrapper&quot;&gt;
&lt;div id=&quot;wd-5f75038310305&quot; class=&quot; woodmart-info-box text-left box-icon-align-left box-style- color-scheme- woodmart-bg-none box-title-custom vc_custom_1601504134319&quot;&gt;
&lt;div class=&quot;box-icon-wrapper box-with-icon box-icon-simple&quot;&gt;
&lt;div class=&quot;info-box-icon&quot;&gt;&lt;img width=&quot;512&quot; height=&quot;512&quot; src=&quot;https://artvee.com/dupapev/images/lazy.png&quot; class=&quot;info-icon image-1 attachment-full woodmart-lazy-load woodmart-lazy-fade&quot; alt=&quot;&quot; srcset=&quot;&quot; sizes=&quot;(max-width: 512px) 100vw, 512px&quot; data-wood-src=&quot;https://artvee.com/saconud/2020/05/calligraphy.png&quot; data-srcset=&quot;https://artvee.com/saconud/2020/05/calligraphy.png 512w, https://artvee.com/saconud/2020/05/calligraphy-350x350.png 350w&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;info-box-content&quot;&gt;
&lt;div class=&quot;info-box-inner reset-mb-10&quot;&gt;
&lt;p&gt;Ready to be used for posters, flyers and other personal or commercial projects with no attribution required.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


</description>
<pubDate>Sun, 11 Oct 2020 11:15:47 +0000</pubDate>
<dc:creator>therecb</dc:creator>
<og:type>website</og:type>
<og:title>Artvee</og:title>
<og:description>Browse and download high-resolution, public domain Paintings, Drawings, Illustrations and Posters from some of the best artists the world has ever known.</og:description>
<og:url>https://artvee.com/</og:url>
<og:image>https://artvee.com/saconud/2020/07/art.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://artvee.com/</dc:identifier>
</item>
<item>
<title>Why you should write</title>
<link>https://www.preetamnath.com/blog/why-you-should-write</link>
<guid isPermaLink="true" >https://www.preetamnath.com/blog/why-you-should-write</guid>
<description>&lt;h2&gt;Be a creator, not just a consumer&lt;br/&gt;&lt;/h2&gt;
&lt;p&gt;I sit down every weekend to write. It’s a routine I’ve deliberately cultivated for myself during this year as a way to get out of my own head and put my thoughts on (metaphorical) paper.&lt;/p&gt;
&lt;p&gt;It started with this post on cultivating a &lt;a href=&quot;https://www.preetamnath.com/blog/daily-writing-habit&quot; target=&quot;_blank&quot;&gt;daily writing habit&lt;/a&gt;, which I moved away from after &lt;a href=&quot;https://www.preetamnath.com/blog/writing-25-blog-posts-in-25-days&quot; target=&quot;_blank&quot;&gt;25 days&lt;/a&gt; into a weekly schedule.&lt;/p&gt;
&lt;p&gt;Some of my writings go out as tweet threads, others as blog posts on this site. Invariably, I am creating and publishing week after week.&lt;/p&gt;
&lt;p&gt;It's not just to achieve end goal (follow systems, not goals) that I write every week. I thoroughly enjoy the process of creation, the act of sitting with lo-fi or synthwave tunes in the background and punching away at the keyboard brain dumping onto a notepad.&lt;/p&gt;
&lt;p&gt;I’ve managed to get &lt;a href=&quot;https://www.sankalpjonna.com/all-posts&quot; target=&quot;_blank&quot;&gt;Sankalp&lt;/a&gt; (my co-founder) onto writing as well. He’s still working out a schedule that helps him create and publish good content consistently, but he’s started walking the treadmill which is the important part.&lt;/p&gt;
&lt;p&gt;Recently I’ve been engaging with my team at DelightChat to get into a regular publishing routine. &lt;a href=&quot;https://www.akashj.com/&quot; target=&quot;_blank&quot;&gt;Akash&lt;/a&gt; already writes occasionally, Deb published his podcast on &lt;a href=&quot;https://saascontentatscale.com/&quot; target=&quot;_blank&quot;&gt;SaaS content marketing&lt;/a&gt;, and Niraj is setting up his blog as we speak.&lt;/p&gt;
&lt;p&gt;However, I didn’t want to be some old fart, a preacher who is saying “get on the horse” without explaining the why.&lt;/p&gt;
&lt;p&gt;So here goes.&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Reasons to write&lt;/h2&gt;
&lt;p&gt;Before proceeding further, I must make one thing clear. While I personally prefer writing, the message here is to create stuff.&lt;/p&gt;
&lt;p&gt;Create art, design album covers, shoot vlogs, record podcasts, write code. The focus is on creation, and becoming a creator in a world where most people are only consuming.&lt;/p&gt;
&lt;p&gt;Here’s how I explained the importance of writing and being a creator to my team.&lt;/p&gt;
&lt;p&gt;The whole world and everything in it, people and entities, are connected by invisible strings. You can visualise it like a web, an interconnected web with billions of points.&lt;/p&gt;
&lt;p&gt;Yes, I’m describing the model of the internet. Yes it’s more relevant than ever, because until recently majority of the world wasn’t online and connected to each other. With over &lt;a href=&quot;https://www.statista.com/statistics/617136/digital-population-worldwide/&quot; target=&quot;_blank&quot;&gt;4.57 billion&lt;/a&gt; people on the internet, we are literally living in the interconnected web. And hence it’s important for you to visualise and grasp the enormity of it.&lt;/p&gt;
&lt;p&gt;Back to reasons.&lt;/p&gt;
&lt;p&gt;You can take this giant web of interconnected beings and entities, and splice it in any direction you want. And you always end up with a subset of people.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://uploads-ssl.webflow.com/5e085291ed2a2769a872e587/5f817d2c1f8d6ba3787fa59e_node%20network%20map%20of%20the%20internet.png&quot; loading=&quot;lazy&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;em&gt;A map of the internet. Which cross-section will you splice?&lt;/em&gt;
&lt;p&gt;Example of a large splice - people who enjoy listening to music.&lt;/p&gt;
&lt;p&gt;Example of a smaller splice - people who enjoy alternative rock music.&lt;/p&gt;
&lt;p&gt;Even smaller splice - people who enjoy alternative rock and compose tracks and sing in a band in the same genre.&lt;/p&gt;
&lt;p&gt;You can take this concept and apply it to any idea and pull at the strings.&lt;/p&gt;
&lt;p&gt;With this blog post, I’m pulling at the strings that connect people who want to create stuff, have the ability to create stuff, and want to get started but haven’t yet. More specifically, my blog might appeal to people who have the ability and desire to write.&lt;/p&gt;
&lt;p&gt;Anyway, now you have identified a splice or subset. What next?&lt;/p&gt;
&lt;p&gt;The question really becomes, how do you make yourself a valuable entity in a given subset or splice of this giant interconnected web? How do you become a valuable node.&lt;/p&gt;
&lt;p&gt;And there’s only one answer to it.&lt;/p&gt;
&lt;p&gt;The only way to become a valuable node is by pushing/publishing/releasing value into the web. But like an ocean, a drop won’t be noticed by anybody. You need a pond where you can make a splash.&lt;/p&gt;
&lt;p&gt;You need to narrow down and focus on a small enough splice, such that when you tug at its strings, you have a real chance to get noticed. That way the value that you create in the form of written, video, audio, code, etc about topics that your narrow splice of the web cares about has a chance of earning their attention.&lt;/p&gt;
&lt;p&gt;There is no other way. It’s not going to be easy. Many others are trying to grab the same splice of attention.&lt;/p&gt;
&lt;p&gt;But, life is not a zero sum game.&lt;/p&gt;
&lt;p&gt;Multiple people can win. You can win too.&lt;/p&gt;
&lt;p&gt;And that’s brings me to the #1 reason to write or create stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can’t win if you don’t participate.&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Common obstacles to writing&lt;/h2&gt;
&lt;p&gt;From my conversations with people, I’ve found the most common obstacles to be&lt;/p&gt;
&lt;ol role=&quot;list&quot;&gt;&lt;li&gt;You don’t know why to write or create stuff&lt;/li&gt;
&lt;li&gt;You don’t know what to write about&lt;/li&gt;
&lt;li&gt;You don’t have a schedule or consistency&lt;/li&gt;
&lt;li&gt;Procrastination (the human mind is marvelous)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;I’ve already solved the first problem by explaining the why.&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Create a consistent writing schedule&lt;/h3&gt;
&lt;p&gt;The third problem can be solved by committing to a schedule. &lt;a href=&quot;https://jamesclear.com/scale&quot; target=&quot;_blank&quot;&gt;James Clear&lt;/a&gt; published on Mondays and Thursdays for three years until his blog finally took off. The rest we already know about.&lt;/p&gt;
&lt;p&gt;I committed to a daily writing schedule at first, which was hard but it helped me get out of my rut. This commitment was made in public and to my girlfriend in person.&lt;/p&gt;
&lt;p&gt;The two factors combined pushed me enough to get over my mental barriers and keep writing daily, especially on days I didn’t feel like. Back then I was writing shorter posts, which I’ve traded for longer thought pieces once a week.&lt;/p&gt;
&lt;p&gt;You too can set a simple but achievable routine.&lt;/p&gt;
&lt;p&gt;Set a reminder on Fridays to think of a topic to create about, spend a few hours on Saturday punching the keyboard furiously until you’ve dumped all your thoughts on paper, and then edit it before hitting publish on Sunday.&lt;/p&gt;
&lt;p&gt;The DelightChat team has a recurring event on the calendar to help maintain a consistent creator schedule.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://uploads-ssl.webflow.com/5e085291ed2a2769a872e587/5f81679d2365946712414656_consistent%20writing%20schedule%20write%20weekly.png&quot; loading=&quot;lazy&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Remember to set a target that’s easy enough to achieve. You’re not aiming for the pulitzer prize, you are trying to create a habit that’s super easy to do, thereby reducing chances of failure.&lt;/p&gt;
&lt;h3&gt;Overcome writing procrastination&lt;/h3&gt;
&lt;p&gt;Here are a few common procrastination arrows your brain is going to shoot at you. I’m going to make you aware of them so you can dodge them.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“I don’t have time to write.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a schedule, commit to it, tell your friends, family or someone who will ask you and therefore hold you accountable.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“I don’t know what to write about.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve answered that in the next section.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Ding! New notification from WhatsApp.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pour oil on your phone, throw it in the dustbin, and light it on fire.&lt;/p&gt;
&lt;p&gt;Or, you could put it on silent and place it exactly behind your laptop screen (out of eyesight). Has served me well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&quot;I don't have something interesting to say. I only want to write if I have something unique to say.&quot;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are a unique person with a unique perspective and thoughts about life due to your unique circumstances and upbringing and the hundreds and thousands of experiences you've had up until now.&lt;/p&gt;
&lt;p&gt;You have something unique to say. The topic might be old (it always is), but your unique perspective, your anecdotal experience, all add up.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“But I need to setup my blog, set up markdown, and more.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No, you need to write. Writing is the goal, not integrating markdown.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“But the text editor I use isn’t friendly. It doesn’t integrate with my blog.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google Keep or Apple Notes works perfectly and is very distraction free.&lt;/p&gt;
&lt;p&gt;Blow up the font size until you can’t see anything else on the screen. It’s what I do and it works.&lt;/p&gt;
&lt;p&gt;Your real challenge, and the only one that matters is sitting down and penning your thoughts, or creating stuff. You can do it on a piece of paper (but do it on Google Keep or Apple Notes, seriously).&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“But should I publish on Medium, on Substack, how do I format it into a tweet thread, etc.”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The medium can come later. The medium is a constraint.&lt;/p&gt;
&lt;p&gt;Constraints can be walked around of using creativity. But it's not a limiting factor by any means.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your goal is to write or create.&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;There is no perfect moment, the right time to start, or a sign from the universe where you suddenly kick procrastination in the face and get started. There is only the here and now.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://uploads-ssl.webflow.com/5e085291ed2a2769a872e587/5f8275f05451d7829eeee560_beat%20procrastination%20there%20is%20no%20sign%20from%20the%20universe.jpg&quot; loading=&quot;lazy&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;em&gt;Photo by&lt;/em&gt; &lt;a href=&quot;https://unsplash.com/@austinchan&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Austin Chan&lt;/em&gt;&lt;/a&gt;
&lt;p&gt;Hopefully these prompts I've written will help you dodge your brain’s procrastination bullets.&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;What to write about&lt;/h2&gt;
&lt;p&gt;Throughout the week I gather ideas on what to write about&lt;/p&gt;
&lt;ul role=&quot;list&quot;&gt;&lt;li&gt;from conversations with my co-founder, team and other people,&lt;/li&gt;
&lt;li&gt;by observing what others have written about and if I have a perspective to share,&lt;/li&gt;
&lt;li&gt;thoughts circling in my head,&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;and so on..&lt;/p&gt;
&lt;p&gt;There’s infinite sources for gathering ideas, but it’s important to have an eye for catching ideas (similar to how one can train themselves to spot business or startup ideas).&lt;/p&gt;
&lt;p&gt;And it's equally important to jot down those ideas somewhere safe and easy to access.&lt;/p&gt;
&lt;p&gt;I have a private WhatsApp group to drop ideas whenever I have them.&lt;/p&gt;
&lt;div&gt;&lt;img src=&quot;https://uploads-ssl.webflow.com/5e085291ed2a2769a872e587/5f8166d013df6c908d268c79_writing%20ideas%20store%20in%20whatsapp%20group.png&quot; loading=&quot;lazy&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Sankalp was facing a problem with coming up with topics to write about. Here’s what I told him.&lt;/p&gt;
&lt;p&gt;Take the next 1 hour to generate ideas you can write about.&lt;/p&gt;
&lt;ol role=&quot;list&quot;&gt;&lt;li&gt;Think about topics you like reading about, or talking about, or you know enough about to write.&lt;/li&gt;
&lt;li&gt;Plug in the topic keywords on Twitter and Google, or HN even. Find what others have written about it. Pick the headlines you liked jot down 20 article ideas. Write about them. Make them yours. They don't have to be your original ideas.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Since Sankalp is a programmer, he could even browse through open source repos, find that he had written a similar one but more simply or elegantly or using a different language or framework, and decide to package and publish them, and write a short note about it.&lt;/p&gt;
&lt;p&gt;Apply the idea above to your own craft.&lt;/p&gt;
&lt;p&gt;Whatever it takes.&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;Get started creating stuff this weekend&lt;/h2&gt;
&lt;p&gt;All of us have the same tools available to connect with the rest of the web.&lt;/p&gt;
&lt;p&gt;We all have our smartphones or computers, access to the internet, accounts on the social media layer of the web (Twitter, Instagram, etc.) where we can publish, and the ability to tap into code layer (websites, products, apps) by learning to code or using no-code tools.&lt;/p&gt;
&lt;p&gt;By publishing even a tiny tweet thread about a super specific idea or topic, you play the &lt;a href=&quot;https://www.preetamnath.com/blog/life-is-a-video-game-a-mental-model&quot; target=&quot;_blank&quot;&gt;game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You could open source some old code you had written, share a design template in Figma community, or share that home workout and fitness video that you’ve been meaning to record on Instagram.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The key is to participate..&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;..and to give your tiny splice of the massively interconnected web a reason to look at you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, what’s it gonna be?&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;

</description>
<pubDate>Sun, 11 Oct 2020 05:35:13 +0000</pubDate>
<dc:creator>grwthckrmstr</dc:creator>
<og:title>Why you should write</og:title>
<og:description>Be a creator, not just a consumer.</og:description>
<og:image>https://uploads-ssl.webflow.com/5e085291ed2a2769a872e587/5f816592968d58c031f229a4_why%20you%20should%20write%20create%20stuff.png</og:image>
<og:type>website</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.preetamnath.com/blog/why-you-should-write</dc:identifier>
</item>
<item>
<title>Five Eyes and Japan call for Facebook backdoor to monitor crime</title>
<link>https://asia.nikkei.com/Business/Technology/Five-Eyes-and-Japan-call-for-Facebook-backdoor-to-monitor-crime</link>
<guid isPermaLink="true" >https://asia.nikkei.com/Business/Technology/Five-Eyes-and-Japan-call-for-Facebook-backdoor-to-monitor-crime</guid>
<description>&lt;p&gt;TOKYO -- Japan has joined countries in the Five Eyes security alliance in a call for Facebook to review its encryption practices over concerns the company's messaging apps will become tools for terrorists and child traffickers, Nikkei has learned.&lt;/p&gt;
&lt;p&gt;Currently, Facebook encrypts the contents of messages exchanged between the sender and receiver so that no one else -- including Facebook itself -- can see them. While this technology serves to protect users' privacy, it also makes it impossible for the company to provide authorities with information related to crimes.&lt;/p&gt;
&lt;p&gt;The Five Eyes countries -- the U.S., the U.K., Australia, Canada and New Zealand -- plus Japan and India issued on Sunday a joint statement to press Facebook to change its encryption technology on Messenger and WhatsApp.&lt;/p&gt;

&lt;p&gt;In the statement, the countries say they understand the importance of protecting privacy, but say Facebook should seek a way to balance privacy and security concerns. It is expected that the countries will ask Facebook to introduce a backdoor that allows it to decrypt in case of an emergency.&lt;/p&gt;
&lt;p&gt;The decision for Tokyo to join the call comes as it seeks &lt;a href=&quot;https://asia.nikkei.com/Editor-s-Picks/Interview/Japan-wants-de-facto-Six-Eyes-intelligence-status-defense-chief&quot; target=&quot;_blank&quot; title=&quot;&quot;&gt;closer ties with alliance&lt;/a&gt;. The Five Eyes has also engaged Japan as it seeks to share confidential information in response to China's growing military expansion.&lt;/p&gt;
&lt;p&gt;Facebook CEO Mark Zuckerberg said in March 2019 that contents exchanged on messaging apps including Messenger and WhatsApp would be encrypted. WhatsApp has been already encrypted.&lt;/p&gt;
&lt;p&gt;Facebook spokesperson said, in all of these countries, &quot;people prefer end-to-end encrypted messaging on various apps because it keeps their messages safe from hackers, criminals, and foreign governments. Facebook has led the industry in developing new ways to prevent, detect, and respond to abuse while maintaining high security and we will continue to do so.&quot;&lt;/p&gt;
&lt;p&gt;In October 2019, law enforcement officials in the U.S., U.K. and Australia demanded Facebook take measures to allow the company to decrypt in case of emergency. They claimed investigations could be hindered if terrorists or child abductors take advantage of the technology. Facebook has not complied.&lt;/p&gt;
&lt;p&gt;The joint statement is not legally binding so it remains unclear whether Facebook will agree to introduce the measure. Even if it introduces a decryption measure, that does not guarantee the company will provide the data when requested by authorities.&lt;/p&gt;
&lt;p&gt;In 2016, a large amount of personal data leaked from Facebook and was misused to manipulate public opinion in the U.S. presidential election. Since then, Facebook has stepped up measures to enhance users' privacy.&lt;/p&gt;


</description>
<pubDate>Sun, 11 Oct 2020 01:30:59 +0000</pubDate>
<dc:creator>okareaman</dc:creator>
<og:title>Five Eyes and Japan call for Facebook backdoor to monitor crime</og:title>
<og:description>Security alliance worries encrypted messaging apps can be used by bad actors</og:description>
<og:image>https://www.ft.com/__origami/service/image/v2/images/raw/https%253A%252F%252Fs3-ap-northeast-1.amazonaws.com%252Fpsh-ex-ftnikkei-3937bb4%252Fimages%252F8%252F0%252F7%252F7%252F29887708-4-eng-GB%252FCropped-1602338770photo.jpg?width=1024&amp;height=512&amp;fit=cover&amp;gravity=faces&amp;source=nar-cms</og:image>
<og:url>https://asia.nikkei.com/Business/Technology/Five-Eyes-and-Japan-call-for-Facebook-backdoor-to-monitor-crime</og:url>
<og:type>website</og:type>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://asia.nikkei.com/Business/Technology/Five-Eyes-and-Japan-call-for-Facebook-backdoor-to-monitor-crime</dc:identifier>
</item>
</channel>
</rss>