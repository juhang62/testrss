<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Evolutionary history and why physical activity is important for brain health</title>
<link>https://www.scientificamerican.com/article/why-your-brain-needs-exercise/</link>
<guid isPermaLink="true" >https://www.scientificamerican.com/article/why-your-brain-needs-exercise/</guid>
<description>&lt;div class=&quot;mura-region mura-region-loose&quot;&gt;
&lt;div class=&quot;mura-region-local&quot;&gt;
&lt;p&gt;In the 1990s researchers announced a series of discoveries that would upend a bedrock tenet of neuroscience. For decades the mature brain was understood to be incapable of growing new neurons. Once an individual reached adulthood, the thinking went, the brain began losing neurons rather than gaining them. But evidence was building that the adult brain could, in fact, generate new neurons. In one particularly striking experiment with mice, scientists found that simply running on a wheel led to the birth of new neurons in the hippocampus, a brain structure that is associated with memory. Since then, other studies have established that exercise also has positive effects on the brains of humans, especially as we age, and that it may even help reduce the risk of Alzheimer’s disease and other neurodegenerative conditions. But the research raised a key question: Why does exercise affect the brain at all?&lt;/p&gt;
&lt;p&gt;Physical activity improves the function of many organ systems in the body, but the effects are usually linked to better athletic performance. For example, when you walk or run, your muscles demand more oxygen, and over time your cardiovascular system responds by increasing the size of the heart and building new blood vessels. The cardiovascular changes are primarily a response to the physical challenges of exercise, which can enhance endurance. But what challenge elicits a response from the brain?&lt;/p&gt;
&lt;p&gt;Answering this question requires that we rethink our views of exercise. People often consider walking and running to be activities that the body is able to perform on autopilot. But research carried out over the past decade by us and others would indicate that this folk wisdom is wrong. Instead exercise seems to be as much a cognitive activity as a physical one. In fact, this link between physical activity and brain health may trace back millions of years to the origin of hallmark traits of humankind. If we can better understand why and how exercise engages the brain, perhaps we can leverage the relevant physiological pathways to design novel exercise routines that will boost people’s cognition as they age—work that we have begun to undertake.&lt;/p&gt;
&lt;h2&gt;Flexing the Brain&lt;/h2&gt;
&lt;p&gt;To explore why exercise benefits the brain, we need to first consider which aspects of brain structure and cognition seem most responsive to it. When researchers at the Salk Institute for Biological Studies in La Jolla, Calif., led by Fred Gage and Henriette Van Praag, showed in the 1990s that running increased the birth of new hippocampal neurons in mice, they noted that this process appeared to be tied to the production of a protein called brain-derived neurotrophic factor (BDNF). BDNF is produced throughout the body and in the brain, and it promotes both the growth and the survival of nascent neurons. The Salk group and others went on to demonstrate that exercise-induced neurogenesis is associated with improved performance on memory-related tasks in rodents. The results of these studies were striking because atrophy of the hippocampus is widely linked to memory difficulties during healthy human aging and occurs to a greater extent in individuals with neurodegenerative diseases such as Alzheimer’s. The findings in rodents provided an initial glimpse of how exercise could counter this decline.&lt;/p&gt;
&lt;p&gt;Following up on this work in animals, researchers carried out a series of investigations that determined that in humans, just like in rodents, aerobic exercise leads to the production of BDNF and augments the structure—that is, the size and connectivity—of key areas of the brain, including the hippocampus. In a randomized trial conducted at the University of Illinois at Urbana-Champaign by Kirk Erickson and Arthur Kramer, 12 months of aerobic exercise led to an increase in BDNF levels, an increase in the size of the hippocampus and improvements in memory in older adults.&lt;/p&gt;
&lt;p&gt;Other investigators have found associations between exercise and the hippocampus in a variety of observational studies. In our own study of more than 7,000 middle-aged to older adults in the U.K., published in 2019 in &lt;em&gt;Brain Imaging and Behavior&lt;/em&gt;, we demonstrated that people who spent more time engaged in moderate to vigorous physical activity had larger hippocampal volumes. Although it is not yet possible to say whether these effects in humans are related to neurogenesis or other forms of brain plasticity, such as increasing connections among existing neurons, together the results clearly indicate that exercise can benefit the brain’s hippocampus and its cognitive functions.&lt;/p&gt;
&lt;p&gt;Researchers have also documented clear links between aerobic exercise and benefits to other parts of the brain, including expansion of the prefrontal cortex, which sits just behind the forehead. Such augmentation of this region has been tied to sharper executive cognitive functions, which involve aspects of planning, decision-making and multitasking—abilities that, like memory, tend to decline with healthy aging and are further degraded in the presence of Alzheimer’s. Scientists suspect that increased connections between existing neurons, rather than the birth of new neurons, are responsible for the beneficial effects of exercise on the prefrontal cortex and other brain regions outside the hippocampus.&lt;/p&gt;
&lt;h2&gt;Upright and Active&lt;/h2&gt;
&lt;p&gt;With mounting evidence that aerobic exercise can boost brain health, especially in older adults, the next step was to figure out exactly what cognitive challenges physical activity poses that trigger this adaptive response. We began to think that examining the evolutionary relation between the brain and the body might be a good place to start. Hominins (the group that includes modern humans and our close extinct relatives) split from the lineage leading to our closest living relatives, chimpanzees and bonobos, between six million and seven million years ago. In that time, hominins evolved a number of anatomical and behavioral adaptations that distinguish us from other primates. We think two of these evolutionary changes in particular bound exercise to brain function in ways that people can make use of today.&lt;/p&gt;
&lt;div class=&quot;article-media__object&quot;&gt;&lt;img alt=&quot;Graphic shows how increased production of the protein BDNF may promote neuron growth and survival in the adult brain.&quot; src=&quot;https://static.scientificamerican.com/sciam/assets/Image/2019/saw0120Raic31_d.png&quot;/&gt;&lt;/div&gt;
Credit: Tami Tolpa
&lt;p&gt;First, our ancestors shifted from walking on all fours to walking upright on just their hind legs. This bipedal posture means that there are times when our bodies are precariously balanced over one foot rather than two or more limbs like in other apes. To accomplish this task, our brains must coordinate a great deal of information and, in the process, make adjustments to muscle activity throughout the body to maintain our balance. While coordinating these actions, we must also watch out for any environmental obstacles. In other words, simply because we are bipedal, our brains may be more cognitively challenged than those of our quadrupedal ancestors.&lt;/p&gt;
&lt;p&gt;Second, the hominin way of life changed to incorporate higher levels of aerobic activity. Fossil evidence indicates that in the early stages of human evolution, our ancestors were probably relatively sedentary bipedal apes who ate mainly plants. By some two million years ago, however, as habitats dried out under a cooling climate, at least one group of ancestral humans began to forage in a new way, hunting animals and gathering plant foods. Hunting and gathering dominated human subsistence strategies for nearly two million years until the advent of farming and herding around 10,000 years ago. With Herman Pontzer of Duke University and Brian Wood of the University of California, Los Angeles, we have shown that because of the long distances traversed in search of food, hunting and gathering involves much more aerobic activity than seen in other apes.&lt;/p&gt;
&lt;p&gt;Increased demands on the brain accompanied this shift toward a more physically active routine. When out foraging afar, hunter-gatherers must survey their surroundings to make sure they know where they are. This kind of spatial navigation relies on the hippocampus, the same brain region that benefits from exercise and that tends to atrophy as we get older. In addition, they have to scan the landscape for signs of food, using sensory information from their visual and auditory systems. They must remember where they have been before and when certain kinds of food were available. The brain uses this information from both short- and long-term memory, allowing people to make decisions and plan their routes—cognitive tasks that are supported by the hippocampus and the prefrontal cortex, among other regions. Hunter-gatherers also often forage in groups, in which case they may have conversations while their brains are maintaining their balance and keeping them spatially located in their environment. All of this multitasking is controlled, in part, by the prefrontal cortex, which also tends to diminish with age.&lt;/p&gt;
&lt;p&gt;Although any foraging animal must navigate and figure out where to find food, hunter-gatherers have to perform these functions during fast-paced treks that can extend over more than 20 kilometers. At high speeds, multitasking becomes even more difficult and requires faster information processing. From an evolutionary perspective, it would make sense to have a brain ready to respond to an array of challenges during and after foraging to maximize the chances of success in finding food. But the physiological resources required to build and maintain such a brain—including those that support the birth and survival of new neurons—cost the body energy, meaning that if we do not regularly make use of this system, we are likely to lose these benefits.&lt;/p&gt;
&lt;p&gt;This evolutionary neuroscience perspective on exercise and the brain, which we detailed in an article published in 2017 in &lt;em&gt;Trends in Neurosciences&lt;/em&gt;, has profound implications for humans today. In our modern society, we do not need to engage in aerobic physical activity to find food for survival. The brain atrophy and attendant cognitive declines that commonly occur during aging may be partly related to our sedentary habits.&lt;/p&gt;
&lt;p&gt;But simply exercising more may not realize the full potential of physical activity for keeping brain decline at bay. Indeed, our model suggests that even people who already get a lot of aerobic activity may want to rethink their routines. It is possible that we might not always exercise in ways that take full advantage of our evolved mechanisms for sustaining brain performance.&lt;/p&gt;
&lt;div class=&quot;article-media__object&quot;&gt;&lt;img alt=&quot;Cladogram highlights 2 evolutionary changes that made humans more physically active than our ape cousins: bipedalism &amp;amp; hunting/gathering.&quot; src=&quot;https://static.scientificamerican.com/sciam/assets/Image/2019/saw0120Raic32_d.png&quot;/&gt;&lt;/div&gt;
Credit: Tami Tolpa
&lt;p&gt;Think about the ways in which many of us get our aerobic exercise. Often we go to gyms and use a stationary exercise machine; the most cognitively demanding task in such a workout might be deciding what channel to watch on the built-in television. What is more, these machines remove some of the demands of maintaining balance and adjusting speed, among many other intrinsic cognitive challenges of movement through a changing environment.&lt;/p&gt;
&lt;p&gt;What if this form of exercise is shortchanging us? Our ancestors evolved in an unpredictable world. What if we could modify our exercise routines to include cognitive challenges like those faced by our hunter-gatherer forebears? If we can augment the effects of exercise by including a cognitively demanding activity, then perhaps we can increase the efficacy of exercise regimens aimed at boosting cognition during aging and potentially even alter the course of neurodegenerative diseases such as Alzheimer’s.&lt;/p&gt;
&lt;h2&gt;Move and Think&lt;/h2&gt;
&lt;p&gt;In fact, a growing body of research suggests that exercise that is cognitively stimulating may indeed benefit the brain more than exercise that does not make such cognitive demands. For example, Gerd Kempermann and his colleagues at the Center for Regenerative Therapies Dresden in Germany explored this possibility by comparing the growth and survival of new neurons in the mouse hippocampus after exercise alone or after exercise combined with access to a cognitively enriched environment. They found an additive effect: exercise alone was good for the hippocampus, but combining physical activity with cognitive demands in a stimulating environment was even better, leading to even more new neurons. Using the brain during and after exercise seemed to trigger enhanced neuron survival.&lt;/p&gt;
&lt;p&gt;We and others have recently begun to extend these studies from animals to humans—with encouraging results. For example, researchers have been exploring combining exercise and cognitive challenges in individuals experiencing notable cognitive decline. Cay Anderson-Hanley of Union College in Schenectady, N.Y., has tested simultaneous exercise and cognitive interventions in people with mild cognitive impairment, a condition associated with increased risk for Alzheimer’s. More work certainly needs to be done in populations such as this one before we can draw any firm conclusions, but the results so far suggest that people who are already experiencing some cognitive decline may benefit from exercising while playing a mentally demanding video game. In studies of healthy adults, Anderson-Hanley and her colleagues have also shown that simultaneously exercising and playing a cognitive challenging video game may elicit a greater increase in circulating BDNF than exercise alone. These findings further bolster the idea that BDNF is instrumental in bringing about exercise-induced brain benefits.&lt;/p&gt;
&lt;p&gt;In our own work, we have developed a game designed to specifically challenge aspects of cognition that tend to decline with age and that are probably needed during foraging. In the game, players spatially navigate and complete attention and memory tasks while cycling at a moderate aerobic intensity level. To evaluate the potential of this approach to boost cognitive performance in healthy older adults, we are comparing a group exercising while playing the game with a group exercising without the game, a group playing the game without exercising, and a control group that only watches nature videos. The results to date are promising.&lt;/p&gt;
&lt;p&gt;Many other research groups are testing combinations of exercise and cognitive tasks. In the near future, we will probably have a better idea of how best to deploy them to support and enhance cognition in both healthy individuals and those experiencing disease-related cognitive decline.&lt;/p&gt;
&lt;p&gt;In addition to specially designed interventions similar to the ones described here, it is possible that participation in sports that require combinations of cognitive and aerobic tasks may be a way to activate these brain benefits. For example, we recently showed that collegiate cross-country runners who train extensively on outdoor trails have increased connectivity among brain regions associated with executive cognitive functions compared with healthy but more sedentary young adults. Future work will help us understand whether these benefits are also greater than those seen in runners who train in less complex settings—on a treadmill, for instance.&lt;/p&gt;
&lt;p&gt;Much remains to be discovered. Although it is still too early to make specific prescriptions for combining exercise and cognitive tasks, we can say with certainty that exercise is a key player in preserving brain function as we age. The U.S. Department of Health and Human Services guidelines suggest that people should engage in aerobic exercise for at least 150 minutes a week at a moderate intensity or at least 75 minutes a week at a vigorous intensity (or an equivalent combination of the two). Meeting or exceeding these exercise recommendations is good for the body and may improve brain health.&lt;/p&gt;
&lt;p&gt;Clinical trials will tell us much more about the efficacy of cognitively engaged exercise—what kinds of mental and physical activities are most impactful, for example, and the optimal intensity and duration of exercise for augmenting cognition. But in light of the evidence we have so far, we believe that with continued careful research we can target physiological pathways linking the brain and the body and exploit our brain’s evolved adaptive capacity for exercise-induced plasticity during aging. In the end, working out both the body and the brain during exercise may help keep the mind sharp for life.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 23 Dec 2019 18:06:51 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:type>article</og:type>
<og:title>Why Your Brain Needs Exercise</og:title>
<og:description>The evolutionary history of humans explains why physical activity is important for brain health</og:description>
<og:image>https://static.scientificamerican.com/sciam/cache/file/388008E7-BFE5-40D2-8CD1E08B7CBE8FB8.jpg</og:image>
<og:url>https://www.scientificamerican.com/article/why-your-brain-needs-exercise/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.scientificamerican.com/article/why-your-brain-needs-exercise/</dc:identifier>
</item>
<item>
<title>Downsides to working at a tech giant</title>
<link>https://blog.garrytan.com/working-for-microsoft-cost-me-200-dollars-million</link>
<guid isPermaLink="true" >https://blog.garrytan.com/working-for-microsoft-cost-me-200-dollars-million</guid>
<description>&lt;div class=&quot;posthaven-gallery&quot; id=&quot;posthaven_gallery[1516676]&quot;&gt;
&lt;div class=&quot;posthaven-gallery-car&quot;&gt;
&lt;p class=&quot;posthaven-file posthaven-file-image posthaven-file-state-processed&quot;&gt;&lt;img class=&quot;posthaven-gallery-image&quot; src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382738/IIE7MquOHM3dMrMvfXYdyBZDFKY/medium_200m.png&quot; data-posthaven-state=&quot;processed&quot; data-medium-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382738/IIE7MquOHM3dMrMvfXYdyBZDFKY/medium_200m.png&quot; data-medium-width=&quot;800&quot; data-medium-height=&quot;450&quot; data-large-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382738/IIE7MquOHM3dMrMvfXYdyBZDFKY/large_200m.png&quot; data-large-width=&quot;1200&quot; data-large-height=&quot;675&quot; data-thumb-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382738/IIE7MquOHM3dMrMvfXYdyBZDFKY/thumb_200m.png&quot; data-thumb-width=&quot;200&quot; data-thumb-height=&quot;200&quot; data-xlarge-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382738/IIE7MquOHM3dMrMvfXYdyBZDFKY/xlarge_200m.png&quot; data-xlarge-width=&quot;1451&quot; data-xlarge-height=&quot;816&quot; data-orig-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382738/IIE7MquOHM3dMrMvfXYdyBZDFKY/200m.png&quot; data-orig-width=&quot;1451&quot; data-orig-height=&quot;816&quot; data-posthaven-id=&quot;2382738&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;Hey everyone, new vlog for this morning. I was in Seattle last week and it made me nostalgic. When I lived there, I made a career decision that cost me a lot, so I wanted to share it with you with the hope you can make different mistakes than me. &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Watch on YouTube— &lt;iframe width=&quot;800&quot; height=&quot;450&quot; src=&quot;https://www.youtube.com/embed/dtnG0ELjvcM?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Transcript below&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My name's Garry Tan, I'm a Venture Capitalist. I started off as an engineer, a designer, a product manager. If you're new to this channel, I'm here to teach you all the things that I learned the hard way, starting with the most painful lesson, which cost me $200 million. &lt;/p&gt;
&lt;p&gt;I'd just graduated in 2003, and my friends were starting a company with Peter Thiel. They flew me down to have dinner with Peter. &lt;/p&gt;
&lt;div class=&quot;posthaven-gallery&quot; id=&quot;posthaven_gallery[1516677]&quot;&gt;
&lt;div class=&quot;posthaven-gallery-car&quot;&gt;
&lt;p class=&quot;posthaven-file posthaven-file-image posthaven-file-state-processed&quot;&gt;&lt;img class=&quot;posthaven-gallery-image&quot; src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382739/YaBCDDMWqjrc6eEaG7n77u1osI8/medium_5dc349153afd375c04352664-1136-852.jpg&quot; data-posthaven-state=&quot;processed&quot; data-medium-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382739/YaBCDDMWqjrc6eEaG7n77u1osI8/medium_5dc349153afd375c04352664-1136-852.jpg&quot; data-medium-width=&quot;800&quot; data-medium-height=&quot;600&quot; data-large-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382739/YaBCDDMWqjrc6eEaG7n77u1osI8/large_5dc349153afd375c04352664-1136-852.jpg&quot; data-large-width=&quot;1136&quot; data-large-height=&quot;852&quot; data-thumb-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382739/YaBCDDMWqjrc6eEaG7n77u1osI8/thumb_5dc349153afd375c04352664-1136-852.jpg&quot; data-thumb-width=&quot;200&quot; data-thumb-height=&quot;200&quot; data-xlarge-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382739/YaBCDDMWqjrc6eEaG7n77u1osI8/xlarge_5dc349153afd375c04352664-1136-852.jpg&quot; data-xlarge-width=&quot;1136&quot; data-xlarge-height=&quot;852&quot; data-orig-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382739/YaBCDDMWqjrc6eEaG7n77u1osI8/5dc349153afd375c04352664-1136-852.jpg&quot; data-orig-width=&quot;1136&quot; data-orig-height=&quot;852&quot; data-posthaven-id=&quot;2382739&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;It was about the time Peter wrote the $500,000 check to Facebook that made him a billionaire. He was a known great entrepreneur. He just wasn't the billionaire that you know him as today. &lt;/p&gt;
&lt;p&gt;He looked at me and said, &quot;Garry, &quot;what are you doing at Microsoft? &quot;You're wasting your time.&quot; Keep in mind, I was 23 years old, I didn't know anything about startups, I didn't know anything about finance, and I definitely didn't know how these things got started. &lt;/p&gt;
&lt;p&gt;He said, &quot;Garry, I'm so sure this is the right thing for you, &quot;you need to quit your job right now.&quot; &lt;/p&gt;
&lt;p&gt;He asked, &quot;How much a year do you make at Microsoft?&quot;&lt;/p&gt;
&lt;p&gt;It was $72,000 a year, really the lowest of the low coming right out of college. He got out his checkbook and wrote me that check. &lt;/p&gt;
&lt;p&gt;&quot;Cash this check, quit your job. This is a zero risk opportunity for you.&quot; &lt;/p&gt;
&lt;p&gt;I said, &quot;Thank you very much, Mr. Thiel, but I might get promoted to Level 60 next year.&quot; &lt;/p&gt;
&lt;p&gt;&lt;u&gt;Big mistake.&lt;/u&gt; This mistake cost me $200 million in equity, at least. Palantir is now worth $20 billion or more. &lt;/p&gt;
&lt;p&gt;Later, I did end up joining as employee number 10. I got to build one of their major product teams from scratch. I learned a lot, and it still worked out, but this is a story that you should keep in mind as you think about where you want to work. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tech giants are amazing, even moreso today than in 2003&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lots of reasons to work at Facebook, Apple, Amazon, Microsoft, and Google. I actually turned down a job interview with Google in 2004, but at the time, and this is what most Stanford engineers thought, it was obviously useful, but it wasn't clear that it was going to make money. &lt;/p&gt;
&lt;div class=&quot;posthaven-gallery&quot; id=&quot;posthaven_gallery[1516693]&quot;&gt;
&lt;div class=&quot;posthaven-gallery-car&quot;&gt;
&lt;p class=&quot;posthaven-file posthaven-file-image posthaven-file-state-processed&quot;&gt;&lt;img class=&quot;posthaven-gallery-image&quot; src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382754/KHwPQPhY6TaSSqhK_DxI7YwPOWU/medium_MW-GM758_market_NS_20180718204202.jpg&quot; data-posthaven-state=&quot;processed&quot; data-medium-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382754/KHwPQPhY6TaSSqhK_DxI7YwPOWU/medium_MW-GM758_market_NS_20180718204202.jpg&quot; data-medium-width=&quot;800&quot; data-medium-height=&quot;511&quot; data-large-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382754/KHwPQPhY6TaSSqhK_DxI7YwPOWU/large_MW-GM758_market_NS_20180718204202.jpg&quot; data-large-width=&quot;1194&quot; data-large-height=&quot;763&quot; data-thumb-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382754/KHwPQPhY6TaSSqhK_DxI7YwPOWU/thumb_MW-GM758_market_NS_20180718204202.jpg&quot; data-thumb-width=&quot;200&quot; data-thumb-height=&quot;200&quot; data-xlarge-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382754/KHwPQPhY6TaSSqhK_DxI7YwPOWU/xlarge_MW-GM758_market_NS_20180718204202.jpg&quot; data-xlarge-width=&quot;1194&quot; data-xlarge-height=&quot;763&quot; data-orig-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382754/KHwPQPhY6TaSSqhK_DxI7YwPOWU/MW-GM758_market_NS_20180718204202.jpg&quot; data-orig-width=&quot;1194&quot; data-orig-height=&quot;763&quot; data-posthaven-id=&quot;2382754&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;In 2019, it's hard to believe any other company other than Google is going to make money. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But you only can make a fraction of the value you create if you don't own equity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even though these companies pay a lot of money, in real terms, what software is doing in society is creating a lot more value than what they pay you. Google's &lt;del&gt;pure profit&lt;/del&gt; &lt;u&gt;net revenue&lt;/u&gt; per employee is actually $1.6 million per year, after all costs.&lt;/p&gt;
&lt;div class=&quot;posthaven-gallery&quot; id=&quot;posthaven_gallery[1516678]&quot;&gt;
&lt;div class=&quot;posthaven-gallery-car&quot;&gt;
&lt;p class=&quot;posthaven-file posthaven-file-image posthaven-file-state-processed&quot;&gt;&lt;img class=&quot;posthaven-gallery-image&quot; src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382740/ckblTcVuyFy2yeTpU3VvdjuUofQ/medium_Screen_Shot_2019-12-23_at_7.32.28_AM.png&quot; data-posthaven-state=&quot;processed&quot; data-medium-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382740/ckblTcVuyFy2yeTpU3VvdjuUofQ/medium_Screen_Shot_2019-12-23_at_7.32.28_AM.png&quot; data-medium-width=&quot;800&quot; data-medium-height=&quot;446&quot; data-large-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382740/ckblTcVuyFy2yeTpU3VvdjuUofQ/large_Screen_Shot_2019-12-23_at_7.32.28_AM.png&quot; data-large-width=&quot;1200&quot; data-large-height=&quot;669&quot; data-thumb-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382740/ckblTcVuyFy2yeTpU3VvdjuUofQ/thumb_Screen_Shot_2019-12-23_at_7.32.28_AM.png&quot; data-thumb-width=&quot;200&quot; data-thumb-height=&quot;200&quot; data-xlarge-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382740/ckblTcVuyFy2yeTpU3VvdjuUofQ/xlarge_Screen_Shot_2019-12-23_at_7.32.28_AM.png&quot; data-xlarge-width=&quot;1428&quot; data-xlarge-height=&quot;796&quot; data-orig-src=&quot;https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382740/ckblTcVuyFy2yeTpU3VvdjuUofQ/Screen_Shot_2019-12-23_at_7.32.28_AM.png&quot; data-orig-width=&quot;1428&quot; data-orig-height=&quot;796&quot; data-posthaven-id=&quot;2382740&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;p&gt;If you're in the engineering, product, design, marketing, sort of the builder's side of that organization, you've got to know that you're creating a lot more value than that, possibly 10 times, maybe 100 times that value, and the only way you can really access that is by owning equity, and that means either being a founder or working at an early stage startup that gives significant equity. &lt;/p&gt;
&lt;p&gt;My friend, Bede Jordan of Shelf Engine here in Seattle, actually said it best, &quot;If you don't work on your dreams, &quot;someone will put you to work on theirs.&quot; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Pros: Why you should consider working at a tech giant&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here are the pros: you get to ship products to millions of people; that is pretty cool. Two, it's very stable, and you get to learn some of the best techniques on how to make products for people. That's really important. Three, you're gonna meet a lot of really smart people, some of whom you may want to co-found something with in the future. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Downsides to working at a tech giant&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Obviously, there are lots of downsides. If you like to make something new, it's a lot harder to do that in a big organization. You have to be good at negotiation, you have to be good at getting favors from other people, you have to be good at politics. Those are really valuable life skills, but they are a separate set of skills from being great technically, or great at building product, and you should probably be aware of how you spend your time, especially when you're young. &lt;/p&gt;
&lt;p&gt;Do you want to maintain the status quo, or do you want to make something new? &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The real reason you should consider working at a startup or starting your own: It's not the money&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The two things I really like about working for smaller places or starting a company is you get very direct access to users and customers and their problems, which means you can actually have empathy for what's actually going on with them, and then you can directly solve it. That cycle is so powerful, the sooner you learn how to make that cycle happen in your career, the better off you'll be. &lt;/p&gt;
&lt;p&gt;If you can make software and make software for other people, the outcome truly is hundreds of millions of dollars worth of value if you get it right. That's where I'm here to try and encourage you to do. I'm not really saying that you shouldn't go work at a big tech company. &lt;/p&gt;
&lt;p&gt;I am saying you should probably leave before it makes you soft. &lt;/p&gt;
&lt;p&gt;Don't make my mistakes, make all new mistakes. &lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading! You can subscribe to my YouTube channel&lt;/em&gt; &lt;a href=&quot;https://youtube.com/garrytan&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, or click the subscribe link below to get email transcripts of all future episodes.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 17:08:59 +0000</pubDate>
<dc:creator>razin</dc:creator>
<og:title>Working for Microsoft cost me $200 million</og:title>
<og:type>article</og:type>
<og:url>https://blog.garrytan.com/working-for-microsoft-cost-me-200-dollars-million</og:url>
<og:description>Hey everyone, new vlog for this morning. I was in Seattle last week and it made me nostalgic. When I lived there, I made a career decision that cost me a lot, so I wanted to share it with you with...</og:description>
<og:image>https://phaven-prod.s3.amazonaws.com/files/image_part/asset/2382738/IIE7MquOHM3dMrMvfXYdyBZDFKY/large_200m.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.garrytan.com/working-for-microsoft-cost-me-200-dollars-million</dc:identifier>
</item>
<item>
<title>A Navy Seal&amp;#039;s Semester at Yale, at Age 52</title>
<link>https://medium.com/@james.hatch/my-semester-with-the-snowflakes-888285f0e662</link>
<guid isPermaLink="true" >https://medium.com/@james.hatch/my-semester-with-the-snowflakes-888285f0e662</guid>
<description>&lt;div readability=&quot;5.3698630136986&quot;&gt;

&lt;div class=&quot;du&quot;&gt;
&lt;div class=&quot;n dv dw dx dy&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;dz ea eb&quot;&gt;

&lt;img alt=&quot;James Hatch&quot; class=&quot;r ei eb ea&quot; src=&quot;https://miro.medium.com/fit/c/96/96/1*HP14nn5QJkozmzl-_rXzyg@2x.jpeg&quot; width=&quot;48&quot; height=&quot;48&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;ad9b&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;In May of 2019, at the age of 52, I was accepted to the Eli Whitney student program at Yale University.&lt;/p&gt;
&lt;p id=&quot;05bd&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;I am the oldest freshman in the class of 2023. Before I was accepted, I didn’t really know what to expect. I had seen the infamous YouTube video of students screaming at a faculty member. I had seen the news stories regarding the admissions scandal and that Yale was included in that unfortunate business. I had also heard the students at Yale referred to as “snowflakes” in various social media dumpsters and occasionally I’d seen references to Ivy League students as snowflakes in a few news sources.&lt;/p&gt;
&lt;p id=&quot;5e80&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;I should give a bit of background information. I was an unimpressive and difficult student in public schools. I joined the military at 17 and spent close to 26 years in the US Navy. I was assigned, for 22 of those years to Naval Special Warfare Commands. I went through SEAL training twice, quit the first time and barely made it the second time. I did multiple deployments and was wounded in combat in 2009 on a mission to rescue an American hostage.&lt;/p&gt;
&lt;p id=&quot;1562&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Every single day I went to work with much better humans than myself. I was brought to a higher level of existence because the standards were high and one needed to earn their slot, their membership in the unit. This wasn’t a one-time deal. Every time you showed up for work, you needed to prove your worth.&lt;/p&gt;
&lt;p id=&quot;c7f2&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;The vetting process is difficult and the percentages of those who try out for special operations units and make it through the screening is very low.&lt;/p&gt;
&lt;p id=&quot;bc68&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;In an odd parallel, I feel, in spite of my short time here, the same about Yale.&lt;/p&gt;
&lt;p id=&quot;5689&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;After receiving my acceptance email and returning to consciousness, I decided to move to Connecticut and do my best in this new environment. Many people have asked me why I want to attend college at 52, and why at an Ivy League institution like Yale? I could have easily stayed in Virginia and attended a community college close to my home. Well, based on my upbringing in the military, I associated difficult vetting process’ with quality and opportunity. I was correct in that guess. More importantly though, I simply want to be a better human being. I feel like getting a world class education at an amazing institution like Yale will help me reach that goal. Are there other places to get a great education? Of course, but I chose Yale.&lt;/p&gt;
&lt;p id=&quot;2916&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;My first class of the semester was absolutely terrifying. I don’t know if it was so for the kids in my class, but it damn sure was for me. It was a literature seminar with the amazing Sterling Professor of Comparative Literature, Professor David Quint. He is an amazing human in that he has dedicated his life to literature, and he knows what he is talking about. The discussion was centered around the Iliad. I had read a bit of the Iliad in the middle part of my military career and decidedly didn’t get it. Listening to Professor Quint demonstrated exactly how much I didn’t “get it.” The other students looked like children to me. Hell, they are children, but when they speak, and some of them speak english as their second language, they sound like very well-spoken adults. My Navy issued graduate degree in cussing wasn’t going to help me out here. These young students had a good grasp of the literature and although they lacked much experience to bounce it off of, they were certainly “all in” on trying to figure out its underlying meaning.&lt;/p&gt;
&lt;p id=&quot;0343&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;At one point, I said; “hey, I’m just an old guy sitting here with a bunch of smart people, but I think….” And they all smiled, some of them nervously because I was essentially an alien. I was an old dude with tattoos all over his arms, and a Dutch Shepherd service Dog brandishing a subdued American flag patch on her harness, sitting next to him. Professor Quint later approached me and said “hey, don’t downplay your intelligence. You are smart as well.”&lt;/p&gt;
&lt;p id=&quot;d7e6&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;I thought, I’ve got him fooled! Turns out I didn’t fool him at all when I turned in my first paper, but that is another story for another time.&lt;/p&gt;
&lt;p id=&quot;bec8&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;After a few classes, I started to get to know some of my classmates. Each of them is a compelling human who, in spite of their youth, are quite serious about getting things done.&lt;/p&gt;
&lt;p id=&quot;2643&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;One young woman made a very big impact on me. She approached me after class one day and said; “I am really glad I can be here at Yale and be in class with you. My grandfather came to Yale and when WWII started, he left for the Navy and flew planes in the Pacific theater. After he came home, he came back to Yale, but he couldn’t finish. He locked himself in his room and drank and eventually had to leave, so I feel like I am helping him finish here at Yale and I’m doing it with a veteran, you.”&lt;/p&gt;
&lt;p id=&quot;1ff6&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;I was surprised and quite emotional. Exceptionally emotional. She went on; “I can send you a photo of him!” and I told her I would love one. That evening she sent me this photo of her grandfather.&lt;/p&gt;

&lt;p id=&quot;4603&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;I used to read stories about men like him and they are heroes to me. Clearly her grandfather is a hero to her as well, and she is going to make him quite proud. This connection with a WWII vet through his amazing granddaughter is a gift. One of many I receive on an almost daily basis in this amazing institution. I think it’s worth taking a moment here and acknowledging that this thing we now call “PTSD” has always been around and some of us veterans escape it while others, like me and likely this gent in the airplane, felt the sting of it.&lt;/p&gt;
&lt;p id=&quot;0458&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;One day in another lit class, I brought up a book I’d read a long time ago called “Taxi Driver Wisdom” by Risa Mickenberg, Joanne Dugan and Brian Lee Hughes.&lt;/p&gt;
&lt;p id=&quot;9c8b&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;After that class a couple of the students approached me and explained that their dads were cabbies when they first came to the United States, and that their fathers had told them that the things they sometimes heard from people in their cabs were amazing.&lt;/p&gt;
&lt;p id=&quot;3c41&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Think about that for a second. These students are first generation Americans. Their fathers immigrated to this country and started out by being taxi drivers. Now, their children are attending college at Yale University. I’m a patriotic man and those are the stories that help me understand how, in spite of the seemingly endless stream of negativity surrounding it, the American Dream is still alive and kicking. It makes my heart sing every time I see those kids.&lt;/p&gt;
&lt;p id=&quot;f6e8&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Let me address this “snowflake” thing. According to the “Urban Dictionary” a “snowflake” is a “term for someone that thinks they are unique and special, but really are not. It gained popularity after the movie “Fight Club” from the quote “You are not special. You’re not a beautiful and unique snowflake. You’re the same decaying organic matter as everything else.”&lt;/p&gt;
&lt;p id=&quot;31b1&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;I hear the term occasionally from buddies of mine who I love, they say things like; “how are things up there with the liberal snowflakes?”&lt;/p&gt;
&lt;p id=&quot;9737&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Let me assure you, I have not met one kid who fits that description. None of the kids I’ve met seem to think that they are “special” any more than any other 18–22-year-old. These kids work their assess off. I have asked a couple of them to help me with my writing. One young woman volunteered to help me by proof-reading my “prose” and, for the record, I believe she will be the President someday. I recently listened while one of my closer pals, a kid from Portland, Oregon, talked to me about the beauty of this insane mathematics problem set he is working on. There is a young man in our group who grew up in Alaska working on fishing boats from a young age and who plays the cello. There is an exceptional young woman from Chicago who wrote a piece for the Yale Daily news expressing the importance of public demonstrations in the light of a recent police shooting. She and I are polar opposites. I am the “patriarchy” at first glance, and she is a young black woman who is keen on public protests. Not the type of soul I generally find myself in a conversation with. We come from different worlds and yet we both read classic works with open hearts and minds.&lt;/p&gt;
&lt;p id=&quot;d988&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;We recently met with a prominent writer from a think tank who is researching the state of the humanities in the university setting. There were four of us students, two other young men, the young woman from Chicago, and me, the old guy. As the younger students started to express their thoughts, the young woman (truly a unicorn of a human) used the word “safe space” and it hit me forcefully. I come from a place where when I hear that term, I roll my eyes into the back of my vacant skull and laugh from the bottom of my potbelly. This time, I was literally in shock. It hit me that what I thought a “safe space” meant, was not accurate. This young woman, the one who used the phrase, “Safe Space” isn’t scared of anything. She is a life-force of goodness and strength. She doesn’t need anyone to provide a comfortable environment for her. What she meant by “safe space” was that she was happy to be in an environment where difficult subjects can be discussed openly, without the risk of &lt;strong class=&quot;fv hp&quot;&gt;disrespect or harsh judgement&lt;/strong&gt;. This works both ways. What I mean is, this young woman was comfortable, in this University setting, wrestling with things like the Aristotelian idea of some humans being born as “natural slaves.” She was quite comfortable in that space. The question was, how comfortable was the 52-year-old white guy in that discussion? Did it make me uncomfortable? Yes. I’m grateful for the discomfort. Thinking about things I don’t understand or have, for most of my life, written off, is a good thing.&lt;/p&gt;
&lt;p id=&quot;5694&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Being uncomfortable is KEY in this world of ours. Not altogether different from the world of special operations, where the work needs to be done, regardless of weather or personal feelings. The climate in this educational institution is one where most students understand that there HAS to be a place where people can assault ideas openly and discuss them vigorously and respectfully in order to improve the state of humanity. I’ll call that a “safe space” and I’m glad those places exist.&lt;/p&gt;
&lt;p id=&quot;4e68&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Here in the “Directed Studies” program, instead of “tuning in” to our favorite self-confirming “news” source, we are given a timeless text with heavy ideas and then we throw them out on the floor and discuss them with people who have, as I mentioned earlier, made these works and their meaning, their vocation.&lt;/p&gt;
&lt;p id=&quot;456e&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;In my opinion, the real snowflakes are the people who are afraid of that situation. The poor souls who never take the opportunity to discuss ideas in a group of people who will very likely respectfully disagree with them. I challenge any of you hyper-opinionated zealots out there to actually sit down with a group of people who disagree with you and be open to having your mind changed. I’m not talking about submitting your deeply held beliefs to your twitter/facebook/instagram feeds for agreement from those who “follow” you. That unreal “safe space” where the accountability for ones words is essentially null. I have sure had my mind changed here at Yale. To me there is no dishonor in being wrong and learning. There is dishonor in willful ignorance and &lt;strong class=&quot;fv hp&quot;&gt;there is dishonor in disrespect&lt;/strong&gt;.&lt;/p&gt;
&lt;p id=&quot;beaa&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;On veteran’s day, there was a great scene on cross campus. A bunch of American flags had been placed there and I stopped on my morning walk to class and took photos of my dog in front of them and sent them to my friends. Later at some point during the day, a young student placed a glove with red paint on it on one of the flags as she wanted to demonstrate her displeasure with something…I’m not quite sure what.&lt;/p&gt;
&lt;p id=&quot;1497&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;That same afternoon, some of my fellow students from “Directed Studies,” after a lecture, gave me this:&lt;/p&gt;

&lt;p id=&quot;5bb8&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;It is a card thanking me for my service to our nation. I was humbled and amazed.&lt;/p&gt;
&lt;p id=&quot;6a37&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;These hardworking kids are very kind and thoughtful. A far cry from the picture that is often painted of them.&lt;/p&gt;
&lt;p id=&quot;0e7b&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;One of my Professors, a Professor of Philosophy, told me once “a good leader is a bridge builder.” Professor David Charles is a man who has been teaching bright young people and some slow and old ones like me, the most difficult subject for me, at Oxford and now Yale. He’s been doing this for over 30 years. He is extremely humble and very kind, in addition to being brilliant. I’m motivated by his words and I want to build bridges and lead, in some small way, a new conversation where we stop pointing out the perceived differences in each other, or this group vs that group, and start pointing out similarities. We don’t need more condescending friction in humanity. We need less. One step in the direction of less societal friction is to seek commonalities. Another step, and one that is sorely needed, is &lt;strong class=&quot;fv hp&quot;&gt;respect&lt;/strong&gt;.&lt;/p&gt;
&lt;p id=&quot;4056&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;&lt;strong class=&quot;fv hp&quot;&gt;&lt;em class=&quot;hs&quot;&gt;Now before you think I’m preaching, please know that I come from a place where I was distinctly the opposite of this ideal.&lt;/em&gt;&lt;/strong&gt; I looked for reasons to disregard the opinions of those I didn’t respect. I discounted the ideas of people I felt like hadn’t earned the right to share what was in their mind. Particularly when it came to national security issues, I felt that if you hadn’t taken a gun into combat, I didn’t give a damn what your opinion was.&lt;/p&gt;
&lt;p id=&quot;86ee&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;I’d like to count this as my first brick in attempting to build a bridge between the people here at Yale and those like me before I arrived here. We need everyone who gives a damn about this American experiment to contribute and make it succeed. We humans have much more in common than we have different. Thanks Yale, for helping me to become an aspiring bridge-builder at the age of 52,&lt;/p&gt;
&lt;p id=&quot;ecb0&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;In our welcome speech at the beginning of this semester, with all of us Freshman sitting in Woolsey Hall, me sitting next to another veteran, one who’d served in the 82nd Airborne, President Salovey said;&lt;/p&gt;
&lt;p id=&quot;cb73&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;&lt;strong class=&quot;fv hp&quot;&gt;&lt;em class=&quot;hs&quot;&gt;“There is so much we do not know. Let us embrace, together, our humility — our willingness to admit what we have yet to discover. After all, if you knew all the answers, you would not need Yale. And if humanity knew all the answers, the world would not need Yale.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p id=&quot;8866&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Now back to that bridge. I need to figure out how to actually build one. Good thing I’ve found a place where I can get help. If this place is peopled by “snowflakes” I’m proudly one of them. I’m a snowflake with a purple heart.&lt;/p&gt;
&lt;p id=&quot;5322&quot; class=&quot;ft fu dc bk fv b fw fx fy fz ga gb gc gd ge gf gg&quot;&gt;Peace-&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 16:19:27 +0000</pubDate>
<dc:creator>fortran77</dc:creator>
<og:type>article</og:type>
<og:title>My semester with the snowflakes~</og:title>
<og:description>In May of 2019, at the age of 52, I was accepted to the Eli Whitney student program at Yale University.</og:description>
<og:url>https://medium.com/@james.hatch/my-semester-with-the-snowflakes-888285f0e662</og:url>
<og:image>https://miro.medium.com/max/640/1*zaZPswy1WhbHypkaUatM3A.jpeg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@james.hatch/my-semester-with-the-snowflakes-888285f0e662</dc:identifier>
</item>
<item>
<title>Boeing CEO ousted as 737 Max crisis deepens</title>
<link>https://www.reuters.com/article/uk-boeing-737-max-ceo/boeing-ceo-ousted-as-737-max-crisis-deepens-idUKKBN1YR1FP</link>
<guid isPermaLink="true" >https://www.reuters.com/article/uk-boeing-737-max-ceo/boeing-ceo-ousted-as-737-max-crisis-deepens-idUKKBN1YR1FP</guid>
<description>&lt;p&gt;(Reuters) - Boeing Co has fired Chief Executive Dennis Muilenburg after repeatedly failing to contain the fallout from a pair of fatal crashes that halted output of its best-selling jetliner and tarnished its reputation with airlines and regulators.&lt;/p&gt;
&lt;p&gt;Boeing - beset by one setback after another following the two air disasters - dropped Muilenburg as it became increasingly clear that he was making little headway resolving a crisis that has cost it $9 billion, hurt suppliers and airlines and now threatens to cut the pace of U.S. economic growth.&lt;/p&gt;
&lt;p&gt;Chairman David Calhoun, a former General Electric executive who has been on the Boeing board since 2009, will take over as CEO and president, effective from Jan. 13, Boeing said. Until then, Chief Financial Officer Greg Smith will run the world’s largest planemaker.&lt;/p&gt;
&lt;p&gt;“The board of directors decided that a change in leadership was necessary to restore confidence,” a Boeing statement said. A Boeing official said the board had deliberated over the weekend and decided to oust Muilenburg in a phone call on Sunday.&lt;/p&gt;
&lt;p&gt;Muilenburg could not be reached for comment.&lt;/p&gt;
&lt;p&gt;Boeing shares, which have dropped more than 20% over the past nine months, closed up 2.9%.&lt;/p&gt;
&lt;p&gt;The 737 MAX has been grounded since March after two crashes in Indonesia and Ethiopia killed 346 people within five months.&lt;/p&gt;
&lt;p&gt;Boeing is struggling to mend relations with the U.S. and international regulators it needs to win over to get the jet back in the air.&lt;/p&gt;
&lt;p&gt;After keeping assembly lines open and storing 400 planes to be ready for a return to flight, Boeing acknowledged this month it would not be able to reach its target of flying this year and announced it would halt 737 MAX production in January.&lt;/p&gt;

&lt;p&gt;Boeing on Monday said shipments from 737 suppliers will be suspended for a month starting mid-January, adding that it was uncertain when production would restart.&lt;/p&gt;
&lt;p&gt;Economists estimate that will lower overall U.S. economic growth by half a percentage point.&lt;/p&gt;
&lt;p&gt;Muilenburg’s departure followed a week of dramatic setbacks for Boeing, which vies with Europe’s Airbus for leadership of the $150 billion jet industry.&lt;/p&gt;
&lt;p&gt;They ranged from a decision to halt production of the MAX, to a public slap-down from the Federal Aviation Administration (FAA), a ratings downgrade and a space launch glitch on Friday.&lt;/p&gt;
&lt;p&gt;Based on Boeing securities filings, Muilenburg may be eligible for nearly $39 million in severance. Boeing declined to comment on the figure or whether he would accept it.&lt;/p&gt;
&lt;p&gt;Boeing said last month Muilenburg had volunteered to give up his 2019 bonus and stock awards. For 2018, his bonus and equity awards amounted to some $20 million, according to filings.&lt;/p&gt;
&lt;p&gt;His dismissal received backing from Peter DeFazio, chair of the U.S. House of Representatives’ transportation committee.&lt;/p&gt;
&lt;p&gt;“It’s clear Dennis Muilenburg’s ouster was long overdue,” he said. “Under his watch, a long-admired company made a number of devastating decisions that suggest profit took priority over safety.”&lt;/p&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s2.reutersmedia.net/resources/r/?m=02&amp;amp;d=20191224&amp;amp;t=2&amp;amp;i=1467758389&amp;amp;r=LYNXMPEFBM10I&amp;amp;w=20&quot; aria-label=&quot;FILE PHOTO: Boeing Co Chief Executive Dennis Muilenburg pauses while speaking during a news conference at the annual shareholder meeting in Chicago, Illinois, U.S., April 29, 2019. Jim Young/Pool via REUTERS/File Photo&quot;/&gt;
&lt;/div&gt;

&lt;div class=&quot;Image_caption&quot;&gt;

&lt;span&gt;FILE PHOTO: Boeing Co Chief Executive Dennis Muilenburg pauses while speaking during a news conference at the annual shareholder meeting in Chicago, Illinois, U.S., April 29, 2019. Jim Young/Pool via REUTERS/File Photo&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;‘RIGHT TOOL KIT?’&lt;/h3&gt;
&lt;p&gt;Calhoun, who is resigning from Blackstone to take the top job at Boeing, was respected by the industry, said aerospace analyst Richard Aboulafia of Teal Group.&lt;/p&gt;
&lt;p&gt;“But long term, does he bring the right tool kit? Private equity leans companies out. That’s not Boeing’s problem right now.”&lt;/p&gt;
&lt;p&gt;Boeing - which has taken flak from the Federal Aviation Administration for appearing to pressure the regulator by predicting when the MAX fly - pledged full transparency. It named a veteran PR boss from the auto industry.&lt;/p&gt;
&lt;p&gt;“We don’t think it is controversial to suggest that Boeing’s MAX response has been a failure - and as a result we think it is wholly appropriate for the board to replace Muilenburg,” said Robert Stallard, analyst at Vertical Research Partners.&lt;/p&gt;
&lt;p&gt;Muilenburg, an engineer who started at Boeing as an intern in 1985, fought a rising tide of public and regulatory scrutiny to try to steady the company during the crisis. He initiated a broad safety initiative involving heavy investments in training but was unable to shake off a set of awkward public appearances.&lt;/p&gt;
&lt;h3&gt;‘WE’VE MADE MISTAKES’&lt;/h3&gt;
&lt;p&gt;Muilenburg acknowledged errors in failing to give pilots more information on a stall-prevention system before the crashes and for taking months to disclose that it had made optional an alarm that alerts pilots to a mismatch of flight data.&lt;/p&gt;
&lt;p&gt;“We’ve made mistakes and we got some things wrong. We’re improving and we’re learning,” he told lawmakers in October.&lt;/p&gt;
&lt;p&gt;Speculation that he would be fired had been circulating in the industry for months, intensifying in October when the board stripped him of his chairman title - although he had also twice won expressions of confidence from Calhoun.&lt;/p&gt;
&lt;p&gt;Muilenburg was credited with halting a drift in the company’s defense division and reshaping Boeing’s management.&lt;/p&gt;
&lt;div class=&quot;Slideshow_container Slideshow_small Slideshow_standard&quot;&gt;
&lt;div class=&quot;Slideshow_preview-container&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s3.reutersmedia.net/resources/r/?m=02&amp;amp;d=20191224&amp;amp;t=2&amp;amp;i=1467758419&amp;amp;r=LYNXMPEFBM125&quot;/&gt;
&lt;/div&gt;

Slideshow &lt;span class=&quot;Slideshow_count&quot;&gt;(7 Images)&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But by keeping Muilenburg as long as it did, some experts say Boeing ignored part of the crisis communications playbook.&lt;/p&gt;
&lt;p&gt;“You want to bring somebody from the outside to bring fresh perspective to ‘save the day,’” said Paul Argenti, a professor at Dartmouth’s Tuck School of Business. “He should have been gone a long time ago. He is part of the problem.”&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;11&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting by Ankit Ajmera in Bengaluru and Tim Hepher in Paris; Additional reporting by Eric Johnson in Seattle, David Shepardson in Washington, Allison Lampert in Montreal; Writing by Pravin Char and Dan Burns; Editing by Lisa Shumaker and Grant McCool&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Mon, 23 Dec 2019 15:07:29 +0000</pubDate>
<dc:creator>pseudolus</dc:creator>
<og:title>Boeing fires CEO Muilenburg to restore confidence amid 737 crisis</og:title>
<og:url>https://www.reuters.com/article/us-boeing-737-max-ceo-idUSKBN1YR1FL</og:url>
<og:type>article</og:type>
<og:description>Boeing Co has fired Chief Executive Dennis Muilenburg after repeatedly failing t...</og:description>
<og:image>https://s2.reutersmedia.net/resources/r/?m=02&amp;d=20191224&amp;t=2&amp;i=1467758389&amp;w=1200&amp;r=LYNXMPEFBM10I</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-boeing-737-max-ceo/boeing-fires-ceo-muilenburg-to-restore-confidence-amid-737-crisis-idUSKBN1YR1FL</dc:identifier>
</item>
<item>
<title>Typing inside of the default WSL terminal feels amazing (2018)</title>
<link>https://github.com/microsoft/terminal/issues/327</link>
<guid isPermaLink="true" >https://github.com/microsoft/terminal/issues/327</guid>
<description>&lt;p&gt;&lt;a class=&quot;user-mention&quot; data-hovercard-type=&quot;user&quot; data-hovercard-url=&quot;/users/stakx/hovercard&quot; data-octo-click=&quot;hovercard-link-click&quot; data-octo-dimensions=&quot;link_type:self&quot; href=&quot;https://github.com/stakx&quot;&gt;@stakx&lt;/a&gt;, I am referring to USER32 and GDI32.&lt;/p&gt;
&lt;p&gt;I'll give you a cursory overview of what I know off the top of my head without spending hours confirming the details. As such, some of this is subject to handwaving and could be mildly incorrect but is probably in the right direction. Consider every statement to be my personal knowledge on how the world works and subject to opinion or error.&lt;/p&gt;
&lt;p&gt;For the graphics part of the pipeline (GDI32), the user-mode portions of GDI are pretty far down. The app calls GDI32, some work is done in that DLL on the user-mode side, then a kernel call jumps over to the kernel and drawing occurs.&lt;/p&gt;
&lt;p&gt;The portion that you're thinking of regarding &quot;silently converted to sit on top of other stuff&quot; is probably that once we hit the kernel calls, a bunch of the kernel GDI stuff tends to be re-platformed on top of the same stuff as DirectX when it is actually handled by the NVIDIA/AMD/Intel/etc. graphics driver and the GPU at the bottom of the stack. I think this happened with the graphics driver re-architecture that came as a part of WDDM for Windows Vista. There's a document out there somewhere about what calls are still really fast in GDI and which are slower as a result of the re-platforming. Last time I found that document and checked, we were using the fast ones.&lt;/p&gt;
&lt;p&gt;On top of GDI, I believe there are things like Common Controls or comctl32.dll which provided folks reusable sets of buttons and elements to make their UIs before we had nicer declarative frameworks. We don't use those in the console really (except in the property sheet off the right click menu).&lt;/p&gt;
&lt;p&gt;As for DirectWrite and D2D and D3D and DXGI themselves, they're a separate set of commands and paths that are completely off to the side from GDI at all both in user and kernel mode. They're not really related other than that there's some interoperability provisions between the two. Most of our other UI frameworks tend to be built on top of the DirectX stack though. XAML is for sure. I think WPF is. Not sure about WinForms. And I believe the composition stack and the window manager are using DirectX as well.&lt;/p&gt;
&lt;p&gt;As for the input/interaction part of the pipeline (USER32), I tend to find most other newer things (at least for desktop PCs) are built on top of what is already there. USER32's major concept is windows and window handles and everything is sent to a window handle. As long as you're on a desktop machine (or a laptop or whatever... I mean a classic-style Windows-powered machine), there's a window handle involved and messages floating around and that means we're talking USER32.&lt;/p&gt;
&lt;p&gt;The window message queue is just a straight up FIFO (more or less) of whatever input has occurred relevant to that window while it's in the foreground + whatever has been sent to the window by other components in the system.&lt;/p&gt;
&lt;p&gt;The newer technologies and the frameworks like XAML and WPF and WinForms tend to receive the messages from the window message queue one way or another and process them and turn them into event callbacks to various objects that they've provisioned within their world.&lt;/p&gt;
&lt;p&gt;However, the newer technologies that also work on other non-desktop platforms like XAML tend to have the ability to process stuff off of a completely different non-USER32 stack as well. There's a separate parallel stack to USER32 with all of our new innovations and realizations on how input and interaction should occur that doesn't exactly deal with classic messaging queues and window handles the same way. This is the whole Core* family of things like CoreWindow and CoreMessaging. They also have a different concept of &quot;what is a user&quot; that isn't so centric around your butt in rolling chair in front of a screen with a keyboard and mouse on the desk.&lt;/p&gt;
&lt;p&gt;Now, if you're on XAML or one of the other Frameworks... all this intricacy is handled for you. XAML figures out how to draw on DirectX for you and negotiates with the compositor and window manager for cool effects on your behalf. It figures out whether to get your input events from USER32 or Core* or whatever transparently depending on your platform and the input stacks can handle pen, touch, keyboard, mouse, and so on in a unified manner. It has provisions inside it embedded to do all the sorts of globalization, accessibility, input interaction, etc. stuff that make your life easy. But you could choose to go directly to the low-level and handle it yourself or skip handling what you don't care about.&lt;/p&gt;
&lt;p&gt;The trick is that GDI32 and USER32 were designed for a limited world with a limited set of commands. Desktop PCs were the only thing that existed, single user at the keyboard and mouse, simple graphics output to a VGA monitor. So using them directly at the &quot;low level&quot; like conhost does is pretty easy. The new platforms could be used at the &quot;low level&quot; but they're orders of magnitude more complicated because they now account for everything that has happened with personal computing in 20+ years like different form factors, multiple active users, multiple graphics adapters, and on and on and on and on. So you tend to use a framework when using the new stuff so your head doesn't explode. They handle it for you, but they handle more than they ever did before so they're slower to some degree.&lt;/p&gt;
&lt;p&gt;So are GDI32 and USER32 &quot;lower&quot; than the new stuff? Sort of.&lt;br/&gt;Can you get that low with the newer stuff? Mostly yes, but you probably shouldn't and don't want to.&lt;br/&gt;Does new live on top of old or is old replatformed on the new? Sometimes and/or partially.&lt;br/&gt;Basically... it's like the answer to anything software... &quot;it's an unmitigated disaster and if we all stepped back a moment, we should be astounded that it works at all.&quot; :P&lt;/p&gt;
&lt;p&gt;Anyway, that's enough ramble for one morning. Hopefully that somewhat answered your questions and gave you a bit more insight.&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 07:45:02 +0000</pubDate>
<dc:creator>hnbreak</dc:creator>
<og:image>https://repository-images.githubusercontent.com/100060912/dc77b180-764a-11e9-9e12-aace7d0ecd7d</og:image>
<og:type>object</og:type>
<og:title>Typing inside of the default WSL terminal feels amazing, why is it better than every other app? · Issue #327 · microsoft/terminal</og:title>
<og:url>https://github.com/microsoft/terminal/issues/327</og:url>
<og:description>Sorry, this isn&amp;#39;t an issue, but instead, it&amp;#39;s more of a suggestion / request to please not break whatever you did with the default WSL terminal (Ubuntu specifically) being so responsive whe...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/microsoft/terminal/issues/327</dc:identifier>
</item>
<item>
<title>WTFPython – Understanding Python through surprising snippets</title>
<link>https://github.com/satwikkansal/wtfpython/blob/master/README.md</link>
<guid isPermaLink="true" >https://github.com/satwikkansal/wtfpython/blob/master/README.md</guid>
<description>&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/satwikkansal/wtfpython/blob/master/images/logo.png&quot;&gt;&lt;img src=&quot;https://github.com/satwikkansal/wtfpython/raw/master/images/logo.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;Exploring and understanding Python through surprising snippets.&lt;/p&gt;
&lt;p&gt;Translations: &lt;a href=&quot;https://github.com/leisurelicht/wtfpython-cn&quot;&gt;Chinese 中文&lt;/a&gt; | &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues/new?title=Add%20translation%20for%20%5BLANGUAGE%5D&amp;amp;body=Expected%20time%20to%20finish:%20%5BX%5D%20weeks.%20I%27ll%20start%20working%20on%20it%20from%20%5BY%5D.&quot;&gt;Add translation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other modes: &lt;a href=&quot;https://colab.research.google.com/github/satwikkansal/wtfpython/blob/master/irrelevant/wtf.ipynb&quot; rel=&quot;nofollow&quot;&gt;Interactive&lt;/a&gt; | &lt;a href=&quot;https://pypi.python.org/pypi/wtfpython&quot; rel=&quot;nofollow&quot;&gt;CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, being a beautifully designed high-level and interpreter-based programming language, provides us with many features for the programmer's comfort. But sometimes, the outcomes of a Python snippet may not seem obvious at first sight.&lt;/p&gt;
&lt;p&gt;Here's a fun project attempting to explain what exactly is happening under the hood for some counter-intuitive snippets and lesser-known features in Python.&lt;/p&gt;
&lt;p&gt;While some of the examples you see below may not be WTFs in the truest sense, but they'll reveal some of the interesting parts of Python that you might be unaware of. I find it a nice way to learn the internals of a programming language, and I believe that you'll find it interesting too!&lt;/p&gt;
&lt;p&gt;If you're an experienced Python programmer, you can take it as a challenge to get most of them right in the first attempt. You may have already experienced some of them before, and I might be able to revive sweet old memories of yours! 😅&lt;/p&gt;
&lt;p&gt;PS: If you're a returning reader, you can learn about the new modifications &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/releases/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, here we go...&lt;/p&gt;


&lt;p&gt;All the examples are structured like below:&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;h3&gt;▶ Some fancy Title&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Set up the code.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Preparation for the magic...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; triggering_statement
Some unexpected output
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Optional): One line describing the unexpected output.&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Brief explanation of what's happening and why is it happening.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Set up code&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; More examples for further clarification (if necessary)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python version(s)):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; trigger &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; some example that makes it easy to unveil the magic&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; some justified output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the examples are tested on Python 3.5.2 interactive interpreter, and they should work for all the Python versions unless explicitly specified before the output.&lt;/p&gt;

&lt;p&gt;A nice way to get the most out of these examples, in my opinion, is to read them chronologically, and for every example:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Carefully read the initial code for setting up the example. If you're an experienced Python programmer, you'll successfully anticipate what's going to happen next most of the time.&lt;/li&gt;
&lt;li&gt;Read the output snippets and,
&lt;ul&gt;&lt;li&gt;Check if the outputs are the same as you'd expect.&lt;/li&gt;
&lt;li&gt;Make sure if you know the exact reason behind the output being the way it is.
&lt;ul&gt;&lt;li&gt;If the answer is no (which is perfectly okay), take a deep breath, and read the explanation (and if you still don't understand, shout out! and create an issue &lt;a href=&quot;https://github.com/satwikkansal/wtfPython&quot;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;If yes, give a gentle pat on your back, and you may skip to the next example.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;PS: You can also read WTFPython at the command line using the &lt;a href=&quot;https://pypi.python.org/pypi/wtfpython&quot; rel=&quot;nofollow&quot;&gt;pypi package&lt;/a&gt;,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
$ pip install wtfpython -U
$ wtfpython
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h2&gt;Section: Strain your brain!&lt;/h2&gt;
&lt;h3&gt;▶ First things first! *&lt;/h3&gt;
&lt;p&gt;For some reason, the Python 3.8's &quot;Walrus&quot; operator (&lt;code&gt;:=&lt;/code&gt;) has become quite popular. Let's check it out,&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python version 3.8+&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf_walrus&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wtf_walrus&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a :&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf_walrus&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    a :&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf_walrus&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
      &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: invalid syntax

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (a := &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf_walrus&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This works though&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wtf_walrus&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2 .&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;26&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Python version 3.8+&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
(&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (a := &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Typical unpacking&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a, b
(&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (a, b = &lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;19&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Oops&lt;/span&gt;
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    (a, b = &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)
          &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: invalid syntax

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (a, b := &lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;19&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This prints out a weird 3-tuple&lt;/span&gt;
(&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;19&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; a is still unchanged?&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Quick walrus operator refresher&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Walrus operator (&lt;code&gt;:=&lt;/code&gt;) was introduced in Python 3.8, it can be useful in situations where you'd want to assign values to variables within an expression.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;():
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Assume some expensive computation here&lt;/span&gt;
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; time.sleep(1000)&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; So instead of,&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; some_func():
        &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(some_func()) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Which is bad practice since computation is happening twice&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; or&lt;/span&gt;
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; some_func()
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; a:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(a)

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Now you can concisely write&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; a :&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; some_func():
        &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(a)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.8):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This saved one line of code, and implicitly prevented invoking &lt;code&gt;some_func&lt;/code&gt; twice.&lt;/p&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Unparenthesized &quot;assignment expression&quot; (use of walrus operator), is restricted at the top level, hence the &lt;code&gt;SyntaxError&lt;/code&gt; in the &lt;code&gt;a := &quot;wtf_walrus&quot;&lt;/code&gt; statement of the first snippet. Parenthesizing it worked as expected and assigned &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;As usual, parenthesizing of an expression containing &lt;code&gt;=&lt;/code&gt; operator is not allowed. Hence the syntax error in &lt;code&gt;(a, b = 6, 9)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The syntax of the Walrus operator is of the form &lt;code&gt;NAME: expr&lt;/code&gt;, where &lt;code&gt;NAME&lt;/code&gt; is a valid identifier, and &lt;code&gt;expr&lt;/code&gt; is a valid expression. Hence, iterable packing and unpacking are not supported which means,&lt;/p&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;5.5&quot;&gt;
&lt;p&gt;&lt;code&gt;(a := 6, 9)&lt;/code&gt; is equivalent to &lt;code&gt;((a := 6), 9)&lt;/code&gt; and ultimately &lt;code&gt;(a, 9)&lt;/code&gt; (where &lt;code&gt;a&lt;/code&gt;'s value is 6')&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (a := &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; ((a := &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;), &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (a := &lt;span class=&quot;pl-c1&quot;&gt;696&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x
(&lt;span class=&quot;pl-c1&quot;&gt;696&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Both reference same memory location&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Similarly, &lt;code&gt;(a, b := 16, 19)&lt;/code&gt; is equivalent to &lt;code&gt;(a, (b := 16), 19)&lt;/code&gt; which is nothing but a 3-tuple.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Strings can be tricky sometimes&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(a)
&lt;span class=&quot;pl-c1&quot;&gt;140420665652016&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;_&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Notice that both the ids are same.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;140420665652016&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; All versions except 3.7.x&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This will print True or False depending on where you're invoking it (python shell / ipython / as a script)&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This time in file some_file.py&lt;/span&gt;
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b)

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; prints True when the module is invoked!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output (&amp;lt; Python3.7 )&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;aaaaaaaaaaaaaaaaaaaa&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;aaaaaaaaaaaaaaaaaaaaa&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Makes sense, right?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;The behavior in first and second snippets is due to a CPython optimization (called string interning) that tries to use existing immutable objects in some cases rather than creating a new object every time.&lt;/li&gt;
&lt;li&gt;After being &quot;interned,&quot; many variables may reference the same string object in memory (saving memory thereby).&lt;/li&gt;
&lt;li&gt;In the snippets above, strings are implicitly interned. The decision of when to implicitly intern a string is implementation-dependent. There are some rules that can be used to guess if a string will be interned or not:
&lt;ul&gt;&lt;li&gt;All length 0 and length 1 strings are interned.&lt;/li&gt;
&lt;li&gt;Strings are interned at compile time (&lt;code&gt;'wtf'&lt;/code&gt; will be interned but &lt;code&gt;''.join(['w', 't', 'f']&lt;/code&gt; will not be interned)&lt;/li&gt;
&lt;li&gt;Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why &lt;code&gt;'wtf!'&lt;/code&gt; was not interned due to &lt;code&gt;!&lt;/code&gt;. CPython implementation of this rule can be found &lt;a href=&quot;https://github.com/python/cpython/blob/3.6/Objects/codeobject.c#L19&quot;&gt;here&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/satwikkansal/wtfpython/blob/master/images/string-intern/string_intern.png&quot;&gt;&lt;img src=&quot;https://github.com/satwikkansal/wtfpython/raw/master/images/string-intern/string_intern.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are set to &lt;code&gt;&quot;wtf!&quot;&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't &quot;know&quot; that there's already &lt;code&gt;wtf!&lt;/code&gt; as an object (because &lt;code&gt;&quot;wtf!&quot;&lt;/code&gt; is not implicitly interned as per the facts mentioned above). It's a compile-time optimization. This optimization doesn't apply to 3.7.x versions of CPython (check this &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues/100&quot;&gt;issue&lt;/a&gt; for more discussion).&lt;/li&gt;
&lt;li&gt;A compile unit in an interactive environment like IPython consists of a single statement, whereas it consists of the entire module in case of modules. &lt;code&gt;a, b = &quot;wtf!&quot;, &quot;wtf!&quot;&lt;/code&gt; is single statement, whereas &lt;code&gt;a = &quot;wtf!&quot;; b = &quot;wtf!&quot;&lt;/code&gt; are two statements in a single line. This explains why the identities are different in &lt;code&gt;a = &quot;wtf!&quot;; b = &quot;wtf!&quot;&lt;/code&gt;, and also explain why they are same when invoked in &lt;code&gt;some_file.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The abrupt change in the output of the fourth snippet is due to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Peephole_optimization&quot; rel=&quot;nofollow&quot;&gt;peephole optimization&lt;/a&gt; technique known as Constant folding. This means the expression &lt;code&gt;'a'*20&lt;/code&gt; is replaced by &lt;code&gt;'aaaaaaaaaaaaaaaaaaaa'&lt;/code&gt; during compilation to save a few clock cycles during runtime. Constant folding only occurs for strings having a length of less than 20. (Why? Imagine the size of &lt;code&gt;.pyc&lt;/code&gt; file generated as a result of the expression &lt;code&gt;'a'*10**10&lt;/code&gt;). &lt;a href=&quot;https://github.com/python/cpython/blob/3.6/Python/peephole.c#L288&quot;&gt;Here's&lt;/a&gt; the implementation source for the same.&lt;/li&gt;
&lt;li&gt;Note: In Python 3.7, Constant folding was moved out from peephole optimizer to the new AST optimizer with some change in logic as well, so the third snippet doesn't work for Python 3.7. You can read more about the change &lt;a href=&quot;https://bugs.python.org/issue11549&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Hash brownies&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
some_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {}
some_dict[&lt;span class=&quot;pl-c1&quot;&gt;5.5&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;JavaScript&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
some_dict[&lt;span class=&quot;pl-c1&quot;&gt;5.0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Ruby&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
some_dict[&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict[&lt;span class=&quot;pl-c1&quot;&gt;5.5&lt;/span&gt;]
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;JavaScript&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict[&lt;span class=&quot;pl-c1&quot;&gt;5.0&lt;/span&gt;] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; &quot;Python&quot; destroyed the existence of &quot;Ruby&quot;?&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict[&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;] 
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; complex_five &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;span class=&quot;pl-k&quot;&gt;j&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(complex_five)
&lt;span class=&quot;pl-c1&quot;&gt;complex&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict[complex_five]
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, why is Python all over the place?&lt;/p&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Python dictionaries check for equality and compare the hash value to determine if two keys are the same.&lt;/li&gt;
&lt;li readability=&quot;-1.8808510638298&quot;&gt;Immutable objects with the same value always have the same hash in Python.
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;span class=&quot;pl-k&quot;&gt;j&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;5.0&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;span class=&quot;pl-k&quot;&gt;j&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;strong&gt;Note:&lt;/strong&gt; Objects with different values may also have same hash (known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Collision_(computer_science)&quot; rel=&quot;nofollow&quot;&gt;hash collision&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;When the statement &lt;code&gt;some_dict[5] = &quot;Python&quot;&lt;/code&gt; is executed, the existing value &quot;Ruby&quot; is overwritten with &quot;Python&quot; because Python recognizes &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;5.0&lt;/code&gt; as the same keys of the dictionary &lt;code&gt;some_dict&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This StackOverflow &lt;a href=&quot;https://stackoverflow.com/a/32211042/4354153&quot; rel=&quot;nofollow&quot;&gt;answer&lt;/a&gt; explains the rationale behind it.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Deep down, we're all the same.&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;WTF&lt;/span&gt;:
  &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; WTF() &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; WTF() &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; two different instances can't be equal&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; WTF() &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; WTF() &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; identities are also different&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;(WTF()) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;(WTF()) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; hashes _should_ be different as well&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(WTF()) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(WTF())
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;8.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;When &lt;code&gt;id&lt;/code&gt; was called, Python created a &lt;code&gt;WTF&lt;/code&gt; class object and passed it to the &lt;code&gt;id&lt;/code&gt; function. The &lt;code&gt;id&lt;/code&gt; function takes its &lt;code&gt;id&lt;/code&gt; (its memory location), and throws away the object. The object is destroyed.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;When we do this twice in succession, Python allocates the same memory location to this second object as well. Since (in CPython) &lt;code&gt;id&lt;/code&gt; uses the memory location as the object id, the id of the two objects is the same.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;So, the object's id is unique only for the lifetime of the object. After the object is destroyed, or before it is created, something else can have the same id.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;But why did the &lt;code&gt;is&lt;/code&gt; operator evaluated to &lt;code&gt;False&lt;/code&gt;? Let's see with this snippet.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;WTF&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;):
  &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;I&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
  &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__del__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;): &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;D&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; WTF() &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; WTF()
I
I
D
D
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(WTF()) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(WTF())
I
D
I
D
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you may observe, the order in which the objects are destroyed is what made all the difference here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Disorder within order *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; OrderedDict

dictionary &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;dict&lt;/span&gt;()
dictionary[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; dictionary[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-bu&quot;&gt;;&lt;/span&gt;

ordered_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; OrderedDict()
ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-bu&quot;&gt;;&lt;/span&gt;

another_ordered_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; OrderedDict()
another_ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; another_ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-bu&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;DictWithHash&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;dict&lt;/span&gt;):
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    A dict that also implements __hash__ magic.&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;__hash__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;OrderedDictWithHash&lt;/span&gt;(&lt;span class=&quot;pl-e&quot;&gt;OrderedDict&lt;/span&gt;):
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    An OrderedDict that also implements __hash__ magic.&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;__hash__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;20&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; dictionary &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; ordered_dict &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; If a == b&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; dictionary &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; another_ordered_dict &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; and b == c&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ordered_dict &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; another_ordered_dict &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; the why isn't c == a ??&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; We all know that a set consists of only unique elements,&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; let's try making a set of these dictionaries and see what happens...&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;({dictionary, ordered_dict, another_ordered_dict})
Traceback (most recent call last):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;TypeError&lt;/span&gt;: unhashable &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;dict&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Makes sense since dict don't have __hash__ implemented, let's use&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; our wrapper classes.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; dictionary &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; DictWithHash()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; dictionary[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; dictionary[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-bu&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ordered_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; OrderedDictWithHash()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-bu&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_ordered_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; OrderedDictWithHash()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;; another_ordered_dict[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-bu&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;({dictionary, ordered_dict, another_ordered_dict})
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;({ordered_dict, another_ordered_dict, dictionary}) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; changing the order&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is going on here?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;7.4819385912101&quot;&gt;&lt;li readability=&quot;2.9722863741339&quot;&gt;
&lt;p&gt;The reason why intransitive equality didn't hold among &lt;code&gt;dictionary&lt;/code&gt;, &lt;code&gt;ordered_dict&lt;/code&gt; and &lt;code&gt;another_ordered_dict&lt;/code&gt; is because of the way &lt;code&gt;__eq__&lt;/code&gt; method is implemented in &lt;code&gt;OrderedDict&lt;/code&gt; class. From the &lt;a href=&quot;https://docs.python.org/3/library/collections.html#ordereddict-objects&quot; rel=&quot;nofollow&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Equality tests between OrderedDict objects are order-sensitive and are implemented as &lt;code&gt;list(od1.items())==list(od2.items())&lt;/code&gt;. Equality tests between &lt;code&gt;OrderedDict&lt;/code&gt; objects and other Mapping objects are order-insensitive like regular dictionaries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The reason for this equality is behavior is that it allows &lt;code&gt;OrderedDict&lt;/code&gt; objects to be directly substituted anywhere a regular dictionary is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;13.5&quot;&gt;
&lt;p&gt;Okay, so why did changing the order affect the length of the generated &lt;code&gt;set&lt;/code&gt; object? The answer is the lack of intransitive equality only. Since sets are &quot;unordered&quot; collections of unique elements, the order in which elements are inserted shouldn't matter. But in this case, it does matter. Let's break it down a bit,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_set &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_set.add(dictionary) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; these are the mapping objects from the snippets above&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ordered_dict &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; some_set
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_set.add(ordered_dict)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(some_set)
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_ordered_dict &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; some_set
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_set.add(another_ordered_dict)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(some_set)
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_set &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;set&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_set.add(ordered_dict)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_ordered_dict &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; another_set
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_set.add(another_ordered_dict)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(another_set)
&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; dictionary &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; another_set
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_set.add(another_ordered_dict)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(another_set)
&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the inconsistency is due to &lt;code&gt;another_ordered_dict in another_set&lt;/code&gt; being &lt;code&gt;False&lt;/code&gt; because &lt;code&gt;ordered_dict&lt;/code&gt; was already present in &lt;code&gt;another_set&lt;/code&gt; and as observed before, &lt;code&gt;ordered_dict == another_ordered_dict&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Keep trying... *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;():
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;from_try&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;finally&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;from_finally&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;another_func&lt;/span&gt;(): 
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;):
        &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
            &lt;span class=&quot;pl-k&quot;&gt;continue&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;finally&lt;/span&gt;:
            &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Finally!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;one_more_func&lt;/span&gt;(): &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; A gotcha!&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;):
            &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
                &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; i
            &lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ZeroDivisionError&lt;/span&gt;:
                &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Let's throw it here and handle it outside for loop&lt;/span&gt;
                &lt;span class=&quot;pl-k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ZeroDivisionError&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;A trivial divide by zero error&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
            &lt;span class=&quot;pl-k&quot;&gt;finally&lt;/span&gt;:
                &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Iteration&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, i)
                &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ZeroDivisionError&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; e:
        &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Zero division error ocurred&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, e)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;from_finally&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_func()
Finally!
Finally!
Finally!

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
Traceback (most recent call last):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;ZeroDivisionError&lt;/span&gt;: division by zero

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; one_more_func()
Iteration &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;When a &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statement is executed in the &lt;code&gt;try&lt;/code&gt; suite of a &quot;try…finally&quot; statement, the &lt;code&gt;finally&lt;/code&gt; clause is also executed on the way out.&lt;/li&gt;
&lt;li&gt;The return value of a function is determined by the last &lt;code&gt;return&lt;/code&gt; statement executed. Since the &lt;code&gt;finally&lt;/code&gt; clause always executes, a &lt;code&gt;return&lt;/code&gt; statement executed in the &lt;code&gt;finally&lt;/code&gt; clause will always be the last one executed.&lt;/li&gt;
&lt;li&gt;The caveat here is, if the finally clause executes a &lt;code&gt;return&lt;/code&gt; or &lt;code&gt;break&lt;/code&gt; statement, the temporarily saved exception is discarded.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ For what?&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
some_string &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
some_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {}
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i, some_dict[i] &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;enumerate&lt;/span&gt;(some_string):
    i &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; An indexed dict appears.&lt;/span&gt;
{&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;w&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;t&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;3.4547970479705&quot;&gt;&lt;li readability=&quot;6.8617771509168&quot;&gt;
&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; statement is defined in the &lt;a href=&quot;https://docs.python.org/3/reference/grammar.html&quot; rel=&quot;nofollow&quot;&gt;Python grammar&lt;/a&gt; as:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;exprlist&lt;/code&gt; is the assignment target. This means that the equivalent of &lt;code&gt;{exprlist} = {next_value}&lt;/code&gt; is &lt;strong&gt;executed for each item&lt;/strong&gt; in the iterable. An interesting example that illustrates this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;):
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(i)
    i &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;0
1
2
3
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Did you expect the loop to run just once?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The assignment statement &lt;code&gt;i = 10&lt;/code&gt; never affects the iterations of the loop because of the way for loops work in Python. Before the beginning of every iteration, the next item provided by the iterator (&lt;code&gt;range(4)&lt;/code&gt; this case) is unpacked and assigned the target list variables (&lt;code&gt;i&lt;/code&gt; in this case).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;5.5&quot;&gt;
&lt;p&gt;The &lt;code&gt;enumerate(some_string)&lt;/code&gt; function yields a new value &lt;code&gt;i&lt;/code&gt; (a counter going up) and a character from the &lt;code&gt;some_string&lt;/code&gt; in each iteration. It then sets the (just assigned) &lt;code&gt;i&lt;/code&gt; key of the dictionary &lt;code&gt;some_dict&lt;/code&gt; to that character. The unrolling of the loop can be simplified as:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; i, some_dict[i] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;w&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; i, some_dict[i] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;t&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; i, some_dict[i] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Evaluation time discrepancy&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
array &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;15&lt;/span&gt;]
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; A typical generator expression&lt;/span&gt;
gen &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; array &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; array.count(x) &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)
array &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;22&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(gen)) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Where did the other values go?&lt;/span&gt;
[&lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;22&quot;&gt;
&lt;pre&gt;
array_1 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
gen_1 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; array_1)
array_1 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]

array_2 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
gen_2 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; array_2)
array_2[:] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(gen_1))
[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(gen_2))
[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
array_3 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
array_4 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;30&lt;/span&gt;]
gen &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (i &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; j &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; array_3 &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; array_4)

array_3 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;]
array_4 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;600&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(gen))
[&lt;span class=&quot;pl-c1&quot;&gt;401&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;501&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;601&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;402&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;502&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;602&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;403&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;503&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;603&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul readability=&quot;26.158615136876&quot;&gt;&lt;li readability=&quot;1.8571428571429&quot;&gt;
&lt;p&gt;In a &lt;a href=&quot;https://wiki.python.org/moin/Generators&quot; rel=&quot;nofollow&quot;&gt;generator&lt;/a&gt; expression, the &lt;code&gt;in&lt;/code&gt; clause is evaluated at declaration time, but the conditional clause is evaluated at runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;So before runtime, &lt;code&gt;array&lt;/code&gt; is re-assigned to the list &lt;code&gt;[2, 8, 22]&lt;/code&gt;, and since out of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;8&lt;/code&gt; and &lt;code&gt;15&lt;/code&gt;, only the count of &lt;code&gt;8&lt;/code&gt; is greater than &lt;code&gt;0&lt;/code&gt;, the generator only yields &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The differences in the output of &lt;code&gt;g1&lt;/code&gt; and &lt;code&gt;g2&lt;/code&gt; in the second part is due the way variables &lt;code&gt;array_1&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; are re-assigned values.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;In the first case, &lt;code&gt;array_1&lt;/code&gt; is binded to the new object &lt;code&gt;[1,2,3,4,5]&lt;/code&gt; and since the &lt;code&gt;in&lt;/code&gt; clause is evaluated at the declaration time it still refers to the old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; (which is not destroyed).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;13&quot;&gt;
&lt;p&gt;In the second case, the slice assignment to &lt;code&gt;array_2&lt;/code&gt; updates the same old object &lt;code&gt;[1,2,3,4]&lt;/code&gt; to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;. Hence both the &lt;code&gt;g2&lt;/code&gt; and &lt;code&gt;array_2&lt;/code&gt; still have reference to the same object (which has now been updated to &lt;code&gt;[1,2,3,4,5]&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;12.774193548387&quot;&gt;
&lt;p&gt;Okay, going by the logic discussed so far, shouldn't be the value of &lt;code&gt;list(g)&lt;/code&gt; in the third snippet be &lt;code&gt;[11, 21, 31, 12, 22, 32, 13, 23, 33]&lt;/code&gt;? (because &lt;code&gt;array_3&lt;/code&gt; and &lt;code&gt;array_4&lt;/code&gt; are going to behave just like &lt;code&gt;array_1&lt;/code&gt;). The reason why (only) &lt;code&gt;array_4&lt;/code&gt; values got updated is explained in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0289/#the-details&quot; rel=&quot;nofollow&quot;&gt;PEP-289&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Only the outermost for-expression is evaluated immediately, the other expressions are deferred until the generator is run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ How not to use &lt;code&gt;is&lt;/code&gt; operator&lt;/h3&gt;
&lt;p&gt;The following is a very famous example present all over the internet.&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;tuple&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;tuple&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3. &lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.7.x specifically)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;The difference between &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;is&lt;/code&gt; operator checks if both the operands refer to the same object (i.e., it checks if the identity of the operands matches or not).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; operator compares the values of both the operands and checks if they are the same.&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;So &lt;code&gt;is&lt;/code&gt; is for reference equality and &lt;code&gt;==&lt;/code&gt; is for value equality. An example to clear things up,
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;A&lt;/span&gt;: &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; A() &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; A() &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; These are two empty objects at two different memory locations.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;256&lt;/code&gt; is an existing object but &lt;code&gt;257&lt;/code&gt; isn't&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you start up python the numbers from &lt;code&gt;-5&lt;/code&gt; to &lt;code&gt;256&lt;/code&gt; will be allocated. These numbers are used a lot, so it makes sense just to have them ready.&lt;/p&gt;
&lt;p&gt;Quoting from &lt;a href=&quot;https://docs.python.org/3/c-api/long.html&quot; rel=&quot;nofollow&quot;&gt;https://docs.python.org/3/c-api/long.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;The current implementation keeps an array of integer objects for all integers between -5 and 256, when you create an int in that range you just get back a reference to the existing object. So it should be possible to change the value of 1. I suspect the behavior of Python, in this case, is undefined. :-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;256&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;10922528&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(a)
&lt;span class=&quot;pl-c1&quot;&gt;10922528&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(b)
&lt;span class=&quot;pl-c1&quot;&gt;10922528&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;140084850247312&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(x)
&lt;span class=&quot;pl-c1&quot;&gt;140084850247440&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(y)
&lt;span class=&quot;pl-c1&quot;&gt;140084850247344&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here the interpreter isn't smart enough while executing &lt;code&gt;y = 257&lt;/code&gt; to recognize that we've already created an integer of the value &lt;code&gt;257,&lt;/code&gt; and so it goes on to create another object in the memory.&lt;/p&gt;
&lt;p&gt;Similar optimization applies to other &lt;strong&gt;immutable&lt;/strong&gt; objects like empty tuples as well. Since lists are mutable, that's why &lt;code&gt;[] is []&lt;/code&gt; will return &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;() is ()&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt;. This explains our second snippet. Let's move on to the third one,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; refer to the same object when initialized with same value in the same line.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(a)
&lt;span class=&quot;pl-c1&quot;&gt;140640774013296&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(b)
&lt;span class=&quot;pl-c1&quot;&gt;140640774013296&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(a)
&lt;span class=&quot;pl-c1&quot;&gt;140640774013392&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(b)
&lt;span class=&quot;pl-c1&quot;&gt;140640774013488&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul readability=&quot;9.4540618955513&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;When a and b are set to &lt;code&gt;257&lt;/code&gt; in the same line, the Python interpreter creates a new object, then references the second variable at the same time. If you do it on separate lines, it doesn't &quot;know&quot; that there's already &lt;code&gt;257&lt;/code&gt; as an object.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;10&quot;&gt;
&lt;p&gt;It's a compiler optimization and specifically applies to the interactive environment. When you enter two lines in a live interpreter, they're compiled separately, therefore optimized separately. If you were to try this example in a &lt;code&gt;.py&lt;/code&gt; file, you would not see the same behavior, because the file is compiled all at once. This optimization is not limited to integers, it works for other immutable data types like strings (check the &quot;Strings are tricky example&quot;) and floats as well,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;257.0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;257.0&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; b
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.9283154121864&quot;&gt;
&lt;p&gt;Why didn't this work for Python 3.7? The abstract reason is because such compiler optimizations are implementation specific (i.e. may change with version, OS, etc). I'm still figuring out what exact implementation change cause the issue, you can check out this &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues/100&quot;&gt;issue&lt;/a&gt; for updates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ &lt;code&gt;is not ...&lt;/code&gt; is not &lt;code&gt;is (not ...)&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;something&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;something&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; (&lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;is not&lt;/code&gt; is a single binary operator, and has behavior different than using &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; separated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is not&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt; if the variables on either side of the operator point to the same object and &lt;code&gt;True&lt;/code&gt; otherwise.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ A tic-tac-toe where X wins in the first attempt!&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Let's initialize a row&lt;/span&gt;
row &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;row i['', '', '']&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Let's make a board&lt;/span&gt;
board &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [row] &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;26&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board
[[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;X&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board
[[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;X&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;X&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;X&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We didn't assign three &lt;code&gt;&quot;X&quot;&lt;/code&gt;s, did we?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;p&gt;When we initialize &lt;code&gt;row&lt;/code&gt; variable, this visualization explains what happens in the memory&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/satwikkansal/wtfpython/blob/master/images/tic-tac-toe/after_row_initialized.png&quot;&gt;&lt;img src=&quot;https://github.com/satwikkansal/wtfpython/raw/master/images/tic-tac-toe/after_row_initialized.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And when the &lt;code&gt;board&lt;/code&gt; is initialized by multiplying the &lt;code&gt;row&lt;/code&gt;, this is what happens inside the memory (each of the elements &lt;code&gt;board[0]&lt;/code&gt;, &lt;code&gt;board[1]&lt;/code&gt; and &lt;code&gt;board[2]&lt;/code&gt; is a reference to the same list referred by &lt;code&gt;row&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/satwikkansal/wtfpython/blob/master/images/tic-tac-toe/after_board_initialized.png&quot;&gt;&lt;img src=&quot;https://github.com/satwikkansal/wtfpython/raw/master/images/tic-tac-toe/after_board_initialized.png&quot; alt=&quot;image&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can avoid this scenario here by not using &lt;code&gt;row&lt;/code&gt; variable to generate &lt;code&gt;board&lt;/code&gt;. (Asked in &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues/68&quot;&gt;this&lt;/a&gt; issue).&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; _ &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;)]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;X&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; board
[[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;X&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;], [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]]
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;&lt;h3&gt;▶ The sticky output function&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
funcs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
results &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;():
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; x
    funcs.append(some_func)
    results.append(some_func())  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; note the function call here&lt;/span&gt;

funcs_results &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [func() &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; func &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; funcs]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; results
[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; funcs_results
[&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even when the values of &lt;code&gt;x&lt;/code&gt; were different in every iteration prior to appending &lt;code&gt;some_func&lt;/code&gt; to &lt;code&gt;funcs&lt;/code&gt;, all the functions return 6.&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; powers_of_x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;: x&lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;i &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; [f(&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; f &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; powers_of_x]
[&lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;512&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;When defining a function inside a loop that uses the loop variable in its body, the loop function's closure is bound to the variable, not its value. So all of the functions use the latest value assigned to the variable for computation.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;To get the desired behavior you can pass in the loop variable as a named variable to the function. &lt;strong&gt;Why this works?&lt;/strong&gt; Because this will define the variable again within the function's scope.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
funcs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;x):
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; x
    funcs.append(some_func)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; funcs_results &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [func() &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; func &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; funcs]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; funcs_results
[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ The chicken-egg problem *&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So which is the &quot;ultimate&quot; base class? There's more to the confusion by the way,&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;A&lt;/span&gt;: &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(A, A)
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;type&lt;/code&gt; is a &lt;a href=&quot;https://realpython.com/python-metaclasses/&quot; rel=&quot;nofollow&quot;&gt;metaclass&lt;/a&gt; in Python.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything&lt;/strong&gt; is an &lt;code&gt;object&lt;/code&gt; in Python, which includes classes as well as their objects (instances).&lt;/li&gt;
&lt;li&gt;class &lt;code&gt;type&lt;/code&gt; is the metaclass of class &lt;code&gt;object&lt;/code&gt;, and every class (including &lt;code&gt;type&lt;/code&gt;) has inherited directly or indirectly from &lt;code&gt;object&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;There is no real base class among &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;. The confusion in the above snippets is arising because we're thinking about these relationships (&lt;code&gt;issubclass&lt;/code&gt; and &lt;code&gt;isinstance&lt;/code&gt;) in terms of Python classes. The relationship between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; can't be reproduced in pure python. To be more precise the following relationships can't be reproduced in pure Python,
&lt;ul&gt;&lt;li&gt;class A is an instance of class B, and class B is an instance of class A.&lt;/li&gt;
&lt;li&gt;class A is an instance of itself.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;These relationships between &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; (both being instances of each other as well as themselves) exist in Python because of &quot;cheating&quot; at the implementation level.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Subclass relationships&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; Hashable
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;, Hashable)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;, Hashable)
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Subclass relationships were expected to be transitive, right? (i.e., if &lt;code&gt;A&lt;/code&gt; is a subclass of &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;B&lt;/code&gt; is a subclass of &lt;code&gt;C&lt;/code&gt;, the &lt;code&gt;A&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; a subclass of &lt;code&gt;C&lt;/code&gt;)&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Subclass relationships are not necessarily transitive in Python. Anyone is allowed to define their own, arbitrary &lt;code&gt;__subclasscheck__&lt;/code&gt; in a metaclass.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;issubclass(cls, Hashable)&lt;/code&gt; is called, it simply looks for non-Falsey &quot;&lt;code&gt;__hash__&lt;/code&gt;&quot; method in &lt;code&gt;cls&lt;/code&gt; or anything it inherits from.&lt;/li&gt;
&lt;li&gt;Since &lt;code&gt;object&lt;/code&gt; is hashable, but &lt;code&gt;list&lt;/code&gt; is non-hashable, it breaks the transitivity relation.&lt;/li&gt;
&lt;li&gt;More detailed explanation can be found &lt;a href=&quot;https://www.naftaliharris.com/blog/python-subclass-intransitivity/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ All-true-ation *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;all&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;])
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;all&lt;/span&gt;([&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;])
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;all&lt;/span&gt;([])
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;all&lt;/span&gt;([[]])
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;all&lt;/span&gt;([[[]]])
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why's this True-False alteration?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The implementation of &lt;code&gt;all&lt;/code&gt; function is equivalent to&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-2&quot;&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;all&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;iterable&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; iterable:
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; element:
            &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;all([])&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; since the iterable is empty.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;all([[]])&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt; because &lt;code&gt;not []&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; is equivalent to &lt;code&gt;not False&lt;/code&gt; as the list inside the iterable is empty.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;all([[[]]])&lt;/code&gt; and higher recursive variants are always &lt;code&gt;True&lt;/code&gt; since &lt;code&gt;not [[]]&lt;/code&gt;, &lt;code&gt;not [[[]]]&lt;/code&gt;, and so on are equivalent to &lt;code&gt;not True&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ The surprising comma&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.6):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;23&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;,):
&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x, y)
&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;,):
&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x, y)
&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;kwargs&lt;/span&gt;,):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;kwargs&lt;/span&gt;,):
                     &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: invalid syntax

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;args&lt;/span&gt;,):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;args&lt;/span&gt;,):
                &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: invalid syntax
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Trailing comma is not always legal in formal parameters list of a Python function.&lt;/li&gt;
&lt;li&gt;In Python, the argument list is defined partially with leading commas and partially with trailing commas. This conflict causes situations where a comma is trapped in the middle, and no rule accepts it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note:&lt;/strong&gt; The trailing comma problem is &lt;a href=&quot;https://bugs.python.org/issue9232&quot; rel=&quot;nofollow&quot;&gt;fixed in Python 3.6&lt;/a&gt;. The remarks in &lt;a href=&quot;https://bugs.python.org/issue9232#msg248399&quot; rel=&quot;nofollow&quot;&gt;this&lt;/a&gt; post discuss in brief different usages of trailing commas in Python.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Strings and the backslashes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
\&lt;span class=&quot;pl-ii&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\&quot;&lt;/span&gt;)&lt;/span&gt;
File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\&quot;&lt;/span&gt;)&lt;/span&gt;
              &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;EOL&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; scanning string literal

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\\&lt;/span&gt;'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;In a usual python string, the backslash is used to escape characters that may have a special meaning (like single-quote, double-quote, and the backslash itself).
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wt&lt;span class=&quot;pl-cce&quot;&gt;\&quot;&lt;/span&gt;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wt&quot;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;In a raw string literal (as indicated by the prefix &lt;code&gt;r&lt;/code&gt;), the backslashes pass themselves as is along with the behavior of escaping the following character.
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wt&lt;span class=&quot;pl-cce&quot;&gt;\&quot;&lt;/span&gt;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wt&lt;span class=&quot;pl-cce&quot;&gt;\\&lt;/span&gt;&quot;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;repr&lt;/span&gt;(&lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wt&lt;span class=&quot;pl-cce&quot;&gt;\&quot;&lt;/span&gt;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wt&lt;span class=&quot;pl-cce&quot;&gt;\\&lt;/span&gt;&quot;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-sr&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\\&lt;/span&gt;n&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-cce&quot;&gt;\\\\&lt;/span&gt;n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;This means when a parser encounters a backslash in a raw string, it expects another character following it. And in our case (&lt;code&gt;print(r&quot;\&quot;)&lt;/code&gt;), the backslash escaped the trailing quote, leaving the parser without a terminating quote (hence the &lt;code&gt;SyntaxError&lt;/code&gt;). That's why backslashes don't work at the end of a raw string.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ not knot!&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; y
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; y
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;input&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; y
           &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: invalid syntax
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Operator precedence affects how an expression is evaluated, and &lt;code&gt;==&lt;/code&gt; operator has higher precedence than &lt;code&gt;not&lt;/code&gt; operator in Python.&lt;/li&gt;
&lt;li&gt;So &lt;code&gt;not x == y&lt;/code&gt; is equivalent to &lt;code&gt;not (x == y)&lt;/code&gt; which is equivalent to &lt;code&gt;not (True == False)&lt;/code&gt; finally evaluating to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;But &lt;code&gt;x == not y&lt;/code&gt; raises a &lt;code&gt;SyntaxError&lt;/code&gt; because it can be thought of being equivalent to &lt;code&gt;(x == not) y&lt;/code&gt; and not &lt;code&gt;x == (not y)&lt;/code&gt; which you might have expected at first sight.&lt;/li&gt;
&lt;li&gt;The parser expected the &lt;code&gt;not&lt;/code&gt; token to be a part of the &lt;code&gt;not in&lt;/code&gt; operator (because both &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operators have the same precedence), but after not being able to find an &lt;code&gt;in&lt;/code&gt; token following the &lt;code&gt;not&lt;/code&gt; token, it raises a &lt;code&gt;SyntaxError&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Half triple-quoted strings&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wtfpython&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
wtfpython
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtfpython&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
wtfpython
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; The following statements raise `SyntaxError`&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print('''wtfpython')&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; print(&quot;&quot;&quot;wtfpython&quot;)&lt;/span&gt;
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;input&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;wtfpython&quot;)&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;                        ^&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;SyntaxError: EOF while scanning triple-quoted string literal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;hr/&gt;&lt;h3&gt;▶ What's wrong with booleans?&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; A simple example to count the number of booleans and&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; integers in an iterable of mixed data types.&lt;/span&gt;
mixed_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1.0&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, [], &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;]
integers_found_so_far &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
booleans_found_so_far &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; mixed_list:
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(item, &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;):
        integers_found_so_far &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(item, &lt;span class=&quot;pl-c1&quot;&gt;bool&lt;/span&gt;):
        booleans_found_so_far &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; integers_found_so_far
&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; booleans_found_so_far
&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_bool &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; some_bool
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_bool &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt; some_bool
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;tell_truth&lt;/span&gt;():
    &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;:
        &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;I have lost faith in truth!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; tell_truth()
I have lost faith &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; truth!
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;9.9233716475096&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;bool&lt;/code&gt; is a subclass of &lt;code&gt;int&lt;/code&gt; in Python&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;issubclass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;bool&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;And thus, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; are instances of &lt;code&gt;int&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;isinstance&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The integer value of &lt;code&gt;True&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; and that of &lt;code&gt;False&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.89655172413793&quot;&gt;
&lt;p&gt;See this StackOverflow &lt;a href=&quot;https://stackoverflow.com/a/8169049/4354153&quot; rel=&quot;nofollow&quot;&gt;answer&lt;/a&gt; for the rationale behind it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;Initially, Python used to have no &lt;code&gt;bool&lt;/code&gt; type (people used 0 for false and non-zero value like 1 for true). &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and a &lt;code&gt;bool&lt;/code&gt; type was added in 2.x versions, but, for backward compatibility, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; couldn't be made constants. They just were built-in variables, and it was possible to reassign them&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Python 3 was backward-incompatible, the issue was finally fixed, and thus the last snippet won't work with Python 3.x!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Class attributes and instance attributes&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;A&lt;/span&gt;:
    x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;B&lt;/span&gt;(&lt;span class=&quot;pl-e&quot;&gt;A&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;C&lt;/span&gt;(&lt;span class=&quot;pl-e&quot;&gt;A&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;26&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; A.x, B.x, C.x
(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; B.x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; A.x, B.x, C.x
(&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; A.x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; A.x, B.x, C.x &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; C.x changed, but B.x didn't&lt;/span&gt;
(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; A()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a.x, A.x
(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a.x &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a.x, A.x
(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SomeClass&lt;/span&gt;:
    some_var &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;15&lt;/span&gt;
    some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]
    another_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;):
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.some_var &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.some_list &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; [x]
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.another_list &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; [x]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_obj &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SomeClass(&lt;span class=&quot;pl-c1&quot;&gt;420&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_obj.some_list
[&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;420&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_obj.another_list
[&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;420&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_obj &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SomeClass(&lt;span class=&quot;pl-c1&quot;&gt;111&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_obj.some_list
[&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;111&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_obj.another_list
[&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;420&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;111&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_obj.another_list &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; SomeClass.another_list
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_obj.another_list &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; some_obj.another_list
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Class variables and variables in class instances are internally handled as dictionaries of a class object. If a variable name is not found in the dictionary of the current class, the parent classes are searched for it.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;+=&lt;/code&gt; operator modifies the mutable object in-place without creating a new object. So changing the attribute of one instance affects the other instances and the class attribute as well.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Non-reflexive class method *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SomeClass&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;instance_method&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
                &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
        
        &lt;span class=&quot;pl-en&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;classmethod&lt;/span&gt;
        &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;class_method&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;cls&lt;/span&gt;&lt;/span&gt;):
                &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SomeClass.instance_method &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; SomeClass.instance_method
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SomeClass.class_method &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; SomeClass.class_method
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(SomeClass.class_method) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;id&lt;/span&gt;(SomeClass.class_method)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;3.5&quot;&gt;
&lt;p&gt;The reason &lt;code&gt;SomeClass.class_method is SomeClass.class_method&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; is due to the &lt;code&gt;@classmethod&lt;/code&gt; decorator.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SomeClass.instance_method
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;function __main__.SomeClass.instance_method(&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SomeClass.class_method
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;bound method SomeClass.class_method of &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__main__.SomeClass&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A new bound method every time &lt;code&gt;SomeClass.class_method&lt;/code&gt; is accessed.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;id(SomeClass.class_method) == id(SomeClass.class_method)&lt;/code&gt; returned &lt;code&gt;True&lt;/code&gt; because the second allocation of memory for &lt;code&gt;class_method&lt;/code&gt; happened at the same location of first deallocation (See Deep Down, we're all the same example for more detailed explanation).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ yielding None&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
some_iterable &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;val&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;something&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (&amp;lt;= 3.7.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; [x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; some_iterable]
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; [(&lt;span class=&quot;pl-k&quot;&gt;yield&lt;/span&gt; x) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; some_iterable]
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;generator &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;listcomp&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; at &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;0x&lt;/span&gt;7f70b0a4ad58&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;([(&lt;span class=&quot;pl-k&quot;&gt;yield&lt;/span&gt; x) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; some_iterable])
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;((&lt;span class=&quot;pl-k&quot;&gt;yield&lt;/span&gt; x) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; some_iterable)
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(some_func((&lt;span class=&quot;pl-k&quot;&gt;yield&lt;/span&gt; x)) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; some_iterable)
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;something&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;b&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;something&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;hr/&gt;&lt;h3&gt;▶ Yielding from... return! *&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;yield from&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(x)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (&amp;gt; 3.3):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(some_func(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;))
[]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where did the &lt;code&gt;&quot;wtf&quot;&lt;/code&gt; go? Is it due to some special effect of &lt;code&gt;yield from&lt;/code&gt;? Let's validate that,&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]
    &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(x):
          &lt;span class=&quot;pl-k&quot;&gt;yield&lt;/span&gt; i
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(some_func(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;))
[]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same result, this didn't work either.&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;From Python 3.3 onwards, it became possible to use &lt;code&gt;return&lt;/code&gt; statement with values inside generators (See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0380/&quot; rel=&quot;nofollow&quot;&gt;PEP380&lt;/a&gt;). The &lt;a href=&quot;https://www.python.org/dev/peps/pep-0380/#enhancements-to-stopiteration&quot; rel=&quot;nofollow&quot;&gt;official docs&lt;/a&gt; say that,&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&quot;... &lt;code&gt;return expr&lt;/code&gt; in a generator causes &lt;code&gt;StopIteration(expr)&lt;/code&gt; to be raised upon exit from the generator.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;In the case of &lt;code&gt;some_func(3)&lt;/code&gt;, &lt;code&gt;StopIteration&lt;/code&gt; is raised at the beginning because of &lt;code&gt;return&lt;/code&gt; statement. The &lt;code&gt;StopIteration&lt;/code&gt; exception is automatically caught inside the &lt;code&gt;list(...)&lt;/code&gt; wrapper and the &lt;code&gt;for&lt;/code&gt; loop. Therefore, the above two snippets result in an empty list.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;To get &lt;code&gt;[&quot;wtf&quot;]&lt;/code&gt; from the generator &lt;code&gt;some_func&lt;/code&gt; we need to catch the &lt;code&gt;StopIteration&lt;/code&gt; exception,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
    &lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt;(some_func(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;))
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;StopIteration&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; e:
    some_string &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; e.value
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_string
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtf&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Nan-reflexivity *&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;inf&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;nan&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
c &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;-iNf&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; These strings are case-insensitive&lt;/span&gt;
d &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;nan&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
inf
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b
nan
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; c
&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;inf
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_other_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;: could &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; convert string to &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;: some_other_string
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;c &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; inf==inf&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; None == None&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; d &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; but nan!=nan&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; a
&lt;span class=&quot;pl-c1&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; a
nan
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; b
nan
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;nan&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;/&lt;/span&gt; x
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; y &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; identity holds&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; y &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; equality fails of y&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; [y] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; [y] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; but the equality succeeds for the list containing y&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;8.5960975609756&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;code&gt;'inf'&lt;/code&gt; and &lt;code&gt;'nan'&lt;/code&gt; are special strings (case-insensitive), which, when explicitly typecast-ed to &lt;code&gt;float&lt;/code&gt; type, are used to represent mathematical &quot;infinity&quot; and &quot;not a number&quot; respectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;16.5&quot;&gt;
&lt;p&gt;Since according to IEEE standards &lt;code&gt;NaN != NaN&lt;/code&gt;, obeying this rule breaks the reflexivity assumption of a collection element in Python i.e. if &lt;code&gt;x&lt;/code&gt; is a part of a collection like &lt;code&gt;list&lt;/code&gt;, the implementations like comparison are based on the assumption that &lt;code&gt;x == x&lt;/code&gt;. Because of this assumption, the identity is compared first (since it's faster) while comparing two elements, and the values are compared only when the identities mismatch. The following snippet will make things clearer,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;nan&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; x, [x] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; [x]
(&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;nan&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; y, [y] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; [y]
(&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; y, [x] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; [y]
(&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the identities of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are different, the values are considered, which are also different; hence the comparison returns &lt;code&gt;False&lt;/code&gt; this time.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Interesting read: &lt;a href=&quot;https://bertrandmeyer.com/2010/02/06/reflexivity-and-other-pillars-of-civilization/&quot; rel=&quot;nofollow&quot;&gt;Reflexivity, and other pillars of civilization&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Mutating the immutable!&lt;/h3&gt;
&lt;p&gt;This might seem trivial if you know how references work in Python.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
some_tuple &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;A&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;tuple&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;with&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;values&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
another_tuple &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; ([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;25&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_tuple[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;change this&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;tuple&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt; does &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; support item assignment
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_tuple[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;].append(&lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;This throws no error&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_tuple
([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;])
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_tuple[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;999&lt;/span&gt;]
&lt;span class=&quot;pl-c1&quot;&gt;TypeError&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;tuple&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt; does &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; support item assignment
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_tuple
([&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;99&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;999&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But I thought tuples were immutable...&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;0.4507874015748&quot;&gt;&lt;li readability=&quot;1.7222222222222&quot;&gt;
&lt;p&gt;Quoting from &lt;a href=&quot;https://docs.python.org/2/reference/datamodel.html&quot; rel=&quot;nofollow&quot;&gt;https://docs.python.org/2/reference/datamodel.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Immutable sequences An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be modified; however, the collection of objects directly referenced by an immutable object cannot change.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;code&gt;+=&lt;/code&gt; operator changes the list in-place. The item assignment doesn't work, but when the exception occurs, the item has already been changed in place.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ The disappearing variable from outer scope&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
e &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
    &lt;span class=&quot;pl-k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Exception&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; e:
    &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(e)
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; prints nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(e)
&lt;span class=&quot;pl-c1&quot;&gt;NameError&lt;/span&gt;: name &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;e&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; defined
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;9.0391236306729&quot;&gt;&lt;li readability=&quot;10.706086956522&quot;&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#except&quot; rel=&quot;nofollow&quot;&gt;https://docs.python.org/3/reference/compound_stmts.html#except&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When an exception has been assigned using &lt;code&gt;as&lt;/code&gt; target, it is cleared at the end of the &lt;code&gt;except&lt;/code&gt; clause. This is as if&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; E &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; N:
    foo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;was translated into&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; E &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; N:
    &lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
        foo
    &lt;span class=&quot;pl-k&quot;&gt;finally&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt; N
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because, with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;The clauses are not scoped in Python. Everything in the example is present in the same scope, and the variable &lt;code&gt;e&lt;/code&gt; got removed due to the execution of the &lt;code&gt;except&lt;/code&gt; clause. The same is not the case with functions that have their separate inner-scopes. The example below illustrates this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt;(x)
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x)

x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;f(x)
&lt;span class=&quot;pl-c1&quot;&gt;UnboundLocalError&lt;/span&gt;: local variable &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;x&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; referenced before assignment
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;f(y)
&lt;span class=&quot;pl-c1&quot;&gt;UnboundLocalError&lt;/span&gt;: local variable &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;x&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; referenced before assignment
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x
&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y
[&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;In Python 2.x, the variable name &lt;code&gt;e&lt;/code&gt; gets assigned to &lt;code&gt;Exception()&lt;/code&gt; instance, so when you try to print, it prints nothing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; e
&lt;span class=&quot;pl-c1&quot;&gt;Exception&lt;/span&gt;()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt; e
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Nothing is printed!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ The mysterious key type conversion&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SomeClass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;

some_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;42&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(some_dict.keys())[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;])
&lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SomeClass(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict[s] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; expected: Two different keys-value pairs&lt;/span&gt;
{&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;40&lt;/span&gt;}
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(some_dict.keys())[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;])
&lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Both the object &lt;code&gt;s&lt;/code&gt; and the string &lt;code&gt;&quot;s&quot;&lt;/code&gt; hash to the same value because &lt;code&gt;SomeClass&lt;/code&gt; inherits the &lt;code&gt;__hash__&lt;/code&gt; method of &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;SomeClass(&quot;s&quot;) == &quot;s&quot;&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt; because &lt;code&gt;SomeClass&lt;/code&gt; also inherits &lt;code&gt;__eq__&lt;/code&gt; method from &lt;code&gt;str&lt;/code&gt; class.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Since both the objects hash to the same value and are equal, they are represented by the same key in the dictionary.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;For the desired behavior, we can redefine the &lt;code&gt;__eq__&lt;/code&gt; method in &lt;code&gt;SomeClass&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SomeClass&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;):
  &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__eq__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;other&lt;/span&gt;):
      &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; (
          &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; SomeClass
          &lt;span class=&quot;pl-k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(other) &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; SomeClass
          &lt;span class=&quot;pl-k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;super&lt;/span&gt;().&lt;span class=&quot;pl-c1&quot;&gt;__eq__&lt;/span&gt;(other)
      )

  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; When we define a custom __eq__, Python stops automatically inheriting the&lt;/span&gt;
  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; __hash__ method, so we need to define it as well&lt;/span&gt;
  &lt;span class=&quot;pl-c1&quot;&gt;__hash__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;__hash__&lt;/span&gt;

some_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;:&lt;span class=&quot;pl-c1&quot;&gt;42&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SomeClass(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict[s] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_dict
{&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;42&lt;/span&gt;}
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; keys &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(some_dict.keys())
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(keys[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(keys[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;])
(__main__.SomeClass, &lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Let's see if you can guess this?&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; a[b] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {}, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
{&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;: ({&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;}, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)}
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul readability=&quot;14.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;(target_list &quot;=&quot;)+&lt;/code&gt; means there can be &lt;strong&gt;one or more&lt;/strong&gt; target lists. In this case, target lists are &lt;code&gt;a, b&lt;/code&gt; and &lt;code&gt;a[b]&lt;/code&gt; (note the expression list is exactly one, which in our case is &lt;code&gt;{}, 5&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;After the expression list is evaluated, its value is unpacked to the target lists from &lt;strong&gt;left to right&lt;/strong&gt;. So, in our case, first the &lt;code&gt;{}, 5&lt;/code&gt; tuple is unpacked to &lt;code&gt;a, b&lt;/code&gt; and we now have &lt;code&gt;a = {}&lt;/code&gt; and &lt;code&gt;b = 5&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;code&gt;a&lt;/code&gt; is now assigned to &lt;code&gt;{}&lt;/code&gt;, which is a mutable object.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;The second target list is &lt;code&gt;a[b]&lt;/code&gt; (you may expect this to throw an error because both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have not been defined in the statements before. But remember, we just assigned &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; to &lt;code&gt;5&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;Now, we are setting the key &lt;code&gt;5&lt;/code&gt; in the dictionary to the tuple &lt;code&gt;({}, 5)&lt;/code&gt; creating a circular reference (the &lt;code&gt;{...}&lt;/code&gt; in the output refers to the same object that &lt;code&gt;a&lt;/code&gt; is already referencing). Another simpler example of circular reference could be&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; some_list[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list
[[&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;]]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
[[&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;]]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; some_list[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; some_list
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similar is the case in our example (&lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;So to sum it up, you can break the example down to&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
a, b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {}, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
a[b] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; a, b
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the circular reference can be justified by the fact that &lt;code&gt;a[b][0]&lt;/code&gt; is the same object as &lt;code&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a[b][&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; a
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;hr/&gt;&lt;h2&gt;Section: Slippery Slopes&lt;/h2&gt;
&lt;h3&gt;▶ Modifying a dictionary while iterating over it&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;}

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; x:
    &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt; x[i]
    x[i&lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(i)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.7- Python 3.5):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;0
1
2
3
4
5
6
7
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Yes, it runs for exactly &lt;strong&gt;eight&lt;/strong&gt; times and stops.&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Iteration over a dictionary that you edit at the same time is not supported.&lt;/li&gt;
&lt;li&gt;It runs eight times because that's the point at which the dictionary resizes to hold more keys (we have eight deletion entries, so a resize is needed). This is actually an implementation detail.&lt;/li&gt;
&lt;li&gt;How deleted keys are handled and when the resize occurs might be different for different Python implementations.&lt;/li&gt;
&lt;li&gt;So for Python versions other than Python 2.7 - Python 3.5, the count might be different from 8 (but whatever the count is, it's going to be the same every time you run it). You can find some discussion around this &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues/53&quot;&gt;here&lt;/a&gt; or in &lt;a href=&quot;https://stackoverflow.com/questions/44763802/bug-in-python-dict&quot; rel=&quot;nofollow&quot;&gt;this&lt;/a&gt; StackOverflow thread.&lt;/li&gt;
&lt;li&gt;Python 3.8 onwards, you'll see &lt;code&gt;RuntimeError: dictionary keys changed during iteration&lt;/code&gt; exception if you try to do this.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Stubborn &lt;code&gt;del&lt;/code&gt; operation&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SomeClass&lt;/span&gt;:
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__del__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
        &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Deleted!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; 1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SomeClass()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; x
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt; x &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; this should print &quot;Deleted!&quot;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt; y
Deleted!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Phew, deleted at last. You might have guessed what saved from &lt;code&gt;__del__&lt;/code&gt; being called in our first attempt to delete &lt;code&gt;x&lt;/code&gt;. Let's add more twists to the example.&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; SomeClass()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; x
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt; x
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; check if y exists&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;__main__.SomeClass instance at &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;0x&lt;/span&gt;7f98a1a67fc8&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt; y &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Like previously, this should print &quot;Deleted!&quot;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;globals&lt;/span&gt;() &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; oh, it didn't. Let's check all our global variables and confirm&lt;/span&gt;
Deleted!
{&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__builtins__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__builtin__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; (built&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;SomeClass&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; __main__.SomeClass at &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;0x&lt;/span&gt;7f98a1a5f668&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__package__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__name__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__main__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__doc__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, now it's deleted 😕&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;del x&lt;/code&gt; doesn’t directly call &lt;code&gt;x.__del__()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Whenever &lt;code&gt;del x&lt;/code&gt; is encountered, Python decrements the reference count for &lt;code&gt;x&lt;/code&gt; by one, and &lt;code&gt;x.__del__()&lt;/code&gt; when x’s reference count reaches zero.&lt;/li&gt;
&lt;li&gt;In the second output snippet, &lt;code&gt;y.__del__()&lt;/code&gt; was not called because the previous statement (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; y&lt;/code&gt;) in the interactive interpreter created another reference to the same object, thus preventing the reference count from reaching zero when &lt;code&gt;del y&lt;/code&gt; was encountered.&lt;/li&gt;
&lt;li&gt;Calling &lt;code&gt;globals&lt;/code&gt; caused the existing reference to be destroyed, and hence we can see &quot;Deleted!&quot; being printed (finally!).&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ The out of scope variable&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;():
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; a

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;another_func&lt;/span&gt;():
    a &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_func()
&lt;span class=&quot;pl-c1&quot;&gt;UnboundLocalError&lt;/span&gt;: local variable &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; referenced before assignment
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;3.4704641350211&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;When you make an assignment to a variable in scope, it becomes local to that scope. So &lt;code&gt;a&lt;/code&gt; becomes local to the scope of &lt;code&gt;another_func&lt;/code&gt;, but it has not been initialized previously in the same scope, which throws an error.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Read &lt;a href=&quot;http://sebastianraschka.com/Articles/2014_python_scope_and_namespaces.html&quot; rel=&quot;nofollow&quot;&gt;this&lt;/a&gt; short but an awesome guide to learn more about how namespaces and scope resolution works in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;To modify the outer scope variable &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;another_func&lt;/code&gt;, use &lt;code&gt;global&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;another_func&lt;/span&gt;()
    &lt;span class=&quot;pl-k&quot;&gt;global&lt;/span&gt; a
    a &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; another_func()
&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Deleting a list item while iterating&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;25&quot;&gt;
&lt;pre&gt;
list_1 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
list_2 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
list_3 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
list_4 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; idx, item &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;enumerate&lt;/span&gt;(list_1):
    &lt;span class=&quot;pl-k&quot;&gt;del&lt;/span&gt; item

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; idx, item &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;enumerate&lt;/span&gt;(list_2):
    list_2.remove(item)

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; idx, item &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;enumerate&lt;/span&gt;(list_3[:]):
    list_3.remove(item)

&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; idx, item &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;enumerate&lt;/span&gt;(list_4):
    list_4.pop(idx)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; list_1
[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; list_2
[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; list_3
[]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; list_4
[&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can you guess why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Difference between &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;pop&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;del var_name&lt;/code&gt; just removes the binding of the &lt;code&gt;var_name&lt;/code&gt; from the local or global namespace (That's why the &lt;code&gt;list_1&lt;/code&gt; is unaffected).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt; removes the first matching value, not a specific index, raises &lt;code&gt;ValueError&lt;/code&gt; if the value is not found.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt; removes the element at a specific index and returns it, raises &lt;code&gt;IndexError&lt;/code&gt; if an invalid index is specified.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Why the output is &lt;code&gt;[2, 4]&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The list iteration is done index by index, and when we remove &lt;code&gt;1&lt;/code&gt; from &lt;code&gt;list_2&lt;/code&gt; or &lt;code&gt;list_4&lt;/code&gt;, the contents of the lists are now &lt;code&gt;[2, 3, 4]&lt;/code&gt;. The remaining elements are shifted down, i.e., &lt;code&gt;2&lt;/code&gt; is at index 0, and &lt;code&gt;3&lt;/code&gt; is at index 1. Since the next iteration is going to look at index 1 (which is the &lt;code&gt;3&lt;/code&gt;), the &lt;code&gt;2&lt;/code&gt; gets skipped entirely. A similar thing will happen with every alternate element in the list sequence.&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Refer to this StackOverflow &lt;a href=&quot;https://stackoverflow.com/questions/45946228/what-happens-when-you-try-to-delete-a-list-element-while-iterating-over-it&quot; rel=&quot;nofollow&quot;&gt;thread&lt;/a&gt; explaining the example&lt;/li&gt;
&lt;li&gt;See also this nice StackOverflow &lt;a href=&quot;https://stackoverflow.com/questions/45877614/how-to-change-all-the-dictionary-keys-in-a-for-loop-with-d-items&quot; rel=&quot;nofollow&quot;&gt;thread&lt;/a&gt; for a similar example related to dictionaries in Python.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Lossy zip of iterators *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;38&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; numbers &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;))
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; numbers
[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; first_three, remaining &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; numbers[:&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;], numbers[&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;:]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; first_three, remaining
([&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;], [&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;])
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; numbers_iter &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;iter&lt;/span&gt;(numbers)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;zip&lt;/span&gt;(numbers_iter, first_three)) 
[(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)]
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; so far so good, let's zip the remaining&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;zip&lt;/span&gt;(numbers_iter, remaining))
[(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where did element &lt;code&gt;3&lt;/code&gt; go from the &lt;code&gt;numbers&lt;/code&gt; list?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li readability=&quot;-0.4933110367893&quot;&gt;From Python &lt;a href=&quot;https://docs.python.org/3.3/library/functions.html#zip&quot; rel=&quot;nofollow&quot;&gt;docs&lt;/a&gt;, here's an approximate implementation of zip function,
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;zip&lt;/span&gt;(&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;iterables&lt;/span&gt;):
    sentinel &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;()
    iterators &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;iter&lt;/span&gt;(it) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; it &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; iterables]
    &lt;span class=&quot;pl-k&quot;&gt;while&lt;/span&gt; iterators:
        result &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; it &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; iterators:
            elem &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;next&lt;/span&gt;(it, sentinel)
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; elem &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; sentinel: &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt;
            result.append(elem)
        &lt;span class=&quot;pl-k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;tuple&lt;/span&gt;(result)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;So the function takes in arbitrary number of itreable objects, adds each of their items to the &lt;code&gt;result&lt;/code&gt; list by calling the &lt;code&gt;next&lt;/code&gt; function on them, and stops whenever any of the iterable is exhausted.&lt;/li&gt;
&lt;li&gt;The caveat here is when any iterable is exhausted, the existing elements in the &lt;code&gt;result&lt;/code&gt; list are discarded. That's what happened with &lt;code&gt;3&lt;/code&gt; in the &lt;code&gt;numbers_iter&lt;/code&gt;.&lt;/li&gt;
&lt;li readability=&quot;5.5&quot;&gt;The correct way to do the above using &lt;code&gt;zip&lt;/code&gt; would be,
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;22&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; numbers &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;))
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; numbers_iter &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;iter&lt;/span&gt;(numbers)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;zip&lt;/span&gt;(first_three, numbers_iter))
[(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;zip&lt;/span&gt;(remaining, numbers_iter))
[(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;), (&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;)]
&lt;/pre&gt;&lt;/div&gt;
The first argument of zip should be the one with fewest elements.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Loop variables leaking out!&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;:
        &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;: for x inside loop&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;: x in global&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt; : &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x inside loop
&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt; : x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;global&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But &lt;code&gt;x&lt;/code&gt; was never defined outside the scope of for loop...&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This time let's initialize x first&lt;/span&gt;
x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;:
        &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;: for x inside loop&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;: x in global&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt; : &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x inside loop
&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt; : x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;global&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;([x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)])
[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x)
&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;([x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)])
[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(x)
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;1.4528985507246&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;In Python, for-loops use the scope they exist in and leave their defined loop-variable behind. This also applies if we explicitly defined the for-loop variable in the global namespace before. In this case, it will rebind the existing variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5.7328767123288&quot;&gt;
&lt;p&gt;The differences in the output of Python 2.x and Python 3.x interpreters for list comprehension example can be explained by following change documented in &lt;a href=&quot;https://docs.python.org/3/whatsnew/3.0.html&quot; rel=&quot;nofollow&quot;&gt;What’s New In Python 3.0&lt;/a&gt; changelog:&lt;/p&gt;
&lt;blockquote readability=&quot;15&quot;&gt;
&lt;p&gt;&quot;List comprehensions no longer support the syntactic form &lt;code&gt;[... for var in item1, item2, ...]&lt;/code&gt;. Use &lt;code&gt;[... for var in (item1, item2, ...)]&lt;/code&gt; instead. Also, note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a &lt;code&gt;list()&lt;/code&gt; constructor, and in particular, the loop control variables are no longer leaked into the surrounding scope.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Beware of default mutable arguments!&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;default_arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;[]):
    default_arg.append(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; default_arg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func([])
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;11.5&quot;&gt;
&lt;p&gt;The default mutable arguments of functions in Python aren't really initialized every time you call the function. Instead, the recently assigned value to them is used as the default value. When we explicitly passed &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;some_func&lt;/code&gt; as the argument, the default value of the &lt;code&gt;default_arg&lt;/code&gt; variable was not used, so the function returned as expected.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;default_arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;[]):
    default_arg.append(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; default_arg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func.&lt;span class=&quot;pl-c1&quot;&gt;__defaults__&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;This will show the default argument values for the function&lt;/span&gt;
([],)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func.&lt;span class=&quot;pl-c1&quot;&gt;__defaults__&lt;/span&gt;
([&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func.&lt;span class=&quot;pl-c1&quot;&gt;__defaults__&lt;/span&gt;
([&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func([])
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func.&lt;span class=&quot;pl-c1&quot;&gt;__defaults__&lt;/span&gt;
([&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;],)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.5&quot;&gt;
&lt;p&gt;A common practice to avoid bugs due to mutable arguments is to assign &lt;code&gt;None&lt;/code&gt; as the default value and later check if any value is passed to the function corresponding to that argument. Example:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;default_arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; default_arg:
        default_arg &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
    default_arg.append(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some_string&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; default_arg
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Catching the Exceptions&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This should raise an ``IndexError``&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(some_list[&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;])
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;IndexError&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Caught!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This should raise a ``ValueError``&lt;/span&gt;
    some_list.remove(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;IndexError&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Caught again!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
Caught!

&lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;.remove(x): x &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;input&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;IndexError&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;:
                     &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: invalid syntax
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;12.5&quot;&gt;
&lt;p&gt;To add multiple Exceptions to the except clause, you need to pass them as parenthesized tuple as the first argument. The second argument is an optional name, which when supplied will bind the Exception instance that has been raised. Example,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
   &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; This should raise a ``ValueError``&lt;/span&gt;
   some_list.remove(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;IndexError&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;), e:
   &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Caught again!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
   &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(e)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Caught again!
list.remove(x): x not in list
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;input&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;IndexError&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;), e:
                                     &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;IndentationError&lt;/span&gt;: unindent does &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; match &lt;span class=&quot;pl-c1&quot;&gt;any&lt;/span&gt; outer indentation level
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;Separating the exception from the variable with a comma is deprecated and does not work in Python 3; the correct way is to use &lt;code&gt;as&lt;/code&gt;. Example,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
    some_list.remove(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;IndexError&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;ValueError&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; e:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Caught again!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(e)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Caught again!
list.remove(x): x not in list
&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Same operands, different story!&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; a
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b
[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;]
b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; a
a &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;21&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b
[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;code&gt;a += b&lt;/code&gt; doesn't always behave the same way as &lt;code&gt;a = a + b&lt;/code&gt;. Classes &lt;em&gt;may&lt;/em&gt; implement the &lt;em&gt;&lt;code&gt;op=&lt;/code&gt;&lt;/em&gt; operators differently, and lists do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;The expression &lt;code&gt;a = a + [5,6,7,8]&lt;/code&gt; generates a new list and sets &lt;code&gt;a&lt;/code&gt;'s reference to that new list, leaving &lt;code&gt;b&lt;/code&gt; unchanged.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;The expression &lt;code&gt;a += [5,6,7,8]&lt;/code&gt; is actually mapped to an &quot;extend&quot; function that operates on the list such that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; still point to the same list that has been modified in-place.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Be careful with chained operations&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; makes sense&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;]) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; makes sense&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; now what?&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;p&gt;As per &lt;a href=&quot;https://docs.python.org/2/reference/expressions.html#not-in&quot; rel=&quot;nofollow&quot;&gt;https://docs.python.org/2/reference/expressions.html#not-in&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;Formally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While such behavior might seem silly to you in the above examples, it's fantastic with stuff like &lt;code&gt;a == b == c&lt;/code&gt; and &lt;code&gt;0 &amp;lt;= x &amp;lt;= 100&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;False is False is False&lt;/code&gt; is equivalent to &lt;code&gt;(False is False) and (False is False)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True is False == False&lt;/code&gt; is equivalent to &lt;code&gt;True is False and False == False&lt;/code&gt; and since the first part of the statement (&lt;code&gt;True is False&lt;/code&gt;) evaluates to &lt;code&gt;False&lt;/code&gt;, the overall expression evaluates to &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;gt; 0 &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;1 &amp;gt; 0 and 0 &amp;lt; 1&lt;/code&gt; which evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;li readability=&quot;-1.5&quot;&gt;The expression &lt;code&gt;(1 &amp;gt; 0) &amp;lt; 1&lt;/code&gt; is equivalent to &lt;code&gt;True &amp;lt; 1&lt;/code&gt; and
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt;not relevant for this example, but just for fun&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
So, &lt;code&gt;1 &amp;lt; 1&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Name resolution ignoring class scope&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SomeClass&lt;/span&gt;:
    x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;17&lt;/span&gt;
    y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;(SomeClass.y)[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;SomeClass&lt;/span&gt;:
    x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;17&lt;/span&gt;
    y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [x &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SomeClass.y[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;pl-c1&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SomeClass.y[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Scopes nested inside class definition ignore names bound at the class level.&lt;/li&gt;
&lt;li&gt;A generator expression has its own scope.&lt;/li&gt;
&lt;li&gt;Starting from Python 3.X, list comprehensions also have their own scope.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Needles in a Haystack *&lt;/h3&gt;
&lt;p&gt;I haven't met even a single experience Pythonist till date who has not come across one or more of the following scenarios,&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
x, y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x, y  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; expected (0, 1)&lt;/span&gt;
((&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
t &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;one&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;two&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; t:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(i)

t &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;one&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; t:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(i)

t &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; ()
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(t)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
one
two
o
n
e
&lt;span class=&quot;pl-c1&quot;&gt;tuple&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ten_words_list = [
    &quot;some&quot;,
    &quot;very&quot;,
    &quot;big&quot;,
    &quot;list&quot;,
    &quot;that&quot;
    &quot;consists&quot;,
    &quot;of&quot;,
    &quot;exactly&quot;,
    &quot;ten&quot;,
    &quot;words&quot;
]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(ten_words_list)
&lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4. Not asserting strongly enough&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;javascript&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; An assert statement with an assertion failure message.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt;(a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; b, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Both languages are different&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; No AssertionError is raised&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
some_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;key_1&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;key_2&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;,
  &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;key_3&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;
}

some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; some_list.append(&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;) 
some_dict &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; some_dict.update({&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;key_4&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;})
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(some_list)
&lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(some_dict)
&lt;span class=&quot;pl-c1&quot;&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_recursive_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; a[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;:
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; 
    a[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    some_recursive_func(a)
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; a

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;similar_recursive_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;):
        &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;:
                &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; a
        a &lt;span class=&quot;pl-k&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
        similar_recursive_func(a)
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_recursive_func([&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;])
[&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; similar_recursive_func(&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;17.460541149944&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;For 1, the correct statement for expected behavior is &lt;code&gt;x, y = (0, 1) if True else (None, None)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;For 2, the correct statement for expected behavior is &lt;code&gt;t = ('one',)&lt;/code&gt; or &lt;code&gt;t = 'one',&lt;/code&gt; (missing comma) otherwise the interpreter considers &lt;code&gt;t&lt;/code&gt; to be a &lt;code&gt;str&lt;/code&gt; and iterates over it character by character.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;code&gt;()&lt;/code&gt; is a special token and denotes empty &lt;code&gt;tuple&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;In 3, as you might have already figured out, there's a missing comma after 5th element (&lt;code&gt;&quot;that&quot;&lt;/code&gt;) in the list. So by implicit string literal concatenation,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;15&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; ten_words_list
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;very&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;big&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;list&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;thatconsists&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;of&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;exactly&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;ten&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;words&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;No &lt;code&gt;AssertionError&lt;/code&gt; was raised in 4th snippet because instead of asserting the individual expression &lt;code&gt;a == b&lt;/code&gt;, we're asserting entire tuple. The following snippet will clear things up,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; b &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;javascript&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; b
Traceback (most recent call last):
    File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;AssertionError&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; (a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; b, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Values are not equal&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;stdin&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;:&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;SyntaxWarning&lt;/span&gt;: assertion &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; always true, perhaps remove parentheses&lt;span class=&quot;pl-ii&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; b, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Values are not equal&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
Traceback (most recent call last):
    File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;AssertionError&lt;/span&gt;: Values aren &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; equal
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;5.9277108433735&quot;&gt;
&lt;p&gt;As for the fifth snippet, most methods that modify the items of sequence/mapping objects like &lt;code&gt;list.append&lt;/code&gt;, &lt;code&gt;dict.update&lt;/code&gt;, &lt;code&gt;list.sort&lt;/code&gt;, etc. modify the objects in-place and return &lt;code&gt;None&lt;/code&gt;. The rationale behind this is to improve performance by avoiding making a copy of the object if the operation can be done in-place (Referred from &lt;a href=&quot;http://docs.python.org/2/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Last one should be fairly obvious, passing mutable object (like &lt;code&gt;list&lt;/code&gt; ) results in a call by reference, whereas an immutable object (like &lt;code&gt;int&lt;/code&gt;) results in a call by value.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Being aware of these nitpicks can save you hours of debugging effort in the long run.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Splitsies *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.split()
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; is same as&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.split(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; but&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.split())
&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; isn't the same as&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.split(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;))
&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li readability=&quot;4.4746835443038&quot;&gt;It might appear at first that the default separator for split is a single space &lt;code&gt;' '&lt;/code&gt;, but as per the &lt;a href=&quot;https://docs.python.org/2.7/library/stdtypes.html#str.split&quot; rel=&quot;nofollow&quot;&gt;docs&lt;/a&gt;
&lt;blockquote readability=&quot;18&quot;&gt;
&lt;p&gt;If sep is not specified or is &lt;code&gt;None&lt;/code&gt;, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns &lt;code&gt;[]&lt;/code&gt;. If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, &lt;code&gt;'1,,2'.split(',')&lt;/code&gt; returns &lt;code&gt;['1', '', '2']&lt;/code&gt;). Splitting an empty string with a specified separator returns &lt;code&gt;['']&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;Noticing how the leading and trailing whitespaces are handled in the following snippet will make things clear,
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.split(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; a &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.split()
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;a&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.split(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
[&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Wild imports *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; File: module.py&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_weird_name_func_&lt;/span&gt;():
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;_another_weird_name_func&lt;/span&gt;():
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; module &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_weird_name_func_()
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; _another_weird_name_func()
Traceback (most recent call last):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;NameError&lt;/span&gt;: name &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;_another_weird_name_func&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; defined
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;It is often advisable to not use wildcard imports. The first obvious reason for this is, in wildcard imports, the names with a leading underscore get imported. This may lead to errors during runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;Had we used &lt;code&gt;from ... import a, b, c&lt;/code&gt; syntax, the above &lt;code&gt;NameError&lt;/code&gt; wouldn't have occurred.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; module &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; some_weird_name_func_, _another_weird_name_func
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; _another_weird_name_func()
works!
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;If you really want to use wildcard imports, then you'd have to define the list &lt;code&gt;__all__&lt;/code&gt; in your module that will contain a list of public objects that'll be available when we do wildcard imports.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;__all__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;_another_weird_name_func&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_weird_name_func_&lt;/span&gt;():
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;_another_weird_name_func&lt;/span&gt;():
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; _another_weird_name_func()
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;works!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_weird_name_func_()
Traceback (most recent call last):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;NameError&lt;/span&gt;: name &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;some_weird_name_func_&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; defined
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ All sorted? *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(x) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; x
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(x) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(x)
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;reversed&lt;/span&gt;(x)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(y) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(y)
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;4.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;The &lt;code&gt;sorted&lt;/code&gt; method always returns a list, and comparing lists and tuples always returns &lt;code&gt;False&lt;/code&gt; in Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; [] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;tuple&lt;/span&gt;()
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(x), &lt;span class=&quot;pl-c1&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(x))
(&lt;span class=&quot;pl-c1&quot;&gt;tuple&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;list&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;Unlike &lt;code&gt;sorted&lt;/code&gt;, the &lt;code&gt;reversed&lt;/code&gt; method returns an iterator. Why? Because sorting requires the iterator to be either modified in-place or use an extra container (a list), whereas reversing can simply work by iterating from the last index to the first.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;So during comparison &lt;code&gt;sorted(y) == sorted(y)&lt;/code&gt;, the first call to &lt;code&gt;sorted()&lt;/code&gt; will consume the iterator &lt;code&gt;y&lt;/code&gt;, and the next call will just return an empty list.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; y &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;reversed&lt;/span&gt;(x)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(y), &lt;span class=&quot;pl-c1&quot;&gt;sorted&lt;/span&gt;(y)
([&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;], [])
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Midnight time doesn't exist?&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; datetime

midnight &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; datetime(&lt;span class=&quot;pl-c1&quot;&gt;2018&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)
midnight_time &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; midnight.time()

noon &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; datetime(&lt;span class=&quot;pl-c1&quot;&gt;2018&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)
noon_time &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; noon.time()

&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; midnight_time:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Time at midnight is&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, midnight_time)

&lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; noon_time:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Time at noon is&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, noon_time)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (&amp;lt; 3.5):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Time at noon is&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, datetime.time(&lt;span class=&quot;pl-c1&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The midnight time is not printed.&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;p&gt;Before Python 3.5, the boolean value for &lt;code&gt;datetime.time&lt;/code&gt; object was considered to be &lt;code&gt;False&lt;/code&gt; if it represented midnight in UTC. It is error-prone when using the &lt;code&gt;if obj:&lt;/code&gt; syntax to check if the &lt;code&gt;obj&lt;/code&gt; is null or some equivalent of &quot;empty.&quot;&lt;/p&gt;
&lt;hr/&gt;&lt;hr/&gt;&lt;h2&gt;Section: The Hidden treasures!&lt;/h2&gt;
&lt;p&gt;This section contains a few lesser-known and interesting things about Python that most beginners like me are unaware of (well, not anymore).&lt;/p&gt;
&lt;h3&gt;▶ Okay Python, Can you make me fly?&lt;/h3&gt;
&lt;p&gt;Well, here you go&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; antigravity
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; Sshh... It's a super-secret.&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;antigravity&lt;/code&gt; module is one of the few easter eggs released by Python developers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import antigravity&lt;/code&gt; opens up a web browser pointing to the &lt;a href=&quot;http://xkcd.com/353/&quot; rel=&quot;nofollow&quot;&gt;classic XKCD comic&lt;/a&gt; about Python.&lt;/li&gt;
&lt;li&gt;Well, there's more to it. There's &lt;strong&gt;another easter egg inside the easter egg&lt;/strong&gt;. If you look at the &lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/antigravity.py#L7-L17&quot;&gt;code&lt;/a&gt;, there's a function defined that purports to implement the &lt;a href=&quot;https://xkcd.com/426/&quot; rel=&quot;nofollow&quot;&gt;XKCD's geohashing algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ &lt;code&gt;goto&lt;/code&gt;, but why?&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; goto &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; goto, label
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;):
        &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt;):
            &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;I am trapped, please rescue!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
            &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;:
                goto .breakout &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; breaking out from a deeply nested loop&lt;/span&gt;
label .breakout
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Freedom!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.3):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
I am trapped, please rescue!
I am trapped, please rescue!
Freedom!
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;A working version of &lt;code&gt;goto&lt;/code&gt; in Python was &lt;a href=&quot;https://mail.python.org/pipermail/python-announce-list/2004-April/002982.html&quot; rel=&quot;nofollow&quot;&gt;announced&lt;/a&gt; as an April Fool's joke on 1st April 2004.&lt;/li&gt;
&lt;li&gt;Current versions of Python do not have this module.&lt;/li&gt;
&lt;li&gt;Although it works, but please don't use it. Here's the &lt;a href=&quot;https://docs.python.org/3/faq/design.html#why-is-there-no-goto&quot; rel=&quot;nofollow&quot;&gt;reason&lt;/a&gt; to why &lt;code&gt;goto&lt;/code&gt; is not present in Python.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Brace yourself!&lt;/h3&gt;
&lt;p&gt;If you are one of the people who doesn't like using whitespace in Python to denote scopes, you can use the C-style {} by importing,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; braces
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some_file.py&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; braces
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; a chance
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Braces? No way! If you think that's disappointing, use Java. Okay, another surprising thing, can you find where's the &lt;code&gt;SyntaxError&lt;/code&gt; raised in &lt;code&gt;__future__&lt;/code&gt; module &lt;a href=&quot;https://github.com/python/cpython/blob/master/Lib/__future__.py&quot;&gt;code&lt;/a&gt;?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code&gt;__future__&lt;/code&gt; module is normally used to provide features from future versions of Python. The &quot;future&quot; in this specific context is however, ironic.&lt;/li&gt;
&lt;li&gt;This is an easter egg concerned with the community's feelings on this issue.&lt;/li&gt;
&lt;li&gt;The code is actually present &lt;a href=&quot;https://github.com/python/cpython/blob/025eb98dc0c1dc27404df6c544fc2944e0fa9f3a/Python/future.c#L49&quot;&gt;here&lt;/a&gt; in &lt;code&gt;future.c&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;When the CPython compiler encounters a &lt;a href=&quot;https://docs.python.org/3.3/reference/simple_stmts.html#future-statements&quot; rel=&quot;nofollow&quot;&gt;future statement&lt;/a&gt;, it first runs the appropriate code in &lt;code&gt;future.c&lt;/code&gt; before treating it as a normal import statement.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Let's meet Friendly Language Uncle For Life&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; barry_as_FLUFL
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Ruby&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; there's no doubt about it&lt;/span&gt;
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;some_file.py&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Ruby&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
              &lt;span class=&quot;pl-k&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;SyntaxError&lt;/span&gt;: invalid syntax

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Ruby&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Python&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There we go.&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul readability=&quot;3.4131782945736&quot;&gt;&lt;li readability=&quot;0.91666666666667&quot;&gt;
&lt;p&gt;This is relevant to &lt;a href=&quot;https://www.python.org/dev/peps/pep-0401/&quot; rel=&quot;nofollow&quot;&gt;PEP-401&lt;/a&gt; released on April 1, 2009 (now you know, what it means).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.5&quot;&gt;
&lt;p&gt;Quoting from the PEP-401&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Recognized that the != inequality operator in Python 3.0 was a horrible, finger-pain inducing mistake, the FLUFL reinstates the &amp;lt;&amp;gt; diamond operator as the sole spelling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.95454545454545&quot;&gt;
&lt;p&gt;There were more things that Uncle Barry had to share in the PEP; you can read them &lt;a href=&quot;https://www.python.org/dev/peps/pep-0401/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.9094202898551&quot;&gt;
&lt;p&gt;It works well in an interactive environment, but it will raise a &lt;code&gt;SyntaxError&lt;/code&gt; when you run via python file (see this &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues/94&quot;&gt;issue&lt;/a&gt;). However, you can wrap the statement inside an &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;compile&lt;/code&gt; to get it working,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; barry_as_FLUFL
&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&quot;Ruby&quot; &amp;lt;&amp;gt; &quot;Python&quot;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Even Python understands that love is complicated&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; this
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wait, what's &lt;strong&gt;this&lt;/strong&gt;? &lt;code&gt;this&lt;/code&gt; is love ❤️&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It's the Zen of Python!&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; love &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; this
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; this &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; love
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; love &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; love &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; love &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; love &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;; love &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; love  &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Love is complicated&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;this&lt;/code&gt; module in Python is an easter egg for The Zen Of Python (&lt;a href=&quot;https://www.python.org/dev/peps/pep-0020&quot; rel=&quot;nofollow&quot;&gt;PEP 20&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;And if you think that's already interesting enough, check out the implementation of &lt;a href=&quot;https://hg.python.org/cpython/file/c3896275c0f6/Lib/this.py&quot; rel=&quot;nofollow&quot;&gt;this.py&lt;/a&gt;. Interestingly, &lt;strong&gt;the code for the Zen violates itself&lt;/strong&gt; (and that's probably the only place where this happens).&lt;/li&gt;
&lt;li&gt;Regarding the statement &lt;code&gt;love is not True or False; love is love&lt;/code&gt;, ironic but it's self-explanatory (if not, please see the examples related to &lt;code&gt;is&lt;/code&gt; and &lt;code&gt;is not&lt;/code&gt; operators).&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Yes, it exists!&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause for loops.&lt;/strong&gt; One typical example might be:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
  &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;does_exists_num&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;l&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;to_find&lt;/span&gt;):
      &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; num &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; l:
          &lt;span class=&quot;pl-k&quot;&gt;if&lt;/span&gt; num &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; to_find:
              &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Exists!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
              &lt;span class=&quot;pl-k&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;:
          &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Does not exist&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; does_exists_num(some_list, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;)
Exists!
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; does_exists_num(some_list, &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;)
Does &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; exist
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;else&lt;/code&gt; clause in exception handling.&lt;/strong&gt; An example,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;try&lt;/span&gt;:
    &lt;span class=&quot;pl-k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;except&lt;/span&gt;:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Exception occurred!!!&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;else&lt;/span&gt;:
    &lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Try block executed successfully...&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
Try block executed successfully&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code&gt;else&lt;/code&gt; clause after a loop is executed only when there's no explicit &lt;code&gt;break&lt;/code&gt; after all the iterations. You can think of it as a &quot;nobreak&quot; clause.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;else&lt;/code&gt; clause after a try block is also called &quot;completion clause&quot; as reaching the &lt;code&gt;else&lt;/code&gt; clause in a &lt;code&gt;try&lt;/code&gt; statement means that the try block actually completed successfully.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Ellipsis *&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;():
    &lt;span class=&quot;pl-c1&quot;&gt;Ellipsis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_func()
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; No output, No Error&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; SomeRandomString
Traceback (most recent call last):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;NameError&lt;/span&gt;: name &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;SomeRandomString&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;not&lt;/span&gt; defined

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Ellipsis&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Ellipsis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;In Python, &lt;code&gt;Ellipsis&lt;/code&gt; is a globally available built-in object which is equivalent to &lt;code&gt;...&lt;/code&gt;.
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Ellipsis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;8.9053461875548&quot;&gt;Eliipsis can be used for several purposes,
&lt;ul&gt;&lt;li&gt;As a placeholder for code that hasn't been written yet (just like &lt;code&gt;pass&lt;/code&gt; statement)&lt;/li&gt;
&lt;li&gt;In slicing syntax to represent the full slices in remaining direction&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; np
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; three_dimensional_array &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; np.arange(&lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;).reshape(&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;)
array([
    [
        [&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;],
        [&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;]
    ],

    [
        [&lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;],
        [&lt;span class=&quot;pl-c1&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;]
    ]
])
&lt;/pre&gt;&lt;/div&gt;
So our &lt;code&gt;three_dimensional_array&lt;/code&gt; is an array of array of arrays. Let's say we want to print the second element (index &lt;code&gt;1&lt;/code&gt;) of all the innermost arrays, we can use Ellipsis to bypass all the preceding dimensions
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;17&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; three_dimensional_array[:,:,&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;]
array([[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;],
   [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;]])
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; three_dimensional_array[&lt;span class=&quot;pl-c1&quot;&gt;...&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; using Ellipsis.&lt;/span&gt;
array([[&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;],
   [&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;]])
&lt;/pre&gt;&lt;/div&gt;
Note: this will work for any number of dimensions. You can even select slice in first and last dimension and ignore the middle ones this way (&lt;code&gt;n_dimensional_array[firs_dim_slice, ..., last_dim_slice]&lt;/code&gt;)
&lt;ul&gt;&lt;li&gt;In &lt;a href=&quot;https://docs.python.org/3/library/typing.html&quot; rel=&quot;nofollow&quot;&gt;type hinting&lt;/a&gt; to indicate only a part of the type (like &lt;code&gt;(Callable[..., int]&lt;/code&gt; or &lt;code&gt;Tuple[str, ...]&lt;/code&gt;))&lt;/li&gt;
&lt;li&gt;You may also use Ellipsis as a default function argument (in the cases when you want to differentiate between the &quot;no argument passed&quot; and &quot;None value passed&quot; scenarios).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Inpinity&lt;/h3&gt;
&lt;p&gt;The spelling is intended. Please, don't submit a patch for this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; infinity &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;infinity&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;(infinity)
&lt;span class=&quot;pl-c1&quot;&gt;314159&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;hash&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;-inf&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;))
&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;314159&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Hash of infinity is 10⁵ x π.&lt;/li&gt;
&lt;li&gt;Interestingly, the hash of &lt;code&gt;float('-inf')&lt;/code&gt; is &quot;-10⁵ x π&quot; in Python 3, whereas &quot;-10⁵ x e&quot; in Python 2.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Let's mangle&lt;/h3&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Yo&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.__honey &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.bro &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; Yo().bro
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; Yo().__honey
&lt;span class=&quot;pl-c1&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Yo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt; has no attribute &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__honey&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; Yo()._Yo__honey
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;Yo&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
        &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Let's try something symmetrical this time&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.__honey__ &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;self&lt;/span&gt;.bro &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; Yo().bro
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; Yo()._Yo__honey__
Traceback (most recent call last):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Yo&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt; has no attribute &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;_Yo__honey__&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why did &lt;code&gt;Yo()._Yo__honey&lt;/code&gt; work?&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
_A__variable &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;Some value&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;A&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt;):
    &lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;some_func&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;&lt;span class=&quot;pl-smi&quot;&gt;self&lt;/span&gt;&lt;/span&gt;):
        &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; __variable &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; not initialized anywhere yet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
Traceback (most recent call last):
  File &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, line &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;module&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;AttributeError&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;A&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;object&lt;/span&gt; has no attribute &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;__variable&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; A().some_func()
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Some value&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Name_mangling&quot; rel=&quot;nofollow&quot;&gt;Name Mangling&lt;/a&gt; is used to avoid naming collisions between different namespaces.&lt;/li&gt;
&lt;li&gt;In Python, the interpreter modifies (mangles) the class member names starting with &lt;code&gt;__&lt;/code&gt; (double underscore a.k.a &quot;dunder&quot;) and not ending with more than one trailing underscore by adding &lt;code&gt;_NameOfTheClass&lt;/code&gt; in front.&lt;/li&gt;
&lt;li&gt;So, to access &lt;code&gt;__honey&lt;/code&gt; attribute in the first snippet, we had to append &lt;code&gt;_Yo&lt;/code&gt; to the front, which would prevent conflicts with the same name attribute defined in any other class.&lt;/li&gt;
&lt;li&gt;But then why didn't it work in the second snippet? Because name mangling excludes the names ending with double underscores.&lt;/li&gt;
&lt;li&gt;The third snippet was also a consequence of name mangling. The name &lt;code&gt;__variable&lt;/code&gt; in the statement &lt;code&gt;return __variable&lt;/code&gt; was mangled to &lt;code&gt;_A__variable&lt;/code&gt;, which also happens to be the name of the variable we declared in the outer scope.&lt;/li&gt;
&lt;li&gt;Also, if the mangled name is longer than 255 characters, truncation will happen.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;hr/&gt;&lt;h2&gt;Section: Appearances are deceptive!&lt;/h2&gt;
&lt;h3&gt;▶ Skipping lines?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; value &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; valuе &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; value
&lt;span class=&quot;pl-c1&quot;&gt;11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wut?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The easiest way to reproduce this is to simply copy the statements from the above snippet and paste them into your file/shell.&lt;/p&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;p&gt;Some non-Western characters look identical to letters in the English alphabet but are considered distinct by the interpreter.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;е&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; cyrillic 'e' (Ye)&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;1077&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;ord&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;e&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; latin 'e', as used in English and typed using standard keyboard&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;101&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;е&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;e&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; value &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; latin e&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; valuе &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; cyrillic 'e', Python 2.x interpreter would raise a `SyntaxError` here&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; value
&lt;span class=&quot;pl-c1&quot;&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The built-in &lt;code&gt;ord()&lt;/code&gt; function returns a character's Unicode &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot; rel=&quot;nofollow&quot;&gt;code point&lt;/a&gt;, and different code positions of Cyrillic 'e' and Latin 'e' justify the behavior of the above example.&lt;/p&gt;
&lt;hr/&gt;&lt;h3&gt;▶ Teleportation&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; `pip install nump` first.&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; np

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;energy_send&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;):
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Initializing a numpy array&lt;/span&gt;
    np.array([&lt;span class=&quot;pl-c1&quot;&gt;float&lt;/span&gt;(x)])

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;energy_receive&lt;/span&gt;():
    &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Return an empty numpy array&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; np.empty((), &lt;span class=&quot;pl-v&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;np.float).tolist()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; energy_send(&lt;span class=&quot;pl-c1&quot;&gt;123.456&lt;/span&gt;)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; energy_receive()
&lt;span class=&quot;pl-c1&quot;&gt;123.456&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where's the Nobel Prize?&lt;/p&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;Notice that the numpy array created in the &lt;code&gt;energy_send&lt;/code&gt; function is not returned, so that memory space is free to reallocate.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy.empty()&lt;/code&gt; returns the next free memory slot without reinitializing it. This memory spot just happens to be the same one that was just freed (usually, but not always).&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Well, something is fishy...&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;):
    &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    A simple function to calculate the square of a number by addition.&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    &lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
    sum_so_far &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; counter &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(x):
        sum_so_far &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; sum_so_far &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; x
  &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; sum_so_far
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 2.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; square(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shouldn't that be 100?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you're not able to reproduce this, try running the file &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/blob/master/mixed_tabs_and_spaces.py&quot;&gt;mixed_tabs_and_spaces.py&lt;/a&gt; via the shell.&lt;/p&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul readability=&quot;3&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Don't mix tabs and spaces!&lt;/strong&gt; The character just preceding return is a &quot;tab&quot;, and the code is indented by multiple of &quot;4 spaces&quot; elsewhere in the example.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;This is how Python handles tabs:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;First, tabs are replaced (from left to right) by one to eight spaces such that the total number of characters up to and including the replacement is a multiple of eight &amp;lt;...&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;So the &quot;tab&quot; at the last line of &lt;code&gt;square&lt;/code&gt; function is replaced with eight spaces, and it gets into the loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Python 3 is kind enough to throw an error for such cases automatically.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Output (Python 3.x):&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c1&quot;&gt;TabError&lt;/span&gt;: inconsistent use of tabs &lt;span class=&quot;pl-k&quot;&gt;and&lt;/span&gt; spaces &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; indentation
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;hr/&gt;&lt;h2&gt;Section: Miscellaneous&lt;/h2&gt;
&lt;h3&gt;▶ &lt;code&gt;+=&lt;/code&gt; is faster&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; using &quot;+&quot;, three strings:&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; timeit.timeit(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;s1 = s1 + s2 + s3&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;0.25748300552368164&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; using &quot;+=&quot;, three strings:&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; timeit.timeit(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;s1 += s2 + s3&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;s1 = ' ' * 100000; s2 = ' ' * 100000; s3 = ' ' * 100000&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;0.012188911437988281&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;+=&lt;/code&gt; is faster than &lt;code&gt;+&lt;/code&gt; for concatenating more than two strings because the first string (example, &lt;code&gt;s1&lt;/code&gt; for &lt;code&gt;s1 += s2 + s3&lt;/code&gt;) is not destroyed while calculating the complete string.&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Let's make a giant string!&lt;/h3&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;add_string_with_plus&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;iters&lt;/span&gt;):
    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(iters):
        s &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;xyz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;add_bytes_with_plus&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;iters&lt;/span&gt;):
    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(iters):
        s &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;xyz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;add_string_with_format&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;iters&lt;/span&gt;):
    fs &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters
    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; fs.format(&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;([&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;xyz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters))
    &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;add_string_with_join&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;iters&lt;/span&gt;):
    l &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; []
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(iters):
        l.append(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;xyz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;.join(l)
    &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters

&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;convert_list_to_string&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;l&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;iters&lt;/span&gt;):
    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;.join(l)
    &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;19&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Executed in ipython shell using %timeit for better readability of results.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; You can also use the timeit module in normal python shell/scriptm=, example usage below&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; timeit.timeit('add_string_with_plus(10000)', number=1000, globals=globals())&lt;/span&gt;

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_string_with_plus(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;124&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;4.73&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_bytes_with_plus(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;211&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;10.5&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_string_with_format(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;61&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;2.18&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_string_with_join(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;117&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;3.21&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; l &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;xyz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 convert_list_to_string(l, &lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;10.1&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;1.06&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's increase the number of iterations by a factor of 10.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;16&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_string_with_plus(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Linear increase in execution time&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;1.26&lt;/span&gt; ms ± &lt;span class=&quot;pl-c1&quot;&gt;76.8&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_bytes_with_plus(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Quadratic increase&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;6.82&lt;/span&gt; ms ± &lt;span class=&quot;pl-c1&quot;&gt;134&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_string_with_format(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Linear increase&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;645&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;24.5&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 add_string_with_join(&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Linear increase&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;1.17&lt;/span&gt; ms ± &lt;span class=&quot;pl-c1&quot;&gt;7.25&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; l &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;xyz&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n1000 convert_list_to_string(l, &lt;span class=&quot;pl-c1&quot;&gt;NUM_ITERS&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Linear increase&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;86.3&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;💡 Explanation&lt;/h4&gt;
&lt;ul readability=&quot;12.801526717557&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;You can read more about &lt;a href=&quot;https://docs.python.org/3/library/timeit.html&quot; rel=&quot;nofollow&quot;&gt;timeit&lt;/a&gt; or &lt;a href=&quot;https://ipython.org/ipython-doc/dev/interactive/magics.html#magic-timeit&quot; rel=&quot;nofollow&quot;&gt;%timeit&lt;/a&gt; on these links. They are used to measure the execution time of code pieces.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;
&lt;p&gt;Don't use &lt;code&gt;+&lt;/code&gt; for generating long strings — In Python, &lt;code&gt;str&lt;/code&gt; is immutable, so the left and right strings have to be copied into the new string for every pair of concatenations. If you concatenate four strings of length 10, you'll be copying (10+10) + ((10+10)+10) + (((10+10)+10)+10) = 90 characters instead of just 40 characters. Things get quadratically worse as the number and size of the string increases (justified with the execution times of &lt;code&gt;add_bytes_with_plus&lt;/code&gt; function)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Therefore, it's advised to use &lt;code&gt;.format.&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; syntax (however, they are slightly slower than &lt;code&gt;+&lt;/code&gt; for very short strings).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Or better, if already you've contents available in the form of an iterable object, then use &lt;code&gt;''.join(iterable_object)&lt;/code&gt; which is much faster.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;Unlike &lt;code&gt;add_bytes_with_plus&lt;/code&gt; because of the &lt;code&gt;+=&lt;/code&gt; optimizations discussed in the previous example, &lt;code&gt;add_string_with_plus&lt;/code&gt; didn't show a quadratic increase in execution time. Had the statement been &lt;code&gt;s = s + &quot;x&quot; + &quot;y&quot; + &quot;z&quot;&lt;/code&gt; instead of &lt;code&gt;s += &quot;xyz&quot;&lt;/code&gt;, the increase would have been quadratic.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;add_string_with_plus&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;iters&lt;/span&gt;):
    s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(iters):
        s &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; s &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;x&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;y&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;z&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;*&lt;/span&gt;iters

&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n100 add_string_with_plus(&lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt;)
&lt;span class=&quot;pl-c1&quot;&gt;388&lt;/span&gt; µs ± &lt;span class=&quot;pl-c1&quot;&gt;22.4&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;1000&lt;/span&gt; loops each)
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;%&lt;/span&gt;timeit &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt;n100 add_string_with_plus(&lt;span class=&quot;pl-c1&quot;&gt;10000&lt;/span&gt;) &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; Quadratic increase in execution time&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;9&lt;/span&gt; ms ± &lt;span class=&quot;pl-c1&quot;&gt;298&lt;/span&gt; µs per loop (mean ± std. dev. of &lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt; runs, &lt;span class=&quot;pl-c1&quot;&gt;100&lt;/span&gt; loops each)
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.7891891891892&quot;&gt;
&lt;p&gt;So many ways to format and create a giant string are somewhat in contrast to the &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot; rel=&quot;nofollow&quot;&gt;Zen of Python&lt;/a&gt;, according to which,&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;hr/&gt;&lt;h3&gt;▶ Minor Ones *&lt;/h3&gt;
&lt;ul readability=&quot;43.991106170094&quot;&gt;&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;code&gt;join()&lt;/code&gt; is a string operation instead of list operation. (sort of counter-intuitive at first usage)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If &lt;code&gt;join()&lt;/code&gt; is a method on a string, then it can operate on any iterable (list, tuple, iterators). If it were a method on a list, it'd have to be implemented separately by every type. Also, it doesn't make much sense to put a string-specific method on a generic &lt;code&gt;list&lt;/code&gt; object API.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.97692307692308&quot;&gt;
&lt;p&gt;Few weird looking but semantically correct statements:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;[] = ()&lt;/code&gt; is a semantically correct statement (unpacking an empty &lt;code&gt;tuple&lt;/code&gt; into an empty &lt;code&gt;list&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'a'[0][0][0][0][0]&lt;/code&gt; is also a semantically correct statement as strings are &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-sequence&quot; rel=&quot;nofollow&quot;&gt;sequences&lt;/a&gt;(iterables supporting element access using integer indices) in Python.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 --0-- 5 == 8&lt;/code&gt; and &lt;code&gt;--5 == 5&lt;/code&gt; are both semantically correct statements and evaluate to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;3.9541108986616&quot;&gt;
&lt;p&gt;Given that &lt;code&gt;a&lt;/code&gt; is a number, &lt;code&gt;++a&lt;/code&gt; and &lt;code&gt;--a&lt;/code&gt; are both valid Python statements but don't behave the same way as compared with similar statements in languages like C, C++, or Java.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-ii&quot;&gt;++&lt;/span&gt;a
&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-ii&quot;&gt;--&lt;/span&gt;a
&lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;There is no &lt;code&gt;++&lt;/code&gt; operator in Python grammar. It is actually two &lt;code&gt;+&lt;/code&gt; operators.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;++a&lt;/code&gt; parses as &lt;code&gt;+(+a)&lt;/code&gt; which translates to &lt;code&gt;a&lt;/code&gt;. Similarly, the output of the statement &lt;code&gt;--a&lt;/code&gt; can be justified.&lt;/li&gt;
&lt;li&gt;This StackOverflow &lt;a href=&quot;https://stackoverflow.com/questions/3654830/why-are-there-no-and-operators-in-python&quot; rel=&quot;nofollow&quot;&gt;thread&lt;/a&gt; discusses the rationale behind the absence of increment and decrement operators in Python.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;7.5594713656388&quot;&gt;
&lt;p&gt;You must be aware of the Walrus operator in Python. But have you ever heard about &lt;em&gt;the space-invader operator&lt;/em&gt;?&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;-=&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
&lt;span class=&quot;pl-c1&quot;&gt;43&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is used as an alternative incrementation operator, together with another one&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; a
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;44&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; This prank comes from &lt;a href=&quot;https://twitter.com/raymondh/status/1131103570856632321?lang=en&quot; rel=&quot;nofollow&quot;&gt;Raymond Hettinger's tweet&lt;/a&gt;. The space invader operator is actually just a malformatted &lt;code&gt;a -= (-1)&lt;/code&gt;. Which is equivalent to &lt;code&gt;a = a - (- 1)&lt;/code&gt;. Similar for the &lt;code&gt;a += (+ 1)&lt;/code&gt; case.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.1497005988024&quot;&gt;
&lt;p&gt;Python has an undocumented &lt;a href=&quot;https://en.wikipedia.org/wiki/Converse_implication&quot; rel=&quot;nofollow&quot;&gt;converse implication&lt;/a&gt; operator.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If you replace &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt; by 0 and 1 and do the maths, the truth table is equivalent to a converse implication operator. (&lt;a href=&quot;https://github.com/cosmologicon/pywat/blob/master/explanation.md#the-undocumented-converse-implication-operator&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;Since we are talking operators, there's also &lt;code&gt;@&lt;/code&gt; operator for matrix multiplication (don't worry, this time it's for real).&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;pl-k&quot;&gt;as&lt;/span&gt; np
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; np.array([&lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;]) &lt;span class=&quot;pl-k&quot;&gt;@&lt;/span&gt; np.array([&lt;span class=&quot;pl-c1&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;8&lt;/span&gt;])
&lt;span class=&quot;pl-c1&quot;&gt;46&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; The &lt;code&gt;@&lt;/code&gt; operator was added in Python 3.5 keeping the scientific community in mind. Any object can overload &lt;code&gt;__matmul__&lt;/code&gt; magic method to define behavior for this operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;From Python 3.8 onwards you can use a typical f-string syntax like &lt;code&gt;f'{some_var=}&lt;/code&gt; for quick debugging. Example,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_string &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtfpython&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;{&lt;/span&gt;some_string=&lt;span class=&quot;pl-c1&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;string='wtfpython'&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;Python uses 2 bytes for local variable storage in functions. In theory, this means that only 65536 variables can be defined in a function. However, python has a handy solution built in that can be used to store more than 2^16 variable names. The following code demonstrates what happens in the stack when more than 65536 local variables are defined (Warning: This code prints around 2^18 lines of text, so be prepared!):&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; dis
&lt;span class=&quot;pl-c1&quot;&gt;exec&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;def f():&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;   &lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;   &lt;span class=&quot;pl-pds&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;.join([&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;X&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;(x) &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;=&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;str&lt;/span&gt;(x) &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;65539&lt;/span&gt;)]))

f()

&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(dis.dis(f))
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;7.3846153846154&quot;&gt;
&lt;p&gt;Multiple Python threads won't run your &lt;em&gt;Python code&lt;/em&gt; concurrently (yes, you heard it right!). It may seem intuitive to spawn several threads and let them execute your Python code concurrently, but, because of the &lt;a href=&quot;https://wiki.python.org/moin/GlobalInterpreterLock&quot; rel=&quot;nofollow&quot;&gt;Global Interpreter Lock&lt;/a&gt; in Python, all you're doing is making your threads execute on the same core turn by turn. Python threads are good for IO-bound tasks, but to achieve actual parallelization in Python for CPU-bound tasks, you might want to use the Python &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html&quot; rel=&quot;nofollow&quot;&gt;multiprocessing&lt;/a&gt; module.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;Sometimes, the &lt;code&gt;print&lt;/code&gt; method might not print values immediately. For example,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; File some_file.py&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;import&lt;/span&gt; time

&lt;span class=&quot;pl-c1&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtfpython&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;_&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;)
time.sleep(&lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will print the &lt;code&gt;wtfpython&lt;/code&gt; after 10 seconds due to the &lt;code&gt;end&lt;/code&gt; argument because the output buffer is flushed either after encountering &lt;code&gt;\n&lt;/code&gt; or when the program finishes execution. We can force the buffer to flush by passing &lt;code&gt;flush=True&lt;/code&gt; argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;List slicing with out of the bounds indices throws no errors&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;pl-c1&quot;&gt;5&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list[&lt;span class=&quot;pl-c1&quot;&gt;111&lt;/span&gt;:]
[]
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;6.5&quot;&gt;
&lt;p&gt;Slicing an iterable not always creates a new object. For example,&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;18&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_str &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;wtfpython&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;w&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;t&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;f&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;p&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;y&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;t&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;h&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;o&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;n&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_list &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; some_list[:] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; False expected because a new object is created.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; some_str &lt;span class=&quot;pl-k&quot;&gt;is&lt;/span&gt; some_str[:] &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; True because strings are immutable, so making a new object is of not much use.&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.6975088967972&quot;&gt;
&lt;p&gt;&lt;code&gt;int('١٢٣٤٥٦٧٨٩')&lt;/code&gt; returns &lt;code&gt;123456789&lt;/code&gt; in Python 3. In Python, Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Here's an &lt;a href=&quot;http://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/&quot; rel=&quot;nofollow&quot;&gt;interesting story&lt;/a&gt; related to this behavior of Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.5&quot;&gt;
&lt;p&gt;You can separate numeric literals with underscores (for better readability) from Python 3 onwards.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; six_million &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;6_000_000&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; six_million
&lt;span class=&quot;pl-c1&quot;&gt;6000000&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; hex_address &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;&lt;span class=&quot;pl-k&quot;&gt;0x&lt;/span&gt;F00D_CAFE&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&lt;/span&gt; hex_address
&lt;span class=&quot;pl-c1&quot;&gt;4027435774&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;code&gt;'abc'.count('') == 4&lt;/code&gt;. Here's an approximate implementation of &lt;code&gt;count&lt;/code&gt; method, which would make the things more clear&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-python&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;count&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;s&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;sub&lt;/span&gt;):
    result &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(s) &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(sub)):
        result &lt;span class=&quot;pl-k&quot;&gt;+=&lt;/span&gt; (s[i:i &lt;span class=&quot;pl-k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;len&lt;/span&gt;(sub)] &lt;span class=&quot;pl-k&quot;&gt;==&lt;/span&gt; sub)
    &lt;span class=&quot;pl-k&quot;&gt;return&lt;/span&gt; result
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The behavior is due to the matching of empty substring(&lt;code&gt;''&lt;/code&gt;) with slices of length 0 in the original string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;That's all folks!&lt;/strong&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;hr/&gt;
&lt;p&gt;A few ways in which you can contribute to wtfpython,&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Suggesting new examples&lt;/li&gt;
&lt;li&gt;Helping with translation (See &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues?q=is%3Aissue+is%3Aopen+label%3Atranslation&quot;&gt;issues labeled translation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Minor corrections like pointing out outdated snippets, typos, formatting errors, etc.&lt;/li&gt;
&lt;li&gt;Identifying gaps (things like inadequate explanation, redundant examples, etc.)&lt;/li&gt;
&lt;li&gt;Any creative suggestions to make this project more fun and useful&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Please see &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for more details. Feel free to create a new &lt;a href=&quot;https://github.com/satwikkansal/wtfpython/issues/new&quot;&gt;issue&lt;/a&gt; to discuss things.&lt;/p&gt;
&lt;p&gt;PS: Please don't reach out with backlinking requests, no links will be added unless they're highly relevant to the project.&lt;/p&gt;

&lt;p&gt;The idea and design for this collection were initially inspired by Denys Dovhan's awesome project &lt;a href=&quot;https://github.com/denysdovhan/wtfjs&quot;&gt;wtfjs&lt;/a&gt;. The overwhelming support by Pythonistas gave it the shape it is in right now.&lt;/p&gt;
&lt;h4&gt;Some nice Links!&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wtfpl.net&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f0d9a0db9f3c144c0892990f4d8dfd0be0d2f73b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d575446504c253230322e302d6c69676874677265792e7376673f7374796c653d666c61742d737175617265&quot; alt=&quot;WTFPL 2.0&quot; data-canonical-src=&quot;https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;© &lt;a href=&quot;https://satwikkansal.xyz&quot; rel=&quot;nofollow&quot;&gt;Satwik Kansal&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Surprise your friends as well!&lt;/h2&gt;
&lt;p&gt;If you like wtfpython, you can use these quick links to share it with your friends,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?url=https://github.com/satwikkansal/wtfpython&amp;amp;text=If%20you%20really%20think%20you%20know%20Python,%20think%20once%20more!%20Check%20out%20wtfpython&amp;amp;hashtags=python,wtfpython&quot; rel=&quot;nofollow&quot;&gt;Twitter&lt;/a&gt; | &lt;a href=&quot;https://www.linkedin.com/shareArticle?url=https://github.com/satwikkansal&amp;amp;title=What%20the%20f*ck%20Python!&amp;amp;summary=If%20you%20really%20thing%20you%20know%20Python,%20think%20once%20more!&quot; rel=&quot;nofollow&quot;&gt;Linkedin&lt;/a&gt; | &lt;a href=&quot;https://www.facebook.com/dialog/share?app_id=536779657179021&amp;amp;display=page&amp;amp;href=https%3A%2F%2Fgithub.com%2Fsatwikkansal%2Fwtfpython&amp;amp;quote=If%20you%20really%20think%20you%20know%20Python%2C%20think%20once%20more!&quot; rel=&quot;nofollow&quot;&gt;Facebook&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Need a pdf version?&lt;/h2&gt;
&lt;p&gt;I've received a few requests for the pdf (and epub) version of wtfpython. You can add your details &lt;a href=&quot;https://satwikkansal.xyz/wtfpython-pdf/&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; to get them as soon as they are finished.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;PS: On a sidenote, consider donating a dollar to &lt;a href=&quot;https://teamtrees.org/&quot; rel=&quot;nofollow&quot;&gt;plant a tree&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 07:39:35 +0000</pubDate>
<dc:creator>throwaway_shame</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/10217535?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>satwikkansal/wtfpython</og:title>
<og:url>https://github.com/satwikkansal/wtfpython</og:url>
<og:description>Exploring Python through counter-intuitive snippets. If you think you know Python, think once more! - satwikkansal/wtfpython</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/satwikkansal/wtfpython/blob/master/README.md</dc:identifier>
</item>
<item>
<title>Ram Dass has died</title>
<link>https://tricycle.org/trikedaily/ram-dass-dies/</link>
<guid isPermaLink="true" >https://tricycle.org/trikedaily/ram-dass-dies/</guid>
<description>&lt;p&gt;If there is an enduring figure emblematic of the consciousness revolution of the 1960s and 70s, it is arguably the Harvard professor and LSD researcher-turned-spiritual leader born Richard Alpert but known the world over as Ram Dass.&lt;span&gt; With Timothy Leary, his colleague in the Harvard psychology department, he forever changed a generation of Americans through his explorations with psilocybin, LSD-75, and other psychedelics before reinventing himself as a spiritual teacher and humanitarian—a&lt;/span&gt; &lt;em&gt;&lt;span&gt;bhakti&lt;/span&gt;&lt;/em&gt; &lt;span&gt;yogi with love as his path. When Ram Dass died on Sunday evening, one of the most beloved voices of the counterculture fell silent. He was 88 years old.  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It was Leary who famously exhorted American youth to “Turn on, tune in, drop out,” but it was Alpert who became a model of awakening that wasn’t dependent on drugs. Fired from Harvard in 1963 for giving LSD to an undergraduate, Alpert moved to Millbrook, New York, with Leary, who had been fired ostensibly for not showing up for his classes. In Millbrook, the two continued their psychedelic experimentation with an ever-changing cast of psychonauts and acidheads. But in 1967, Alpert, still searching, left for India. There he found his guru, the Hindu&lt;/span&gt; &lt;em&gt;&lt;span&gt;sadhu&lt;/span&gt;&lt;/em&gt; &lt;span&gt;Neem Karoli Baba, known as Maharaj-ji, characteristically wrapped in a blanket and seated on a wooden tucket, a low Indian bed. Curious to see how a spiritual adept would react to LSD, Alpert gave Maharaj-ji a whopping dose. It had zero effect on the holy man. Over the next few years until Maharaj-ji’s death in 1973, Alpert—by then renamed Ram Dass, or Servant of God, by Maharaj-ji—periodically returned to be with his guru. Resettling in America in 1974, he started a new life based on a different kind of turn-on—meditation—and his own synthesis of Buddhist, Hindu, Advaita, and Sufi teachings, and later, Jewish mysticism.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;In&lt;/span&gt; &lt;em&gt;&lt;span&gt;Be Here Now&lt;/span&gt;&lt;/em&gt;&lt;span&gt;, &lt;a href=&quot;https://tricycle.org/magazine/americas-guru/&quot;&gt;Ram Dass&lt;/a&gt;‘s first book for the masses, which has sold over 2 million copies since publication in 1971, he offered seekers an engaging, unconventional, slightly zany roadmap for finding a spiritual path and a more enduring connection to higher consciousness than a tab of acid could bring. From then on, in close to a dozen books and countless teachings, retreats, and &lt;a href=&quot;https://beherenownetwork.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;podcasts&lt;/a&gt;, Ram Dass continued to share the wisdom of a journey that had long gone beyond personal transformation to embrace a cosmic worldview and social agenda. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Much of the compassionate service for which Ram Dass became known was in collaboration with others. He launched the&lt;/span&gt; &lt;span&gt;Hanuman Foundation to further practical application of the principles and teachings of Neem Karoli Baba—work that continues today through Ram Dass’s Love Serve Remember Foundation. Through Hanuman he also set up the Prison Ashram Project, offering counseling and spiritual practice to the incarcerated, many of whom had contacted Ram Dass after reading&lt;/span&gt; &lt;em&gt;&lt;span&gt;Be Here Now.&lt;/span&gt;&lt;/em&gt;&lt;span&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related: &lt;a href=&quot;https://tricycle.org/magazine/already-free/&quot;&gt;Already Free: A Swim with Ram Dass&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Inspired by the humane approach to death and dying he had seen in India, Ram Dass was instrumental in co-creating the Living-Dying Project to support caregivers, healthcare professionals, and individuals dealing with terminal illness, and in establishing a hospice and training center in Santa Fe, New Mexico. In 1979, with epidemiologist and Hanuman board member Larry Brilliant and others, Ram Dass founded the Seva Foundation, which works to combat blindness in the Himalayas and provides healthcare there and in other underserved areas of Asia and the Americas. He also helped set up the Social Venture Network to explore ways to bring spiritual awareness to business and served on the board of Creating Our Future, an organization for teens who wanted to lead more spiritual lives. On Maui, where he has lived since 2004, Ram Dass co-founded Doorway Into Light, which helps people prepare for dying. “Sitting by the bed of the dying is &lt;em&gt;sadhana&lt;/em&gt; [spiritual practice],” he said. For his unwavering commitment to helping others, Ram Dass has been called “a model of selfless service.”  &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;“My life has been a dance between power and love,” he observed after the massive cerebral hemorrhage in 1997 that left the charismatic, preternaturally articulate teacher groping for words. “First part, till Harvard: power, power, power, power. Up until drugs, I thought power was the end all and be all, because I was a little individual. Then drugs: love, love, love, love. My first mushroom trip was so profound that I saw radiance was inside, and I said, ‘I’m home, I’m home, I’m home.'” &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Born Richard Alpert on April 6, 1930 in Boston, Ram Dass was the youngest of three brothers. His father, George Alpert, a prominent lawyer, was president of the New York, New Haven &amp;amp; Hartford Railroad and the first board president of Brandeis University. The family was Jewish and Richard was bar mitzvahed, but he later called the ritual “hollow” and claimed to have had no interest in religion until he took psychedelics. After graduating cum laude from Williston Northampton, a prep school in Massachusetts, he earned a bachelor’s degree from Tufts, a master’s from Wesleyan, and a PhD from Stanford–all in psychology. In California he met psychologist David McClelland, who became his mentor and brought Alpert with him to Harvard. At Harvard, Alpert was a star, with appointments in the Psychology and Social Relations Departments, the Graduate School of Education, and the Health Service, where he served as a therapist. He also had research grants from Yale and Stanford, and was publishing academic books. “In 1961, at the beginning of March, I was at the high point of my academic career,” he wrote in&lt;/span&gt; &lt;em&gt;&lt;span&gt;Be Here Now&lt;/span&gt;&lt;/em&gt;&lt;span&gt;. “I was making a great income, and I was a collector of possessions,” among them an antiques-filled Cambridge apartment, a Mercedes-Benz, an MG sports car, a Triumph 500cc motorcycle, and a Cessna 172 airplane. “But what it all boils down to is that I was really a very good game player.” &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;All that changed on March 6, 1961, the day he took psilocybin for the first time. Psychedelics led to his second great awakening: his encounter with Maharaj-ji and spiritual transformation. Then in 1997, as Ram Dass was finishing&lt;/span&gt; &lt;em&gt;&lt;span&gt;Still Here,&lt;/span&gt;&lt;/em&gt; &lt;span&gt;the second volume of his spiritual memoirs, he had his third great awakening, the stroke that began the final phase of his life. He was given only a 10 percent chance to survive.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Long an outspoken advocate and support for the sick and dying, shortly before his stroke, Ram Dass told an audience: “Something has happened to me as a result of my meanderings through consciousness over the past 30 years that has changed my attitude towards death. A lot of the fear that denial of death generated has gone from me. Death does not have to be treated as an enemy for you to delight in life. Keeping death in your consciousness as one of the greatest mysteries and as the moment of incredible transformation imbues this moment with added richness and energy that otherwise is used up in denial.” &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;After the stroke, those observations seemed hopelessly naive, he said. The stroke had given him a far deeper understanding of what the suffering of aging, infirmity, and dying really means. Characteristically, he viewed it in spiritual terms: “I don’t wish you the stroke, but I wish you the grace from the stroke,” he said in&lt;/span&gt; &lt;em&gt;&lt;span&gt;Ram Dass, Going Home,&lt;/span&gt;&lt;/em&gt; &lt;span&gt;a 2017 documentary by Derek Peck. “The stroke pushed me inside even more. That’s so wonderful.” &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It also meant that the man who had spent much of his life helping others had to let others help him. Noting that before the stroke, he had co-authored a book about service called&lt;/span&gt; &lt;em&gt;&lt;span&gt;How Can I Help?,&lt;/span&gt;&lt;/em&gt; &lt;span&gt;“after the stroke I would have titled it&lt;/span&gt; &lt;em&gt;&lt;span&gt;How Can You Help Me?&lt;/span&gt;&lt;/em&gt;&lt;span&gt;” he said. “In this culture dependency is a no-no. The stroke showed me dependency, and I have people who are dependable.” &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Following a near-fatal infection in 2004, Ram Das was largely confined to his home on Maui.  A sprawling, light-filled aerie with lush vegetation and a panoramic ocean view, it was a gift from devoted friends. One of his pleasures was his weekly swim in the ocean, accompanied by a clutch of neighbors. After being wheeled to the shore in a dune buggy with enormous yellow balloon wheels and orange floats as armrests, he would launch himself into the sea. There, buoyed by a large black life jacket, he would paddle gently with yellow webbed mitts, a look of delight on his face. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Rum Dum to his father, RD to his friends, Ram Dass was a true original. He lived out loud, with a rollicking laugh and seemingly irrepressible esprit de corps. Even when his stroke rendered him virtually immobile with halting speech, he could summon his far-ranging mind to be totally present for his weekly podcasts and the friends and followers who gathered around him, some coming to Maui for his thrice-yearly retreats. His door was open to a steady stream of visitors, many of them strangers, seeking comfort, inspiration, or advice. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Ram Dass’s spunk and determination were the energetic benefits of years of spiritual practice and a bodhisattva-like commitment to sharing it with others. &lt;a href=&quot;https://tricycle.org/magazine/contemplating-corporate-culture/&quot;&gt;Mirabai Bush&lt;/a&gt;, a “guru sister” from their days with Maharaj-ji in India and his collaborator on his last book,&lt;/span&gt; &lt;em&gt;&lt;span&gt;Walking Each Other Home: Conversations on Loving and Dying&lt;/span&gt;&lt;/em&gt;&lt;span&gt;, summed up his life’s work in her introduction. “Ram Dass’s journey has been a search for love and for finding a way to stay in the space of love once he experienced it,” she wrote, adding, “Ram Dass was always loving, but now he&lt;/span&gt; &lt;em&gt;&lt;span&gt;is&lt;/span&gt;&lt;/em&gt; &lt;span&gt;love.”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Unsinkable, Ram Dass survived great challenges to remain one of the most colorful and memorable spiritual leaders of his age. When he finally surrendered to death, it was with what filmmaker Mickey Lemle, in his 2001 documentary about RD, called “fierce grace.” &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 07:11:24 +0000</pubDate>
<dc:creator>okareaman</dc:creator>
<og:type>article</og:type>
<og:title>Ram Dass, Beloved Spiritual Teacher, Has Died</og:title>
<og:description>The American spiritual leader, yogi, counterculture icon, and Be Here Now author has died. He was 88.</og:description>
<og:url>https://tricycle.org/trikedaily/ram-dass-dies/</og:url>
<og:image>https://tricycle.org/wp-content/uploads/2019/12/ram-dass-dies.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tricycle.org/trikedaily/ram-dass-dies/</dc:identifier>
</item>
<item>
<title>Many Japanese children refuse to go to school</title>
<link>https://www.bbc.co.uk/news/world-asia-50693777</link>
<guid isPermaLink="true" >https://www.bbc.co.uk/news/world-asia-50693777</guid>
<description>&lt;figure class=&quot;media-landscape no-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;Children playing in Tamagawa Free School&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/0722/production/_110162810_ea9e89fa-1e45-4129-987a-cefaa6a2adb9.jpg&quot; width=&quot;976&quot; height=&quot;647&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Stephane Bureau du Colombier&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;In Japan, more and more children are refusing to go to school, a phenomenon called &quot;futoko&quot;. As the numbers keep rising, people are asking if it's a reflection of the school system, rather than a problem with the pupils themselves.&lt;/p&gt;&lt;p&gt;Ten-year-old Yuta Ito waited until the annual Golden Week holiday last spring to tell his parents how he was feeling - on a family day out he confessed that he no longer wanted to go to school. &lt;/p&gt;&lt;p&gt;For months he had been attending his primary school with great reluctance, often refusing to go at all. He was being bullied and kept fighting with his classmates.&lt;/p&gt;&lt;p&gt;His parents then had three choices: get Yuta to attend school counselling in the hope things would improve, home-school him, or send him to a free school. They chose the last option. &lt;/p&gt;&lt;p&gt;Now Yuta spends his school days doing whatever he wants - and he's much happier. &lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Japanese primary school children (file picture)
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Yuta is one of Japan's many futoko, defined by Japan's education ministry as children who don't go to school for more than 30 days, for reasons unrelated to health or finances.&lt;/p&gt;&lt;p&gt;The term has been variously translated as &lt;a href=&quot;https://baylor-ir.tdl.org/bitstream/handle/2104/8886/Brittany_Lozano_HonorsThesis.pdf?sequence=1&quot; class=&quot;story-body__link-external&quot;&gt;absenteeism, truancy, school phobia or school refusal&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;Attitudes to futoko have changed over the decades. Until 1992 school refusal - then called tokokyoshi, meaning resistance - was considered a type of mental illness. But in 1997 the terminology changed to the more neutral futoko, meaning non-attendance.&lt;/p&gt;&lt;p&gt;On 17 October, the government announced that absenteeism among elementary and junior high school students had hit a record high, with 164,528 children absent for 30 days or more during 2018, up from 144,031 in 2017.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Stephane Bureau du Colombier&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    A dog hangs out with pupils at Tamagawa Free School
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The &lt;a href=&quot;https://freeschoolnetwork.jp/information&quot; class=&quot;story-body__link-external&quot;&gt;free school movement&lt;/a&gt; started in Japan in the 1980s, in response to the growing number of futoko. They're alternative schools that operate on principles of freedom and individuality.&lt;/p&gt;&lt;p&gt;They're an accepted alternative to compulsory education, along with home-schooling, but won't give children a recognised qualification.&lt;/p&gt;&lt;p&gt;The number of students attending free or alternative schools instead of regular schools has shot up over the years, &lt;a href=&quot;https://mainichi.jp/english/articles/20181027/p2a/00m/0na/015000c&quot; class=&quot;story-body__link-external&quot;&gt;from 7,424 in 1992 to 20,346 in 2017&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Dropping out of school can have long-term consequences, and there is a high risk that young people can withdraw from society entirely and shut themselves away in their rooms - a phenomenon known as hikikomori.&lt;/p&gt;&lt;p&gt;More worrying still is the number of pupils who take their own lives. In 2018, the &lt;a href=&quot;https://www.bbc.co.uk/news/world-asia-46096626&quot; class=&quot;story-body__link&quot;&gt;number of school suicides was the highest in 30 years&lt;/a&gt;, with 332 cases.&lt;/p&gt;&lt;p&gt;In 2016 the rising number of student suicides led the Japanese government to pass a suicide prevention act with special recommendations for schools.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Stephane Bureau du Colombier&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Free schools set their own rules
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;So why are so many children avoiding school in Japan? &lt;/p&gt;&lt;p&gt;Family circumstances, personal issues with friends, and bullying are among the main causes, according to a survey by the ministry of education.&lt;/p&gt;&lt;p&gt;In general, the dropouts reported that they didn't get along with other students, or sometimes with the teachers.&lt;/p&gt;&lt;p&gt;That was also the case for Tomoe Morihashi. &lt;/p&gt;&lt;p&gt;&quot;I didn't feel comfortable with many people,&quot; says the 12-year-old. &quot;School life was painful.&quot;  &lt;/p&gt;&lt;p&gt;Tomoe suffered from selective mutism, which affected her whenever she was out in public. &lt;/p&gt;&lt;p&gt;&quot;I couldn't speak outside my home or away from my family,&quot; she says. &lt;/p&gt;&lt;p&gt;And she found it hard to obey the rigid set of rules that govern Japanese schools.&lt;/p&gt;&lt;p&gt;&quot;Tights must not be coloured, hair must not be dyed, the colour of hair elastics is fixed, and they must not be worn on the wrist,&quot; she says.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;Many schools in Japan control every aspect of their pupils' appearance, forcing pupils to dye their brown hair black, or not allowing pupils to wear tights or coats, even in cold weather. In some cases they even decide on the colour of pupils' underwear. &lt;/p&gt;&lt;p&gt;Strict school rules were introduced in the 1970s and 1980s in response to violence and bullying. They relaxed in the 1990s but have become more severe recently. &lt;/p&gt;&lt;p&gt;These regulations are known as &quot;black school rules&quot;, reflecting a popular term used to &lt;a href=&quot;https://www.tofugu.com/japan/japanese-black-companies/&quot; class=&quot;story-body__link-external&quot;&gt;describe companies that exploit their workers&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;Now Tomoe, like Yuta, attends Tamagawa Free School in Tokyo where students don't need to wear a uniform and are free to choose their own activities, according to a plan agreed between the school, parents and pupils. They are encouraged to follow their individual skills and interests. &lt;/p&gt;&lt;p&gt;There are rooms with computers for Japanese and maths classes and a library with books and mangas (Japanese comic books).&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Stephane Bureau du Colombier&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Students can choose what to activities they want to do in free schools
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;The atmosphere is very informal, like a big family. Students meet in common spaces to chat and play together.&lt;/p&gt;&lt;p&gt;&quot;The purpose of this school is to develop people's social skills,&quot; says Takashi Yoshikawa, the head of the school. &lt;/p&gt;&lt;p&gt;Whether it's through exercising, playing games or studying, the important thing is to learn not to panic when they're in a large group.&lt;/p&gt;&lt;p&gt;The school recently moved to a larger space, and about 10 children attend every day. &lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Stephane Bureau du Colombier&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    About 10 children attend Tamagawa Free School every day
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Mr Yoshikawa opened his first free school in 2010, in a three-storey apartment in Tokyo's residential neighbourhood of Fuchu.&lt;/p&gt;&lt;p&gt;&quot;I expected students over 15 years old, but actually those who came were only seven or eight years old,&quot; he says. &quot;Most were silent with selective mutism, and at school they didn't do anything.&quot;&lt;/p&gt;&lt;p&gt;Mr Yoshikawa believes that communication problems are at the root of most students' school refusal.  &lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Stephane Bureau du Colombier&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Takashi Yoshikawa first opened a free school in 2010
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;His own journey into education was unusual. He quit his job as a &quot;salary man&quot; in a Japanese company in his early 40s, when he decided he wasn't interested in climbing the career ladder. His father was a doctor, and like him, he wanted to serve his community, so he became a social worker and foster father.&lt;/p&gt;&lt;p&gt;The experience opened his eyes to the problems children face. He realised how many students suffered because they were poor, or victims of domestic abuse, and how much this affected their performance at school. &lt;/p&gt;&lt;p&gt;Part of the challenge pupils face is the big class sizes, says Prof Ryo Uchida, an education expert at Nagoya University. &lt;/p&gt;&lt;p&gt;&quot;In classrooms with about 40 students who have to spend a year together, many things can happen,&quot; he says. &lt;/p&gt;&lt;p&gt;Prof Uchida says comradeship is the key ingredient to surviving life in Japan because the population density is so high - if you don't get along and co-ordinate with others, you won't survive. This not only applies to schools, but also to public transport and other public spaces, all of which are overcrowded.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Getty Images&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Comradeship is key to surviving school
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;But for many students this need to conform is a problem. They don't feel comfortable in overcrowded classrooms where they have to do everything together with their classmates in a small space.&lt;/p&gt;&lt;p&gt;&quot;Feeling uncomfortable in such a situation is normal,&quot; says Prof Uchida.&lt;/p&gt;&lt;p&gt;What's more, in Japan, children stay in the same class from year to year, so if problems occur, going to school can become painful. &lt;/p&gt;&lt;p&gt;&quot;In that sense, the support provided for example by free schools is very meaningful,&quot; Prof Uchida says. &quot;In free schools, they care less about the group and they tend to value the thoughts and feelings of each single student.&quot; &lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;Stephane Bureau du Colombier&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Children playing in Tamagawa Free School
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;But although free schools are providing an alternative, the problems within the education system itself remain an issue. For Prof Uchida, not developing students' diversity is a violation of their human rights - and many agree.&lt;/p&gt;&lt;p&gt;Criticism of &quot;black school rules&quot; and the Japanese school environment is increasing nationwide. In a recent column the Tokyo Shimbun newspaper described them as a violation of human rights and an obstacle to student diversity. &lt;/p&gt;&lt;p&gt;In August, the campaign group &quot;Black kosoku o nakuso! Project&quot; [Let's get rid of black school rules!] submitted an online petition to the education ministry signed by more than 60,000 people, asking for an &lt;a href=&quot;https://www.staradvertiser.com/2019/12/05/news/schools-reassessing-rules-criticized-as-oppressive/&quot; class=&quot;story-body__link-external&quot;&gt;investigation into unreasonable school rules&lt;/a&gt;. Osaka Prefecture ordered all of its high schools to review their rules, with about 40% of schools making changes. &lt;/p&gt;&lt;p&gt;Prof Uchida says the education ministry now appears to accept absenteeism not as an anomaly, but a trend. He sees this as a tacit admission that futoko children are not the problem but that they are reacting to an education system that is failing to provide a welcoming environment.&lt;/p&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;You may also like: &lt;/h2&gt;&lt;figure class=&quot;media-with-caption&quot; readability=&quot;-24&quot;&gt;&lt;div class=&quot;player-with-placeholder&quot; readability=&quot;7&quot;&gt;
            &lt;img class=&quot;media-placeholder player-with-placeholder__image narrative-video-placeholder&quot; src=&quot;https://ichef.bbci.co.uk/images/ic/720x405/p06yhcvx.jpg&quot;/&gt;&lt;p&gt;Media playback is unsupported on your device&lt;/p&gt;
      
    &lt;/div&gt;    &lt;figcaption class=&quot;media-with-caption__caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Media caption&lt;/span&gt;The women trying to coax Japan’s reclusive young men out of their bedrooms.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;At least half a million young men in Japan are thought to have withdrawn from society, and refuse to leave their bedrooms. They're known as hikikomori.&lt;/p&gt;&lt;p&gt;Their families often don't know what to do, but one organisation is offering &quot;sisters for hire&quot; to help coax these young men out of their isolation.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/av/stories-46885707/rent-a-sister-coaxing-japan-s-hikikomori-out-of-their-rooms&quot; class=&quot;story-body__link&quot;&gt;Rent-a-sister: Coaxing Japan's hikikomori out of their rooms&lt;/a&gt;&lt;/p&gt;
            </description>
<pubDate>Mon, 23 Dec 2019 01:52:53 +0000</pubDate>
<dc:creator>lnguyen</dc:creator>
<og:title>Why so many Japanese children refuse to go to school</og:title>
<og:type>article</og:type>
<og:description>Can free schools solve the problem of &quot;futoko&quot;, Japan's phenomenon of refusing to attend school?</og:description>
<og:url>https://www.bbc.com/news/world-asia-50693777</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/0722/production/_110162810_ea9e89fa-1e45-4129-987a-cefaa6a2adb9.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.co.uk/news/world-asia-50693777</dc:identifier>
</item>
<item>
<title>Lilith: x86-64 OS written in Crystal</title>
<link>https://github.com/ffwff/lilith</link>
<guid isPermaLink="true" >https://github.com/ffwff/lilith</guid>
<description>&lt;p align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ffwff/lilith/blob/master/img/screenshot23.png&quot;&gt;&lt;img src=&quot;https://github.com/ffwff/lilith/raw/master/img/screenshot23.png&quot; alt=&quot;screenshot of lilith&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;A POSIX-like x86-64 kernel and userspace written in Crystal.&lt;/p&gt;
&lt;h2&gt;Building&lt;/h2&gt;
&lt;p&gt;lilith needs to be compiled with a patched crystal compiler, to build it, run the command:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make toolchain/crystal/.build/crystal
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You will also need an appropriate &lt;code&gt;x86_64-elf&lt;/code&gt; binutils toolchain in order to link and assemble the kernel, as well as &lt;code&gt;i686-elf&lt;/code&gt; binutils to build the bootstrap code.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make build/kernel
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Building the userspace&lt;/h3&gt;
&lt;p&gt;A Makefile is provided for building the userspace toolchain, to build it, go to the &lt;code&gt;userspace/toolchain&lt;/code&gt; directory and use &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once built, a patched version of GCC/Binutils will be installed in &lt;code&gt;userspace/toolchain/tools/bin&lt;/code&gt;, simply set your PATH variable to that location and you can use the toolchain (with the &lt;code&gt;i386-elf-lilith&lt;/code&gt; prefix)&lt;/p&gt;
&lt;p&gt;To compile C programs for the system, you'll also need to build the libc. In the &lt;code&gt;userspace/toolchain&lt;/code&gt; directory, do:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make build_libc
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Running&lt;/h2&gt;
&lt;p&gt;A CPU with x64 support is required to run the OS. The Makefile provides a script which will run QEMU on the kernel:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make run
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To run with storage, an MBR-formatted hard drive image with a FAT16 partition must be provided in the running directory with the name &lt;code&gt;drive.img&lt;/code&gt;. The kernel will automatically boot the &lt;code&gt;main.bin&lt;/code&gt; executable on the hard drive, or panic if it can't be loaded.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;make run_img
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Lilith is licensed under MIT. See LICENSE for more details.&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 00:47:19 +0000</pubDate>
<dc:creator>hootbootscoot</dc:creator>
<og:image>https://avatars1.githubusercontent.com/u/30137470?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>ffwff/lilith</og:title>
<og:url>https://github.com/ffwff/lilith</og:url>
<og:description>x86-64 os made in crystal. Contribute to ffwff/lilith development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/ffwff/lilith</dc:identifier>
</item>
<item>
<title>People who tend to be optimistic are likelier to live to 85 or more: study</title>
<link>https://www.npr.org/sections/health-shots/2019/09/01/755185560/optimists-for-the-win-finding-the-bright-side-might-help-you-live-longer</link>
<guid isPermaLink="true" >https://www.npr.org/sections/health-shots/2019/09/01/755185560/optimists-for-the-win-finding-the-bright-side-might-help-you-live-longer</guid>
<description>&lt;div id=&quot;res755447597&quot; class=&quot;bucketwrap image large&quot;&gt;
&lt;div class=&quot;imagewrap&quot; data-crop-type=&quot;&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/08/29/gettyimages-1043837196-e4b9e14505dd3faf82ed2f99e88f43225fab315f-s1100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/08/29/gettyimages-1043837196-e4b9e14505dd3faf82ed2f99e88f43225fab315f-s1100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;credit-caption&quot;&gt;
&lt;div class=&quot;caption-wrap&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;caption&quot; aria-label=&quot;Image caption&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;Even if optimism doesn't come naturally, it can be taught, researchers say. Therapists can help you practice reframing your expectations, to cultivate a sunnier outlook. &lt;strong class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Roy Scott/Ikon Images via Getty Images&lt;/strong&gt; &lt;strong class=&quot;hide-caption&quot;&gt;hide caption&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;strong class=&quot;toggle-caption&quot;&gt;toggle caption&lt;/strong&gt;&lt;/div&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Roy Scott/Ikon Images via Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;enlarge_measure&quot;&gt;
&lt;div class=&quot;img_wrap&quot;&gt;&lt;img data-original=&quot;https://media.npr.org/assets/img/2019/08/29/gettyimages-1043837196-e4b9e14505dd3faf82ed2f99e88f43225fab315f-s1200.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enlarge_html&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;image_data&quot; readability=&quot;11&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;Even if optimism doesn't come naturally, it can be taught, researchers say. Therapists can help you practice reframing your expectations, to cultivate a sunnier outlook.&lt;/p&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;Roy Scott/Ikon Images via Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Good news for the cheery: A Boston study published this month suggests people who tend to be optimistic are likelier than others to live to be 85 years old or more.&lt;/p&gt;
&lt;p&gt;That finding was independent of other factors thought to influence life's length — such as &quot;socioeconomic status, health conditions, depression, social integration, and health behaviors,&quot; the researchers from Boston University School of Medicine and the Harvard T.H. Chan School of Public Health say. Their work &lt;a href=&quot;https://www.pnas.org/content/early/2019/08/20/1900712116.short?rss=1&quot;&gt;appears in a recent issue&lt;/a&gt; of the science journal &lt;em&gt;PNAS&lt;/em&gt;.&lt;/p&gt;
&lt;div id=&quot;res756050308&quot; class=&quot;bucketwrap listtext&quot; readability=&quot;27.737068965517&quot;&gt;
&lt;div class=&quot;bucket&quot; readability=&quot;9.2456896551724&quot;&gt;
&lt;p&gt;&lt;strong&gt;Explore Life Kit&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This story comes from Life Kit, NPR's family of podcasts for making life better — everything from exercise to raising kids to making friends. For more, &lt;a href=&quot;https://www.npr.org/lifekit#updates&quot;&gt;sign up for the newsletter&lt;/a&gt; and follow &lt;a href=&quot;https://twitter.com/nprlifekit&quot;&gt;@NPRLifeKit&lt;/a&gt; on Twitter.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;res755221522&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage504709736&quot; href=&quot;https://www.npr.org/sections/health-shots/2016/12/07/504709736/a-brighter-outlook-could-translate-to-a-longer-life&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/sections\/health-shots\/2016\/12\/07\/504709736\/a-brighter-outlook-could-translate-to-a-longer-life&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2016/12/07/optimistic_sq-79d618a3bed17979e9dbe370939dd4579c0f876d-s100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2016/12/07/optimistic_sq-79d618a3bed17979e9dbe370939dd4579c0f876d-s100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;A Brighter Outlook Could Translate To A Longer Life&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;res755223374&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage744267015&quot; href=&quot;https://www.npr.org/sections/health-shots/2019/07/26/744267015/want-to-feel-happier-today-try-talking-to-a-stranger&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/sections\/health-shots\/2019\/07\/26\/744267015\/want-to-feel-happier-today-try-talking-to-a-stranger&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/07/25/img_9238_sq-17d951c8d362aadedd0da9ce56a337613ff1d51d-s100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/07/25/img_9238_sq-17d951c8d362aadedd0da9ce56a337613ff1d51d-s100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;Want To Feel Happier Today? Try Talking To A Stranger&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&quot;We wanted to consider, in the current issue, benefits of psychological resources like optimism as possible new targets for promoting healthy aging,&quot; says &lt;a href=&quot;https://www.bumc.bu.edu/busm/profile/lewina-lee/&quot;&gt;Lewina Lee&lt;/a&gt;, who headed the study. She's a clinical research psychologist at Boston University. &quot;The more we know about ways to promote healthy aging the better.&quot;&lt;/p&gt;
&lt;p&gt;Researchers already knew from previous work that optimistic individuals tend to have a &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5209342/&quot;&gt;reduced risk&lt;/a&gt; of depression, heart disease and other chronic diseases. But might optimism also be linked to exceptional longevity? Lee looked at medical records from two long term research studies — one involving female nurses and the other involving men, mostly veterans.&lt;/p&gt;
&lt;p&gt;The study included 69,744 women and 1,429 men. Both groups completed survey measures to assess their level of optimism, as well as their overall health and health habits such as diet, smoking and alcohol use. In the survey, study participants were asked if they agreed with statements such as &quot;in uncertain times I usually expect the best&quot; or &quot;I usually expect to succeed in things that I do.&quot;&lt;/p&gt;
&lt;p&gt;Health outcomes from women in the study were tracked for 10 years, while the men's health was followed for 30 years. Researchers found that the most optimistic men and women demonstrated, on average, an 11-15% longer lifespan, and had far greater odds of reaching 85 years old, compared to the least optimistic group.&lt;/p&gt;
&lt;p&gt;Now, researchers say they can't tell from this study &lt;em&gt;how&lt;/em&gt; optimism might affect longevity. Optimistic people might be more motivated to try to maintain good health — such as maintaining a decent diet, engaging in regular exercise and not smoking.&lt;/p&gt;
&lt;aside id=&quot;ad-backstage-wrap&quot; aria-label=&quot;advertisement&quot;&gt;
&lt;/aside&gt;&lt;div id=&quot;res755223707&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage724136568&quot; href=&quot;https://www.npr.org/sections/health-shots/2019/05/20/724136568/how-the-brain-shapes-pain-and-links-ouch-with-emotion&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/sections\/health-shots\/2019\/05\/20\/724136568\/how-the-brain-shapes-pain-and-links-ouch-with-emotion&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/05/18/brainpainsrgb_sq-cdec6bc3f025fa57556d99678b67dc313cc15d44-s100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/05/18/brainpainsrgb_sq-cdec6bc3f025fa57556d99678b67dc313cc15d44-s100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;How The Brain Shapes Pain And Links Ouch With Emotion &quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;res755224059&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage727682322&quot; href=&quot;https://www.npr.org/sections/health-shots/2019/06/10/727682322/can-you-reshape-your-brains-response-to-pain&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/sections\/health-shots\/2019\/06\/10\/727682322\/can-you-reshape-your-brains-response-to-pain&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/06/03/trauma-pain-7_sq-3e67114ee88b7ec7fe6d40de4cc27c91f06c7936-s100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/06/03/trauma-pain-7_sq-3e67114ee88b7ec7fe6d40de4cc27c91f06c7936-s100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;Can You Reshape Your Brain's Response To Pain?&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;They may also be better at regulating stress, Lee says.The burden of unrelieved stress is well known to have &lt;a href=&quot;https://www.apa.org/helpcenter/stress-body&quot;&gt;negative effects&lt;/a&gt; on health, including an increase in heart disease, liver disease and gastrointestinal problems.&lt;/p&gt;
&lt;p&gt;Clinical health psychologist &lt;a href=&quot;https://physiciandirectory.brighamandwomens.org/details/13805/natalie-dattilo-psychiatry-boston&quot;&gt;Natalie Dattilo&lt;/a&gt;, with Brigham and Women's Hospital in Boston, says even if it doesn't come naturally, optimism can be taught. In her practice she works mostly with adults who struggle with depression and anxiety — &quot;a lot of folks who worry,&quot; she says. Many are pessimistic and &quot;tend to see things through a half empty glass and typically expect negative outcomes.&quot;&lt;/p&gt;
&lt;p&gt;In treatment, Dattilo works to expand their world view, so their set of assumptions about the world and themselves are more uplifting and empowering.&lt;/p&gt;
&lt;p&gt;&quot;We examine their thinking under a psychological microscope,&quot; Dattilo says, discussing why they anticipate a particular negative outcome. &quot;If we can look at that together, we can begin to uncover systems of beliefs and assumptions people are making about themselves in their lives and we can begin to change those.&quot;&lt;/p&gt;
&lt;p&gt;Dattilo challenges patients to pay attention when a negative outlook kicks in, and consciously shift it. &quot;Just try it on, try on a different thought, attitude or mindset and play that out and just see what happens,&quot; she advises.&lt;/p&gt;
&lt;p&gt;Also, she emphasizes, optimism isn't simply the absence of depression or sadness or stress.&lt;/p&gt;
&lt;p&gt;&quot;People who think in optimistic ways are still prone to stress,&quot; she says. &quot;They are functioning in our society, meeting demands, prone to burn out. And it's not like negative events won't happen.&quot;&lt;/p&gt;
&lt;p&gt;But the way they cope with problems makes a difference, she says. Difficulties don't tend to cause them distress for extended periods of time.&lt;/p&gt;
&lt;p&gt;&quot;Resilience is our ability to bounce back, to recover,&quot; she says. &quot;And what this study shows is that optimism actually plays a very big role in our ability to bounce — even if we experience setbacks.&quot;&lt;/p&gt;
&lt;p&gt;So, are gloomy curmudgeons doomed to short, brutish lives, even if they are content to be pessimistic? Some people find eternal optimists insufferable.&lt;/p&gt;
&lt;div id=&quot;res755223444&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage719780061&quot; href=&quot;https://www.npr.org/sections/health-shots/2019/05/05/719780061/from-gloom-to-gratitude-8-skills-to-cultivate-joy&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/sections\/health-shots\/2019\/05\/05\/719780061\/from-gloom-to-gratitude-8-skills-to-cultivate-joy&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/05/03/caretaker-self-care_sq-166b1758cb3021b9b6e3d29da44b58055f93efc5-s100-c15.jpeg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/05/03/caretaker-self-care_sq-166b1758cb3021b9b6e3d29da44b58055f93efc5-s100.jpeg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;From Gloom To Gratitude: 8 Skills To Cultivate Joy&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lewina Lee says she treats pessimistic patients &quot;all the time.&quot; While some seem satisfied with their outlook, others are more open to lightening up, once they know how, in order to achieve goals that are important to them.&lt;/p&gt;
&lt;p&gt;&quot;I would try to challenge their negativity and shake it loose,&quot; she says, and get rid of some of the patients' more rigidly held beliefs for their own benefit.&lt;/p&gt;
&lt;p&gt;Pessimists who try this will likely end up happier, she suggests. And they might even extend their lives.&lt;/p&gt;
</description>
<pubDate>Sun, 22 Dec 2019 22:02:46 +0000</pubDate>
<dc:creator>dhimes</dc:creator>
<og:title>Optimists For The Win: Finding The Bright Side Might Help You Live Longer</og:title>
<og:url>https://www.npr.org/sections/health-shots/2019/09/01/755185560/optimists-for-the-win-finding-the-bright-side-might-help-you-live-longer</og:url>
<og:type>article</og:type>
<og:description>Pessimists may suspect this finding, but researchers who tracked the health outcomes of thousands of adults across many years found optimists were much more likely to reach 85. Optimism is teachable.</og:description>
<og:image>https://media.npr.org/assets/img/2019/08/29/gettyimages-1043837196_wide-0766b4fe539cc10437fadb017ce29dc488191d69.jpg?s=1400</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.npr.org/sections/health-shots/2019/09/01/755185560/optimists-for-the-win-finding-the-bright-side-might-help-you-live-longer</dc:identifier>
</item>
</channel>
</rss>