<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>French cities trying to ban public adverts</title>
<link>https://www.theguardian.com/cities/2019/dec/23/advertising-breaks-your-spirit-the-french-cities-trying-to-ban-public-adverts</link>
<guid isPermaLink="true" >https://www.theguardian.com/cities/2019/dec/23/advertising-breaks-your-spirit-the-french-cities-trying-to-ban-public-adverts</guid>
<description>&lt;p&gt;&lt;span class=&quot;drop-cap&quot;&gt;&lt;span class=&quot;drop-cap__inner&quot;&gt;O&lt;/span&gt;&lt;/span&gt;n a pavement in the northern French city of Lille, an advertising panel rotated pictures of bargain Aldi prawns and blended scotch whisky, competing for the average three-second attention span of pedestrians. Suddenly a 31-year-old hospital nurse darted across the street, unrolled a mass of white paper and began to cover the ads.&lt;/p&gt;
&lt;p&gt;“I’ve been treating sick people in emergency rooms for 11 years, but this is about treating a sick society,” he said, as he reached up with other protesters to tape the paper in place. “When you walk down the street, how can you feel happy if you’re constantly being reminded of what you don’t have? &lt;a href=&quot;https://www.theguardian.com/media/advertising&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;Advertising&lt;/a&gt; breaks your spirit, confuses you about what you really need and distracts you from real problems, like the climate emergency.”&lt;/p&gt;
&lt;p&gt;Passersby began to gather, some baffled, some nodding. Police officers arrived to move the demonstrators on, but they were already on the move, hurrying down into the metro to cover their key target: digital video screens advertising trainers.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Activists cover street advertisements at a demonstration in Lille.&quot; src=&quot;https://i.guim.co.uk/img/media/dd06e4483a498cfc8689e3d2dbc9557cffa26330/0_0_3877_2585/master/3877.jpg?width=300&amp;amp;quality=85&amp;amp;auto=format&amp;amp;fit=max&amp;amp;s=3b807a6395ec6a24086ed6e8b990a3e3&quot;/&gt;&lt;/div&gt;

Activists cover street advertisements at a demonstration in Lille. Photograph: Quentin Saison/The Guardian
&lt;p&gt;For decades &lt;a href=&quot;https://www.theguardian.com/world/france&quot; data-link-name=&quot;auto-linked-tag&quot; data-component=&quot;auto-linked-tag&quot; class=&quot;u-underline&quot;&gt;France&lt;/a&gt; has had one of the most well-organised anti-advertising movements in the world, ranging from guerrilla protests with spray-cans to high-profile court cases. But now the boom in what is artfully called “digital-out-of-home advertising” – eye-catching video screens dotted across urban areas, from train platforms to shopping centres – has sparked a new spate of French protests, civil disobedience and petitions.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;I’ve never seen so many people annoyed about advertising&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Thomas Bourgenot, campaigner&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;High tech video billboards are multiplying in city spaces across the world, woven into the fabric of everyday life, from ribbon videos down escalators on the London underground, to French metro corridors, New York taxis, bus-shelters, newspaper kiosks, and – increasingly – broadcast from shop windows onto the street. They are becoming more sophisticated and interactive, with the potential to collect data from passersby; increasingly bright and inescapable – impossible to click off or block like you can online. But in France, there is fresh debate on how urban planners and local councils should limit them in the public space for the sake of our overloaded eyes and brains.&lt;/p&gt;
&lt;p&gt;The trend to squeeze every bit of city downtime into an opportunity to place people in front of screen has become a political battle on the left. François Ruffin of the French left party, &lt;em&gt;La France Insoumise&lt;/em&gt;, recently tabled a &lt;a href=&quot;http://www.assemblee-nationale.fr/15/propositions/pion2391.asp&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;French parliamentary amendment&lt;/a&gt; to ban video ads above urinals and toilets. It was dubbed the “Pee in Peace” motion. Ruffin said he was horrified when standing at a Paris café urinal to be visually “assaulted” by a video advertising Uber, a bank, and the book and tech store Fnac. “Who doesn’t enjoy that rare moment of calm: having a piss?” he wrote in the amendment, warning that since 2015, over 2,000 of the screens had “colonised” 1,200 urinals in 25 French towns.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Activists argue that advertising ‘distracts people from real problems’.&quot; src=&quot;https://i.guim.co.uk/img/media/dff4537276c66367e901d4add9ca8d55addaa59a/0_262_4500_2700/master/4500.jpg?width=300&amp;amp;quality=85&amp;amp;auto=format&amp;amp;fit=max&amp;amp;s=ae1ac7004e8686208109b93564d0fb10&quot;/&gt;&lt;/div&gt;

Activists argue that advertising ‘distracts people from real problems’. Photograph: Quentin Saison/The Guardian
&lt;p&gt;Lille, a former centre of northern French industry and now a hub for artists, designers and students, has become the focus of the latest battle over screens in the public space. Like many French cities, the Socialist city hall has sought limits on advertising video screens, meaning no street furniture on pavements carries commercial video ads. But in France those rules don’t cover train stations or public transport, where video advertising is flourishing – particularly 10-second clips for Netflix, Amazon and film releases. When the local transport body for the greater Lille area recently fixed a new contract that could boost the number of video screens to around 160 – including in bus shelters – the city hall was furious, but largely powerless because the deal was legitimate.&lt;/p&gt;
&lt;p&gt;“This type of screen in the public space would be invasive and intrusive, consume too much energy, distract motorists and get children even more hooked on videos than they are already,” said Jacques Richir, a Socialist deputy mayor. “It would mean advertising messages [infest] the urban landscape, when we want to limit them.”&lt;/p&gt;
&lt;p&gt;Local representatives of the greater Lille area, the Métropole Européene de Lille, met this month to debate new local advertising rules, which protesters hope will take a tougher line on screens. Lyon, France’s third biggest city, also moved this month to fund a new electric bike-scheme itself rather than strike a deal with outdoor advertisers which might have led to introducing video-screen ads in the city.&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;Mediatransports runs 1,250 video screens in French rail stations, like these in Lille, as well as 700 screens in the Paris metro.&quot; src=&quot;https://i.guim.co.uk/img/media/47af2a11107eea149bf2213b0b067bffac8fae0f/0_104_4272_2563/master/4272.jpg?width=300&amp;amp;quality=85&amp;amp;auto=format&amp;amp;fit=max&amp;amp;s=09a16ab4075552d7428c028822762020&quot;/&gt;&lt;/div&gt;

Company Mediatransports runs 1,250 video screens in French rail stations, like these in Lille, as well as 700 screens in the Paris metro. Photograph: Quentin Saison/The Guardian
&lt;p&gt;But there are other loopholes on French pavements. In Lille, as in Paris, shops are considered private spaces, and not subject to local advertising rules. So all kinds of shopfronts – from chemists to hairdressers and tech shops to trainer emporiums – can put up screens just behind their windows, beaming digital video into the street.&lt;/p&gt;
&lt;p&gt;“It’s crazy,” said Fabien Delecroix an IT teacher from the Lille branch of anti-ad campaigners &lt;em&gt;&lt;a href=&quot;https://antipub.org/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Résistance à l’Agression Publicitaire&lt;/a&gt;&lt;/em&gt;. “If someone stood naked at their window right on the street deliberately showing their body, you wouldn’t say: ‘Oh that’s fine, they’re technically not exposing themselves because they’re in their own home.’”&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;We’re told children shouldn’t be exposed to screens before age three, but they’re craning their necks at the screens all around them in public&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Marion, protestor&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Meanwhile, the courts in Lille are cracking down on protesters. At a hearing last month, flanked by supporters, Alessandro di Giussepe, a 42-year-old actor, who once stood for local election dressed as a joke “pope” of consumerism, was fined €900 (£758) for defacing adverts in the city with black pen as an act of civil disobedience. A father in a passing car had called the police, compl defacing ads was setting a bad example to children. Di Giussepe said adverts destroyed “public space, which is our shared space”.&lt;/p&gt;
&lt;p&gt;“It won’t stop us,” said Marion, from the Lille anti-advertising protest collective &lt;em&gt;&lt;a href=&quot;https://www.deboulonneurs.org/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Les Déboulonneurs&lt;/a&gt;&lt;/em&gt;. “We’re told children shouldn’t be exposed to screens before age three, but in pushchairs they’re craning their necks at the screens all around them in public.”&lt;/p&gt;
&lt;p&gt;The French firm Mediatransports, which runs 1,250 video screens in French rail stations, as well as 700 on the Paris metro – including 150 in Paris’s Gare du Nord alone – said digital screens were excellent at reaching commuters. “They generate more revenue than paper ads, because they can quickly adapt to advertisers’ needs – changing a message for the exact time of day or even the weather.”&lt;/p&gt;

&lt;div class=&quot;u-responsive-ratio&quot;&gt;&lt;img class=&quot;gu-image&quot; itemprop=&quot;contentUrl&quot; alt=&quot;A ‘free expression’ sign posted in a Lille bus stop by protestors.&quot; src=&quot;https://i.guim.co.uk/img/media/11261f5e8530093df758ef27e13871aefb077424/0_286_4293_2576/master/4293.jpg?width=300&amp;amp;quality=85&amp;amp;auto=format&amp;amp;fit=max&amp;amp;s=bfae35e62638c44adb3e84edb44f6da6&quot;/&gt;&lt;/div&gt;

A ‘free expression’ sign posted in a Lille bus stop by protestors. Photograph: Quentin Saison/The Guardian
&lt;p&gt;With French local elections in March, Grenoble’s Green mayor, Eric Piolle, is running for re-election four years after styling his city at the foot of the French Alps as the first European urban centre to ban commercial street advertising. Piolle replaced more than 300 paper advertising signs with trees or community noticeboards, although bus and tram stops still carry adverts, which the city said it had limited. He said it was no surprise that ad screens and their mental and environmental impact was the next frontier in what politicians should ban. “Public space is a meeting space so lowering the aggression of advertising is positive for everyone,” he said.&lt;/p&gt;
&lt;aside class=&quot;element element-pullquote element--supporting&quot;&gt;&lt;blockquote&gt;
&lt;p class=&quot;pullquote-paragraph&quot;&gt;There was a criticism that advertising was anti-democratic, and a very strong idea in France that public space belongs to everyone&lt;/p&gt;
&lt;footer&gt;&lt;cite class=&quot;pullquote-cite&quot;&gt;Prof Caroline Marti&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Paris is also soul-searching about advertising. Early last year, the capital’s more than 1,600 advertising signs – large grey paper advertising panels on pavements – disappeared for around 18 months during a protracted process to find a new contract. No one noticed their absence, but when they were gradually put back this autumn — the same number in virtually the same spots — many residents complained of an advertising onslaught.&lt;/p&gt;
&lt;p&gt;“I’ve never seen so many people annoyed about advertising. People are coming up to me saying this sign is taking up half the pavement,” said the long-time anti-advertising campaigner Thomas Bourgenot, of &lt;em&gt;Résistance à l’Agression Publicitaire&lt;/em&gt; in Paris. A &lt;a href=&quot;https://www.greenpeace.fr/non-aux-ecrans-videos-publicitaires/&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;petition&lt;/a&gt; by Greenpeace Paris and other groups has called on the city to ensure there can be no future arrival of commercial video ad screens, which are currently banned on street furniture.&lt;/p&gt;
&lt;p&gt;The city hall said its policy was not to develop any more advertising in the city, and to fight the illegal ads so often plastered or beamed across buildings. A spokeswoman said the size of ads had been reduced and a portion of street furniture given over to city messaging.&lt;/p&gt;
&lt;aside class=&quot;element element-rich-link element--thumbnail element-rich-link--not-upgraded&quot; data-component=&quot;rich-link&quot; data-link-name=&quot;rich-link-1 | 1&quot;&gt;&lt;div class=&quot;rich-link&quot;&gt;
&lt;div class=&quot;rich-link__container&quot;&gt;
&lt;div class=&quot;rich-link__header&quot;&gt;
&lt;h2 class=&quot;rich-link__title&quot;&gt;Tokyo without ads: Japan's capital stripped bare – in pictures&lt;/h2&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;&lt;p&gt;The row in French cities is likely to continue. Historically, advertising took off later in France than in the UK and US, with French newspapers in the 1930s calling it a “school of lies”. Today, however, France is home to some of the most influential advertising firms and lobbies in the world.&lt;/p&gt;
&lt;p&gt;“For a very long time, French intellectuals associated advertising with something destructive to culture, going back to Voltaire and beyond,” said Caroline Marti, professor of the science of information and communication at the Sorbonne. “There was a criticism that advertising was anti-democratic, and a very strong idea in France that public space belongs to everyone, that we pay for it with our taxes, which are relatively high, and that the public space is where we go to demonstrate.”&lt;/p&gt;
&lt;p&gt;In Lille, Martine Cosson, 74, a retired paediatrician among the anti-ad protesters, said: “Digital video screens in public spaces have an effect on our brains, whether we want them to or not, so planners and politicians should answer to that.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Follow Guardian Cities on &lt;a href=&quot;https://twitter.com/guardiancities&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/guardiancities&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Facebook&lt;/a&gt; and &lt;a href=&quot;https://www.instagram.com/guardiancities/?hl=en&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;Instagram&lt;/a&gt; to join the discussion, catch up on &lt;a href=&quot;https://www.theguardian.com/cities&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;our best stories&lt;/a&gt; or sign up for our &lt;a href=&quot;https://www.theguardian.com/cities/2018/may/03/sign-up-for-the-cityscape-the-best-of-guardian-cities-every-week&quot; data-link-name=&quot;in body link&quot; class=&quot;u-underline&quot;&gt;weekly newsletter&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;


</description>
<pubDate>Tue, 24 Dec 2019 17:03:18 +0000</pubDate>
<dc:creator>Vinnl</dc:creator>
<og:url>http://www.theguardian.com/cities/2019/dec/23/advertising-breaks-your-spirit-the-french-cities-trying-to-ban-public-adverts</og:url>
<og:description>Activists in Lille recently demonstrated against advertising, while Grenoble has replaced hundreds of adverts with trees and noticeboards. Could cities remove ads altogether?</og:description>
<og:image>https://i.guim.co.uk/img/media/d5d142b7bf5acc48bd1d639710b2c38d3e99078f/0_147_4421_2652/master/4421.jpg?width=1200&amp;height=630&amp;quality=85&amp;auto=format&amp;fit=crop&amp;overlay-align=bottom%2Cleft&amp;overlay-width=100p&amp;overlay-base64=L2ltZy9zdGF0aWMvb3ZlcmxheXMvdGctZGVmYXVsdC5wbmc&amp;enable=upscale&amp;s=613be2bb604eda655036e5a888ec5f04</og:image>
<og:type>article</og:type>
<og:title>'Advertising breaks your spirit': the French cities trying to ban public adverts</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theguardian.com/cities/2019/dec/23/advertising-breaks-your-spirit-the-french-cities-trying-to-ban-public-adverts</dc:identifier>
</item>
<item>
<title>A Twitter app bug was used to match 17M phone numbers to user accounts</title>
<link>https://techcrunch.com/2019/12/24/twitter-android-bug-phone-numbers/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/12/24/twitter-android-bug-phone-numbers/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;A security researcher said he has matched 17 million phone numbers to &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/twitter&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;twitter&quot;&gt;Twitter&lt;/a&gt; user accounts by exploiting a flaw in Twitter’s Android app.&lt;/p&gt;
&lt;p&gt;Ibrahim Balic found that it was possible to upload entire lists of generated phone numbers through Twitter’s contacts upload feature. “If you upload your phone number, it fetches user data in return,” he told TechCrunch.&lt;/p&gt;
&lt;p&gt;He said Twitter’s contact upload feature doesn’t accept lists of phone numbers in sequential format — likely as a way to prevent this kind of matching. Instead, he generated more than two billion phone numbers, one after the other, then randomized the numbers, and uploaded them to Twitter through the Android app. (Balic said the bug did not exist in the web-based upload feature.)&lt;/p&gt;
&lt;p&gt;Over a two-month period, Balic said he matched records from users in Israel, Turkey, Iran, Greece, Armenia, France and Germany, he said, but stopped after Twitter blocked the effort on December 20.&lt;/p&gt;
&lt;p&gt;Balic provided TechCrunch with a sample of the phone numbers he matched. Using the site’s password reset feature, we verified his findings by comparing a random selection of usernames with the phone numbers that were provided.&lt;/p&gt;
&lt;p&gt;In one case, TechCrunch was able to identify a senior Israeli politician using their matched phone number.&lt;/p&gt;
&lt;p&gt;While he did not alert Twitter to the vulnerability, he took many of the phone numbers of high-profile Twitter users — including politicians and officials — to a WhatsApp group in an effort to warn users directly.&lt;/p&gt;
&lt;p&gt;It’s not believed Balic’s efforts are related to a Twitter blog post published &lt;a href=&quot;https://privacy.twitter.com/en/blog&quot;&gt;this week&lt;/a&gt;, which confirmed a bug could have allowed “a bad actor to see nonpublic account information or to control your account,” such as tweets, direct messages and location information.&lt;/p&gt;
&lt;p&gt;A Twitter spokesperson told TechCrunch the company was working to “ensure this bug cannot be exploited again.”&lt;/p&gt;
&lt;p&gt;“Upon learning of this bug, we suspended the accounts used to inappropriately access people’s personal information. Protecting the privacy and safety of the people who use Twitter is our number one priority and we remain focused on rapidly stopping spam and abuse originating from use of Twitter’s APIs,” the spokesperson said.&lt;/p&gt;
&lt;p&gt;It’s the latest security lapse involving Twitter data in the past year. In May, Twitter admitted &lt;a href=&quot;https://techcrunch.com/2019/05/13/twitter-bug-disclosed-some-users-location-data-to-an-unnamed-partner/&quot;&gt;it gave account location data&lt;/a&gt; to one of its partners, even if the user had opted-out of having their data shared. In August, the company said it &lt;a href=&quot;https://techcrunch.com/2019/08/07/twitter-fesses-up-to-more-adtech-leaks/&quot;&gt;inadvertently gave&lt;/a&gt; its ad partners more data than it should have. And just last month, Twitter confirmed &lt;a href=&quot;https://techcrunch.com/2019/10/08/twitter-admits-it-used-two-factor-phone-numbers-and-emails-for-targeted-advertising/&quot;&gt;it used phone numbers&lt;/a&gt; provided by users for two-factor authentication for serving targeted ads.&lt;/p&gt;
&lt;p&gt;Balic is previously known for identifying &lt;a href=&quot;https://techcrunch.com/2013/07/21/apple-confirms-that-the-dev-center-has-potentially-been-breached-by-hackers/?hubRefSrc=permalink#lf_comment=87472293&quot;&gt;a security flaw breach&lt;/a&gt; that affected Apple’s developer center in 2013.&lt;/p&gt;

</description>
<pubDate>Tue, 24 Dec 2019 16:50:33 +0000</pubDate>
<dc:creator>kkm</dc:creator>
<og:title>Twitter bug used to match millions of user phone numbers – TechCrunch</og:title>
<og:description>The researcher matched 17 million phone numbers using the Android app's contact upload feature.</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2019/12/GettyImages-621183344.jpg?w=612</og:image>
<og:url>http://social.techcrunch.com/2019/12/24/twitter-android-bug-phone-numbers/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/12/24/twitter-android-bug-phone-numbers/</dc:identifier>
</item>
<item>
<title>Minimalism – An undervalued development skill</title>
<link>https://volument.com/blog/minimalism-the-most-undervalued-development-skill</link>
<guid isPermaLink="true" >https://volument.com/blog/minimalism-the-most-undervalued-development-skill</guid>
<description>&lt;div readability=&quot;69.424167694205&quot;&gt;
&lt;p&gt;Above you see some popular SAAS products. This website uses alternate versions of those products, that we built from scratch in a minimalistic fashion. That is: we only built the core functionality, in a way we wanted, and left out all the rest — the “crap”. The resulting product is faster, has fewer issues, is easier to use, and gives us more control. Seriously.&lt;/p&gt;
&lt;blockquote class=&quot;pull&quot; readability=&quot;5&quot;&gt;
&lt;p&gt;&lt;q&gt;Just get rid of the crappy stuff and focus on the good stuff.&lt;/q&gt;&lt;/p&gt;
&lt;div class=&quot;ui&quot;&gt;
&lt;p class=&quot;author&quot;&gt;Steve Jobs&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's skim the details:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Disqus&lt;/strong&gt; is an embeddable commenting software. The one you can see &lt;a href=&quot;https://volument.com/blog/minimalism-the-most-undervalued-development-skill#minimalist-commenting&quot;&gt;and try&lt;/a&gt; on this page is significantly faster, has no annoying clutter, and is easier to use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimizely&lt;/strong&gt; is a popular A/B testing software. It is 200 times bigger than &lt;a href=&quot;https://volument.com/v1/volument.js&quot;&gt;volument.js&lt;/a&gt; and &lt;a href=&quot;https://volument.com/learn/problems-in-traditional-ab-testing&quot;&gt;has tons of issues&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sentry&lt;/strong&gt; is an error tracking tool similar to &lt;strong&gt;Raygun&lt;/strong&gt;. They are both 200-300 times bigger than the code on this site:&lt;/li&gt;
&lt;/ul&gt;&lt;pre&gt;
window&lt;strong class=&quot;char&quot;&gt;.&lt;/strong&gt;&lt;strong class=&quot;assign&quot;&gt;onerror =&lt;/strong&gt; &lt;strong class=&quot;keywd&quot;&gt;function&lt;/strong&gt;&lt;strong class=&quot;char&quot;&gt;(&lt;/strong&gt;msg&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt; _path&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt; line&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt; column&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt; error&lt;strong class=&quot;char&quot;&gt;)&lt;/strong&gt; &lt;strong class=&quot;char&quot;&gt;{&lt;/strong&gt;
  fetch&lt;strong class=&quot;char&quot;&gt;(&lt;/strong&gt;&lt;strong class=&quot;str&quot;&gt;'/errors'&lt;/strong&gt;&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt; &lt;strong class=&quot;char&quot;&gt;{&lt;/strong&gt;
    &lt;strong class=&quot;assign&quot;&gt;error:&lt;/strong&gt; error &lt;strong class=&quot;char&quot;&gt;?&lt;/strong&gt; error&lt;strong class=&quot;char&quot;&gt;.&lt;/strong&gt;&lt;strong class=&quot;assign&quot;&gt;stack :&lt;/strong&gt; &lt;strong class=&quot;str&quot;&gt;''&lt;/strong&gt;&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt;
    &lt;strong class=&quot;assign&quot;&gt;column:&lt;/strong&gt; column&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt;
    &lt;strong class=&quot;assign&quot;&gt;line:&lt;/strong&gt; line&lt;strong class=&quot;char&quot;&gt;,&lt;/strong&gt;
    &lt;strong class=&quot;assign&quot;&gt;msg:&lt;/strong&gt; msg
  &lt;strong class=&quot;char&quot;&gt;}&lt;/strong&gt;&lt;strong class=&quot;char&quot;&gt;)&lt;/strong&gt;
  &lt;strong class=&quot;keywd&quot;&gt;return&lt;/strong&gt; &lt;strong class=&quot;keywd&quot;&gt;false&lt;/strong&gt;
&lt;strong class=&quot;char&quot;&gt;}&lt;/strong&gt;
&lt;/pre&gt;
This is all we need. Works perfectly and gets the job done.
&lt;p&gt;Just think about it: when the core is just 1% of the product, what does the rest of the code do? Likely nothing you absolutely need.&lt;/p&gt;
&lt;p&gt;Maintenance is another thing. Volument client weights &lt;strong&gt;4kb&lt;/strong&gt; which corresponds to &lt;strong&gt;350&lt;/strong&gt; lines of source code. With this ratio, Optimizely client has &lt;strong&gt;70,000&lt;/strong&gt; lines of undocumented code.&lt;/p&gt;
&lt;p&gt;We have a single developer taking care of the codebase. Does Optimizely need ten people to handle theirs? Or twenty? We don't know, but one thing is for certain: 20 people make more redundancy, technical debt, and bugs than one.&lt;/p&gt;
&lt;/div&gt;&lt;div readability=&quot;49.255583126551&quot;&gt;
&lt;p&gt;According to &lt;a href=&quot;https://httparchive.org/reports/page-weight?start=earliest&amp;amp;end=latest&amp;amp;view=list&quot;&gt;HTTP archive&lt;/a&gt; the average size of a web page has gone up from &lt;strong&gt;460K&lt;/strong&gt; to &lt;strong&gt;1850K&lt;/strong&gt; in nine years. The internet is four times fatter.&lt;/p&gt;
&lt;img src=&quot;https://volument.com/blog/img/page-weight.png&quot;/&gt;Timeseries of total kilobytes. Sudden drops are mostly changes in measurement strategy.
&lt;p&gt;If you are struggling to find a market for your product, do what nobody else seems to do: choose minimalism as your leading product development strategy. Start making less, but significantly better stuff.&lt;/p&gt;
&lt;p&gt;Listen to &lt;strong&gt;Steve Jobs&lt;/strong&gt; or &lt;strong&gt;Dieter Rams&lt;/strong&gt; on product design, &lt;strong&gt;Salvatore Sanfilippo&lt;/strong&gt; on programming, and &lt;strong&gt;Seth Godin&lt;/strong&gt; on content.&lt;/p&gt;
&lt;p&gt;Minimalism is a sparse human skill to strip down everything to bare essentials. It's the ability to say no to 99% of things. It's hard, but it makes a difference. Likely more than you think.&lt;/p&gt;
&lt;blockquote class=&quot;pull&quot; readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;q&gt;Less is More&lt;/q&gt;&lt;/p&gt;
&lt;div class=&quot;ui&quot; readability=&quot;7&quot;&gt;
&lt;p class=&quot;author&quot;&gt;Mies van der Rohe&lt;/p&gt;
&lt;p class=&quot;job&quot;&gt;Pioneers of modernist architecture&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div readability=&quot;54.204081632653&quot;&gt;
&lt;p&gt;Minimalism is hard because it scares the hell out of your bosses. They seem to prefer the opposite. They ask you to add more call-to-action buttons, make them bigger, and “spice them up” with fancy background colors. More is more.&lt;/p&gt;
&lt;p&gt;This is hard to swallow because, as designers, we were taught to focus on usability. It certainly didn't help, that our former A/B testing tool emphasized short-term wins. When we added a huge sales overlay, it appeared to bring more conversions — since the return visitors were ready to take action. The new visitors probably hit the back button as soon as they arrived.&lt;/p&gt;
&lt;p&gt;This is the reason we started building Volument. &lt;strong&gt;We wanted to show the marketing team, that conversions are results of great user experience.&lt;/strong&gt; We wanted a rock-solid optimization tool without the &lt;a href=&quot;https://volument.com/learn/problems-in-traditional-ab-testing&quot;&gt;measurement problems&lt;/a&gt; and we didn't want to wait &lt;a href=&quot;https://volument.com/learn/why-traditional-ab-testing-is-slow&quot;&gt;absurdly long&lt;/a&gt; to get the results.&lt;/p&gt;
&lt;img src=&quot;https://volument.com/blog/img/engagement.png&quot;/&gt;Now we can finally see the real results of our work
&lt;p&gt;We can finally pursue our minimalistic religion, iterate quickly, and collect maximum wins.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Tue, 24 Dec 2019 12:16:30 +0000</pubDate>
<dc:creator>tipiirai</dc:creator>
<og:description>If you want a cheap trick to make a difference — here's one: _minimalism_. Focus on the bare essentials and get rid of the rest. It's an easy way to differentiate, because most others are doing the opposite: tons of crap.</og:description>
<og:title>Minimalism — An undervalued development skill</og:title>
<og:url>https://volument.com/blog/minimalism-the-most-undervalued-development-skill</og:url>
<og:image>https://volument.com/blog/img/minimalist-hero.png</og:image>
<og:type>website</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://volument.com/blog/minimalism-the-most-undervalued-development-skill</dc:identifier>
</item>
<item>
<title>My Business Card Runs Linux</title>
<link>https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/</link>
<guid isPermaLink="true" >https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/</guid>
<description>&lt;p&gt;I'm an embedded systems engineer. I spend a lot of my free time looking for things I could use in future designs, or things that tickle one of my fancies.&lt;/p&gt;
&lt;p&gt;One of those things is cheap Linux-capable computers, the cheaper the better. So I started diving into the very deep rabbit hole of obscure processors.&lt;/p&gt;
&lt;p&gt;I thought to myself, “These processors are nearly cheap enough to give away.” After a while I hit upon the idea of making a barebones Linux board in a business card form factor.&lt;/p&gt;
&lt;p&gt;As soon as I had the idea I thought it would be pretty cool to do. I have &lt;a href=&quot;https://hackaday.com/2017/10/04/literally-flashy-business-cards/&quot;&gt;seen&lt;/a&gt; electronic &lt;a href=&quot;https://hackaday.com/2014/06/17/designing-the-second-version-of-my-business-card/&quot;&gt;business&lt;/a&gt; cards &lt;a href=&quot;https://hackaday.com/2018/05/11/stylish-business-card-with-a-stylophone-built-in/&quot;&gt;before&lt;/a&gt;, with various fun features including emulating USB flash drives, blinkenlights, or even wireless transceivers. I have never seen one running Linux, however.&lt;/p&gt;
&lt;p&gt;So I built one.&lt;/p&gt;
&lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-top.jpg&quot;&gt;&lt;img src=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-top_huad90566bef925e8b01048d4355f78bd6_6751801_1024x1024_fit_q80_box.jpg&quot; title=&quot;(click for large version)&quot;/&gt;&lt;/a&gt;
&lt;p&gt;This is the finished product. It is a complete, minimal ARM computer running my customized Linux firmware built with Buildroot.&lt;/p&gt;
&lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-bottom.jpg&quot;&gt;&lt;img src=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-bottom_hu0304cb7e538da5a35ca6f72df4bbc0a9_7893599_1024x1024_fit_q80_box.jpg&quot; title=&quot;(click for large version)&quot;/&gt;&lt;/a&gt;
&lt;p&gt;It has a USB port in the corner. If you plug it into a computer, it boots in about 6 seconds and shows up over USB as a flash drive and a virtual serial port that you can use to log into the card's shell. The flash drive has a README file, a copy of my résumé, and some of my photography. The shell has several games and Unix classics such as fortune and rogue, a small 2048, and a small MicroPython interpreter.&lt;/p&gt;
&lt;p&gt;All this is accomplished on a very small 8MB flash chip. The bootloader fits in 256KB, the kernel is 1.6MB, and the whole root filesystem is 2.4MB. So, there's plenty of space for the virtual flash drive. It also includes a writable home directory, on the off chance that anyone creates something they want to keep. This is also saved on the flash chip, which is properly wear leveled with UBI.&lt;/p&gt;
&lt;p&gt;The whole thing costs under $3. It's cheap enough to give away. If you get one from me, I'm probably trying to impress you.&lt;/p&gt;

&lt;p&gt;I designed and built everything myself. This is literally my job, and I enjoy it, so much of the challenge was finding parts that were cheap enough for a hobbyist.&lt;/p&gt;
&lt;p&gt;The choice of processor was the most critical decision to keep the cost low and make the project feasible. After much research, I selected the F1C100s, a fairly obscure cost-optimized (read: &lt;em&gt;damn cheap&lt;/em&gt;) part made by Allwinner; it includes both RAM and CPU in a single package. I bought these on Taobao. All the other miscellaneous components were sourced from LCSC.&lt;/p&gt;
&lt;p&gt;I fabricated the PCBs with &lt;a href=&quot;https://jlcpcb.com/&quot;&gt;JLC&lt;/a&gt;. For $8 I got 10 copies. I have been very impressed with boards I've gotten from JLC; they're not quite as nice as the ones from OSHPark, but they look great, especially for the price.&lt;/p&gt;
&lt;p&gt;The first spin of the boards were matte black, which looked fine but were quite the fingerprint magnets.&lt;/p&gt;
&lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-v1-top.jpg&quot;&gt;&lt;img src=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-v1-top_hufbc4863b7048e03811fce4d4bb545c2d_2395351_1024x1024_fit_q80_box.jpg&quot; title=&quot;(click for large version)&quot;/&gt;&lt;/a&gt;
&lt;p&gt;There were a couple problems with the first spin: first, the USB port wasn't long enough to reliably make contact in many USB ports. Less critically, the flash footprint was wrong, which I worked around by bending the leads under the part by hand. (My wife said I was “dead-spidering” the part!)&lt;/p&gt;
&lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/dead-spider.jpg&quot;&gt;&lt;img src=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/dead-spider_hub9f0c46128e70c3e8e3772be08b379bb_215180_1024x1024_fit_q80_box.jpg&quot; title=&quot;(click for large version)&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Once I had validated everything else, I re-spun the boards to get the version you see at the top of this article.&lt;/p&gt;
&lt;p&gt;Due to the size of all these small parts, right away I decided to reflow solder everything using a &lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/08/t962-reflow-profile-calculator/&quot;&gt;cheap reflow oven&lt;/a&gt;. I have access to a laser cutter, so I laser-cut my own solder paste stencil using laminator pages. The stencil turned out reasonably well. The 0.2mm apertures for the processor pins needed special attention to get them to come out clean: laser power and focus were critical.&lt;/p&gt;
&lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/stencil.jpg&quot;&gt;&lt;img src=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/stencil_hu1570a4fa6440b9ea23bc1041972caaf0_1201295_1024x1024_fit_q80_box.jpg&quot; alt=&quot;Other blank PCBs make a good jig for holding your board to apply paste.&quot; title=&quot;(click for large version)&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Other blank PCBs make a good jig for holding your board to apply paste.&lt;/p&gt;
&lt;p&gt;I applied solder paste and placed components by hand. I made sure to have a lead-free process—the boards, parts, and solder paste are all RoHS—so that I wouldn't feel bad about giving them to people.&lt;/p&gt;
&lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/paste.jpg&quot;&gt;&lt;img src=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/paste_hu025309d0408002528ae9eb49aeb44512_1961770_1024x1024_fit_q80_box.jpg&quot; alt=&quot;I was a little off-target on this particular print, but solder paste is pretty forgiving and these assembled fine.&quot; title=&quot;(click for large version)&quot;/&gt;&lt;/a&gt;
&lt;p&gt;I was a little off-target on this particular print, but solder paste is pretty forgiving and these assembled fine.&lt;/p&gt;
&lt;p&gt;Each component takes around 10 seconds to hand-place, so I tried to keep component count as low as possible.&lt;/p&gt;
&lt;p&gt;For more discussion about the design and software, you might be interested in reading my &lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/designing-my-linux-business-card/&quot;&gt;detailed write-up&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;bill-of-materials--cost&quot;&gt;Bill of Materials &amp;amp; Cost&lt;/h2&gt;
&lt;p&gt;I kept costs low. It's cheap enough that I don't feel bad giving it away, as designed! I'm not going to give one to absolutely everyone because it does take time to assemble each card, and assembly cost is not factored in here (my time is “free”).&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Component&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Price&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;F1C100s&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;$1.42&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;PCB&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;$0.80&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;8MB flash&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;$0.17&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;All other components&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;$0.49&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;strong&gt;$2.88&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Of course, there are other costs that are difficult to quantify like shipping (since it's spread across multiple projects). But this is definitely pretty cheap for a Linux board. It also gives a pretty decent starting point for quantifying how much it costs companies to manufacture bottom-end devices: you bet they're getting everything even cheaper than I am!&lt;/p&gt;

&lt;p&gt;What can I say? It boots a super stripped-down Linux in about 6 seconds. Due to form factor and cost, the card lacks I/O, networking, and any amount of storage to run heavyweight programs. Nonetheless, I managed to cram a bunch of interesting stuff into the firmware image.&lt;/p&gt;
&lt;h2 id=&quot;usb&quot;&gt;USB&lt;/h2&gt;
&lt;p&gt;I could do any number of things with the USB, but I chose to keep it fairly simple so that people could have a decent chance of getting everything working on their computer when they tried it out. Linux lets you behave as a “device” with the &lt;a href=&quot;https://linux-sunxi.org/USB_Gadget&quot;&gt;Gadget Framework&lt;/a&gt;. Since I forward-ported some drivers from others’ previous work on this processor, I have all the functionality of the entire USB gadget framework at my disposal. I decided to emulate a pre-generated flash drive and supply a shell over a virtual serial port.&lt;/p&gt;
&lt;h2 id=&quot;shell&quot;&gt;Shell&lt;/h2&gt;
&lt;p&gt;You can run all these from the emulated serial console after you log in (as &lt;code&gt;root&lt;/code&gt;, the only user):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;code&gt;rogue&lt;/code&gt;&lt;/strong&gt;: the classic Unix dungeon crawler.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;2048&lt;/code&gt;&lt;/strong&gt;: a simple console mode 2048 game.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;fortune&lt;/code&gt;&lt;/strong&gt;: various pithy sayings. I decided not to include the entire database of quotes here to save space for other functionality.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://micropython.org/&quot;&gt;&lt;code&gt;micropython&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;: a very small Python interpreter.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;emulated-flash-drive&quot;&gt;Emulated Flash Drive&lt;/h2&gt;
&lt;p&gt;During the compilation process, the build tools generate a small FAT32 image and add it as one of the UBI partitions. As I described above, the Linux gadget subsystem presents this as a mass storage device to the PC.&lt;/p&gt;
&lt;p&gt;If you'd like to see what appears on the flash drive, the easiest thing to do would be to go &lt;a href=&quot;https://github.com/thirtythreeforty/businesscard-linux/tree/master/package/businesscard-flashdrive/files&quot;&gt;look at the source code&lt;/a&gt;. There's some of my photography and my resume.&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;
&lt;ul readability=&quot;5.3142857142857&quot;&gt;&lt;li readability=&quot;4.6471774193548&quot;&gt;
&lt;p&gt;If you'd like to see my Buildroot tree, it's open-sourced on GitHub at &lt;a href=&quot;https://github.com/thirtythreeforty/businesscard-linux&quot;&gt;&lt;strong&gt;&lt;code&gt;thirtythreeforty/businesscard-linux&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;. It contains the code to generate the NOR flash image, which is then installed via the processor's USB download mode. It also has package definitions for the games and other goodies like fortune that I packaged for Buildroot once I got everything working. If you're wanting to use the F1C100s in a project, it's a great starting point (and feel free to get in touch if you have questions).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;I rebased &lt;a href=&quot;https://github.com/Icenowy/linux/tree/f1c100s&quot;&gt;Icenowy's excellent F1C100s work&lt;/a&gt; on Linux v4.9. My business card runs near-mainline v5.2 with this handful of patches rebased and debugged. It's hosted on GitHub at &lt;a href=&quot;https://github.com/thirtythreeforty/linux/tree/f1c100s-v5.2.4&quot;&gt;&lt;strong&gt;&lt;code&gt;thirtythreeforty/linux&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.6760563380282&quot;&gt;
&lt;p&gt;I believe I currently have the world's best port of U-Boot to the F1C100s, based again in part on some work by Icenowy. (Surprisingly, getting U-Boot fully working was quite annoying.) I am working on upstreaming this. In the meantime, it is also on GitHub at &lt;a href=&quot;https://github.com/thirtythreeforty/u-boot/tree/f1c100s-v2019.04&quot;&gt;&lt;strong&gt;&lt;code&gt;thirtythreeforty/u-boot&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;f1c100s-documentation&quot;&gt;F1C100s Documentation&lt;/h2&gt;
&lt;p&gt;I found some (sparse) documentation for the F1C100s, which I'm mirroring here:&lt;/p&gt;
&lt;p&gt;And finally, I've uploaded my schematic for the curious. You can download it by clicking on it below.&lt;/p&gt;
&lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard.pdf&quot;&gt;&lt;img src=&quot;https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/schematic-preview.svg&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The F1C100s is somewhat scarce here in the US, so here's an open offer for people who want to design with this part: if you design a board with this chip on it, get in touch and I'll get you some samples to build your board.&lt;/p&gt;

&lt;p&gt;I taught myself a lot on this project: it's my first project using a reflow oven to solder the parts. I also had to learn how to find resources for poorly-documented parts. There was a lot more to it than what I touched on in this quick presentation; again, if you want to see how the sausage gets made, see also my &lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/12/designing-my-linux-business-card/&quot;&gt;companion detailed write-up&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I drew from my existing experience with embedded Linux and designing PCBs. It isn't flawless, but it's a pretty good representation of my abilities.&lt;/p&gt;
&lt;p&gt;If you'd like to learn how to do this kind of thing, you might also be interested in my ongoing &lt;a href=&quot;https://www.thirtythreeforty.net/posts/2019/08/mastering-embedded-linux-part-1-concepts/&quot;&gt;Mastering Embedded Linux&lt;/a&gt; series! I'm walking through how to build hardware and software from scratch for tiny, cheap Linux systems much like my business card.&lt;/p&gt;
</description>
<pubDate>Tue, 24 Dec 2019 10:15:42 +0000</pubDate>
<dc:creator>rcarmo</dc:creator>
<og:title>My Business Card Runs Linux</og:title>
<og:description>In which I build a Linux computer cheap enough to give away</og:description>
<og:type>article</og:type>
<og:url>https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/</dc:identifier>
</item>
<item>
<title>An IT migration corrupted 1.3B customer records</title>
<link>https://increment.com/testing/what-broke-the-bank/</link>
<guid isPermaLink="true" >https://increment.com/testing/what-broke-the-bank/</guid>
<description>&lt;div class=&quot;ArticleLayout&quot;&gt;
&lt;p&gt;In 2018, British bank &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; was stuck in the aftermath of an ugly divorce. Though it had been two years since the financial institution had split from Lloyds Banking Group (the two had originally merged in 1995), &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; was still symbiotically tied to its former partner through a hastily set-up clone of the Lloyds Banking Group &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; system. Worse, &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; was paying alimony: £100 million (the equivalent, at the time of this writing, of $127 million) in licensing fees per year&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;No one likes paying money to their ex, so on April 22, 2018, at 6 &lt;span class=&quot;mt-abbrev&quot;&gt;p.m.&lt;/span&gt;, &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; enacted a months-in-the-making plan to change that: migrating billions of customer records for their 5.4 million customers to the &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems of Spanish company Banco Sabadell, which had bought &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; for £1.7 billion ($2.2 billion) in March 2015&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Banco Sabadell chairman Josep Oliu had announced the plan two weeks before Christmas, 2017, at a celebratory 1,800-person company meeting in Barcelona’s Palau de Congressos de Catalunya, a cavernous, modern conference hall in the city’s financial district. Crucial to the migration would be a new version of a system developed by Banco Sabadell in the year 2000&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;Proteo, which had been rechristened Proteo4&lt;span class=&quot;mt-abbrev&quot;&gt;UK&lt;/span&gt; specifically for the &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; migration project&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;More than 2,500 years of person power had gone into Proteo4&lt;span class=&quot;mt-abbrev&quot;&gt;UK,&lt;/span&gt; Banco Sabadell chief executive Jaime Guardiola Romojaro boasted to the Barcelona crowd. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;The integration of Proteo4&lt;span class=&quot;mt-abbrev&quot;&gt;UK&lt;/span&gt; is an unprecedented project in Europe, a project in which more than 1,000 professionals have participated,” he continued. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;It would offer a significant boost to our growth in the United Kingdom.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; chose April 22 for the migration because it was a quiet Sunday evening in mid-spring. The bank’s existing &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems had been offline for most of the weekend as the Proteo4&lt;span class=&quot;mt-abbrev&quot;&gt;UK&lt;/span&gt; project took place, and as customer records were shifted from one system to another. Flipping the switch to recommence public access to bank accounts late on a Sunday evening would allow the bank a slow, smooth entry back into service&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But while Oliu and Guardiola Romojaro were buoyant at the pre-Christmas company meeting, those at &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; who were actually working on the migration were nervous. The project was meant to take 18 months, but it had been running behind schedule and over budget. After all, shifting an entire company’s records from one system to another is no mean feat&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;They were right to be nervous&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class=&quot;Sidebar large&quot;&gt;People’s life savings were suddenly missing from their accounts. Tiny purchases had been incorrectly recorded as costing thousands&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Twenty minutes after &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; reopened access to accounts, believing that the migration had gone smoothly, it received the first reports of issues. People’s life savings were suddenly missing from their accounts. Tiny purchases had been incorrectly recorded as costing thousands. Some people logged on and were presented not with their own bank accounts but with those of completely different customers&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;At 9 &lt;span class=&quot;mt-abbrev&quot;&gt;p.m.&lt;/span&gt;, &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; officials notified the &lt;span class=&quot;mt-abbrev&quot;&gt;UK’&lt;/span&gt;s financial regulator, the Financial Conduct Authority (&lt;span class=&quot;mt-abbrev&quot;&gt;FCA)&lt;/span&gt;, that something had gone wrong. But the &lt;span class=&quot;mt-abbrev&quot;&gt;FCA&lt;/span&gt; had already taken notice: &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; had screwed up massively, and consumers were up in arms. (In the 21st century, no unhappy customer is ever very far from Twitter.) The &lt;span class=&quot;mt-abbrev&quot;&gt;FCA,&lt;/span&gt; as well as the Prudential Regulation Authority (&lt;span class=&quot;mt-abbrev&quot;&gt;PRA)&lt;/span&gt;, another &lt;span class=&quot;mt-abbrev&quot;&gt;UK&lt;/span&gt; financial regulator, came calling around 11:30 &lt;span class=&quot;mt-abbrev&quot;&gt;p.m.&lt;/span&gt; that same night. When they managed to get &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; officials on a conference call just after midnight&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;now the morning of Monday, April 23&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;they had one question: What is going on?&lt;/p&gt;
&lt;p&gt;Though it would take some time to understand, we now know that 1.3 billion customer records were corrupted in the migration. And as the bank’s &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems took weeks to recover, millions of people struggled to access their money. More than a year on from &lt;span class=&quot;mt-abbrev&quot;&gt;TSB’&lt;/span&gt;s weekend from hell, experts think they’ve identified the root cause: a lack of rigorous testing&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;ArticleLayout flipped&quot;&gt;
&lt;p&gt;Bank &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems have become more complex as customer needs&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;and expectations&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;have increased. Sixty years ago, we would have been happy to visit a local branch of our bank during operating hours to deposit money we had in hand or to withdraw it over the counter with the help of a teller. The amount of money in our account directly correlated with the physical cash and coins we handed over. Our account ledger could be tracked using pen and paper, and any sort of computerized system was beyond customers’ reach. Bank employees put traditional card and paper-fed data into giant machines that would tabulate totals at the end of a day’s or week’s trading&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Then, in 1967, the world’s first automated teller machine (&lt;span class=&quot;mt-abbrev&quot;&gt;ATM)&lt;/span&gt; was &lt;a href=&quot;https://www.telegraph.co.uk/personal-banking/current-accounts/story-behind-worlds-first-cashpoint/&quot; null=&quot;&quot; target=&quot;_blank&quot;&gt;installed outside a bank&lt;/a&gt; in north London. It changed everything about banking&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;and required a significant shift in the way that banks interfaced with their consumers. Convenience became the watchword, and this principle positioned customers closer than ever to the systems that kept banks running behind the scenes&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;The &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems a long time ago were pretty much only used by bank employees, and they could pretty much continue running the bank doing only paper things over the counter,” explains Guy Warren, chief executive of &lt;span class=&quot;mt-abbrev&quot;&gt;ITRS&lt;/span&gt; Group, a supplier of technology to 190 banks worldwide. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;It wasn’t really until &lt;span class=&quot;mt-abbrev&quot;&gt;ATMs&lt;/span&gt; and then online banking came in that the general public were accessing the bank’s &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems directly.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-abbrev&quot;&gt;ATMs&lt;/span&gt; were just the beginning. Soon, people were able to avoid queues altogether by transferring funds over the phone. This required specialized cards inserted into hardware that could decipher the dual-tone multifrequency (&lt;span class=&quot;mt-abbrev&quot;&gt;DTMF)&lt;/span&gt; signals, which would translate a customer pressing &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;1” into a command to withdraw money, and &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;2” into an order to deposit funds&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Internet and mobile banking have brought the customer ever closer to the main systems that keep banks running. Though separate setups, all these systems have to interface with one another and with the core mainframe, triggering balance transactions, updating cash transfers, and so on&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The typical high street retail bank runs its core banking system on a mainframe computer, says &lt;span class=&quot;mt-abbrev&quot;&gt;BLMS&lt;/span&gt; Consulting’s Brian Lancaste, who spent 13 years working at &lt;span class=&quot;mt-abbrev&quot;&gt;IBM&lt;/span&gt; and several more years overseeing the technical departments responsible for the &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems of &lt;span class=&quot;mt-abbrev&quot;&gt;HSBC,&lt;/span&gt; and who now consults for banks and building societies (community-run lenders accountable to their customers) across the &lt;span class=&quot;mt-abbrev&quot;&gt;UK.&lt;/span&gt; &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;That’s probably the most resilient platform you can base that core banking system on,” he says, &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;and it’s probably the most scalable.” The core customer database sits on that mainframe, along with various sets of &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; infrastructures, including lots of servers, in order to build an application interface to the mainframe to allow internet access&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Few customers likely think about the complexity of the data movement that occurs when they log into their online bank account just to load and refresh their information. Logging on will transmit that data through a set of servers; when you make a transaction, the system will duplicate that data on the backend infrastructure, which then does the hard work&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;shifting cash around from one account to another to pay bills, make repayments, and continue subscriptions&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now multiply that process by several billion. Today, &lt;a href=&quot;https://globalfindex.worldbank.org/&quot; null=&quot;&quot; target=&quot;_blank&quot;&gt;69 percent of adults&lt;/a&gt; around the world have a bank account, according to data compiled by the World Bank with the help of the Bill and Melinda Gates Foundation. Each of these individuals has to pay bills; some make mortgage repayments; many more have a Netflix or Youkou Toudou subscription. And they’re not all in the same bank&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A single bank’s numerous internal &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;mobile banking, &lt;span class=&quot;mt-abbrev&quot;&gt;ATMs&lt;/span&gt;, and more&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt; don’t just have to interface with each other. They also have to interface with banks in Bolivia, Guatemala, or Brazil. A Chinese &lt;span class=&quot;mt-abbrev&quot;&gt;ATM&lt;/span&gt; has to be able to spew out money if prompted by a credit card issued in the United States. Money has always been global. But it’s never been so complicated&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;The number of ways you can touch a bank’s &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems has increased,” says Warren, the &lt;span class=&quot;mt-abbrev&quot;&gt;ITRS&lt;/span&gt; Group executive. And those systems rarely age out of use. New ones, however, continue to come in&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;If you take all the platforms that touch all the different customer bases, and think of all the hours they need to be available, it’s inevitable that you have a problem,” Warren explains. Success is measured by &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;how good your systems are at repairing themselves, and how good you are at handling a significant outage.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ArticleLayout&quot;&gt;

&lt;p&gt;&lt;span class=&quot;mt-abbrev&quot;&gt;TSB’&lt;/span&gt;s systems weren’t great at repairing themselves. The bank’s team struggled with handling a significant outage, too. But what really broke &lt;span class=&quot;mt-abbrev&quot;&gt;TSB’&lt;/span&gt;s &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems was their complexity. According to &lt;a href=&quot;https://www.parliament.uk/documents/commons-committees/treasury/Written_Evidence/tsb0003.pdf&quot; null=&quot;&quot; target=&quot;_blank&quot;&gt;a report&lt;/a&gt; compiled for &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; by &lt;span class=&quot;mt-abbrev&quot;&gt;IBM&lt;/span&gt; in the early days of the crisis, &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;a combination of new applications, advanced use of microservices, combined with use of &lt;strong&gt;active-active data centers&lt;/strong&gt;, have resulted in compounded risk in production.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Some banks, like &lt;span class=&quot;mt-abbrev&quot;&gt;HSBC,&lt;/span&gt; are global in scale and therefore have highly complex, interconnected systems that are regularly tested, migrated, and updated. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;At somewhere like &lt;span class=&quot;mt-abbrev&quot;&gt;HSBC,&lt;/span&gt; that sort of thing is happening all the time,” says former &lt;span class=&quot;mt-abbrev&quot;&gt;HSBC&lt;/span&gt; &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; leader Lancaster. He sees &lt;span class=&quot;mt-abbrev&quot;&gt;HSBC&lt;/span&gt; as a model for how other banks should run their &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems: by dedicating staff and taking their time. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;You dot all the i’s, cross all the t’s, and recognize that [it still] needs a considerable amount of planning and testing,” Lancaster says&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;With a smaller bank, especially one without extensive migration experience, getting it right is that much more of a challenge&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;The &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; migration was a complex one,” Lancaster says. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;I’m not sure they’d got their heads around that level of complexity. I got a very strong impression they hadn’t worked out exactly how to test it.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Speaking to a &lt;span class=&quot;mt-abbrev&quot;&gt;UK&lt;/span&gt; parliamentary inquiry about the issue weeks after the outage, Andrew Bailey, chief executive of the &lt;span class=&quot;mt-abbrev&quot;&gt;FCA,&lt;/span&gt; confirmed that suspicion. Bad code likely set off &lt;span class=&quot;mt-abbrev&quot;&gt;TSB’&lt;/span&gt;s initial problems, but the interconnected systems of the global financial network meant that its errors were perpetuated and irreversible. The bank kept seeing unexpected errors elsewhere in its &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; architecture. Customers received messages that were gibberish or unrelated to their issues&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;To me, that denotes the absence of robust &lt;strong&gt;regression testing&lt;/strong&gt;, because these banking systems are connecting to a lot of outside systems, such as payment systems and messaging systems,” Bailey told members of Parliament. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;These things that crop up, when you put a fix in, that you weren’t expecting, get you back to the question of testing.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Others agreed. &lt;span class=&quot;mt-abbrev&quot;&gt;IBM&lt;/span&gt; experts who were brought in to analyze what had gone wrong didn’t couch their criticism of the bank one bit. They said that they &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;would expect world-class design rigor, test discipline, comprehensive operational proving, cut-over trial runs, and operational support set-up.” What they found was something different: &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;mt-abbrev&quot;&gt;IBM&lt;/span&gt; has not seen evidence of the application of a rigorous set of go-live criteria to prove production readiness.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; had walked into a minefield, and the bank seemingly had no idea&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;There’s a lot of complexity behind the technology being used, and that complexity manifests itself in various ways,” explains Ryan Rubin, an &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; expert who has previously worked for &lt;span class=&quot;mt-abbrev&quot;&gt;EY,&lt;/span&gt; and who is now the managing director of Cyberian Defence, a consultancy helping big firms manage cyber risk. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;It could lead to downtime and exacerbated events, like we’ve seen.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p class=&quot;Sidebar large&quot;&gt;&lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; had walked into a minefield, and the bank seemingly had no idea&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Warren explains that &lt;span class=&quot;mt-abbrev&quot;&gt;UK&lt;/span&gt; banks will often aim for a target of &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;four 9s” availability&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;meaning that their services are accessible to the public 99.99 percent of the time. In practice, this means that an &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; system required to be available every single hour of the day, as online banking is, could be offline for 52 minutes per year. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;Three 9s”&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;99.9 percent availability&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;doesn’t sound all that different, but it’s equivalent to more than eight hours of downtime a year. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;For a [British] bank, four 9s is fine, three 9s is not,” says Warren, who recalls that the first software project he ever advised on was a six 9s project&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;a control system for a nuclear power station&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Every time a company effects a change in its &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; infrastructure, it runs the risk of something going wrong. Reducing the changes can help avoid issues, while changes that are required need rigorous testing&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;something &lt;span class=&quot;mt-abbrev&quot;&gt;IBM&lt;/span&gt; highlighted as absent in the &lt;span class=&quot;mt-abbrev&quot;&gt;TSB &lt;/span&gt;outage&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Shujun Li, who teaches cybersecurity at the University of Kent and who consults for large organizations (including one large bank and a number of insurers), says that every upgrade and patch comes down to risk management&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;particularly when dealing with hundreds of millions of dollars’ worth of customers’ funds. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;You need to have a procedure making sure the risks are managed properly,” he says. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;You [also need to] know, if it goes wrong, how much it will cost in terms of money and reputation.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Careful planning could mitigate the risks of such downtime in a way that &lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; didn’t seem to factor in. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;Failures will continue to happen, but the cost of applying resilience and having redundancy has come down,” Rubin says. Storage costs have fallen as network providers and cloud solutions have risen. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;These things are all there, which can help the banks to manage their risk and fail gracefully when disaster strikes.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Still, securing backup plans in the event of disaster may be too costly for some institutions. Warren believes that some banks have become overcautious in how they approach &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; resiliency. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;You can’t do this on a budget,” he explains. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;This is a financial service: Either it’s available, or it isn’t. They should’ve spent more.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Miserly &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; spending ultimately levies a toll. &lt;a href=&quot;https://www.tsb.co.uk/news-releases/tsb-announces-2018-full-year-results/&quot; null=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;span class=&quot;mt-abbrev&quot;&gt;TSB&lt;/span&gt; reported&lt;/a&gt; a £105.4 million ($134 million) loss for 2018, compared to a £162.7 million ($206 million) profit in 2017. Post-migration costs, including compensating customers, correcting fraudulent transactions (which skyrocketed in the chaos and confusion of the outage), and hiring help totaled £330.2 million ($419 million). The bank’s &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; provider, Sabis, was sent a bill for £153 million ($194 million) for its role in the crisis&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ArticleLayout flipped&quot;&gt;
&lt;p&gt;Perhaps the easiest way to avoid outages is to simply to make fewer changes. Yet, as Lancaster says, &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;every bank, every building society, every company is pushed by the business to build more and more good stuff for the customers and good stuff for the business.” He observes, &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;There’s a drive to get more and more new systems and functionality in so you can be more competitive.” At the same time, companies&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;particularly financial ones&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;have a duty of care to their customers, keeping their savings safe and maintaining the satisfactory operation of existing services. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;The dilemma is how much effort do you put into keeping things running when you have a huge pressure from the business to introduce new stuff,” Lancaster says&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;Sidebar default image&quot;&gt;&lt;img class=&quot;j-SmoothLoad&quot; src=&quot;https://increment.com/art/10/what-broke/spot-500-156f025d.jpeg&quot; sizes=&quot;500px&quot; width=&quot;500px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Reported technology outages in the financial services sector in the &lt;span class=&quot;mt-abbrev&quot;&gt;UK&lt;/span&gt; increased 187 percent from 2017 to 2018, according to &lt;a href=&quot;https://www.fca.org.uk/publication/research/technology-cyber-resilience-questionnaire-cross-sector-report.pdf&quot; null=&quot;&quot; target=&quot;_blank&quot;&gt;data published by the &lt;span class=&quot;mt-abbrev&quot;&gt;FCA&lt;/span&gt;&lt;/a&gt;. Far and away, the most common root cause of outages is a failure in change management. Banks in particular require constant uptime and near-instantaneous transaction reporting. Customers get worried if their cash is floating about in the ether, and become near riotous if you separate them from their money&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A matter of months after &lt;span class=&quot;mt-abbrev&quot;&gt;TSB’&lt;/span&gt;s great outage, the &lt;span class=&quot;mt-abbrev&quot;&gt;UK’&lt;/span&gt;s financial regulators and the Bank of England issued a &lt;a href=&quot;https://www.fca.org.uk/publications/discussion-papers/dp-18-4-building-uk-financial-sector-operational-resilience&quot; null=&quot;&quot; target=&quot;_blank&quot;&gt;discussion paper&lt;/a&gt; on operational resilience. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;The paper is trying to say to the financial organizations: Have you tipped this balance too far in bringing stuff in and not looking after the systems you have on the floor today?” Lancaster explains&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The paper also suggests a potential change to regulation&lt;span class=&quot;mt-dash&quot;&gt;—&lt;/span&gt;making individuals within a company responsible for what goes wrong within that company’s &lt;span class=&quot;mt-abbrev&quot;&gt;IT&lt;/span&gt; systems. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;When you personally are liable, and you can be made bankrupt or sent to prison, it changes [the situation] a great deal, including the amount of attention paid to it,” Warren says. &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;You treat it very seriously, because it’s your personal wealth and your personal liberty at stake.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since &lt;span class=&quot;mt-abbrev&quot;&gt;TSB,&lt;/span&gt; Rubin says, &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;there’s definitely more scrutiny. Senior managers can’t afford to ignore or not invest enough in their technology estates. The landscape has changed now in terms of fines and regulatory expectation.&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But regardless of what lessons have been learned from &lt;span class=&quot;mt-abbrev&quot;&gt;TSB,&lt;/span&gt; significant outages will still occur. They’re inevitable&lt;span class=&quot;mt-periodPullEnd&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;I don’t think it can ever go away,” Warren says. Instead, people have to decide: &lt;span class=&quot;mt-quotePull&quot;&gt;“&lt;/span&gt;What’s an acceptable level of availability, and therefore outages?&lt;span class=&quot;mt-quotePullEnd&quot;&gt;”&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

</description>
<pubDate>Tue, 24 Dec 2019 05:28:44 +0000</pubDate>
<dc:creator>fagnerbrack</dc:creator>
<og:title>What broke the bank – Increment: Testing</og:title>
<og:url>https://increment.com/testing/what-broke-the-bank/</og:url>
<og:description>A disastrous IT migration corrupted 1.3 billion customer records. The culprit was insufficient testing.</og:description>
<og:image>https://increment.com/art/10/what-broke/cover-1000-aa2b6642.jpeg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://increment.com/testing/what-broke-the-bank/</dc:identifier>
</item>
<item>
<title>Working for a startup makes less sense</title>
<link>https://zainamro.com/notes/working-for-a-startup-makes-less-sense</link>
<guid isPermaLink="true" >https://zainamro.com/notes/working-for-a-startup-makes-less-sense</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;title&gt;Working for a startup makes less sense&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../../assets/css/style.css&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;72.842672413793&quot;&gt;
&lt;h3&gt;Working for a startup makes less sense&lt;/h3&gt;
&lt;p&gt;December 23, 2019&lt;/p&gt;
&lt;p&gt;Today, there’s an interesting startup dilemma that has become more obvious in the collective consciousness of tech employees than ever before. Put bluntly, it’s that working at most startups (in their current form) in a world full of growing tech giants like Google, Facebook, Apple, Netflix, etc. is making less and less sense for most people who qualify for these jobs. And, I’m not here to try to show you some statistics or a magic formula and convince you to choose one way of life over the other — obviously, that’s your decision to choose, and I believe everyone reading this is smart enough to decide between a startup or big company depending on a number of variables and what you value the most. There are certainly pros and cons to both.&lt;/p&gt;
&lt;p&gt;But what I do want to focus on is the increasing burden on startups to convince good candidates to join their company. And by “good”, I mean employees who are actually useful in a startup environment. In my experience working at an early-stage startup, finding and hiring good candidates was unsurprisingly a painful experience. And, it only worsened over time as candidates became more aware of the career risks and all the money, perks, and resources they were leaving behind on the table by not joining a big company. It tells you a lot about the state of the industry when smart new grads are getting paid amounts that are out of reach for many early-stage startups. To make the situation worse, the &lt;em&gt;very good&lt;/em&gt; engineers, the ones who could truly help build a tech company from the ground up from day 1, were getting offers so exorbitant they could not possibly fathom to turn them down. And, to be clear, I’m not saying that one should or should not place money or perks above everything, but that from my experience, money and perks are such a strong driver for most people that it’s already activated an industry-wide transformation due to the expanding resources of big tech companies and the failure of startups to keep up with them.&lt;/p&gt;
&lt;p&gt;As a result, startups today either raise massive rounds of funding or feel they are left with very little room to entice good employees — this is especially a problem in the Bay Area. It seems that employees have either been burnt too many times or are keen enough to learn from the experiences of others and realize that their minuscule equity will unlikely be worth anything of significance. The odds are overwhelmingly stacked against them. Waving a fraction of a percent in equity in front of candidates simply does not work anymore. And the “you should work for a startup” rhetoric by VC’s and other stakeholders is rarely balanced or shows the full picture for quite obvious reasons; rather, it's a way to fuel the startup workforce and convince a maturing audience that it is still a worthwhile endeavor.&lt;/p&gt;
&lt;p&gt;Coming into 2020, I think startups’ best bet is to make the most of the variables they can control outside of money and perks (if you lack the appropriate resources). This means being transparent and honest with candidates about all risks involved when joining a startup and factoring all this into the amount of equity they offer which should be something considerable. Equity agreements should not be intentionally confusing or designed to screw over employees. Moreover, it’s in their best interest to be crystal clear about their core values, their product, and why they think the candidate should care about the work they're doing. In this way, the relationship between a startup and their early employees is seen as what it truly is — a genuine partnership between two parties trying to make a difference.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=21868022&quot;&gt;Comments&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Mon, 23 Dec 2019 22:23:15 +0000</pubDate>
<dc:creator>zainamro</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://zainamro.com/notes/working-for-a-startup-makes-less-sense</dc:identifier>
</item>
<item>
<title>Open-Source Spotify App</title>
<link>https://github.com/ThasianX/SpotifyDaily</link>
<guid isPermaLink="true" >https://github.com/ThasianX/SpotifyDaily</guid>
<description>&lt;p&gt;Spotify Daily is an iOS application that allows users to pull in new song releases from their favorite artists and provides users with important metrics like their top tracks, top artists, and recently played tracks, queryable by time range.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Architecture&lt;/strong&gt;: MVVM + Coordinator + RxSwift&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;pre&gt;
&lt;code&gt;Pods have already been committed so no need to run 'pod install'
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Installing&lt;/h3&gt;
&lt;p&gt;Since Spotify has strict limits on API calls and the app is currently using my API keys, you may want to create a &lt;a href=&quot;https://developer.spotify.com/dashboard/applications&quot; rel=&quot;nofollow&quot;&gt;spotify application&lt;/a&gt; and save your clientId and clientSecret to &lt;code&gt;SpotifyDaily_iOS/Services/Configuration.swift&lt;/code&gt; for best experience. Of course, when you make a PR, don't include &lt;code&gt;Configuration.swift&lt;/code&gt; in it.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Open xcworkspace and run
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Built With&lt;/h2&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;If you find a bug, or would like to suggest a new feature or enhancement, it'd be nice if you could &lt;a href=&quot;https://github.com/ThasianX/SpotifyDaily/issues&quot;&gt;search the issue tracker first&lt;/a&gt;; while we don't mind duplicates, keeping issues unique helps us save time and considates effort. If you can't find your issue, feel free to &lt;a href=&quot;https://github.com/ThasianX/SpotifyDaily/issues/new/choose&quot;&gt;file a new one&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Please read &lt;a href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt; for details on how to contribute–it has information on the process for handling contributions, and tips on how the code is structured to make your work easier, and the process for submitting pull requests to us.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;This project is licensed under the GPL License - see the &lt;a href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file for details&lt;/p&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/setup.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/setup.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/sidemenu.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/sidemenu.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/noartists.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/noartists.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/addartists.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/addartists.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/portfolio.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/portfolio.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/newreleases.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/newreleases.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/dashboard.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/dashboard.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/topartists.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/topartists.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/safari.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/safari.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/toptracks.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/toptracks.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/recentlyplayed.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/recentlyplayed.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt; &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/ThasianX/SpotifyDaily/blob/master/App%20Images/settings.png&quot;&gt;&lt;img src=&quot;https://github.com/ThasianX/SpotifyDaily/raw/master/App%20Images/settings.png&quot; height=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 23 Dec 2019 21:47:24 +0000</pubDate>
<dc:creator>thasian</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/20830930?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>ThasianX/SpotifyDaily</og:title>
<og:url>https://github.com/ThasianX/SpotifyDaily</og:url>
<og:description>Spotify Daily is an iOS application that allows users to pull in new song releases from their favorite artists and provides users with important metrics like their top tracks, top artists, and rece...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/ThasianX/SpotifyDaily</dc:identifier>
</item>
<item>
<title>How to undo almost anything with Git (2015)</title>
<link>https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/</link>
<guid isPermaLink="true" >https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/</guid>
<description>&lt;p&gt;One of the most useful features of any version control system is the ability to “undo” your mistakes. In Git, “undo” can mean many slightly different things.&lt;/p&gt;
&lt;p&gt;When you make a new commit, Git stores a snapshot of your repository at that specific moment in time; later, you can use Git to go back to an earlier version of your project.&lt;/p&gt;
&lt;p&gt;In this post, I’m going to take a look at some common scenarios where you might want to “undo” a change you’ve made and the best way to do it using Git.&lt;/p&gt;
&lt;h2 id=&quot;undo-a-public-change&quot;&gt;Undo a “public” change&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You just ran &lt;code&gt;git push&lt;/code&gt;, sending your changes to GitHub, now you realize there’s a problem with one of those commits. You’d like to undo that commit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git revert &amp;lt;SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; &lt;code&gt;git revert&lt;/code&gt; will create a new commit that’s the opposite (or inverse) of the given SHA. If the old commit is “matter”, the new commit is “anti-matter”—anything removed in the old commit will be added in the new commit and anything added in the old commit will be removed in the new commit.&lt;/p&gt;
&lt;p&gt;This is Git’s safest, most basic “undo” scenario, because it doesn’t &lt;em&gt;alter&lt;/em&gt; history—so you can now &lt;code&gt;git push&lt;/code&gt; the new “inverse” commit to undo your mistaken commit.&lt;/p&gt;
&lt;h2 id=&quot;fix-the-last-commit-message&quot;&gt;Fix the last commit message&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You just typo’d the last commit message, you did &lt;code&gt;git commit -m &quot;Fxies bug #42&quot;&lt;/code&gt; but before &lt;code&gt;git push&lt;/code&gt; you realized that really should say “Fixes bug #42”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git commit --amend&lt;/code&gt; or &lt;code&gt;git commit --amend -m &quot;Fixes bug #42&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; &lt;code&gt;git commit --amend&lt;/code&gt; will update and replace the most recent commit with a new commit that combines any staged changes with the contents of the previous commit. With nothing currently staged, this just rewrites the previous commit message.&lt;/p&gt;
&lt;h2 id=&quot;undo-local-changes&quot;&gt;Undo “local” changes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; The cat walked across the keyboard and somehow saved the changes, then crashed the editor. You haven’t committed those changes, though. You want to undo everything in that file—just go back to the way it looked in the last commit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git checkout -- &amp;lt;bad filename&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; &lt;code&gt;git checkout&lt;/code&gt; alters files in the working directory to a state previously known to Git. You could provide a branch name or specific SHA you want to go back to or, by default, Git will assume you want to checkout &lt;code&gt;HEAD&lt;/code&gt;, the last commit on the currently-checked-out branch.&lt;/p&gt;
&lt;p&gt;Keep in mind: any changes you “undo” this way are &lt;em&gt;really&lt;/em&gt; gone. They were never committed, so Git can’t help us recover them later. Be sure you know what you’re throwing away here! (Maybe use &lt;code&gt;git diff&lt;/code&gt; to confirm.)&lt;/p&gt;
&lt;h2 id=&quot;reset-local-changes&quot;&gt;Reset “local” changes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You’ve made some commits locally (not yet pushed), but everything is terrible, you want to undo the last three commits—like they never happened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git reset &amp;lt;last good SHA&amp;gt;&lt;/code&gt; or &lt;code&gt;git reset --hard &amp;lt;last good SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; &lt;code&gt;git reset&lt;/code&gt; rewinds your repository’s history all the way back to the specified SHA. It’s as if those commits never happened. By default, &lt;code&gt;git reset&lt;/code&gt; preserves the working directory. The commits are gone, but the &lt;em&gt;contents&lt;/em&gt; are still on disk. This is the safest option, but often, you’ll want to “undo” the commits &lt;em&gt;and&lt;/em&gt; the changes in one move—that’s what &lt;code&gt;--hard&lt;/code&gt; does.&lt;/p&gt;
&lt;h2 id=&quot;redo-after-undo-local&quot;&gt;Redo after undo “local”&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You made some commits, did a &lt;code&gt;git reset --hard&lt;/code&gt; to “undo” those changes (see above), and &lt;em&gt;then&lt;/em&gt; realized: you want those changes back!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git reflog&lt;/code&gt; and &lt;code&gt;git reset&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; &lt;code&gt;git reflog&lt;/code&gt; is an amazing resource for recovering project history. You can recover &lt;em&gt;almost&lt;/em&gt; anything—anything you’ve committed—via the reflog.&lt;/p&gt;
&lt;p&gt;You’re probably familiar with the &lt;code&gt;git log&lt;/code&gt; command, which shows a list of commits. &lt;code&gt;git reflog&lt;/code&gt; is similar, but instead shows a list of times when &lt;code&gt;HEAD&lt;/code&gt; changed.&lt;/p&gt;
&lt;p&gt;Some caveats:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;HEAD&lt;/code&gt; changes &lt;em&gt;only&lt;/em&gt;.&lt;code&gt;HEAD&lt;/code&gt; changes when you switch branches, make commits with &lt;code&gt;git commit&lt;/code&gt; and un-make commits with &lt;code&gt;git reset&lt;/code&gt;, but &lt;code&gt;HEAD&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; change when you &lt;code&gt;git checkout -- &amp;lt;bad filename&amp;gt;&lt;/code&gt; (from an earlier scenario—as mentioned before, those changes were never committed, so the reflog can’t help us recover those.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt; doesn’t last forever. Git will periodically clean up objects which are “unreachable.” Don’t expect to find months-old commits lying around in the reflog forever.&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;reflog&lt;/code&gt; is yours and yours alone. You can’t use &lt;code&gt;git reflog&lt;/code&gt; to restore another developer’s un-pushed commits.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img width=&quot;1429&quot; height=&quot;644&quot; src=&quot;https://github.blog/wp-content/uploads/2015/06/f6b9f054-d891-11e4-8c53-838eff9f40ae.png?resize=1429%2C644&quot; class=&quot;attachment-full size-full&quot; alt=&quot;reflog&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;So… how do you use the reflog to “redo” a previously “undone” commit or commits? It depends on what exactly you want to accomplish:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;If you want to restore the project’s history as it was at that moment in time use &lt;code&gt;git reset --hard &amp;lt;SHA&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you want to recreate one or more files in your working directory as they were at that moment in time, without altering history use &lt;code&gt;git checkout &amp;lt;SHA&amp;gt; -- &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you want to replay &lt;em&gt;exactly one&lt;/em&gt; of those commits into your repository use &lt;code&gt;git cherry-pick &amp;lt;SHA&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;once-more-with-branching&quot;&gt;Once more, with branching&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You made some commits, then realized you were checked out on &lt;code&gt;master&lt;/code&gt;. You wish you could make those commits on a feature branch instead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git branch feature&lt;/code&gt;, &lt;code&gt;git reset --hard origin/master&lt;/code&gt;, and &lt;code&gt;git checkout feature&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; You may be used to creating new branches with &lt;code&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/code&gt;—it’s a popular short-cut for creating a new branch and checking it out right away—but you don’t want to switch branches just yet. Here, &lt;code&gt;git branch feature&lt;/code&gt; creates a new branch called &lt;code&gt;feature&lt;/code&gt; pointing at your most recent commit, but leaves you checked out to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, &lt;code&gt;git reset --hard&lt;/code&gt; rewinds &lt;code&gt;master&lt;/code&gt; back to &lt;code&gt;origin/master&lt;/code&gt;, before any of your new commits. Don’t worry, though, they are still available on &lt;code&gt;feature&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;git checkout&lt;/code&gt; switches to the new &lt;code&gt;feature&lt;/code&gt; branch, with all of your recent work intact.&lt;/p&gt;
&lt;h2 id=&quot;branch-in-time-saves-nine&quot;&gt;Branch in time saves nine&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You started a new branch &lt;code&gt;feature&lt;/code&gt; based on &lt;code&gt;master&lt;/code&gt;, but &lt;code&gt;master&lt;/code&gt; was pretty far behind &lt;code&gt;origin/master&lt;/code&gt;. Now that &lt;code&gt;master&lt;/code&gt; branch is in sync with &lt;code&gt;origin/master&lt;/code&gt;, you wish commits on &lt;code&gt;feature&lt;/code&gt; were starting &lt;em&gt;now&lt;/em&gt;, instead of being so far behind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git checkout feature&lt;/code&gt; and &lt;code&gt;git rebase master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; You could have done this with &lt;code&gt;git reset&lt;/code&gt; (no &lt;code&gt;--hard&lt;/code&gt;, intentionally preserving changes on disk) then &lt;code&gt;git checkout -b &amp;lt;new branch name&amp;gt;&lt;/code&gt; and then re-commit the changes, but that way, you’d lose the commit history. There’s a better way.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rebase master&lt;/code&gt; does a couple of things:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;First it locates the common ancestor between your currently-checked-out branch and &lt;code&gt;master&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then it resets the currently-checked-out branch to that ancestor, holding all later commits in a temporary holding area.&lt;/li&gt;
&lt;li&gt;Then it advances the currently-checked-out-branch to the end of &lt;code&gt;master&lt;/code&gt; and replays the commits from the holding area &lt;em&gt;after&lt;/em&gt; &lt;code&gt;master&lt;/code&gt;‘s last commit.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;mass-undo-redo&quot;&gt;Mass undo/redo&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You started this feature in one direction, but mid-way through, you realized another solution was better. You’ve got a dozen or so commits, but you only want some of them. You’d like the others to just disappear.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git rebase -i &amp;lt;earlier SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; &lt;code&gt;-i&lt;/code&gt; puts &lt;code&gt;rebase&lt;/code&gt; in “interactive mode”. It starts off like the rebase discussed above, but before replaying any commits, it pauses and allows you to gently modify each commit as it’s replayed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rebase -i&lt;/code&gt; will open in your default text editor, with a list of commits being applied, like this:&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;1459&quot; height=&quot;495&quot; src=&quot;https://github.blog/wp-content/uploads/2015/06/f6b1ab88-d891-11e4-97c1-e0630ac74e74.png?resize=1459%2C495&quot; class=&quot;attachment-full size-full&quot; alt=&quot;rebase-interactive1&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The first two columns are key: the first is the selected command for the commit identified by the SHA in the second column. By default, &lt;code&gt;rebase -i&lt;/code&gt; assumes each commit is being applied, via the &lt;code&gt;pick&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;To drop a commit, just delete that line in your editor. If you no longer want the bad commits in your project, you can delete lines 1 and 3-4 above.&lt;/p&gt;
&lt;p&gt;If you want to preserve the &lt;em&gt;contents&lt;/em&gt; of the commit but edit the commit &lt;em&gt;message&lt;/em&gt;, you use the &lt;code&gt;reword&lt;/code&gt; command. Just replace the word &lt;code&gt;pick&lt;/code&gt; in the first column with the word &lt;code&gt;reword&lt;/code&gt; (or just &lt;code&gt;r&lt;/code&gt;). It can be tempting to rewrite the commit message right now, but that won’t work—&lt;code&gt;rebase -i&lt;/code&gt; ignores everything after the SHA column. The text after that is really just to help us remember what &lt;code&gt;0835fe2&lt;/code&gt; is all about. When you’ve finished with &lt;code&gt;rebase -i&lt;/code&gt;, you’ll be prompted for any new commit messages you need to write.&lt;/p&gt;
&lt;p&gt;If you want to combine two commits together, you can use the &lt;code&gt;squash&lt;/code&gt; or &lt;code&gt;fixup&lt;/code&gt; commands, like this:&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;1449&quot; height=&quot;339&quot; src=&quot;https://github.blog/wp-content/uploads/2015/06/f6b605ca-d891-11e4-98cf-d567ca9f4edc.png?resize=1449%2C339&quot; class=&quot;attachment-full size-full&quot; alt=&quot;rebase-interactive2&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;squash&lt;/code&gt; and &lt;code&gt;fixup&lt;/code&gt; combine “up”—the commit with the “combine” command will be merged into the commit immediately before it. In this scenario, &lt;code&gt;0835fe2&lt;/code&gt; and &lt;code&gt;6943e85&lt;/code&gt; will be combined into one commit, then &lt;code&gt;38f5e4e&lt;/code&gt; and &lt;code&gt;af67f82&lt;/code&gt; will be combined together into another.&lt;/p&gt;
&lt;p&gt;When you select &lt;code&gt;squash&lt;/code&gt;, Git will prompt us to give the new, combined commit a new commit message; &lt;code&gt;fixup&lt;/code&gt; will give the new commit the message from the first commit in the list. Here, you know that &lt;code&gt;af67f82&lt;/code&gt; is an “ooops” commit, so you’ll just use the commit message from &lt;code&gt;38f5e4e&lt;/code&gt; as is, but you’ll write a new message for the new commit you get from combining &lt;code&gt;0835fe2&lt;/code&gt; and &lt;code&gt;6943e85&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you save and exit your editor, Git will apply your commits in order from top to bottom. You can alter the order commits apply by changing the order of commits before saving. If you’d wanted, you could have combined &lt;code&gt;af67f82&lt;/code&gt; with &lt;code&gt;0835fe2&lt;/code&gt; by arranging things like this:&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;1445&quot; height=&quot;326&quot; src=&quot;https://github.blog/wp-content/uploads/2015/06/f6b4a9d2-d891-11e4-9ac9-10039c031d06.png?resize=1445%2C326&quot; class=&quot;attachment-full size-full&quot; alt=&quot;rebase-interactive3&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;fix-an-earlier-commit&quot;&gt;Fix an earlier commit&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You failed to include a file in an earlier commit, it’d be great if that earlier commit could somehow include the stuff you left out. You haven’t pushed, yet, but it wasn’t the most recent commit, so you can’t use &lt;code&gt;commit --amend&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git commit --squash &amp;lt;SHA of the earlier commit&amp;gt;&lt;/code&gt; and &lt;code&gt;git rebase --autosquash -i &amp;lt;even earlier SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; &lt;code&gt;git commit --squash&lt;/code&gt; will create a new commit with a commit message like &lt;code&gt;squash! Earlier commit&lt;/code&gt;. (You could manually create a commit with a message like that, but &lt;code&gt;commit --squash&lt;/code&gt; saves you some typing.)&lt;/p&gt;
&lt;p&gt;You can also use &lt;code&gt;git commit --fixup&lt;/code&gt; if you don’t want to be prompted to write a new commit message for the combined commit. In this scenario, you’d probably use &lt;code&gt;commit --fixup&lt;/code&gt;, since you just want to use the earlier commit’s commit message during &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rebase --autosquash -i&lt;/code&gt; will launch an interactive &lt;code&gt;rebase&lt;/code&gt; editor, but the editor will open with any &lt;code&gt;squash!&lt;/code&gt; and &lt;code&gt;fixup!&lt;/code&gt; commits already paired to the commit target in the list of commits, like so:&lt;/p&gt;
&lt;p&gt;&lt;img width=&quot;1446&quot; height=&quot;294&quot; src=&quot;https://github.blog/wp-content/uploads/2015/06/f6a7a1d8-d891-11e4-8784-c32262ff54da.png?resize=1446%2C294&quot; class=&quot;attachment-full size-full&quot; alt=&quot;rebase-autosquash&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;--squash&lt;/code&gt; and &lt;code&gt;--fixup&lt;/code&gt;, you might not remember the SHA of the commit you want to fix—only that it was one or five commits ago. You might find using Git’s &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; operators especially handy. &lt;code&gt;HEAD^&lt;/code&gt; is one commit before &lt;code&gt;HEAD&lt;/code&gt;. &lt;code&gt;HEAD~4&lt;/code&gt; is four commits before &lt;code&gt;HEAD&lt;/code&gt; – or, altogether, five commits back.&lt;/p&gt;
&lt;h2 id=&quot;stop-tracking-a-tracked-file&quot;&gt;Stop tracking a tracked file&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt; You accidentally added &lt;code&gt;application.log&lt;/code&gt; to the repository, now every time you run the application, Git reports there are unstaged changes in &lt;code&gt;application.log&lt;/code&gt;. You put &lt;code&gt;*.log&lt;/code&gt; in the &lt;code&gt;.gitignore&lt;/code&gt; file, but it’s still there—how do you tell git to to “undo” tracking changes in this file?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Undo with:&lt;/strong&gt; &lt;code&gt;git rm --cached application.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s happening:&lt;/strong&gt; While &lt;code&gt;.gitignore&lt;/code&gt; prevents Git from tracking changes to files or even noticing the existence of files it’s never tracked before, once a file has been added and committed, Git will continue noticing changes in that file. Similarly, if you’ve used &lt;code&gt;git add -f&lt;/code&gt; to “force”, or override, &lt;code&gt;.gitignore&lt;/code&gt;, Git will keep tracking changes. You won’t have to use &lt;code&gt;-f&lt;/code&gt; to add it in the future.&lt;/p&gt;
&lt;p&gt;If you want to remove that should-be-ignored file from Git’s tracking, &lt;code&gt;git rm --cached&lt;/code&gt; will remove it from tracking but leave the file untouched on disk. Since it’s now being ignored, you won’t see that file in &lt;code&gt;git status&lt;/code&gt; or accidentally commit changes from that file again.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;That’s how to undo anything with Git. To learn more about any of the Git commands used here, check out the relevant documentation:&lt;/p&gt;

</description>
<pubDate>Mon, 23 Dec 2019 20:36:49 +0000</pubDate>
<dc:creator>ljiljana</dc:creator>
<og:type>article</og:type>
<og:title>How to undo (almost) anything with Git - The GitHub Blog</og:title>
<og:description>One of the most useful features of any version control system is the ability to “undo” your mistakes. In Git, “undo” can mean many slightly different things. When you make a new commit, Git stores</og:description>
<og:url>https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/</og:url>
<og:image>https://github.blog/wp-content/uploads/2015/06/f6b9f054-d891-11e4-8c53-838eff9f40ae.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/</dc:identifier>
</item>
<item>
<title>How to Create the Apple Fifth Avenue Cube in WebGL</title>
<link>https://tympanus.net/codrops/2019/12/20/how-to-create-the-apple-fifth-avenue-cube-in-webgl/</link>
<guid isPermaLink="true" >https://tympanus.net/codrops/2019/12/20/how-to-create-the-apple-fifth-avenue-cube-in-webgl/</guid>
<description>&lt;div class=&quot;ct-post-featured-img&quot;&gt;&lt;a href=&quot;http://tympanus.net/Tutorials/apple-fifth-avenue/?debug=true&quot; title=&quot;How to Create the Apple Fifth Avenue Cube in WebGL Demo&quot;&gt;&lt;img width=&quot;800&quot; height=&quot;600&quot; src=&quot;https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/12/AppleCube_featured.png&quot; class=&quot;attachment-post-thumbnail size-post-thumbnail wp-post-image&quot; alt=&quot;Apple Fifth Avenue Cube featured image&quot; srcset=&quot;https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/12/AppleCube_featured.png 800w, https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/12/AppleCube_featured-400x300.png 400w, https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/12/AppleCube_featured-768x576.png 768w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;p class=&quot;ct-msponsor-article&quot;&gt;&lt;span&gt;From our sponsor:&lt;/span&gt; &lt;a href=&quot;http://bit.ly/codrops_bloom&quot; target=&quot;_blank&quot; rel=&quot;sponsored nofollow&quot;&gt;Bloom, the email opt-in and lead generation plugin for WordPress.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In September 2019 Apple reopened the doors of its &lt;a href=&quot;https://www.apple.com/retail/fifthavenue/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;historic store in the Fifth Avenue (opens in a new tab)&quot;&gt;historic store in the Fifth Avenue&lt;/a&gt; and to celebrate the special event it made a landing page with a really neat animation of a cube made of glass. You can see the original animation in &lt;a href=&quot;https://gfycat.com/zanyhelplessgiantschnauzer&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;this video (opens in a new tab)&quot;&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What caught my attention is the way they played with the famous glass cube to make the announcement.&lt;/p&gt;
&lt;p&gt;As a Creative Technologist I constantly experiment and study the potential of web technologies, and I thought it might be interesting to try to replicate this using WebGL.&lt;/p&gt;
&lt;p&gt;In this tutorial I’m going to explain step-by-step the techniques I used to recreate the animation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You will need an intermediate level of knowledge of WebGL. I will omit some parts of the code for brevity and assume you already know how to set up a WebGL application. The techniques I’m going to show are translatable to any WebGL library / framework.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since WebGL APIs are very verbose, I decided to go with &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;http://regl.party/&quot; target=&quot;_blank&quot;&gt;Regl&lt;/a&gt; for my experiment:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Regl is a new functional abstraction for WebGL. Using Regl is easier than writing raw WebGL code because you don’t need to manage state or binding; it’s also lighter and faster and has less overhead than many existing 3d frameworks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Drawing the cube&lt;/h2&gt;
&lt;p&gt;The first step is to create the program to draw the cube.&lt;/p&gt;
&lt;p&gt;Since the shape we’re going to create is a prism made of glass, we must guarantee the following characteristics:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;It must be transparent&lt;/li&gt;
&lt;li&gt;Cube internal faces must reflect the internal content&lt;/li&gt;
&lt;li&gt;The cube edges must distort the internal content&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Front and back faces&lt;/h3&gt;
&lt;p&gt;In order to get what we want, at render time we’ll draw the shape in two passes:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;In the first pass we’ll draw only the &lt;strong&gt;back faces&lt;/strong&gt; with the internal reflection.&lt;/li&gt;
&lt;li&gt;In the second pass we’ll draw the &lt;strong&gt;front faces&lt;/strong&gt; with the content after being masked and distorted at the edges.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Draw the shape in two passes means nothing but calling the WebGL program two times, but with a different configuration. WebGL has the concept of front facing and back facing and this gives us the ability to decide what to draw turning on the &lt;strong&gt;culling face&lt;/strong&gt; feature.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;6.2674418604651&quot;&gt;
&lt;p&gt;With that feature turned on, WebGL defaults to “culling” back facing triangles. “Culling” in this case is a fancy word for “not drawing”.&lt;/p&gt;
&lt;cite&gt;– &lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot; (opens in a new tab)&quot; href=&quot;https://webglfundamentals.org/webgl/lessons/webgl-3d-orthographic.html&quot; target=&quot;_blank&quot;&gt;WebGL Fundamentals&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;pre class=&quot;wp-block-prismatic-blocks&quot;&gt;
&lt;code class=&quot;language-&quot;&gt;// draw front faces
gl.enable(gl.CULL_FACE);
gl.cullFace(gl.BACK);

// draw back faces
gl.enable(gl.CULL_FACE);
gl.cullFace(gl.FRONT);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now that we have gone through the part of setting up the program, let’s start to render the cube.&lt;/p&gt;
&lt;h3&gt;Coloured borders&lt;/h3&gt;
&lt;p&gt;What we want to obtain is a transparent shape with coloured borders. From a flat white cube, in the first step we’ll add the rainbow color and then we’ll mask it with the borders:&lt;/p&gt;

&lt;p&gt;First of all create the GLSL function that returns the rainbow:&lt;/p&gt;
&lt;pre class=&quot;wp-block-prismatic-blocks&quot;&gt;
&lt;code class=&quot;language-&quot;&gt;const float PI2 = 6.28318530718;

vec4 radialRainbow(vec2 st, float tick) {
  vec2 toCenter = vec2(0.5) - st;
  float angle = mod((atan(toCenter.y, toCenter.x) / PI2) + 0.5 + sin(tick), 1.0);

  // colors
  vec4 a = vec4(0.15, 0.58, 0.96, 1.0);
  vec4 b = vec4(0.29, 1.00, 0.55, 1.0);
  vec4 c = vec4(1.00, 0.0, 0.85, 1.0);
  vec4 d = vec4(0.92, 0.20, 0.14, 1.0);
  vec4 e = vec4(1.00, 0.96, 0.32, 1.0);

  float step = 1.0 / 10.0;

  vec4 color = a;

  color = mix(color, b, smoothstep(step * 1.0, step * 2.0, angle));
  color = mix(color, a, smoothstep(step * 2.0, step * 3.0, angle));
  color = mix(color, b, smoothstep(step * 3.0, step * 4.0, angle));
  color = mix(color, c, smoothstep(step * 4.0, step * 5.0, angle));
  color = mix(color, d, smoothstep(step * 5.0, step * 6.0, angle));
  color = mix(color, c, smoothstep(step * 6.0, step * 7.0, angle));
  color = mix(color, d, smoothstep(step * 7.0, step * 8.0, angle));
  color = mix(color, e, smoothstep(step * 8.0, step * 9.0, angle));
  color = mix(color, a, smoothstep(step * 9.0, step * 10.0, angle));

  return color;
}

#pragma glslify: export(radialRainbow);&lt;/code&gt;
&lt;/pre&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;3.5593220338983&quot;&gt;
&lt;p&gt;Glslify is a node.js-style module system that lets us split GLSL code into modules.&lt;/p&gt;
&lt;cite&gt;&lt;a href=&quot;https://github.com/glslify/glslify&quot;&gt;https://github.com/glslify/glslify&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;Before going ahead, let’s talk a bit about &lt;code&gt;gl_FragCoord&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;9.3956043956044&quot;&gt;
&lt;p&gt;Available only in the fragment language, gl_FragCoord is an input variable that contains the &lt;s&gt;window&lt;/s&gt; &lt;strong&gt;canvas&lt;/strong&gt; relative coordinate (x, y, z, 1/w) values for the fragment.&lt;/p&gt;
&lt;cite&gt;– &lt;a href=&quot;https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/gl_FragCoord.xhtml&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;khronos.org (opens in a new tab)&quot;&gt;khronos.org&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;If you notice, the function &lt;code&gt;radialRainbow&lt;/code&gt; needs a variable called &lt;code&gt;st&lt;/code&gt; as first parameter, whose values must be the pixel coordinates relative to the canvas and, like &lt;code&gt;UVs&lt;/code&gt;, go between 0 and 1. The variable &lt;code&gt;st&lt;/code&gt; is the result of the division of &lt;code&gt;gl_FragCoord&lt;/code&gt; by the resolution:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;/**
 * gl_FragCoord: pixel coordinates
 * u_resolution: the resolution of our canvas
 */
vec2 st = gl_FragCoord.xy / u_resolution;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following image explains the difference between using &lt;code&gt;UVs&lt;/code&gt; and &lt;code&gt;st&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once we’re able to render the radial gradient, let’s create the function to get the borders:&lt;/p&gt;
&lt;pre class=&quot;wp-block-prismatic-blocks&quot;&gt;
&lt;code class=&quot;language-&quot;&gt;float borders(vec2 uv, float strokeWidth) {
  vec2 borderBottomLeft = smoothstep(vec2(0.0), vec2(strokeWidth), uv);

  vec2 borderTopRight = smoothstep(vec2(0.0), vec2(strokeWidth), 1.0 - uv);

  return 1.0 - borderBottomLeft.x * borderBottomLeft.y * borderTopRight.x * borderTopRight.y;
}

#pragma glslify: export(borders);&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then our final fragment shader:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;precision mediump float;

uniform vec2 u_resolution;
uniform float u_tick;

varying vec2 v_uv;
varying float v_depth;

#pragma glslify: borders = require(borders.glsl);
#pragma glslify: radialRainbow = require(radial-rainbow.glsl);

void main() {
  // screen coordinates
  vec2 st = gl_FragCoord.xy / u_resolution;

  vec4 bordersColor = radialRainbow(st, u_tick);

  // opacity factor based on the z value
  float depth = clamp(smoothstep(-1.0, 1.0, v_depth), 0.6, 0.9);

  bordersColor *= vec4(borders(v_uv, 0.011)) * depth;

  gl_FragColor = bordersColor;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;div class=&quot;ct-ad-article-wrapper ct-ad-article-wrapper-in&quot;&gt;
&lt;div class=&quot;ct-ad-article&quot;&gt;&lt;img class=&quot;ct-ad-img&quot; src=&quot;https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/themes/codropstheme03/images/advertisement.jpg&quot;/&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Drawing the content&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Please note that the &lt;strong&gt;Apple logo&lt;/strong&gt; is a trademark of &lt;strong&gt;Apple Inc.&lt;/strong&gt;, registered in the U.S. and other countries. We are only using it here for demonstration purposes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the cube, it’s time to add the Apple logo and all texts.&lt;/p&gt;
&lt;p&gt;If you notice, the content is not only rendered inside the cube, but also on the three back faces as reflection – that means render it four times. In order to keep the performance high, we’ll draw it only once off-screen at render time to then use it in the various fragments.&lt;/p&gt;
&lt;p&gt;In WebGL we can do it thanks to the FBO:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;9.7115384615385&quot;&gt;
&lt;p&gt;The frame buffer object architecture (FBO) is an extension to OpenGL for doing flexible off-screen rendering, including rendering to a texture. By capturing images that would normally be drawn to the screen, it can be used to implement a large variety of image filters, and post-processing effects.&lt;/p&gt;
&lt;cite&gt;– &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://en.wikipedia.org/wiki/Framebuffer_object&quot; target=&quot;_blank&quot;&gt;Wikipedia&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;In Regl it’s pretty simple to play with FBOs:&lt;/p&gt;
&lt;pre class=&quot;wp-block-prismatic-blocks&quot;&gt;
&lt;code class=&quot;language-&quot;&gt;...

// here we'll put the logo and the texts
const textures = [
  ...
]

// we create the FBO
const contentFbo = regl.framebuffer()

// animate is executed at render time
const animate = ({viewportWidth, viewportHeight}) =&amp;gt; {
  contentFbo.resize(viewportWidth, viewportHeight)

  // we tell WebGL to render off-screen, inside the FBO
  contentFbo.use(() =&amp;gt; {
    /**
     * – Content program
     * It'll run as many times as the textures number
     */
    content({
      textures
    })
  })

  /**
   * – Cube program
   * It'll run twice, once for the back faces and once for front faces
   * Together with front faces we'll render the content as well
   */
  cube([
    {
      pass: 1,
      cullFace: 'FRONT',
    },
    {
      pass: 2,
      cullFace: 'BACK',
      texture: contentFbo, // we pass the FBO as a normal texture
    },
  ])
}

regl.frame(animate)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then update the cube fragment shader to render the content:&lt;/p&gt;
&lt;pre class=&quot;wp-block-prismatic-blocks&quot;&gt;
&lt;code class=&quot;language-&quot;&gt;precision mediump float;

uniform vec2 u_resolution;
uniform float u_tick;
uniform int u_pass;
uniform sampler2D u_texture;

varying vec2 v_uv;
varying float v_depth;

#pragma glslify: borders = require(borders.glsl);
#pragma glslify: radialRainbow = require(radial-rainbow.glsl);

void main() {
  // screen coordinates
  vec2 st = gl_FragCoord.xy / u_resolution;

  vec4 texture;
  vec4 bordersColor = radialRainbow(st, u_tick);

  // opacity factor based on the z value
  float depth = clamp(smoothstep(-1.0, 1.0, v_depth), 0.6, 0.9);

  bordersColor *= vec4(borders(v_uv, 0.011)) * depth;

  if (u_pass == 2) {
    texture = texture2D(u_texture, st);
  }

  gl_FragColor = texture + bordersColor;
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2&gt;Masking&lt;/h2&gt;
&lt;p&gt;In the Apple animation every cube face shows a different texture, that means that we have to create a special mask that follows the cube rotation.&lt;/p&gt;
&lt;p&gt;We’ll render the informations to mask the textures inside an FBO that we’ll pass to the content program.&lt;/p&gt;
&lt;p&gt;To each texture let’s associate a different &lt;code&gt;maskId&lt;/code&gt; – every ID corresponds to a color that we’ll use as test-data:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;const textures = [
  {
    texture: logoTexture,
    maskId: 1,
  },
  {
    texture: logoTexture,
    maskId: 2,
  },
  {
    texture: logoTexture,
    maskId: 3,
  },
  {
    texture: text1Texture,
    maskId: 4,
  },
  {
    texture: text2Texture,
    maskId: 5,
  },
]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To make each &lt;code&gt;maskId&lt;/code&gt; correspond to a colour, we just have to convert it in binary and then read it as RGB:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;MaskID 1 =&amp;gt; [0, 0, 1] =&amp;gt; Blue
MaskID 2 =&amp;gt; [0, 1, 0] =&amp;gt; Lime
MaskID 3 =&amp;gt; [0, 1, 1] =&amp;gt; Cyan
MaskID 4 =&amp;gt; [1, 0, 0] =&amp;gt; Red
MaskID 5 =&amp;gt; [1, 0, 1] =&amp;gt; Magenta&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The mask will be nothing but our cube with the faces filled with one of the colours shown above – obviously in this case we just need to draw the front faces:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;...

maskFbo.use(() =&amp;gt; {
  cubeMask([
    {
      cullFace: 'BACK',
      colorFaces: [
        [0, 1, 1], // front face =&amp;gt; mask 3
        [0, 0, 1], // right face =&amp;gt; mask 1
        [0, 1, 0], // back face =&amp;gt; mask 2
        [0, 1, 1], // left face =&amp;gt; mask 3
        [1, 0, 0], // top face =&amp;gt; mask 4
        [1, 0, 1], // bottom face =&amp;gt; mask 5
      ]
    },
  ])
});

contentFbo.use(() =&amp;gt; {
  content({
    textures,
    mask: maskFbo
  })
})

...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Our mask will look like this:&lt;/p&gt;

&lt;p&gt;Now that we have the mask available inside the fragment of the content program, let’s write down the test:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;precision mediump float;

uniform vec2 u_resolution;
uniform sampler2D u_texture;
uniform int u_maskId;
uniform sampler2D u_mask;

varying vec2 v_uv;

void main() {
  vec2 st = gl_FragCoord.xy / u_resolution;

  vec4 texture = texture2D(u_texture, v_uv);

  vec4 mask = texture2D(u_mask, st);

  // convert the mask color from binary (rgb) to decimal
  int maskId = int(mask.r * 4.0 + mask.g * 2.0 + mask.b * 1.0);

  // if the test passes then draw the texture
  if (maskId == u_maskId) {
    gl_FragColor = texture;
  } else {
    discard;
  }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2&gt;Distortion&lt;/h2&gt;
&lt;p&gt;The distortion at the edges is that characteristic that gives the feeling of a glass material.&lt;/p&gt;
&lt;p&gt;The effect is achieved by simply shifting the pixels near the edges towards the center of each face – the following video shows how it works:&lt;/p&gt;

&lt;p&gt;For each pixel to move we need two pieces of information:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;How much to move the pixel&lt;/li&gt;
&lt;li&gt;The direction in which we want to move the pixel&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;These two pieces of information are contained inside the Displacement Map which, as before for the mask, we’ll store in an FBO that we’ll pass to the content program:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;...

displacementFbo.use(() =&amp;gt; {
  cubeDisplacement([
    {
      cullFace: 'BACK'
    },
  ])
});

contentFbo.use(() =&amp;gt; {
  content({
    textures,
    mask: maskFbo,
    displacement: displacementFbo
  })
})

...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The displacement map we’re going to draw will look like this:&lt;/p&gt;

&lt;p&gt;Let’s see in detail how it’s made.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;green channel is the length&lt;/strong&gt;, that is how much to move the pixel – the greener the greater the displacement. Since the distortion must be present only at the edges, we just have to draw a green frame on each face.&lt;/p&gt;
&lt;p&gt;To get the green frame we just have to reuse the border function and put the result on the &lt;code&gt;gl_FragColor&lt;/code&gt; green channel:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;precision mediump float;

varying vec2 v_uv;

#pragma glslify: borders = require(borders.glsl);

void main() {
  // Green channel – how much to move the pixel
  float length = borders(v_uv, 0.028) + borders(v_uv, 0.06) * 0.3;

  gl_FragColor = vec4(0.0, length, 0.0, 1.0);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;red channel is the direction&lt;/strong&gt;, whose value is the angle in radians. Finding this value is more tricky because we need the position of each point relative to the world – since our cube rotates, even the &lt;code&gt;UVs&lt;/code&gt; follow it and therefore we loose any reference. In order to compute the position of every pixel in relation to the center we need two varying variables from the vertex shader:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code&gt;v_point&lt;/code&gt;: the world position of the current pixel.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v_center&lt;/code&gt;: the world position of the center of the face.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The vertex shader:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;precision mediump float;

attribute vec3 a_position;
attribute vec3 a_center;
attribute vec2 a_uv;

uniform mat4 u_projection;
uniform mat4 u_view;
uniform mat4 u_world;

varying vec3 v_center;
varying vec3 v_point;
varying vec2 v_uv;

void main() {
  vec4 position = u_projection * u_view * u_world * vec4(a_position, 1.0);
  vec4 center = u_projection * u_view * u_world * vec4(a_center, 1.0);

  v_point = position.xyz;
  v_center = center.xyz;
  v_uv = a_uv;

  gl_Position = position;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;At this point, in the fragment, we just have to find the distance from the center, calculate the relative angle in radians and put the result on the &lt;code&gt;gl_FragColor&lt;/code&gt; red channel – here the shader updated:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;precision mediump float;

varying vec3 v_center;
varying vec3 v_point;
varying vec2 v_uv;

const float PI2 = 6.283185307179586;

#pragma glslify: borders = require(borders.glsl);

void main() {
  // Red channel – which direction to move the pixel
  vec2 toCenter = v_center.xy - v_point.xy;
  float direction = (atan(toCenter.y, toCenter.x) / PI2) + 0.5;

  // Green channel – how much to move the pixel
  float length = borders(v_uv, 0.028) + borders(v_uv, 0.06) * 0.3;

  gl_FragColor = vec4(direction, length, 0.0, 1.0);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now that we have our displacement map, let’s update the content fragment shader:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;precision mediump float;

uniform vec2 u_resolution;
uniform sampler2D u_texture;
uniform int u_maskId;
uniform sampler2D u_mask;

varying vec2 v_uv;

void main() {
  vec2 st = gl_FragCoord.xy / u_resolution;

  vec4 displacement = texture2D(u_displacement, st);
  // get the direction by taking the displacement red channel and convert it in a vector2
  vec2 direction = vec2(cos(displacement.r * PI2), sin(displacement.r * PI2));
  // get the length by taking the displacement green channel
  float length = displacement.g;

  vec2 newUv = v_uv;
  
  // calculate the new uvs
  newUv.x += (length * 0.07) * direction.x;
  newUv.y += (length * 0.07) * direction.y;

  vec4 texture = texture2D(u_texture, newUv);

  vec4 mask = texture2D(u_mask, st);

  // convert the mask color from binary (rgb) to decimal
  int maskId = int(mask.r * 4.0 + mask.g * 2.0 + mask.b * 1.0);

  // if the test passes then draw the texture
  if (maskId == u_maskId) {
    gl_FragColor = texture;
  } else {
    discard;
  }
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2&gt;Reflection&lt;/h2&gt;
&lt;p&gt;Since reflection is quite a complex topic, I’ll just give you a quick introduction on how it works so that you can more easily understand the source I shared.&lt;/p&gt;
&lt;p&gt;Before continuing, it’s necessary to understand the concept of camera in WebGL. The camera is nothing but the combination of two matrices: &lt;strong&gt;the view and projection matrix&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;9.4988066825776&quot;&gt;
&lt;p&gt;The &lt;strong&gt;projection matrix&lt;/strong&gt; is used to convert world space coordinates into clip space coordinates. A commonly used projection matrix, the &lt;strong&gt;perspective matrix&lt;/strong&gt;, is used to mimic the &lt;em&gt;effects&lt;/em&gt; of a typical camera serving as the stand-in for the viewer in the 3D virtual world. The &lt;strong&gt;view matrix&lt;/strong&gt; is responsible for moving the objects in the scene to simulate the position of the camera being changed.&lt;/p&gt;
&lt;cite&gt;– &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;developer.mozilla.org (opens in a new tab)&quot;&gt;developer.mozilla.org&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt; I suggest that you also get familiar with these concepts before we dig deeper:&lt;/p&gt;
&lt;p&gt;In a 3D environment, reflections are obtained by creating a camera for each reflective surface and placing it accordingly based on the position of the viewer – that is the eye of the main camera.&lt;/p&gt;
&lt;p&gt;In our case, every face of the cube is a reflective surface, that means we need 6 different cameras whose position depends on the viewer and the cube rotation.&lt;/p&gt;

&lt;h3&gt;WebGL Cubemaps&lt;/h3&gt;
&lt;p&gt;Every camera generates a texture for each inner face of the cube. Instead of creating a single framebuffer for every face, we can use the cube mapping technique.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;9.5577395577396&quot;&gt;
&lt;p&gt;Another kind of texture is a &lt;em&gt;cubemap&lt;/em&gt;. It consists of 6 textures representing the 6 faces of a cube. Instead of the traditional texture coordinates that have 2 dimensions, a cubemap uses a normal, in other words a 3D direction. Depending on the direction the normal points one of the 6 faces of the cube is selected and then within that face the pixels are sampled to produce a color.&lt;/p&gt;
&lt;cite&gt;– &lt;a href=&quot;https://webglfundamentals.org/webgl/lessons/webgl-cube-maps.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot; aria-label=&quot;WebGL Fundamentals (opens in a new tab)&quot;&gt;WebGL Fundamentals&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;p&gt;So we just have to store what the six cameras “see” in the right cell – this is how our &lt;em&gt;cubemap&lt;/em&gt; will look like:&lt;/p&gt;

&lt;p&gt;Let’s update our animate function by adding the reflection:&lt;/p&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;...

// this is a normal FBO
const contentFbo = regl.framebuffer()

// this is a cube FBO, that means it composed by 6 textures
const reflectionFbo = regl.framebufferCube(1024)

// animate is executed at render time
const animate = ({viewportWidth, viewportHeight}) =&amp;gt; {
  contentFbo.resize(viewportWidth, viewportHeight)

  contentFbo.use(() =&amp;gt; {
    ...
  })

  /**
   * – Reflection program
   * we'll iterate 6 times over the reflectionFbo and draw inside the 
   * result of each camera
   */
  reflection({
    reflectionFbo,
    cameraConfig,
    texture: contentFbo
  })

  /**
   * – Cube program
   * with the back faces we'll render the reflection as well
   */
  cube([
    {
      pass: 1,
      cullFace: 'FRONT',
      reflection: reflectionFbo,
    },
    {
      pass: 2,
      cullFace: 'BACK',
      texture: contentFbo,
    },
  ])
}

regl.frame(animate)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then update the cube fragment shader.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot; readability=&quot;6.5625&quot;&gt;
&lt;p&gt;In the fragment shader we need to use a samplerCube instead of a sampler2D and use textureCube instead of texture2D. textureCube takes a vec3 direction so we pass the normalized normal. Since the normal is a varying and will be interpolated we need to normalize it.&lt;/p&gt;
&lt;cite&gt;– &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://webglfundamentals.org/webgl/lessons/webgl-cube-maps.html&quot; target=&quot;_blank&quot;&gt;WebGL Fundamentals&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;
&lt;code&gt;precision mediump float;

uniform vec2 u_resolution;
uniform float u_tick;
uniform int u_pass;
uniform sampler2D u_texture;
uniform samplerCube u_reflection;

varying vec2 v_uv;
varying float v_depth;
varying vec3 v_normal;

#pragma glslify: borders = require(borders.glsl);
#pragma glslify: radialRainbow = require(radial-rainbow.glsl);

void main() {
  // screen coordinates
  vec2 st = gl_FragCoord.xy / u_resolution;

  vec4 texture;
  vec4 bordersColor = radialRainbow(st, u_tick);

  // opacity factor based on the z value
  float depth = clamp(smoothstep(-1.0, 1.0, v_depth), 0.6, 0.9);

  bordersColor *= vec4(borders(v_uv, 0.011)) * depth;

  // if u_pass is 1, we're drawing back faces
  if (u_pass == 1) {
    vec3 normal = normalize(v_normal);
    texture = textureCube(u_reflection, normal);
  }

  // if u_pass is 1, we're drawing back faces
  if (u_pass == 2) {
    texture = texture2D(u_texture, st);
  }

  gl_FragColor = texture + bordersColor;
}&lt;/code&gt;
&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This article may give you a general idea of the techniques I used to replicate the Apple animation. If you want to learn more, I suggest you download the source and have a look ot how it works. If you have any questions, feel free to ask me on Twitter (&lt;a rel=&quot;noreferrer noopener&quot; aria-label=&quot;@lorenzocadamuro (opens in a new tab)&quot; href=&quot;https://twitter.com/lorenzocadamuro&quot; target=&quot;_blank&quot;&gt;@lorenzocadamuro&lt;/a&gt;); hope you have enjoyed it!&lt;/p&gt;

&lt;div class=&quot;ct-post-nav&quot;&gt;
&lt;div class=&quot;ct-post-prev&quot;&gt;&lt;a href=&quot;https://tympanus.net/codrops/2019/12/18/case-study-portfolio-of-bruno-arizio/&quot; rel=&quot;prev&quot;&gt;Case Study: Portfolio of Bruno Arizio&lt;/a&gt;&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Mon, 23 Dec 2019 19:45:00 +0000</pubDate>
<dc:creator>cardimart</dc:creator>
<og:type>article</og:type>
<og:title>How to Create the Apple Fifth Avenue Cube in WebGL | Codrops</og:title>
<og:description>A tutorial on how to create the Apple Fifth Avenue Cube using native WebGL.</og:description>
<og:url>https://tympanus.net/codrops/2019/12/20/how-to-create-the-apple-fifth-avenue-cube-in-webgl/</og:url>
<og:image>https://codropspz-tympanus.netdna-ssl.com/codrops/wp-content/uploads/2019/12/AppleCube_featured.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://tympanus.net/codrops/2019/12/20/how-to-create-the-apple-fifth-avenue-cube-in-webgl/</dc:identifier>
</item>
<item>
<title>Million WebSockets and Go (2017)</title>
<link>https://gbws.io/articles/million-websocket-and-go/</link>
<guid isPermaLink="true" >https://gbws.io/articles/million-websocket-and-go/</guid>
<description>&lt;div class=&quot;info&quot;&gt;June, 2017&lt;span&gt;  |  &lt;/span&gt;

&lt;/div&gt;
&lt;p&gt;&lt;img class=&quot;content-image&quot; src=&quot;https://gbws.io/wsgo_hu4f5856ca563c6f3be41657a04090b54b_164170_1400x0_resize_q75_box.jpeg&quot; alt=&quot;Flying Gopher with MailRu logo&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Hi everyone! My name is Sergey Kamardin and I'm a developer at Mail.Ru.&lt;/p&gt;
&lt;p&gt;This article is about how we developed the high-load WebSocket server with Go.&lt;/p&gt;
&lt;p&gt;If you are familiar with WebSocket, but know little about Go, I hope you will still find this article interesting in terms of ideas and techniques for performance optimization.&lt;/p&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;To define the context of our story, a few words should be said about why we need this server.&lt;/p&gt;
&lt;p&gt;Mail.Ru has a lot of stateful systems. User email storage is obviously one of them. There are several ways of how you can know about system state changes – about the system events. Mostly it is either through periodic system polling or, reversely, system notifications about its state changes.&lt;/p&gt;
&lt;p&gt;Both ways have their pros and cons; however, when it comes to mail, the faster a user receives new mail, the better. Mail polling involves about 50,000 HTTP queries per second, 60% of which return the 304 status meaning there are no changes in the mailbox.&lt;/p&gt;
&lt;p&gt;Therefore, in order to reduce the load on the servers and to speed up mail delivery to users, the decision was made to re-invent the wheel by writing a publisher-subscriber server (a.k.a. bus, message broker, event-channel etc.) that would receive notifications about state changes on the one hand and subscriptions for such notifications on the other.&lt;/p&gt;
&lt;p&gt;Previously:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-TeX&quot; data-lang=&quot;TeX&quot;&gt;+-----------+    (2)    +-----------+    (1)    +-----------+
|           | ◄-------+ |           | ◄-------+ |           |
|  Storage  |           |    API    |    HTTP   |  Browser  |
|           | +-------► |           | +-------► |           |
+-----------+    (3)    +-----------+    (4)    +-----------+
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-TeX&quot; data-lang=&quot;TeX&quot;&gt; +-------------+     +---------+   WebSocket   +-----------+
 |   Storage   |     |   API * | +-----------► |  Browser  |
 +-------------+     +---------+         (3)   +-----------+
        +             (2) ▲
        |                 |
    (1) ▼                 +     
+---------------------------------+
|               Bus               |
+---------------------------------+
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first scheme shows what it was like before. The browser periodically polled the API and asked about Storage (mailbox service) changes.&lt;/p&gt;
&lt;p&gt;The second scheme describes the new architecture. The browser establishes a WebSocket connection with notification API, which is a client to the Bus server. Upon receipt of new email, Storage sends a notification about it to Bus (1), and Bus to its subscribers (2). API determines the connection to send the received notification and sends it to the user browser (3).&lt;/p&gt;
&lt;p&gt;As you can guess, today we're going to talk about API or the WebSocket server. Looking ahead, I'll tell you that the server will have about 3 million online connections. This figure will not once be mentioned in our further story on optimization.&lt;/p&gt;
&lt;h2 id=&quot;2-idiomatic-way&quot;&gt;2. Idiomatic way&lt;/h2&gt;
&lt;p&gt;Let's see how we would implement certain parts of our server using plain Go features without any optimizations.&lt;/p&gt;
&lt;p&gt;Before we proceed with &lt;code&gt;net/http&lt;/code&gt;, let's talk about how we will send and receive data. The data which stands &lt;em&gt;above&lt;/em&gt; the WebSocket protocol (e.g. json objects) will hereinafter be referred to as &lt;em&gt;packets&lt;/em&gt;. Let's begin implementing the Channel structure that will contain the logic of sending and receiving such packets over the WebSocket connection.&lt;/p&gt;
&lt;h3 id=&quot;21-channel-struct&quot;&gt;2.1. Channel struct&lt;/h3&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Packet represents application level data.
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Packet&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Channel wraps user connection.
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// WebSocket connection.
&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Conn&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Outgoing packets queue.
&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Packet&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I'd like to draw your attention to the launch of two reading and writing goroutines. Each goroutine requires its own memory stack that may have an initial size of 2 to 8 Kbyte &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/runtime/stack.go#L64-L82&quot;&gt;depending on the operating system&lt;/a&gt; and Go version. Regarding the above mentioned number of 3 million online connections, we will need &lt;strong&gt;24 GB of memory&lt;/strong&gt; (with the stack of 4 Kbyte) for all connections. And that's without the memory allocated for the &lt;code&gt;Channel&lt;/code&gt; structure, the outgoing packets &lt;code&gt;ch.send&lt;/code&gt; and other internal fields.&lt;/p&gt;
&lt;h3 id=&quot;22-io-goroutines&quot;&gt;2.2. I/O goroutines&lt;/h3&gt;
&lt;p&gt;Let's have a look at the implementation of the “reader”:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We make a buffered read to reduce read syscalls.
&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bufio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readPacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty simple, right? We use the &lt;code&gt;bufio.Reader&lt;/code&gt; to reduce the number of &lt;code&gt;read()&lt;/code&gt; syscalls and to read as many as allowed by the &lt;code&gt;buf&lt;/code&gt; buffer size. Within the infinite loop, we expect new data to come. Please remember the words: &lt;em&gt;expect new data to come&lt;/em&gt;: we will return to them later.&lt;/p&gt;
&lt;p&gt;We will leave aside the parsing and processing of incoming packets, as it is not important for the optimizations we will talk about. However, &lt;code&gt;buf&lt;/code&gt; is worth our attention now: by default, it is 4 Kbyte which means another &lt;strong&gt;12 GB&lt;/strong&gt; of memory for our connections. There is a similar situation with the “writer”:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We make buffered write to reduce write syscalls. 
&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bufio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pkt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writePacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We iterate across the outgoing packets channel &lt;code&gt;c.send&lt;/code&gt; and write them to the buffer. This is, as our attentive readers can already guess, another 4 Kbyte and &lt;strong&gt;12 GB&lt;/strong&gt; of memory for our 3 million connections.&lt;/p&gt;
&lt;h3 id=&quot;23-http&quot;&gt;2.3. HTTP&lt;/h3&gt;
&lt;p&gt;We already have a simple &lt;code&gt;Channel&lt;/code&gt; implementation, now we need to get a WebSocket connection to work with. As we are still under the &lt;em&gt;Idiomatic Way&lt;/em&gt; heading, let's do it in the corresponding way.&lt;/p&gt;
&lt;blockquote readability=&quot;11.872&quot;&gt;
&lt;p&gt;If you don't know how WebSocket works, it should be mentioned that the client switches to the WebSocket protocol by means of a special HTTP mechanism called Upgrade. After the successful processing of an Upgrade request, the server and the client use the TCP connection to exchange binary WebSocket frames.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6455#section-5.2&quot;&gt;Here&lt;/a&gt; is a description of the frame structure inside the connection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;some/websocket&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/v1/ws&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;websocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please note that &lt;code&gt;http.ResponseWriter&lt;/code&gt; makes memory allocation for &lt;code&gt;bufio.Writer&lt;/code&gt; and &lt;code&gt;bufio.Reader&lt;/code&gt; (both with 4 Kbyte buffer) for &lt;code&gt;*http.Request&lt;/code&gt; initialization and further response writing.&lt;/p&gt;
&lt;p&gt;Regardless of the WebSocket library used, after a successful response to the Upgrade request, the &lt;a href=&quot;https://github.com/golang/go/blob/143bdc27932451200f3c8f4b304fe92ee8bba9be/src/net/http/server.go#L1862-L1869&quot;&gt;server receives&lt;/a&gt; I/O buffers together with the TCP connection after the &lt;code&gt;responseWriter.Hijack()&lt;/code&gt; call.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Hint: in some cases the &lt;code&gt;go:linkname&lt;/code&gt; can be used to return the buffers to the &lt;code&gt;sync.Pool&lt;/code&gt; inside &lt;code&gt;net/http&lt;/code&gt; through the call &lt;code&gt;net/http.putBufio{Reader,Writer}&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thus, we need another &lt;strong&gt;24 GB&lt;/strong&gt; of memory for 3 million connections.&lt;/p&gt;
&lt;p&gt;So, a total of &lt;strong&gt;72 Gbyte&lt;/strong&gt; of memory for the application that does nothing yet!&lt;/p&gt;
&lt;h2 id=&quot;3-optimizations&quot;&gt;3. Optimizations&lt;/h2&gt;
&lt;p&gt;Let's review what we talked about in the introduction part and remember how a user connection behaves. After switching to WebSocket, the client sends a packet with the relevant events or in other words subscribes for events. Then (not taking into account technical messages such as &lt;code&gt;ping/pong&lt;/code&gt;), the client may send nothing else for the whole connection lifetime.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;The connection lifetime may last from several seconds to several days.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So for the most time our &lt;code&gt;Channel.reader()&lt;/code&gt; and &lt;code&gt;Channel.writer()&lt;/code&gt; are waiting for the handling of data for receiving or sending. Along with them waiting are the I/O buffers of 4 Kbyte each.&lt;/p&gt;
&lt;p&gt;Now it is clear that certain things could be done better, couldn't they?&lt;/p&gt;
&lt;h3 id=&quot;31-netpoll&quot;&gt;3.1. Netpoll&lt;/h3&gt;
&lt;p&gt;Do you remember the &lt;code&gt;Channel.reader()&lt;/code&gt; implementation that &lt;em&gt;expected new data to come&lt;/em&gt; by getting locked on the &lt;code&gt;conn.Read()&lt;/code&gt; call inside the &lt;code&gt;bufio.Reader.Read()&lt;/code&gt;? If there was data in the connection, Go runtime “woke up” our goroutine and allowed it to read the next packet. After that, the goroutine got locked again while expecting new data. Let's see how Go runtime understands that the goroutine must be “woken up”.&lt;/p&gt;
&lt;p&gt;If we look at the &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/net/net.go#L176-L186&quot;&gt;conn.Read() implementation&lt;/a&gt;, we'll see the &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/net/fd_unix.go#L245-L257&quot;&gt;net.netFD.Read() call&lt;/a&gt; inside it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// net/fd_unix.go
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;netFD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sysfd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EAGAIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;waitRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;           &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Go uses sockets in non-blocking mode. EAGAIN says there is no data in the socket and not to get locked on reading from the empty socket, OS returns control to us.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We see a &lt;code&gt;read()&lt;/code&gt; syscall from the connection file descriptor. If read returns the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/read.2.html#ERRORS&quot;&gt;EAGAIN error&lt;/a&gt;, runtime makes the &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/net/fd_poll_runtime.go#L74-L81&quot;&gt;pollDesc.waitRead() call&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// net/fd_poll_runtime.go
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pollDesc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;waitRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pollDesc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runtime_pollWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runtimeCtx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we &lt;a href=&quot;https://github.com/golang/go/blob/143bdc27932451200f3c8f4b304fe92ee8bba9be/src/runtime/netpoll.go#L14-L20&quot;&gt;dig deeper&lt;/a&gt;, we'll &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/runtime/netpoll_epoll.go&quot;&gt;see&lt;/a&gt; that netpoll is implemented using &lt;a href=&quot;http://man7.org/linux/man-pages/man7/epoll.7.html&quot;&gt;epoll&lt;/a&gt;in Linux and &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;kqueue&lt;/a&gt; in BSD. Why not use the same approach for our connections? We could allocate a read buffer and start the reading goroutine only when it is really necessary: when there is really readable data in the socket.&lt;/p&gt;
&lt;blockquote readability=&quot;5.6052631578947&quot;&gt;
&lt;p&gt;On github.com/golang/go, there is the &lt;a href=&quot;https://github.com/golang/go/issues/15735#issuecomment-266574151&quot;&gt;issue&lt;/a&gt; of exporting netpoll functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;32-getting-rid-of-goroutines&quot;&gt;3.2. Getting rid of goroutines&lt;/h3&gt;
&lt;p&gt;Suppose we have &lt;a href=&quot;https://godoc.org/github.com/mailru/easygo/netpoll&quot;&gt;netpoll implementation&lt;/a&gt; for Go. Now we can avoid starting the &lt;code&gt;Channel.reader()&lt;/code&gt; goroutine with the inside buffer, and subscribe for the event of readable data in the connection:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Make conn to be observed by netpoll instance.
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;netpoll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EventRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We spawn goroutine here to prevent poller wait loop
&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// to become locked during receiving packet from ch.
&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Receive reads a packet from conn and handles it somehow.
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bufio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;pkt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readPacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pkt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is easier with the &lt;code&gt;Channel.writer()&lt;/code&gt; because we can run the goroutine and allocate the buffer only when we are going to send the packet:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;noWriterYet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;Note that we do not handle cases when operating system returns &lt;code&gt;EAGAIN&lt;/code&gt; on &lt;code&gt;write()&lt;/code&gt; system calls. We lean on Go runtime for such cases, cause it is actually rare for such kind of servers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After reading the outgoing packets from &lt;code&gt;ch.send&lt;/code&gt; (one or several), the writer will finish its operation and free the goroutine stack and the send buffer.&lt;/p&gt;
&lt;p&gt;Perfect! We have saved &lt;strong&gt;48 GB&lt;/strong&gt; by getting rid of the stack and I/O buffers inside of two continuously running goroutines.&lt;/p&gt;
&lt;h3 id=&quot;33-control-of-resources&quot;&gt;3.3. Control of resources&lt;/h3&gt;
&lt;p&gt;A great number of connections involves not only high memory consumption. When developing the server, we experienced repeated race conditions and deadlocks often followed by the so-called self-DDoS — a situation when the application clients rampantly tried to connect to the server thus breaking it even more.&lt;/p&gt;
&lt;p&gt;For example, if for some reason we suddenly could not handle &lt;code&gt;ping/pong&lt;/code&gt; messages, but the handler of idle connections continued to close such connections (supposing that the connections were broken and therefore provided no data), the client appeared to lose connection every N seconds and tried to connect again instead of waiting for events.&lt;/p&gt;
&lt;p&gt;It would be great if the locked or overloaded server just stopped accepting new connections, and the balancer before it (for example, nginx) passed request to the next server instance.&lt;/p&gt;
&lt;p&gt;Moreover, regardless of the server load, if all clients suddenly want to send us a packet for any reason (presumably by cause of bug), the previously saved &lt;strong&gt;48 GB&lt;/strong&gt; will be of use again, as we will actually get back to the initial state of the goroutine and the buffer per each connection.&lt;/p&gt;
&lt;h4 id=&quot;331-goroutine-pool&quot;&gt;3.3.1. Goroutine pool&lt;/h4&gt;
&lt;p&gt;We can restrict the number of packets handled simultaneously using a goroutine pool. This is what a naive implementation of such pool looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gopool&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;work&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our code with &lt;code&gt;netpoll&lt;/code&gt; looks as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gopool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;netpoll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EventRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We will block poller wait loop when
&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// all pool workers are busy.
&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now we read the packet not only upon readable data appearance in the socket, but also upon the first opportunity to take up the free goroutine in the pool.&lt;/p&gt;
&lt;p&gt;Similarly, we'll change &lt;code&gt;Send()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gopool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;noWriterYet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of &lt;code&gt;go ch.writer()&lt;/code&gt;, we want to write in one of the reused goroutines. Thus, for a pool of &lt;code&gt;N&lt;/code&gt; goroutines, we can guarantee that with &lt;code&gt;N&lt;/code&gt; requests handled simultaneously and the arrived &lt;code&gt;N + 1&lt;/code&gt; we will not allocate a &lt;code&gt;N + 1&lt;/code&gt; buffer for reading. The goroutine pool also allows us to limit &lt;code&gt;Accept()&lt;/code&gt; and &lt;code&gt;Upgrade()&lt;/code&gt; of new connections and to avoid most situations with DDoS.&lt;/p&gt;
&lt;h3 id=&quot;34-zerocopy-upgrade&quot;&gt;3.4. Zero-copy upgrade&lt;/h3&gt;
&lt;p&gt;Let's deviate a little from the WebSocket protocol. As was already mentioned, the client switches to the WebSocket protocol using a HTTP Upgrade request. This is what it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-http&quot; data-lang=&quot;http&quot;&gt;&lt;span class=&quot;nf&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;/ws&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;mail.ru&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;Upgrade&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sec-Websocket-Key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;A3xNe7sEB9HixkmBhVrYaA==&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sec-Websocket-Version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Upgrade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;websocket&lt;/span&gt;

&lt;span class=&quot;g&quot;&gt;HTTP/1.1 101 Switching Protocols
&lt;/span&gt;&lt;span class=&quot;g&quot;&gt;Connection: Upgrade
&lt;/span&gt;&lt;span class=&quot;g&quot;&gt;Sec-Websocket-Accept: ksu0wXWG+YmkVx+KQR2agP0cQn4=
&lt;/span&gt;&lt;span class=&quot;g&quot;&gt;Upgrade: websocket
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is, in our case we need the HTTP request and its headers only for switch to the WebSocket protocol. This knowledge and &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/net/http/request.go#L100-L305&quot;&gt;what is stored&lt;/a&gt; inside the &lt;code&gt;http.Request&lt;/code&gt; suggests that for the sake of optimization, we could probably refuse unnecessary allocations and copyings when processing HTTP requests and abandon the standard &lt;code&gt;net/http&lt;/code&gt; server.&lt;/p&gt;
&lt;blockquote readability=&quot;8.8&quot;&gt;
&lt;p&gt;For example, the &lt;code&gt;http.Request&lt;/code&gt; contains a &lt;a href=&quot;https://github.com/golang/go/blob/release-branch.go1.8/src/net/http/header.go#L19&quot;&gt;field with the same-name Header type&lt;/a&gt; that is unconditionally filled with all request headers by copying data from the connection to the values strings. Imagine how much extra data could be kept inside this field, for example for a large-size Cookie header.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But what to take in return?&lt;/p&gt;
&lt;h4 id=&quot;341-websocket-implementation&quot;&gt;3.4.1 WebSocket implementation&lt;/h4&gt;
&lt;p&gt;Unfortunately, all libraries existing at the time of our server optimization allowed us to do upgrade only for the standard &lt;code&gt;net/http&lt;/code&gt; server. Moreover, neither of the (two) libraries made it possible to use all the above read and write optimizations. For these optimizations to work, we must have a rather low-level API for working with WebSocket. To reuse the buffers, we need the procotol functions to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WriteFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we had a library with such API, we could read packets from the connection as follows (the packet writing would look the same):&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// getReadBuf, putReadBuf are intended to 
&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// reuse *bufio.Reader (with sync.Pool for example).
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReadBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bufio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Reader&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putReadBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bufio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// readPacket must be called when data could be read from conn.
&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readPacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReadBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putReadBuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;parsePacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In short, it was time to make our own library.&lt;/p&gt;
&lt;h4 id=&quot;342-githubcomgobwasws&quot;&gt;3.4.2. github.com/gobwas/ws&lt;/h4&gt;
&lt;p&gt;Ideologically, the &lt;code&gt;ws&lt;/code&gt; library was written so as not to impose its protocol operation logic on users. All reading and writing methods accept standard &lt;code&gt;io.Reader&lt;/code&gt; and &lt;code&gt;io.Writer&lt;/code&gt; interfaces, which makes it possible to use or not to use buffering or any other I/O wrappers.&lt;/p&gt;
&lt;p&gt;Besides upgrade requests from standard &lt;code&gt;net/http&lt;/code&gt;, &lt;code&gt;ws&lt;/code&gt; supports &lt;strong&gt;zero-copy upgrade&lt;/strong&gt;, the handling of upgrade requests and switching to WebSocket without memory allocations or copyings. &lt;code&gt;ws.Upgrade()&lt;/code&gt; accepts &lt;code&gt;io.ReadWriter&lt;/code&gt; (&lt;code&gt;net.Conn&lt;/code&gt; implements this interface). In other words, we could use the standard &lt;code&gt;net.Listen()&lt;/code&gt; and transfer the received connection from &lt;code&gt;ln.Accept()&lt;/code&gt; immediately to &lt;code&gt;ws.Upgrade()&lt;/code&gt;. The library makes it possible to copy any request data for future use in the application (for example, &lt;code&gt;Cookie&lt;/code&gt; to verify the session).&lt;/p&gt;
&lt;p&gt;Below there are &lt;a href=&quot;https://github.com/gobwas/ws/blob/f9c54e121bd17f7e6b9b283bd0299d19149f270b/server_test.go#L397-L464&quot;&gt;benchmarks&lt;/a&gt; of Upgrade request processing: standard &lt;code&gt;net/http&lt;/code&gt; server versus &lt;code&gt;net.Listen()&lt;/code&gt; with zero-copy upgrade:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;BenchmarkUpgradeHTTP    &lt;span class=&quot;m&quot;&gt;5156&lt;/span&gt; ns/op    &lt;span class=&quot;m&quot;&gt;8576&lt;/span&gt; B/op    &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; allocs/op
BenchmarkUpgradeTCP     &lt;span class=&quot;m&quot;&gt;973&lt;/span&gt; ns/op     &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; B/op       &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; allocs/op
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Switching to &lt;code&gt;ws&lt;/code&gt; and &lt;strong&gt;zero-copy upgrade&lt;/strong&gt; saved us another &lt;strong&gt;24 GB&lt;/strong&gt; — the space allocated for I/O buffers upon request processing by the &lt;code&gt;net/http&lt;/code&gt; handler.&lt;/p&gt;
&lt;h3 id=&quot;35-summary&quot;&gt;3.5. Summary&lt;/h3&gt;
&lt;p&gt;Let's structure the optimizations I told you about.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A read goroutine with a buffer inside is expensive. &lt;strong&gt;Solution&lt;/strong&gt;: netpoll (epoll, kqueue); reuse the buffers.&lt;/li&gt;
&lt;li&gt;A write goroutine with a buffer inside is expensive. &lt;strong&gt;Solution&lt;/strong&gt;: start the goroutine when necessary; reuse the buffers.&lt;/li&gt;
&lt;li&gt;With a storm of connections, netpoll won't work. &lt;strong&gt;Solution&lt;/strong&gt;: reuse the goroutines with the limit on their number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net/http&lt;/code&gt; is not the fastest way to handle Upgrade to WebSocket. &lt;strong&gt;Solution&lt;/strong&gt;: use the zero-copy upgrade on bare TCP connection.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;That is what the server code could look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;chroma&quot;&gt;
&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;net&quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;github.com/gobwas/ws&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tcp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Try to accept incoming connection inside free pool worker.
&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// If there no free workers for 1ms, do not accept anything and try later.
&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// This will help us to prevent many self-ddos or out of resource limit cases.
&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ScheduleTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Upgrade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Wrap WebSocket connection with our Channel struct.
&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// This will help us to handle/send our app's packets.
&lt;/span&gt;           &lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NewChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Wait for incoming bytes from connection.
&lt;/span&gt;           &lt;span class=&quot;nx&quot;&gt;poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;netpoll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EventRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// Do not cross the resource limits.
&lt;/span&gt;                   &lt;span class=&quot;nx&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Schedule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// Read and handle incoming packet(s).
&lt;/span&gt;                           &lt;span class=&quot;nx&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Recevie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   
                &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;4-conclusion&quot;&gt;4. Conclusion&lt;/h2&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Premature optimization is the root of all evil (or at least most of it) in programming. Donald Knuth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, the above optimizations are relevant, but not in all cases. For example if the ratio between free resources (memory, CPU) and the number of online connections is rather high, there is probably no sense in optimizing. However, you can benefit a lot from knowing where and what to improve.&lt;/p&gt;
&lt;p&gt;Thank you for your attention!&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
</description>
<pubDate>Mon, 23 Dec 2019 18:20:21 +0000</pubDate>
<dc:creator>riobard</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gbws.io/articles/million-websocket-and-go/</dc:identifier>
</item>
</channel>
</rss>