<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Bill Gates promises to add his own billions if Congress does nuclear power push</title>
<link>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</link>
<guid isPermaLink="true" >https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</guid>
<description>&lt;img class=&quot;size-full-width wp-image-365941&quot; src=&quot;https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-630x536.jpg&quot; alt=&quot;&quot; width=&quot;630&quot; height=&quot;536&quot; srcset=&quot;https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-630x536.jpg 630w, https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-768x654.jpg 768w, https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-1260x1073.jpg 1260w&quot; sizes=&quot;(max-width: 630px) 100vw, 630px&quot;/&gt;Microsoft co-founder and philanthropist Bill Gates. (GeekWire Photo / Kevin Lisota)
&lt;p&gt;Bill Gates said in his &lt;a href=&quot;https://www.geekwire.com/2018/china-option-fades-bill-gates-urges-u-s-take-lead-nuclear-power-good-planet/&quot;&gt;year-end letter last month&lt;/a&gt; that he planned to work to persuade U.S. leaders to embrace advanced nuclear technologies as a solution to curbing climate change. That work appears to have begun as &lt;a href=&quot;https://www.washingtonpost.com/national/health-science/bill-gates-comes-to-washington--selling-the-promise-of-nuclear-energy/2019/01/25/4bd9c030-1445-11e9-b6ad-9cfd62dbb0a8_story.html?utm_term=.b3903fced86b&quot;&gt;The Washington Post reported&lt;/a&gt; Friday that Gates is making the rounds on Capitol Hill looking for support — and billions of dollars.&lt;/p&gt;&lt;p&gt;Gates founded the Bellevue, Wash.-based TerraPower in 2006, and the venture had been working toward building a pilot project for its traveling-wave nuclear technology in China. Policy regulations put in place by the Trump administration have made that unlikely and Gates is hoping to make his grand plan happen in the U.S.&lt;/p&gt;
&lt;p&gt;The Post reported, based on accounts from congressional staffers, that the Microsoft co-founder is telling lawmakers that he personally would invest $1 billion and raise $1 billion more in private capital to go along with federal funds for TerraPower’s pilot plan.&lt;/p&gt;

&lt;p&gt;Gates has reportedly met with lawmakers from both parties, including Sens. Lamar Alexander (R-Tenn.) and Dianne Feinstein (D-Calif.). He also met with Sen. Lisa Murkowski (R-Alaska) and three other senators last month.&lt;/p&gt;
&lt;p&gt;Jonah Goldman, of Gates Ventures, stressed to The Post that Gates was not advocating for TerraPower alone. Gates thinks the U.S. has “the best minds, the best lab systems and entrepreneurs willing to take risk,” Goldman told the newspaper. “But what we don’t have is a commitment on Congress’ part.”&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The world needs energy breakthroughs that improve people’s lives without contributing to climate change. As &lt;a href=&quot;https://twitter.com/IEA?ref_src=twsrc%5Etfw&quot;&gt;@IEA&lt;/a&gt; highlights in its latest report, governments have an incredible opportunity to shape the future of energy. &lt;a href=&quot;https://t.co/YCPep4ytgn&quot;&gt;https://t.co/YCPep4ytgn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Bill Gates (@BillGates) &lt;a href=&quot;https://twitter.com/BillGates/status/1085225853963956224?ref_src=twsrc%5Etfw&quot;&gt;January 15, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 26 Jan 2019 20:23:14 +0000</pubDate>
<dc:creator>jkuria</dc:creator>
<og:image>https://cdn.geekwire.com/wp-content/uploads/2017/09/20170927_Bill_Gates_GBD_20_305-1260x1073.jpg</og:image>
<og:type>article</og:type>
<og:title>Report: Bill Gates promises to add his own billions if Congress helps with his nuclear power push</og:title>
<og:description>Bill Gates said in his year-end letter last month that he planned to work to persuade U.S. leaders to embrace advanced nuclear technologies as a solution to curbing climate change. That work appears to have begun.</og:description>
<og:url>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.geekwire.com/2019/report-bill-gates-promises-add-billions-congress-helps-nuclear-power-push/</dc:identifier>
</item>
<item>
<title>We value your privacy now, but maybe not later</title>
<link>https://raimue.blog/2019/01/26/we-value-your-privacy-now-but-maybe-not-later/</link>
<guid isPermaLink="true" >https://raimue.blog/2019/01/26/we-value-your-privacy-now-but-maybe-not-later/</guid>
<description>&lt;p&gt;Everybody knows these modal dialogs when visiting a website for the first time that ask you to accept cookies and consent to being tracked by third-party advertising networks. It actually became a habit for me to always click through these things and reject any kind of tracking or use of my personal information except for the “required” cookies.&lt;/p&gt;
&lt;p&gt;But today, I came across this dialog on &lt;a href=&quot;https://www.atlasobscura.com/&quot;&gt;atlasobscura.com&lt;/a&gt; with the title &lt;em&gt;We value your privacy&lt;/em&gt;:&lt;/p&gt;
&lt;img src=&quot;https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-1024x708.png&quot; alt=&quot;&quot; class=&quot;wp-image-1235&quot; srcset=&quot;https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-1024x708.png 1024w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-300x208.png 300w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-768x531.png 768w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15-624x432.png 624w, https://raimue.blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-26-at-17.22.15.png 1194w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;p&gt;I highly doubt Atlas Obscura actually values my privacy when the only option is to “accept”. By the way, if you actually follow to the privacy policy to “withdraw consent”, access to the content is still blocked by this modal dialog on the next visit. Leaving technical details aside, for the layperson there is in fact no other choice than clicking “accept”, if they want to get access to the website.&lt;/p&gt;

&lt;p&gt;Now, if you actually read their &lt;a href=&quot;https://www.atlasobscura.com/privacy&quot;&gt;privacy policy&lt;/a&gt; in detail, it contains this one phrase that really stired up my blood even more:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote is-style-default&quot;&gt;
&lt;p&gt;Atlas Obscura may, at its sole discretion, modify this Privacy Policy at any time. By accessing the Website at any time after such modifications, you are agreeing to such modifications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How can such a privacy policy be legal? They claim to value my privacy and I can review what they mean by that in the policy. However, at the same time they do not commit to keep it like that and might not “value my privacy” at any later point in time.&lt;/p&gt;
&lt;p&gt;Now think this further. If this clause is in fact legal, we could set up a website with a volatile privacy policy. That would be a privacy policy that changes on every visit of the website.&lt;/p&gt;
&lt;p&gt;As an example, on the first visit, we happily tell the visitor that we do not collect any information, do not use personal information, and of course also do not sell any kinds of data to adverstising networks. However, as soon as the visitor accepted this policy (of course they are privacy aware and read the policy), it will suddenly change to the opposite. The visitor will never be informed or even asked for consent again.&lt;/p&gt;
&lt;p&gt;Would you agree to a contract that can be changed by the other party at any time in any way? You get the idea. Of course, actually implementing a privacy policy changing unexpectedly would include malice, so the visitor might have a case against it, but only if they ever notice…&lt;/p&gt;
&lt;p&gt;I just took Atlas Obscura as an example of such a policy and I do not mean to only blame this website in particular. There are in fact a lot of other sites on the web that apply &lt;a href=&quot;https://www.google.com/search?q=%22may%2C%20at%20its%20sole%20discretion%2C%20modify%20this%20Privacy%20Policy%20at%20any%20time.%22&quot;&gt;the same or a similar privacy policy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If your privacy policy contains a clause that allows you to change the policy without asking me for consent, you do not actually value my privacy.&lt;/p&gt;

</description>
<pubDate>Sat, 26 Jan 2019 18:19:45 +0000</pubDate>
<dc:creator>raimue</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://raimue.blog/2019/01/26/we-value-your-privacy-now-but-maybe-not-later/</dc:identifier>
</item>
<item>
<title>“Facebook are going to monetize encrypted messaging by consolidating metadata”</title>
<link>https://threader.app/thread/1088914192847917056</link>
<guid isPermaLink="true" >https://threader.app/thread/1088914192847917056</guid>
<description>&lt;div class=&quot;thread-head&quot;&gt;

&lt;div class=&quot;pic-user d-inline&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://threader.app/@sarahjamielewis&quot;&gt;&lt;img id=&quot;post-img-user&quot; class=&quot;users-thread&quot; src=&quot;https://pbs.twimg.com/profile_images/1040578228195414016/jlfiC_Gz.jpg&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;p class=&quot;thread-part&quot; id=&quot;thread-post-start&quot;&gt;Facebook are going to monetize encrypted messaging by consolidating metadata analysis of 3 key platforms (Messenger, Whatsapp &amp;amp; Instagram). They will make money by tracking your relationships and social groups. They will make that information easily accessible to law enforcement.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;They will build the largest surveillance system ever conceived and will sell it under the banner of consumer encryption.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;They will say that this delivers on the dream of secure usable communication that balances privacy, security and law enforcement.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;We @&lt;a class=&quot;tweet-url username&quot; href=&quot;https://twitter.com/OpenPriv&quot; data-screen-name=&quot;OpenPriv&quot; rel=&quot;nofollow&quot;&gt;OpenPriv&lt;/a&gt; believe that your social connections, friendship groups and patterns of life should not be monetized or sold for profit. We believe that actual privacy and security must protect metadata as well as content.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;Sex Workers and Queer People are already facing the wrath of Facebook's metadata collection. Facebook already puts them in danger by outing them to people it assumes they know, allow them to be directly targeted, and directly censored, based on assumed associations.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;When we celebrate Facebook bringing end to end encryption to millions more people we miss the forest for the trees.&lt;/p&gt;&lt;p&gt;The point of all this isn't accessible privacy it's inaccessible surveillance.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;We, @&lt;a class=&quot;tweet-url username&quot; href=&quot;https://twitter.com/OpenPriv&quot; data-screen-name=&quot;OpenPriv&quot; rel=&quot;nofollow&quot;&gt;OpenPriv&lt;/a&gt;, are building Cwtch, a metadata resistant communication tool, (&lt;a href=&quot;https://openprivacy.ca/blog/2018/06/28/announcing-cwtch/&quot; title=&quot;https://openprivacy.ca/blog/2018/06/28/announcing-cwtch/&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;span class=&quot;js-display-url&quot;&gt;openprivacy.ca/blog/2018/06/2&lt;/span&gt;&lt;span&gt;8/announcing-cwtch/&lt;/span&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;…&lt;/span&gt;&lt;/a&gt;) as a non-profit because we *know* that you can't protect the most marginalized people in society AND also make money.&lt;/p&gt;&lt;p&gt;We will be releasing an alpha of Cwtch on February 14th.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;Facebook is not a secure space for sex workers and queer people. What happens when the current content policies and moderation capabilities are extended and augmented by metadata analysis from private chat apps?&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;What happens when Facebook is forced by a conservative government to hand over group relationships of groups it has categorized as &quot;interested in sex work&quot; all wrapped up with a Facebook augmented social graph.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;What kind of world do you think we are actually building?&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;This isn't a conspiracy theory. This is just how the world works today extrapolated into the future - with optimism that things don't get worse.&lt;/p&gt;&lt;p&gt;Spoiler alert: Things are going to get worse.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;The truth is that there are way worse scenarios to confront if we assume that 1 corporation is going to own and operate the largest, encrypted communication network ever.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;A few months ago I wrote a position paper for a conference on the future of cybersecurity and the same points apply to this. We need surveillance resistant tech.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://openprivacy.ca/assets/open-privacy-position-paper-ccd-2018.pdf&quot; title=&quot;https://openprivacy.ca/assets/open-privacy-position-paper-ccd-2018.pdf&quot; rel=&quot;nofollow&quot;&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;span class=&quot;js-display-url&quot;&gt;openprivacy.ca/assets/open-pr&lt;/span&gt;&lt;span&gt;ivacy-position-paper-ccd-2018.pdf&lt;/span&gt;&lt;span class=&quot;tco-ellipsis&quot;&gt;&lt;span&gt; &lt;/span&gt;…&lt;/span&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p class=&quot;thread-part&quot;&gt;Facebook isn't a public utility, they are a corporation that needs to make money, and the way they make money is through surveillance.&lt;/p&gt;&lt;p&gt;You get to decided if you want to be part of their economy.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;To undercut myself a little - the vast majority of you likely have nothing to lose by being part of the economy. For many it will likely be much better.&lt;/p&gt;&lt;p&gt;For those of us who experience systemic oppression, those of us who know the harms of surveillance, can see what is coming.&lt;/p&gt;
&lt;p class=&quot;thread-part&quot;&gt;With the exception of the particular NYTimes article that confirmed some of these future Facebook plans, nothing I have said in this thread is new, the risks aren't new, the concerns aren't new.&lt;/p&gt;&lt;p&gt;This thread isn't a warning, it is a reminder.&lt;/p&gt;
&lt;p&gt;You can follow &lt;a href=&quot;https://twitter.com/SarahJamieLewis&quot;&gt;Sarah Jamie Lewis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;share-info&quot;&gt;Share this thread&lt;/span&gt;&lt;span class=&quot;bookmark-info&quot;&gt;Bookmark&lt;/span&gt;
&lt;/p&gt;&lt;p&gt;____&lt;br/&gt;Tip: mention &lt;a href=&quot;https://twitter.com/threader_app&quot; target=&quot;_blank&quot;&gt;@threader_app&lt;/a&gt; on a Twitter thread with the keyword “compile” to get a link to it.&lt;/p&gt;&lt;p&gt;Enjoy Threader? &lt;a href=&quot;https://threader.app/thread/1088914192847917056#&quot; data-target=&quot;#modalsignup&quot; id=&quot;popsignup&quot;&gt;Sign up&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;span id=&quot;download-url&quot;&gt;Download &lt;a href=&quot;https://itunes.apple.com/us/app/threader/id1317519091?mt=8&quot; target=&quot;_blank&quot;&gt;Threader&lt;/a&gt; on iOS.&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 26 Jan 2019 16:25:18 +0000</pubDate>
<dc:creator>mariedm</dc:creator>
<og:title>A thread written by @SarahJamieLewis</og:title>
<og:image>https://pbs.twimg.com/media/Dxyf1viUcAAnIGP.jpg</og:image>
<og:description>Facebook are going to monetize encrypted messaging by consolidating metadata analysis of 3 key platforms (Messenger, Whatsapp &amp;amp; Instagram). They will make money by tracking your relationships and social groups. They will make that information easily accessible to law enforcement.</og:description>
<og:url>https://threader.app/thread/1088914192847917056</og:url>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://threader.app/thread/1088914192847917056</dc:identifier>
</item>
<item>
<title>Why Are Young People Pretending to Love Work?</title>
<link>https://www.nytimes.com/2019/01/26/business/against-hustle-culture-rise-and-grind-tgim.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/01/26/business/against-hustle-culture-rise-and-grind-tgim.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Never once at the start of my workweek — not in my morning coffee shop line; not in my crowded subway commute; not as I begin my bottomless inbox slog — have I paused, looked to the heavens and whispered: #ThankGodIt’sMonday.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Apparently, that makes me a traitor to my generation. I learned this during a series of recent visits to WeWork locations in New York, where the throw pillows implore busy tenants to “Do what you love.” Neon signs demand they “Hustle harder,” and murals spread the gospel of T.G.I.M. Even the cucumbers in WeWork’s water coolers have an agenda. “Don’t stop when you’re tired,” someone &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://twitter.com/StevieBuckley/status/1040185357948608513&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;recently carved&lt;/a&gt; into the floating vegetables’ flesh. “Stop when you are done.” Kool-Aid drinking metaphors are rarely this literal.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Welcome to hustle culture. It is obsessed with striving, relentlessly positive, devoid of humor, and — once you notice it — impossible to escape. “Rise and Grind” is both the theme of a &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.youtube.com/watch?v=s-ua5tDFaJM&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Nike ad campaign&lt;/a&gt; and the title of a &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.amazon.com/dp/B0727T8WYZ/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;book&lt;/a&gt; by a “Shark Tank” shark. New media upstarts like the Hustle, which produces a popular business newsletter and conference series, and One37pm, a content company created by the patron saint of hustling, Gary Vaynerchuk, glorify ambition not as a means to an end, but as a lifestyle.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“The current state of entrepreneurship is bigger than career,” reads the One37pm &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.one37pm.com/about&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;“About Us” page&lt;/a&gt;. “It’s ambition, grit and hustle. It’s a live performance that lights up your creativity … a sweat session that sends your endorphins coursing ... a visionary who expands your way of thinking.” From this point of view, not only does one never stop hustling — one never exits a kind of work rapture, in which the chief purpose of exercising or attending a concert is to get inspiration that leads back to the desk.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Ryan Harwood, the chief executive of One37pm’s parent company, told me that the site’s content is aimed at a younger generation of people who are seeking permission to follow their dreams. “They want to know how to own their moment, at any given moment,” he said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“Owning one’s moment” is a clever way to rebrand “surviving the rat race.” In the new work culture, enduring or even merely liking one’s job is not enough. Workers should &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;love&lt;/em&gt; what they do, and then promote that love on social media, thus fusing their identities to that of their employers. Why else would LinkedIn &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://qz.com/work/1470970/linkedin-is-testing-an-instagram-stories-competitor/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;build its own version&lt;/a&gt; of Snapchat Stories?&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;This is toil glamour, and it is going mainstream. Most visibly, WeWork — which investors recently valued at $47 billion — is on its way to becoming the Starbucks of office culture. It has exported its brand of performative workaholism to 27 countries, with 400,000 tenants, including workers from 30 percent of the Global Fortune 500.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In January, WeWork’s founder, Adam Neumann, announced that his start-up was rebranding itself as the We Company, to reflect an expansion into residential real estate and education. Describing the shift, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.fastcompany.com/90289512/exclusive-wework-to-rebrand-to-the-we-company-in-wake-of-disappointing-funding-news&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Fast Company&lt;/a&gt; wrote: “Rather than just renting desks, the company aims to encompass all aspects of people’s lives, in both physical and digital worlds.” The ideal client, one imagines, is someone so enamored of the WeWork office aesthetic — whip-cracking cucumbers and all — that she sleeps in a WeLive apartment, works out at a Rise by We gym, and sends her children to a WeGrow school.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;From this vantage, “Office Space,” the Gen-X slacker paean that came out 20 years ago next month, feels like science fiction from a distant realm. It’s almost impossible to imagine a start-up worker bee of today confessing, as protagonist Peter Gibbons does, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.quickmeme.com/meme/3u7bxz&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;“It’s not that I’m lazy. It’s that I just don’t care.”&lt;/a&gt; Workplace indifference just doesn’t have a socially acceptable hashtag.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;h2 class=&quot;css-sbs9ef eoo0vm40&quot; id=&quot;link-3ac70863&quot;&gt;‘It’s grim and exploitative’&lt;/h2&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;It’s not difficult to view hustle culture as a swindle. After all, convincing a generation of workers to beaver away is convenient for those at the top.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“The vast majority of people beating the drums of hustle-mania are not the people doing the actual work. They’re the managers, financiers and owners,” said David Heinemeier Hansson, the co-founder of Basecamp, a software company. We spoke in October, as he was promoting his new book, “&lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.amazon.com/Doesnt-Have-Be-Crazy-Work/dp/0062874780&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;It Doesn’t Have to Be Crazy at Work&lt;/a&gt;,” about creating healthy company cultures.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Heinemeier Hansson said that despite data showing long hours improve neither productivity nor creativity, myths about overwork persist because they justify the extreme wealth created for a small group of elite techies. “It’s grim and exploitative,” he said.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Elon Musk, who stands to &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/01/23/business/dealbook/tesla-elon-musk-pay.html?module=inline&quot; title=&quot;&quot;&gt;reap stock compensation&lt;/a&gt; upward of $50 billion if his company, Tesla, meets certain performance levels, is a prime example of extolling work by the many that will primarily benefit him. He &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://twitter.com/elonmusk/status/1067173497909141504&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;tweeted&lt;/a&gt; in November that there are easier places to work than Tesla, “but nobody ever changed the world on 40 hours a week.” The correct number of hours “varies per person,” he continued, but is “about 80 sustained, peaking about 100 at times. Pain level increases exponentially above 80.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Musk, who has more than 24 million Twitter followers, further noted that if you love what you do, “it (mostly) doesn’t feel like work.” Even he had to soften the lie of T.G.I.M. with a parenthetical.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Arguably, the technology industry started this culture of work zeal sometime around the turn of the millennium, when the likes of Google started to feed, massage and even play doctor to its employees. The perks were meant to help companies attract the best talent — and keep employees at their desks longer. It seemed enviable enough: Who wouldn’t want an employer that literally took care of your dirty laundry?&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;But today, as tech culture infiltrates every corner of the business world, its hymns to the virtues of relentless work remind me of nothing so much as &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.pbs.org/newshour/world/these-soviet-propaganda-posters-meant-to-evoke-heroism-pride&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Soviet-era propaganda&lt;/a&gt;, which promoted impossible-seeming feats of worker productivity to motivate the labor force. One obvious difference, of course, is that those Stakhanovite posters had an &lt;em class=&quot;css-2fg4z9 e1gzwzxm0&quot;&gt;anti&lt;/em&gt;capitalist bent, criticizing the fat cats profiting from free enterprise. Today’s messages glorify personal profit, even if bosses and investors — not workers — are the ones capturing most of the gains. Wage growth has been essentially &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/interactive/2018/02/01/business/economy/wages-salaries-job-market.html?module=inline&quot; title=&quot;&quot;&gt;stagnant&lt;/a&gt; for years.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Perhaps we’ve all gotten a little hungry for meaning. Participation in organized religion &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;http://www.pewresearch.org/fact-tank/2015/05/12/millennials-increasingly-are-driving-growth-of-nones/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;is falling&lt;/a&gt;, especially among American millennials. In San Francisco, where I live, I’ve noticed that the concept of productivity has taken on an almost spiritual dimension. Techies here have internalized the idea — rooted in the Protestant work ethic — that work is not something you do to get what you want; the work itself is all. Therefore any life hack or company perk that optimizes their day, allowing them to fit in even more work, is not just desirable but inherently good.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Aidan Harper, who created a European workweek-shrinkage campaign called &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.4dayweek.co.uk/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;4 Day Week&lt;/a&gt;, argues that this is dehumanizing and toxic. “It creates the assumption that the only value we have as human beings is our productivity capability — our ability to work, rather than our humanity,” he told me.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;It’s cultist, Mr. Harper added, to convince workers to buy into their own exploitation with a change-the-world message. “It’s creating the idea that Elon Musk is your high priest,” he said. “You’re going into your church every day and worshiping at the altar of work.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;For congregants of the Cathedral of Perpetual Hustle, spending time on anything that’s nonwork related has become a reason to feel guilty. Jonathan Crawford, a San Francisco-based entrepreneur, told me that he sacrificed his relationships and gained more than 40 pounds while working on Storenvy, his e-commerce start-up. If he socialized, it was at a networking event. If he read, it was a business book. He rarely did anything that didn’t have a “direct R.O.I.,” or return on investment, for his company.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Crawford changed his lifestyle after he realized it made him miserable. Now, as an entrepreneur-in-residence at 500 Start-ups, an investment firm, he tells fellow founders to seek out nonwork-related activities like reading fiction, watching movies or playing games. Somehow this comes off as radical advice. “It’s oddly eye-opening to them because they didn’t realize they saw themselves as a resource to be expended,” Mr. Crawford said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;It’s easy to become addicted to the pace and stress of work in 2019. Bernie Klinder, a consultant for a large tech company, said he tried to limit himself to five 11-hour days per week, which adds up to an extra day of productivity. “If your peers are competitive, working a ‘normal workweek’ will make you look like a slacker,” he wrote in an email.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Still, he’s realistic about his place in the rat race. “I try to keep in mind that if I dropped dead tomorrow, all of my acrylic workplace awards would be in the trash the next day,” he wrote, “and my job would be posted in the paper before my obituary.”&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;h2 class=&quot;css-sbs9ef eoo0vm40&quot; id=&quot;link-7b07b7fb&quot;&gt;Lusty for Monday mornings&lt;/h2&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The logical endpoint of excessively avid work, of course, is burnout. That is the subject of a recent viral &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.buzzfeednews.com/article/annehelenpetersen/millennials-burnout-generation-debt-work&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;essay&lt;/a&gt; by the BuzzFeed cultural critic Anne Helen Petersen, which thoughtfully addresses one of the incongruities of hustle-mania in the young. Namely: If Millennials are supposedly lazy and entitled, how can they also be obsessed with killing it at their jobs?&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Millennials, Ms. Petersen argues, are just desperately striving to meet their own high expectations. An entire generation was raised to expect that good grades and extracurricular overachievement would reward them with fulfilling jobs that feed their passions. Instead, they wound up with precarious, meaningless work and a mountain of student loan debt. And so posing as a rise-and-grinder, lusty for Monday mornings, starts to make sense as a defense mechanism.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Most jobs — even most good jobs! — are full of &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.amazon.com/dp/B075RWG7YM/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;pointless drudgery&lt;/a&gt;. Most corporations let us down in some way. And yet years after the HBO satire “Silicon Valley” made the vacuous mission statement “making the world a better place” a recurring punch line, many companies still cheerlead the virtues of work with high-minded messaging. For example, Spotify, a company that lets you listen to music, says that its mission is “to unlock the potential of human creativity.” Dropbox, which lets you upload files and stuff, says its purpose is “to unleash the world’s creative energy by designing a more enlightened way of working.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;David Spencer, a professor of economics at Leeds University Business School, says that such posturing by companies, economists and politicians dates at least to the rise of mercantilism in 16th-century Europe. “There has been an ongoing struggle by employers to venerate work in ways that distract from its unappealing features,” he said. But such propaganda can backfire. In 17th-century England, work was lauded as a cure for vice, Mr. Spencer said, but the unrewarding truth just drove workers to drink more.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Internet companies may have miscalculated in encouraging employees to equate their work with their intrinsic value as human beings. After a long era of basking in positive esteem, the tech industry is experiencing a backlash both broad and fierce, on subjects from monopolistic behavior to spreading disinformation and inciting racial violence. And workers are discovering how much power they wield. In November, some 20,000 Googlers participated in a walkout protesting the company’s &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/01/technology/google-walkout-sexual-harassment.html?module=inline&quot; title=&quot;&quot;&gt;handling of sexual abusers&lt;/a&gt;. Other company employees shut down an artificial intelligence contract with the Pentagon that could have helped military drones become more lethal.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Heinemeier Hansson cited the employee protests as evidence that millennial workers would eventually revolt against the culture of overwork. “People aren’t going to stand for this,” he said, using an expletive, “or buy the propaganda that eternal bliss lies at monitoring your own bathroom breaks.” He was referring to an &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.bloomberg.com/features/2016-marissa-mayer-interview-issue/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;interview&lt;/a&gt; that the former chief executive of Yahoo, Marissa Mayer, gave in 2016, in which she said that working 130 hours a week was possible “if you’re strategic about when you sleep, when you shower, and how often you go to the bathroom.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Ultimately, workers must decide if they admire or reject this level of devotion. Ms. Mayer’s comments were widely panned on social media when the interview ran, but since then, Quora users have eagerly &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.quora.com/How-did-CEO-Marissa-Mayer-pull-all-nighters-and-130-hour-work-weeks-while-at-Google&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;shared their own strategies&lt;/a&gt; for mimicking her schedule. Likewise, Mr. Musk’s “pain level” tweets drew plenty of critical takes, but they also garnered just as many accolades and requests for jobs.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The grim reality of 2019 is that begging a billionaire for employment via Twitter is not considered embarrassing, but a perfectly plausible way to get ahead. On some level, you have to respect the hustlers who see a dismal system and understand that success in it requires total, shameless buy-in. If we’re doomed to toil away until we die, we may as well pretend to like it. Even on Mondays.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 26 Jan 2019 15:58:57 +0000</pubDate>
<dc:creator>mistersquid</dc:creator>
<og:url>https://www.nytimes.com/2019/01/26/business/against-hustle-culture-rise-and-grind-tgim.html</og:url>
<og:type>article</og:type>
<og:title>Why Are Young People Pretending to Love Work?</og:title>
<og:image>https://static01.nyt.com/images/2019/01/27/business/27HUSTLE-illo-promo/27HUSTLE-illo-promo-facebookJumbo.jpg</og:image>
<og:description>I saw the greatest minds of my generation log 18-hour days — and then boast about #hustle on Instagram. When did performative workaholism become a lifestyle?</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/01/26/business/against-hustle-culture-rise-and-grind-tgim.html</dc:identifier>
</item>
<item>
<title>Snark Barker: A 100% compatible replica of the famed SB 1.0 soundcard</title>
<link>https://github.com/schlae/snark-barker</link>
<guid isPermaLink="true" >https://github.com/schlae/snark-barker</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;p&gt;The Snark Barker is a 100% compatible clone of the famed SB 1.0 &quot;Killer Card&quot; sound card from 1989. It implements all the features, including the digital sound playback and recording, Ad Lib compatible synthesis, the joystick/MIDI port, and the CMS chips (which are actually Philips SAA1099 synthesizer devices).&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/schlae/snark-barker/blob/master/images/SnarkBarker.png&quot;&gt;&lt;img src=&quot;https://github.com/schlae/snark-barker/raw/master/images/SnarkBarker.png&quot; alt=&quot;Snark Barker photo&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of the components are readily available. In the bill of materials, Mouser part numbers are listed where they are available. Chips not available from Mouser can be purchased from a variety of sources in China.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/schlae/snark-barker/blob/master/SnarkBarker.pdf&quot;&gt;Schematic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/schlae/snark-barker/blob/master/SnarkBarker.csv&quot;&gt;Bill of Materials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please note that the 0.1&quot; header pins are &lt;em&gt;not&lt;/em&gt; listed on the BOM. They are standard breakaway headers (both single and double row). Jumper shunts are also not listed on the BOM.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/schlae/snark-barker/blob/master/fab/SnarkBarker.zip&quot;&gt;Fab files&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Board dimensions are 9.1 x 4.2 inches. When ordering the board, you may want to specify a card edge bevel (fairly cheap!) and selective gold plating (expensive!) depending on your needs. The soldermask color can be whatever you like, but hot pink is preferred.&lt;/p&gt;
&lt;h2&gt;The Volume Knob&lt;/h2&gt;
&lt;p&gt;There don't seem to be any off-the-shelf knobs compatible with the Alps potentiometer. You may be able to 3D print one based on the model below. I'd recommend using a high-resolution SLA printer like the Formlabs Form 2.&lt;/p&gt;
&lt;p&gt;Fasten it to the potentiometer using an M1.4x0.3mm thread, 6mm long screw (McMaster-Carr part number 91800A036 or equivalent).&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/schlae/snark-barker/blob/master/images/vol_knob.png&quot;&gt;&lt;img src=&quot;https://github.com/schlae/snark-barker/raw/master/images/vol_knob.png&quot; alt=&quot;Image of the volume knob&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/schlae/snark-barker/blob/master/mech/vol_knob.zip&quot;&gt;Volume knob STEP model&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The ISA Card Bracket&lt;/h2&gt;
&lt;p&gt;The bracket specified in the BOM is a blank Keystone 9200 bracket. You will need to punch or drill holes for the connectors. The KiCad board file has detailed dimensions showing where to make the holes in the bracket.&lt;/p&gt;
&lt;p&gt;I use a chassis nibbler tool to make the square slot for the volume knob as well as the hole for the DA-15 joystick/MIDI connector. If you are rich, Greenlee makes a punch for the DA-15 outline.&lt;/p&gt;
&lt;h2&gt;The Firmware&lt;/h2&gt;
&lt;p&gt;There are two ways to get a programmed 80C51 chip for the Snark Barker. One is to purchase a SB 2.0 DSP chip from China and put it in a 44-PLCC to 40-DIP adapter. This works fine and provides the largest feature set.&lt;/p&gt;
&lt;p&gt;Another option is to buy a blank Atmel 89S51 (as listed in the BOM) and program it with &lt;a href=&quot;https://github.com/schlae/snark-barker/blob/master/firmware/sb.hex&quot;&gt;this HEX file&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Assembly Notes&lt;/h2&gt;
&lt;p&gt;You may wish to socket the two CMS chips, the 80C51 microcontroller, and the two Yamaha chips.&lt;/p&gt;
&lt;p&gt;Be sure to add the 4.7K ohm bodge resistor on top of U5, running between pins 4 and 14. (Shown below.)&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/schlae/snark-barker/blob/master/images/bodge.png&quot;&gt;&lt;img src=&quot;https://github.com/schlae/snark-barker/raw/master/images/bodge.png&quot; alt=&quot;Photo of bodge resistor&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For MIDI to work properly, you'll need to solder jumper wires on the headers marked TXD and RXD (next to the SNARK BARKER logo). Originally these two 3-pin headers may have been used as a debug port.&lt;/p&gt;
&lt;p&gt;Be sure to place shunts in the jumpers marked DRQ1 and JP1, to enable DMA and the joystick, respectively. Also place shunts to configure the I/O address and IRQ.&lt;/p&gt;
&lt;h2&gt;Other Notes&lt;/h2&gt;
&lt;p&gt;Like the original SB 1.0, the Snark Barker does not need a -5V rail.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. See &lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot; rel=&quot;nofollow&quot;&gt;https://creativecommons.org/licenses/by-sa/4.0/&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Sat, 26 Jan 2019 14:09:14 +0000</pubDate>
<dc:creator>segfaultbuserr</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/1458118?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>schlae/snark-barker</og:title>
<og:url>https://github.com/schlae/snark-barker</og:url>
<og:description>A 100% compatible replica of the famed SB 1.0 sound card - schlae/snark-barker</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/schlae/snark-barker</dc:identifier>
</item>
<item>
<title>Fossil vs Git</title>
<link>https://fossil-scm.org/fossil/doc/trunk/www/fossil-v-git.wiki</link>
<guid isPermaLink="true" >https://fossil-scm.org/fossil/doc/trunk/www/fossil-v-git.wiki</guid>
<description>&lt;h2&gt;1.0 Don't Stress!&lt;/h2&gt;
&lt;p&gt;If you start out using one DVCS and later decide you like the other better, you can easily &lt;a href=&quot;https://fossil-scm.org/fossil/doc/trunk/www/inout.wiki&quot;&gt;move your content&lt;/a&gt;¹.&lt;/p&gt;
&lt;p&gt;Fossil and &lt;a href=&quot;http://git-scm.com&quot;&gt;Git&lt;/a&gt; are very similar in many respects, but they also have important differences. See the table below for a high-level summary and the text that follows for more details.&lt;/p&gt;
&lt;p&gt;Keep in mind that you are reading this on a Fossil website, and though we try to be fair, the information here might be biased in favor of Fossil. Ask around for second opinions from people who have used &lt;em&gt;both&lt;/em&gt; Fossil and Git.&lt;/p&gt;
&lt;p&gt;¹&lt;small&gt;&lt;em&gt;Git does not support wiki, tickets, or tech-notes, so those elements will not transfer when exporting from Fossil to Git.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h2&gt;2.0 Differences Between Fossil And Git&lt;/h2&gt;
&lt;p&gt;Differences between Fossil and Git are summarized by the following table, with further description in the text that follows.&lt;/p&gt;
&lt;blockquote&gt;
&lt;table border=&quot;1&quot; cellpadding=&quot;5&quot; align=&quot;center&quot; readability=&quot;11&quot;&gt;&lt;tr&gt;&lt;th width=&quot;50%&quot;&gt;GIT&lt;/th&gt;
&lt;th width=&quot;50%&quot;&gt;FOSSIL&lt;/th&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;File versioning only&lt;/td&gt;
&lt;td&gt;Versioning, Tickets, Wiki, and Technotes&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;Ad-hoc, pile-of-files key/value database&lt;/td&gt;
&lt;td&gt;Relational SQL database&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;Bazaar-style development&lt;/td&gt;
&lt;td&gt;Cathedral-style development&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Designed for Linux development&lt;/td&gt;
&lt;td&gt;Designed for SQLite development&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Lots of little tools&lt;/td&gt;
&lt;td&gt;Stand-alone executable&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;One check-out per repository&lt;/td&gt;
&lt;td&gt;Many check-outs per repository&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;Remembers what you should have done&lt;/td&gt;
&lt;td&gt;Remembers what you actually did&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GPL&lt;/td&gt;
&lt;td&gt;BSD&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/blockquote&gt;
&lt;h3&gt;2.1 Feature Set&lt;/h3&gt;
&lt;p&gt;Git provides file versioning services only, whereas Fossil adds integrated &lt;a href=&quot;https://fossil-scm.org/fossil/doc/trunk/www/wikitheory.wiki&quot;&gt;wiki&lt;/a&gt;, &lt;a href=&quot;https://fossil-scm.org/fossil/doc/trunk/www/bugtheory.wiki&quot;&gt;ticketing &amp;amp; bug tracking&lt;/a&gt;, &lt;a href=&quot;https://fossil-scm.org/fossil/doc/trunk/www/embeddeddoc.wiki&quot;&gt;embedded documentation&lt;/a&gt;, and &lt;a href=&quot;https://fossil-scm.org/fossil/doc/trunk/www/event.wiki&quot;&gt;Technical notes&lt;/a&gt;. These additional capabilities are available for Git as 3rd-party and/or user-installed add-ons, but with Fossil they are integrated into the design. One way to describe Fossil is that it is &quot;&lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt;-in-a-box&quot;.&lt;/p&gt;
&lt;p&gt;If you clone Git's self-hosting repository you get just Git's source code. If you clone Fossil's self-hosting repository, you get the entire Fossil website - source code, documentation, ticket history, and so forth.&lt;/p&gt;
&lt;p&gt;For developers who choose to self-host projects (rather than using a 3rd-party service such as GitHub) Fossil is much easier to set up, since the stand-alone Fossil executable together with a 2-line CGI script suffice to instantiate a full-featured developer website. To accomplish the same using Git requires locating, installing, configuring, integrating, and managing a wide assortment of separate tools. Standing up a developer website using Fossil can be done in minutes, whereas doing the same using Git requires hours or days.&lt;/p&gt;
&lt;h3&gt;2.2 Database&lt;/h3&gt;
&lt;p&gt;The baseline data structures for Fossil and Git are the same (modulo formatting details). Both systems store check-ins as immutable objects referencing their immediate ancestors and named by a cryptographic hash of the check-in content.&lt;/p&gt;
&lt;p&gt;The difference is that Git stores its objects as individual files in the &quot;.git&quot; folder or compressed into bespoke &quot;pack-files&quot;, whereas Fossil stores its objects in a relational (&lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;) database file. To put it another way, Git uses an ad-hoc pile-of-files key/value database whereas Fossil uses a proven, general-purpose SQL database. This difference is more than an implementation detail. It has important consequences.&lt;/p&gt;
&lt;p&gt;With Git, one can easily locate the ancestors of a particular check-in by following the pointers embedded in the check-in object, but it is difficult to go the other direction and locate the descendants of a check-in. It is so difficult, in fact, that neither native Git nor GitHub provide this capability. With Git, if you are looking at some historical check-in then you cannot ask &quot;what came next&quot; or &quot;what are the children of this check-in&quot;.&lt;/p&gt;
&lt;p&gt;Fossil, on the other hand, parses essential information about check-ins (parents, children, committers, comments, files changed, etc.) into a relational database that can be easily queried using concise SQL statements to find both ancestors and descendents of a check-in.&lt;/p&gt;
&lt;p&gt;Leaf check-ins in Git that lack a &quot;ref&quot; become &quot;detached&quot;, making them difficult to locate and subject to garbage collection. This &quot;detached head&quot; problem has caused untold grief for countless Git users. With Fossil, all check-ins are easily located using a variety of attributes (parents, children, committer, date, full-text search of the check-in comment) and so detached heads are simply not possible.&lt;/p&gt;
&lt;p&gt;The ease with which check-ins can be located and queried in Fossil has resulted in a huge variety of reports and status screens (&lt;a href=&quot;https://fossil-scm.org/fossil/doc/trunk/www/webpage-ex.md&quot;&gt;examples&lt;/a&gt;) that show project state in ways that help developers maintain enhanced awareness and comprehension and avoid errors.&lt;/p&gt;
&lt;h3&gt;2.3 Cathedral vs. Bazaar&lt;/h3&gt;
&lt;p&gt;Fossil and Git promote different development styles. Git promotes a &quot;bazaar&quot; development style in which numerous anonymous developers make small and sometimes haphazard contributions. Fossil promotes a &quot;cathedral&quot; development model in which the project is closely supervised by an highly engaged architect and implemented by a clique of developers.&lt;/p&gt;
&lt;p&gt;Nota Bene: This is not to say that Git cannot be used for cathedral-style development or that Fossil cannot be used for bazaar-style development. They can be. But those modes are not their design intent nor their low-friction path.&lt;/p&gt;
&lt;p&gt;Git encourages a style in which individual developers work in relative isolation, maintaining their own branches and occasionally rebasing and pushing selected changes up to the main repository. Developers using Git often have their own private branches that nobody else ever sees. Work becomes siloed. This is exactly what one wants when doing bazaar-style development.&lt;/p&gt;
&lt;p&gt;Fossil, in contrast, strives to keep all changes from all contributors mirrored in the main repository (in separate branches) at all times. Work in progress from one developer is readily visible to all other developers and to the project leader, well before the code is ready to integrate. Fossil places a lot of emphasis on reporting the state of the project, and the changes underway by all developers, so that all developers and especially the project leader can maintain a better mental picture of what is happening, and better situational awareness.&lt;/p&gt;
&lt;h3&gt;2.4 Linux vs. SQLite&lt;/h3&gt;
&lt;p&gt;Git was specifically designed to support the development of Linux. Fossil was specifically designed to support the development of SQLite.&lt;/p&gt;
&lt;p&gt;Both SQLite and Linux are important pieces of software. SQLite is found on far more systems than Linux. (Almost every Linux system uses SQLite, but there are many non-Linux systems such as iPhones, PlayStations, and Windows PCs that use SQLite.) On the other hand, for those systems that do use Linux, Linux is a far more important component.&lt;/p&gt;
&lt;p&gt;Linux uses a bazaar-style development model. There are thousands and thousands of contributors, most of whom do not know each others names. Git is designed for this scenario.&lt;/p&gt;
&lt;p&gt;SQLite uses cathedral-style development. 95% of the code in SQLite comes from just three programmers, 64% from just the lead developer. And all SQLite developers know each other well and interact daily. Fossil is designed for this development model.&lt;/p&gt;
&lt;h3&gt;2.5 Lots of little tools vs. Self-contained system&lt;/h3&gt;
&lt;p&gt;Git consists of many small tools, each doing one small part of the job, which can be recombined (by experts) to perform powerful operations. Git has a lot of complexity and many dependencies and requires an &quot;installer&quot; script or program to get it running.&lt;/p&gt;
&lt;p&gt;Fossil is a single self-contained stand-alone executable with hardly any dependencies. Fossil can be (and often is) run inside a minimally configured chroot jail. To install Fossil, one merely puts the executable on $PATH.&lt;/p&gt;
&lt;p&gt;The designer of Git says that the unix philosophy is to have lots of small tools that collaborate to get the job done. The designer of Fossil says that the unix philosophy is &quot;it just works&quot;. Both individuals have written their DVCSes to reflect their own view of the &quot;unix philosophy&quot;.&lt;/p&gt;
&lt;h3&gt;2.6 One vs. Many Check-outs per Repository&lt;/h3&gt;
&lt;p&gt;A &quot;repository&quot; in Git is a pile-of-files in the &quot;.git&quot; subdirectory of a single check-out. The check-out and the repository are inseperable.&lt;/p&gt;
&lt;p&gt;With Fossil, a &quot;repository&quot; is a single SQLite database file that can be stored anywhere. There can be multiple active check-outs from the same repository, perhaps open on different branches or on different snapshots of the same branch. Long-running tests or builds can be running in one check-out while changes are being committed in another.&lt;/p&gt;
&lt;h3&gt;2.7 What you should have done vs. What you actually did&lt;/h3&gt;
&lt;p&gt;Git puts a lot of emphasis on maintaining a &quot;clean&quot; check-in history. Extraneous and experimental branches by individual developers often never make it into the main repository. And branches are often rebased before being pushed, to make it appear as if development had been linear. Git strives to record what the development of a project should have looked like had there been no mistakes.&lt;/p&gt;
&lt;p&gt;Fossil, in contrast, puts more emphasis on recording exactly what happened, including all of the messy errors, dead-ends, experimental branches, and so forth. One might argue that this makes the history of a Fossil project &quot;messy&quot;. But another point of view is that this makes the history &quot;accurate&quot;. In actual practice, the superior reporting tools available in Fossil mean that the added &quot;mess&quot; is not a factor.&lt;/p&gt;
&lt;p&gt;One commentator has mused that Git records history according to the victors, whereas Fossil records history as it actually happened.&lt;/p&gt;
&lt;h3&gt;2.8 GPL vs. BSD&lt;/h3&gt;
&lt;p&gt;Git is covered by the GPL license whereas Fossil is covered by a two-clause BSD license.&lt;/p&gt;
&lt;p&gt;Consider the difference between GPL and BSD licenses: GPL is designed to make writing easier at the expense of making reading harder. BSD is designed to make reading easier at the expense of making writing harder.&lt;/p&gt;
&lt;p&gt;To a first approximation, the GPL license grants the right to read source code to anyone who promises to give back enhancements. In other words, the act of reading GPL source code (a prerequiste for making changes) implies acceptance of the license which requires updates to be contributed back under the same license. (The details are more complex, but the foregoing captures the essence of the idea.) A big advantage of the GPL is that anybody can contribute to the code without having to sign additional legal documentation because they have implied their acceptance of the GPL license by the very act of reading the source code. This means that a GPL project can legally accept anonymous and drive-by patches.&lt;/p&gt;
&lt;p&gt;The BSD licenses, on the other hand, make reading much easier than the GPL, because the reader need not surrender proprietary interest in their own enhancements. On the flip side, BSD and similarly licensed projects must obtain legal affidavits from authors before new content can be added into the project. Anonymous and drive-by patches cannot be accepted. This makes signing up new contributors for BSD licensed projects harder.&lt;/p&gt;
&lt;p&gt;The licenses on the implementations of Git and Fossil only apply to the implementations themselves, not to the projects which the systems store. Nevertheless, one can see a more GPL-oriented world-view in Git and a more BSD-oriented world-view in Fossil. Git encourages anonymous contributions and siloed development, which are hallmarks of the GPL/bazaar approach to software, whereas Fossil encourages a more tightly collaborative, cliquish, cathedral-style approach more typical of BSD-licensed projects.&lt;/p&gt;
&lt;h2&gt;3.0 Missing Features&lt;/h2&gt;
&lt;p&gt;Most of the capabilities found in Git are also available in Fossil and the other way around. For example, both systems have local check-outs, remote repositories, push/pull/sync, bisect capabilities, and a &quot;stash&quot;. Both systems store project history as a directed acyclic graph (DAG) of immutable check-in objects.&lt;/p&gt;
&lt;p&gt;But there are a few capabilities in one system that are missing from the other.&lt;/p&gt;
&lt;h3&gt;3.1 Features found in Fossil but missing from Git&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;The ability to show descendents of a check-in.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Both Git and Fossil can easily find the ancestors of a check-in. But only Fossil shows the descendents. (It is possible to find the descendents of a check-in in Git using the log, but that is sufficiently difficult that nobody ever actually does it.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Wiki, Embedded documentation, Trouble-tickets, and Tech-Notes&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Git only provides versioning of source code. Fossil strives to provide other related configuration management services as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Named branches&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;10.711475409836&quot;&gt;
&lt;p&gt;Branches in Fossil have persistent names that are propagated to collaborators via &lt;a href=&quot;https://fossil-scm.org/fossil/help?cmd=push&quot;&gt;push&lt;/a&gt; and &lt;a href=&quot;https://fossil-scm.org/fossil/help?cmd=pull&quot;&gt;pull&lt;/a&gt;. All developers see the same name on the same branch. Git, in contrast, uses only local branch names, so developers working on the same project can (and frequently do) use a different name for the same branch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Fossil keeps track of all repositories and check-outs and allows operations over all of them with a single command. For example, in Fossil is possible to request a pull of all repositories on a laptop from their respective servers, prior to taking the laptop off network. Or it is possible to do &quot;fossil all status&quot; to see if there are any uncommitted changes that were overlooked prior to the end of the workday.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;Fossil supports an integrated web interface. Some of the same features are available using third-party add-ons for Git, but they do not provide nearly as many features and they are not nearly as convenient to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;3.2 Features found in Git but missing from Fossil&lt;/h3&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Because of its emphasis on recording history exactly as it happened, rather than as we would have liked it to happen, Fossil deliberately does not provide a &quot;rebase&quot; command. One can rebase manually in Fossil, with sufficient perserverence, but it is not something that can be done with a single command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Push or pull a single branch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote readability=&quot;7.9932203389831&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://fossil-scm.org/fossil/help?cmd=push&quot;&gt;fossil push&lt;/a&gt;, &lt;a href=&quot;https://fossil-scm.org/fossil/help?cmd=pull&quot;&gt;fossil pull&lt;/a&gt;, and &lt;a href=&quot;https://fossil-scm.org/fossil/help?cmd=sync&quot;&gt;fossil sync&lt;/a&gt; commands do not provide the capability to push or pull individual branches. Pushing and pulling in Fossil is all or nothing. This is in keeping with Fossil's emphasis on maintaining a complete record and on sharing everything between all developers.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
<pubDate>Sat, 26 Jan 2019 12:37:12 +0000</pubDate>
<dc:creator>afiori</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://fossil-scm.org/fossil/doc/trunk/www/fossil-v-git.wiki</dc:identifier>
</item>
<item>
<title>We Can&amp;#039;t Just Assume that Facebook Will Do Its Best</title>
<link>https://www.zeit.de/digital/internet/2019-01/privacy-katarina-barley-data-protection-facebook-ad-targeting-mark-zuckerberg</link>
<guid isPermaLink="true" >https://www.zeit.de/digital/internet/2019-01/privacy-katarina-barley-data-protection-facebook-ad-targeting-mark-zuckerberg</guid>
<description>&lt;aside class=&quot;article-toc article__item article__item--wide&quot; data-ct-area=&quot;article-toc&quot; data-ct-row=&quot;page_1_of_2&quot; data-ct-column=&quot;false&quot;&gt;&lt;div class=&quot;article-toc__container&quot;&gt;
&lt;h3 class=&quot;article-toc__headline&quot; id=&quot;article-toc-label&quot; aria-controls=&quot;article-toc-list&quot; data-constrained=&quot;mobile,phablet&quot;&gt;Inhalt&lt;/h3&gt;
&lt;div class=&quot;article-toc__seperator&quot; id=&quot;article-toc-box&quot;&gt;
&lt;ol class=&quot;article-toc__list&quot; id=&quot;article-toc-list&quot;&gt;&lt;li class=&quot;article-toc__item article-toc__item--current&quot;&gt;&lt;strong&gt;Seite 1&lt;/strong&gt; — We Can't Just Assume that Facebook Will Do Its Best&lt;/li&gt;
&lt;li class=&quot;article-toc__item&quot;&gt;&lt;a class=&quot;article-toc__link js-scroll&quot; href=&quot;https://www.zeit.de/digital/internet/2019-01/privacy-katarina-barley-data-protection-facebook-ad-targeting-mark-zuckerberg/seite-2&quot; data-ct-label=&quot;2&quot;&gt;&lt;strong&gt;Seite 2&lt;/strong&gt; — Regulation needs to be verified&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;a class=&quot;article-toc__onesie&quot; href=&quot;https://www.zeit.de/digital/internet/2019-01/privacy-katarina-barley-data-protection-facebook-ad-targeting-mark-zuckerberg/komplettansicht&quot; data-ct-label=&quot;all&quot;&gt;Auf einer Seite lesen&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/aside&gt;&lt;p class=&quot;paragraph article__item&quot;&gt;&lt;a class=&quot;&quot; href=&quot;https://www.zeit.de/digital/internet/2019-01/datenschutz-katarina-barley-facebook-werbung-personalisierung-mark-zuckerberg&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;Lesen Sie diesen Text auf Deutsch.&lt;/em&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p class=&quot;paragraph article__item&quot;&gt;&lt;em&gt;In an &lt;a class=&quot;&quot; href=&quot;https://www.zeit.de/digital/datenschutz/2019-01/social-media-facebook-mark-zuckerberg-ads-privacy-business-model-transparency&quot; target=&quot;_blank&quot;&gt;op-ed published on ZEIT ONLINE&lt;/a&gt;, Facebook founder and CEO &lt;a class=&quot;&quot; href=&quot;https://www.zeit.de/thema/mark-zuckerberg&quot; target=&quot;_blank&quot;&gt;Mark Zuckerberg&lt;/a&gt; has commented on the ongoing critique of his company, including accusations of the misuse of data and concerns over personalized advertising. German Minister of Justice and Consumer Protection Katarina Barley of the center-left Social Democrats responds to Zuckerberg in an op-ed for ZEIT ONLINE.&lt;/em&gt;&lt;/p&gt;


&lt;p class=&quot;paragraph article__item&quot;&gt;I wish &lt;span class=&quot;rtr-schema-org&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Organization&quot;&gt;&lt;a class=&quot;rtr-entity&quot; href=&quot;https://www.zeit.de/thema/facebook&quot;&gt;Facebook&lt;/a&gt;&lt;/span&gt; all the best for its 15th birthday! Once you've reached that age, your behavior begins to have serious consequences. Teenagers of this age must be held responsible for their own actions. I welcome the fact that in his ZEIT ONLINE op-ed, Mark Zuckerberg makes it clear that he is cognizant of Facebook's societal responsibility. But on decisive points, he has revealed a lack of awareness of the most pressing problems.&lt;/p&gt;
&lt;h2 class=&quot;article__subheading article__item&quot;&gt;Regulation can be a sensible way&lt;/h2&gt;
&lt;p class=&quot;paragraph article__item&quot;&gt;People often have mixed feelings when it comes to social-media platforms, and Facebook, in particular. The site offers new paths of communication and the ability for users to present themselves and their thoughts. But it is also unsettling how well the platform knows its users. It conveys the feeling, for example, of knowing who you want to be friends with before you realize it yourself.&lt;/p&gt;
&lt;aside class=&quot;authorbox article__item article__item--marginalia&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/Person&quot;&gt;&lt;div class=&quot;authorbox__container&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;authorbox__text&quot; readability=&quot;33&quot;&gt;&lt;strong class=&quot;authorbox__name&quot; itemprop=&quot;name&quot;&gt;Katarina Barley&lt;/strong&gt;
&lt;p class=&quot;authorbox__summary&quot; itemprop=&quot;description&quot;&gt;has been German Minister of Justice and Consumer Protection since March 2018. For the European elections in 2019 she has been nominated to be the top candidate of the SPD.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;a href=&quot;https://www.zeit.de/autoren/B/Katarina_Barley/index&quot; itemprop=&quot;url&quot; class=&quot;authorbox__button button&quot;&gt;zur Autorenseite&lt;/a&gt;&lt;/aside&gt;&lt;p class=&quot;paragraph article__item&quot;&gt;Things become problematic for users when they begin receiving hostile messages or even threats through Facebook, a platform meant to merely simplify contact with friends. One criticism of Facebook is that it doesn't do enough to combat insults and hate. It may be that it isn't in Facebook's interest to report such content, but when the company merely blames hostility on human error or on an algorithm that hasn't yet been fully developed, it isn't particularly convincing, nor does it measure up to the company's responsibility.&lt;/p&gt;


&lt;p class=&quot;paragraph article__item&quot;&gt;It also hardly helps those who are the targets of such abuse. It is the responsibility of each social-media platform to ensure that actionable content is immediately deleted and not further disseminated. To ensure that happens, Germany passed the Network Enforcement Act. The law requires social networks, including Facebook, to act more forcefully on criminal content.&lt;/p&gt;
&lt;blockquote class=&quot;quote__text&quot; readability=&quot;31&quot;&gt;
&lt;p&gt;Facebook doesn't just bear a responsibility to refrain from intentionally sharing data. It must also actively protect that data from third-party access.&lt;/p&gt;
&lt;/blockquote&gt;
Katarina Barley, German Minister of Justice and Consumer Protection
&lt;p class=&quot;paragraph article__item&quot;&gt;Another important area is the handling of personal data. It is logical that selling user data to advertisers is contrary to company interests, given that one can earn a lot more money selling ads oneself. But what happens when data is leaked anyway? Facebook doesn't just bear a responsibility to refrain from intentionally sharing data. It must also actively protect that data from third-party access.&lt;/p&gt;

&lt;p class=&quot;paragraph article__item&quot;&gt;External regulation is a sensible way of giving back a sense of security to users of platforms like Facebook. Binding rules must be combined with monitoring to ensure the rules are being observed. But what should such controls look like if they are to establish trust without infringing on user freedom?&lt;/p&gt;
</description>
<pubDate>Sat, 26 Jan 2019 11:18:07 +0000</pubDate>
<dc:creator>Quanttek</dc:creator>
<og:type>article</og:type>
<og:title>Privacy: We Can't Just Assume that Facebook Will Do Its Best</og:title>
<og:description>Being treated as lab rats for algorithms is not an option, says the German justice minister in a response to Mark Zuckerberg and explains how Facebook must be regulated.</og:description>
<og:url>https://www.zeit.de/digital/internet/2019-01/privacy-katarina-barley-data-protection-facebook-ad-targeting-mark-zuckerberg</og:url>
<og:image>https://img.zeit.de/digital/2019-01/datenschutz-facebook-werbung/wide__1300x731</og:image>
<dc:language>de</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.zeit.de/digital/internet/2019-01/privacy-katarina-barley-data-protection-facebook-ad-targeting-mark-zuckerberg</dc:identifier>
</item>
<item>
<title>Google Memo on Cost Cuts Sparks Heated Debate Inside Company</title>
<link>https://www.bloomberg.com/news/articles/2019-01-26/google-memo-on-cost-cuts-sparks-heated-debate-inside-company</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2019-01-26/google-memo-on-cost-cuts-sparks-heated-debate-inside-company</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-01-26/google-memo-on-cost-cuts-sparks-heated-debate-inside-company&quot;&gt;https://www.bloomberg.com/news/articles/2019-01-26/google-memo-on-cost-cuts-sparks-heated-debate-inside-company&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19004899&quot;&gt;https://news.ycombinator.com/item?id=19004899&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 225&lt;/p&gt;
&lt;p&gt;# Comments: 292&lt;/p&gt;
</description>
<pubDate>Sat, 26 Jan 2019 05:20:18 +0000</pubDate>
<dc:creator>petethomas</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=b4d06bf0-21c6-11e9-b6d0-11a98c54b8c7&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOS0wMS0yNi9nb29nbGUtbWVtby1vbi1jb3N0LWN1dHMtc3BhcmtzLWhlYXRlZC1kZWJhdGUtaW5zaWRlLWNvbXBhbnk=</dc:identifier>
</item>
<item>
<title>How to Hack an Expensive Camera</title>
<link>https://alexhude.github.io/2019/01/24/hacking-leica-m240.html</link>
<guid isPermaLink="true" >https://alexhude.github.io/2019/01/24/hacking-leica-m240.html</guid>
<description>&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;This research started in 2013, so if you find some of my methods silly and dangerous - you are right, they were. However, I still learnt a lot from the process.&lt;/p&gt;

&lt;h2 id=&quot;prologue&quot;&gt;Prologue&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;It all started several months before my first child was born. My wife and I always wanted a Leica camera and suddenly we realized that if we didn’t buy it now, we will not be able to for a while. So we put in an order for M240 and … bam, backlog for almost half a year. Pretty soon I got bored waiting and started to explore the Leica website. The downloads section caught my attention immediately. Well, you can guess why - firmware images!&lt;/p&gt;

&lt;h2 id=&quot;leica-firmware-files&quot;&gt;Leica firmware files&lt;/h2&gt;
&lt;hr/&gt;&lt;h3 id=&quot;leica-m8-firmware&quot;&gt;Leica M8 firmware&lt;/h3&gt;
&lt;p&gt;It was unencrypted, uncompressed file (&lt;code class=&quot;highlighter-rouge&quot;&gt;m8-2_005.upd&lt;/code&gt;) starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;PWAD&lt;/code&gt; magic&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[1]&lt;/a&gt;. Does anyone recognise it? Yes you got it right - Doom Patch WAD format. These guys seem to love the classics. The format is very well documented and writing the splitting tool was a pretty simple task to do&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is actually very funny, because later when I was looking into the compressed Leica T firmware, the first thing I did was to check the compression methods used by id Software in the past. Wikipedia says they used LHA&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[3]&lt;/a&gt; which is essentially LZW. But when I tried some generic LZW decompressors it didn’t work, so I started to look for an id Software specific implementation and voila, the one from Catacomb Armageddon source&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[4]&lt;/a&gt; was spot on. I have to admit it was a lucky coincidence.&lt;/p&gt;
&lt;p&gt;Anyway, back to M8, this is the firmware structure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;RULES:      0x0000008C (    3036:0x00000BDC) - XML description
LUTS:       0x00000C68 (  183274:0x0002CBEA)
 GAMMA:     0x0000007C (   31760:0x00007C10)
 GAIN:      0x00007C8C (   50344:0x0000C4A8)
 LEICA:     0x00014134 (    7000:0x00001B58)
 BLEMISH:   0x00015C8C (     250:0x000000FA)
 WREF:      0x00015D88 (   82480:0x00014230)
 OBJ:       0x00029FB8 (   11268:0x00002C04)
 VERSION:   0x0002CBBC (      46:0x0000002E)
PXA:        0x0002D854 (  858384:0x000D1910)
BF:         0x000FF164 (  134522:0x00020D7A) - Analog Devices Blackfin Processor family
GUI:        0x0011FEE0 ( 3574180:0x003689A4)
 TRANS:     0x0000005C (   59988:0x0000EA54) - localization
 IMAGES:    0x0000EAB0 (  267433:0x000414A9)
  21_1PRT:  0x000000CC (   18411:0x000047EB) - JFIF image
  21_2GRP:  0x000048B8 (   23172:0x00005A84) - JFIF image
  21_3PAN:  0x0000A33C (   23034:0x000059FA) - JFIF image
  24_1PRT:  0x0000FD38 (   18489:0x00004839) - JFIF image
  24_2GRP:  0x00014574 (   23230:0x00005ABE) - JFIF image
  24_3PAN:  0x0001A034 (   22998:0x000059D6) - JFIF image
  28_1PRT:  0x0001FA0C (   22605:0x0000584D) - JFIF image
  28_2GRP:  0x0002525C (   23081:0x00005A29) - JFIF image
  28_3PAN:  0x0002AC88 (   23282:0x00005AF2) - JFIF image
  35_1PRT:  0x0003077C (   22496:0x000057E0) - JFIF image
  35_2GRP:  0x00035F5C (   23532:0x00005BEC) - JFIF image
  35_3PAN:  0x0003BB48 (   22881:0x00005961) - JFIF image
 FONT1:     0x0004FF5C ( 1522988:0x00173D2C)
 FONT2:     0x001C3C88 ( 1723676:0x001A4D1C)
 VERSION:   0x003689A4 (       0:0x00000000)
M16C:       0x00488884 (  130406:0x0001FD66) - Renesas M16C Family (Motorola S-record)
FPGA:       0x004A85EC (  131604:0x00020214) - Xilinx Spartan 3
FSL:        0x004C8800 (     814:0x0000032E) - First Stage Loader
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;IDA doesn’t support Blackfin processors out of the box, but one third-party plugin does&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;leica-m9-firmware&quot;&gt;Leica M9 firmware&lt;/h3&gt;
&lt;p&gt;This one (m9-1_196.upd) looked encrypted (histogram shows distribution around 0.45%).&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/hist_m9.png&quot; alt=&quot;hist_m9.png&quot;/&gt;&lt;br/&gt;End of story? Maybe not, because Leica used to put pretty weak CPUs in their cameras and XOR encryption was very popular at that time in consumer electronics, so I decided to write a simple XOR manipulation tool to compare the firmware with itself and calculate some statistics along the way.&lt;/p&gt;
&lt;p&gt;Key length was determined by looking for the longest repeating pattern. This makes sense since any firmware usually includes big blocks of repeating data like 0x00/0xFF paddings or graphics with LUT pixels. The key itself is calculated based on per byte statistics within key length where most frequently occurring byte goes to key buffer. The output clearly pointed to XOR encryption. Then it was a matter of modifying my tool a bit to get a potential key and decrypt&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[6]&lt;/a&gt;. Yet again, it was PWAD file after decryption.&lt;/p&gt;
&lt;p&gt;The PWAD contents revealed the following structure:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;RULES:      0x0000007C (    2788:0x00000AE4) - XML description
LUTS:       0x00000B60 ( 4060616:0x003DF5C8)
 PROCESS:   0x0000004C ( 3900572:0x003B849C)
  CREATE:   0x0000004C (      20:0x00000014) - timestamp
  LUTS:     0x00000060 (  427744:0x000686E0)
  GAINMAP:  0x00068740 (   20008:0x00004E28)
  LENS:     0x0006D568 ( 3452724:0x0034AF34)
 CCD:       0x003B84E8 (  148662:0x000244B6)
  CREATE:   0x0000004C (      20:0x00000014) - timestamp
  BLEMISH:  0x00000060 (    1092:0x00000444)
  WREF:     0x000004A4 (  147452:0x00023FFC)
  LIN:      0x000244A0 (      22:0x00000016)
 ICCPROF:   0x003DC9A0 (    4304:0x000010D0)
  ECI-RGB:  0x0000003C (     540:0x0000021C)
  sRGB:     0x00000258 (    3144:0x00000C48)
  A-RGB:    0x00000EA0 (     560:0x00000230)
 WBPARAM:   0x003DDA70 (    7000:0x00001B58)
BF561:      0x003E0128 (  289128:0x00046968) - Analog Devices Blackfin Processor family
 bf0:       0x0000004C (  117846:0x0001CC56) - main processor firmware
 bf1:       0x0001CCA4 (  117826:0x0001CC42) - sub-processor firmware
 bf0.map:   0x000398E8 (   27072:0x000069C0) - main processor firmware map with symbols :D
 bf1.map:   0x000402A8 (   26304:0x000066C0) - sub-processor firmware map with symbols :D
BODY:       0x00426A90 (  143280:0x00022FB0) - Renesas M16C Family (Motorola S-record)
GUI:        0x00449A40 ( 3647624:0x0037A888)
 TRANS:     0x0000005C (  131656:0x00020248) - localization
 IMAGES:    0x000202A4 (  267433:0x000414A9)
  21_1PRT:  0x000000CC (   18411:0x000047EB) - JFIF image
  21_2GRP:  0x000048B8 (   23172:0x00005A84) - JFIF image
  21_3PAN:  0x0000A33C (   23034:0x000059FA) - JFIF image
  24_1PRT:  0x0000FD38 (   18489:0x00004839) - JFIF image
  24_2GRP:  0x00014574 (   23230:0x00005ABE) - JFIF image
  24_3PAN:  0x0001A034 (   22998:0x000059D6) - JFIF image
  28_1PRT:  0x0001FA0C (   22605:0x0000584D) - JFIF image
  28_2GRP:  0x0002525C (   23081:0x00005A29) - JFIF image
  28_3PAN:  0x0002AC88 (   23282:0x00005AF2) - JFIF image
  35_1PRT:  0x0003077C (   22496:0x000057E0) - JFIF image
  35_2GRP:  0x00035F5C (   23532:0x00005BEC) - JFIF image
  35_3PAN:  0x0003BB48 (   22881:0x00005961) - JFIF image
 FONT1:     0x00061750 ( 1522988:0x00173D2C)
 USBLOGO:   0x001D547C (    1775:0x000006EF) - JFIF image
 FONT2:     0x001D5B6C ( 1723676:0x001A4D1C)
FPGA:       0x007C42C8 (  150176:0x00024AA0) - Xilinx Spartan 3A
BF547:      0x007E8D68 (  937576:0x000E4E68) - Analog Devices Blackfin Processor family (FSL?)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;leica-m240-firmware&quot;&gt;Leica M240 firmware&lt;/h3&gt;
&lt;p&gt;It became a habit to check Leica firmware download page every morning. Eventually a new file became available - &lt;strong&gt;FW_M240_1_1_0_2.FW&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It didn’t look encrypted, but it did look compressed…&lt;/p&gt;
&lt;h4 id=&quot;compression&quot;&gt;Compression&lt;/h4&gt;
&lt;p&gt;The histogram had a huge spike on 0x9D.&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/hist_m240.png&quot; alt=&quot;hist_m240.png&quot;/&gt;&lt;br/&gt;Probably this is some kind of compression magic. Googling for “9D” and “compression” didn’t help apart from the fact that 0x1F9D is used as LZW compression signature&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[7]&lt;/a&gt;. Just in case, I got myself familiar with LZ compression types and decided to look around for all bytes following 0x9D. I found four different patterns:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D 70 C4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D 00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D XX YY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9D XX 8Y YY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;My observations regarding these pattern types were:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;(1) appears once at address 0x30, probably used as compressed data indicator&lt;/li&gt;
&lt;li&gt;XX is never bigger than 0x7F&lt;/li&gt;
&lt;li&gt;last byte YY in (3) and (4) is never bigger than 0x7F&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;From what I learnt about LZ, it looks a lot like LZ77 or LZSS if YY is the step back distance and XX is the count of bytes to copy. And (2) is a special case to output 0x9D. Writing a simple C function implementing this logic confirmed that it was heading in the right direction, but still not quite there yet because of (4).&lt;/p&gt;
&lt;p&gt;I spent some time trying different ways to interpret it, but nothing worked. So I just asked some other folks what they thought and one guy noticed that according to my own observations fourth byte YY appears only when highest bit of 0x8Y is set adding extra length to step back distance. Shame on me, it was so obvious. Finally the decompressor started to output a valid stream… until it stuck somewhere in the middle of the firmware file. This was due to an unknown length of a sliding window. Extra debugging and experiments fixed it.&lt;/p&gt;
&lt;p&gt;Then it was time for a new tool to work with M240 firmware files&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[8]&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;firmware-structure&quot;&gt;Firmware structure&lt;/h4&gt;
&lt;p&gt;To deal an unknown file format, I couldn’t think of anything better than to measure some offsets and sizes in the file and try to find the closest values in the file header. Like this block for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;0x00: 1E 1C AF 2E 01 01 00 02 07 E1 EA 5E 00 5C 1A B1
0x10: 01 29 1A 7E AE 38 73 65 9C 3D 75 B4 34 2F 44 6E
0x20: 13 17 8E 6B 00 00 00 01 00 00 00 30 E1 E3 50 D1
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;eventually turned into:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;1E1CAF2E - looks like &quot;LEICA FILE&quot;
01010002 - 1.1.0.2
005C1AB1 - compressed file size (big endian)
01291A7E - uncompressed file size (big endian)
AE3873659C3D75B4342F446E13178E6B - MD5 hash
00000001 - number of payloads
00000030 - first payload offset
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The tool was growing along with better understanding of firmware structures and eventually the output looked like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Running with options:
  + firmware folder: M240_FIRMWARE
  + verbose enabled

Open firmware file: FW_M240_1_1_0_2.FW
  File size:  6036193 | 0x005C1AE1

Parse container header:
  version:       1.1.0.2
  packed size:    6036145 | 0x005C1AB1
  unpacked size: 19470974 | 0x01291A7E
  body blocks:          1 | 0x00000001
  body offset:         48 | 0x00000030
  MD5:           AE387365 9C3D75B4 342F446E 13178E6B
  MD5 check:     PASSED

Uncompress container body: ◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼
  6036145 -&amp;gt; 19470974
  Uncompression: DONE

Split container:
  Number of sections:          9 | 0x00000009
  Section table size:        612 | 0x00000264
  Section table offset:       36 | 0x00000024
  Section 1
    Section Name:   &quot;[A]IMG_LOKI-212&quot;
    Section offset:        0 | 0x00000000
    Section size:    7340032 | 0x00700000
    Section base:    1048576 | 0x00100000
    MD5:            A8D55AA2 B0ACDB14 0673AD79 707674F3
    MD5 check:      PASSED
    Create file:    M240_FIRMWARE/IMG_LOKI-212.bin

  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Section 9
    Section Name:   &quot;[A]IMG-LENSDATA-213&quot;
    Section offset: 19214844 | 0x012531FC
    Section size:     255478 | 0x0003E5F6
    Section base:   16252928 | 0x00F80000
    MD5:            39C2BEC0 27ED23F6 2C1C8513 EEE697B9
    MD5 check:      PASSED
    Create file:    M240_FIRMWARE/IMG-LENSDATA-213.bin
  Splitting container: DONE
Extraction COMPLETE!
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;M240 firmware includes one container with 9 items:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;IMG_LOKI-212.bin     - Application Processor Firmware
IMG_LOKI-213.bin     - Application Processor Firmware
CTRL_SYS-11.bin      - IO Processor Firmware
IMG-FPGA-212.bin     - Image Processing (Sensor) Firmware 
IMG-FPGA-213.bin     - Image Processing (Sensor) Firmware 
IMG-DSP-212.bin      - DSP Firmware
IMG-DSP-213.bin      - DSP Firmware
IMG-LENSDATA-212.bin - Lens Data
IMG-LENSDATA-213.bin - Lens Data
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you have noticed there are two sets of files in one firmware. Later I found out that 212 is an Image Board version meant that there were two different Leica M240 types in the wild. The current research is based on 212 one.&lt;/p&gt;

&lt;h2 id=&quot;system-control---ctrl_sys-11bin&quot;&gt;System Control - CTRL_SYS-11.bin&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;The only common part was the firmware for some system control chip. This binary actually has lots of strings and looking through them it is not hard to get an idea what this part is for.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings CTRL_SYS-11.bin | rg SH
-&amp;gt; Test SH7216 data flash driver
-&amp;gt; Test SH7216 SCI driver
-&amp;gt; Test SH7216 I2C driver
-&amp;gt; Test SH7216 MTU2 driver
-&amp;gt; Test SH7216 ADC functions
-&amp;gt; Test SH7216 CMT driver
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So this is a Renesas SH7216 (SH-2A) and it is responsible for early boot stage, IO tests and firmware update. IDA supports this processor type out of the box, so it was a matter of finding the correct image base which was known from the firmware section description - &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Section Name:   &quot;[A]CTRL_SYS-11&quot;
Section offset: 14680064 | 0x00E00000
Section size:     917277 | 0x000DFF1D
Section base:          0 | 0x00000000
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I have obviously put it into IDA and recognised all functions, but didn’t really dig into it much since I was lot more curious about the main processor firmware.&lt;/p&gt;
&lt;p&gt;Another thing to note here is that UART from this chip is exposed on service port where it prints boot log. We will get back to that later.&lt;/p&gt;

&lt;h2 id=&quot;main-chip---img_loki-212bin&quot;&gt;Main Chip - IMG_LOKI-212.bin&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;In order to start reverse engineering this firmware it was necessary to answer several questions first:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;what is the processor type&lt;/li&gt;
&lt;li&gt;what is the image base&lt;/li&gt;
&lt;li&gt;what OS it is based on if any&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;We already know image base from the &lt;strong&gt;M240FwTool&lt;/strong&gt;, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;0x100000&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Section Name:   &quot;[A]IMG_LOKI-212&quot;
Section offset:        0 | 0x00000000
Section size:    7340032 | 0x00700000
Section base:    1048576 | 0x00100000
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Answers to the remaining questions were stored inside the firmware in human readable form. This string for example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings ./IMG_LOKI-212.bin | rg Softune
6Softune REALOS/FR is Realtime OS for FR Family, based on micro-ITRON COPYRIGHT(C) FUJITSU LIMITED 1994-1999
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So we are dealing with custom &lt;strong&gt;Fujitsu FR&lt;/strong&gt; (Leica calls it &lt;strong&gt;Maestro&lt;/strong&gt;) and &lt;strong&gt;Softune REALOS&lt;/strong&gt;. Actually, it was a lot more promising than Blackfin because IDA provides FR support out of the box.&lt;/p&gt;
&lt;h3 id=&quot;ida-fr-processor-module&quot;&gt;IDA FR processor module&lt;/h3&gt;
&lt;p&gt;Reality was not that bright though, because when I put the firmware file into IDA and chose FR processor I discovered that this module is barely usable due to missing instructions, absence of xrefs etc.&lt;/p&gt;
&lt;p&gt;I decided to fix it but ended up rewriting some parts completely&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[9]&lt;/a&gt;. This is the result:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fr_asm.png&quot; alt=&quot;fr_asm.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fr_switch.png&quot; alt=&quot;fr_switch.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Apart from fixes in &lt;code class=&quot;highlighter-rouge&quot;&gt;ana&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ins&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; stages, brand new &lt;code class=&quot;highlighter-rouge&quot;&gt;emu&lt;/code&gt; code was able to&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;recognize various types of code and data xrefs&lt;/li&gt;
&lt;li&gt;recognize switch statements&lt;/li&gt;
&lt;li&gt;perform stack trace&lt;/li&gt;
&lt;li&gt;split stack arguments and local variables (thanks to clean FR ABI)&lt;/li&gt;
&lt;li&gt;recognise functions properly&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;But the biggest change as you have noticed was capital letters for instructions :)&lt;/p&gt;
&lt;p&gt;Would you like to see the full instruction set?&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;    ADD      OR       BTSTH    LSR     MOV     BN       LDRES     EXTSH   
    ADD2     ORH      MUL      LSR2    JMP     BP       STRES     EXTUH   
    ADDC     ORB      MULU     ASR     CALL    BV       COPOP     SRCH0   
    ADDN     EOR      MULH     ASR2    RET     BNV      COPLD     SRCH1   
    ADDN2    EORH     MULUH    LDI     INT     BLT      COPST     SRCHC   
    SUB      EORB     DIV0S    LDI     INTE    BGE      COPSV     LDM0    
    SUBC     BANDL    DIV0U    LDI     RETI    BLE      NOP       LDM1    
    SUBN     BANDH    DIV1     LD      BRA     BGT      ANDCCR    STM0    
    CMP      BORL     DIV2     LDUH    BNO     BLS      ORCCR     STM1    
    CMP2     BORH     DIV3     LDUB    BEQ     BHI      STILM     ENTER   
    AND      BEORL    DIV4S    ST      BNE     DMOV     ADDSP     LEAVE   
    ANDH     BEORH    LSL      STH     BC      DMOVH    EXTSB     XCHB    
    ANDB     BTSTL    LSL2     STB     BNC     DMOVB    EXTUB      
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s it, nice and simple.&lt;/p&gt;
&lt;p&gt;By the way, you may have noticed that some instructions are not aligned:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;   BRA:D    loc_xxx
    LDI:8   #0x64, R5
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It is not a bug in a processor module, but actually a feature of Fujitsu FR family. It is called “Delay Slot”&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[10]&lt;/a&gt; and quite typical for RISC processors.&lt;/p&gt;
&lt;p&gt;From the FR80 hardware manual&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[11]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;The instruction that is located immediately following a branch instruction (the location is called a 
&quot;delay slot&quot;) is executed before branching, and an instruction at the branch destination is executed 
after that. Because the instruction in the delay slot is executed before the branch operation, the 
apparent execution speed is 1 cycle. 
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So this is essentially a pipeline optimisation and it is better to keep that in mind since it is used everywhere in Leica firmware.&lt;/p&gt;
&lt;h3 id=&quot;softune-realos&quot;&gt;Softune REALOS&lt;/h3&gt;
&lt;p&gt;From wiki&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[12]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Softune is an Integrated development environment from Fujitsu for the Fujitsu FR, FR-V and F²MC 
processor families. It provides an REALOS µITRON realtime kernel.
It is for example used for Nikon DSLRs (see Nikon EXPEED) and some Pentax K mount cameras.
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So it is quite a popular decent RTOS with tasks, semaphores and other goodies and I was wondering if it is possible to recognize some standard library functions in the Leica firmware.&lt;/p&gt;
&lt;h4 id=&quot;flirt&quot;&gt;FLIRT&lt;/h4&gt;
&lt;p&gt;I should have called this part “an ode to time wasting” and here is why.&lt;/p&gt;
&lt;p&gt;It was pretty hard to find Softune IDE in the wild but eventually I managed to get something to play with. As expected the IDE included libraries. There were four binaries:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;lib911.lib&lt;/li&gt;
&lt;li&gt;lib911e.lib&lt;/li&gt;
&lt;li&gt;lib911if.lib&lt;/li&gt;
&lt;li&gt;lib911p.lib&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I don’t know why, but maybe by inertia, since I was so into hacking everything related to Leica but I have actually started to reverse engineer object format. Yes very well documented Object Module Format&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[13]&lt;/a&gt;. And yes of course I wrote a tool to deal with it&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[14]&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Fujitsu RISC Library Tool v1.0
Usage: FRLibTool [-s start] [-i imagebase] [-o output] [-f index] [-dv] FIRMWARE.BIN LIBRARY.LIB

This tool will help you to find Softune REALOS library functions in FR (Fujitsu RISC) firmware.
Use following arguments:
    -f       Specify firmware image file
    -s       Specify firmware image scan offset
    -b       Specify firmware imagebase
    -o       Specify output type (exclusively)
       list  - list of functions
       idc   - IDC script
       py    - IDA python script
       pat   - FLAIR pattern file
    -i xxx   Specify index of particular function
    -d       Dump library
    -v       Be verbose
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using this tool it was possible to create &lt;code class=&quot;highlighter-rouge&quot;&gt;*.pat&lt;/code&gt; files and use them as input for the &lt;strong&gt;IDA FLAIR&lt;/strong&gt; tool to generate signature files&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[15]&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ FRLibTool -o pat lib911.lib
$ FRLibTool -o pat lib911e.lib
$ FRLibTool -o pat lib911if.lib
$ FRLibTool -o pat lib911p.lib
...
$ sigmake -n &quot;SOFTUNE C/C++ Library&quot; lib911.pat lib911e.pat lib911if.pat lib911p.pat softune.sig
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, after applying this signature, I was very pleased to see matches in &lt;strong&gt;IMG_LOKI-212.idb&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fw_lib.png&quot; alt=&quot;fw_lib.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;layout&quot;&gt;Layout&lt;/h4&gt;
&lt;p&gt;The first thing I noticed was the amount of strings in the firmware. Many functions had their names in the body or at least some indication of their behaviour. This was extremely helpful during reverse engineering in order to understand the layout.&lt;/p&gt;
&lt;p&gt;It is also important to note here that some parts of the firmware file are copied to different address in reset handler. For example, there is a bootloader embedded in code which is relocated to the higher RAM in runtime.&lt;/p&gt;
&lt;p&gt;I had to create additional sections manually and eventually got to the following layout.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/fw_layout_sm.png&quot; alt=&quot;fw_layout_sm.png&quot;/&gt;&lt;/p&gt;
&lt;h4 id=&quot;interrupts&quot;&gt;Interrupts&lt;/h4&gt;
&lt;p&gt;An interrupt vector table can be found by TBR access (Table Base Register):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;   LDI:32  #int_table, R0
   MOV     R0, TBR
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This usually happens in the reset vector handler right in the beginning of the firmware.&lt;/p&gt;
&lt;p&gt;Handler addresses in the table are stored in reverse order according to formula &lt;code class=&quot;highlighter-rouge&quot;&gt;TBR + (0x3FC - 4 × inum)&lt;/code&gt;, so that reset vector is located at the end of the table at offset &lt;code class=&quot;highlighter-rouge&quot;&gt;0x3FC&lt;/code&gt;.&lt;br/&gt;I found most of these interrupts defined in FR Hardware Manual&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[11]&lt;/a&gt; and just assumed Leica’s Maestro processor had a similar layout.&lt;br/&gt;Then looking into every handler and I tried to find a string or any other hint revealing interrupt purpose.&lt;/p&gt;
&lt;p&gt;This is what I ended up with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/int_list.png&quot; alt=&quot;int_list.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Many of these like AUDIO/SDIO/VIDEO/JPEG/RAW were expected, but can you spot the most intriguing one?&lt;br/&gt;I am talking about &lt;code class=&quot;highlighter-rouge&quot;&gt;int_uart_in&lt;/code&gt;, which means the camera probably has some sort of UART CLI.&lt;/p&gt;
&lt;h4 id=&quot;syscalls&quot;&gt;Syscalls&lt;/h4&gt;
&lt;p&gt;Like pretty much any other OS, SOFTUNE REALOS is designed to use system calls for IPC and other operations.&lt;/p&gt;
&lt;p&gt;In assembly system call looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall_before.png&quot; alt=&quot;syscall_before.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The actual address of system call hander is calculated in the following manner.&lt;br/&gt;Let’s start with finding &lt;code class=&quot;highlighter-rouge&quot;&gt;INT #0x40&lt;/code&gt; interrupt handler. According to the previous section this is&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;(0x3FC - 4 × inum) = (0x3FC - 4 × 0x40) = 0x2FC = int_realos_syscall
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looking through the handler it is easy to find reference to the bottom of the syscall table. It contains 16bit words.&lt;br/&gt;Particular entry in this table is calculated using following formula &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall_table_bottom + (num * 2)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;[syscall_table_bottom + (-23 * 2)] = [syscall_table_bottom - 0x2E] = [0x1012EA] = 0xE68
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see this doesn’t looks like address, because the actual system call handler address is calculated as &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall_table_bottom + offset&lt;/code&gt;.&lt;br/&gt;Following diagram shows the whole process.&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall.png&quot; alt=&quot;syscall.png&quot;/&gt;&lt;br/&gt;All system calls and their magics are listed in SOFTUNE REALOS/FR KERNEL MANUAL&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[16]&lt;/a&gt;, therefore it was possible to recover all implemented handlers in the table and improve IDB a bit further.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall_list.png&quot; alt=&quot;syscall_list.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And of course, it was possible to make code even prettier defining syscall types in IDA.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/syscall_after.png&quot; alt=&quot;syscall_after.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I actually wrote an IDA python script to find that and some other stuff automatically&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[17]&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;tasks&quot;&gt;Tasks&lt;/h4&gt;
&lt;p&gt;Looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;sta_tsk&lt;/code&gt; syscall I noticed that there is no main task function passed as parameter, instead code is passing pid. This means it was a time to look for big array of task descriptors. And it makes sense to start from &lt;code class=&quot;highlighter-rouge&quot;&gt;sta_tsk&lt;/code&gt; itself.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:102180 sys_sta_tsk:
ROM:102180                 ST      RP, @-R15
ROM:102182                 LDUB    @(R14, 0x4F), R3
ROM:102184                 LDI:32  #word_100B80, R14
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Right at the beginning we see some reference. I had to play a bit with data types, but eventually pieces came together into this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:100B80 word_100B80:    .word 0xF           ; number of tasks
ROM:100B82                 .word 0x1C          ; task descriptor size

ROM:100B84                 .long 0x82A09F5C    ; task 1 descriptor
ROM:100B88                 .long 0x1000D
ROM:100B8C                 .long 0
ROM:100B90                 .long 0x40000000
ROM:100B94                 .long sub_1A7DB2    ; task main
ROM:100B98                 .long 0x8286EEC0
ROM:100B9C                 .long 0

ROM:100BA0                 .long 0x82A09F88    ; task 2 descriptor
ROM:100BA4                 .long 0x20010
ROM:100BA8                 .long 0
ROM:100BAC                 .long 0x40000000
ROM:100BB0                 .long sub_1A6BD2    ; task main
ROM:100BB4                 .long 0x8287EEC0
ROM:100BB8                 .long 0
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and so on. 15 tasks in total. It was just a matter of time to look into every single main function and find the name and purpose of the task (apart from the last one). Here is the full list:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;&lt;strong&gt;SubCPU&lt;/strong&gt;&lt;br/&gt;This task seems to be responsible for capture operations like exposure, live view control etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KeyManager&lt;/strong&gt;&lt;br/&gt;Most likely this task is handling hardware buttons.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GuiManager&lt;/strong&gt;&lt;br/&gt;Pretty big task implementing UI state machine and interface drawing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DebugManager&lt;/strong&gt;&lt;br/&gt;Yeah, there is something for debug. Yum Yum.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FileManager&lt;/strong&gt;&lt;br/&gt;This task is all about file operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FamManager&lt;/strong&gt;&lt;br/&gt;I would say this one is responsible for file memory because it depends of File Manager and Memory Manager tasks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MemoryManager&lt;/strong&gt;&lt;br/&gt;No surprises here, memory operations, pool control etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ImageManager&lt;/strong&gt;&lt;br/&gt;This task is controlling encode/decode and other image workflows&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UsbManager&lt;/strong&gt;&lt;br/&gt;Current task is handling communication over USB which includes MassStorage, PTP and some Leica Custom protocol.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IOManager&lt;/strong&gt;&lt;br/&gt;Looks like this task is managing storage devices like SD and CF cards (what? CF? maybe that is what 213 board is all about).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SystemManager&lt;/strong&gt;&lt;br/&gt;Various things like general system operations, power control etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SettingsManager&lt;/strong&gt;&lt;br/&gt;This task is handling changes in camera state and settings.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MonitorManager&lt;/strong&gt;&lt;br/&gt;The purpose of this task is to track changes in camera state and inform other tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PeripheralManager&lt;/strong&gt;&lt;br/&gt;GPS, luminance and some other sensors are controlled by this task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unknown&lt;/strong&gt;&lt;br/&gt;Unfortunately, I didn’t find anything relevant about this one&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Interesting to note here that there is one more outstanding task descriptor after main array.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:100D28 dword_100D28:   .long 0x82A0A1F0
ROM:100D2C                 .long 0x21
ROM:100D30                 .long 0
ROM:100D34                 .long 0x80000000
ROM:100D38                 .long tid16_task
ROM:100D3C                 .long 0x8285EEC0
ROM:100D40                 .long 0
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the task function is just a branch to itself.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;ROM:101494 sub_101494:
ROM:101494                 BRA     sub_101494      ; CODE XREF: sub_101494
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This descriptor is referenced at the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function which is responsible for spawning other tasks and firmware setup. So it is most likely an idle task.&lt;/p&gt;
&lt;h4 id=&quot;modules-and-messages&quot;&gt;Modules and Messages&lt;/h4&gt;
&lt;p&gt;Apart from tasks it was also possible to define some logical objects like IO and Peripheral modules. Modules are represented as group of message handlers within one of the tasks.&lt;/p&gt;
&lt;p&gt;IO group seems to include:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;IO Manager&lt;/li&gt;
&lt;li&gt;Sub CPU&lt;/li&gt;
&lt;li&gt;USB Manager&lt;/li&gt;
&lt;li&gt;USB PTP&lt;/li&gt;
&lt;li&gt;USB Leica Custom&lt;/li&gt;
&lt;li&gt;USB Mass Storage&lt;/li&gt;
&lt;li&gt;Key Manager&lt;/li&gt;
&lt;li&gt;Debug Manager&lt;/li&gt;
&lt;li&gt;Lens Manager&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;while Peripheral group has:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Peripheral Manager&lt;/li&gt;
&lt;li&gt;Luminance Sensor&lt;/li&gt;
&lt;li&gt;LEDs&lt;/li&gt;
&lt;li&gt;Beeper&lt;/li&gt;
&lt;li&gt;Tilt sensor&lt;/li&gt;
&lt;li&gt;Cover Detection&lt;/li&gt;
&lt;li&gt;GPS module&lt;/li&gt;
&lt;li&gt;3DAxis module&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Messaging system itself appears to utilise standard SOFTUNE structures:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealOS_MsgPayload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msgID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// +0x0
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// +0x4
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealOS_Message&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;os_reserved1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// +0x0
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;os_reserved2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// +0x4
&lt;/span&gt;  
  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// +0x8
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// +0xC
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;RealOS_MsgPayload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// +0x10
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As expected IPC is also designed to have several message groups. Taking into consideration that there are plenty of messages handled in tasks and modules, I was able to recover just some of these groups browsing through the firmware:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;0x1101xxxx - global system messages like  
             0x11010002 = SYS_UPDATE_BOOTLOADER or  
             0x11010005 = SYS_ERASE_SETTINGS
0x1102xxxx - messages related to image capture for example  
             0x11020001 = CMD_CAP_CAPTURE or  
             0x11020008 = IMAGE_STATUS_CHANGED  
0x1104xxxx - playback related messages cover events like  
             0x11040002 = PLY_DISABLE_PLAY_MODE or  
             0x11040004 = PLY_IMAGE_READY  
0x1108xxxx - various messages for PTP debugging e.g.  
             0x11080002 = DBG_CHANGE_LEVEL or  
             0x11080012 = DBG_WRITE_ROM_DUMP_SD  
0x2201xxxx - USB PTP messages like  
             0x22010108 = Camera Settings Change or  
             0x22010118 = Request DebugObject  
0x2202xxxx - pretty big group of SUBCPU messages including for example  
             0x22020002 = E_SUBCPU_REQUEST_M_EXPOSURE_REQUEST  
             0x22020015 = E_IO_SUBCPU_COMMAND_CLEANING_SENSOR  
0x2203xxxx - some other debugging message  
             0x22030001 = Debug String Command  
0x2204xxxx - various IO messages like  
             0x2204000C = Enable/Disable Mass Storage or  
             0x22040012 = Reset device  
0x330000xx - another big group related to UI, for instance  
             0x33000001 = Key pressed  
             0x33000007 = Lens connected  
0x440000xx - not many info about this one, but looks like image processing group  
             0x44000013 = E_IMG_CMD_CHANGE_PINFO  
0x55xxxxxx - group of FAM message groups:  
             0x558800xx = FAM file manager group or  
             0x558888xx = FAM menu settings 1 group  
0x6602xxxx - seems to be some LED control messages e.g.  
             0x66020001 - Toggle LED with X Hz  
             0x66020002 = Enable Continuous LED  
0x6604xxxx - beeper control messages including  
             0x66040001 = Beeper set or  
             0x66040007 = Card full noise  
0x6611xxxx - memory related debug messages  
0x6622xxxx - memory related image processing messages  
0x6660xxxx - some other memory related messages like   
             0x66600006 = memory HISTOGRAM  
             0x66600011 = memory RAWCOMP  
0x771100xx and 0x77AA00xx - camera mode switch related messages  
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately, many others are still unknown.&lt;/p&gt;
&lt;h3 id=&quot;gui&quot;&gt;GUI&lt;/h3&gt;
&lt;p&gt;Let’s take a look again at the parts of the firmware file: &lt;strong&gt;CTRL_SYS-11&lt;/strong&gt;, &lt;strong&gt;IMG-LOKI-212&lt;/strong&gt;, &lt;strong&gt;IMG-DSP-212&lt;/strong&gt;, &lt;strong&gt;IMG-FPGA-212&lt;/strong&gt; and &lt;strong&gt;IMG-LENSDATA-212&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What surprised me a bit was the absence of any GUI assets. But it must be somewhere and most likely it is embedded into &lt;strong&gt;IMG-LOKI-212&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One of my usual approaches to firmware reverse engineering is to recover all possible cross references. Not only from code, but in data section as well. Then I browse through them trying to find some patterns or links to known parts of code.&lt;/p&gt;
&lt;p&gt;Leica firmware was not an exception. There were plenty of similar looking data sequences with addresses to data sequences with addresses to data sequences etc. Climbing up through this reference hierarchy I eventually appeared at a function I recognised.&lt;/p&gt;
&lt;p&gt;For example, I found data structure without any references&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_data = { ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It was referenced from other structure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_data_struct1 = { ... , &amp;amp;g_data }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which was in turn referenced from one more structure&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_data_struct2 = { &amp;amp;g_data, ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This data structure was referenced from code and passed as parameter to another function&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;func1()
╰ func2(..., &amp;amp;g_data_struct2, ...)
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, &lt;code class=&quot;highlighter-rouge&quot;&gt;func1()&lt;/code&gt; was not called directly from another function, instead if was stored in some array&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_func_list1[] = { ..., func1(), ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looking above I found a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;g_func_list1&lt;/code&gt; from code&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;func3() {
    g_func_list1[x]
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And again, this function was stored in array&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;g_func_list2[] = { ..., func3(), ... }
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Array itself was referenced from some other code&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;func4() {
    g_func_list2[x]
}
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Luckily this time function was called from another function and so on up until &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_MADE_ApplicationRun&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;gui_Statemachine_DoStateChange()
╰ gui_MADE_ApplicationRun()
  ╰ func5()
    ╰ func4()
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to some strings, GUI subsystem is called “MADE” and page transitions are handled using &lt;code class=&quot;highlighter-rouge&quot;&gt;MADE_GetSysTri&lt;/code&gt; whatever it means. GUI state machine is mostly implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_Statemachine_DoStateChange&lt;/code&gt; function. Later getting more and more information about GUI overall picture started to look like that&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/gui_calls.png&quot; alt=&quot;gui_calls.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see the core function dealing with GUI assets is &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_CopyImageDesc&lt;/code&gt; (it is not a real name though). It has following arguments:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gui_CopyImageDesc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;dstAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// R4 - destination address
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UIDescType&lt;/span&gt;                    &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// R5 - description type
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;UITarget&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// R6 - rendering target
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;descAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// R7 - description address
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;always0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// (SP + 0x0) - always 0
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;index1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// (SP + 0x4) - index 1
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;                      &lt;span class=&quot;n&quot;&gt;index2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// (SP + 0x8) - index 2
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (SP + 0xC) - x offset
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (SP + 0x10) - y offset
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;unknown2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// (SP + 0x14) -
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;language1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// (SP + 0x18) - language id 1
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;language2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// (SP + 0x1C) - language id 2
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;funcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// (SP + 0x20) - function address
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are four types of asset descriptions:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType0Header&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType1Header&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType2&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType3&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                        
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                        
                                                                      &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                        
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType0Entry&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDescType1Entry&lt;/span&gt;              &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;tableoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                        
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;x_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;y_offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;             &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
                                     &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;total_w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
                                     &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;total_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
                                     &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;unknown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                    
                                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First type has header with the reference to array of entries. Every entry has coordinates and pixel data address. Current type seems to be describing state-dependent elements, like icons which can be greyed out or disappear from the UI.&lt;/p&gt;
&lt;p&gt;Second type also starts with header and is used for localization, describing strings or blocks of text.&lt;/p&gt;
&lt;p&gt;Third type describes character maps for different languages.&lt;/p&gt;
&lt;p&gt;The last type is responsible for all other static assets, like images, backgrounds etc.&lt;/p&gt;
&lt;p&gt;Now let’s take a look at the image data itself.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;+0x00: 00 08 00 14 00 01 A2 FF 0A 04 05 FF 0C 04 03 FF
+0x10: 0D 04 03 FF 0E 04 02 FF 0E 04 02 FF 04 04 06 FF
+0x20: 04 04 02 FF 04 04 06 FF 04 04 02 FF 04 04 06 FF
+0x30: 04 04 02 FF 04 04 06 FF 04 04 02 FF 04 04 06 FF
+0x40: 04 04 02 FF 04 04 06 FF 04 04 02 FF 04 04 06 FF
+0x50: 04 04 02 FF 04 04 06 FF 04 04 02 FF 0E 04 02 FF
+0x60: 0E 04 02 FF 0D 04 03 FF 0D 04 03 FF 0C 04 04 FF
+0x70: 04 04 0C FF 04 04 0C FF 04 04 0C FF 04 04 0C FF
+0x80: 04 04 0C FF 04 04 0C FF 04 04 0C FF 04 04 0C FF
+0x90: 04 04 0D FF 02 04 2D FF 00 06 00 14 00 01 79 FF
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First 6 bytes look like a little header followed by some repeating pattern where every second byte is either &lt;code class=&quot;highlighter-rouge&quot;&gt;0xFF&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;0x04&lt;/code&gt;. Obvious guess for the &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0008&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0014&lt;/code&gt; would be width and height in big endian. At the end of this dump we see a beginning of another sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;00 06 00 14 00 01&lt;/code&gt; which is most likely next image asset (this was also confirmed by reference to it). So the size of actual image data is 146 bytes. But the size of an image should be &lt;code class=&quot;highlighter-rouge&quot;&gt;0x8 * 0x14 = 0xA0 = 160&lt;/code&gt;. Clearly image data is not pure pixels and not even 8-bit LUT because it is 14 bytes smaller. Then what? There must be some kind of compression involved.&lt;/p&gt;
&lt;p&gt;Looking at this hex dump it is hard to believe that they used something sophisticated. Also, Leica GUI is not very colourful or full of gradients and from my experience LUT is the best approach here. In this case UI assets will be full of repeating LUT indices like &lt;code class=&quot;highlighter-rouge&quot;&gt;03 03 03&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;A1 A1 A1&lt;/code&gt;. Usually compressor it trying to get rid of repeating information replacing it with reference. These arrays of indices are perfect data to compress even with simple method like RLE &lt;code class=&quot;highlighter-rouge&quot;&gt;[data][number]&lt;/code&gt;. In other words, write &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; to the output &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; of times.&lt;/p&gt;
&lt;p&gt;Keeping all that in mind I assumed that this is most likely a simple image with two LUT colours (&lt;code class=&quot;highlighter-rouge&quot;&gt;0xFF&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0x04&lt;/code&gt;) and the byte before colour is number of pixels to draw.&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;And then you wrote another tool&lt;/em&gt;” you may think. Nope, I grabbed pen and paper and started to fill squares. Funny enough I still have this original drawing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ui_draft.png&quot; alt=&quot;ui_draft.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Somewhere along the way I realized that 160 pixels is not enough to fit this image, instead 0x8 and 0x14 should be multiplied by two. The third word 0x0001 is indicating if image is ASCII character so that final ImageAsset structure looks like this:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImageAsset&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// width/2 (big endian)
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// height/2 (big endian)
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 1 if ASCII character
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;image_data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// number of pixels to render
&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// index of pixel color in LUT
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, one part is still missing - the LUT.&lt;/p&gt;
&lt;p&gt;It was not that hard to find one because a lot of references and structures were already recovered manually, so I was slowly scrolling through data sections looking for 256 item array of 16bit or 32bit values until I ran into this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt; .long  0x7008080, 0x72D8080, 0x73C8080, 0x75A8080, 0x79B8080, 0x71DFF6B, 0x7BE8080, 0x7FF8080
 .long  0x77BBD27, 0x75B60E7, 0x7835F4A, 0x7D3089F, 0x7018080, 0x7028080, 0x7038080, 0x7048080
 .long  0x7058080, 0x7068080, 0x7078080, 0x7088080, 0x7098080, 0x70A8080, 0x70B8080, 0x70C8080
 .long  0x70D8080, 0x70E8080, 0x70F8080, 0x7108080, 0x7118080, 0x7128080, 0x7952B15, 0x7138080
 .long  0x7148080, 0x7158080, 0x7168080, 0x7178080, 0x7188080, 0x7198080, 0x71A8080, 0x71C8080
 .long  0x71D8080, 0x71E8080, 0x71F8080, 0x7338080, 0x7208080, 0x7218080, 0x7228080, 0x7238080
 .long  0x7248080, 0x7248080, 0x7268080, 0x7278080, 0x7288080, 0x7298080, 0x72A8080, 0x72B8080
 .long  0x72C8080, 0x75E8080, 0x7608080, 0x7628080, 0x7648080, 0x7678080, 0x7688080, 0x7698080
 .long  0x76B8080, 0x76E8080, 0x7708080, 0x7728080, 0x7758080, 0x7778080, 0x7798080, 0x77C8080
 .long  0x77E8080, 0x7818080, 0x7838080, 0x7868080, 0x7888080, 0x78B8080, 0x78D8080, 0x7908080
 .long  0x7928080, 0x7958080, 0x7978080, 0x7998080, 0x79C8080, 0x79D8080, 0x7668080, 0x79E8080
 .long  0x7A18080, 0x7A28080, 0x7A38080, 0x7A68080, 0x7A78080, 0x7A88080, 0x7AB8080, 0x7AC8080
 .long  0x7AD8080, 0x7B08080, 0x7B28080, 0x7B58080, 0x7B88080, 0x7B98080, 0x7BC8080, 0x7CC8080
 .long  0x7AB3BBB, 0x7E10094, 0x7E4556E, 0x4008080, 0x2922D17, 0x7B2AB00, 0x7C2A262, 0x71DFF6B
 .long  0x768D4A2, 0x769D4EA, 0x7BD88AE, 0x705997B, 0x70BB377, 0x711CC73, 0x717E66F, 0x7238866
 .long  0x729A262, 0x72FBB5E, 0x735D55A, 0x7417751, 0x747914D, 0x74DAA48, 0x753C444, 0x75F663B
 .long  0x76B9933, 0x7998080, 0x771B32F, 0x77D5526, 0x7836F22, 0x789881E, 0x78FA21A, 0x7159095
 .long  0x71AAA91, 0x720C38D, 0x726DD88, 0x7506F6A, 0x7568866, 0x75CA262, 0x762BB5E, 0x76E5E55
 .long  0x7747751, 0x77A914D, 0x780AA48, 0x78C4D3F, 0x792663B, 0x7988037, 0x79E9933, 0x7AA3C2A
 .long  0x7B05526, 0x7B66F22, 0x7BC881E, 0x72488AE, 0x72AA1AA, 0x72FBBA6, 0x735D4A2, 0x7427799
 .long  0x7489095, 0x74DAA91, 0x753C38D, 0x77E556E, 0x7836F6A, 0x7898866, 0x78FA262, 0x79C4459
 .long  0x7A15E55, 0x7A77751, 0x7AD914D, 0x7BF4D3F, 0x7CC8080, 0x7C5663B, 0x7CB8037, 0x7337FC8
 .long  0x73999C4, 0x73FB2C0, 0x745CCBB, 0x7757799, 0x74C54FF, 0x77B9095, 0x780AA91, 0x7AB3C72
 .long  0x7B1556E, 0x7B66F6A, 0x7BC8866, 0x74277E1, 0x74890DD, 0x74EAAD9, 0x754C3D5, 0x76066CC
 .long  0x7667FC8, 0x76C99C4, 0x772B2C0, 0x77E55B7, 0x7846EB3, 0x78A88AE, 0x790A1AA, 0x7526EFB
 .long  0x75787F7, 0x75DA1F3, 0x763BAEE, 0x76F5DE6, 0x77577E1, 0x77B90DD, 0x781AAD9, 0x78D4CD0
 .long  0x79366CC, 0x79F99C4, 0x7E10094, 0x7CF44A1, 0x7DB7799, 0x7E71A90, 0x7ED338C, 0x7FF8080
 .long  0x7328080, 0x7DC8080, 0x7C88080, 0x7508080, 0x775CD2C, 0x76944EA, 0x7808080, 0x71A61FF
 .long  0x7244D40, 0x7242C15, 0xFFF8080, 0xF338080, 0xF668080, 0xF998080, 0xFCC8080, 0xF008080
 .long  0xF4C54FF, 0xFAB3BBB, 0xFE10094, 0xFE4556E, 0xF952B15, 0xFDA7751, 0xFB2AB00, 0xFC2A262
 .long  0xF1DFF6B, 0xF68D4A2, 0xF69D4EA, 0xFBD88AE, 0xA922D17, 0xC6E4130, 0xE286963, 0x74C55FF
 .long  0x768D536, 0x7FF8080, 0x7FF8080, 0x7FF8080, 0x2922D17, 0x46E4130, 0x6286963,    0x8080
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Again, thanks to my work with Blackmagic Design I was able to spot YUV pixels straight away (like all these 8080 values for example).&lt;/p&gt;
&lt;p&gt;Obviously it was insane to dump the entire UI by hand with the pen again, so yeah, I created another tool - M240UITool&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[18]&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Leica M (typ 240) UI Tool v1.0
Usage: ./M240UITool [-a address] [-i imagebase] [-s script] [-d dump] [-f folder] [-l LUT] [-rbv] FIRMWARE.BIN

This tool will help you to find UI resources in firmware.
Use following arguments:
    -a      Specify address of the gui_CopyImageDesc function (ex. 0x2F95E0)
    -i      Specify firmware imagebase
    -s      Specify IDC file name
    -c      Specify container file name
    -d      Specify dump image format
       png  - PNG format
       bmp  - BMP (ARGB) format
    -f      Specify folder for dumped images
    -l      Specify LUT for images (filename of address)
    -b      Specify number of bytes to display in verbose mode
    -r      Try to recover string characters
    -v      Be verbose
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Apart from dumping all image assets from firmware file to BMP/PNG, this tool can also produce IDC script for IDA to define all UI resources.&lt;/p&gt;
&lt;p&gt;So far we already know that &lt;code class=&quot;highlighter-rouge&quot;&gt;gui_CopyImageDesc&lt;/code&gt; is called multiple times from the function creating one UI page. I thought it would be awesome to have a UI resource browser and define all page-rendering functions. This is what the &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; option is for - it produces a special container to be used in the viewer.&lt;/p&gt;
&lt;p&gt;And who said that a UI resource browser cannot look fancy?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ui_emu.png&quot; alt=&quot;ui_emu.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Being interactive (semi-transparent buttons on a screenshot above) this tool allows you to not only scroll through EVF/LCD menu pages, but also to step through rendering stages within one page.&lt;/p&gt;
&lt;p&gt;Unfortunately, the source for this masterpiece was lost somewhere but the header files are still there as a part of M240UITool, so it is technically possible to recreate it from scratch.&lt;/p&gt;
&lt;h3 id=&quot;debug-menu&quot;&gt;Debug Menu&lt;/h3&gt;
&lt;p&gt;What is the first string the reverse engineer usually searches for in the target? I bet on “debug” and derivatives.&lt;/p&gt;
&lt;p&gt;There were plenty of interesting strings in firmware, but these ones are special:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings ./IMG_LOKI-212_1.1.0.2.bin | grep &quot;Debug Mode&quot;
GUI: State: %d! Scanning for Debug Mode successful
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
GUI: Scanning for Debug Mode: State: %d, Ignore long DEL
GUI: Scanning for Debug Mode: State: %d
...
GUI: ScanningForDebugWithKeyAndJoyStick(): g_GUI_CheckForDebugWithKeyAndJoyStick = %d
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looks like it is possible to enter camera debug mode using some key combo. All these strings are referenced from one giant function &lt;code class=&quot;highlighter-rouge&quot;&gt;ScanningForDebugWithKeyAndJoyStick&lt;/code&gt; which implements key scanning state machine. This is what it looks like in IDA&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/debug_mode.png&quot; alt=&quot;debug_mode.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I am not going to lie, it took some time to understand how hardware buttons are handled in firmware and then to recover enums for keys and joystick. But even after I got the combo it was pretty disappointing to find out that it does nothing. Probably it works only from some particular GUI page. A couple more evenings of manual GUI state machine tracing and this problem was solved as well pointing to the Reset menu page.&lt;/p&gt;
&lt;p&gt;Finally - Welcome to Debug Mode&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/debug_menu.png&quot; alt=&quot;debug_menu.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I have been thinking a lot if I should make this combo public but decided not to do that. I respect the hard work Leica is doing bringing their unique cameras to market and don’t want to be responsible if their Service Centres are flooded with broken bodies as a result of some thoughtless curiosity.&lt;/p&gt;
&lt;p&gt;Having said that, I would like to provide some enums to make reverse engineering a lot easier for someone who is willing to walk the same path.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControlActionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kControlAction_Idle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlAction_Push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlAction_Release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 2
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlAction_LongPush&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 3
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControlBtnType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kControlBtn_LV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_PLAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_DEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 2
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_ISO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 3
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_MENU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 4
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlBtn_SET&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 5
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControlJoystickType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kControlJoy_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 0
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 1
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 2
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 3
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;kControlJoy_Right&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 4
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;ptp&quot;&gt;PTP&lt;/h3&gt;
&lt;p&gt;Looking around USB task code I was able to identify three different USB modes (it was also confirmed by debug menu):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PTP&lt;/li&gt;
&lt;li&gt;MSC (Mass Storage Class)&lt;/li&gt;
&lt;li&gt;Leica Custom&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;PTP is the most interesting one because it is well documented and allows you to control the camera.&lt;/p&gt;
&lt;p&gt;It is pretty easy to locate PTP handlers in the firmware because there are a lot of strings referenced from that code.&lt;br/&gt;All PTP requests are divided into three groups: &lt;strong&gt;Legacy&lt;/strong&gt;, &lt;strong&gt;Leica Extended (LE)&lt;/strong&gt; and &lt;strong&gt;Production&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Debug messages helped to name pretty much every code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Legacy:                            Leica Extented:                          Production:                           
0x1001 - GetDeviceInfo             0x9001 - Set Camera Settings             0x9100 - Open Production Session      
0x1002 - OpenSession               0x9002 - Get Camera Settings             0x9101 - Close Production Session     
0x1003 - CloseSession              0x9003 - Get Lens Parameter              0x9102 - UpdateFirmware               
0x1004 - Get Storage ID            0x9004 - Release Stage                   0x9103 - Open OSD Session             
0x1005 - Get Storage Info          0x9005 - Open LE Session                 0x9104 - Close OSD Session            
0x1006 - GetNumObjects             0x9006 - Close LE Session                0x9105 - Get OSD Data                 
0x1007 - GetObjectHandles          0x9007 - RequestObjectTransferReady      0x9106 - GetFirmwareStruct            
0x1008 - GetObjectInfo             0x9008 - GetGeoTackingData               0x910B - GetDebugMenu                 
0x1009 - GetObject                 0x900A - Open Debug Session              0x910C - SetDebugMenu                 
0x100A - Get Thumb                 0x900B - Close Debug Session             0x910D - ODIN Message                 
0x100B - Delete Object             0x900C - Get Debug Buffer                0x910E - GetDebugObjectHandles        
0x100E - Initiate Capture          0x900D - Debug Command String            0x910F - GetDebugObject               
0x1014 - GetDevicePropDesc         0x900E - Get Debug Route                 0x9110 - DeleteDebugObject            
0x1015 - GetDevicePropV            0x900F - SetIPTCData                     0x9111 - GetDebugObjectInfo           
0x101C - Initiate Open Capture     0x9010 - GetIPTCData                     0x9112 - WriteDebugObject             
                                   0x9020 - Get3DAxisData                   0x9113 - CreateDebugObject            
                                   0x9030 - OpenLiveViewSession             0x9114 - Calibrate 3Daxis             
                                   0x9031 - CloseLiveViewSession            0x9115 - Magnetic calibration         
                                   0x9033 - Unknown                         0x9116 - Get Viewfinder Data          
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The PTP interface implementation itself seems standard, however some commands have constrains that I intentionally omit here.&lt;/p&gt;
&lt;p&gt;Anyway, all the above is pretty exciting, so you may think “&lt;em&gt;Lets just connect camera over USB and start probing with libptp&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Oh, shi…&lt;/p&gt;
&lt;p&gt;Leica M240 does NOT have a USB port by design.&lt;/p&gt;

&lt;h2 id=&quot;handgrip-port&quot;&gt;Handgrip Port&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;Leica doesn’t offer a lot of accessories for this camera, however there is one particularly interesting. I am talking about &lt;strong&gt;Leica Multifunctional Handgrip M (14495)&lt;/strong&gt;. It replaces the bottom metallic place and provides built-in GPS and several outputs like USB, SCA flash terminal, DIN/ISO-X and power sockets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/hand_grip.jpg&quot; alt=&quot;hand_grip.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;And you may think again “&lt;em&gt;Awesome, let’s just buy that, attach it to the camera, connect the camera over USB and start probing with libptp&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;Oh, shi…&lt;/p&gt;
&lt;p&gt;It costs almost $900 USD.&lt;/p&gt;
&lt;p&gt;It is like nine hundred reasons to craft my own adapter instead. However, just in case I set up eBay notifications for used grip.&lt;/p&gt;
&lt;h3 id=&quot;the-socket&quot;&gt;The Socket&lt;/h3&gt;
&lt;p&gt;Socket on a camera looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/socket_big.png&quot; alt=&quot;socket_big.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I tried searching for it on the internet, but seriously, how would you describe it to google?&lt;/p&gt;
&lt;p&gt;Being a bit desperate I have started to think about some crazy things like gluing foil or needles to the eraser until one day at work in Blackmagic Design looking at camera PCB I have noticed that one socket has a very familiar shape. The next day I brought my Leica M240 to work and yes, it looked similar, just a lot longer with more contact pads.&lt;/p&gt;
&lt;p&gt;So it was a matter of asking our component manager for a part number and then browsing Samtec for the one I need - &lt;strong&gt;ERM8-013-05.0-L-DV-TR&lt;/strong&gt; &lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[19]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/socket_samtec.png&quot; alt=&quot;socket_samtec.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We also asked Samtec if it is possible to get a sample and yes, they kindly agreed to send us some.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/samtec_sample.png&quot; alt=&quot;samtec_sample.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;A bit of soldering, cardboard and tape to get my own breakout v2013.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/breakout_v2013.png&quot; alt=&quot;breakout_v2013.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Later in 2018 I decided to ask Samtec personally for another sample. However, this time I wanted something better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ERCD-013-05.00-TTR-TTR-1-D&lt;/strong&gt; &lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[20]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/samtec_breakout.png&quot; alt=&quot;samtec_breakout.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Then it was lots of soldering, swearing, wire cutting, swearing and soldering again just to get breakout v2018:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/breakout_v2018.png&quot; alt=&quot;breakout_v2018.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;pinout&quot;&gt;Pinout&lt;/h3&gt;
&lt;p&gt;The socket has 26 contacts - 13 on each side. Even before I managed to build my breakout I have done some research probing camera socket using multimeter and logic analyser. By the way, it is necessary to put a magnet on a bottom lid sensor in order for camera to think a cover is attached.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ground (camera is off, no battery)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I always start with the ground because it is safe and very easy to find.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe1_gnd.png&quot; alt=&quot;probe1_gnd.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;So there are 8 ground lines altogether (dark grey).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Potential (camera is on)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the camera is ON it is possible to measure the potential on each pad in order to get an idea about logic and power levels.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe2_potential.png&quot; alt=&quot;probe2_potential.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The levels on 8-9 and 11-13 are too high to be logic, therefore I defined these pads as power (red).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resistance (camera is off, no battery)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another useful thing to measure is resistance. In some cases it helps to identify inputs and group some lines.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe3_resistance.png&quot; alt=&quot;probe3_resistance.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linked outputs (camera is off, no battery)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then I have decided to probe all external contact pads on the camera body to check if they are linked to the service port.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe4_links.png&quot; alt=&quot;probe4_links.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Flash Sync pad on hotshoe was directly connected to line 10.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logic Analyser (camera is on)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data for every line was captured using the following sequence:&lt;br/&gt;Turn ON, camera should be in LV mode, take a picture, start video recording&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/signals.png&quot; alt=&quot;signals.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There were two lines showing some kind of data transfers: 01 and 21.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;01&lt;/strong&gt; - 115200, 8 Bits per Transfer, 1 Stop Bit, Even Parity Bit, LSB first&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/signal01_orig.png&quot; alt=&quot;signal01_orig.png&quot;/&gt; Every 500ms it sends some counter &lt;code class=&quot;highlighter-rouge&quot;&gt;C3 3C 02 81 00 01 00 82&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;C3 3C 02 81 01 01 00 83&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;C3 3C 02 81 02 01 00 80&lt;/code&gt; …&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;21&lt;/strong&gt; - 115200, 8 Bits per Transfer, 1 Stop Bit, No Parity Bit, LSB first&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/signal21_orig.png&quot; alt=&quot;signal21_orig.png&quot;/&gt; It sends SH7216 bootloader log (“Leica Camera AG” on screenshot above)&lt;/p&gt;
&lt;p&gt;Let’s mark them with dark blue. It is pretty sad not having Maestro log exposed somewhere even with maximum debug level enabled in Debug menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe5_signals.png&quot; alt=&quot;probe5_signals.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The ones with signals have resistance around 310kOhm.&lt;br/&gt;Don’t know why, but I assumed that other data lines might have similar resistance or close. Therefore, I have defined ~300kOhm, ~200kOhm and ~100kOhm lines as data as well (shades of blue on a picture).&lt;/p&gt;
&lt;p&gt;Combined, I have the following picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe6_combined.png&quot; alt=&quot;probe6_combined.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;12 candidates for data lines. But how to test that? After a brief chat with hardware people about electrical safety working with ICs, I ended up poking via 4kOhm resistor which supposed to reduce the current to a level where I am unlikely to burn inputs.&lt;/p&gt;
&lt;h3 id=&quot;uarts&quot;&gt;UARTs&lt;/h3&gt;
&lt;p&gt;Another assumption I made is that RX line should be next to TX line. Lines 02, 03 and 20 look like good candidates because they are both 3.3V like TX.&lt;br/&gt;Initially, I used Bus Pirate to talk to these lines, but unfortunately it couldn’t keep up giving a pretty messy result. Then I switched to SiLabs based cables since they are a lot more reliable and do not conflict with anything on macOS.&lt;/p&gt;
&lt;p&gt;At first, I attached cable TX to pin 20 and started to type &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; after bootloader banner. As expected the camera echoed characters back after a short delay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/bl_uart.png&quot; alt=&quot;bl_uart.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The next UART looking pins are 02 and 03. Unfortunately, there was no indication that someone is listening on those.&lt;/p&gt;
&lt;p&gt;On a diagram known UARTs are defined with darker shade of green.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe7_uart.png&quot; alt=&quot;probe7_uart.png&quot;/&gt;&lt;/p&gt;
&lt;h3 id=&quot;usb&quot;&gt;USB&lt;/h3&gt;
&lt;p&gt;It all started with a cut in half USB cable with header in a middle and 4kOhm resistors to probe. Signal integrity for differential pair? Nah, it didn’t bother me much back then :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/usb_probe.png&quot; alt=&quot;usb_probe.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Then I sniffed some consumer devices with USB at home to get an idea what USB comm looks like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Canon Camera&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_1DX_Connect.png&quot; alt=&quot;USB_1DX_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blackmagic Pocket Cinema Camera&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_BMPCC_Connect.png&quot; alt=&quot;USB_BMPCC_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Canon Camcoder&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_CanonHV40_Connect.png&quot; alt=&quot;USB_CanonHV40_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JVC Camcoder&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_JVC_Cam_Connect.png&quot; alt=&quot;USB_JVC_Cam_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keyring&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_Keyring_Connection.png&quot; alt=&quot;USB_Keyring_Connection.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KidiZoom Camera&lt;/strong&gt;&lt;br/&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/USB_KidiZoom_Connect.png&quot; alt=&quot;USB_KidiZoom_Connect.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;They are all a bit different, but initial D- D+ state is low. Well, good to know, let’s check what is left on grip port similar to that:&lt;br/&gt;&lt;strong&gt;22&lt;/strong&gt; - unlikely because D- D+ are differential pair and should be pretty close&lt;br/&gt;&lt;strong&gt;04/05&lt;/strong&gt; - unlikely because they have different resistance&lt;br/&gt;&lt;strong&gt;14/15&lt;/strong&gt; - unlikely because they have different resistance&lt;br/&gt;&lt;strong&gt;15/16&lt;/strong&gt; - possible because they are close and have similar resistance&lt;/p&gt;
&lt;p&gt;Therefore, I attached USB D- D+ to the 15/16 and plugged it to iMac…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/usb_ptp.jpg&quot; alt=&quot;usb_ptp.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There was USB PTP on a screen, but camera still didn’t appear on the host. I tried setting up various USB termination schemes on breadboard but nothing worked. Beagle showed many corrupted packets and other errors. Eventually I gave up and got back to reverse engineering firmware.&lt;/p&gt;
&lt;p&gt;This is the final pinout with USB painted as dark green.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/probe8_final.png&quot; alt=&quot;probe8_final.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Who would have thought, several years later I received desired eBay notification and managed to get this grip pretty cheap.&lt;/p&gt;
&lt;p&gt;Finally, I could check my PTP findings. But first I was obviously curious what does USB PHY look like inside the grip.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/grip_pcb.png&quot; alt=&quot;grip_pcb.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Inside I found SMSC 2512b hub&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[21]&lt;/a&gt; right on the way from grip socket to Mini USB connector. Chip is operating in default mode because there is no EEPROM and SCL/SDA pins are pulled down. First downstream port is routed to the camera body socket, but second one is not connected to anything.&lt;/p&gt;
&lt;p&gt;I am probably missing something but to me this solution doesn’t make a lot of sense. Looking through datasheet I found out that chip has “Fully integrated USB termination and Pull-up/Pull-down resistors”. Maybe Leica engineers decided not to implement their own USB PHY and used the one in a hub which is very well tested and works out of the box. Actually, I can’t blame them because I tried to do same myself earlier and it seems to be a tricky task. It can also be a feature protecting grip from counterfeit, who knows.&lt;/p&gt;
&lt;p&gt;Anyway, if you are good at USB PHY and willing to help, feel free to ping me, it should be possible to make USB port work without grip :)&lt;/p&gt;
&lt;h3 id=&quot;ptp-again&quot;&gt;PTP again&lt;/h3&gt;
&lt;p&gt;As I have said it was time to play with Leica PTP extensions.&lt;/p&gt;
&lt;p&gt;Luckily I found pretty cool C++ library to use instead of libptp - libEasyPTP&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[22]&lt;/a&gt;. It also didn’t take long to write tool based on this library since I already knew some constrains in Leica PTP interface.&lt;br/&gt;An even if &lt;strong&gt;M240PTPTool&lt;/strong&gt; is quite buggy it was good enough as PoC&lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[23]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are just two PTP requests used: &lt;strong&gt;GetDebugBuffer (0x900C)&lt;/strong&gt; and &lt;strong&gt;DebugCommandString (0x900D)&lt;/strong&gt;.&lt;br/&gt;By the way, in order to make modules to fill debug log it is necessary to set Debug Level to “Debug” or “Debug RAW” in Debug Menu.&lt;/p&gt;
&lt;p&gt;Tool CLI provided several options:&lt;br/&gt;&lt;strong&gt;exit&lt;/strong&gt; quits the tool;&lt;br/&gt;&lt;strong&gt;flush&lt;/strong&gt; command dumps debug buffer from the camera:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;M240&amp;gt; flush
I:[00:11:468]|01| DATE/TIME CORRECTED by 5921 sec
D:[00:12:079]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:179]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:282]|11| Message received from TID 0 for TID 1 over MBX 3
D:[00:12:283]|11| Message received from TID 0 for TID 1 over MBX 3
D:[00:12:301]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:402]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
D:[00:12:502]|00| Send message from TID 0 to TID 1 over MBX 3 - length: 4 - MesgID: 0x22020103
...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;any other text will be sent as Debug Command String to the camera. &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; for example outputs all possible commands with arguments:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;M240&amp;gt; help
 ********* debug command description ********

 exposure request
 Description: requests a release from Sub CPU
 Parameter 1: Exposure Time TV

 still request
 Description: simulates the -still request- command flow of Sub CPU
 Parameter: no
 
 ...

 send Message;[Parameter1];[Parameter2];[Parameter2];...;...
 Description: Sending Message to Task
 Parameter 1: Receiver Task ID
 Parameter 2: Command ID
 Parameter 3: Command Data[0] (32 Bit)
 Parameter 4: Command Data[1] (32 Bit)
 Parameter 5:   .
 Parameter 6:   .
 use maximum 10 Parameter
 
 ...
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The complete list is quite big, but wow, we can send raw Softune messages to any task! What is so interesting we could have sent there…&lt;/p&gt;
&lt;p&gt;The other popular string to search in firmware - “dump”. Let’s take a look what we have got in our case.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;$ strings IMG_LOKI-212_1.1.0.2.bin | rg -i dump
GUI: HEX DUMP: Address: %x, Length: %d
HSK: DBG_WRITE_ROM_DUMP_SD: File was properly opened, but it seems to be empty.
ROM_DUMP
HSK: DBG_WRITE_ROM_DUMP_SD: Flushing Dump to ROM. Size %d
SD:\ROM_DUMP.bin
HSK: DBG_WRITE_ROM_DUMP_SD Command received!
ROM_DUMP.bin
HSK: DUMP failed, no cards inserted!
HSK: DUMP FlashROM to SD card.
HSK: DUMP FlashROM to CF card.
Dumping files to card
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Apparently, it is possible to dump firmware to SD card. It is easy to find code responsible for that by reference to string “Dumping files to card”. It is located in giant message hander of System Task (pid 11 as we already know) and can be triggered by message &lt;code class=&quot;highlighter-rouge&quot;&gt;0x11080006&lt;/code&gt; without arguments.&lt;/p&gt;
&lt;p&gt;Type &lt;code class=&quot;highlighter-rouge&quot;&gt;send Message;11;0x11080006&lt;/code&gt; in &lt;strong&gt;M240PTPTool&lt;/strong&gt;, hit enter and observe the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ptp_dump.jpg&quot; alt=&quot;ptp_dump.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Then remove SD card and check what is on it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/ptp_dump_files.png&quot; alt=&quot;ptp_dump_files.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here it is, full dump including firmware.&lt;/p&gt;
&lt;p&gt;As you can see this opens up endless possibilities. For example, it should be possible to build tiny device with MCU supporting USB host and some buttons to perform complex message sequences…&lt;/p&gt;
&lt;p&gt;And then we had our second child :)&lt;/p&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;There is usually a way to study devices you don’t want to break without opening body or soldering wires to its PCB. Below are my tips if you don’t mind:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;get all the public information you can about the device: datasheets, tear downs, internal photos, videos from factory &lt;a href=&quot;https://alexhude.github.io/2019/01/24/hacking-leica-m240.html#references&quot;&gt;[24]&lt;/a&gt; ;)&lt;/li&gt;
&lt;li&gt;dig into firmware if you have it in order to find hints about external outputs&lt;/li&gt;
&lt;li&gt;always google for various magics and odd byte sequences you find in firmware files&lt;/li&gt;
&lt;li&gt;measure GND/Potential/Resistance for all unknown exposed external pads&lt;/li&gt;
&lt;li&gt;probe these pads with logic analyser&lt;/li&gt;
&lt;li&gt;always remember about safety measures dealing with electronics&lt;/li&gt;
&lt;li&gt;try to exclude pads not in your scope of interest (ground, power)&lt;/li&gt;
&lt;li&gt;if you can’t recognize signal by its analogue view, try googling for the most popular ones (USB/UART/SPI/I2C/1Wire)&lt;/li&gt;
&lt;li&gt;if you have some ideas about signal nature, try verifying yourself with similar consumer electronics&lt;/li&gt;
&lt;li&gt;think &lt;del&gt;three&lt;/del&gt; five times before trying to SEND data to device, like driving line low/high&lt;/li&gt;
&lt;li&gt;and of course, do not hesitate to ask other people&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://alexhude.github.io/assets/2019/2019-01-24-hacking-leica-m240/pwned_end.png&quot; alt=&quot;pwned_end.png&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/getorix&quot;&gt;@getorix&lt;/a&gt; | &lt;a href=&quot;http://github.com/alexhude&quot;&gt;github.com/alexhude&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;happy-hacking&quot;&gt;Happy Hacking!&lt;/h3&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;hr/&gt;&lt;p&gt;[1] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/pwadsplit&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/pwadsplit&lt;/a&gt;&lt;br/&gt;[2] &lt;a href=&quot;http://doom.wikia.com/wiki/WAD&quot;&gt;http://doom.wikia.com/wiki/WAD&lt;/a&gt;&lt;br/&gt;[3] &lt;a href=&quot;https://en.wikipedia.org/wiki/LHA_(file_format)&quot;&gt;https://en.wikipedia.org/wiki/LHA_(file_format)&lt;/a&gt;&lt;br/&gt;[4] &lt;a href=&quot;https://github.com/CatacombGames/CatacombArmageddon/blob/master/LZW.C&quot;&gt;https://github.com/CatacombGames/CatacombArmageddon/blob/master/LZW.C&lt;/a&gt;&lt;br/&gt;[5] &lt;a href=&quot;https://github.com/krater/Blackfin-IDA-Pro-Plugin&quot;&gt;https://github.com/krater/Blackfin-IDA-Pro-Plugin&lt;/a&gt;&lt;br/&gt;[6] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/xortool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/xortool&lt;/a&gt;&lt;br/&gt;[7] &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_file_signatures&quot;&gt;https://en.wikipedia.org/wiki/List_of_file_signatures&lt;/a&gt;&lt;br/&gt;[8] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240FwTool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240FwTool&lt;/a&gt;&lt;br/&gt;[9] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/fr&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/fr&lt;/a&gt; (requires IDA 6.4 SDK)&lt;br/&gt;[10] &lt;a href=&quot;https://en.wikipedia.org/wiki/Delay_slot&quot;&gt;https://en.wikipedia.org/wiki/Delay_slot&lt;/a&gt;&lt;br/&gt;[11] &lt;a href=&quot;https://edevice.fujitsu.com/fj/MANUAL/MANUALp/en-pdf/CM71-10158-1E.pdf&quot;&gt;https://edevice.fujitsu.com/fj/MANUAL/MANUALp/en-pdf/CM71-10158-1E.pdf&lt;/a&gt; (link is dead)&lt;br/&gt;[12] &lt;a href=&quot;https://en.wikipedia.org/wiki/Softune&quot;&gt;https://en.wikipedia.org/wiki/Softune&lt;/a&gt;&lt;br/&gt;[13] &lt;a href=&quot;https://en.wikipedia.org/wiki/Relocatable_Object_Module_Format&quot;&gt;https://en.wikipedia.org/wiki/Relocatable_Object_Module_Format&lt;/a&gt;&lt;br/&gt;[14] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/FRLibTool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/FRLibTool&lt;/a&gt;&lt;br/&gt;[15] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/IDA/signatures/&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/IDA/signatures/&lt;/a&gt;&lt;br/&gt;[16] &lt;a href=&quot;https://www.fujitsu.com/downloads/MICRO/fma/pdfmcu/resofrke-cm71-00321-3e.pdf&quot;&gt;https://www.fujitsu.com/downloads/MICRO/fma/pdfmcu/resofrke-cm71-00321-3e.pdf&lt;/a&gt;&lt;br/&gt;[17] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/IDA/scripts/softune.py&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/IDA/scripts/softune.py&lt;/a&gt;&lt;br/&gt;[18] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240UITool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240UITool&lt;/a&gt;&lt;br/&gt;[19] &lt;a href=&quot;https://www.samtec.com/products/erm8-013-05.0-l-dv-tr&quot;&gt;https://www.samtec.com/products/erm8-013-05.0-l-dv-tr&lt;/a&gt;&lt;br/&gt;[20] &lt;a href=&quot;https://www.samtec.com/products/ercd-013-05.00-ttr-ttr-1-d&quot;&gt;https://www.samtec.com/products/ercd-013-05.00-ttr-ttr-1-d&lt;/a&gt;&lt;br/&gt;[21] &lt;a href=&quot;https://www.microchip.com/wwwproducts/en/USB2512B&quot;&gt;https://www.microchip.com/wwwproducts/en/USB2512B&lt;/a&gt;&lt;br/&gt;[22] &lt;a href=&quot;https://github.com/TrueJournals/libEasyPTP&quot;&gt;https://github.com/TrueJournals/libEasyPTP&lt;/a&gt;&lt;br/&gt;[23] &lt;a href=&quot;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240PTPTool&quot;&gt;https://github.com/alexhude/LeicaHacks/tree/master/Tools/M240PTPTool&lt;/a&gt;&lt;br/&gt;[24] &lt;a href=&quot;https://youtu.be/p4t-OVIvuy8?t=196&quot;&gt;https://youtu.be/p4t-OVIvuy8?t=196&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Sat, 26 Jan 2019 02:05:14 +0000</pubDate>
<dc:creator>pi-rat</dc:creator>
<og:title>How to Hack an Expensive Camera and Not Get Killed by Your Wife</og:title>
<og:description>Disclaimer</og:description>
<og:url>/2019/01/24/hacking-leica-m240.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://alexhude.github.io/2019/01/24/hacking-leica-m240.html</dc:identifier>
</item>
<item>
<title>H-1B: Oracle favored hiring foreign graduates of US colleges over American grads</title>
<link>https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege</link>
<guid isPermaLink="true" >https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege</guid>
<description>&lt;p&gt;Not only did Redwood City software titan Oracle favor hiring Asians for key departments, it favored non-citizen Asian graduates of U.S. colleges over American graduates, the federal government claimed in a lawsuit.&lt;/p&gt;
&lt;p&gt;The Department of Labor alleges in its suit against Oracle that a “vast majority” of the firm’s hires through its college recruiting program were non-citizen visa holders from Asia.&lt;/p&gt;
&lt;p&gt;“These students required work authorization to remain in the United States after graduation,” the Labor Department said in a court filing. “In other words, Oracle overwhelmingly hires workers dependent upon Oracle for sponsorship to remain in the United States. This preference for a workforce that is dependent on Oracle for authorization to work in the United States lends itself to suppression of that workforce’s wages.”&lt;/p&gt;
&lt;p&gt;Of about 500 recent college and university graduates hired into three job categories at Oracle from 2013 to 2016, some 90 percent were Asian, the filing said.&lt;/p&gt;
&lt;p&gt;At the same time, Asians, blacks and women were “systematically underpaid,” according to allegations in the lawsuit, which also claimed that unequal pay cost workers &lt;a href=&quot;https://www.mercurynews.com/2019/01/22/oracles-bias-against-women-blacks-and-asians-cost-more-than-400-million-in-lost-wages-feds/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;$400 million&lt;/a&gt; in lost wages.&lt;/p&gt;
&lt;p&gt;The company this week &lt;a href=&quot;https://www.oracle.com/corporate/pressrelease/oracle-statement-012319.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;attacked&lt;/a&gt; the lawsuit, calling it “meritless” and claiming it was based on false allegations and “cherry-picked statistics.”&lt;/p&gt;
&lt;p&gt;Oracle, led by executive chairman Larry Ellison, said it is in compliance with its regulatory obligations — as a federal contractor it falls under the oversight of the government — and committed to equality.&lt;/p&gt;
&lt;p&gt;The government also alleged in the lawsuit that Oracle, amid the legal action, destroyed documents related to its hiring process.&lt;/p&gt;
&lt;p&gt;Oracle’s pay gap for Asians and women began at hiring, when those workers were either started at lower salaries than other employees, or hired into lower-paid jobs, the suit alleged. And the gap broadened over time, according to the suit. “The longer that female and Asian employees stay with Oracle, the less they are paid in relation to other employees,” the suit claimed.&lt;/p&gt;

&lt;p&gt;The lawsuit caught the attention of Ron Hira, a Howard University professor and critic of the use of foreign workers on visas. Foreign citizens recently graduated from U.S. colleges and universities usually work under an Optional Practical Training work permit or H-1B visa, both of which have been the focus of reported abuse. Oracle is not alone in favoring foreign workers who can be paid less because they’re tied to a company by their visa or work permit, Hira alleged.&lt;/p&gt;
&lt;p&gt;“Industry’s key argument for more cheap H-1B and OPT guest workers is that there’s a shortage of U.S. talent,” Hira said. “That argument completely falls apart in the face of these findings. In fact, the industry is using the visa programs for cheaper guest workers, undercutting U.S. workers, damaging the U.S. talent pipeline, and exacerbating its woeful record on workforce diversity.”&lt;/p&gt;

&lt;p&gt;Compete America, a lobby group representing Oracle, other tech giants and a variety of businesses and organizations, in 2017 called high-skills immigration programs “necessary components for maintaining our country’s leadership and competitiveness.” The group &lt;a href=&quot;https://competeamerica.org/2017/04/19/compete-america-statement-h-1b-visas-president-trumps-buy-american-hire-american-executive-order/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;said&lt;/a&gt; it supported “balanced reforms to the H-1B program, ensuring that all employers are using these visas in the spirit Congress intended – to fill jobs requiring highly skilled professionals in fields where qualified U.S. workers are harder to find.”&lt;/p&gt;

</description>
<pubDate>Sat, 26 Jan 2019 00:49:48 +0000</pubDate>
<dc:creator>hanging</dc:creator>
<og:type>article</og:type>
<og:title>H-1B: Oracle favored hiring foreign graduates of U.S. colleges over American grads, feds allege</og:title>
<og:url>https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege/</og:url>
<og:description>Redwood City software firm fires back that it’s committed to equality, and in compliance with regulations.</og:description>
<og:image>https://www.mercurynews.com/wp-content/uploads/2016/08/20140918__0919oracle21.jpg?w=645&amp;h=430</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.mercurynews.com/2019/01/25/h-1b-oracle-favored-hiring-foreign-graduates-of-u-s-colleges-over-american-grads-feds-allege/</dc:identifier>
</item>
</channel>
</rss>