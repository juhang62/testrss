<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Is Apple Silicon Ready?</title>
<link>https://isapplesiliconready.com/</link>
<guid isPermaLink="true" >https://isapplesiliconready.com/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://isapplesiliconready.com/&quot;&gt;https://isapplesiliconready.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25164540&quot;&gt;https://news.ycombinator.com/item?id=25164540&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 245&lt;/p&gt;
&lt;p&gt;# Comments: 156&lt;/p&gt;
</description>
<pubDate>Fri, 20 Nov 2020 20:24:02 +0000</pubDate>
<dc:creator>caiobegotti</dc:creator>
<og:url>https://isapplesiliconready.com/</og:url>
<og:title>Is Apple Silicon ready ?</og:title>
<og:image>https://isapplesiliconready.com/image.png</og:image>
<og:description>Ultimate guide for macOS apps that are Apple silicon (M1) ready.</og:description>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://isapplesiliconready.com/</dc:identifier>
</item>
<item>
<title>Moving from Macbook to Linux</title>
<link>https://monadical.com/posts/moving-to-linux-desktop.html</link>
<guid isPermaLink="true" >https://monadical.com/posts/moving-to-linux-desktop.html</guid>
<description>&lt;p&gt;&lt;small&gt;&lt;span&gt;&lt;span class=&quot;ui-lastchangeuser&quot;&gt; &lt;/span&gt;  &lt;/span&gt; &lt;span class=&quot;pull-right&quot;&gt;280 views &lt;/span&gt;&lt;br/&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;center&amp;gt; # 2020: The Year of the Linux Desktop - Moving from Macbook to Linux &amp;lt;/center&amp;gt; Finally. [The year of the Linux desktop](https://www.reddit.com/r/linux/comments/3038d4/when_was_the_first_year_of_the_linux_desktop/) has arrived. After many years of using Macbook Pros, I’m finally saying “Enough!”. I have a great 2010-2012 Macbook Pro that still rocks. But in 2014, I decided to buy a mid-2014 model and after only two years, it started falling apart. First, one of the speakers started sounding tinny. Then the power plug port pins burnt out. Then, just after the warranty expired, came [staingate](https://en.wikipedia.org/wiki/Staingate): the anti-reflective coating started to peel off, staining large portions of the screen. I dug around on the internets for advice and solved the problem by rubbing the film off the glass with metal polish. A few months later, the other speaker went the way of the first, and the power plug port pins burnt out again. Finally, the screen started to flicker (and it wasn't the LVDS display cable). Enough!! ![MacBook with stained screen](https://docs.monadical.com/uploads/upload_b1855534d988e8257e0daffe3567dab9.png) I still like the look and feel of the macOS, but with Apple downgrading its hardware (but still keeping those Apple prices!), the problems just kept stacking up. I couldn’t justify it anymore. So, after doing some research, I decided to go back to Linux on a Lenovo and tweak it to make it as similar as possible to what I was used to on macOS. Here’s my guide for how to improve the Linux desktop experience [TOC] ## Distro There are many flavours of Linux: Mint, Manjaro, Ubuntu, Debian… Most major distros will do the job, however, some of them come with useful out-of-the-box features. Two are especially worth mentioning: 1. [Pop OS](https://pop.system76.com/) This distro not only stands out for not being loaded with crapware (unnecessary, probably useless software), it also has its own distro version to manage Nvidia [video cards](https://en.wikipedia.org/wiki/Video_card). Nvidia cards are usually a headache for Linux users, since some cards only work with signed proprietary drivers. And once you manage to get the card working, your pain isn’t over: you’ll find out you've given birth to a power hog and your battery won't last. The latest Pop OS allows you to just turn off the GPU [without manually blacklisting modules](https://www.reddit.com/r/pop_os/comments/cu4au4/fix_battery_life_with_nvidia_gpu_mx250_on_lenovo/) and use the onboard card or operate in hybrid mode. There’s no need for [ACPI table hacks](https://major.io/2020/01/24/disable-nvidia-gpu-thinkpad-t490/) or [vgaswitcheroo](https://01.org/linuxgraphics/gfx-docs/drm/gpu/vga-switcheroo.html). The ability to turn off the GPU is integrated into the desktop. One click, finito. It also includes a simple tiling manager that can be turned on and off at will with a single click. 2. [Fedora](https://getfedora.org/en/workstation/download/) Fedora does a [great job](https://fedoraproject.org/wiki/Changes/ImprovedLaptopBatteryLife) with [power consumption](https://www.youtube.com/watch?v=mypteFGjwH4) and the latest version (32) works well out-of-the-box. With Fedora, many new features, such as [Wayland](https://wayland.freedesktop.org/), become available sooner than they do with other major distros. The troubles with Docker are mostly [gone](https://fedoramagazine.org/docker-and-fedora-32/). ## Battery life Battery life has always been a nightmare with Linux laptops. Fortunately, distros like Fedora, mentioned above, come with reasonable defaults so that laptops are more power efficient out-of-the-box. The old tools for optimizing battery life have evolved a lot—I’m talking about the duo [TLP](https://linrunner.de/tlp/) and [powertop](https://01.org/powertop/). To optimize battery power, the first thing to do is to establish a baseline while running on battery power. I prefer to start measuring idle power consumption (discharge rate depends on workload). If Windows is available, [BatteryInfoView](https://www.nirsoft.net/utils/battery_information_view.html) is useful for setting a goal by looking at the charge/discharge rate value. 1. powertop: `sudo powertop -c` will calibrate the measurement and present an estimate. 2. [powerstat](https://github.com/ColinIanKing/powerstat): `sudo powerstat` will wait for a delay and take measurements over time to generate statistics. If battery life is a major concern, for example, if you’re working away from a power source for the day, it’s better to be able to completely turn off the GPU. (The GPU consumes a lot of power and will run down your battery.) The section above on Pop OS contains some links and strategies for this. For Nvidia GPUs, the command `ndvia-smi` should confirm that the card is turned off. After turning off the GPU, set a new idle power consumption baseline. [TLP and powertop can get along together](https://gvisoc.com/tech/linux/2020/04/26/Lenovo-ThinkPad-T490s-a-Battery-Review-under-Linux.html), however, it's better if only one of them is in charge. I usually start with TLP, check and modify settings using `sudo tlpui` and then check with `sudo powertop` to see if there’s any optimization that’s not turned on. With this new tweak I can establish a new baseline. When you feel comfortable, you can start optimizing on your usual workload (browser + code editor + bluetooth headset, etc). Powertop is handy here. Some power hogs to watch out for: - Docker, containerd (switch them to on demand) - Browser tabs with misconfigured ads, mining, flash, etc. - Social networks (they are constantly polling or receiving socket events) - Unused interfaces (use `sudo ifdown interface_name down` to turn them off) - Any disk indexer - Monitoring software - Daemons checking for updates, file modifications, and syncs To get some extra milliwatts, you can try correcting throttling (if necessary) and undervolting. If undervolting is used, it’s advisable to test it on your usual workload and try to suspend and unsuspend the laptop to test for stability. It’s typical to undervolt identically on the CPU and cache. - https://github.com/erpalma/throttled - https://github.com/kitsunyan/intel-undervolt - https://github.com/georgewhewell/undervolt Battery lifespan For some Lenovo laptops, TLP allows you to set a different charge/discharge threshold so that the battery won't charge while it operates in the threshold band. This will prolong the battery lifespan. ## Scaling Screen scaling out-of-the-box on Linux usually sucks since it tends to make the elements tiny. To correct the scaling, a common solution for Gnome users is to install the tweaks package: ```bash sudo apt install gnome-tweaks gnome-tweaks ``` and then go to the Fonts panel and adjust the scaling factor to between 1.4 and 1.5 for a similar scaling to a Macbook Pro. ## Mouse After switching from a Macbook Pro, your new trackpad can feel awful.You might need to experiment on your own with what feels right to you, but I found that after using it for a few days, I got comfortable with this adaptive profile of Gnome tweaks: 1. Open `gnome-tweaks` 2. Keyboard &amp;amp; mouse panel 3. Acceleration profile: choose adaptive 4. Check disable while typing 5. Check mouse click emulation: fingers ## CTRL Key Most of the shortcuts are the same on Linux, but instead of the Command key you use the Control key. I prefer macOS shortcuts so I remapped the keys using `gnome-tweaks`. 1. Go to Keyboard &amp;amp; Mouse Panel 2. Click on Additional Layout Options 3. Find Alt/Win Key Behavior 4. Check: CTRL is mapped to Alt; Alt is mapped to Win. A full working solution is to use [kinto](https://github.com/rbreaves/kinto). If more options are needed, you might need to use `xmodmap` or `kinto`. http://xahlee.info/linux/linux_xmodmap_tutorial.html https://github.com/rbreaves/kinto ## Shortcuts If you don't use [kinto](https://github.com/rbreaves/kinto), you can set shortcuts up manually. Since I’ve been using Macbooks for so long, I’m used to Apple shortcuts. In Gnome-based systems you can manually configure or import shortcuts [using this script](https://gist.github.com/jdcaballerov/2fcfb817e332e290bf0943d57b8b4bfc) from [askubuntu](https://askubuntu.com/questions/26056/where-are-gnome-keyboard-shortcuts-stored). To export key bindings: `./keybindings.pl -e /tmp/keys.csv` To import: `./keybindings.pl -i /tmp/keys.csv` [You can find my bindings here](https://gist.github.com/jdcaballerov/9d08ff82b701cd5b54c70f1a9f651ef7). Since Alt was remapped, window related shortcuts should bind to Control. I use some other shortcuts included with my bindings to try to match my [spectacle](https://www.spectacleapp.com/) profile on macOS. ## Multitouch Gestures You can use [Fusuma](https://github.com/iberianpig/fusuma) to enable your Linux to recognize swipes or pinches and assign commands. ## Gifs and screenshots (peek and flameshot) Making screenshots and Gifs is easy and seamless on MacOS. To replicate these streamlined processes, I suggest the following: **Screencast** ```bash sudo apt-get install appmenu-gtk2-module appmenu-gtk3-module git clone https://github.com/lolilolicon/xrectsel.git sudo apt-install autoconf ./bootstrap ``` ```bash #!/usr/bin/env sh [ $# -lt 2 ] &amp;amp;&amp;amp; \ echo 'You have to pass a duration in seconds and a filename: &quot;gif.sh 10 /tmp/record.gif&quot;' &amp;amp;&amp;amp; \ exit 1 byzanz-record \ --cursor \ --verbose \ --delay=2 \ --duration=&quot;${1}&quot; \ &quot;$(xrectsel &quot;--x=%x --y=%y --width=%w --height=%h&quot;)&quot; \ &quot;${2}&quot; ``` From: https://github.com/lupoDharkael/flameshot/issues/172#issuecomment-466657937 ## Emoji Keyboard The emoji keyboard shortcut can collide with some text editors as vscode—since it is configured as `shift+ctrl+e`—so it needs to be changed. To change it, open `ibus-setup` and remap it so that it won't collide. ## Clipboard Manager For a very simple clipboard manager, I use clipit. `sudo apt install clipit` ## Password Manager [KeepassXC](https://keepassxc.org/download/#linux) can import 1password files and many others. ## xournal To annotate and sign PDFs, Apple's preview works amazingly well. On Linux, [xournal](https://github.com/xournalpp/xournalpp) can accomplish pretty much the same thing. ___ As Apple continues to downgrade the quality of its hardware (to match its pricey, disposable adaptors), we need to look for other options. These steps will give you a much better user experience—comparable to that of macOS—on a Gnome-based desktop on Linux. Please feel free to contribute your own tips and tweaks! You can send your contributions to [this Github repository](https://github.com/jdcaballerov/YOTLD/).&lt;/p&gt;


</description>
<pubDate>Fri, 20 Nov 2020 19:02:11 +0000</pubDate>
<dc:creator>gk1</dc:creator>
<og:title>The Year of the Linux Desktop</og:title>
<og:type>article</og:type>
<og:image>https://monadical.com/static/moving-to-linux-desktop.png</og:image>
<og:url>https://monadical.com/posts/moving-to-linux-desktop.html</og:url>
<og:description>The year of the Linux desktop has arrived. This is a guide for how to improve the Linux desktop experience.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://monadical.com/posts/moving-to-linux-desktop.html</dc:identifier>
</item>
<item>
<title>Study identifies reasons for soaring nuclear plant cost overruns in the U.S.</title>
<link>https://news.mit.edu/2020/reasons-nuclear-overruns-1118</link>
<guid isPermaLink="true" >https://news.mit.edu/2020/reasons-nuclear-overruns-1118</guid>
<description>&lt;div class=&quot;news-article--content--body--inner&quot;&gt;
&lt;div class=&quot;paragraph paragraph--type--content-block-text paragraph--view-mode--default&quot;&gt;
&lt;p&gt;A new analysis by MIT researchers details many of the underlying issues that have caused cost overruns on new nuclear power plants in the U.S., which have soared ever higher over the last five decades. The new findings may help the designers of new plants build in resilience to the factors that tend to cause these overruns, thus helping to bring down the costs of such plants.&lt;/p&gt;
&lt;p&gt;Many analysts believe nuclear power can play a significant part in reducing global emissions of greenhouse gases, and finding ways to curb these rising costs could be an important step toward encouraging the construction of new plants, the researchers say. The findings are being &lt;a href=&quot;https://doi.org/10.1016/j.joule.2020.10.001&quot; target=&quot;_blank&quot;&gt;published today&lt;/a&gt; in the journal &lt;em&gt;Joule&lt;/em&gt;, in a paper by an &lt;a href=&quot;http://trancik.mit.edu/&quot; target=&quot;_blank&quot;&gt;MIT team&lt;/a&gt;: professors Jessika Trancik and Jacopo Buongiorno, students Philip Eash-Gates SM ’19, Magdalena Klemun PhD ’20, Goksin Kavlak PhD ’18, and Research Scientist James McNerney.&lt;/p&gt;
&lt;p&gt;Among the surprising findings in the study, which covered 50 years of U.S. nuclear power plant construction data, was that, contrary to expectations, building subsequent plants based on an existing design actually costs more, not less, than building the initial plant.&lt;/p&gt;
&lt;p&gt;The authors also found that while changes in safety regulations could account for some of the excess costs, that was only one of numerous factors contributing to the overages.&lt;/p&gt;
&lt;p&gt;“It’s a known fact that costs have been rising in the U.S. and in a number of other locations, but what was not known is why and what to do about it,” says Trancik, who is an associate professor of energy studies in MIT’s Institute for Data, Systems and Society. The main lesson to be learned, she says, is that “we need to be rethinking our approach to engineering design.”&lt;/p&gt;
&lt;p&gt;Part of that rethinking, she says, is to pay close attention to the details of what has caused past plant construction costs to spiral out of control, and to design plants in a way that minimizes the likelihood of such factors arising. This requires new methods and theories of technological innovation and change, which the team has been advancing over the past two decades.&lt;/p&gt;
&lt;p&gt;Many of the excess costs were associated with delays caused by the need to make last-minute design changes based on particular conditions at the construction site or other local circumstances, so if more components of the plant, or even the entire plant, could be built offsite under controlled factory conditions, such extra costs could be substantially cut.&lt;/p&gt;
&lt;p&gt;Taking the containment buildings surrounding the reactor as an example of a cost component, certain design changes could help to reduce the costs, Trancik says. For instance, substituting some new kinds of concrete in the massive structures could reduce the overall amount of the material needed, and thus slash the onsite construction time as well as the material costs.&lt;/p&gt;
&lt;p&gt;Many of the reasons behind the cost increases, Trancik says, “suggest that there’s a lack of resilience, in the process of constructing these plants, to variable construction conditions.” Those variations can come from safety regulations that are changing over time, but there are other reasons as well. “All of this points to the fact that there is a path forward to increasing resilience that involves understanding the mechanisms behind why costs increased in the first place.”&lt;/p&gt;
&lt;p&gt;Say overall construction costs are very sensitive to upfront design costs, for example: “If you’re having to go back and redo the design because of something about a particular site or a changing safety regulation, then if you build into your design that you have all of these different possibilities based on these things that could happen,” that can protect against the need for such last-minute redesign work.&lt;/p&gt;
&lt;p&gt;“These are soft costs contributions,” Trancik says, which have not tended to be prioritized in the typical design process. “They’re not hardware costs, they are changes to processes responding to the environment in which the construction is happening. … If you build that in to your engineering models and your engineering design process, then you may be able to avoid the cost increases in the future.”&lt;/p&gt;
&lt;p&gt;One approach, which would involve designing nuclear plants that could be built in factories and trucked to the site, has been advocated by many nuclear engineers for years. For example, rather than today’s huge nuclear plants, modular and smaller reactors could be completely self-contained and delivered to their final site with the nuclear fuel already installed. Numerous such plants could be ganged together to provide output comparable to that of larger plants, or they could be distributed more widely to reduce the need for long-distance transmission of the power. Alternatively, a larger plant could be designed to be assembled on site from an array of smaller factory-built subassemblies.&lt;/p&gt;
&lt;p&gt;“This relationship between the hardware design and the soft costs really needs to be brought into the engineering design process,” she says, “but it’s not going to happen without a concerted effort, and without being informed by modeling that accounts for these potential ballooning soft costs.”&lt;/p&gt;
&lt;p&gt;Trancik says that while some of the steps to control costs involve increased use of automated processes, these need to be considered in a societal context. “Many of these involve human jobs and it is important, especially in this time, where there’s such a need to create high-quality sustained jobs for people, this should also factor into the engineering design process. So it’s not that you need to look only at costs.” But the kind of analysis the team used, she says, can still be useful. “You can also look at the benefit of a technology in terms of jobs, and this approach to mechanistic modeling can allow you to do that.”&lt;/p&gt;
&lt;p&gt;The methodology the team used to analyze the causes of cost overruns could potentially also be applied to other large, capital-intensive construction projects, Trancik says, where similar kinds of cost overruns often occur.&lt;/p&gt;
&lt;p&gt;“One way to think about it as you’re bringing more of the entire construction process into manufacturing plants, that can be much more standardized.” That kind of increased standardization is part of what has led, for example, to a 95 percent cost reduction in solar panels and in lithium-ion batteries over the last few decades, she says. “We can think of it as making these larger projects more similar to those manufacturing processes.”&lt;/p&gt;
&lt;p&gt;Buongiorno adds that “only by reducing the cost of new plants can we expect nuclear energy to play a pivotal role in the upcoming energy transformation.”&lt;/p&gt;
&lt;p&gt;The work was supported by the David and Lucille Packard Foundation and the MIT Energy Initiative.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 20 Nov 2020 16:10:14 +0000</pubDate>
<dc:creator>consumer451</dc:creator>
<og:title>Study identifies reasons for soaring nuclear plant cost overruns in the U.S.</og:title>
<og:image>https://news.mit.edu/sites/default/files/images/202011/MIT-Nuclear-Cost-01.jpg</og:image>
<og:description>MIT researchers have analyzed the causes of many cost overruns on new nuclear power plants in the U.S., which have soared in the past 50 years. The findings may help designers of new plants build in resilience to prevent such added costs.</og:description>
<og:type>article</og:type>
<og:url>https://news.mit.edu/2020/reasons-nuclear-overruns-1118</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.mit.edu/2020/reasons-nuclear-overruns-1118</dc:identifier>
</item>
<item>
<title>Why We&amp;#039;re Building Observable</title>
<link>https://observablehq.com/@observablehq/why-were-building-observable</link>
<guid isPermaLink="true" >https://observablehq.com/@observablehq/why-were-building-observable</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://observablehq.com/@observablehq/why-were-building-observable&quot;&gt;https://observablehq.com/@observablehq/why-were-building-observable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=25161409&quot;&gt;https://news.ycombinator.com/item?id=25161409&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 211&lt;/p&gt;
&lt;p&gt;# Comments: 68&lt;/p&gt;
</description>
<pubDate>Fri, 20 Nov 2020 15:34:24 +0000</pubDate>
<dc:creator>petulla</dc:creator>
<og:title>Why We're Building Observable</og:title>
<og:description>Why We&amp;#x27;re Building Observable Today is an exciting day for Observable as we share the platform, our community, and vision with the world. It has been so inspiring to build a platform with you. We want to share a bit more about why we started Observable. In 2004, Mike and I met working on systems to help make search better. These systems evaluated multiple data sources — from live traffic experiments to evaluations from users. The tools helped engineers and data scientists analyze the results in order t</og:description>
<og:image>https://static.observableusercontent.com/thumbnail/13a12187fc81c5187fee1ff150405d824dfa9c99e7ef3db4bab8f481672e2b25.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://observablehq.com/@observablehq/why-were-building-observable</dc:identifier>
</item>
<item>
<title>I&amp;#039;ve now played with a Raspberry Pi 400 for a week and here are my conclusions</title>
<link>https://news.ycombinator.com/item?id=25161266</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=25161266</guid>
<description>My brother gave me a Raspberry 400 (starter kit) because he knew I'd geek out on it and really evaluate it.
&lt;p&gt;If you give it fast enough &quot;disk&quot; storage it really moves. I plugged in a Kingston brand 120GB SSD on a USB3 adapter. hdparm -t gave 292MB/s read speed and the default LXDE environment was really crisply responsive, with even a first launch of Chromium taking less than two seconds. With such good storage, the only real limitation is that heavy Javascript stuff is too slow - 5+ seconds to switch between folders in Chrome, or for the thumbnail gallery to appear in Youtube. Also, video calling is marginal. Aside from that the CPU is fast enough.&lt;/p&gt;&lt;p&gt;Then I accidentally yanked a cable. And the SSD was bricked. I was able to unbrick it again with the long-powerup-without-data-cable trick, but plainly this setup is too fragile.&lt;/p&gt;
&lt;p&gt;USB boot is a game changer. A junk drawer 8GB USB stick works just fine, aside from the fact that it takes many minutes to copy the OS image onto it in the first place.&lt;/p&gt;
&lt;p&gt;An old 60GB SATA laptop hard disk in the same USB3 case that I tried the SSD in is pretty good. About like a decent SD card, but without the scary wear/corruption issues. I can post the brand (Can$14 on Amazon) and the workaround needed for its broken (or at least Linux incompatible) UAS.&lt;/p&gt;
&lt;p&gt;Bluetooth Audio actually works. In the typical use case, with this thing plugged via HDMI/DVI adapter into an old junk monitor, you can use additional clutter, like a $3 USB headset adapter and computer speakers to get sound or at least plug in a headphone. But if you have a bluetooth headphone or speaker, you don't need cables at all. I can post the recipe that worked for me for this.&lt;/p&gt;
</description>
<pubDate>Fri, 20 Nov 2020 15:21:21 +0000</pubDate>
<dc:creator>MarkusWandel</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=25161266</dc:identifier>
</item>
<item>
<title>Pfizer submits Covid vaccine to FDA for approval, to distribute in December</title>
<link>https://www.pfizer.com/news/press-release/press-release-detail/pfizer-and-biontech-submit-emergency-use-authorization</link>
<guid isPermaLink="true" >https://www.pfizer.com/news/press-release/press-release-detail/pfizer-and-biontech-submit-emergency-use-authorization</guid>
<description>&lt;ul class=&quot;bwlistdisc&quot;&gt;&lt;li&gt;&lt;em&gt;In addition to today’s submission to the FDA, the companies have already initiated rolling submissions across the globe including in Australia, Canada, Europe, Japan and the U.K., and plan to submit applications immediately to other regulatory agencies around the world&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Based on current projections, the companies expect to produce globally up to 50 million doses in 2020 and up to 1.3 billion doses by the end of 2021; the companies will be ready to distribute the vaccine within hours after authorization&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;BNT162b2 demonstrated a vaccine efficacy rate of 95%, with no serious safety concerns observed to date&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;NEW YORK &amp;amp; MAINZ, Germany--(BUSINESS WIRE)-- &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=http%3A%2F%2Fwww.pfizer.com&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=Pfizer+Inc.&amp;amp;index=1&amp;amp;md5=763af02863cda6672ffd6f52bf812608&quot; shape=&quot;rect&quot;&gt;Pfizer Inc.&lt;/a&gt; (NYSE: PFE) and &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=http%3A%2F%2Fwww.biontech.de&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=BioNTech+SE&amp;amp;index=2&amp;amp;md5=9f0094bfec93ed8a216c69ecd792c803&quot; shape=&quot;rect&quot;&gt;BioNTech SE&lt;/a&gt; (Nasdaq: BNTX) announced they will submit a request today to the U.S. Food and Drug Administration (FDA) for Emergency Use Authorization (EUA) of their mRNA vaccine candidate, BNT162b2 against SARS-CoV-2, which will potentially enable use of the vaccine in high-risk populations in the U.S. by the middle to end of December 2020.&lt;/p&gt;
&lt;p id=&quot;news-body-cta&quot;&gt;This press release features multimedia. View the full release here: &lt;a href=&quot;https://www.businesswire.com/news/home/20201120005370/en/&quot; rel=&quot;nofollow&quot;&gt;https://www.businesswire.com/news/home/20201120005370/en/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The submission is based on a vaccine efficacy rate of 95% (p&amp;lt;0.0001) demonstrated in the companies’ Phase 3 clinical study in participants without prior SARS-CoV-2 infection (first primary objective) and also in participants with and without prior SARS-CoV-2 infection (second primary objective), in each case measured from 7 days after the second dose. The first primary objective analysis was based on 170 confirmed cases of COVID-19. This submission also is supported by solicited safety data from a randomized subset of approximately 8,000 participants ≥18 years of age and unsolicited safety data from approximately 38,000 trial participants who have been followed for a median of two months following the second dose of the vaccine candidate. The submission also includes solicited safety data on approximately 100 children 12-15 years of age. Approximately 42% of global participants and 30% of U.S. participants in the Phase 3 study have racially and ethnically diverse backgrounds, and 41% of global and 45% of U.S. participants are 56-85 years of age. To date, the Data Monitoring Committee (DMC) for the study has not reported any serious safety concerns related to the vaccine.&lt;/p&gt;
&lt;p&gt;“Our work to deliver a safe and effective vaccine has never been more urgent, as we continue to see an alarming rise in the number of cases of COVID-19 globally. Filing in the U.S. represents a critical milestone in our journey to deliver a COVID-19 vaccine to the world and we now have a more complete picture of both the efficacy and safety profile of our vaccine, giving us confidence in its potential,” said Dr. Albert Bourla, Pfizer Chairman and CEO. “We look forward to the upcoming Vaccines and Related Biological Products Advisory Committee discussion and continue to work closely with the FDA and regulatory authorities worldwide to secure authorization of our vaccine candidate as quickly as possible.”&lt;/p&gt;
&lt;p&gt;“Filing for Emergency Use Authorization in the U.S. is a critical step in making our vaccine candidate available to the global population as quickly as possible,” said Ugur Sahin, M.D., CEO and Co-founder of BioNTech. “We intend to continue to work with regulatory agencies worldwide to enable the rapid distribution of our vaccine globally. As a company located in Germany in the heart of Europe, our interactions with the European Medicines Agency (EMA) are of particular importance to us and we have continuously provided data to them as part of our rolling review process.”&lt;/p&gt;
&lt;p&gt;The companieshave already initiated rolling submissions with several regulatory agencies around the world, including the EMA and the Medicines &amp;amp; Healthcare Products Regulatory Agency (MHRA) in the United Kingdom, and intend to submit applications to other regulatory agencies worldwide in the coming days. In some cases, governments may have regulatory pathways similar to an EUA. The companies will be ready to distribute the vaccine candidate within hours after authorization.&lt;/p&gt;
&lt;p&gt;Pfizer and BioNTech are extremely grateful to the study volunteers and investigative site staff in the clinical trial program, as their involvement was crucial to today’s important milestone in the companies’ efforts to address the COVID-19 global pandemic.&lt;/p&gt;
&lt;p&gt;The BNT162b2 vaccine candidate is not currently approved for distribution anywhere in the world. Both collaborators are committed to developing this novel vaccine with preclinical and clinical data at the forefront of all their decision making.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Manufacturing and Delivery Capabilities&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While Pfizer and BioNTech await potential authorization or approval from regulatory agencies, the companies continue to work in collaboration with governments and Ministries of Health around the world that will distribute the vaccine, subject to authorization or approval, to help ensure it can reach those most in need as quickly as possible.&lt;/p&gt;
&lt;p&gt;Pfizer is bringing its leading in-house manufacturing capabilities to this effort, with the ability and experience to quickly scale, manufacture and distribute large quantities of vaccine at high quality, leveraging multiple sites in the U.S. and Europe, and complementing the mRNA manufacturing expertise of BioNTech, gained over almost a decade. Pfizer and BioNTech’s combined manufacturing network has the potential to supply up to 50 million vaccine doses globally in 2020 and up to 1.3 billion doses by the end of 2021 (subject to clinical success, manufacturing capacity, and regulatory approval or authorization).&lt;/p&gt;
&lt;p&gt;Pfizer has vast experience and expertise in cold-chain shipping and has an established infrastructure to supply the vaccine worldwide, including distribution hubs that can store vaccine doses for up to six months. The company has developed specially designed, temperature-controlled shippers for the BNT162b2 vaccine candidate, which can maintain recommended storage conditions (-70°C ±10°C) up to 15 days. Each shipper contains a GPS-enabled thermal sensor to track the location and temperature of each vaccine shipment. Once thawed, the vaccine vial can be stored for up to 5 days at refrigerated (2 - 8&lt;sup&gt;o&lt;/sup&gt;C) conditions.&lt;/p&gt;
&lt;p&gt;From the start of the research program earlier this year, Pfizer and BioNTech have successfully supplied and distributed their investigational vaccine to more than 150 clinical trial sites across the U.S., as well as Europe, Latin America, and South Africa. Based on their collective experience, the companies believe in their capability to distribute the vaccine globally upon approval or authorization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About the Study&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Phase 3 clinical trial of BNT162b2, which is based on BioNTech's proprietary mRNA technology, began on July 27 and has enrolled 43,661 participants to date, 41,135 of whom have received a second dose of the vaccine candidate as of November 13, 2020. A breakdown of the diversity of clinical trial participants can be found &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Fwww.pfizer.com%2Fscience%2Fcoronavirus%2Fvaccine&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=here&amp;amp;index=3&amp;amp;md5=157c7769d9c508c3b1dca126f33e946c&quot; shape=&quot;rect&quot;&gt;here&lt;/a&gt; from approximately 150 clinical trials sites in the U.S., Germany, Turkey, South Africa, Brazil and Argentina. Participants will continue to be monitored for long-term protection and safety for an additional two years after their second dose.&lt;/p&gt;
&lt;p&gt;Pfizer and BioNTech plan to submit the efficacy and safety data from the study for peer-review in a scientific journal once analysis of the data is completed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About Pfizer: Breakthroughs That Change Patients’ Lives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At Pfizer, we apply science and our global resources to bring therapies to people that extend and significantly improve their lives. We strive to set the standard for quality, safety and value in the discovery, development and manufacture of health care products, including innovative medicines and vaccines. Every day, Pfizer colleagues work across developed and emerging markets to advance wellness, prevention, treatments and cures that challenge the most feared diseases of our time. Consistent with our responsibility as one of the world's premier innovative biopharmaceutical companies, we collaborate with health care providers, governments and local communities to support and expand access to reliable, affordable health care around the world. For more than 150 years, we have worked to make a difference for all who rely on us. We routinely post information that may be important to investors on our website at &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=http%3A%2F%2Fwww.pfizer.com%2F&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=www.Pfizer.com&amp;amp;index=4&amp;amp;md5=a078f4718b6158dcca272029f6414462&quot; shape=&quot;rect&quot;&gt;www.Pfizer.com&lt;/a&gt;. In addition, to learn more, please visit us on &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=http%3A%2F%2Fwww.pfizer.com%2F&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=www.Pfizer.com&amp;amp;index=5&amp;amp;md5=3eb5de3807f00bc33a4b4c44b510d91f&quot; shape=&quot;rect&quot;&gt;www.Pfizer.com&lt;/a&gt; and follow us on Twitter at &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Ftwitter.com%2Fpfizer&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=%40Pfizer&amp;amp;index=6&amp;amp;md5=7b750ddef61d1b7661bfa8b35b629149&quot; shape=&quot;rect&quot;&gt;@Pfizer&lt;/a&gt; and &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Ftwitter.com%2Fpfizer_news&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=%40Pfizer+News&amp;amp;index=7&amp;amp;md5=d1e473624929b2ab58c051b9e2680c6c&quot; shape=&quot;rect&quot;&gt;@Pfizer News&lt;/a&gt;, &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fpfizer&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=LinkedIn&amp;amp;index=8&amp;amp;md5=15cd9f4c7da1526070a2f762c88a7b04&quot; shape=&quot;rect&quot;&gt;LinkedIn&lt;/a&gt;, &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fpfizer&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=YouTube&amp;amp;index=9&amp;amp;md5=8c92d66bfbb4af503628f8e1326ad74f&quot; shape=&quot;rect&quot;&gt;YouTube&lt;/a&gt; and like us on Facebook at &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Fwww.facebook.com%2FPfizer%2F&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=Facebook.com%2FPfizer&amp;amp;index=10&amp;amp;md5=065013480cef5a7ebc6906071ade18e5&quot; shape=&quot;rect&quot;&gt;Facebook.com/Pfizer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pfizer Disclosure Notice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The information contained in this release is as of November 20, 2020. Pfizer assumes no obligation to update forward-looking statements contained in this release as the result of new information or future events or developments.&lt;/p&gt;
&lt;p&gt;This release contains forward-looking information about Pfizer’s efforts to combat COVID-19, the collaboration between BioNTech and Pfizer to develop a potential COVID-19 vaccine, the BNT162 mRNA vaccine program and modRNA candidate BNT162b2 (including qualitative assessments of available data, potential benefits, expectations for clinical trials, the submission of a request for Emergency Use Authorization and other regulatory submissions, the anticipated timing of regulatory submissions, regulatory approval or authorization and anticipated manufacturing, distribution and supply), that involves substantial risks and uncertainties that could cause actual results to differ materially from those expressed or implied by such statements. Risks and uncertainties include, among other things, the uncertainties inherent in research and development, including the ability to meet anticipated clinical endpoints, commencement and/or completion dates for clinical trials, regulatory submission dates, regulatory approval dates and/or launch dates, as well as risks associated with clinical data (including the Phase 3 data), including the possibility of unfavorable new preclinical or clinical trial data and further analyses of existing preclinical or clinical trial data; the ability to produce comparable clinical or other results, including the rate of vaccine effectiveness and safety and tolerability profile observed to date, in additional analyses of the Phase 3 trial or in larger, more diverse populations upon commercialization; the risk that clinical trial data are subject to differing interpretations and assessments, including during the peer review/publication process, in the scientific community generally, and by regulatory authorities; whether and when data from the BNT162 mRNA vaccine program will be published in scientific journal publications and, if so, when and with what modifications; whether regulatory authorities will be satisfied with the design of and results from these and any future preclinical and clinical studies; whether and when any other biologics license and/or emergency use authorization applications may be filed in any jurisdictions for BNT162b2 or any other potential vaccine candidates; whether and when any such applications may be approved by regulatory authorities, which will depend on myriad factors, including making a determination as to whether the vaccine candidate’s benefits outweigh its known risks and determination of the vaccine candidate’s efficacy and, if approved, whether it will be commercially successful; decisions by regulatory authorities impacting labeling, manufacturing processes, safety and/or other matters that could affect the availability or commercial potential of a vaccine, including development of products or therapies by other companies; disruptions in the relationships between us and our collaboration partners or third-party suppliers; risks related to the availability of raw materials to manufacture a vaccine; challenges related to our vaccine candidate’s ultra-low temperature formulation and attendant storage, distribution and administration requirements, including risks related to handling after delivery by Pfizer; the risk that we may not be able to successfully develop non-frozen formulations; the risk that we may not be able to create or scale up manufacturing capacity on a timely basis or have access to logistics or supply channels commensurate with global demand for any potential approved vaccine, which would negatively impact our ability to supply the estimated numbers of doses of our vaccine candidate within the projected time periods indicated; whether and when additional supply agreements will be reached; uncertainties regarding the ability to obtain recommendations from vaccine technical committees and other public health authorities and uncertainties regarding the commercial impact of any such recommendations; uncertainties regarding the impact of COVID-19 on Pfizer’s business, operations and financial results; and competitive developments.&lt;/p&gt;
&lt;p&gt;A further description of risks and uncertainties can be found in Pfizer’s Annual Report on Form 10-K for the fiscal year ended December 31, 2019 and in its subsequent reports on Form 10-Q, including in the sections thereof captioned “Risk Factors” and “Forward-Looking Information and Factors That May Affect Future Results”, as well as in its subsequent reports on Form 8-K, all of which are filed with the U.S. Securities and Exchange Commission and available at &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Fwww.globenewswire.com%2FTracker%3Fdata%3DRnYjuX1qNnk63wnFRI2njqkWCUtSvj6x_99MqPLwYIXuudw4effilg2LyEquwqm-7QGJ6tM6dhKt8Yb6iY-5gw%3D%3D&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=www.sec.gov&amp;amp;index=11&amp;amp;md5=5dc13db6eb91314c8926c017a7684122&quot; shape=&quot;rect&quot;&gt;www.sec.gov&lt;/a&gt; and &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=https%3A%2F%2Fwww.globenewswire.com%2FTracker%3Fdata%3DRnYjuX1qNnk63wnFRI2njhMtuWVC6S5kOg8JnuFHwPyIzH1O7AiSzrr-wECJd2hrMZ7668ALHee8mVEXVNXWFA%3D%3D&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=www.pfizer.com&amp;amp;index=12&amp;amp;md5=4d9402b4e2cd1598cffa915a78b61f46&quot; shape=&quot;rect&quot;&gt;www.pfizer.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About BioNTech&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Biopharmaceutical New Technologies is a next generation immunotherapy company pioneering novel therapies for cancer and other serious diseases. The Company exploits a wide array of computational discovery and therapeutic drug platforms for the rapid development of novel biopharmaceuticals. Its broad portfolio of oncology product candidates includes individualized and off-the-shelf mRNA-based therapies, innovative chimeric antigen receptor T cells, bi-specific checkpoint immuno-modulators, targeted cancer antibodies and small molecules. Based on its deep expertise in mRNA vaccine development and in-house manufacturing capabilities, BioNTech and its collaborators are developing multiple mRNA vaccine candidates for a range of infectious diseases alongside its diverse oncology pipeline. BioNTech has established a broad set of relationships with multiple global pharmaceutical collaborators, including Genmab, Sanofi, Bayer Animal Health, Genentech, a member of the Roche Group, Regeneron, Genevant, Fosun Pharma, and Pfizer. For more information, please visit &lt;span class=&quot;bwuline&quot;&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=http%3A%2F%2Fwww.BioNTech.de&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=www.BioNTech.de&amp;amp;index=13&amp;amp;md5=aa9ef1d237d23687603695aef9737ac3&quot; shape=&quot;rect&quot;&gt;www.BioNTech.de&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BioNTech Forward-looking statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This press release contains “forward-looking statements” of BioNTech within the meaning of the Private Securities Litigation Reform Act of 1995. These forward-looking statements may include, but may not be limited to, statements concerning: BioNTech’s efforts to combat COVID-19; the collaboration between BioNTech and Pfizer to develop a potential COVID-19 vaccine; our expectations regarding the potential characteristics of BNT162b2 in our Phase 2/3 trial and/or in commercial use based on data observations to date; the expected timepoint for additional readouts on efficacy data of BNT162b2 in our Phase 2/3 trial; the nature of the clinical data, which is subject to ongoing peer review, regulatory review and market interpretation; the timing for submission of data for, or receipt of, any marketing approval or Emergency Use Authorization; the timing for submission of manufacturing data to the FDA; our contemplated shipping and storage plan, including our estimated product shelflife at various temperatures; and the ability of BioNTech to supply the quantities of BNT162 to support clinical development and, if approved, market demand, including our production estimates for 2020 and 2021. Any forward-looking statements in this press release are based on BioNTech current expectations and beliefs of future events, and are subject to a number of risks and uncertainties that could cause actual results to differ materially and adversely from those set forth in or implied by such forward-looking statements. These risks and uncertainties include, but are not limited to: the ability to meet the pre-defined endpoints in clinical trials; competition to create a vaccine for COVID-19; the ability to produce comparable clinical or other results, including our stated rate of vaccine effectiveness and safety and tolerability profile observed to date, in the remainder of the trial or in larger, more diverse populations upon commercialization; the ability to effectively scale our productions capabilities; and other potential difficulties. For a discussion of these and other risks and uncertainties, see BioNTech’s Quarterly Report for the Three and Nine Months Ended September 30, 2020, filed as Exhibit 99.2 to its Current Report on Form 6-K filed with the SEC on November 10, which is available on the SEC’s website at &lt;a rel=&quot;nofollow&quot; href=&quot;https://cts.businesswire.com/ct/CT?id=smartlink&amp;amp;url=http%3A%2F%2Fwww.sec.gov&amp;amp;esheet=52333040&amp;amp;newsitemid=20201120005370&amp;amp;lan=en-US&amp;amp;anchor=www.sec.gov&amp;amp;index=14&amp;amp;md5=bc54e354ca4fc415b0abc762fa30b962&quot; shape=&quot;rect&quot;&gt;www.sec.gov&lt;/a&gt;. All information in this press release is as of the date of the release, and BioNTech undertakes no duty to update this information unless required by law.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://cts.businesswire.com/ct/CT?id=bwnews&amp;amp;sty=20201120005370r1&amp;amp;sid=acqr8&amp;amp;distro=nx&amp;amp;lang=en&quot;/&gt;&lt;/p&gt;
&lt;p id=&quot;mmgallerylink&quot;&gt;&lt;span id=&quot;mmgallerylink-phrase&quot;&gt;View source version on &lt;a href=&quot;http://businesswire.com&quot;&gt;businesswire.com&lt;/a&gt;:&lt;/span&gt; &lt;span id=&quot;mmgallerylink-link&quot;&gt;&lt;a href=&quot;https://www.businesswire.com/news/home/20201120005370/en/&quot; rel=&quot;nofollow&quot;&gt;https://www.businesswire.com/news/home/20201120005370/en/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pfizer:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Media Relations&lt;br/&gt;Amy Rose&lt;br/&gt;+1 (212) 733-7410&lt;br/&gt;&lt;strong&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pfizer.com/cdn-cgi/l/email-protection#37765a4e19655844527747515e4d52451954585a&quot; shape=&quot;rect&quot;&gt;&lt;span class=&quot;__cf_email__&quot; data-cfemail=&quot;b9f8d4c097ebd6cadcf9c9dfd0c3dccb97dad6d4&quot;&gt;[email protected]&lt;/span&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Investor Relations&lt;br/&gt;Chuck Triano&lt;br/&gt;+1 (212) 733-3901&lt;br/&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pfizer.com/cdn-cgi/l/email-protection#02416a63706e67712c472c56706b636c6d4252646b7867702c616d6f&quot; shape=&quot;rect&quot;&gt;&lt;span class=&quot;__cf_email__&quot; data-cfemail=&quot;2d6e454c5f41485e036803795f444c43426d7d4b4457485f034e4240&quot;&gt;[email protected]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BioNTech:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Media Relations&lt;br/&gt;Jasmina Alatovic&lt;br/&gt;+49 (0)6131 9084 1513 or +49 (0)151 1978 1385&lt;br/&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pfizer.com/cdn-cgi/l/email-protection#4a072f2e232b0a282325243e2f2922642e2f&quot; shape=&quot;rect&quot;&gt;&lt;span class=&quot;__cf_email__&quot; data-cfemail=&quot;642901000d0524060d0b0a1001070c4a0001&quot;&gt;[email protected]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Investor Relations&lt;br/&gt;Sylke Maas, Ph.D.&lt;br/&gt;+49 (0)6131 9084 1074&lt;br/&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.pfizer.com/cdn-cgi/l/email-protection#7e3710081b0d0a110c0d3e1c1711100a1b1d16501a1b&quot; shape=&quot;rect&quot;&gt;&lt;span class=&quot;__cf_email__&quot; data-cfemail=&quot;d29bbca4b7a1a6bda0a192b0bbbdbca6b7b1bafcb6b7&quot;&gt;[email protected]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source: Pfizer Inc.&lt;/p&gt;
</description>
<pubDate>Fri, 20 Nov 2020 11:52:33 +0000</pubDate>
<dc:creator>KoftaBob</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.pfizer.com/news/press-release/press-release-detail/pfizer-and-biontech-submit-emergency-use-authorization</dc:identifier>
</item>
<item>
<title>HomePod has been jailbroken with checkra1n</title>
<link>https://yalujailbreak.net/homepod-checkra1n-jailbreak/</link>
<guid isPermaLink="true" >https://yalujailbreak.net/homepod-checkra1n-jailbreak/</guid>
<description>&lt;div class=&quot;thecontent&quot;&gt;
&lt;p&gt;The Apple HomePod has finally been jailbroken with checkra1n jailbreak. Here’s all you need to know about it.&lt;/p&gt;
&lt;div id=&quot;ez-toc-container&quot; class=&quot;ez-toc-v2_0_11 counter-hierarchy counter-decimal ez-toc-light-blue&quot;&gt;
&lt;div class=&quot;ez-toc-title-container&quot;&gt;
&lt;p class=&quot;ez-toc-title&quot;&gt;Table of Contents&lt;/p&gt;
&lt;/div&gt;
&lt;nav/&gt;&lt;/div&gt;
&lt;h2&gt;&lt;span class=&quot;ez-toc-section&quot; id=&quot;HomePod_finally_gets_a_jailbreak&quot;/&gt;&lt;strong&gt;HomePod finally gets a jailbreak&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Every Apple device (iPhone X and below), including the &lt;a href=&quot;https://yalujailbreak.net/t2-security-chip-jailbreak/&quot;&gt;T2 security chip&lt;/a&gt;, has been jailbroken with checkra1n so far. HomePod, on the other hand, has been insusceptible to numerous hacking attempts. Until now, that is.       &lt;/p&gt;
&lt;p&gt;As it turns out, there’s no escaping the clutches of the ubiquitous checkm8 exploit (and by extension the checkra1n jailbreak). Hackers have again utilized checkra1n to finally jailbreak the original Apple HomePod.                                       &lt;/p&gt;
&lt;p&gt;This amazing feat was accomplished by Twitter user @L1ngL1ng and &lt;a href=&quot;https://yalujailbreak.net/checkra1n-jailbreak-ios-14/&quot;&gt;checkra1n&lt;/a&gt; team member Dany L.&lt;/p&gt;
&lt;p&gt;Here’s what the hacker posted on his Twitter handle.   &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-19814 aligncenter&quot; src=&quot;https://cdn.yalujailbreak.net/wp-content/uploads/2020/11/homepod-jailbreak.jpg&quot; alt=&quot;homepod jailbreak&quot; width=&quot;680&quot; height=&quot;95&quot;/&gt;&lt;/p&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-19814 aligncenter&quot; src=&quot;https://cdn.yalujailbreak.net/wp-content/uploads/2020/11/homepod-jailbreak.jpg&quot; alt=&quot;homepod jailbreak&quot; width=&quot;680&quot; height=&quot;95&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;p&gt;This is an image that every jailbreak enthusiast should be well familiar with. It shows an SSH connection set up on an HomePod on port 2222.&lt;/p&gt;
&lt;p&gt;L1ngL1ng also signs in to the device as the superuser to demonstrate that root access has been achieved.&lt;/p&gt;
&lt;p&gt;The terminal suggests that the device in question is a first-generation HomePod (AudioAccessory1,1).                        &lt;/p&gt;
&lt;h2&gt;&lt;span class=&quot;ez-toc-section&quot; id=&quot;What_are_the_possibilities_for_a_jailbroken_smart_speaker&quot;/&gt;&lt;strong&gt;What are the possibilities for a jailbroken smart speaker?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;While this teaser is definitely a pleaser, it does not mean we will get a user-facing jailbreak anytime soon. Even so, it’s an interesting development that could pave the way for unlocking new features.&lt;/p&gt;
&lt;p&gt;For those who don’t know, the Apple HomePod does not work as a general-purpose Bluetooth speaker with non-Apple devices.&lt;/p&gt;
&lt;p&gt;So, the ability to turn the &lt;strong&gt;HomePod into a general-purpose Bluetooth speaker&lt;/strong&gt; would be a godsend for many users. You will then be able to use your smart speaker with any non-Apple device.&lt;/p&gt;
&lt;p&gt;This does not seem far-fetched at all since the AirBlue Sharing tweak allowed us to pair via Bluetooth an iPhone with non-Apple devices.                &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-13267 aligncenter&quot; src=&quot;https://cdn.yalujailbreak.net/wp-content/uploads/2018/06/homepod-1.jpg&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;350&quot;/&gt;&lt;/p&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-13267 aligncenter&quot; src=&quot;https://cdn.yalujailbreak.net/wp-content/uploads/2018/06/homepod-1.jpg&quot; alt=&quot;&quot; width=&quot;680&quot; height=&quot;350&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;p&gt;Swapping Apple’s very own Siri with its archrival – Google Assistant – would be another useful addition to your smart speaker.     &lt;/p&gt;
&lt;p&gt;Further, a jailbreak could give us the ability to run Activator actions (automation on steroids) on HomePod.   &lt;/p&gt;
&lt;p&gt;Some users jokingly suggest porting the &lt;a href=&quot;https://yalujailbreak.net/snowboard/&quot;&gt;SnowBoard&lt;/a&gt; theming engine to Apple’s smart speaker. Of course, theming a smart speaker is not possible but you could possibly change the screen colors. &lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-large wp-image-16069 aligncenter&quot; src=&quot;https://cdn.yalujailbreak.net/wp-content/uploads/2018/10/IMG_E1986.jpg&quot; alt=&quot;&quot; width=&quot;350&quot; height=&quot;605&quot;/&gt;&lt;/p&gt;&lt;noscript&gt;
&lt;p&gt;&lt;img class=&quot;size-large wp-image-16069 aligncenter&quot; src=&quot;https://cdn.yalujailbreak.net/wp-content/uploads/2018/10/IMG_E1986.jpg&quot; alt=&quot;&quot; width=&quot;350&quot; height=&quot;605&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;p&gt;On the flip side, though, jailbreaking your Apple device does have its fair share of negative consequences that we are well aware of.&lt;/p&gt;
&lt;p&gt;A jailbroken smart speaker device might become vulnerable to hacking attempts. For instance, a hacker could use sophisticated attacks to mine cryptocurrencies or control a botnet using HomePod’s processing power.                 &lt;/p&gt;
&lt;p&gt;It’s likely the checkra1n development team will release a HomePod update to the public soon, considering we already have a jailbreak for something as trivial as the T2 security chip.&lt;/p&gt;
&lt;p&gt;checkra1n jailbreak has a thriving subcommunity built around it. If for some reason, they don’t release an update, someone else will try to release a HomePod jailbreak, even if only for experimental purposes.             &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Are you looking forward to the release of checkra1n jailbreak for HomePod?&lt;/strong&gt; Leave your thoughts and inputs in the comments section below.&lt;/p&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 20 Nov 2020 10:46:45 +0000</pubDate>
<dc:creator>wittypineapple</dc:creator>
<og:type>article</og:type>
<og:title>HomePod has been jailbroken with checkra1n</og:title>
<og:description>The Apple HomePod has finally been jailbroken with checkra1n jailbreak. Here's all you need to know about it.</og:description>
<og:url>https://yalujailbreak.net/homepod-checkra1n-jailbreak/</og:url>
<og:image>https://cdn.yalujailbreak.net/wp-content/uploads/2018/06/homepod-1.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://yalujailbreak.net/homepod-checkra1n-jailbreak/</dc:identifier>
</item>
<item>
<title>Dev Fonts</title>
<link>https://devfonts.gafi.dev/</link>
<guid isPermaLink="true" >https://devfonts.gafi.dev/</guid>
<description>&lt;div class=&quot;ant-row ant-row-middle filter-wrapper row-spacer&quot;&gt;
&lt;div class=&quot;ant-col ant-col-9 ant-col-md-5&quot;&gt;&lt;span&gt;Filter fonts&lt;/span&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;0&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;4&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;5&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;7&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;9&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;0&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit current&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;4&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;5&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;7&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;9&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;0&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;1&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;2&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;3&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;4&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;5&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;6&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;7&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;8&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;&lt;sup data-show=&quot;true&quot; class=&quot;ant-scroll-number ant-badge-count ant-badge-multiple-words&quot; title=&quot;30&quot;&gt;9&lt;/sup&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit current&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;0&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;1&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;2&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;3&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;4&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;5&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;6&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;7&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;8&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;ant-scroll-number-only-unit&quot;&gt;&lt;span class=&quot;ant-badge ant-badge-not-a-wrapper&quot;&gt;9&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;&lt;label class=&quot;ant-checkbox-wrapper&quot;&gt;&lt;span class=&quot;ant-checkbox&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;ant-checkbox-input&quot;/&gt;&lt;/span&gt;&lt;span&gt;Free&lt;/span&gt;&lt;/label&gt;&lt;label class=&quot;ant-checkbox-wrapper&quot;&gt;&lt;span class=&quot;ant-checkbox&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;ant-checkbox-input&quot;/&gt;&lt;/span&gt;&lt;span&gt;Ligatures&lt;/span&gt;&lt;/label&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Compare add fonts to compare&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;Cascadia&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;FiraCode&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dm&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;JetBrainsMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;MonoidRegular&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Lilex&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;VictorMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Consolasligaturized&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;IosevkaWeb&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;IosevkaSlabWeb&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Hasklig&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Hack&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;TypoPRONotoMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Conta&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;RobotoMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Inconsolata&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;SourceCodePro&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;AnonymousPro&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;SpaceMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;OxygenMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;B612Mono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;PTMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;NanumGothicCoding&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;UbuntuMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;IBMPlexMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ShareTechMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;Cousine&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;OverpassMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;CourierPrime&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;NovaMono&quot;&gt;

&lt;div class=&quot;codemirror-wrapper&quot;&gt;

&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;ant-btn ant-btn-round&quot;&gt;&lt;span&gt;Copy code to all&lt;/span&gt;&lt;/button&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Fri, 20 Nov 2020 10:14:44 +0000</pubDate>
<dc:creator>syck</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://devfonts.gafi.dev/</dc:identifier>
</item>
<item>
<title>Eight Years at Roblox</title>
<link>https://zeux.io/2020/08/02/eight-years-at-roblox/</link>
<guid isPermaLink="true" >https://zeux.io/2020/08/02/eight-years-at-roblox/</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;02 Aug 2020&lt;/span&gt;
&lt;p&gt;I joined Roblox at the end of 2012 as a rendering engineer; I had just spent more than a year working on various titles from FIFA franchise after years of console game development and was becoming a bit tired of the “big game development”. My work on FIFA was as a contractor and I got an offer for a full-time position, but I also had a friend who worked at Roblox reach out and offer me to move to California and work on Roblox. I knew absolutely nothing about Roblox, but California was nice and my friend told me it would be awesome. The platform was so different (and so strange!) that I decided to take a chance - here I am, 8 years later, still working at Roblox and enjoying it. I started on my first full time job in April 2007 so at this point I’ve worked for 13 years in game development and 8 of them were at Roblox.&lt;/p&gt;
&lt;p&gt;My memory works in interesting ways. I remember my interview pretty well, I remember having lunch at some place in San Mateo downtown near the Roblox HQ - a few people were at lunch including Roblox CEO David Baszucki and I remember him asking many questions about my thoughts about the engines and rendering, and distinctly remember not finishing most of my lunch because I talked most of the time. However I don’t really remember what was going through my head in regards to my perception of Roblox - why did I join besides just thinking I want to do something else for a change? Who knows, but I am glad I did.&lt;/p&gt;
&lt;p&gt;I don’t really understand why Roblox is so successful - you can invent all sorts of reasons in retrospect but it’s hard to validate them, and if you came to anybody back in 2012 and asked for an investment to build a platform where all games are user generated and run on a custom engine with a custom toolset and all users participate in a giant virtual economy and …, I think you’d have gotten a blank stare.&lt;/p&gt;
&lt;p&gt;But I do understand that I found the perfect place for me, especially at that point in my career - I enjoy working on game technology but I never liked working on actual games, and Roblox maximizes the number of developers who can use the technology you work on while maintaining a good autonomy and a very wide range of problems you’d need to solve. It’s very hard to get bored here.&lt;/p&gt;
&lt;p&gt;I think I could talk for hours about Roblox - it somehow became a huge part of my life. I was very fortunate to join at the time when I did and witness the growth of our technology and business. I am really unsure of what the future holds but it’s hard to imagine what, if anything, comes after Roblox - I certainly don’t intend to leave any time soon…&lt;/p&gt;
&lt;p&gt;So I thought it might be fun to do what I’ve planned to do for a year or more now, and to go over all decently sized projects I’ve ever worked on at Roblox. This is based on resummarizing and reliving the source control history, which tells me I’ve had 2752 changes that made it to our main branch, with merge commits counting as one, so, uh, this blog might be on a larger side. Hopefully this will be fun!&lt;/p&gt;
&lt;p&gt;Before we begin, I just want to conclude this by saying that I’m very grateful to the Roblox leadership for treating me well, for all the friends and colleagues I made along the way, and for the wonderful Roblox community. The reason why I still enjoy what I do is because whenever I write about a new big thing I’m working on or a small feature or even a bug fix, it’s usually met with excitement which keeps me going. Thank you all from the bottom of my heart. I don’t think I could have done it without you and I hope this continues for as long as possible despite the current trying and uncertain times.&lt;/p&gt;

&lt;p&gt;Notably including half-pixel offset fixes for Direct3D9 which I guess is a rite of passage for rendering engineers. The rendering code back then was based on OGRE rendering engine, so I had to learn that, and this was also my first time using OpenGL professionally - prior to that I’ve used Direct3D 9 and proprietary console APIs, and Direct3D 10/11 as a hobby.&lt;/p&gt;

&lt;p&gt;Initially added for “100 player” project, in October it evolved to render all parts and continued to be used as part renderer until the introduction of instancing in 2018. Otherwise known as “featherweight parts”. This was further optimized and deployed around November 2012. Most of this code survived to this day but evolved over time, and is still used when instancing doesn’t apply.&lt;/p&gt;
&lt;p&gt;The core idea in this system was to dynamically batch meshes together, for characters this would be based on the character model hierarchy, and for everything else the grouping is spatial. This allowed us to reduce the number of draw calls, which was a big concern due to both driver overhead and inefficiencies in OGRE.&lt;/p&gt;
&lt;p&gt;This would pave the way for what eventually turned out to be a complete, but gradual, rewrite of the rendering stack. The main motivation for this was always performance - what we ended up let us port to mobile (the old rendering code was nowhere near fast enough even for relatively simple scenes), and break new grounds on the number of objects we could render in a frame.&lt;/p&gt;

&lt;p&gt;One of a few OGRE upgrades we’ve needed to do, this one was to get better GLES support. It was pretty painful to do those, just like any other big middleware update is. Read further to learn what happened to OGRE eventually…&lt;/p&gt;
&lt;p&gt;One thing I remember from doing these is that documentation in source code makes the upgrade process that much more painful. I had scripts that changed the copyright years in headers back to whatever they were in our tree just to make merging less painful, but there was some OGRE upgrade where 70% of the changes were documentation, and this was very hard to get through.&lt;/p&gt;
&lt;p&gt;The reason why these were challenging in general is that whenever we did an upgrade we had to a) merge our plentiful changes with the new code, b) gate dangerous parts of the upgrade with flags. We’ve used the same system of feature flags (we call them fast flags) since I joined Roblox which allows us to dynamically disable parts of the release based on metrics, but this requires actually isolating changes behind if statements selectively - which for OGRE was sometimes necessary as we didn’t know what the impact of some low level change in OpenGL code would be.&lt;/p&gt;

&lt;p&gt;Before this we had hand-translated shaders, which started to be painful to maintain. The first version of the pipeline used hlsl2glsl and glsl-optimizer (same as Unity back in the day). We are using version 3 today, see below!&lt;/p&gt;
&lt;p&gt;Since this was done at the point where we used OGRE, the compiler would take HLSL files, preprocess and translate them to optimized GLSL, and save the resulting GLSL back to disk - which would then be loaded by OGRE directly through the material definition file. Eventually we replaced this with a binary shader pack that could store GLSL code for OpenGL and shader bytecode for other APIs, but back then we shipped HLSL and GLSL source and compiled HLSL code on device!&lt;/p&gt;

&lt;p&gt;Our equivalent of “Steam Hardware Survey” that went through SQL databases and coalesced various system information bits to help us understand the hardware at the time. This was during my era of obsession with F#, so it was written in F# instead of something like Python. We don’t use this anymore and don’t even have the SQL database in question!&lt;/p&gt;
&lt;p&gt;We never published the resulting data, and I’m not sure how often we used it to make decisions, but it was fun to look at the number of graphics cards from various vendors or amount of RAM or resolution a typical Roblox user has.&lt;/p&gt;

&lt;p&gt;Although I was hired as a rendering engineer, I had a lot of really deep low-level systems experience and as a consequence ended up engaging in both optimization work and security related work from the very beginning. I don’t do this anymore these days but I was often involved in the security work for the first 3 or 4 years. Now we fortunately have people who can do this full time and better than I could :)&lt;/p&gt;

&lt;p&gt;A second part of “100 player project”, necessary to render every character in one draw call (these were really expensive for us back in the day!). A side effect included some resolution sacrifices on character items that shirt creators aren’t fond of. The new system managed the atlas texture memory, rebaking humanoids far away to smaller textures to conserve texture memory. The compositor survived with minor changes to this day, although we’re now working on a new one.&lt;/p&gt;
&lt;p&gt;The compositor was built in a very configurable fashion, allowing the high level code to specify the layout to bake, and managing all the complex asynchronous processing and budgeting by itself. This allowed us to switch the composit layout completely years later for R15.&lt;/p&gt;

&lt;p&gt;At the end of 2012 we were actively working on the mobile port. Since then we’ve had to do a lot of work in a lot of different parts of the engine to make data structures smaller and algorithms - faster. Of course you’re never done with optimizations so we do this to this day. Curiously, our minimum spec on iOS stayed the same since the initial launch in 2012!&lt;/p&gt;
&lt;p&gt;A fun fact is that even though we started with iPad 2 as the min. spec we discussed adding support to iPad 1 after launch. At the time there were a lot of people who couldn’t play Roblox on iOS on older hardware. However the performance characteristics of those devices were just… not good enough. You could touch the screen with the finger and pan the camera, and during panning you lost 30% of a single available core to the OS processing the touch. We decided to not add support for this, and 8 years later it seems like a great decision for sure :D&lt;/p&gt;

&lt;p&gt;It was very hard to use Xcode Instruments to profile frame spikes on an iPad; to try to figure out how to get our performance to a better place on mobile, I wrote some ad-hoc code to dump all internal log events to a binary stream, and a desktop UI tool in F# and WPF to visualize it. This included a Lua profiler as well that could display profiles of Lua code in a traditional hierarchical aggregated view based on event data. This did not survive but curiously we ended up using a similar approach with microprofile years later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zeux.io/images/roblox_1.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;What started in August as a character-only renderer that supported meshes, evolved into something that could render any part in Roblox the same way as old rendering code did. This was not easy, both because performance was really important in every part of the code, and because there’s a &lt;em&gt;lot&lt;/em&gt; of corner cases that had to function pretty much as they did before. Except for perhaps the legacy cylinder rendering:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zeux.io/images/roblox_2.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This code supported FFP as well, using matrix palette blending to efficiently render characters with rigid joints, and on desktop also came with vertex shaders that were carefully optimized to run faster on Intel GPUs without hardware vertex shading (through software vertex shading path). Also this implemented stencil shadows using GPU-based extrusion and CPU-based detection of silhouettes with dynamic index buffers. Fun times!&lt;/p&gt;

&lt;p&gt;My memory is a bit fuzzy on this one but I think we were brainstorming possible ways to implement full scene shadows in a way that would work on mobile, and I’ve recently watched the presentation from Little Big Planet on how they did lighting on PS3 with voxel based computations; our CEO was part of the discussions and mentioned “what if all lighting was voxel based”, and the rest is history. The approach we ended up taking was very unique and distinct from many other voxel based implementations to my knowledge.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zeux.io/images/roblox_3.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In January voxel lighting engine got support for sun shadows and point/spot lights but it felt like on good GPU hardware we could get better results with other techniques, so we were looking for other things we can use voxels for. I don’t remember who came up with the idea but this is when skylight was implemented, which is a form of ambient occlusion with sky as a light source, and is very hard to do correctly without voxels.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zeux.io/images/roblox_4.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;To make voxel lighting practical I also rewrote all functions using hand coded SIMD (SSE2), including the voxelizer - lighting on CPU isn’t practical without this (this code was later translated to NEON for the iOS port).&lt;/p&gt;
&lt;p&gt;The resulting lighting code survived up until FIB Phase 1 which added HDR support and changed voxelizer to use anisotropic occupancy, but is otherwise still used today.&lt;/p&gt;

&lt;p&gt;In an effort to redefine the way Roblox games look (back then we thought Roblox as a platform needs an art style), the work on new materials began. We used to use a random set of shaders including some procedural ones; this work replaced the shader framework with “surface shaders” (this is inspired by Aras P. work on Unity from around the same time; we use the resulting shader interfaces to this day although it’s not clear that they are actually pulling their weight, and if I did it today again I would not have gone that route), and implemented more traditional texture-based materials on top, ruining wood grain forever.&lt;/p&gt;

&lt;p&gt;Annoyed with the time it took our custom XML parser/serializer to work with large places, I designed and implemented a custom binary file format. It was chunk-based with per-chunk LZ4 compression and custom binary filters to preprocess the data to help LZ4; the format was structured to make reflection interop cheaper, and maximize loading performance. We use this as the main file format to this day, although the format got a few small tweaks (mainly extensions to handle cryptographic signatures and more efficient shared binary blobs). I’m still happy with the design but I’d slightly change the layout in a couple of places to make loading for very big places more cache-coherent, something that wasn’t as big of a concern back then. This can still be done today but requires small revisions to how some chunks represent data.&lt;/p&gt;
&lt;p&gt;The initial rollout of this change was just for Play Solo, which saved the entire world to a file and loaded the result back into the new datamodel; this meant it was safe to release because no permanent data loss would occur. After this we gradually switched to using this format for publishing places, and eventually started using it for models (packages) as well. Today almost all semantically rich content on Roblox uses this format.&lt;/p&gt;
&lt;p&gt;Ironically we did end up replacing our XML parser with a library of mine, &lt;a href=&quot;https://github.com/zeux/pugixml&quot;&gt;pugixml&lt;/a&gt;, in 2019 - although the binary storage is still more performant and space efficient.&lt;/p&gt;

&lt;p&gt;When we shipped our iOS port it was done with ES1 (FFP); this meant a lot of features didn’t work, including lighting which was becoming pretty important. OGRE support for ES2 was immature at the time, so this included a lot of fixes in OGRE code, and a fair amount of shader tweaks, plus the aforementioned NEON optimization for voxel lighting code to make it practical to run on a mobile device.&lt;/p&gt;
&lt;p&gt;This change helped in the future work - after this landed we never used FFP on mobile, always using shaders to render content, which meant that we wouldn’t need to support ES1 for any technology upgrades, that as it turned out were waiting around the corner.&lt;/p&gt;

&lt;p&gt;The development of Roblox engine usually follows a tic-toc-tac pattern (okay we don’t actually have a name for this, but whatever). First we make a new awesome implementation of a subsystem that was in the need of being replaced. Then we work on that new implementation becoming better. Then we remove the legacy system to simplify maintenance. By this point we’ve switched all parts to render in the new cluster rendering path and the old code was ready to be removed. The commit says “removes 500 kb of C++ code, 400 kb of shader/material code, and 3 Mb of content/ textures. Also removes 17 rendering fast flags and 5 rendering log groups.” which felt pretty good at the time!&lt;/p&gt;

&lt;p&gt;The way we render thumbnails is with the same rendering code we usually use on the client, but it runs on our servers using a software renderer. This was inefficient because we used a slow software renderer (single-threaded without a JIT) and additionally we went through the setup/teardown of the entire engine for every new image; this was reworked to use a faster software renderer (which was mostly hard because building open-source software on Windows is a pain), and to reuse the same engine context for many thumbnails, which allowed us to dramatically cut the amount of servers we used. It’s comparatively rare that the work I do can be measured in money spent for the company so this felt good.&lt;/p&gt;

&lt;p&gt;… I guess in March I just did some preparatory work, and it’s in June when we actually started working on new shaders and new textures. There was a lot of back-n-forth with our artist to make sure the art can look good in-game but also not create too many issues for games using built-in materials completely counter to their intended purpose (e.g. using Sand colored in blue as water).&lt;/p&gt;
&lt;p&gt;A big portion of work here though was a new UV layout for our terrain materials - we used a voxel based terrain that had a few distinct block types (block, wedges, corner wedges), and together with artists we came up with a new UV layout that was more uniformly distributing pixels in the texture to get good density everywhere.&lt;/p&gt;

&lt;p&gt;I remember thinking about voxel lighting more and at some point realizing, well, we can do directional shadows from the sun, we can do point lights - why can’t we do both at the same time, so that every single light source can cast shadow? It turned out that the approach we used for the directional shadows could be adapted to work for point lights, and with some optimizations and tweaks the first version of the voxel lighting engine was finally complete. This would survive up until Future Is Bright Phase 1 which would ship at the end of 2018. This was finalized in September 2013 and optimized with SIMD:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot; readability=&quot;32.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;Change 37700: SIMD shadow update now works, but I have no idea why.
Change 37701: SIMD shadow update works, and now I know why :) Still need more optimization
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I love writing commit messages that straddle the border between “professional” and “fun”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=e2QpoVnx-y8&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/e2QpoVnx-y8/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since all of the easy problems, such as part rendering and lighting, were solved, it was time to face the final rendering challenge: text.&lt;/p&gt;
&lt;p&gt;Back then we used a prebaked bitmap (actually two) at two different sizes, and a very poorly written layout code that didn’t support kerning and didn’t handle spacing well. Instead I wrote an F# script (of course!) that baked lots of different sizes of a single font into a large atlas; to conserve texture space, I used a rectangle packer. At runtime the layout algorithm used kerning data to place glyphs at correct locations. This substantially improved text quality at most frequently used sizes, and would last for a few years up until internationalization became a priority and we had to start rendering the font atlas dynamically from TTF source. The layout algorithm would survive for a few more years up until we integrated Harfbuzz to do complex Unicode aware shaping - both of these were done by other people years later.&lt;/p&gt;

&lt;p&gt;Continuing the trend of increasing the scope of work beyond just rendering, I’ve worked on the design and implementation of new remote events API, including fire-and-forget events and remote function calls (which are super nifty in Lua - because of coroutine support, you can just call a function in Lua, that call will be routed to the server, server will run the code and return the result, and your coroutine will continue running, almost oblivious to the time spent!). It was very hard to find good names for the APIs involved; we haven’t changed any of this since and I still struggle with what the correct function/event name is sometimes.&lt;/p&gt;

&lt;p&gt;Voxel terrain wasn’t very popular among our game developers. For a feature that took a lot of effort to develop and maintain this was unsatisfying, and I was trying to figure out “why”. One hypothesis was that the limited size (512x64x512 voxels I want to say?) made it too limiting; to remedy that I’ve worked on a new sparse voxel storage format and different replication mechanisms to allow arbitrarily large terrains. This took around a month to implement fully. This code no longer exists because I ended up throwing the old terrain out completely later - this is probably my largest body of work that just doesn’t exist in Roblox today, although if I hadn’t worked on that, smooth terrain would have likely taken longer and would be worse, because many ideas from that translated well.&lt;/p&gt;
&lt;p&gt;During this work I also added TerrainRegion (a standalone object that could store voxel data) together with APIs for copy &amp;amp; paste - this part hasn’t changed since and is still available and useful.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zeux.io/images/roblox_5.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I don’t really remember much about this - I don’t think we had an API proposal process at the time so I think this just came up and we just did it, but this is a pretty significant event in retrospect because it started the general trend of giving Lua scripts much more agency; without this we could not have implemented cameras in Lua, for example, and some games today - for better or for worse - run a lot of their game loop in render stepped for minimal input latency. At this point we’ve already used a two-thread parallelization strategy where normally input-&amp;gt;gameplay-&amp;gt;render cycle is a 2-frame cycle on the CPU, but by using RenderStepped you can cut that short and have minimal latency for user interaction at some throughput cost.&lt;/p&gt;

&lt;p&gt;Somehow all games or engines I have ever worked with end up with UI consuming disproportionate amount of frame time, and ours is no exception :( Over the years I’ve had several points at which I snapped and committed a dozen performance improvements to make things faster, this is one of them; every time the changes weren’t necessarily transformative or really complex, but delivered solid performance gains by shaving ~10% or more at a time.&lt;/p&gt;

&lt;p&gt;This was my first hack week - the 2012 hack week was held in July right before I joined, although I doubt I would have achieved much as I was very unfamiliar with the codebase. By this point I knew everything there was to know about our rendering system, OGRE, and terrain; I combined this knowledge to implement a prototype for new terrain that used Marching Cubes meshing of voxel distance field instead of blocky terrain we had, with support for geometric LOD (with gaps between LODs because hack week) and also added water with refraction and realtime reflections and geometric grass. Over the next few years I ended up shipping most of this, although the implementation was dramatically different (e.g. we don’t use marching cubes), and finally in 2019 somebody else shipped geometric grass (again with a very different implementation), marking my 2013 hack week fully live :D&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=0jahn82XNAI&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/0jahn82XNAI/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A continuing drive to get our rendering code faster and faster invited more optimization. I remember us using two internal games for profiling, one was made by an internal games team (we used to make games ourselves back then! We quickly realized that we’re a platform and that our community can make games better than we can though) and another by John Shedletsky, a name all Roblox readers would recognize. We were trying to get them to run at stable 30 FPS on iPad 2, which was challenging. A lot of small performance tweaks went in here but I was starting to become really frustrated with the amount of time we lost in OGRE and OpenGL driver. I was pretty sure a lot of OpenGL work wasn’t just because the driver wasn’t very fast (that problem would have to wait until the introduction of Metal), but also because OGRE’s GLES backend was very inefficient. We could have tried to optimize OGRE, but that codebase was so large and unwieldy to work with that a question had to be asked: do we need it?&lt;/p&gt;
&lt;p&gt;So I spent one day to do an experiment: I set up an alternative GL-focused rendering path alongside OGRE. This took just a day because I focused on just getting part rendering to work, and only converting the actual render loop away from OGRE - using OGRE scaffolding to manage resources, and then getting OpenGL resource ids out into our own code. There were no special optimizations after that, I just wrote code that I thought was very simple and minimal - just do the state setup that needs to be done in the simplest way. The results were that by rewriting a portion of the rendering frame that took 13 ms in OGRE, we could replicate it in just 3 ms in our renderer.&lt;/p&gt;
&lt;p&gt;This made the decision of what to do next obvious.&lt;/p&gt;

&lt;p&gt;We decided to completely remove OGRE as a dependency in favor of our own rendering engine. To simplify the matters a bit, we decided on just two rendering backends, Direct3D 9 (with FFP support) and a combined OpenGL backend with desktop and mobile “modes”, to support macOS and iOS, without FFP support.&lt;/p&gt;
&lt;p&gt;The fact that we already used OGRE in the most minimal way possible made things easier - we didn’t need to port the animation system, all the shaders we used were our own, etc. The only significant high level component we used from OGRE was the particle system, and we had an engineer start on redoing that - I focused on everything else, including defining a new graphics API abstraction layer, implementing Direct3D9 and OpenGL backends for that, working on a basic material system and render op list, etc.&lt;/p&gt;
&lt;p&gt;This had to be done side by side with the old engine, so we copied the high level code that used OGRE and started reworking that. A big painpoint when working with OGRE was getting access to any hardware functionality (I don’t remember details too well but one thing I remember is render targets not being structured very well), so I spent a bit of time thinking about the graphics abstraction - but not too much, as we could iterate on that in the future (and we did!). A big focus was on usability (it had to be reasonably easy to use it from our high level rendering code) and leanness (for performance and sanity reasons we wanted the concepts in the abstraction to map mostly 1 to 1 to the underlying implementations).&lt;/p&gt;
&lt;p&gt;Because mobile was a focus, we ended up inheriting some concepts from OpenGL (like Framebuffer, ShaderProgram, Geometry, uniform handles, etc.). Some of these survived to this day and continue being useful for other APIs; some parts of the abstraction saw major changes, for example we fully transitioned to uniform buffer style interface after a Direct3D 11 port, and render pass based interface during a Metal port. The abstraction continues to slowly evolve over time, and one part I’m super excited about is that since the initial release, the abstraction actually became leaner and more straightforward to implement (for example, we used to have a distinction between Renderbuffers and Textures, and now we just have Textures).&lt;/p&gt;
&lt;p&gt;This was the right time to do this change. We already implemented all critical high level rendering components by that time, so we knew exactly what to focus on - but this was back when we only had two rendering engineers, myself included, and so we didn’t have to stall major projects by rebuilding the foundation of the engine.&lt;/p&gt;
&lt;p&gt;The new code took around 2.5 months to complete and ship; the results were fantastic - much lower CPU overhead, much simpler code base, much faster builds and smaller distribution size - it was a massive win along every single possible axis. Most of that code still exists and is in active use today, some parts had to be expanded or improved as we gained more graphics API - we went from supporting just two APIs to supporting five.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zeux.io/images/roblox_6.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The epic for the change was named&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;US22804: Do you know how to K.I.L.L. an OGRE?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which in addition to being an obvious pun on “ogre” is a reference to Death Note which I watched for the first time around that time and rewatched many times since.&lt;/p&gt;

&lt;p&gt;During this period I’ve submitted an unusual number of various security mitigations for different exploits so while I don’t remember this it must have become a focus.&lt;/p&gt;
&lt;p&gt;In addition to that in May and June I’ve started helping with our Android port - something that was made &lt;em&gt;much&lt;/em&gt; easier due to our new rendering engine, as OGRE support for EGL was incomplete at the time.&lt;/p&gt;

&lt;p&gt;Something that I completely forgot about since but was reminded by &lt;a href=&quot;https://roblox.fandom.com/wiki/Data_persistence&quot;&gt;a page on Roblox trivia wiki&lt;/a&gt; is that I was responsible for a &lt;a href=&quot;https://blog.roblox.com/2014/05/yesterdays-data-persistence-error-an-explanation/&quot;&gt;data loss in our data persistence system&lt;/a&gt;. The core issue was caused by an innocuous code change that refactored some XML serialization logic in an effort to make sure that at all callsites we correctly use binary file format for saving when requested. We had code that could serialize Roblox instances as part of a larger XML container, used for web API serialization - I mistakenly assumed this was part of web API support code that we didn’t need anymore.&lt;/p&gt;
&lt;p&gt;Unfortunately, this was actually important for games that used our data persistence system that was in the process of being replaced by newer data stores. This only affected games that stored instance data (thankfully, most games used exclusively primitive types); unfortunately, we didn’t have unit tests for the system and our manual regression test only used primitive types. Additionally manual tests on our pre-production test environments that relied on backend data were often flaky due to environment stability issues (something that we’ve largely solved in 2020 by switching to testing using production infrastructure and pre-release client/server builds instead of relying on separate environments).&lt;/p&gt;
&lt;p&gt;What made the issue damaging is that the legacy system in question treated all errors during data loading as “data is absent, start from scratch”. This was due to the fact that the web endpoint returned a status code 404 for non-existent data, which resulted in an exception propagated through the client-side code; instead of special casing that error code, and disabling data saving for any subsequent save, the code assumed any error is a 404 error and joyfully proceeded to start with an empty data blob, saving it when the player quit the game.&lt;/p&gt;
&lt;p&gt;This was further aggravated by the release timing - we used to release the client &amp;amp; server at 9 PM at night; any issue that was discovered immediately after the release would lead to the release rollback, but this issue was only discovered a few hours after the release by a developer who reported it to us - at which point everybody was sound asleep and all players who played affected games that night would lose their game data irrecoverably (as the system in question also had no backups). This also isn’t a problem in 2020 as we switched the release process to one that’s safe to do at any time of day and we now release in the morning so we can react to any issue that’s discovered hours after the release immediately.&lt;/p&gt;
&lt;p&gt;Needless to say I’ve learned a few things about refactoring legacy code, testing and deployment processes, etc. I &lt;em&gt;think&lt;/em&gt; this is the only destructive or negative thing I’ve done during my time at Roblox, and it felt &lt;em&gt;terrible&lt;/em&gt; at the time. Time heals all wounds though!&lt;/p&gt;

&lt;p&gt;I’m not sure how this came about, but I think I was just thinking how we can make it easier for people to write correct Lua code, and an obvious problem was lack of any sort of static analysis / linting. luacheck was something that existed at the time, but it wasn’t very fast and I thought we needed a tool that’s written in C++ for this.&lt;/p&gt;
&lt;p&gt;Amazingly it looks like the first change for this tried to do static analysis on compiled Lua bytecode, a fact that I completely forgot until today, but I quickly changed gears and started working on a Lua-&amp;gt;AST parser. I’ve written many parsers before that and some of them were &lt;em&gt;very&lt;/em&gt; high performance, so I knew what I was doing pretty well.&lt;/p&gt;
&lt;p&gt;After implementing the parser, I implemented a few static analysis rules based on AST; some of these later shipped as Script Analysis Widget (which required a fair amount of Qt work that a long-time Studio engineer helped me with), and some were experimental, such as a data flow analysis, that were incomplete and never went live.&lt;/p&gt;
&lt;p&gt;This work would prove to be very important 5 years later, as you’ll learn if you’re still reading this and if you’re going to get through the rest of this post :D&lt;/p&gt;

&lt;p&gt;The exploits were still rampant on the platform. One thing that would be good to emphasize here for people unfamiliar with Roblox is that not only did we have a full Lua interpreter based on Lua 5.1 (so pretty easy to reverse engineer as that is open source), but we also had a client-trusting networking model that was used in all games at the time. In the beginning of 2014 we introduced a new networking model which eventually (in 2018) became the only one.&lt;/p&gt;
&lt;p&gt;People who are networking experts might scoff at this point. “Client authority is such an obvious mistake, what were they thinking?” To which I would say that it’s my firm belief that has Roblox started with a server-authoritative model, it’s very possible that the company would not exist today - it’s hard to develop multiplayer games, and client authority makes a lot of responsive gameplay very easy to write (of course it’s very exploitable, which is why we ultimately got rid of the old model, but at the time we already had lots of developers with years of experience, and also a much better understanding of how to make the platform more accessible despite the replication barrier).&lt;/p&gt;
&lt;p&gt;Anyhow, the dominant attack vector in 2014 was to find a way where the script source, replicated from the server, gets to the client and replace it with a malicious script - which would get access to all our APIs and through the client authority allow to perform any changes to the world state.&lt;/p&gt;
&lt;p&gt;With a secure replication mode being out but not being used by the majority of existing games, we had to find other ways to block these attacks but were tired of playing the cat &amp;amp; mouse game. To that end I reworked the Lua VM to split the compiler, removing it from the client completely (and switching replication to bytecode), and changing the bytecode to be different from stock Lua VM as well as changing the VM internals to obfuscate various data structures. This was hard to deploy - this breaks network replication for one - and we wanted to do this very quickly; this was also incompatible with some things like dynamic script evaluation, and even the process of starting a Roblox game involved downloading a Lua script from a web endpoint and running it! I focused on the core VM portions of this change and had another engineer help with other bits, and we ultimately shipped this change in around two months.&lt;/p&gt;
&lt;p&gt;I remember reading the exploiter forums the night of the release, and seeing a thread to the effect of “all exploits no longer work”, and one of the exploit authors replying something to the effect of “oh god, this will take a while to get around”. Of course exploiters always catch up, and they did - months and months later (and we were able to continue playing the cat &amp;amp; mouse game for a while longer, until the replication mode became the de-facto standard).&lt;/p&gt;

&lt;p&gt;With Lua work out of the way, I went back to the hack week project from 2013. We had conversations earlier in the year and all agreed that we need a new terrain system - the old blocky one continued to not be very popular and we just didn’t believe that the features it provides are that interesting. With an existence proof from hack week, it was now time to figure out what to do.&lt;/p&gt;
&lt;p&gt;I think this work started a bit earlier in the year in a separate prototyping framework where I was able to quickly experiment with voxel representation etc, but it was time to figure out how to ship this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://zeux.io/images/roblox_7.jpg&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In September I’ve done most of the basic rendering work, and then started to focus on other aspects. This was the first large cross-functional project that I’ve done at Roblox - except for the terrain tools that were written by stickmasterluke, I’ve done all of the implementation work here.&lt;/p&gt;
&lt;p&gt;In October I’ve worked on physics - this was my chance to go back to some physics programming (I’ve done physics work in prior jobs, including a custom Box2D SPU port with many algorithms optimized or rewritten, but never in Roblox). This required using parts of Bullet collision pipeline which we’ve integrated earlier for CSG to work.&lt;/p&gt;
&lt;p&gt;In November I’ve worked on some more rendering pieces and the undo stack, and started working on replication support. Again, a lot of this work was easier to do since it mirrored the Infinite terrain work from 2013.&lt;/p&gt;

&lt;p&gt;I don’t remember my exact train of thought here, but I think I just accumulated a bunch of rendering ideas that I wanted to try; unlike my last hack week this one didn’t really have a specific focus, and I decided to just implement as many small ideas as I could possibly fit in a week.&lt;/p&gt;
&lt;p&gt;A great side effect of this is that you’re always ready to present. This is a big challenge in hack week - how do you time things so that after a very intensive week of work you have code that works enough for you to show a demo? This being hack week, this code doesn’t have to work perfectly - in fact you want to minimize the amount of “polish” work you do so that you can maximize the “oomph” and deliver more ambitious projects - but what if you don’t make it? The way I solved this problem in 2014 is by cramming a bunch of small projects into one; every day I’d start with a goal of finishing one aspect, and if I got there earlier - great! Just start the next one early.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Y9-KDzMasjg&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/Y9-KDzMasjg/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What ended up in the hack week presentation is area light support for the voxel engine (later shipped as SurfaceLights), encoding light direction into voxel grid for per-pixel lighting (never shipped, but incorporated into the next hack week), soft particles (shipped later), particle lighting (this was done in a very brute-force way in this demo; I implemented it in a better way in Future Is Bright hack week, and we shipped that implementation later), HDR rendering with a very poorly tuned tone mapper (we didn’t use any of this code but we did end up implementing HDR rendering as part of Future Is Bright), shadow mapping with support for translucency and colored objects based on exponential shadow maps (we didn’t ship this exact code but this will show up later in the timeline), and volumetric lighting support using the shadow maps (never shipped this either).&lt;/p&gt;
&lt;p&gt;This hack week ended up being rich on small practical ideas - except for volumetric lighting and colored translucency, we ended up shipping all of these in one form or another over the next few years.&lt;/p&gt;

&lt;p&gt;With the hack week being over it was time to continue working on smooth terrain, bringing it closer to completion. Here we’ve tried to figure out how we should work on tools. Traditionally you’d expect the tools to be implemented in C++, but we wanted to give our plugin creators a lot of power.&lt;/p&gt;
&lt;p&gt;So we decided to try to implement a fast Lua API for voxel reads and writes (bypassing our reflection layer for performance), and build tools in Lua on top of this. This ended up being a great decision, as we were able to quickly iterate on tools and have community be empowered to create their own (performance, of course, suffered as a result - something we’re trying to fully recover from to this day).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FqU6HbFrV-Y&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/FqU6HbFrV-Y/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point all the pieces were there - I had rendering, physics and replication working, and an API to build tools with. The tools weren’t ready yet, but neither were any of the pieces production quality - a lot of cleanup optimization work remained.&lt;/p&gt;
&lt;p&gt;During these months I’ve worked on polishing the code and making it faster. This involved writing custom triangle mesh colliders instead of using Bullet code (using a fast cache coherent KDTree which was much faster to build and a faster to query compared to Bullet’s BVH), improving rendering code performance and memory consumption, improving terrain broadphase, making old APIs work with smooth terrain, etc., etc.&lt;/p&gt;
&lt;p&gt;A lot of work goes into a high quality feature, and a lot of work can follow the first version - during this time I also prototyped geometric LOD support but it wasn’t ready for the release so we shipped without it.&lt;/p&gt;
&lt;p&gt;During this time we also started replacing the old temporary art with new art, which required making some rendering changes to improve the look based on art feedback as well.&lt;/p&gt;
&lt;p&gt;Overall I really loved working on smooth terrain. When a single feature touches so many areas, you get a chance to implement a lot of different things, get familiar with dark corners of most of the codebase, and improve a lot of code everywhere as a result. Smooth terrain also required innovation in the algorithms as well as a lot of attention to detail in performance to be practical, &lt;em&gt;and&lt;/em&gt; resulted in an entirely new building primitive to be available for Roblox developers. Lots of people loved the result and as we continued working on performance (it was just me for the first couple of years but we had a few people work on impactful performance changes for terrain in 2019 and 2020 as well, sometimes coming up with much better solutions vs whatever I implemented in 2015), it quickly became a great way to build large worlds in Roblox. Of course sky (or, in this case, horizon) is the limit, and we need more and more improvements here.&lt;/p&gt;
&lt;p&gt;I remember the week we shipped smooth terrain, and in the same week one of the biggest games at the time, The Quarry, switched to it - which was scary! I don’t think we were quite ready, and the feedback from players told us that the tech wasn’t quite optimized enough for big maps, but it was fun nonetheless.&lt;/p&gt;

&lt;p&gt;I don’t really remember exactly what prompted this, but I decided that the set of profiling tools we were using wasn’t really adequate for a lot of work that we needed to do. Instead of reinventing the wheel completely as I did in 2012, I decided to integrate a microprofile library by Jonas Meyer. I think I picked it over Remotery, which was the other open-source library available at the time, because Remotery required a web browser to work and I wanted something with on-screen visualization.&lt;/p&gt;
&lt;p&gt;However, I wanted something that we could ship in the production client. Up until then if you had a performance problem in a non-development build the only hope of understanding what was wrong was to reproduce it on a local build and use platform-specific tools to profile. I wanted something where in any production build you could hit one button and instantly see the profiler you could interact with.&lt;/p&gt;
&lt;p&gt;Getting there required a lot of fixes to the code to make it robust, to make it cheaper to compile the profiler code without keeping it active all the time, some features I felt were lacking, etc. All of this work was done in the open on GitHub (&lt;a href=&quot;https://github.com/zeux/microprofile&quot;&gt;zeux/microprofile&lt;/a&gt;), but unfortunately the upstream repository at the time was hosted on Bitbucket and used Mercurial, which made pull requests impractical, and over time the fork diverged enough that it was too hard to merge it back. Ah well.&lt;/p&gt;
&lt;p&gt;This ended up being possibly the single biggest thing I’ve done to improve internal engineering at Roblox. The culture of having the profiler at your fingertips, and having the same tool available on all platforms so that it’s always easy to check; the possibility to identify performance problems that are infrequent in nature; the fact that the same tool is available to our developer community so when they report performance bugs it’s now possible to get a profiler dump from them; all of these things made it much easier to talk about performance and to work on performance as a company. We also ended up shipping support for microprofile on the server (available to game developers, so that they can profile live servers with the same tool!), on mobile (again, used by us internally and game developers), and we also now have internal infrastructure to capture long running sessions and gather statistical information with ability to drill into individual problematic instances.&lt;/p&gt;

&lt;p&gt;Somehow at this point Roblox has existed for a decade with support for cylinder as a basic primitive type, but without physics support for cylinders (cylinders were “approximated” by a ball). During smooth terrain work I became familiar with our collision pipeline and it seemed straightforward to add cylinders by using Bullet support for cylinders - so I did!&lt;/p&gt;
&lt;p&gt;This ended up causing a fair amount of trouble for our physics engineers, as they were later forced to fix several issues in Bullet integration (which is good, I guess) that became more prominent for quickly rotating cylinders, fix a few numerical instabilities in Bullet GJK that were important to make it possible to build cars with quickly rotating wheels, as well as reimplement ray casts that were very imprecise in Bullet as well.&lt;/p&gt;
&lt;p&gt;Sorry about that, folks. But hey, at least we have cylinders now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=scRc7fXMTKU&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/scRc7fXMTKU/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since before I joined and up until 2014 (or so?), we used stencil shadows for characters. Voxels weren’t small enough to represent a character with enough precision but stencil shadows were costly, painful to maintain, resulted in double shadowing artifacts and had a very different look from voxel shadows from the environment. We shipped blob shadows earlier - they solved most of these problems but were too coarse and didn’t look as good.&lt;/p&gt;
&lt;p&gt;After my 2014 hack week I’ve tried to extend the exponential shadow implementation to be practical, but it was hard to make it work with only characters rendering into the shadow map, and I didn’t think we were quite ready for a full scene shadow map implementation. After several failed experiments I settled on a solution I liked, which was inspired by the static geometry shadows from the classical “Perspective Shadow Maps: Care and Feeding” article (written by the same friend who got me into Roblox - hi, Simon!), but incorporated an extra depth channel into the shadow map to be able to reject shadows from the surfaces that fail the test.&lt;/p&gt;
&lt;p&gt;The trick is to have two-channel shadow maps where one channel stores depth and another stores the shadow intensity; then you blur the intensity and dilate the depth information, which allows you to render soft shadows very quickly, as long as self-shadowing doesn’t matter.&lt;/p&gt;
&lt;p&gt;I later learned that the same technique is presented in GPU Pro 3 “Depth Rejected Gobo Shadows”.&lt;/p&gt;
&lt;p&gt;Incidentally the doge meme was popular in Roblox at the time, so the ticket is appropriately named “US30615: Character Shadows Much Improved Such Wow”.&lt;/p&gt;
&lt;p&gt;This shadowing technique remains in Roblox to this day, although it’s been largely superseded by the new exponential variance shadow map implementation that I contributed to by convincing the fantastic engineer who worked on this to try to make it work :D&lt;/p&gt;

&lt;p&gt;I think at this point I was a bit tired of a few giant projects completed earlier in the year, and I just worked on a bunch of different small optimizations.&lt;/p&gt;
&lt;p&gt;I find that this in general is a great way to spend the time between projects - if you wait for something big to ship, a fantastic way to deliver value is to open a profiler, look at a few captures, and try to make them faster by cleaning code up or using slightly more efficient constructions in the places that matter. In an engine such as ours, there’s so many games that stress parts of the engine in so many different ways, all of this work pays off eventually.&lt;/p&gt;

&lt;p&gt;I really don’t remember what this was motivated by. But up until this point we’ve used GL2 on macOS and GLES2 on iOS/Android. There was some important driver for adapting our code to be GL3 compatible, I just don’t remember what it was :)&lt;/p&gt;
&lt;p&gt;This required some shader compiler tweaks and some code tweaks but ultimately wasn’t too bad. When I implemented the original GL backend I made the decision to make just one for all GL version, and I haven’t regretted this since (this was a direct response to OGRE having a separate backend for GLES which created many more problems than it solved).&lt;/p&gt;
&lt;p&gt;Of course the hard part of this change came later. In December I had to work around a host of compatibility issues on Android and macOS, where older drivers didn’t necessarily implement GL/GLES3 correctly, requiring us to detect these and fall back to GL2/GLES2.&lt;/p&gt;

&lt;p&gt;This was always known to become necessary at some point, but we shipped the first version without it. During some memory analysis it turned out that smooth terrain was much more memory hungry than old blocky terrain. The ultimate solution to this was going to be level of detail, but it never hurts to make things more efficient - I switched to a carefully packed vertex format to reduce memory use, getting the vertex down to ~20 bytes. In addition a bug in the old code generated ~10% vertices on the border of chunks that just weren’t used, so that was one more easy win.&lt;/p&gt;

&lt;p&gt;So this year, unlike last year but like the year before that, I had a theme. I knew what I wanted to do.&lt;/p&gt;
&lt;p&gt;When we worked on the first version of the voxel lighting engine, we actually did a quick test to see what would happen if voxels were 1x1x1 stud. And the results looked fantastic. In the previous hack week I’ve also learned that we really need HDR, and that adding lighting direction to a voxel could make things look nicer.&lt;/p&gt;
&lt;p&gt;I wanted to combine all of that and have a version of our voxel lighting that supported 1x1x1 voxels. If done naively, that requires 64x more memory - so I knew I needed many voxel grids, nested in a cascade. Even with that though, to maintain realtime updates for high resolution portion of the grid next to the player, you need way more power - so I knew I needed a GPU implementation.&lt;/p&gt;
&lt;p&gt;At this point I’ve never written a compute shader, so doing all of this in a week was daunting. So - I confess! - I cheated by starting to work on the hack week 3 days earlier. Hey, don’t judge me - we didn’t even have support for compute shaders at the time!&lt;/p&gt;
&lt;p&gt;What followed was 10 days of what probably was one of the most intense and fun rendering projects I’ve done. It wasn’t just working on lighting - it was working on a non-traditional lighting system using GPUs as a general purpose compute unit (given that I haven’t used compute shaders before…). And I had to get to a point where something worked in slightly more than a week.&lt;/p&gt;
&lt;p&gt;I knew what I wanted to accomplish, but I didn’t know all the algorithms involved - I couldn’t simply port the CPU voxel lighting engine since a lot of that code can’t be parallelized to the point where GPUs can run that performantly.&lt;/p&gt;
&lt;p&gt;So I had to reimagine some of the algorithms, use some technology… creatively… (e.g. the GPU voxelizer used instancing and geometry shaders to run the coverage shader for each voxel of the primitive’s bounding box, and then used max blending - I think? - to aggregate coverage per voxel in a 3D texture), and ultimately got to a demo a day earlier so I even had time to implement a really bad voxel GI using something resembling light propagation volumes (… trying to debug SH math in the process).&lt;/p&gt;
&lt;p&gt;My biggest worry was that I would have nothing to show at the end. I didn’t have a working GPU debugger, and this was a very unfamiliar territory for me since I had to quickly get up to speed on what’s possible and what’s not possible in D3D11 compute. I remember being very dismayed at the D3D11 restriction around typed loads, and having to work around that.&lt;/p&gt;
&lt;p&gt;In the end, I did get to a demo, and it was a blast.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=z5TmqDtpwSM&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/z5TmqDtpwSM/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the hack week over (but not done, as we’ll see later), I switched to the next big thing. This was the time when the industry was going crazy in a wave of VR. VR was the next big thing, it was happening, and it was happening now. Analysts were projecting explosive growth, and we knew we had to be there.&lt;/p&gt;
&lt;p&gt;Well, we knew it would take years for VR to become pivotal, but we thought that by investing into VR now - by “getting on the map” - we’d secure enough foothold to become a strong player. To reduce risk, we decided to start with desktop VR - the plan being to add VR support to the platform and to use side loading to support Oculus and Vive headsets, without committing to any single store yet.&lt;/p&gt;
&lt;p&gt;I worked on the engine parts of this initiative, adding support for stereo rendering, vsynced presentation, latency optimizations for parts of the input pipeline, integration of LibOVR and OpenVR, etc. We had a few other people starting to prototype character navigation, UI integration and the like.&lt;/p&gt;
&lt;p&gt;Of course we had our fair share of rendering tweaks we needed to do - what do you do with particles? Do post-effects work? Do all parts of rendering code handle asymmetric frustums? Etc. As for optimizations, some of them were VR-specific and allowed doing something once per frame instead of twice, but some were general enough to apply to the rest of the rendering modes as well.&lt;/p&gt;
&lt;p&gt;We also had to figure out a compatibility strategy - how do you play existing Roblox games in VR? We believed that this is where the strength of our platform lies - VR desperately needed content and we had a lot of it, it just wasn’t VR-ready. Which is why built-in character navigation and UI portability were a big deal - how do we do this with acceptable comfort? Games that wanted to could of course use VR in a more conscious manner; I remember building a table tennis simulator game that wasn’t very fun but it was still very profoundly impressive when you played it for the first time.&lt;/p&gt;
&lt;p&gt;Once the desktop version worked, and we agreed we’d ship it in a stealth way, we needed to figure out what the full product release would look like. And, us being mobile first, we naturally turned to mobile VR.&lt;/p&gt;
&lt;p&gt;From the business perspective this was a mistake, as mobile VR at the time was in a very sad state which we started discovering along the way; VR without positional tracking is not for the faint of heart, and the state of the ecosystem at the time was… bad. However this was also fun to navigate - we looked into Cardboard-like devices and, quickly getting dissatisfied with the SDKs available to us, I wrote a custom VR renderer using gyro/accel inputs, a pseudo Kalman filter tuned for latency, and a late latching setup where the final postprocessing quad would get timewarped using the latest known information from the CPU side about where the head is looking. The results were much better than what stock SDK provided, but still very far from a decent VR experience, let alone what you could get on desktop with positional tracking.&lt;/p&gt;
&lt;p&gt;Except for the mobile VR code which never shipped, all the rest is still in Roblox today. Miraculously, it still works even though we don’t spend almost any time on maintaining it - in fact, one of the winners of a 2020 Game Jam was a VR game (&lt;a href=&quot;https://www.roblox.com/games/5372270649/The-Eyes-of-Providence-VR-Multiplatform&quot;&gt;The Eyes of Providence&lt;/a&gt;) that was actually lots of fun to play, with gameplay that was very unique to both VR and our platform and combined the strengths of both in one package.&lt;/p&gt;
&lt;p&gt;Ultimately, we ended up testing the Daydream waters as well but never shipped anything - the engine still supports VR but a full product integration will have to wait for a time where a VR platform is meaningful to us as a business.&lt;/p&gt;

&lt;p&gt;We always knew we needed a geometric LOD system for terrain. I even prototyped it when working on terrain initially, but didn’t have time to get it to work well enough to ship.&lt;/p&gt;
&lt;p&gt;Well, now was the time. There’s a lot of careful work here in getting LOD updates to be responsive, managing the cost of geometry updates (which previously was limited to load time), hiding seams between chunks of different detail levels, etc., etc.&lt;/p&gt;
&lt;p&gt;To test this I’ve used a level with ~500M voxels that was a Mars terrain import; levels of that size were only practical with LOD, but also stressed all other parts of the system, forcing me to implement a new in-memory storage format for voxel data, optimize various parts of the system, including deserialization, undo history and physics, and do more performance work everywhere.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VSdk4MfVGEk&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/VSdk4MfVGEk/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Even that proved to not ultimately be enough, and we had a few more people take a stab at improving various components of the system since.&lt;/p&gt;

&lt;p&gt;With an eye towards new features, such as compute, and new graphics APIs, such as Metal, I’ve set out to find a better solution for shader translation. The combination of hlsl2glsl + glsl-optimizer worked but was limited to DX9/GLES2 style shaders, and everything else was a hack.&lt;/p&gt;
&lt;p&gt;One thing I’ve wanted is support for constant buffers, which would clean up the way how we handled constants in the cross-platform rendering abstraction a lot, but it was very painful to do.&lt;/p&gt;
&lt;p&gt;So I set out to find a new solution, and settled on &lt;a href=&quot;https://github.com/Thekla/hlslparser&quot;&gt;hlslparser&lt;/a&gt;, as used in The Witness. It was using an AST-&amp;gt;source translation which was simpler than our previous pipeline, e.g. for Metal we wouldn’t have to go through glsl-optimizer’s IR, but it was incomplete so I ended up working on a lot of small changes to make it practical to switch to it (all of them are merged upstream), and replacing our old pipeline. We still relied on glsl-optimizer for OpenGL to optimize the shaders as that made mobile drivers happier, but this opened the door to using more modern features, such as uniform buffers, in the “frontend” (hlslparser could then flatten these to vec4 arrays, which made the resulting shaders compatible with ES2).&lt;/p&gt;
&lt;p&gt;Thus the second version of the shader toolchain got born; we will end up reworking this again in the future!&lt;/p&gt;

&lt;p&gt;Before implementing Metal support, I’ve wanted to make it easier to implement more modern APIs. This involved reworking the constant handling - we used to use integer handles that could be retrieved by name, like in GL - and introducing render pass support.&lt;/p&gt;
&lt;p&gt;For constants, we settled on constant buffer support, where a structure layout is mirrored between CPU &amp;amp; GPU, and the entire buffer is set in bulk. This ended up being a huge win both in terms of simplicity of the code and in terms of performance - up until that point we’ve had to emulate constant buffers on Direct3D 11 (which was a port done by another engineer which is why it wasn’t mentioned in this post), and set individual uniforms on GL. With this change we had the shader compiler flatten the uniform structs into vec4 arrays for GL, and we could remove all reflection code from our shader pipeline, and simplify and optimize the setup significantly.&lt;/p&gt;
&lt;p&gt;For render passes, we were targeting Metal so we went with a simple immediate-mode pass specification. It is used by our high-level rendering code with explicit load/store masks, and used in GL backend to discard attachment contents when necessary.&lt;/p&gt;
&lt;p&gt;This is also the large significant refactor of our rendering interface; today, almost 4 years later, it looks pretty close to how it looked like 4 years ago - which is nice! I think we found a great balance between simplicity and performance across all the different APIs. The only large addition since then was support for compute, which we still aren’t using in production [but it helps on hack weeks…].&lt;/p&gt;

&lt;p&gt;With shader translation support implemented by hlslparser and the rendering abstraction refactor done, it was time to do a Metal port. The motivation was, of course, render dispatch performance - GL driver consumed a significant portion of our frame, for what didn’t seem like a good reason.&lt;/p&gt;
&lt;p&gt;I think I did the initial bringup on a Friday. I came to work a bit early, wrote code non-stop until 6 PM, went back home, and proceeded to write code until 10 PM when the app ran and rendered correctly.&lt;/p&gt;
&lt;p&gt;Of course after that I had to spend the rest of the month on cleanup, corner case fixes, optimizations, etc., doing some small refactoring in other backends to make implementations align closer.&lt;/p&gt;
&lt;p&gt;Metal worked very well after that - on iOS we had very few stability issues after launch, and the backend required little maintenance since.&lt;/p&gt;

&lt;p&gt;It doesn’t look like anything very big happened here - some small cleanup of the rendering backend, some leftover Metal fixes, optimizations, etc.&lt;/p&gt;
&lt;p&gt;Calm before the storm, as they say.&lt;/p&gt;

&lt;p&gt;Was it possible to top the last hack week?&lt;/p&gt;
&lt;p&gt;I felt like the demo from the last week, while very awesome technically, didn’t quite have enough ‘oomph’. Part of the problem was the limitation of the voxel lighting technique, so I wanted to fix that, but also to have a slightly less ambitious plan.&lt;/p&gt;
&lt;p&gt;This may come as a surprise because the result of the hack week was what probably is regarded by the community as the best thing I’ve ever worked on:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lrvOGqC9ZjQ&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/lrvOGqC9ZjQ/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However something to realize is that in the previous year, I was stepping on untrodden ground; this year I decided to see if I could implement a production grade lighting engine - while pretty much knowing exactly what I need to do and how. I’ve implemented shadow maps many times before in my life; I’ve even implemented a Forward+ renderer in my F# engine (as you probably realized from the lack of F# in the few years of updates, I stopped using the language for a while) a few years ago.&lt;/p&gt;
&lt;p&gt;I just needed to combine all of that. In addition I think this was right after reading a slide deck on Doom 2016 - which is a game that looks great, is very fast and has a very simple renderer by modern standards. I was inspired by this and decided to implement that - Forward+ with shadow maps, and Doom 2016-style particle lighting with an atlas.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; I didn’t cheat this time around, I probably started the hack week on Saturday but that seems fair (?), and I managed to implement the entire thing in a week. It helped that I already had decent HDR code from last hack week so I could copy that, I had compute scaffolding so I could copy that for the light culling; the rest had to be mostly done from scratch, except for the light culling shader that I stole from my F# engine.&lt;/p&gt;
&lt;p&gt;The results, well, the results shaped the Roblox lighting work for the next 3 years. We ended up sharing a build with the community and developers made levels that &lt;a href=&quot;https://roblox.github.io/future-is-bright/results&quot;&gt;blew our minds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think I’ve been writing this blog for 4 hours now and I’m not even up to 2020. But the interesting part is that it looks like in 2017 I’ve done very little work that actually shipped to production in a meaningful way.&lt;/p&gt;
&lt;p&gt;This is because of a few things coinciding.&lt;/p&gt;
&lt;p&gt;One, I’ve started doing way more technical direction. Helping teams with the roadmaps, helping design solutions to some hard problems, doing code reviews, etc. etc. This was also the time when I was the de-facto rendering team lead which didn’t reflect well on the time to write code.&lt;/p&gt;
&lt;p&gt;Two, a lot of my attention was spent on the Future Is Bright prototypes. I now had two hack weeks from two prior years, both had very interesting ideas but we needed to figure out which one of them, or which combination of ideas rather, we need to pursue. This was more tricky than you’d think - some people in the company favored the voxel approach for reasons I won’t go too much into, and the voxel approach resulted in very unique soft look, and provided an answer to the entire rendering equation; shadow map approach resulted in superior quality for direct lighting, and was faster, but wasn’t sufficient by itself.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gJbhTBubWxw&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/gJbhTBubWxw/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We also needed to answer content compatibility questions (what do we do on low end?), among others.&lt;/p&gt;
&lt;p&gt;So I ended up doing a lot of research/prototype work on both implementations, trying to find the limits of both approaches. This resulted in more explorations into GPU-friendly ways to do voxel lighting, adding extra features, ultimately porting both prototypes to Metal and running them on an iPhone, etc.&lt;/p&gt;
&lt;p&gt;The summary of this work is available &lt;a href=&quot;https://roblox.github.io/future-is-bright/compare&quot;&gt;here&lt;/a&gt;. We eventually decided to pursue the shadow map/forward+ route for direct lighting, and are likely going to use a voxel-based solution for the indirect components in the future.&lt;/p&gt;
&lt;p&gt;Three, Vulkan was the next API to tackle. The final boss, so to speak. Another engineer did the initial port but eventually I took over.&lt;/p&gt;
&lt;p&gt;The concrete projects that ended up shipping involved more work on the rendering API (adding compute support to make next hack weeks easier…), and building a third - hopefully final! - version of the shader compilation pipeline using SPIRV, a shader intermediate representation from Vulkan. This included contributing to multiple open-source projects to make this practical, a lot of work I won’t go into since I’m getting tired writing all of this.&lt;/p&gt;
&lt;p&gt;At the end of the year we settled the FIB path and had a Vulkan implementation that was ready to ship on Android - or so we thought. The real release had to wait until next year.&lt;/p&gt;
&lt;p&gt;Of course throughout the year I shipped a few small optimizations here and there and worked on a few fixes.&lt;/p&gt;

&lt;p&gt;… oh, and there’s this. We were working on some memory diagnostic tools and I decided to see if I could implement a very low-overhead always-on tracking system for memory.&lt;/p&gt;
&lt;p&gt;To make this practical, it had to be able to categorize memory allocations but do nothing else - by overriding global operators new &amp;amp; delete and embedding a little bit of metadata in addition to the user data, it was possible to do this at minimum cost and keep it enabled in all builds.&lt;/p&gt;
&lt;p&gt;This ended up challenging to do well because of various issues with allocator mismatch, and required some further work in 2018, but the system does exist to this day and remains a vital source of memory-related information in production builds.&lt;/p&gt;
&lt;p&gt;We had a few people look at memory occasionally, but it always involved using somewhat clunky platform-specific tools and made it a bit hard to tell at a glance whether there’s a problem. Now that we had a way to validate memory usage and identify biggest consumers to trigger a subsequent investigation, a few memory-related issues became obvious. So I also worked on fixing some of them, including some mesh memory optimizations (using my independently developed library, &lt;a href=&quot;https://github.com/zeux/meshoptimizer&quot;&gt;meshoptimizer&lt;/a&gt;), reducing script bytecode size by compressing it better, coming up with a new encoding scheme for part outline data which helped us save 20% of part memory - two years later I removed outlines from our code outright as they weren’t useful any more, but back then we still had games relying on them - and fix a few assorted memory problems with animations.&lt;/p&gt;

&lt;p&gt;In the beginning of the year we basically had rock-solid Vulkan code, but production deployments required working around lots of driver issues and there wasn’t enough time for that, so that work had to happen in 2018. In the first couple of months we ironed out all of the issues and finally activated Vulkan on a large subset of production devices.&lt;/p&gt;
&lt;p&gt;More fixes were required throughout the rest of the year. Vulkan proved extremely challenging to fully release - I’m happy that we did do this now, with 60% of our user base using that and enjoying the resulting performance benefits, and it providing a path to us not relying on OpenGL as much; but it was a struggle, and honestly to a large extent it’s stubbornness and sunken cost fallacy that got us over the milestone.&lt;/p&gt;
&lt;p&gt;I’ve written enough about Vulkan elsewhere, between multiple talks at different conferences and a few blog posts here so I’ll just leave it at that. I take equal amounts of pride and solace in me, among other early adopters, paving the way for others to have an easier time.&lt;/p&gt;

&lt;p&gt;One side effect of Vulkan work is that it got me completely burned out on rendering. I suspect it’s a combination of this just being incredibly frustrating, and - along with lighting prototyping - contributing to me not shipping anything concrete in 2017. So I felt like I was done with rendering for a while, and while I still helped guide the team to deliver other projects, I wanted to do other things for a change.&lt;/p&gt;
&lt;p&gt;Partly because of this and partly because of some challenges in this area at the time I took a brief detour to focus on networking. As part of this I’ve implemented many small performance fixes to various parts of the stack, redesigned parts of the networking protocol to be more efficient, completely rewrote our physics data compressor to provide higher quality with less bandwidth consumption (this code is still used today, although it’s possible to improve on this further), and wrote a few specs for future improvements in this area, most of which have been implemented by other people now.&lt;/p&gt;

&lt;p&gt;I forget why, but the hack week didn’t happen in 2017 and happened in March. According to what I wrote above I was pretty done with rendering, and decided to do something else. At the time I have spent a lot of time thinking about the future of scripting at Roblox - programming languages and evolution thereof.&lt;/p&gt;
&lt;p&gt;To that end I’ve decided to explore a set of static typing extensions over Lua, using my script analysis work from 2014 (which we’ve used since it shipped) as a starting point. I extended the syntax with optional type annotation, and wrote a hybrid between a data flow analyzer and a unification-based inference engine, which you can see in action here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=_GNPwPwrEbI&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/_GNPwPwrEbI/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We haven’t used any of this code directly but this paved the way to a lot of the subsequent programming languages work we’ve started doing, although I personally haven’t worked on the type checking bits too much - see below!&lt;/p&gt;

&lt;p&gt;As I was working more on networking code, I started to understand the limitations and flexibility there very well. At the time Studio had a Play Solo testing mode that wasn’t using replication; it was a constant struggle to keep your game functioning correctly because of the semantics differences.&lt;/p&gt;
&lt;p&gt;This would come up in discussions occasionally and everybody either said that we really need the play solo mode because anything else just can’t be fast enough, or that we really need a full, if slow, replicated cloud-based testing solution as that’s the only way to get parity with production. At some point I couldn’t take it anymore and I just went ahead and built a prototype that started a full replicated session locally very quickly.&lt;/p&gt;
&lt;p&gt;For this to work I had to tweak a bunch of parameters in the networking code and, crucially, spawn the server and client in the same process, so that it could happen as quickly as possible. There was still more overhead in this mode, and you did need two full datamodels, but it was much better than anything else we had and so we decided to ship this. I only worked on the initial prototype here, but the important lesson here is that existence proof is so often so important - the best way to get people to believe something is possible is to show the fait accompli to them and watch them marvel.&lt;/p&gt;
&lt;p&gt;Since then we’ve removed the old play solo from the product, although there are some parts of the play solo flow that aren’t as fast as my old prototype was - which we will fix one day.&lt;/p&gt;

&lt;p&gt;(note, I’m omitting some more shader pipeline work and background Vulkan work in prior months)&lt;/p&gt;
&lt;p&gt;Generally I think I was still in the mode of helping others much more than doing personal work in 2018. A few highlights from these projects involve me rewriting the rasterizer for navmesh generation, and dynamic instancing for rendering.&lt;/p&gt;
&lt;p&gt;In June or thereabouts one of our engineers was finishing the rewrite of the navigation system, from the old voxel-based system to the new system based on Recast+Detours. Part of the system involved voxelization into spans and using the result to generate navmesh.&lt;/p&gt;
&lt;p&gt;The rasterizer used in that system is conservative, and not that efficient; on large maps with a lot of terrain this was proving to be a bottleneck. I realized that due to the somewhat unique construction of the terrain mesh it was possible to do a very good approximation using a fast non-conservative half-space rasterizer, and use a few tricks to match positive triangles to negative triangles to fill spans very efficiently.&lt;/p&gt;
&lt;p&gt;Curiously, even though I’ve never worked on any commercial products that targeted systems without a GPU, this is the second software rasterizer I ended up shipping - the first being one for a software occlusion system running on the SPUs back in my PS3 days.&lt;/p&gt;

&lt;p&gt;Another engineer was finishing the instancing system; despite this being a rendering project I couldn’t resist and looked into improving performance of that code, and ended up adding dynamic instancing in addition to clustered batched instancing.&lt;/p&gt;
&lt;p&gt;As a result, we have a system now that can aggregate large sets of similar objects statically so that we don’t waste the time to regenerate and reupload constant data for heavy scenes, but if some sets are smaller, we reaggregate them dynamically on the fly to merge the resulting draw calls for free.&lt;/p&gt;
&lt;p&gt;The result is performant almost regardless of the scene composition which is neat!&lt;/p&gt;

&lt;p&gt;Other folks were actively working on FIB phase 1 (which consisted of a new voxel lighting implementation with HDR support, a tone mapper and an HDR-ish postfx pipeline), but in November we realized that we aren’t sure we can make it by the end of the year - the code was done, it worked properly, but we wanted to ship with minimal performance regressions and our metrics showed us that were we to ship now, we would have dropped performance by 10-15% on mobile.&lt;/p&gt;
&lt;p&gt;So I helped by implementing a few optimizations in various places of the stack to get us back on track, which contributed to helping release FIB phase 1 on time.&lt;/p&gt;
&lt;p&gt;The rest of 2018 doesn’t seem super eventful - similar to 2017, I’ve worked on a few small bits here and there and focused a lot on helping others, writing specs, that sort of thing. Until at the end of 2018 I wrote a technical spec for the next Lua VM which would consume much of the next year for me.&lt;/p&gt;

&lt;p&gt;In some sense of course Future Is Bright is my child. I made the original hack week demo, and was very involved in the initial stages of the production work, including some fixes for phase 1 above.&lt;/p&gt;
&lt;p&gt;However, the other phases see progressively less of my involvement, and all phases would not have shipped without other people’s work. In fact despite my original code still being present in all three phases, most of the code in all three phases is not mine.&lt;/p&gt;
&lt;p&gt;I was somewhat involved in the phase 2, not so much by contributing code, but by convincing the engineer who did a lot of the work to try to figure out how to combine a few crazy ideas we were discussing together, notably tile-based incremental cascade updates (inspired by Insomniac’s CSM Scrolling) with EVSM (exponential variance shadow maps) - look ma, no PCF! This ended up working wonderfully even though it was daunting at first.&lt;/p&gt;
&lt;p&gt;As far as phase 3 is concerned, although some of that code is still the same as it was in my hack week, again most of the effort at this point is not mine. As Roblox grows and I take more of an advisory role in rendering, more and more the work we ship is that of the entire team and a lot of different engineers Roblox developers may or may not know, as opposed to a few people who started all of this.&lt;/p&gt;

&lt;p&gt;At this point I knew pretty much exactly what we need to do in terms of language evolution at Roblox. We used Lua 5.1 as a base, but it wasn’t fast enough - so we needed a much faster implementation - and it wasn’t robust enough for large projects, so we needed gradual typing.&lt;/p&gt;
&lt;p&gt;One engineer started working on the type system, and I started working on the virtual machine. We took the existing linting infrastucture I wrote in 2014, took the parser from it, made it more robust and faster, and then I wrote a compiler that compiled it to the new bytecode, an interpreter for this bytecode, many changes in the VM to make faster execution practical, etc.&lt;/p&gt;
&lt;p&gt;This would consume me for the entire year, in addition to guidance for other projects in the company. It’s by no means a trivial task - I ended up delving very deeply into the dark art of making fast interpreters, tuning ours tightly to the compilers and hardware we ran on, making a lot of performance improvements everywhere in the Lua stack (e.g. our reflection layer, even though not being part of the system, ended up being 2-3x faster as a result of this work - once you have good benchmarks, it’s easier to make progress!).&lt;/p&gt;
&lt;p&gt;This represented more than just making things faster though - it’s a new chapter in Roblox history, where before this we used the language we’ve been given since the very beginning, and now we treat it as our own, &lt;a href=&quot;https://roblox.github.io/luau&quot;&gt;Luau&lt;/a&gt;. This resulted in us adding libraries we could have technically added before but due to the lack of focus haven’t, adding features that the Lua community at large has been begging for for years but that somehow never made it to Lua proper, and in general doing a lot of deep, meaningful and impactful work that helped our community.&lt;/p&gt;
&lt;p&gt;In addition to the new compiler and interpreter, I also reworked the existing static analysis passes to the new framework and added several more; a lot of attention was dedicated to compilation and analysis performance as well, with more work to follow in 2020.&lt;/p&gt;
&lt;p&gt;As a result at the end of 2019 we had a modern and performant interpreted language stack, which was ready for more polish in 2020; the type checking work was well under way but wasn’t finished in 2019, and we’re continuing to work on it today.&lt;/p&gt;

&lt;p&gt;With the entire year dedicated to Luau, it felt fitting to end the year with a language-related hack week. As a result of the prior work our implementation was pretty competitive with LuaJIT interpreter (losing on some benchmarks still, but winning on a couple, with the code base written in portable and maintainable C). The next frontier was, of course, compiled performance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=vScM-nk5Avk&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/vScM-nk5Avk/0.jpg&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One reason why I started working on Luau is because on technical grounds the widely deployed solutions in programming language space never seemed sufficient.&lt;/p&gt;
&lt;p&gt;For example, intepreters in all existing languages are slow; the only fast widely used production interpreter on the planet I’m aware of is LuaJIT, but it is hand-coded in assembly. I didn’t believe this is the only answer, so now we have an interpreter that beats any other interpreter out there except for LuaJIT (including every JS interpreter we’ve tested).&lt;/p&gt;
&lt;p&gt;There are JIT compilers that are amazingly fast; however, if you look at dynamically typed languages, then JIT story is often unsatisfactory, and always complicated. A modern JavaScript VM has a two-three tier JIT with tiers having to support type recording, dynamic deoptimization with on-the-stack replacement, many different hidden representations of the same language types, etc. This is despite the fact that type information can be present in a JS program when TypeScript or Flow is used as a source language (this type information can be unsound, but that’s a separate problem).&lt;/p&gt;
&lt;p&gt;It felt unsatisfactory to discard type information and then having to learn it dynamically again; it felt unsatisfactory to have to do implementation heroics to transparently replace data structures. I wanted to experiment with a gradually typed system where through the ownership of the entire stack, starting at the language level, the resulting JIT can be much simpler and deliver comparable results.&lt;/p&gt;
&lt;p&gt;I didn’t quite get there - it’s hard to do this in the space of a week, but I did have a lot of fun doing that, and it feels like the theory hadn’t been disproven at least. With a slightly stronger code generator the goals seem achievable, and I hope to get a chance to explore this more in the coming years.&lt;/p&gt;
&lt;p&gt;Oh, this time I started the hack week on Sunday, so basically no cheating ;)&lt;/p&gt;

&lt;p&gt;There’s always more performance work to be gained, and I did spend part of this year doing further tuning and optimization - mostly going through the backlog from last year. A lot more work was spent doing memory optimizations, trimming down the sizes of various data structures, debug info, etc. This included writing a new memory allocator and a few other bits.&lt;/p&gt;
&lt;p&gt;In addition to that I’ve written a new low-level debugging engine; our old one relied on line hooks which we don’t support in the new VM, so I had to make a new one that works closer to how you’d expect a native debugger to work, using software breakpoints (bytecode patching) and single-step execution mode to get breakpoints and stepping to work.&lt;/p&gt;
&lt;p&gt;Some work also went into compilation throughput, but also cleanliness and correctness of the entire stack. I’ve spent some time writing fuzzing support code, something I’m going to blog about soon I hope, and making sure the language stack is cleanly separated from the rest of the engine and coherent internally - we have a clean separation between the high-level aspects of the language tooling and the VM, and can compile and test either of those without the other (although of course testing VM without the compiler requires pre-building bytecode somehow).&lt;/p&gt;
&lt;p&gt;I’m now starting to turn my attention to garbage collection, with some optimization work already shipping but the ultimate destination being generational incremental collection with good pacing (Lua 5.4 has a generational non-incremental collector, so that’s not a good source of inspiration) as well as resuming the JIT experiments and hopefully eventually shipping something.&lt;/p&gt;
&lt;p&gt;Just like in prior years I’m also spending a fair amount of time helping the rest of the team with whatever projects they happen to be working on. And looks like I did work on one thing that wasn’t Luau specific:&lt;/p&gt;

&lt;p&gt;A big focus for the entire engine team since 2019 has been to make the engine scale to larger worlds, and use available cores more effectively. Up until March I was mostly involved in this initiative in advisory capacity, but I decided to get my hands dirty and fix a few issues that were apparent from the scaling.&lt;/p&gt;
&lt;p&gt;We already had a few components parallelized at that time; after doing some multi-core profiling on our server hardware I didn’t like the scaling property of our parallel narrowphase and decided to write a new version.&lt;/p&gt;
&lt;p&gt;This involved writing a more carefully tuned implementation for the narrowphase itself - the old code had two long serial phases (prologue &amp;amp; epilogue) and I restructured a lot of computations to make sure that prologue is almost empty, and epilogue only involves serial processing on transitions of contact states (e.g. a body waking up or going to sleep) which happens more rarely.&lt;/p&gt;
&lt;p&gt;We also had some issues with balancing the workload across cores, so I added a more general facility to our task scheduler that could be used to run data-parallel workloads more easily without having to tune the work split too much.&lt;/p&gt;
&lt;p&gt;Finally, narrowphase ended up hitting a part of our physics pipeline that I was never truly happy with - where to read the full transform matrix of a body, some lazy hierarchical update is required to perform the full computation. When you have many cores, doing these updates in parallel serializes computation which can result in significant performance problems. The optimal path here is to redesign the system to eliminate lazy update - this is on our radar but it’s very difficult, so I did the next best thing and wrote carefully tuned lock-free code that allowed us to reduce the synchronization time during the updates to a minimum.&lt;/p&gt;
&lt;p&gt;… and it’s 11:59 PM on a Sunday and I’m done so hopefully somebody made it to the end. Thank you.&lt;/p&gt;

</description>
<pubDate>Fri, 20 Nov 2020 09:47:17 +0000</pubDate>
<dc:creator>modeless</dc:creator>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://zeux.io/2020/08/02/eight-years-at-roblox/</dc:identifier>
</item>
<item>
<title>Assassin’s Creed: Valhalla and the Unfortunate Implications</title>
<link>https://acoup.blog/2020/11/20/miscellanea-my-thoughts-on-assassins-creed-valhalla/</link>
<guid isPermaLink="true" >https://acoup.blog/2020/11/20/miscellanea-my-thoughts-on-assassins-creed-valhalla/</guid>
<description>&lt;p&gt;We’re going to be a bit silly this week (in part because the ending of this compressed semester has left me with little time) and talk about the recently released historical action-RPG computer (and console) game, &lt;em&gt;Assassin’s Creed: Valhalla&lt;/em&gt;, set in 9th century Norway and England.&lt;/p&gt;
&lt;p&gt;And, as with the last time we did this, I should note that this isn’t a &lt;em&gt;game review&lt;/em&gt;. As a &lt;strong&gt;game&lt;/strong&gt;, &lt;em&gt;AC: Valhalla&lt;/em&gt; is perfectly serviceable and quite fun. I don’t think it got the same amount of developer time as its predecessor, &lt;em&gt;Odyssey&lt;/em&gt;, but it is also a more focused experience than &lt;em&gt;Odyssey&lt;/em&gt; was, which runs to its benefit. Everything here basically works and while I find some of the game design decisions puzzling (the largest being how long the game makes you wait &lt;em&gt;hours&lt;/em&gt; before you have a full set of all three armor types and all weapon types, given that you may be getting bonuses to them in the skill tree many hours before you find &lt;em&gt;any at all&lt;/em&gt;), &lt;strong&gt;it is overall fine. It’s fun.&lt;/strong&gt;&lt;/p&gt;
&lt;img data-attachment-id=&quot;5179&quot; data-permalink=&quot;https://acoup.blog/20201114012112/&quot; data-orig-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg&quot; data-orig-size=&quot;1920,1080&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;20201114012112&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg?w=300&quot; data-large-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg?w=1024&quot; src=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg?w=1024&quot; alt=&quot;&quot; class=&quot;wp-image-5179&quot; srcset=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg?w=1024 1024w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg?w=150 150w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg?w=300 300w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg?w=768 768w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012112.jpg 1920w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;It also lets you snuggle the cats. I am very big on this choice.
&lt;p&gt;But you aren’t here for my game reviews. You are here for me to talk about the &lt;em&gt;history&lt;/em&gt; behind the game. And normally, I would leave a product like this alone (this is only thinly historical fiction, given the crazy background plot that ties the games together). But each &lt;em&gt;Assassin’s Creed&lt;/em&gt; game includes not just meticulous recreations of historical &lt;em&gt;places&lt;/em&gt; (and to be clear, I mean the physical buildings and landscapes, not the cultures or politics, but also some form of this statement:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;Inspired by historical events and characters, this work of fiction was designed, developed, and produced by a multicultural team of various beliefs, sexual orientations and gender identities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(yes, the odd decision to use and then not use the Oxford comma is preserved from the original). That is &lt;em&gt;Valhalla’s&lt;/em&gt; version of the statement. &lt;strong&gt;That statement is making a claim about the product that follows&lt;/strong&gt;. Some of those claims are explicit (this is based on real history at some level) and some are implicit (our diverse team means this game was produced in a careful, sensitive way). &lt;strong&gt;And those claims deserve interrogation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As always, if you like what you are reading here, please share it; if you really like it, you can support me on &lt;a href=&quot;https://www.patreon.com/user?u=20122096&quot;&gt;Patreon&lt;/a&gt;. And if you want updates whenever a new post appears, you can click below for email updates or follow me on twitter (@BretDevereaux) for updates as to new posts as well as my occasional ancient history, foreign policy or military history musings.&lt;/p&gt;

&lt;h2&gt;The Nitpicks&lt;/h2&gt;
&lt;p&gt;My thoughts on &lt;em&gt;Valhalla&lt;/em&gt; fit into two main categories: complaints of historical accuracy that I think are largely unimportant, but fun to note, and &lt;strong&gt;complaints about tone and framing which I think &lt;em&gt;are&lt;/em&gt; important and worth discussing&lt;/strong&gt;. &lt;strong&gt;We can start with the frivolous stuff&lt;/strong&gt;. If you want to skip to the meat of the analysis, you are welcome to jump right to the next section, but I know some folks like to know about this stuff, so here it is.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First off, because it is a core area of my specialty: the weapons and armor.&lt;/strong&gt; The military equipment we see here is very hit-or-miss and &lt;strong&gt;there are honestly quite a lot of misses&lt;/strong&gt;. They at least have, for the most part, the relatively light design of battle axes correct, in both their two-handed and one-handed varieties. And I can understand from a game design standpoint the decision to not give the player a one-handed sword and to instead fill that role with the more iconic one-handed axe; NPCs use one-handed swords, so it isn’t that they don’t exist, merely that our character doesn’t prefer them. Technically, sword-and-shield and spear-and-shield are both possible, but only with a high level perk, which is pretty silly given that these were the most common non-elite fighting styles of the era by some distance.&lt;/p&gt;
&lt;p&gt;But things go poorly from there. There is a ‘flail’ type weapon, despite – &lt;a href=&quot;https://acoup.blog/2019/06/07/collections-the-siege-of-gondor-part-v-just-flailing-about-flails/&quot;&gt;as we’ve discussed&lt;/a&gt;, actually – flail chain weapons being both not of this period, poorly attested in general and also not common in this part of the world in &lt;em&gt;any&lt;/em&gt; period. The large two-handed swords – the only kinds of swords the player can use – are around &lt;em&gt;three hundred&lt;/em&gt; years too early and don’t really resemble their later variations either (they are much too thick and heavy, being mostly up-scaled period swords, which makes them look absurd). And yes, there were two-handed swords in antiquity in Thrace and Illyria (the falx and rhomphaia) but this is both not that part of the world, not antiquity, and these are not those swords. I am befuddled that, with two other two-handed weapons that fit the period (a thrusting spear and a two-handed axe) that they felt the need to include ‘greatswords.’ Also, they are carried by way of back-scabbards, which…sigh…no.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The armor is generally a bigger ‘miss’ than the weapons.&lt;/strong&gt; There is a &lt;em&gt;lot&lt;/em&gt; of soft ‘leather’ armor here of exactly the sort that was not used historically. What is baffling uncommon is &lt;em&gt;mail&lt;/em&gt; – especially among the Norse and Danes (there’s a bit more mail on the Saxons) – which would have been, in this period, by far the most common metal body protection. Pretty much all of Eivor’s warrior band ought to be wearing mail. Instead, there is a lot of scale armor; scale was certainly used in this period in England, but it was a lot less common than mail (there are also things like brigandine armor roughly 400 years too early). I have noticed a real trend of game developers using lots of scale armor when mail would be more correct; I wonder if it is easier for an art-team to produce the assets for it or if they think it looks cooler. But in any event, audiences looking for a realistic sweep of ninth century equipment will not find it here. I would say, for the more ‘exotic’ player armors, that I think the developers here missed a trick – the game sets up early that we have people from the Near East and even the Far East in the player’s clan. I think that would set up an opportunity to have the honestly rather more varied and potentially visually interesting armors from the Near East – a lot more scale, but also Near Eastern lamellar or even Chinese-style lamellar coats. Alas, no.&lt;/p&gt;
&lt;img data-attachment-id=&quot;5171&quot; data-permalink=&quot;https://acoup.blog/20201115222400/&quot; data-orig-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg&quot; data-orig-size=&quot;1920,1080&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;20201115222400&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg?w=300&quot; data-large-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg?w=1024&quot; src=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg?w=1024&quot; alt=&quot;&quot; class=&quot;wp-image-5171&quot; srcset=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg?w=1024 1024w, https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg?w=150 150w, https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg?w=300 300w, https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg?w=768 768w, https://acoupdotblog.files.wordpress.com/2020/11/20201115222400.jpg 1920w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;Barbarian-fashion, with nonsense biker-leather armor and lots of random, unkempt fur. Even vikings &lt;strong&gt;cared&lt;/strong&gt; about their appearances!
&lt;p&gt;In terms of &lt;em&gt;clothing&lt;/em&gt;, it is both hit and miss, but a bit more hit than miss compared to equipment. Some of the Norse and Danish wear is ‘hollywood barbarian’ (lots of rough fur, inexplicably low-coverage clothing in freezing climates, lots of random leather) which remains truly frustrating. But &lt;em&gt;most&lt;/em&gt; of the clothing isn’t this way. One odd area is color: &lt;strong&gt;medieval clothing, contrary to what you often see in films, was &lt;em&gt;colorful&lt;/em&gt;, often with lots of bold primary colors&lt;/strong&gt; (bright reds, yellows, greens, blues). In &lt;em&gt;Valhalla&lt;/em&gt;, the developers have opted to use clothing color to signify faction (friendly Danes wear green, the Norse blue, hostile Danes red, hostile Saxons yellow) and to keep non-combatants in drab colors. I get the design reason (they want you to pay attention to enemies, not non-combatants) but it is frustrating, apart from the monks, that this makes so many of the townsfolk drab and dull. &lt;strong&gt;Still, it was very nice to see Norse and Danes in bright primary colors, often with lovely border-stitching on their clothes and lots of clear care.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In terms of architecture, I very much like that buildings in settlements, especially high status ones, are often well built, with lots of designs and carving work in the wood. I am less thrilled with the way churches are done: typically in plain stone with plaster; some color is often added by lighting effects through stained glass. But these are medieval Catholic churches, they should be brightly painted and colored in the interior and in most cases – &lt;em&gt;especially&lt;/em&gt; in big towns and monasteries – very well kept up. If you want to see this done better, &lt;strong&gt;&lt;em&gt;Kingdom Come: Deliverance&lt;/em&gt; is a deeply flawed game that nevertheless does medieval town architecture and clothing quite a lot better&lt;/strong&gt; (but maybe watch a Let’s Play; while &lt;em&gt;KC:D&lt;/em&gt; is fun once it gets properly going, it’s a case where I don’t think the juice is worth the squeeze; I invested the time to get properly into the game and I don’t think it was really worth it).&lt;/p&gt;
&lt;img data-attachment-id=&quot;5170&quot; data-permalink=&quot;https://acoup.blog/20201114231046/&quot; data-orig-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg&quot; data-orig-size=&quot;1920,1080&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;20201114231046&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg?w=300&quot; data-large-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg?w=1024&quot; src=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg?w=1024&quot; alt=&quot;&quot; class=&quot;wp-image-5170&quot; srcset=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg?w=1024 1024w, https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg?w=150 150w, https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg?w=300 300w, https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg?w=768 768w, https://acoupdotblog.files.wordpress.com/2020/11/20201114231046.jpg 1920w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;One of Valhalla’s inexplicably bland churches. Also, why are the big banners so ragged and faded? This is an active religious center! It would be kept &lt;strong&gt;clean&lt;/strong&gt; and &lt;strong&gt;well cared for&lt;/strong&gt;!
&lt;h2&gt;Diversity&lt;/h2&gt;
&lt;p&gt;This isn’t really a nitpick or a substantive issue, so I am giving it its own section in between the two. Let me be frank: &lt;strong&gt;I fully understand the desire of the developers to deviate from history on some of these points in order to make a more inclusive game&lt;/strong&gt;. These games do not market themselves as pure historical simulations, so this does not bother me; in fact I think it is broadly a positive thing that game studios are doing this (so long as they are &lt;em&gt;open&lt;/em&gt; about fudging the history). So if you were hoping for a lot of table-pounding here, you are bound to be disappointed. Still, we’re assessing the game historically, so it seems worthwhile to point some of these things out.&lt;/p&gt;
&lt;p&gt;First, on gender diversity, so far the game has built up a quiet contrast between the English, who are gender-stratified, and the Norse and Danes, who are much less so. Saxon troopers are all male, but Danish and Norse NPCs include women. All of the Saxon leaders I’ve met so far in the game are male, while one of the first jarls you meet in England is a woman ruling in her own name. Saxon clothing is sharply gendered (men in pants, women in dresses), but Norse and Danish clothing generally isn’t (which is a clear design choice, since this is very much &lt;em&gt;not&lt;/em&gt; true historically). And, as with &lt;em&gt;AC: Odyssey&lt;/em&gt;, if you play a female main character, absolutely no one seems to care or notice.&lt;/p&gt;
&lt;p&gt;Now, on the one hand, there isn’t &lt;em&gt;nothing&lt;/em&gt; to this characterization. &lt;a href=&quot;https://en.wikipedia.org/wiki/Shield-maiden&quot;&gt;‘Shield-maidens’&lt;/a&gt; do show up in the sagas and archaeological evidence of Scandinavian women from the period buried with weapons has turned up (although to be clear it is not nearly the sort of ‘slam dunk’ evidence it often gets presented as in the popular media; grave goods don’t always tell you very much about what someone &lt;em&gt;did&lt;/em&gt;, so much as what they owned or the status they had). I’d argue the balance of the evidence favors the idea that some Scandinavian women did fight some of the time.&lt;/p&gt;
&lt;p&gt;That said, while the evidence for female warriors is difficult and subject to interpretation, it is &lt;em&gt;abundantly, obviously, overwhelmingly&lt;/em&gt; clear that political power was overwhelmingly concentrated in male hands in Norse and Danish society, that males were functionally &lt;em&gt;exclusively&lt;/em&gt; the rulers, and that the vast, overwhelming majority of warriors were men and female warriors, if they existed, were rare, notable exceptions. &lt;strong&gt;Norse and Danish ‘viking’ society was still very patriarchal&lt;/strong&gt;. The game, in creating this contrast between historically patriarchal Saxon society and ahistorically non-patriarchal Danish and Norse society (again, there’s some history to this, but the treatment in game is a fairly big over-correction), I think, really draws attention to just how far they are going to fudge this point historically.&lt;/p&gt;
&lt;p&gt;But I absolutely understand the desire not to bash the player’s head with this and to take the opportunity to open the game up in this way. Honestly, if the game played it the same way &lt;em&gt;AC:Odyssey&lt;/em&gt; did, I wouldn’t mind it at all. If anything, it would make more sense here: &lt;strong&gt;the idea of a woman warrior was evidently, from the sagas, at least plausible to an audience of vikings&lt;/strong&gt;. The same cannot be said of the idea of a female mercenary in the Greek world – the role and status of women in Greece was really quite restricted, even by the standards of some ancient patriarchies (for instance, as compared to the still-very-constrained-because-this-is-still-a-patriarchy position of women in Rome). &lt;strong&gt;I do worry that this depiction&lt;/strong&gt; – and it’s clear that this &lt;em&gt;Valhalla&lt;/em&gt; is partly feeding off of &lt;a href=&quot;https://en.wikipedia.org/wiki/Vikings_(2013_TV_series)&quot;&gt;&lt;em&gt;Vikings&lt;/em&gt;&lt;/a&gt; – &lt;strong&gt;is going to end up creating an overly romanticized view of Scandinavian society in this period&lt;/strong&gt;. &lt;em&gt;So let me say it again: ‘Viking’ society was still very much a patriarchy in which nearly all political power was held by men, and almost all of the fighting was done by men&lt;/em&gt;. &lt;strong&gt;My bigger problem on this point is the &lt;em&gt;contrast&lt;/em&gt; it sets up with the English&lt;/strong&gt;, a point we’ll come back to in the next section.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I am similarly unbothered by the decision to make the player’s home camp &lt;em&gt;very&lt;/em&gt; racially diverse&lt;/strong&gt;. The camp features – at least where I am now in the game – two Middle Eastern characters, two East (or possibly central? The game isn’t quite clear) Asian characters and one African character. &lt;strong&gt;I will say that, as travelers and traders, it is not &lt;em&gt;crazy&lt;/em&gt; that people with these backgrounds might be in England, even in the ninth century&lt;/strong&gt;. The decision to include so many characters from Asia and so few from Africa is a bit more frustrating; &lt;strong&gt;I’d expect to see a lot more North Africans in 9th century England than either Middle Eastern or East/Central Asian characters&lt;/strong&gt; (because it is closer, as a matter of trade-routes). But given the relative size of video-game markets, it isn’t hard to see why that decision might have been made (&lt;strong&gt;but I do find it frustrating, especially since the one African character is, uh, &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/MagicalNegro&quot;&gt;a magical child&lt;/a&gt;…which is not great&lt;/strong&gt; – and yes I know he is a legacy character and no that doesn’t make it better).&lt;/p&gt;
&lt;p&gt;I will say that I found this decision a bit out-of-place for a game set in 9th century England, which, unlike either, say, 3rd century (Roman) England or 13th century England, was not nearly so well integrated into global trade networks. Now, I liked that &lt;em&gt;AC: Odyssey&lt;/em&gt; had a good amount of Mediterranean diversity (if anything it should have had &lt;em&gt;more&lt;/em&gt;; and if they ever make &lt;em&gt;AC: Rome&lt;/em&gt; it should have a &lt;em&gt;ton&lt;/em&gt;) where it is a bit more understandable because fifth century BC Greece was well-integrated into a large Mediterranean trading network which also hooked into trade routes stretching through North Africa, India and into China along with Europe. So whereas the gender component makes &lt;em&gt;less&lt;/em&gt; sense in &lt;em&gt;Odyssey&lt;/em&gt; compared to &lt;em&gt;Valhalla&lt;/em&gt;, the racial component makes somewhat less (but not zero) sense in &lt;em&gt;Valhalla&lt;/em&gt;. In short, this is a lot of ethnic diversity for a setting that was not very diverse, even compared to itself in earlier or later periods (but again, the idea that there might be merchants from these places in England in the ninth century is &lt;em&gt;not crazy&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;But as with the point on gender, I am not really bothered by this decision. Would a small village (the player’s settlement) have multiple characters from other continents in 9th century England? Almost certainly not. &lt;strong&gt;But would there have been traders from far off lands in England? Absolutely&lt;/strong&gt;, although one would expect that many of the ‘exotic foreigners’ would be Spaniards (including, of course, Spanish Muslims, given the date) or Italians. &lt;strong&gt;Could there have been Middle Eastern or even East Asian traders, travelers, merchants and the like in 9th century England? Sure&lt;/strong&gt; – not many – but sure.&lt;/p&gt;
&lt;p&gt;My only problem with this all is that, of course, nearly all of the foreign characters are in your settlement – rather than in the big cities with big markets where you would actually expect to see people from far off lands – which further heightens the Norse-Saxon contrast I am going to complain about in a moment.&lt;/p&gt;
&lt;p&gt;So, is there a bunch of design decisions which essentially concentrate the gender and ethnic diversity in places where the player will see it in an effort to broaden the game’s appeal. &lt;strong&gt;I am fine with that&lt;/strong&gt;. This game isn’t pretending to be a historical simulation and I understand the desire to set it up this way.&lt;/p&gt;
&lt;img data-attachment-id=&quot;5173&quot; data-permalink=&quot;https://acoup.blog/20201114012101/&quot; data-orig-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg&quot; data-orig-size=&quot;1920,1080&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;20201114012101&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg?w=300&quot; data-large-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg?w=1024&quot; src=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg?w=1024&quot; alt=&quot;&quot; class=&quot;wp-image-5173&quot; srcset=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg?w=1024 1024w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg?w=150 150w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg?w=300 300w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg?w=768 768w, https://acoupdotblog.files.wordpress.com/2020/11/20201114012101.jpg 1920w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;This is about to get both very grim and difficult to illustrate, so instead here is a picture of a cat.
&lt;p&gt;On to the more &lt;strong&gt;substantive issues&lt;/strong&gt;, starting with:&lt;/p&gt;
&lt;h2&gt;Viking Colonialism&lt;/h2&gt;
&lt;p&gt;My more substantive issues go to the overall tone of the narrative and the society that is described here. And I think the problem can be neatly summed up in just one thing about the game: the game will ‘desyncronize’ you (meaning produce a game over) if your character kills civilians, including if, while raiding a monastery, you kill the monks. &lt;strong&gt;You are a viking (one thing they do right: viking is a job description, meaning ‘raider,’ not an ethnic identity) &lt;em&gt;who does not kill non-combatants&lt;/em&gt;.&lt;/strong&gt; This is akin to the famous joke about the &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/ThePiratesWhoDontDoAnything&quot;&gt;pirates who don’t steal anything&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We should be clear about what is happening in England in c. 875 when the game takes place. After almost a century of repeated Norse and Danish viking raids on the English coast (which, to be clear, were not merely raids for physical goods; &lt;strong&gt;they were slave raids&lt;/strong&gt; as trading in slaves (‘thralls’) was an important part of the Scandinavian economy), the arrival of what the Anglo-Saxon Chronicle calls the ‘Great Heathen Army’ (in 865) turned that into a war of conquest. The Norse and Danes overran the English kingdoms (save Wessex) and settled in the area, subjugating the population, taking the best farmland from its former owners and generally wrecking the place in the process. Our sources are very clear that this was not a particularly pleasant process for the existing population and the surviving English kingdom of Wessex responded to it with a series of reforms that radically militarized the kingdom.&lt;/p&gt;
&lt;p&gt;To say that the game sanitizes this history is a profound understatement.&lt;/p&gt;
&lt;p&gt;The England of the game is suspiciously both resource rich and surprisingly empty. The player’s clan settles, with a minimum of fuss, in &lt;em&gt;unoccupied&lt;/em&gt; (save for ‘bandits’) high value land directly on a river – prime real estate that one supposes the English just forgot about (technically there was already a camp here, so the developers have done us the favor of having NPCs move in before us, violently clear the land of its local population &lt;em&gt;and then just leave&lt;/em&gt; so that we can more or less peacefully move in). Seriously, in one quest your clan’s hunter goes on and on about how resource rich and full of animals the land is; this is not marginal land. The resulting settlement is, apart from some foreign merchants and specialists, entirely Norse; there is no subjugated or enslaved underclass (we’ll &lt;em&gt;get back to that&lt;/em&gt; in a second).&lt;/p&gt;
&lt;p&gt;Your settlement is then expanded and built up entirely with goods derived from raiding – specifically raiding churches and monasteries (you literally do not seem to be able to resource raid other types of settlements, stick a pin in that, we’re coming back to it too). But in those raids, you only ever take piles of resources locked in giant gold chests – resources you are repeatedly told the local Saxons just uselessly lock up in their churches (silly Christians!). And while you might be opposed by Saxon soldiers, when you raid these places, you not only don’t &lt;em&gt;need&lt;/em&gt; to kill any of the monks or farmers, you &lt;em&gt;cannot&lt;/em&gt; – doing so results in a game-over state. Your warriors may burn some buildings, but they pop back to normal shortly and these settlements repopulate even before you leave. In short, &lt;strong&gt;your raiding doesn’t so much as &lt;em&gt;inconvenience&lt;/em&gt; the civilian population&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Instead the early game missions generally represent the Norse and Danish invaders as a &lt;em&gt;positive&lt;/em&gt; impact on the local population. The first two mission chains in England involve replacing the ‘bad guy’ anti-pagan king of Mercia with a good guy reasonable king Ceolwulf (and his good guy reasonable son) and rescuing the Dane-ruled settlement of Grantebridge where, I kid you not, we are told that this settlement was just a tiny village when the Danes moved in and built it up into a big, multi-cultural trading town and all of the local English folks are just &lt;em&gt;totally OK with this&lt;/em&gt; and it is just the mean nasty Saxon army (led by a bad guy member of an evil conspiracy) who are ruining everything. Apparently all of the Danish &lt;em&gt;vikings&lt;/em&gt; only really came by for &lt;em&gt;&lt;strong&gt;infrastructure week&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This problem is infinitely compounded by the way the game treats, or more correctly does not treat, the Norse practice of slavery.&lt;/strong&gt; Thralls – that is, enslaved persons forced to work, typically, as menial laborers – are mentioned only at the very beginning of the game and never subsequently recur. &lt;strong&gt;This is an enormous problem&lt;/strong&gt; in terms of representing Norse society and a stunning one given that slavery was &lt;em&gt;not&lt;/em&gt; left out of &lt;em&gt;Odyssey&lt;/em&gt;. &lt;strong&gt;&lt;a href=&quot;https://en.natmus.dk/historical-knowledge/denmark/prehistoric-period-until-1050-ad/the-viking-age/power-and-aristocracy/slaves-and-thralls/&quot;&gt;Slavery was extremely common in the Norse and Danish world of this period&lt;/a&gt;&lt;/strong&gt;. As far as we can tell &lt;strong&gt;most free households would have had at least a few enslaved ‘thralls’ and larger households would often have had dozens&lt;/strong&gt;. Eivor and Sigurd – the main characters – being effectively nobility (a Huscarl) and royalty (a jarl and king’s son) respectively would both have &lt;em&gt;many&lt;/em&gt; enslaved thralls in their households.&lt;/p&gt;
&lt;p&gt;Moreover, &lt;strong&gt;slave trading was a major part of the Scandinavian economy in this period&lt;/strong&gt;. The ‘trading’ settlements the Danes were setting up at Grantebridge would almost certainly have captive Saxons as one of its primary exports and it is very likely that our little settlement would have made heavy use of captured locals as enslaved labor. &lt;strong&gt;None of this is so much as mentioned in the text&lt;/strong&gt;. Slavery is presented, more or less, as something only the initial Norse bad guy does and then never mentioned again. Imagine the equivalent of a game set in the American South or the Caribbean pre-1865 in which slavery was simply &lt;em&gt;not present at all&lt;/em&gt; and you have the rough scope of the problem here (I should point out that the &lt;em&gt;Assassin’s Creed&lt;/em&gt; games &lt;em&gt;actually&lt;/em&gt; set in the Caribbean &lt;em&gt;did&lt;/em&gt; acknowledge the presence of slavery, quite explicitly).&lt;/p&gt;
&lt;p&gt;Now I’m sure as I push deeper into the game I am likely to get some ‘bad guy’ Norse and Danes as well as some more ‘good guy’ Saxons and so on. But these games are huge; hiding the complexity and nuance behind 30+ &lt;em&gt;hours&lt;/em&gt; of game time doesn’t save making the &lt;em&gt;first&lt;/em&gt; 30+ hours a love letter to Manifest Destiny.&lt;/p&gt;
&lt;p&gt;And that, of course is the problem: &lt;strong&gt;the broader implications of this kind of game design for thinking about colonialism&lt;/strong&gt;. I do not think we are all collectively bothered by how Viking-themed products make us think about 9th century settler colonialism in Northern Europe. &lt;strong&gt;But colonialism more broadly, and the still popular fantasy of colonists finding empty ‘virgin’ lands to settle, is still a major issue in the consciousness and politics of many countries.&lt;/strong&gt; Obviously in the United States this is a big issue because we are a country where a colonial population and an indigenous population live side by side; the morality and ethics of who owns what and how is fiendishly complex and still &lt;a href=&quot;https://www.scotusblog.com/2020/07/opinion-analysis-justices-toe-hard-line-in-affirming-reservation-status-for-eastern-oklahoma/&quot;&gt;very much in flux&lt;/a&gt;. Meanwhile, &lt;a href=&quot;https://en.wikipedia.org/wiki/Xinjiang_conflict&quot;&gt;the People’s Republic of China is doing some ethnic cleansing in order to engage in settler-colonialism &lt;em&gt;right now&lt;/em&gt;&lt;/a&gt; (in case anyone was under the truly silly beliefs that imperialism and colonialism was somehow unique or particular to Europeans or that colonialism was &lt;a href=&quot;https://en.wikipedia.org/wiki/Virgin_Lands_campaign&quot;&gt;somehow incompatible with anti-capitalist regimes&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This is one of those cases where I think that both Ubisoft’s decision to have that disclaimer about their diverse development team and the decision to root their games in painstaking recreations of historical geography imposes a special burden. Absolutely, there are other games that indulge in the ‘virgin lands’ fantasy – &lt;a href=&quot;https://youtu.be/d6i5Ylu0mgM&quot;&gt;Minecraft&lt;/a&gt;, Factorio, Dwarf Fortress – but they generally avoid putting that in a historical context and instead focus on fictional, fantasy worlds that can &lt;em&gt;actually&lt;/em&gt; have empty lands. That is its own, sometimes odd problem (see the minecraft video linked above), but this version, where the lands are not only &lt;em&gt;not empty&lt;/em&gt; but actively &lt;em&gt;improved&lt;/em&gt; by being invaded and violently subjugated by a &lt;em&gt;superior&lt;/em&gt; people (and we’re going to get &lt;em&gt;there&lt;/em&gt; in a minute) modeled off of an actual historical event &lt;strong&gt;is just stunningly irresponsible storytelling.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which in turn brings us to:&lt;/p&gt;
&lt;h2&gt;Burning Churches&lt;/h2&gt;
&lt;p&gt;Now it is to be expected given the context of this game – where our character is a Norse invader in predominantly Christian lands – that the Christian religion would be a relatively hostile and unwelcoming force in the game. And some things – the gleeful Norse discussing how foolish the Christians are to put their wealth in monasteries – are tinny to the ear but understandable in context.&lt;/p&gt;
&lt;p&gt;That said, if this was &lt;em&gt;any other religion&lt;/em&gt; I would have no qualms about calling its depiction mildly offensive, so I am going to go ahead and say that here.&lt;/p&gt;
&lt;p&gt;In the first thirty hours of the game, my character’s experience with Christianity runs as follows: our band of Norse raiders describes Christianity somewhat derisively to each other (fair enough, but if this was any other religion, it seems like there would probably be a token Christian in our raiding group to push back on the mockery). Then we loot some monasteries, which contain lots of wealth in chests, but not in religious items on display, or precious books. I assume this was done to make monastery looting feel less bad and sacrilegious, but the sanitizing feels pretty awkward here, especially when the game seems to go out of its way to imply that this concentration of wealth is useless. This is a point where presenting an unvarnished pillage-and-slaughter would have actually &lt;em&gt;helped&lt;/em&gt; the game; imagine by comparison a game in which you raided, say, a Buddhist Temple, but instead of the valuables being in the forms of objects of devotion (statues, prayer wheels) they were just piled up in chests. At no point so far in the story does any character – including many of the Christians we meet – comment on this religious desecration, which is all the more remarkable given that looting churches and monasteries, &lt;strong&gt;and &lt;em&gt;only&lt;/em&gt; churches and monasteries&lt;/strong&gt;, is the only real way to get supplied to build up the settlement. Secular settlements apparently lack food and timber.&lt;/p&gt;
&lt;p&gt;From there we have the first three areas of England: Grantebridge, Ledecestrescire, and East Anglia. In the first, the bad guy is a cross-wearing Saxon who has suborned a traitor among the Danes there (this is the area where the Danes built up a nice trading town during infrastructure week); his forces are Christian (made explicit during an interrogation) and evil. In Ledecestrescire, a bunch of Norse and Danes are looking to put one Christian Saxon lord on the throne and remove another. The ‘bad guy’ Saxon hurls ‘pagan’ like a racial epithet. The friendly Saxons are incapable and unmanly (a point we’ll return to below) and require you to do basically all of the work but are also presented as almost entirely secular. They do not mind that one of their allies is torturing men (to death, in one case) &lt;em&gt;inside of a pillaged church&lt;/em&gt; – and the player is not expected to mind either. We later become drinking buddies with Mr. War-Crimes the Boneless (a point that the player does not seem to get a choice about – I wanted my Eivor to hate that guy because he was a bloody-minded fool, but was never given the prompt, even though I sided against him in every argument).&lt;/p&gt;
&lt;p&gt;Then it’s on to East Anglia. The game is very open about the Christianity of the would-be king there, Oswald. He is also presented as weak and unmanly (see below) and requires training in your viking ways in order to be even marginally competent in a fight (I swear the developers missed the fact that the Saxon nobility were &lt;em&gt;also warrior aristocrats&lt;/em&gt;). Oswald’s character is pretty simple: he is excessively weak and compassionate (the two are practically equated) and the later is directly linked to his Christianity. This leads him to make bad decision after bad decision as the Danes (and you) around him shake their heads in frustration and disbelief. While Oswald eventually wins in the end, it is not really from the strength of his compassion, but from his emulation (poorly) of your warrior wars and then you and his Danish allies mopping up his (bad guy Danish) enemies.&lt;/p&gt;
&lt;p&gt;While doing this, I had a few religiously themed world-encounters. On the one hand, Norse and Danish rituals are shown to be positively effective: berserker brews work, potions to induce hallucinations produce true prophecies and visions which provide tangible benefits, and Odin straight up &lt;em&gt;talks to you&lt;/em&gt;. The narrative &lt;em&gt;repeatedly&lt;/em&gt; presents Norse religious responses as correct, right and effective (but, you know, leaves out a lot of the slavery and &lt;a href=&quot;http://en.natmus.dk/historical-knowledge/denmark/prehistoric-period-until-1050-ad/the-viking-age/religion-magic-death-and-rituals/human-sacrifices/&quot;&gt;ritual murder&lt;/a&gt; from them). On the other hand, the environmental experience of Christian sites, beyond the looting, was one ruined church in which a woman in religious garb told me that God had commanded her to knife a bunch of people, including me, which then turned into a combat encounter.&lt;/p&gt;
&lt;p&gt;And then there is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Anchorite&quot;&gt;Anchoress&lt;/a&gt;. In the basement of a small chapel (it’s a puzzle to get down there) you encounter an anchoress (called this, explicitly) who is praying in isolation. To be clear, anchorites (anchoress being the female) were Christian religious practitioners who take a &lt;em&gt;holy vow&lt;/em&gt; to remain in isolation &lt;em&gt;in a single place&lt;/em&gt; (part of the vow!) and venerate God, serving as a kind of living saint for the community. To ‘complete’ the world event (which rewards XP) you have to convince her to step outside and end her isolation. She worries she will have to do penance (you have talked her into violating her vows), but on getting outside and seeing the beauty of the world, she is enraptured and thanks you.&lt;/p&gt;
&lt;p&gt;Let’s consider this through our heuristic of “what would we think about this if it were a religion other than Christianity?” Imagine a game where your character comes upon a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bhikkhu&quot;&gt;Buddhist mon&lt;/a&gt;k in a small shrine and easily talks them into violating their vows &lt;a href=&quot;https://en.wikipedia.org/wiki/P%C4%81%E1%B9%ADimokkha&quot;&gt;by acquiring some property or engaging in sexual intercourse&lt;/a&gt; (using reasoning from &lt;em&gt;your&lt;/em&gt; religious tradition, no less), after which they thank you and then the game rewards you experience for having desecrated their sacred vows. This is roughly what you do with the anchoress (whose vow is to stay isolated and &lt;em&gt;in place&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;So far at least, this depiction is frustratingly unvaried. Christians are uniformly either religiously intolerant bad-guy jerks or else tolerant but weak and decadent ‘good guy’ damsels that need saving. Frustratingly, while there is quite a lot of time spent (understandably) building up the Norse religion, at no point so far do we have, say, a kindly Christian priest explaining their religion, or characters &lt;em&gt;actually quoting the Christian scriptures&lt;/em&gt; (something anyone even vaguely aware with the Middle Ages would know they did pretty frequently) to support some idea. What we &lt;em&gt;do&lt;/em&gt; get is that Christian Saxon ‘mooks’ shout religious slogans (including how they are bringing God’s mercy) while trying to kill you. That and seemingly &lt;em&gt;lots&lt;/em&gt; of quests and world events that involve Eivor solving some poor Saxon’s problems with a bit of unvarnished Norse wisdom. Christianity in this setting exists in only two modes: violently religiously intolerant, or tolerant only out of decadent weakness. This is not a great dichotomy.&lt;/p&gt;
&lt;p&gt;Now look, I get it, Christianity in 9th century England was an intolerant, hegemonic religion. But you are a foreign colonizing invader rolling in wrecking their holy sites, (not) killing their religious practitioners and toppling their governments: &lt;strong&gt;you are intolerant and hegemonic too!&lt;/strong&gt; but while the game is happy to present framing calling out Christianity for its short-comings, the player is (as noted above) repeatedly and &lt;em&gt;absurdly&lt;/em&gt; spared this. Unlike in the actual historical event, there is no sign that your warriors are rapidly becoming Christianity-curious (the actual &lt;a href=&quot;https://en.wikipedia.org/wiki/Great_Heathen_Army&quot;&gt;Great Heathen Army&lt;/a&gt; was converting &lt;em&gt;en masse&lt;/em&gt; within a generation; arriving in 865, Guthram converts to Christianity in 878, a little over a decade later. You are arriving in England around 874, just four years from this event – there should &lt;em&gt;already&lt;/em&gt; be a fair number of Christian Danes).&lt;/p&gt;
&lt;p&gt;If this were just an issue of the presentation of religious, I wouldn’t be so bothered – this is fairly mild stuff (except for the Anchoress bit) – obnoxious and offensive, but only mildly so. But the problem is intensified by how this fuses together with the previous point: just as the Danes and Norse seem to arrive and &lt;strong&gt;immediately show their superiority by &lt;em&gt;improving&lt;/em&gt; the place &lt;em&gt;through colonialism&lt;/em&gt;&lt;/strong&gt; (oof), &lt;strong&gt;they are also presented as being in possession of a &lt;em&gt;superior culture&lt;/em&gt;, particularly in the form of what is presented as a &lt;em&gt;superior religion&lt;/em&gt;&lt;/strong&gt; (which unlike the game’s Christianity is, as noted, sanitized of its distasteful elements – Christianity is still hegemonic, but no Norse blood sacrifices) as your Norse faith repeatedly solves problems and presents unique wisdom, whereas the local Christians &lt;em&gt;never&lt;/em&gt; do this.&lt;/p&gt;
&lt;p&gt;And of course that plays straight back into the problem with sanitizing Scandinavian raiding, slavery, and gender roles: the Christian Saxons do not get the same treatment, setting up this stark contrast between an a-historically pure and moral set of Norse characters and a more historically grounded, flawed Christian Saxon society (all the more awkward because one of the things the Christian church militated against in Scandinavian society &lt;em&gt;was slavery&lt;/em&gt;, since many of the enslaved people there were Christian).&lt;/p&gt;
&lt;img data-attachment-id=&quot;5175&quot; data-permalink=&quot;https://acoup.blog/20201117213623/&quot; data-orig-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg&quot; data-orig-size=&quot;1920,1080&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;20201117213623&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=300&quot; data-large-file=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=1024&quot; src=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=1024&quot; alt=&quot;&quot; class=&quot;wp-image-5175&quot; srcset=&quot;https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=1024 1024w, https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=150 150w, https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=300 300w, https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=768 768w, https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg 1920w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;And this is my Eivor’s boat-cat. He is adorable and fortunately, unlike the rest of this game, not a white-wash of colonialism.
&lt;p&gt;But that fact – &lt;strong&gt;that the game baldly presents the Saxons as being in possession of an inferior culture&lt;/strong&gt; – leads us to:&lt;/p&gt;
&lt;h2&gt;Fremen Vikings&lt;/h2&gt;
&lt;p&gt;For readers of my &lt;a href=&quot;https://acoup.blog/2020/01/17/collections-the-fremen-mirage-part-i-war-at-the-dawn-of-civilization/&quot;&gt;Fremen Mirage&lt;/a&gt; series, you will recognize what is going on here almost instantly.&lt;/p&gt;
&lt;p&gt;This game indulges &lt;strong&gt;deeply&lt;/strong&gt; in the Fremen Mirage. The Norse and Danes are consistently presented as harder, tougher and more manly than the puny, whimpy Saxons (at least, again, in the early areas. If Alfred the Great is an absolute badass but is also buried 40+ hours into the game, I am not giving credit for things most players will not see; I haven’t gotten down to Wessex yet).&lt;/p&gt;
&lt;p&gt;Just to run down the list: the Norse and Danes are &lt;em&gt;hard men&lt;/em&gt; from a &lt;em&gt;tough land&lt;/em&gt; who consequently are better fighters and just generally more morally virtuous (see below), straight-forward and honest (while also being capable of ruthlessly battle-tactics), whose society has strong masculine coding (in traditional western terms) which is (see above) extended to women. Naturally they are matched by the Saxons who are everything they are not: soft men from a rich land who are poor fighters and often deceptive and lacking virtue but who also lack ruthlessness in war and whose society is excessively ‘feminine’ (by traditional western standards). &lt;a href=&quot;https://acoup.blog/2020/02/21/collections-the-fremen-mirage-interlude-ways-of-the-fremen/&quot;&gt;All of the Fremen Mirage boxes are checked here&lt;/a&gt;. All of them.&lt;/p&gt;
&lt;p&gt;The Norse and Danes are represented as consistently better fighters than the Saxons, to the point that basically all of the Saxon NPCs in the first several areas are hapless weaklings who are absolutely incapable of winning fights on their own (special notes for Ceobert and Oswald, both of whom stupidly get in over their heads repeatedly, are effectively ‘damseled’ and need to be saved. And sure, damseling a male character is a neat inversion…or it would be, if it wasn’t that this is just the gendered component of the Fremen mirage treating ‘decadent’ men like women with the deep-set misogyny that implies!) and the character models are often even physically smaller (Oswald’s Danish wife, for instance, has notably taller than him, but the Norse and Danish NPCs just generally tower over their Saxon counterparts). Oswald, mentioned above, even straight up &lt;em&gt;says the trope&lt;/em&gt;, complaining that East Anglia is a kingdom of farmers and merchants, not warriors. &lt;a href=&quot;https://acoup.blog/2020/05/22/collections-the-battle-of-helms-deep-part-iv-men-of-rohan/&quot;&gt;Which to be clear is an extraordinarily stupid way to characterize an early English kingdom where all free men are liable for military service&lt;/a&gt;. But it is also the Fremen Mirage elevated from subtext to just plain &lt;em&gt;text&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The gender issues now come back because one of the key components of the Fremen Mirage, you will recall from the series, is that not only do Fremen societies produce manly &lt;em&gt;men&lt;/em&gt;, but they also often produce manly &lt;em&gt;women&lt;/em&gt; (while decadent societies produce womanly men and women). That’s a part of the Mirage back to at least Tacitus. And to be clear, that is not empowering feminism so much as virtue viewed from a society (like the Romans) which blithely assumed that men were better; it is misogyny masquerading as empowerment. And of course the game indulges in this too, as noted above.&lt;/p&gt;
&lt;p&gt;All of which is then made &lt;strong&gt;deeply&lt;/strong&gt; uncomfortable by the fact that these Fremen &lt;em&gt;Übermenschen&lt;/em&gt; are also &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Nordicism&quot;&gt;literal ‘Aryan’ invaders&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; colonizing a foreign land and displacing the local (‘effete,’ ‘decadent’) population (and yes, technically the Saxons are also a ‘Germanic’ people but the game never presents them as such – note the point on religion above) for literal &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Lebensraum&quot;&gt;Lebensraum&lt;/a&gt;&lt;/em&gt;, getting away from the endless squabbles (and overbearing kings) of your homeland.&lt;/p&gt;
&lt;h2&gt;Conclusion: A Love Letter to Colonialism&lt;/h2&gt;
&lt;p&gt;Which brings us at last to the conclusion: &lt;em&gt;Assassin’s Creed: Valhalla&lt;/em&gt; is a well-designed game; &lt;strong&gt;it is also a &lt;em&gt;deeply&lt;/em&gt; irresponsible game&lt;/strong&gt;. Let’s recap here: this is a game where the Norse and Danish, in possession of a superior culture and unencumbered by effete Christian morality take root in a new, populated land &lt;em&gt;by force&lt;/em&gt; and immediately proceed, by virtue of their superiority, to begin ‘improving’ the locals. &lt;strong&gt;This is, without exaggeration, exactly the vision that historical colonialists presented of their brutal imperial regimes&lt;/strong&gt; and it differs from the actual, historically traumatic experience of the 9th century invasions in &lt;em&gt;exactly the&lt;/em&gt; &lt;em&gt;same ways&lt;/em&gt; as more modern experiences of colonialism (that is to say, it is just as sanitized and exactly as sanitized as what you would have gotten if you asked the British Home Office how things were going in, say, Jamaica, in 1750 or India in 1900).&lt;/p&gt;
&lt;p&gt;This would be, by all accounts, bad enough. &lt;strong&gt;Constructing sanitized, a-historical defenses for colonialism is – and I hope everyone is here with me – quite bad&lt;/strong&gt;. And to be clear, this isn’t an issue of ‘acknowledging the complexities’ of colonial interactions (the ‘Romans were nasty, but they did bring aqueducts’ school of thought), because the game has systematically cleansed the setting of the &lt;em&gt;actual&lt;/em&gt; facts of Norse and Danish colonization in this period: much of the violence, the slavery, the destruction of infrastructure, the slavery, the theft of land and resources, and the slavery (to name just a few). The game never presents the situation Eivor is in as ‘salvaging the best of a bad situation’ – rather the arrival of the Danes and Norse is repeatedly presented as an unmitigated good &lt;em&gt;to the Saxons&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But, as I just implied two paragraphs ago, I think there is an extra layer of irresponsibility here. &lt;strong&gt;&lt;em&gt;Any&lt;/em&gt; historian who works on this period will tell you – and I know mostly because &lt;em&gt;they keep telling me&lt;/em&gt; – that pre-Christian ‘viking’ (read: Scandinavian) imagery and history is routinely mobilized by the modern incarnations of white supremacist and frankly Nazi ideologies&lt;/strong&gt;. &lt;a href=&quot;https://www.adl.org/education/references/hate-symbols/runic-writing-racist&quot;&gt;Scandinavian runic writing&lt;/a&gt;, &lt;a href=&quot;https://www.adl.org/education/references/hate-symbols/celtic-cross&quot;&gt;the Scandinavian ‘cross of Odin,’&lt;/a&gt; and e&lt;a href=&quot;https://en.wikipedia.org/wiki/Undercut_(hairstyle)#Controversies&quot;&gt;ven the under-cut hairstyle often associated&lt;/a&gt; (&lt;a href=&quot;https://www.vikingrune.com/2014/03/viking-hairstyles-is-ragnars-haircut-historical/&quot;&gt;falsely, by the by, even though TV shows keep using it&lt;/a&gt;) with ‘vikings’ have all been appropriated by racist extremists as symbols of their movement.&lt;/p&gt;
&lt;p&gt;Now, am I saying that this means we all need to abandon these symbols to the Neo-Nazis? No. &lt;strong&gt;But clearly any game set in this historical period ought to tread &lt;em&gt;very&lt;/em&gt; carefully&lt;/strong&gt;, because this is difficult ground. And certainly, a game that openly brags at the outset that it has, “a multicultural team of various beliefs, sexual orientations and gender identities” ought to be on its guard to make sure that the themes and tone of the setting were crafted with care to avoid &lt;em&gt;accidentally&lt;/em&gt; swerving into unfortunate implications.&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;Valhalla&lt;/em&gt; does more than just swerve a little. In its effort to avoid troubling the player with any of the ugliness of – and I must stress this again – &lt;em&gt;&lt;strong&gt;the viking invasion of England&lt;/strong&gt;&lt;/em&gt; – the game’s first 30-40 hours, as they stand, are essentially Nazi race-ideology &lt;em&gt;apologia&lt;/em&gt;, even down to &lt;a href=&quot;https://en.wikipedia.org/wiki/Nordicism&quot;&gt;replicating the hierarchies of Aryan race theory&lt;/a&gt; (with the Germans and ‘Nordics’ on top but the Anglo-Saxons &lt;em&gt;lower&lt;/em&gt; but by no means near the bottom), complete with its views on religion (&lt;a href=&quot;https://en.wikipedia.org/wiki/Occultism_in_Nazism&quot;&gt;Norse mysticism ‘good,’ Christianity ‘bad’&lt;/a&gt;) and – by virtue of the period and setting – much of its iconography.&lt;/p&gt;
&lt;p&gt;Now, do I think that the developers &lt;em&gt;set out&lt;/em&gt; to create a sanitized defense of colonialism (much less an &lt;em&gt;apologia&lt;/em&gt; for Nazi race ideology)? &lt;strong&gt;Of course not&lt;/strong&gt;. &lt;em&gt;&lt;strong&gt;But they ended up doing it anyway&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I don’t know if the design and story decisions here were original to the development team or if they came from corporate (what we know about Ubisoft makes me think the latter is much more likely), but it’s not hard to see the decisions that led to this point. Having Eivor or Sigurd engaged in slave raiding would have been too alienating, so it was taken out. Having the main character even &lt;em&gt;potentially&lt;/em&gt; war-crime-ing their way across England might enrage the censors, so that has to go. &lt;strong&gt;But of course each of these changes cuts in the same direction, until the whole project is so slanted that it falls over&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And it is hard not to come away with the feeling that our “multicultural team” simply did not have their &lt;a href=&quot;https://tvtropes.org/pmwiki/pmwiki.php/Main/UnfortunateImplications&quot;&gt;Unfortunate Implications&lt;/a&gt; Radar up when it came to colonialism perpetrated against white people (even though white people can &lt;em&gt;absolutely&lt;/em&gt; be victims of imperialism or colonialism – ask the &lt;a href=&quot;https://en.wikipedia.org/wiki/British_rule_in_Ireland&quot;&gt;Irish&lt;/a&gt;, or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Expulsion_of_Poles_by_Nazi_Germany&quot;&gt;Poles&lt;/a&gt;, or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Holodomor&quot;&gt;Ukrainians&lt;/a&gt;) or with the sharply negative depiction of a world religion when it was Christianity (even though Christians can &lt;em&gt;absolutely&lt;/em&gt; be the victims of religious persecution – ask the &lt;a href=&quot;https://en.wikipedia.org/wiki/Copts#Persecution_and_discrimination_in_Egypt&quot;&gt;Coptic Christians&lt;/a&gt;, or &lt;a href=&quot;https://en.wikipedia.org/wiki/Christianity_in_China#Since_1949:_Communist_government_on_the_mainland&quot;&gt;Chinese Christians&lt;/a&gt;). And even then, I think the fact that this failure causes the game to run the risk of becoming a cultural tool of white supremacists speaks to the degree that, if we are to condemn something anywhere, we must condemn it &lt;em&gt;everywhere&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Does all of that matter? &lt;strong&gt;Yes, I think it does&lt;/strong&gt;. As I have argued here many times&lt;strong&gt;, &lt;a href=&quot;https://acoup.blog/2019/05/28/new-acquisitions-not-how-it-was-game-of-thrones-and-the-middle-ages-part-i/&quot;&gt;fiction is often how the public conceptualizes the past&lt;/a&gt;&lt;/strong&gt; and that concept of the past &lt;strong&gt;shapes the decisions we make in the present&lt;/strong&gt;. Is one video game going to lead to a return to colonialist thinking? Of course not. But a culture in which such sanitized narratives are common is a culture far more willing to make those decisions; these stories matter &lt;em&gt;in the aggregate&lt;/em&gt;. And so it is incumbent on designers and developers to construct their stories and their worlds with care, &lt;strong&gt;especially when they are set in the very real past&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To be clear, my preference here is not for Ubisoft to have not made this game, &lt;strong&gt;my preference here would be for Scandinavian settlement in England to have been presented, &lt;em&gt;warts and all&lt;/em&gt;&lt;/strong&gt;. Especially in these depictions, I would contend that &lt;strong&gt;historical accuracy is an absolute defense&lt;/strong&gt; (there are exceptions to that rule, to be sure, but I don’t think this is one of them); I don’t ask for censorship or prudishness here, &lt;em&gt;but for courage&lt;/em&gt;. In this respect, I think the much smaller title, &lt;em&gt;Expeditions: Viking&lt;/em&gt; does this quite a bit better. It still puts you in the place of leading a clan of Norse raiders and even makes those characters (most of them) likeable. But it also doesn’t shy away from the society being built on slavery, or the violence of raiding. It is &lt;em&gt;far&lt;/em&gt; more honest about the kind of society your character lives in. It even presents you with a choice in the end of focusing more on integration with your neighbors in England or taking a more violent path, as opposed to &lt;em&gt;Valhalla&lt;/em&gt;, which pretends that those two routes are effectively the same – that you can improve and integrate with this society &lt;em&gt;by conquering them&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Assassin’s Creed: Valhalla&lt;/em&gt; is willing to show the player nudity and gore. It will show, in intense detail, hands and heads being cut off, people being speared. It is perfectly happy to use profane language. &lt;strong&gt;But it blushes at showing the player anything like the reality of this historical period and in the process constructs a deceptive apology for colonialism.&lt;/strong&gt; &lt;strong&gt;It is a decently fun, but deeply irresponsible game.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ubisoft, please: &lt;strong&gt;&lt;em&gt;do better&lt;/em&gt;&lt;/strong&gt;. Earn that title card about your diverse team.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-161773962-5079-5fb866ebf3391&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20200826#blog_id=161773962&amp;amp;post_id=5079&amp;amp;origin=acoupdotblog.wordpress.com&amp;amp;obj_id=161773962-5079-5fb866ebf3391&amp;amp;domain=acoup.blog&quot; data-name=&quot;like-post-frame-161773962-5079-5fb866ebf3391&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 20 Nov 2020 06:04:41 +0000</pubDate>
<dc:creator>parsecs</dc:creator>
<og:type>article</og:type>
<og:title>Collections: Assassin’s Creed: Valhalla and the Unfortunate Implications</og:title>
<og:url>https://acoup.blog/2020/11/20/miscellanea-my-thoughts-on-assassins-creed-valhalla/</og:url>
<og:description>We’re going to be a bit silly this week (in part because the ending of this compressed semester has left me with little time) and talk about the recently released historical action-RPG comput…</og:description>
<og:image>https://acoupdotblog.files.wordpress.com/2020/11/20201117213623.jpg?w=1200</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://acoup.blog/2020/11/20/miscellanea-my-thoughts-on-assassins-creed-valhalla/</dc:identifier>
</item>
</channel>
</rss>