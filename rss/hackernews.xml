<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Congress Is About to Ban the Government from Offering Free Online Tax Filing</title>
<link>https://www.propublica.org/article/congress-is-about-to-ban-the-government-from-offering-free-online-tax-filing-thank-turbotax</link>
<guid isPermaLink="true" >https://www.propublica.org/article/congress-is-about-to-ban-the-government-from-offering-free-online-tax-filing-thank-turbotax</guid>
<description>&lt;aside class=&quot;promo x-small left&quot;&gt;
&lt;/aside&gt;&lt;div class=&quot;top-notes&quot; readability=&quot;5.7737430167598&quot;&gt;
&lt;div class=&quot;note co-publish&quot; readability=&quot;7.1061452513966&quot;&gt;
&lt;p&gt;ProPublica is a nonprofit newsroom based in New York. Sign up for ProPublica’s &lt;a href=&quot;https://go.propublica.org/20181219-apple&quot;&gt;Big Story newsletter&lt;/a&gt; to receive stories like this one in your inbox as soon as they are published.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;1.0&quot;&gt;Just in time for Tax Day, the for-profit tax preparation industry is about to realize one of its long-sought goals. Congressional Democrats and Republicans are moving to permanently bar the IRS from creating a free electronic tax filing system.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;1.1&quot;&gt;Last week, the House Ways and Means Committee, led by Rep. &lt;a href=&quot;https://projects.propublica.org/represent/members/N000015-richard-e-neal&quot;&gt;Richard Neal, D-Mass.&lt;/a&gt;, &lt;a href=&quot;https://waysandmeans.house.gov/media-center/press-releases/ways-means-committee-passes-historic-legislation-redesign-irs&quot;&gt;passed&lt;/a&gt; the &lt;a href=&quot;https://projects.propublica.org/represent/bills/116/hr1957&quot;&gt;Taxpayer First Act&lt;/a&gt;, a wide-ranging bill making several administrative changes to the IRS that is sponsored by Reps. &lt;a href=&quot;https://projects.propublica.org/represent/members/L000287-john-lewis&quot;&gt;John Lewis, D-Ga.&lt;/a&gt;, and &lt;a href=&quot;https://projects.propublica.org/represent/members/K000376-mike-kelly&quot;&gt;Mike Kelly, R-Pa&lt;/a&gt;.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;1.2&quot;&gt;In one of its provisions, the bill makes it illegal for the IRS to create its own online system of tax filing. Companies like Intuit, the maker of TurboTax, and H&amp;amp;R Block have lobbied for years to block the IRS from creating such a system. If the tax agency created its own program, which would be similar to programs other developed countries have, it would threaten the industry’s profits.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;1.3&quot;&gt;“This could be a disaster. It could be the final nail in the coffin of the idea of the IRS ever being able to create its own program,” said Mandi Matlock, a tax attorney who does work for the National Consumer Law Center.&lt;/p&gt;
&lt;aside class=&quot;newsletter newsletter-daily small left&quot; readability=&quot;2&quot;&gt;&lt;h3&gt;Stay Informed&lt;/h3&gt;
&lt;p&gt;Get ProPublica’s Daily Digest.&lt;/p&gt;

&lt;/aside&gt;&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;3.0&quot;&gt;Experts have long argued that the IRS has failed to make filing taxes as easy and cheap as it could be. In addition to a free system of online tax preparation and filing, the agency could provide people with pre-filled tax forms containing the salary data the agency already has, as ProPublica first &lt;a href=&quot;https://www.propublica.org/article/how-the-maker-of-turbotax-fought-free-simple-tax-filing&quot;&gt;reported&lt;/a&gt; on in 2013.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;3.1&quot;&gt;The Free File Alliance, a private industry group, says &lt;a href=&quot;https://freefilealliance.org/&quot;&gt;70%&lt;/a&gt; of American taxpayers are eligible to file for free. Those taxpayers, who must make less than $66,000, have &lt;a href=&quot;https://apps.irs.gov/app/freeFile/&quot;&gt;access&lt;/a&gt; to free tax software provided by the companies. But &lt;a href=&quot;https://www.marketwatch.com/story/how-to-file-your-taxes-for-free-online-if-you-make-less-than-66000-a-year-2018-03-28&quot;&gt;just 3%&lt;/a&gt; of eligible U.S. taxpayers actually use the free program each year. Critics of the program &lt;a href=&quot;https://thehill.com/opinion/finance/395762-free-file-providers-scam-taxpayers-congress-cant-be-fooled&quot;&gt;say&lt;/a&gt; that companies use it as a cross-marketing tool to upsell paid products, that they have &lt;a href=&quot;https://www.propublica.org/article/free-file-online-tax-preparation-fees-intuit-turbotax-h-r-block&quot;&gt;deliberately underpromoted&lt;/a&gt; the free option and that it leaves consumer data open to privacy breaches.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;3.2&quot;&gt;The congressional move would codify the status quo. Under an existing memorandum of understanding with the industry group, the IRS pledges not to create its own online filing system and, in exchange, the companies offer their free filing services to those below the income threshold.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;3.3&quot;&gt;One member of the Free File Alliance &lt;a href=&quot;https://www.propublica.org/article/free-file-online-tax-preparation-fees-intuit-turbotax-h-r-block&quot;&gt;explicitly told&lt;/a&gt; shareholders that the IRS “developing software or other systems to facilitate tax return preparation … may present a continued competitive threat to our business for the foreseeable future.”&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;3.4&quot;&gt;The IRS’ deal with the Free File Alliance is regularly renegotiated and there have been &lt;a href=&quot;https://www.propublica.org/article/free-file-online-tax-preparation-fees-intuit-turbotax-h-r-block&quot;&gt;repeated&lt;/a&gt;, &lt;a href=&quot;https://www.propublica.org/article/republicans-and-dems-come-together-to-keep-irs-from-competing-turbotax&quot;&gt;bipartisan&lt;/a&gt; efforts in Congress to put the deal into law.&lt;/p&gt;
&lt;aside data-pp-id=&quot;4&quot; data-pp-blocktype=&quot;promo&quot; class=&quot;promo small right&quot;&gt;&lt;h3&gt;Read More&lt;/h3&gt;
&lt;div class=&quot;story-entry&quot;&gt;
&lt;div class=&quot;lead-art&quot;&gt;&lt;a class=&quot;aspect-3-2&quot; href=&quot;https://www.propublica.org/article/ultrawealthy-taxes-irs-internal-revenue-service-global-high-wealth-audits&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://assets.propublica.org/images/articles/_threeTwo400w/20190405-irs-ultrawealthy-lead-illo-3x2.jpg&quot; width=&quot;400&quot; height=&quot;267&quot; srcset=&quot;https://assets.propublica.org/images/articles/_threeTwo400w/20190405-irs-ultrawealthy-lead-illo-3x2.jpg 400w, https://assets.propublica.org/images/articles/_threeTwo800w/20190405-irs-ultrawealthy-lead-illo-3x2.jpg 800w, https://assets.propublica.org/images/articles/_threeTwo1200w/20190405-irs-ultrawealthy-lead-illo-3x2.jpg 1200w&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/aside&gt;&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;5.0&quot;&gt;Those efforts have been fueled by hefty lobbying spending and campaign contributions by the industry. Intuit and H&amp;amp;R Block last year poured a combined $6.6 million into lobbying related to the IRS filing deal and other issues. Neal, who became Ways and Means chair this year after Democrats took control of the House, received $16,000 in contributions from Intuit and H&amp;amp;R Block in the last two election cycles.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;5.1&quot;&gt;Neal, who describes himself as a longtime champion of the existing Free File program, has &lt;a href=&quot;https://neal.house.gov/press-releases/neal-opening-statement-markup-retirement-tax-administration-and-reemployment-services&quot;&gt;argued&lt;/a&gt; that it would “would help low- and moderate-income taxpayers.”&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;5.2&quot;&gt;Free File Alliance Executive Director Tim Hugo called it “a great idea when you can provide a great product — free tax returns — to Americans at no cost to the federal government.” An H&amp;amp;R Block spokesperson said the company believes “Free File should be the subject of ongoing improvement, and we are committed to working with all parties to strengthen and improve Free File on behalf of the American taxpayer.”&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;5.3&quot;&gt;Spokespeople for Neal, Lewis and Kelly did not immediately respond to requests for comment about the provision. A companion Senate bill with the same provision has been introduced by &lt;a href=&quot;https://projects.propublica.org/represent/members/G000386-charles-e-grassley&quot;&gt;Sens. Chuck Grassley, R-Iowa&lt;/a&gt;, and &lt;a href=&quot;https://projects.propublica.org/represent/members/W000779-ron-wyden&quot;&gt;Ron Wyden, D-Ore&lt;/a&gt;.&lt;/p&gt;
&lt;p data-pp-blocktype=&quot;copy&quot; data-pp-id=&quot;5.4&quot;&gt;While efforts to make the IRS’ deal with the tax preparation industry permanent have fizzled in the past, critics are particularly worried this year. The Taxpayer First Act also includes a provision that would restrict the IRS’ use of private debt collectors to those above a certain income. A Wyden spokesperson said the current bill is a “bipartisan, bicameral compromise so it includes priorities of both chairmen and ranking members.” Wyden “supports giving the IRS the resources it needs to offer more services to taxpayers,” the spokesperson added.&lt;/p&gt;
&lt;div class=&quot;bottom-notes&quot; readability=&quot;5.6986301369863&quot;&gt;
&lt;div class=&quot;note contributor-line&quot; readability=&quot;7.013698630137&quot;&gt;
&lt;p&gt;Do you have information about the IRS or the tax preparation industry? Contact Justin Elliott at &lt;a href=&quot;https://www.propublica.org/cdn-cgi/l/email-protection#e18b949295888fa191938e9194838d888280cf8e9386&quot;&gt;&lt;span class=&quot;__cf_email__&quot; data-cfemail=&quot;19736c6a6d707759696b76696c7b75707a7837766b7e&quot;&gt;[email protected]&lt;/span&gt;&lt;/a&gt; or via Signal at 774-826-6240.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>Tue, 09 Apr 2019 12:03:38 +0000</pubDate>
<dc:creator>el_duderino</dc:creator>
<og:type>article</og:type>
<og:url>https://www.propublica.org/article/congress-is-about-to-ban-the-government-from-offering-free-online-tax-filing-thank-turbotax</og:url>
<og:title>Congress Is About to Ban the Government From Offering Free Online Tax Filing. Thank TurboTax. — ProPublica</og:title>
<og:description>A bill supported by Democrats and Republicans would make permanent a program that bars the IRS from ever developing its own online tax filing service.</og:description>
<og:image>https://assets.propublica.org/images/articles/20190409-turbotax-free-file-1200x630.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.propublica.org/article/congress-is-about-to-ban-the-government-from-offering-free-online-tax-filing-thank-turbotax</dc:identifier>
</item>
<item>
<title>Show HN: Ethical Resources – 300 ethical alternatives to mainstream stuff</title>
<link>https://ethical.net/resources/</link>
<guid isPermaLink="true" >https://ethical.net/resources/</guid>
<description>The browser from Mozilla - the not-for-profit &quot;working to give everyone more power online&quot;</description>
<pubDate>Tue, 09 Apr 2019 11:17:43 +0000</pubDate>
<dc:creator>mancuso5</dc:creator>
<og:type>article</og:type>
<og:title>Ethical Alternatives &amp; Resources - ethical.net</og:title>
<og:description>We’ve compiled an open list of resources for ethical living — from browsers to books, TED talks to apps. Click to check it out — or make a contribution!</og:description>
<og:url>https://ethical.net/resources</og:url>
<og:image>https://dyrn4ilzfl9fd.cloudfront.net/wp-content/uploads/2019/03/e.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ethical.net/resources/</dc:identifier>
</item>
<item>
<title>China says it wants to eliminate Bitcoin mining</title>
<link>https://www.reuters.com/article/us-china-cryptocurrency/china-says-it-wants-to-eliminate-bitcoin-mining-idUSKCN1RL0C4</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-china-cryptocurrency/china-says-it-wants-to-eliminate-bitcoin-mining-idUSKCN1RL0C4</guid>
<description>&lt;p&gt;SHANGHAI/HONG KONG (Reuters) - China’s state planner wants to eliminate bitcoin mining in the country, according to a draft list of industrial activities the agency is seeking to stop in a sign of growing government pressure on the cryptocurrency sector.&lt;/p&gt;
&lt;p&gt;China is the world’s largest market for computer hardware designed to mine bitcoin and other cryptocurrencies, even though such activities previously fell under a regulatory grey area.&lt;/p&gt;
&lt;p&gt;The National Development and Reform Commission (NDRC) said on Monday it was seeking public opinions on a revised list of industries it wants to encourage, restrict or eliminate. The list was first published in 2011.&lt;/p&gt;
&lt;p&gt;The draft for a revised list added cryptocurrency mining, including that of bitcoin, to more than 450 activities the NDRC said should be phased out as they did not adhere to relevant laws and regulations, were unsafe, wasted resources or polluted the environment.&lt;/p&gt;
&lt;p&gt;It did not stipulate a target date or plan for how to eliminate bitcoin mining, meaning that such activities should be phased out immediately, the document said. The public has until May 7 to comment on the draft.&lt;/p&gt;
&lt;p&gt;State-owned newspaper Securities Times said on Tuesday the draft list “distinctly reflects the attitude of the country’s industrial policy” toward the cryptocurrency industry.&lt;/p&gt;
&lt;p&gt;“The NDRC’s move is in line overall with China’s desire to control different layers of the rapidly growing crypto industry, and does not yet signal a major shift in policy,” said Jehan Chu, managing partner at blockchain investment firm Kenetic.&lt;/p&gt;
&lt;p&gt;“I believe China simply wants to ‘reboot’ the crypto industry into one that they have oversight on, the same approach they took with the Internet.”&lt;/p&gt;
&lt;p&gt;Other bitcoin traders said they were not surprised by the government’s move.&lt;/p&gt;
&lt;p&gt;“Bitcoin mining wastes a lot of electricity,” said one Chinese bitcoin trader who declined to be named due to the sensitivity of the situation.&lt;/p&gt;
&lt;h3&gt;CRACKDOWN CONTINUES&lt;/h3&gt;
&lt;p&gt;Last week, the price of bitcoin soared nearly 20 percent in its best day since the height of the 2017 bubble, and breaking $5,000 for the first time since mid-November, though analysts and traders admitted they were puzzled by the surge.&lt;/p&gt;
&lt;p&gt;Bitcoin, which accounts for around half of the cryptocurrency market, was down by around 1.4 percent on Tuesday, while other major coins such as Ethereum and Ripple’s XRP also fell by similar amounts. Traders in London said it was unclear how much the Chinese move was weighing on the market.&lt;/p&gt;
&lt;p&gt;The cryptocurrency sector has been under heavy scrutiny in China since 2017, when regulators started to ban initial coin offerings and shut local cryptocurrency trading exchanges.&lt;/p&gt;
&lt;p&gt;China also began to limit cryptocurrency mining, forcing many firms - among them some of the world’s largest - to find bases elsewhere.&lt;/p&gt;
&lt;p&gt;Nearly half of bitcoin mining pools – groups of miners that team up for economies of scale - are located in the Asia-Pacific, a Cambridge University study said in December.&lt;/p&gt;
&lt;p&gt;“Half of the network is probably located in China,” said Alex de Vries, a consultant with PwC in Amsterdam who specializes on blockchain and researches cryptocurrency mining. He added that the number of mining facilities in the world is still limited to several hundred.&lt;/p&gt;
&lt;p&gt;Countries with relatively cheap electricity have emerged as major hosts of cryptocurrency mining. Mati Greenspan, an analyst with eToro in Israel, said any ban by China would cut a key supply of cheap electricity for the industry and raise the average cost to mine bitcoin.&lt;/p&gt;
&lt;p&gt;Chinese companies are also among the biggest manufacturers of bitcoin mining gear, and last year three filed for initial public offerings in Hong Kong, looking to raise billions of dollars.&lt;/p&gt;
&lt;p&gt;However, the two largest, Bitmain Technologies, the world’s largest manufacturer of bitcoin mining gear, and Canaan Inc, have since let their applications lapse.&lt;/p&gt;
&lt;p&gt;People familiar with the deals said that Hong Kong regulators had many questions about the companies’ business models and prospects.&lt;/p&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s2.reutersmedia.net/resources/r/?m=02&amp;amp;d=20190409&amp;amp;t=2&amp;amp;i=1375019342&amp;amp;r=LYNXNPEF3807H&amp;amp;w=20&quot; aria-label=&quot;A small toy figure is seen on representations of the Bitcoin virtual currency in this illustration picture, December 26, 2017. REUTERS/Dado Ruvic/Illustration&quot;/&gt;
&lt;/div&gt;

&lt;div class=&quot;Image_caption&quot;&gt;

&lt;span&gt;A small toy figure is seen on representations of the Bitcoin virtual currency in this illustration picture, December 26, 2017. REUTERS/Dado Ruvic/Illustration&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Bitmain declined to comment on the NDRC’s proposal to ban bitcoin mining. Canaan did not respond to requests for comment.&lt;/p&gt;
&lt;p&gt;According to Canaan’s IPO prospectus filed last year, sales of blockchain hardware primarily for cryptocurrency mining in China were worth 8.7 billion yuan ($1.30 billion) in 2017, 45 percent of global sales by value.&lt;/p&gt;
&lt;p&gt;The prospectus forecasts that sales in China would rise to 35.6 billion yuan by 2020.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;9&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Additional reporting by Toby Sterling in Amsterdam, Tom Wilson in London and Winni Zhou in Shanghai; Editing by Sam Holmes and Jacqueline Wong&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 09 Apr 2019 04:40:56 +0000</pubDate>
<dc:creator>sjcsjc</dc:creator>
<og:title>China wants to ban bitcoin mining</og:title>
<og:url>https://www.reuters.com/article/us-china-cryptocurrency-idUSKCN1RL0C4</og:url>
<og:type>article</og:type>
<og:description>China's state planner wants to eliminate bitcoin mining in the country, acc...</og:description>
<og:image>https://s2.reutersmedia.net/resources/r/?m=02&amp;d=20190409&amp;t=2&amp;i=1375019342&amp;w=1200&amp;r=LYNXNPEF3807H</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-china-cryptocurrency/china-says-it-wants-to-eliminate-bitcoin-mining-idUSKCN1RL0C4</dc:identifier>
</item>
<item>
<title>Cloud Run beta pricing</title>
<link>https://cloud.google.com/run/pricing</link>
<guid isPermaLink="true" >https://cloud.google.com/run/pricing</guid>
<description>&lt;aside class=&quot;special&quot;&gt;&lt;strong&gt;Beta&lt;/strong&gt;
&lt;p&gt;This is a beta release of Cloud Run. This feature might be changed in backward-incompatible ways and is not subject to any SLA or deprecation policy.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This page provides pricing information for Cloud Run and Cloud Run on GKE.&lt;/p&gt;
&lt;h2 id=&quot;cloudrun-pricing&quot;&gt;Cloud Run pricing&lt;/h2&gt;
&lt;p&gt;Cloud Run charges you only for the resources you use, rounded up to the nearest 100 millisecond. Note that each of these resources have free quota. Your total Cloud Run bill will be the sum of the resources in the pricing table. Note that when setting &lt;a href=&quot;https://cloud.google.com/run/docs/about-concurrency&quot;&gt;concurrency&lt;/a&gt; higher than one request at a time, multiple requests can share the allocated CPU and memory.&lt;/p&gt;
&lt;h3 id=&quot;pricing_table_us-central1&quot;&gt;Pricing table (us-central1)&lt;/h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;CPU&lt;/th&gt;
&lt;th&gt;Memory&lt;/th&gt;
&lt;th&gt;Requests&lt;/th&gt;
&lt;th&gt;Networking&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;First 180,000 vCPU-seconds free&lt;/td&gt;
&lt;td&gt;First 360,000 GB-seconds free&lt;/td&gt;
&lt;td&gt;2 million requests free&lt;/td&gt;
&lt;td&gt;First 1 GB egress traffic free platform-wide&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;$0.00002400 / vCPU-seconds beyond free quota&lt;/td&gt;
&lt;td&gt;$0.00000250 / GB-second beyond free quota&lt;/td&gt;
&lt;td&gt;$0.40 / million requests beyond free quota&lt;/td&gt;
&lt;td&gt;Free during beta. At beta exit, &lt;a href=&quot;https://cloud.google.com/compute/pricing&quot;&gt;Compute Engine networking prices&lt;/a&gt; apply to egress beyond free tier.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;&lt;small&gt;If you pay in a currency other than USD, the prices listed in your currency on &lt;a href=&quot;https://cloud.google.com/skus/&quot;&gt;Cloud Platform SKUs&lt;/a&gt; apply.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;The free quota resets every month; you are billed only for usage past the free quota.&lt;/p&gt;
&lt;h3 id=&quot;billable_time&quot;&gt;Billable Time&lt;/h3&gt;
&lt;p&gt;For a given container instance, billable time occurs when&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The container instance is starting&lt;/li&gt;
&lt;li&gt;At least one request is being processed by the container instance&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You are billed only for the CPU and memory allocated while a request is active on a container instance, rounded up to the nearest 100 milliseconds.&lt;/p&gt;
&lt;p&gt;If a container instance receives many requests at the same time, billable time begins with the start of the first request and ends at the end of the last request, as shown in the following diagram:&lt;/p&gt;
&lt;h2 id=&quot;cloudrun-gke-pricing&quot;&gt;Cloud Run on GKE pricing&lt;/h2&gt;
&lt;p&gt;Cloud Run on GKE is an add-on for Google Kubernetes Engine. Workloads running in a cluster are included in &lt;a href=&quot;https://cloud.google.com/kubernetes-engine/pricing&quot;&gt;Google Kubernetes Engine pricing&lt;/a&gt;. Final pricing for Cloud Run on GKE will be determined before GA.&lt;/p&gt;
</description>
<pubDate>Tue, 09 Apr 2019 01:26:30 +0000</pubDate>
<dc:creator>rahimnathwani</dc:creator>
<og:type>website</og:type>
<og:url>https://cloud.google.com/run/pricing</og:url>
<og:title>Pricing  |  Cloud Run  |  Google Cloud</og:title>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://cloud.google.com/run/pricing</dc:identifier>
</item>
<item>
<title>Microsoft says its data shows FCC reports overstate broadband adoption</title>
<link>https://techcrunch.com/2019/04/08/microsoft-says-its-data-shows-fcc-reports-massively-overstate-broadband-adoption/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/04/08/microsoft-says-its-data-shows-fcc-reports-massively-overstate-broadband-adoption/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;The broadband divide in the U.S. is real, but if you want to know &lt;em&gt;how&lt;/em&gt; real, don’t ask the FCC. Its yearly broadband deployment report, already under fire for &lt;a href=&quot;https://techcrunch.com/2019/03/07/fcc-looking-into-reported-error-throwing-broadband-deployment-numbers-off-by-millions/&quot;&gt;serious data problems&lt;/a&gt;, has now been &lt;a href=&quot;https://blogs.microsoft.com/on-the-issues/2019/04/08/its-time-for-a-new-approach-for-mapping-broadband-data-to-better-serve-americans/&quot;&gt;further questioned by Microsoft&lt;/a&gt;, which says its own data contradicts coverage data provided by internet providers. Despite $22 billion in government &lt;a href=&quot;https://techcrunch.com/2018/02/02/fcc-gets-ready-to-kick-off-2-billion-rural-broadband-fund/&quot;&gt;spending&lt;/a&gt;, the company says, “adoption has barely budged.”&lt;/p&gt;
&lt;p&gt;In a blog post, &lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/microsoft&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;microsoft&quot;&gt;Microsoft&lt;/a&gt; explained that it was concerned with apparent inaccuracies in reports purporting to document broadband availability throughout the country. Leveraging data sourced from its various online services, it came to vastly different conclusions than the FCC.&lt;/p&gt;
&lt;p&gt;“We have 200 services that we operate as a company,” said Microsoft President Brad Smith &lt;a href=&quot;https://news.microsoft.com/rural-broadband/&quot;&gt;in a recent talk&lt;/a&gt;. “We can see download speeds across the country, and in every county, and we’ve assembled our own map with our own estimates.”&lt;/p&gt;
&lt;p&gt;For instance, the FCC report suggests that broadband, as it is currently defined, is not currently available to around 25 million people. Sounds reasonable. But Microsoft’s data says that some 163 million people “do not use the internet at broadband speeds.”&lt;/p&gt;
&lt;p&gt;Those aren’t the same thing, obviously, but you’d think if a person had broadband available they would use it at least now and then, right?&lt;/p&gt;
&lt;p&gt;To look further into the problem, Microsoft checked out a few locales:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;In our home state of Washington, the FCC data indicates that 100 percent of Ferry County residents have access to broadband. When we spoke to local officials, they indicated that very few residents in this rural county had access and those that did were using broadband in business. Our data bears this out, showing that only 2 percent of Ferry County is using broadband.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the entire county has broadband, but next to no one uses it? Seems odd. The pattern repeats elsewhere as well, rural and urban, with similar deltas between &lt;em&gt;reported&lt;/em&gt; broadband availability and &lt;em&gt;observed&lt;/em&gt; broadband activity.&lt;/p&gt;
&lt;p&gt;“These significant discrepancies across nearly all counties in all 50 states indicates there is a problem with the accuracy of the access data reported by the FCC,” concludes Microsoft’s chief data analytics officer, John Kahan.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png&quot;&gt;&lt;img class=&quot;breakout aligncenter size-full wp-image-1809486&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;544&quot; srcset=&quot;https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png 1318w, https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png?resize=150,80 150w, https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png?resize=300,159 300w, https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png?resize=768,408 768w, https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png?resize=680,361 680w, https://techcrunch.com/wp-content/uploads/2019/04/2-US-maps.png?resize=50,27 50w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot;/&gt;&lt;/a&gt;Part of the issue is that internet providers essentially just report their own coverage via a form, and the FCC reports it more or less as fact. That’s a problem not just when a mistake on a form adds tens of millions of subscribers that don’t actually exist, but when large ISPs overstate their coverage so they don’t have to pay to fill in the gaps.&lt;/p&gt;
&lt;p&gt;Microsoft’s suggestions, which it has made to Members of Congress and the FCC (though it won’t, as I originally wrote here, testify in the Senate on Wednesday) would make it far more difficult to fib on the Form 477, which as written seems to provide enormous leeway for a company to imply coverage that isn’t actually there.&lt;/p&gt;
&lt;p&gt;The problems described here are not new or obscure, and even FCC commissioners have taken issue with the way this data is collected. Hopefully given the continued and growing outcry concerning this misleading report we will soon know better who in our country has, or needs, help getting online. That the FCC wants to help I don’t doubt, but in order to do so they need better data.&lt;/p&gt;

</description>
<pubDate>Tue, 09 Apr 2019 00:31:56 +0000</pubDate>
<dc:creator>sethbannon</dc:creator>
<og:title>Microsoft says its data shows FCC reports massively overstate broadband adoption</og:title>
<og:description>The broadband divide in the U.S. is real, but if you want to know how real, don't ask the FCC. Its yearly broadband deployment report, already under fire for serious data problems, has now been further questioned by Microsoft, which says its own data contradicts coverage data provided by internet p…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2017/09/gettyimages-692023989.jpg?w=533</og:image>
<og:url>http://social.techcrunch.com/2019/04/08/microsoft-says-its-data-shows-fcc-reports-massively-overstate-broadband-adoption/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/04/08/microsoft-says-its-data-shows-fcc-reports-massively-overstate-broadband-adoption/</dc:identifier>
</item>
<item>
<title>Zig 0.4.0 Released</title>
<link>https://ziglang.org/download/0.4.0/release-notes.html</link>
<guid isPermaLink="true" >https://ziglang.org/download/0.4.0/release-notes.html</guid>
<description>&lt;a href=&quot;https://ziglang.org/&quot;&gt;&lt;img src=&quot;https://ziglang.org/zig-logo.svg&quot;/&gt;&lt;/a&gt;&lt;p&gt;&lt;a href=&quot;https://ziglang.org/download&quot;&gt;Download &amp;amp; Documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Zig is a general-purpose programming language designed for &lt;strong&gt;robustness&lt;/strong&gt;, &lt;strong&gt;optimality&lt;/strong&gt;, and &lt;strong&gt;maintainability&lt;/strong&gt;. Zig is aggressively pursuing its goal of overthrowing C as the de facto language for system programming. Zig intends to be so practical that people find themselves using it even if they dislike it.&lt;/p&gt;
&lt;p&gt;This release features &lt;strong&gt;6 months of work&lt;/strong&gt; and changes from &lt;strong&gt;46 different contributors&lt;/strong&gt;, spread among &lt;strong&gt;875 commits&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Special thanks to my &lt;a href=&quot;https://www.patreon.com/andrewrk&quot;&gt;patrons who provide financial support&lt;/a&gt;. You're making Zig sustainable.&lt;/p&gt;


&lt;p&gt;This release of Zig upgrades to &lt;a href=&quot;http://releases.llvm.org/8.0.0/docs/ReleaseNotes.html&quot;&gt;LLVM 8&lt;/a&gt;. Zig operates in lockstep with LLVM; Zig 0.4.0 is not compatible with LLVM 7.&lt;/p&gt;
&lt;p&gt;Notably this means that Zig now has &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#WebAssembly-Support&quot;&gt;WebAssembly Support&lt;/a&gt;, as well as recognizing the &lt;a href=&quot;https://hermitcore.org/&quot;&gt;HermitCore&lt;/a&gt; and &lt;a href=&quot;https://www.gnu.org/software/hurd/&quot;&gt;Hurd&lt;/a&gt; operating systems. On the other hand, support for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Nios_II&quot;&gt;Nios II architecture&lt;/a&gt; is dropped, due to it being an &lt;a href=&quot;http://lists.llvm.org/pipermail/llvm-dev/2019-January/129121.html&quot;&gt;experimental target which was largely unmaintained&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Marc Tiehuis started an initial FreeBSD branch. Greg V picked up the figurative baton in &lt;a href=&quot;https://github.com/ziglang/zig/pull/1661&quot;&gt;#1661&lt;/a&gt;, and Marcio Giaxa completed the effort.&lt;/p&gt;
&lt;p&gt;Now, FreeBSD works in the stage1 C++ compiler code, as well as the Zig Standard Library, which means it now has &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-2-Support&quot;&gt;Tier 2 Support&lt;/a&gt;. To achieve &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-1-Support&quot;&gt;Tier 1 Support&lt;/a&gt;, these things are needed:&lt;/p&gt;
&lt;p&gt;Despite these issues, thanks to &lt;a href=&quot;https://sourcehut.org/&quot;&gt;SourceHut&lt;/a&gt;, FreeBSD does have some CI testing support, as well as automated binary builds available for x86_64 on &lt;a href=&quot;https://ziglang.org/download&quot;&gt;the download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/ziglang/zig/issues/1759&quot;&gt;#1759&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Maya Rashish ported the stage1 C compiler as well as the Zig Standard Library to be compatible with NetBSD. Have a look at their writeup: &lt;a href=&quot;http://coypu.sdf.org/porting-zig.html&quot;&gt;Porting Zig to NetBSD - a fun, speedy port&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NetBSD is limited to &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-2-Support&quot;&gt;Tier 2 Support&lt;/a&gt; due to lack of a continuous integration service, as well as a missing implementation of &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-ships-with-libc&quot;&gt;building the system's libc startup files lazily from source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that Zig uses &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#LLVM-8&quot;&gt;LLVM 8&lt;/a&gt;, the &lt;code&gt;wasm32&lt;/code&gt; target architecture is guaranteed to be available in Zig.&lt;/p&gt;
&lt;p&gt;Ben Noordhuis fixed &lt;code&gt;zig build-exe&lt;/code&gt; for the &lt;code&gt;wasm32&lt;/code&gt; target (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1570&quot;&gt;#1570&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Shritesh Bhattarai added &lt;code&gt;--allow-undefined&lt;/code&gt; and &lt;code&gt;--export-all&lt;/code&gt; to the wasm linker line, solving &lt;a href=&quot;https://github.com/ziglang/zig/issues/1622&quot;&gt;#1622&lt;/a&gt;. There may be a better way to catch link errors in the future, but for now, this makes WebAssembly work out-of-the-box in Zig:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt;;

&lt;span class=&quot;tok-kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;add&lt;/span&gt;(a: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, b: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    print(a + b);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;$ zig build-exe math.zig -target wasm32-freestanding&lt;/code&gt;
&lt;/pre&gt;
&lt;p class=&quot;file&quot;&gt;test.js&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;const fs = require('fs');
const source = fs.readFileSync(&quot;./math&quot;);
const typedArray = new Uint8Array(source);

WebAssembly.instantiate(typedArray, {
  env: {
    print: (result) =&amp;gt; { console.log(`The result is ${result}`); }
  }
}).then(result =&amp;gt; {
  const add = result.instance.exports.add;
  add(1, 2);
});&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;$ node test.js
The result is 3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is also the &quot;WebAssembly System Interface&quot; operating system target, &lt;code&gt;wasi&lt;/code&gt;. I haven't really explored this use case yet, but I did make the C integer types work for it. More research and exploration is needed.&lt;/p&gt;

&lt;p&gt;Shawn Landden implemented arm64 Linux support in the Zig Standard Library, as well as the necessary stage1 C++ compiler changes.&lt;/p&gt;
&lt;p&gt;The arm64-linux target has now graduated to &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-2-Support&quot;&gt;Tier 2 Support&lt;/a&gt;. To achieve &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-1-Support&quot;&gt;Tier 1 Support&lt;/a&gt;, we would need some way to run Continuous Integration tests on arm64 linux.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://man.sr.ht/builds.sr.ht/compatibility.md&quot;&gt;SourceHut has experimental arm64 Debian images&lt;/a&gt;, which may be worth looking into.&lt;/p&gt;

&lt;p&gt;GitHub user &lt;a href=&quot;https://github.com/nebulaeonline&quot;&gt;nebulaeonline&lt;/a&gt; approached the Zig project with an interesting use case: creating a UEFI application.&lt;/p&gt;
&lt;p&gt;nebulaeonline &lt;a href=&quot;https://github.com/ziglang/zig/pull/1855&quot;&gt;submitted a pull request&lt;/a&gt; adding UEFI as a new operating system that Zig recognizes. The patch contained the linker configuration and a few updates to the Zig Standard Library.&lt;/p&gt;
&lt;p&gt;With this patch merged, nebulaeonline went on to work on their &lt;a href=&quot;https://github.com/nebulaeonline/nebulae/tree/a5f2bf6f90a3b28af4632cb1f5f54a97320c50d2&quot;&gt;UEFI barebones project&lt;/a&gt;. It looks like they ended up using C rather than Zig in the end, most likely due to Zig's lack of maturity. Here I have linked to the last revision before they removed the Zig code, in case anyone wants to poke around. Since then Zig has gained &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#C-Pointers&quot;&gt;C Pointers&lt;/a&gt; which was a large pain point for nebulaeonline.&lt;/p&gt;

&lt;p&gt;Zig now uses a &quot;support tier&quot; system to communicate the level of support for different targets.&lt;/p&gt;

&lt;h3 id=&quot;Tier-1-Support&quot;&gt;&lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#toc-Tier-1-Support&quot;&gt;Tier 1 Support&lt;/a&gt; &lt;a class=&quot;hdr&quot; href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-1-Support&quot;&gt;§&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Not only can Zig generate machine code for these targets, but the standard library cross-platform abstractions have implementations for these targets. Thus it is practical to write a pure Zig application with no dependency on libc.&lt;/li&gt;
&lt;li&gt;The CI server automatically tests these targets on every commit to master branch, and updates &lt;a href=&quot;https://ziglang.org/download&quot;&gt;ziglang.org/download&lt;/a&gt; with links to pre-built binaries.&lt;/li&gt;
&lt;li&gt;These targets have debug info capabilities and therefore produce stack traces on failed assertions.&lt;/li&gt;
&lt;li&gt;(&lt;a href=&quot;https://github.com/ziglang/zig/issues/514&quot;&gt;coming soon&lt;/a&gt;) &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-ships-with-libc&quot;&gt;libc is available for this target even when cross compiling&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;Tier-2-Support&quot;&gt;&lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#toc-Tier-2-Support&quot;&gt;Tier 2 Support&lt;/a&gt; &lt;a class=&quot;hdr&quot; href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-2-Support&quot;&gt;§&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;There may be some standard library implementations, but many abstractions will give an &quot;Unsupported OS&quot; compile error. One can link with libc or other libraries to fill in the gaps in the standard library.&lt;/li&gt;
&lt;li&gt;These targets are known to work, but are not automatically tested, so there are occasional regressions.&lt;/li&gt;
&lt;li&gt;Some tests may be disabled for these targets as we work toward Tier 1 support.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;Tier-3-Support&quot;&gt;&lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#toc-Tier-3-Support&quot;&gt;Tier 3 Support&lt;/a&gt; &lt;a class=&quot;hdr&quot; href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-3-Support&quot;&gt;§&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;The standard library has little to no knowledge of the existence of this target.&lt;/li&gt;
&lt;li&gt;Because Zig is based on LLVM, it has the capability to build for these targets, and LLVM has the target enabled by default.&lt;/li&gt;
&lt;li&gt;These targets are not frequently tested; one will likely need to contribute to Zig in order to build for these targets.&lt;/li&gt;
&lt;li&gt;The Zig compiler might need to be updated with a few things such as
&lt;ul&gt;&lt;li&gt;what sizes are the C integer types&lt;/li&gt;
&lt;li&gt;C ABI calling convention for this target&lt;/li&gt;
&lt;li&gt;bootstrap code and default panic handler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zig targets&lt;/code&gt; is guaranteed to include this target.&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;Tier-4-Support&quot;&gt;&lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#toc-Tier-4-Support&quot;&gt;Tier 4 Support&lt;/a&gt; &lt;a class=&quot;hdr&quot; href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-4-Support&quot;&gt;§&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Support for these targets is entirely experimental.&lt;/li&gt;
&lt;li&gt;LLVM may have the target as an experimental target, which means that you need to use Zig-provided binaries for the target to be available, or build LLVM from source with special configure flags. &lt;code&gt;zig targets&lt;/code&gt; will display the target if it is available.&lt;/li&gt;
&lt;li&gt;This target may be considered deprecated by an official party, &lt;a href=&quot;https://support.apple.com/en-us/HT208436&quot;&gt;such as macosx/i386&lt;/a&gt; in which case this target will remain forever stuck in Tier 4.&lt;/li&gt;
&lt;li&gt;This target may only support &lt;code&gt;--emit asm&lt;/code&gt; and cannot emit object files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the main features of Zig is &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#cImport&quot;&gt;@cImport&lt;/a&gt; and &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#C-Translation-Status&quot;&gt;C Translation&lt;/a&gt;. This is accomplished by linking against &lt;a href=&quot;https://clang.llvm.org/&quot;&gt;Clang&lt;/a&gt; libraries. Clang is a fully featured C and C++ compiler. Zig has all this functionality - so we may as well expose it!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;zig cc&lt;/code&gt; command exposes clang, which you can see with this amusing output:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ zig cc --version
clang version 8.0.0
...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;zig cc&lt;/code&gt; is a bit of a low level command. The higher level command line interface &lt;code&gt;--c-source&lt;/code&gt; (or the corresponding &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-Build-System&quot;&gt;Zig Build System&lt;/a&gt; API) is recommended instead, for a few reasons:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Compilers are core system components and often have compatibility patches to make them work on a given system. For example, a fresh build of clang from source does not work out-of-the-box on &lt;a href=&quot;https://nixos.org/&quot;&gt;NixOS&lt;/a&gt;, because it is not aware of the location of the system libc. However if you install clang through the system package manager, everything works as expected, due to the patches. &lt;code&gt;zig cc&lt;/code&gt; represents a fresh build of clang, which does not have such patches. This is actually A Good Thing - more on this below.&lt;/li&gt;
&lt;li&gt;The higher level interface has a consistent set of defaults for both C code and Zig code. For example, when using &lt;code&gt;--c-source&lt;/code&gt;:
&lt;ul&gt;&lt;li&gt;Automatic dependency tracking and caching. See &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching&quot;&gt;Build Artifact Caching&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-march=native&lt;/code&gt; is enabled for the native target.&lt;/li&gt;
&lt;li&gt;Parameters such as &lt;code&gt;-target&lt;/code&gt;, &lt;code&gt;--color&lt;/code&gt;, and &lt;code&gt;--strip&lt;/code&gt; will apply to both C and Zig Code.&lt;/li&gt;
&lt;li&gt;Zig has more capabilities as a linker driver than Clang. &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-ships-with-libc&quot;&gt;Zig ships with libc&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Consistent features enabled or disabled such as stack protection, position independent code, and whether the frame pointer is omitted.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Here's an example of Zig building some C code:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;hello.c&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv) {
    printf(&quot;Hello world\n&quot;);
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;$ zig build-exe --c-source hello.c --library c
$ ./hello
Hello world&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can use &lt;code&gt;--verbose-cc&lt;/code&gt; to see what C compiler command this executed:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ zig build-exe --c-source hello.c --library c --verbose-cc
zig cc -MD -MV -MF zig-cache/tmp/42zL6fBH8fSo-hello.o.d -nostdinc -fno-spell-checking -isystem /home/andy/dev/zig/build/lib/zig/include -isystem /home/andy/dev/zig/build/lib/zig/libc/include/x86_64-linux-gnu -isystem /home/andy/dev/zig/build/lib/zig/libc/include/generic-glibc -isystem /home/andy/dev/zig/build/lib/zig/libc/include/x86_64-linux-any -isystem /home/andy/dev/zig/build/lib/zig/libc/include/any-linux-any -march=native -g -fstack-protector-strong --param ssp-buffer-size=4 -fno-omit-frame-pointer -o zig-cache/tmp/42zL6fBH8fSo-hello.o -c hello.c -fPIC&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that if I run the command again, there is no output, and it finishes instantly:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ time zig build-exe --c-source hello.c --library c --verbose-cc

real    0m0.027s
user    0m0.018s
sys     0m0.009s&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is thanks to &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching&quot;&gt;Build Artifact Caching&lt;/a&gt;. Zig automatically parses the .d file that clang produces and uses a robust caching system to avoid duplicating work.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-Build-System&quot;&gt;Zig Build System&lt;/a&gt;, &lt;code class=&quot;zig&quot;&gt;builder.addCExecutable&lt;/code&gt; used to be a system C compiler driver. That functionality is deleted. Instead, build scripts can attach C source files to any executable, library, or object with &lt;code class=&quot;zig&quot;&gt;foo.addCSourceFile&lt;/code&gt;. You can see a nice example of this in &lt;a href=&quot;https://github.com/mikdusan/benchmark.unicode&quot;&gt;Michael Dusan's benchmark.unicode project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Don't forget to use &lt;code class=&quot;zig&quot;&gt;foo.linkSystemLibrary(&lt;span class=&quot;tok-str&quot;&gt;&quot;c&quot;&lt;/span&gt;);&lt;/code&gt; if the C code expects to use libc.&lt;/p&gt;
&lt;p&gt;You may have noticed that the Zig-generated C compilation command included &lt;code&gt;-nostdinc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a crucial step in the direction Zig is headed - providing consistent, reliable builds that are insulated from the system-specific differences in the wild.&lt;/p&gt;
&lt;p&gt;This affects &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#cImport&quot;&gt;@cImport&lt;/a&gt; and &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#C-Translation-Status&quot;&gt;C Translation&lt;/a&gt; as well. By default, Zig no longer looks in system paths for C header files, instead relying only on what Zig ships and what users explicitly request with &lt;code&gt;-isystem&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, when one uses the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-Build-System&quot;&gt;Zig Build System&lt;/a&gt;, and uses &lt;code class=&quot;zig&quot;&gt;linkSystemLibrary&lt;/code&gt; API, Zig takes that as a hint to look in system default search paths. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2041#issuecomment-479335822&quot;&gt;Marc Tiehuis proposed to expose this functionality to the command line interface&lt;/a&gt;, and that is likely to be an accepted proposal.&lt;/p&gt;
&lt;p&gt;Thanks to Akuli for adding &lt;code&gt;/lib/x86_64-linux-gnu&lt;/code&gt; or similar to default system library search paths for zig build scripts.&lt;/p&gt;

&lt;p&gt;One piece to this puzzle is that Zig now ships with libc. You can find the available libc targets with &lt;code&gt;zig targets&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;...
Available libcs:
  aarch64_be-linux-gnu
  aarch64_be-linux-musl
  aarch64-linux-gnu
  aarch64-linux-musleabi
  armeb-linux-gnueabi
  armeb-linux-gnueabihf
  armeb-linux-musleabi
  armeb-linux-musleabihf
  arm-linux-gnueabi
  arm-linux-gnueabihf
  arm-linux-musleabi
  arm-linux-musleabihf
  i386-linux-gnu
  i386-linux-musl
  mips64el-linux-gnuabi64
  mips64el-linux-gnuabin32
  mips64el-linux-musl
  mips64-linux-gnuabi64
  mips64-linux-gnuabin32
  mips64-linux-musl
  mipsel-linux-gnu
  mipsel-linux-musl
  mips-linux-gnu
  mips-linux-musl
  powerpc64le-linux-gnu
  powerpc64le-linux-musl
  powerpc64-linux-gnu
  powerpc64-linux-musl
  powerpc-linux-gnu
  powerpc-linux-musl
  riscv32-linux-musl
  riscv64-linux-gnu
  riscv64-linux-musl
  s390x-linux-gnu
  s390x-linux-musl
  sparc-linux-gnu
  sparcv9-linux-gnu
  x86_64-linux-gnu
  x86_64-linux-gnux32
  x86_64-linux-musl&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What this means is that &lt;code&gt;--library c&lt;/code&gt; for these targets &lt;em&gt;does not depend on any system files&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Let's look at that C hello world example again:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ zig build-exe --c-source hello.c --library c
$ ./hello
Hello world
$ ldd ./hello
        linux-vdso.so.1 (0x00007ffd03dc9000)
        libc.so.6 =&amp;gt; /lib/libc.so.6 (0x00007fc4b62be000)
        libm.so.6 =&amp;gt; /lib/libm.so.6 (0x00007fc4b5f29000)
        libpthread.so.0 =&amp;gt; /lib/libpthread.so.0 (0x00007fc4b5d0a000)
        libdl.so.2 =&amp;gt; /lib/libdl.so.2 (0x00007fc4b5b06000)
        librt.so.1 =&amp;gt; /lib/librt.so.1 (0x00007fc4b58fe000)
        /lib/ld-linux-x86-64.so.2 =&amp;gt; /lib64/ld-linux-x86-64.so.2 (0x00007fc4b6672000)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/libc/&quot;&gt;glibc&lt;/a&gt; does not support building &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Static-by-Default&quot;&gt;statically&lt;/a&gt;, but &lt;a href=&quot;https://www.musl-libc.org/&quot;&gt;musl&lt;/a&gt; does:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ zig build-exe --c-source hello.c --library c -target x86_64-linux-musl
$ ./hello
Hello world
$ ldd hello
  not a dynamic executable&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this example, Zig built musl libc from source and then linked against it. The build of musl libc for x86_64-linux remains available thanks to the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching&quot;&gt;caching system&lt;/a&gt;, so any time this libc is needed again it will be available instantly.&lt;/p&gt;
&lt;p&gt;This means that this functionality is available on any platform. Windows and macOS users can build Zig and C code, and link against libc, for any of the targets listed above. Similarly code can be cross compiled for other architectures:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ zig build-exe --c-source hello.c --library c -target aarch64v8-linux-gnu
$ file hello
hello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 2.0.0, with debug_info, not stripped&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In some ways, Zig is a better C compiler than C compilers!&lt;/p&gt;
&lt;p&gt;This functionality is more than bundling a cross-compilation toolchain along with Zig. For example, the total size of libc headers that Zig ships is 22MiB uncompressed. Meanwhile, the headers for musl libc + linux headers on x86_64 alone are 8MiB, and for glibc are 3.1MiB (glibc is missing the linux headers), yet Zig currently ships with 40 libcs. With a naive bundling that would be 444MiB. However, thanks to this &lt;a href=&quot;https://github.com/ziglang/zig/blob/0.4.0/libc/process_headers.zig&quot;&gt;process_headers tool&lt;/a&gt; that I made, and some &lt;a href=&quot;https://github.com/ziglang/zig/wiki/Updating-libc-Headers&quot;&gt;good old manual labor&lt;/a&gt;, Zig binary tarballs remain roughly 30MiB total, despite supporting libc for all these targets, as well as compiler-rt, libunwind, and libcxx, and despite being a clang-compatible C compiler. For comparison, the Windows binary build of clang 8.0.0 itself from llvm.org is 132MiB.&lt;/p&gt;
&lt;p&gt;Note that only the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-1-Support&quot;&gt;Tier 1 Support&lt;/a&gt; targets have been thoroughly tested. It is planned to &lt;a href=&quot;https://github.com/ziglang/zig/issues/514&quot;&gt;add more libcs&lt;/a&gt; (including for Windows), and to &lt;a href=&quot;https://github.com/ziglang/zig/issues/2058&quot;&gt;add test coverage for building against all the libcs&lt;/a&gt;. Support for building the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#FreeBSD-Support&quot;&gt;FreeBSD&lt;/a&gt; libc startup files is the main feature needed to achieve &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-1-Support&quot;&gt;Tier 1 Support&lt;/a&gt; for the target.&lt;/p&gt;
&lt;p&gt;Thanks to Jay Weisskopf for helping with the glibc targets by removing an obsolete compat shim file.&lt;/p&gt;

&lt;p&gt;Although &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-ships-with-libc&quot;&gt;Zig ships with libc&lt;/a&gt; for some targets, it still supports building against the system-native libc.&lt;/p&gt;
&lt;p&gt;0.4.0 introduces a new command &lt;code&gt;zig libc&lt;/code&gt; which prints the various paths of libc files. It outputs them to stdout in a simple text file format that it is capable of parsing. You can use &lt;code&gt;zig libc libc.txt&lt;/code&gt; to validate a file.&lt;/p&gt;
&lt;p&gt;Here's what it looks like on my NixOS laptop:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ zig libc
# The directory that contains `stdlib.h`.
# On POSIX-like systems, include directories be found with: `cc -E -Wp,-v -xc /dev/null`
include_dir=/nix/store/q2q1sg5sljia8sihhwcpbxir70yw33bw-glibc-2.27-dev/include
# The system-specific include directory. May be the same as `include_dir`.
# On Windows it's the directory that includes `vcruntime.h`.
# On POSIX it's the directory that includes `sys/errno.h`.
sys_include_dir=/nix/store/q2q1sg5sljia8sihhwcpbxir70yw33bw-glibc-2.27-dev/include

# The directory that contains `crt1.o`.
# On POSIX, can be found with `cc -print-file-name=crt1.o`.
# Not needed when targeting MacOS.
crt_dir=/nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib

# The directory that contains `vcruntime.lib`.
# Only needed when targeting MSVC on Windows.
msvc_lib_dir=

# The directory that contains `kernel32.lib`.
# Only needed when targeting MSVC on Windows.
kernel32_lib_dir=&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here's what it looks like on my Windows laptop:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; zig.exe libc
# The directory that contains `stdlib.h`.
# On POSIX-like systems, include directories be found with: `cc -E -Wp,-v -xc /dev/null`
include_dir=C:\Program Files (x86)\Windows Kits\10\\Include\10.0.17134.0\ucrt
# The system-specific include directory. May be the same as `include_dir`.
# On Windows it's the directory that includes `vcruntime.h`.
# On POSIX it's the directory that includes `sys/errno.h`.
sys_include_dir=C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.15.26726\lib\x64\\..\..\include

# The directory that contains `crt1.o`.
# On POSIX, can be found with `cc -print-file-name=crt1.o`.
# Not needed when targeting MacOS.
crt_dir=C:\Program Files (x86)\Windows Kits\10\\Lib\10.0.17134.0\ucrt\x64\

# The directory that contains `vcruntime.lib`.
# Only needed when targeting MSVC on Windows.
msvc_lib_dir=C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.15.26726\lib\x64\

# The directory that contains `kernel32.lib`.
# Only needed when targeting MSVC on Windows.
kernel32_lib_dir=C:\Program Files (x86)\Windows Kits\10\\Lib\10.0.17134.0\um\x64\&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These arguments are gone:&lt;/p&gt;
&lt;pre&gt;
--libc-lib-dir [path]        directory where libc crt1.o resides
--libc-static-lib-dir [path] directory where libc crtbegin.o resides
--msvc-lib-dir [path]        (windows) directory where vcruntime.lib resides
--kernel32-lib-dir [path]    (windows) directory where kernel32.lib resides
&lt;/pre&gt;
&lt;p&gt;Instead we have this argument:&lt;/p&gt;
&lt;pre&gt;
--libc [file]                Provide a file which specifies libc paths
&lt;/pre&gt;
&lt;p&gt;This is used to pass a libc text file (which can be generated with &lt;code&gt;zig libc&lt;/code&gt;). So it is easier to manage multiple cross compilation environments.&lt;/p&gt;
&lt;p&gt;When Zig must depend on the native libc installation, it first looks for &lt;code&gt;zig-cache/native_libc.txt&lt;/code&gt;. If found, this file will be used. If this file does not exist or has a parse error, Zig will perform native libc detection and then overwrite this file. This can save time, because native libc detection can be time consuming. For example it may need to invoke the system C compiler several times to find out paths of things, or it may invoke some Windows COM API which is a bit non-deterministic in terms of performance.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--static&lt;/code&gt; CLI option is removed and the &lt;code&gt;-dynamic&lt;/code&gt; option is added.&lt;/p&gt;
&lt;p&gt;Instead of an explicit &lt;code&gt;--static&lt;/code&gt; flag, Zig makes things as static as possible by default. Even &lt;code&gt;zig build-lib&lt;/code&gt; will now create a static library by default, but &lt;code&gt;-dynamic&lt;/code&gt; can be used to choose a dynamic library.&lt;/p&gt;
&lt;p&gt;When targeting Linux, Zig now automatically links statically when not linking against any shared libraries. It also disables Position Independent Code in this case, which &lt;a href=&quot;http://ewontfix.com/18/&quot;&gt;improves performance&lt;/a&gt;, especially with regards to &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Thread-Local-Variables&quot;&gt;Thread-Local Variables&lt;/a&gt;. &lt;code&gt;--enable-pic&lt;/code&gt; and &lt;code&gt;--disable-pic&lt;/code&gt; can be used to override the default, but this should be a rare use case.&lt;/p&gt;
&lt;p&gt;Position Independent Code is also disabled by default for the freestanding OS target. When targeting Windows, Position Independent Code is always enabled.&lt;/p&gt;
&lt;p&gt;It is &lt;a href=&quot;https://github.com/ziglang/zig/issues/2213&quot;&gt;proposed to rename these options&lt;/a&gt; to &lt;code&gt;-fPIC&lt;/code&gt; and &lt;code&gt;-fno-PIC&lt;/code&gt; to match C compilers.&lt;/p&gt;

&lt;p&gt;For some use cases, it is known at compile-time that a given application or executable will never participate in multi-threading. For these use cases Zig has &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Single-Threaded-Builds&quot;&gt;Single-Threaded Builds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is now a compile option &lt;code&gt;--single-threaded&lt;/code&gt; which has the following effects:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;All &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Thread-Local-Variables&quot;&gt;Thread Local Variables&lt;/a&gt; are treated as &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Global-Variables&quot;&gt;Global Variables&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The overhead of &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Coroutines&quot;&gt;Coroutines&lt;/a&gt; becomes equivalent to function call overhead. Note this will not be implemented until the upcoming &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Coroutine-Status&quot;&gt;Coroutine Rewrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;builtin&quot;&lt;/span&gt;).single_threaded&lt;/code&gt; becomes &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-null&quot;&gt;true&lt;/span&gt;&lt;/code&gt; and therefore various userland APIs which read this variable become more efficient:
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.Mutex&lt;/code&gt; becomes an empty data structure and all of its functions become no-ops.&lt;/li&gt;
&lt;li&gt;John Schmidt made &lt;code class=&quot;zig&quot;&gt;std.heap.ThreadSafeFixedBufferAllocator&lt;/code&gt; alias &lt;code class=&quot;zig&quot;&gt;std.heap.FixedBufferAllocator&lt;/code&gt; when &lt;code&gt;--single-threaded&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1910&quot;&gt;#1910&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai made &lt;code class=&quot;zig&quot;&gt;std.os.exit&lt;/code&gt; use the &lt;code&gt;exit_group&lt;/code&gt; syscall when not single-threaded.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The feature is exposed in the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-Build-System&quot;&gt;Zig Build System&lt;/a&gt; with &lt;code class=&quot;zig&quot;&gt;foo.single_threaded = &lt;span class=&quot;tok-null&quot;&gt;true&lt;/span&gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When one invokes the &lt;code&gt;zig build&lt;/code&gt; command, this executes a user-defined build script. This is called the &lt;strong&gt;zig build system&lt;/strong&gt;. It received a few improvements during this release cycle.&lt;/p&gt;
&lt;p&gt;Notably, &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching&quot;&gt;Build Artifact Caching&lt;/a&gt; is enabled by default. This means that by default build artifacts are now output into the &lt;code&gt;zig-cache&lt;/code&gt; directory. The output path is not predictable and if the build script desires to run an executable, rather than hard coding a path and using &lt;code class=&quot;zig&quot;&gt;builder.addCommand&lt;/code&gt;, build scripts must use &lt;code class=&quot;zig&quot;&gt;executable.run&lt;/code&gt; API, or &lt;code class=&quot;zig&quot;&gt;addArtifactArg&lt;/code&gt;. An example of this can be found in the &lt;a href=&quot;https://github.com/andrewrk/tetris/blob/166246d8f1d889333e74a1a9cee894750f2d4cca/build.zig#L27&quot;&gt;tetris example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;zig&quot;&gt;builder.addSystemCommand&lt;/code&gt; is available to run commands that are not created by the build system itself. An example of this can be found in the &lt;a href=&quot;https://github.com/andrewrk/clashos/blob/91f45cff49128b3322f98cc78ed08df5bcec35cb/build.zig#L32&quot;&gt;Raspberry Pi OS example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another option build scripts have is to specify the output directory of an artifact with &lt;code class=&quot;zig&quot;&gt;artifact.setOutputDir&lt;/code&gt;. This disables caching and makes &lt;code class=&quot;zig&quot;&gt;artifact.getOutputPath&lt;/code&gt;, &lt;code class=&quot;zig&quot;&gt;artifact.getOutputLibPath&lt;/code&gt;, and &lt;code class=&quot;zig&quot;&gt;artifact.getOutputHPath&lt;/code&gt; available.&lt;/p&gt;
&lt;p&gt;Finally, the best way to make the output path of an artifact predictable is to install it with the build system's install step. There are some ergonomics and defaults to improve with this strategy, which will be tackled during the next release cycle.&lt;/p&gt;
&lt;p&gt;Please note that Zig does no cache evicting yet. You may have to manually delete zig-cache directories periodically to keep disk usage down. It's planned for this to be a simple Least Recently Used eviction system eventually.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--output&lt;/code&gt;, &lt;code&gt;--output-lib&lt;/code&gt;, and &lt;code&gt;--output-h&lt;/code&gt; are removed. Instead, use &lt;code&gt;--output-dir&lt;/code&gt; which defaults to the current working directory. Or take advantage of &lt;code&gt;--cache on&lt;/code&gt;, which will print the main output path to stdout, and the other artifacts will be in the same directory with predictable file names. &lt;code&gt;--disable-gen-h&lt;/code&gt; is available when one wants to prevent .h file generation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#cImport&quot;&gt;@cImport&lt;/a&gt; is always independently cached now. It always writes the generated Zig code to disk which makes debug info and compile errors better. No more &quot;TODO: remember C source location to display here&quot; &lt;a href=&quot;https://github.com/ziglang/zig/issues/2015&quot;&gt;#2015&lt;/a&gt;. The &lt;code&gt;--verbose-cimport&lt;/code&gt; command no longer dumps Zig AST to stderr; instead it prints the file paths of the generated .zig files for inspection. In addition to this improved behavior, the common case of &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@cImport&lt;/span&gt;&lt;/code&gt; with all the C header files unchanged is now fast due to being cached, yet still correct if any of the C files change.&lt;/p&gt;
&lt;p&gt;In addition, these improvements were made:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Zig no longer creates &quot;temporary files&quot; other than inside a zig-cache directory.&lt;/li&gt;
&lt;li&gt;Zig uses &lt;code&gt;os_self_exe_path&lt;/code&gt; to determine exe path not &lt;code&gt;argv[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tests as part of the build system support all of the same API as executables, libraries, and objects.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;linkLibrary&lt;/code&gt; will make the target depend on libc if the source does.&lt;/li&gt;
&lt;li&gt;When building C source file(s), don't try to generate .h files.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;builder.addFmt&lt;/code&gt; API and use it to test stage1 zig fmt. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1968&quot;&gt;#1968&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed build.zig not respecting &lt;code&gt;--static&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2027&quot;&gt;#2027&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai gave usageAndErr a clean exit which makes &lt;code&gt;zig build --help&lt;/code&gt; more friendly. (&lt;a href=&quot;https://github.com/ziglang/zig/issues/2194&quot;&gt;#2194&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Ruslan Prokopchuk implemented support for &lt;code class=&quot;zig&quot;&gt;LibExeObjStep.disable_gen_h&lt;/code&gt;. It is sometimes useful to skip generating of the header file (e.g. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2173&quot;&gt;#2173&lt;/a&gt;), and zig compiler provides an option &lt;code&gt;--disable-gen-h&lt;/code&gt; to control that behaviour. However, setting &lt;code class=&quot;zig&quot;&gt;lib.disable_gen_h = &lt;span class=&quot;tok-null&quot;&gt;true&lt;/span&gt;&lt;/code&gt; in a typical &lt;code&gt;build.zig&lt;/code&gt; didn't append the option to arguments. This commit fixes it and adds a convenient &lt;code&gt;setDisableGenH&lt;/code&gt; setter.&lt;/li&gt;
&lt;li&gt;Windows doesn't have rpaths for DLLs so we instead add search paths to Path environment variable when running an executable that depends on DLLs built with zig build.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zig comes with a robust caching system. When compiling Zig code, Zig knows all the files that it depends on, and when compiling C code, Zig uses &lt;code&gt;-MV -MD -MF&lt;/code&gt; parameters to Clang and then parses the generated .d file.&lt;/p&gt;
&lt;p&gt;The other component of this is the &quot;compiler id&quot; concept:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ zig id
Cxb7A-sAjt6VDq35pHZj3ACcwiSFqcCndt0NJkdQQlZVKolwm-QKnce1KEMUTqPr&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the hash of the compiler binary itself, plus all the dynamic libraries it depends on, directly or indirectly. That means if you fix a bug in &lt;code&gt;memcpy&lt;/code&gt; in the system libc, Zig will detect this change and the value of &lt;code&gt;zig id&lt;/code&gt; will be different. However, the value is quickly computed because it also participates in the caching system.&lt;/p&gt;
&lt;p&gt;Here is a &quot;manifest file&quot; in the caching system for &lt;code&gt;zig id&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;4850313 1554740311 416647968 cOOP0xpsfiYfuMJCS3V_fLKdNmxFxLih_UACAUqwynGp1Y616NJ2lHL0hOpWOp_o /home/andy/dev/zig/build/zig
3077799 1 0 bBgfkt9ZSVN_HgBbzwHhzKmQxpssdDYq_HcbEkdu7KDcUhanATUER2_5l_U__9DE /nix/store/5dphwv1xs46n0qbhynny2lbhmx4xh1fc-zlib-1.2.11/lib/libz.so.1
1165671 1 0 jSVrSQyNkPFoz0Z6GesezdVP1ZBRpHL2UbbX7HbNEprcU4aBuIyG9z6bAOvvPZr0 /nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib/librt.so.1
1165626 1 0 scJm8rYLhDLp_SDXmbvdlcj9fEWQadEm_kHUBJn2oGnht3pSh2MNzsUJZjR1wwa1 /nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib/libdl.so.2
1165664 1 0 pGDNQn5x_j1NAWzjh4AOUP8OKyJj1KSPd4SJYzRVbTTp7TRb4IQpDs7ZAU3muqfz /nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib/libpthread.so.0
1165631 1 0 4tmxoKlbVwB42gYxT7B3CKIBXpbGdb_vuqfYiXlOZdyngmFJdQ7DBZxWqZKSO0Ss /nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib/libm.so.6
3077645 1 0 dxe6qw_yMCi8Bp7ocrVcl2XMdRlKfa0S3ATqbxsEMISRQdQ1dyxTEE1uDbv0R54z /nix/store/sf0wnp30savqz9ljn6fsrn8f63w5v0za-gcc-7.4.0-lib/lib/libstdc++.so.6
1165630 1 0 5boikua2jQubswAtj8MICJzjmGNUxTZrNreQm_DmtspgRsXULyCkyUUMYcNFamII /nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib/libgcc_s.so.1
1165616 1 0 qiXB510da3ryfL7LcPUvL2EQgY2tIwszLRvgQdDrQtnWVl4zA1Nfpq4SDpIz3IYW /nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib/libc.so.6
1165607 1 0 MpHwajxu3h0TtsHViKMAmHHeGMbi9IuDLlybX6PpqT66Xfa1h2GAT3XFIX19dEz- /nix/store/fivq0nbggp4y8mhy3ixprqd7qyn1hy2j-glibc-2.27/lib/ld-linux-x86-64.so.2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The fields are, respectively:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;inode&lt;/li&gt;
&lt;li&gt;mtime seconds&lt;/li&gt;
&lt;li&gt;mtime nanoseconds&lt;/li&gt;
&lt;li&gt;blake hash of file contents&lt;/li&gt;
&lt;li&gt;path to file&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This same system is used for build artifact caching. For example, here is the manifest file for hello world in Zig (when built with &lt;code&gt;--cache on&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;5505089 1548876783 204467480 rcnRrxBgZSiWki_XN9XKlQ2yfWkM6KLYhUWprzniEBtjgmeUSmtlv5mAguA4l2Q1 /home/andy/dev/zig/example/hello_world/hello.zig
4850617 1554305190 0 GXP-IfocPj934vVJYrccBKIVoOcWULaUtkBoR-iHnEKEIoXtdchyuQi8tk8FTncS /home/andy/dev/zig/build/lib/zig/std/std.zig
5114024 1551557778 0 6u-vFMcHH_FcfkAyqCcoYXAfF2TLMCkoP86Q3Ykecmage7_E4ObRsfP52-YXDHH6 /home/andy/dev/zig/build/lib/zig/std/special/panic.zig
4850617 1554305190 0 GXP-IfocPj934vVJYrccBKIVoOcWULaUtkBoR-iHnEKEIoXtdchyuQi8tk8FTncS /home/andy/dev/zig/build/lib/zig/std/std.zig
4850277 1553179780 0 9S5aQg0ORbkQnvDCVeW2aNPSeCu993I4iO3JoGrif4py7zBS4si4mCaeHHuo9TEn /home/andy/dev/zig/build/lib/zig/std/debug.zig
4849956 1554500038 0 8c76uDlKxK5jZ1L0Uup4Lu0y1NlU5-KrUCKFyZnzoi7Hv3dDByN8pvujTjxjaf0m /home/andy/dev/zig/build/lib/zig/std/os.zig
4850678 1554330534 0 wFvlet_2y9YT6NlFrsqybubwMafHFCIZqq4AxLlcUGuTSZ7VjI8kGmM-3VKPrhkt /home/andy/dev/zig/build/lib/zig/std/io.zig
5112957 1551560716 0 f29y95JhSfGVwEFrutPnquGPPuvvtOLu6_vUUgGbaqn-9uulgFvBnyPU8Zp_sH7r /home/andy/dev/zig/build/lib/zig/std/os/file.zig
5113386 1552707664 0 Mb9m-jj_wRe6yt-TFko9wUGNToAA-IAbVfmR2TYZyPjKP3D87df6BGALjai5uKr2 /home/andy/dev/zig/build/lib/zig/std/os/windows/util.zig
5113248 1551562209 0 F1infSSAdOgbOWl3y2FdUiB-6xrpTaeqUJ5xt_F9IZOeBvvTSLNpkGEg8mrYMcli /home/andy/dev/zig/build/lib/zig/std/os/linux.zig
5113251 1536869149 0 LAlDVvl1TX-3-SB3MOBBjxuEk2Ms8SpkcYBLXnJONgZuo7aV9OYfXLfih9bfGyBS /home/andy/dev/zig/build/lib/zig/std/os/linux/errno.zig
5113278 1551560715 0 TpIIt3DNczfgMKjhDA5mx-4JgoGd7SIV9lXK8GQs9Bix4EmPiL7VlV1oQVwv4gkO /home/andy/dev/zig/build/lib/zig/std/os/linux/x86_64.zig
4849832 1554482295 0 AszHJ9beyMCotgQx4vwYWMBUcRd1dBspsou64fATNYXsSqwB5zAiqVEokfpV5xkF /home/andy/dev/zig/build/lib/zig/std/fmt.zig
4850680 1551559869 0 Polq06O1t-jJ0SobBVqLaQrJVXaKzH4lQj6Na8NRN3Y5N0pZ2I4W2rpwL816MSz- /home/andy/dev/zig/build/lib/zig/std/io/seekable_stream.zig
4850605 1552687041 0 Al_VWoytLHeozYOvM69cCR2Dw1HGYdJc2lDGQDXYoiJy1VuD6GWLIQhxSJuf3Oza /home/andy/dev/zig/build/lib/zig/std/array_list.zig
4877695 1552687041 0 ouDIQ9yX5LXanXk6mc2ypFP-oy2zEt7uLLlPDVUFEfx4AKmeFP1cJWI7YSjYAVt9 /home/andy/dev/zig/build/lib/zig/std/mem.zig
4850649 1551560732 0 rVa_7s1plylcGIUAHEt3eGG8XwSJAEOQzuIaYcnq0KHnb1IoGWUEXUGIW7QHH7fi /home/andy/dev/zig/build/lib/zig/std/elf.zig
4849844 1554305190 0 58Tg88pYb1sgK8SI5_65Gy7lgCqaJmsW2NV-Hi4FeXOK8e2f2T1PofNfdUDgbYit /home/andy/dev/zig/build/lib/zig/std/math.zig
4850647 1536869149 0 9-R2p6FQ_7UIjQMt3N-chgeh-_e_o29Gr2Pybfh2PurmRYT9mIIwsdW9rs6kEJR8 /home/andy/dev/zig/build/lib/zig/std/dwarf.zig
5113295 1552687041 0 6oc1oIiWQJ1OIZGh5KFPtul93GCeAaLFx2VTICI3JMt-Ubnj-vjXvBBclnoo5UQ6 /home/andy/dev/zig/build/lib/zig/std/os/path.zig
4850677 1552707664 0 qom60op_QDptmhKO6SIlpm48SlVybcFOT0gHCjncJvtZhM6uUNqZZ2Q0WV5AsmRP /home/andy/dev/zig/build/lib/zig/std/heap.zig
4850683 1551560704 0 6t3PH8KaWwsz2MElBWZezzyZyeRS-Ttq6k2pJWwRK__NvVQ2hZSu1gk4jA7oDT_Y /home/andy/dev/zig/build/lib/zig/std/linked_list.zig
4850685 1548876783 0 EsROc7EV9MKNd74wRR9tYFhMGs4CL4eqYSPvJVzKTzSoXABBfxVoQwO3N_VivhNG /home/andy/dev/zig/build/lib/zig/std/macho.zig
4850663 1554667129 0 oWDxArJXQLKaeAqd-Uf52hiAjktfqEhJA4XIdlBKCeKOxbYZosChXsfReGM0azCQ /home/andy/dev/zig/build/lib/zig/std/hash_map.zig
4877700 1551559918 0 0SY3kFjpRYGQ1eVmh4UHluGBDFA9LcwANsSlEZLKfBO6hWxoZWcowtXk1SJvSALu /home/andy/dev/zig/build/lib/zig/std/pdb.zig
4850628 1551559906 0 QEww1cNolzNrXqhOMV8uMTXRXQmbekZ7nyUaEqj35x6ZjO8BRVzqvYxQeSmW8c_5 /home/andy/dev/zig/build/lib/zig/std/coff.zig
4877702 1551562259 0 9cFnTGm01DAKqMZim8dzEXoPyN8w3R8UAer53ycBv2PFgg-pM6AsNd6hDf0jlseT /home/andy/dev/zig/build/lib/zig/std/rand.zig
5113402 1554353707 0 m2d1Awh2J4qJuWpBI5sEZJyszBZB2VIZlHvVpXZlt9Vz9JdjXvMN2Cig4ohevME_ /home/andy/dev/zig/build/lib/zig/std/special/bootstrap.zig
4877697 1551560726 0 y2XL97U7jZ9PY4d5TVVZmBzYQc5wrCE_j_utDeU8zfLp5W6iLdFEf_HLbG4-W9Mf /home/andy/dev/zig/build/lib/zig/std/mutex.zig
4877707 1551560708 0 jd03IjTqKqI-sTTbTTL63EjXX2xp9vPInAn4fA0rRis3TeXGgWnP-44_8N0OTRPP /home/andy/dev/zig/build/lib/zig/std/spinlock.zig&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The way the cache checking works, is that it calls &lt;code&gt;fstat&lt;/code&gt; on all the files in the manifest. For each file, if the inodes and mtimes from the manifest match the results from &lt;code&gt;fstat&lt;/code&gt;, then the hash is trusted to be up-to-date for that particular file. Any files with outdated hashes, have their contents hashed, and the manifest file updated with the updated hashes. Finally, all the hashes are hashed together, and that final hash is used as the directory name within &lt;code&gt;zig-cache&lt;/code&gt; that Zig looks for previously created build artifacts.&lt;/p&gt;
&lt;p&gt;Because Zig uses &lt;code&gt;-MD -MF&lt;/code&gt; args to clang when doing &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@cImport&lt;/span&gt;&lt;/code&gt;, Zig has a complete list of files that the C code read from, which Zig adds to the cache. So even when using &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@cImport&lt;/span&gt;&lt;/code&gt;, Zig's caching system remains perfect. This is a proof of concept for the mechanism that the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Self-Hosted-Compiler-Status&quot;&gt;self-hosted compiler&lt;/a&gt; will use to watch and rebuild files.&lt;/p&gt;
&lt;p&gt;There is one really fascinating problem to solve when relying on file modification times to determine whether a file's contents have changed. Some file systems, such as macOS's HFS+, do not support nanosecond precision; only seconds. However even nanosecond precision exhibits the problem for very fast systems.&lt;/p&gt;
&lt;p&gt;Imagine that a file was modified, and then immediately after, added to the cache. When added to the manifest, the current time and the file's mtime will be the same. If the file is modified again quickly, and then the cache checked, it will still be the same instant in time; the modification to the file did not change the mtime.&lt;/p&gt;
&lt;p&gt;There is a beautiful solution to this problem, which is to disqualify a file from being cached if the current time, truncated to the file system time granularity, matches the mtime:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;// If the wall clock time, rounded to the same precision as the
// mtime, is equal to the mtime, then we cannot rely on this mtime
// yet. We will instead save an mtime value that indicates the hash
// must be unconditionally computed.
static bool is_problematic_timestamp(const OsTimeStamp *fs_clock) {
    OsTimeStamp wall_clock = os_timestamp_calendar();
    // First make all the least significant zero bits in the fs_clock, also zero bits in the wall clock.
    if (fs_clock-&amp;gt;nsec == 0) {
        wall_clock.nsec = 0;
        if (fs_clock-&amp;gt;sec == 0) {
            wall_clock.sec = 0;
        } else {
            wall_clock.sec &amp;amp;= (-1ull) &amp;lt;&amp;lt; ctzll(fs_clock-&amp;gt;sec);
        }
    } else {
        wall_clock.nsec &amp;amp;= (-1ull) &amp;lt;&amp;lt; ctzll(fs_clock-&amp;gt;nsec);
    }
    return wall_clock.nsec == fs_clock-&amp;gt;nsec &amp;amp;&amp;amp; wall_clock.sec == fs_clock-&amp;gt;sec;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What's beautiful about this is that it generalizes to any granularity. If a file system had a 1 day mtime granularity, then this would mean any files modified within 1 day would have to have their contents hashed, but files older than that could have their hashes trusted. If a file system always wrote 0 for the mtime, Zig would never trust it.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https://apenwarr.ca/log/20181113&quot;&gt;apenwarr's insightful blog post about build system caching&lt;/a&gt; for inspiration.&lt;/p&gt;
&lt;p&gt;The caching system is disabled by default for the command line interface, except for &lt;code&gt;zig test&lt;/code&gt;. &lt;code&gt;zig test&lt;/code&gt; does respect &lt;code&gt;--output-dir&lt;/code&gt; however, which disables caching. The default caching behavior can be overridden with &lt;code&gt;--cache [on|off]&lt;/code&gt;. The &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-Build-System&quot;&gt;Zig Build System&lt;/a&gt; enables caching by default.&lt;/p&gt;
&lt;p&gt;Caching is always enabled, using the global cache directory, when building libc and compiler-rt. This saves a considerable amount of accumulated time, since they must be available for every compilation.&lt;/p&gt;

&lt;p&gt;Zig's compatibility with Valgrind has improved. Notably, Valgrind 3.14 fixes &lt;a href=&quot;https://github.com/ziglang/zig/issues/896&quot;&gt;a bug where Zig programs' debug symbols would not be detected&lt;/a&gt;. Because of this, the &lt;code&gt;--no-rosegment&lt;/code&gt; command line option is removed from Zig. It was only meant to be a temporary workaround.&lt;/p&gt;
&lt;p&gt;Thanks to daurnimator for adding a valgrind module to the standard library. This allows Zig code to easily make &lt;a href=&quot;http://valgrind.org/docs/manual/manual-core-adv.html#manual-core-adv.clientreq&quot;&gt;Valgrind client requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition to userland API, Zig integrates more tightly with Valgrind. For example, one thing that Zig does in &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Debug&quot;&gt;Debug&lt;/a&gt; builds is write &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-number&quot;&gt;0xaa&lt;/span&gt;&lt;/code&gt; bytes to &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-null&quot;&gt;undefined&lt;/span&gt;&lt;/code&gt; variables:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;undef.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);

&lt;span class=&quot;tok-kw&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;main&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; array: [&lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt; = &lt;span class=&quot;tok-null&quot;&gt;undefined&lt;/span&gt;;
    std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;array: {x}\n&quot;&lt;/span&gt;, array);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig build-exe undef.zig
$ ./undef
array: aaaaaaaaaaaaaaaaaaaa
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Valgrind has detection for branching on undefined values, but if Zig was writing &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-number&quot;&gt;0xaa&lt;/span&gt;&lt;/code&gt; values to uninitialized variables, Valgrind would not know that this is supposed to be an undefined canary. It would see the values as defined. However thanks to integrated Valgrind client requests with the Zig language, Valgrind knows what's going on:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;undef.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);

&lt;span class=&quot;tok-kw&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;main&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt; = &lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;;
    std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;x = {}\n&quot;&lt;/span&gt;, x);
    x = &lt;span class=&quot;tok-null&quot;&gt;undefined&lt;/span&gt;;
    &lt;span class=&quot;tok-kw&quot;&gt;if&lt;/span&gt; (x &amp;gt; &lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;) {
        std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;greater than 10\n&quot;&lt;/span&gt;);
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig build-exe undef.zig
$ ./undef
x = 1234
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When run in valgrind:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;==16484== Conditional jump or move depends on uninitialised value(s)
==16484==    at 0x224B6C: main (undef.zig:7)
==16484==    by 0x22455A: posixCallMainAndExit (bootstrap.zig:86)
==16484==    by 0x224350: _start (bootstrap.zig:43)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is a debugging tool available in Zig that is not available in C - setting things to &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-null&quot;&gt;undefined&lt;/span&gt;&lt;/code&gt; so that Valgrind can catch it if you accidentally use it.&lt;/p&gt;
&lt;p&gt;Language integration with Valgrind is enabled by default in &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Debug&quot;&gt;Debug&lt;/a&gt; mode, and disabled by default in other modes. The feature can be force enabled or force disabled with &lt;code&gt;--enable-valgrind&lt;/code&gt; and &lt;code&gt;--disable-valgrind&lt;/code&gt;, respectively. Also available is &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;builtin&quot;&lt;/span&gt;).valgrind_support&lt;/code&gt; which is a &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt;&lt;/code&gt; &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; available for code to find out whether the programmer wants the executable to have Valgrind integration. It's always disabled for compiler_rt and libc/builtin.&lt;/p&gt;
&lt;p&gt;The cost of this feature is a few assembly instructions with each assignment to &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-null&quot;&gt;undefined&lt;/span&gt;&lt;/code&gt;. Only support for Linux, macOS, Solaris, and MinGW on x86_64 is currently implemented.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zig fmt&lt;/code&gt; is a tool to format your Zig code to a canonical style. It's implemented in Zig and it's been available as a &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Self-Hosted-Compiler-Status&quot;&gt;self-hosted compiler&lt;/a&gt; subcommand for a while, but the self-hosted compiler is not done yet and it's not what's available on &lt;a href=&quot;https://ziglang.org/download&quot;&gt;the download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Zig 0.4.0 ships with &lt;code&gt;zig fmt&lt;/code&gt; capabilities. Under the hood, it uses &lt;code&gt;zig run&lt;/code&gt; and the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Build-Artifact-Caching&quot;&gt;Build Artifact Caching&lt;/a&gt; system, to lazily build &lt;code&gt;zig fmt&lt;/code&gt; from source, and then run it. That means even the stage1 C++ Zig compiler is a sort of hybrid - part C++, and part Zig.&lt;/p&gt;
&lt;p&gt;Several editors have &lt;code&gt;zig fmt&lt;/code&gt; integration available, such as the &lt;a href=&quot;https://github.com/ziglang/zig.vim&quot;&gt;vim plugin&lt;/a&gt; that I use. I believe the &lt;a href=&quot;https://github.com/ziglang/vscode-zig/&quot;&gt;VSCode plugin&lt;/a&gt; does as well.&lt;/p&gt;
&lt;p&gt;There is now has a &lt;code&gt;--check&lt;/code&gt; flag, which does everything except modify file contents. That is, it lists non-conforming files on stdout, and then exits with an error if the list is non-empty. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1558&quot;&gt;#1558&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1555&quot;&gt;#1555&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other improvements during this release cycle:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Fixed infix operator before multiline string literal.&lt;/li&gt;
&lt;li&gt;Fixed argv[0] handled incorrectly.&lt;/li&gt;
&lt;li&gt;Removed &lt;code&gt;this&lt;/code&gt; as a keyword since it was &lt;a href=&quot;https://ziglang.org/download/0.3.0/release-notes.html#remove-this&quot;&gt;removed in 0.3.0&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai fixed zig fmt not detecting extra whitespace at the end of a file. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2074&quot;&gt;#2074&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai implemented support for documentation comments on parameter declarations.&lt;/li&gt;
&lt;li&gt;hryx implemented vertically aligning array literal columns.&lt;/li&gt;
&lt;li&gt;hryx implemented Always write a multiline struct literal if a field expr is multiline.&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai fixed first line comment indent in struct init.&lt;/li&gt;
&lt;li&gt;hryx implemented allowing one-line for loops.&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai implemented formatting multi line only on trailing comma. (&lt;a href=&quot;https://github.com/ziglang/zig/issues/2184&quot;&gt;#2184&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai implemented support for trailing comma after var_args.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There is also a &lt;a href=&quot;https://github.com/ziglang/zig/issues/2196&quot;&gt;discussion about whether or not to align struct fields&lt;/a&gt;, which has some interesting arguments on either side.&lt;/p&gt;

&lt;p&gt;I have come up with &lt;a href=&quot;https://github.com/ziglang/zig/issues/1964&quot;&gt;a plan to migrate translate-c to userland&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create a C API wrapper for Clang's C++ API.&lt;/li&gt;
&lt;li&gt;Implement translate-c in Zig with a C API, using the C API wrapper for libclang.&lt;/li&gt;
&lt;li&gt;The build process for stage1 will link zig.exe without translate-c support, build the translate-c userland library, and then re-link zig.exe with translate-c support.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This will allow us to move thousands of lines of C++ to Zig, and to only have to maintain one implementation of C translation rather than two. This same strategy could be used for other pieces of the Zig project, such as the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Package-Manager-Status&quot;&gt;package manager&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I started this effort with a proof of concept, but there is still a long way to go before this is done.&lt;/p&gt;
&lt;p&gt;In addition the following improvements were made:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Much of translated C code looks cleaner thanks to &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#C-Pointers&quot;&gt;C Pointers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;support no-op cast&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--verbose-cimport&lt;/code&gt; prints clang command&lt;/li&gt;
&lt;li&gt;Avoid array concatenation if the init node is empty, for clarity. -Antoine Vugliano&lt;/li&gt;
&lt;li&gt;Only detect ints as negative if they are signed. -Antoine Vugliano&lt;/li&gt;
&lt;li&gt;Correct array concatenation for incomplete C array initializers. -Antoine Vugliano&lt;/li&gt;
&lt;li&gt;Get real child type of array type for incomplete initializers and/or multi-dimensional arrays. -Antoine Vugliano&lt;/li&gt;
&lt;li&gt;LemonBoy implemented translation of parameterless C functions (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1978&quot;&gt;#1978&lt;/a&gt;). This solves &lt;a href=&quot;https://stackoverflow.com/questions/49892119/zig-translate-c-doesnt-translate-main-function&quot;&gt;the only StackOverflow question tagged &quot;Zig&quot;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Antoine Vugliano added support for integer suffixes on 0 (zero) litteral inside macro definitions.&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen implemented a workaround for &lt;a href=&quot;https://github.com/ziglang/zig/issues/2043&quot;&gt;#2043&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen implemented enough of translate-c to translate the &lt;code&gt;assert&lt;/code&gt; macro from glibc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jimmi lead this effort. Starting with solving the return type ambiguity (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1628&quot;&gt;#1628&lt;/a&gt;), he then moved on to create &lt;a href=&quot;https://github.com/ziglang/zig-spec&quot;&gt;zig-spec&lt;/a&gt;, update the &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Grammar&quot;&gt;grammar section of the language reference&lt;/a&gt;, and update the stage1 parser to conform.&lt;/p&gt;
&lt;p&gt;Thanks to his efforts, Zig syntax now has a formal grammar specification and three independent implementations, despite the fact that the syntax is not fully stablized.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://ziglang.org/documentation/0.4.0&quot;&gt;language reference manual&lt;/a&gt;. now has a light theme by default, but respects the user's light/dark preference via the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;prefers-color-scheme media query&lt;/a&gt;. Most browsers don't support this yet, so we just have to wait patiently for the future to arrive.&lt;/p&gt;
&lt;p&gt;Instead of a side bar index, the index is inline with the rest of the content. This is simpler and more friendly to all user agents, and means we don't need the media query for mobile devices. It also makes back-references work, so now headers link to the table of contents and the table of contents links to headers.&lt;/p&gt;
&lt;p&gt;Both of these things apply to this release notes document as well as the language reference manual.&lt;/p&gt;
&lt;p&gt;There is still no HTML documentation available for the Zig Standard Library. See the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Roadmap&quot;&gt;Roadmap&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://ziglang.org/documentation/master/&quot;&gt;master branch language reference manual&lt;/a&gt; is now automatically updated on master branch commits that pass all tests on all platforms.&lt;/p&gt;
&lt;p&gt;In addition to the above, the following changes were made to the documentation:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Improved: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Pointers&quot;&gt;Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#volatile&quot;&gt;volatile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Optional-Pointers&quot;&gt;Optional Pointers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Operators&quot;&gt;Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Pass-by-value-Parameters&quot;&gt;Pass-by-value Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Shadowing&quot;&gt;Shadowing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;John Schmidt made some tweaks to function documentation (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1961&quot;&gt;#1961&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#packed-struct&quot;&gt;packed struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Zero-Bit-Types&quot;&gt;Zero Bit Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#union&quot;&gt;union&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Implicit-Casts&quot;&gt;Implicit Casts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#export&quot;&gt;@export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Improved: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#import&quot;&gt;@import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Memory&quot;&gt;Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Assembly&quot;&gt;Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Zig-Test&quot;&gt;Zig Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matt Stancliff fixed typos around pointer usage.&lt;/li&gt;
&lt;li&gt;Vallentin fixed documentation typos.&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#extern-struct&quot;&gt;extern struct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;New section: &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Variables&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jay Weisskopf made the docs use the section symbol § rather than the paragraph symbol ¶, pointing out that a header may cover more than one paragraph, so a section symbol is more appropriate.&lt;/li&gt;
&lt;li&gt;Jay Weisskopf improved the documentation - and these release notes - to use the system-ui font family, as well as fallbacks for when this is not available.&lt;/li&gt;
&lt;li&gt;Henry Nelson documented explicitly ignoring expression values.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul readability=&quot;2.3283959537572&quot;&gt;&lt;li&gt;Renamed &lt;code&gt;section&lt;/code&gt; keyword to &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;linksection&lt;/span&gt;&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1152&quot;&gt;#1152&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zig no longer has an &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Implicit-Casts&quot;&gt;implicit cast&lt;/a&gt; from &lt;code class=&quot;zig&quot;&gt;T&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;*&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; T&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1465&quot;&gt;#1465&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;removed implicit cast from &lt;code class=&quot;zig&quot;&gt;*T&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;?*&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;removed implicit cast from &lt;code class=&quot;zig&quot;&gt;T&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;?*&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; T&lt;/code&gt; when &lt;code class=&quot;zig&quot;&gt;T&lt;/code&gt; is a struct/union&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;@minValue&lt;/code&gt;,&lt;code&gt;@maxValue&lt;/code&gt;; add &lt;code class=&quot;zig&quot;&gt;std.math.minInt&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.math.maxInt&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1466&quot;&gt;#1466&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1476&quot;&gt;#1476&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Now the length expression in array type syntax implies &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt;&lt;/code&gt;, so function calls, for example, will be evaluated without the need for an explicit &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt;&lt;/code&gt; block. Similarly:
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;**&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;++&lt;/code&gt; operators force comptime on operands. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1707&quot;&gt;#1707&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#for&quot;&gt;for&lt;/a&gt; now works with single-item pointers to arrays. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1663&quot;&gt;#1663&lt;/a&gt; -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#bswap&quot;&gt;@bswap&lt;/a&gt; builtin function. &lt;a href=&quot;https://github.com/ziglang/zig/issues/767&quot;&gt;#767&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vegecode added the &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#bitreverse&quot;&gt;@bitreverse&lt;/a&gt; builtin function. &lt;a href=&quot;https://github.com/ziglang/zig/issues/767&quot;&gt;#767&lt;/a&gt;&lt;/li&gt;
&lt;li readability=&quot;7.6768982229402&quot;&gt;&lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#sizeOf&quot;&gt;@sizeOf&lt;/a&gt; is now defined to be the &quot;ABI size&quot; rather than the &quot;store size&quot;. Quoting from the documentation:&lt;p&gt;This size may contain padding bytes. If there were two consecutive T in memory, this would be the offset in bytes between element at index 0 and the element at index 1. For &lt;a href=&quot;https://ziglang.org/documentation/0.4.0#Integers&quot;&gt;Integers&lt;/a&gt;, consider whether you want to use &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@sizeOf&lt;/span&gt;(T)&lt;/code&gt; or &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@typeInfo&lt;/span&gt;(T).Int.bits&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This fixes breaches of the guarantee that &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@sizeOf&lt;/span&gt;(T) &amp;gt;= &lt;span class=&quot;tok-builtin&quot;&gt;@alignOf&lt;/span&gt;(T)&lt;/code&gt;. It also fixes &lt;code class=&quot;zig&quot;&gt;std.mem.secureZero&lt;/code&gt; for integers where this guarantee previously was breached, and it fixes &lt;code class=&quot;zig&quot;&gt;std.mem.Allocator&lt;/code&gt; for integers where this guarantee previously was breached. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1851&quot;&gt;#1851&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1864&quot;&gt;#1864&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;emekoi made &lt;a href=&quot;https://ziglang.org/documentation/0.4.0#enumToInt&quot;&gt;@enumToInt&lt;/a&gt; work on &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;union&lt;/span&gt;(&lt;span class=&quot;tok-kw&quot;&gt;enum&lt;/span&gt;)&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1711&quot;&gt;#1711&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Better handling of arrays in packed structs. &lt;a href=&quot;https://github.com/ziglang/zig/issues/677&quot;&gt;#677&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;Allow extern structs to be in packed structs.&lt;/li&gt;
&lt;li&gt;More helpful error messages when trying to use types in packed structs that are not allowed.&lt;/li&gt;
&lt;li&gt;Support arrays in packed structs even when they are not byte-aligned.&lt;/li&gt;
&lt;li&gt;Add compile error for using arrays in packed structs when the padding bits would be problematic. This is necessary since Zig does not have packed arrays.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Better field access of types which have one possible value. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1554&quot;&gt;#1554&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;When you do field access of a type which only has one possible value, the result is comptime-known.&lt;/li&gt;
&lt;li&gt;StorePtr instructions which operate on pointers to types which only have one possible value, the result is a comptime no-op.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#returnAddress&quot;&gt;@returnAddress&lt;/a&gt; and &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#frameAddress&quot;&gt;@frameAddress&lt;/a&gt; now return a &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt;&lt;/code&gt; rather than a pointer.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;builtin.TypeInfo.ErrorSet&lt;/code&gt; is now &lt;code class=&quot;zig&quot;&gt;?[]Error&lt;/code&gt; instead of &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt;{errors:[]Error}&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1936&quot;&gt;#1936&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Removed octal and binary floats from the language. This is technically a breaking change but I would be surprised if anyone was actually using this feature. MateuszOkulus did the documentation updates. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2093&quot;&gt;#2093&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Character literals allow unicode escapes. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2097&quot;&gt;#2097&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added peer type resolution for &lt;code class=&quot;zig&quot;&gt;*&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; T&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;?*T&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1298&quot;&gt;#1298&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added compile error for ignoring error. &lt;a href=&quot;https://github.com/ziglang/zig/issues/772&quot;&gt;#772&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;allowzero&lt;/span&gt;&lt;/code&gt; pointer attribute. Only useful for freestanding targets. Also adds safety for &lt;a href=&quot;https://ziglang.org/documentatino/0.4.0/#intToPtr&quot;&gt;@intToPtr&lt;/a&gt; when the address is zero. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1953&quot;&gt;#1953&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;alexander implemented switching on bools. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1768&quot;&gt;#1768&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All numbers with comptime known values now implicitly cast to all number types. If the value does not fit, a compile error is emitted.&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;comptime_ints.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; assert = std.debug.assert;

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;implicit cast large integer to smaller with comptime value&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; x: &lt;span class=&quot;tok-type&quot;&gt;u64&lt;/span&gt; = &lt;span class=&quot;tok-number&quot;&gt;255&lt;/span&gt;;
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; y: &lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt; = x;
    assert(y == &lt;span class=&quot;tok-number&quot;&gt;255&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test comptime_ints.zig
Test 1/1 implicit cast large integer to smaller with comptime value...OK
All tests passed.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ziglang/zig/issues/422&quot;&gt;#422&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1712&quot;&gt;#1712&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zig 0.4.0 ships with a new &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Vector&quot;&gt;Vector&lt;/a&gt; type. This feature is brand new and &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#SIMD&quot;&gt;not well documented yet&lt;/a&gt;. Here are some example tests:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;vectors.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; mem = std.mem;
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; expect = std.testing.expect;

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;vector wrap operators&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S = &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;doTheTest&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; v: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;2147483647&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt; };
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2147483647&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt; };
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(v +% x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ -&lt;span class=&quot;tok-number&quot;&gt;2147483648&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2147483645&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;44&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(v -% x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;2147483646&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2147483647&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;36&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(v *% x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;2147483647&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;160&lt;/span&gt; }));
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; z: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;3&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;2147483648&lt;/span&gt; };
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(-%z), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ -&lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;3&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;2147483648&lt;/span&gt; }));
        }
    };
    S.doTheTest();
    &lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt; S.doTheTest();
}

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;vector int operators&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S = &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;doTheTest&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; v: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt; };
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt; };
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(v + x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;44&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(v - x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;36&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(v * x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;160&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;)(-v), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;{ -&lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;20&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;30&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt; }));
        }
    };
    S.doTheTest();
    &lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt; S.doTheTest();
}

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;vector float operators&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S = &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;doTheTest&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; v: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt; };
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt; };
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;)(v + x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;44&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;)(v - x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;27&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;36&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;)(v * x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;90&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;160&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;)(-x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;f32&lt;/span&gt;{ -&lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;3&lt;/span&gt;, -&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt; }));
        }
    };
    S.doTheTest();
    &lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt; S.doTheTest();
}

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;vector bit operators&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S = &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;doTheTest&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; v: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;0b10101010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10101010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10101010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10101010&lt;/span&gt; };
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;tok-builtin&quot;&gt;@Vector&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;) = [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;0b11110000&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b00001111&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10101010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b01010101&lt;/span&gt; };
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;)(v ^ x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;0b01011010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10100101&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b00000000&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b11111111&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;)(v | x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;0b11111010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10101111&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10101010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b11111111&lt;/span&gt; }));
            expect(mem.eql(&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;, ([&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;)(v &amp;amp; x), [&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;0b10100000&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b00001010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b10101010&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;0b00000000&lt;/span&gt; }));
        }
    };
    S.doTheTest();
    &lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt; S.doTheTest();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test vectors.zig
Test 1/4 vector wrap operators...OK
Test 2/4 vector int operators...OK
Test 3/4 vector float operators...OK
Test 4/4 vector bit operators...OK
All tests passed.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note that Zig of course supports vectors at &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt;&lt;/code&gt; and likewise all the safety features of arithmetic operators are available for vectors as well.&lt;/p&gt;
&lt;p&gt;Vectors provide a way to do Single Instruction Multiple Data in a portable and efficient way. It's much easier for the optimizer to break vectors into scalars than it is to turn scalars into vectors. Even in debug builds which have safety checks, vector operations provide more data throughput than scalar operations.&lt;/p&gt;
&lt;p&gt;Thanks to Jimmi Holst Christensen for many contributions to vector support.&lt;/p&gt;
&lt;p&gt;To follow progress on vectors and SIMD in Zig, watch issue &lt;a href=&quot;https://github.com/ziglang/zig/issues/903&quot;&gt;#903&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zig's &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt;&lt;/code&gt; facilities are improved to support reinterpreting memory, as long as the types in question have guaranteed in-memory representation.&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;bitcast.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; builtin = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;builtin&quot;&lt;/span&gt;);
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; expect = std.testing.expect;

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;@bitCast extern structs at runtime and comptime&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; Full = &lt;span class=&quot;tok-kw&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        number: &lt;span class=&quot;tok-type&quot;&gt;u16&lt;/span&gt;,
    };
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; TwoHalves = &lt;span class=&quot;tok-kw&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        half1: &lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,
        half2: &lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,
    };
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S = &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;doTheTest&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; full = Full{ .number = &lt;span class=&quot;tok-number&quot;&gt;0x1234&lt;/span&gt; };
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; two_halves = &lt;span class=&quot;tok-builtin&quot;&gt;@bitCast&lt;/span&gt;(TwoHalves, full);
            &lt;span class=&quot;tok-kw&quot;&gt;switch&lt;/span&gt; (builtin.endian) {
                builtin.Endian.Big =&amp;gt; {
                    expect(two_halves.half1 == &lt;span class=&quot;tok-number&quot;&gt;0x12&lt;/span&gt;);
                    expect(two_halves.half2 == &lt;span class=&quot;tok-number&quot;&gt;0x34&lt;/span&gt;);
                },
                builtin.Endian.Little =&amp;gt; {
                    expect(two_halves.half1 == &lt;span class=&quot;tok-number&quot;&gt;0x34&lt;/span&gt;);
                    expect(two_halves.half2 == &lt;span class=&quot;tok-number&quot;&gt;0x12&lt;/span&gt;);
                },
            }
        }
    };
    S.doTheTest();
    &lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt; S.doTheTest();
}

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;reinterpret bytes of an array into an extern struct&quot;&lt;/span&gt; {
    testReinterpretBytesAsExternStruct();
    &lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt; testReinterpretBytesAsExternStruct();
}

&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;testReinterpretBytesAsExternStruct&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; bytes &lt;span class=&quot;tok-kw&quot;&gt;align&lt;/span&gt;(&lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;) = []&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;{ &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;tok-number&quot;&gt;6&lt;/span&gt; };

    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S = &lt;span class=&quot;tok-kw&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        a: &lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,
        b: &lt;span class=&quot;tok-type&quot;&gt;u16&lt;/span&gt;,
        c: &lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,
    };

    &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; ptr = &lt;span class=&quot;tok-builtin&quot;&gt;@ptrCast&lt;/span&gt;(*&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S, &amp;amp;bytes);
    &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; val = ptr.c;
    expect(val == &lt;span class=&quot;tok-number&quot;&gt;5&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test bitcast.zig
Test 1/2 @bitCast extern structs at runtime and comptime...OK
Test 2/2 reinterpret bytes of an array into an extern struct...OK
All tests passed.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;These examples work because &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;packed&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt;&lt;/code&gt; have guaranteed in-memory layout.&lt;/p&gt;
&lt;p&gt;In addition, as long as the memory is never accessed, pointers with hard coded addresses and pointer arithmetic are supported at &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;comptime_ptrs.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; expect = std.testing.expect;

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;C pointer comparison and arithmetic&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; S = &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
        &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;doTheTest&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; one: &lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt; = &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;;
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; ptr1: [*c]&lt;span class=&quot;tok-type&quot;&gt;u32&lt;/span&gt; = &lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;;
            &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; ptr2 = ptr1 + &lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;;
            expect(ptr1 == &lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;);
            expect(ptr1 &amp;gt;= &lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;);
            expect(ptr1 &amp;lt;= &lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;);
            expect(ptr1 &amp;lt; &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;);
            expect(ptr1 &amp;lt; one);
            expect(&lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt; &amp;gt; ptr1);
            expect(one &amp;gt; ptr1);
            expect(ptr1 &amp;lt; ptr2);
            expect(ptr2 &amp;gt; ptr1);
            expect(ptr2 &amp;gt;= &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt;);
            expect(ptr2 == &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt;);
            expect(ptr2 &amp;lt;= &lt;span class=&quot;tok-number&quot;&gt;40&lt;/span&gt;);
            ptr2 -= &lt;span class=&quot;tok-number&quot;&gt;10&lt;/span&gt;;
            expect(ptr1 == ptr2);
        }
    };
    S.doTheTest();
    &lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt; S.doTheTest();
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test comptime_ptrs.zig
Test 1/1 C pointer comparison and arithmetic...OK
All tests passed.
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;A variable may be specified to be a thread-local variable using the &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;threadlocal&lt;/span&gt;&lt;/code&gt; keyword:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;tls.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; assert = std.debug.assert;

&lt;span class=&quot;tok-kw&quot;&gt;threadlocal&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt; = &lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;;

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;thread local storage&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; thread1 = &lt;span class=&quot;tok-kw&quot;&gt;try&lt;/span&gt; std.os.spawnThread({}, testTls);
    &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; thread2 = &lt;span class=&quot;tok-kw&quot;&gt;try&lt;/span&gt; std.os.spawnThread({}, testTls);
    testTls({});
    thread1.wait();
    thread2.wait();
}

&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;testTls&lt;/span&gt;(context: &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt;) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    assert(x == &lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;);
    x += &lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;;
    assert(x == &lt;span class=&quot;tok-number&quot;&gt;1235&lt;/span&gt;);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test tls.zig
Test 1/1 thread local storage...OK
All tests passed.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Single-Threaded-Builds&quot;&gt;Single-Threaded Builds&lt;/a&gt;, all thread local variables are treated as &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Global-Variables&quot;&gt;Global Variables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thread local variables may not be &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that thread local variables have better performance for non- position independent code, which is one reason for &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Static-by-Default&quot;&gt;Static by Default&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to Rich Felker from the musl libc project, who gave me this crucial information, when I was implementing thread local storage for static builds:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;to satisfy the abi, your init code has to write the same value to that memory location as the value passed to the [arch_prctl] syscall&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Avoid-Creating-Unnecessary-Global-Constants&quot;&gt;&lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#toc-Avoid-Creating-Unnecessary-Global-Constants&quot;&gt;Avoid Creating Unnecessary Global Constants&lt;/a&gt; &lt;a class=&quot;hdr&quot; href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Avoid-Creating-Unnecessary-Global-Constants&quot;&gt;§&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This deletes some legacy cruft, and produces leaner object files. Example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; x: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt; = &lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;;

&lt;span class=&quot;tok-kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;entry&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;return&lt;/span&gt; x;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This produced:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@x = internal unnamed_addr global i32 1234, align 4
@0 = internal unnamed_addr constant i32* @x, align 8&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and @0 was never even used. After Zig 0.4.0, @0 is not produced.&lt;/p&gt;
&lt;p&gt;This fixes a bug: Zig was creating invalid LLVM IR when one of these globals that shouldn't exist takes the address of a thread local variable. In &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#LLVM-8&quot;&gt;LLVM 8&lt;/a&gt;, it would produce a linker error. But probably after my bug report is solved it will be caught by the IR verifier.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;strong&gt;Rui Ueyama&lt;/strong&gt; and &lt;strong&gt;George Rimar&lt;/strong&gt; who helped me troubleshoot this problem when I filed an &lt;a href=&quot;https://bugs.llvm.org/show_bug.cgi?id=40652&quot;&gt;LLVM bug report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the use cases of Zig is to beat C at its own game, and this means being a better language for using C libraries than C is. It's a tall order to fulfill, and it was compromised by Zig's &lt;a href=&quot;https://ziglang.org/download/0.3.0/release-notes.html#pointer-reform&quot;&gt;pointer reform&lt;/a&gt;. An unfortunate side effect of having more type safety in pointer types was that C's very unsafe pointer types became awkward to use. It is ambiguous whether pointers should be &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#C-Translation-Status&quot;&gt;translated&lt;/a&gt; as single-item pointers (&lt;code class=&quot;zig&quot;&gt;*T&lt;/code&gt;) or unknown-length pointers (&lt;code class=&quot;zig&quot;&gt;[*]T&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#C-Pointers&quot;&gt;C Pointers&lt;/a&gt; are a compromise so that Zig code can utilize translated header files directly.&lt;/p&gt;
&lt;p&gt;This type is to be avoided whenever possible. The only valid reason for using a C pointer is in auto-generated code from translating C code.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;zig&quot;&gt;[*c]T&lt;/code&gt; - C pointer.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Supports all the syntax of the other two pointer types.&lt;/li&gt;
&lt;li&gt;Implicitly casts to other pointer types, as well as &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Optional-Pointers&quot;&gt;Optional Pointers&lt;/a&gt;. When a C pointer is implicitly casted to a non-optional pointer, safety-checked &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Undefined-Behavior&quot;&gt;Undefined Behavior&lt;/a&gt; occurs if the address is 0.&lt;/li&gt;
&lt;li&gt;Allows address 0. On non-freestanding targets, dereferencing address 0 is safety-checked &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Undefined-Behavior&quot;&gt;Undefined Behavior&lt;/a&gt;. Optional C pointers introduce another bit to keep track of null, just like &lt;code class=&quot;zig&quot;&gt;?&lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt;&lt;/code&gt;. Note that creating an optional C pointer is unnecessary as one can use normal &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Optional-Pointers&quot;&gt;Optional Pointers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Supports &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Implicit-Casts&quot;&gt;implicit casting&lt;/a&gt; to and from integers.&lt;/li&gt;
&lt;li&gt;Supports comparison with integers.&lt;/li&gt;
&lt;li&gt;Does not support Zig-only pointer attributes such as alignment. Use normal &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Pointers&quot;&gt;Pointers&lt;/a&gt; please!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;It's planned to &lt;a href=&quot;https://github.com/ziglang/zig/issues/1967&quot;&gt;support `if`, `orelse`, `null`, and `.?` for C pointers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While C pointers themselves have all the footguns associated with, well, C pointers, there is safety when converting to Zig pointers:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;test.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;cast null C pointer to Zig pointer&quot;&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; c_ptr: [*c]&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt; = &lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; zig_ptr: *&lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt; = c_ptr;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test test.zig
Test 1/1 cast null C pointer to Zig pointer...cast causes pointer to be null
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/test.zig:3:25&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x2040f1 in ??? (test)&lt;/span&gt;
    var zig_ptr: *i32 = c_ptr;
                        &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/zig/build/lib/zig/std/special/test_runner.zig:13:25&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x225bdb in ??? (test)&lt;/span&gt;
        if (test_fn.func()) |_| {
                        &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/zig/build/lib/zig/std/special/bootstrap.zig:122:22&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x225366 in ??? (test)&lt;/span&gt;
            root.main() catch |err| {
                     &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/zig/build/lib/zig/std/special/bootstrap.zig:43:5&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x2250d1 in ??? (test)&lt;/span&gt;
    @noInlineCall(posixCallMainAndExit);
    &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;

Tests failed. Use the following command to reproduce the failure:
/home/andy/dev/www.ziglang.org/docgen_tmp/test
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In Zig 0.3.0, &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@typeOf&lt;/span&gt;(&lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;builtin&quot;&lt;/span&gt;))&lt;/code&gt; is &lt;code&gt;(import)&lt;/code&gt;, which was a special &quot;namespace&quot; type. In Zig 0.4.0, &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@typeOf&lt;/span&gt;(&lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;builtin&quot;&lt;/span&gt;))&lt;/code&gt; is &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;type&lt;/span&gt;&lt;/code&gt;. The special &quot;namespace&quot; type is removed; instead all files are structs with no fields.&lt;/p&gt;
&lt;p&gt;This makes the language smaller and simpler, and makes imported files easier to inspect with reflection, since they are structs.&lt;/p&gt;
&lt;p&gt;With this change, struct types get fully qualified names and function symbol names become fully qualified. This means that when using &lt;code&gt;zig test&lt;/code&gt; it's no longer necessary to manually namespace test names as they will be automatically namespaced.&lt;/p&gt;
&lt;p&gt;There is a new compile error for importing a file outside the package path. The new CLI option &lt;code&gt;--main-pkg-path&lt;/code&gt; can be used to choose a different root package directory besides the one inferred from the root source file. The corresponding &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Zig-Build-System&quot;&gt;Zig Build System&lt;/a&gt; API is &lt;code class=&quot;zig&quot;&gt;artifact.setMainPkgPath(path)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Zig has a new type to make dealing with enums more attractive. It can be thought of as the &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; equivalent of &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;comptime_int&lt;/span&gt;&lt;/code&gt;. The &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; equivalent of a number literal.&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;enum-lit.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);

&lt;span class=&quot;tok-kw&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;main&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    print(&lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;, .hex);
    print(&lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;, .normal);
}

&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;print&lt;/span&gt;(x: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, mode: &lt;span class=&quot;tok-kw&quot;&gt;enum&lt;/span&gt; { normal, hex }) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;switch&lt;/span&gt; (mode) {
        .normal =&amp;gt; std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;{}\n&quot;&lt;/span&gt;, x),
        .hex =&amp;gt; std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;0x{x}\n&quot;&lt;/span&gt;, x),
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig build-exe enum-lit.zig
$ ./enum-lit
0x4d2
1234
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here you can see an anonymous &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; was used rather than an opaque &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; parameter. The idea here is to make it so easy to have meaningful values, that programmers will want to use them, even if they're feeling lazy.&lt;/p&gt;
&lt;p&gt;The ergonomics of this feature feel great. Here's &lt;a href=&quot;https://github.com/ziglang/zig/pull/2175/files&quot;&gt;tgschultz updating some of the standard library API to use anonymous enum literals&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that this feature is checked by the compiler. It's completely safe:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;test.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);

&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;invalid enum literal&quot;&lt;/span&gt; {
    print(&lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;, .hex);
    print(&lt;span class=&quot;tok-number&quot;&gt;1234&lt;/span&gt;, .invalid);
}

&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;print&lt;/span&gt;(x: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;, mode: &lt;span class=&quot;tok-kw&quot;&gt;enum&lt;/span&gt; { normal, hex }) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;switch&lt;/span&gt; (mode) {
        .normal =&amp;gt; std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;{}\n&quot;&lt;/span&gt;, x),
        .hex =&amp;gt; std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;0x{x}\n&quot;&lt;/span&gt;, x),
    }
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test test.zig
&lt;span class=&quot;t0_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/test.zig:5:17: &lt;/span&gt;&lt;span class=&quot;t31_1&quot;&gt;error:&lt;/span&gt;&lt;span class=&quot;t0_1&quot;&gt; enum 'enum:8:24' has no field named 'invalid'&lt;/span&gt;
    print(1234, .invalid);
                &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t0_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/test.zig:8:24: &lt;/span&gt;&lt;span class=&quot;t36_1&quot;&gt;note:&lt;/span&gt;&lt;span class=&quot;t0_1&quot;&gt; 'enum:8:24' declared here&lt;/span&gt;
fn print(x: i32, mode: enum { normal, hex }) void {
                       &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.debug.failing_allocator&lt;/code&gt; is now a &lt;code class=&quot;zig&quot;&gt;*Allocator&lt;/code&gt; rather than the &lt;code class=&quot;zig&quot;&gt;FailingAllocator&lt;/code&gt; state. -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;Renamed &lt;code class=&quot;zig&quot;&gt;std.event.tcp&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;std.event.net&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;update std lib API for I/O
&lt;ul&gt;&lt;li&gt;Renamed &lt;code class=&quot;zig&quot;&gt;std.io.FileInStream&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;std.os.File.InStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Renamed &lt;code class=&quot;zig&quot;&gt;std.io.FileInStream.init(file)&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;file.inStream()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Renamed &lt;code class=&quot;zig&quot;&gt;std.io.FileOutStream&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;std.os.File.OutStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Renamed &lt;code class=&quot;zig&quot;&gt;std.io.FileOutStream.init(file)&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;file.outStream()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fewer error code possibilities from several os functions&lt;/li&gt;
&lt;li&gt;Renamed &lt;code class=&quot;zig&quot;&gt;std.event.net.socketRead&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;std.event.net.read&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Renamed &lt;code class=&quot;zig&quot;&gt;std.event.net.socketWrite&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;std.event.net.write&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.net.readv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.net.writev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.net.readvPosix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.net.writevPosix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.net.OutStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.net.InStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.io.InStream&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.event.io.OutStream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;std lib: posixRead can return less than buffer size. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1414&quot;&gt;#1414&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.io.InStream.read&lt;/code&gt; now can return less than buffer size&lt;/li&gt;
&lt;li&gt;introduce &lt;code class=&quot;zig&quot;&gt;std.io.InStream.readFull&lt;/code&gt; for previous behavior&lt;/li&gt;
&lt;li&gt;add &lt;code class=&quot;zig&quot;&gt;std.os.File.openWriteNoClobberC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rename &lt;code class=&quot;zig&quot;&gt;std.os.deleteFileWindows&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;std.os.deleteFileW&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;remove &lt;code class=&quot;zig&quot;&gt;std.os.deleteFilePosix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add &lt;code class=&quot;zig&quot;&gt;std.os.deleteFileC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.os.copyFile&lt;/code&gt; no longer takes an allocator&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.os.copyFileMode&lt;/code&gt; no longer takes an allocator&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.os.AtomicFile&lt;/code&gt; no longer takes an allocator&lt;/li&gt;
&lt;li&gt;add &lt;code class=&quot;zig&quot;&gt;std.os.renameW&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add windows support for &lt;code class=&quot;zig&quot;&gt;std.os.renameC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;add &lt;code class=&quot;zig&quot;&gt;std.os.linux.vfork&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.os.linux.exit_group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;changed &lt;code class=&quot;zig&quot;&gt;std.os.time.sleep(seconds: &lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt;, nanoseconds: &lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt;)&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;(nanoseconds: &lt;span class=&quot;tok-type&quot;&gt;u64&lt;/span&gt;)&lt;/code&gt;. -Marc Tiehuis&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.math.maxInt&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.math.minInt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.crypto.HmacBlake2s256&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.net.Address.port&lt;/code&gt; -Josh Wolfe&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.NullOutStream&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.io.CountingOutStream&lt;/code&gt; -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.io.InStream(E).readStruct&lt;/code&gt; returns a value instead of taking a pointer. -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.atomic.Int.set&lt;/code&gt;. -Josh Wolfe&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.meta.intToEnum&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Revamped the &lt;code class=&quot;zig&quot;&gt;std.rand.Rand&lt;/code&gt; API to better handle the concept of bias. -Josh Wolfe
&lt;ul&gt;&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.rand.Rand.uintLessThanBiased&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.rand.Rand.uintAtMostBiased&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.rand.Rand.intRangeLessThanBiased&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.rand.Rand.intRangeAtMostBiased&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.HashMap.getOrPutValue&lt;/code&gt;. -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen revamped &lt;code class=&quot;zig&quot;&gt;std.io.readLine&lt;/code&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.io.readLine&lt;/code&gt; has a new prototype&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.readLineFrom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.readLineSlice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.readLineSliceFrom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.SeekableStream&lt;/code&gt;. Dwarf debug info is modified to use this instead of &lt;code class=&quot;zig&quot;&gt;std.os.File&lt;/code&gt; directly to make it easier for &lt;a href=&quot;https://andrewkelley.me/post/zig-stack-traces-kernel-panic-bare-bones-os.html&quot;&gt;bare metal projects to take advantage of debug info parsing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.debug.StackIterator&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;rework the readInt/writeInt functions:
&lt;ul&gt;&lt;li&gt;io.InStream().readIntNe renamed to readIntNative&lt;/li&gt;
&lt;li&gt;io.InStream().readIntLe renamed to readIntLittle&lt;/li&gt;
&lt;li&gt;io.InStream().readIntBe renamed to readIntBig&lt;/li&gt;
&lt;li&gt;introduced io.InStream().readIntForeign&lt;/li&gt;
&lt;li&gt;io.InStream().readInt has parameter order changed&lt;/li&gt;
&lt;li&gt;io.InStream().readVarInt has parameter order changed&lt;/li&gt;
&lt;li&gt;io.InStream().writeIntNe renamed to writeIntNative&lt;/li&gt;
&lt;li&gt;introduced io.InStream().writeIntForeign&lt;/li&gt;
&lt;li&gt;io.InStream().writeIntLe renamed to writeIntLittle&lt;/li&gt;
&lt;li&gt;io.InStream().writeIntBe renamed to writeIntBig&lt;/li&gt;
&lt;li&gt;io.InStream().writeInt has parameter order changed&lt;/li&gt;
&lt;li&gt;mem.readInt has different parameters and semantics&lt;/li&gt;
&lt;li&gt;introduced mem.readIntNative&lt;/li&gt;
&lt;li&gt;introduced mem.readIntForeign&lt;/li&gt;
&lt;li&gt;mem.readIntBE renamed to mem.readIntBig and different API&lt;/li&gt;
&lt;li&gt;mem.readIntLE renamed to mem.readIntLittle and different API&lt;/li&gt;
&lt;li&gt;introduced mem.readIntSliceNative&lt;/li&gt;
&lt;li&gt;introduced mem.readIntSliceForeign&lt;/li&gt;
&lt;li&gt;introduced mem.readIntSliceLittle&lt;/li&gt;
&lt;li&gt;introduced mem.readIntSliceBig&lt;/li&gt;
&lt;li&gt;introduced mem.readIntSlice&lt;/li&gt;
&lt;li&gt;mem.writeInt has different parameters and semantics&lt;/li&gt;
&lt;li&gt;introduced mem.writeIntNative&lt;/li&gt;
&lt;li&gt;introduced mem.writeIntForeign&lt;/li&gt;
&lt;li&gt;mem.writeIntBE renamed to mem.readIntBig and different semantics&lt;/li&gt;
&lt;li&gt;mem.writeIntLE renamed to mem.readIntLittle and different semantics&lt;/li&gt;
&lt;li&gt;introduced mem.writeIntSliceForeign&lt;/li&gt;
&lt;li&gt;introduced mem.writeIntSliceNative&lt;/li&gt;
&lt;li&gt;introduced mem.writeIntSliceBig&lt;/li&gt;
&lt;li&gt;introduced mem.writeIntSliceLittle&lt;/li&gt;
&lt;li&gt;introduced mem.writeIntSlice&lt;/li&gt;
&lt;li&gt;removed mem.endianSwapIfLe&lt;/li&gt;
&lt;li&gt;removed mem.endianSwapIfBe&lt;/li&gt;
&lt;li&gt;removed mem.endianSwapIf&lt;/li&gt;
&lt;li&gt;added mem.littleToNative&lt;/li&gt;
&lt;li&gt;added mem.bigToNative&lt;/li&gt;
&lt;li&gt;added mem.toNative&lt;/li&gt;
&lt;li&gt;added mem.nativeTo&lt;/li&gt;
&lt;li&gt;added mem.nativeToLittle&lt;/li&gt;
&lt;li&gt;added mem.nativeToBig&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;error&lt;/span&gt;.DeviceBusy&lt;/code&gt; as a possible result of &lt;code class=&quot;zig&quot;&gt;std.os.posixOpen&lt;/code&gt;. I observed &lt;code&gt;EBUSY&lt;/code&gt; when trying to open for writing a tty fd that is already opened with screen.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.debug.assert&lt;/code&gt; no longer has special behavior for test builds. Use &lt;code class=&quot;zig&quot;&gt;std.testing.expect&lt;/code&gt; to detect test failures in a way that will work in release builds. See &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#assert-vs-expect&quot;&gt;assert vs expect&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.mem.Allocator.create&lt;/code&gt; is removed. &lt;code class=&quot;zig&quot;&gt;std.mem.Allocator.createOne&lt;/code&gt; is renamed to &lt;code class=&quot;zig&quot;&gt;std.mem.Allocator.create&lt;/code&gt;. The problem with the previous API is that even after copy elision, the initalization value passed as a parameter would always be a copy. With the new API, once copy elision is done, initialization functions can directly initialize allocated memory in place. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1872&quot;&gt;#1872&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1873&quot;&gt;#1873&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.mem.split&lt;/code&gt; is removed. &lt;code class=&quot;zig&quot;&gt;std.mem.separate&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.mem.tokenize&lt;/code&gt; are added.&lt;/li&gt;
&lt;li&gt;Marc Tiehuis added &lt;code class=&quot;zig&quot;&gt;std.fmt.parseFloat&lt;/code&gt;. This is not intended to be the long-term implementation as it doesn't provide various properties that we eventually will want (e.g. round-tripping, denormal support). It also uses &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;f64&lt;/span&gt;&lt;/code&gt; internally so the wider &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;f128&lt;/span&gt;&lt;/code&gt; will be inaccurate. See &lt;a href=&quot;https://github.com/ziglang/zig/issues/2207&quot;&gt;#2207&lt;/a&gt; for robust float parsing in the Zig Standard Library.&lt;/li&gt;
&lt;li&gt;John Schmidt added &lt;code class=&quot;zig&quot;&gt;std.PriorityQueue&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.os.posixMProtect&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.os.changeCurDir&lt;/code&gt; no longer has an allocator parameter.&lt;/li&gt;
&lt;li&gt;Shawn Landden added &lt;code class=&quot;zig&quot;&gt;std.ascii&lt;/code&gt;. Rohlem added test coverage and fixed the logic.&lt;/li&gt;
&lt;li&gt;Shawn Landden added &lt;code class=&quot;zig&quot;&gt;std.math.mulWide&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;kristopher tate exposed &lt;code class=&quot;zig&quot;&gt;std.crypto.HmacBlake2s256&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Wink Saville added &lt;code class=&quot;zig&quot;&gt;SegmentedList.shrink&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;tgschultz added serialization and deserialization abstractions:
&lt;ul&gt;&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.Serializer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.Deserializer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.BitInStream&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.io.BitOutStream&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.meta.TagPayloadType&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.meta.trait.isUnsignedInt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;std.meta.trait.isSignedInt&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;daurnimator added &lt;code class=&quot;zig&quot;&gt;std.meta.stringToEnum&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;kristopher tate introduced the concept of &lt;code class=&quot;zig&quot;&gt;std.mem.separate&lt;/code&gt; vs &lt;code class=&quot;zig&quot;&gt;std.mem.tokenize&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;daurnimator added &lt;code class=&quot;zig&quot;&gt;std.math.IntFittingRange&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;daurnimator added &lt;code class=&quot;zig&quot;&gt;std.LinkedList.concat&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;tgschultz added &lt;code class=&quot;zig&quot;&gt;std.meta&lt;/code&gt; - helper functions for doing reflection. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1662&quot;&gt;#1662&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Previously, &lt;code class=&quot;zig&quot;&gt;std.debug.assert&lt;/code&gt; would &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#panic&quot;&gt;@panic&lt;/a&gt; in test builds, if the assertion failed. Now, it's always &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;unreachable&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This makes release mode test builds more accurately test the actual code that will be run.&lt;/p&gt;
&lt;p&gt;However this requires tests to call &lt;code class=&quot;zig&quot;&gt;std.testing.expect&lt;/code&gt; rather than &lt;code class=&quot;zig&quot;&gt;std.debug.assert&lt;/code&gt; to make sure output is correct.&lt;/p&gt;
&lt;p&gt;Here is the explanation of when to use either one, copied from the assert doc comments:&lt;/p&gt;
&lt;p&gt;Inside a test block, it is best to use the &lt;code class=&quot;zig&quot;&gt;std.testing&lt;/code&gt; module rather than assert, because assert may not detect a test failure in &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#ReleaseFast&quot;&gt;ReleaseFast&lt;/a&gt; and &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#ReleaseSmall&quot;&gt;ReleaseSmall&lt;/a&gt; modes. Outside of a test block, assert is the correct function to use.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/ziglang/zig/issues/1304&quot;&gt;#1304&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zig code can use &lt;code class=&quot;zig&quot;&gt;std.debug.captureStackTrace&lt;/code&gt; at any time for debugging purposes:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;stack-traces.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; std = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;std&quot;&lt;/span&gt;);
&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; builtin = &lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;builtin&quot;&lt;/span&gt;);

&lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; address_buffer: [&lt;span class=&quot;tok-number&quot;&gt;8&lt;/span&gt;]&lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt; = &lt;span class=&quot;tok-null&quot;&gt;undefined&lt;/span&gt;;

&lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; trace1 = builtin.StackTrace{
    .instruction_addresses = address_buffer[&lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;..&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;],
    .index = &lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;,
};

&lt;span class=&quot;tok-kw&quot;&gt;var&lt;/span&gt; trace2 = builtin.StackTrace{
    .instruction_addresses = address_buffer[&lt;span class=&quot;tok-number&quot;&gt;4&lt;/span&gt;..],
    .index = &lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;,
};

&lt;span class=&quot;tok-kw&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;main&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    foo();
    bar();

    std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;first one:\n&quot;&lt;/span&gt;);
    std.debug.dumpStackTrace(trace1);
    std.debug.warn(&lt;span class=&quot;tok-str&quot;&gt;&quot;\n\nsecond one:\n&quot;&lt;/span&gt;);
    std.debug.dumpStackTrace(trace2);
}

&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;foo&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    std.debug.captureStackTrace(&lt;span class=&quot;tok-null&quot;&gt;null&lt;/span&gt;, &amp;amp;trace1);
}

&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;bar&lt;/span&gt;() &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    std.debug.captureStackTrace(&lt;span class=&quot;tok-null&quot;&gt;null&lt;/span&gt;, &amp;amp;trace2);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig build-exe stack-traces.zig
$ ./stack-traces
first one:
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/stack-traces.zig:27:32&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x22586d in ??? (stack-traces)&lt;/span&gt;
    std.debug.captureStackTrace(null, &amp;amp;trace1);
                               &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/stack-traces.zig:17:8&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x225819 in ??? (stack-traces)&lt;/span&gt;
    foo();
       &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/zig/build/lib/zig/std/special/bootstrap.zig:112:22&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x22528b in ??? (stack-traces)&lt;/span&gt;
            root.main();
                     &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/zig/build/lib/zig/std/special/bootstrap.zig:43:5&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x225081 in ??? (stack-traces)&lt;/span&gt;
    @noInlineCall(posixCallMainAndExit);
    &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;


second one:
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/stack-traces.zig:31:32&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x22588d in ??? (stack-traces)&lt;/span&gt;
    std.debug.captureStackTrace(null, &amp;amp;trace2);
                               &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/stack-traces.zig:18:8&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x22581e in ??? (stack-traces)&lt;/span&gt;
    bar();
       &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/zig/build/lib/zig/std/special/bootstrap.zig:112:22&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x22528b in ??? (stack-traces)&lt;/span&gt;
            root.main();
                     &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t37_1&quot;&gt;/home/andy/dev/zig/build/lib/zig/std/special/bootstrap.zig:43:5&lt;/span&gt;: &lt;span class=&quot;t2_0&quot;&gt;0x225081 in ??? (stack-traces)&lt;/span&gt;
    @noInlineCall(posixCallMainAndExit);
    &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This feature is used in the &lt;a href=&quot;https://github.com/andrewrk/zig-general-purpose-allocator/&quot;&gt;GeneralPurposeDebugAllocator project&lt;/a&gt; for helping detect and diagnose memory issues.&lt;/p&gt;

&lt;p&gt;Zig 0.4.0 brings breaking changes to the &lt;code class=&quot;zig&quot;&gt;std.mem.Allocator&lt;/code&gt; interface and API.&lt;/p&gt;
&lt;p&gt;Before, allocator implementations had to provide &lt;code class=&quot;zig&quot;&gt;allocFn&lt;/code&gt;, &lt;code class=&quot;zig&quot;&gt;reallocFn&lt;/code&gt;, and &lt;code class=&quot;zig&quot;&gt;freeFn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, they must provide only &lt;code class=&quot;zig&quot;&gt;reallocFn&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;shrinkFn&lt;/code&gt;. Reallocating from a zero length slice is allocation, and shrinking to a zero length slice is freeing.&lt;/p&gt;
&lt;p&gt;When the new memory size is less than or equal to the previous allocation size, &lt;code class=&quot;zig&quot;&gt;reallocFn&lt;/code&gt; now has the option to return &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;error&lt;/span&gt;.OutOfMemory&lt;/code&gt; to indicate that the allocator would not be able to take advantage of the new size.&lt;/p&gt;
&lt;p&gt;For more details see &lt;a href=&quot;https://github.com/ziglang/zig/issues/1306&quot;&gt;#1306&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have reproduced the documentation comments here:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; Allocator = &lt;span class=&quot;tok-kw&quot;&gt;struct&lt;/span&gt; {
    &lt;span class=&quot;tok-kw&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; Error = &lt;span class=&quot;tok-kw&quot;&gt;error&lt;/span&gt;{OutOfMemory};

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    reallocFn: &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; (
        self: *Allocator,
    
    
    
    
        old_mem: []&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,
    
    
    
    
    
        old_alignment: &lt;span class=&quot;tok-type&quot;&gt;u29&lt;/span&gt;,
    
    
        new_byte_count: &lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt;,
    
    
    
        new_alignment: &lt;span class=&quot;tok-type&quot;&gt;u29&lt;/span&gt;,
    ) Error![]&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,

    
    shrinkFn: &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; (
        self: *Allocator,
    
    
        old_mem: []&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,
    
    
        old_alignment: &lt;span class=&quot;tok-type&quot;&gt;u29&lt;/span&gt;,
    
        new_byte_count: &lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt;,
    
    
        new_alignment: &lt;span class=&quot;tok-type&quot;&gt;u29&lt;/span&gt;,
    ) []&lt;span class=&quot;tok-type&quot;&gt;u8&lt;/span&gt;,
};&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This allows allocators and data structures to &quot;negotiate&quot; with each other. For example, here is &lt;code class=&quot;zig&quot;&gt;std.ArrayList.shrink&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;shrink&lt;/span&gt;(self: *Self, new_len: &lt;span class=&quot;tok-type&quot;&gt;usize&lt;/span&gt;) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {
    assert(new_len &amp;lt;= self.len);
    self.len = new_len;
    self.items = self.allocator.realloc(self.items, new_len) &lt;span class=&quot;tok-kw&quot;&gt;catch&lt;/span&gt; |e| &lt;span class=&quot;tok-kw&quot;&gt;switch&lt;/span&gt; (e) {
        &lt;span class=&quot;tok-kw&quot;&gt;error&lt;/span&gt;.OutOfMemory =&amp;gt; &lt;span class=&quot;tok-kw&quot;&gt;return&lt;/span&gt;, 
    };
}&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;I am pleased to announce our newest Zig team member, &lt;a href=&quot;https://github.com/Sahnvour&quot;&gt;Antoine Vugliano&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;He has shown continued dedication and discipline in his contributions to the Zig programming language project. The quality of his work speaks for itself.&lt;/p&gt;
&lt;p&gt;I look forward to working with Antoine as we continue to push Zig toward 1.0.0 and beyond.&lt;/p&gt;

&lt;p&gt;Thanks to Jeff Fowler for creating &lt;a href=&quot;https://github.com/ziglang/sublime-zig-language&quot;&gt;sublime-zig-language&lt;/a&gt; and for creating the &lt;a href=&quot;https://github.com/github/linguist/pull/4005&quot;&gt;pull request to GitHub&lt;/a&gt; to add support for Zig.&lt;/p&gt;
&lt;p&gt;Finally, GitHub decided that Zig is popular enough to gain official recognition.&lt;/p&gt;
&lt;p&gt;As a fun last step, Marc Tiehuis marked third-party dependencies as vendored, so that we can have this pretty language bar on GitHub:&lt;/p&gt;
&lt;img src=&quot;https://ziglang.org/download/0.4.0/github-languages-bar.png&quot;/&gt;&lt;p&gt;Now you can &lt;a href=&quot;https://github.com/trending/zig?since=daily&quot;&gt;discover Zig projects on GitHub via their &quot;trending&quot; web page&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;The cmake configuration no longer tries to find libxml since it's not a direct dependency.&lt;/li&gt;
&lt;li&gt;add a test for &lt;code class=&quot;zig&quot;&gt;std.os.AtomicFile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;increase stack size on windows for all executables. &lt;a href=&quot;https://github.com/ziglang/zig/issues/157&quot;&gt;#157&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.Mutex&lt;/code&gt; now has a high quality Linux implementation based on &lt;a href=&quot;http://dept-info.labri.fr/~denis/Enseignement/2008-IR/Articles/01-futex.pdf&quot;&gt;Ulrich Drepper's &quot;Futexes are tricky&quot; paper&lt;/a&gt;, Mutex, Take 3. Thanks to Shawn Landden for the original implementation. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1463&quot;&gt;#1463&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The cmake build looks for llvm-config-8 before llvm-config. Fixes building from source on some systems.&lt;/li&gt;
&lt;li&gt;Zig now supports building static libraries, with no system dependency on &lt;code&gt;ar&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1493&quot;&gt;#1493&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/54&quot;&gt;#54&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;On POSIX systems, the stage1 compiler uses &lt;code&gt;posix_spawn&lt;/code&gt; rather than &lt;code&gt;fork&lt;/code&gt; and &lt;code&gt;execv&lt;/code&gt;. The logic is simplified and the memory usage is more deterministic.&lt;/li&gt;
&lt;li&gt;Zig's startup code inlines some functions so that stack traces have fewer frames before main.&lt;/li&gt;
&lt;li&gt;Support C ABI for returning structs on ARM. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1481&quot;&gt;#1481&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add __multi3 compiler rt function. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1290&quot;&gt;#1290&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;compiler rt includes ARM functions for thumb and aarch64 and other sub-arches left out. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1526&quot;&gt;#1526&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;std.io: fix compile error when InStream has empty error set&lt;/li&gt;
&lt;li&gt;Support both MSVC 2015 and MSVC 2017 when linking libc, as well as for building stage1.&lt;/li&gt;
&lt;li&gt;macOS builds of master branch are now available on &lt;a href=&quot;https://ziglang.org/download&quot;&gt;the download page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;aarch64 improvements
&lt;ul&gt;&lt;li&gt;support C ABI for all return types&lt;/li&gt;
&lt;li&gt;don't include __aeabi_uldivmod &amp;amp; co on aarch64 since it's 64 bit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;improve error message when wrong type returned. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1650&quot;&gt;#1650&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Crash fixes and small improvements to inline asm. (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1756&quot;&gt;#1756&lt;/a&gt;) -Antoine Vugliano
&lt;ul&gt;&lt;li&gt;codegen: fix use of deprecated LLVMConstInlineAsm.&lt;/li&gt;
&lt;li&gt;codegen: replace commas in asm constraint strings by pipes as required by LLVM.&lt;/li&gt;
&lt;li&gt;ir: enforce usage of '=' constraint modifier for inline assembly outputs.&lt;/li&gt;
&lt;li&gt;asm: forbid comptime_int/floats as inputs in favor of explicitely sized constants.&lt;/li&gt;
&lt;li&gt;asm: handle inputs with integers of less than 8 or non power of 2 bitsize by widening them to the next highest power of two.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.rand.Rand&lt;/code&gt;: better debiased random range implementation. -Josh Wolfe&lt;/li&gt;
&lt;li&gt;Add a workaround to support Debian's patch of LLVM which breaks the public API. &lt;a href=&quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=924953&quot;&gt;Debian bug report&lt;/a&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2076&quot;&gt;#2076&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;comptime evaluation facilities are improved to be able to handle a &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#ptrCast&quot;&gt;@ptrCast&lt;/a&gt; with a backing array.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#truncate&quot;&gt;@truncate&lt;/a&gt; allows &quot;truncating&quot; a &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;u0&lt;/span&gt;&lt;/code&gt; value to any integer type, and the result is always comptime known to be &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.fmt.formatType&lt;/code&gt; can now format comptime_int -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;std.fmt.format&lt;/code&gt; can now format function pointers -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;Added compile errror for &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#bitCast&quot;&gt;@bitCast&lt;/a&gt; when bit counts mismatch.&lt;/li&gt;
&lt;li&gt;Antoine Vugliano improved behaviour of ChildProcess under windows. Notify failure to create a process when the executable is not found even in PATH.&lt;/li&gt;
&lt;li&gt;Better error message when LLVM does not understand a triple.&lt;/li&gt;
&lt;li&gt;stage1 cmake build configuration ensures that the LLVM it finds is the exact correct version and that it has all the default targets enabled.&lt;/li&gt;
&lt;li&gt;Matthew McAllister enabled compileLog to display slices.&lt;/li&gt;
&lt;li&gt;Marc Tiehuis Added __addtf3, __subtf3 and __truncdfhf2 to compiler-rt. Allows addition/subtraction of &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;f128&lt;/span&gt;&lt;/code&gt; and narrowing casts to &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;f16&lt;/span&gt;&lt;/code&gt; from larger float types.&lt;/li&gt;
&lt;li&gt;Marc Tiehuis added &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;f128&lt;/span&gt;&lt;/code&gt; support for fabs, isinf, isnan, inf and nan functions.&lt;/li&gt;
&lt;li&gt;Marc Tiehuis added float parsing support to &lt;code class=&quot;zig&quot;&gt;std.json&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Removed the &quot;top of the comptime stack&quot; compile error. It's still best practice to put &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#setEvalBranchQuota&quot;&gt;@setEvalBranchQuota&lt;/a&gt; at the top of the comptime stack, but as Jimmi notes in &lt;a href=&quot;https://github.com/ziglang/zig/issues/1949&quot;&gt;#1949&lt;/a&gt;, when a function can be called at comptime and also can be the top of the comptime stack, this compile error is fundamentally unsound. So now it's gone.&lt;/li&gt;
&lt;li&gt;Matthew McAllister deduplicated compile log statement warnings.&lt;/li&gt;
&lt;li&gt;LemonBoy added the LLVM align attribute for pointer parameters.&lt;/li&gt;
&lt;li&gt;Fixed &lt;code class=&quot;zig&quot;&gt;std.os.getBaseAddress&lt;/code&gt; for objects and libraries on macOS. See &lt;a href=&quot;https://github.com/ziglang/zig/issues/1878&quot;&gt;#1878&lt;/a&gt;. This removed the workaround in example/shared_library/mathtest.zig. Along the way these fixes were made:
&lt;ul&gt;&lt;li&gt;Fixed extern variables with initialiaztion values to generate runtime code.&lt;/li&gt;
&lt;li&gt;Introduceed the ability for global variables to have Weak and LinkOnce linkage.&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#export&quot;&gt;@export&lt;/a&gt; to work for non-functions. This code needs to be audited though.&lt;/li&gt;
&lt;li&gt;Fixed comptime ptrcast not keeping bigger alignment.&lt;/li&gt;
&lt;li&gt;Fixed linker warnings when targeting darwin.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deduplicate compile errors for undeclared identifiers. &lt;a href=&quot;https://github.com/ziglang/zig/issues/111&quot;&gt;#111&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added a compile error note when C import fails and not linking libc. &lt;a href=&quot;https://github.com/ziglang/zig/issues/558&quot;&gt;#558&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Better error message when forgetting to link against libc. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1698&quot;&gt;#1698&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Breaking changes to the way targets work.
&lt;ul&gt;&lt;li&gt;CLI: &lt;code&gt;-target [name]&lt;/code&gt; instead of &lt;code&gt;--target-*&lt;/code&gt; args. This matches clang's command line interface.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;zig&quot;&gt;builtin.Environ&lt;/code&gt; renamed to &lt;code class=&quot;zig&quot;&gt;builtin.Abi&lt;/code&gt;; likewise &lt;code class=&quot;zig&quot;&gt;builtin.environ&lt;/code&gt; renamed to &lt;code class=&quot;zig&quot;&gt;builtin.abi&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;stop hiding the concept of sub-arch. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1526&quot;&gt;#1526&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zig targets&lt;/code&gt; only shows available targets. &lt;a href=&quot;https://github.com/ziglang/zig/issues/438&quot;&gt;#438&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;include all targets in &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Support-Table&quot;&gt;Support Table&lt;/a&gt;, even those that don't print with &lt;code&gt;zig targets&lt;/code&gt; but note they are &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-4-Support&quot;&gt;Tier 4 Support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;introduce the concept of a &quot;default C ABI&quot; for a given OS/Arch combo. As a rule of thumb, if the system compiler is clang or gcc then the default C ABI is the gnu ABI.&lt;/li&gt;
&lt;li&gt;Better error message for `-target windows` CLI. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1169&quot;&gt;#1169&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Marc Tiehuis improved Zig's &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Error-Return-Traces&quot;&gt;error return trace&lt;/a&gt; code to use bitwise-and instead of modulo, which avoids emitting compiler-rt div calls on some targets.&lt;/li&gt;
&lt;li&gt;Antoine Vugliano made all integers returned by &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#typeInfo&quot;&gt;@typeInfo&lt;/a&gt; &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;comptime_int&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;popcountdi2&lt;/code&gt; to compiler_rt&lt;/li&gt;
&lt;li&gt;Matt Whiteside added elf riscv32 and elf riscv64 as options in getLDMOption during construction of link job.&lt;/li&gt;
&lt;li&gt;Better buffer length for &lt;code class=&quot;zig&quot;&gt;std.fmt.formatIntUnsigned&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1358&quot;&gt;#1358&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added mulXf3 to compiler-rt. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1290&quot;&gt;#1290&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Suirad updated the standard library to use GetEnvironmentStringsW instead of GetEnvironmentStringsA. &lt;a href=&quot;https://github.com/ziglang/zig/issues/534&quot;&gt;#534&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shawn Landden improved the compile error message when incorrectly comparing against &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-null&quot;&gt;null&lt;/span&gt;&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2104&quot;&gt;#2104&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vegecode improved compiler-rt support for armv7m:
&lt;ul&gt;&lt;li&gt;Added &lt;code class=&quot;zig&quot;&gt;memcmp&lt;/code&gt; to builtins.&lt;/li&gt;
&lt;li&gt;Added all __aeabi functions (C versions) who alias currently existing functions to compiler-rt.&lt;/li&gt;
&lt;li&gt;Added __aeabi_{f,d}neg and __neg{s,d,X}f2 to compiler-rt.&lt;/li&gt;
&lt;li&gt;Added __aeabi_{f,d}{add,sub} and __{add,sub}{s,d}f3 to compiler-rt.&lt;/li&gt;
&lt;li&gt;Added __aeabi_mem{cmp,clr,set,cpy,move} to compiler-rt.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;emekoi made terminal color output of the compiler more consistent (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1706&quot;&gt;#1706&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;kristopher tate reduced code bloat by having &lt;code class=&quot;zig&quot;&gt;std.mem.join&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.os.path.join&lt;/code&gt; use a slice parameter rather than var args.&lt;/li&gt;
&lt;li&gt;Shawn Landden removed an invalid formatted printing test that relied on negative NaN.&lt;/li&gt;
&lt;li&gt;kristopher tate added support for printing hex bytes on slices&lt;/li&gt;
&lt;li&gt;kristopher tate made the internal compiler error handling more robust&lt;/li&gt;
&lt;li&gt;Matthew O'Connor updated &lt;code class=&quot;zig&quot;&gt;std.rb&lt;/code&gt; to conform to the &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Style-Guide&quot;&gt;style guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;emekoi added dynamic library loading for windows. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1594&quot;&gt;#1594&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;emekoi maintained the MinGW build of Zig.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ziglang.org/download/index.json&quot;&gt;The download page also has a JSON URL available.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vegecode added divsf3 to compiler rt. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1290&quot;&gt;#1290&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;__modti3&lt;/code&gt; to compiler-rt. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1290&quot;&gt;#1290&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shawn Landden simplified &lt;code class=&quot;zig&quot;&gt;std.math.isnan&lt;/code&gt; to use &lt;code class=&quot;zig&quot;&gt;x != x&lt;/code&gt; rather than looking at the bits.&lt;/li&gt;
&lt;li&gt;Shritesh Bhattarai added support for &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;comptime_int&lt;/span&gt;&lt;/code&gt; in &lt;code class=&quot;zig&quot;&gt;std.fmt.formatInt&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.fmt.formatValue&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;vegecode added divdf3 and __aeabi_ddiv to compiler_rt.&lt;/li&gt;
&lt;li&gt;kristopher tate added compile error notes to hint using &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;and&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;or&lt;/span&gt;&lt;/code&gt; when &lt;code class=&quot;zig&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;||&lt;/code&gt; are used.&lt;/li&gt;
&lt;li&gt;Matthew McAllister made tokenization errors more helpful. Previously, it pointed to the start of the current token, but this made it difficult to tell where the error occurred when it was, say, in the middle of a string.&lt;/li&gt;
&lt;li&gt;tharvik added llvm-config sanity check to the stage1 cmake build configuration.&lt;/li&gt;
&lt;li&gt;dbandstra made &lt;code class=&quot;zig&quot;&gt;std.fmt.parseUnsigned&lt;/code&gt; handle types less than 8 bits wide.&lt;/li&gt;
&lt;li&gt;Wink Saville added compiler_rt routines for float to signed integer conversion&lt;/li&gt;
&lt;li&gt;emekoi added a &lt;code class=&quot;zig&quot;&gt;std.Mutex&lt;/code&gt; implementation for Windows.&lt;/li&gt;
&lt;li&gt;kristopher tate improved stage1 os.cpp regarding opening files and getting the modification time.&lt;/li&gt;
&lt;li&gt;emekoi added math.pow support for integer types and math.powi. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1637&quot;&gt;#1637&lt;/a&gt; (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1642&quot;&gt;#1642&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Wink Saville added tests and documentation comments to the Zig standard library.&lt;/li&gt;
&lt;li&gt;kristopher tate added a temporary workaround to break a false positive dependency loop when a struct depends on its own alignment. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1832&quot;&gt;#1832&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/2174&quot;&gt;#2174&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tgschultz removed unnecessary allocator field from Linux implementation of std.DynLib and improved test coverage.&lt;/li&gt;
&lt;li&gt;LemonBoy silenced gcc8 class-memaccess warnings using an explicit cast to tell gcc we know what we're doing.&lt;/li&gt;
&lt;li&gt;kristopher tate improved test coverage of self-referential generic functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Function type mismatches now have an error note which explains in more detail why the function types were incompatible:&lt;/p&gt;
&lt;p class=&quot;file&quot;&gt;test.zig&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;do_the_thing&lt;/span&gt;(func: &lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; (arg: &lt;span class=&quot;tok-type&quot;&gt;i32&lt;/span&gt;) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt;) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {}
&lt;span class=&quot;tok-kw&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;tok-fn&quot;&gt;bar&lt;/span&gt;(arg: &lt;span class=&quot;tok-type&quot;&gt;bool&lt;/span&gt;) &lt;span class=&quot;tok-type&quot;&gt;void&lt;/span&gt; {}
&lt;span class=&quot;tok-kw&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;tok-str&quot;&gt;&quot;fn types&quot;&lt;/span&gt; {
    do_the_thing(bar);
}&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;$ zig test test.zig
&lt;span class=&quot;t0_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/test.zig:4:18: &lt;/span&gt;&lt;span class=&quot;t31_1&quot;&gt;error:&lt;/span&gt;&lt;span class=&quot;t0_1&quot;&gt; expected type 'fn(i32) void', found 'fn(bool) void'&lt;/span&gt;
    do_the_thing(bar);
                 &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;span class=&quot;t0_1&quot;&gt;/home/andy/dev/www.ziglang.org/docgen_tmp/test.zig:4:18: &lt;/span&gt;&lt;span class=&quot;t36_1&quot;&gt;note:&lt;/span&gt;&lt;span class=&quot;t0_1&quot;&gt; parameter 0: 'bool' cannot cast into 'i32'&lt;/span&gt;
    do_the_thing(bar);
                 &lt;span class=&quot;t32_1&quot;&gt;^&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;ul readability=&quot;3.3425269645609&quot;&gt;&lt;li&gt;Antoine Vugliano fixed --emit asm on windows. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1612&quot;&gt;#1612&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen fixed StackTrace not being resolved when panic is invalid (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1615&quot;&gt;#1615&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed missing .h files for &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#cImport&quot;&gt;@cImport&lt;/a&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1634&quot;&gt;#1634&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No more blank lines printed after linker errors. Fixed by disabling the error limit when invoking LLD.&lt;/li&gt;
&lt;li&gt;Fixed code still using old ptr syntax. -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;Fixed stack pointer register name on i386&lt;/li&gt;
&lt;li&gt;Removed implicit cast from number literal to enum&lt;/li&gt;
&lt;li&gt;limit integer types to maximum bit width of 65535. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1541&quot;&gt;#1541&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed .h file locating on macos 10.14&lt;/li&gt;
&lt;li&gt;fix assertion failure related to @intToEnum&lt;/li&gt;
&lt;li&gt;std/rand: fix ziggurat next_f64 call. -Marc Tiehuis&lt;/li&gt;
&lt;li&gt;fix &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#intCast&quot;&gt;@intCast&lt;/a&gt; not catching negative numbers to unsigned&lt;/li&gt;
&lt;li&gt;better file path handling in stage1 compiler. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1693&quot;&gt;#1693&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1746&quot;&gt;#1746&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Antoine Vugliano fixed stack traces on windows.&lt;/li&gt;
&lt;li&gt;Josh Wolfe fixed child_process piped streams not getting closed&lt;/li&gt;
&lt;li&gt;Fixed intToPtr to fn type when the address is hardcoded (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1842&quot;&gt;#1842&lt;/a&gt;) -Jimmi Holst Christensen&lt;/li&gt;
&lt;li&gt;vegecode fixed mutate through ptr initialized with constant intToPtr value. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1171&quot;&gt;#1171&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen fixed &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#typeInfo&quot;&gt;@typeInfo&lt;/a&gt; returning incorrect results sometimes.&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen fixed using mem.writeInt at comptime can change the type of a structs field. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1866&quot;&gt;#1866&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed debug info for function pointers.&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#typeInfo&quot;&gt;@typeInfo&lt;/a&gt; returning incorrect function return type sometimes.&lt;/li&gt;
&lt;li&gt;Fixed incorrect parameter names for &lt;code class=&quot;zig&quot;&gt;std.math.atan2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Sauhnvour improved the line number accuracy of stack traces on Windows. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1503&quot;&gt;#1503&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;krisopher tate fixed &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#compileLog&quot;&gt;@compileLog&lt;/a&gt; with a pointer to an opaque value.&lt;/li&gt;
&lt;li&gt;Fixed incorrect timeval struct type on macOS. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1648&quot;&gt;#1648&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matthew McAllister fixed runtime assignment to comptime aggregate field.&lt;/li&gt;
&lt;li&gt;Matthew McAllister fixed slice concatenation.&lt;/li&gt;
&lt;li&gt;Fixed using the result of @intCast to u0. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1817&quot;&gt;#1817&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed compiler assertion failure when returning value from test. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1935&quot;&gt;#1935&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#truncate&quot;&gt;@truncate&lt;/a&gt; now is &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;comptime&lt;/span&gt;&lt;/code&gt;-known to be 0 when destination integer type has 0 bits. If the destination type is a &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-type&quot;&gt;comptime_int&lt;/span&gt;&lt;/code&gt;, treat it as an &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#Implicit-Casts&quot;&gt;Implicit Cast&lt;/a&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1568&quot;&gt;#1568&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add missing compile error for OpaqueType inside structs/unions. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1862&quot;&gt;#1862&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fix mmap syscalls invoking undefined behavior when address 0 is used. Found thanks to Zig's new safety checks for null pointers.&lt;/li&gt;
&lt;li&gt;Typecheck the panic function. The prototype of panic is added to &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-builtin&quot;&gt;@import&lt;/span&gt;(&lt;span class=&quot;tok-str&quot;&gt;&quot;builtin&quot;&lt;/span&gt;)&lt;/code&gt; and then used to do an implicit cast of the panic function to this prototype, rather than redoing all the implicit cast logic. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1894&quot;&gt;#1894&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1895&quot;&gt;#1895&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;emekoi fixed the secret debug safety union tag incorrectly being included in release modes.&lt;/li&gt;
&lt;li&gt;Matthew McAllister fixed lvalue dereference type checking. Previously, if a dereference instruction was an lvalue, it would fail to typecheck that the value being dereferenced was indeed a pointer.&lt;/li&gt;
&lt;li&gt;sjdh02 fixed BufferedInStream not reading delayed input.&lt;/li&gt;
&lt;li&gt;Benoit Jauvin-Girard fixed std.math.powi so powi(x, +-0) = 1 for any x.&lt;/li&gt;
&lt;li&gt;LemonBoy prevented crashing in tagged enums rendering (&lt;a href=&quot;https://github.com/ziglang/zig/issues/1986&quot;&gt;#1986&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fix &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#bitCast&quot;&gt;@bitCast&lt;/a&gt; when src/dest types have mismatched &lt;code&gt;handle_is_ptr&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/991&quot;&gt;#991&lt;/a&gt; &lt;a href=&quot;https://github.com/ziglang/zig/issues/1934&quot;&gt;#1934&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed incorrectly trying to memset at comptime. &lt;a href=&quot;https://github.com/ziglang/zig/issues/718&quot;&gt;#718&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Correctly handle the case when there are multiple externs and an export in the same object, and they all share the same name. &lt;a href=&quot;https://github.com/ziglang/zig/issues/529&quot;&gt;#529&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Better error message on Windows when a file name contains an asterisk.&lt;/li&gt;
&lt;li&gt;Fixed .h file generation not respecting &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#export&quot;&gt;@export&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#typeName&quot;&gt;@typeName&lt;/a&gt; on slices. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2026&quot;&gt;#2026&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen fixed function taking TypeInfo and returning type crashed compiler. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1600&quot;&gt;#1600&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added test for spawning child process with empty environment. Thanks to BenoitJGirard for pointing out the child process implementation needs 3 extra null bytes in &lt;a href=&quot;https://github.com/ziglang/zig/issues/2031&quot;&gt;#2031&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;LemonBoy fixed generation of comptime slices.&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#setRuntimeSafety&quot;&gt;@setRuntimeSafety&lt;/a&gt; not able to override release modes.&lt;/li&gt;
&lt;li&gt;Fixed while continue block not checking for ignored expression. &lt;a href=&quot;https://github.com/ziglang/zig/issues/957&quot;&gt;#957&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added compile error for wrong type with &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;use&lt;/span&gt;&lt;/code&gt;. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1557&quot;&gt;#1557&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Antoine Vugliano improved Zig's PDB (Windows) debug info parsing and used it to fix Zig's C ABI support for Windows. The C ABI tests are now passing on all &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Tier-1-Support&quot;&gt;Tier 1 Support&lt;/a&gt; targets.&lt;/li&gt;
&lt;li&gt;Fixed global assembly parsing. Previously, global assembly was parsed expecting it to have the template syntax. However global assembly has no inputs, outputs, or clobbers, and thus does not have template syntax. This is now fixed.&lt;/li&gt;
&lt;li&gt;Fixed parsing of large hex float literals. Float literals now parse using musl's 128 bit float code. Fixes float literals not having 128 bit precision. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2083&quot;&gt;#2083&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Marc Tiehuis fixed &lt;code&gt;bigint_append_buf&lt;/code&gt;. All current usages had base 10 and a limb length of 2, hence why we weren't hitting this error in practice.&lt;/li&gt;
&lt;li&gt;Wink Saville fixed &lt;code class=&quot;zig&quot;&gt;std.json.pushToParent&lt;/code&gt; to work for arrays of Objects&lt;/li&gt;
&lt;li&gt;Shawn Landden fixed ELF auxv handling.&lt;/li&gt;
&lt;li&gt;Duncan fixed the setsockopt syscall on linux.&lt;/li&gt;
&lt;li readability=&quot;1.9616858237548&quot;&gt;Michael Dusan fixed zig run to accept executable args.&lt;p&gt;The &lt;code&gt;--&lt;/code&gt; double-hyphen is now used to end further zig processing of command line options. All arguments after &lt;code&gt;--&lt;/code&gt; will be passed on to the executable. eg. &lt;code&gt;--help&lt;/code&gt; will be passed on:&lt;/p&gt;&lt;p&gt;&lt;code&gt;zig run foo.zig -- --help&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ziglang/zig/issues/2148&quot;&gt;#2148&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;emekoi added a missing compile error for implicit cast from &lt;code class=&quot;zig&quot;&gt;*&lt;span class=&quot;tok-kw&quot;&gt;const&lt;/span&gt; T&lt;/code&gt; to &lt;code class=&quot;zig&quot;&gt;*[&lt;span class=&quot;tok-number&quot;&gt;1&lt;/span&gt;]T&lt;/code&gt; based on a patch from kristopher tate.&lt;/li&gt;
&lt;li&gt;Fixed &lt;a href=&quot;https://ziglang.org/documentation/0.4.0/#divFloor&quot;&gt;@divFloor&lt;/a&gt; returning incorrect value. &lt;a href=&quot;https://github.com/ziglang/zig/issues/2152&quot;&gt;#2152&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed NaN comparing equal to itself. This was broken both in comptime code and in runtime code. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1174&quot;&gt;#1174&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fixed dereferencing a zero bit type. Before only u0 was special cased in handling a dereference; now all zero bit types are handled the same way. Dereferencing a pointer to a zero bit type always gives a comptime-known result.&lt;/li&gt;
&lt;li&gt;Jimmi Holst Christensen fixed inability to capture pointer to elements of const array in &lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;tok-kw&quot;&gt;for&lt;/span&gt;&lt;/code&gt; loop. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1726&quot;&gt;#1726&lt;/a&gt;&lt;/li&gt;
&lt;li readability=&quot;5&quot;&gt;Ryan Liptak fixed &lt;code class=&quot;zig&quot;&gt;std.HashMap.remove&lt;/code&gt; returning invalid memory.&lt;p&gt;Now returns a copy of the removed kv instead of a pointer to the removed kv. The removed kv gets overwritten when shifting the hash map after the removal, so returning a pointer to it will have another kv's values in it after the return.&lt;/p&gt;&lt;p&gt;This bug had some nasty downstream effects in things like &lt;code class=&quot;zig&quot;&gt;std.BufSet&lt;/code&gt; and &lt;code class=&quot;zig&quot;&gt;std.BufMap&lt;/code&gt; where delete would free a still in-use KV and leave the actually removed KV un-free'd.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Ryan Saunderson fixed detecting the latest installed version of the Windows SDK and related tests. &lt;a href=&quot;https://github.com/ziglang/zig/issues/1665&quot;&gt;#1665&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;alexander added DIFlagStaticMember flag to functions. This prevents LLVM from generating debug info for struct member functions with a pointer as the first parameter as though the first parameter were the implicit &quot;this&quot; pointer from C++.&lt;/li&gt;
&lt;li&gt;Quetzal Bradley fixed a compile error in &lt;code class=&quot;zig&quot;&gt;std.os.File.openWriteNoClobber&lt;/code&gt; and added test coverage.&lt;/li&gt;
&lt;li&gt;sjdh02 fixed check for 64-bit arm platforms with new targets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zig has &lt;a href=&quot;https://github.com/ziglang/zig/issues?q=is%3Aopen+is%3Aissue+label%3Abug&quot;&gt;known bugs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first release that will ship with no known bugs will be 1.0.0.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://ziglang.org/download/0.3.0/release-notes.html&quot;&gt;roadmap from 0.3.0 release notes&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Redo coroutines without using LLVM Coroutines and rework the semantics. See &lt;a href=&quot;https://github.com/ziglang/zig/issues/1363&quot;&gt;#1363&lt;/a&gt; and &lt;a href=&quot;https://github.com/ziglang/zig/issues/1194&quot;&gt;#1194&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Tuples instead of var args. &lt;a href=&quot;https://github.com/ziglang/zig/issues/208&quot;&gt;#208&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Well-defined copy-eliding semantics. &lt;a href=&quot;https://github.com/ziglang/zig/issues/287&quot;&gt;#287&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Self-hosted compiler. &lt;a href=&quot;https://github.com/ziglang/zig/issues/89&quot;&gt;#89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get to 100% documentation coverage of the language&lt;/li&gt;
&lt;li&gt;Auto generated documentation. &lt;a href=&quot;https://github.com/ziglang/zig/issues/21&quot;&gt;#21&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Package manager. &lt;a href=&quot;https://github.com/ziglang/zig/issues/943&quot;&gt;#943&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I am sad to report that this list was too ambitious for one release cycle, and while there has been considerable progress, none of these items are complete. And so the roadmap for 0.4.0 is the same.&lt;/p&gt;

&lt;p&gt;It's no longer planned for Zig to have Type Based Alias Analysis. However, there are some open research topics on potentially outlawing all kinds of aliasing unless explicitly declared. Subscribe to &lt;a href=&quot;https://github.com/ziglang/zig/issues/1108&quot;&gt;#1108&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;For now, Zig has a &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#comptime-memory-reinterpretation&quot;&gt;well-defined memory model&lt;/a&gt;, and aliasing is always allowed. Note, however, that not all types have a guaranteed in-memory layout.&lt;/p&gt;

&lt;p&gt;Linking macOS/COFF files is still in a sad state. The Mach-O code in &lt;a href=&quot;http://lld.llvm.org/&quot;&gt;LLD&lt;/a&gt;, Zig's linker, has been barely maintained for several years now. Zig has a fork of LLD in its source tree with a hacky patch to fix linking &quot;Hello World&quot; on macOS.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ziglang/zig/issues/1535&quot;&gt;It's now planned for the Zig project to have its own linker&lt;/a&gt;. This is in part due to the lack of Mach-O maintenance, and in part because LLD has no plans to do incremental linking - a feature that I foresee to be necessary to achieve the performance we want to have for large projects in the self-hosted compiler.&lt;/p&gt;
&lt;p&gt;For now the self-hosted compiler uses &lt;code&gt;--system-linker-hack&lt;/code&gt; to be able to link successfully, which is a compromise of Zig's promise that it can build on any target, for any target.&lt;/p&gt;
&lt;p&gt;There is also a workaround in the linker phase of Zig for compiler-rt.a and builtin.a. I had to make them object files rather than archive files to avoid crashing LLD.&lt;/p&gt;

&lt;p&gt;There has been no progress on the self-hosted compiler in this release cycle. Progress is blocked on the volume of core language changes still happening, as well as &lt;a href=&quot;https://github.com/ziglang/zig/issues/287&quot;&gt;no-copy semantics&lt;/a&gt;, and &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Coroutine-Status&quot;&gt;Reworking Coroutines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The package manager will be one of the focus areas of the 0.5.0 release cycle. It depends on networking, which depends on &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Coroutine-Status&quot;&gt;Reworking Coroutines&lt;/a&gt;, which depends on &lt;a href=&quot;https://github.com/ziglang/zig/issues/287&quot;&gt;no-copy semantics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is no progress on coroutines in this release cycle. In fact there has been anti-progress.&lt;/p&gt;
&lt;p&gt;Zig 0.4.0 introduces a memory leak to all coroutines. There is an issue where a coroutine calls the function and it frees its own stack frame, but then the return value of &lt;code class=&quot;zig&quot;&gt;shrinkFn&lt;/code&gt; is a slice, which is implemented as an sret struct. Writing to the return pointer causes invalid memory write. We could work around it by having a global helper function which has a void return type and calling that instead. But instead this hack will suffice until I rework coroutines to be non-allocating. Basically coroutines are not supported right now until they are reworked as in &lt;a href=&quot;https://github.com/ziglang/zig/issues/1194&quot;&gt;#1194&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reworking coroutines is to be a major focus of 0.5.0 as it is blocking networking, the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Package-Manager-Status&quot;&gt;Package Manager&lt;/a&gt;, and the &lt;a href=&quot;https://ziglang.org/download/0.4.0/release-notes.html#Self-Hosted-Compiler-Status&quot;&gt;Self-Hosted Compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a small selection of interesting proposals that have been accepted, to give you an idea of the upcoming changes to Zig.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ziglang/zig/issues?q=is%3Aopen+is%3Aissue+label%3Aaccepted&quot;&gt;Full list of accepted proposals&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/andrewrk/zig-general-purpose-allocator/&quot;&gt;GeneralPurposeDebugAllocator&lt;/a&gt; - work in progress general purpose debug allocator with livestreamed development.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Sahnvour/zig-benchmark&quot;&gt;zig-benchmark&lt;/a&gt; - Small and easy micro-benchmarking library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dbandstra/oxid&quot;&gt;Oxid&lt;/a&gt; - an arcade-style game where you fight waves of monsters in a fixed-screen maze.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sjdh02/trOS&quot;&gt;trOS&lt;/a&gt; - tiny aarch64 baremetal OS thingy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Hejsil/zig-clap&quot;&gt;zig-clap&lt;/a&gt; - Simple command line argument parsing library&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ul/simple-amplifier&quot;&gt;Simple Amplifier&lt;/a&gt; - a very simple example of LV2 plugin built in Zig.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mikdusan/benchmark.unicode&quot;&gt;benchmark.unicode&lt;/a&gt; - A command-line tool written in Zig to measure the performance of various UTF8 decoders. The decoders are written in Zig or C.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/thejoshwolfe/hexdump-zip&quot;&gt;hexdump-zip&lt;/a&gt; - produce an annotated hexdump of a zipfile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Special thanks to those who &lt;a href=&quot;https://www.patreon.com/andrewrk&quot;&gt;donate monthly&lt;/a&gt;. Thanks to you, Zig is not driven by the needs of a business; instead it exists solely to serve the open source community.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;connectFree Corporation&lt;/li&gt;
&lt;li&gt;Raph Levien&lt;/li&gt;
&lt;li&gt;Stevie Hryciw&lt;/li&gt;
&lt;li&gt;Lauren Chavis&lt;/li&gt;
&lt;li&gt;Ali Anwar&lt;/li&gt;
&lt;li&gt;Andrea Orru&lt;/li&gt;
&lt;li&gt;Josh Wolfe&lt;/li&gt;
&lt;li&gt;Filippo Valsorda&lt;/li&gt;
&lt;li&gt;Ryan Worl&lt;/li&gt;
&lt;li&gt;jeff kelley&lt;/li&gt;
&lt;li&gt;Martin Schwaighofer&lt;/li&gt;
&lt;li&gt;Jimmy Zelinskie&lt;/li&gt;
&lt;li&gt;Tyler Bender&lt;/li&gt;
&lt;li&gt;Tanner Schultz&lt;/li&gt;
&lt;li&gt;Kelly Wilson&lt;/li&gt;
&lt;li&gt;Brendon Scheinman&lt;/li&gt;
&lt;li&gt;Trenton Cronholm&lt;/li&gt;
&lt;li&gt;Champ Yen&lt;/li&gt;
&lt;li&gt;Don Poor&lt;/li&gt;
&lt;li&gt;Locke Monster&lt;/li&gt;
&lt;li&gt;Thomas Ballinger&lt;/li&gt;
&lt;li&gt;Paul Merrill&lt;/li&gt;
&lt;li&gt;Audun Wilhelmsen&lt;/li&gt;
&lt;li&gt;Adrian Sinclair&lt;/li&gt;
&lt;li&gt;David Joseph&lt;/li&gt;
&lt;li&gt;Elizabeth Ryan&lt;/li&gt;
&lt;li&gt;Tom Phinney&lt;/li&gt;
&lt;li&gt;Steve Perkins&lt;/li&gt;
&lt;li&gt;Clement Rey&lt;/li&gt;
&lt;li&gt;Jeff&lt;/li&gt;
&lt;li&gt;Ross Rheingans-Yoo&lt;/li&gt;
&lt;li&gt;Ross Kilgariff&lt;/li&gt;
&lt;li&gt;Rudi Angela&lt;/li&gt;
&lt;li&gt;Justin B Alexander&lt;/li&gt;
&lt;li&gt;Ville Tuulos&lt;/li&gt;
&lt;li&gt;shen xizhi&lt;/li&gt;
&lt;li&gt;Ross Cousens&lt;/li&gt;
&lt;li&gt;William L Sommers&lt;/li&gt;
&lt;li&gt;Mirek Rusin&lt;/li&gt;
&lt;li&gt;Peter Ronnquist&lt;/li&gt;
&lt;li&gt;Felix Yuan&lt;/li&gt;
&lt;li&gt;Aharon sharim&lt;/li&gt;
&lt;li&gt;Caius&lt;/li&gt;
&lt;li&gt;Matthew&lt;/li&gt;
&lt;li&gt;Brian Glusman&lt;/li&gt;
&lt;li&gt;Christopher A. Butler&lt;/li&gt;
&lt;li&gt;Raymond Imber&lt;/li&gt;
&lt;li&gt;Jack Wakefield&lt;/li&gt;
&lt;li&gt;Mitch Small&lt;/li&gt;
&lt;li&gt;Josh Gentry&lt;/li&gt;
&lt;li&gt;Benoit Jauvin-Girard&lt;/li&gt;
&lt;li&gt;Josh McDonald&lt;/li&gt;
&lt;li&gt;Jay Weisskopf&lt;/li&gt;
&lt;li&gt;Dan Boykis&lt;/li&gt;
&lt;li&gt;Le Bach&lt;/li&gt;
&lt;li&gt;Jordan Torbiak&lt;/li&gt;
&lt;li&gt;Gerdus van Zyl&lt;/li&gt;
&lt;li&gt;Furkan Mustafa&lt;/li&gt;
&lt;li&gt;S.D.&lt;/li&gt;
&lt;li&gt;Yaroslav Zh&lt;/li&gt;
&lt;li&gt;Eduard Nicodei&lt;/li&gt;
&lt;li&gt;Thomas Lopatic&lt;/li&gt;
&lt;li&gt;joe ardent&lt;/li&gt;
&lt;li&gt;Luis Alfonso Higuera Gamboa&lt;/li&gt;
&lt;li&gt;Jason Merrill&lt;/li&gt;
&lt;li&gt;Andriy Tyurnikov&lt;/li&gt;
&lt;li&gt;Sanghyeon Seo&lt;/li&gt;
&lt;li&gt;Neil Henning&lt;/li&gt;
&lt;li&gt;Aaron St George&lt;/li&gt;
&lt;li&gt;Brian Orr&lt;/li&gt;
&lt;li&gt;Frans van den Heuvel&lt;/li&gt;
&lt;li&gt;David Bremner&lt;/li&gt;
&lt;li&gt;Wesley Kelley&lt;/li&gt;
&lt;li&gt;Quetzal Bradley&lt;/li&gt;
&lt;li&gt;Wink Saville&lt;/li&gt;
&lt;li&gt;Anthony J. Benik&lt;/li&gt;
&lt;li&gt;stdev&lt;/li&gt;
&lt;li&gt;Ben Morris&lt;/li&gt;
&lt;li&gt;Brian Ketelsen&lt;/li&gt;
&lt;li&gt;Serge Paquet&lt;/li&gt;
&lt;li&gt;Joseph Jaoudi&lt;/li&gt;
&lt;li&gt;Torben Clasen&lt;/li&gt;
&lt;li&gt;occivink&lt;/li&gt;
&lt;li&gt;curtis gagliardi&lt;/li&gt;
&lt;li&gt;Codi Matters&lt;/li&gt;
&lt;li&gt;Ruslan Prakapchuk&lt;/li&gt;
&lt;li&gt;Tyler Philbrick&lt;/li&gt;
&lt;li&gt;Jan Halsema&lt;/li&gt;
&lt;li&gt;Samantha Weddle&lt;/li&gt;
&lt;li&gt;Jeff Hochgesang&lt;/li&gt;
&lt;li&gt;Anatoly Polinsky&lt;/li&gt;
&lt;li&gt;McSpiros&lt;/li&gt;
&lt;li&gt;George K&lt;/li&gt;
&lt;li&gt;Jon Raphaelson&lt;/li&gt;
&lt;li&gt;Brian Lewis&lt;/li&gt;
&lt;li&gt;Matt Whiteside&lt;/li&gt;
&lt;li&gt;AnonymousGuy&lt;/li&gt;
&lt;li&gt;Blazej Floch&lt;/li&gt;
&lt;li&gt;Dmitriy Filchenko&lt;/li&gt;
&lt;li&gt;ers35&lt;/li&gt;
&lt;li&gt;Martin Holly&lt;/li&gt;
&lt;li&gt;RCherry&lt;/li&gt;
&lt;li&gt;Charles Palmer&lt;/li&gt;
&lt;li&gt;Ryan Roberts&lt;/li&gt;
&lt;li&gt;Andrew Fernandes&lt;/li&gt;
&lt;li&gt;Fabien Freling&lt;/li&gt;
&lt;li&gt;Lewis&lt;/li&gt;
&lt;li&gt;Marko Mikulicic&lt;/li&gt;
&lt;li&gt;Jonathan Wright&lt;/li&gt;
&lt;li&gt;James Haggerty&lt;/li&gt;
&lt;li&gt;earthfront&lt;/li&gt;
&lt;li&gt;Jakob Falke&lt;/li&gt;
&lt;li&gt;John Judnich&lt;/li&gt;
&lt;li&gt;Chris W&lt;/li&gt;
&lt;li&gt;Drosin&lt;/li&gt;
&lt;li&gt;John Biesnecker&lt;/li&gt;
&lt;li&gt;Alexander Ellis&lt;/li&gt;
&lt;li&gt;bb010g&lt;/li&gt;
&lt;li&gt;Pau Fernández&lt;/li&gt;
&lt;li&gt;Krishna Aradhi&lt;/li&gt;
&lt;li&gt;Adrian Hatch&lt;/li&gt;
&lt;li&gt;Deniz Kusefoglu&lt;/li&gt;
&lt;li&gt;Hans Wennborg&lt;/li&gt;
&lt;li&gt;Tim Hutt&lt;/li&gt;
&lt;li&gt;John Schmidt&lt;/li&gt;
&lt;li&gt;Rasmus Rønn Nielsen&lt;/li&gt;
&lt;li&gt;Johann Muszynski&lt;/li&gt;
&lt;li&gt;Eigil Skjæveland&lt;/li&gt;
&lt;li&gt;Harry&lt;/li&gt;
&lt;li&gt;Matus Hamorsky&lt;/li&gt;
&lt;li&gt;Fabio Utzig&lt;/li&gt;
&lt;li&gt;Gregoire Picquot&lt;/li&gt;
&lt;li&gt;Lorenz Bauer&lt;/li&gt;
&lt;li&gt;Cameron Miller&lt;/li&gt;
&lt;li&gt;Igor Butenko&lt;/li&gt;
&lt;li&gt;Akifumi Fukumoto&lt;/li&gt;
&lt;li&gt;Alexandra Gillis&lt;/li&gt;
&lt;li&gt;david karapetyan&lt;/li&gt;
&lt;li&gt;Chad Russell&lt;/li&gt;
&lt;li&gt;Wojciech Miłkowski&lt;/li&gt;
&lt;li&gt;Ernst Rohlicek&lt;/li&gt;
&lt;li&gt;Gudmund Vatn&lt;/li&gt;
&lt;li&gt;Martin Angers&lt;/li&gt;
&lt;li&gt;Christoph Müller&lt;/li&gt;
&lt;li&gt;brian cleary&lt;/li&gt;
&lt;li&gt;moomeme&lt;/li&gt;
&lt;li&gt;xash&lt;/li&gt;
&lt;li&gt;Jacques de Laval&lt;/li&gt;
&lt;li&gt;blank&lt;/li&gt;
&lt;li&gt;Joran Dirk Greef&lt;/li&gt;
&lt;li&gt;Rickard Gustafsson&lt;/li&gt;
&lt;li&gt;Mohamed&lt;/li&gt;
&lt;li&gt;Romain Beaumont&lt;/li&gt;
&lt;li&gt;Nate Dobbins&lt;/li&gt;
&lt;li&gt;Paul Anderson&lt;/li&gt;
&lt;li&gt;Jon Renner&lt;/li&gt;
&lt;li&gt;Karl Syvert Løland&lt;/li&gt;
&lt;li&gt;Stanley Zheng&lt;/li&gt;
&lt;li&gt;myfreeweb&lt;/li&gt;
&lt;li&gt;Dennis Furey&lt;/li&gt;
&lt;li&gt;Dana Davis&lt;/li&gt;
&lt;li&gt;Drew Carmichael&lt;/li&gt;
&lt;li&gt;Doug Thayer&lt;/li&gt;
&lt;li&gt;Henryk Gerlach&lt;/li&gt;
&lt;li&gt;David Pippenger&lt;/li&gt;
&lt;li&gt;Matthew Steele&lt;/li&gt;
&lt;li&gt;Alex Alex&lt;/li&gt;
&lt;li&gt;Andrew London&lt;/li&gt;
&lt;li&gt;Jirka Grunt&lt;/li&gt;
&lt;li&gt;Dillon A&lt;/li&gt;
&lt;li&gt;Yannik&lt;/li&gt;
&lt;li&gt;VilliHaukka&lt;/li&gt;
&lt;li&gt;Chris Castle&lt;/li&gt;
&lt;li&gt;Timothy Schumann&lt;/li&gt;
&lt;li&gt;Antonio D'souza&lt;/li&gt;
&lt;li&gt;Damien Dubé&lt;/li&gt;
&lt;li&gt;Dbzruler72&lt;/li&gt;
&lt;li&gt;Francisco Vallarino&lt;/li&gt;
&lt;li&gt;SP&lt;/li&gt;
&lt;li&gt;Silicas&lt;/li&gt;
&lt;li&gt;Falk Hüffner&lt;/li&gt;
&lt;li&gt;allan&lt;/li&gt;
&lt;li&gt;jose maria gonzalez ondina&lt;/li&gt;
&lt;li&gt;Adrian Boyko&lt;/li&gt;
&lt;li&gt;Benedikt Mandelkow&lt;/li&gt;
&lt;li&gt;Will Cassella&lt;/li&gt;
&lt;li&gt;Michael Weber&lt;/li&gt;
&lt;li&gt;Darren&lt;/li&gt;
&lt;li&gt;eliott&lt;/li&gt;
&lt;li&gt;Vladimir Kraus&lt;/li&gt;
&lt;li&gt;komu&lt;/li&gt;
&lt;li&gt;LeRoyce&lt;/li&gt;
&lt;li&gt;Jörg Sonnenberger&lt;/li&gt;
&lt;li&gt;Alexandru Nedel&lt;/li&gt;
&lt;li&gt;Oleg Alexeev&lt;/li&gt;
&lt;li&gt;Ilya Semyonov&lt;/li&gt;
&lt;li&gt;Brian&lt;/li&gt;
&lt;li&gt;Myles Byrne&lt;/li&gt;
&lt;li&gt;Jethro Nederhof&lt;/li&gt;
&lt;li&gt;Harris Brakmic&lt;/li&gt;
&lt;li&gt;Riking&lt;/li&gt;
&lt;li&gt;daurnimator&lt;/li&gt;
&lt;li&gt;Luke Paireepinart&lt;/li&gt;
&lt;li&gt;Paulius Šarka&lt;/li&gt;
&lt;li&gt;burtonageo&lt;/li&gt;
&lt;li&gt;Neil Wang&lt;/li&gt;
&lt;li&gt;Jason Pepas&lt;/li&gt;
&lt;li&gt;Chris&lt;/li&gt;
&lt;li&gt;Jedd Fenner&lt;/li&gt;
&lt;li&gt;Robin Trujillo&lt;/li&gt;
&lt;li&gt;Kristleifur Daðason&lt;/li&gt;
&lt;li&gt;Raphael Schweikert&lt;/li&gt;
&lt;li&gt;Jimmy Andrews&lt;/li&gt;
&lt;li&gt;Robin Eidissen&lt;/li&gt;
&lt;li&gt;Corentin Kerisit&lt;/li&gt;
&lt;li&gt;Jonathan Dahan&lt;/li&gt;
&lt;li&gt;Bruce Zeng&lt;/li&gt;
&lt;li&gt;Yasuhiro Fujii&lt;/li&gt;
&lt;li&gt;Micaiah Parker&lt;/li&gt;
&lt;li&gt;Rahul Nair&lt;/li&gt;
&lt;li&gt;Justin Voss&lt;/li&gt;
&lt;li&gt;Harm Aarts&lt;/li&gt;
&lt;li&gt;Dylan&lt;/li&gt;
&lt;li&gt;samuel Schneck&lt;/li&gt;
&lt;li&gt;Ayodele Akingbule&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Mon, 08 Apr 2019 23:31:48 +0000</pubDate>
<dc:creator>AndyKelley</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://ziglang.org/download/0.4.0/release-notes.html</dc:identifier>
</item>
<item>
<title>Notarizing Your App Before Distribution</title>
<link>https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution?language=objc</link>
<guid isPermaLink="true" >https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution?language=objc</guid>
<description>&lt;div readability=&quot;31&quot;&gt;
&lt;p&gt;Notarization gives users more confidence that the Developer ID-signed software you distribute has been checked by Apple for malicious components. Notarization is not App Review. The Apple notary service is an automated system that scans your software for malicious content, checks for code-signing issues, and returns the results to you quickly. If there are no issues, the notary service generates a ticket for you to staple to your software; the notary service also publishes that ticket online where Gatekeeper can find it.&lt;/p&gt;
&lt;p&gt;When the user first installs or runs your software, the presence of a ticket (either online or attached to the executable) tells Gatekeeper that Apple notarized the software. Gatekeeper then places descriptive information in the initial launch dialog to help the user make an informed choice about whether to launch the app.&lt;/p&gt;
&lt;img class=&quot;centered-block&quot; src=&quot;https://docs-assets.developer.apple.com/published/29a6af0be1/a95ea07d-aec7-4217-88d5-921e5c027b32.png&quot; srcset=&quot;https://docs-assets.developer.apple.com/published/29a6af0be1/a95ea07d-aec7-4217-88d5-921e5c027b32.png 2x&quot; alt=&quot;Gatekeeper lets the user know that Apple notarized the app being launched.&quot; width=&quot;412&quot; height=&quot;auto&quot;/&gt;&lt;p&gt;You can notarize several different types of software deliverables, including:&lt;/p&gt;
&lt;ul readability=&quot;-0.5&quot;&gt;&lt;li&gt;
&lt;p&gt;macOS apps&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Non-app bundles, such as kernel extensions&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Disk images (UDIF format)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flat installer packages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Notarization also protects your users if your Developer ID signing key is exposed. The notary service maintains an audit trail of the software distributed using your signing key. If you discover unauthorized versions of your software, you can work with Apple to revoke the tickets associated with those versions.&lt;/p&gt;
&lt;aside class=&quot;aside aside-important&quot; aria-label=&quot;important&quot; readability=&quot;6&quot;&gt;&lt;p class=&quot;aside-name&quot;&gt;Important&lt;/p&gt;
&lt;p&gt;Beginning in macOS 10.14.5, all new or updated kernel extensions and all software from developers new to distributing with Developer ID must be notarized in order to run. In a future version of macOS, notarization will be required by default for all software.&lt;/p&gt;
&lt;/aside&gt;&lt;/div&gt;
&lt;h3 id=&quot;3087727&quot;&gt;Prepare Your Software for Notarization&lt;/h3&gt;
&lt;div readability=&quot;21.312368972746&quot;&gt;
&lt;p&gt;Notarization requires Xcode 10 or later. Building a new app for notarization requires macOS 10.13.6 or later. Uploading and stapling an app requires macOS 10.12 or later.&lt;/p&gt;
&lt;p&gt;Apple's notary service requires you to adopt the following protections:&lt;/p&gt;
&lt;ul readability=&quot;9.3513931888545&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Enable code-signing for all of the executables you distribute.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.78703703703704&quot;&gt;
&lt;p&gt;Enable the Hardened Runtime capability for your executable targets, as described in &lt;a href=&quot;https://help.apple.com/xcode/mac/current/#/devf87a2ac8f&quot;&gt;Enable hardened runtime&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.8853754940711&quot;&gt;
&lt;p&gt;Use a “Developer ID” application, kernel extension, or installer certificate for your code-signing signature. (Don't use a Mac Distribution or local development certificate.) For more information, see &lt;a href=&quot;https://help.apple.com/xcode/mac/current/#/dev154b28f09&quot;&gt;Create, export, and delete signing certificates&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Include a secure timestamp with your code-signing signature. (The Xcode distribution workflow includes a secure timestamp by default. For custom workflows, include the &lt;code class=&quot;code-voice&quot;&gt;&lt;span&gt;--timestamp&lt;/span&gt;&lt;/code&gt; option when running the &lt;code class=&quot;code-voice&quot;&gt;&lt;span&gt;codesign&lt;/span&gt;&lt;/code&gt; tool.)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1.7437722419929&quot;&gt;
&lt;p&gt;Don’t include the &lt;code class=&quot;code-voice&quot;&gt;&lt;span&gt;com&lt;wbr/&gt;.apple&lt;wbr/&gt;.security&lt;wbr/&gt;.get-task-allow&lt;/span&gt;&lt;/code&gt; entitlement with the value set to any variation of &lt;code class=&quot;code-voice&quot;&gt;&lt;span&gt;true&lt;/span&gt;&lt;/code&gt;. If your software hosts third-party plug-ins and needs this entitlement to debug the plug-in in the context of a host executable, see &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/resolving_common_notarization_issues?language=objc#3087731&quot;&gt;Avoid the Get-Task-Allow Entitlement&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Link against the macOS 10.9 or later SDK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Apple recommends that you notarize all of the software that you’ve distributed, including older releases, and even software that doesn’t meet all of these requirements or that is unsigned. Apple’s notary service uses a variety of methods, including telemetry, to determine which of the above rules to relax for preexisting software. For more information, see &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution?language=objc#3087722&quot;&gt;Notarize Your Preexisting Software&lt;/a&gt;.&lt;/p&gt;
&lt;aside class=&quot;aside aside-important&quot; aria-label=&quot;important&quot; readability=&quot;6&quot;&gt;&lt;p class=&quot;aside-name&quot;&gt;Important&lt;/p&gt;
&lt;p&gt;Some preexisting software might not run properly after being successfully notarized. For example, Gatekeeper might find code signing issues that a relaxed notarization process didn’t enforce. Always review the notary log for any warnings, and test your software before distribution.&lt;/p&gt;
&lt;/aside&gt;&lt;/div&gt;
&lt;h3 id=&quot;3178095&quot;&gt;Add the Entitlements Needed by Plug-ins&lt;/h3&gt;
&lt;div readability=&quot;35.496553884712&quot;&gt;
&lt;p&gt;When you enable the extra security enforced by the hardened runtime, as notarization requires, this impacts both your app and any plug-ins that your app hosts. Plug-ins don’t declare their own entitlements. Instead, they inherit the entitlements of the host process. Therefore, a host app must include all the entitlements that prospective plug-ins require, even when the plug-ins are notarized separately.&lt;/p&gt;
&lt;p&gt;For example, if a plug-in employs deep integration with the host executable via C function pointer overrides, or uses a JavaScript engine for custom workflows, the host executable must declare the &lt;a class=&quot;symbol-name&quot; href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_allow-unsigned-executable-memory?language=objc&quot;&gt;&lt;code&gt;&lt;span&gt;Allow Unsigned Executable Memory Entitlement&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; or &lt;a class=&quot;symbol-name&quot; href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_allow-jit?language=objc&quot;&gt;&lt;code&gt;&lt;span&gt;Allow Execution of JIT-compiled Code Entitlement&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, respectively. In some cases, a plug-in fails to even load if the host executable lacks the proper entitlement.&lt;/p&gt;
&lt;p&gt;Also include resource access entitlements, like the Address Book or Location access entitlements, and the related purpose strings, that support your app’s plug-ins. For example, if a Print Dialog Extension (PDE) that provides fax services wants to access a user’s contact list, the host executable must declare the &lt;a class=&quot;symbol-name&quot; href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_personal-information_addressbook?language=objc&quot;&gt;&lt;code&gt;&lt;span&gt;Address Book Entitlement&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and include the &lt;a class=&quot;symbol-name&quot; href=&quot;https://developer.apple.com/documentation/bundleresources/information_property_list/nscontactsusagedescription?language=objc&quot;&gt;&lt;code&gt;&lt;span&gt;NSContacts&lt;wbr/&gt;Usage&lt;wbr/&gt;Description&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; purpose string in its &lt;a href=&quot;https://developer.apple.com/documentation/bundleresources/information_property_list?language=objc&quot;&gt;Information Property List&lt;/a&gt; for the plug-in to operate.&lt;/p&gt;
&lt;p&gt;For a complete list of hardened runtime entitlements, see &lt;a href=&quot;https://developer.apple.com/documentation/security/hardened_runtime_entitlements?language=objc&quot;&gt;Hardened Runtime Entitlements&lt;/a&gt;. For information about usage strings, see &lt;a href=&quot;https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy/accessing_protected_resources?language=objc&quot;&gt;Accessing Protected Resources&lt;/a&gt;.&lt;/p&gt;
&lt;aside class=&quot;aside aside-important&quot; aria-label=&quot;important&quot; readability=&quot;3.7898089171975&quot;&gt;&lt;p class=&quot;aside-name&quot;&gt;Important&lt;/p&gt;
&lt;p&gt;On macOS 10.14.x, for executables using the hardened runtime, PDEs load only if the host executable has the &lt;a class=&quot;symbol-name&quot; href=&quot;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_disable-library-validation?language=objc&quot;&gt;&lt;code&gt;&lt;span&gt;Disable Library Validation Entitlement&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;/div&gt;
&lt;h3 id=&quot;3087730&quot;&gt;Notarize Your App Automatically as Part of the Distribution Process&lt;/h3&gt;
&lt;div readability=&quot;32.238805970149&quot;&gt;
&lt;p&gt;Before distributing your app directly to customers, your Account Holder must sign the app with your Developer ID. Xcode’s Organizer window includes a workflow for generating a distributable version of your app. In Xcode 10 and later, this workflow includes an option to notarize your app automatically. To notarize your app using this workflow, do the following:&lt;/p&gt;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li&gt;
&lt;p&gt;Open your Xcode project.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Create an archive of your app.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Open Xcode's Organizer window.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;In the Archives tab, select the archive you created.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Click Distribute App to view the distribution options.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Choose Developer ID for your method of distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Next.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Choose Upload to send your archive to the Apple notary service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Next.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;img class=&quot;centered-block&quot; src=&quot;https://docs-assets.developer.apple.com/published/a857ce6120/e02fdecf-0018-46d8-a750-c0719d21e326.png&quot; srcset=&quot;https://docs-assets.developer.apple.com/published/a857ce6120/e02fdecf-0018-46d8-a750-c0719d21e326.png 2x&quot; alt=&quot;When distributing an app, choosing the upload option sends the app to Apple to be notarized.&quot; width=&quot;722&quot; height=&quot;auto&quot;/&gt;&lt;p&gt;When you click Next, Xcode uploads your archive to the notary service. When the upload is complete, the notary service begins the scanning process, which usually takes less than an hour. While the notary service scans your software, you can continue to prepare your archive for distribution. For example, you can export the archive and perform any final testing that you require prior to making your software available to customers.&lt;/p&gt;
&lt;p&gt;When the notarization process finishes, Xcode downloads the ticket and staples it to your archive. At that point, export your archive again to receive a distributable version of your software that includes the notary ticket.&lt;/p&gt;
&lt;p&gt;For more information about how to use the Xcode UI to upload your software, see &lt;a href=&quot;https://help.apple.com/xcode/mac/current/#/dev88332a81e&quot;&gt;Upload a macOS app to be notarized&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;3087722&quot;&gt;Notarize Your Preexisting Software&lt;/h3&gt;
&lt;div readability=&quot;19.555555555556&quot;&gt;
&lt;p&gt;Notarizing your preexisting software lets Gatekeeper warn users when they try to run it. It also helps the notary service distinguish your legitimate software from variants that have been tampered with. You can notarize an existing disk image, installer package, or ZIP archive containing your app.&lt;/p&gt;
&lt;p&gt;To notarize your preexisting software, do the following:&lt;/p&gt;
&lt;ol readability=&quot;3.5402414486922&quot;&gt;&lt;li readability=&quot;3.6376811594203&quot;&gt;
&lt;p&gt;Make Xcode 10 your active Xcode installation. (If you're not sure whether Xcode 10 is the active installation, use the &lt;code class=&quot;code-voice&quot;&gt;&lt;span&gt;xcode-select&lt;/span&gt;&lt;/code&gt; command-line to make it active. For information about how to use this tool, see the man page for it, as described in &lt;a href=&quot;https://developer.apple.com/documentation/os/reading_unix_manual_pages?language=objc&quot;&gt;Reading UNIX Manual Pages&lt;/a&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.60909090909091&quot;&gt;
&lt;p&gt;Upload your software to the Apple notary service, as described in &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/customizing_the_notarization_workflow?language=objc#3087734&quot;&gt;Upload Your App to the Notarization Service&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.65137614678899&quot;&gt;
&lt;p&gt;Staple the returned ticket to your existing software, as described in &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/customizing_the_notarization_workflow?language=objc#3087720&quot;&gt;Staple the Ticket to Your Distribution&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;aside class=&quot;aside aside-note&quot; role=&quot;note&quot; readability=&quot;8&quot;&gt;&lt;p class=&quot;aside-name&quot;&gt;Note&lt;/p&gt;
&lt;p&gt;You don’t need to rebuild or re-sign your software before submitting it for notarization, but you must use Xcode 10 to perform the notarization steps. Submit everything you’ve previously released, as well as your most recent version, to protect users who continue to use older versions of your software.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;For tips on how to resolve issues that can occur during notarization, see &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/resolving_common_notarization_issues?language=objc&quot;&gt;Resolving Common Notarization Issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&quot;3087728&quot;&gt;Add a Notarization Step to Your Build Scripts&lt;/h3&gt;
&lt;div readability=&quot;13.694117647059&quot;&gt;
&lt;p&gt;If you use an automated build system, you can integrate the notarization process into your existing build scripts. The &lt;code class=&quot;code-voice&quot;&gt;&lt;span&gt;altool&lt;/span&gt;&lt;/code&gt; and &lt;code class=&quot;code-voice&quot;&gt;&lt;span&gt;stapler&lt;/span&gt;&lt;/code&gt; command-line tools (included with Xcode) allow you to upload your software to the Apple notary service, and to staple the resulting ticket to your executable.&lt;/p&gt;
&lt;p&gt;For information about how to incorporate notarization into your custom build scripts, see &lt;a href=&quot;https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution/customizing_the_notarization_workflow?language=objc&quot;&gt;Customizing the Notarization Workflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Mon, 08 Apr 2019 22:21:31 +0000</pubDate>
<dc:creator>tambourine_man</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://developer.apple.com/documentation/security/notarizing_your_app_before_distribution?language=objc</dc:identifier>
</item>
<item>
<title>Mathematics and Computation [pdf]</title>
<link>https://www.math.ias.edu/files/Website03-25-19.pdf</link>
<guid isPermaLink="true" >https://www.math.ias.edu/files/Website03-25-19.pdf</guid>
<description>&lt;a href=&quot;https://www.math.ias.edu/files/Website03-25-19.pdf&quot;&gt;Download PDF&lt;/a&gt;</description>
<pubDate>Mon, 08 Apr 2019 22:16:22 +0000</pubDate>
<dc:creator>MAXPOOL</dc:creator>
<dc:language>en</dc:language>
<dc:format>application/pdf</dc:format>
<dc:identifier>https://www.math.ias.edu/files/Website03-25-19.pdf</dc:identifier>
</item>
<item>
<title>No one, not even the Secret Service, should randomly plug in a strange USB stick</title>
<link>https://techcrunch.com/2019/04/08/secret-service-mar-a-lago/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/04/08/secret-service-mar-a-lago/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;If you’ve been on Twitter today, you’ve probably seen one story &lt;a href=&quot;https://www.miamiherald.com/news/politics-government/article228963409.html&quot;&gt;making the rounds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The case follows a Chinese national, Yujing Zhang, who is accused of trying to sneak into President Trump’s private Florida resort Mar-a-Largo last month. She was caught by the Secret Service with four cellphones, a laptop, cash, an external hard drive, a signals detector to spot hidden cameras, and a thumb drive.&lt;/p&gt;
&lt;p&gt;The arrest sparked new concerns about the president’s security amid concerns that foreign governments have tried to infiltrate the resort.&lt;/p&gt;
&lt;p&gt;Allegations aside and notwithstanding, what sent alarm bells ringing was how the Secret Service handled the USB drive, which cannot be understated — it was not good.&lt;/p&gt;
&lt;p&gt;From the &lt;a href=&quot;https://www.miamiherald.com/news/politics-government/article228963409.html&quot;&gt;Miami Herald&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;14&quot;&gt;
&lt;p&gt;Secret Service agent Samuel Ivanovich, who interviewed Zhang on the day of her arrest, testified at the hearing. He stated that when another agent put Zhang’s thumb-drive into his computer, it immediately began to install files, a “very out-of-the-ordinary” event that he had never seen happen before during this kind of analysis. The agent had to immediately stop the analysis to halt any further corruption of his computer, Ivanovich said. The analysis is ongoing but still inconclusive, he testified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What’s the big deal, you might think? You might not think it, but USB keys are a surprisingly easy and effective way to install malware — or even destroy computers. In 2016, security researcher Elie Bursztein found dropping malware-laden USB sticks &lt;a href=&quot;https://elie.net/talk/does-dropping-usb-drives-really-work/&quot;&gt;was an “effective” way&lt;/a&gt; of tricking someone into plugging it into their computer. As soon as the drive plugs in, it can install malware that can remotely surveil and control the affected device — and spread throughout a network. Some USB drives can even &lt;a href=&quot;https://techcrunch.com/2015/03/12/this-usb-drive-can-nuke-a-computer/&quot;&gt;fry the innards&lt;/a&gt; of some computers.&lt;/p&gt;
&lt;p&gt;A Secret Service spokesperson said the device was “standalone,” but wouldn’t be pressed on details. It remains unknown why the agent “immediately” pulled out the drive in a panic.&lt;/p&gt;
&lt;p&gt;It didn’t take long for security folks to seize on the security snafu.&lt;/p&gt;
&lt;p&gt;Jake Williams, founder of Rendition Infosec and former NSA hacker, criticized the agent’s actions “threatened his own computing system and possibly the rest of the Secret Service network.”&lt;/p&gt;
&lt;p&gt;“It’s entirely possible that the sensitivities over determining whether Zhang was targeting Mar-a-Lago or the president — or whether she was a legitimate guest or member — may have contributed to the agent’s actions on the ground,” he said, “Never before has the Secret Service had to deal with this type of scenario and they’re probably still working out the playbook.”&lt;/p&gt;
&lt;p&gt;Williams said the best way to forensically examine a suspect USB drive is by plugging the device into an isolated Linux-based computer that doesn’t automatically mount the drive to the operating system.&lt;/p&gt;
&lt;p&gt;“We would then create a forensic image of the USB and extract any malware for analysis in the lab,” he said. “While there is still a very small risk that the malware targets Linux, that’s not the normal case.”&lt;/p&gt;

</description>
<pubDate>Mon, 08 Apr 2019 21:29:42 +0000</pubDate>
<dc:creator>MagicPropmaker</dc:creator>
<og:title>No one, not even the Secret Service, should randomly plug in a strange USB stick</og:title>
<og:description>If you’ve been on Twitter today, you’ve probably seen one story making the rounds. So the Secret Service stuck Zhang's thumbdrive into their computer. https://t.co/0T6LAfOtEl pic.twitter.com/RSfUgw4I4n — Chris Wysopal (@WeldPond) April 8, 2019 The case follows a Chinese nation…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2019/04/GettyImages-1140183771.jpg?w=600</og:image>
<og:url>http://social.techcrunch.com/2019/04/08/secret-service-mar-a-lago/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/04/08/secret-service-mar-a-lago/</dc:identifier>
</item>
<item>
<title>US Workers Are Highly Taxed If You Count Premiums</title>
<link>https://www.peoplespolicyproject.org/2019/04/08/us-workers-are-highly-taxed-when-you-count-health-premiums/</link>
<guid isPermaLink="true" >https://www.peoplespolicyproject.org/2019/04/08/us-workers-are-highly-taxed-when-you-count-health-premiums/</guid>
<description>&lt;img src=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2017/09/33502815650_7393421e4c_k-e1505847872759-678x381.jpg&quot; alt=&quot;&quot; title=&quot;Insurance&quot;/&gt; Got Credit / Flickr
&lt;p&gt;Comparing labor tax rates across countries is a tricky endeavor. Some countries rely mostly on income and payroll taxes charged to workers, others on payroll taxes charged to employers, and still others on compelling workers and employers to pay private parties who provide pension and health insurance products. To get an apples-to-apples comparison, you have to normalize all of these various schemes into a single labor tax concept that actually reflects just how much labor compensation is being put towards compulsory payments of one sort or another.&lt;/p&gt;&lt;p&gt;The OECD produces a number of &lt;a href=&quot;http://www.oecd.org/ctp/taxing-wages-20725124.htm&quot;&gt;Taxing Wages&lt;/a&gt; publications each year that permit this sort of cross-country comparison. Most of these publications focus on converting formal labor taxes into a standardized format that allows researchers to calculate comparable “labor tax wedges” across the various tax schemes.&lt;/p&gt;
&lt;p&gt;But formal labor taxes are limited because they omit “non-tax compulsory payments” (NTCPs). NTCPs are payments workers and employers are legally compelled to pay to private parties. NTCPs are no different from taxes except that NTCPs are made to private corporations like health insurance companies rather than to the government.&lt;/p&gt;
&lt;p&gt;Occasionally the OECD publishes information that combines formal taxes and NTCPs together in order to allow researchers to compare “compulsory payment rates” across countries. The last time they did this was in &lt;a href=&quot;https://www.oecd.org/tax/tax-policy/non-tax-compulsory-payments.pdf&quot;&gt;2018&lt;/a&gt;. The 2018 OECD publication acknowledges that employer health insurance premiums in the United States are NTCPs because they are mandated under Obamacare’s employer and individual mandates. But the publication nevertheless excludes employer health premiums from its US NTCP calculations because the authors say these premiums cannot be modelled to their satisfaction.&lt;/p&gt;
&lt;p&gt;The apparent reason these mandated premiums are incompatible with the OECD’s Taxing Wages model is that they are open-ended payments: employers and employees have to buy private insurance regardless of its cost. If the mandated premiums were set by law as a fixed sum per worker or percentage of payroll as in other countries, then they could be included in the OECD’s figures.&lt;/p&gt;
&lt;h2&gt;Estimating the US Compulsory Payment Rate&lt;/h2&gt;
&lt;p&gt;The OECD may not be able to include employer-based health insurance premiums into its model, but I certainly can. And when I add them into the OECD model, I find that the average American worker has one of the highest compulsory payment rates in the developed world.&lt;/p&gt;
&lt;p&gt;For this analysis, I take the information from the OECD’s Taxing Wages &lt;a href=&quot;https://stats.oecd.org/index.aspx?DataSetCode=AWCOMP&quot;&gt;model&lt;/a&gt; and combine it with &lt;a href=&quot;https://meps.ahrq.gov/mepsweb/data_stats/quick_tables_results.jsp?component=2&amp;amp;subcomponent=2&amp;amp;year=2017&amp;amp;tableSeries=-1&amp;amp;tableSubSeries=CDE&amp;amp;searchText=&amp;amp;searchMethod=1&amp;amp;Action=Search&quot;&gt;data&lt;/a&gt; from the Medical Expenditure Panel Survey (MEPS). The MEPS data shows the average premium for employer insurance, broken down by type of coverage (family or single) and payer (employer or employee). By counting those average premiums as NTCPs, we can compute a compulsory payment rate that is comparable to the compulsory payment rates the OECD produces for other countries.&lt;/p&gt;
&lt;p&gt;To be clear about what I am doing here, the following graph provides a detailed breakdown of the difference between what we normally think of as “employee taxes” and the OECD concept of “compulsory payments.” This graph is for a married wage-earner with two kids who earns the average wage and has a family insurance plan through their employer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Burden-of-Average-Wage-Worker-2.png&quot; alt=&quot;&quot; width=&quot;822&quot; height=&quot;485&quot; class=&quot;alignnone size-full wp-image-5171&quot; srcset=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Burden-of-Average-Wage-Worker-2.png 822w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Burden-of-Average-Wage-Worker-2-300x177.png 300w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Burden-of-Average-Wage-Worker-2-768x453.png 768w&quot; sizes=&quot;(max-width: 822px) 100vw, 822px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you are going to count employer-side payroll taxes and employer premium contributions towards the labor tax burden, then you also need to count those things as worker pay. The following graph mirrors the one above except it shows what the average wage really is when you count all of the employer’s labor costs, not just the cash it pays to employees.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Pay-of-the-Average-Wage-Worker-4.png&quot; alt=&quot;&quot; width=&quot;933&quot; height=&quot;551&quot; class=&quot;alignnone size-full wp-image-5202&quot; srcset=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Pay-of-the-Average-Wage-Worker-4.png 933w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Pay-of-the-Average-Wage-Worker-4-300x177.png 300w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Pay-of-the-Average-Wage-Worker-4-768x454.png 768w&quot; sizes=&quot;(max-width: 933px) 100vw, 933px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Finally, we can divide each labor tax concept by each pay concept to show the difference between what we often think of as the “employee tax rate” and the actual “compulsory payment rate” (share of labor compensation going to tax and NTCPs).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Rate-for-Average-Wage-Worker-2.png&quot; alt=&quot;&quot; width=&quot;817&quot; height=&quot;505&quot; class=&quot;alignnone size-full wp-image-5205&quot; srcset=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Rate-for-Average-Wage-Worker-2.png 817w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Rate-for-Average-Wage-Worker-2-300x185.png 300w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Various-Measures-of-the-Labor-Tax-Rate-for-Average-Wage-Worker-2-768x475.png 768w&quot; sizes=&quot;(max-width: 817px) 100vw, 817px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The comprehensive measure shows that a married couple with two kids that makes the average wage pays over 43 percent of their income in compulsory payments of one sort or another. Health premiums are 26.4 of the 43.2 points.&lt;/p&gt;
&lt;p&gt;Finally, we can go back to the OECD NTCP data and compare the US to other developed countries. When we do that, we find that only the Netherlands — with its compulsory private health insurance and compulsory private pension — has a higher labor tax burden by this measure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Labor-Taxes-and-Compulsory-Payments-as-Percent-of-Average-Wage-2.png&quot; alt=&quot;&quot; width=&quot;783&quot; height=&quot;484&quot; class=&quot;alignnone size-full wp-image-5203&quot; srcset=&quot;https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Labor-Taxes-and-Compulsory-Payments-as-Percent-of-Average-Wage-2.png 783w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Labor-Taxes-and-Compulsory-Payments-as-Percent-of-Average-Wage-2-300x185.png 300w, https://www.peoplespolicyproject.org/wp-content/uploads/2019/04/Labor-Taxes-and-Compulsory-Payments-as-Percent-of-Average-Wage-2-768x475.png 768w&quot; sizes=&quot;(max-width: 783px) 100vw, 783px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;If you want to know what it is like to pay income taxes like they do in Europe, then looking closely at your paystub would be a good start. We don’t pay as many formal taxes as they do, but when you bring in payments we are compelled to pay and that are deducted straight out of our paychecks just like taxes are, it really does not look that much different, at least as far as labor taxes are concerned.&lt;/p&gt;
&lt;p&gt;Ultimately, this is a long exercise in pointing out the obvious: American workers already pay more than enough money to provide good health care to everyone in the country. It’s just that they pay it into a private insurance system that wastes large portions of it on rents and administrative redundancy. As the Mercatus Center noted &lt;a href=&quot;https://www.peoplespolicyproject.org/2018/07/30/mercatus-study-finds-medicare-for-all-saves-2-trillion/&quot;&gt;last year&lt;/a&gt;, by implementing a Medicare for All system, the US could insure 30 million more people, provide dental, vision, and hearing coverage to everyone, and virtually eliminate out-of-pocket expenses, all while saving $2 trillion over the first decade of implementation.&lt;/p&gt;
</description>
<pubDate>Mon, 08 Apr 2019 21:24:40 +0000</pubDate>
<dc:creator>viburnum</dc:creator>
<og:url>https://www.peoplespolicyproject.org/2019/04/08/us-workers-are-highly-taxed-when-you-count-health-premiums/</og:url>
<og:type>article</og:type>
<og:title>US Workers Are Highly Taxed If You Count Premiums</og:title>
<og:description>Only the Netherlands has a higher average compulsory payment wedge than the US.</og:description>
<og:image>https://www.peoplespolicyproject.org/wp-content/uploads/2017/09/33502815650_7393421e4c_k-e1505847872759.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.peoplespolicyproject.org/2019/04/08/us-workers-are-highly-taxed-when-you-count-health-premiums/</dc:identifier>
</item>
</channel>
</rss>