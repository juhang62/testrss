<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Cancelling Dropbox Pro is hard</title>
<link>https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83</link>
<guid isPermaLink="true" >https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83&quot;&gt;https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19002282&quot;&gt;https://news.ycombinator.com/item?id=19002282&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 208&lt;/p&gt;
&lt;p&gt;# Comments: 151&lt;/p&gt;
</description>
<pubDate>Fri, 25 Jan 2019 20:39:47 +0000</pubDate>
<dc:creator>riboflavin</dc:creator>
<og:type>website</og:type>
<og:url>https://www.useloom.com</og:url>
<og:title>Loom | Send a video. Not a thousand words.</og:title>
<og:description>Get your message across with instantly shareable videos for work. Capture your screen, record your front-facing camera, and narrate it all at once, then instantly share with a simple link.</og:description>
<og:image>https://www.useloom.com/assets/img/og/loom-banner.png</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.useloom.com/share/8d148b2be54444909e8408398ab07f83</dc:identifier>
</item>
<item>
<title>Oslo made its city center basically car-free</title>
<link>https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free#nws=mcnewsletter</link>
<guid isPermaLink="true" >https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free#nws=mcnewsletter</guid>
<description>&lt;div readability=&quot;15&quot;&gt;
&lt;p&gt;If you decide to drive in downtown Oslo, be forewarned: You won’t be able to park on the street. By the beginning of this year, the city finished removing more than 700 parking spots–replacing them with bike lanes, plants, tiny parks, and benches–as a major step toward a vision of a car-free city center.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;ad-wrapper ad-wrapper--mobileparallax_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_mid_article_inject&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;85.34701912261&quot;&gt;
&lt;p&gt;Without those parking spots, and with cars banned completely on some streets, few people are driving in the area. “There are basically no cars,” says Axel Bentsen, CEO of &lt;a href=&quot;https://urbansharing.com/&quot;&gt;Urban Sharing&lt;/a&gt;, the company that runs &lt;a href=&quot;https://oslobysykkel.no/&quot;&gt;Oslo City Bike&lt;/a&gt;, the local bike-share system. The city’s changes are designed, in part, to help improve air quality and fight climate change, but the difference in the quality of life is more immediate. “The city feels different faster than you can feel the difference in [cleaner air],” he says. “You can see that you’re actually reclaiming the space and can use it for other purposes than parking cars.”&lt;/p&gt;
&lt;p&gt;Oslo first pedestrianized some streets in the city center in the 1970s, and invested heavily in public transportation in the 1980s. In 2015, when a progressive political coalition came to power in the city council, they started planning a more significant transformation. At first, they called for a full ban on cars because the majority of residents in the city center didn’t drive. But when business owners objected, worried that they’d lose customers and have problems with deliveries, the government changed focus to remove parking spots–a slightly more gradual approach. For now, there are still parking garages on the periphery of the center.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-large wp-image-90295216 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;350&quot; sizes=&quot;(max-width: 525px) 100vw, 525px&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2019/01/i-1-90294948-in-osloand8217s-nearly-car-free-city-center-parking-spots-are-now-bike-lanes.jpg&quot;/&gt;[Photo: Åsmund Holien Mo/Urban Sharing]A few spots are left, converted into parking for disabled drivers or EV charging, and some streets are open for delivery trucks for a couple of hours in the morning. Emergency vehicles still have access. But other drivers have to park in garages, and traffic restrictions help nudge drivers who don’t need to go through the city center to take a ring road around it instead. In a new zoning plan, the city is taking its intentions further, giving pedestrians, cyclists, and public transportation greater priority than private cars, and planning a network of pedestrian zones that are fully car-free.&lt;/p&gt;
&lt;p&gt;“Cities, like Oslo, have been built for cars for several decades, and it’s about time we change it,” Hanne Marcussen, Oslo’s vice mayor of urban development, said in an email. “I think it is important that we all think about what kind of cities we want to live in. I am certain that when people imagine their ideal city, it would not be a dream of polluted air, cars jammed in endless traffic, or streets filled up with parked cars.”&lt;/p&gt;
&lt;p&gt;To help support the shift, the city made “massive improvements in public transport and making cycling safe and comfortable,” says Rune Gjøs, Oslo’s head of cycling. The city is adding new trams and metro lines and more frequent departures, and lowering the cost of tickets. For the last few years, the city has also been quickly building out a better-connected bike network, converting parking to bright-red bike lanes. It handed out grants to help citizens buy electric bikes. The city bike-share system has quickly grown, tripling to nearly 3 million trips a year between 2015 and 2018. The system usually closes in the winter, but it ran a pilot this winter using bikes with spiked tires. It also tested offering cargo bikes.&lt;/p&gt;
&lt;img class=&quot;size-large wp-image-90295218 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;350&quot; sizes=&quot;(max-width: 525px) 100vw, 525px&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2019/01/i-2-90294948-in-osloand8217s-nearly-car-free-city-center-parking-spots-are-now-bike-lanes.jpg&quot;/&gt;[Photo: Åsmund Holien Mo/Urban Sharing]
&lt;p&gt;As more people bike, that opens up room on overcrowded public transit. “Usually when you have these discussions you say, ‘Oh, we need bikes to replace cars,’ but there’s a missing link there, and that’s public transit,” says Bentsen. “What we see is that actually we take people out of the bus and onto the bike and walking, which leaves room for people to leave their car and take the bus.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--mobilerectangle_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;41&quot;&gt;
&lt;p&gt;The changes, unsurprisingly, have been met with some resistance, both from car owners and businesses. But while business owners initially worried about the city creating a ghost town that no one would visit, the opposite seems to be true; as in other cities that have converted some streets to pedestrian-only areas, the areas in Oslo that have been pedestrianized are some of the most popular parts of the city, Marcussen says. Last fall, after hundreds of parking spots had been removed, the city found that it had 10% more pedestrians in the center than the year before. “So that is telling me that we are doing something right,” she says.&lt;/p&gt;
&lt;p&gt;“Changing habits will always be challenging,” she says. “Cities have been built for cars for many decades, and the car has been seen as a status symbol, and I guess it still is for some people. We need to plan our cities better for the future so that the private car is not setting the premise for how we build our cities anymore. So in new developments, we are trying to make sure it’s easy for those who move into their new home to live without their own private car.”&lt;/p&gt;
&lt;p&gt;Several other cities are also working to reduce car use, such as Madrid, which limits access to the city center for anyone other than the people who live there. Other cities will follow. “I am absolutely certain that in the future, the private car will take up much less space in the cities,” says Marcussen. “I hope that other cities will be inspired by us to create their own car-free city center. I think this will become an increasingly important issue as we see more and more clearly that letting private cars take up so much of a very limited space within city centers is just not very efficient. At the same time, we are learning more about how pollution affects those of us who live in the cities, especially children. A couple of decades ago, it was perfectly normal to smoke cigarettes inside. Today, very few would do that. I think it’s the same with cars in the city center: One day we will look back and ask ourselves why we ever thought that was a good idea.”&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_recommendationlink&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Fri, 25 Jan 2019 17:20:16 +0000</pubDate>
<dc:creator>prostoalex</dc:creator>
<og:type>article</og:type>
<og:title>What happened when Oslo decided to make its downtown basically car-free?</og:title>
<og:url>https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free</og:url>
<og:description>It was a huge success: Parking spots are now bike lanes, transit is fast and easy, and the streets (and local businesses) are full of people.</og:description>
<og:image>https://images.fastcompany.net/image/upload/w_1280,f_auto,q_auto,fl_lossy/wp-cms/uploads/2019/01/p-1-90294948-in-osloand8217s-nearly-car-free-city-center-parking-spots-are-now-bike-lanes.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fastcompany.com/90294948/what-happened-when-oslo-decided-to-make-its-downtown-basically-car-free</dc:identifier>
</item>
<item>
<title>Practical Deep Learning for Coders 2019</title>
<link>https://www.fast.ai/2019/01/24/course-v3/</link>
<guid isPermaLink="true" >https://www.fast.ai/2019/01/24/course-v3/</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;Written: 24 Jan 2019 by &lt;em&gt;Jeremy Howard&lt;/em&gt;&lt;/span&gt;
&lt;p&gt;Launching today, the 2019 edition of &lt;a href=&quot;http://course.fast.ai&quot;&gt;Practical Deep Learning for Coders&lt;/a&gt;, the third iteration of the course, is 100% new material, including applications that have never been covered by an introductory deep learning course before (with some techniques that haven’t even been published in academic papers yet). There are seven lessons, each around 2 hours long, and you should plan to spend about 10 hours on assignments for each lesson. &lt;a href=&quot;https://course.fast.ai/start_gcp.html&quot;&gt;Google Cloud&lt;/a&gt; and &lt;a href=&quot;https://course.fast.ai/start_azure.html&quot;&gt;Microsoft Azure&lt;/a&gt; have integrated all you need for the courses into their GPU-based platforms, and there are “one-click” platforms available too, such as &lt;a href=&quot;https://course.fast.ai/start_crestle.html&quot;&gt;Crestle&lt;/a&gt; and &lt;a href=&quot;https://course.fast.ai/start_gradient.html&quot;&gt;Gradient&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The course assumes you have at least a year of coding experience (preferably in Python, although experienced coders will be able to pick Python up as they go; we have a list of &lt;a href=&quot;https://forums.fast.ai/t/recommended-python-learning-resources/26888&quot;&gt;python learning resources&lt;/a&gt; available), and have completed high-school math (some university-level math is introduced as needed during the course). Many people who have completed the course tell us it takes a lot of work, but it’s one of the most rewarding things they’ve done; we strongly suggest you get involved with the course’s &lt;a href=&quot;https://forums.fast.ai/c/part1-v3&quot;&gt;active online community&lt;/a&gt; to help you complete your journey.&lt;/p&gt;
&lt;p&gt;After the first lesson you’ll be able to train a state-of-the-art image classification model on your own data. After completing this lesson, some students from the in-person version of this course (where this material was recorded) published new state-of-the-art results in various domains! The focus for the first half of the course is on &lt;em&gt;practical techniques&lt;/em&gt;, showing only the &lt;em&gt;theory&lt;/em&gt; required to actually use these techniques in practice. Then, in the second half of the course, we dig deeper and deeper into the theory, until by the final lesson we will build and train a “resnet” neural network from scratch which approaches state-of-the-art accuracy.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;480&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson1-overview.png&quot; alt=&quot;Some application examples from the course&quot;/&gt; Some application examples from the course
&lt;p&gt;The key applications covered are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Computer vision (e.g. classify pet photos by breed)
&lt;ul&gt;&lt;li&gt;Image classification&lt;/li&gt;
&lt;li&gt;Image localization (segmentation and activation maps)&lt;/li&gt;
&lt;li&gt;Image key-points&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NLP (e.g. movie review sentiment analysis)
&lt;ul&gt;&lt;li&gt;Language modeling&lt;/li&gt;
&lt;li&gt;Document classification&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tabular data (e.g. sales prediction)
&lt;ul&gt;&lt;li&gt;Categorical data&lt;/li&gt;
&lt;li&gt;Continuous data&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Collaborative filtering (e.g. movie recommendation)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We also cover all the necessary foundations for these applications.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7-topics.png&quot; alt=&quot;Foundations covered in the course&quot;/&gt; Foundations covered in the course
&lt;p&gt;We teach using the &lt;a href=&quot;https://pytorch.org/&quot;&gt;PyTorch&lt;/a&gt; library, which is the most modern and flexible widely-used library available, and we’ll also use the &lt;a href=&quot;https://github.com/fastai/fastai&quot;&gt;fastai&lt;/a&gt; wrapper for PyTorch, which makes it easier to access recommended best practices for training deep learning models (whilst making all the underlying PyTorch functionality directly available too). We think fastai is great, but we’re biased because we made it… but it’s the only general deep learning toolkit featured on pytorch.org, has over 10,000 GitHub stars, and is used in many competition victories, academic papers, and top university courses, so it’s not just us that like it! Note that the concepts you learn will apply equally well to any work you want to do with Tensorflow/keras, CNTK, MXNet, or any other deep learning library; it’s the concepts which matter. Learning a new library just takes a few days if you understand the concepts well.&lt;/p&gt;
&lt;p&gt;One particularly useful addition this year is that we now have a super-charged video player, thanks to the great work of &lt;a href=&quot;http://zachcaceres.com/now/&quot;&gt;Zach Caceres&lt;/a&gt;. It allows you to search the lesson transcripts, and jump straight to the section of the video that you find. It also shows links to other lessons, and the lesson summary and resources, in collapsible panes (it doesn’t work well on mobile yet however, so if you want to watch on mobile you can use &lt;a href=&quot;https://www.youtube.com/playlist?list=PLfYUBJiXbdtSIJb-Qd3pw0cqCbkGeS0xn&quot;&gt;this Youtube playlist&lt;/a&gt;). And an extra big thanks to &lt;a href=&quot;https://sgugger.github.io/&quot;&gt;Sylvain Gugger&lt;/a&gt;, who has been instrumental in the development of both the course and the fastai library—we’re very grateful to Amazon Web Services for sponsoring Sylvain’s work.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/videos.png&quot; alt=&quot;fast.ai's video player with searchable timeline&quot;/&gt; fast.ai's video player with searchable timeline
&lt;p&gt;If you’re interested in giving it a go, &lt;a href=&quot;http://course.fast.ai&quot;&gt;click here&lt;/a&gt; to go to the course web site. Now let’s look at each lesson in more detail.&lt;/p&gt;
&lt;h2 id=&quot;lesson-1-image-classification&quot;&gt;Lesson 1: Image classification&lt;/h2&gt;
&lt;p&gt;The most important outcome of lesson 1 is that we’ll have trained an image classifier which can recognize pet breeds at state-of-the-art accuracy. The key to this success is the use of &lt;em&gt;transfer learning&lt;/em&gt;, which will be a fundamental platform for much of this course. We’ll also see how to analyze the model to understand its failure modes. In this case, we’ll see that the places where the model is making mistakes are in the same areas that even breeding experts can make mistakes.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;480&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson1.png&quot; alt=&quot;Training and analyzing a pet breed classifier&quot;/&gt; Training and analyzing a pet breed classifier
&lt;p&gt;We’ll discuss the overall approach of the course, which is somewhat unusual in being &lt;em&gt;top-down&lt;/em&gt; rather than &lt;em&gt;bottom-up&lt;/em&gt;. So rather than starting with theory, and only getting to practical applications later, we start instead with practical applications, and then gradually dig deeper and deeper into them, learning the theory as needed. This approach takes more work for teachers to develop, but it’s been shown to help students a lot, for example in &lt;a href=&quot;https://www.gse.harvard.edu/news/uk/09/01/education-bat-seven-principles-educators&quot;&gt;education research at Harvard&lt;/a&gt; by David Perkins.&lt;/p&gt;
&lt;p&gt;We also discuss how to set the most important &lt;em&gt;hyper-parameter&lt;/em&gt; when training neural networks: the &lt;em&gt;learning rate&lt;/em&gt;, using Leslie Smith’s fantastic &lt;em&gt;learning rate finder&lt;/em&gt; method. Finally, we’ll look at the important but rarely discussed topic of &lt;em&gt;labeling&lt;/em&gt;, and learn about some of the features that fastai provides for allowing you to easily add labels to your images.&lt;/p&gt;
&lt;p&gt;Note that to follow along with the lessons, you’ll need to connect to a cloud GPU provider which has the fastai library installed (recommended; it should take only 5 minutes or so, and cost under $0.50/hour), or set up a computer with a suitable GPU yourself (which can take days to get working if you’re not familiar with the process, so we don’t recommend it until later). You’ll also need to be familiar with the basics of the &lt;em&gt;Jupyter Notebook&lt;/em&gt; environment we use for running deep learning experiments. Up to date tutorials and recommendations for these are available from the &lt;a href=&quot;http://course.fast.ai&quot;&gt;course website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;lesson-2-data-cleaning-and-production-sgd-from-scratch&quot;&gt;Lesson 2: Data cleaning and production; SGD from scratch&lt;/h2&gt;
&lt;p&gt;We start today’s lesson by learning how to build your own image classification model using your own data, including topics such as:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Image collection&lt;/li&gt;
&lt;li&gt;Parallel downloading&lt;/li&gt;
&lt;li&gt;Creating a validation set, and&lt;/li&gt;
&lt;li&gt;Data cleaning, using the model to help us find data problems.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’ll demonstrate all these steps as I create a model that can take on the vital task of differentiating teddy bears from grizzly bears. Once we’ve got our data set in order, we’ll then learn how to productionize our teddy-finder, and make it available online.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson3-b.png&quot; alt=&quot;Putting your model in production&quot;/&gt; Putting your model in production
&lt;p&gt;We’ve had some great additions since this lesson was recorded, so be sure to check out:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;em&gt;production starter kits&lt;/em&gt; on the course web site, such as &lt;a href=&quot;https://course.fast.ai/deployment_render.html&quot;&gt;this one&lt;/a&gt; for deploying to Render.com&lt;/li&gt;
&lt;li&gt;The new interactive GUI in the lesson notebook for using the model to find and fix mislabeled or incorrectly-collected images.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the second half of the lesson we’ll train a simple model from scratch, creating our own &lt;em&gt;gradient descent&lt;/em&gt; loop. In the process, we’ll be learning lots of new jargon, so be sure you’ve got a good place to take notes, since we’ll be referring to this new terminology throughout the course (and there will be lots more introduced in every lesson from here on).&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson2.gif&quot; alt=&quot;Gradient descent in action&quot;/&gt; Gradient descent in action
&lt;h2 id=&quot;lesson-3-data-blocks-multi-label-classification-segmentation&quot;&gt;Lesson 3: Data blocks; Multi-label classification; Segmentation&lt;/h2&gt;
&lt;p&gt;Lots to cover today! We start lesson 3 looking at an interesting dataset: Planet’s &lt;a href=&quot;https://www.kaggle.com/c/planet-understanding-the-amazon-from-space&quot;&gt;Understanding the Amazon from Space&lt;/a&gt;. In order to get this data into the shape we need it for modeling, we’ll use one of fastai’s most powerful (and unique!) tools: the &lt;a href=&quot;https://docs.fast.ai/data_block.html&quot;&gt;data block API&lt;/a&gt;. We’ll be coming back to this API many times over the coming lessons, and mastery of it will make you a real fastai superstar! Once you’ve finished this lesson, if you’re ready to learn more about the data block API, have a look at this great article: &lt;a href=&quot;https://blog.usejournal.com/finding-data-block-nirvana-a-journey-through-the-fastai-data-block-api-c38210537fe4&quot;&gt;Finding Data Block Nirvana&lt;/a&gt;, by Wayde Gilliam.&lt;/p&gt;
&lt;p&gt;One important feature of the Planet dataset is that it is a &lt;em&gt;multi-label&lt;/em&gt; dataset. That is: each satellite image can contain &lt;em&gt;multiple&lt;/em&gt; labels, whereas previous datasets we’ve looked at have had exactly one label per image. We’ll look at what changes we need to make to work with multi-label datasets.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson3-camvid.png&quot; alt=&quot;The result of our image segmentation model&quot;/&gt; The result of our image segmentation model
&lt;p&gt;Next, we will look at &lt;em&gt;image segmentation&lt;/em&gt;, which is the process of labeling every pixel in an image with a category that shows what kind of object is portrayed by that pixel. We will use similar techniques to the earlier image classification models, with a few tweaks. fastai makes image segmentation modeling and interpretation just as easy as image classification, so there won’t be too many tweaks required.&lt;/p&gt;
&lt;p&gt;We will be using the popular CamVid dataset for this part of the lesson. In future lessons, we will come back to it and show a few extra tricks. Our final CamVid model will have dramatically lower error than any model we’ve been able to find in the academic literature!&lt;/p&gt;
&lt;p&gt;What if your dependent variable is a continuous value, instead of a category? We answer that question next, looking at a &lt;a href=&quot;https://stackoverflow.com/questions/29133085/what-are-keypoints-in-image-processing&quot;&gt;keypoint&lt;/a&gt; dataset, and building a model that predicts face keypoints with precision.&lt;/p&gt;
&lt;h2 id=&quot;lesson-4-nlp-tabular-data-collaborative-filtering-embeddings&quot;&gt;Lesson 4: NLP; Tabular data; Collaborative filtering; Embeddings&lt;/h2&gt;
&lt;p&gt;In lesson 4 we’ll dive into &lt;em&gt;natural language processing&lt;/em&gt; (NLP), using the IMDb movie review dataset. In this task, our goal is to predict whether a movie review is positive or negative; this is called &lt;em&gt;sentiment analysis&lt;/em&gt;. We’ll be using the &lt;a href=&quot;https://arxiv.org/abs/1801.06146&quot;&gt;ULMFiT&lt;/a&gt; algorithm, which was originally developed during the fast.ai 2018 course, and became part of a revolution in NLP during 2018 which led the New York Times to declare that &lt;a href=&quot;https://www.nytimes.com/2018/11/18/technology/artificial-intelligence-language.html&quot;&gt;new systems are starting to crack the code of natural language&lt;/a&gt;. ULMFiT is today the most accurate known sentiment analysis algorithm.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson4-ulmfit.png&quot; alt=&quot;Overview of ULMFiT&quot;/&gt; Overview of ULMFiT
&lt;p&gt;The basic steps are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create (or, preferred, download a pre-trained) &lt;em&gt;language model&lt;/em&gt; trained on a large corpus such as Wikipedia (a “language model” is any model that learns to predict the next word of a sentence)&lt;/li&gt;
&lt;li&gt;Fine-tune this language model using your &lt;em&gt;target corpus&lt;/em&gt; (in this case, IMDb movie reviews)&lt;/li&gt;
&lt;li&gt;Remove the &lt;em&gt;encoder&lt;/em&gt; in this fine tuned language model, and replace it with a &lt;em&gt;classifier&lt;/em&gt;. Then fine-tune this model for the final classification task (in this case, sentiment analysis).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;After our journey into NLP, we’ll complete our practical applications for Practical Deep Learning for Coders by covering tabular data (such as spreadsheets and database tables), and collaborative filtering (recommendation systems).&lt;/p&gt;
&lt;p&gt;For tabular data, we’ll see how to use &lt;em&gt;categorical&lt;/em&gt; and &lt;em&gt;continuous&lt;/em&gt; variables, and how to work with the &lt;em&gt;fastai.tabular&lt;/em&gt; module to set up and train a model.&lt;/p&gt;
&lt;p&gt;Then we’ll see how collaborative filtering models can be built using similar ideas to those for tabular data, but with some special tricks to get both higher accuracy and more informative model interpretation.&lt;/p&gt;
&lt;p&gt;This brings us to the half-way point of the course, where we have looked at how to build and interpret models in each of these key application areas:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Computer vision&lt;/li&gt;
&lt;li&gt;NLP&lt;/li&gt;
&lt;li&gt;Tabular&lt;/li&gt;
&lt;li&gt;Collaborative filtering&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;For the second half of the course, we’ll learn about &lt;em&gt;how&lt;/em&gt; these models really work, and how to create them ourselves from scratch. For this lesson, we’ll put together some of the key pieces we’ve touched on so far:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Activations&lt;/li&gt;
&lt;li&gt;Parameters&lt;/li&gt;
&lt;li&gt;Layers (affine and non-linear)&lt;/li&gt;
&lt;li&gt;Loss function.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We’ll be coming back to each of these in lots more detail during the remaining lessons. We’ll also learn about a type of layer that is important for NLP, collaborative filtering, and tabular models: the &lt;em&gt;embedding layer&lt;/em&gt;. As we’ll discover, an “embedding” is simply a computational shortcut for a particular type of matrix multiplication (a multiplication by a &lt;em&gt;one-hot encoded&lt;/em&gt; matrix).&lt;/p&gt;
&lt;h2 id=&quot;lesson-5-back-propagation-accelerated-sgd-neural-net-from-scratch&quot;&gt;Lesson 5: Back propagation; Accelerated SGD; Neural net from scratch&lt;/h2&gt;
&lt;p&gt;In lesson 5 we put all the pieces of training together to understand exactly what is going on when we talk about &lt;em&gt;back propagation&lt;/em&gt;. We’ll use this knowledge to create and train a simple neural network from scratch.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson5.png&quot; alt=&quot;Neural net from scratch&quot;/&gt; Neural net from scratch
&lt;p&gt;We’ll also see how we can look inside the weights of an embedding layer, to find out what our model has learned about our categorical variables. This will let us get some insights into which movies we should probably avoid at all costs…&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson5-emb.png&quot; alt=&quot;Interpreting movie review embeddings&quot;/&gt; Interpreting movie review embeddings
&lt;p&gt;Although embeddings are most widely known in the context of word embeddings for NLP, they are at least as important for categorical variables in general, such as for tabular data or collaborative filtering. They can even be used with non-neural models with great success.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;480&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson5-b.png&quot; alt=&quot;Comparative performance of common models with vs without embeddings&quot;/&gt; Comparative performance of common models with vs without embeddings
&lt;h2 id=&quot;lesson-6-regularization-convolutions-data-ethics&quot;&gt;Lesson 6: Regularization; Convolutions; Data ethics&lt;/h2&gt;
&lt;p&gt;Today we discuss some powerful techniques for improving training and avoiding over-fitting:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Dropout&lt;/strong&gt;: remove activations at random during training in order to regularize the model&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data augmentation&lt;/strong&gt;: modify model inputs during training in order to effectively increase data size&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Batch normalization&lt;/strong&gt;: adjust the parameterization of a model in order to make the loss surface smoother.&lt;/li&gt;
&lt;/ul&gt;&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson6.png&quot; alt=&quot;Data augmentation examples for a single image&quot;/&gt; Data augmentation examples for a single image
&lt;p&gt;Next up, we’ll learn all about &lt;em&gt;convolutions&lt;/em&gt;, which can be thought of as a variant of matrix multiplication with tied weights, and are the operation at the heart of modern computer vision models (and, increasingly, other types of models too).&lt;/p&gt;
&lt;p&gt;We’ll use this knowledge to create a &lt;em&gt;class activated map&lt;/em&gt;, which is a heat-map that shows which parts of an image were most important in making a prediction.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson6-cnn.png&quot; alt=&quot;How a convolution works&quot;/&gt; How a convolution works
&lt;p&gt;Finally, we’ll cover a topic that many students have told us is the most interesting and surprising part of the course: data ethics. We’ll learn about some of the ways in which models can go wrong, with a particular focus on &lt;em&gt;feedback loops&lt;/em&gt;, why they cause problems, and how to avoid them. We’ll also look at ways in which bias in data can lead to biased algorithms, and discuss questions that data scientists can and should be asking to help ensure that their work doesn’t lead to unexpected negative outcomes.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson6-ethics.png&quot; alt=&quot;Example of algorithmic bias in the US justice system&quot;/&gt; Example of algorithmic bias in the US justice system
&lt;h2 id=&quot;lesson-7-resnets-from-scratch-u-net-generative-adversarial-networks&quot;&gt;Lesson 7: Resnets from scratch; U-net; Generative (adversarial) networks&lt;/h2&gt;
&lt;p&gt;In the final lesson of Practical Deep Learning for Coders we’ll study one of the most important techniques in modern architectures: the &lt;em&gt;skip connection&lt;/em&gt;. This is most famously used in the &lt;em&gt;resnet&lt;/em&gt;, which is the architecture we’ve used throughout this course for image classification, and appears in many cutting-edge results. We’ll also look at the &lt;em&gt;U-net&lt;/em&gt; architecture, which uses a different type of skip connection to greatly improve segmentation results (and also for similar tasks where the output structure is similar to the input).&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7-resnet.png&quot; alt=&quot;Impact on loss surface of resnet skip connections&quot;/&gt; Impact on loss surface of resnet skip connections
&lt;p&gt;We’ll then use the U-net architecture to train a &lt;em&gt;super-resolution&lt;/em&gt; model. This is a model which can increase the resolution of a low-quality image. Our model won’t only increase resolution—it will also remove jpeg artifacts and unwanted text watermarks.&lt;/p&gt;
&lt;p&gt;In order to make our model produce high quality results, we will need to create a custom loss function which incorporates &lt;em&gt;feature loss&lt;/em&gt; (also known as &lt;em&gt;perceptual loss&lt;/em&gt;), along with &lt;em&gt;gram loss&lt;/em&gt;. These techniques can be used for many other types of image generation task, such as image colorization.&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;720&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7.png&quot; alt=&quot;Super-resolution results using feature loss and gram loss&quot;/&gt; Super-resolution results using feature loss and gram loss
&lt;p&gt;We’ll learn about a recent loss function known as &lt;em&gt;generative adversarial&lt;/em&gt; loss (used in generative adversarial networks, or &lt;em&gt;GANs&lt;/em&gt;), which can improve the quality of generative models in some contexts, at the cost of speed.&lt;/p&gt;
&lt;p&gt;The techniques we show in this lesson include some unpublished research that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Let us train GANs more quickly and reliably than standard approaches, by leveraging transfer learning&lt;/li&gt;
&lt;li&gt;Combines architectural innovations and loss function approaches that haven’t been used in this way before.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The results are stunning, and train in just a couple of hours (compared to previous approaches that take a couple of days).&lt;/p&gt;
&lt;img class=&quot;image&quot; width=&quot;640&quot; src=&quot;https://www.fast.ai/images/part1v3-thumbs/lesson7-rnn.png&quot; alt=&quot;A recurrent neural net&quot;/&gt; A recurrent neural net
&lt;p&gt;Finally, we’ll learn how to create a recurrent neural net (RNN) from scratch. This is the foundation of the models we have been using for NLP throughout the course, and it turns out they are a simple refactoring of a regular multi-layer network.&lt;/p&gt;
&lt;p&gt;Thanks for reading! If you’ve gotten this far, then you should probably head over to &lt;a href=&quot;http://course.fast.ai&quot;&gt;course.fast.ai&lt;/a&gt; and start watching the first video!&lt;/p&gt;
</description>
<pubDate>Fri, 25 Jan 2019 17:16:34 +0000</pubDate>
<dc:creator>jph00</dc:creator>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fast.ai/2019/01/24/course-v3/</dc:identifier>
</item>
<item>
<title>It’s Time to Move on from Two Phase Commit</title>
<link>http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</link>
<guid isPermaLink="true" >http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</guid>
<description>&lt;div dir=&quot;ltr&quot; id=&quot;docs-internal-guid-79900447-7fff-54aa-d826-6c77a1428553&quot;&gt;&lt;span&gt;The two-phase commit protocol (2PC) has been&lt;/span&gt; &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=7266&quot;&gt;&lt;span&gt;used in enterprise software systems for over three decades&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. It has been an an incredibly impactful protocol for ensuring atomicity and durability of transactions that access data in multiple partitions or shards. It is used everywhere --- both in older “venerable” distributed systems, database systems, and file systems such as Oracle, IBM DB2, PostgreSQL, and Microsoft TxF (transactional NTFS), and in younger “millennial” systems such as MariaDB, TokuDB, VoltDB, Cloud Spanner, Apache Flink, Apache Kafka, and Azure SQL Database. If your system supports ACID transactions across shards/partitions/databases, there’s a high probability that it is running 2PC (or some variant thereof) under the covers. [Sometimes it’s even “over the covers” --- older versions of MongoDB&lt;/span&gt; &lt;a href=&quot;https://docs.mongodb.com/v3.4/tutorial/perform-two-phase-commits/&quot;&gt;&lt;span&gt;required users to implement 2PC for multi-document transactions in application code&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In this post, we will first describe 2PC: how it works and what problems it solves. Then, we will show some major issues with 2PC and how modern systems attempt to get around these issues. Unfortunately, these attempted solutions cause other problems to emerge. In the end, I will make the case that the next generation of distributed systems should avoid 2PC, and how this is possible.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Overview of the 2PC protocol&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are many variants of 2PC, but the basic protocol works as follows:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Background assumption:The work entailed by a transaction has already been divided across all of the shards/partitions that store data accessed by that transaction. We will refer to the effort performed at each shard as being performed by the “worker” for that shard. Each worker is able to start working on its responsibilities for a given transaction independently of each other. The 2PC protocol begins at the end of transaction processing, when the transaction is ready to “commit”. It is initiated by a single, coordinator machine (which may be one of the workers involved in that transaction).&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The basic flow of the 2PC protocol is shown in the figure below. [The protocol begins at the top of the figure and then proceeds in a downward direction.]&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;&lt;img height=&quot;218&quot; src=&quot;https://lh6.googleusercontent.com/F7giuNAtrYsZz1ZYZPOuqXnnYYfUTiXq-IU-wKkiRbnKqhnEehTA1cIwdDTIQ5MylDjbsKhbjYLyZJkt-HFQQ50BaMtS2Vel_vr0II5vbjl2K6UX3tjQTnOb75ICgeo7IQDmIyeG&quot; width=&quot;400&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Phase 1: A coordinator asks each worker whether they have successfully completed their responsibilities for that transaction and are ready to commit. Each worker responds ‘yes’ or ‘no’.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Phase 2: The coordinator counts all the responses. If every worker responded ‘yes’, then the transaction will commit. Otherwise, it will abort. The coordinator sends a message to each worker with the final commit decision and receives an acknowledgement back.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;This mechanism ensures the atomicity property of transactions: either the entire transaction will be reflected in the final state of the system, or none of it. If even just a single worker cannot commit, then the entire transaction will be aborted. In other words: each worker has “veto-power” for a transaction.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;It also ensures transaction durability. Each worker ensures that all of the writes of a transaction have been durably written to storage prior to responding ‘yes’ in phase 1. This gives the coordinator freedom to make a final decision about a transaction without concern for the fact that a worker may fail after voting ‘yes’. [In this post, we are being purposefully vague when using the term “durable writes” --- this term can either refer to writing to local non-volatile storage or, alternatively, replicating the writes to enough locations for it to be considered “durable”.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In addition to durably writing the writes that are directly required by the transaction, the protocol itself requires additional writes that must be made durable before it can proceed. For example, a worker has veto power until the point it votes ‘yes’ in phase 1. After that point, it cannot change its vote. But what if it crashes right after voting ‘yes’? When it recovers it might not know that it voted ‘yes’, and still think it has veto power and go ahead and abort the transaction. To prevent this, it must write its vote durably before sending the ‘yes’ vote back to the coordinator. [In addition to this example, in standard 2PC, there are two other writes that are made durable prior to sending messages that are part of the protocol.]&lt;/span&gt;&lt;/div&gt;
&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;The problems with 2PC&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are two major problems with 2PC. The first is well known, and discussed in every reputable textbook that presents 2PC. The second is much less well known, but a major problem nonetheless.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The well-known problem is referred to as the “blocking problem”. This happens when every worker has voted ‘yes’, but the coordinator fails before sending a message with the final decision to at least one worker. The reason why this is a problem is that by voting ‘yes’, each worker has removed its power to veto the transaction. However, the coordinator still has absolute power to decide the final state of a transaction. If the coordinator fails before sending a message with the final decision to at least one worker, the workers cannot get together to make a decision amongst themselves --- they can’t abort because maybe the coordinator decided to commit before it failed, and they can’t commit because maybe the coordinator decided to abort before it failed. Thus, they have to block --- wait until the coordinator recovers --- in order to find out the final decision. In the meantime, they cannot process transactions that conflict with the stalled transaction since the final outcome of the writes of that transaction are yet to be determined.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;There are two categories of work-arounds to the blocking problem. The first category of work-around modifies the core protocol in order to eliminate the blocking problem. Unfortunately, these modifications reduce the performance --- typically by adding an extra round of communication --- and thus are rarely used in practice. The second category keeps the protocol in tact but reduces the probability of the types of coordinator failure than can lead to the blocking program --- for example, by running 2PC over replica consensus protocols and ensuring that important state for the protocol is replicated at all times. Unfortunately, once again, these work-arounds reduce performance, since the protocol requires that these replica consensus rounds occur sequentially, and thus they may add significant latency to the protocol.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The lesser-known problem is what I call the “cloggage problem”. 2PC occurs after transaction is processed, and thus necessarily increases the latency of the transaction by an amount equal to the time it takes to run the protocol. This latency increase alone can already be an issue for many applications, but a potentially larger issue is that worker nodes do not know the final outcome of a transaction until mid-way through the second phase. Until they know the final outcome, they have to be prepared for the possibility that it might abort, and thus they typically prevent conflicting transactions from making progress until they are certain that the transaction will commit. These blocked transactions in turn block other transactions from running, and so on, until 2PC completes and all of the blocked transactions can resume.  This cloggage further increases the average transaction latency and also decreases transactional throughput.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;To summarize the problems we discussed above: 2PC poisons a system along four dimensions: &lt;strong&gt;latency&lt;/strong&gt; (the time of the protocol plus the stall time of conflicting transactions), &lt;strong&gt;throughput&lt;/strong&gt; (because it prevents conflicting transactions from running during the protocol), &lt;strong&gt;scalability&lt;/strong&gt; (the larger the system, the more likely transactions become multi-partition and have to pay the throughput and latency costs of 2PC), and &lt;strong&gt;availability&lt;/strong&gt; (the blocking problem we discussed above).  &lt;em&gt;Nobody likes 2PC, but for decades, people have assumed that it is a necessary evil.&lt;/em&gt;&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;It’s time to move on&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;For over three decades, we’ve been stuck with two-phase commit in sharded systems. People are aware of the performance, scalability, and availability problems it introduces, but nonetheless continue on, with no obvious better alternative.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The truth is, if we would just architect our systems differently, the need for 2PC would vanish. There have been some attempts to accomplish this --- both in academia (such as &lt;a href=&quot;https://cs.uwaterloo.ca/~kdaudjee/courses/cs848/papers/non2PC.pdf&quot; target=&quot;_blank&quot;&gt;this SIGMOD 2016 paper&lt;/a&gt;) and industry. However, these attempts typically work by avoiding multi-sharded transactions in the first place, such as by repartitioning data in advance of a transaction so that it is no longer multi-sharded. Unfortunately, this repartitioning reduces performance of the system in other ways.&lt;/span&gt;&lt;/div&gt;

&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;What I am calling for is a deeper type of change in the way we architect distributed systems. I insist that systems should still be able to process multi-sharded transactions --- with all the ACID guarantees and what that entails --- such as atomicity and durability --- but with much simpler and faster commit protocols.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;It all comes down to a fundamental assumption that has been present in our systems for decades: a transaction may abort at any time and for any reason.&lt;/span&gt; &lt;span&gt;Even if I run the same transaction on the same initial system state … if I run it at 2:00PM it may commit, but at 3:00 it may abort.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The are several reasons why most architects believe we need this assumption. First, a machine may fail at anytime --- including in the middle of a transaction. Upon recovery, it is generally impossible to recreate all of the state of that transaction that was in volatile memory prior to the failure. As a result, it is seemingly impossible to pick up where the transaction left off prior to the failure. Therefore, the system aborts all transactions that were in progress at the time of the failure. Since a failure can occur at any time, this means that a transaction may abort at any time.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Second, most concurrency control protocols require the ability to abort a transaction at any time. Optimistic protocols perform a “validation” phase after processing a transaction. If validation fails, the transaction aborts.  Pessimistic protocols typically use locks to prevent concurrency anomalies. This use of locks may lead to deadlock, which is resolved by aborting (at least) one of the deadlocked transactions. Since deadlock may be discovered at any time, the transaction needs to retain the ability to abort at any time.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;If you look carefully at the two-phase commit protocol, you will see that this arbitrary potential to abort a transaction is the primary source of complexity and latency in the protocol. Workers cannot easily tell each other whether they will commit or not, because they might still fail after this point (before the transaction is committed) and want to abort this transaction during recovery. Therefore, they have to wait until the end of transaction processing (when all important state is made durable) and proceed in the necessary two phases: in the first phase, each worker publically relinquishes its control to abort a transaction, and only then can the second phase occur in which a final decision is made and disseminated.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In my opinion we need to&lt;/span&gt; &lt;span&gt;remove veto power from workers&lt;/span&gt; &lt;span&gt;and&lt;/span&gt; &lt;span&gt;architect systems in which the system does not have freedom to abort a transaction whenever it wants&lt;/span&gt; &lt;span&gt;during its execution. Only logic within a transaction should be allowed to cause a transaction to abort. If it is theoretically possible to commit a transaction given an current state of the database, that transaction must commit, no matter what types of failures occur. Furthermore, there must not be race conditions relative to other concurrently running transactions that can affect the final commit/abort state of a transaction.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Removing abort flexibility sounds hard. We’ll discuss soon how to accomplish this. But first let’s observe how the commit protocol changes if transactions don’t have abort flexibility.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;What a commit protocol looks like when transactions can’t abort arbitrarily&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Let’s look at two examples:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In the first example, assume that the worker for the shard that stores the value for variable X is assigned a single task for a transaction: change the value of X to 42. Assume (for now) that there are no integrity constraints or triggers defined on X (which may prevent the system from setting X to 42). In such a case, that worker is never given the power to be able to abort the transaction. No matter what happens, that worker must change X to 42. If that worker fails, it must change X to 42 after it recovers. Since it never has any power to abort, there is no need to check with that worker during the commit protocol to see if it will commit.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In the second example, assume that the worker for the shard that stores the value for variables Y and Z is assigned two tasks for a transaction: subtract 1 from the previous value of Y and set Z to the new value of Y. Furthermore, assume that there is an integrity constraint on Y that states that Y can never go below 0 (e.g., if it represents the inventory of an item in a retail application). Therefore, this worker has to run the equivalent of the following code:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;          IF (Y &amp;gt; 0)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;             Subtract 1 from Y&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;          ELSE&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;              ABORT the transaction&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;          Z = Y&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;This worker must be given the power to abort the transaction since this required by the logic of the application. However, this power is limited. Only if the initial value of Y was 0 can this worker abort the transaction. Otherwise, it has no choice but to commit. Therefore, it doesn’t have to wait until it has completed the transaction code before knowing whether it will commit or not. On the contrary: as soon as it has finished executing the first line of code in the transaction, it already knows its final commit/abort decision. This implies that the commit protocol will be able to start much earlier relative to 2PC.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Let’s now combine these two examples into a single example in which a transaction is being performed by two workers --- one of them is doing the work described in the first example, and the other one doing the work described in the second example. Since we are guaranteeing atomicity, the first worker cannot simply blindly set X to 42. Rather, it’s own work must also be dependent on the value of Y. In effect, it’s transaction code becomes:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;     temp = Do_Remote_Read(Y)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;     if (temp &amp;gt; 0)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;        X = 42&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Note that if the first worker’s code is written in this way, the code for the other worker can be simplified to just:&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;     IF (Y &amp;gt; 0)&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;        Subtract 1 from Y&lt;/span&gt;&lt;/div&gt;
&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;        Z = Y&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;By writing the transaction code in this way, we have removed explicit abort logic from both workers. Instead, both workers have if statements that check for the constraint that would have caused the original transaction to abort. If the original transaction would have aborted, both workers end up doing nothing. Otherwise, both workers change the values of their local state as required by the transaction logic.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;The important thing to note at this point is that&lt;/span&gt; &lt;span&gt;the need for a commit protocol has been totally eliminated in the above code&lt;/span&gt;&lt;span&gt;. The system is not allowed to abort a transaction for any reason other than conditional logic defined by application code on a given state of the data. And all workers condition their writes on this same conditional logic so that they can all independently decide to “do nothing” in those situations where a transaction cannot complete as a result of current system state. Thus, all possibility of a transaction abort has been removed, and there is no need for any kind of distributed protocol at the end of transaction processing to make a combined final decision about the transaction. All of the problems of 2PC have been eliminated. There is no blocking problem because there is no coordinator. And there is no cloggage problem, because all necessary checks are overlapped with transaction processing instead of after it completes.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Moreover, as long as the system is not allowed to abort a transaction for any reason other than the conditional application logic based on input data state, it is always possible to rewrite any transaction as we did above in order to replace abort logic in the code with if statements that conditionally check the abort conditions. Furthermore, it is possible to accomplish this without actually rewriting application code. [The details of how to do this are out of scope for this post, but to summarize at a high level: shards can set special system-owned boolean flags when they have completed any conditional logic that could cause an abort, and it is these boolean flags that are remotely read from other shards.]&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In essence: there are two types of aborts that are possible in transaction processing systems: (1) Those that are caused by the state of the data and (2) Those that are caused by the system itself (e.g. failures or deadlocks). Category (1) can always be written in terms of conditional logic on the data as we did above. So if you can eliminate category (2) aborts, the commit protocol can be eliminated.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;So now, all we have to do is explain how to eliminate category (2) aborts.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Removing system-induced aborts&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I have spent almost an entire decade designing systems that do not allow system-induced aborts. Examples of such systems are&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/calvin-sigmod12.pdf&quot;&gt;&lt;span&gt;Calvin&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/calvinfs.pdf&quot;&gt;&lt;span&gt;CalvinFS&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/orthrus-sigmod16.pdf&quot;&gt;&lt;span&gt;Orthrus&lt;/span&gt;&lt;/a&gt;&lt;span&gt;,&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/early-write-visibility.pdf&quot;&gt;&lt;span&gt;PVW&lt;/span&gt;&lt;/a&gt;&lt;span&gt;, and a&lt;/span&gt; &lt;a href=&quot;http://www.cs.umd.edu/~abadi/papers/lazy-xacts.pdf&quot;&gt;&lt;span&gt;system that processes transactions lazily&lt;/span&gt;&lt;/a&gt;&lt;span&gt;. The impetus for this feature came from the first of these projects --- Calvin --- because of its status of being a deterministic database system. A deterministic database guarantees that there is only one possible final state of the data in the database given a defined set of input requests. It is therefore possible to send the same input to two distinct replicas of the system and be certain that the replicas will process this input independently and end up in the same final state, without any possibility of divergence.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;System-induced aborts such as system failure or concurrency control race conditions are fundamentally nondeterministic events. It is very possible that one replica will fail or enter a race condition while the other replica will not. If these nondeterministic events were allowed to result in an a transaction to abort, then one replica may abort a transaction while the other one would commit --- a fundamental violation of the deterministic guarantee. Therefore, we had to design Calvin in a way that failures and race conditions cannot result in a transaction to abort. For concurrency control, Calvin used pessimistic locking with a deadlock avoidance technique that ensured that the system would never get into a situation where it had to abort a transaction due to deadlock. In the face of a system failure, Calvin did not pick up a transaction exactly where it left off (because of the loss of volatile memory during the failure). Nonetheless, it was able to&lt;/span&gt; &lt;span&gt;bring the processing of that transaction to completion without having to abort it. It accomplished this&lt;/span&gt; &lt;span&gt;via restarting the transaction from the same original input.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;Neither of these solutions --- neither deadlock avoidance nor transaction restart upon a failure --- are limited to being used in deterministic database systems. [Transaction restart gets a little tricky in nondeterministic systems if some of the volatile state associated with a transaction that was lost during a failure was observed by other machines that did not fail. But there are simple ways to solve this problem that are out of scope for this post.] Indeed, some of the other systems I linked to above are nondeterministic systems. Once we realized the power that comes with removing system-level aborts, we built this feature into every system we built after the Calvin project --- even the nondeterministic systems.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;h3 dir=&quot;ltr&quot;&gt;&lt;span&gt;Conclusion&lt;/span&gt;&lt;/h3&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;I see very little benefit in system architects making continued use of 2PC in sharded systems moving forward. I believe that removing system-induced aborts and rewriting state-induced aborts is the better way forward. Deterministic database systems such as Calvin or&lt;/span&gt; &lt;a href=&quot;https://fauna.com/&quot;&gt;&lt;span&gt;FaunaDB&lt;/span&gt;&lt;/a&gt; &lt;span&gt; always remove system-induced aborts anyway, and thus usually can avoid 2PC as we described above. But it is a huge waste to limit this benefit to only deterministic databases. It is not hard to remove system-induced aborts from nondeterministic systems. Recent projects have shown that it is even possible to remove system-induced aborts in systems that use concurrency control techniques other than pessimistic concurrency control. For example, both the PVW and the lazy transaction processing systems we linked to above use a variant of multi-versioned concurrency control. And FaunaDB uses a variant of optimistic concurrency control.&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;&lt;div dir=&quot;ltr&quot;&gt;&lt;span&gt;In my opinion there is very little excuse to continue with antiquated assumptions regarding the need for system-induced aborts in the system. In the old days when systems ran on single machines, such assumptions were justifiable. However, in modern times, where many systems need to scale to multiple machines that can fail independently of each other, these assumptions require expensive coordination and commit protocols such as 2PC. The performance problems of 2PC has been a major force behind the rise of non-ACID compliant systems that give up important guarantees in order to achieve better scalability, availability, and performance. 2PC is just too slow --- it increases the latency of all transactions --- not just by the length of the protocol itself, but also by preventing transactions that access the same set of data from running concurrently. 2PC also limits scalability (by reducing concurrency) and availability (the blocking problem we discussed above). The way forward is clear: we need to reconsider antiquated assumptions when designing our systems and say “good-bye” to two phase commit!&lt;/span&gt;&lt;/div&gt;
&lt;br/&gt;
</description>
<pubDate>Fri, 25 Jan 2019 16:31:09 +0000</pubDate>
<dc:creator>evanweaver</dc:creator>
<og:url>http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</og:url>
<og:title>It’s Time to Move on from Two Phase Commit</og:title>
<og:description>The two-phase commit protocol (2PC) has been used in enterprise software systems for over three decades . It has been an an incredibly impa...</og:description>
<og:image>https://lh6.googleusercontent.com/F7giuNAtrYsZz1ZYZPOuqXnnYYfUTiXq-IU-wKkiRbnKqhnEehTA1cIwdDTIQ5MylDjbsKhbjYLyZJkt-HFQQ50BaMtS2Vel_vr0II5vbjl2K6UX3tjQTnOb75ICgeo7IQDmIyeG=w1200-h630-p-k-no-nu</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>http://dbmsmusings.blogspot.com/2019/01/its-time-to-move-on-from-two-phase.html</dc:identifier>
</item>
<item>
<title>US shutdown: Flight delays caused by staff shortages</title>
<link>https://www.bbc.com/news/world-us-canada-47006907</link>
<guid isPermaLink="true" >https://www.bbc.com/news/world-us-canada-47006907</guid>
<description>&lt;figure class=&quot;media-landscape has-caption full-width lead&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                &lt;img class=&quot;js-image-replace&quot; alt=&quot;People attend a rally of air traffic control and other airline industry unions&quot; src=&quot;https://ichef.bbci.co.uk/news/320/cpsprodpb/10EE/production/_105343340_3fd0b268-334b-4f47-bdb6-7842e7e242ae.jpg&quot; width=&quot;976&quot; height=&quot;549&quot;/&gt;&lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Air staff unions have issued warnings about the shutdown's impact
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p class=&quot;story-body__introduction&quot;&gt;Staff shortages linked to the federal government shutdown caused significant flight delays at north-eastern US airports on Friday.&lt;/p&gt;&lt;p&gt;The shutdown has meant some federal staff, like air traffic controllers, have been working without pay.&lt;/p&gt;&lt;p&gt;Nancy Pelosi, Speaker of the House of Representatives, took to Twitter to blame the president for the disruption. &lt;/p&gt;&lt;p&gt;Hours later, &lt;a href=&quot;https://www.bbc.co.uk/news/world-us-canada-47007081&quot; class=&quot;story-body__link&quot;&gt;Mr Trump announced a deal to fund the government&lt;/a&gt; and lift the shutdown temporarily.&lt;/p&gt;&lt;p&gt;Friday's delays came one day after air industry unions issued a stark warning about the risk the shutdown was posing to public safety. &lt;/p&gt;&lt;p&gt;In total about 800,000 federal employees have been working without pay, or have been temporarily laid off, since funding to areas of the government halted 35 days ago. &lt;/p&gt;&lt;p&gt;These numbers include air traffic controllers, as well as US airport security screening staff. &lt;/p&gt;&lt;p&gt;The shutdown started in December, when President Trump refused to approve any new funding agreement that failed to include $5.7bn (£4.4bn) for his southern border wall.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    The Transportation Security Administration (TSA) have reported high absences
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Democrats in Congress refused to agree to those terms - so the two sides had been stuck at an impasse before Mr Trump's most recent announcement. &lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;How did the disruption come about? &lt;/h2&gt;&lt;p&gt;The Federal Aviation Administration (FAA) halted arrivals for nearly an hour at New York's LaGuardia Airport shortly before 10:00 (15:00 GMT). &lt;/p&gt;&lt;p&gt;It blamed air traffic staff shortages for the strategic closures - which also delayed flights at Newark Liberty International Airport and Philadelphia International Airport.&lt;/p&gt;&lt;p&gt;One passenger, named John Hitt, told the Reuters news agency he had to cancel a trip to visit his terminally ill aunt because of the delays.&lt;/p&gt;&lt;p&gt;LaGuardia airport said in a tweet on Friday afternoon that lengthy delays at the airport were ongoing.&lt;/p&gt;&lt;div class=&quot;social-embed&quot;&gt;&lt;div class=&quot;social-embed-post social-embed-twitter&quot;&gt;
    &lt;div class=&quot;embed embed-twitter&quot; readability=&quot;4.9591836734694&quot;&gt;
        &lt;div class=&quot;embed-region&quot; role=&quot;region&quot; aria-label=&quot;Twitter post by @LGAairport&quot; readability=&quot;5.7857142857143&quot;&gt;
            &lt;a class=&quot;off-screen jump-link&quot; href=&quot;#jump-linkhttps://twitter.com/LGAairport/status/1088889867512303618&quot;&gt;Skip Twitter post  by @LGAairport&lt;/a&gt;
            &lt;div class=&quot;twitter-wrap&quot; readability=&quot;8&quot;&gt;
                &lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot; readability=&quot;9.9589905362776&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;⚠️ &lt;a href=&quot;https://twitter.com/hashtag/LGA?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#LGA&lt;/a&gt; Flight Activity Update&lt;/p&gt;&lt;p&gt;Delays for some flights continue to impact &lt;a href=&quot;https://twitter.com/hashtag/LaGuardia?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#LaGuardia&lt;/a&gt;. The latest:&lt;/p&gt;&lt;p&gt;🛬 Arrivals = avg of 1 hr 26min&lt;br/&gt;🛫 Departures = avg of 57min&lt;br/&gt;✈ Airborne = avg of 1hr 3min&lt;/p&gt;&lt;p&gt;Thank you for your patience and continue to follow our feed for updates.&lt;/p&gt;— LaGuardia Airport (@LGAairport) &lt;a href=&quot;https://twitter.com/LGAairport/status/1088889867512303618?ref_src=twsrc%5Etfw&quot;&gt;January 25, 2019&lt;/a&gt;&lt;/blockquote&gt;

            
            &lt;/div&gt;
            &lt;p class=&quot;off-screen&quot; id=&quot;jump-linkhttps://twitter.com/LGAairport/status/1088889867512303618&quot; tabindex=&quot;-1&quot;&gt;End of Twitter post  by @LGAairport&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;p&gt;There have been widespread reports about high absences among US airport security staff for a number of weeks. &lt;/p&gt;&lt;p&gt;On Thursday, the CEO of JetBlue Airways said the shutdown's impact on carriers had so far been limited, but warned it was nearing a tipping point.&lt;/p&gt;&lt;p&gt;Southwest Airlines head Gary Kelly has described the shutdown as &quot;maddening&quot; - estimating they have lost out on $10-15m (£7.5-11m) in January sales.&lt;/p&gt;&lt;p&gt;On Friday, the Association of Flight Attendants issued a blistering statement in response to the delays.&lt;/p&gt;&lt;figure class=&quot;media-landscape has-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
                 &lt;span class=&quot;off-screen&quot;&gt;Image copyright&lt;/span&gt;
                 &lt;span class=&quot;story-image-copyright&quot;&gt;AFP&lt;/span&gt;
                
            &lt;/span&gt;
            
            &lt;figcaption class=&quot;media-caption&quot;&gt;&lt;span class=&quot;off-screen&quot;&gt;Image caption&lt;/span&gt;
                &lt;span class=&quot;media-caption__text&quot;&gt;
                    Passengers are reporting significant delays still at LaGuardia
                &lt;/span&gt;
            &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&quot;The aviation system depends on the safety professionals who make it run. They have been doing unbelievably heroic work even as they are betrayed by the government that employs them,&quot; President Sara Nelson said in a statement.&lt;/p&gt;&lt;p&gt;&quot;They are fatigued, worried, and distracted - but they won't risk our safety.&quot;&lt;/p&gt;&lt;h2 class=&quot;story-body__crosshead&quot;&gt;What is the latest with shutdown?&lt;/h2&gt;&lt;p&gt;Mr Trump's backing to re-open the government serves as a temporary solution but if no longer agreement is implemented, funding will  lapse again on 15 February.&lt;/p&gt;&lt;p&gt;Speaking at the White House on Friday, he described federal workers affected by the shutdown as &quot;incredible patriots&quot;.&lt;/p&gt;&lt;p&gt;He also said they would receive the full back-pay they have missed. &lt;/p&gt;&lt;ul class=&quot;story-body__unordered-list&quot;&gt;&lt;li class=&quot;story-body__list-item&quot;&gt;&lt;a href=&quot;https://www.bbc.co.uk/news/world-us-canada-46739180&quot; class=&quot;story-body__link&quot;&gt;Read more: The impact of the government shutdown&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;media-landscape no-caption full-width&quot;&gt;&lt;span class=&quot;image-and-copyright-container&quot;&gt;
                
                
                
                
                
            &lt;/span&gt;
            
        &lt;/figure&gt;&lt;hr class=&quot;story-body__line&quot;/&gt;&lt;p&gt;&lt;strong&gt;Are you trying to fly in or out of LaGuardia airport?  Or are you at one of the other affected airports? Share you experience by emailing &lt;/strong&gt;&lt;a href=&quot;mailto:haveyoursay@bbc.co.uk?subject=USAirports47006907&quot; class=&quot;story-body__link-email&quot;&gt;&lt;span class=&quot;icon email&quot;/&gt;&lt;span class=&quot;story-body__link-email-text&quot;&gt;haveyoursay@bbc.co.uk&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Please include a contact number if you are willing to speak to a BBC journalist. You can also contact us in the following ways: &lt;/p&gt;</description>
<pubDate>Fri, 25 Jan 2019 15:36:58 +0000</pubDate>
<dc:creator>pbhowmic</dc:creator>
<og:title>US flight delays blamed on shutdown</og:title>
<og:type>article</og:type>
<og:description>Departures from a number of US airports were affected by air control shortages on Friday.</og:description>
<og:url>https://www.bbc.com/news/world-us-canada-47006907</og:url>
<og:image>https://ichef.bbci.co.uk/news/1024/branded_news/10EE/production/_105343340_3fd0b268-334b-4f47-bdb6-7842e7e242ae.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bbc.com/news/world-us-canada-47006907</dc:identifier>
</item>
<item>
<title>Facebook to integrate the infrastructure for WhatsApp, Instagram and Messenger</title>
<link>https://www.nytimes.com/2019/01/25/technology/facebook-instagram-whatsapp-messenger.html</link>
<guid isPermaLink="true" >https://www.nytimes.com/2019/01/25/technology/facebook-instagram-whatsapp-messenger.html</guid>
<description>&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;SAN FRANCISCO — Mark Zuckerberg, Facebook’s chief executive, plans to integrate the social network’s messaging services — WhatsApp, Instagram and Facebook Messenger — asserting his control over the company’s sprawling divisions at a time when its business has been battered by scandal.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The services will continue to operate as stand-alone apps, but their underlying technical infrastructure will be unified, said four people involved in the effort. That will bring together three of the world’s largest messaging networks, which between them have more than 2.6 billion users, allowing people to communicate across the platforms for the first time.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The move has the potential to redefine how billions of people use the apps to connect with one another while strengthening Facebook’s grip on users, raising antitrust, privacy and security questions. It also underscores how Mr. Zuckerberg is imposing his authority over units he once vowed to leave alone.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The plan — which is in the early stages, with a goal of completion by the end of this year or early 2020 — requires thousands of Facebook employees to reconfigure how WhatsApp, Instagram and Facebook Messenger function at their most basic levels, said the people involved in the effort, who spoke on the condition of anonymity because the matter is confidential.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Mr. Zuckerberg has also ordered that the apps all incorporate end-to-end &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/12/03/technology/quantum-encryption.html?module=inline&quot; title=&quot;&quot;&gt;encryption&lt;/a&gt;, the people said, a major step that protects messages from being viewed by anyone except the participants in a conversation.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;In a statement, Facebook said it wanted to “build the best messaging experiences we can; and people want messaging to be fast, simple, reliable and private.” It added: “We’re working on making more of our messaging products end-to-end encrypted and considering ways to make it easier to reach friends and family across networks.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;By stitching the apps’ infrastructure together, Mr. Zuckerberg hopes to increase Facebook’s utility and keep users highly engaged inside the company’s ecosystem. That could reduce people’s appetite for rival messaging services, like those offered by Apple and Google. If users can interact more frequently with Facebook’s apps, the company might also be able to increase its advertising business or add new revenue-generating services, the people said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The change follows two years of scrutiny of Facebook’s core social network, which has been criticized for &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/02/17/technology/indictment-russian-tech-facebook.html?module=inline&quot; title=&quot;&quot;&gt;allowing election meddling&lt;/a&gt; and the spreading of disinformation. Those and other issues have slowed Facebook’s growth and &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/11/14/technology/facebook-data-russia-election-racism.html?module=inline&quot; title=&quot;&quot;&gt;damaged its reputation&lt;/a&gt;, raising the hackles of lawmakers and regulators around the world. Mr. Zuckerberg has repeatedly apologized for the problems and has &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/04/11/business/zuckerberg-facebook-congress.html?module=inline&quot; title=&quot;&quot;&gt;vowed to fix them&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Knitting together Facebook’s apps is a stark reversal of Mr. Zuckerberg’s previous stance toward WhatsApp and Instagram, which were independent companies that Facebook acquired. At the time of the acquisitions, Mr. Zuckerberg promised WhatsApp and Instagram plenty of autonomy from their new parent company. (Facebook Messenger is a homegrown service spun off the main Facebook app in 2014.)&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;WhatsApp and Instagram have grown tremendously since then, prompting Mr. Zuckerberg to change his thinking, one of the people said. He now believes integrating the services more tightly will benefit Facebook’s entire “family of apps” in the long term by making them more useful, the person said. Mr. Zuckerberg floated the idea for months and began to promote it to employees more heavily toward the end of 2018, the people said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The effort has caused strife within Facebook. Instagram’s founders, Kevin Systrom and Mike Krieger, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/09/24/technology/instagram-cofounders-resign.html?module=inline&quot; title=&quot;&quot;&gt;left the company abruptly last fall&lt;/a&gt; after Mr. Zuckerberg began weighing in more. WhatsApp’s founders, Jan Koum and Brian Acton, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/04/30/technology/whatsapp-facebook-jan-koum.html?module=inline&quot; title=&quot;&quot;&gt;departed&lt;/a&gt; for similar reasons. More recently, dozens of WhatsApp employees clashed with Mr. Zuckerberg over the integration plan on internal message boards and during a contentious staff meeting in December, according to four people who attended or were briefed on the event.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;The integration plan raises privacy questions because of how users’ data may be shared between services. WhatsApp currently requires only a phone number when new users sign up. By contrast, Facebook and Facebook Messenger ask users to provide their true identities. Matching Facebook and Instagram users to their WhatsApp handles could give pause to those who prefer to keep their use of each app separate.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div data-testid=&quot;photoviewer-wrapper&quot; class=&quot;css-79elbk ehw59r11&quot;&gt;

&lt;div data-testid=&quot;photoviewer-children&quot; class=&quot;css-1a48zt4 ehw59r111&quot;&gt;
&lt;div class=&quot;css-1xdhyk6 erfvjey0&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Image&lt;/span&gt;&lt;img alt=&quot;&quot; class=&quot;css-1m50asq&quot; src=&quot;https://static01.nyt.com/images/2019/01/26/business/26FACEBOOK02/merlin_138612696_282a2066-d466-4464-a3ca-344b3abb083d-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot; srcset=&quot;https://static01.nyt.com/images/2019/01/26/business/26FACEBOOK02/merlin_138612696_282a2066-d466-4464-a3ca-344b3abb083d-articleLarge.jpg?quality=90&amp;amp;auto=webp 600w,https://static01.nyt.com/images/2019/01/26/business/26FACEBOOK02/merlin_138612696_282a2066-d466-4464-a3ca-344b3abb083d-jumbo.jpg?quality=90&amp;amp;auto=webp 1024w,https://static01.nyt.com/images/2019/01/26/business/26FACEBOOK02/merlin_138612696_282a2066-d466-4464-a3ca-344b3abb083d-superJumbo.jpg?quality=90&amp;amp;auto=webp 2048w&quot; sizes=&quot;((min-width: 600px) and (max-width: 1004px)) 84vw, (min-width: 1005px) 60vw, 100vw&quot; itemprop=&quot;url&quot; itemid=&quot;https://static01.nyt.com/images/2019/01/26/business/26FACEBOOK02/merlin_138612696_282a2066-d466-4464-a3ca-344b3abb083d-articleLarge.jpg?quality=75&amp;amp;auto=webp&amp;amp;disable=upscale&quot;/&gt;&lt;/div&gt;
&lt;span class=&quot;css-8i9d0s e13ogyst0&quot;&gt;Mr. Zuckerberg wants to increase the utility of the social network to keep Facebook’s billions of users highly engaged, people involved in the effort said.&lt;/span&gt;&lt;span itemprop=&quot;copyrightHolder&quot; class=&quot;css-vuqh7u e1z0qqy90&quot;&gt;&lt;span class=&quot;css-1ly73wi e1tej78p0&quot;&gt;Credit&lt;/span&gt;&lt;span&gt;Gerard Julien/Agence France-Presse — Getty Images&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“As you would expect, there is a lot of discussion and debate as we begin the long process of figuring out all the details of how this will work,” Facebook said in a statement.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Marc Rotenberg, president and executive director the Electronic Privacy Information Center, said on Friday that the change would be “a terrible outcome for internet users.” He urged the Federal Trade Commission, America’s &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/12/30/technology/facebook-data-privacy-ftc.html?module=inline&quot; title=&quot;&quot;&gt;de facto privacy regulator&lt;/a&gt;, to “act now to protect privacy and to preserve competition.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Representative Ro Khanna, Democrat of California, criticized the change on antitrust grounds.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;“This is why there should have been far more scrutiny during Facebook’s acquisitions of Instagram and WhatsApp, which now clearly seem like horizontal mergers that should have triggered antitrust scrutiny,” he said in a message on &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://twitter.com/RepRoKhanna/status/1088850850766823424&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;. “Imagine how different the world would be if Facebook had to compete with Instagram and WhatsApp.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;People in many countries often rely on only one or two text messaging services. In China, &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/video/technology/100000004574648/china-internet-wechat.html?module=inline&quot; title=&quot;&quot;&gt;WeChat&lt;/a&gt;, which is made by Tencent, is popular, while WhatsApp is heavily used in South America. Americans are more divided in their use of such services, SMS text messages, Apple’s iMessage and various Google chat apps.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;For Facebook, the move also offers avenues for making money from Instagram and WhatsApp. WhatsApp currently generates little revenue; Instagram produces ad revenue but none from its messaging. Mr. Zuckerberg does not yet have specific plans for how to profit from integrating the services, said two of the people involved in the matter. A more engaged audience could result in new forms of advertising or other services for which Facebook could charge a fee, they said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;One potential business opportunity involves Facebook Marketplace, a free Craigslist-like product where people can buy and sell goods. The service is popular in Southeast Asia and other markets outside the United States.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;When the apps are knitted together, Facebook Marketplace buyers and sellers in Southeast Asia will be able to communicate with one another using WhatsApp, which is popular in the region, rather than using Facebook Messenger or another, non-Facebook text message service. That could eventually yield new ad opportunities or profit-generating services, said one of the people.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Some Facebook employees said they were confused about what made combining the messaging services so compelling to Mr. Zuckerberg. Some said it was jarring because of his past promises about independence. When Facebook acquired WhatsApp for $19 billion in 2014, Mr. Koum &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://thenextweb.com/facebook/2014/03/17/whatsapp-promises-facebook-purchase-will-affect-user-privacy-company-values-beliefs-will-change/&quot; title=&quot;&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;talked publicly about user privacy&lt;/a&gt;, and said, “If partnering with Facebook meant that we had to change our values, we wouldn’t have done it.”&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Last month, during one of WhatsApp’s monthly meetings for staff members, it became clear that Mr. Zuckerberg’s mandate would be a priority in 2019, said a person who was there. One WhatsApp employee then conducted an analysis of how many potential new users in the United States the integration plan could bring to Facebook, said two people familiar with the study. The total was relatively meager, the analysis showed.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;To assuage concerns, Mr. Zuckerberg called a follow-up meeting with WhatsApp employees a few days later, three of the people said. On Dec. 7, employees gathered around microphones at the WhatsApp offices to ask him why he was so invested in merging the services. Some said his answers were vague and meandering. Several WhatsApp employees have left or plan to leave because of Mr. Zuckerberg’s plans, the people said.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Unifying the infrastructure for WhatsApp, Instagram and Facebook Messenger is technically challenging. Unlike Facebook Messenger and Instagram, WhatsApp does not store messages and keeps minimal user data. It is the only one of the services to currently use end-to-end encryption by default.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;css-1fanzo5 StoryBodyCompanionColumn&quot;&gt;
&lt;div class=&quot;css-4w7y5l&quot;&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Encrypted messaging has long been supported by privacy advocates who fear governments or hackers may gain access to people’s personal messages. But it will raise other issues for Facebook, particularly related to its ability to spot and curb the spread of illicit activity or disinformation.&lt;/p&gt;
&lt;p class=&quot;css-1ygdjhk evys1bk0&quot;&gt;Last year, researchers had trouble tracking disinformation on &lt;a class=&quot;css-1g7m0tk&quot; href=&quot;https://www.nytimes.com/2018/10/19/technology/whatsapp-brazil-presidential-election.html?module=inline&quot; title=&quot;&quot;&gt;WhatsApp before the Brazilian presidential election&lt;/a&gt;, before eventually finding ways to do so. WhatsApp has recently placed limits on how many times a message can be forwarded on the service, in an effort to reduce the distribution of false content.&lt;/p&gt;
&lt;/div&gt;
&lt;aside class=&quot;css-o6xoe7&quot;/&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 25 Jan 2019 14:07:42 +0000</pubDate>
<dc:creator>tysone</dc:creator>
<og:url>https://www.nytimes.com/2019/01/25/technology/facebook-instagram-whatsapp-messenger.html</og:url>
<og:type>article</og:type>
<og:title>Zuckerberg Plans to Integrate WhatsApp, Instagram and Facebook Messenger</og:title>
<og:image>https://static01.nyt.com/images/2019/02/16/us/16facebook-promo/merlin_138613002_5724551d-f84c-457d-afc3-9cab15886198-facebookJumbo.jpg</og:image>
<og:description>Facebook’s chief executive has asserted control over its sprawling divisions and mandated the social network’s messaging services be knitted together.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.nytimes.com/2019/01/25/technology/facebook-instagram-whatsapp-messenger.html</dc:identifier>
</item>
<item>
<title>Apple is indeed patenting Swift features</title>
<link>https://forums.swift.org/t/apple-is-indeed-patenting-swift-features/19779</link>
<guid isPermaLink="true" >https://forums.swift.org/t/apple-is-indeed-patenting-swift-features/19779</guid>
<description>&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;Here is the patent that includes &lt;em&gt;optionals chaining:&lt;/em&gt;&lt;br/&gt;9,952,841&lt;/p&gt;
&lt;p&gt;This is very disturbing. It's like Apple has gone insane. Computer languages are not supposed to be owned by any company. We learned this mistake with Java and APIs. Computer languages are supposed to be a part of the Commons, owned by everyone for the benefit of humanity, not the benefit of a greedy corporation.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;I mean, yeah, software patents were a stupid idea, but it's not like them holding a patent for optional chaining matters that much since they released the code that implements it under the Apache license. Honestly, the only possible reason to even have a patent for this is to keep the patent trolls away.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;aside class=&quot;quote no-group&quot; data-post=&quot;2&quot; data-topic=&quot;19779&quot;&gt;&lt;div class=&quot;title&quot;&gt;

&lt;img alt=&quot;&quot; width=&quot;20&quot; height=&quot;20&quot; src=&quot;https://discourse-cdn-sjc1.com/swift/user_avatar/forums.swift.org/nobody1707/40/2169_2.png&quot; class=&quot;avatar&quot;/&gt; Nobody1707:&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;but it's not like them holding a patent for optional chaining matters that much since they released the code that implements it under the Apache license. Honestly, the only possible reason to even have a patent for this is to keep the patent trolls away.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;i'm confused&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;Apache license gives the right to use patents required to use the code (assuming the original author had those rights), and the code implementing optional chaining in the compiler is Apache licensed. So, the only thing Apple having a patent on optional chaining does is to stop frivolous suits from patent trolls. It can't be used for any kind of nefarious power play by Apple, which is what OP was worried about.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;I would like to hear an Apple attorney confirm this theory and explain whether this was Apple's intention.&lt;/p&gt;
&lt;p&gt;I always wondered why Apple thought a new language was required, not that Swift isn't interesting but still, it is odd that they introduced it and didn't mention that they patented it.&lt;/p&gt;
&lt;p&gt;Also, the patents cover more than just optional chaining. There are two:&lt;br/&gt;9,952,841 issued in 2018&lt;br/&gt;9,329,844 issued in 2016&lt;br/&gt;Presumably there are more that are pending.&lt;/p&gt;
&lt;p&gt;By the way here is a list of Apple patents pending, the public ones anyway.&lt;br/&gt;I see there an attempt to patent an API, and if I recall, the issue of copyrighting APIs came up in the Java lawsuit between Oracle and Google.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://patents.justia.com/company/apple?list=applications&quot; class=&quot;onebox&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://patents.justia.com/company/apple?list=applications&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;aside class=&quot;quote no-group&quot; data-post=&quot;4&quot; data-topic=&quot;19779&quot;&gt;&lt;div class=&quot;title&quot;&gt;

&lt;img alt=&quot;&quot; width=&quot;20&quot; height=&quot;20&quot; src=&quot;https://discourse-cdn-sjc1.com/swift/user_avatar/forums.swift.org/nobody1707/40/2169_2.png&quot; class=&quot;avatar&quot;/&gt; Nobody1707:&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;the only thing Apple having a patent on optional chaining does is to stop frivolous suits from patent trolls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Prior Art would take care of that if Apple had not gotten a patent on Optional Chaining (&lt;a href=&quot;https://patents.google.com/patent/US9952841B2/en?oq=9952841&quot; rel=&quot;nofollow noopener&quot;&gt;the Google patents page&lt;/a&gt; for US9952841B2, which was the only result I could find for the number given by &lt;a class=&quot;mention&quot; href=&quot;https://forums.swift.org/u/ebup&quot;&gt;@ebup&lt;/a&gt;, reads to me more like the whole concept of Swift, but I may be misunderstanding).&lt;/p&gt;
&lt;p&gt;From a quick search (IANAL, also not from US, so salt to taste), I could also not find a consensus on whether the patent grant in the Apache license extended to derivative works and unrelated works. &lt;a href=&quot;https://opensource.stackexchange.com/a/7267&quot; rel=&quot;nofollow noopener&quot;&gt;This StackExchange answer&lt;/a&gt; makes it sound like it does not, which as I read it could mean that Apple could still require a patent license if another project wanted to incorporate Optional Chaining.&lt;/p&gt;
&lt;p&gt;Here is the patent grant section of the license:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;3. Grant of Patent License&lt;/strong&gt; . Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;&lt;a class=&quot;mention&quot; href=&quot;https://forums.swift.org/u/ahti&quot;&gt;@ahti&lt;/a&gt;&lt;br/&gt;The worrying thing is that Apple did some things that in combination look bad:&lt;/p&gt;
&lt;p&gt;a. they encouraged people to adopt Swift, even going so far as to release Swift before it was ready for production use;&lt;br/&gt;b. they didn't warn people that using some feature or other might in future require a patent royalty payment;&lt;br/&gt;c. they didn't come out publicly and say &quot;here is our policy&quot; about these patents to put people at ease.&lt;/p&gt;
&lt;p&gt;So worst case, it could be argued Apple engaged in a deceptive business practice that is nevertheless legal because ... patents.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;You never need a patent grant just to make derivative works. Restricting the creation of derivative works is not part of the monopoly granted by a patent. If I've patented The Wheel, you are free to separately make — and patent! — The Axle, The Tire, and The Wheelbarrow; you just can't make your own wheels until my patent runs out.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;a. they encouraged people to adopt Swift, even going so far as to release Swift before it was ready for production use;&lt;br/&gt;b. they didn't warn people that using some feature or other might in future require a patent royalty payment;&lt;br/&gt;c. they didn't come out publicly and say &quot;here is our policy&quot; about these patents to put people at ease.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By licensing its contributions under the Apache license, Apple has granted you a perpetual, royalty-free license to use all of its patents that are necessary in order to use Swift. That is a legally-binding statement written plainly in the license text. Your complaint is that we didn't make a second, non-legally-binding statement about our &quot;policy&quot; which promises to never charge you a royalty that we've already legally given up our right to charge. Even if we made that statement, I can't imagine why you'd trust it more than the plain terms of the license. I can only encourage you to talk to an IP attorney who hopefully can explain these things to you in a way that you do trust.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;aside class=&quot;quote group-core-team&quot; data-post=&quot;9&quot; data-topic=&quot;19779&quot;&gt;&lt;div class=&quot;title&quot;&gt;

&lt;img alt=&quot;&quot; width=&quot;20&quot; height=&quot;20&quot; src=&quot;https://discourse-cdn-sjc1.com/swift/user_avatar/forums.swift.org/john_mccall/40/1351_2.png&quot; class=&quot;avatar&quot;/&gt; John_McCall:&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;By licensing its contributions under the Apache license, Apple has granted you a perpetual, royalty-free license to use all of its patents that are necessary in order to use Swift.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;The intention of using the Apache 2 license goes beyond this as well. This isn't just about Apple's contributions to the Swift project, but any company that has a significant patent portfolio such as IBM and Google. A contributor whose contributions implies one or more of their patents is effectively contributing the use of those patents to the Swift open source project. This was intentional and by design.&lt;/p&gt;
&lt;p&gt;Any company making a contribution to Swift is intentionally licensing implied patents to the project. This is a business decision. Speaking on Apple's behalf, that business decision is clear and deliberate: we want Swift to be successful and to be used widely. The Apache 2 license provides a form of IP licensing as well as IP protection for the project, and thus its users.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;I understand that there's a ton of legal implications, but hope someone could help with this even with &quot;I am not a lawyer&quot; disclaimer. Would anyone be able to clarify a few points here please?&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;If a separate open-source programming language under Apache 2.0 license implements an optional chaining feature, would it be a violation of the patent then?&lt;/li&gt;
&lt;li&gt;What if there's a separate implementation of a Swift compiler developed from scratch independently from Apple, does mean that it's not able to implement optional chaining without licensing the patent?&lt;/li&gt;
&lt;li&gt;Here's the most interesting part: let's say there's a fork of a Swift compiler that significantly diverged and is developed independently from Apple. It seems to me that forks like these still don't violate the patent, otherwise any GitHub fork with unmerged PRs would be a violation. But let's say Google's fork no longer wishes to contribute its changes upstream, at what point does this separate development could trigger a patent violation? Does amount of divergence have any impact, let's say 90% of the codebase changes? Does the name of project matter, if someone names their fork as &quot;Sparrow&quot;, not &quot;Swift&quot; is it considered a patent violation at this point if there's no license and royalties paid for optional chaining?&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;aside class=&quot;quote no-group&quot; data-post=&quot;2&quot; data-topic=&quot;19779&quot;&gt;&lt;div class=&quot;title&quot;&gt;

&lt;img alt=&quot;&quot; width=&quot;20&quot; height=&quot;20&quot; src=&quot;https://discourse-cdn-sjc1.com/swift/user_avatar/forums.swift.org/nobody1707/40/2169_2.png&quot; class=&quot;avatar&quot;/&gt; Nobody1707:&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Honestly, the only possible reason to even have a patent for this is to keep the patent trolls away.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Sorry, I'm not sure I understand this. If optional chaining was open-sourced before any patent on it was claimed by Apple, it would make any subsequent attempt by patent trolls to attack it invalid via &lt;a href=&quot;https://en.wikipedia.org/wiki/Prior_art&quot; rel=&quot;nofollow noopener&quot;&gt;prior art&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If an &lt;a href=&quot;https://en.wikipedia.org/wiki/Invention&quot; rel=&quot;nofollow noopener&quot;&gt;invention&lt;/a&gt; has been described in the prior art or would have been &lt;a href=&quot;https://en.wikipedia.org/wiki/Inventive_step_and_non-obviousness&quot; rel=&quot;nofollow noopener&quot;&gt;obvious&lt;/a&gt; over what has been described in the prior art, a patent on that invention is not valid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I understand this correctly, Apple didn't need to patent it for any &quot;defence&quot;, just open-sourcing it and making &quot;prior art&quot; was enough. But as a contributor to Swift's ecosystem I feel unsafe now as we have a precedent of &lt;a href=&quot;http://en.wikipedia.org/wiki/Oracle_v_Google&quot; rel=&quot;nofollow noopener&quot;&gt;Oracle ruining Java's ecosystem&lt;/a&gt; with its patents. Can we be sure that Apple never ever does this to any 3rd-party open-source project related to Swift as a &quot;business decision&quot;?&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;Prior art has been meaningless in US patent law for several years and has been replaced by first-to-file. In addition to the legal clarity that filing would have lent even when prior art had meaning, this is a huge reason why defensive patents must now be filed, especially for ideas intended to be a gift to the public.&lt;/p&gt;
&lt;p&gt;Caveats: I am not a lawyer. Further, I am employed by Apple in an engineering capacity, but do not represent any officially held position. Thus, my comment above is both a non-professional and a personal opinion on a legal matter and should be lent as little gravitas as that implies even though it is also correct. ;-)&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;This post was flagged by the community and is temporarily hidden.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;Unfortunately, while it may protect again patent troll, it does not protect us from all kind of trolls ;-)&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;Disclaimer: I'm not an apple employee and not am not lawyer, this is just my understanding of the situation having spent lots of time talking to lawyers and other experts about this:&lt;/p&gt;
&lt;p&gt;I agree with much of the sentiment that software patents are often silly and the system is broken in many ways. This patent is a reasonable example of that (patenting syntactic sugar for monads, really?). I have no idea if there is prior art, but I wouldn't be surprised. For sake of discussion, lets assume the patent is valid.&lt;/p&gt;
&lt;p&gt;Even if I and others don't like it, the software patent system exists. As is pointed out upthread, one of the major reasons that Swift uses the Apache 2 license is to provide more certainty for the community w.r.t. licensing and patents. An additional bonus of the Apache 2 license is that the open source project as a whole &lt;em&gt;benefits&lt;/em&gt; from companies having and contributing their patents under the terms of the license: to say more directly, it is &lt;em&gt;good&lt;/em&gt; for the Swift project that Apple has this patent and has contributed it to the project.&lt;/p&gt;
&lt;p&gt;The reason for this is the &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot; rel=&quot;nofollow noopener&quot;&gt;Apache patent revocation clause&lt;/a&gt;, the end of bullet 3:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;lang-nohighlight&quot;&gt;If You institute patent litigation against any entity (including a cross-claim or counterclaim
in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes
direct or contributory patent infringement, then any patent licenses granted to You under this
License for that Work shall terminate as of the date such litigation is filed.
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This basically says that if someone sues someone else over Swift then they lose access to the patents contributed to the project, and are therefore subject to countersuits. This is a significant part of the protection that the Apache license provides (it is a big deterent to lawsuits in general) but it only has teeth if there are actually patents in play!&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://LLVM.org&quot; rel=&quot;nofollow noopener&quot;&gt;LLVM.org&lt;/a&gt; community is actively working on &lt;a href=&quot;http://llvm.org/foundation/relicensing/&quot; rel=&quot;nofollow noopener&quot;&gt;a multi-year relicensing effort&lt;/a&gt; specifically to achieve these sorts of projects for LLVM as well.&lt;/p&gt;
&lt;p&gt;-Chris&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;aside class=&quot;quote no-group&quot; data-post=&quot;16&quot; data-topic=&quot;19779&quot;&gt;&lt;div class=&quot;title&quot;&gt;

&lt;img alt=&quot;&quot; width=&quot;20&quot; height=&quot;20&quot; src=&quot;https://discourse-cdn-sjc1.com/swift/user_avatar/forums.swift.org/chris_lattner3/40/348_2.png&quot; class=&quot;avatar&quot;/&gt; Chris_Lattner3:&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;to say more directly, it is &lt;em&gt;good&lt;/em&gt; for the Swift project that Apple has this patent and has contributed it to the project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;Thanks for the clarification &lt;a class=&quot;mention&quot; href=&quot;https://forums.swift.org/u/chris_lattner3&quot;&gt;@Chris_Lattner3&lt;/a&gt;! There's still a main concern here that this seems good only for the only Swift implementation from Apple and Apple's business at the expense of other open-source projects. In my understanding (please correct me if I'm wrong, this specific point is what's mainly interesting to me) is that an alternative open-source implementation of a Swift compiler developed from scratch or an open-source language made compatible with Swift through features described in the patent would infringe on the patent. That's because these projects wouldn't be covered by the license and count as Derivative Work (even if these projects use Apache 2.0 as well) due to this clause:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Obligatory I Am Not A Lawyer disclaimer comes here, but that's why I would like this to be clarified as much as possible to understand the implications.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;I am surprised that optional chaining was granted a patent. It is similar enough to prior art in Scheme that I would not have granted it. See &lt;code&gt;and-let*&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/mit-scheme/documentation/mit-scheme-ref/and_002dlet_002a-_0028SRFI-2_0029.html&quot; class=&quot;onebox&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;https://www.gnu.org/software/mit-scheme/documentation/mit-scheme-ref/and_002dlet_002a-_0028SRFI-2_0029.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;p&gt;if c had the same restrictions/patents as this, then there would never have been a clang compiler would there? i guess there will never be independent implementations of swift...&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;post&quot; itemprop=&quot;articleBody&quot;&gt;
&lt;aside class=&quot;quote group-core-team&quot; data-post=&quot;10&quot; data-topic=&quot;19779&quot;&gt;&lt;div class=&quot;title&quot;&gt;

&lt;img alt=&quot;&quot; width=&quot;20&quot; height=&quot;20&quot; src=&quot;https://discourse-cdn-sjc1.com/swift/user_avatar/forums.swift.org/tkremenek/40/251_2.png&quot; class=&quot;avatar&quot;/&gt; tkremenek:&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Any company making a contribution to Swift is intentionally licensing implied patents to the project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/aside&gt;&lt;p&gt;What about companies (such as us) &lt;em&gt;implementing&lt;/em&gt; the Swift language from scratch?&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 25 Jan 2019 12:09:55 +0000</pubDate>
<dc:creator>maxdesiatov</dc:creator>
<og:image>https://discourse-cdn-sjc1.com/swift/uploads/default/original/1X/0a90dde98a223f5841eeca49d89dc9f57592e8d6.png</og:image>
<og:url>https://forums.swift.org/t/apple-is-indeed-patenting-swift-features/19779?_escaped_fragment_=</og:url>
<og:title>Apple is indeed patenting Swift features</og:title>
<og:description>Here is the patent that includes optionals chaining: 9,952,841 This is very disturbing. It's like Apple has gone insane. Computer languages are not supposed to be owned by any company. We learned this mistake with Java and APIs. Computer languages are supposed to be a part of the Commons, owned by everyone for the benefit of humanity, not the benefit of a greedy corporation.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://forums.swift.org/t/apple-is-indeed-patenting-swift-features/19779?_escaped_fragment_=</dc:identifier>
</item>
<item>
<title>Humaaans: Mix-and-match illustrations of people with a design library</title>
<link>https://www.humaaans.com</link>
<guid isPermaLink="true" >https://www.humaaans.com</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.humaaans.com&quot;&gt;https://www.humaaans.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=18996959&quot;&gt;https://news.ycombinator.com/item?id=18996959&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 332&lt;/p&gt;
&lt;p&gt;# Comments: 109&lt;/p&gt;
</description>
<pubDate>Fri, 25 Jan 2019 10:39:00 +0000</pubDate>
<dc:creator>plurby</dc:creator>
<og:title>Humaaans: Mix-&amp;-Match illustration library</og:title>
<og:description>Mix-&amp;-match illustrations of people with a design library for InVIsion Studio and Sketch.</og:description>
<og:image>https://uploads-ssl.webflow.com/5bff8886c3964a992e90d465/5c050a75fc73fba30bf816f1_seo-rectangle.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.humaaans.com/</dc:identifier>
</item>
<item>
<title>JMAP: Like IMAP but Not Really</title>
<link>https://unencumberedbyfacts.com/2019/01/24/jmap-its-like-imap-but-not-really/</link>
<guid isPermaLink="true" >https://unencumberedbyfacts.com/2019/01/24/jmap-its-like-imap-but-not-really/</guid>
<description>&lt;p&gt;With the new year upon us, I decided it was time to do something ambitious for my Open Source project. This is where I normally quip about never mentioning my project before, even though I literally always do. A new year means new jokes so I’m moving on, and really you should too. &lt;a href=&quot;https://cypht.org&quot;&gt;Cypht&lt;/a&gt; is not just Open Source webmail, it’s like the [COOL THING OR PERSON] of Open Source webmail. And it’s NEW. Well I have been working on it for 5 years but NEW in a relative sense, since time is relative, and really what is time? Anyway, ambitiousness.&lt;/p&gt;
&lt;p&gt;There has been a “&lt;a href=&quot;https://github.com/jasonmunro/cypht/issues/180&quot;&gt;Support JMAP to replace IMAP/SMTP&lt;/a&gt;” request lingering on our Github for almost a year. It’s in the “&lt;a href=&quot;https://github.com/jasonmunro/cypht/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+is%3Aopen+label%3Aenhancement+&quot;&gt;I’m still interested but effin busy bucket&lt;/a&gt;“. Recently the poster of said issue mentioned the &lt;a href=&quot;https://jmap.io/&quot;&gt;JMAP&lt;/a&gt; specification will soon be finalized and it might be a good time to give it another look. What exactly is JMAP? Let me verbally circle around it a bit more and I promise I will get there.&lt;/p&gt;
&lt;p&gt;I reread the high level bits about JMAP. Then I started digging in, created a new module set, shit-canned that approach because it was stupid, took a different angle, got obsessed, stayed up way too late on weeknights, permanently pinned the docs in browser tabs, filed a couple of Github issues with the Cyrus IMAP project (both of which were mis-configurations on my end), and as of this week – hit the milestone of initial IMAP/JMAP compatibility.&lt;/p&gt;
&lt;p&gt;Again, what the hell is JMAP? As we all know there are two widely adopted protocols for getting your E-mail to your eyeballs: POP3 and IMAP. POP3 was designed to work with systems that are not always online because that really used to be a thing. IMAP is awesome unless you write code for it in which case it will ruin you. Regardless IMAP is the common standard these days. It’s complicated and old and hard. Why can’t there be a modern REST like API that can do everything IMAP does but better? Astute readers may have added this up by now, but just to clarify: JMAP is a modern REST like API that can do everything IMAP does but better.&lt;/p&gt;
&lt;p&gt;The driving force behind JMAP from what I can tell is Bron Gondwana, the CEO of FastMail. As a subscriber to the IMAP protocol mailing list for the last 15+ years (also an actual thing), I recognize Bron from many informative replies to befuddled posters about the IMAP protocol, or the Open Source Cyrus IMAP server he contributes to.&lt;/p&gt;
&lt;p&gt;I would like to take my remaining time and open up the floor to questions, so fire away.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internet&lt;/strong&gt;: &lt;em&gt;So what is the JMAP API like?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: I’m not going to sugarcoat it, JMAP is complicated. But it is really (really) well designed. JMAP is a REST API so it uses HTTP requests and responses to issue commands and get the results. Almost all requests in JMAP are to the same URL using an HTTP POST to submit a JSON body of “methods”. A method is an action or query you want to perform like “give me the 20 newest messages in this mailbox” or “flag this important message from a Nigerian prince”. Also they have excellent docs. Sometimes you have to jump around to piece together what you are looking for but it’s pretty comprehensive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Internet&lt;/strong&gt;: &lt;em&gt;How is JMAP better than IMAP?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: My top 5:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;JMAP is sane&lt;/li&gt;
&lt;li&gt;JMAP is not designed around a persistent network socket, so it’s perfect for webmail clients that connect, do stuff, then disconnect (which is exactly NOT how IMAP is supposed to be used)&lt;/li&gt;
&lt;li&gt;JMAP finally brings pagination support into the picture. This alone is a huge performance boost&lt;/li&gt;
&lt;li&gt;JMAP allows you to chain methods together with back-references to earlier methods. This allows you to combine queries and actions into a single API request. I have not really used this yet because my initial implementation is mimicking the more inefficient patterns of IMAP, but I think this is the single coolest part of the JMAP API design.&lt;/li&gt;
&lt;li&gt;Uids in JMAP are globally unique. I don’t need to select a mailbox then fetch the content for a uid in that folder – I can just fetch the content for a uid as it’s unique across folders.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Internet&lt;/strong&gt;: &lt;em&gt;Do you think JMAP will really take off?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me&lt;/strong&gt;: JMAP is an open, smart, modern, and powerful E-mail protocol, so probably not. Short of the ground breaking (not really) Cypht webmail program, I would say JMAP is the best thing to happen to E-mail in a LONG time. JMAP also supports calendars and todos and contacts and sending outbound E-mail and push notification and state management and deltas and other things I can’t remember. Right now development versions of the Cyrus IMAP server support JMAP, and FastMail is using it in production for some of their users. I hope it takes off because as an E-mail client writer it’s been an absolute pleasure to work with.&lt;/p&gt;
&lt;p&gt;So sorry to say, we are out of time! To conclude I want to thank the Cyrus IMAP developers for prompt and helpful replies to my uninformed questions. JMAP may not be the future of E-mail, but it should be. It’s like IMAP but not really. It’s better.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-47007080-1812-5c4ba359e7ca9&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20180319#blog_id=47007080&amp;amp;post_id=1812&amp;amp;origin=jasonmunro.wordpress.com&amp;amp;obj_id=47007080-1812-5c4ba359e7ca9&quot; data-name=&quot;like-post-frame-47007080-1812-5c4ba359e7ca9&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 25 Jan 2019 07:31:39 +0000</pubDate>
<dc:creator>jasonmunro</dc:creator>
<og:type>article</og:type>
<og:title>JMAP: It’s like IMAP But Not Really</og:title>
<og:url>https://unencumberedbyfacts.com/2019/01/24/jmap-its-like-imap-but-not-really/</og:url>
<og:description>With the new year upon us, I decided it was time to do something ambitious for my Open Source project. This is where I normally quip about never mentioning my project before, even though I literall…</og:description>
<og:image>https://s0.wp.com/i/blank.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://unencumberedbyfacts.com/2019/01/24/jmap-its-like-imap-but-not-really/</dc:identifier>
</item>
<item>
<title>Revery – Native, high-performance, cross-platform desktop apps</title>
<link>https://github.com/revery-ui/revery</link>
<guid isPermaLink="true" >https://github.com/revery-ui/revery</guid>
<description>&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://dev.azure.com/revery-ui/revery/_build/latest?definitionId=2?branchName=master&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/1ea61b2583e26e95e6d8da86579b5e1e7c156daa/68747470733a2f2f6465762e617a7572652e636f6d2f7265766572792d75692f7265766572792f5f617069732f6275696c642f7374617475732f7265766572792d75692e7265766572793f6272616e63684e616d653d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://dev.azure.com/revery-ui/revery/_apis/build/status/revery-ui.revery?branchName=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://badge.fury.io/js/revery&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ca92f6874c0b2b01b1a420eabfaf9d2436af975a/68747470733a2f2f62616467652e667572792e696f2f6a732f7265766572792e737667&quot; alt=&quot;npm version&quot; data-canonical-src=&quot;https://badge.fury.io/js/revery.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build &lt;strong&gt;native&lt;/strong&gt;, &lt;em&gt;high-performance&lt;/em&gt;, &lt;strong&gt;cross-platform&lt;/strong&gt; desktop apps with &lt;a href=&quot;https://reasonml.github.io/&quot; rel=&quot;nofollow&quot;&gt;reason&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;🚧 &lt;strong&gt;NOTE:&lt;/strong&gt; Revery is a work-in-progress and in active development! 🚧&lt;/p&gt;
&lt;h2&gt;Building &amp;amp; Installing&lt;/h2&gt;
&lt;h3&gt;Install &lt;a href=&quot;https://esy.sh/&quot; rel=&quot;nofollow&quot;&gt;esy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;esy&lt;/code&gt; is like &lt;code&gt;npm&lt;/code&gt; for native code. If you don't have it already, install it by running:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;npm install -g esy
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3&gt;Building&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;esy install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;esy build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;For &lt;code&gt;macOS&lt;/code&gt; users&lt;/h4&gt;
&lt;p&gt;If your build takes too much time then you can pre-install some libraries:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;brew install cmake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brew install libpng ragel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;For &lt;code&gt;Linux&lt;/code&gt; users&lt;/h4&gt;
&lt;p&gt;Install the following packages with your package manager of choice:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ragel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5&gt;For &lt;code&gt;Ubuntu&lt;/code&gt; you may need these additional packages&lt;/h5&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;libpng-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libbz2-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h4&gt;For &lt;code&gt;Windows&lt;/code&gt; native&lt;/h4&gt;
&lt;p&gt;No additional dependencies needed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;esy&lt;/code&gt; requires building from an Administrator prompt (either &lt;code&gt;cmd.exe&lt;/code&gt; or &lt;code&gt;Powershell&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;For &lt;code&gt;Windows&lt;/code&gt; Subsystem for Linux (&lt;code&gt;WSL&lt;/code&gt;)&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;sudo apt install libpng-dev libbz2-dev m4 xorg-dev libglu1-mesa-dev&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Hardware acceleration is not enabled by default in WSL (instead, WSL will fall-back to a &lt;em&gt;software&lt;/em&gt; renderer). This is problematic for performance - for that reason, we recommend building and running Revery natively on Windows instead of with WSL. For more info see: (&lt;a href=&quot;https://github.com/Microsoft/WSL/issues/637&quot;&gt;https://github.com/Microsoft/WSL/issues/637&lt;/a&gt; and a &lt;a href=&quot;https://superuser.com/questions/1238925/use-accelerated-graphics-on-windows-10-linux-subsystem-with-xming&quot; rel=&quot;nofollow&quot;&gt;potential workaround&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Running&lt;/h3&gt;
&lt;p&gt;After building, you can run the example app by running:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;esy x Examples&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Check out our &lt;a href=&quot;https://github.com/revery-ui/revery/tree/master/examples&quot;&gt;examples&lt;/a&gt; to see how they work!&lt;/p&gt;
&lt;h3&gt;Tests&lt;/h3&gt;
&lt;p&gt;Tests can be run with:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;esy b dune runtest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Today, &lt;a href=&quot;https://electronjs.org/&quot; rel=&quot;nofollow&quot;&gt;Electron&lt;/a&gt; is one of the most popular tools for building desktop apps - using an HTML, JS, CSS stack. However, it has a heavy footprint in terms of both RAM and CPU - &lt;strong&gt;essentially packing an entire browser into the app.&lt;/strong&gt; Even with that tradeoff, it has a lot of great aspects - it's the quickest way to build a cross-platform app &amp;amp; it provides a great development experience - as can be testified by its usage in popular apps like VSCode, Discord, and Slack.&lt;/p&gt;
&lt;p&gt;Revery is kind of like super-fast, &lt;em&gt;native&lt;/em&gt; Electron - with bundled React-like/Redux-like libraries and a fast build system - all ready to go!&lt;/p&gt;
&lt;p&gt;Revery is built with &lt;a href=&quot;https://reasonml.github.io&quot; rel=&quot;nofollow&quot;&gt;reasonml&lt;/a&gt;, which is a javascript-like syntax on top of &lt;a href=&quot;https://ocaml.org&quot; rel=&quot;nofollow&quot;&gt;OCaml&lt;/a&gt; This means that the language is accessible to JS developers.&lt;/p&gt;
&lt;p&gt;Your apps are compiled to native code with the Reason / OCaml toolchain - with &lt;strong&gt;instant startup&lt;/strong&gt; and &lt;strong&gt;performance comparable to native C code.&lt;/strong&gt; Revery also features GPU-accelerated rendering. The compiler itself is fast, too!&lt;/p&gt;
&lt;p&gt;Revery is an experiment - can we provide a great developer experience and help teams be productive, without making sacrifices on performance?&lt;/p&gt;
&lt;h3&gt;Design Decisions&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Consistent cross-platform behavior&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;A major value prop of Electron is that you can build for all platforms at once. You have great confidence as a developer that your app will look and work the same across different platforms. Revery is the same - aside from platform-specific behavior, if your app looks or behaves differently on another platform, that's a bug! As a consequence, Revery is like &lt;a href=&quot;https://flutter.io&quot; rel=&quot;nofollow&quot;&gt;flutter&lt;/a&gt; in that it &lt;strong&gt;does not use native widgets&lt;/strong&gt;. This means more work for us, but also that we have more predictable functionality cross-platform!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you're looking for something that does leverage native widgets, check out &lt;a href=&quot;https://github.com/briskml/brisk&quot;&gt;briskml&lt;/a&gt;. Another alternative is the &lt;a href=&quot;https://github.com/let-def/cuite&quot;&gt;cuite&lt;/a&gt; OCaml binding for &lt;a href=&quot;https://github.com/let-def/cuite&quot;&gt;Qt&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;High performance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Performance should be at the forefront, and not a compromise - we need to develop and build benchmarks that help ensure top-notch performance and start-up time.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Type-safe, functional code&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We might have some dirty mutable objects for performance - but our high-level API should be purely functional. You should be able to follow the React model of modelling your UI as a &lt;em&gt;pure function&lt;/em&gt; of application state -&amp;gt; UI.&lt;/p&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/revery-ui/revery/blob/master/screenshots/sliders.png&quot;&gt;&lt;img src=&quot;https://github.com/revery-ui/revery/raw/master/screenshots/sliders.png&quot; alt=&quot;Slider components&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Quickstart&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://github.com/bryphe/revery-quick-start&quot;&gt;revery-quick-start&lt;/a&gt; to get up and running with your own Revery app!&lt;/p&gt;
&lt;h2&gt;API Example&lt;/h2&gt;
&lt;p&gt;Here's a super simple Revery app, demonstrating the basic API surface:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-reason&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;pl-c&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt; * The 'main' function for our app.&lt;/span&gt;
&lt;span class=&quot;pl-c&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; app &lt;span class=&quot;pl-smi&quot;&gt;=&amp;gt;&lt;/span&gt; {
  &lt;span class=&quot;pl-c&quot;&gt;/* Create a window! */&lt;/span&gt;
  &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;win&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;createWindow(app&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&quot;test&quot;&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;pl-c&quot;&gt;/* Set up some styles */&lt;/span&gt;
  &lt;span class=&quot;pl-k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;textHeaderStyle&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;pl-c1&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;[&lt;/span&gt;
      backgroundColor(&lt;span class=&quot;pl-c1&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;black)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
      color(&lt;span class=&quot;pl-c1&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;white)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
      fontFamily(&lt;span class=&quot;pl-s&quot;&gt;&quot;Roboto-Regular.ttf&quot;&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
      fontSize(&lt;span class=&quot;pl-c1&quot;&gt;24&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
    )&lt;span class=&quot;pl-smi&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;pl-c&quot;&gt;/* Set up render function */&lt;/span&gt;
  let render &lt;span class=&quot;pl-smi&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;=&amp;gt;&lt;/span&gt; {
    &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;view&lt;/span&gt;
      style&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;[&lt;/span&gt;
        position(&lt;span class=&quot;pl-c1&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;pl-e&quot;&gt;Absolute&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
        bottom(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
        top(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
        left(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
        right(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
        backgroundColor(&lt;span class=&quot;pl-c1&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;blue)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;pl-c1&quot;&gt;]&lt;/span&gt;}&amp;gt;
      &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;view&lt;/span&gt;
        style&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;[&lt;/span&gt;
          position(&lt;span class=&quot;pl-c1&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;pl-e&quot;&gt;Absolute&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
          bottom(&lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
          width(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
          height(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
          backgroundColor(&lt;span class=&quot;pl-c1&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;red)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;]&lt;/span&gt;}
      /&amp;gt;
      &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;image&lt;/span&gt; src&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt; style&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;make(~width&lt;span class=&quot;pl-smi&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt; ~height&lt;span class=&quot;pl-smi&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;()&lt;/span&gt;)} /&amp;gt;
      &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;text&lt;/span&gt; style&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;textHeaderStyle&amp;gt; &lt;span class=&quot;pl-s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt; &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;text&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span class=&quot;pl-ent&quot;&gt;view&lt;/span&gt;
        style&lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;{&lt;span class=&quot;pl-c1&quot;&gt;Style&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;pl-c1&quot;&gt;[&lt;/span&gt;
          width(&lt;span class=&quot;pl-c1&quot;&gt;25&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
          height(&lt;span class=&quot;pl-c1&quot;&gt;25&lt;/span&gt;)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
          backgroundColor(&lt;span class=&quot;pl-c1&quot;&gt;Colors&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;green)&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;pl-c1&quot;&gt;]&lt;/span&gt;}
      /&amp;gt;
    &amp;lt;/&lt;span class=&quot;pl-ent&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;span class=&quot;pl-smi&quot;&gt;;&lt;/span&gt;
  }&lt;span class=&quot;pl-smi&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;pl-c&quot;&gt;/* Start the UI */&lt;/span&gt;
  &lt;span class=&quot;pl-c1&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;start(win&lt;span class=&quot;pl-smi&quot;&gt;,&lt;/span&gt; render)&lt;span class=&quot;pl-smi&quot;&gt;;&lt;/span&gt;
}&lt;span class=&quot;pl-smi&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;pl-c&quot;&gt;/* Let's get this party started! */&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;pl-smi&quot;&gt;.&lt;/span&gt;start(init)&lt;span class=&quot;pl-smi&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Custom Components&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;It's early days for &lt;code&gt;revery&lt;/code&gt; and we still have a lot of work ahead!&lt;/p&gt;
&lt;p&gt;Some tentative work we need to do, in no particular order:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;UI Infrastructure
&lt;/li&gt;
&lt;li&gt;UI Components
&lt;/li&gt;
&lt;li&gt;Platform support
&lt;/li&gt;
&lt;li&gt;Mobile support
&lt;/li&gt;
&lt;li&gt;Developer Experience
&lt;/li&gt;
&lt;li&gt;Audio Support
&lt;/li&gt;
&lt;li&gt;Example apps
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Revery is provided under the &lt;a href=&quot;https://github.com/revery-ui/revery/blob/master/LICENSE&quot;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;We'd love your help, and welcome PRs and contributions. Join us on &lt;a href=&quot;https://discord.gg/UvQ2cFn&quot; rel=&quot;nofollow&quot;&gt;Discord&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Some ideas for getting started:&lt;/p&gt;
&lt;h2&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;revery&lt;/code&gt; would not be possible without a bunch of cool tech:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;revery&lt;/code&gt; was inspired by some &lt;strong&gt;awesome projects:&lt;/strong&gt;&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 25 Jan 2019 01:47:35 +0000</pubDate>
<dc:creator>stockkid</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/46036328?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>revery-ui/revery</og:title>
<og:url>https://github.com/revery-ui/revery</og:url>
<og:description>:zap: Native, high-performance, cross-platform desktop apps - built with Reason! - revery-ui/revery</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/revery-ui/revery</dc:identifier>
</item>
</channel>
</rss>