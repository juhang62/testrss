<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Virtual DOM is pure overhead (2018)</title>
<link>https://svelte.dev/blog/virtual-dom-is-pure-overhead</link>
<guid isPermaLink="true" >https://svelte.dev/blog/virtual-dom-is-pure-overhead</guid>
<description>&lt;p class=&quot;standfirst svelte-s4jvel&quot;&gt;Let's retire the 'virtual DOM is fast' myth once and for all&lt;/p&gt;
&lt;p class=&quot;byline svelte-s4jvel&quot;&gt;&lt;a href=&quot;https://twitter.com/Rich_Harris&quot; class=&quot;svelte-s4jvel&quot;&gt;Rich Harris&lt;/a&gt; &lt;time datetime=&quot;2018-12-27&quot;&gt;Thu Dec 27 2018&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;If you've used JavaScript frameworks in the last few years, you've probably heard the phrase 'the virtual DOM is fast', often said to mean that it's faster than the &lt;em&gt;real&lt;/em&gt; DOM. It's a surprisingly resilient meme — for example people have asked how Svelte can be fast when it doesn't use a virtual DOM.&lt;/p&gt;
&lt;p&gt;It's time to take a closer look.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;What_is_the_virtual_DOM&quot; class=&quot;offset-anchor&quot;/&gt;  What is the virtual DOM?&lt;/h2&gt;
&lt;p&gt;In many frameworks, you build an app by creating &lt;code&gt;render()&lt;/code&gt; functions, like this simple &lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt; component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;HelloMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
      Hello &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can do the same thing without JSX...&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;HelloMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'greeting'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;'Hello '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...but the result is the same — an object representing how the page should now look. That object is the virtual DOM. Every time your app's state updates (for example when the &lt;code&gt;name&lt;/code&gt; prop changes), you create a new one. The framework's job is to &lt;em&gt;reconcile&lt;/em&gt; the new one against the old one, to figure out what changes are necessary and apply them to the real DOM.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;How_did_the_meme_start&quot; class=&quot;offset-anchor&quot;/&gt;  How did the meme start?&lt;/h2&gt;
&lt;p&gt;Misunderstood claims about virtual DOM performance date back to the launch of React. In &lt;a href=&quot;https://www.youtube.com/watch?v=x7cQ3mrcKaY&quot; target=&quot;_blank&quot;&gt;Rethinking Best Practices&lt;/a&gt;, a seminal 2013 talk by former React core team member Pete Hunt, we learned the following:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;This is actually extremely fast, primarily because most DOM operations tend to be slow. There's been a lot of performance work on the DOM, but most DOM operations tend to drop frames.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt=&quot;Pete Hunt at JSConfEU 2013&quot; src=&quot;media/rethinking-best-practices.jpg&quot;/&gt; Screenshot from &lt;a href=&quot;https://www.youtube.com/watch?v=x7cQ3mrcKaY&quot;&gt;Rethinking Best Practices&lt;/a&gt; at JSConfEU 2013
&lt;p&gt;But hang on a minute! The virtual DOM operations are &lt;em&gt;in addition to&lt;/em&gt; the eventual operations on the real DOM. The only way it could be faster is if we were comparing it to a less efficient framework (there were plenty to go around back in 2013!), or arguing against a straw man — that the alternative is to do something no-one actually does:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;onEveryStateChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderMyApp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Pete clarifies soon after...&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;React is not magic. Just like you can drop into assembler with C and beat the C compiler, you can drop into raw DOM operations and DOM API calls and beat React if you wanted to. However, using C or Java or JavaScript is an order of magnitude performance improvement because you don't have to worry...about the specifics of the platform. With React you can build applications without even thinking about performance and the default state is fast.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;...but that's not the part that stuck.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;So_is_the_virtual_DOM_slow&quot; class=&quot;offset-anchor&quot;/&gt;  So... is the virtual DOM &lt;em&gt;slow&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;Not exactly. It's more like 'the virtual DOM is usually fast enough', but with certain caveats.&lt;/p&gt;
&lt;p&gt;The original promise of React was that you could re-render your entire app on every single state change without worrying about performance. In practice, I don't think that's turned out to be accurate. If it was, there'd be no need for optimisations like &lt;code&gt;shouldComponentUpdate&lt;/code&gt; (which is a way of telling React when it can safely skip a component).&lt;/p&gt;
&lt;p&gt;Even with &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, updating your entire app's virtual DOM in one go is a lot of work. A while back, the React team introduced something called React Fiber which allows the update to be broken into smaller chunks. This means (among other things) that updates don't block the main thread for long periods of time, though it doesn't reduce the total amount of work or the time an update takes.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;Where_does_the_overhead_come_from&quot; class=&quot;offset-anchor&quot;/&gt;  Where does the overhead come from?&lt;/h2&gt;
&lt;p&gt;Most obviously, &lt;a href=&quot;https://twitter.com/pcwalton/status/1015694528857047040&quot; target=&quot;_blank&quot;&gt;diffing isn't free&lt;/a&gt;. You can't apply changes to the real DOM without first comparing the new virtual DOM with the previous snapshot. To take the earlier &lt;code&gt;HelloMessage&lt;/code&gt; example, suppose the &lt;code&gt;name&lt;/code&gt; prop changed from 'world' to 'everybody'.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Both snapshots contain a single element. In both cases it's a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which means we can keep the same DOM node&lt;/li&gt;
&lt;li&gt;We enumerate all the attributes on the old &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and the new one to see if any need to be changed, added or removed. In both cases we have a single attribute — a &lt;code&gt;className&lt;/code&gt; with a value of &lt;code&gt;&quot;greeting&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Descending into the element, we see that the text has changed, so we'll need to update the real DOM&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Of these three steps, only the third has value in this case, since — as is the case in the vast majority of updates — the basic structure of the app is unchanged. It would be much more efficient if we could skip straight to step 3:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;changed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  text&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(This is almost exactly the update code that Svelte generates. Unlike traditional UI frameworks, Svelte is a compiler that knows at &lt;em&gt;build time&lt;/em&gt; how things could change in your app, rather than waiting to do the work at &lt;em&gt;run time&lt;/em&gt;.)&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;It_s_not_just_the_diffing_though&quot; class=&quot;offset-anchor&quot;/&gt;  It's not just the diffing though&lt;/h2&gt;
&lt;p&gt;The diffing algorithms used by React and other virtual DOM frameworks are fast. Arguably, the greater overhead is in the components themselves. You wouldn't write code like this...&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;StrawManComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;expensivelyCalculateValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;the value is &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...because you'd be carelessly recalculating &lt;code&gt;value&lt;/code&gt; on every update, regardless of whether &lt;code&gt;props.foo&lt;/code&gt; had changed. But it's extremely common to do unnecessary computation and allocation in ways that seem much more benign:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MoreRealisticComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;selected&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setSelected&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Selected &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;selected &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; selected&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'nothing'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setSelected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here, we're generating a new array of virtual &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements — each with their own inline event handler — on every state change, regardless of whether &lt;code&gt;props.items&lt;/code&gt; has changed. Unless you're unhealthily obsessed with performance, you're not going to optimise that. There's no point. It's plenty fast enough. But you know what would be even faster? &lt;em&gt;Not doing that.&lt;/em&gt;&lt;/p&gt;
&lt;aside readability=&quot;2.010989010989&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React Hooks&lt;/a&gt; doubles down on defaulting to doing unnecessary work, with &lt;a href=&quot;https://twitter.com/thekitze/status/1078582382201131008&quot;&gt;predictable results&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;The danger of defaulting to doing unnecessary work, even if that work is trivial, is that your app will eventually succumb to 'death by a thousand cuts' with no clear bottleneck to aim at once it's time to optimise.&lt;/p&gt;
&lt;p&gt;Svelte is explicitly designed to prevent you from ending up in that situation.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;Why_do_frameworks_use_the_virtual_DOM_then&quot; class=&quot;offset-anchor&quot;/&gt;  Why do frameworks use the virtual DOM then?&lt;/h2&gt;
&lt;p&gt;It's important to understand that virtual DOM &lt;em&gt;isn't a feature&lt;/em&gt;. It's a means to an end, the end being declarative, state-driven UI development. Virtual DOM is valuable because it allows you to build apps without thinking about state transitions, with performance that is &lt;em&gt;generally good enough&lt;/em&gt;. That means less buggy code, and more time spent on creative tasks instead of tedious ones.&lt;/p&gt;
&lt;p&gt;But it turns out that we can achieve a similar programming model without using virtual DOM — and that's where Svelte comes in.&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 23:15:52 +0000</pubDate>
<dc:creator>nailer</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://svelte.dev/blog/virtual-dom-is-pure-overhead</dc:identifier>
</item>
<item>
<title>“Python&amp;#039;s batteries are leaking”</title>
<link>http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</link>
<guid isPermaLink="true" >http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</guid>
<description>&lt;a href=&quot;http://1.bp.blogspot.com/-Z6QcSZJ-r74/XNzG_pDAiRI/AAAAAAAACN4/89VSfdr8X4YYOvt_xmo5AHtCt563sfDrACK4BGAYYCw/s1600/amber-brown-2.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-Z6QcSZJ-r74/XNzG_pDAiRI/AAAAAAAACN4/89VSfdr8X4YYOvt_xmo5AHtCt563sfDrACK4BGAYYCw/s640/amber-brown-2.jpg&quot;/&gt;&lt;/a&gt;&lt;p&gt;Amber Brown of the Twisted project shared her criticisms of the Python standard library. This proved to be the day’s most controversial talk; Guido van Rossum stormed from the room during Q &amp;amp; A.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://pyfound.blogspot.com/2019/05/the-2019-python-language-summit.html&quot;&gt;Read more 2019 Python Language Summit coverage&lt;/a&gt;.&lt;/p&gt;
Python claims to ship with batteries included, but according to Brown, without external packages it is only “marginally useful.” For example, &lt;code&gt;asyncio&lt;/code&gt; requires external libraries to connect to a database or to speak HTTP. Brown asserted that there were many such dependencies from the standard library to PyPI: &lt;code&gt;typing&lt;/code&gt; works best with &lt;code&gt;mypy&lt;/code&gt;, the &lt;code&gt;ssl&lt;/code&gt; module requires a monkeypatch to connect to non-ASCII domain names, &lt;code&gt;datetime&lt;/code&gt; needs &lt;code&gt;pytz&lt;/code&gt;, and &lt;code&gt;six&lt;/code&gt; is non-optional for writing code for Python 2 and 3.&lt;p&gt;Other standard library modules are simply inferior to alternatives on PyPI. The &lt;code&gt;http.client&lt;/code&gt; documentation advises readers to use Requests, and the &lt;code&gt;datetime&lt;/code&gt; module is confusing compared to its competitors such as &lt;code&gt;arrow&lt;/code&gt;, &lt;code&gt;dateutil&lt;/code&gt;, and &lt;code&gt;moment&lt;/code&gt;.&lt;/p&gt;&lt;br/&gt;“Python's batteries are leaking,” said Brown. She thinks that some bugs in the standard library will never be fixed. And even when bugs are fixed, PyPI libraries like Twisted cannot assume they run on the latest Python, so they must preserve their bug workarounds forever.&lt;p&gt;There are many modules that few applications use, but there is no method to install a subset of the standard library. Brown called out the XML parser and &lt;code&gt;tkinter&lt;/code&gt; in particular for making the standard library larger and harder to build, burdening all programmers for the sake of a few. As Russell Keith-Magee had described earlier in the day, the size of the standard library makes it difficult for PyBee to run Python on constrained devices. Brown also noted that some standard library modules were optimized in C for Python 3, but had to be reimplemented in pure Python for PyPy to support them.&lt;/p&gt;&lt;p&gt;Brown identified new standard library features that were “too little, too late,” leaving users to depend on backports to use those features in Python 2. For example, &lt;code&gt;socket&lt;/code&gt;.&lt;code&gt;sendmsg&lt;/code&gt; was added only recently, meaning Twisted must ship its own C extension to use &lt;code&gt;sendmsg&lt;/code&gt; in Python 2. Although Python 2 is nearly at its end of life, this only holds for the core developers, according to Brown, and for users, Red Hat and other distributors will keep Python 2 alive “until the goddam end of time.” Brown also mentioned that some &lt;code&gt;itertools&lt;/code&gt; code is shown as examples in the documentation instead of shipped as functions in the &lt;code&gt;itertools&lt;/code&gt; module.&lt;/p&gt;&lt;p&gt;Guido van Rossum, sitting at the back of the room, interrupted at this moment, “Can you keep to one topic? I'm sorry but this is just one long winding rant. What is your point?” Brown responded that her point was that there are a multitude of problems in the standard library.&lt;/p&gt;
&lt;br/&gt;Brown’s most controversial opinion, in her own estimation, is that adding modules to the standard library stifles innovation, by discouraging programmers from using or contributing to competing PyPI packages. Ever since &lt;code&gt;asyncio&lt;/code&gt; was announced she has had to explain why Twisted is still worthwhile, and now that data classes are in the standard library Hynek Schlawack must defend his &lt;code&gt;attrs&lt;/code&gt; package. Even as standard library modules crowd out other projects, they lag behind them. According to Brown, “the standard library is where code sometimes goes to die,” because it is difficult and slow to contribute code there. She acknowledged recent improvements, from Mariatta Wijaya’s efforts in particular, but Python is still harder to contribute to than PyPI packages.&lt;p&gt;“So I know a lot of this is essentially a rant,” she concluded, “but it's fully intended to be.”&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-tLT2DbjKtxc/XNzHr10yy-I/AAAAAAAACOE/hyiyitxGS84hupReozH8XNTeO_O9kYspwCLcBGAs/s1600/amber-brown-1.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1199&quot; data-original-width=&quot;800&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-tLT2DbjKtxc/XNzHr10yy-I/AAAAAAAACOE/hyiyitxGS84hupReozH8XNTeO_O9kYspwCLcBGAs/s320/amber-brown-1.jpg&quot; width=&quot;213&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
Nick Coghlan interpreted Brown’s proposal as generalizing the “ensurepip” model to ensure some packages are always available but can be upgraded separately from the standard library, and he thought this was reasonable.&lt;p&gt;Van Rossum was less convinced. He asked again, “Amber, what is your point?” Brown said her point was to move &lt;code&gt;asyncio&lt;/code&gt; to PyPI, along with most new feature development. “We should embrace PyPI,” she exhorted. Some ecosystems such as Javascript rely too much on packages, she conceded, but there are others like Rust that have small standard libraries and high-quality package repositories. She thinks that Python should move farther in that direction.&lt;/p&gt;&lt;p&gt;Van Rossum argued instead that if the Twisted team wants the ecosystem to evolve, they should stop supporting older Python versions and force users to upgrade. Brown acknowledged this point, but said half of Twisted users are still on Python 2 and it is difficult to abandon them. The debate at this point became personal for Van Rossum, and he left angrily.&lt;/p&gt;&lt;p&gt;Nathaniel Smith commented, “I'm noticing some tension here.” He guessed that Brown and the core team were talking past each other because the core team had different concerns from other Python programmers. Brown went further adding that because few Python core developers are also major library maintainers, library authors’ complaints are devalued or ignored.&lt;/p&gt;&lt;p&gt;The remaining core developers continued the technical discussion. Barry Warsaw said that the core team had discussed deprecating modules in the standard library, or creating slim distributions with a subset of it, but that it required a careful design. Others objected that slimming down the standard library risked breaking downstream code, or making work for programmers in enterprises that trust the standard library but not PyPI.&lt;/p&gt;&lt;p&gt;Pablo Galindo Salgado was concerned that moving modules from the standard library to PyPI would create an explosion of configurations to test, but in Brown’s opinion, “We are already living that life.” Some Linux and Python distributions have selectively backported features and fixes, leading to a much more complex set of configurations than the core team realizes.
&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 17:40:52 +0000</pubDate>
<dc:creator>narimiran</dc:creator>
<og:url>http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</og:url>
<og:title>Amber Brown: Batteries Included, But They're Leaking</og:title>
<og:description>Amber Brown of the Twisted project shared her criticisms of the Python standard library. This proved to be the day’s most controversial ta...</og:description>
<og:image>https://1.bp.blogspot.com/-Z6QcSZJ-r74/XNzG_pDAiRI/AAAAAAAACN4/89VSfdr8X4YYOvt_xmo5AHtCt563sfDrACK4BGAYYCw/w1200-h630-p-k-no-nu/amber-brown-2.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</dc:identifier>
</item>
<item>
<title>I Got a Knuth Check for 0x$3.00</title>
<link>https://nickdrozd.github.io/2019/05/17/knuth-check.html</link>
<guid isPermaLink="true" >https://nickdrozd.github.io/2019/05/17/knuth-check.html</guid>
<description>&lt;p&gt;&lt;strong&gt;Donald Knuth&lt;/strong&gt; is a computer scientist who is so committed to the correctness of his books that he offers &lt;strong&gt;one US hexadecimal dollar&lt;/strong&gt; ($2.56, 0x$1.00) for any “bug” found in his books, where a bug is anything that is “technically, historically, typographically, or politically incorrect”. I wanted to get a &lt;strong&gt;Knuth check&lt;/strong&gt; for myself, so I set out to find some errors in his magnum opus, &lt;strong&gt;&lt;em&gt;The Art of Computer Programming&lt;/em&gt;&lt;/strong&gt; (TAOCP). I found three and sent them in, and true to his word, he sent me back a check for &lt;strong&gt;0x$3.00&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nickdrozd.github.io/assets/2019-05-17-knuth-check/knuth-check.jpeg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it’s not a real check. Knuth used to send out real checks, but stopped in 2008 due to &lt;a href=&quot;https://www-cs-faculty.stanford.edu/~knuth/news08.html&quot;&gt;&lt;strong&gt;rampant fraud&lt;/strong&gt;&lt;/a&gt;. Now he sends out “personal certificates of deposit” to the &lt;a href=&quot;https://www-cs-faculty.stanford.edu/~knuth/boss.html&quot;&gt;&lt;strong&gt;Bank of San Serriffe&lt;/strong&gt;&lt;/a&gt; (BoSS). He says he’ll still send real money if it’s desired, but that seems like a lot of hassle.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;two typographical errors and one historical error&lt;/strong&gt;. I’ll describe them in order of triviality from greatest to least.&lt;/p&gt;

&lt;p&gt;The first typo is on page 392 of Volume 3, &lt;em&gt;Sorting and Searching&lt;/em&gt;, eighth line from the bottom: “After an unsuccessful search it is sometime desirable to enter a new record, containing &lt;em&gt;K&lt;/em&gt;, into the table; a method that does this is called a &lt;em&gt;search-and-insertion&lt;/em&gt; algorithm.” The error is that &lt;strong&gt;&lt;em&gt;sometime&lt;/em&gt;&lt;/strong&gt; should be &lt;strong&gt;&lt;em&gt;sometimes&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Of course, it’s no surprise that such an error should get made. This post alone is sure to contain several typos (no rewards for finding them though). What’s surprising is that it went undiscovered for so long. Page 392 isn’t buried deep in a math-heavy section, it’s the &lt;strong&gt;very first page&lt;/strong&gt; of Chapter 6, “Searching”! You’d think that would be one of the most-read sections of the whole thing, and therefore also one of the most typo-free, but I guess not.&lt;/p&gt;
&lt;p&gt;By the way, if you’ve ever thought about reading TAOCP, give it a try. A lot of people will tell you that it’s a &lt;strong&gt;reference work&lt;/strong&gt;, and it’s not meant to be read straight through, but that isn’t true. The author has a clear point of view and a narrative and an idiosyncratic style, and the only thing that inhibits readability is the difficulty of the math. There’s an easy solution to that though: &lt;em&gt;read until you get to math you don’t understand, then skip it and find the next section you can understand.&lt;/em&gt; Reading this way, I skip at least 80% of the book, but the remaining 20% is great!&lt;/p&gt;
&lt;p&gt;People also say that TAOCP is &lt;strong&gt;irrelevant&lt;/strong&gt; or outdated or otherwise inapplicable to “real programming”. This also wrong. For instance, the first section after the chapter intro deals with the basic problem of searching for an item in an unsorted array. The simplest algorithm should be familiar to all programmers. Start your pointer at the head of the array, then do the following in a loop:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Check if the current item is the desired one. If it is, return success; otherwise&lt;/li&gt;
&lt;li&gt;Check if the pointer is past the array bound. If it is, return failure; otherwise&lt;/li&gt;
&lt;li&gt;Increment the pointer and continue.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now consider: how many bound checks does this algorithm require on average? In the worst case, when the array doesn’t contain the item, one bound check will be required for each item in the list, and on average it will be something like &lt;em&gt;N/2&lt;/em&gt;. A more clever search algorithm can do it with just one bound check in all cases. Tack the desired item on to the end of the array, then start your pointer at the head of the array and do the following in a loop:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Check if the current item is the desired one. If it is, return success if the pointer is within the array bound and return failure if it isn’t; otherwise&lt;/li&gt;
&lt;li&gt;Increment the pointer and continue.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;With this algorithm, things are arranged such that the item is guaranteed to be found one way or another, and the bound check only needs to be executed once when the item is found. This is a deep idea, but it’s also simple enough even for a beginning programmer to understand. I guess I can’t speak about the relevance for the work of others, but I was immediately able to apply this wisdom in both personal and professional code. TAOCP is full of gems like this.&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Searching, searching&lt;br/&gt;For so long&lt;br/&gt;Searching, searching&lt;br/&gt;I just wanted to dance&lt;/p&gt;
&lt;p&gt;– Luther Vandross, Searching (1980)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second typo is in Volume 4A, &lt;em&gt;Combinatorial Algorithms, Part 1&lt;/em&gt;. There is a problem on page 60 that deals with scheduling comedians to perform at various casinos. Several real-life comedians are used as an example, including Lily Tomlin, Weird Al Yankovic, and &lt;strong&gt;Robin Williams&lt;/strong&gt;, who was not dead when the volume was published. Knuth always includes &lt;strong&gt;full names&lt;/strong&gt; in the indexes to his books,&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; so Williams appears on page 882 as “Williams, Robin &lt;strong&gt;McLaurim&lt;/strong&gt;”. But his middle name ends with an &lt;strong&gt;&lt;em&gt;n&lt;/em&gt;&lt;/strong&gt;, not an &lt;strong&gt;&lt;em&gt;m&lt;/em&gt;&lt;/strong&gt;, so it should be &lt;strong&gt;&lt;em&gt;McLaurin&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;McLaurin&lt;/em&gt; was his mother’s maiden name. She was the great-granddaughter of &lt;strong&gt;Anselm Joseph McLaurin&lt;/strong&gt;, the 34th governor of &lt;strong&gt;Mississippi&lt;/strong&gt;. His administration does not seem to have been noteworthy. According to &lt;a href=&quot;https://books.google.com/books?id=OvNjBAAAQBAJ&amp;amp;pg=PA177&amp;amp;lpg=PA177&amp;amp;dq=anselm+mclaurin&amp;amp;source=bl&amp;amp;ots=kPu_kLXUrz&amp;amp;sig=ACfU3U2UKRAmJyH_dVfcb2tfSmzYemEgTw&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwjTl9vvroDiAhVHI6wKHfCTC6I4MhDoATADegQICRAB#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;&lt;em&gt;Mississippi: A History&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most important event of McLaurin’s administration was the United States’ declaration of war against Spain in the spring of 1898…Unfortunately the war may have given some state officials the opportunity to practice graft. McLaurin was accused of various questionable practices, including nepotism and excessive use of his pardoning powers. And in this era of mounting support for the temperance movement, the governor’s critics charged him with drunkenness, an allegation he publicly admitted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider the &lt;strong&gt;traditional multiplication algorithm&lt;/strong&gt; taught to schoolchildren. How many single-digit multiplication operations does it require? Say you’re multiplying &lt;em&gt;m&lt;/em&gt;-digit &lt;em&gt;x&lt;/em&gt; by &lt;em&gt;n&lt;/em&gt;-digit &lt;em&gt;y&lt;/em&gt;. First you multiply the first digit of &lt;em&gt;x&lt;/em&gt; by each digit of &lt;em&gt;y&lt;/em&gt; in turn. Then you multiply the second digit of &lt;em&gt;x&lt;/em&gt; by each digit of &lt;em&gt;y&lt;/em&gt; in turn, and so on until you’ve gone through each digit of &lt;em&gt;x&lt;/em&gt;. Thus traditional multiplication requires &lt;em&gt;mn&lt;/em&gt; primitive multiplications. In particular, multiplying two numbers each with &lt;em&gt;n&lt;/em&gt; digits requires &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt; single-digit multiplications.&lt;/p&gt;
&lt;p&gt;That’s bad, but it’s possible to do better with a method devised by the Soviet mathematician &lt;strong&gt;Anatoly Alexeevich Karatsuba&lt;/strong&gt;. Say &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are two-digit decimal numbers; that is, there are numbers &lt;em&gt;a, b, c, d&lt;/em&gt; such that &lt;em&gt;x = (ab)&lt;sub&gt;10&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;y = (cd)&lt;sub&gt;10&lt;/sub&gt;&lt;/em&gt;.&lt;sup&gt;&lt;a id=&quot;fnr.3&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Then &lt;em&gt;x = 10a + b&lt;/em&gt;, &lt;em&gt;y = 10c + d&lt;/em&gt;, and &lt;em&gt;xy = (10a + b)(10c + d)&lt;/em&gt;. FOILing that out gives &lt;em&gt;xy = 100ac + 10ad + 10bc + bd&lt;/em&gt;. At this point we still have the expected &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt; = 4&lt;/em&gt; single-digit multiplications: &lt;em&gt;ac, ad, bc, bd&lt;/em&gt;. Now add and subtract &lt;em&gt;10ac + 10bc&lt;/em&gt;. Some clever rearranging, which I’ll leave as an exercise for the reader, yields &lt;em&gt;xy = 110ac + 11bd + 10(a - b)(d - c)&lt;/em&gt; – just three single-digit multiplications! (There are some constant coefficients, but those can be calculated by doing only addition and bit-shifting.)&lt;/p&gt;
&lt;p&gt;Don’t ask me to prove it, but the &lt;strong&gt;Karatsuba algorithm&lt;/strong&gt; (recursively generalized from the example above) improves the traditional method’s &lt;em&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/em&gt; multiplications to &lt;em&gt;O(n&lt;sup&gt;(lg 3)&lt;/sup&gt;)&lt;/em&gt;. Note that this is an actual algorithmic improvement, not a “mental math” trick. Indeed, the algorithm is not suitable for use inside the human brain, as it requires a large overhead to deal with recursive bookkeeping. Besides, the speedup doesn’t start to kick in until the numbers get fairly large anyway.&lt;sup&gt;&lt;a id=&quot;fnr.4&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This algorithm is described on page 295 of Volume 2, &lt;em&gt;Seminumerical Algorithms&lt;/em&gt;. There, Knuth says, “Curiously, this idea does not seem to have been discovered before &lt;strong&gt;1962&lt;/strong&gt;,” which is when the paper describing the Karatsuba algorithm was published. But! In 1995 Karatsuba published a paper titled “The Complexity of Computations” in which he says a few things: 1) Around 1956, Kolmogorov conjectured that multiplication could not be done with less than &lt;em&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/em&gt; multiplication steps. 2) In &lt;strong&gt;1960&lt;/strong&gt;, Karatsuba attended a seminar wherein Kolmogorov pitched his n&lt;sup&gt;2&lt;/sup&gt; conjecture. 3) “Exactly within a week” Karatsuba devised his divide-and-conquer algorithm. 4) In 1962, Kolmogorov wrote and published a paper &lt;em&gt;in Karatsuba’s name&lt;/em&gt; describing the algorithm. “I learned about the article only when I was given its reprints.”&lt;/p&gt;
&lt;p&gt;Thus the error is that &lt;em&gt;1962&lt;/em&gt; should be &lt;em&gt;1960&lt;/em&gt;. That’s it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finding these errors didn’t take a lot of skill.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The first typo took no skill at all to find. The error was as mundane as could be, and it was in a relatively visible place (the beginning of a chapter). Any idiot could have found it; I just happened to be the idiot who did.&lt;/li&gt;
&lt;li&gt;Finding the second typo required luck and diligence, but no skill. The index entry for “Williams” appears on the penultimate page of the volume, a highly visible piece of book real estate. I happened to be thumbing through the index&lt;sup&gt;&lt;a id=&quot;fnr.5&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, and it happened to catch my eye. Because I habitually look things up on &lt;strong&gt;Wikipedia&lt;/strong&gt;, I looked up Robin Williams, and I happened to notice the discrepancy.&lt;/li&gt;
&lt;li&gt;I wish I could say I did some serious digging to find the historical error, but really all I did was look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Karatsuba_algorithm&quot;&gt;the Wikipedia page on the Karatsuba algorithm&lt;/a&gt;, the first two lines of which read: “The Karatsuba algorithm is a fast multiplication algorithm. It was discovered by Anatoly Karatsuba in 1960 and published in 1962.” After that it was just a matter of connecting the dots.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In the future, I’d like to find a more substantial bug, especially one in Knuth’s code. I’d also like to find a bug in Volume 1, &lt;em&gt;Fundamental Algorithms&lt;/em&gt;. I might have already, but my local public library for whatever reason only has Volumes 2, 3, and 4A.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Financial facts:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;In total, my contributions to TAOCP consist of &lt;strong&gt;just three characters&lt;/strong&gt;: one added &lt;em&gt;s&lt;/em&gt;, an &lt;em&gt;n&lt;/em&gt; to replace an &lt;em&gt;m&lt;/em&gt;, and a &lt;em&gt;0&lt;/em&gt; to replace a &lt;em&gt;2&lt;/em&gt;. At $2.56 a pop, those are some &lt;strong&gt;lucrative&lt;/strong&gt; characters; if you were paid $2.56/character to write 1000 words with an average of 4 characters/word, you’d clear ten grand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My three hex dollars put me in a 29-way tie for being the &lt;strong&gt;69th richest person in all of San Serriffe&lt;/strong&gt;.&lt;sup&gt;&lt;a id=&quot;fnr.6&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://kevinlawler.com/knuth&quot;&gt;How to Get a Knuth Check&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;General advice for finding errors in Knuth books. It mostly applies to technical errors, which mine are not. It does have one suggestion that I took seriously:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is better to wait until you have a collection of errors to send in. Bundling several legitimate but low-grade errors together can increase the chance that one is actually treated as an error or a suggestion. Sending several errors in piecemeal could cause each of them to be dismissed out of hand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I didn’t want to just send in some &lt;strong&gt;chickenshit typos&lt;/strong&gt; by themselves, so as per the suggestion I waited until I had the historical error, which seemed serious enough, and then sent everything in at once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://ashutoshmehra.net/blog/about/knuth-reward-checks-and-certificates/&quot;&gt;The Checks of Ashutosh Mehra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ashutosh Mehra is the third-richest person in San Serriffe, with a whopping 0x$207.f0 in BoSS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.truetex.com/knuthchk.htm&quot;&gt;A check for some nonfunctional bugs in the actual TeX code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Miscellaneous: &lt;a href=&quot;http://ed-thelen.org/KnuthCheck.html&quot;&gt;#1&lt;/a&gt; &lt;a href=&quot;http://www.club.cc.cmu.edu/~ajo/knuth-check.html&quot;&gt;#2&lt;/a&gt; &lt;a href=&quot;http://joaoff.com/2008/02/25/a-reward-check-from-donald-knuth/&quot;&gt;#3&lt;/a&gt; &lt;a href=&quot;https://www.quora.com/What-is-it-like-to-receive-a-Knuth-reward-check&quot;&gt;#4&lt;/a&gt; &lt;a href=&quot;http://www.joshwakefield.com/knuth/&quot;&gt;#5&lt;/a&gt; &lt;a href=&quot;http://www.righto.com/2011/05/my-knuth-reward-check.html&quot;&gt;#6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; To be clear, there’s also a lot of weird stuff, like &lt;a href=&quot;https://nickdrozd.github.io/2018/11/02/bubble.html&quot;&gt;the bubble sort machine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; From &lt;a href=&quot;https://www-cs-faculty.stanford.edu/~knuth/help.html&quot;&gt;Help Wanted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I try to make the indexes to my books as complete as possible, or at least to give the illusion of completeness. Therefore I have adopted a policy of listing full names of everyone who is cited. For example, the index to Volume 1 of The Art of Computer Programming says ``Hoare, Charles Antony Richard’’ and ``Jordan, Marie Ennemond Camille’’ instead of just ``Hoare, C. A. R.’’ and ``Jordan, Camille.’’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.3&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Generalizing this algorithm to longer digits requires some bookkeeping, but isn’t too complicated. Still, I would certainly screw up the details, so I’m playing it safe by sticking with an easy example.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.4&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Fortunately, the Karatsuba algorithm has been superseded by even faster methods. In March 2019, an algorithm was published requiring &lt;a href=&quot;https://web.maths.unsw.edu.au/~davidharvey/papers/nlogn/&quot;&gt;&lt;em&gt;n log n&lt;/em&gt;&lt;/a&gt; multiplications. The speedup from this method only applies to numbers that are unimaginably large.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.5&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; This is less pathetic than it sounds, as Knuth’s indexes have &lt;strong&gt;Easter eggs&lt;/strong&gt; hidden in them. For instance, the index for &lt;strong&gt;&lt;em&gt;The TeXBook&lt;/em&gt;&lt;/strong&gt; has entries for &lt;em&gt;Arabic&lt;/em&gt; and &lt;em&gt;Hebrew&lt;/em&gt;, and they both point to page 66. But that page doesn’t mention either language; instead, it mentions “languages that read from right to left”.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.6&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; As of 1 May 2019.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl https://www-cs-faculty.stanford.edu/~knuth/boss.html | awk &lt;span class=&quot;s1&quot;&gt;'/0x\$[0-9a-f]+\.[0-9a-f]+/ { gsub(&quot;&amp;lt;[^&amp;gt;]*&amp;gt;&quot;, &quot; &quot;); print $NF }'&lt;/span&gt; | uniq &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 18 May 2019 17:16:38 +0000</pubDate>
<dc:creator>Supermighty</dc:creator>
<og:title>I Got a Knuth Check for 0x$3.00</og:title>
<og:description>Donald Knuth is a computer scientist who is so committed to the correctness of his books that he offers one US hexadecimal dollar ($2.56, 0x$1.00) for any “bug” found in his books, where a bug is anything that is “technically, historically, typographically, or politically incorrect”. I wanted to get a Knuth check for myself, so I set out to find some errors in his magnum opus, The Art of Computer Programming (TAOCP). I found three and sent them in, and true to his word, he sent me back a check for 0x$3.00.</og:description>
<og:url>/2019/05/17/knuth-check.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nickdrozd.github.io/2019/05/17/knuth-check.html</dc:identifier>
</item>
<item>
<title>South Korean government to switch to Linux: ministry</title>
<link>http://www.koreaherald.com/view.php?ud=20190517000378</link>
<guid isPermaLink="true" >http://www.koreaherald.com/view.php?ud=20190517000378</guid>
<description>The government will switch the operating system of its computers from Windows to Linux, the Ministry of the Interior and Safety said Thursday.&lt;p&gt;The Interior Ministry said the ministry will be test-running Linux on its PCs, and if no security issues arise, Linux systems will be introduced more widely within the government.&lt;/p&gt;&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; align=&quot;center&quot; border=&quot;0&quot; categoryid=&quot;0000000000000&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img width=&quot;650&quot; height=&quot;365&quot; categoryid=&quot;0000000000000&quot; alt=&quot;&quot; src=&quot;http://res.heraldm.com/content/image/2019/05/17/20190517000570_0.jpg&quot;/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;&lt;span&gt;(Yonhap)&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br/&gt;The decision comes amid concerns about the cost of continuing to maintain Windows, as Microsoft’s free technical support for Windows 7 expires in January 2020.&lt;p&gt;The transition to Linux OS and the purchase of new PCs are expected to cost the government about 780 billion won ($655 million), the ministry said.&lt;/p&gt;&lt;p&gt;Before the government-wide adoption, the ministry said it would test if the system could be run on private networked devices without security risks and if compatibility could be achieved with existing websites and software which have been built to run on Windows.&lt;/p&gt;&lt;p&gt;The ministry’s digital service bureau chief Choi Jang-hyuk said the ministry expects cost reductions through the introduction of the open-source OS and also hopes to avoid building reliance on a single operating system.&lt;/p&gt;&lt;p&gt;By Kim Arin (&lt;a href=&quot;mailto:arin@heraldcorp.com&quot;&gt;arin@heraldcorp.com&lt;/a&gt;)&lt;/p&gt;</description>
<pubDate>Sat, 18 May 2019 14:20:52 +0000</pubDate>
<dc:creator>jrepinc</dc:creator>
<og:title>S. Korean government to switch to Linux: ministry</og:title>
<og:type>article</og:type>
<og:url>http://www.koreaherald.com/view.php?ud=20190517000378</og:url>
<og:image>http://res.heraldm.com/content/image/2019/05/17/20190517000570_0.jpg</og:image>
<og:description>The government will switch the operating system of its computers from Windows to Linux, the Ministry of the Interior and Safety said Thursday.The Interior Ministry said the ministry will be test-running Linux on its PCs, and if no security issues arise, Linux systems will be introduced more widely within the government. (Yonhap)The decision comes amid concerns about the cost of continuing to maintain Windows, as Micr...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.koreaherald.com/view.php?ud=20190517000378</dc:identifier>
</item>
<item>
<title>Flexible data tables with CSS Grid</title>
<link>https://adamlynch.com/flexible-data-tables-with-css-grid/?1</link>
<guid isPermaLink="true" >https://adamlynch.com/flexible-data-tables-with-css-grid/?1</guid>
<description>&lt;p&gt;Now that we've launched, I can finally talk about the secret project I've been working on for the last two years. One interesting piece of the &lt;a href=&quot;https://www.teamwork.com/crm&quot; rel=&quot;noopener&quot;&gt;Teamwork CRM&lt;/a&gt; puzzle was the &quot;list view&quot;.&lt;/p&gt;
&lt;p&gt;It's a powerful page component which exists seven times in the app — a table on steroids essentially. I could talk about it for days but I won't bore you. I'll focus on how we added a lot of flexibility with a few lines of CSS (Grid). Namely, how we lay out data-heavy tables, how we support resizing of columns, and more.&lt;/p&gt;
&lt;p&gt;First, I need to give some more context, starting with the purpose and design goals of these screens. Feel free to &lt;a href=&quot;https://adamlynch.com/flexible-data-tables-with-css-grid/?1#just-get-to-css-grid-already&quot;&gt;skip to the CSS Grid bit&lt;/a&gt;.&lt;/p&gt;
&lt;a href=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/wide3.png&quot;&gt;&lt;img src=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/wide3.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;The leads list view.&lt;/p&gt;
&lt;p&gt;Primarily it allows salespeople to scan a list of items like their leads or contacts, and find anything important they need to take action on. It's not like an Excel spreadsheet — we can do a better job at laying out the data, which there will be a lot of.&lt;/p&gt;
&lt;p&gt;Everything we do is responsively designed. We start with the most narrow / constrained variant first and tweak the layout based on content, design, use cases (we don't have device-orientated breakpoints).&lt;/p&gt;
&lt;p&gt;At its most minimal, the columns are stacked vertically within rows, spanning the full width of the screen.&lt;/p&gt;
&lt;a href=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/narrow.png&quot;&gt;&lt;img src=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/narrow.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;What a list view looks like on a narrow screen.&lt;/p&gt;
&lt;p&gt;Responsive tables are tricky. There are &lt;a href=&quot;https://bradfrost.github.io/this-is-responsive/patterns.html&quot; rel=&quot;noopener&quot;&gt;several existing patterns&lt;/a&gt; you could pick from. Consider what your users are trying to achieve and choose wisely.&lt;/p&gt;
&lt;p&gt;Once we have enough pixels in our canvas to play with, we switch to a more typical table layout such that the columns are... well, columns. There are no major layout changes beyond this point but we still want to display the columns as best as we can for the salesperson viewing it.&lt;/p&gt;
&lt;p&gt;Assume there are a lot of columns (we'll look at how the user can configure the columns in more detail later). The table should fill the width of the screen (at least). Column widths then should be determined by their content and the type of values they contain; e.g. short / long text, date, number, URL, etc. Date columns should take up less room than long text columns.&lt;/p&gt;
&lt;p&gt;Columns must have a minimum width and therefore only so many can fit into the viewport. As a result this table will be vertically and horizontally scrollable for a lot of salespeople.&lt;/p&gt;
&lt;a href=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/resizing-window.gif&quot;&gt;&lt;img src=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/resizing-window.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;How the layout varies per window width. Sorry the GIF is a bit janky, I provide some interactive examples below.&lt;/p&gt;
&lt;p&gt;To begin with, we lay the table out as best we can using regular old-school table-layout CSS. Next, I'll show you how we enhance it with CSS Grid. Following that, how we leverage Grid to allow users to resize columns, which would be a lot more awkward with regular table-layout CSS.&lt;/p&gt;
&lt;h2&gt;Just get to CSS Grid already&lt;/h2&gt;
&lt;p&gt;I'm no CSS Grid expert but I love it. It's extremely powerful and simple, allowing you to implement previously tricky layouts with minute amounts of code. I'll skip giving an introduction to Grid in this article. Go read Rachel Andrew's &lt;a href=&quot;https://abookapart.com/products/the-new-css-layout&quot; rel=&quot;noopener&quot;&gt;The New CSS Layout&lt;/a&gt; or &lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/&quot; rel=&quot;noopener&quot;&gt;A Complete Guide to Grid&lt;/a&gt; and when you're done wondering where Grid was all your life, come back to me.&lt;/p&gt;
&lt;p&gt;The first thing we do is apply &lt;code&gt;display: grid&lt;/code&gt; to the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; to make it a grid. This won't break anything if the browser doesn't support it (it will carry on using &lt;code&gt;display:table&lt;/code&gt;). Its children become grid items; the &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;. It's not the &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;, or even the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;s we're concerned with though. What we want to do is lay out our &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;s on this grid. We could apply &lt;code&gt;display: grid&lt;/code&gt; to each of these too (i.e. grids within grids), but that's not ideal. Each &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; grid would be independent of others and that's not good (you'll see later that I had the same problem with Flexbox).&lt;/p&gt;
&lt;p&gt;A workaround is to use &lt;code&gt;display: contents&lt;/code&gt; on the &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;s. This basically removes the them from the Grid layout, bypassing them, and promotes their children (the &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;s and &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;s) to participate in the the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; grid instead.&lt;/p&gt;
&lt;p&gt;Then we use the magic &lt;code&gt;grid-template-columns&lt;/code&gt; to control the grid items. Yes, one line of CSS. For example, if we had one date column and one URL column, it might be something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;150px, 1.33fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;150px, 2.33fr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We use the same minimum size for all columns but the max (&lt;code&gt;fr&lt;/code&gt;) value is determined by the column data type. I tried using Grid's&lt;code&gt;auto&lt;/code&gt; and &lt;code&gt;max-content&lt;/code&gt; too but what we've ended up with seems to produce the best result.&lt;/p&gt;
&lt;p&gt;Here is a simplified example:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;390&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;adam-lynch&quot; data-slug-hash=&quot;XwKWdG&quot; data-pen-title=&quot;Flexible data table with CSS Grid&quot;&gt;&lt;span&gt;Something went wrong. View &lt;a href=&quot;https://codepen.io/adam-lynch/pen/XwKWdG/&quot; target=&quot;_blank&quot;&gt;Flexible data table with CSS Grid&lt;/a&gt; by Adam Lynch (&lt;a href=&quot;https://codepen.io/adam-lynch&quot;&gt;@adam-lynch&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You should &lt;a href=&quot;https://codepen.io/adam-lynch/debug/XwKWdG&quot; target=&quot;_blank&quot;&gt;open it in a new tab&lt;/a&gt; as it's a bit constrained embedded here like this. Then try resizing the window.&lt;/p&gt;
&lt;h2&gt;Resizing columns with Grid&lt;/h2&gt;
&lt;p&gt;On top of this, we support reordering, resizing, and toggling which columns are shown. The lists of possible columns are long, including properties of the item (e.g. leads) itself, properties of related items (e.g. the company linked to the lead), and custom fields.&lt;/p&gt;
&lt;p&gt;For example, a user could create a (date) custom field for contacts called &quot;Date of birth&quot; so that can be tracked in the system for each contact.&lt;/p&gt;
&lt;p&gt;Since a type like &quot;Date&quot; is selected when creating a custom field, our system already handles custom fields. There's more to think about when columns are toggled, but first I need to explain how resizing works.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The user hovers over a column header, a resize handle is shown on the right hand side. We're listening for &lt;code&gt;mousedown&lt;/code&gt; on the resize handle.&lt;/li&gt;
&lt;li&gt;When the user clicks the handle, we bind some more &lt;code&gt;mousemove&lt;/code&gt; and &lt;code&gt;mousedown&lt;/code&gt; event listeners (to the &lt;code&gt;window&lt;/code&gt;). We also add some classes for decoration at this point.&lt;/li&gt;
&lt;li&gt;When the user moves their mouse, we calculate the new column width. This takes the cursor position, the table's scroll position, and our minimum into account. Then we re-set the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;'s &lt;code&gt;grid-template-columns&lt;/code&gt;s rule (via &lt;code&gt;style&lt;/code&gt; attribute), this time replacing the max (&lt;code&gt;fr&lt;/code&gt;) value with a pixel value. For example, &lt;code&gt;grid-template-columns: minmax(150px, 1.33fr) 296px;&lt;/code&gt;. We do this using &lt;code&gt;requestAnimationFrame&lt;/code&gt; to keep it as smooth as possible.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;mouseup&lt;/code&gt; is fired, we unbind event listeners and remove classes.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Try this simplified example (or ideally &lt;a href=&quot;https://codepen.io/adam-lynch/pen/GaqgXP&quot; target=&quot;_blank&quot;&gt;open it in a new tab&lt;/a&gt;):&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;390&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;adam-lynch&quot; data-slug-hash=&quot;GaqgXP&quot; data-pen-title=&quot;Flexible data table with CSS Grid (resizable columns with good UX)&quot;&gt;&lt;span&gt;Something went wrong. View &lt;a href=&quot;https://codepen.io/adam-lynch/pen/GaqgXP/&quot; target=&quot;_blank&quot;&gt;Flexible data table with CSS Grid (resizable columns with good UX)&lt;/a&gt; by Adam Lynch (&lt;a href=&quot;https://codepen.io/adam-lynch&quot;&gt;@adam-lynch&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;What's great here is that we only need to update one element in the DOM, not each cell.&lt;/p&gt;
&lt;p&gt;We always build with touch users in mind, but it's OK not to support this via touch. It's a very precise action. Even if I wanted to resize a column using touch, I'd probably expect a different interaction, like a multi-touch spread gesture.&lt;/p&gt;
&lt;h2&gt;Fixed column widths&lt;/h2&gt;
&lt;p&gt;You might have noticed I didn't tell the whole truth. Not only do we &quot;fix&quot; the width of the column you're resizing, we make all column widths fixed. Maybe you didn't even notice, because that's exactly how it should work.&lt;/p&gt;
&lt;p&gt;I originally thought that users would like that when they stretched or squeezed columns, the other ones could adjust too. If the columns filled the screen width nicely and you make one smaller, one (or some) of the others could grow if they had more content to show. Try this example for yourself below (or ideally &lt;a href=&quot;https://codepen.io/adam-lynch/pen/wbWvep&quot; target=&quot;_blank&quot;&gt;open it in a new tab&lt;/a&gt;):&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;390&quot; data-theme-id=&quot;light&quot; data-default-tab=&quot;result&quot; data-user=&quot;adam-lynch&quot; data-slug-hash=&quot;wbWvep&quot; data-pen-title=&quot;Flexible data table with CSS Grid (resizable columns with bad UX)&quot;&gt;&lt;span&gt;Something went wrong. View &lt;a href=&quot;https://codepen.io/adam-lynch/pen/wbWvep/&quot; target=&quot;_blank&quot;&gt;Flexible data table with CSS Grid (resizable columns with bad UX)&lt;/a&gt; by Adam Lynch (&lt;a href=&quot;https://codepen.io/adam-lynch&quot;&gt;@adam-lynch&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;After some user testing, it was clear this is unexpected behaviour. As a user, I feel less in control when there are unpredictable side-effects to my actions.&lt;/p&gt;
&lt;p&gt;We shouldn't make assumptions based on which column was or wasn't interacted with. When resizing one column, a user could have already made an implicit decision that the rest were perfect.&lt;/p&gt;
&lt;p&gt;Therefore, if you open the app for the first time, the columns are laid out as best as possible. If you resize your screen, they resize using the same ratios. Once you touch the resize handler of any column, all of the visible columns become fixed width.&lt;/p&gt;
&lt;a href=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/resizing-columns.gif&quot;&gt;&lt;img src=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/resizing-columns.gif&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Before, during, and after resizing a column. Sorry the GIF is a bit janky.&lt;/p&gt;
&lt;p&gt;Once someone takes the time to tailor the screen to their needs, we take note. Any time a column is resized or made fixed, we create an independent localStorage entry mapping a column identifier to a pixel value.&lt;/p&gt;
&lt;p&gt;I can't remember exactly why we decided to set the fixed value using pixels, rather than something more fluid. Maybe it was just to keep it simple. Maybe it's because we do actually fall back to using a more archaic approach to setting column widths if Grid and &lt;code&gt;display: contents&lt;/code&gt; aren't supported. You don't have to do this, it would have been too important to leave out for our users.&lt;/p&gt;
&lt;p&gt;Using something fluid probably wouldn't align with the user's intentions anyway. We can't assume that making all columns smaller in order to keep more of them in the screen is the most important thing. If they had resized a column, it's to see a certain amount of content in that column. If we used a fluid unit, and then they made the screen narrower, we'd be disregarding the choice they made. They'd have to resize the column again to see the same content. Users are unlikely to be thinking &quot;Hmm, I want this column to take up 20% of the window even if I resize it&quot;. Anyway, users rarely resize windows; I'm going into too much detail on an edge case here.&lt;/p&gt;
&lt;h2&gt;Toggling columns&lt;/h2&gt;
&lt;a href=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/manage-columns.png&quot;&gt;&lt;img src=&quot;https://adamlynch.com/images/blog-content/flexible-data-tables-with-css-grid/manage-columns.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;
&lt;p&gt;Our modal for customizing which columns are shown.&lt;/p&gt;
&lt;p&gt;Imagine a salesperson has changed the column set using the above modal. If none of the chosen columns have been resized previously, they get laid out using the default &lt;code&gt;grid-template-column&lt;/code&gt; values depending on their data type. For example, &lt;code&gt;minmax(150px, 3.33fr)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If any of the columns has a fixed width stored in localStorage, we make &lt;em&gt;all&lt;/em&gt; of the chosen columns fixed width (and store those widths in localStorage too).&lt;/p&gt;
&lt;p&gt;Over time, more and more columns will become fixed. The only way for users to get back to fluid columns is if they were to reset the columns.&lt;/p&gt;
&lt;p&gt;We also store an array of column identifiers in localStorage, separate to the column width entries.&lt;/p&gt;
&lt;h2&gt;&quot;Why didn't you just use {{ libraryName }}?&quot;&lt;/h2&gt;
&lt;p&gt;I didn't want to just offload the problem to a heavy JavaScript library. It would be heavy, janky, wouldn't be responsive, and might not even use &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; at all. I also didn't want to write something like that myself. There must be a better way, I thought.&lt;/p&gt;
&lt;h2&gt;&quot;Why didn't you just use Flexbox?&quot;&lt;/h2&gt;
&lt;p&gt;Each row would be evaluated / spaced independently of each other. A column might not be aligned with the column above it because of varying content length.&lt;/p&gt;
&lt;p&gt;I could have switched to &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s representing the column containing the vertically stacked cells within. I didn't want to have to do this though. I wanted to use a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;. On top of that, I could have easily ran into issues from the reverse angle anyway, like cells not matching in height across columns.&lt;/p&gt;
&lt;h2&gt;&quot;Why didn't you just use a &lt;code&gt;&amp;lt;colgroup&amp;gt;&lt;/code&gt;?&quot;&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;&amp;lt;colgroup&amp;gt;&lt;/code&gt;&lt;/a&gt;, it's a handy old element. Once you define your columns using &lt;code&gt;&amp;lt;col&amp;gt;&lt;/code&gt;s, styles applied to one will effectively be applied to all of the cells in that column.&lt;/p&gt;
&lt;p&gt;In the end though, it was simply too limited for what I needed to do. It didn't take long to realise it was a no-go. So much so, that I can't remember exactly what the problems were. I'm pretty sure it was impossible to achieve the level of fluidity I wanted, and it didn't work well with Flexbox or Grid.&lt;/p&gt;
&lt;h2&gt;&quot;Why didn't you just use table-layout: fixed?&quot;&lt;/h2&gt;
&lt;p&gt;I could have use &lt;code&gt;table-layout: fixed&lt;/code&gt; on the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and set the column widths using percentages. However, from looking at examples and playing around, this only seems to work if the table is 100% in width. Also resizing one column causes the other columns to resize to fill the 100% width.&lt;/p&gt;
&lt;h2&gt;&quot;But you could still have used a table!&quot;&lt;/h2&gt;
&lt;p&gt;Yes, tables can do a lot of smart things out of the box, but they can't efficiently support everything I wanted to do. Still disagree? OK you wizard, teach me.&lt;/p&gt;
&lt;h2&gt;Don't go overboard with display: contents&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;display:contents&lt;/code&gt; allowed us to keep our table markup. Use it only when you really have to though. There is, or at least were, issues in some browsers around accessibility and how screen readers would read the content.&lt;/p&gt;
&lt;p&gt;We discovered a &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1550728&quot; rel=&quot;noopener&quot;&gt;strange bug&lt;/a&gt; when combining it with native drag &amp;amp; drop in Firefox.&lt;/p&gt;
&lt;p&gt;Fortunately, subgrid on the way which will properly allow descendants to participate in grids. Our use case is simple in that we want to effectively flatten the markup but subgrid will open the door for wilder multi-dimensional grid orgies. See &lt;a href=&quot;https://rachelandrew.co.uk/archives/2017/07/20/why-display-contents-is-not-css-grid-layout-subgrid/&quot; rel=&quot;noopener&quot;&gt;Why display: contents is not CSS Grid Layout subgrid&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;I'm probably forgetting something&lt;/h2&gt;
&lt;p&gt;There's a lot more to this screen. I think there was some text-overflow issue when resizing columns but I can't remember anymore.&lt;/p&gt;
&lt;p&gt;We use &lt;code&gt;position: sticky&lt;/code&gt; to keep the table headers in place as you scroll down. It's a lovely enhancement and it degrades nicely. However, we do have a JavaScript fallback for IE11 users. I really wouldn't recommend doing that. It's tricky to achieve with horizontally scrollable tables.&lt;/p&gt;
&lt;p&gt;I didn't even touch on all of the features of these list views. Users can apply, save, and share custom filters (e.g. show me leads over $500 or where the contact is in Europe). These column filters can be set to remember the column set you had when you created them, because you might always want to see certain columns for a given workflow.&lt;/p&gt;
&lt;p&gt;We'll soon support bulk editing via the list view, as well exporting your tailored view to CSV.&lt;/p&gt;
&lt;p&gt;Anyway, thanks for reading.&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 13:12:40 +0000</pubDate>
<dc:creator>adamlynch</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://adamlynch.com/flexible-data-tables-with-css-grid/?1</dc:identifier>
</item>
<item>
<title>Host Your Own Blog with Gitlab and Netlify</title>
<link>https://brainfood.xyz/post/20190518-host-your-own-blog-in-1-hour/</link>
<guid isPermaLink="true" >https://brainfood.xyz/post/20190518-host-your-own-blog-in-1-hour/</guid>
<description>&lt;p&gt;This guide shows how to host your own blog / website for free with about 1 hour of effort. It’s how I host this blog of mine.&lt;/p&gt;&lt;p&gt;There are certainly other options, and I’ve used some in the past. But this worked very well and with very little configuration effort.&lt;/p&gt;
&lt;p&gt;In this guide I use &lt;a href=&quot;https://gitlab.com&quot;&gt;Gitlab&lt;/a&gt; as code host and &lt;a href=&quot;https://netlify.com&quot;&gt;Netlify&lt;/a&gt; to publish the website. I’m using the &lt;a href=&quot;https://gohugo.io&quot;&gt;Hugo&lt;/a&gt; build system to build a static page.&lt;/p&gt;

&lt;p&gt;You’ll get a website / blog, that is automatically deployed whenever you push changes to your Git repository. The site will have free TLS (aka “https”) and IPv6. If you’re willing to spend USD 10 a year you will also get your own domain name.&lt;/p&gt;

&lt;p&gt;I’m assuming you already have a Gitlab account (it’s free) and that you’re logged-in to Gitlab.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://gitlab.com/pages/nfhugo&quot;&gt;https://gitlab.com/pages/nfhugo&lt;/a&gt; and fork the repository.&lt;/p&gt;
&lt;p&gt;In your cloned repository, click &lt;em&gt;Settings&lt;/em&gt; on the left. Change your &lt;em&gt;Project Name&lt;/em&gt; and click &lt;em&gt;Save changes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then scroll down to &lt;em&gt;Advanced&lt;/em&gt; and click &lt;em&gt;Remove the Forking Relationship&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Afterwards, once more open the &lt;em&gt;Advanced&lt;/em&gt; section and change the &lt;em&gt;Path&lt;/em&gt; to something that correlates with your project name, e.g. “blog”.&lt;/p&gt;

&lt;p&gt;If this is the first time you’re using Netlify, head straight ahead to their &lt;a href=&quot;https://app.netlify.com/signup&quot;&gt;&lt;em&gt;Sign Up&lt;/em&gt; page&lt;/a&gt;. I recommend to register with an email address, but you might as well use you Gitlab account right away.&lt;/p&gt;
&lt;p&gt;Once you’ve completed the signup process, you should add a &lt;em&gt;New site from Git&lt;/em&gt;. Choose your Git provider. If you’ve followed this guide, then that would be &lt;em&gt;Gitlab&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Select your repository in the next step, e.g. “blog”. At the third step just click &lt;em&gt;Deploy Site&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You’re website will now be deployed by Netlify and you will see the URL that Netlify generated for you. Click it, and you should see your blog / website.&lt;/p&gt;

&lt;p&gt;There are two ways to edit the content of your website. The easiest is using the Web IDE of Gitlab. Or you can also edit your pages on your local machine.&lt;/p&gt;
&lt;h2 id=&quot;web-ide&quot;&gt;Web IDE&lt;/h2&gt;
&lt;p&gt;Go to the &lt;em&gt;Repsitory&lt;/em&gt; page of your Gitlab project. In the upper-right section you should see the &lt;em&gt;Web IDE&lt;/em&gt; button. Press it, and it will take your straight to an online editor.&lt;/p&gt;
&lt;h2 id=&quot;local-editing&quot;&gt;Local Editing&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hint: I’m assuming you know how Git works&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can clone the repository to your computer and edit the files locally. To preview the changes, you can install &lt;a href=&quot;https://gohugo.io&quot;&gt;Hugo&lt;/a&gt; to your computer.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;hugo serve&lt;/code&gt; from the project root directory. It will echo a URL on which you will find a preview of your page.&lt;/p&gt;
&lt;h2 id=&quot;file-structure&quot;&gt;File Structure&lt;/h2&gt;
&lt;p&gt;Your content pages are in the &lt;code&gt;content&lt;/code&gt; directory. The &lt;code&gt;page&lt;/code&gt; directory contains general pages, such as the “about” page. The &lt;code&gt;post&lt;/code&gt; directory contains your blog posts. You should be able to adjust the pages by looking at the examples present.&lt;/p&gt;
&lt;p&gt;There is one more important file, and it’s the &lt;code&gt;config.toml&lt;/code&gt; file. It contains some basic information about your blog that you would like to adjust. If you’re interested how it could look like, have a look at my &lt;a href=&quot;https://gitlab.com/cimnine/brainfood.xyz/blob/4c092f412de85d97b1a4dc92ed830ca5f2eff0f0/config.toml&quot;&gt;&lt;code&gt;config.toml&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;Head over to &lt;a href=&quot;https://gohugo.io&quot;&gt;the Hugo website&lt;/a&gt; for more information about the file structure, all the settings and how it all works together. It explains anything in great detail.&lt;/p&gt;
&lt;h2 id=&quot;advanced-topic-branch-preview&quot;&gt;Advanced Topic: Branch Preview&lt;/h2&gt;
&lt;p&gt;By default, if you push a &lt;em&gt;branch&lt;/em&gt; to Gitlab, Netfify will create a preview deployment. You can find the URL to these on your site’s Netlify Dashboard under &lt;em&gt;Deploy Previews&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It’s a great way to preview a branch to someone else.&lt;/p&gt;

&lt;p&gt;It’s very easy to add a custom domain to your site, but domains are not free. But don’t worry, they’re mostly not expensive either.&lt;/p&gt;
&lt;p&gt;You can get domains such as &lt;code&gt;something.xyz&lt;/code&gt; for USD 10 per year.&lt;/p&gt;
&lt;h2 id=&quot;domain-registration&quot;&gt;Domain Registration&lt;/h2&gt;
&lt;p&gt;The first step is to register a domain somewhere. My domain is registered via &lt;a href=&quot;https://gen.xyz/a/16952&quot;&gt;gen.xyz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you choose to register with &lt;a href=&quot;https://gen.xyz/a/16952&quot;&gt;gen.xyz&lt;/a&gt;, pay attention to the following:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Select &lt;em&gt;1 year&lt;/em&gt; term.&lt;/li&gt;
&lt;li&gt;Make sure to opt-out of any of the promotional offers they have (unless you want them).&lt;/li&gt;
&lt;li&gt;Enter the promo code &lt;code&gt;GENXYZ&lt;/code&gt; and you will get the first year for just USD 1.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;After you paid via credit card or PayPal you will get loads of emails. &lt;strong&gt;There will be one important email&lt;/strong&gt; where you will need to confirm you email-address. It will usually arrive quite a bit after all the other emails arrive, and you can’t use the domain until you’ve confirmed your email-address.&lt;/p&gt;
&lt;h3 id=&quot;register-via-netlify&quot;&gt;Register via Netlify&lt;/h3&gt;
&lt;p&gt;You can also register your domain via Netlify. This is usally a bit more expensive, but it will be way easier in terms of configuration. If you want to do that, then just follow the steps below. But instead of a domain you already own, you’d enter the domain you’d like to have.&lt;/p&gt;
&lt;h2 id=&quot;configure-netlify&quot;&gt;Configure Netlify&lt;/h2&gt;
&lt;p&gt;Now that you own a domain, go to your Netlify account and click on &lt;em&gt;Domains&lt;/em&gt;. Choose &lt;em&gt;Add or Register a Domain&lt;/em&gt; and enter your newly registered domain.&lt;/p&gt;
&lt;p&gt;When it asks you to add DNS records, you may gladly skip over it. (i.e. click &lt;em&gt;Continue&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;In step three it will show you four nameservers. They will look similar to these:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;dns1.p04.nsone.net&lt;/li&gt;
&lt;li&gt;dns2.p04.nsone.net&lt;/li&gt;
&lt;li&gt;dns3.p04.nsone.net&lt;/li&gt;
&lt;li&gt;dns4.p04.nsone.net&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Note them down, as they are required in the next step.&lt;/p&gt;
&lt;p&gt;Then click &lt;em&gt;Done&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, on the top right, you should see a &lt;em&gt;Enable IPv6&lt;/em&gt; button. I recommend to click it, as it might give your site an extra speed boost in certain situations.&lt;/p&gt;
&lt;h2 id=&quot;configure-nameservers&quot;&gt;Configure Nameservers&lt;/h2&gt;
&lt;p&gt;You will now have to hook up to your domain with Netlify. If you registered with gen.xyz, navigate to your &lt;a href=&quot;https://gen.xyz/account/clientarea.php&quot;&gt;account dashboard&lt;/a&gt;. Click the grey &lt;em&gt;Manage&lt;/em&gt; button of your domain.&lt;/p&gt;
&lt;p&gt;In the section where it says &lt;em&gt;Nameserver&lt;/em&gt;, make sure the option &lt;em&gt;Use custom nameservers&lt;/em&gt; is active. Then enter the four nameservers you have noted down before.&lt;/p&gt;
&lt;p&gt;Click &lt;em&gt;Save Nameservers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It will usually take a while until your domain is reachable accross the internet. (A few hours is very common.)&lt;/p&gt;

&lt;p&gt;You have sucessfully deployed a personal website / blog. Now make sure that you keep it up-to-date and that anyone knows about it.&lt;/p&gt;

</description>
<pubDate>Sat, 18 May 2019 12:38:03 +0000</pubDate>
<dc:creator>cimnine</dc:creator>
<og:title>Host Your Own Blog with Gitlab and Netlify</og:title>
<og:description>This guide shows how to host your own blog / website for free with about 1 hour of effort. It’s how I host this blog of mine. There are certainly other options, and I’ve used some in the past. But this worked very well and with very little configuration effort. In this guide I use Gitlab as code host and Netlify to publish the website. I’m using the Hugo build system to build a static page.</og:description>
<og:url>https://brainfood.xyz/post/20190518-host-your-own-blog-in-1-hour/</og:url>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://brainfood.xyz/post/20190518-host-your-own-blog-in-1-hour/</dc:identifier>
</item>
<item>
<title>Show HN: The Cyber Plumber&amp;#039;s Handbook – SSH Tunnel Like a Boss</title>
<link>https://news.ycombinator.com/item?id=19946941</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=19946941</guid>
<description>Looking to get some feedback from the Hacker News community.
&lt;p&gt;I wrote the book with a focus on penetration testers and red teamers, but there are great examples for network admins, developers, and blue team defenders as well.&lt;/p&gt;&lt;p&gt;You can pick up a copy for free here through May 19, 2019: &lt;a href=&quot;https://gumroad.com/l/the_cyber_plumbers_handbook/hackernews20190518&quot; rel=&quot;nofollow&quot;&gt;https://gumroad.com/l/the_cyber_plumbers_handbook/hackernews...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please note, because it's hosted on Gumroad, it does require an email. If you don't want to give out your actual email, check out an anonymous email service. I give it away to students for free, so if you know of one that might like it, send them here to get instructions: &lt;a href=&quot;https://cph.opsdisk.com&quot; rel=&quot;nofollow&quot;&gt;https://cph.opsdisk.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About The Cyber Plumber's Handbook...&lt;/p&gt;
&lt;p&gt;This book is packed with practical and real world examples of SSH tunneling and port redirection in multiple realistic scenarios. It walks you through the basics of SSH tunneling (both local and remote port forwards), SOCKS proxies, port redirection, and how to utilize them with other tools like proxychains, nmap, Metasploit, and web browsers.&lt;/p&gt;
&lt;p&gt;Advanced topics included SSHing through 4 jump boxes, throwing exploits through SSH tunnels, scanning assets using proxychains and Metasploit's Meterpreter, browsing the Internet through a SOCKS proxy, utilizing proxychains and nmap to scan targets, and leveraging Metasploit's Meterpreter portfwd command.&lt;/p&gt;
&lt;p&gt;Let me know if you have any questions! Looking forward to your comments/feedback.&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 12:03:37 +0000</pubDate>
<dc:creator>opsdisk</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=19946941</dc:identifier>
</item>
<item>
<title>Aggressive Chess Openings (2012)</title>
<link>https://chess.stackexchange.com/questions/75/very-aggressive-openings</link>
<guid isPermaLink="true" >https://chess.stackexchange.com/questions/75/very-aggressive-openings</guid>
<description>&lt;p&gt;Probably &lt;strong&gt;the most aggressive opening without being unplayable&lt;/strong&gt; in chess is &lt;strong&gt;Double Muzio Gambit&lt;/strong&gt; in King's Gambit, which &lt;strong&gt;sacrifices two minor pieces for a wildest possible opening attack&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;rnb1kbnr/pppp1B1p/8/4q3/5p2/5Q2/PPPP2PP/RNB2RK1 b kq - 0 8
1. e4 e5 2. f4 exf4 3. Nf3 g5 4. Bc4 g4 5. O-O! {Strongest continuation, Muzio gambit! White sacrifices a piece for better development and attack(a very wild one)} gxf3 6. Qxf3 Qf6 7. e5 {after Qxe5, white can play d4 with tempo, increasing deveolpment advantage} Qxe5 8.Bxf7+!!? {Double Muzio Gambit, doubles the fun, now its kill or to be killed. White has two big pieces in f-file, and also black king is on the same file, white has a clear development advantage, shortly white has the wildest possible attack in 8 moves} 
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I encourage you to see this nice analysis about &lt;a href=&quot;http://www.millican.org/chess/muzio.pdf&quot; rel=&quot;noreferrer&quot;&gt;Double Muzio Gambit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I played this variation succesfully in OTB games. If you think that this can't be playable, then check this master game:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[Title &quot;Kuznetsov, Sergei (2396) vs. Korjakin, Boris (2274) - 2007&quot;]
[FEN &quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;]

1. e4 e5 2. f4 exf4 3. Nf3 g5 4. Bc4 g4 5. O-O gxf3 6. Qxf3 Qf6 7. e5 Qxe5 8.
Bxf7+ Kxf7 9. d4 Qxd4+ 10. Be3 Qf6 11. Nc3 fxe3 12. Qh5+ Kg7 13. Rxf6 Nxf6 14.
Qg5+ Kf7 15. Rf1 Bg7 16. Nd5 e2 17. Rxf6+  1-0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Not satified? Another master game:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[Title &quot;Lanzani, Mario (2371) vs. Sheskin, Matan (2207) - 2010&quot;]
[FEN &quot;rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1&quot;]

1. e4 e5 2. f4 exf4 3. Nf3 g5 4. Bc4 g4 5. O-O gxf3 6. Qxf3 Qf6 7. e5 Qxe5 8.
Bxf7+ Kxf7 9. d4 Qxd4+ 10. Be3 Qf6 11. Bxf4 Ne7 12. Nc3 Qf5 13. Qe3 d6 14. Bg5
Nbc6 15. g4 Bg7 16. Nb5 Qxf1+ 17. Rxf1+ Ke8 18. Bxe7 Nxe7 19. Nxc7+ Kd7 20.
Nxa8 b6 21. Rf7 Be5 22. Qg5 Re8 23. Nc7 h6 24. Qh4  1-0
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you think that the line is unplayable and white is winning just because of being stronger about 130 Elo, then check this evaluation of Komodo-9.3. A GM-slayer chess engine can't find a winning advantage too:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;[Title &quot;After 10...Qf6 | Komodo-9.3 Depth:31 -0.30&quot;]
[FEN &quot;rnb2bnr/pppp1k1p/5q2/8/5p2/4BQ2/PPP3PP/RN3RK1 w - - 2 1&quot;]


1. Nc3 Nc6 2. Bxf4 d6 3. Nd5 Qf5 4. Be5 Qxf3 5. Rxf3+ Bf5 6. Bxh8 Nge7 7. Nxc7
Rc8 8. Nb5 Ke6 9. g4 Bxg4 10. Rf6+ Kd7 11. Rxd6+ Ke8 12. h3 Be2 13. Nc3 Bh5 14.
Ne4 Nf5 15. Nf6+ Kf7 16. Rd7+ Kg6 17. Nxh5 Bc5+ 18. Kh1 Kxh5 19. Bc3 h6 20. Re1
Bf2 21. Re6 Rf8 22. b3 Ncd4 23. Bxd4 Bxd4 24. Rxb7 Kh4 25. Kh2 Rg8 26. Rb4 {
-0.30}  
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If it can't find, we can say that our opponents can't find over the board too. Therefore, I can rightfully claim that this line is definitely not a cheap opening trap, and absolutely playable. Black seems to have only a little advantage in this very uncomfortable extremely sharp defensive position, while White is enjoying the attack.&lt;/p&gt;
&lt;p&gt;If there is a concept as suicide bombing opening in chess, then this is it, Double Muzio Gambit.&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 10:51:42 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<og:type>website</og:type>
<og:url>https://chess.stackexchange.com/questions/75/very-aggressive-openings</og:url>
<og:image>https://cdn.sstatic.net/Sites/chess/img/apple-touch-icon@2.png?v=4f9612ec1300</og:image>
<og:title>Very Aggressive Openings</og:title>
<og:description>One of my favorite openings is the King's Gambit. It is extremely aggressive, and makes for a sharp tactical game without sacrificing too much material. It isn't played at the highest level at st...</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://chess.stackexchange.com/questions/75/very-aggressive-openings</dc:identifier>
</item>
<item>
<title>Preventing the Collapse of Civilization [video]</title>
<link>https://www.youtube.com/watch?v=pW-SOdj4Kkk</link>
<guid isPermaLink="true" >https://www.youtube.com/watch?v=pW-SOdj4Kkk</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.youtube.com/watch?v=pW-SOdj4Kkk&quot;&gt;https://www.youtube.com/watch?v=pW-SOdj4Kkk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=19945452&quot;&gt;https://news.ycombinator.com/item?id=19945452&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 208&lt;/p&gt;
&lt;p&gt;# Comments: 103&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 03:39:33 +0000</pubDate>
<dc:creator>dmit</dc:creator>
<og:url>https://www.youtube.com/watch?v=pW-SOdj4Kkk</og:url>
<og:title>Jonathan Blow - Preventing the Collapse of Civilization (English only)</og:title>
<og:image>https://i.ytimg.com/vi/pW-SOdj4Kkk/maxresdefault.jpg</og:image>
<og:description>Jonathan's talk from DevGAMM 2019.</og:description>
<og:type>video.other</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.youtube.com/watch?v=pW-SOdj4Kkk</dc:identifier>
</item>
<item>
<title>Three.js Fundamentals</title>
<link>https://threejsfundamentals.org/threejs/lessons/threejs-fundamentals.html</link>
<guid isPermaLink="true" >https://threejsfundamentals.org/threejs/lessons/threejs-fundamentals.html</guid>
<description>&lt;p&gt;This is the first article in a series of articles about three.js. &lt;a href=&quot;http://threejs.org&quot;&gt;Three.js&lt;/a&gt; is a 3D library that tries to make it as easy as possible to get 3D content on a webpage.&lt;/p&gt;
&lt;p&gt;Three.js is often confused with WebGL since more often than not, but not always, three.js uses WebGL to draw 3D. &lt;a href=&quot;https://webglfundamentals.org&quot;&gt;WebGL is a very low-level system that only draws points, lines, and triangles&lt;/a&gt;. To do anything useful with WebGL generally requires quite a bit of code and that is where three.js comes in. It handles stuff like scenes, lights, shadows, materials, textures, 3d math, all things that you'd have to write yourself if you were to use WebGL directly.&lt;/p&gt;
&lt;p&gt;These tutorials assume you already know JavaScript and, for the most part they will use ES6 style. &lt;a href=&quot;https://threejsfundamentals.org/threejs/lessons/threejs-prerequisites.html&quot;&gt;See here for a terse list of things you're expected to already know&lt;/a&gt;. Most browsers that support three.js are auto-updated so most users should be able to run this code. If you'd like to make this code run on really old browsers look into a transpiler like &lt;a href=&quot;http://babel.io&quot;&gt;Babel&lt;/a&gt;. Of course users running really old browsers probably have machines that can't run three.js.&lt;/p&gt;
&lt;p&gt;When learning most programming languages the first thing people do is make the computer print &lt;code&gt;&quot;Hello World!&quot;&lt;/code&gt;. For 3D one of the most common first things to do is to make a 3D cube. so let's start with &quot;Hello Cube!&quot;&lt;/p&gt;
&lt;p&gt;The first thing we need is a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; tag so&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;body&amp;gt;
  &amp;lt;canvas id=&quot;c&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Three.js will draw into that canvas so we need to look it up and pass it to three.js.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;script&amp;gt;
'use strict';

/* global THREE */

function main() {
  const canvas = document.querySelector('#c');
  const renderer = new THREE.WebGLRenderer({canvas});
  ...
&amp;lt;/script&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Note there are some esoteric details here. If you don't pass a canvas into three.js it will create one for you but then you have to add it to your document. Where to add it may change depending on your use case and you'll have to change your code so I find that passing a canvas to three.js feels a little more flexible. I can put the canvas anywhere and the code will find it where as if I had code to insert the canvas into to the document I'd likely have to change that code if my use case changed.&lt;/p&gt;
&lt;p&gt;After we look up the canvas we create a &lt;code&gt;WebGLRenderer&lt;/code&gt;. The renderer is the thing responsible for actually taking all the data you provide and rendering it to the canvas. In the past there have been other renderers like &lt;code&gt;CSSRenderer&lt;/code&gt;, a &lt;code&gt;CanvasRenderer&lt;/code&gt; and in the future there may be a &lt;code&gt;WebGL2Renderer&lt;/code&gt; or &lt;code&gt;WebGPURenderer&lt;/code&gt;. For now there's the &lt;code&gt;WebGLRenderer&lt;/code&gt; that uses WebGL to render 3D to the canvas.&lt;/p&gt;
&lt;p&gt;Next up we need a camera.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;const fov = 75;
const aspect = 2;  // the canvas default
const near = 0.1;
const far = 5;
const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;fov&lt;/code&gt; is short for &lt;code&gt;field of view&lt;/code&gt;. In this case 75 degrees in the vertical dimension. Note that most angles in three.js are in radians but for some reason the perspective camera takes degrees.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;aspect&lt;/code&gt; is the display aspect of the canvas. We'll go over the details in another article but by default a canvas is 300x150 pixels which makes the aspect 300/150 or 2.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;near&lt;/code&gt; and &lt;code&gt;far&lt;/code&gt; represent the space in front of the camera that will be rendered. Anything before that range or after that range will be clipped (not drawn).&lt;/p&gt;
&lt;p&gt;Those 4 settings define a &lt;em&gt;&quot;frustum&quot;&lt;/em&gt;. A &lt;em&gt;frustum&lt;/em&gt; is the name of a 3d shape that is like a pyramid with the tip sliced off. In other words think of the word &quot;frustum&quot; as another 3D shape like sphere, cube, prism, frustum.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://threejsfundamentals.org/threejs/lessons/resources/frustum-3d.svg&quot; width=&quot;500&quot; class=&quot;threejs_center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The height of the near and far planes are determined by the field of view. The width of both planes is determined by the field of view and the aspect.&lt;/p&gt;
&lt;p&gt;Anything inside the defined frustum will be be drawn. Anything outside will not.&lt;/p&gt;
&lt;p&gt;The camera defaults to looking down the -Z axis with +Y up. We'll put our cube at the origin so we need to move the camera back a litte from the origin in order to see anything.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;camera.position.z = 2;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here's what we're aiming for.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://threejsfundamentals.org/threejs/lessons/resources/scene-down.svg&quot; width=&quot;500&quot; class=&quot;threejs_center&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In the diagram above we can see our camera is at &lt;code&gt;z = 2&lt;/code&gt;. It's looking down the -Z axis. Our frustum starts 0.1 units from the front of the camera and goes to 5 units in front of the camera. Because in this diagram we are looking down, the field of view is affected by the aspect. Our canvas is twice as wide as it is tall so across view the field of view will be much wider than our specified 75 degrees which is the vertical field of view.&lt;/p&gt;
&lt;p&gt;Next we make a &lt;code&gt;Scene&lt;/code&gt;. A &lt;code&gt;Scene&lt;/code&gt; in three.js is the root of a form of scene graph. Anything you want three.js to draw needs to be added to the scene. We'll cover more details of &lt;a href=&quot;https://threejsfundamentals.org/threejs/lessons/threejs-scenegraph.html&quot;&gt;how scenes work in a future article&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;const scene = new THREE.Scene();
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Next up we create a &lt;code&gt;BoxGeometry&lt;/code&gt; which contains the data for a box. Almost anything we want to display in Three.js needs geometry which defines the vertices that make up our 3D object.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;const boxWidth = 1;
const boxHeight = 1;
const boxDepth = 1;
const geometry = new THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We then create a basic material and set its color. Colors can be specified using standard CSS style 6 digit hex color values.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;const material = new THREE.MeshBasicMaterial({color: 0x44aa88});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We then create a &lt;code&gt;Mesh&lt;/code&gt;. A &lt;code&gt;Mesh&lt;/code&gt; in three represents the combination of a &lt;code&gt;Geometry&lt;/code&gt; (the shape of the object) and a &lt;code&gt;Material&lt;/code&gt; (how to draw the object, shiny or flat, what color, what texture(s) to apply. Etc.) as well as the position, orientation, and scale of that object in the scene.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;const cube = new THREE.Mesh(geometry, material);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And finally we add that mesh to the scene&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;scene.add(cube);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We can then render the scene by calling the renderer's render function and passing it the scene and the camera&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;renderer.render(scene, camera);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here's a working exmaple&lt;/p&gt;

&lt;p&gt;It's kind of hard to tell that is a 3D cube since we're viewing it directly down the -Z axis and the cube itself is axis aligned so we're only seeing a single face.&lt;/p&gt;
&lt;p&gt;Let's animate it spinning and hopefully that will make it clear it's being drawn in 3D. To animate it we'll render inside a render loop using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's our loop&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;function render(time) {
  time *= 0.001;  // convert time to seconds

  cube.rotation.x = time;
  cube.rotation.y = time;

  renderer.render(scene, camera);

  requestAnimationFrame(render);
}
requestAnimationFrame(render);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt; is a request to the browser that you want to animate something. You pass it a function to be called. In our case that function is &lt;code&gt;render&lt;/code&gt;. The browser will call your function and if you update anything related to the display of the page the browser will re-render the page. In our case we are calling three's &lt;code&gt;renderer.render&lt;/code&gt; function which will draw our scene.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt; passes the time since the page loaded to our function. That time is passed in milliseconds. I find it's much easier to work with seconds so here we're converting that to seconds.&lt;/p&gt;
&lt;p&gt;We then set the cube's X and Y rotation to the current time. These rotations are in &lt;a href=&quot;https://en.wikipedia.org/wiki/Radian&quot;&gt;radians&lt;/a&gt;. There are 2 pi radians in a circle so our cube should turn around once on each axis in about 6.28 seconds.&lt;/p&gt;
&lt;p&gt;We then render the scene and request another animation frame to continue our loop.&lt;/p&gt;
&lt;p&gt;Outside the loop we call &lt;code&gt;requestAnimationFrame&lt;/code&gt; one time to start the loop.&lt;/p&gt;

&lt;p&gt;It's a little better but it's still hard to see the 3d. What would help is to add some lighting so let's add a light. There are many kinds of lights in three.js which we'll go over in a future article. For now let's create a directional light.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;{
  const color = 0xFFFFFF;
  const intensity = 1;
  const light = new THREE.DirectionalLight(color, intensity);
  light.position.set(-1, 2, 4);
  scene.add(light);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Directional lights have a position and a target. Both default to 0, 0, 0. In our case we're setting the light's position to -1, 2, 4 so it's slightly on the left, above, and behind our camera. The target is still 0, 0, 0 so it will shine toward the origin.&lt;/p&gt;
&lt;p&gt;We also need to change the material. The &lt;code&gt;MeshBasicMaterial&lt;/code&gt; is not affected by lights. Let's change it to a &lt;code&gt;MeshPhongMaterial&lt;/code&gt; which is affected by lights.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;-const material = new THREE.MeshBasicMaterial({color: 0x44aa88});  // greenish blue
+const material = new THREE.MeshPhongMaterial({color: 0x44aa88});  // greenish blue
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And here it is working.&lt;/p&gt;

&lt;p&gt;It should now be pretty clearly 3D.&lt;/p&gt;
&lt;p&gt;Just for the fun of it let's add 2 more cubes.&lt;/p&gt;
&lt;p&gt;We'll use the same geometry for each cube but make a different material so each cube can be a different color.&lt;/p&gt;
&lt;p&gt;First we'll make a function that creates a new material with the specified color. Then it creates a mesh using the specified geometry and adds it to the scene and sets its X position.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;function makeInstance(geometry, color, x) {
  const material = new THREE.MeshPhongMaterial({color});

  const cube = new THREE.Mesh(geometry, material);
  scene.add(cube);

  cube.position.x = x;

  return cube;
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then we'll call it 3 times with 3 different colors and X positions saving the &lt;code&gt;Mesh&lt;/code&gt; instances in an array.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;const cubes = [
  makeInstance(geometry, 0x44aa88,  0),
  makeInstance(geometry, 0x8844aa, -2),
  makeInstance(geometry, 0xaa8844,  2),
];
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally we'll spin all 3 cubes in our render function. We compute a slightly different rotation for each one.&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code class=&quot;lang-js&quot;&gt;function render(time) {
  time *= 0.001;  // convert time to seconds

  cubes.forEach((cube, ndx) =&amp;gt; {
    const speed = 1 + ndx * .1;
    const rot = time * speed;
    cube.rotation.x = rot;
    cube.rotation.y = rot;
  });

  ...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and here's that.&lt;/p&gt;

&lt;p&gt;If you compare it to the top down diagram above you can see it matches our expectections. With cubes at X = -2 and X = +2 they are partially outside our frustum. They are also somewhat exaggeratedly warped since the field of view across the canvas is so extreme.&lt;/p&gt;
&lt;p&gt;I hope this short intro helps to get things started. &lt;a href=&quot;https://threejsfundamentals.org/threejs/lessons/threejs-responsive.html&quot;&gt;Next up we'll cover making our code responsive so it is adaptable to multiple situations&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 01:14:48 +0000</pubDate>
<dc:creator>petethomas</dc:creator>
<og:title>Three.js Fundamentals</og:title>
<og:type>website</og:type>
<og:image>http://threejsfundamentals.org/threejs/lessons/resources/threejsfundamentals.jpg</og:image>
<og:description>Your first Three.js lesson starting with the fundamentals</og:description>
<og:url>http://threejsfundamentals.org/threejs/lessons/threejs-fundamentals.html</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://threejsfundamentals.org/threejs/lessons/threejs-fundamentals.html</dc:identifier>
</item>
</channel>
</rss>