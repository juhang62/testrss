<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Porting 30K lines of code from Flow to TypeScript</title>
<link>https://davidgom.es/porting-30k-lines-of-code-from-flow-to-typescript/</link>
<guid isPermaLink="true" >https://davidgom.es/porting-30k-lines-of-code-from-flow-to-typescript/</guid>
<description>&lt;h4 id=&quot;werecentlyportedmemsqlstudios30thousandlinesofjavascriptfromusingflowtotypescriptinthisarticleidescribewhyweportedourcodebasehowittookplaceandhowithasbeenworkingoutforus&quot;&gt;We recently ported &lt;a href=&quot;https://www.memsql.com/manage/&quot;&gt;MemSQL Studio&lt;/a&gt;'s 30 thousand lines of JavaScript from using Flow to TypeScript. In this article, I describe why we ported our codebase, how it took place and how it has been working out for us.&lt;/h4&gt;&lt;hr/&gt;&lt;p&gt;&lt;em&gt;&lt;em&gt;Disclaimer: my goal with this blog post is not to condemn Flow or usage of Flow. I highly admire the project, and I think that there is enough space in the JavaScript community for both type checkers. At the end of the day, each team should study all their options and pick what's best for them. I sincerely hope this article helps you with that choice.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;Let's start by setting some context. At &lt;a href=&quot;https://www.memsql.com/&quot;&gt;MemSQL&lt;/a&gt;, we are big fans of statically and strongly typing our JavaScript code in order to avoid common issues with dynamic and weak typing such as:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Runtime type errors due to different parts of the code not agreeing on implicit type contracts.&lt;/li&gt;
&lt;li&gt;Too much time spent writing tests for trivial things such as parameter type checking (runtime type checking also increases bundle size).&lt;/li&gt;
&lt;li&gt;Lacking editor/IDE integration, because, without static types, it's much harder to get jump-to-definition, mechanical refactoring and other features.&lt;/li&gt;
&lt;li&gt;Being able to write code around data models, which means that we can design our data types first and then our code will basically just &quot;write itself&quot;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;These are just some of the advantages of static typing, I describe a few more in &lt;a href=&quot;https://davidgom.es/what-i-wish-i-had-known-before-starting-to-use-flow/&quot;&gt;a recent blog post about Flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In early 2016, we started using &lt;a href=&quot;https://github.com/gcanti/tcomb&quot;&gt;tcomb&lt;/a&gt; to ensure some runtime type safety in one of our internal JavaScript projects (disclaimer: I was not a part of that project). While runtime type checking is sometimes useful, it doesn't doesn't even begin to scratch the power of static typing. With that in mind, we decided to start using &lt;a href=&quot;https://flow.org/&quot;&gt;Flow&lt;/a&gt; for another project we started in 2016. At the time, Flow was a great choice because:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Backed by Facebook which has done an amazing job at growing React and the React community (they also develop React &lt;em&gt;using&lt;/em&gt; Flow).&lt;/li&gt;
&lt;li&gt;We didn't have to buy into an entirely new ecosystem of JavaScript development. Dropping &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; for tsc (TypeScript compiler) was scary because it wouldn't give us the flexibility to switch to Flow or another type checker in the future (obviously this has changed since then).&lt;/li&gt;
&lt;li&gt;We didn't have to type our entire codebase (we wanted to get a feel for statically typed JavaScript before we went all-in), but rather we could just type a subset of the files. Note that both Flow and TypeScript allow you to do this nowadays.&lt;/li&gt;
&lt;li&gt;TypeScript (at the time) was lacking some basic features that Flow already supported such as &lt;a href=&quot;https://blog.mariusschulz.com/2017/01/06/typescript-2-1-keyof-and-lookup-types&quot;&gt;lookup types&lt;/a&gt;, &lt;a href=&quot;https://blog.mariusschulz.com/2017/06/02/typescript-2-3-generic-parameter-defaults&quot;&gt;generic parameter defaults&lt;/a&gt; and others.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;When we started working on &lt;a href=&quot;https://docs.memsql.com/memsql-studio/latest/memsql-studio-overview/&quot;&gt;MemSQL Studio&lt;/a&gt; in late 2017, we set out to achieve full type coverage across the entire application (all of it is written in JavaScript and both the frontend and backend run inside the browser). We decided to use Flow as that's what we had been successfully using in the past.&lt;/p&gt;
&lt;p&gt;However, &lt;a href=&quot;https://babeljs.io/blog/2018/08/27/7.0.0#typescript-support-babel-preset-typescript&quot;&gt;Babel 7 being released with TypeScript support&lt;/a&gt; definitely got my attention. This release meant that adopting TypeScript no longer meant buying into the entire TypeScript ecosystem and that we could keep using Babel to emit JavaScript. More importantly, this meant that we could actually &lt;strong&gt;use TypeScript as a type checker&lt;/strong&gt;, and not so much as a &quot;language&quot; per se.&lt;/p&gt;
&lt;p&gt;Personally, I consider that separating the type checker from the emitter is a more elegant way of achieving static (and strong) typing in JavaScript because:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;It's a good idea to have some separation of concerns between what emits ES5 and what does type checking. This allows for less lock-in around type checkers and it accelerates development speed (if the type checker is slow for whatever reason, your code will be emitted right way).&lt;/li&gt;
&lt;li&gt;Babel has amazing plugins and great features that TypeScript's emitter doesn't have. As an example, Babel allows you to specify which browsers you want to support and it will automatically emit code that is valid on those browsers. This is very complicated to implement and it makes more sense to only have Babel implement it instead of duplicating this effort in the community in two different projects.&lt;/li&gt;
&lt;li&gt;I like JavaScript as a programming language (besides the lack of static typing) and I have no idea how long TypeScript will be around for, whereas I trust that ECMAScript will be around for a good while. For this reason, I prefer to keep writing and &quot;thinking&quot; in JavaScript. (Note that I always say &quot;using Flow&quot; or &quot;using TypeScript&quot; instead of &quot;in Flow&quot; or &quot;in TypeScript&quot; because I always think about them as tools and not programming languages).&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;There are some downsides to this approach of course:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The TypeScript compiler could theoretically perform bundle optimizations based on types and you are missing on that by having a separate emitter and type checker.&lt;/li&gt;
&lt;li&gt;Project configuration becomes a bit more complicated when you have more tools and development dependencies. I think this is a weaker argument than most people make of it because having both Babel + Flow was never a source of configuration issues in our projects.&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;investigatingtypescriptasanalternativetoflow&quot;&gt;Investigating TypeScript as an alternative to Flow&lt;/h3&gt;
&lt;p&gt;I had been noticing a growing interest in TypeScript in both online and local JavaScript communities. As such, when I first found out that Babel 7 supported TypeScript, I started investigating a potential move away from Flow. On top of this, we had encountered various frustrations with Flow:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Lower quality editor/IDE integrations (when compared to TypeScript). Nuclide (Facebook's own IDE which had the best Flow integration) &lt;a href=&quot;https://twitter.com/fbOpenSource/status/1072928679695548416&quot;&gt;being deprecated&lt;/a&gt; did not help.&lt;/li&gt;
&lt;li&gt;Smaller community and therefore fewer and overall lower quality type definitions for various libraries (more on this later).&lt;/li&gt;
&lt;li&gt;Lack of a public roadmap and little interaction between the Flow team at Facebook and the community. You can read &lt;a href=&quot;https://github.com/facebook/flow/issues/6833#issuecomment-418608253&quot;&gt;this comment&lt;/a&gt; by a Facebook employee for some more details.&lt;/li&gt;
&lt;li&gt;High memory consumption and frequent memory leaks — various engineers in our team have experienced Flow taking up almost 10 gigabytes of RAM every now and then.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Of course, we also had to research whether TypeScript was sufficient for us. This was very complicated, but it involved a thorough reading of the documentation that helped us figure out that every feature in Flow has an equivalent in TypeScript. I then investigated &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Roadmap&quot;&gt;the TypeScript public roadmap&lt;/a&gt; and was extremely delighted with the features that lay ahead (e.g. &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/26349&quot;&gt;partial type argument inference&lt;/a&gt; which is a feature we used in Flow).&lt;/p&gt;
&lt;h3 id=&quot;porting30klinesofcodefromflowtotypescript&quot;&gt;Porting 30K+ lines of code from Flow to TypeScript&lt;/h3&gt;
&lt;p&gt;The first step to &lt;em&gt;actually&lt;/em&gt; porting all of our code from using Flow to TypeScript was to upgrade Babel from 6 to 7. This was somewhat straightforward but it took us around 2 engineer days since we decided to also upgrade Webpack 3 to 4 at the same time. Since we have some legacy dependencies vendored in our source code, this was harder than it should be for the vast majority of JavaScript projects.&lt;/p&gt;
&lt;p&gt;After this was done, we were able to replace Babel's Flow preset with the new TypeScript preset and then run the TypeScript compiler for the very first time against our full source code written using Flow. It resulted in &lt;strong&gt;8245 syntax errors&lt;/strong&gt; (the tsc CLI doesn't give you the real errors for the full project until you have 0 syntax errors).&lt;/p&gt;
&lt;p&gt;This number scared us (a lot) at first but we quickly figured out that most of these were related to TypeScript not supporting .js files. After some investigation, I found out that TypeScript files have to end in either &quot;.ts&quot; or &quot;.tsx&quot; (if they have JSX in them). I don't want to think about whether a new file I'm creating should have a &quot;.ts&quot; or &quot;.tsx&quot; extension and I think that's a poor developer experience. For that reason, I just renamed every single to &quot;.tsx&quot; (ideally all of our files would have a &quot;.js&quot; extension like in Flow, but I would also be okay with &quot;.ts&quot;).&lt;/p&gt;
&lt;p&gt;After that change, we had around 4000 syntax errors. Most of them were related to &lt;a href=&quot;https://flow.org/blog/2015/02/18/Import-Types/&quot;&gt;import type&lt;/a&gt; which can be replaced with just &quot;import&quot; using TypeScript and also sealed object notation in Flow (&lt;code&gt;{||}&lt;/code&gt; vs &lt;code&gt;{}&lt;/code&gt;). After a couple of quick RegExes, we were down to 414 syntax errors. The rest of them all had to be manually fixed:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;a href=&quot;https://flow.org/en/docs/types/utilities/#toc-existential-type&quot;&gt;existential type&lt;/a&gt; that we use for partial generic type argument inference had to be replaced with explicitly naming the various type arguments or &lt;a href=&quot;https://stackoverflow.com/a/53849968/996056&quot;&gt;using the unknown type&lt;/a&gt; to tell TypeScript that we don't care about some of the type arguments.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://flow.org/en/docs/types/utilities/#toc-keys&quot;&gt;$Keys&lt;/a&gt; type and other Flow advanced types have a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/advanced-types.html&quot;&gt;different syntax&lt;/a&gt; in TypeScript (e.g. &lt;code&gt;$Shape&amp;lt;&amp;gt;&lt;/code&gt; corresponds to &lt;code&gt;Partial&amp;lt;&amp;gt;&lt;/code&gt; in TypeScript).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;After all the syntax errors were fixed, tsc (the TypeScript compiler) finally told us how many real type errors our codebase had — just around 1300. This is when we had to sit down and decide whether it made sense to keep going or not. After all, if it would take us weeks of development time, it could not be worth it to go forward with the port. However, we figured it should take us less than 1 week of a single engineer's time to perform the port, so we charged ahead.&lt;/p&gt;
&lt;p&gt;Note that during the transition, we had to stop other work on this codebase. However, it should be possible to contribute new work in parallel to such a port — but you'll have to work on top of potentially hundreds of type errors, which will not be an easy feat.&lt;/p&gt;
&lt;h3 id=&quot;whatwereallthesetypeerrors&quot;&gt;What were all these type errors?&lt;/h3&gt;
&lt;p&gt;TypeScript and Flow make different assumptions about many different things, which in practice means that they let your JavaScript code do different things. Flow is more strict about some things, and TypeScript is more strict about other things. A full in-depth comparison between the two type checkers would be really long, so in this blog post we'll just study some examples.&lt;/p&gt;
&lt;p&gt;Note: all the &lt;a href=&quot;http://www.typescriptlang.org/play/&quot;&gt;TypeScript playground&lt;/a&gt; links in this article assume that all the &quot;strict&quot; settings have been turned on, but unfortunately when you share a TypeScript playground link, those settings are not saved in the URL. For this reason, you have to manually set them when you open any TypeScript playground link from this article.&lt;/p&gt;
&lt;h4 id=&quot;invariantjs&quot;&gt;invariant.js&lt;/h4&gt;
&lt;p&gt;A very common function in our source code is the &lt;code&gt;invariant&lt;/code&gt; function. I can't explain it any better than the &lt;a href=&quot;https://github.com/zertosh/invariant#invariantcondition-message&quot;&gt;documentation&lt;/a&gt; does, so I'll just quote it here:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;var invariant = require('invariant');

invariant(someTruthyVal, 'This will not throw');
// No errors

invariant(someFalseyVal, 'This will throw an error with this message');
// Error raised: Invariant Violation: This will throw an error with this message
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The idea is very simple — a simple function that will potentially throw an error based on some condition. Let's see how we could &lt;a href=&quot;https://flow.org/try/#0C4TwDgpgBAsghiARhAPAFQHxQLxTVAHygDcB7ASwBMBuAKFoDMBXAOwGNhzSWpyXi4AJ3JwWwABRtulcp24AuKIlKkANhFEAaKAFsIAZ31wA5hEX7gwlsYCUUAN60ovBlHEBCKSxlyWdx87OwAAWgqQA7lAsEJEAooJhguJ6hiYQNnTOAL60OYysHFw8DOIAHorwSKgsTDrIghjabIo1dRCC-k4ubmxQWAAMnYG8-EIiYmVQ7ti4rJQQDHwQlNoARADqwRA8veT6UGCk+rLkxBDapVD6waRMqpRREGeCStBzC0uUqxn0w5MA1FAAIwZKAAejBUHCpEEAGt9sg2HAmPpoJdgnAERBtlBBB9og9gKQoKtWvVVl0clkgA&quot;&gt;implement it and use it&lt;/a&gt; with Flow:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;type Maybe&amp;lt;T&amp;gt; = T | void;

function invariant(condition: boolean, message: string) {
  if (!condition) {
    throw new Error(message);
  }
}

function f(x: Maybe&amp;lt;number&amp;gt;, c: number) {
  if (c &amp;gt; 0) {
    invariant(x !== undefined, &quot;When c is positive, x should never be undefined&quot;);

    (x + 1); // works because x has been refined to &quot;number&quot;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now let's run the &lt;a href=&quot;http://www.typescriptlang.org/play/#src=type%20Maybe%3CT%3E%20%3D%20T%20%7C%20void%3B%0D%0A%0D%0Afunction%20invariant(condition%3A%20boolean%2C%20message%3A%20string)%20%7B%0D%0A%20%20if%20(!condition)%20%7B%0D%0A%20%20%20%20throw%20new%20Error(message)%3B%0D%0A%20%20%7D%0D%0A%7D%0D%0A%0D%0Afunction%20f(x%3A%20Maybe%3Cnumber%3E%2C%20c%3A%20number)%20%7B%0D%0A%20%20if%20(c%20%3E%200)%20%7B%0D%0A%20%20%20%20invariant(x%20!%3D%3D%20undefined%2C%20%22When%20c%20is%20positive%2C%20x%20should%20never%20be%20undefined%22)%3B%0D%0A%0D%0A%20%20%20%20(x%20%2B%201)%3B%20%2F%2F%20works%20because%20x%20has%20been%20refined%20to%20%22number%22%0D%0A%20%20%7D%0D%0A%7D&quot;&gt;exact same snippet through TypeScript&lt;/a&gt;. As you can see in the link, we get an error from TypeScript since it can't figure out that &quot;x&quot; is actually guaranteed to not be &lt;code&gt;undefined&lt;/code&gt; on the last line. This is actually a &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/19066&quot;&gt;known issue&lt;/a&gt; with TypeScript — it can't perform this type of inference through a function (yet). However, since it's a very common pattern in our code base, we had to replace every instance of invariant (over 150 of them) with more manual code that just throws an error in-place:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;type Maybe&amp;lt;T&amp;gt; = T | void;

function f(x: Maybe&amp;lt;number&amp;gt;, c: number) {
  if (c &amp;gt; 0) {
    if (x === undefined) {
      throw new Error(&quot;When c is positive, x should never be undefined&quot;);
    }

    (x + 1); // works because x has been refined to &quot;number&quot;
  }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is not as nice as &lt;code&gt;invariant&lt;/code&gt; but it's not a huge deal either.&lt;/p&gt;
&lt;h4 id=&quot;expecterrorvstsignore&quot;&gt;$ExpectError vs @ts-ignore&lt;/h4&gt;
&lt;p&gt;Flow has a very interesting feature that is similar to &lt;code&gt;@ts-ignore&lt;/code&gt; except that it will error if the next line is &lt;strong&gt;not&lt;/strong&gt; an error. This is very useful for writing &quot;type tests&quot; which are tests that ensure that our type checker (be it TypeScript or Flow) is finding certain type errors that we want it to find.&lt;/p&gt;
&lt;p&gt;Unfortunately, TypeScript does not have this feature which means that our type tests lost some value. It's something that &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/29394&quot;&gt;I'm looking forward&lt;/a&gt; to TypeScript implementing.&lt;/p&gt;
&lt;h4 id=&quot;generaltypeerrorsandtypeinference&quot;&gt;General Type Errors and Type Inference&lt;/h4&gt;
&lt;p&gt;Often times, TypeScript can be more explicit than Flow as in &lt;a href=&quot;http://www.typescriptlang.org/play/#src=type%20Leaf%20%3D%20%7B%0D%0A%20%20host%3A%20string%3B%0D%0A%20%20port%3A%20number%3B%0D%0A%20%20type%3A%20%22LEAF%22%3B%0D%0A%7D%3B%0D%0A%0D%0Atype%20Aggregator%20%3D%20%7B%0D%0A%20%20host%3A%20string%3B%0D%0A%20%20port%3A%20number%3B%0D%0A%20%20type%3A%20%22AGGREGATOR%22%3B%0D%0A%7D%0D%0A%0D%0Atype%20MemsqlNode%20%3D%20Leaf%20%7C%20Aggregator%3B%0D%0A%0D%0Afunction%20f(leaves%3A%20Array%3CLeaf%3E%2C%20aggregators%3A%20Array%3CAggregator%3E)%3A%20Array%3CMemsqlNode%3E%20%7B%0D%0A%20%20return%20leaves.concat(aggregators)%3B%0D%0A%7D&quot;&gt;this example&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;type Leaf = {
  host: string;
  port: number;
  type: &quot;LEAF&quot;;
};

type Aggregator = {
  host: string;
  port: number;
  type: &quot;AGGREGATOR&quot;;
}

type MemsqlNode = Leaf | Aggregator;

function f(leaves: Array&amp;lt;Leaf&amp;gt;, aggregators: Array&amp;lt;Aggregator&amp;gt;): Array&amp;lt;MemsqlNode&amp;gt; {
  // The next line errors because you cannot concat aggregators to leaves.
  return leaves.concat(aggregators);
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Flow &lt;a href=&quot;https://flow.org/try/#0C4TwDgpgBAMhCGAzKBeKBvAPgKClAFgPYDOwAXFKQE4CWAdgOYDcuUYhV5UdArgLYAjCFRZ5QkCgCIYAUQCCAMUktMAXxbZx0OQwZUIDeMA6oMOPEVIVq9Zq3acKvQcNFQtUuQHEvAJRlecgAqAPK+ythqGlpQALIQfMQAjgA2AHKEACbQaHBIUJhQOnoGRhwaiDx0AMbANIR0UIgAFCkIAG4QxBRyVFTwIAA8eYgAfAA0UPC6+obGVN1FfQODxbNlVKMAlD3LQ-GJqRnZoxis1Q2k3Fldpm3wncQAdBc1Rs3TJXMcxFturPpgDwqI17o8Xg1qu9Put5r8WKogA&quot;&gt;infers the type of leaves.concat(aggregators) to be Array&amp;lt;Leaf | Aggregator&amp;gt;&lt;/a&gt; which can then be cast to &lt;code&gt;Array&amp;lt;MemsqlNode&amp;gt;&lt;/code&gt;. I think this is a good example of how sometimes Flow can be a little smarter whereas TypeScript sometimes needs a little bit of help (we can use a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/basic-types.html&quot;&gt;type assertion&lt;/a&gt; to help TypeScript in this case, but using type assertions is dangerous and should be done very carefully).&lt;/p&gt;
&lt;p&gt;Even though I have no formal proof that allows me to state this, I consider Flow to be quite superior to TypeScript around type inference. I'm very hopeful that TypeScript will get to Flow's level seen as it is very actively developed and many recent improvements to TypeScript were in this exact area. Throughout many parts of our source code, we had to give TypeScript a bit of help via annotations or type assertions (&lt;a href=&quot;https://basarat.gitbooks.io/typescript/docs/types/type-assertion.html#assertion-considered-harmful&quot;&gt;we avoided type assertions&lt;/a&gt; as much as possible). Let's look at &lt;a href=&quot;http://www.typescriptlang.org/play/#src=type%20Player%20%3D%20%7B%0D%0A%20%20%20%20name%3A%20string%3B%0D%0A%20%20%20%20age%3A%20number%3B%0D%0A%20%20%20%20position%3A%20%22STRIKER%22%20%7C%20%22GOALKEEPER%22%2C%0D%0A%7D%3B%0D%0A%0D%0Atype%20F%20%3D%20()%20%3D%3E%20Promise%3CArray%3CPlayer%3E%3E%3B%0D%0A%0D%0Aconst%20f1%3A%20F%20%3D%20()%20%3D%3E%20%7B%0D%0A%20%20%20%20return%20Promise.all(%5B%0D%0A%20%20%20%20%20%20%20%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20%22David%20Gomes%22%2C%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20age%3A%2023%2C%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20position%3A%20%22GOALKEEPER%22%2C%0D%0A%20%20%20%20%20%20%20%20%7D%2C%20%7B%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20%22Cristiano%20Ronaldo%22%2C%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20age%3A%2033%2C%0D%0A%20%20%20%20%20%20%20%20%20%20%20%20position%3A%20%22STRIKER%22%2C%0D%0A%20%20%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%5D)%3B%0D%0A%7D%3B&quot;&gt;one more example&lt;/a&gt; (we had perhaps over 200 instances of this type error):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;type Player = {
    name: string;
    age: number;
    position: &quot;STRIKER&quot; | &quot;GOALKEEPER&quot;,
};

type F = () =&amp;gt; Promise&amp;lt;Array&amp;lt;Player&amp;gt;&amp;gt;;

const f1: F = () =&amp;gt; {
    return Promise.all([
        {
            name: &quot;David Gomes&quot;,
            age: 23,
            position: &quot;GOALKEEPER&quot;,
        }, {
            name: &quot;Cristiano Ronaldo&quot;,
            age: 33,
            position: &quot;STRIKER&quot;,
        }
    ]);
};
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;TypeScript will not let you write this because it can't let you cast &lt;code&gt;{ name: &quot;David Gomes&quot;, age: 23, type: &quot;GOALKEEPER&quot; }&lt;/code&gt; as an object of type &lt;code&gt;Player&lt;/code&gt; (open the Playground link to see the exact error). This is another instance where I consider TypeScript to not be &quot;smart enough&quot; (at least when compared to Flow &lt;a href=&quot;https://flow.org/try/#0C4TwDgpgBACgNgQxBATlAvFA3gHwFBSFQB2CAthAFxQDOwKAlsQOYDcBRCzVJArmQCNU7IlFCRqAIgDKAFQBKASQDSAUXmSoOKJIDiAeQCCAGTWqY6yQBo8OAL7s846ADEM2DoQrAAFgHsAE2oACgBKDAA+WBQ-MgYaCAAeQxQUJET4JFQIiPYHPDwAYz9iOigAMwBGajdMLE8ob38gqDDIj1FRFAhgXhRiaNj4iAA6BDg4YIBtBs6iernFolIKKQARBAA3BgCoXViIGmtZpc5uagAmAGYbU8XnKQMTMwsNW7uoOysFj9EVnkkG22u32FCO71+hC4PGuEMhDx0T1MqnMljhSzsJ0IAF1QiIiF88PkgA&quot;&gt;which understands this code&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In order to make this work, you have a few options:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Assert &quot;STRIKER&quot; as &quot;STRIKER&quot; so that TypeScript understands that the string is a valid enum of type &lt;code&gt;&quot;STRIKER&quot; | &quot;GOALKEEPER&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Assert the entire objects &lt;code&gt;as Player&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Or what I consider to be the best solution, just help TypeScript without using any type assertions by writing &lt;code&gt;Promise.all&amp;lt;Player&amp;gt;(...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Another example is &lt;a href=&quot;http://www.typescriptlang.org/play/#src=type%20Connection%20%3D%20%7B%20id%3A%20number%20%7D%3B%0D%0A%0D%0Adeclare%20function%20getConnection()%3A%20Connection%3B%0D%0A%0D%0Afunction%20resolveConnection()%20%7B%0D%0A%20%20return%20new%20Promise(resolve%20%3D%3E%20%7B%0D%0A%20%20%20%20return%20resolve(getConnection())%3B%0D%0A%20%20%7D)%0D%0A%7D%0D%0A%0D%0AresolveConnection().then(conn%20%3D%3E%20%7B%0D%0A%20%20(conn.id)%3B%0D%0A%7D)&quot;&gt;the following&lt;/a&gt; (TypeScript), where &lt;a href=&quot;https://flow.org/try/#0C4TwDgpgBAwg9gOwRAxsAloqBeKBvKdAEwC4oEBXAWwCMIAnKAXwG4AoNo1AGwEN7oAMwoI0mBFADmEYPCSoMiABQBKMnORjE7NsNGKJAgM5xuANwgaF41fjZQoA4BXoTkAdygAFenCrojCCVjUwscAD47BwcnF0MIE3Mg6VlETQNVFXYHJhU2Jg4QpKstBFUAOmAACwgylDSIqKgleqRy4iz8lSA&quot;&gt;Flow once again comes out as having better type inference&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-javascript&quot;&gt;type Connection = { id: number };

declare function getConnection(): Connection;

function resolveConnection() {
  return new Promise(resolve =&amp;gt; {
    return resolve(getConnection());
  })
}

resolveConnection().then(conn =&amp;gt; {
  // TypeScript errors in the next line because it does not understand
  // that conn is of type Connection. We have to manually annotate
  // resolveConnection as Promise&amp;lt;Connection&amp;gt;.
  (conn.id);
});
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;A very small but nevertheless interesting example is that Flow types &lt;code&gt;Array&amp;lt;T&amp;gt;.pop()&lt;/code&gt; as &lt;code&gt;T,&lt;/code&gt; whereas TypeScript considers that it is &lt;code&gt;T | void&lt;/code&gt;. This is a point in favor of TypeScript because it forces you to double check that the item exists (if the array is empty, &lt;code&gt;Array.pop&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt;). There are some other small examples like this one where TypeScript outshines Flow.&lt;/p&gt;
&lt;h4 id=&quot;typescriptdefinitionsforthirdpartydependencies&quot;&gt;TypeScript Definitions for third-party dependencies&lt;/h4&gt;
&lt;p&gt;Of course, when writing any JavaScript application, the chances are you'll have at least a handful of dependencies. These need to be typed, otherwise you're losing out on much of the power of static type analysis (as explained in the beginning of this article).&lt;/p&gt;
&lt;p&gt;Libraries that you import from npm can ship with Flow type definitions, TypeScript type definitions, both of these or neither. It's very common that (smaller) libraries don't ship with either meaning that you have to either write your own type definitions for them or grab some from the community. Both the Flow and the TypeScript community have a standard repository of third-party type definitions for JavaScript packages: &lt;a href=&quot;https://github.com/flow-typed/flow-typed&quot;&gt;flow-typed&lt;/a&gt; and &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped&quot;&gt;DefinitelyTyped&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have to say that we had a much better time with DefinitelyTyped. With flow-typed, we had to use its CLI tool to bring in type definitions for various dependencies into our project. DefinitelyTyped has figured out a way to merge this functionality with npm's CLI tool by shipping @types/package-name packages in npm's package repository. This is amazing and it made it much easier to bring in type definitions for our dependencies (jest, react, lodash, react-redux just to name a few).&lt;/p&gt;
&lt;p&gt;On top of this, I also had a great time contributing to DefinitelyTyped (don't expect the type definitions to be equivalent when porting code from Flow to TypeScript). I already sent &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31867&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31607&quot;&gt;couple&lt;/a&gt; &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/31722&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/pull/32061&quot;&gt;pull&lt;/a&gt; requests and all of them were a breeze. Just clone, edit the type definitions, add tests and send a pull request. The DefinitelyTyped GitHub bot will tag people who have contributed to the type definitions you edited for reviews. If none of them provide a review in 7 days a DefinitelyTyped maintainer will review the PR. After getting merged to master, a new version of the dependency's package is shipped to npm. For instance, when I first updated the @types/redux-form package, the version 7.4.14 was automatically pushed to npm after it got merged to master. This makes it super easy for us to just update our package.json file to get the new type definitions. If you can't wait for the PR to be accepted, you can always override the type definitions that are being used in your project as &lt;a href=&quot;https://davidgom.es/maintaining-overridden-typescript-definitions-for-dependencies/&quot;&gt;I explained in a recent blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall, the quality of type definitions in DefinitelyTyped is much better due to the larger and more thriving community behind TypeScript. In fact, &lt;strong&gt;our type coverage increased from 88% to 96%&lt;/strong&gt; after porting our project from Flow to TypeScript mostly due to better third-party dependency type definitions that have fewer &lt;code&gt;any&lt;/code&gt; types in them.&lt;/p&gt;
&lt;h3 id=&quot;lintingandtests&quot;&gt;Linting and Tests&lt;/h3&gt;
&lt;ol&gt;&lt;li&gt;We moved from &lt;a href=&quot;https://eslint.org/&quot;&gt;eslint&lt;/a&gt; to &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;tslint&lt;/a&gt; (we found it more complicated to get started with eslint for TypeScript, so we just went with tslint).&lt;/li&gt;
&lt;li&gt;We are using &lt;a href=&quot;https://github.com/kulshekhar/ts-jest&quot;&gt;ts-jest&lt;/a&gt; for running our tests that are using TypeScript. Some of our tests are typed whereas others are untyped (when it's too much work to type tests, we save them as &lt;code&gt;.js&lt;/code&gt; files).&lt;/li&gt;
&lt;/ol&gt;&lt;h3 id=&quot;whathappenedafterwefixedallofourtypeerrors&quot;&gt;What happened after we fixed all of our type errors?&lt;/h3&gt;
&lt;p&gt;After one engineer week of work we got down to the very last type error which we postponed in the short term with &lt;code&gt;@ts-ignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After addressing some code review comments and fixing a couple of bugs (unfortunately, we had to change a very small amount of runtime code to fix some logic that TypeScript could not understand), the PR landed and we have been using TypeScript since then. (And yes, we fixed the final &lt;code&gt;@ts-ignore&lt;/code&gt; in a followup PR).&lt;/p&gt;
&lt;p&gt;Apart from the editor integration, working with TypeScript has been very similar to working with Flow. The performance of Flow's server is slightly faster, but this doesn't turn out to be a huge problem since they are equally fast at giving you inline errors for the file you're currently looking at. The only performance difference is that TypeScript takes a little bit longer (~0.5 to 1 second) to tell you whether there are any new errors in your project after you &lt;em&gt;save&lt;/em&gt; a file. The server startup time is about the same (~2 minutes), but that doesn't matter as much. So far, we haven't had any issues with memory consumption and tsc seems to consistently use around 600 megabytes of RAM.&lt;/p&gt;
&lt;p&gt;It may seem that Flow's type inference makes it much better than TypeScript, but there are 2 reasons why that isn't a big deal:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We converted a codebase that was adapted to Flow to TypeScript. This means that we obviously only found things that Flow can express but TypeScript can't. If the port had been the other way around, I'm sure we would have found things that TypeScript can infer/express better than Flow.&lt;/li&gt;
&lt;li&gt;Type inference is important and it helps keep our code less verbose. However, at the end of the day, things like a strong community and availability of type definitions are more important because weak type inference can be solved by &quot;handholding&quot; the type checker a bit more.&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;codestatistics&quot;&gt;Code Statistics&lt;/h4&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;$ npm run type-coverage # https://github.com/plantain-00/type-coverage
43330 / 45047 96.19%
&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-bash&quot;&gt;$ cloc # ignoring tests and dependencies
--------------------------------------------------------------------------------
Language                      files          blank        comment           code
--------------------------------------------------------------------------------
TypeScript                      330           5179           1405          31463
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;whatsnext&quot;&gt;What's next?&lt;/h3&gt;
&lt;p&gt;We're not done with improving the static type analysis in our code. We have other projects at MemSQL that will eventually drop Flow in favor of TypeScript (and some JavaScript projects that may start using TypeScript), and we want to make our TypeScript configuration stricter. We currently have &quot;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;strictNullChecks&lt;/a&gt;&quot; turned on, but &quot;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;noImplicitAny&lt;/a&gt;&quot; is still disabled. We're also going to remove a couple of &lt;a href=&quot;https://basarat.gitbooks.io/typescript/docs/types/type-assertion.html#assertion-considered-harmful&quot;&gt;dangerous type assertions&lt;/a&gt; in our code.&lt;/p&gt;
&lt;p&gt;I am excited to share other things I learned in my adventures with JavaScript type systems in future blog posts. If there is a topic you would like to see me cover, please let me know!&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 20:59:08 +0000</pubDate>
<dc:creator>munchor</dc:creator>
<og:type>article</og:type>
<og:title>Porting 30K lines of code from Flow to TypeScript</og:title>
<og:description>We recently ported MemSQL Studio's 30 thousand lines of JavaScript from using Flow to TypeScript. In this article, I describe why we ported our codebase, how it took place and how it has been working out for us. Disclaimer: my goal with this blog post is not to condemn Flow</og:description>
<og:url>https://davidgom.es/porting-30k-lines-of-code-from-flow-to-typescript/</og:url>
<dc:format>text/html</dc:format>
<dc:identifier>https://davidgom.es/porting-30k-lines-of-code-from-flow-to-typescript/</dc:identifier>
</item>
<item>
<title>FoundationDB Record Layer</title>
<link>https://www.foundationdb.org/blog/announcing-record-layer/</link>
<guid isPermaLink="true" >https://www.foundationdb.org/blog/announcing-record-layer/</guid>
<description>&lt;span class=&quot;published-date&quot;&gt;Published January 14, 2019&lt;/span&gt;
&lt;p&gt;Today, we are excited to announce the open source release of the FoundationDB Record Layer!&lt;/p&gt;
&lt;p&gt;From its inception, FoundationDB was designed as a highly scalable key-value store with a simple API. Layers extend the functionality of the database by adding features and data models to allow new storage access patterns. Today we are releasing the &lt;a href=&quot;https://www.github.com/foundationdb/fdb-record-layer/&quot;&gt;FoundationDB Record Layer&lt;/a&gt;, which provides relational database semantics on top of FoundationDB. This layer features schema management, indexing facilities, and a rich set of query capabilities. The Record Layer is used in production at Apple to support applications and services for hundreds of millions of users.&lt;/p&gt;
&lt;h2 id=&quot;a-record-oriented-database-on-top-of-foundationdb&quot;&gt;A record-oriented database on top of FoundationDB&lt;/h2&gt;
&lt;p&gt;The Record Layer stores structured data, just like a relational database. Databases managed by the Record Layer support records with fields and types, an evolving schema, complex primary and secondary indexes, and declarative query execution. The Record Layer also includes features not typically found in a traditional relational database, such as support for complex nested data types, indexes on the commit-time of records, and indexes and queries that span different types of records.&lt;/p&gt;
&lt;p&gt;Built on top of FoundationDB, the Record Layer inherits FoundationDB's strong ACID semantics, reliability, and performance in a distributed setting. The Record Layer also uses FoundationDB's transactional semantics to provide features similar to a traditional relational database, but in a distributed setting. For example, the Record Layer's secondary indexes are maintained transactionally, so they're always up-to-date with the latest changes to the data. Transactions reduce the number of bugs in application code and greatly simplify application development.&lt;/p&gt;
&lt;h2 id=&quot;built-for-scale&quot;&gt;Built for Scale&lt;/h2&gt;
&lt;p&gt;The Record Layer is built for a massive scale, allowing millions of discrete database instances to be managed within a single FoundationDB cluster. Its design and core feature set were built to scale to many millions of concurrent users and a diverse ecosystem of client applications each with unique data models and query access patterns.&lt;/p&gt;
&lt;p&gt;To make operations simple, the Record Layer is stateless, so scaling up is as simple as launching more instances. It's also built from the ground up for massive multi-tenancy, encapsulating and isolating all of a tenant's state. The Record Layer can also tightly constrain and balance resource consumption across users in a predictable fashion, even in the face of a wide variety of workloads and activity. Together, these properties enable the Record Layer to scale elastically as the demands of its clients grow.&lt;/p&gt;
&lt;p&gt;Together, the Record Layer and FoundationDB form the backbone of Apple's &lt;a href=&quot;https://developer.apple.com/icloud/cloudkit/&quot;&gt;CloudKit&lt;/a&gt;. We wrote a paper describing how we built the Record Layer to run at massive scale and how CloudKit uses it. Today, you can &lt;a href=&quot;https://www.foundationdb.org/files/record-layer-paper.pdf&quot;&gt;read the preprint&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;
&lt;p&gt;There's a lot more to say about the Record Layer. At a very high level, the Record Layer:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Represents records as Protocol Buffer messages, providing industry-standard serialization and schema evolution. Features such as nested and repeated fields have first-class support.&lt;/li&gt;
&lt;li&gt;Supports transactional secondary indexing that takes full advantage of the Protocol Buffer data model. We have a variety of advanced index types, including aggregate indexes such as grouped counts, full text indexes, ordinal rank indexes, and extensible functional indexes. Where possible, our implementations leverage advanced FoundationDB features, such as atomic mutations.&lt;/li&gt;
&lt;li&gt;Includes a declarative query API for retrieving data and a query planner for turning those queries into concrete database operations.&lt;/li&gt;
&lt;li&gt;Operates in a completely stateless manner. Instantiating a logical database and performing an operation can be done in milliseconds. Resource constraints allow any given operation or query to be limited. Continuations allow control to be handed back to the client to allow them to iteratively make progress in concert with all other clients.&lt;/li&gt;
&lt;li&gt;Provides a large number of deep extension points. For example, users can build custom index maintainers and query planning features to seamlessly “plug-in” new index types. Similarly, the layer's serialization API supports client-defined encryption and compression algorithms.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All of this leverages the full breadth and power of FoundationDB functionality, including strong ACID semantics and advanced features such as controllable isolation levels.&lt;/p&gt;
&lt;h2 id=&quot;get-started&quot;&gt;Get Started&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://foundationdb.github.io/fdb-record-layer/GettingStarted.html&quot;&gt;getting started guide&lt;/a&gt; will walk you through creating a simple application that uses the Record Layer. If you'd like to dig deeper, we wrote &lt;a href=&quot;https://foundationdb.github.io/fdb-record-layer/Overview.html&quot;&gt;an overview&lt;/a&gt; that goes into greater detail.&lt;/p&gt;
&lt;p&gt;We encourage your participation in a &lt;a href=&quot;https://forums.foundationdb.org/c/record-layer&quot;&gt;new forum section for the Record Layer&lt;/a&gt; where you can ask discuss development, ask questions, and get involved in the open source project. We're excited to see what the community will build on top of the Record Layer.&lt;/p&gt;
&lt;p&gt;More information can be found at:&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 20:51:55 +0000</pubDate>
<dc:creator>davelester</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.foundationdb.org/blog/announcing-record-layer/</dc:identifier>
</item>
<item>
<title>Feds Can&amp;#039;t Force You to Unlock Your iPhone with Finger or Face, Judge Rules</title>
<link>https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/#12fbd51842b7</link>
<guid isPermaLink="true" >https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/#12fbd51842b7</guid>
<description>&lt;div&gt;&lt;img src=&quot;https://specials-images.forbesimg.com/imageserve/874990416/960x0.jpg?fit=scale&quot; alt=&quot;Social Media Data Security&quot; data-height=&quot;2785&quot; data-width=&quot;4193&quot;/&gt;&lt;/div&gt;
&lt;p class=&quot;color-body light-text&quot;&gt;Social Media Data Security&lt;small&gt;NurPhoto via Getty Images&lt;/small&gt;&lt;/p&gt;
&lt;p class=&quot;speakable-paragraph&quot;&gt;A California judge has ruled that American cops can’t force people to unlock a mobile phone with their face or finger. The ruling goes further to protect people’s private lives from government searches than any before and is being hailed as a potentially landmark decision.&lt;/p&gt;
&lt;p&gt;Previously, U.S. judges had ruled that police were allowed to force unlock devices like Apple’s iPhone with biometrics, such as fingerprints, faces or irises. That was despite the fact feds weren’t permitted to force a suspect to divulge a passcode. But according to a &lt;a href=&quot;https://www.documentcloud.org/documents/5684083-Judge-Says-Facial-Recognition-Unlocks-Not.html&quot; target=&quot;_blank&quot; class=&quot;color-accent&quot;&gt;ruling uncovered by &lt;em&gt;Forbes&lt;/em&gt;&lt;/a&gt;, all logins are equal.&lt;/p&gt;
&lt;p&gt;The order came from the U.S. District Court for the Northern District of California in the denial of a search warrant for an unspecified property in Oakland. The warrant was filed as part of an investigation into a Facebook extortion crime, in which a victim was asked to pay up or have an “embarassing” video of them publicly released. The cops had some suspects in mind and wanted to raid their property. In doing so, the feds also wanted to open up any phone on the premises via facial recognition, a fingerprint or an iris.&lt;/p&gt;
&lt;p&gt;While the judge agreed that investigators had shown probable cause to search the property, they didn’t have the right to open all devices inside by forcing unlocks with biometric features.&lt;/p&gt;
&lt;p&gt;On the one hand, magistrate judge Kandis Westmore ruled the request was “overbroad” as it was “neither limited to a particular person nor a particular device.”&lt;/p&gt;
&lt;p&gt;But in a more significant part of the ruling, Judge Westmore declared that the government did not have the right, even with a warrant, to force suspects to incriminate themselves by unlocking their devices with their biological features. Previously, courts had decided biometric features, unlike passcodes, were not “testimonial.” That was because a suspect would have to willingly and verbally give up a passcode, which is not the case with biometrics. A password was therefore deemed testimony, but body parts were not, and so not granted Fifth Amendment protections against self-incrimination.&lt;/p&gt;

&lt;p&gt;That created a paradox: How could a passcode be treated differently to a finger or face, when any of the three could be used to unlock a device and expose a user’s private life?&lt;/p&gt;
&lt;p&gt;And that’s just what Westmore focused on in her ruling. Declaring that “technology is outpacing the law,” the judge wrote that fingerprints and face scans were not the same as “physical evidence” when considered in a context where those body features would be used to unlock a phone.&lt;/p&gt;
&lt;p&gt;“If a person cannot be compelled to provide a passcode because it is a testimonial communication, a person cannot be compelled to provide one’s finger, thumb, iris, face, or other biometric feature to unlock that same device,” the judge wrote.&lt;/p&gt;
&lt;p&gt;“The undersigned finds that a biometric feature is analogous to the 20 nonverbal, physiological responses elicited during a polygraph test, which are used to determine guilt or innocence, and are considered testimonial.”&lt;/p&gt;
&lt;p&gt;There were other ways the government could get access to relevant data in the Facebook extortion case “that do not trample on the Fifth Amendment,” Westmore added. They could, for instance, ask Facebook to provide Messenger communications, she suggested. Facebook has been willing to hand over such messages in a significant number of previous cases &lt;em&gt;Forbes&lt;/em&gt; has reviewed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Law finally catching up with tech?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over recent years, the government has drawn criticism for its smartphone searches. In 2016, &lt;a href=&quot;https://www.forbes.com/sites/thomasbrewster/2016/10/16/doj-demands-mass-fingerprint-seizure-to-open-iphones/&quot; target=&quot;_blank&quot; class=&quot;color-accent&quot;&gt;&lt;em&gt;Forbes&lt;/em&gt; uncovered a search warrant not dissimilar to the one in California&lt;/a&gt;. Again in the Golden State, the feds wanted to go onto a premises and force unlock devices with fingerprints, regardless of what phones or who was inside.&lt;/p&gt;
&lt;p&gt;Andrew Crocker, senior staff attorney at the digital rights nonprofit Electronic Frontier Foundation, said the latest California ruling went a step further than he’d seen other courts go. In particular, Westmore observed alphanumeric passcodes and biometrics served the same purpose in unlocking phones.&lt;/p&gt;
&lt;p&gt;“While that’s a fairly novel conclusion, it’s important that courts are beginning to look at these issues on their own terms,” Crocker told &lt;em&gt;Forbes&lt;/em&gt;. “In its recent decisions, the Supreme Court has made clear that digital searches raise serious privacy concerns that did not exist in the age of physical searches—a full forensic search of a cellphone reveals far more than a patdown of a suspect’s pockets during an arrest for example.”&lt;/p&gt;
&lt;p&gt;The magistrate judge decision could, of course, be overturned by a district court judge, as happened in Illinois in 2017 with a similar ruling. The best advice for anyone concerned about government overreach into their smartphones: Stick to a strong alphanumeric passcode that you won’t be compelled to disclose.&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 20:10:04 +0000</pubDate>
<dc:creator>koolba</dc:creator>
<og:title>Feds Can't Force You To Unlock Your iPhone With Finger Or Face, Judge Rules</og:title>
<og:image>https://thumbor.forbes.com/thumbor/600x315/https%3A%2F%2Fspecials-images.forbesimg.com%2Fimageserve%2F874990416%2F960x0.jpg</og:image>
<og:url>https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/</og:url>
<og:description>Cops can't just hold an iPhone up to a suspect's face to search it, judge rules. It could be a landmark decision in modern privacy.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.forbes.com/sites/thomasbrewster/2019/01/14/feds-cant-force-you-to-unlock-your-iphone-with-finger-or-face-judge-rules/</dc:identifier>
</item>
<item>
<title>Elixir v1.8 released</title>
<link>https://elixir-lang.org/blog/2019/01/14/elixir-v1-8-0-released/</link>
<guid isPermaLink="true" >https://elixir-lang.org/blog/2019/01/14/elixir-v1-8-0-released/</guid>
<description>&lt;p&gt;Elixir v1.8 comes with many improvements at the infrastructure level, improving compilation time, speeding up common patterns, and adding features around introspection of the system.&lt;/p&gt;
&lt;h2 id=&quot;custom-struct-inspections&quot;&gt;Custom struct inspections&lt;/h2&gt;
&lt;p&gt;Elixir now provides a derivable implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; protocol. In a nutshell, this means it is really easy to filter data from your data structures whenever they are inspected. For example, imagine you have a user struct with security and privacy sensitive information:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;defstruct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;By default, if you inspect a user via &lt;code class=&quot;highlighter-rouge&quot;&gt;inspect(user)&lt;/code&gt;, it will include all fields. This can cause fields such as &lt;code class=&quot;highlighter-rouge&quot;&gt;:email&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:encrypted_password&lt;/code&gt; to appear in logs, error reports, etc. You could always define a custom implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; protocol for such cases but Elixir v1.8 makes it simpler by allowing you to derive the &lt;code class=&quot;highlighter-rouge&quot;&gt;Inspect&lt;/code&gt; protocol:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@derive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;defstruct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encrypted_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now all user structs will be printed with all remaining fields collapsed:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;#User&amp;lt;id: 1, name: &quot;Jane&quot;, age: 33, ...&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also pass &lt;code class=&quot;highlighter-rouge&quot;&gt;@derive {Inspect, except: [...]}&lt;/code&gt; in case you want to keep all fields by default and exclude only some.&lt;/p&gt;
&lt;h2 id=&quot;time-zone-database-support&quot;&gt;Time zone database support&lt;/h2&gt;
&lt;p&gt;In Elixir v1.3, Elixir added four types, known as Calendar types, to work with dates and times: &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NaiveDateTime&lt;/code&gt; (without time zone), and &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; (with time zone). Over the last versions we have added many enhancements to the Calendar types but the &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; module always evolved at a slower pace since Elixir did not provide an API for time zone databases.&lt;/p&gt;
&lt;p&gt;Elixir v1.8 now defines a &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.TimeZoneDatabase&lt;/code&gt; behaviour, allowing developers to bring in their own time zone databases. By defining an explicit contract for time zone behaviours, Elixir can now extend the &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; API, adding functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime.shift_zone/3&lt;/code&gt;. By default, Elixir ships with a time zone database called &lt;code class=&quot;highlighter-rouge&quot;&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt; that only handles UTC.&lt;/p&gt;
&lt;p&gt;Other Calendar related improvements include the addition of &lt;code class=&quot;highlighter-rouge&quot;&gt;Date.day_of_year/1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Date.quarter_of_year/1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Date.year_of_era/1&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Date.day_of_era/1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;faster-compilation-and-other-performance-improvements&quot;&gt;Faster compilation and other performance improvements&lt;/h2&gt;
&lt;p&gt;Due to improvements to the compiler made over the last year, Elixir v1.8 should compile code about 5% faster on average. This is yet another release where we have been able to reduce compilation times and provide a more joyful development experience to everyone.&lt;/p&gt;
&lt;p&gt;The compiler also emits more efficient code for range checks in guards (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;x in y..z&lt;/code&gt;), for charlists with interpolation (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo #{bar} baz'&lt;/code&gt;), and when working with records via the &lt;code class=&quot;highlighter-rouge&quot;&gt;Record&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;Finally, EEx templates got their own share of optimizations, emitting more compact code that runs faster.&lt;/p&gt;
&lt;h2 id=&quot;improved-instrumentation-and-ownership-with-callers&quot;&gt;Improved instrumentation and ownership with &lt;code class=&quot;highlighter-rouge&quot;&gt;$callers&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; module is one of the most common ways to spawn light-weight processes to perform work concurrently. Whenever you spawn a new process, Elixir annotates the parent of that process through the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; key. This information can be used by instrumentation tools to track the relationship between events occurring within multiple processes. However, many times, tracking only the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; is not enough.&lt;/p&gt;
&lt;p&gt;For example, we recommend developers to always start tasks under a supervisor. This provides more visibility and allows us to control how those tasks are terminated when a node shuts down. In your code, this can be done by invoking something like: &lt;code class=&quot;highlighter-rouge&quot;&gt;Task.Supervisor.start_child(MySupervisor, task_specification)&lt;/code&gt;. This means that, although your code is the one who invokes the task, the actual parent of the task would be the supervisor, as the supervisor is the one spawning it. We would list the supervisor as one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; for the task, but the relationship between your code and the task is lost.&lt;/p&gt;
&lt;p&gt;In Elixir v1.8, we now track the relationship between your code and the task via the &lt;code class=&quot;highlighter-rouge&quot;&gt;$callers&lt;/code&gt; key in the process dictionary, which aligns well with the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; key. Therefore, assuming the &lt;code class=&quot;highlighter-rouge&quot;&gt;Task.Supervisor&lt;/code&gt; call above, we have:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;[your code] -- calls --&amp;gt; [supervisor] ---- spawns --&amp;gt; [task]
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which means we store the following relationships:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;[your code]              [supervisor] &amp;lt;-- ancestor -- [task]
     ^                                                  |
     |--------------------- caller ---------------------|
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When a task is spawned directly from your code, without a supervisor, then the process running your code will be listed under both &lt;code class=&quot;highlighter-rouge&quot;&gt;$ancestors&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$callers&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This small feature is very powerful. It allows instrumentation and monitoring tools to better track and relate the events happening in your system. This feature can also be used by tools like the “Ecto Sandbox”. The “Ecto Sandbox” allows developers to run tests concurrently against the database, by using transactions and an ownership mechanism where each process explicitly gets a connection assigned to it. Without &lt;code class=&quot;highlighter-rouge&quot;&gt;$callers&lt;/code&gt;, every time you spawned a task that queries the database, the task would not know its caller, and therefore it would be unable to know which connection was assigned to it. This often meant features that rely on tasks could not be tested concurrently. With &lt;code class=&quot;highlighter-rouge&quot;&gt;$callers&lt;/code&gt;, figuring out this relationship is trivial and you have more tests using the full power of your machine.&lt;/p&gt;
&lt;h2 id=&quot;summing-up&quot;&gt;Summing up&lt;/h2&gt;
&lt;p&gt;We are really proud of this release (as usual!) which brings many improvements at the infrastructure level. Those improvements were designed with feedback from the community and from the many different companies using Elixir in production. The full list of changes is available in our &lt;a href=&quot;https://github.com/elixir-lang/elixir/releases/tag/v1.8.0&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is only one last major feature planned for upcoming Elixir versions, which is the addition of &lt;code class=&quot;highlighter-rouge&quot;&gt;mix release&lt;/code&gt; to Elixir itself, streamlining the experience provided by packages like &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;distillery&lt;/a&gt;. With &lt;code class=&quot;highlighter-rouge&quot;&gt;mix release&lt;/code&gt;, a developer can bundle the VM and all compiled code in a single directory, which can then be packaged and sent to production. We are glad to say the &lt;a href=&quot;https://github.com/elixir-lang/elixir/issues/8612&quot;&gt;work on this feature has already started&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During &lt;a href=&quot;https://www.youtube.com/watch?v=suOzNeMJXl0&quot;&gt;my keynote at ElixirConf 2018 US&lt;/a&gt;, I talked about the next five years for Elixir and much of the emphasis is put on the community. Elixir was designed to be an extensible language and therefore the work on the language itself is meant to reduce with time, which we have seen in the last two releases. We trust the community to continue building on this solid foundation, bringing new challenges to the ecosystem and taking the language to new domains.&lt;/p&gt;
&lt;p&gt;Check &lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;the Install section&lt;/a&gt; to get Elixir installed and read our &lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;Getting Started guide&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;p&gt;Your turn. :)&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 19:09:06 +0000</pubDate>
<dc:creator>_asummers</dc:creator>
<og:title>Elixir v1.8 released</og:title>
<og:description>Elixir v1.8 comes with many improvements at the infrastructure level, improving compilation time, speeding up common patterns, and adding features around introspection of the system.</og:description>
<og:url>https://elixir-lang.org/blog/2019/01/14/elixir-v1-8-0-released/</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://elixir-lang.org/blog/2019/01/14/elixir-v1-8-0-released/</dc:identifier>
</item>
<item>
<title>Notion – All-in-one workspace for notes, tasks, wikis, and databases</title>
<link>https://www.notion.so</link>
<guid isPermaLink="true" >https://www.notion.so</guid>
<description>&lt;style&gt;&lt;![CDATA[
			/* Used so electron will render a white background. */
			body {
				background: white;
			}
 			.loading-spinner {
				-webkit-animation: rotate 1000ms linear infinite;
				animation: rotate 1000ms linear infinite;
				-webkit-transform-origin: center center;
				transform-origin: center center;
				width: 1em;
				height: 1em;
				opacity: 0.5;
				display: block;
			}
 			@-webkit-keyframes rotate {
				0% {
					-webkit-transform: rotate(0deg) translateZ(0);
					transform: rotate(0deg) translateZ(0);
				}
				100% {
					-webkit-transform: rotate(360deg) translateZ(0);
					transform: rotate(360deg) translateZ(0);
				}
			}
 			@keyframes rotate {
				0% {
					-webkit-transform: rotate(0deg) translateZ(0);
					transform: rotate(0deg) translateZ(0);
				}
				100% {
					-webkit-transform: rotate(360deg) translateZ(0);
					transform: rotate(360deg) translateZ(0);
				}
			}
		]]&gt;&lt;/style&gt;
		
			</description>
<pubDate>Mon, 14 Jan 2019 17:33:16 +0000</pubDate>
<dc:creator>torvald</dc:creator>
<og:type>website</og:type>
<og:url>https://www.notion.so</og:url>
<og:title>Notion – The all-in-one workspace for your notes, tasks, wikis, and databases.</og:title>
<og:description>A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team</og:description>
<og:image>https://www.notion.so/images/meta.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.notion.so/</dc:identifier>
</item>
<item>
<title>Ask HN: How do you motivate yourself to keep working on a project?</title>
<link>https://news.ycombinator.com/item?id=18903886</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=18903886</guid>
<description>&lt;tr readability=&quot;0.55737704918033&quot;&gt;&lt;td bgcolor=&quot;#FF6600&quot;&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr id=&quot;pagespace&quot; title=&quot;Ask HN: How do you motivate yourself to keep working on a project?&quot;&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;11.633392226148&quot;&gt;&lt;td&gt;
&lt;table class=&quot;fatitem&quot; border=&quot;0&quot; readability=&quot;7.6064487632509&quot;&gt;&lt;tr class=&quot;athing&quot; id=&quot;18903886&quot; readability=&quot;0&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot; class=&quot;title&quot;/&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;title&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=18903886&quot; class=&quot;storylink&quot;&gt;Ask HN: How do you motivate yourself to keep working on a project?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;0.72289156626506&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td class=&quot;subtext&quot;&gt;&lt;span class=&quot;score&quot; id=&quot;score_18903886&quot;&gt;202 points&lt;/span&gt; by &lt;a href=&quot;https://news.ycombinator.com/user?id=SamWhited&quot; class=&quot;hnuser&quot;&gt;SamWhited&lt;/a&gt; &lt;span class=&quot;age&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=18903886&quot;&gt;16 hours ago&lt;/a&gt;&lt;/span&gt; &lt;span id=&quot;unv_18903886&quot;/&gt; | &lt;a href=&quot;https://news.ycombinator.com/hide?id=18903886&amp;amp;goto=item%3Fid%3D18903886&quot;&gt;hide&lt;/a&gt; | &lt;a href=&quot;https://hn.algolia.com/?query=Ask%20HN%3A%20How%20do%20you%20motivate%20yourself%20to%20keep%20working%20on%20a%20project%3F&amp;amp;sort=byDate&amp;amp;dateRange=all&amp;amp;type=story&amp;amp;storyText=false&amp;amp;prefix&amp;amp;page=0&quot; class=&quot;hnpast&quot;&gt;past&lt;/a&gt; | &lt;a href=&quot;https://www.google.com/search?q=Ask%20HN%3A%20How%20do%20you%20motivate%20yourself%20to%20keep%20working%20on%20a%20project%3F&quot;&gt;web&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/fave?id=18903886&amp;amp;auth=fc4842f161e9afabf51cd0446a1c6d42ad35a811&quot;&gt;favorite&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/item?id=18903886&quot;&gt;136 comments&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr readability=&quot;14.5&quot;&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td readability=&quot;6&quot;&gt;I've been working on a small issue tracker for a few months, and it's been ready to release for a while, but I have one more hurdle that I just can't convince myself to overcome: billing. I &lt;em&gt;hate&lt;/em&gt; working with the payment provider I've chosen (but they really do seem to be the easiest thing, others I've looked at are no better). I end up with horribly messy code from their terrible Go SDK, everyone says their documentation is great, but as far as I can tell there's a lot of it that all leaves out important information at every step, so I have to tease out how to deal with their million edge cases, etc. I've been putting off a billing rewrite for weeks now and not working towards an actual release; it's to the point where I'm questioning if I even want to be in this industry (although to be fair, I've been questioning that since before I got into software).
&lt;p&gt;What do you do to keep yourself motivated? Especially when you hit something you hate to work on but is necessary.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td/&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;/&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;1&quot;&gt;&lt;td&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;10&quot; width=&quot;0&quot;/&gt;&lt;br/&gt;&lt;center&gt;&lt;span class=&quot;yclinks&quot;&gt;&lt;a href=&quot;https://news.ycombinator.com/newsguidelines.html&quot;&gt;Guidelines&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/newsfaq.html&quot;&gt;FAQ&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Support&lt;/a&gt; | &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;API&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/security.html&quot;&gt;Security&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/lists&quot;&gt;Lists&lt;/a&gt; | &lt;a href=&quot;https://news.ycombinator.com/bookmarklet.html&quot; rel=&quot;nofollow&quot;&gt;Bookmarklet&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/legal/&quot;&gt;Legal&lt;/a&gt; | &lt;a href=&quot;http://www.ycombinator.com/apply/&quot;&gt;Apply to YC&lt;/a&gt; | &lt;a href=&quot;mailto:hn@ycombinator.com&quot;&gt;Contact&lt;/a&gt;&lt;/span&gt;
&lt;/center&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Mon, 14 Jan 2019 15:55:46 +0000</pubDate>
<dc:creator>SamWhited</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=18903886</dc:identifier>
</item>
<item>
<title>Secure and Ad-Free Internet Anywhere with Streisand and Pi Hole</title>
<link>https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</link>
<guid isPermaLink="true" >https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</guid>
<description>&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ads are everywhere and aren’t so fun&lt;/li&gt;
&lt;li&gt;everyone is trying to track you (for better or worse)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pi-hole.net&quot;&gt;Pi Hole&lt;/a&gt; is awesome; it’s a network-level adblocker and runs on a Raspberry Pi&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/StreisandEffect/streisand&quot;&gt;streisand&lt;/a&gt; gives you a quick way to set up a censorship-resistant and secure server running a number of VPNs/proxies (&lt;a href=&quot;https://openvpn.net/&quot;&gt;OpenVPN&lt;/a&gt;, &lt;a href=&quot;https://shadowsocks.org/en/index.html&quot;&gt;Shadowsocks&lt;/a&gt;, &lt;a href=&quot;https://www.wireguard.com/&quot;&gt;Wireguard&lt;/a&gt;, and more!)&lt;/li&gt;
&lt;li&gt;you can combine them to get a secure &amp;amp; resilient connection with network-level ad-blocking everywhere you go (iOS/android, linux, mac OS, windows, etc.)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;Pi Hole is a suite of tools designed to do network-level ad blocking by acting as a localized DNS resolver.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I recently took some time off of work to spend time with family. During some free-time I had, I worked on a few side projects like &lt;a href=&quot;https://ifelse.io/2018/12/05/better-faster-more-secure-backups-with-restic&quot;&gt;getting our backups in order&lt;/a&gt; and getting a Raspberry Pi 3 running &lt;a href=&quot;https://pi-hole.net&quot;&gt;Pi Hole&lt;/a&gt;. I’m always a fan of better security at every level for people and their data, so these were really fun to get set up. With the Pi Hole running at home and our data being securely backed up, I felt we’d made a couple important leaps forward in terms of data privacy and security. But I wanted that same privacy and ad-blocking capability wherever I was (on my phone, using my laptop remotely, etc.). I’d seen documentation about setting up a VPN on a remote server and using Pi Hole, but the examples were generally unwieldy and assumed too much of the reader (knowing a lot about &lt;em&gt;X&lt;/em&gt; VPN system etc.). So that’s where this post comes in.&lt;/p&gt;
&lt;p&gt;In this post, I’ll walk you through another weekend project that I recently worked on in the same privacy and home-tech vein: setting up a private VPN server on AWS with streisand and adding pi hole to get secure connectivity with network-level ad-blocking &lt;em&gt;anywhere you go&lt;/em&gt; and on &lt;em&gt;all your devices&lt;/em&gt;. Sounds good right? Read on to find out how.&lt;/p&gt;
&lt;h2 id=&quot;pi-hole&quot;&gt;Pi hole?&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;img src=&quot;https://ifelse.io/static/pi-hole-logo.png&quot; width=&quot;10%&quot;/&gt; If you’re interested in learning more about the story behind the Pi Hole, check out &lt;a href=&quot;https://softwareengineeringdaily.com/2018/05/29/pi-hole-ad-blocker-hardware-with-jacob-salmela/&quot;&gt;this episode&lt;/a&gt; from Software Engineering Daily&lt;/span&gt; Let’s start by discussing Pi Hole. Pi Hole is a suite of tools designed to do network-level ad blocking by acting as a localized DNS resolver. It offers (from their site):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;Network-wide protection&lt;/em&gt;: Instead of browser plugins or other software on each computer, install Pi-hole in one place and your entire network is protected.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Block in-app advertisements&lt;/em&gt;: Network-level blocking allows you to block ads in non-traditional places such as mobile apps and smart TVs, regardless of hardware or OS.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Improve network performance&lt;/em&gt;: Since advertisements are blocked before they are downloaded, network performance is improved and will feel faster.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Monitor statistics&lt;/em&gt;: Our Web interface offers control of your Pi-hole and a central place to view statistics. We also include an API for extending these stats.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Like I said, I got one of these set up during some time off in November. And having the Raspberry Pi has been great. For one, it’s easy for my family to use since there’s essentially nothing to be done to use it. And it’s a &lt;em&gt;network-wide&lt;/em&gt; adblocker, so our our non-browser devices are moderated, too! We’ve seen speed-ups on many devices and gotten some insight into which devices are calling home decently often, too. I even started noticing some network calls our ISP appears to be making, something I’m still looking into.&lt;/p&gt;
&lt;p&gt;I won’t do a full walk-through on getting the pi hole set up on a raspberry pi since I think that deserves it’s own treatment. But I do want to show off some of what the Pi Hole brings. Check out this dashboard with some sample data from the other day.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;&lt;em&gt;Our Pi Hole dashboard&lt;/em&gt;. The 14% was even decently low; most days when I check it’s usually around 20%. Which means &lt;em&gt;at least&lt;/em&gt; roughly 1 in 5 network requests is aimed at either ads or some sort of tracking. It’s telling to see which apps and even other devices around our home are calling home often or out to ad services. Not surprising, really, but it’s another thing to see it happening in your own home.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ifelse.io/static/pi-hole-dashboard-screenshot.jpg&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;setting-up-a-wiregured-etc-server-with-streisand&quot;&gt;Setting up a Wiregured, etc. Server with Streisand&lt;/h2&gt;
&lt;p&gt;I’d looked into projects like OpenVPN in the past, but what always held me up was 1) a not-hard but also not-easy setup process and 2) feeling &lt;em&gt;juuuust&lt;/em&gt; lazy enough and/or motivated by other things to not want to go through the trouble of setting it up. I have a VPN through work, so it wasn’t something I wasn’t used to or understood the benefits of.&lt;/p&gt;
&lt;p&gt;But once I learned you could easily combine the pi hole’s ad-blocking capabilities with a VPN, I wanted to make it happen ASAP. This fact, plus discovering the &lt;a href=&quot;https://github.com/StreisandEffect/streisand&quot;&gt;streisand&lt;/a&gt; project were a perfect recipe for a (next available) weekend project. Streisand is great because it’s designed for speed and ease of use but also aims to be censorship resistant so it implements best practices. It also offers a wide variety of technologies out of the box, so you can choose a setup that works for you (ranging from more compatible to more performant).&lt;/p&gt;
&lt;p&gt;Clone the streisand repo to start and run it’s python venv setup.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt;git clone https://github.com/StreisandEffect/streisand.git &amp;amp;&amp;amp; cd streisand
./util/venv-dependencies.sh ./venv
source ./venv/bin/activate
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can choose a wide variety of platforms to run a streisand server on. I use AWS heavily professionally and personally, so I went with that. I made a few tweaks to the playbooks since I wasn’t happy with some defaults on a first run. Will probably open a PR to see what the team behind the project thinks of a few small changes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;playbooks/roles/genesis-amazon/defaults/main.yml&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can just as easily do this in the EC2 console later, too, if you prefer. I wanted to change to a T3 since that generation of AWS server is generally more cost-effective for the resources it gives you. To keep costs down, I ended up purchasing a reserved instance for the year and that cut my aws costs almost in half (notable, too, when you can run your own VPN instead of paying the likes of Nord VPN or one of the others).&lt;/p&gt;
&lt;p&gt;If you do find yourself here and unfamiliar with or unwilling to use AWS or another system to run your own server, pleast consider &lt;a href=&quot;https://protonvpn.com/&quot;&gt;Proton VPN&lt;/a&gt; as a secure alternative that isn’t as likely as the other providers to skim your data.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-yml&quot;&gt;#...
aws_instance_type: 't3.micro' # or whatever instance type you want
#...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;playbooks/roles/validation/tasks/main.yml&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I first ran through setting up streisand, I set the maximum number of client profiles (20) but later found this likely wouldn’t be enough since I’m trying to get my family and extended family to use the VPN and have better data security and privacy. If I can get them all to use this setup and &lt;a href=&quot;https://1password.com&quot;&gt;1Password&lt;/a&gt; I will be happy. Yes I am a ton of fun at parties and family gatherings ;) If 20 is sufficient for you, no reason to make this change.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: adding more profiles will slow down the setup process, especially if you’ve enabled all the options. I think setting up 150 profiles took around an hour or so for me (another reason to opt for the T3 over the T2.micro).&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-yml&quot;&gt;#...
when: (vpn_clients &amp;gt; 150) or (vpn_clients &amp;lt; 1)
#...
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, run the ansible playbooks.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt; ./streisand
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Feel free to choose whatever setup works best for you. The streisand ansible playbook will walk you through all the steps. The only parts worth noting or where I deviated from the defaults are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;I use &lt;a href=&quot;https://cloudflare.com&quot;&gt;Cloudflare&lt;/a&gt; for DNS, so I used the elastic IP to set a DNS record for the domain/subdomain we use. Streisand will prompt you for this FQDN during the process and try to get a &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt; SSL cert for you. If you do use Cloudfare, make sure &lt;em&gt;not&lt;/em&gt; to set the “DNS/HTTP proxy” setting at first. If you do, Cloudflare will see your application as being offline and resolve to a Cloudflare offline server. I discovered this after hitting my domain and then using &lt;code&gt;dig&lt;/code&gt; to see what was actually being resolved. I turned the Cloudflare cache/proxy back online after the server was running.&lt;/li&gt;
&lt;li&gt;I set up all the default options, but didn’t elect to set up a Tor server (for now). Feel free to choose whichever options you prefer&lt;/li&gt;
&lt;li&gt;I had the playbook create a &lt;em&gt;ton&lt;/em&gt; of profiles, so it took a lot longer than 10 min (probably just over an hour).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Once the setup is complete, streisand will let you open up a local HTML file that has the instructions for connecting to your gateway.&lt;/p&gt;
&lt;h2 id=&quot;adding-pi-hole&quot;&gt;Adding Pi Hole&lt;/h2&gt;
&lt;p&gt;To get the benefits of Pi Hole in your new VPN(s), ssh into your box. If you used the AWS setup, the EC2 console has a easy “connect” button that will show you how to do this. Once you’re in, you should run the pi hole installation script:&lt;/p&gt;
&lt;p&gt;(&lt;em&gt;in your instance&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;marginnote&quot;&gt;If you’re interested in other installation methods, check out &lt;a href=&quot;https://github.com/pi-hole/pi-hole/#one-step-automated-install&quot;&gt;https://github.com/pi-hole/pi-hole/#one-step-automated-install&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sh&quot;&gt;curl -sSL https://install.pi-hole.net | bash
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For the pi hole options, I followed all the defaults, choosing &lt;code&gt;tun0&lt;/code&gt; as the interface to listen on and I also installed the web interface. Interestingly, since streisand’s gateway is fronted by nginx, I’ll need to find a way to allow access to the &lt;code&gt;pi.hole&lt;/code&gt; UI admin. This is on my to-do list and shouldn’t be all that hard (likely just some nginx config). If you want to see stats sooner, you can run &lt;code&gt;pihole -c&lt;/code&gt; from inside your instances and get some basic stats. If you want to update your blocklists, you can also do that from the CLI inside your server. I added a few from &lt;a href=&quot;https://firebog.net&quot;&gt;https://firebog.net&lt;/a&gt; and have had good success. Blocklists there are marked as more or less likely to cause issues while browsing. This is helpful since you can gauge how often you wan to intervene to resolve issues or false-positives.&lt;/p&gt;
&lt;p&gt;There’s not much else to do to get up and running. For our setup, we use either &lt;a href=&quot;https://tunnelblick.net/downloads.html&quot;&gt;TunnelBlick&lt;/a&gt;, &lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG&quot;&gt;Shadowsocks NG&lt;/a&gt;, or &lt;a href=&quot;https://www.wireguard.com/&quot;&gt;Wireguard&lt;/a&gt; clients for desktop and primarily Wireguard for our phones since it offers the best overall performance. There are also OpenVPN clients available for seemingly every platform. Once you’ve connected, check out &lt;a href=&quot;https://pi-hole.net/pages-to-test-ad-blocking-performance/&quot;&gt;https://pi-hole.net/pages-to-test-ad-blocking-performance/&lt;/a&gt; to see the ad blocking goodness at work! You can also visit &lt;a href=&quot;https://duckduckgo.com/?q=ip+address&amp;amp;ia=answer&quot;&gt;duckduckgo&lt;/a&gt; to see your IP (should be the elastic IP you set or similar).&lt;/p&gt;
&lt;p&gt;Questions, thoughts? Let me know in the comments or &lt;a href=&quot;https://twitter.com/MarkTheThomas&quot;&gt;@markthethomas&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 14 Jan 2019 15:42:58 +0000</pubDate>
<dc:creator>markthethomas</dc:creator>
<og:title>Secure &amp; Ad-free Internet Anywhere With Streisand and Pi Hole</og:title>
<og:description>tl;dr: ads are everywhere and aren’t so fun everyone is trying to track you (for better or worse) Pi Hole is awesome; it’s a network-level adblocker and runs on a Raspberry Pi streisand gives you a quick way to set up a censorship-resistant and secure server running a number of VPNs/proxies (OpenVPN, Shadowsocks, Wireguard, and more!) you can combine them to get a secure &amp; resilient connection with network-level ad-blocking everywhere you go (iOS/android, linux, mac OS, windows, etc.</og:description>
<og:type>article</og:type>
<og:url>https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</og:url>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://ifelse.io/2019/01/12/secure-ad-free-internet-anywhere-with-streisand-and-pi-hole/</dc:identifier>
</item>
<item>
<title>Project Alias hacks Amazon Echo and Google Home to protect privacy</title>
<link>https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</link>
<guid isPermaLink="true" >https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</guid>
<description>&lt;div readability=&quot;15.230964467005&quot;&gt;
&lt;p&gt;Fungi of the rain forest can be nasty parasites. Eager to reproduce, they’ll &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4527712/&quot;&gt;infect a far larger, more powerful insect&lt;/a&gt;, taking control of its brain, and using its strength against it–animating the zombie insect to climb to the far reaches of the rain forest canopy. The insect dies, of course, but the spores are released in the perfect spot, giving the fungus its best chance of living on.&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;ad-wrapper ad-wrapper--mobileparallax_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_mid_article_inject&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;40.381828637148&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://bjoernkarmann.dk/project_alias&quot;&gt;Project Alias&lt;/a&gt; is the technological equivalent to parasitic fungus. But instead of latching onto an insect, it latches onto a Google Home or Amazon Alexa device–taking control of their strengths for its own purposes. Project Alias serves as a gatekeeper between you and big corporations. It effectively deafens the home assistant when you don’t want it listening, and brings it to life when you do.&lt;/p&gt;
&lt;p&gt;[Image: courtesy Alias]It’s a dramatic metaphor, but an apt one to Tellart designer &lt;a href=&quot;http://bjoernkarmann.dk&quot;&gt;Bjørn Karmann&lt;/a&gt; and Topp designer &lt;a href=&quot;http://www.toreknudsen.dk/&quot;&gt;Tore Knudsen&lt;/a&gt;. After all, Google’s and Amazon’s voice assistants are now listening on more than a billion devices worldwide, &lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2018/05/24/an-amazon-echo-recorded-a-familys-conversation-then-sent-it-to-a-random-person-in-their-contacts-report-says/&quot;&gt;even sharing them by mistake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“This [fungus] is a vital part of the rain forest, since whenever a species gets too dominant or powerful it has higher chances of getting infected, thus keeping the diversity in balance,” says Tore Knudsen. “We wanted to take that as an analogy and show how DIY and open source can be used to create ‘viruses’ for big tech companies.”&lt;/p&gt;
&lt;p&gt;Project Alias is designed as a completely open-source hardware/software solution for a world where big corporations have the ability to listen to us all the time. The hardware is a plug-powered microphone/speaker unit that can sit on top of your smart speaker of choice. It’s powered by a pretty typical raspberry pie chipset, the tool of choice for homebrew electronics aficionados.&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://player.vimeo.com/video/306044007?app_id=122963&quot; width=&quot;525&quot; height=&quot;295&quot; frameborder=&quot;0&quot; title=&quot;Project Alias&quot; allow=&quot;autoplay; fullscreen&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;The speaker sounds like a white noise machine to the assistant, covering your speech with an inaudible, omnipresent static. That is, until the software side comes into play. You can train the Alias through local machine learning (no cloud here!) to learn how to wake the assistant to a unique keyword, disabling the static.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--mobilerectangle_1&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div readability=&quot;50.201257861635&quot;&gt;
&lt;p&gt;The Google Assistant makes you call it “Google.” The Echo makes you call it “Computer,” “Amazon,” or “Alexa.” So instead of talking to something you own, you’re talking to a brand. Alias lets you train it to recognize “Hey Jim” or “Pizza party!” or whatever else you imagine.&lt;/p&gt;
&lt;p&gt;[Image: courtesy Alias]“When a family gets a puppy into their home, there is always this name-giving ritual, where the kids get to wish for the name,” says Knudsen. “We don’t see a reason why this should be different with home AIs.”&lt;/p&gt;
&lt;p&gt;When you utter your chosen word, it prompts the Alias to whisper, “Hey Google,” to activate the assistant. And then Alias goes quiet, allowing you to communicate with Google or Amazon as you normally would.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-large wp-image-90291240 lazyload&quot; alt=&quot;&quot; width=&quot;525&quot; height=&quot;350&quot; sizes=&quot;(max-width: 525px) 100vw, 525px&quot; data-src=&quot;https://images.fastcompany.net/image/upload/w_596,c_limit,q_auto:best,f_auto/wp-cms/uploads/2019/01/3-hijack-amazon-echo-and-google-home-for-your-privacy.jpg&quot;/&gt;[Image: courtesy Alias]The most appealing part of Project Alias is its promise of privacy. Amazon has a relatively poor track record here, &lt;a href=&quot;https://www.cnbc.com/2018/11/19/how-to-delete-amazon-alexa-conversations.html&quot;&gt;storing past conversations&lt;/a&gt; in the cloud. Google, too, &lt;a href=&quot;https://www.wired.com/story/amazon-echo-and-google-home-voice-data-delete/&quot;&gt;collects spoken&lt;/a&gt; data. Of course they aren’t meant to listen in to your private conversations, but by nature, the devices must always be listening a &lt;em&gt;little&lt;/em&gt; to be listening at just the right time–and they can always mishear any word as a wake word. But whether these devices are true privacy invasions or not, frankly, it’s hard to trust big companies with relatively poor privacy track records to always hear only what you want them to hear.&lt;/p&gt;
&lt;p&gt;Project Alias offers an independent layer of protection to any privacy-minded person. To be honest, I wish it weren’t just an &lt;a href=&quot;https://github.com/bjoernkarmann/project_alias&quot;&gt;open source maker project&lt;/a&gt;. I wish it were a real product that I could buy right now.&lt;/p&gt;
&lt;p&gt;“If somebody would be ready to invest, we would be ready for a collaboration,” says Knudsen. “But initially, we made this project with a goal to encourage people to take action and show how things could be different . . . [to] ask what kind of ‘smart’ we actually want in the future.”&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div class=&quot;ad-wrapper ad-wrapper--native_recommendationlink&quot;&gt;
&lt;div class=&quot;ad-wrapper--ad-unit-wrap&quot;&gt;
&lt;p&gt;advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;


&lt;/div&gt;
</description>
<pubDate>Mon, 14 Jan 2019 14:43:52 +0000</pubDate>
<dc:creator>jbredeche</dc:creator>
<og:type>article</og:type>
<og:title>This is the first truly great Amazon Alexa and Google Home hack</og:title>
<og:url>https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</og:url>
<og:description>The two designers behind Project Alias compare it to a virus–or perhaps a parasitic fungus. In a good way.</og:description>
<og:image>https://images.fastcompany.net/image/upload/w_1280,f_auto,q_auto,fl_lossy/wp-cms/uploads/2019/01/p-1-hijack-amazon-echo-and-google-home-for-your-privacy.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fastcompany.com/90290703/this-is-the-first-truly-great-amazon-alexa-and-google-home-hack</dc:identifier>
</item>
<item>
<title>Writing an OS in Rust: Introduction to Paging</title>
<link>https://os.phil-opp.com/paging-introduction/</link>
<guid isPermaLink="true" >https://os.phil-opp.com/paging-introduction/</guid>
<description>&lt;header class=&quot;masthead&quot;&gt;
&lt;p&gt;&lt;small&gt;Philipp Oppermann's blog&lt;/small&gt;&lt;/p&gt;
&lt;/header&gt;
&lt;time datetime=&quot;2019-01-14&quot; class=&quot;post-date&quot;&gt;Jan 14, 2019&lt;/time&gt;&lt;aside id=&quot;toc&quot;&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#memory-protection&quot;&gt;Memory Protection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#segmentation&quot;&gt;Segmentation&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#virtual-memory&quot;&gt;Virtual Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#fragmentation&quot;&gt;Fragmentation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#paging&quot;&gt;Paging&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#hidden-fragmentation&quot;&gt;Hidden Fragmentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-tables&quot;&gt;Page Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#multilevel-page-tables&quot;&gt;Multilevel Page Tables&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#paging-on-x86&quot;&gt;Paging on x86_64&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#example-translation&quot;&gt;Example Translation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot;&gt;Page Table Format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#the-translation-lookaside-buffer&quot;&gt;The Translation Lookaside Buffer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#implementation&quot;&gt;Implementation&lt;/a&gt;
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-faults&quot;&gt;Page Faults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#accessing-the-page-tables&quot;&gt;Accessing the Page Tables&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#what-s-next&quot;&gt;What's next?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/aside&gt;&lt;p&gt;This post introduces &lt;em&gt;paging&lt;/em&gt;, a very common memory management scheme that we will also use for our operating system. It explains why memory isolation is needed, how &lt;em&gt;segmentation&lt;/em&gt; works, what &lt;em&gt;virtual memory&lt;/em&gt; is, and how paging solves memory fragmentation issues. It also explores the layout of multilevel page tables on the x86_64 architecture.&lt;/p&gt;

&lt;p&gt;This blog is openly developed on &lt;a href=&quot;https://github.com/phil-opp/blog_os&quot;&gt;GitHub&lt;/a&gt;. If you have any problems or questions, please open an issue there. You can also leave comments &lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#comments&quot;&gt;at the bottom&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;memory-protection&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#memory-protection&quot; aria-label=&quot;Anchor link for: memory-protection&quot;&gt;🔗&lt;/a&gt; Memory Protection&lt;/h2&gt;
&lt;p&gt;One main task of an operating system is to isolate programs from each other. Your web browser shouldn't be able to interfere with your text editor, for example. To achieve this goal, operating systems utilize hardware functionality to ensure that memory areas of one process are not accessible by other processes. There are different approaches, depending on the hardware and the OS implementation.&lt;/p&gt;
&lt;p&gt;As an example, some ARM Cortex-M processors (used for embedded systems) have a &lt;a href=&quot;https://developer.arm.com/docs/ddi0337/e/memory-protection-unit/about-the-mpu&quot;&gt;&lt;em&gt;Memory Protection Unit&lt;/em&gt;&lt;/a&gt; (MPU), which allows you to define a small number (e.g. 8) of memory regions with different access permissions (e.g. no access, read-only, read-write). On each memory access the MPU ensures that the address is in a region with correct access permissions and throws an exception otherwise. By changing the regions and access permissions on each process switch, the operating system can ensure that each process only accesses its own memory, and thus isolate processes from each other.&lt;/p&gt;
&lt;p&gt;On x86, the hardware supports two different approaches to memory protection: &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_memory_segmentation&quot;&gt;segmentation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_memory#Paged_virtual_memory&quot;&gt;paging&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;segmentation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#segmentation&quot; aria-label=&quot;Anchor link for: segmentation&quot;&gt;🔗&lt;/a&gt; Segmentation&lt;/h2&gt;
&lt;p&gt;Segmentation was already introduced in 1978, originally to increase the amount of addressable memory. The situation back then was that CPUs only used 16-bit addresses, which limited the amount of addressable memory to 64KiB. To make more than these 64KiB accessible, additional segment registers were introduced, each containing an offset address. The CPU automatically added this offset on each memory access, so that up to 1MiB of memory were accessible.&lt;/p&gt;
&lt;p&gt;The segment register is chosen automatically by the CPU, depending on the kind of memory access: For fetching instructions the code segment &lt;code&gt;CS&lt;/code&gt; is used and for stack operations (push/pop) the stack segment &lt;code&gt;SS&lt;/code&gt; is used. Other instructions use data segment &lt;code&gt;DS&lt;/code&gt; or the extra segment &lt;code&gt;ES&lt;/code&gt;. Later two additional segment registers &lt;code&gt;FS&lt;/code&gt; and &lt;code&gt;GS&lt;/code&gt; were added, which can be used freely.&lt;/p&gt;
&lt;p&gt;In the first version of segmentation, the segment registers directly contained the offset and no access control was performed. This was changed later with the introduction of the &lt;a href=&quot;https://en.wikipedia.org/wiki/X86_memory_segmentation#Protected_mode&quot;&gt;&lt;em&gt;protected mode&lt;/em&gt;&lt;/a&gt;. When the CPU runs in this mode, the segment descriptors contain an index into a local or global &lt;a href=&quot;https://en.wikipedia.org/wiki/Global_Descriptor_Table&quot;&gt;&lt;em&gt;descriptor table&lt;/em&gt;&lt;/a&gt;, which contains – in addition to an offset address – the segment size and access permissions. By loading separate global/local descriptor tables for each process that confine memory accesses to the process's own memory areas, the OS can isolate processes from each other.&lt;/p&gt;
&lt;p&gt;By modifying the memory addresses before the actual access, segmentation already employed a technique that is now used almost everywhere: &lt;em&gt;virtual memory&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;virtual-memory&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#virtual-memory&quot; aria-label=&quot;Anchor link for: virtual-memory&quot;&gt;🔗&lt;/a&gt; Virtual Memory&lt;/h3&gt;
&lt;p&gt;The idea behind virtual memory is to abstract away the memory addresses from the underlying physical storage device. Instead of directly accessing the storage device, a translation step is performed first. For segmentation, the translation step is to add the offset address of the active segment. Imagine a program accessing memory address &lt;code&gt;0x1234000&lt;/code&gt; in a segment with offset &lt;code&gt;0x1111000&lt;/code&gt;: The address that is really accessed is &lt;code&gt;0x2345000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To differentiate the two address types, addresses before the translation are called &lt;em&gt;virtual&lt;/em&gt; and addresses after the translation are called &lt;em&gt;physical&lt;/em&gt;. One important difference between these two kinds of addresses is that physical addresses are unique and always refer to the same, distinct memory location. Virtual addresses on the other hand depend on the translation function. It is entirely possible that two different virtual addresses refer to the same physical address. Also, identical virtual addresses can refer to different physical addresses when they use different translation functions.&lt;/p&gt;
&lt;p&gt;An example where this property is useful is running the same program twice in parallel:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/segmentation-same-program-twice.svg&quot; alt=&quot;Two virtual address spaces with address 0–150, one translated to 100–250, the other to 300–450&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Here the same program runs twice, but with different translation functions. The first instance has an segment offset of 100, so that its virtual addresses 0–150 are translated to the physical addresses 100–250. The second instance has offset 300, which translates its virtual addresses 0–150 to physical addresses 300–450. This allows both programs to run the same code and use the same virtual addresses without interfering with each other.&lt;/p&gt;
&lt;p&gt;Another advantage is that programs can be placed at arbitrary physical memory locations now, even if they use completely different virtual addresses. Thus, the OS can utilize the full amount of available memory without needing to recompile programs.&lt;/p&gt;
&lt;h3 id=&quot;fragmentation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#fragmentation&quot; aria-label=&quot;Anchor link for: fragmentation&quot;&gt;🔗&lt;/a&gt; Fragmentation&lt;/h3&gt;
&lt;p&gt;The differentiation between virtual and physical addresses makes segmentation really powerful. However, it has the problem of fragmentation. As an example, imagine that we want to run a third copy of the program we saw above:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/segmentation-fragmentation.svg&quot; alt=&quot;Three virtual address spaces, but there is not enough continuous space for the third&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There is no way to map the third instance of the program to virtual memory without overlapping, even though there is more than enough free memory available. The problem is that we need &lt;em&gt;continuous&lt;/em&gt; memory and can't use the small free chunks.&lt;/p&gt;
&lt;p&gt;One way to combat this fragmentation is to pause execution, move the used parts of the memory closer together, update the translation, and then resume execution:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/segmentation-fragmentation-compacted.svg&quot; alt=&quot;Three virtual address spaces after defragmentation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Now there is enough continuous space to start the third instance of our program.&lt;/p&gt;
&lt;p&gt;The disadvantage of this defragmentation process is that is needs to copy large amounts of memory which decreases performance. It also needs to be done regularly before the memory becomes too fragmented. This makes performance unpredictable, since programs are paused at random times and might become unresponsive.&lt;/p&gt;
&lt;p&gt;The fragmentation problem is one of the reasons that segmentation is no longer used by most systems. In fact, segmentation is not even supported in 64-bit mode on x86 anymore. Instead &lt;em&gt;paging&lt;/em&gt; is used, which completely avoids the fragmentation problem.&lt;/p&gt;

&lt;p&gt;The idea is to divide both the virtual and the physical memory space into small, fixed-size blocks. The blocks of the virtual memory space are called &lt;em&gt;pages&lt;/em&gt; and the blocks of the physical address space are called &lt;em&gt;frames&lt;/em&gt;. Each page can be individually mapped to a frame, which makes it possible split larger memory regions across non-continuous physical frames.&lt;/p&gt;
&lt;p&gt;The advantage of this becomes visible if we recap the example of the fragmented memory space, but use paging instead of segmentation this time:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/paging-fragmentation.svg&quot; alt=&quot;With paging the third program instance can be split across many smaller physical areas&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In this example we have a page size of 50 bytes, which means that each of our memory regions is split across three pages. Each page is mapped to a frame individually, so a continuous virtual memory region can be mapped to non-continuous physical frames. This allows us to start the third instance of the program without performing any defragmentation before.&lt;/p&gt;
&lt;h3 id=&quot;hidden-fragmentation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#hidden-fragmentation&quot; aria-label=&quot;Anchor link for: hidden-fragmentation&quot;&gt;🔗&lt;/a&gt; Hidden Fragmentation&lt;/h3&gt;
&lt;p&gt;Compared to segmentation, paging uses lots of small, fixed sized memory regions instead of a few large, variable sized regions. Since every frame has the same size, there are no frames that are too small to be used so that no fragmentation occurs.&lt;/p&gt;
&lt;p&gt;Or it &lt;em&gt;seems&lt;/em&gt; like no fragmentation occurs. There is still some hidden kind of fragmentation, the so-called &lt;em&gt;internal fragmentation&lt;/em&gt;. Internal fragmentation occurs because not every memory region is an exact multiple of the page size. Imagine a program of size 101 in the above example: It would still need three pages of size 50, so it would occupy 49 bytes more than needed. To differentiate the two types of fragmentation, the kind of fragmentation that happens when using segmentation is called &lt;em&gt;external fragmentation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Internal fragmentation is unfortunate, but often better than the external fragmentation that occurs with segmentation. It still wastes memory, but does not require defragmentation and makes the amount of fragmentation predictable (on average half a page per memory region).&lt;/p&gt;
&lt;h3 id=&quot;page-tables&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#page-tables&quot; aria-label=&quot;Anchor link for: page-tables&quot;&gt;🔗&lt;/a&gt; Page Tables&lt;/h3&gt;
&lt;p&gt;We saw that each of the potentially millions of pages is individually mapped to a frame. This mapping information needs to be stored somewhere. Segmentation uses an individual segment selector register for each active memory region, which is not possible for paging since there are way more pages than registers. Instead paging uses a table structure called &lt;em&gt;page table&lt;/em&gt; to store the mapping information.&lt;/p&gt;
&lt;p&gt;For our above example the page tables would look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/paging-page-tables.svg&quot; alt=&quot;Three page tables, one for each program instance. For instance 1 the mapping is 0-&amp;gt;100, 50-&amp;gt;150, 100-&amp;gt;200. For instance 2 it is 0-&amp;gt;300, 50-&amp;gt;350, 100-&amp;gt;400. For instance 3 it is 0-&amp;gt;250, 50-&amp;gt;450, 100-&amp;gt;500.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We see that each program instance has its own page table. A pointer to the currently active table is stored in a special CPU register. On &lt;code&gt;x86&lt;/code&gt;, this register is called &lt;code&gt;CR3&lt;/code&gt;. It is the job of the operating system to load this register with the pointer to the correct page table before running each program instance.&lt;/p&gt;
&lt;p&gt;On each memory access, the CPU reads the table pointer from the register and looks up the mapped frame for the accessed page in the table. This is entirely done in hardware and completely transparent to the running program. To speed up the translation process, many CPU architectures have a special cache that remembers the results of the last translations.&lt;/p&gt;
&lt;p&gt;Depending on the architecture, page table entries can also store attributes such as access permissions in a flags field. In the above example, the &quot;r/w&quot; flag makes the page both readable and writable.&lt;/p&gt;
&lt;h3 id=&quot;multilevel-page-tables&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#multilevel-page-tables&quot; aria-label=&quot;Anchor link for: multilevel-page-tables&quot;&gt;🔗&lt;/a&gt; Multilevel Page Tables&lt;/h3&gt;
&lt;p&gt;The simple page tables we just saw have a problem in larger address spaces: they waste memory. For example, imagine a program that uses the four virtual pages &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1_000_000&lt;/code&gt;, &lt;code&gt;1_000_050&lt;/code&gt;, and &lt;code&gt;1_000_100&lt;/code&gt; (we use &lt;code&gt;_&lt;/code&gt; as a thousands separator):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/single-level-page-table.svg&quot; alt=&quot;Page 0 mapped to frame 0 and pages 1_000_000–1_000_150 mapped to frames 100–250&quot;/&gt;&lt;/p&gt;
&lt;p&gt;It only needs 4 physical frames, but the page table has over a million entries. We can't omit the empty entries because then the CPU would no longer be able to jump directly to the correct entry in the translation process (e.g. it is no longer guaranteed that the fourth page uses the fourth entry).&lt;/p&gt;
&lt;p&gt;To reduce the wasted memory, we can use a &lt;strong&gt;two-level page table&lt;/strong&gt;. The idea is that we use different page tables for different address regions. An additional table called &lt;em&gt;level 2&lt;/em&gt; page table contains the mapping between address regions and (level 1) page tables.&lt;/p&gt;
&lt;p&gt;This is best explained by an example. Let's define that each level 1 page table is responsible for a region of size &lt;code&gt;10_000&lt;/code&gt;. Then the following tables would exist for the above example mapping:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/multilevel-page-table.svg&quot; alt=&quot;Page 0 points to entry 0 of the level 2 page table, which points to the level 1 page table T1. The first entry of T1 points to frame 0, the other entries are empty. Pages 1_000_000–1_000_150 point to the 100th entry of the level 2 page table, which points to a different level 1 page table T2. The first three entries of T2 point to frames 100–250, the other entries are empty.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Page 0 falls into the first &lt;code&gt;10_000&lt;/code&gt; byte region, so it uses the first entry of the level 2 page table. This entry points to level 1 page table T1, which specifies that page &lt;code&gt;0&lt;/code&gt; points to frame &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The pages &lt;code&gt;1_000_000&lt;/code&gt;, &lt;code&gt;1_000_050&lt;/code&gt;, and &lt;code&gt;1_000_100&lt;/code&gt; all fall into the 100th &lt;code&gt;10_000&lt;/code&gt; byte region, so they use the 100th entry of the level 2 page table. This entry points at a different level 1 page table T2, which maps the three pages to frames &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;150&lt;/code&gt;, and &lt;code&gt;200&lt;/code&gt;. Note that the page address in level 1 tables does not include the region offset, so e.g. the entry for page &lt;code&gt;1_000_050&lt;/code&gt; is just &lt;code&gt;50&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We still have 100 empty entries in the level 2 table, but much fewer than the million empty entries before. The reason for this savings is that we don't need to create level 1 page tables for the unmapped memory regions between &lt;code&gt;10_000&lt;/code&gt; and &lt;code&gt;1_000_000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The principle of two-level page tables can be extended to three, four, or more levels. Then the page table register points at the highest level table, which points to the next lower level table, which points to the next lower level, and so on. The level 1 page table then points at the mapped frame. The principle in general is called a &lt;em&gt;multilevel&lt;/em&gt; or &lt;em&gt;hierarchical&lt;/em&gt; page table.&lt;/p&gt;
&lt;p&gt;Now that we know how paging and multilevel page tables works, we can look at how paging is implemented in the x86_64 architecture (we assume in the following that the CPU runs in 64-bit mode).&lt;/p&gt;
&lt;h2 id=&quot;paging-on-x86&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#paging-on-x86&quot; aria-label=&quot;Anchor link for: paging-on-x86&quot;&gt;🔗&lt;/a&gt; Paging on x86_64&lt;/h2&gt;
&lt;p&gt;The x86_64 architecture uses a 4-level page table and a page size of 4KiB. Each page table, independent of the level, has a fixed sized of 512 entries. Each entry has a size of 8 bytes, so each table is 512 * 8B = 4KiB large and thus fits exactly into one page.&lt;/p&gt;
&lt;p&gt;The page table index for level is derived directly from the virtual address:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-table-indices-from-address.svg&quot; alt=&quot;Bits 0–12 are the page offset, bits 12–21 the level 1 index, bits 21–30 the level 2 index, bits 30–39 the level 3 index, and bits 39–48 the level 4 index&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We see that each table index consists of 9 bits, which makes sense because each table has 2^9 = 512 entries. The lowest 12 bits are the offset in the 4KiB page (2^12 bytes = 4KiB). Bits 48 to 64 are discarded, which means that x86_64 is not really 64-bit since it only supports 48-bit addresses. There are plans to extend the address size to 57 bits through a &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_5-level_paging&quot;&gt;5-level page table&lt;/a&gt;, but no processor that supports this feature exists yet.&lt;/p&gt;
&lt;p&gt;Even though bits 48 to 64 are discarded, they can't be set to arbitrary values. Instead all bits in this range have to be copies of bit 47 in order to keep addresses unique and allow future extensions like the 5-level page table. This is called &lt;em&gt;sign-extension&lt;/em&gt; because it's very similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Two's_complement#Sign_extension&quot;&gt;sign extension in two's complement&lt;/a&gt;. When a address is not correctly sign-extended, the CPU throws an exception.&lt;/p&gt;
&lt;h3 id=&quot;example-translation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#example-translation&quot; aria-label=&quot;Anchor link for: example-translation&quot;&gt;🔗&lt;/a&gt; Example Translation&lt;/h3&gt;
&lt;p&gt;Let's go through an example to understand how the translation process works in detail:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-page-table-translation.svg&quot; alt=&quot;An example 4-level page hierarchy with each page table shown in physical memory&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The physical address of the currently active level 4 page table, which is the root of the 4-level page table, is stored in the &lt;code&gt;CR3&lt;/code&gt; register. Each page table entry then points to the physical frame of the next level table. The entry of the level 1 table then points to the mapped frame. Note that all addresses in the page tables are physical instead of virtual, because otherwise the CPU would need to translate those addresses too (which could cause a never-ending recursion).&lt;/p&gt;
&lt;p&gt;The above page table hierarchy maps two pages (in blue). From the page table indices we can deduce that the virtual addresses of these two pages are &lt;code&gt;0x803FE7F000&lt;/code&gt; and &lt;code&gt;0x803FE00000&lt;/code&gt;. Let's see what happens when the program tries to read from address &lt;code&gt;0x803FE7F5CE&lt;/code&gt;. First, we convert the address to binary and determine the page table indices and the page offset for the address:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-page-table-translation-addresses.png&quot; alt=&quot;The sign extension bits are all 0, the level 4 index is 1, the level 3 index is 0, the level 2 index is 511, the level 1 index is 127, and the page offset is 0x5ce&quot;/&gt;&lt;/p&gt;
&lt;p&gt;With these indices, we can now walk the page table hierarchy to determine the mapped frame for the address:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;We start by reading the address of the level 4 table out of the &lt;code&gt;CR3&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;The level 4 index is 1, so we look at the entry with index 1 of that table, which tells us that the level 3 table is stored at address 16KiB.&lt;/li&gt;
&lt;li&gt;We load the level 3 table from that address and look at the entry with index 0, which points us to the level 2 table at 24KiB.&lt;/li&gt;
&lt;li&gt;The level 2 index is 511, so we look at the last entry of that page to find out the address of the level 1 table.&lt;/li&gt;
&lt;li&gt;Through the entry with index 127 of the level 1 table we finally find out that the page is mapped to frame 12KiB, or 0xc000 in hexadecimal.&lt;/li&gt;
&lt;li&gt;The final step is to add the page offset to the frame address to get the physical address 0xc000 + 0x5ce = 0xc5ce.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/x86_64-page-table-translation-steps.svg&quot; alt=&quot;The same example 4-level page hierarchy with 5 additional arrows: &amp;quot;Step 0&amp;quot; from the CR3 register to the level 4 table, &amp;quot;Step 1&amp;quot; from the level 4 entry to the level 3 table, &amp;quot;Step 2&amp;quot; from the level 3 entry to the level 2 table, &amp;quot;Step 3&amp;quot; from the level 2 entry to the level 1 table, and &amp;quot;Step 4&amp;quot; from the level 1 table to the mapped frames.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The permissions for the page in the level 1 table are &lt;code&gt;r&lt;/code&gt;, which means read-only. The hardware enforces this permissions and would throw an exception if we tried to write to that page. Permissions in higher level pages restrict the possible permissions in lower level, so if we set the level 3 entry to read-only, no pages that use this entry can be writable, even if lower levels specify read/write permissions.&lt;/p&gt;
&lt;p&gt;It's important to note that even through this example used only a single instance of each table, there are typically multiple instances of each level in each address space. At maximum, there are:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;one level 4 table,&lt;/li&gt;
&lt;li&gt;512 level 3 tables (because the level 4 table has 512 entries),&lt;/li&gt;
&lt;li&gt;512 * 512 level 2 tables (because each of the 512 level 3 tables has 512 entries), and&lt;/li&gt;
&lt;li&gt;512 * 512 * 512 level 1 tables (512 entries for each level 2 table).&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;page-table-format&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot; aria-label=&quot;Anchor link for: page-table-format&quot;&gt;🔗&lt;/a&gt; Page Table Format&lt;/h3&gt;
&lt;p&gt;Page tables on the x86_64 architecture are basically an array of 512 entries. In Rust syntax:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;#[repr(align(4096))]
&lt;/span&gt;&lt;span&gt;pub struct &lt;/span&gt;&lt;span&gt;PageTable {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;entries: [PageTableEntry; 512],
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As indicated by the &lt;code&gt;repr&lt;/code&gt; attribute, page tables need to be page aligned, i.e. aligned on a 4KiB boundary. This requirement guarantees that a page table always fills a complete page and allows an optimization that makes entries very compact.&lt;/p&gt;
&lt;p&gt;Each entry is 8 bytes (64 bits) large and has the following format:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Bit(s)&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;14.5&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;present&lt;/td&gt;
&lt;td&gt;the page is currently in memory&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;writable&lt;/td&gt;
&lt;td&gt;it's allowed to write to this page&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;user accessible&lt;/td&gt;
&lt;td&gt;if not set, only kernel mode code can access this page&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;write through caching&lt;/td&gt;
&lt;td&gt;writes go directly to memory&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;disable cache&lt;/td&gt;
&lt;td&gt;no cache is used for this page&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;accessed&lt;/td&gt;
&lt;td&gt;the CPU sets this bit when this page is used&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;dirty&lt;/td&gt;
&lt;td&gt;the CPU sets this bit when a write to this page occurs&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;huge page/null&lt;/td&gt;
&lt;td&gt;must be 0 in P1 and P4, creates a 1GiB page in P3, creates a 2MiB page in P2&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;global&lt;/td&gt;
&lt;td&gt;page isn't flushed from caches on address space switch (PGE bit of CR4 register must be set)&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;9-11&lt;/td&gt;
&lt;td&gt;available&lt;/td&gt;
&lt;td&gt;can be used freely by the OS&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;12-51&lt;/td&gt;
&lt;td&gt;physical address&lt;/td&gt;
&lt;td&gt;the page aligned 52bit physical address of the frame or the next page table&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;52-62&lt;/td&gt;
&lt;td&gt;available&lt;/td&gt;
&lt;td&gt;can be used freely by the OS&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;no execute&lt;/td&gt;
&lt;td&gt;forbid executing code on this page (the NXE bit in the EFER register must be set)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;We see that only bits 12–51 are used to store the physical frame address, the remaining bits are used as flags or can be freely used by the operating system. This is possible because we always point to a 4096-byte aligned address, either to a page-aligned page table or to the start of a mapped frame. This means that bits 0–11 are always zero, so there is no reason to store these bits because the hardware can just set them to zero before using the address. The same is true for bits 52–63, because the x86_64 architecture only supports 52-bit physical addresses (similar to how it only supports 48-bit virtual addresses).&lt;/p&gt;
&lt;p&gt;Let's take a closer look at the available flags:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The &lt;code&gt;present&lt;/code&gt; flag differentiates mapped pages from unmapped ones. It can be used to temporary swap out pages to disk when main memory becomes full. When the page is accessed subsequently, a special exception called &lt;em&gt;page fault&lt;/em&gt; occurs, to which the operating system can react by reloading the missing page from disk and then continuing the program.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;writable&lt;/code&gt; and &lt;code&gt;no execute&lt;/code&gt; flags control whether the contents of the page are writable or contain executable instructions respectively.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;accessed&lt;/code&gt; and &lt;code&gt;dirty&lt;/code&gt; flags are automatically set by the CPU when a read or write to the page occurs. This information can be leveraged by the operating system e.g. to decide which pages to swap out or whether the page contents were modified since the last save to disk.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;write through caching&lt;/code&gt; and &lt;code&gt;disable cache&lt;/code&gt; flags allow to control the caches for every page individually.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;user accessible&lt;/code&gt; flag makes a page available to userspace code, otherwise it is only accessible when the CPU is in kernel mode. This feature can be used to make &lt;a href=&quot;https://en.wikipedia.org/wiki/System_call&quot;&gt;system calls&lt;/a&gt; faster by keeping the kernel mapped while an userspace program is running. However, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)&quot;&gt;Spectre&lt;/a&gt; vulnerability can allow userspace programs to read these pages nonetheless.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;global&lt;/code&gt; flag signals to the hardware that a page is available in all address spaces and thus does not need to be removed from the translation cache (see the section about the TLB below) on address space switches. This flag is commonly used together with a cleared &lt;code&gt;user accessible&lt;/code&gt; flag to map the kernel code to all address spaces.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;huge page&lt;/code&gt; flag allows to create pages of larger sizes by letting the entries of the level 2 or level 3 page tables directly point to a mapped frame. With this bit set, the page size increases by factor 512 to either 2MiB = 512 * 4KiB for level 2 entries or even 1GiB = 512 * 2MiB for level 3 entries. The advantage of using larger pages is that fewer lines of the translation cache and fewer page tables are needed.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The &lt;code&gt;x86_64&lt;/code&gt; crate provides types for &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PageTable.html&quot;&gt;page tables&lt;/a&gt; and their &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PageTableEntry.html&quot;&gt;entries&lt;/a&gt;, so we don't need to create these structures ourselves.&lt;/p&gt;
&lt;h3 id=&quot;the-translation-lookaside-buffer&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#the-translation-lookaside-buffer&quot; aria-label=&quot;Anchor link for: the-translation-lookaside-buffer&quot;&gt;🔗&lt;/a&gt; The Translation Lookaside Buffer&lt;/h3&gt;
&lt;p&gt;A 4-level page table makes the translation of virtual addresses expensive, because each translation requires 4 memory accesses. To improve performance, the x86_64 architecture caches the last few translations in the so-called &lt;em&gt;translation lookaside buffer&lt;/em&gt; (TLB). This allows to skip the translation when the translation is still cached.&lt;/p&gt;
&lt;p&gt;Unlike the other CPU caches, the TLB is not fully transparent and does not update or remove translations when the contents of page tables change. This means that the kernel must manually update the TLB whenever it modifies a page table. To do this, there is a special CPU instruction called &lt;a href=&quot;https://www.felixcloutier.com/x86/INVLPG.html&quot;&gt;&lt;code&gt;invlpg&lt;/code&gt;&lt;/a&gt; (“invalidate page”) that removes the translation for the specified page from the TLB, so that it is loaded again from the page table on the next access. The TLB can also be flushed completely by reloading the &lt;code&gt;CR3&lt;/code&gt; register, which simulates an address space switch. The &lt;code&gt;x86_64&lt;/code&gt; crate provides Rust functions for both variants in the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/instructions/tlb/index.html&quot;&gt;&lt;code&gt;tlb&lt;/code&gt; module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is important to remember flushing the TLB on each page table modification because otherwise the CPU might keep using the old translation, which can lead to non-deterministic bugs that are very hard to debug.&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#implementation&quot; aria-label=&quot;Anchor link for: implementation&quot;&gt;🔗&lt;/a&gt; Implementation&lt;/h2&gt;
&lt;p&gt;One thing that we did not mention yet: &lt;strong&gt;Our kernel already runs on paging&lt;/strong&gt;. The bootloader that we added in the &lt;a href=&quot;https://os.phil-opp.com/minimal-rust-kernel/#creating-a-bootimage&quot;&gt;&quot;A minimal Rust Kernel&quot;&lt;/a&gt; post already set up a 4-level paging hierarchy that maps every page of our kernel to a physical frame. The bootloader does this because paging is mandatory in 64-bit mode on x86_64.&lt;/p&gt;
&lt;p&gt;This means that every memory address that we used in our kernel was a virtual address. Accessing the VGA buffer at address &lt;code&gt;0xb8000&lt;/code&gt; only worked because the bootloader &lt;em&gt;identity mapped&lt;/em&gt; that memory page, which means that it mapped the virtual page &lt;code&gt;0xb8000&lt;/code&gt; to the physical frame &lt;code&gt;0xb8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Paging makes our kernel already relatively safe, since every memory access that is out of bounds causes a page fault exception instead of writing to random physical memory. The bootloader even set the correct access permissions for each page, which means that only the pages containing code are executable and only data pages are writable.&lt;/p&gt;
&lt;h3 id=&quot;page-faults&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#page-faults&quot; aria-label=&quot;Anchor link for: page-faults&quot;&gt;🔗&lt;/a&gt; Page Faults&lt;/h3&gt;
&lt;p&gt;Let's try to cause a page fault by accessing some memory outside of our kernel. First, we create a page fault handler and register it in our IDT, so that we see a page fault exception instead of a generic &lt;a href=&quot;https://os.phil-opp.com/double-fault-exceptions/&quot;&gt;double fault&lt;/a&gt; :&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/interrupts.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;lazy_static! {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;static ref &lt;/span&gt;&lt;span&gt;IDT&lt;/span&gt;&lt;span&gt;: InterruptDescriptorTable &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let mut&lt;/span&gt;&lt;span&gt; idt &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;InterruptDescriptorTable::new();
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt.page_fault.set_handler_fn(page_fault_handler); &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;idt
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;};
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::structures::idt::PageFaultErrorCode;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;extern &lt;/span&gt;&lt;span&gt;&quot;x86-interrupt&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;page_fault_handler(
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;stack_frame: &lt;/span&gt;&lt;span&gt;&amp;amp;mut&lt;/span&gt;&lt;span&gt; ExceptionStackFrame,
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;_error_code: PageFaultErrorCode,
&lt;/span&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use crate&lt;/span&gt;&lt;span&gt;::hlt_loop;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::registers::control::Cr2;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;EXCEPTION: PAGE FAULT&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Accessed Address: &lt;/span&gt;&lt;span&gt;{:?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, Cr2::read());
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;{:#?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, stack_frame);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;hlt_loop();
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Control_register#CR2&quot;&gt;&lt;code&gt;CR2&lt;/code&gt;&lt;/a&gt; register is automatically set by the CPU on a page fault and contains the accessed virtual address that caused the page fault. We use the &lt;a href=&quot;https://docs.rs/x86_64/0.3.5/x86_64/registers/control/struct.Cr2.html#method.read&quot;&gt;&lt;code&gt;Cr2::read&lt;/code&gt;&lt;/a&gt; function of the &lt;code&gt;x86_64&lt;/code&gt; crate to read and print it. Normally the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/idt/struct.PageFaultErrorCode.html&quot;&gt;&lt;code&gt;PageFaultErrorCode&lt;/code&gt;&lt;/a&gt; type would provide more information about the type of memory access that caused the page fault, but there is currently an &lt;a href=&quot;https://github.com/rust-lang/rust/issues/57270&quot;&gt;LLVM bug&lt;/a&gt; that passes an invalid error code, so we ignore it for now. We can't continue execution without resolving the page fault, so we enter a &lt;a href=&quot;https://os.phil-opp.com/hardware-interrupts/#the&quot;&gt;&lt;code&gt;hlt_loop&lt;/code&gt;&lt;/a&gt; at the end.&lt;/p&gt;
&lt;p&gt;Now we can try to access some memory outside our kernel:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;blog_os::interrupts::&lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Hello World&lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, &lt;/span&gt;&lt;span&gt;&quot;!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// set up the IDT first, otherwise we would enter a boot loop instead of
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// invoking our page fault handler
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::gdt::init();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::interrupts::init_idt();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;PICS&lt;/span&gt;&lt;span&gt;.lock().initialize() };
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;x86_64::instructions::interrupts::enable();
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;// new
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0xdeadbeaf &lt;/span&gt;&lt;span&gt;as *mut u32&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;It did not crash!&quot;&lt;/span&gt;&lt;span&gt;);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;blog_os::hlt_loop();
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;When we run it, we see that our page fault handler is called:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/qemu-page-fault.png&quot; alt=&quot;EXCEPTION: Page Fault, Accessed Address: VirtAddr(0xdeadbeaf), ExceptionStackFrame: {…}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CR2&lt;/code&gt; register indeed contains &lt;code&gt;0xdeadbeaf&lt;/code&gt;, the address that we tried to access.&lt;/p&gt;
&lt;p&gt;We see that the current instruction pointer is &lt;code&gt;0x20430a&lt;/code&gt;, so we know that this address points to a code page. Code pages are mapped read-only by the bootloader, so reading from this address works but writing causes a page fault. You can try this by changing the &lt;code&gt;0xdeadbeaf&lt;/code&gt; pointer to &lt;code&gt;0x20430a&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// Note: The actual address might be different for you. Use the address that
&lt;/span&gt;&lt;span&gt;// your page fault handler reports.
&lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0x20430a &lt;/span&gt;&lt;span&gt;as *mut u32&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;// read from a code page -&amp;gt; works
&lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; x &lt;/span&gt;&lt;span&gt;= *&lt;/span&gt;&lt;span&gt;ptr; }
&lt;/span&gt;&lt;span&gt;// write to a code page -&amp;gt; page fault
&lt;/span&gt;&lt;span&gt;unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;42&lt;/span&gt;&lt;span&gt;; }
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;By commenting out the last line, we see that the read access works, but the write access causes a page fault.&lt;/p&gt;
&lt;h3 id=&quot;accessing-the-page-tables&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#accessing-the-page-tables&quot; aria-label=&quot;Anchor link for: accessing-the-page-tables&quot;&gt;🔗&lt;/a&gt; Accessing the Page Tables&lt;/h3&gt;
&lt;p&gt;Let's try to take a look at the page tables that our kernel runs on:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::registers::control::Cr3;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let &lt;/span&gt;&lt;span&gt;(level_4_page_table, &lt;/span&gt;&lt;span&gt;_&lt;/span&gt;&lt;span&gt;) &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;Cr3::read();
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Level 4 page table at: &lt;/span&gt;&lt;span&gt;{:?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, level_4_page_table.start_address());
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/registers/control/struct.Cr3.html#method.read&quot;&gt;&lt;code&gt;Cr3::read&lt;/code&gt;&lt;/a&gt; function of the &lt;code&gt;x86_64&lt;/code&gt; returns the currently active level 4 page table from the &lt;code&gt;CR3&lt;/code&gt; register. It returns a tuple of a &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PhysFrame.html&quot;&gt;&lt;code&gt;PhysFrame&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/registers/control/struct.Cr3Flags.html&quot;&gt;&lt;code&gt;Cr3Flags&lt;/code&gt;&lt;/a&gt; type. We are only interested in the frame, so we ignore the second element of the tuple.&lt;/p&gt;
&lt;p&gt;When we run it, we see the following output:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;Level 4 page table at: PhysAddr(0x1000)
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So the currently active level 4 page table is stored at address &lt;code&gt;0x1000&lt;/code&gt; in &lt;em&gt;physical&lt;/em&gt; memory, as indicated by the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/struct.PhysAddr.html&quot;&gt;&lt;code&gt;PhysAddr&lt;/code&gt;&lt;/a&gt; wrapper type. The question now is: how can we access this table from our kernel?&lt;/p&gt;
&lt;p&gt;Accessing physical memory directly is not possible when paging is active, since programs could easily circumvent memory protection and access memory of other programs otherwise. So the only way to access the table is through some virtual page that is mapped to the physical frame at address &lt;code&gt;0x1000&lt;/code&gt;. This problem of creating mappings for page table frames is a general problem, since the kernel needs to access the page tables regularly, for example when allocating a stack for a new thread.&lt;/p&gt;
&lt;p&gt;Solutions to this problem are explained in detail in the next post. For now it suffices to know that the bootloader used a technique called &lt;em&gt;recursive page tables&lt;/em&gt; to map the last page of the virtual address space to the physical frame of the level 4 page table. The last page of the virtual address space is &lt;code&gt;0xffff_ffff_ffff_f000&lt;/code&gt;, so let's use it to read some entries of that table:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; level_4_table_pointer &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0xffff_ffff_ffff_f000 &lt;/span&gt;&lt;span&gt;as *const u64&lt;/span&gt;&lt;span&gt;;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; entry &lt;/span&gt;&lt;span&gt;= unsafe &lt;/span&gt;&lt;span&gt;{ &lt;/span&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;level_4_table_pointer.offset(i) };
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Entry &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;{:#x}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i, entry);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We cast the address of the last virtual page to a pointer to an &lt;code&gt;u64&lt;/code&gt;. As we saw in the &lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot;&gt;previous section&lt;/a&gt;, each page table entry is 8 bytes (64 bits), so an &lt;code&gt;u64&lt;/code&gt; represents exactly one entry. We print the first 10 entries of the table using a &lt;code&gt;for&lt;/code&gt; loop. Inside the loop, we use an unsafe block to read from the raw pointer and the &lt;a href=&quot;https://doc.rust-lang.org/std/primitive.pointer.html#method.offset&quot;&gt;&lt;code&gt;offset&lt;/code&gt; method&lt;/a&gt; to perform pointer arithmetic.&lt;/p&gt;
&lt;p&gt;When we run it, we see the following output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/qemu-print-p4-entries.png&quot; alt=&quot;Entry 0: 0x2023, Entry 1: 0x6e2063, Entry 2-9: 0x0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;When we look at the &lt;a href=&quot;https://os.phil-opp.com/paging-introduction/#page-table-format&quot;&gt;format of page table entries&lt;/a&gt;, we see that the value &lt;code&gt;0x2023&lt;/code&gt; of entry 0 means that the entry is &lt;code&gt;present&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, was &lt;code&gt;accessed&lt;/code&gt; by the CPU, and is mapped to frame &lt;code&gt;0x2000&lt;/code&gt;. Entry 1 is mapped to frame &lt;code&gt;0x6e2000&lt;/code&gt; and has the same flags as entry 0, with the addition of the &lt;code&gt;dirty&lt;/code&gt; flag that indicates that the page was written. Entries 2–9 are not &lt;code&gt;present&lt;/code&gt;, so these virtual address ranges are not mapped to any physical addresses.&lt;/p&gt;
&lt;p&gt;Instead of working with unsafe raw pointers we can use the &lt;a href=&quot;https://docs.rs/x86_64/0.3.4/x86_64/structures/paging/struct.PageTable.html&quot;&gt;&lt;code&gt;PageTable&lt;/code&gt;&lt;/a&gt; type of the &lt;code&gt;x86_64&lt;/code&gt; crate:&lt;/p&gt;
&lt;pre&gt;
&lt;span&gt;// in src/main.rs
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;#[cfg(not(test))]
&lt;/span&gt;&lt;span&gt;#[no_mangle]
&lt;/span&gt;&lt;span&gt;pub extern &lt;/span&gt;&lt;span&gt;&quot;C&quot; &lt;/span&gt;&lt;span&gt;fn &lt;/span&gt;&lt;span&gt;_start() -&amp;gt; &lt;/span&gt;&lt;span&gt;! &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;use &lt;/span&gt;&lt;span&gt;x86_64::structures::paging::PageTable;
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; level_4_table_ptr &lt;/span&gt;&lt;span&gt;= &lt;/span&gt;&lt;span&gt;0xffff_ffff_ffff_f000 &lt;/span&gt;&lt;span&gt;as *const&lt;/span&gt;&lt;span&gt; PageTable;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;let&lt;/span&gt;&lt;span&gt; level_4_table &lt;/span&gt;&lt;span&gt;= unsafe &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;&amp;amp;*&lt;/span&gt;&lt;span&gt;level_4_table_ptr};
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;for&lt;/span&gt;&lt;span&gt; i &lt;/span&gt;&lt;span&gt;in &lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;..&lt;/span&gt;&lt;span&gt;10 &lt;/span&gt;&lt;span&gt;{
&lt;/span&gt;&lt;span&gt;        &lt;/span&gt;&lt;span&gt;println!(&lt;/span&gt;&lt;span&gt;&quot;Entry &lt;/span&gt;&lt;span&gt;{}&lt;/span&gt;&lt;span&gt;: &lt;/span&gt;&lt;span&gt;{:?}&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;, i, level_4_table[i]);
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span&gt;[…]
&lt;/span&gt;&lt;span&gt;}
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Here we cast the &lt;code&gt;0xffff_ffff_ffff_f000&lt;/code&gt; pointer first to a raw pointer and then transform it to a Rust reference. This operation still needs &lt;code&gt;unsafe&lt;/code&gt;, because the compiler can't know that this accessing this address is valid. But after this conversion we have a safe &lt;code&gt;&amp;amp;PageTable&lt;/code&gt; type, which allows us to access the individual entries through safe, bounds checked &lt;a href=&quot;https://doc.rust-lang.org/core/ops/trait.Index.html&quot;&gt;indexing operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The crate also provides some abstractions for the individual entries so that we directly see which flags are set when we print them:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://os.phil-opp.com/paging-introduction/qemu-print-p4-entries-abstraction.png&quot; alt=&quot; Entry 0: PageTableEntry { addr: PhysAddr(0x2000), flags: PRESENT | WRITABLE | ACCCESSED } Entry 1: PageTableEntry { addr: PhysAddr(0x6e5000), flags: PRESENT | WRITABLE | ACCESSED | DIRTY } Entry 2: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 3: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 4: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 5: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 6: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 7: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 8: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)} Entry 9: PageTableEntry { addr: PhysAddr(0x0), flags: (empty)}&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The next step would be to follow the pointers in entry 0 or entry 1 to a level 3 page table. But we now again have the problem that &lt;code&gt;0x2000&lt;/code&gt; and &lt;code&gt;0x6e5000&lt;/code&gt; are physical addresses, so we can't access them directly. This problem will be solved in the next post.&lt;/p&gt;

&lt;p&gt;This post introduced two memory protection techniques: segmentation and paging. While the former uses variable-sized memory regions and suffers from external fragmentation, the latter uses fixed-sized pages and allows much more fine-grained control over access permissions.&lt;/p&gt;
&lt;p&gt;Paging stores the mapping information for pages in page tables with one or more levels. The x86_64 architecture uses 4-level page tables and a page size of 4KiB. The hardware automatically walks the page tables and caches the resulting translations in the translation lookaside buffer (TLB). This buffer is not updated transparently and needs to be flushed manually on page table changes.&lt;/p&gt;
&lt;p&gt;We learned that our kernel already runs on top of paging and that illegal memory accesses cause page fault exceptions. We tried to access the currently active page tables, but we were only able to access the level 4 table, since page tables store physical addresses that we can't access directly from our kernel.&lt;/p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;&lt;a class=&quot;gutenberg-anchor&quot; href=&quot;https://os.phil-opp.com/paging-introduction/#what-s-next&quot; aria-label=&quot;Anchor link for: what-s-next&quot;&gt;🔗&lt;/a&gt; What's next?&lt;/h2&gt;
&lt;p&gt;The next post builds upon the fundamentals we learned in this post. It introduces an advanced technique called &lt;em&gt;recursive page tables&lt;/em&gt; to solve the problem of accessing page tables from our kernel. This allows us to traverse the page table hierarchy and implement a software based translation function. The post also explains how to create a new mapping in the page tables.&lt;/p&gt;


</description>
<pubDate>Mon, 14 Jan 2019 14:38:09 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://os.phil-opp.com/paging-introduction/</dc:identifier>
</item>
<item>
<title>Incident Response Documentation</title>
<link>https://response.pagerduty.com/</link>
<guid isPermaLink="true" >https://response.pagerduty.com/</guid>
<description>

&lt;p&gt;&lt;img alt=&quot;Incident Response at PagerDuty&quot; src=&quot;https://response.pagerduty.com/assets/img/headers/pagerduty_ir.jpg&quot;/&gt;&lt;/p&gt;
&lt;p&gt;This documentation covers parts of the PagerDuty Incident Response process. It is a cut-down version of our internal documentation, used at PagerDuty for any major incidents, and to prepare new employees for on-call responsibilities. It provides information not only on preparing for an incident, but also what to do during and after. It is intended to be used by on-call practitioners and those involved in an operational incident response process (or those wishing to enact a formal incident response process). See the &lt;a href=&quot;https://response.pagerduty.com/about/&quot;&gt;about page&lt;/a&gt; for more information on what this documentation is and why it exists.&lt;/p&gt;
&lt;div class=&quot;admonition tip&quot; readability=&quot;11.655172413793&quot;&gt;
&lt;p class=&quot;admonition-title&quot;&gt;Don't know where to start?&lt;/p&gt;
&lt;p&gt;If you're new to incident response and don't yet have a formal process in your organization, we recommend looking at our &lt;a href=&quot;https://response.pagerduty.com/getting_started/&quot;&gt;Getting Started&lt;/a&gt; page for a quick list of things you can do to begin, and our &lt;a href=&quot;https://response.pagerduty.com/training/courses/incident_response/&quot;&gt;Training Course&lt;/a&gt; page for a more detailed overview of our process.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&quot;being-on-call&quot;&gt;Being On-Call&lt;/h2&gt;
&lt;p&gt;If you've never been on-call before, you might be wondering what it's all about. These pages describe what the expectations of being on-call are, along with some resources to help you.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/oncall/being_oncall/&quot;&gt;Being On-Call&lt;/a&gt; - &lt;em&gt;A guide to being on-call, both what your responsibilities are, and what they are not.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/oncall/alerting_principles/&quot;&gt;Alerting Principles&lt;/a&gt; - &lt;em&gt;The principles we use to determine what things page an engineer, and what time of day they page.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;before-an-incident&quot;&gt;Before an Incident&lt;/h2&gt;
&lt;p&gt;Reading material for things you probably want to know before an incident occurs. You likely don't want to be reading these during an actual incident.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/what_is_an_incident/&quot;&gt;What is an Incident?&lt;/a&gt; - &lt;em&gt;Before we can talk about incident response, we need to define what an incident actually is.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/severity_levels/&quot;&gt;Severity Levels&lt;/a&gt; - &lt;em&gt;Information on our severity level classification. What constitutes a SEV-3 vs SEV-1? What response do they get?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/different_roles/&quot;&gt;Different Roles for Incidents&lt;/a&gt; - &lt;em&gt;Information on the roles during an incident; Incident Commander, Scribe, etc.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/call_etiquette/&quot;&gt;Incident Call Etiquette&lt;/a&gt; - &lt;em&gt;Our etiquette guidelines for incident calls, before you find yourself in one.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/before/complex_incidents/&quot;&gt;Complex Incidents&lt;/a&gt; - &lt;em&gt;Our guide for handling larger, more complex incidents.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;during-an-incident&quot;&gt;During an Incident&lt;/h2&gt;
&lt;p&gt;Information and processes during a major incident.&lt;/p&gt;
&lt;h2 id=&quot;after-an-incident&quot;&gt;After an Incident&lt;/h2&gt;
&lt;p&gt;Our followup processes, how we make sure we don't repeat mistakes and are always improving.&lt;/p&gt;
&lt;h2 id=&quot;training&quot;&gt;Training&lt;/h2&gt;
&lt;p&gt;So, you want to learn about incident response? You've come to the right place.&lt;/p&gt;
&lt;h3 id=&quot;training-guides&quot;&gt;Training Guides&lt;/h3&gt;
&lt;h3 id=&quot;training-courses&quot;&gt;Training Courses&lt;/h3&gt;
&lt;h2 id=&quot;additional-resources&quot;&gt;Additional Resources&lt;/h2&gt;
&lt;p&gt;Useful material and resources from external parties that are relevant to incident response.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/resources/reading/&quot;&gt;Reading&lt;/a&gt; - &lt;em&gt;Recommended reading material relevant to incident response.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/resources/chatops/&quot;&gt;ChatOps&lt;/a&gt; - &lt;em&gt;Description of the chat bot commands we've referenced in this documentation.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://response.pagerduty.com/resources/anti_patterns/&quot;&gt;Anti-Patterns&lt;/a&gt; - &lt;em&gt;List of things we've tried and then rejected, learn from our mistakes.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;aside class=&quot;copyright&quot; role=&quot;note&quot;&gt;Copyright © PagerDuty, Inc. – Documentation built with &lt;a href=&quot;http://www.mkdocs.org&quot; target=&quot;_blank&quot;&gt;MkDocs&lt;/a&gt; using the &lt;a href=&quot;http://squidfunk.github.io/mkdocs-material/&quot; target=&quot;_blank&quot;&gt;Material&lt;/a&gt; theme.&lt;/aside&gt;</description>
<pubDate>Mon, 14 Jan 2019 14:17:41 +0000</pubDate>
<dc:creator>blopeur</dc:creator>
<og:url>https://response.pagerduty.com/</og:url>
<og:title>PagerDuty Incident Response Documentation</og:title>
<og:description>A collection of information about the PagerDuty incident response process. Not only how to prepare new employees for on-call responsibilities, but also how to handle major incidents, both in preparation and after-work.</og:description>
<og:image>https://response.pagerduty.com/assets/img/covers/incident_response_docs.png</og:image>
<og:type>website</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://response.pagerduty.com/</dc:identifier>
</item>
</channel>
</rss>