<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>An Update on MDN Web Docs</title>
<link>https://hacks.mozilla.org/2020/08/an-update-on-mdn-web-docs/</link>
<guid isPermaLink="true" >https://hacks.mozilla.org/2020/08/an-update-on-mdn-web-docs/</guid>
<description>&lt;p&gt;Last week, Mozilla announced some general changes in our investments and we would like to outline how they will impact our MDN platform efforts moving forward. It hurts to make these cuts, and it’s important that we be candid on what’s changing and why.&lt;/p&gt;&lt;p&gt;First we want to be clear, MDN is not going away. The core engineering team will continue to run the MDN site and Mozilla will continue to develop the platform.&lt;/p&gt;
&lt;p&gt;However, because of Mozilla’s restructuring, we have had to scale back our overall investment in developer outreach, including MDN. Our Co-Founder and CEO Mitchell Baker outlines the reasons why &lt;a href=&quot;https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/&quot;&gt;here&lt;/a&gt;. As a result, we will be pausing support for DevRel &lt;a href=&quot;https://airtable.com/shrBgtus5SwYROkyk&quot;&gt;sponsorship&lt;/a&gt;, &lt;a href=&quot;https://hacks.mozilla.org/&quot;&gt;Hacks blog&lt;/a&gt; and &lt;a href=&quot;https://wiki.mozilla.org/TechSpeakers&quot;&gt;Tech Speakers&lt;/a&gt;. The other areas we have had to scale back on staffing and programs include: Mozilla developer programs, developer events and advocacy, and our MDN tech writing.&lt;/p&gt;
&lt;p&gt;We recognize that our tech writing staff drive a great deal of value to MDN users, as do partner contributions to the content. So we are working on a plan to keep the content up to date. We are continuing our planned platform improvements, including a GitHub-based submission system for contributors.&lt;/p&gt;
&lt;p&gt;We believe in the value of MDN Web Docs as a premier web developer resource on the internet. We are currently planning how to move MDN forward long term, and will develop this new plan in close collaboration with our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/MDN/MDN_Product_Advisory_Board&quot;&gt;industry partners&lt;/a&gt; and community members.&lt;/p&gt;
&lt;p&gt;Thank you all for your continued care and support for MDN,&lt;/p&gt;
&lt;p&gt;— Rina Jensen, Director, Contributor Experience&lt;/p&gt;
&lt;section class=&quot;about&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;a class=&quot;url&quot; href=&quot;https://hacks.mozilla.org/author/rjensenmozilla-com/&quot;&gt;More articles by Rina Jensen…&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Fri, 21 Aug 2020 18:26:21 +0000</pubDate>
<dc:creator>weinzierl</dc:creator>
<og:url>https://hacks.mozilla.org/2020/08/an-update-on-mdn-web-docs</og:url>
<og:title>An Update on MDN Web Docs – Mozilla Hacks - the Web developer blog</og:title>
<og:description>Last week, Mozilla announced some general changes in our investments and we would like to outline how they will impact our MDN platform efforts moving forward. It hurts to make ...</og:description>
<og:image>https://hacks.mozilla.org/wp-content/themes/Hax/img/hacks-meta-image.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://hacks.mozilla.org/2020/08/an-update-on-mdn-web-docs/</dc:identifier>
</item>
<item>
<title>Fast.ai releases new deep learning course</title>
<link>https://www.fast.ai/2020/08/21/fastai2-launch/</link>
<guid isPermaLink="true" >https://www.fast.ai/2020/08/21/fastai2-launch/</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;Written: 21 Aug 2020 by &lt;em&gt;Jeremy Howard&lt;/em&gt;&lt;/span&gt;
&lt;p&gt;fast.ai is a self-funded research, software development, and teaching lab, focused on making deep learning more accessible. We make all of our software, research papers, and courses freely available with no ads. We pay all of our costs out of our own pockets, and take no grants or donations, so you can be sure we’re truly independent.&lt;/p&gt;
&lt;p&gt;Today is fast.ai’s biggest day in our four year history. We are releasing:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://docs.fast.ai&quot;&gt;fastai v2&lt;/a&gt;: A complete rewrite of fastai which is faster, easier, and more flexible, implementing new approaches to deep learning framework design, as discussed in the peer reviewed fastai &lt;a href=&quot;https://www.mdpi.com/2078-2489/11/2/108/htm&quot;&gt;academic paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fastcore.fast.ai&quot;&gt;fastcore&lt;/a&gt;, &lt;a href=&quot;https://fastscript.fast.ai&quot;&gt;fastscript&lt;/a&gt;, and &lt;a href=&quot;https://fastgpu.fast.ai&quot;&gt;fastgpu&lt;/a&gt;: Foundational libraries used in fastai v2, and useful for many programmers and data scientists&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://course.fast.ai&quot;&gt;Practical Deep Learning for Coders&lt;/a&gt; (2020 course, part 1): Incorporating both an introduction to machine learning, and deep learning, and production and deployment of data products&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527&quot;&gt;Deep Learning for Coders with fastai and PyTorch: AI Applications Without a PhD&lt;/a&gt;: A book from O’Reilly, which covers the same material as the course (including the content planned for part 2 of the course)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Also, in case you missed it, earlier this week we released the &lt;a href=&quot;https://ethics.fast.ai&quot;&gt;Practical Data Ethics&lt;/a&gt; course, which focuses on topics that are both urgent and practical.&lt;/p&gt;
&lt;h3 class=&quot;no_toc&quot; id=&quot;contents&quot;&gt;Contents&lt;/h3&gt;
&lt;h2 id=&quot;fastai-v2&quot;&gt;fastai v2&lt;/h2&gt;
&lt;p&gt;fastai is a deep learning library which provides practitioners with high-level components that can quickly and easily provide state-of-the-art results in standard deep learning domains, and provides researchers with low-level components that can be mixed and matched to build new approaches. It aims to do both things without substantial compromises in ease of use, flexibility, or performance. This is possible thanks to a carefully layered architecture, which expresses common underlying patterns of many deep learning and data processing techniques in terms of decoupled abstractions. These abstractions can be expressed concisely and clearly by leveraging the dynamism of the underlying Python language and the flexibility of the PyTorch library. fastai includes:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A new type dispatch system for Python along with a semantic type hierarchy for tensors&lt;/li&gt;
&lt;li&gt;A GPU-optimized computer vision library which can be extended in pure Python&lt;/li&gt;
&lt;li&gt;An optimizer which refactors out the common functionality of modern optimizers into two basic pieces, allowing optimization algorithms to be implemented in 45 lines of code&lt;/li&gt;
&lt;li&gt;A novel 2-way callback system that can access any part of the data, model, or optimizer and change it at any point during training&lt;/li&gt;
&lt;li&gt;A new data block API&lt;/li&gt;
&lt;li&gt;And much more…&lt;/li&gt;
&lt;/ul&gt;&lt;img class=&quot;image&quot; srcset=&quot;/images/layered.png 2w&quot; sizes=&quot;1px&quot; src=&quot;https://www.fast.ai/images/layered.png&quot;/&gt; fastai's layered architecture
&lt;p&gt;fastai is organized around two main design goals: to be approachable and rapidly productive, while also being deeply hackable and configurable. It is built on top of a hierarchy of lower-level APIs which provide composable building blocks. This way, a user wanting to rewrite part of the high-level API or add particular behavior to suit their needs does not have to learn how to use the lowest level.&lt;/p&gt;
&lt;p&gt;To see what’s possible with fastai, take a look at the &lt;a href=&quot;https://docs.fast.ai/quick_start.html&quot;&gt;Quick Start&lt;/a&gt;, which shows how to use around 5 lines of code to build an image classifier, an image segmentation model, a text sentiment model, a recommendation system, and a tabular model. For each of the applications, the code is much the same.&lt;/p&gt;
&lt;img class=&quot;image&quot; srcset=&quot;/images/segmentation-fastai.png 2w&quot; sizes=&quot;1px&quot; src=&quot;https://www.fast.ai/images/segmentation-fastai.png&quot;/&gt; Example of using fastai for image segmentation
&lt;p&gt;Read through the &lt;a href=&quot;https://docs.fast.ai/tutorial&quot;&gt;Tutorials&lt;/a&gt; to learn how to train your own models on your own datasets. Use the navigation sidebar to look through the fastai documentation. Every class, function, and method is documented here. To learn about the design and motivation of the library, read the &lt;a href=&quot;https://www.mdpi.com/2078-2489/11/2/108/htm&quot;&gt;peer reviewed paper&lt;/a&gt;, or watch &lt;a href=&quot;https://youtu.be/bHVqO5YyNbU&quot;&gt;this presentation&lt;/a&gt; summarizing some of the key design points.&lt;/p&gt;
&lt;p&gt;All fast.ai projects, including fastai, are built with &lt;a href=&quot;https://nbdev.fast.ai&quot;&gt;nbdev&lt;/a&gt;, which is a full &lt;a href=&quot;https://www.fast.ai/2019/12/02/nbdev/&quot;&gt;literate programming environment&lt;/a&gt; built on Jupyter Notebooks. That means that every piece of documentation can be accessed as interactive Jupyter notebooks, and every documentation page includes a link to open it directly on Google Colab to allow for experimentation and customization.&lt;/p&gt;
&lt;p&gt;It’s very easy to migrate from plain PyTorch, Ignite, or any other PyTorch-based library, or even to use fastai in conjunction with other libraries. Generally, you’ll be able to use all your existing data processing code, but will be able to reduce the amount of code you require for training, and more easily take advantage of modern best practices. Here are migration guides from some popular libraries to help you on your way: &lt;a href=&quot;https://docs.fast.ai/migrating_pytorch&quot;&gt;Plain PyTorch&lt;/a&gt;; &lt;a href=&quot;https://docs.fast.ai/migrating_ignite&quot;&gt;Ignite&lt;/a&gt;; &lt;a href=&quot;https://docs.fast.ai/migrating_lightning&quot;&gt;Lightning&lt;/a&gt;; &lt;a href=&quot;https://docs.fast.ai/migrating_catalyst&quot;&gt;Catalyst&lt;/a&gt;. And because it’s easy to combine and part of the fastai framework with your existing code and libraries, you can just pick the bits you want. For instance, you could use fastai’s GPU-accelerated computer vision library, along with your own training loop.&lt;/p&gt;
&lt;p&gt;fastai includes many modules that add functionality, generally through callbacks. Thanks to the flexible infrastructure, these all work together, so you can pick and choose what you need (and add your own), including: &lt;a href=&quot;https://arxiv.org/abs/1710.09412&quot;&gt;mixup&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1708.04552&quot;&gt;cutout&lt;/a&gt; augmentation, a uniquely flexible &lt;a href=&quot;https://docs.fast.ai/vision.gan.html&quot;&gt;GAN training&lt;/a&gt; framework, a range of schedulers (many of which aren’t available in any other framework) including support for fine tuning following the approach described in &lt;a href=&quot;https://arxiv.org/abs/1801.06146&quot;&gt;ULMFiT&lt;/a&gt;, mixed precision, gradient accumulation, support for a range of logging frameworks like Tensorboard (with particularly strong support for Weights and Biases, as &lt;a href=&quot;https://app.wandb.ai/borisd13/demo_config/reports/Visualize-track-compare-Fastai-models--Vmlldzo4MzAyNA&quot;&gt;demonstrated here&lt;/a&gt;), &lt;a href=&quot;http://docs.fast.ai/medical.imaging&quot;&gt;medical imaging&lt;/a&gt;, and much more. Other functionality is added through the &lt;a href=&quot;https://github.com/nestordemeure/fastai-extensions-repository&quot;&gt;fastai ecosystem&lt;/a&gt;, such as support for &lt;a href=&quot;https://ohmeow.github.io/blurr/&quot;&gt;HuggingFace Transformers&lt;/a&gt; (which can also be done manually, as shown in &lt;a href=&quot;http://docs.fast.ai/tutorial.transformers&quot;&gt;this tutorial&lt;/a&gt;), &lt;a href=&quot;https://github.com/rbracco/fastai2_audio&quot;&gt;audio&lt;/a&gt;, &lt;a href=&quot;https://muellerzr.github.io/fastinference/inference/&quot;&gt;accelerated inference&lt;/a&gt;, and so forth.&lt;/p&gt;
&lt;img class=&quot;image&quot; srcset=&quot;/images/medical-fastai.png 2w&quot; sizes=&quot;1px&quot; src=&quot;https://www.fast.ai/images/medical-fastai.png&quot;/&gt; Medical imaging in fastai
&lt;p&gt;There’s already some great learning material made available for fastai v2 by the community, such as the “Zero to Hero” series by Zach Mueller: &lt;a href=&quot;https://muellerzr.github.io/fastblog/2020/08/20/_08_21-beginner.html&quot;&gt;part 1&lt;/a&gt;; &lt;a href=&quot;https://muellerzr.github.io/fastblog/2020/08/20/_08_21-intermediate.html&quot;&gt;part 2&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;practical-deep-learning-for-coders-the-course&quot;&gt;Practical Deep Learning for Coders, the course&lt;/h2&gt;
&lt;p&gt;Previous fast.ai courses have been studied by hundreds of thousands of students, from all walks of life, from all parts of the world. Many students have told us about how they’ve become &lt;a href=&quot;https://forums.fast.ai/t/my-first-gold-medal/54237&quot;&gt;multiple gold medal winners&lt;/a&gt; of &lt;a href=&quot;https://towardsdatascience.com/my-3-year-journey-from-zero-python-to-deep-learning-competition-master-6605c188eec7&quot;&gt;international machine learning competitions&lt;/a&gt;, &lt;a href=&quot;https://forums.fast.ai/t/how-has-your-journey-been-so-far-learners/6480/2&quot;&gt;received offers&lt;/a&gt; from top companies, and &lt;a href=&quot;https://icml-compbio.github.io/2020/papers/WCBICML2020_paper_67.pdf&quot;&gt;having&lt;/a&gt; &lt;a href=&quot;https://ui.adsabs.harvard.edu/abs/2020EGUGA..2221465A/abstract&quot;&gt;research&lt;/a&gt; &lt;a href=&quot;https://arxiv.org/pdf/2004.14356.pdf&quot;&gt;papers&lt;/a&gt; &lt;a href=&quot;https://pubs.rsna.org/doi/abs/10.1148/ryai.2019190113?journalCode=ai&quot;&gt;published&lt;/a&gt;. For instance, Isaac Dimitrovsky &lt;a href=&quot;https://forums.fast.ai/t/thanks-ra2-dream-challenge-win/76875&quot;&gt;told us&lt;/a&gt; that he had “&lt;em&gt;been playing around with ML for a couple of years without really grokking it… [then] went through the fast.ai part 1 course late last year, and it clicked for me&lt;/em&gt;”. He went on to achieve first place in the prestigious international &lt;a href=&quot;https://www.synapse.org/#!Synapse:syn20545111/wiki/594083&quot;&gt;RA2-DREAM Challenge&lt;/a&gt; competition! He developed a &lt;a href=&quot;https://www.synapse.org/#!Synapse:syn21478998/wiki/604432&quot;&gt;multistage deep learning method&lt;/a&gt; for scoring radiographic hand and foot joint damage in rheumatoid arthritis, taking advantage of the fastai library.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://course.fast.ai&quot;&gt;This year’s course&lt;/a&gt; takes things even further. It incorporates both machine learning and deep learning in a single course, covering topics like random forests, gradient boosting, test and validation sets, and p values, which previously were in a separate machine learning course. In addition, production and deployment are also covered, including material on developing a web-based GUI for our own deep learning powered apps. The only prerequisite is high-school math, and a year of coding experience (preferably in Python). The course was recorded live, in conjunction with the &lt;a href=&quot;https://www.usfca.edu/data-institute&quot;&gt;Data Institute&lt;/a&gt; at the University of San Francisco.&lt;/p&gt;
&lt;p&gt;After finishing this course you will know:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;How to train models that achieve state-of-the-art results in:
&lt;ul&gt;&lt;li&gt;Computer vision, indlucing image classification (e.g.,classifying pet photos by breed), and image localization and detection (e.g.,finding where the animals in an image are)&lt;/li&gt;
&lt;li&gt;Natural language processing (NLP), including document classification (e.g.,movie review sentiment analysis) and language modeling&lt;/li&gt;
&lt;li&gt;Tabular data (e.g.,sales prediction) with categorical data, continuous data, and mixed data, including time series&lt;/li&gt;
&lt;li&gt;Collaborative filtering (e.g.,movie recommendation)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How to turn your models into web applications, and deploy them&lt;/li&gt;
&lt;li&gt;Why and how deep learning models work, and how to use that knowledge to improve the accuracy, speed, and reliability of your models&lt;/li&gt;
&lt;li&gt;The latest deep learning techniques that really matter in practice&lt;/li&gt;
&lt;li&gt;How to implement stochastic gradient descent and a complete training loop from scratch&lt;/li&gt;
&lt;li&gt;How to think about the ethical implications of your work, to help ensure that you’re making the world a better place and that your work isn’t misused for harm&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We care a lot about teaching, using a &lt;a href=&quot;https://www.fast.ai/2016/10/08/teaching-philosophy/&quot;&gt;whole game&lt;/a&gt; approach. In this course, we start by showing how to use a complete, working, very usable, state-of-the-art deep learning network to solve real-world problems, using simple, expressive tools. And then we gradually dig deeper and deeper into understanding how those tools are made, and how the tools that make those tools are made, and so on. We always teach through examples. We ensure that there is a context and a purpose that you can understand intuitively, rather than starting with algebraic symbol manipulation. We also dive right into the details, showing you how to build all the components of a deep learning model from scratch, including discussing performance and optimization details.&lt;/p&gt;
&lt;p&gt;The whole course can be completed for free without any installation, by taking advantage of the guides for the Colab and Gradient platforms, which provide free, GPU-powered Notebooks.&lt;/p&gt;
&lt;h2 id=&quot;deep-learning-for-coders-with-fastai-and-pytorch-the-book&quot;&gt;Deep Learning for Coders with fastai and PyTorch, the book&lt;/h2&gt;
&lt;p&gt;To understand what the new book is about, and who it’s for, let’s see what others have said about it… Soumith Chintala, the co-creator of PyTorch, said in &lt;a href=&quot;https://www.fast.ai/2020/08/20/soumith-forward/&quot;&gt;the foreword&lt;/a&gt; to &lt;a href=&quot;https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527&quot;&gt;Deep Learning for Coders with fastai and PyTorch&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;28&quot;&gt;
&lt;p&gt;But unlike me, Jeremy and Sylvain selflessly put a huge amount of energy into making sure others don’t have to take the painful path that they took. They built a great course called fast.ai that makes cutting-edge deep learning techniques accessible to people who know basic programming. It has graduated hundreds of thousands of eager learners who have become great practitioners.&lt;/p&gt;
&lt;p&gt;In this book, which is another tireless product, Jeremy and Sylvain have constructed a magical journey through deep learning. They use simple words and introduce every concept. They bring cutting-edge deep learning and state-of-the-art research to you, yet make it very accessible.&lt;/p&gt;
&lt;p&gt;You are taken through the latest advances in computer vision, dive into natural language processing, and learn some foundational math in a 500-page delightful ride. And the ride doesn’t stop at fun, as they take you through shipping your ideas to production. You can treat the fast.ai community, thousands of practitioners online, as your extended family, where individuals like you are available to talk and ideate small and big solutions, whatever the problem may be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Peter Norvig, Director of Research at Google (and author of the &lt;a href=&quot;https://www.amazon.com/Artificial-Intelligence-Modern-Approach-3rd/dp/0136042597&quot;&gt;definitive text&lt;/a&gt; on AI) said:&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;“Deep Learning is for everyone” we see in Chapter 1, Section 1 of this book, and while other books may make similar claims, this book delivers on the claim. The authors have extensive knowledge of the field but are able to describe it in a way that is perfectly suited for a reader with experience in programming but not in machine learning. The book shows examples first, and only covers theory in the context of concrete examples. For most people, this is the best way to learn.The book does an impressive job of covering the key applications of deep learning in computer vision, natural language processing, and tabular data processing, but also covers key topics like data ethics that some other books miss. Altogether, this is one of the best sources for a programmer to become proficient in deep learning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Curtis Langlotz, Director, Center for Artificial Intelligence in Medicine and Imaging at Stanford University said:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Gugger and Howard have created an ideal resource for anyone who has ever done even a little bit of coding. This book, and the fast.ai courses that go with it, simply and practically demystify deep learning using a hands on approach, with pre-written code that you can explore and re-use. No more slogging through theorems and proofs about abstract concepts. In Chapter 1 you will build your first deep learning model, and by the end of the book you will know how to read and understand the Methods section of any deep learning paper.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;fastcore-fastscript-and-fastgpu&quot;&gt;fastcore, fastscript, and fastgpu&lt;/h2&gt;
&lt;h3 id=&quot;fastcore&quot;&gt;fastcore&lt;/h3&gt;
&lt;p&gt;Python is a powerful, dynamic language. Rather than bake everything into the language, it lets the programmer customize it to make it work for them. &lt;a href=&quot;https://fastcore.fast.ai&quot;&gt;fastcore&lt;/a&gt; uses this flexibility to add to Python features inspired by other languages we’ve loved, like multiple dispatch from Julia, mixins from Ruby, and currying, binding, and more from Haskell. It also adds some “missing features” and cleans up some rough edges in the Python standard library, such as simplifying parallel processing, and bringing ideas from NumPy over to Python’s list type.&lt;/p&gt;
&lt;p&gt;fastcore contains many features. See the &lt;a href=&quot;https://fastcore.fast.ai&quot;&gt;docs&lt;/a&gt; for all the details, which cover the modules provided:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;: Simple testing functions&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foundation&lt;/code&gt;: Mixins, delegation, composition, and more&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utils&lt;/code&gt;: Utility functions to help with functional-style programming, parallel processing, and more&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;: Multiple dispatch methods&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform&lt;/code&gt;: Pipelines of composed partially reversible transformations&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;fastscript&quot;&gt;fastscript&lt;/h3&gt;
&lt;p&gt;Sometimes, you want to create a quick script, either for yourself, or for others. But in Python, that involves a whole lot of boilerplate and ceremony, especially if you want to support command line arguments, provide help, and other niceties. You can use argparse for this purpose, which comes with Python, but it’s complex and verbose. &lt;a href=&quot;http://fastscript.fast.ai/&quot;&gt;fastscript&lt;/a&gt; makes life easier. In fact, this is a complete, working command-line application (no need for any of the usual boilerplate Python requires such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if __name__=='main'&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fastscript&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call_parse&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Convert to uppercase?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool_arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When you run this script, you’ll see:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot; readability=&quot;6.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python examples/test_fastscript.py
usage: test_fastscript.py &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--upper&lt;/span&gt; UPPER] msg
test_fastscript.py: error: the following arguments are required: msg
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&quot;fastgpu&quot;&gt;fastgpu&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://fastgpu.fast.ai&quot;&gt;fastgpu&lt;/a&gt; provides a single command, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastgpu_poll&lt;/code&gt;, which polls a directory to check for scripts to run, and then runs them on the first available GPU. If no GPUs are available, it waits until one is. If more than one GPU is available, multiple scripts are run in parallel, one per GPU. It is the easiest way we’ve found to run ablation studies that take advantage of all of your GPUs, result in no parallel processing overhead, and require no manual intervention.&lt;/p&gt;
&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;Many thanks to everyone who helped bring these projects to fruition, most especially to Sylvain Gugger, who worked closely with me over the last two years at fast.ai. Thanks also to all the support from the &lt;a href=&quot;https://www.usfca.edu/data-institute&quot;&gt;Data Institute&lt;/a&gt; at the University of San Francisco, and to Rachel Thomas, co-founder of fast.ai, who (amongst other things) taught the data ethics lesson and developed much of the data ethics material in the book. Thank you to everyone from the &lt;a href=&quot;https://forums.fast.ai/&quot;&gt;fast.ai community&lt;/a&gt; for all your wonderful contributions.&lt;/p&gt;
</description>
<pubDate>Fri, 21 Aug 2020 17:51:36 +0000</pubDate>
<dc:creator>amardeep</dc:creator>
<dc:language>en-us</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.fast.ai/2020/08/21/fastai2-launch/</dc:identifier>
</item>
<item>
<title>Efficiency is dangerous and slowing down makes life better</title>
<link>https://psyche.co/ideas/why-efficiency-is-dangerous-and-slowing-down-makes-life-better</link>
<guid isPermaLink="true" >https://psyche.co/ideas/why-efficiency-is-dangerous-and-slowing-down-makes-life-better</guid>
<description>&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;‘Slow down, you move too fast &lt;em&gt;…&lt;/em&gt;’&lt;br/&gt;– ‘The 59th Street Bridge Song (Feelin’ Groovy)’ (1966) by Paul Simon&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;We worship efficiency&lt;/strong&gt;. Use less to get more. Same-day delivery. Multitask; text on one device while emailing on a second, and perhaps conversing on a third. Efficiency is seen as good. Inefficiency as wasteful.&lt;/p&gt;
&lt;p&gt;There’s a sound rationale for thinking this way. Economists teach us that increased efficiency is the major way to improve our standard of living. If your company gives you a pay rise without becoming more efficient, it will also have to raise its prices to make up the shortfall. If all companies do the same, everyone ends up running in place – you’ll need your higher wages to match the higher prices of the things you buy. So, if we want to make material progress, we must become more efficient. Streamlined supply chains, just-in-time deliveries and no slack in the workforce all serve to raise efficiency. Achieve this, and all our lives will get better and better, or so we’re promised.&lt;/p&gt;
&lt;p&gt;For automobile manufacturers, who wish to squeeze as many miles per gallon as possible out of their car designs, air resistance and the grab of the road are the enemies of efficiency. In the world of finance, it is at the point of exchange that most friction arises. Before money, the potato farmer had to use sacks of potatoes to trade for eggs and milk. As the British historian Niall Ferguson reminds us in his &lt;a href=&quot;https://www.penguin.co.uk/books/178/178638/the-ascent-of-money/9780141990262.html&quot;&gt;book&lt;/a&gt; &lt;em&gt;The Ascent of Money&lt;/em&gt; (2008), the invention of money went a long way toward reducing this inefficiency, and much that has happened in the financial world over the past 200 years can be seen as a continuation of that revolution.&lt;/p&gt;
&lt;p&gt;Credit, for example, meant that you could go shopping for eggs and milk even without having the money right now. Financial markets have since taken this efficiency to another level. The creation of ‘option markets’ means that you don’t have to go to the trouble of buying a stock that you’re going to be selling soon anyway. You can just promise to buy it, and then sell it at a price and date specified by the option contract. And then you can trade the option rather than the underlying stock.&lt;/p&gt;
&lt;p&gt;Each of these developments and many others have made it easier to do one’s business without wasted time and energy – without friction. Each has made economic transactions quicker and more efficient. That’s obviously good in some ways. But the financial crisis of 2008 suggested that maybe there could be too much of a good thing. If mortgages and other loans hadn’t been transformed into tradable assets (‘securities’), then bankers might have taken the time to assess the credit-worthiness of each applicant. If people had to visit a bank to withdraw cash, they might spend less and save more. This is not mere speculation – for instance, &lt;a href=&quot;https://doi.org/10.1002/(SICI)1099-0771(199909)12:3%3c183::AID-BDM318%3e3.0.CO;2-F&quot;&gt;research&lt;/a&gt; &lt;a href=&quot;https://doi.org/10.1016/0167-2681(80)90051-7&quot;&gt;reviewed&lt;/a&gt; by the Nobel Prize-winning economist Richard Thaler shows that people will pay more for an item with a credit card than with cash. Arguably, a little friction to slow us down would have enabled both institutions and individuals to make better financial decisions.&lt;/p&gt;
&lt;p&gt;A decade ago, the American psychologist Adam Grant and I argued in a journal &lt;a href=&quot;https://journals.sagepub.com/doi/full/10.1177/1745691610393523?url_ver=Z39.88-2003&amp;amp;rfr_id=ori:rid:crossref.org&amp;amp;rfr_dat=cr_pub%20%200pubmed&quot;&gt;paper&lt;/a&gt; that this ‘too much of a good thing’ phenomenon might be a general rule. Some motivation produces excellent performance; too much motivation produces choking. Some group collaboration produces cohesion and enhances productivity; too much of it leads to staleness. Some empathy enables you to understand what another person is going through; too much could prevent you from saying and doing hard things. Similarly, in my &lt;a href=&quot;https://www.harpercollins.com/products/the-paradox-of-choice-barry-schwartz?variant=32207920234530&quot;&gt;book&lt;/a&gt; &lt;em&gt;The Paradox of Choice&lt;/em&gt; (2004), I argued that, whereas a life with no freedom to choose is not worth living, a life with too much choice leads to paralysis, bad decisions and dissatisfaction. Finding the right amount – what Aristotle called the ‘mean’ – of motivation, collaboration, empathy, choice and many other aspects of life, including efficiency, is a key challenge we face, both as individuals and as a society.&lt;/p&gt;
&lt;p class=&quot;pullquote&quot;&gt;To be better prepared next time, we need to learn to live less efficiently in the here and now&lt;/p&gt;
&lt;p&gt;But finding the mean isn’t easy. As the English poet William Blake observed in &lt;em&gt;The Marriage of Heaven and Hell&lt;/em&gt; (1790-93): ‘You never know what is enough unless you know what is more than enough.’&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If the financial crisis&lt;/strong&gt; taught us that we had become too efficient with our transactions, what of the COVID-19 pandemic? Why hadn’t we stockpiled key supplies and machines, built up hospital capacity, or ensured the robustness of our supply chains? The reason, of course, is that it would have been seen as inefficient and profit-robbing. Money spent on masks and gowns gathering dust in a warehouse could always be put to more ‘productive’ use in the marketplace. Likewise, employing more people than needed under ‘ordinary’ circumstances, or making products yourself rather than relying on international supply chains, would have been seen as inefficient. One lesson, then, is that to be better prepared next time, we need to learn to live less ‘efficiently’ in the here and now.&lt;/p&gt;
&lt;p&gt;Seen in this light, at least some inefficiency is like an insurance policy. Think about your own situation. Every year that you don’t get into a car accident and your house doesn’t burn down and you stay healthy, you could think to yourself that you have ‘wasted’ your money on various pointless insurance products, and that you’d be financially better off without all those insurance premiums to pay.&lt;/p&gt;
&lt;p&gt;Most of us don’t like the sense that we’re wasting money on insurance. We would rather be wearing that money, or eating it, or driving it. Some years ago, with a struggle, I convinced my ageing mother to supplement her basic health insurance policy with a more comprehensive insurance product. Her resources were modest and the policy wasn’t cheap. The year went by and, happily, she had no serious medical conditions that required the use of the extra cover. When the time came to renew, my mother resisted, because, indeed, the money she spent the year before had been ‘wasted’. My reply, perhaps unduly snarky, was to suggest to her that maybe the next year she would get lucky, have a really serious illness, and get her money’s worth out of her insurance.&lt;/p&gt;
&lt;p&gt;Thankfully, in many domains, government regulations protect us from our desire for ever-greater personal financial efficiency by forcing us to have insurance. Laws require that our cars be insured, and mortgagers require the same for our homes. In the United States, ‘Obamacare’ (the Affordable Care Act enacted in 2010, designed to increase the number of US citizens covered by health insurance) essentially compelled people to have health insurance, until the Supreme Court challenged this aspect of the Act as unconstitutional. I suspect that many of us are underinsured in general, but the problem would be much worse without these various, state-imposed insurance requirements.&lt;/p&gt;
&lt;p&gt;One way to think about insurance, however inefficient it might feel, is that it enables us to be resilient against shocks that could befall us from a world that is radically uncertain. And the world &lt;em&gt;is&lt;/em&gt; radically uncertain. As the British economists John Kay and Mervyn King point out in their &lt;a href=&quot;https://wwnorton.com/books/9781324004776&quot;&gt;book&lt;/a&gt; &lt;em&gt;Radical Uncertainty&lt;/em&gt; (2020), efforts to quantify risk by attaching probabilities to various unlikely future states of the world are mostly science fiction. The world is much messier than a roulette wheel or a pair of dice.&lt;/p&gt;
&lt;p class=&quot;pullquote&quot;&gt;A little bit of friction can forestall disaster when you encounter an icy road&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What should we do&lt;/strong&gt; in the face of this radical uncertainty? When making decisions, instead of asking ourselves which option will give us the best results, we should be asking which option will give us good-enough results under the widest range of future states of the world. Instead of trying to maximise return on investment in our retirement account, we should be setting a financial goal and then choosing investments that will allow us to achieve that goal under the widest set of future financial circumstances. Instead of looking for the ‘best’ job, we should be looking for a job that will be good enough – satisfying enough – as co-workers and managers come and go, and the future economy gyrates. Instead of choosing the best college to go to, we should be choosing a college that will be good enough, even with an obnoxious roommate and a boring Bio 1 teacher.&lt;/p&gt;
&lt;p&gt;The term used to describe this approach to decision-making is &lt;em&gt;satisficing&lt;/em&gt;. And satisficing with an eye toward a radically uncertain future might be called &lt;em&gt;robust satisficing&lt;/em&gt;. Satisficing is a form of insurance – insurance against financial meltdowns, global pandemics, nasty bosses, boring teachers and crappy roommates. Insurance can seem stodgy – like the guy who wears a belt &lt;em&gt;and&lt;/em&gt; suspenders. Perhaps we don’t need both, but what happens if we have neither?&lt;/p&gt;
&lt;p&gt;I think the real flaw in capitalism revealed by the 2008 financial crisis was its unbridled, single-minded pursuit of profit and efficiency. And perhaps the real flaw revealed in our lack of readiness for the 2019-20 pandemic was a manifestation of the same thing. Capitalism needn’t be either unbridled or single-minded. It isn’t in other societies with high standards of living, and it hasn’t been at all points in history in the US. So perhaps it’s time to rekindle certain social norms that serve to slow us down. For example, if people thought about their homes less as financial investments and more as places to live, full of the friction of kids, dogs, friends, neighbours and community, there might be less property speculation with an eye toward buying and selling houses merely for profit. If companies felt the friction of being caretakers of their communities, they might look differently at streamlining their operations by eliminating jobs.&lt;/p&gt;
&lt;p&gt;We’d all like a car that gets 100 miles to a gallon. The forces of friction that slow us down are an expensive annoyance. When we’re driving, we know where we’re going and we’re in control, so fast feels good, though even here, a little bit of friction can forestall disaster when you encounter an icy road.&lt;/p&gt;
&lt;p&gt;Driving is perilous enough, and life is not as predictable as driving. We don’t always know where we’re going. We’re not always in control. Black ice is everywhere. A little something to slow us down in the uncertain world we inhabit could be a life-saver. Building friction into our lives, as individuals and as a society, is building resilience into the system. It could be our insurance policy against catastrophe.&lt;/p&gt;
</description>
<pubDate>Fri, 21 Aug 2020 16:43:29 +0000</pubDate>
<dc:creator>joubert</dc:creator>
<og:type>article</og:type>
<og:title>Why efficiency is dangerous and slowing down makes life better | Psyche Ideas</og:title>
<og:description>The urge to do everything faster and better is risky. Far wiser to do what’s good enough for the range of possible futures</og:description>
<og:url>https://psyche.co/ideas/why-efficiency-is-dangerous-and-slowing-down-makes-life-better</og:url>
<og:image>https://epsilon.psyche.co/images/86c30f89-b3ee-493b-9814-257ee370e6ae/2700x1530.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://psyche.co/ideas/why-efficiency-is-dangerous-and-slowing-down-makes-life-better</dc:identifier>
</item>
<item>
<title>Telegram messaging app proves crucial to Belarus protests</title>
<link>https://www.latimes.com/world-nation/story/2020-08-21/telegram-messaging-app-crucial-belarus-protests</link>
<guid isPermaLink="true" >https://www.latimes.com/world-nation/story/2020-08-21/telegram-messaging-app-crucial-belarus-protests</guid>
<description>&lt;p&gt;Every day, like clockwork, to-do lists for those protesting against Belarus’ authoritarian leader appear in the popular Telegram messaging app. They lay out goals, give times and locations of rallies with business-like precision, and offer spirited encouragement.&lt;/p&gt;
&lt;p&gt;“Today will be one more important day in the fight for our freedom. Tectonic shifts are happening on all fronts, so it’s important not to slow down,” a message in one of Telegram’s so-called channels read Tuesday. “Morning. Expanding the strike … 11:00. Supporting the Kupala [theater] ... 19:00. Gathering at the Independence Square.”&lt;/p&gt;
&lt;p&gt;The app has become an indispensable tool in coordinating the unprecedented mass protests that have rocked Belarus since Aug. 9, when election officials announced that President Alexander Lukashenko — whom some call “Europe’s last dictator” — &lt;a class=&quot;link&quot; href=&quot;https://www.latimes.com/world-nation/story/2020-08-10/belarus-leader-alexander-lukashenko-wins-sixth-term&quot;&gt;had won a landslide victory&lt;/a&gt; to extend his 26-year rule in a vote widely seen as rigged.&lt;/p&gt;
&lt;p&gt;Peaceful protesters who poured onto the streets of the capital, Minsk, and other cities were met with stun grenades, rubber bullets and beatings from police. The opposition candidate, schoolteacher Sviatlana Tsikhanouskaya, &lt;a class=&quot;link&quot; href=&quot;https://www.latimes.com/world-nation/story/2020-08-11/belarusian-challenger-flees-to-lithuania-amid-protests&quot;&gt;left for Lithuania — under duress&lt;/a&gt;, her campaign said — and authorities shut off the internet, leaving Belarusians with almost no access to independent online news outlets or social media and protesters seemingly without a leader.&lt;/p&gt;
&lt;div class=&quot;enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;google-dfp-ad-wrapper&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s where Telegram — which often remains available despite internet outages, touts the security of messages shared in the app and has been used in other protest movements — came in. Some of its channels helped unconnected, scattered rallies mature into well-coordinated action.&lt;/p&gt;
&lt;p&gt;The people who run the channels, which used to offer political news, now post updates, videos and photos of the turmoil sent in from users, locations of heavy police presence, contacts of human rights activists and calls for new demonstrations — something Belarusian opposition leaders have refrained from doing publicly themselves. &lt;a class=&quot;link&quot; href=&quot;https://www.latimes.com/world-nation/story/2020-08-19/belarus-opposition-leader-appeals-eu-support&quot;&gt;Tens of thousands of people all across the country&lt;/a&gt; have responded to those calls.&lt;/p&gt;

&lt;p&gt;In a matter of days, the channels — NEXTA, NEXTA Live and Belarus of the Brain are the most popular — have become the main method for facilitating the protests, said Franak Viacorka, a Belarusian analyst and nonresident fellow at the Atlantic Council.&lt;/p&gt;
&lt;div class=&quot;enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;google-dfp-ad-wrapper&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;“The fate of the country has never depended so much on one [piece] of technology,” Viacorka said.&lt;/p&gt;
&lt;p&gt;In the days following the vote and the subsequent internet outage, NEXTA Live’s audience shot from several hundred thousand followers to over 2 million. Its sister channel NEXTA has more than 700,000 followers. Belarus of the Brain’s following grew from almost 170,000 users in late June to over 470,000 this week.&lt;/p&gt;
&lt;p&gt;Their influence in a nation of 9.5 million is hard to overestimate, including by the authorities who have taken notice and are &lt;a class=&quot;link&quot; href=&quot;https://www.latimes.com/world-nation/story/2020-08-14/belarus-authorities-free-hundreds-detainees-protesters&quot;&gt;pursuing those behind the channels&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;google-dfp-ad-wrapper&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Last week, officials opened a criminal probe into NEXTA and its founder, 22-year-old blogger Stepan Putilo, on charges of fomenting mass riots — an offense punishable by up to 15 years in prison. Blogger Igor Losik, who founded Belarus of the Brain, was arrested before the election, but the channel continues to operate.&lt;/p&gt;
&lt;p&gt;“We have indeed become the bullhorn of the situation that is unfolding in Belarus right now,” Putilo, who is Belarusian but lives in Warsaw, said in a recent interview with Lithuanian news outlet Delfi. “We have become the voice of this revolution, but by no will of our own. It just happened.”&lt;/p&gt;
&lt;p&gt;Putilo first created NEXTA — which is pronounced &lt;em&gt;NEKH-ta&lt;/em&gt; and means “somebody” in Belarusian — as a YouTube channel in 2015, when he was just 17. His profile rose last year when his 30-minute video about the country’s iron-fisted leader, “Lukashenko. Criminal Records,” was viewed almost 3 million times. A court in Belarus declared the film extremist, but it is still available on YouTube.&lt;/p&gt;
&lt;p&gt;Putilo turned to Telegram in 2018. His two channels focused mostly on Belarusian politics. His team received thousands of messages from users sending in photos, videos and news items each day and posted the most newsworthy, taking pride in often sharing information from sources inside the government or law enforcement.&lt;/p&gt;
&lt;div class=&quot;enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;google-dfp-ad-wrapper&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enhancement&quot; data-align-right=&quot;&quot; readability=&quot;12&quot;&gt;
&lt;div class=&quot;module-container&quot;&gt;
&lt;p&gt;&lt;span class=&quot;visually-hidden&quot;&gt;Newsletter&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;module-title&quot;&gt;News Alerts&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;module-description&quot;&gt;Get breaking news, investigations, analysis and more signature journalism from the Los Angeles Times in your inbox.&lt;/p&gt;

&lt;p class=&quot;module-disclaimer&quot;&gt;You may occasionally receive promotional content from the Los Angeles Times.&lt;/p&gt;

&lt;/div&gt;
&lt;p&gt;After the demonstrations began, thousands of messages turned into hundreds of thousands, and the underground operation now appears inundated. In response to a request from the Associated Press for an interview, NEXTA editor in chief Roman Protsevich wrote: “Sure, it’s possible, but the question is when. …” He then stopped responding.&lt;/p&gt;
&lt;p&gt;Putilo hasn’t responded to requests for comment.&lt;/p&gt;
&lt;p&gt;When the protests began, the NEXTA channels were often the first places anywhere on the internet to carry grisly pictures of police violently clashing with demonstrators. This week, they were filled with videos of &lt;a class=&quot;link&quot; href=&quot;https://www.latimes.com/world-nation/story/2020-08-17/protests-strikes-urge-belarus-president-alexander-lukashenko-resign&quot;&gt;workers protesting at industrial plants&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;google-dfp-ad-wrapper&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Journalists in Belarus have praised the channels for breaking news — but note that traditional media also played an important role.&lt;/p&gt;

&lt;p&gt;“Telegram channels did help to pierce the information blackout, but I have to say that it wasn’t just them,” said Andrei Bastunets, head of the Belarusian Assn. of Journalists. “Telegram channels [run by bloggers] played a mobilizing, an organizing role, while more balanced information could be found on Telegram channels of media outlets.”&lt;/p&gt;
&lt;p&gt;Social media platforms have played major roles in previous uprisings, including in the Arab Spring, anti-government protests in Hong Kong and demonstrations against racial injustice in the United States.&lt;/p&gt;
&lt;div class=&quot;enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;google-dfp-ad-wrapper&quot;&gt;
&lt;p&gt;Advertisement&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But, since 2016, when Russia was accused of using Facebook and other platforms in an effort to influence or interfere in the U.S. election, many have seen social media in a more dystopian light, said Hans Kundnani, senior research fellow at London-based think tank Chatham House.&lt;/p&gt;
&lt;p&gt;“What’s happening in Belarus right now is kind of a reminder that actually social media can be used in a positive way from a democratic perspective,” Kundnani said.&lt;/p&gt;
&lt;p&gt;Protesters in the streets echoed his sentiment.&lt;/p&gt;
&lt;p&gt;“Telegram channels and websites that don’t belong to our government are the main source of information today as we cannot at all rely on state media,” said Roman Semenov, who follows the NEXTA channels and joined a rally in central Minsk on Wednesday evening. “It’s a Telegram revolution.”&lt;/p&gt;
</description>
<pubDate>Fri, 21 Aug 2020 15:54:56 +0000</pubDate>
<dc:creator>gamblor956</dc:creator>
<og:title>'It's a Telegram revolution': Messaging app proves crucial to Belarus protests</og:title>
<og:url>https://www.latimes.com/world-nation/story/2020-08-21/telegram-messaging-app-crucial-belarus-protests</og:url>
<og:image>https://ca-times.brightspotcdn.com/dims4/default/25e2b06/2147483647/strip/true/crop/4205x2208+0+298/resize/1200x630!/quality/90/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Ff2%2F02%2Fe1ff9f7069e117fdf5ae9ed3da07%2F2677ac41c9bb464cb24b4a582e5f8a13</og:image>
<og:description>The Telegram messaging app has become an indispensable tool in coordinating the unprecedented mass demonstrations that have rocked Belarus.</og:description>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.latimes.com/world-nation/story/2020-08-21/telegram-messaging-app-crucial-belarus-protests</dc:identifier>
</item>
<item>
<title>Leaked S-1 screenshots show Palantir losing $579M in 2019</title>
<link>https://techcrunch.com/2020/08/21/leaked-s-1-screenshots-show-palantir-losing-579m-in-2019/</link>
<guid isPermaLink="true" >https://techcrunch.com/2020/08/21/leaked-s-1-screenshots-show-palantir-losing-579m-in-2019/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;&lt;a href=&quot;https://techcrunch.com/2020/07/06/secretive-data-startup-palantir-has-confidentially-filed-for-an-ipo/&quot;&gt;Palantir filed an S-1 confidentially to the SEC in early July&lt;/a&gt;, but we have so far been waiting for the final document to be published for weeks now with nary a murmur. Now, thanks to some leaked screenshots to TechCrunch from a Palantir shareholder, we might have some top-line numbers.&lt;/p&gt;
&lt;h3&gt;Full-year revenues and losses&lt;/h3&gt;
&lt;p&gt;In screenshots of a draft S-1 statement dated yesterday (August 20), Palantir is listed as generating revenues of roughly $742 million in 2019 (Palantir’s fiscal year is a calendar year). That revenue was up from $595 million in 2018, a gain of roughly 25%. That’s &lt;em&gt;growth&lt;/em&gt;, although not particularly great, given some of the massive SaaS growth we have seen in recent IPOs like Datadog.&lt;/p&gt;
&lt;p&gt;The company’s revenue is a disappointment, after the company was reported to have been on the cusp of $1 billion in revenue for years. Private companies, of course, do not normally disclose their financial results, but the company’s size falls far short of expectations, leaks and other reports.&lt;/p&gt;

&lt;p&gt;The real shocker though in these numbers is when you head to the bottom of the company’s revenue statement. In the screenshots of the company’s financials, Palantir lists a net loss of roughly $580 million for 2019, which is almost identical to its loss in 2018. The company listed a net loss percentage of 97% for 2018, improving to a loss of 78% for last year.&lt;/p&gt;
&lt;p&gt;The company’s $580 million loss during the period shows at once why the company has needed to raise billions to date, and how far it has yet to go until it can self-sustain.&lt;/p&gt;
&lt;p&gt;Gross profit for 2019 was roughly $500 million, about 16% higher than in 2018. The company’s big expense is around sales and marketing, which was roughly $450 million for both years and represented 61% of revenue in 2019.&lt;/p&gt;
&lt;h3&gt;First half of 2020 is looking slightly better&lt;/h3&gt;
&lt;p&gt;The story gets a little better in 2020. For the first six months of 2020, Palantir recorded revenues of $481 million, a 49% gain compared to the same period last year. More importantly, Palantir has worked hard to maintain its level of expenses in sales and marketing, research and development as well as general and administrative costs.&lt;/p&gt;
&lt;p&gt;Palantir kept expenses in check in the first half of 2020 despite its increase in revenue.&lt;span class=&quot;Apple-converted-space&quot;&gt; &lt;/span&gt;In relative numbers, operating expenses changed from 157% of revenues in the first half of 2019 to 107% of revenues in the first half of 2020.&lt;/p&gt;
&lt;p&gt;To be clear, that is still really high for a 17-year-old company.&lt;/p&gt;
&lt;h3&gt;Palantir is increasingly a government contractor, despite attempts to enter the commercial arena&lt;/h3&gt;
&lt;p&gt;The company’s revenue breakdown is particularly interesting because it finally answers the question about how much it relies on government contracts and if it’s trying to diversify. Palantir is widely known for its government contracting, but in recent years, the company has tried to expand its data products into the private sector.&lt;/p&gt;
&lt;p&gt;According to the leaked screenshots shown to TechCrunch, Palantir disclosed its revenue breakdown for the first six months of 2019 and the first six months of 2020. For the first half of this year, Palantir generated $258 million in government-derived revenue (53.5%), compared to $224 million in commercial revenue (46.5%). In 2019, government revenue was $146 million (45%) and commercial revenue was $177 million (55%). Together, that means that government revenue increased by 76%, versus just 27% growth in its commercial business.&lt;/p&gt;
&lt;p&gt;That’s actually quite out-of-sync with some of the public comments the company has made about reducing reliance on government contracts for its revenues. The company’s government revenues are higher today both in absolute totals and relatively speaking, begging the question whether its products are competitive in the enterprise space outside of its traditional bastion in government services.&lt;/p&gt;
&lt;p&gt;What’s interesting is that almost all of that revenue growth is from existing customers (dated to the end of 2019) rather than new customers in 2020 (despite all that S&amp;amp;M spending). On the government side, $102 million of the $112 million revenue increase (91%) came from existing clients, while $43 million of the $47 million of growth in commercial revenues (91% as well) came from existing customers.&lt;/p&gt;
&lt;p&gt;In other words, Palantir remains heavily reliant on its existing customer base — and particularly its government clients — for new growth.&lt;/p&gt;
&lt;p&gt;While there is no firm date for the Palantir S-1 that we know of, given the financials are apparently floating around out there, expect it to come sooner rather than later.&lt;/p&gt;
&lt;p&gt;We reached out to a Palantir PR contact, who declined to comment.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Updated with more numbers for 2020 and better breakdowns of new versus existing customers.&lt;/em&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 21 Aug 2020 15:25:03 +0000</pubDate>
<dc:creator>rvz</dc:creator>
<og:title>Leaked Palantir S-1 shows $579M loss in 2019 – TechCrunch</og:title>
<og:description>Palantir filed an S-1 confidentially to the SEC in early July, but we have so far been waiting for the final document to be published for weeks now with nary a murmur. Now, thanks to some leaked screenshots to TechCrunch from a Palantir shareholder, we might have some top-line numbers. Full-year re…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2020/08/palantirGettyImages-1180652365.jpg?w=600</og:image>
<og:url>https://social.techcrunch.com/2020/08/21/leaked-s-1-screenshots-show-palantir-losing-579m-in-2019/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2020/08/21/leaked-s-1-screenshots-show-palantir-losing-579m-in-2019/</dc:identifier>
</item>
<item>
<title>Ride through Wuppertal on ‘the flying train’ in clear footage from 1902</title>
<link>https://www.thisiscolossal.com/2020/08/the-flying-train-moma/</link>
<guid isPermaLink="true" >https://www.thisiscolossal.com/2020/08/the-flying-train-moma/</guid>
<description>&lt;aside&gt;
&lt;/aside&gt;
﻿
&lt;h3 class=&quot;category&quot;&gt;&lt;a href=&quot;https://www.thisiscolossal.com/category/history/&quot;&gt;History&lt;/a&gt; &lt;a href=&quot;https://www.thisiscolossal.com/category/photography/&quot;&gt;Photography&lt;/a&gt;&lt;/h3&gt;
&lt;h3 class=&quot;tags&quot; id=&quot;tags_desktop&quot;&gt;&lt;a href=&quot;https://www.thisiscolossal.com/tags/germany/&quot;&gt;#Germany&lt;/a&gt; &lt;a href=&quot;https://www.thisiscolossal.com/tags/trains/&quot;&gt;#trains&lt;/a&gt; &lt;a href=&quot;https://www.thisiscolossal.com/tags/video/&quot;&gt;#video&lt;/a&gt;&lt;/h3&gt;


&lt;div class=&quot;post_details singlepost&quot;&gt;
&lt;h3 class=&quot;date&quot;&gt;&lt;a href=&quot;https://www.thisiscolossal.com/2020/08/the-flying-train-moma/&quot;&gt;August 17, 2020&lt;/a&gt;&lt;/h3&gt;
&lt;h3 class=&quot;author&quot;&gt;&lt;a href=&quot;https://www.thisiscolossal.com/author/gebert/&quot;&gt;Grace Ebert&lt;/a&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/2Ud1aZFE0fU&quot; width=&quot;960&quot; height=&quot;540&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;span data-mce-type=&quot;bookmark&quot; class=&quot;mce_SELRES_start&quot;&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Shot in 1902, “&lt;a href=&quot;https://www.youtube.com/watch?v=2Ud1aZFE0fU#action=share&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;The Flying Train&lt;/a&gt;” takes viewers on an uncommonly crisp journey aboard a suspended railcar. Throughout the two-minute video, riders see Wuppertal residents walking across pedestrian bridges and down dirt roadways more than a century ago. The city is known still today for its schwebebahn, which is a style of hanging railway that’s unique to Germany.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UC9CswYtb5rL31CHwyVoyJvQ&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;MoMA&lt;/a&gt; recently pulled the black-and-white footage from its vault and said that curators originally believed it was shot with 70-millimeter film rather than 68. “Formats like Biograph’s 68mm and Fox’s 70mm Grandeur are of particular interest to researchers visiting the Film Study Center because the large image area affords stunning visual clarity and quality, especially compared to the more standard 35mm or 16mm stock,” a statement notes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/user/shirman88/featured&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Denis Shiryaev&lt;/a&gt;, who also restored &lt;a href=&quot;https://www.thisiscolossal.com/2020/02/ai-upgrades-classic-film/&quot;&gt;this historic film&lt;/a&gt; from 1896, produced &lt;a href=&quot;https://www.youtube.com/watch?v=EQs5VxNPhzk&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;an updated 4K version&lt;/a&gt; that slows down the footage and adds color. (via &lt;a href=&quot;https://kottke.org/20/08/the-flying-train&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Kottke&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-133922&quot; src=&quot;https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-2.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;918&quot; srcset=&quot;https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-2.jpg 1200w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-2-640x490.jpg 640w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-2-960x734.jpg 960w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-2-768x588.jpg 768w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-2-624x477.jpg 624w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-133921&quot; src=&quot;https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;900&quot; srcset=&quot;https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1.jpg 1200w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-640x480.jpg 640w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-960x720.jpg 960w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-768x576.jpg 768w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-624x468.jpg 624w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-280x210.jpg 280w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-285x214.jpg 285w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-1044x783.jpg 1044w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-632x474.jpg 632w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-536x402.jpg 536w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-280x210@2x.jpg 560w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-285x214@2x.jpg 570w, https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-1-536x402@2x.jpg 1072w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/EQs5VxNPhzk&quot; width=&quot;960&quot; height=&quot;540&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;span data-mce-type=&quot;bookmark&quot; class=&quot;mce_SELRES_start&quot;&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h3 class=&quot;tags&quot; id=&quot;tags_mobile&quot;&gt;&lt;a href=&quot;https://www.thisiscolossal.com/tags/germany/&quot;&gt;#Germany&lt;/a&gt; &lt;a href=&quot;https://www.thisiscolossal.com/tags/trains/&quot;&gt;#trains&lt;/a&gt; &lt;a href=&quot;https://www.thisiscolossal.com/tags/video/&quot;&gt;#video&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Do stories and artists like this matter to you?&lt;/strong&gt; &lt;em&gt;Become a &lt;a href=&quot;https://www.thisiscolossal.com/members/&quot;&gt;Colossal Member&lt;/a&gt; and support independent arts publishing. Join a community of like-minded readers who are passionate about contemporary art, help support our &lt;a href=&quot;https://www.thisiscolossal.com/interviews/&quot;&gt;interview series&lt;/a&gt;, gain access to partner discounts, and much more. &lt;a href=&quot;https://www.thisiscolossal.com/members/&quot;&gt;Join now&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;post_details&quot;&gt;
&lt;h3 class=&quot;date&quot;&gt; &lt;/h3&gt;
&lt;h5 class=&quot;share_story&quot;&gt;Share this story&lt;/h5&gt;
&lt;h3 class=&quot;author&quot;&gt; &lt;/h3&gt;

&lt;/div&gt;

&lt;section id=&quot;also&quot;&gt;



&lt;hr class=&quot;clear off_3 on_2&quot;/&gt;

&lt;hr class=&quot;clear off_2&quot;/&gt;

&lt;hr class=&quot;clear off_3 on_2&quot;/&gt;



&lt;hr class=&quot;clear off_2&quot;/&gt;&lt;hr class=&quot;clear&quot;/&gt;&lt;/section&gt;

</description>
<pubDate>Fri, 21 Aug 2020 14:14:05 +0000</pubDate>
<dc:creator>gmays</dc:creator>
<og:title>Ride Through a German Village on 'The Flying Train' in Incredibly Clear Footage from 1902</og:title>
<og:url>https://www.thisiscolossal.com/2020/08/the-flying-train-moma/</og:url>
<og:type>article</og:type>
<og:description>﻿ Shot in 1902, &quot;The Flying Train&quot; takes viewers on an uncommonly crisp journey aboard a suspended railcar. Throughout the two-minute video, riders see Wuppertal residents walking across pedestrian bridges and down dirt roadways more than a century ago. The city is known still today for its schwe</og:description>
<og:image>https://www.thisiscolossal.com/wp-content/uploads/2020/08/moma-og.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.thisiscolossal.com/2020/08/the-flying-train-moma/</dc:identifier>
</item>
<item>
<title>The Splitgraph Data Delivery Network – query over 40k public datasets</title>
<link>https://www.splitgraph.com/blog/data-delivery-network-launch</link>
<guid isPermaLink="true" >https://www.splitgraph.com/blog/data-delivery-network-launch</guid>
<description>&lt;nav class=&quot;toc&quot;&gt;&lt;ol class=&quot;toc-level toc-level-1&quot;&gt;&lt;li class=&quot;toc-item toc-item-h3&quot;&gt;&lt;a href=&quot;https://www.splitgraph.com/blog/data-delivery-network-launch#usage&quot; class=&quot;toc-link toc-link-h3&quot; as=&quot;#usage&quot;&gt;Usage&lt;/a&gt;
&lt;ol class=&quot;toc-level toc-level-2&quot;&gt;&lt;li class=&quot;toc-item toc-item-h4&quot;&gt;&lt;a href=&quot;https://www.splitgraph.com/blog/data-delivery-network-launch#connecting&quot; class=&quot;toc-link toc-link-h4&quot; as=&quot;#connecting&quot;&gt;Connecting&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;toc-item toc-item-h4&quot;&gt;&lt;a href=&quot;https://www.splitgraph.com/blog/data-delivery-network-launch#workspaces&quot; class=&quot;toc-link toc-link-h4&quot; as=&quot;#workspaces&quot;&gt;Workspaces&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;toc-item toc-item-h4&quot;&gt;&lt;a href=&quot;https://www.splitgraph.com/blog/data-delivery-network-launch#running-queries&quot; class=&quot;toc-link toc-link-h4&quot; as=&quot;#running-queries&quot;&gt;Running queries&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li class=&quot;toc-item toc-item-h3&quot;&gt;&lt;a href=&quot;https://www.splitgraph.com/blog/data-delivery-network-launch#behind-the-scenes&quot; class=&quot;toc-link toc-link-h3&quot; as=&quot;#behind-the-scenes&quot;&gt;Behind the scenes&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;toc-item toc-item-h3&quot;&gt;&lt;a href=&quot;https://www.splitgraph.com/blog/data-delivery-network-launch#future-and-roadmap&quot; class=&quot;toc-link toc-link-h3&quot; as=&quot;#future-and-roadmap&quot;&gt;Future and roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;toc-item toc-item-h3&quot;&gt;&lt;a href=&quot;https://www.splitgraph.com/blog/data-delivery-network-launch#conclusion&quot; class=&quot;toc-link toc-link-h3&quot; as=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/nav&gt;&lt;p&gt;Today, we are announcing the next step for Splitgraph: the &lt;a href=&quot;https://www.splitgraph.com/connect&quot; as=&quot;https://www.splitgraph.com/connect&quot;&gt;&lt;strong&gt;Splitgraph Data Delivery Network&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Splitgraph DDN is a single SQL endpoint that lets you query over 40,000 public datasets hosted on or proxied by Splitgraph.&lt;/p&gt;
&lt;p&gt;You can connect to it from most PostgreSQL clients and BI tools &lt;strong&gt;without having to install anything else&lt;/strong&gt;. It supports all read-only SQL constructs, including filters and aggregations. It even lets you run joins across distinct datasets.&lt;/p&gt;
&lt;p&gt;In this post, we will give you a quick introduction to the DDN as well as discuss how it works behind the scenes and our plan for its future.&lt;/p&gt;
&lt;section readability=&quot;35.544303797468&quot;&gt;&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;
&lt;section readability=&quot;17.2533632287&quot;&gt;&lt;h4 id=&quot;connecting&quot;&gt;Connecting&lt;/h4&gt;
&lt;p&gt;The endpoint is at &lt;code class=&quot;css-1k094re&quot;&gt;postgresql://data.splitgraph.com:5432/ddn&lt;/code&gt;. You will need a Splitgraph API key and secret to access it.&lt;/p&gt;
&lt;p&gt;You don't need to install anything to use the endpoint. If you go to your Splitgraph &lt;a href=&quot;https://www.splitgraph.com/connect&quot; as=&quot;https://www.splitgraph.com/connect&quot;&gt;account settings&lt;/a&gt;, you can generate a pair of credentials. You can then plug them into your SQL client.&lt;/p&gt;
&lt;p&gt;If you're already using the &lt;a href=&quot;https://www.splitgraph.com/docs/architecture/sgr-client&quot; class=&quot;css-0&quot;&gt;&lt;code class=&quot;css-1k094re&quot;&gt;sgr&lt;/code&gt; client&lt;/a&gt; and had registered for Splitgraph before, you can check your &lt;code class=&quot;css-1k094re&quot;&gt;.sgconfig&lt;/code&gt; file for the API keys. You can also upgrade your client to version 0.2.0 with &lt;code class=&quot;css-1k094re&quot;&gt;sgr upgrade&lt;/code&gt; and run &lt;code class=&quot;css-1k094re&quot;&gt;sgr cloud sql&lt;/code&gt; to get a libpq-compatible connection string.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.splitgraph.com/docs/getting-started/installation&quot; class=&quot;css-0&quot;&gt;Installing Splitgraph locally&lt;/a&gt; will let you snapshot these datasets and use them in &lt;a href=&quot;https://www.splitgraph.com/docs/concepts/splitfiles&quot; class=&quot;css-0&quot;&gt;Splitfiles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are more setup methods available in &lt;a href=&quot;https://www.splitgraph.com/docs/splitgraph-cloud/data-delivery-network&quot; class=&quot;css-0&quot;&gt;our documentation&lt;/a&gt;. This includes connecting to Splitgraph with clients like DBeaver, BI tools like Metabase or Google Data Studio or even other databases through ODBC.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;7.5017793594306&quot;&gt;&lt;h4 id=&quot;workspaces&quot;&gt;Workspaces&lt;/h4&gt;
&lt;p&gt;When you connect to Splitgraph, your SQL client will show you some schemas. These are data repositories featured on our &lt;a href=&quot;https://www.splitgraph.com/explore&quot; class=&quot;css-0&quot;&gt;explore page&lt;/a&gt; as well as datasets that you upload to Splitgraph.&lt;/p&gt;
&lt;p&gt;We call this feature &quot;workspaces&quot;. It works by implementing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Information_schema&quot; as=&quot;https://en.wikipedia.org/wiki/Information_schema&quot;&gt;ANSI information schema&lt;/a&gt; standard. We'll expand on workspaces more in the future. For example, we'll let you:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;bookmark repositories that you want to show up in your workspace&lt;/li&gt;
&lt;li&gt;allow you to have multiple workspaces and manage access to them&lt;/li&gt;
&lt;li&gt;search for Splitgraph repositories directly from your SQL client.&lt;/li&gt;
&lt;/ul&gt;&lt;/section&gt;&lt;section readability=&quot;46.120990433315&quot;&gt;&lt;h4 id=&quot;running-queries&quot;&gt;Running queries&lt;/h4&gt;
&lt;p&gt;You can run queries on Splitgraph images by referencing them as PostgreSQL schemata: &lt;code class=&quot;css-1k094re&quot;&gt;namespace/repository[:hash_or_tag]&lt;/code&gt;. By default, we query the &lt;code class=&quot;css-1k094re&quot;&gt;latest&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;For example, if you want to query the &lt;a href=&quot;https://www.splitgraph.com/cityofchicago/covid19-daily-cases-deaths-and-hospitalizations-naz8-j4nc&quot; as=&quot;https://www.splitgraph.com/cityofchicago/covid19-daily-cases-deaths-and-hospitalizations-naz8-j4nc&quot;&gt;&lt;code class=&quot;css-1k094re&quot;&gt;cityofchicago/covid19-daily-cases-deaths-and-hospitalizations-naz8-j4nc&lt;/code&gt; repository&lt;/a&gt;, proxied by Splitgraph to &lt;a href=&quot;https://data.cityofchicago.org/Health-Human-Services/COVID-19-Daily-Cases-and-Deaths/naz8-j4nc&quot; as=&quot;https://data.cityofchicago.org/Health-Human-Services/COVID-19-Daily-Cases-and-Deaths/naz8-j4nc&quot;&gt;Socrata&lt;/a&gt;, you can run:&lt;/p&gt;
&lt;pre class=&quot;language-sql css-14vld7j&quot;&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;language-sql css-449ee4&quot; metastring=&quot;&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;cityofchicago/covid19-daily-cases-deaths-and-hospitalizations-naz8-j4nc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;covid19_daily_cases_deaths_and_hospitalizations
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We let you use SQL &lt;code class=&quot;css-1k094re&quot;&gt;SELECT&lt;/code&gt; and &lt;code class=&quot;css-1k094re&quot;&gt;EXPLAIN&lt;/code&gt; statements. You can use any SQL clauses, including group-bys, aggregations, filters and joins. Splitgraph pushes filters down to the origin data source.&lt;/p&gt;
&lt;p&gt;This sample query that we used in our &lt;a href=&quot;https://www.splitgraph.com/docs/ingesting-data/socrata#using-metabase-to-join-and-plot-data-from-multiple-data-portals&quot; as=&quot;/docs/ingesting-data/socrata#using-metabase-to-join-and-plot-data-from-multiple-data-portals&quot;&gt;Metabase demo&lt;/a&gt; runs a JOIN between two datasets:&lt;/p&gt;
&lt;pre class=&quot;language-sql css-14vld7j&quot;&gt;
&lt;code class=&quot;language-sql css-449ee4&quot; metastring=&quot;&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
    cambridge_cases&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    chicago_cases&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cases_total &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; chicago_daily_cases&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    cambridge_cases&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;new_positive_cases &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; cambridge_daily_cases
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;cityofchicago/covid19-daily-cases-deaths-and-hospitalizations-naz8-j4nc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;covid19_daily_cases_deaths_and_hospitalizations chicago_cases
&lt;span class=&quot;token keyword&quot;&gt;FULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OUTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;JOIN&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;cambridgema-gov/covid19-cumulative-cases-by-date-tdt9-vq5y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;covid19_cumulative_cases_by_date cambridge_cases
&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt;
    date_trunc&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'day'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; chicago_cases&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lab_report_date&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cambridge_cases&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will join the data between two distinct Socrata data portals (&lt;a href=&quot;https://data.cityofchicago.org/Health-Human-Services/COVID-19-Daily-Cases-Deaths-and-Hospitalizations/naz8-j4nc&quot; as=&quot;https://data.cityofchicago.org/Health-Human-Services/COVID-19-Daily-Cases-Deaths-and-Hospitalizations/naz8-j4nc&quot;&gt;Chicago, IL&lt;/a&gt; and &lt;a href=&quot;https://data.cambridgema.gov/Public-Safety/COVID-19-Cumulative-Cases-by-Date/tdt9-vq5y&quot; as=&quot;https://data.cambridgema.gov/Public-Safety/COVID-19-Cumulative-Cases-by-Date/tdt9-vq5y&quot;&gt;Cambridge, MA&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/splitgraph/splitgraph.com/master/content/docs/0900_splitgraph-cloud/images/sql-endpoint/2-dbeaver-join.png&quot; alt=&quot;Splitgraph SQL endpoint JOIN query example&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We also support &lt;a href=&quot;https://postgis.net/&quot; as=&quot;https://postgis.net/&quot;&gt;PostGIS&lt;/a&gt;, letting you query and visualize geospatial data. For example, you can query the &lt;a href=&quot;https://www.splitgraph.com/splitgraph/london_wards/&quot; as=&quot;https://www.splitgraph.com/splitgraph/london_wards/&quot;&gt;London ward boundary data&lt;/a&gt; image as follows:&lt;/p&gt;
&lt;pre class=&quot;language-sql css-14vld7j&quot;&gt;
&lt;code class=&quot;language-sql css-449ee4&quot; metastring=&quot;&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
    name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    gss_code&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    ST_Transform&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ST_SetSRID&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;geom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;27700&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4326&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    
    ST_Area&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ST_Transform&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ST_SetSRID&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;geom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;27700&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3035&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AS&lt;/span&gt; area_sqkm
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;splitgraph/london_wards&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;city_merged_2018
&lt;span class=&quot;token keyword&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; gss_code &lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/splitgraph/splitgraph.com/master/content/docs/0900_splitgraph-cloud/images/sql-endpoint/3-dbeaver-geodata.png&quot; alt=&quot;PostGIS data on Splitgraph DDN&quot;/&gt;&lt;/p&gt;
&lt;p&gt;There are more sample queries on our &lt;a href=&quot;https://www.splitgraph.com/connect&quot; as=&quot;https://www.splitgraph.com/connect&quot;&gt;Connect page&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;&lt;/section&gt;&lt;section readability=&quot;26.454545454545&quot;&gt;&lt;h3 id=&quot;behind-the-scenes&quot;&gt;Behind the scenes&lt;/h3&gt;
&lt;p&gt;The Splitgraph Data Delivery Network is the result of all the work we've put into the &lt;a href=&quot;https://www.splitgraph.com/docs/architecture/sgr-client&quot; class=&quot;css-0&quot;&gt;&lt;code class=&quot;css-1k094re&quot;&gt;sgr&lt;/code&gt; client&lt;/a&gt; and the &lt;a href=&quot;https://github.com/splitgraph/splitgraph&quot; as=&quot;https://github.com/splitgraph/splitgraph&quot;&gt;Splitgraph Core&lt;/a&gt; code over the past two years.&lt;/p&gt;
&lt;p&gt;It would also have not been possible without some other open source technologies.&lt;/p&gt;
&lt;p&gt;We use PostgreSQL foreign data wrappers. They let us perform query execution and planning across federated data sources. We wrote about &lt;a href=&quot;https://www.splitgraph.com/blog/foreign-data-wrappers&quot; class=&quot;css-0&quot;&gt;foreign data wrappers&lt;/a&gt; before: they're powerful and underused!&lt;/p&gt;
&lt;p&gt;We manage connections using a fork of &lt;a href=&quot;https://www.pgbouncer.org&quot; as=&quot;https://www.pgbouncer.org&quot;&gt;pgBouncer&lt;/a&gt;, a PostgreSQL connection pooler. Our fork lets us perform authentication outside of PostgreSQL. We can issue and revoke API keys without having to manipulate database roles. Several inbound Splitgraph users can run queries as a single PostgreSQL user.&lt;/p&gt;
&lt;p&gt;We also use pgBouncer to transform queries on the fly. We rewrite clients' introspection queries and let them reference Splitgraph images as PostgreSQL schemata.&lt;/p&gt;
&lt;p&gt;Each client essentially operates within its own isolated virtual database. The obvious implementation of this would be spinning up one database per client. But our query transformations let us do this at a &lt;strong&gt;much lower infrastructure cost&lt;/strong&gt;. We also use this feature to inspect and drop unwanted queries on the fly.&lt;/p&gt;
&lt;p&gt;Finally, we use our own &lt;code class=&quot;css-1k094re&quot;&gt;sgr&lt;/code&gt; client to orchestrate this. Splitgraph engines power the data delivery network. They manage foreign data wrapper instantiation and querying Splitgraph images via &lt;a href=&quot;https://www.splitgraph.com/docs/large-datasets/layered-querying&quot; class=&quot;css-0&quot;&gt;layered querying&lt;/a&gt;. In the future, we will use Splitgraph's &lt;a href=&quot;https://www.splitgraph.com/docs/concepts/objects&quot; class=&quot;css-0&quot;&gt;storage format&lt;/a&gt; to snapshot remote datasets or cache frequent queries.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;25.360655737705&quot;&gt;&lt;h3 id=&quot;future-and-roadmap&quot;&gt;Future and roadmap&lt;/h3&gt;
&lt;p&gt;There are a lot of directions we would like to pursue with Splitgraph.&lt;/p&gt;
&lt;p&gt;You will be able to use Splitgraph to &lt;strong&gt;replace some of your data lake or ETL pipelines&lt;/strong&gt; and query the data at source. This is similar to the idea of &quot;data virtualization&quot;. But, unlike other software in this space, Splitgraph uses an open PostgreSQL procotol. This makes it immediately compatible with most of your BI tools and dashboards. It won't lock you into a proprietary query language.&lt;/p&gt;
&lt;p&gt;We will soon have the ability to add &lt;a href=&quot;https://www.splitgraph.com/docs/splitgraph-cloud/external-repositories&quot; class=&quot;css-0&quot;&gt;external repositories&lt;/a&gt; to public or on-premises Splitgraph data catalogs. You will be able to query any dataset indexed in this catalog over the single SQL endpoint or our &lt;a href=&quot;https://www.splitgraph.com/docs/splitgraph-cloud/publish-rest-api&quot; class=&quot;css-0&quot;&gt;REST API&lt;/a&gt;. You will be able to even use these datasets in &lt;a href=&quot;https://www.splitgraph.com/concepts/splitfiles&quot; class=&quot;css-0&quot;&gt;Splitfiles&lt;/a&gt;. This will let you define reproducible transformations on your data, enrich it with public datasets and track lineage.&lt;/p&gt;
&lt;p&gt;You will be able to use Splitgraph as an &lt;strong&gt;SQL firewall and a rewrite layer&lt;/strong&gt;. You won't need to use views to set up access policies for your data warehouse. Data consumers won't need to manage credentials to disjoint data silos. Splitgraph can inspect proxied queries and enforce granular access policies on individual columns. It will even be able to do PII masking and access auditing.&lt;/p&gt;
&lt;p&gt;The single SQL endpoint is well suited for a &lt;strong&gt;data marketplace&lt;/strong&gt;. Data vendors currently ship data in CSV files or other ad-hoc formats. They have to maintain pages of instructions on ingesting this data. With Splitgraph, data consumers will be able to acquire and interact with data directly from their applications and clients.&lt;/p&gt;
&lt;/section&gt;&lt;section readability=&quot;13.481012658228&quot;&gt;&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Today, we launched the Splitgraph Data Delivery Network. It's a seamless experience of a single database with thousands of datasets at your fingertips, compatible with most existing clients and BI tools.&lt;/p&gt;
&lt;p&gt;If you wish to try it out, you can get credentials to access it in less than a minute: just head on to the &lt;a href=&quot;https://www.splitgraph.com/connect&quot; as=&quot;https://www.splitgraph.com/connect&quot;&gt;landing page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We're also building towards a &lt;a href=&quot;https://www.splitgraph.com/about/company/private-cloud-beta&quot; class=&quot;css-0&quot;&gt;&quot;Splitgraph Private Cloud&quot; product&lt;/a&gt; that will let setup your own private Splitgraph cluster, managed by us and deployed to the cloud region of your choice. &lt;a href=&quot;mailto:support@splitgraph.com&quot; as=&quot;mailto:support@splitgraph.com&quot;&gt;Contact us&lt;/a&gt; if you're interested!&lt;/p&gt;
&lt;/section&gt;</description>
<pubDate>Fri, 21 Aug 2020 11:28:38 +0000</pubDate>
<dc:creator>mildbyte</dc:creator>
<og:url>https://www.splitgraph.com</og:url>
<og:type>website</og:type>
<og:image>https://www.splitgraph.com/static/og-image-ddn.png</og:image>
<og:title>Port 5432 is open: introducing the Splitgraph Data Delivery Network</og:title>
<og:description>We launch the Splitgraph Data Delivery Network: a single endpoint that lets any PostgreSQL application, client or BI tool to connect and query over 40,000 public datasets hosted or proxied by Splitgraph.</og:description>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.splitgraph.com/blog/data-delivery-network-launch</dc:identifier>
</item>
<item>
<title>Game Programming Patterns: Event Queue (2014)</title>
<link>https://gameprogrammingpatterns.com/event-queue.html</link>
<guid isPermaLink="true" >https://gameprogrammingpatterns.com/event-queue.html</guid>
<description>&lt;nav class=&quot;top&quot;/&gt;


&lt;p&gt;&lt;em&gt;Decouple when a message or event is sent from when it is processed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unless you live under one of the few rocks that still lack Internet access, you’ve probably already heard of an &lt;span name=&quot;message&quot;&gt;“event queue”&lt;/span&gt;. If not, maybe “message queue”, or “event loop”, or “message pump” rings a bell. To refresh your memory, let’s walk through a couple of common manifestations of the pattern.&lt;/p&gt;
&lt;aside name=&quot;message&quot; readability=&quot;5&quot;&gt;&lt;p&gt;For most of the chapter, I use “event” and “message” interchangeably. Where the distinction matters, I’ll make it obvious.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#gui-event-loops&quot; name=&quot;gui-event-loops&quot;&gt;GUI event loops&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’ve ever done any &lt;span name=&quot;event-driven&quot;&gt;user interface&lt;/span&gt; programming, then you’re well acquainted with &lt;em&gt;events&lt;/em&gt;. Every time the user interacts with your program — clicks a button, pulls down a menu, or presses a key — the operating system generates an event. It throws this object at your app, and your job is to grab it and hook it up to some interesting behavior.&lt;/p&gt;
&lt;aside name=&quot;event-driven&quot; readability=&quot;2.2173913043478&quot;&gt;&lt;p&gt;This application style is so common, it’s considered a paradigm: &lt;a href=&quot;http://en.wikipedia.org/wiki/Event-driven_programming&quot;&gt;&lt;em&gt;event-driven programming&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;In order to receive these missives, somewhere deep in the bowels of your code is an &lt;em&gt;event loop&lt;/em&gt;. It looks roughly like this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;running&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNextEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Handle event...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The call to &lt;code&gt;getNextEvent()&lt;/code&gt; pulls a bit of unprocessed user input into your app. You route it to an event handler and, like magic, your application comes to life. The interesting part is that the application &lt;em&gt;pulls&lt;/em&gt; in the event when &lt;em&gt;it&lt;/em&gt; wants it. The operating system doesn’t just immediately &lt;span name=&quot;interrupt&quot;&gt;jump&lt;/span&gt; to some code in your app when the user pokes a peripheral.&lt;/p&gt;
&lt;aside name=&quot;interrupt&quot; readability=&quot;6&quot;&gt;&lt;p&gt;In contrast, &lt;em&gt;interrupts&lt;/em&gt; from the operating system &lt;em&gt;do&lt;/em&gt; work like that. When an interrupt happens, the OS stops whatever your app was doing and forces it to jump to an interrupt handler. This abruptness is why interrupts are so hard to work with.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;That means when user input comes in, it needs to go somewhere so that the operating system doesn’t lose it between when the device driver reported the input and when your app gets around to calling &lt;code&gt;getNextEvent()&lt;/code&gt;. That “somewhere” is a &lt;em&gt;queue&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gameprogrammingpatterns.com/images/event-queue-loop.png&quot; alt=&quot;An event queue. The operating system enqueues Shift, Down, Up, and Click events, and the getNextEvent() function dequeues them.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;When user input comes in, the OS adds it to a queue of unprocessed events. When you call &lt;code&gt;getNextEvent()&lt;/code&gt;, that pulls the oldest event off the queue and hands it to your application.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#central-event-bus&quot; name=&quot;central-event-bus&quot;&gt;Central event bus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most &lt;span name=&quot;game-loop&quot;&gt;games&lt;/span&gt; aren’t event-driven like this, but it is common for a game to have its own event queue as the backbone of its nervous system. You’ll often hear “central”, “global”, or “main” used to describe it. It’s used for high level communication between game systems that want to stay decoupled.&lt;/p&gt;
&lt;aside name=&quot;game-loop&quot; readability=&quot;2.6823529411765&quot;&gt;&lt;p&gt;If you want to know &lt;em&gt;why&lt;/em&gt; they aren’t event-driven, crack open the &lt;a href=&quot;https://gameprogrammingpatterns.com/game-loop.html&quot; class=&quot;pattern&quot;&gt;Game Loop&lt;/a&gt; chapter.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Say your game has a &lt;span name=&quot;tutorial&quot;&gt;tutorial&lt;/span&gt; system to display help boxes after specific in-game events. For example, the first time the player vanquishes a foul beastie, you want to show a little balloon that says, “Press X to grab the loot!”&lt;/p&gt;
&lt;aside name=&quot;tutorial&quot; readability=&quot;6&quot;&gt;&lt;p&gt;Tutorial systems are a pain to implement gracefully, and most players will spend only a fraction of their time using in-game help, so it feels like they aren’t worth the effort. But that fraction where they &lt;em&gt;are&lt;/em&gt; using the tutorial can be invaluable for easing the player into your game.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Your gameplay and combat code are likely complex enough as it is. The last thing you want to do is stuff a bunch of checks for triggering tutorials in there. Instead, you could have a central event queue. Any game system can send to it, so the combat code can add an “enemy died” event every time you slay a foe.&lt;/p&gt;
&lt;p&gt;&lt;span name=&quot;blackboard&quot;&gt;Likewise&lt;/span&gt;, any game system can &lt;em&gt;receive&lt;/em&gt; events from the queue. The tutorial engine registers itself with the queue and indicates it wants to receive “enemy died” events. This way, knowledge of an enemy dying makes its way from the combat system over to the tutorial engine without the two being directly aware of each other.&lt;/p&gt;
&lt;aside name=&quot;blackboard&quot; readability=&quot;2.6351351351351&quot;&gt;&lt;p&gt;This model where you have a shared space that entities can post information to and get notified by is similar to &lt;a href=&quot;http://en.wikipedia.org/wiki/Blackboard_system&quot;&gt;blackboard systems&lt;/a&gt; in the AI field.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;&lt;img src=&quot;https://gameprogrammingpatterns.com/images/event-queue-central.png&quot; alt=&quot;A central event queue is read from and written to by the Combat and Tutorial code.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;I thought about using this as the example for the rest of the chapter, but I’m not generally a fan of big global systems. Event queues don’t have to be for communicating across the entire game engine. They can be just as useful within a single class or domain.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#say-what&quot; name=&quot;say-what&quot;&gt;Say what?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;So, instead, let’s add sound to our game. Humans are mainly visual animals, but hearing is deeply connected to our emotions and our sense of physical space. The right simulated echo can make a black screen feel like an enormous cavern, and a well-timed violin adagio can make your heartstrings hum in sympathetic resonance.&lt;/p&gt;
&lt;p&gt;To get our game wound for sound, we’ll start with the simplest possible approach and see how it goes. We’ll add a little &lt;span name=&quot;singleton&quot;&gt;“audio engine”&lt;/span&gt; that has an API for playing a sound given an identifier and a volume:&lt;/p&gt;
&lt;aside name=&quot;singleton&quot; readability=&quot;4.7982062780269&quot;&gt;&lt;p&gt;While I almost always shy away from the &lt;a href=&quot;https://gameprogrammingpatterns.com/singleton.html&quot; class=&quot;gof-pattern&quot;&gt;Singleton&lt;/a&gt; pattern, this is one of the places where it may fit since the machine likely only has one set of speakers. I’m taking a simpler approach and just making the method static.&lt;/p&gt;
&lt;/aside&gt;&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Audio&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoundId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s responsible for loading the appropriate sound resource, finding an available channel to play it on, and starting it up. This chapter isn’t about some platform’s real audio API, so I’ll conjure one up that we can presume is implemented elsewhere. Using it, we write our method like so:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoundId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ResourceId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findOpenChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We check that in, create a few sound files, and start sprinkling &lt;code&gt;playSound()&lt;/code&gt; calls through our codebase like some magical audio fairy. For example, in our UI code, we play a little bloop when the selected menu item changes:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Menu&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOUND_BLOOP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VOL_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Other stuff...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After doing this, we notice that sometimes when you switch menu items, the whole screen freezes for a few frames. We’ve hit our first issue:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem 1: The API blocks the caller until the audio engine has completely processed the request.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Our &lt;code&gt;playSound()&lt;/code&gt; method is &lt;em&gt;synchronous&lt;/em&gt; — it doesn’t return back to the caller until bloops are coming out of the speakers. If a sound file has to be loaded from disc first, that may take a while. In the meantime, the rest of the game is frozen.&lt;/p&gt;
&lt;p&gt;Ignoring that for now, we move on. In the AI code, we add a call to let out a wail of anguish when an enemy takes damage from the player. Nothing warms a gamer’s heart like inflicting simulated pain on a virtual living being.&lt;/p&gt;
&lt;p&gt;It works, but sometimes when the hero does a mighty attack, it hits two enemies in the exact same frame. That causes the game to play the wail sound twice simultaneously. &lt;span name=&quot;hatsworth&quot;&gt;If&lt;/span&gt; you know anything about audio, you know mixing multiple sounds together sums their waveforms. When those are the &lt;em&gt;same&lt;/em&gt; waveform, it’s the same as &lt;em&gt;one&lt;/em&gt; sound played &lt;em&gt;twice as loud&lt;/em&gt;. It’s jarringly loud.&lt;/p&gt;
&lt;aside name=&quot;hatsworth&quot; readability=&quot;2.1086956521739&quot;&gt;&lt;p&gt;I ran into this exact issue working on &lt;a href=&quot;http://en.wikipedia.org/wiki/Henry_Hatsworth_in_the_Puzzling_Adventure&quot;&gt;Henry Hatsworth in the Puzzling Adventure&lt;/a&gt;. My solution there is similar to what we’ll cover here.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;We have a related problem in boss fights when piles of minions are running around causing mayhem. The hardware can only play so many sounds at one time. When we go over that limit, sounds get ignored or cut off.&lt;/p&gt;
&lt;p&gt;To handle these issues, we need to look at the entire &lt;em&gt;set&lt;/em&gt; of sound calls to aggregate and prioritize them. Unfortunately, our audio API handles each &lt;code&gt;playSound()&lt;/code&gt; call independently. It sees requests through a pinhole, one at a time.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem 2: Requests cannot be processed in aggregate.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These problems seem like mere annoyances compared to the next issue that falls in our lap. By now, we’ve strewn &lt;code&gt;playSound()&lt;/code&gt; calls throughout the codebase in lots of different game systems. But our game engine is running on modern multi-core hardware. To take advantage of those cores, we distribute those systems on different threads — rendering on one, AI on another, etc.&lt;/p&gt;
&lt;p&gt;Since our API is synchronous, it runs on the &lt;em&gt;caller’s&lt;/em&gt; thread. When we call it from different game systems, we’re hitting our API concurrently from multiple threads. Look at that sample code. See any thread synchronization? Me neither.&lt;/p&gt;
&lt;p&gt;This is particularly egregious because we intended to have a &lt;em&gt;separate&lt;/em&gt; thread for audio. It’s just sitting there totally idle while these other threads are busy stepping all over each other and breaking things.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Problem 3: Requests are processed on the wrong thread.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The common theme to these problems is that the audio engine interprets a call to &lt;code&gt;playSound()&lt;/code&gt; to mean, “Drop everything and play the sound right now!” &lt;em&gt;Immediacy&lt;/em&gt; is the problem. Other game systems call &lt;code&gt;playSound()&lt;/code&gt; at &lt;em&gt;their&lt;/em&gt; convenience, but not necessarily when it’s convenient for the audio engine to handle that request. To fix that, we’ll decouple &lt;em&gt;receiving&lt;/em&gt; a request from &lt;em&gt;processing&lt;/em&gt; it.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;queue&lt;/strong&gt; stores a series of &lt;strong&gt;notifications or requests&lt;/strong&gt; in first-in, first-out order. Sending a notification &lt;strong&gt;enqueues the request and returns&lt;/strong&gt;. The request processor then &lt;strong&gt;processes items from the queue&lt;/strong&gt; at a later time. Requests can be &lt;strong&gt;handled directly&lt;/strong&gt; or &lt;strong&gt;routed to interested parties&lt;/strong&gt;. This &lt;strong&gt;decouples the sender from the receiver&lt;/strong&gt; both &lt;strong&gt;statically&lt;/strong&gt; and &lt;strong&gt;in time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you only want to decouple &lt;em&gt;who&lt;/em&gt; receives a message from its sender, patterns like &lt;a href=&quot;https://gameprogrammingpatterns.com/observer.html&quot;&gt;Observer&lt;/a&gt; and &lt;a href=&quot;https://gameprogrammingpatterns.com/command.html&quot;&gt;Command&lt;/a&gt; will take care of this with less &lt;span name=&quot;simple&quot;&gt;complexity&lt;/span&gt;. You only need a queue when you want to decouple something &lt;em&gt;in time&lt;/em&gt;.&lt;/p&gt;
&lt;aside name=&quot;simple&quot; readability=&quot;5&quot;&gt;&lt;p&gt;I mention this in nearly every chapter, but it’s worth emphasizing. Complexity slows you down, so treat simplicity as a precious resource.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;I think of it in terms of pushing and pulling. You have some code A that wants another chunk B to do some work. The natural way for A to initiate that is by &lt;em&gt;pushing&lt;/em&gt; the request to B.&lt;/p&gt;
&lt;p&gt;Meanwhile, the natural way for B to process that request is by &lt;em&gt;pulling&lt;/em&gt; it in at a convenient time in &lt;em&gt;its&lt;/em&gt; run cycle. When you have a push model on one end and a pull model on the other, you need a buffer between them. That’s what a queue provides that simpler decoupling patterns don’t.&lt;/p&gt;
&lt;p&gt;Queues give control to the code that pulls from it — the receiver can delay processing, aggregate requests, or discard them entirely. But queues do this by taking control &lt;em&gt;away&lt;/em&gt; from the sender. All the sender can do is throw a request on the queue and hope for the best. This makes queues a poor fit when the sender needs a response.&lt;/p&gt;

&lt;p&gt;Unlike some more modest patterns in this book, event queues are complex and tend to have a wide-reaching effect on the architecture of our games. That means you’ll want to think hard about how — or if — you use one.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#a-central-event-queue-is-a-global-variable&quot; name=&quot;a-central-event-queue-is-a-global-variable&quot;&gt;A central event queue is a global variable&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One common use of this pattern is for a sort of Grand Central Station that all parts of the game can route messages through. It’s a powerful piece of infrastructure, but &lt;em&gt;powerful&lt;/em&gt; doesn’t always mean &lt;em&gt;good&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It took a while, but most of us learned the hard way that global variables are bad. When you have a piece of state that any part of the program can poke at, all sorts of subtle interdependencies creep in. This pattern wraps that state in a nice little protocol, but it’s still a global, with all of the danger that entails.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#the-state-of-the-world-can-change-under-you&quot; name=&quot;the-state-of-the-world-can-change-under-you&quot;&gt;The state of the world can change under you&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Say some AI code posts an “entity died” event to a queue when a virtual minion shuffles off its mortal coil. That event hangs out in the queue for who knows how many frames until it eventually works its way to the front and gets processed.&lt;/p&gt;
&lt;p&gt;Meanwhile, the experience system wants to track the heroine’s body count and reward her for her grisly efficiency. It receives each “entity died” event and determines the kind of entity slain and the difficulty of the kill so it can dish out an appropriate reward.&lt;/p&gt;
&lt;p&gt;That requires various pieces of state in the world. We need the entity that died so we can see how tough it was. We may want to inspect its surroundings to see what other obstacles or minions were nearby. But if the event isn’t received until later, that stuff may be gone. The entity may have been deallocated, and other nearby foes may have wandered off.&lt;/p&gt;
&lt;p&gt;When you receive an event, you have to be careful not to assume the &lt;em&gt;current&lt;/em&gt; state of the world reflects how the world was &lt;em&gt;when the event was raised&lt;/em&gt;. This means queued events tend to be more data heavy than events in synchronous systems. With the latter, the notification can say “something happened” and the receiver can look around for the details. With a queue, those ephemeral details must be captured when the event is sent so they can be used later.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#you-can-get-stuck-in-feedback-loops&quot; name=&quot;you-can-get-stuck-in-feedback-loops&quot;&gt;You can get stuck in feedback loops&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All event and message systems have to worry about cycles:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A sends an event.&lt;/li&gt;
&lt;li&gt;B receives it and responds by sending an event.&lt;/li&gt;
&lt;li&gt;That event happens to be one that A cares about, so it receives it. In response, it sends an event…&lt;/li&gt;
&lt;li&gt;Go to 2.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;When your messaging system is &lt;em&gt;synchronous&lt;/em&gt;, you find cycles quickly — they overflow the stack and crash your game. With a queue, the asynchrony unwinds the stack, so the game may keep running even though spurious events are &lt;span name=&quot;log&quot;&gt;sloshing&lt;/span&gt; back and forth in there. A common rule to avoid this is to avoid &lt;em&gt;sending&lt;/em&gt; events from within code that’s &lt;em&gt;handling&lt;/em&gt; one.&lt;/p&gt;
&lt;aside name=&quot;log&quot; readability=&quot;2&quot;&gt;&lt;p&gt;A little debug logging in your event system is probably a good idea too.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;We’ve already seen some code. It’s not perfect, but it has the right basic functionality — the public API we want and the right low-level audio calls. All that’s left for us to do now is fix its problems.&lt;/p&gt;
&lt;p&gt;The first is that our API &lt;em&gt;blocks&lt;/em&gt;. When a piece of code plays a sound, it can’t do anything else until &lt;code&gt;playSound()&lt;/code&gt; finishes loading the resource and actually starts making the speaker wiggle.&lt;/p&gt;
&lt;p&gt;We want to defer that work until later so that &lt;code&gt;playSound()&lt;/code&gt; can return quickly. To do that, we need to &lt;em&gt;reify&lt;/em&gt; the request to play a sound. We need a little structure that stores the details of a pending request so we can keep it around until later:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlayMessage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SoundId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we need to give &lt;code&gt;Audio&lt;/code&gt; some storage space to keep track of these pending play messages. Now, your &lt;span name=&quot;prof&quot;&gt;algorithms professor&lt;/span&gt; might tell you to use some exciting data structure here like a &lt;a href=&quot;http://en.wikipedia.org/wiki/Fibonacci_heap&quot;&gt;Fibonacci heap&lt;/a&gt; or a &lt;a href=&quot;http://en.wikipedia.org/wiki/Skip_list&quot;&gt;skip list&lt;/a&gt;, or, hell, at least a &lt;em&gt;linked&lt;/em&gt; list. But in practice, the best way to store a bunch of homogenous things is almost always a plain old array:&lt;/p&gt;
&lt;aside name=&quot;prof&quot; readability=&quot;3&quot;&gt;&lt;p&gt;Algorithm researchers get paid to publish analyses of novel data structures. They aren’t exactly incentivized to stick to the basics.&lt;/p&gt;
&lt;/aside&gt;&lt;aside name=&quot;locality&quot; readability=&quot;2.561797752809&quot;&gt;&lt;p&gt;For lots more on what being “cache friendly” means, see the chapter on &lt;a href=&quot;https://gameprogrammingpatterns.com/data-locality.html&quot; class=&quot;pattern&quot;&gt;Data Locality&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;So let’s do that:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Audio&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Other stuff...&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlayMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can tune the array size to cover our worst case. To play a sound, we simply slot a new message in there at the end:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoundId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This lets &lt;code&gt;playSound()&lt;/code&gt; return almost instantly, but we do still have to play the sound, of course. That code needs to go somewhere, and that somewhere is an &lt;code&gt;update()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Audio&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ResourceId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findOpenChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;numPending_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Other stuff...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;aside name=&quot;update&quot; readability=&quot;2.2909090909091&quot;&gt;&lt;p&gt;As the name implies, this is the &lt;a href=&quot;https://gameprogrammingpatterns.com/update-method.html&quot; class=&quot;pattern&quot;&gt;Update Method&lt;/a&gt; pattern.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Now, we need to call that from somewhere convenient. What “convenient” means depends on your game. It may mean calling it from the main &lt;a href=&quot;https://gameprogrammingpatterns.com/game-loop.html&quot; class=&quot;pattern&quot;&gt;game loop&lt;/a&gt; or from a dedicated audio thread.&lt;/p&gt;
&lt;p&gt;This works fine, but it does presume we can process &lt;em&gt;every&lt;/em&gt; sound request in a single call to &lt;code&gt;update()&lt;/code&gt;. If you’re doing something like processing a request asynchronously after its sound resource is loaded, that won’t work. For &lt;code&gt;update()&lt;/code&gt; to work on one request at a time, it needs to be able to pull requests out of the buffer while leaving the rest. In other words, we need an actual queue.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#a-ring-buffer&quot; name=&quot;a-ring-buffer&quot;&gt;A ring buffer&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are a bunch of ways to implement queues, but my favorite is called a &lt;em&gt;ring buffer&lt;/em&gt;. It preserves everything that’s great about arrays while letting us incrementally remove items from the front of the queue.&lt;/p&gt;
&lt;p&gt;Now, I know what you’re thinking. If we remove items from the beginning of the array, don’t we have to shift all of the remaining items over? Isn’t that slow?&lt;/p&gt;
&lt;p&gt;This is why they made us learn linked lists — you can remove nodes from them without having to shift things around. Well, it turns out you can implement a queue without any shifting in an array too. I’ll walk you through it, but first let’s get precise on some terms:&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The &lt;strong&gt;head&lt;/strong&gt; of the queue is where requests are &lt;em&gt;read&lt;/em&gt; from. The head is the oldest pending request.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;The &lt;strong&gt;tail&lt;/strong&gt; is the other end. It’s the slot in the array where the next enqueued request will be &lt;em&gt;written&lt;/em&gt;. Note that it’s just &lt;em&gt;past&lt;/em&gt; the end of the queue. You can think of it as a half-open range, if that helps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Since &lt;code&gt;playSound()&lt;/code&gt; appends new requests at the end of the array, the head starts at element zero and the tail grows to the right.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gameprogrammingpatterns.com/images/event-queue-queue.png&quot; alt=&quot;An array of events. The head points to the first element, and the tail grows to the right.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Let’s code that up. First, we’ll tweak our fields a bit to make these two markers explicit in the class:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Audio&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Methods...&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Array...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the implementation of &lt;code&gt;playSound()&lt;/code&gt;, &lt;code&gt;numPending_&lt;/code&gt; has been replaced with &lt;code&gt;tail_&lt;/code&gt;, but otherwise it’s the same:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoundId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Add to the end of the list.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The more interesting change is in &lt;code&gt;update()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If there are no pending requests, do nothing.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ResourceId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findOpenChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We process the request at the head and then discard it by advancing the head pointer to the right. We detect an &lt;span name=&quot;empty&quot;&gt;empty queue&lt;/span&gt; by seeing if there’s any distance between the head and tail.&lt;/p&gt;
&lt;aside name=&quot;empty&quot; readability=&quot;3&quot;&gt;&lt;p&gt;This is why we made the tail one &lt;em&gt;past&lt;/em&gt; the last item. It means that the queue will be empty if the head and tail are the same index.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Now we’ve got a queue — we can add to the end and remove from the front. There’s an obvious problem, though. As we run requests through the queue, the head and tail keep crawling to the right. Eventually, &lt;code&gt;tail_&lt;/code&gt; hits the end of the array, and &lt;span name=&quot;party&quot;&gt;party time&lt;/span&gt; is over. This is where it gets clever.&lt;/p&gt;
&lt;aside name=&quot;party&quot; readability=&quot;2&quot;&gt;&lt;p&gt;Do you want party time to be over? No. You do not.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;&lt;img src=&quot;https://gameprogrammingpatterns.com/images/event-queue-crawl.png&quot; alt=&quot;The same array as before but now the head is moving towards the right, leaving available cells on the left.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Notice that while the tail is creeping forward, the &lt;em&gt;head&lt;/em&gt; is too. That means we’ve got array elements at the &lt;em&gt;beginning&lt;/em&gt; of the array that aren’t being used anymore. So what we do is wrap the tail back around to the beginning of the array when it runs off the end. That’s why it’s called a &lt;em&gt;ring&lt;/em&gt; buffer — it acts like a circular array of cells.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gameprogrammingpatterns.com/images/event-queue-ring.png&quot; alt=&quot;The array wraps around and now the head can circle back to the beginning.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Implementing that is remarkably easy. When we enqueue an item, we just need to make sure the tail wraps around to the beginning of the array when it reaches the end:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoundId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Add to the end of the list.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replacing &lt;code&gt;tail_++&lt;/code&gt; with an increment modulo the array size wraps the tail back around. The other change is the assertion. We need to ensure the queue doesn’t overflow. As long as there are fewer than &lt;code&gt;MAX_PENDING&lt;/code&gt; requests in the queue, there will be a little gap of unused cells between the head and the tail. If the queue fills up, those will be gone and, like some weird backwards Ouroboros, the tail will collide with the head and start overwriting it. The assertion ensures that this doesn’t happen.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;update()&lt;/code&gt;, we wrap the head around too:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If there are no pending requests, do nothing.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ResourceId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findOpenChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There you go — a queue with &lt;span name=&quot;capacity&quot;&gt;no dynamic allocation&lt;/span&gt;, no copying elements around, and the cache-friendliness of a simple array.&lt;/p&gt;
&lt;aside name=&quot;capacity&quot; readability=&quot;10&quot;&gt;&lt;p&gt;If the maximum capacity bugs you, you can use a growable array. When the queue gets full, allocate a new array twice the size of the current array (or some other multiple), then copy the items over.&lt;/p&gt;
&lt;p&gt;Even though you copy when they array grows, enqueuing an item still has constant &lt;em&gt;amortized&lt;/em&gt; complexity.&lt;/p&gt;
&lt;/aside&gt;&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#aggregating-requests&quot; name=&quot;aggregating-requests&quot;&gt;Aggregating requests&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now that we’ve got a queue in place, we can move onto the other problems. The first is that multiple requests to play the same sound end up too loud. Since we know which requests are waiting to be processed now, all we need to do is merge a request if it matches an already pending one:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Audio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SoundId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Walk the pending requests.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_PENDING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Use the larger of the two volumes.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pending_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Don't need to enqueue.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Previous code...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we get two requests to play the same sound, we collapse them to a single request for whichever is loudest. This “aggregation” is pretty rudimentary, but we could use the same idea to do more interesting batching.&lt;/p&gt;
&lt;p&gt;Note that we’re merging when the request is &lt;em&gt;enqueued&lt;/em&gt;, not when it’s &lt;em&gt;processed&lt;/em&gt;. That’s easier on our queue since we don’t waste slots on redundant requests that will end up being collapsed later. It’s also simpler to implement.&lt;/p&gt;
&lt;p&gt;It does, however, put the processing burden on the caller. A call to &lt;code&gt;playSound()&lt;/code&gt; will walk the entire queue before it returns, which could be &lt;span name=&quot;slow&quot;&gt;slow&lt;/span&gt; if the queue is large. It may make more sense to aggregate in &lt;code&gt;update()&lt;/code&gt; instead.&lt;/p&gt;
&lt;aside name=&quot;slow&quot; readability=&quot;4&quot;&gt;&lt;p&gt;Another way to avoid the &lt;em&gt;O(n)&lt;/em&gt; cost of scanning the queue is to use a different data structure. If we use a hash table keyed on the &lt;code&gt;SoundId&lt;/code&gt;, then we can check for duplicates in constant time.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;There’s something important to keep in mind here. The window of “simultaneous” requests that we can aggregate is only as big as the queue. If we process requests more quickly and the queue size stays small, then we’ll have fewer opportunities to batch things together. Likewise, if processing lags behind and the queue gets full, we’ll find more things to collapse.&lt;/p&gt;
&lt;p&gt;This pattern insulates the requester from knowing when the request gets processed, but when you treat the entire queue as a live data structure to be played with, then lag between making a request and processing it can visibly affect behavior. Make sure you’re OK with that before doing this.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#spanning-threads&quot; name=&quot;spanning-threads&quot;&gt;Spanning threads&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Finally, the most pernicious problem. With our synchronous audio API, whatever thread called &lt;code&gt;playSound()&lt;/code&gt; was the thread that processed the request. That’s often not what we want.&lt;/p&gt;
&lt;p&gt;On today’s &lt;span name=&quot;multicore&quot;&gt;multi-core&lt;/span&gt; hardware, you need more than one thread if you want to get the most out of your chip. There are infinite ways to distribute code across threads, but a common strategy is to move each domain of the game onto its own thread — audio, rendering, AI, etc.&lt;/p&gt;
&lt;aside name=&quot;multicore&quot; readability=&quot;12&quot;&gt;&lt;p&gt;Straight-line code only runs on a single core at a time. If you don’t use threads, even if you do the asynchronous-style programming that’s in vogue, the best you’ll do is keep one core busy, which is a fraction of your CPU’s abilities.&lt;/p&gt;
&lt;p&gt;Server programmers compensate for that by splitting their application into multiple independent &lt;em&gt;processes&lt;/em&gt;. That lets the OS run them concurrently on different cores. Games are almost always a single process, so a bit of threading really helps.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;We’re in good shape to do that now that we have three critical pieces:&lt;/p&gt;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The code for requesting a sound is decoupled from the code that plays it.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;We have a queue for marshalling between the two.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;The queue is encapsulated from the rest of the program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;All that’s left is to make the methods that modify the queue — &lt;code&gt;playSound()&lt;/code&gt; and &lt;code&gt;update()&lt;/code&gt; — thread-safe. Normally, I’d whip up some concrete code to do that, but since this is a book about architecture, I don’t want to get mired in the details of any specific API or locking mechanism.&lt;/p&gt;
&lt;p&gt;At a high level, all we need to do is ensure that the queue isn’t modified concurrently. Since &lt;code&gt;playSound()&lt;/code&gt; does a very small amount of work — basically just assigning a few fields — it can lock without blocking processing for long. In &lt;code&gt;update()&lt;/code&gt;, we wait on something like a condition variable so that we don’t burn CPU cycles until there’s a request to process.&lt;/p&gt;

&lt;p&gt;Many games use event queues as a key part of their communication structure, and you can spend a ton of time designing all sorts of complex routing and filtering for messages. But before you go off and build something like the Los Angeles telephone switchboard, I encourage you to start simple. Here’s a few starter questions to consider:&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#what-goes-in-the-queue&quot; name=&quot;what-goes-in-the-queue&quot;&gt;What goes in the queue?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’ve used “event” and “message” interchangeably so far because it mostly doesn’t matter. You get the same decoupling and aggregation abilities regardless of what you’re stuffing in the queue, but there are some conceptual differences.&lt;/p&gt;
&lt;ul readability=&quot;1.9592114208022&quot;&gt;&lt;li readability=&quot;2.9655667144907&quot;&gt;
&lt;p&gt;&lt;strong&gt;If you queue events:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An “event” or “notification” describes something that &lt;em&gt;already&lt;/em&gt; happened, like “monster died”. You queue it so that other objects can &lt;em&gt;respond&lt;/em&gt; to the event, sort of like an asynchronous &lt;a href=&quot;https://gameprogrammingpatterns.com/observer.html&quot; class=&quot;gof-pattern&quot;&gt;Observer&lt;/a&gt; pattern.&lt;/p&gt;
&lt;ul readability=&quot;2.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;em&gt;You are likely to allow multiple listeners.&lt;/em&gt; Since the queue contains things that already happened, the sender probably doesn’t care who receives it. From its perspective, the event is in the past and is already forgotten.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;em&gt;The scope of the queue tends to be broader.&lt;/em&gt; Event queues are often used to &lt;em&gt;broadcast&lt;/em&gt; events to any and all interested parties. To allow maximum flexibility for which parties can be interested, these queues tend to be more globally visible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;3.4003880983182&quot;&gt;
&lt;p&gt;&lt;strong&gt;If you queue messages:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A &lt;span name=&quot;command&quot;&gt;“message”&lt;/span&gt; or “request” describes an action that we &lt;em&gt;want&lt;/em&gt; to happen &lt;em&gt;in the future&lt;/em&gt;, like “play sound”. You can think of this as an asynchronous API to a service.&lt;/p&gt;
&lt;aside name=&quot;command&quot; readability=&quot;4.6788990825688&quot;&gt;&lt;p&gt;Another word for “request” is “command”, as in the &lt;a href=&quot;https://gameprogrammingpatterns.com/command.html&quot; class=&quot;gof-pattern&quot;&gt;Command&lt;/a&gt; pattern, and queues can be used there too.&lt;/p&gt;
&lt;/aside&gt;&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;6.2912205567452&quot;&gt;
&lt;p&gt;&lt;em&gt;You are more &lt;span name=&quot;locator&quot;&gt;likely&lt;/span&gt; to have a single listener.&lt;/em&gt; In the example, the queued messages are requests specifically for &lt;em&gt;the audio API&lt;/em&gt; to play a sound. If other random parts of the game engine started stealing messages off the queue, it wouldn’t do much good.&lt;/p&gt;
&lt;aside name=&quot;locator&quot; readability=&quot;6.5070422535211&quot;&gt;&lt;p&gt;I say “more likely” here, because you can enqueue messages without caring which code processes it, as long as it gets processed &lt;em&gt;how&lt;/em&gt; you expect. In that case, you’re doing something akin to a &lt;a href=&quot;https://gameprogrammingpatterns.com/service-locator.html&quot; class=&quot;pattern&quot;&gt;service locator&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#who-can-read-from-the-queue&quot; name=&quot;who-can-read-from-the-queue&quot;&gt;Who can read from the queue?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In our example, the queue is encapsulated and only the &lt;code&gt;Audio&lt;/code&gt; class can read from it. In a user interface’s event system, you can register listeners to your heart’s content. You sometimes hear the terms “single-cast” and “broadcast” to distinguish these, and both styles are useful.&lt;/p&gt;
&lt;ul readability=&quot;4&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;A single-cast queue:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the natural fit when a queue is part of a class’s API. Like in our audio example, from the caller’s perspective, they just see a &lt;code&gt;playSound()&lt;/code&gt; method they can call.&lt;/p&gt;
&lt;ul readability=&quot;6&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;em&gt;The queue becomes an implementation detail of the reader.&lt;/em&gt; All the sender knows is that it sent a message.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;em&gt;The queue is more encapsulated.&lt;/em&gt; All other things being equal, more encapsulation is usually better.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;You don’t have to worry about contention between listeners.&lt;/em&gt; With multiple listeners, you have to decide if they &lt;em&gt;all&lt;/em&gt; get every item (broadcast) or if &lt;em&gt;each&lt;/em&gt; item in the queue is parceled out to &lt;em&gt;one&lt;/em&gt; listener (something more like a work queue).&lt;/p&gt;
&lt;p&gt;In either case, the listeners may end up doing redundant work or interfering with each other, and you have to think carefully about the behavior you want. With a single listener, that complexity disappears.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;A broadcast queue:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is how most “event” systems work. If you have ten listeners when an event comes in, all ten of them see the event.&lt;/p&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;em&gt;Events can get dropped on the floor.&lt;/em&gt; A corollary to the previous point is that if you have &lt;em&gt;zero&lt;/em&gt; listeners, all zero of them see the event. In most broadcast systems, if there are no listeners at the point in time that an event is processed, the event gets discarded.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;You may need to filter events.&lt;/em&gt; Broadcast queues are often widely visible to much of the program, and you can end up with a bunch of listeners. Multiply lots of events times lots of listeners, and you end up with a ton of event handlers to invoke.&lt;/p&gt;
&lt;p&gt;To cut that down to size, most broadcast event systems let a listener winnow down the set of events they receive. For example, they may say they only want to receive mouse events or events within a certain region of the UI.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;A work queue:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like a broadcast queue, here you have multiple listeners too. The difference is that each item in the queue only goes to &lt;em&gt;one&lt;/em&gt; of them. This is a common pattern for parceling out jobs to a pool of concurrently running threads.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;You have to schedule.&lt;/em&gt; Since an item only goes to one listener, the queue needs logic to figure out the best one to choose. This may be as simple as round robin or random choice, or it could be some more complex prioritizing system.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#who-can-write-to-the-queue&quot; name=&quot;who-can-write-to-the-queue&quot;&gt;Who can write to the queue?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the flip side of the previous design choice. This pattern works with all of the possible read/write &lt;span name=&quot;configs&quot;&gt;configurations&lt;/span&gt;: one-to-one, one-to-many, many-to-one, or many-to-many.&lt;/p&gt;
&lt;aside name=&quot;configs&quot; readability=&quot;3&quot;&gt;&lt;p&gt;You sometimes hear “fan-in” used to describe many-to-one communication systems and “fan-out” for one-to-many.&lt;/p&gt;
&lt;/aside&gt;&lt;ul readability=&quot;0.99376947040498&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;&lt;strong&gt;With one writer:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This style is most similar to the synchronous &lt;a href=&quot;https://gameprogrammingpatterns.com/observer.html&quot; class=&quot;gof-pattern&quot;&gt;Observer&lt;/a&gt; pattern. You have one privileged object that generates events that others can then receive.&lt;/p&gt;
&lt;ul readability=&quot;1.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;You implicitly know where the event is coming from.&lt;/em&gt; Since there’s only one object that can add to the queue, any listener can safely assume that’s the sender.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;em&gt;You usually allow multiple readers.&lt;/em&gt; You can have a one-sender-one-receiver queue, but that starts to feel less like the communication system this pattern is about and more like a vanilla queue data structure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;With multiple writers:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is how our audio engine example works. Since &lt;code&gt;playSound()&lt;/code&gt; is a public method, any part of the codebase can add a request to the queue. “Global” or “central” event buses work like this too.&lt;/p&gt;
&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;3&quot;&gt;
&lt;p&gt;&lt;em&gt;You have to be more careful of cycles.&lt;/em&gt; Since anything can potentially put something onto the queue, it’s easier to accidentally enqueue something in the middle of handling an event. If you aren’t careful, that may trigger a feedback loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;em&gt;You’ll likely want some reference to the sender in the event itself.&lt;/em&gt; When a listener gets an event, it doesn’t know who sent it, since it could be anyone. If that’s something they need to know, you’ll want to pack that into the event object so that the listener can use it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com/event-queue.html#what-is-the-lifetime-of-the-objects-in-the-queue&quot; name=&quot;what-is-the-lifetime-of-the-objects-in-the-queue&quot;&gt;What is the lifetime of the objects in the queue?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a synchronous notification, execution doesn’t return to the sender until all of the receivers have finished processing the message. That means the message itself can safely live in a local variable on the stack. With a queue, the message outlives the call that enqueues it.&lt;/p&gt;
&lt;p&gt;If you’re using a garbage collected language, you don’t need to worry about this too much. Stuff the message in the queue, and it will stick around in memory as long as it’s needed. In C or C++, it’s up to you to ensure the object lives long enough.&lt;/p&gt;
&lt;ul readability=&quot;7.4238227146814&quot;&gt;&lt;li readability=&quot;4.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Pass ownership:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the &lt;span name=&quot;unique&quot;&gt;traditional&lt;/span&gt; way to do things when managing memory manually. When a message gets queued, the queue claims it and the sender no longer owns it. When it gets processed, the receiver takes ownership and is responsible for deallocating it.&lt;/p&gt;
&lt;aside name=&quot;unique&quot; readability=&quot;3&quot;&gt;&lt;p&gt;In C++, &lt;code&gt;unique_ptr&amp;lt;T&amp;gt;&lt;/code&gt; gives you these exact semantics out of the box.&lt;/p&gt;
&lt;/aside&gt;&lt;/li&gt;
&lt;li readability=&quot;5.5&quot;&gt;
&lt;p&gt;&lt;strong&gt;Share ownership:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These days, now that even C++ programmers are more comfortable with garbage collection, &lt;span name=&quot;shared&quot;&gt;shared&lt;/span&gt; ownership is more acceptable. With this, the message sticks around as long as anything has a reference to it and is automatically freed when forgotten.&lt;/p&gt;
&lt;aside name=&quot;shared&quot; readability=&quot;3&quot;&gt;&lt;p&gt;Likewise, the C++ type for this is &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;/li&gt;
&lt;li readability=&quot;6.3360091743119&quot;&gt;
&lt;p&gt;&lt;strong&gt;The queue owns it:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span name=&quot;pool&quot;&gt;Another option&lt;/span&gt; is to have messages &lt;em&gt;always&lt;/em&gt; live on the queue. Instead of allocating the message itself, the sender requests a “fresh” one from the queue. The queue returns a reference to a message already in memory inside the queue, and the sender fills it in. When the message gets processed, the receiver refers to the same message in the queue.&lt;/p&gt;
&lt;aside name=&quot;pool&quot; readability=&quot;2.5&quot;&gt;&lt;p&gt;In other words, the backing store for the queue is an &lt;a href=&quot;https://gameprogrammingpatterns.com/object-pool.html&quot; class=&quot;pattern&quot;&gt;object pool&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul readability=&quot;11.975364963504&quot;&gt;&lt;li readability=&quot;1.8823529411765&quot;&gt;
&lt;p&gt;I’ve mentioned this a few times already, but in many ways, this pattern is the asynchronous cousin to the well-known &lt;a href=&quot;https://gameprogrammingpatterns.com/observer.html&quot; class=&quot;gof-pattern&quot;&gt;Observer&lt;/a&gt; pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;9&quot;&gt;
&lt;p&gt;Like many patterns, event queues go by a number of aliases. One established term is “message queue”. It’s usually referring to a higher-level manifestation. Where our event queues are &lt;em&gt;within&lt;/em&gt; an application, message queues are usually used for communicating &lt;em&gt;between&lt;/em&gt; them.&lt;/p&gt;
&lt;p&gt;Another term is “publish/subscribe”, sometimes abbreviated to “pubsub”. Like “message queue”, it usually refers to larger distributed systems unlike the humble coding pattern we’re focused on.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7.2278820375335&quot;&gt;
&lt;p&gt;A &lt;a href=&quot;http://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;finite state machine&lt;/a&gt;, similar to the Gang of Four’s &lt;a href=&quot;https://gameprogrammingpatterns.com/state.html&quot; class=&quot;gof-pattern&quot;&gt;State&lt;/a&gt; pattern, requires a stream of inputs. If you want it to respond to those asynchronously, it makes sense to queue them.&lt;/p&gt;
&lt;p&gt;When you have a bunch of state machines sending messages to each other, each with a little queue of pending inputs (called a &lt;em&gt;mailbox&lt;/em&gt;), then you’ve re-invented the &lt;a href=&quot;http://en.wikipedia.org/wiki/Actor_model&quot;&gt;actor model&lt;/a&gt; of computation.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://golang.org/&quot;&gt;Go&lt;/a&gt; programming language’s built-in “channel” type is essentially an event or message queue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;nav/&gt;</description>
<pubDate>Fri, 21 Aug 2020 08:49:09 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://gameprogrammingpatterns.com/event-queue.html</dc:identifier>
</item>
<item>
<title>ReMarkable MicroSD (2019)</title>
<link>http://www.davisr.me/projects/remarkable-microsd/</link>
<guid isPermaLink="true" >http://www.davisr.me/projects/remarkable-microsd/</guid>
<description>&lt;p&gt;This page discusses how I added a microSD card to my &lt;a href=&quot;https://arstechnica.com/gadgets/2017/12/remarkable-tablet-review-the-high-price-of-getting-that-paper-feeling/&quot;&gt;reMarkable tablet&lt;/a&gt;. I did this because I want to develop software for my rM without wearing out the internal eMMC. I chose an external card because I want to be able to swap them easily; it also makes backups faster.&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://www.davisr.me/projects/remarkable-microsd/34.jpg&quot; alt=&quot;Opened reMarkable tablet&quot; class=&quot;full&quot;/&gt;

&lt;p&gt;The aluminum back panel is held to the plastic case with glue. I have not yet determined what melts this glue, or how to “properly” take the back off. I was able to lift it off, by starting slowly in a corner. Thereafter, I used a putty knife to slowly peel it away. The panel bent, but I was able to bend it mostly-flat again.&lt;/p&gt;
&lt;p&gt;Next, there is a magnesium chassis screwed to the plastic case. Underneath the rubber feet are six silver screws. There are also XX black screws, that must be removed.&lt;/p&gt;
&lt;p&gt;The epaper display is glued to the magnesium chassis; don’t try to pull it apart. There is also a white silicone-like substance around the edge of the epaper panel, which seems to disintegrate and flake off. I think it fills the gap, and perhaps offers a little waterproofing. This is non-replaceable. The screen can be pushed apart from the plastic chassis. It is held on the perimeter with plastic latches, so split it with a spudger and go slowly.&lt;/p&gt;
&lt;p&gt;With the case off, the guts can be removed. There are five connectors to the logic board. In clockwise order starting at top-left: power button, touch panel, antenna, epaper display, USB daughterboard and buttons, and Wacom digitizer.&lt;/p&gt;
&lt;p&gt;Finally, the logic board can be removed. It is held with six small screws and washers. Underneath the logic board is a plastic tape, a section of which must be removed around the SD pads.&lt;/p&gt;
&lt;img src=&quot;http://www.davisr.me/projects/remarkable-microsd/mmc-pads.jpg&quot; alt=&quot;MMC solder pads&quot; class=&quot;full&quot;/&gt;
&lt;p&gt;The bottom-right seemed like an appropriate placement for the card socket, because the area is already spacious. The right side was easier to route the cables to, because of the channels cut in the white plastic case. I reassembled the reMarkable prior to soldering, to ensure no bulges or deformities appered.&lt;/p&gt;
&lt;img src=&quot;http://www.davisr.me/projects/remarkable-microsd/placement.JPG&quot; alt=&quot;Placing the microSD slot in the lower right corner&quot; class=&quot;full&quot;/&gt;
&lt;p&gt;Using ten 30 AWG wires and plenty of flux, I connected the board to the socket. The board indicates which pin is first. The board has a ninth pin, which is used for card-detect. This gets pulled low when a card is inserted.&lt;/p&gt;
&lt;img src=&quot;http://www.davisr.me/projects/remarkable-microsd/flatcable.JPG&quot; alt=&quot;Wires underneath logic board&quot; class=&quot;full&quot;/&gt;&lt;p&gt;To keep things as flat as possible, I used cellophane tape to mate the wires to the board. They feed out beneath the digitizer’s FFC cable in one beautiful ribbon. This also prevents elecrical contact to the grounded chassis.&lt;br/&gt;&lt;/p&gt;
&lt;img src=&quot;http://www.davisr.me/projects/remarkable-microsd/wires.JPG&quot; alt=&quot;Wires on back&quot; class=&quot;full&quot;/&gt;
&lt;p&gt;I drilled the SD slot by-hand with a rotary tool. Starting with a carving bit on the inside, I first hollowed out the area to give me a thin veneer, measured with a flashlight. Once I felt it was thin enough, I drilled from the front with a pointy sanding bit, and cut longitudinally.&lt;/p&gt;
&lt;p&gt;The magnesium chassis had a small section removed, which was easy with a tiny wire cutter. While it sacrifices a little bit of strength, it makes up for it in storage capacity.&lt;/p&gt;
&lt;p&gt;After testing the fit once again, I fillited epoxy around the edge of the socket, gluing it down. I was careful not to get any inside the socket.&lt;/p&gt;
&lt;img src=&quot;http://www.davisr.me/projects/remarkable-microsd/externalshot.JPG&quot; alt=&quot;microSD slot from the outside&quot; class=&quot;full&quot;/&gt;
&lt;p&gt;The stock rM kernel doesn't enable the SDHC1 slot, which is how these pins are designated in the device tree file. I recommend first being comforable with &lt;a href=&quot;https://github.com/torwag/remarkableflash&quot;&gt;this remarkable-flash guide&lt;/a&gt;, the &lt;a href=&quot;http://www.davisr.me/projects/remarkable-microsd/i.MX_BSP_Porting_Guide_Linux.pdf&quot;&gt;NXP porting guide for the i.MX6 processor&lt;/a&gt;, and the &lt;a href=&quot;http://www.davisr.me/projects/remarkable-microsd/i.MX_Yocto_Project_User%27s_Guide_Linux.pdf&quot;&gt;i.MX Yocto user guide&lt;/a&gt;.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;The rM is a mostly-vanilla i.MX6 board (many share similaries, including the &lt;a href=&quot;http://www.davisr.me/projects/remarkable-microsd/pico-imx6ul-emmc-hobbit-reva1-hardware-manual-20160328.pdf&quot;&gt;Hobbitboard&lt;/a&gt;). As such, it shares the same SDHC interface. What the microSD slot connects to, and what the stock kernel does not activate, is the SDHC1 interface. This can be enabled in the device tree, and the kernel may be recompiled to include support for an SD card.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;By default, the sdhc1 interface is disabled in the device tree. Enabling this is the first step. Copy the &lt;code&gt;arch/arm/boot/dts/zero-gravitas-factory.dts&lt;/code&gt; over &lt;code&gt;arch/arm/boot/dts/zero-gravitas.dts&lt;/code&gt;. Then, edit it to enable the sdhc1 interface like shown in the diff below.&lt;/p&gt;
&lt;pre&gt;
 &amp;amp;usdhc1 {&lt;br/&gt;pinctrl-names = &quot;default&quot;, &quot;state_100mhz&quot;, &quot;state_200mhz&quot;;&lt;br/&gt;pinctrl-0 = &amp;lt;&amp;amp;pinctrl_usdhc1&amp;gt;;&lt;br/&gt;pinctrl-1 = &amp;lt;&amp;amp;pinctrl_usdhc1_100mhz&amp;gt;;&lt;br/&gt;pinctrl-2 = &amp;lt;&amp;amp;pinctrl_usdhc1_200mhz&amp;gt;;&lt;br/&gt;bus-width = &amp;lt;4&amp;gt;;&lt;br/&gt;cd-gpios = &amp;lt;&amp;amp;gpio4 7 GPIO_ACTIVE_LOW&amp;gt;;&lt;br/&gt;disable-wp;&lt;br/&gt;wp-controller;&lt;br/&gt;keep-power-in-suspend;&lt;br/&gt;enable-sdio-wakeup;&lt;br/&gt;no-1-8-v;&lt;br/&gt;/*disable-wp;*/&lt;br/&gt;-       status = &quot;disabled&quot;;&lt;br/&gt;+       status = &quot;okay&quot;;&lt;br/&gt;};
&lt;/pre&gt;
&lt;p&gt;Next, &lt;code&gt;make zero-gravitas_defconfig&lt;/code&gt; and edit the &lt;code&gt;.config&lt;/code&gt; file produced to include the following drivers.&lt;/p&gt;
&lt;pre&gt;
CONFIG_CFG80211=y
CONFIG_MAC80211=y
CONFIG_BRCMUTIL=y
CONFIG_BRCMFMAC=y
CONFIG_RTL_CARDS=y
CONFIG_BATTERY_BQ27XXX=y
CONFIG_BATTERY_BQ27XXX_I2C=y
CONFIG_USB_ACM=y
CONFIG_USB_F_ACM=y
CONFIG_USB_U_SERIAL=y
CONFIG_USB_CDC_COMPOSITE=y
CONFIG_CRYPTO_AEAD=y
CONFIG_CRYPTO_GF128MUL=y
CONFIG_CRYPTO_NULL=y
CONFIG_CRYPTO_CCM=y
CONFIG_CRYPTO_GCM=y
CONFIG_CRYPTO_SEQIV=y
CONFIG_CRYPTO_CTR=y
CONFIG_CRYPTO_GHASH=y
CONFIG_CRYPTO_ARC4=y
&lt;/pre&gt;
&lt;p&gt;Once done, rebuild the Linux kernel with &lt;code&gt;make&lt;/code&gt;. Copy the artifacts to the rM's &lt;code&gt;/boot&lt;/code&gt; directory: &lt;code&gt;arch/arm/boot/dts/zero-gravitas.dtb&lt;/code&gt; and &lt;code&gt;arch/arm/boot/zImage&lt;/code&gt;. I have included my artifacts &lt;a href=&quot;http://www.davisr.me/projects/remarkable-microsd/boot.tar&quot;&gt;here&lt;/a&gt; for posterity, but it is foolish to install a kernel that someone else compiled.&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Reboot the rM, to make sure xochitl still runs. Then, check &lt;code&gt;dmesg | grep ‘mmc0’&lt;/code&gt; to ensure the card was detected, and double-check it with &lt;code&gt;fdisk -l&lt;/code&gt;. Partition your card as you like, then change the /etc/fstab option to mount that partition at /home.&lt;/p&gt;
&lt;pre&gt;
root@reMarkable:~# dmesg | grep mmc0
[    2.091218] mmc0: SDHCI controller on 2190000.usdhc [2190000.usdhc] using DMA
[    2.377570] mmc0: new high speed SDXC card at address aaaa
[    2.391939] mmcblk0: mmc0:aaaa SC200 183 GiB 
&lt;/pre&gt;
&lt;pre&gt;
#/dev/mmcblk1p7 /home auto defaults,nofail 1 2
/dev/mmcblk0p7 /home auto defaults,nofail 1 2
&lt;/pre&gt;
&lt;p&gt;Reboot, and bask in the increased storage capacity.&lt;/p&gt;
&lt;img src=&quot;http://www.davisr.me/projects/remarkable-microsd/storage-screen.png&quot; alt=&quot;Storage screen showing 179 GB free&quot; class=&quot;full&quot;/&gt;
&lt;ul&gt;&lt;li&gt;Now, the aluminum back is held on with gaffer tape. I am afraid to glue it shut, in case I want to access the guts again.&lt;/li&gt;
&lt;li&gt;Maybe the white stuff that came out around the bezel can be replaced with calk&lt;/li&gt;
&lt;li&gt;I wish I had used multicolor wires, because it was difficult following them with my eyes.&lt;/li&gt;
&lt;li&gt;I didn’t cut close enough to the top of the plastic case, and so my SD slot is taller than it needs to be, but it isn't very noticable. I shimmed the extra vertical space with a folded up business card for a tighter fit.&lt;/li&gt;
&lt;li&gt;Before using solid-core wirewrap wire, I tried making my own ribbon cable with magenet wire and masking tape. This didn’t work well, because the enamel was hard to remove from just the ends, and the masking tape was too thick. The wirewrap wire turned out much nicer.&lt;/li&gt;
&lt;li&gt;Technically, I think the IMX needs to be changed too (and re-wrote over /dev/mmcblk1boot0) but I didn’t do this, and it seems to work alright. I'm fine using it just for the data partition so my OS updates work.&lt;/li&gt;
&lt;li&gt;I am glad this article has created encouragement from other people. I would like to extend an offer: if you would like a microSD card in your rM, and are willing to let me install one with the possibility of it not coming out exactly perfect (i.e. someone who finds ultimate use of rM in its utility, not pristine beauty) I would like to refine this process. One thing could be to install an internal card using quality flash media. I would like to know how many people could go for something like that, and if there could be a market doing that kind of thing. I will soon have installed my own CNC machine, and can practice doing this modification better, eventually charging for the service.&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;full&quot; src=&quot;http://www.davisr.me/projects/remarkable-microsd/backpanel.jpg&quot; alt=&quot;Back panel&quot;/&gt;&lt;img class=&quot;full&quot; src=&quot;http://www.davisr.me/projects/remarkable-microsd/connectors.jpg&quot; alt=&quot;Connectors&quot;/&gt;&lt;img class=&quot;full&quot; src=&quot;http://www.davisr.me/projects/remarkable-microsd/cracking-open.jpg&quot; alt=&quot;Splitting the case open&quot;/&gt;&lt;img class=&quot;full&quot; src=&quot;http://www.davisr.me/projects/remarkable-microsd/dontpullscreen.jpg&quot; alt=&quot;Don't pull the screen like this&quot;/&gt;&lt;p&gt;Don't peel the screen off!&lt;/p&gt;
&lt;img class=&quot;full&quot; src=&quot;http://www.davisr.me/projects/remarkable-microsd/openback.jpg&quot; alt=&quot;Open back&quot;/&gt;&lt;img class=&quot;full&quot; src=&quot;http://www.davisr.me/projects/remarkable-microsd/split-chassis.jpg&quot; alt=&quot;Split chassis&quot;/&gt;</description>
<pubDate>Fri, 21 Aug 2020 07:20:06 +0000</pubDate>
<dc:creator>devnonymous</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.davisr.me/projects/remarkable-microsd/</dc:identifier>
</item>
<item>
<title>AI slays top F-16 pilot in DARPA dogfight simulation</title>
<link>https://breakingdefense.com/2020/08/ai-slays-top-f-16-pilot-in-darpa-dogfight-simulation/</link>
<guid isPermaLink="true" >https://breakingdefense.com/2020/08/ai-slays-top-f-16-pilot-in-darpa-dogfight-simulation/</guid>
<description>&lt;div id=&quot;attachment_116417&quot; class=&quot;wp-caption alignnone&quot; readability=&quot;33&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-116417&quot; class=&quot;size-large wp-image-116417&quot; src=&quot;https://sites.breakingmedia.com/uploads/sites/3/2020/08/Screen-Shot-2020-08-20-at-4.18.53-PM-1024x577.png&quot; alt=&quot;&quot; width=&quot;720&quot; height=&quot;406&quot; srcset=&quot;https://sites.breakingmedia.com/uploads/sites/3/2020/08/Screen-Shot-2020-08-20-at-4.18.53-PM-1024x577.png 1024w, https://sites.breakingmedia.com/uploads/sites/3/2020/08/Screen-Shot-2020-08-20-at-4.18.53-PM-300x169.png 300w, https://sites.breakingmedia.com/uploads/sites/3/2020/08/Screen-Shot-2020-08-20-at-4.18.53-PM-768x433.png 768w, https://sites.breakingmedia.com/uploads/sites/3/2020/08/Screen-Shot-2020-08-20-at-4.18.53-PM-210x118.png 210w, https://sites.breakingmedia.com/uploads/sites/3/2020/08/Screen-Shot-2020-08-20-at-4.18.53-PM.png 1415w&quot; sizes=&quot;(max-width: 720px) 100vw, 720px&quot;/&gt;&lt;p id=&quot;caption-attachment-116417&quot; class=&quot;wp-caption-text&quot;&gt;Heron Systems’ AI pilot scores the final kill against AF F-16 instructor “Banger” in AlphaDogfight Trials&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;WASHINGTON: In a 5 to 0 sweep, an AI ‘pilot’ developed by Heron Systems beat one of the Air Force’s top F-16 fighter pilots in DARPA’s simulated aerial dogfight contest today.&lt;/p&gt;
&lt;p&gt;“It’s a giant leap,” said DARPA’s Justin (call sign “Glock”) Mock, who served as a commentator on the trials.&lt;/p&gt;
&lt;p&gt;AI still has a long way to go before the Air Force pilots would be ready to hand over the stick to an artificial intelligence during combat, DARPA officials said during &lt;a href=&quot;https://www.youtube.com/watch?v=NzdhIA2S35w&quot;&gt;today’s live broadcast&lt;/a&gt; of the &lt;a href=&quot;https://breakingdefense.com/2020/08/darpas-alphadogfight-tests-ai-pilots-combat-chops/&quot;&gt;AlphaDogfight trials.&lt;/a&gt; But the three-day trials show that AI systems can credibly maneuver an aircraft in a simple, one-on-one combat scenario and shoot its forward guns in a classic, WWII-style dogfight. On the other hand, they said, it was an impressive showing by an AI agent after only a year of development. (&lt;a href=&quot;https://breakingdefense.com/2020/08/darpas-alphadogfight-tests-ai-pilots-combat-chops/&quot;&gt;As I reported earlier this week&lt;/a&gt;, the program began back in September last year with eight teams developing their respective AIs.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://heronsystems.com/about/&quot;&gt;Heron&lt;/a&gt;, a small, female- and minority-owned company with offices in Maryland and Virginia, builds artificial intelligence agents, and is also a player in &lt;a href=&quot;https://breakingdefense.com/2020/08/darpa-wants-wargame-ai-to-never-fight-fair/&quot;&gt;DARPA’s Gamebreaker&lt;/a&gt; effort to explore tactics for disrupting enemy strategies using real-world games as platforms. The company beat eight other teams, including one led by defense giant Lockheed Martin — which came in second in the AlphaDogfight “semi-finals” that pitted the AI pilots against each other this morning.&lt;/p&gt;
&lt;p&gt;Heron’s team did a live-stream Q&amp;amp;A on Youtube. “Even a week before Trial 1, we had agents that were not very good at flying at all. We really turned it around, and since then we’ve been really number one,” said Ben Bell, Heron’s co-lead for the project. The team intends to publish later this year some of the details about its reinforcement learning process for the AI, he said.&lt;/p&gt;

&lt;p&gt;The trials were designed as a risk-reduction effort for DARPA’s Air Combat Evolution (ACE) program to flesh out how human and machine pilots share operational control of a fighter jet to maximize its chances of mission success. The overarching ACE concept is aimed at allowing the pilot to shift “from single platform operator to mission commander” in charge not just of flying their own aircraft but managing teams of drones slaved to their fighter jet. “ACE aims to deliver a capability that enables a pilot to attend to a broader, more global air command mission while their aircraft and teamed unmanned systems are engaged in individual tactics,” the &lt;a href=&quot;https://www.darpa.mil/program/air-combat-evolution&quot;&gt;ACE program website explains. &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Heron Systems’ AI was extremely aggressive in the games, with its AI pilot consistently able to turn and score killing hits on the simulated F-16 piloted by an unnamed Air Force pilot, with the call sign “Banger,”  a graduate of the Air Force’s highly selective Weapons School at Nellis AFB. The AI exhibited “superhuman aiming ability” during the simulation, Mock said.&lt;/p&gt;


&lt;p&gt;While the trials were not in anyway “definitive” of an AI pilot’s future capabilities or even its viability, Mock said, at the same time “what we saw was that in this limited area, in this specific scenario, we’ve got AI that works.”&lt;/p&gt;
&lt;p&gt;DARPA intends to take the simulator used in the trials, and the simulations, to Nellis, where other Air Force pilots can take a stab at trying to beat AI pilots. Next steps will be to move on to testing AI pilots’ capabilities to perform other types of aerial combat missions.&lt;/p&gt;
&lt;p&gt;Somewhere, the infamous Red Baron is no doubt laughing in amazement.&lt;/p&gt;


</description>
<pubDate>Fri, 21 Aug 2020 05:39:04 +0000</pubDate>
<dc:creator>MontagFTB</dc:creator>
<og:title>AI Slays Top F-16 Pilot In DARPA Dogfight Simulation</og:title>
<og:url>https://breakingdefense.com/2020/08/ai-slays-top-f-16-pilot-in-darpa-dogfight-simulation/</og:url>
<og:type>article</og:type>
<og:image>https://sites.breakingmedia.com/uploads/sites/3/2020/08/Screen-Shot-2020-08-20-at-4.18.53-PM-1024x577.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://breakingdefense.com/2020/08/ai-slays-top-f-16-pilot-in-darpa-dogfight-simulation/</dc:identifier>
</item>
</channel>
</rss>