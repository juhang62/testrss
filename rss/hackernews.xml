<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Firefox 66.0 released</title>
<link>https://www.mozilla.org/en-US/firefox/66.0/releasenotes/</link>
<guid isPermaLink="true" >https://www.mozilla.org/en-US/firefox/66.0/releasenotes/</guid>
<description>&lt;li id=&quot;note-787919&quot; readability=&quot;2.0816326530612&quot;&gt;
&lt;p&gt;Firefox now prevents websites from automatically playing sound. You can &lt;a href=&quot;https://support.mozilla.org/kb/block-autoplay&quot;&gt;add individual sites to an exceptions list or turn blocking off&lt;/a&gt;. To learn more about block autoplay, which will be rolled out gradually to all users, visit the &lt;a href=&quot;https://blog.mozilla.org/blog/2019/03/19/todays-firefox-aims-to-reduce-your-online-annoyances/#block-autoplay&quot;&gt;Mozilla blog&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;&lt;li id=&quot;note-787920&quot; readability=&quot;-0.76888888888889&quot;&gt;
&lt;p&gt;Improved search experience:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Find a specific webpage faster when you have a lot of tabs open: You can now &lt;a href=&quot;https://blog.mozilla.org/blog/2019/03/19/todays-firefox-aims-to-reduce-your-online-annoyances/#search-tabs&quot;&gt;search within all of your open tabs&lt;/a&gt; from the &lt;a href=&quot;https://support.mozilla.org/kb/search-open-tabs-firefox&quot;&gt;tab overflow menu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Easier search via a redesigned new tab in Private Windows&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li id=&quot;note-787923&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;Smoother scrolling: Scroll anchoring keeps content from jumping as images and ads load at the top of the page&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;note-787924&quot; readability=&quot;-0.7375415282392&quot;&gt;
&lt;p&gt;Improved performance and better user experience for extensions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Extensions now &lt;a href=&quot;https://blog.mozilla.org/addons/2019/02/15/extensions-in-firefox-66/&quot;&gt;store their settings in a Firefox database&lt;/a&gt;, rather than individual JSON files, making every site you visit faster&lt;/li&gt;
&lt;li&gt;A &lt;a href=&quot;https://support.mozilla.org/kb/manage-extension-shortcuts-firefox&quot;&gt;redesigned keyboard shortcuts section&lt;/a&gt; in about:addons makes it easier to view and adjust default shortcuts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li id=&quot;note-787925&quot; readability=&quot;0.76470588235294&quot;&gt;
&lt;p&gt;Redesigned certificate error pages help you &lt;a href=&quot;https://blog.mozilla.org/ux/2019/03/designing-better-security-warnings/&quot;&gt;better understand and resolve issues&lt;/a&gt;, including identification of certificate issuers for anti-virus software&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;note-787927&quot; readability=&quot;-1&quot;&gt;
&lt;p&gt;Added basic support for macOS Touch Bar&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;note-787928&quot; readability=&quot;0&quot;&gt;
&lt;p&gt;Experimenting with an &lt;a href=&quot;https://help.getpocket.com/article/1149-firefox-home-layout-tests-faq&quot;&gt;improved Pocket experience&lt;/a&gt; in New Tab with different layouts and more topical content&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;note-787926&quot; readability=&quot;-0.48979591836735&quot;&gt;
&lt;p&gt;Improved performance and reduced crash rates by &lt;a href=&quot;http://www.erahm.org/2019/03/13/doubling-the-number-of-content-processes-in-firefox/&quot;&gt;doubling web content loading processes from 4 to 8&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;note-787929&quot; readability=&quot;3.3793103448276&quot;&gt;
&lt;p&gt;Easier, passwordless security: Added support for &lt;a href=&quot;https://blog.mozilla.org/security/2019/03/19/passwordless-web-authentication-support-via-windows-hello/&quot;&gt;Windows Hello on Windows 10&lt;/a&gt;, allowing you to use your face, fingerprint, or external security keys for website authentication&lt;/p&gt;
&lt;/li&gt;
</description>
<pubDate>Tue, 19 Mar 2019 13:41:52 +0000</pubDate>
<dc:creator>sahin-boydas</dc:creator>
<og:type>website</og:type>
<og:url>https://www.mozilla.org/en-US/firefox/66.0/releasenotes/</og:url>
<og:image>https://www.mozilla.org/media/img/firefox/template/page-image.4b108ed0b8d8.png</og:image>
<og:title>Firefox 66.0, See All New Features, Updates and Fixes</og:title>
<og:description></og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.mozilla.org/en-US/firefox/66.0/releasenotes/</dc:identifier>
</item>
<item>
<title>KDE Connect removed from Google Play store for violating new policy on SMS</title>
<link>https://twitter.com/albertvaka/status/1107924633750253568</link>
<guid isPermaLink="true" >https://twitter.com/albertvaka/status/1107924633750253568</guid>
<description>&lt;p&gt;Google only provides one-way forms to contact them. I've filled the forms regarding this policy change (including one they sent to existing apps before the policy was effective) but never got an explanation to why KDE Connect doesn't qualify as a companion app. 2/N&lt;/p&gt;
</description>
<pubDate>Tue, 19 Mar 2019 09:09:29 +0000</pubDate>
<dc:creator>coolgoose</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/albertvaka/status/1107924633750253568</dc:identifier>
</item>
<item>
<title>x86 Bare Metal Examples</title>
<link>https://github.com/cirosantilli/x86-bare-metal-examples</link>
<guid isPermaLink="true" >https://github.com/cirosantilli/x86-bare-metal-examples</guid>
<description>&lt;div class=&quot;Box-header d-flex flex-items-center flex-justify-between px-2&quot;&gt;
&lt;h3 class=&quot;Box-title pr-3&quot;&gt;README.adoc&lt;/h3&gt;
&lt;/div&gt;
&lt;div class=&quot;Box-body p-6&quot;&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt;
&lt;div id=&quot;user-content-preamble&quot;&gt;
&lt;div&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/master/logo.jpg&quot;&gt;&lt;span&gt;&lt;img src=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/raw/master/logo.jpg&quot; alt=&quot;logo&quot;/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;

&lt;div&gt;
&lt;p&gt;Then on Ubuntu:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./configure
make
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Each &lt;code&gt;.S&lt;/code&gt; file on the top-level is an operating system! It gets compiled to a corresponding &lt;code&gt;.img&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Run the default OS on QEMU:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Run a given OS:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run min
./run bios_one_char
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Extensions are ignored for perfect tab completion, so all the following are equivalent:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run min
./run min.
./run min.S
./run min.img
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Use Bochs instead of QEMU:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_hello_world bochs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then on the terminal start the simulation with:&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;h3 id=&quot;user-content-getting-started-with-real-hardware&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#getting-started-with-real-hardware&quot;&gt;1.1. Getting started with real hardware&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Insert an USB, determine its device (&lt;code&gt;/dev/sdX&lt;/code&gt;) with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
sudo lsblk
sudo fdisk -l
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Pick the &lt;code&gt;.img&lt;/code&gt; file that you wan to run and:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
sudo dd if=bios_hello_world.img of=/dev/sdX
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;insert the USB in a computer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;during boot, hit some special hardware dependant key, usually F12, Esc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;choose to boot from the USB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;When you are done, just hit the power button to shutdown.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-getting-started-with-the-big-image&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#getting-started-with-the-big-image&quot;&gt;1.1.1. Getting started with the big image&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Create a &lt;code&gt;big.img&lt;/code&gt; that contains all examples that can be booted from GRUB:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
make big.img
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Now if you do:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
sudo dd if=big.img of=/dev/sdX
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;you can test several examples with a single USB burn, which is much faster.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You can also try out the big image on QEMU for fun with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
qemu-system-i386 -hda big.img
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You will also want to change the boot order to put the USB first from the F12 BIOS menu. This way you don’t have to hit F12 like a madman every time.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: boot sectors that load STAGE2 are not working with the big image chainloader. TODO why?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-getting-started-with-docker&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#getting-started-with-docker&quot;&gt;1.2. Getting started with Docker&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;If you don’t have an Ubuntu box, this is an easy alternative:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
sudo docker run -it --net=host ubuntu:14.04 bash
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Then proceed normally in the guest: install packages, and build:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
apt-get update
apt-get install git
git clone https://github.com/cirosantilli/x86-bare-metal-examples
cd x86-bare-metal-examples
./configure
make
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;To overcome the lack of GUI, we can use QEMU’s VNC implementation instead of the default SDL, which is visible on the host due to &lt;code&gt;--net=host&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
qemu-system-i386 -hda main.img -vnc :0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and then on host:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
sudo apt-get install vinagre
vinagre localhost:5900
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-gdb-step-debug&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#gdb-step-debug&quot;&gt;1.3. GDB step debug&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;TODO get it working nicely:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_hello_world debug
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This will only cover specifics, you have to know GDB debugging already.&lt;/p&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;TODO: detect if we are on 16 or 32 bit automatically from control registers. Now I’m using 2 functions &lt;code&gt;16&lt;/code&gt; and &lt;code&gt;32&lt;/code&gt; to switch manually, but that sucks. The problem is that it’s not possible to read them directly: &lt;a href=&quot;http://stackoverflow.com/a/31340294/895245&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/a/31340294/895245&lt;/a&gt; If we had &lt;code&gt;cr0&lt;/code&gt;, it would be easy to do with an &lt;code&gt;if cr0 &amp;amp; 1&lt;/code&gt; inside a hook-stop.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;p&gt;These are the first ones you should look at.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-printf&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#printf&quot;&gt;2.1. Create a minimal image with printf&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
make -C printf run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome: QEMU window opens up, prints a few boot messages, and hangs.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Our program itself does not print anything to the screen itself, just makes the CPU halt.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This example is generated with &lt;code&gt;printf&lt;/code&gt; byte by byte: you can’t get more minimal than this!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It basically consists of:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;byte 0: a &lt;code&gt;hlt&lt;/code&gt; instruction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bytes 1 through 509: zeroes, could be anything&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bytes 510 and 511: mandatory magic bytes &lt;code&gt;0xAA55&lt;/code&gt;, which are required for BIOS to consider our disk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-minimal-gas-example&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#minimal-gas-example&quot;&gt;2.2. Minimal GAS example&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Minimal example that just halts the CPU without using our mini-library &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/master/common.h&quot;&gt;common.h&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;Outcome: QEMU window opens up, prints a few firmware messages, and hangs.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-infinite-loop&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#infinite-loop&quot;&gt;2.2.1. Infinite loop&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Go into an infinite loop instead of using &lt;code&gt;hlt&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run infinite_loop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;The outcome if visibly the same, but TODO: it likely wastes more energy in real hardware?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-linker-script&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#linker-script&quot;&gt;2.2.2. Linker script&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;This hello world, and most of our OSes use the linker script: &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/master/linker.ld&quot;&gt;linker.ld&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This critical file determines the memory layout of our assembly, take some time to read the comments in that file and familiarize yourself with it.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-bios-hello-world&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-hello-world&quot;&gt;2.3. BIOS hello world&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;hello world&lt;/code&gt; after the firmware messages:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_hello_world
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-c-hello-world&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#c-hello-world&quot;&gt;2.3.1. C hello world&lt;/a&gt;&lt;/h4&gt;

&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
cd c_hello_world
./run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;But keep in mind the following limitations and difficulties:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Therefore, for most applications, you will just want to use &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#multiboot&quot;&gt;Multiboot&lt;/a&gt; instead, which overcomes all of those problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;To disassemble the generated C code, try:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
objdump -D -m i8086 main.elf
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;but note that it still contains references to 32-bit references, e.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
00007c17 &amp;lt;main&amp;gt;:
    7c17:       66 55                   push   %ebp
    7c19:       66 89 e5                mov    %esp,%ebp
    7c1c:       66 83 ec 10             sub    $0x10,%esp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is because those instructions are modified by the prefix &lt;code&gt;0x66&lt;/code&gt;, which makes them behave like 32-bit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-no-linker-script&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#no-linker-script&quot;&gt;2.4. No linker script&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;hello world&lt;/code&gt; without using an explicit linker script:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
make -C no-linker-script run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;Uses the default host &lt;code&gt;ld&lt;/code&gt; script, not an explicit one set with &lt;code&gt;-T&lt;/code&gt;. Uses:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;-tText&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.org&lt;/code&gt; inside each assembly file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_start&lt;/code&gt; must be present to avoid a warning, since the default linker script expects it&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is a hack, it can be more convenient for quick and dirty tests, but just don’t use it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;p&gt;The BIOS is one of the most well known firmwares in existence.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;A firmware is a software a software that:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;runs before the OS / bootloader to do very low level setup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;usually closed source, provided by the vendor, and interacts with undocumented hardware APIs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;offers an API to the OS / bootloader, that allows you to do things like quick and dirty IO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;undistinguishable from an OS, except that is it usually smaller&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;BIOS is old, non-standardized, x86 omnipresent and limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#uefi&quot;&gt;UEFI&lt;/a&gt; is the shiny new overbloated thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If you are making a serious OS, use it as little as possible.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;BIOS functions are all accessed through the &lt;code&gt;int&lt;/code&gt; instruction:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
mov &amp;lt;function-id&amp;gt;, %ah
int &amp;lt;interrupt-id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Function arguments are stored in other registers.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The interrupt IDs are traditionally in hex as:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;which is the same as &lt;code&gt;0x10&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Each &lt;code&gt;interrupt-id&lt;/code&gt; groups multiple functions with similar functions, e.g. &lt;code&gt;10h&lt;/code&gt; groups functions with video related functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;h3 id=&quot;user-content-bios-examples&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-examples&quot;&gt;3.2. BIOS examples&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print a single &lt;code&gt;@&lt;/code&gt; character:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_putc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Print a newline:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_newline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
hello
     world
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Carriage returns are needed just like in old days:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_carriage_return
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
hello
world
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Change the current cursor position:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_cursor_position
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-color&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-color&quot;&gt;3.2.1. BIOS color&lt;/a&gt;&lt;/h4&gt;

&lt;div&gt;
&lt;p&gt;Write a character N times with given color:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_color
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;




&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; have red foreground, and green background&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt; has the default color (gray on black)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Change the background color to red for the entire screen and print an &lt;code&gt;a&lt;/code&gt; character:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_background
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-scroll&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-scroll&quot;&gt;3.2.2. BIOS scroll&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Scroll the screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_scroll
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;where &lt;code&gt;G&lt;/code&gt; are empty green squares.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;How it works:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Before scroll:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;We then choose to act on the rectangle with corners (1, 1) and (2, 2) given by &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;dx&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;and scroll that rectangle up by one line.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;Y&lt;/code&gt; is then filled with the fill color green&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-bios-clear-screen&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-clear-screen&quot;&gt;3.2.2.1. BIOS clear screen&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Subset of scroll:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_clear_screen
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;on red foreground, and the entire screen in green background, without any initial SeaBIOS messages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-draw-pixel&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-draw-pixel&quot;&gt;3.2.3. BIOS draw pixel&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Make the pixel at position (1, 1) clear red color (0Ch) in &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#video-mode-13h&quot;&gt;Video mode 13h&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_pixel
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;You may have to look a bit hard to see it.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Draw a line of such pixels:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_pixel_line
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Advanced graphics!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-keyboard&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-keyboard&quot;&gt;3.2.4. BIOS keyboard&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Get one character from the user via the keyboard, increment it by one, and print it to the screen, then halt:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_keyboard
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Type a bunch of characters and see them appear on the screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_keyboard_loop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Do try &lt;code&gt;Ctrl-key&lt;/code&gt; combinations.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-disk-load&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-disk-load&quot;&gt;3.2.5. BIOS disk load&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Load a stage 2 from disk with &lt;code&gt;int 13h&lt;/code&gt; and run it:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_disk_load
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;This character was printed from stage 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Load two sectors instead of just one:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_disk_load2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;where &lt;code&gt;a&lt;/code&gt; was printed from code on the first block, and &lt;code&gt;b&lt;/code&gt; from code on the second block.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This shows that each sector is 512 bytes long.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;GRUB 2.0 makes several calls to it under &lt;code&gt;grub-core/boot/i386/pc&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: not working on Bochs: &lt;code&gt;BOUND_GdMa: fails bounds test&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-detect-memory&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-detect-memory&quot;&gt;3.2.6. BIOS detect memory&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;TODO failed attempt at detecting how big our memory is with &lt;code&gt;int 15h&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_detect_memory
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Seems to output trash currently.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is important in particular so that you can start your stack there when you enter &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#protected-mode&quot;&gt;Protected mode&lt;/a&gt;, since the stack grows down.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In 16-bit mode, it does not matter much, since most modern machines have all addressable memory there, but in 32-bit protected it does, as our emulator usually does not have all 4Gb. And of course, 64-bit RAM is currently larger than the total RAM in the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;int 15&lt;/code&gt; returns a list: each time you call it a new memory region is returned.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;8 bytes: base address of region.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 bytes: length of region.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 bytes: type or region. 1 for usable RAM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 bytes: some ACPI stuff that no one uses?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-sleep&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-sleep&quot;&gt;3.2.7. BIOS sleep&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Count to infinity, sleep one second between each count:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_sleep
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Polls time counter that BIOS keeps up to date at &lt;code&gt;0x046C&lt;/code&gt; with frequency 18.2Hz eighteen times.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-bios-initial-state&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios-initial-state&quot;&gt;3.2.8. BIOS initial state&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Check the initial state the firmware leaves us by printing the contents of several registers:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run bios_initial_state
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
ax = 00 00
bx = 00 00
cx = 00 00
dx = 80 00
cs = 00 00
ds = 00 00
es = 00 00
fs = 00 00
gs = 00 00
ss = 00 00
cr0 = 53 FF 00 F0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;dx&lt;/code&gt; seems to be like the only interesting regular register: the firmware stores the value of the current disk number to help with &lt;code&gt;int 15h&lt;/code&gt; there. Thus it usually contains &lt;code&gt;0x80&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-dmidecode&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#dmidecode&quot;&gt;3.3. dmidecode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Get BIOS information. On host:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
sudo dmidecode
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;TODO: how is it obtained at the low level?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-seabios&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#seabios&quot;&gt;3.4. SeaBIOS&lt;/a&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;p&gt;Open source x86 BIOS implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Default BIOS for QEMU and KVM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;p&gt;The x86 processor has a few modes, which have huge impact on how the processor works.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Covered on the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3. Specially useful is the &quot;Figure 2-3. Transitions Among the Processor’s Operating Modes&quot; diagram.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The modes are:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Real-address, usually known just as &quot;real mode&quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protected&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IA-32e. Has two sub modes:&lt;/p&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Compatibility&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64-bit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Virtual-8086 Mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Transition tables:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
(all modes)
|
| Reset
|
v
+---------------------+
| Real address (PE=0) |
+---------------------+
^
|
| PE
|
v
+------------------------+
| Protected (PE=1, VM=0) |
+------------------------+
^                   ^
|                   |
|                   | VM
|                   |
v                   v
+--------------+    +---------------------+
| IA-32e       |    | Virtual-8086 (VM=1) |
+--------------+    +---------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
+------------------------+
| System management mode |
+------------------------+
|          ^
|          |
| RSM      | SMI#
|          |
v          |
(All other modes)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The IA-32e transition is trickier, but clearly described on the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3 - 9.8.5 &quot;Initializing IA-32e Mode&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Operating systems should follow this sequence to initialize IA-32e mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Starting from protected mode, disable paging by setting &lt;code&gt;CR0.PG = 0&lt;/code&gt;. Use the &lt;code&gt;MOV CR0&lt;/code&gt; instruction to disable paging (the instruction must be located in an identity-mapped page).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable physical-address extensions (PAE) by setting CR4.&lt;code&gt;PAE = 1&lt;/code&gt;. Failure to enable PAE will result in a &lt;code&gt;#GP&lt;/code&gt; fault when an attempt is made to initialize IA-32e mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load &lt;code&gt;CR3&lt;/code&gt; with the physical base address of the Level 4 page map table (PML4).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable IA-32e mode by setting &lt;code&gt;IA32_EFER.LME = 1&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable paging by setting &lt;code&gt;CR0.PG = 1&lt;/code&gt;. This causes the processor to set the &lt;code&gt;IA32_EFER.LMA&lt;/code&gt; bit to 1. The &lt;code&gt;MOV CR0&lt;/code&gt; instruction that enables paging and the following instructions must be located in an identity-mapped page (until such time that a branch to non-identity mapped pages can be effected).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-legacy-modes&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#legacy-modes&quot;&gt;4.1. Legacy modes&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;The term defined in the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3 - CHAPTER 2 &quot;SYSTEM ARCHITECTURE OVERVIEW&quot;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;Real mode, protected mode, virtual 8086 mode, and system management mode. These are sometimes referred to as legacy modes.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In other words: anything except IA-32e and System management mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This further suggests that real, protected and virtual mode are not the main intended modes of operation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-real-mode&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#real-mode&quot;&gt;4.2. Real mode&lt;/a&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;p&gt;The CPU starts in this mode after power up.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;All our &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios&quot;&gt;BIOS&lt;/a&gt; examples are in real mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It is possible to use 32-bit registers in this mode with the &quot;Operand Size Override Prefix&quot; &lt;code&gt;0x66&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO is it possible to access memory above 1M like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
mov $1, 0xF0000000
mov $1, (%eax)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-real-mode-segmentation&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#real-mode-segmentation&quot;&gt;4.2.1. Real mode segmentation&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run real_segmentation
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;We access the character &lt;code&gt;A&lt;/code&gt; with segments in 6 different ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;ds&lt;/code&gt;, with explicit and implicit segment syntax&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;es&lt;/code&gt;, &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;gs&lt;/code&gt;, &lt;code&gt;ss&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Segment registers modify the addresses that instructions actually use as:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
&amp;lt;segment&amp;gt; * 16 + &amp;lt;original-address&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This implies that:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;20 bits of memory (1MB) instead of the 16 bits (256kB) that normally fits into registers. E.g., to address:&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;we can use:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
0x8000  (segment)
0x 4000 (address)
-------
0x84000
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;most addresses can be encoded in multiple ways, e.g.:&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;can be encoded as either of:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;segment = &lt;code&gt;0x10&lt;/code&gt;, address = &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;segment = &lt;code&gt;0&lt;/code&gt;, address = &lt;code&gt;0x100&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;segment = &lt;code&gt;0x1&lt;/code&gt;, address = &lt;code&gt;0xF0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;gs&lt;/code&gt; are general purpose: they are not affected implicitly by any instructions. All others will be further exemplified.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-cs&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#cs&quot;&gt;4.2.1.1. CS&lt;/a&gt;&lt;/h5&gt;

&lt;div&gt;
&lt;p&gt;Affects the code address pointer:&lt;/p&gt;
&lt;/div&gt;




&lt;div&gt;
&lt;p&gt;&lt;code&gt;CS&lt;/code&gt; is set with the &lt;code&gt;ljmp&lt;/code&gt; instruction, and we use it to skip &lt;code&gt;.skip&lt;/code&gt; zero gaps in the code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-ss&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#ss&quot;&gt;4.2.1.2. SS&lt;/a&gt;&lt;/h5&gt;




&lt;div&gt;
&lt;p&gt;The second byte is 16 bytes after the first, and is accessed with &lt;code&gt;SP = 1&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;SS&lt;/code&gt; affects instructions that use &lt;code&gt;SP&lt;/code&gt; such as &lt;code&gt;PUSH&lt;/code&gt; and &lt;code&gt;POP&lt;/code&gt;: those will actually use &lt;code&gt;16 * SS + SP&lt;/code&gt; as the actual address.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-es&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#es&quot;&gt;4.2.1.3. ES&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;TODO: this does seem to have special properties as used by string instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-segment-register-encoding&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#segment-register-encoding&quot;&gt;4.2.1.4. Segment register encoding&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
objdump -D -b binary -m i8086 segment_registers.img
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;shows that non &lt;code&gt;ds&lt;/code&gt; encodings are achieved through a prefix:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
20:   a0 63 7c                mov    0x7c63,%al
34:   26 a0 63 7c             mov    %es:0x7c63,%al
40:   64 a0 63 7c             mov    %fs:0x7c63,%al
4c:   65 a0 63 7c             mov    %gs:0x7c63,%al
58:   36 a0 63 7c             mov    %ss:0x7c63,%al
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This makes &lt;code&gt;ds&lt;/code&gt; the most efficient one for data access, and thus a good default.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-interrupts&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#interrupts&quot;&gt;4.2.2. Interrupts&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Create an interrupt handler and handle an interrupt:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run interrupt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;It works like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;print &lt;code&gt;a&lt;/code&gt; an interrupt handler &lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jump back to main code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;print &lt;code&gt;b&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: is STI not needed because this interrupt is not maskable?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Same with interrupt handler &lt;code&gt;1&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run interrupt1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;TODO understand: attempt to create an infinite loop that calls the interrupt from the handler:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run interrupt_loop
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;QEMU exits with:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
Trying to execute code outside RAM or ROM at 0x000a0000
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Handle a division by zero:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run interrupt_zero_divide
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;TODO understand:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;expected outcome: prints values from 0 to &lt;code&gt;0xFFFF&lt;/code&gt; in an infinite loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;actual outcome: stops at &lt;code&gt;0081&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Apparently when there is an exception, &lt;code&gt;iret&lt;/code&gt; jumps back to the line that threw the exception itself, not the one after, which leads to the loop:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;But then why does it stop at &lt;code&gt;0081&lt;/code&gt;? And if we set the initial value to &lt;code&gt;0x0090&lt;/code&gt;, it just runs once.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-int&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#int&quot;&gt;4.2.2.1. int&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;long jumps to the CS : IP found in the corresponding interrupt vector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pushes EFLAGS to let them be restored by iret?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-iret&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#iret&quot;&gt;4.2.2.2. iret&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Jumps back to the next instruction to be executed before the interrupt came in.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Restores EFLAGS and other registers TODO which?&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;
&lt;h5 id=&quot;user-content-ivt&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#ivt&quot;&gt;4.2.2.4. IVT&lt;/a&gt;&lt;/h5&gt;

&lt;div&gt;
&lt;p&gt;The real mode in-memory table that stores the address for the handler for each interrupt.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;The base address is set in the interrupt descriptor table register (IDTR), which can be modified with the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#lidt&quot;&gt;lidt&lt;/a&gt; instruction.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The default address is &lt;code&gt;0x0&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The format of the table is:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
IDTR -&amp;gt; +-----------------------+
0       |Address      (2 bytes) |
2       |Code segment (2 bytes) |
        +-----------------------+
        +-----------------------+
4 ----&amp;gt; |Address      (2 bytes) |
6       |Code segment (2 bytes) |
        +-----------------------+
        +-----------------------+
8 ----&amp;gt; |Address      (2 bytes) |
A       |Code segment (2 bytes) |
        +-----------------------+

...     ...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h6 id=&quot;user-content-lidt&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#lidt&quot;&gt;4.2.2.4.1. lidt&lt;/a&gt;&lt;/h6&gt;
&lt;div&gt;
&lt;p&gt;Set the value of the IDTR, and therefore set the base address of the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#ivt&quot;&gt;IVT&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run lidt
./run lidt2
./run lidt0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;TODO not working.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Expected outcome:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Actual outcome: infinite reboot loop.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Actual outcome if we comment out the &lt;code&gt;PUTC&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;lidt&lt;/code&gt;: still infinite reboot loop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lidt2&lt;/code&gt; and &lt;code&gt;lidt0&lt;/code&gt;: halt apparently&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;I think I understand that &lt;code&gt;lidt&lt;/code&gt; takes as input a memory address, and the memory at that address must contain:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;2 bytes: total size of the IVT in bytes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4 bytes: base address of the IVT. Higher byte is ignored in real mode, since addresses are not 4 bytes long.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-protected-mode&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#protected-mode&quot;&gt;4.3. Protected mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;hello world&lt;/code&gt; in protected mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run protected_mode
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Major changes from real mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#vga&quot;&gt;VGA&lt;/a&gt; must be used for output since &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#bios&quot;&gt;BIOS&lt;/a&gt; is not available in protected mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#protected-mode-segmentation&quot;&gt;segmentation&lt;/a&gt; takes effect immediately, so we have to set the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#gdt&quot;&gt;GDT&lt;/a&gt; up&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;we have to encode instructions differently, thus a &lt;code&gt;.code32&lt;/code&gt; is needed. 16-bit mode 32-bit instructions are encodable with a special prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-intel-protected-mode-example&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-protected-mode-example&quot;&gt;4.3.1. Intel protected mode example&lt;/a&gt;&lt;/h4&gt;

&lt;div&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3 - 9.10 &quot;INITIALIZATION AND MODE SWITCHING EXAMPLE&quot; does contain an official example of how to go into protected mode.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;the code is inside the PDF, which breaks all the formatting, so we have copied it here to this repo&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TODO there is no known tool that can actually compile that syntax…​ although MASM should be close:&lt;/p&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;How can those guys be in business? &amp;gt;:-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-protected-mode-segmentation&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#protected-mode-segmentation&quot;&gt;4.3.3. Protected mode segmentation&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;TODO: get working:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run segmentation
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Expected outcome:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Actual outcome:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Example of the effect on a memory access of changing the segment base address.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Without segment manipulation, the output would be just: TODO&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-segmentation-introduction&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#segmentation-introduction&quot;&gt;4.3.3.1. Segmentation introduction&lt;/a&gt;&lt;/h5&gt;

&lt;div&gt;
&lt;p&gt;Segmentation modifies every memory access of a given segment by:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;adding an offset to it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;limiting how big the segment is&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If an access is made at an offset larger than allowed an exception happens, which is like an interrupt, and gets handled by a previously registered handler.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Segmentation could be used to implement virtual memory by assigning one segment per program:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
+-----------+--------+--------------------------+
| Program 1 | Unused | Program 2                |
+-----------+--------+--------------------------+
^           ^        ^                          ^
|           |        |                          |
Start1      End1     Start2                     End2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Besides address translation, the segmentation system also managed other features such as &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#protection-rings&quot;&gt;Protection rings&lt;/a&gt;. TODO: how are those done in 64-bit mode?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In Linux 32-bit for example, only two segments are used at all times: one at ring 0 for the kernel, and one another at privilege 3 for all user processes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-segment-selector&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#segment-selector&quot;&gt;4.3.3.2. Segment selector&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;In protected mode, the segment registers &lt;code&gt;CS&lt;/code&gt;, &lt;code&gt;DS&lt;/code&gt;, &lt;code&gt;SS&lt;/code&gt;, &lt;code&gt;ES&lt;/code&gt;, &lt;code&gt;FS&lt;/code&gt; and &lt;code&gt;GS&lt;/code&gt; contain a data structure more complex than a simple address as in real mode, which contains a single number.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This 2 byte data structure is called a &lt;em&gt;segment selector&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Position (bits)&lt;/th&gt;
&lt;th&gt;Size (bits)&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Request Privilege Level (RPL)&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Protection ring level, from 0 to 3.&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Table Indicator (TI)&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;0: global descriptor table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1: local descriptor table&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Index&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;
&lt;p&gt;Like in real mode, this data structure is loaded on the registers with a regular &lt;code&gt;mov&lt;/code&gt; mnemonic instruction.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography: &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3 - 3.4.5 &quot;Segment Descriptors&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-gdt&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#gdt&quot;&gt;4.3.3.3. GDT&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Global descriptor table.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;The &lt;code&gt;Index&lt;/code&gt; field of the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#segment-selector&quot;&gt;Segment selector&lt;/a&gt; chooses which one of those segment descriptors is to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The base address is set with the &lt;code&gt;lgdt&lt;/code&gt; instruction, which loads from memory a 6 byte structure:&lt;/p&gt;
&lt;/div&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Position (bytes)&lt;/th&gt;
&lt;th&gt;Size (bytes)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Number of entries in the table&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;Base address of the table&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;h6 id=&quot;user-content-null-segment-selector&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#null-segment-selector&quot;&gt;4.3.3.3.2. Null segment selector&lt;/a&gt;&lt;/h6&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3 - 3.4.2 &quot;Segment Selectors&quot; says that we can’t use the first entry of the GDT:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;The first entry of the GDT is not used by the processor. A segment selector that points to this entry of the GDT (that is, a segment selector with an index of 0 and the TI flag set to 0) is used as a “null segment selector.” The processor does not generate an exception when a segment register (other than the CS or SS registers) is loaded with a null selector. It does, however, generate an exception when a segment register holding a null selector is used to access memory. A null selector can be used to initialize unused segment registers. Loading the CS or SS register with a null segment selector causes a general-protection exception (#GP) to be generated.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h5 id=&quot;user-content-segment-descriptor&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#segment-descriptor&quot;&gt;4.3.3.4. Segment descriptor&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;A data structure that is stored in the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#gdt&quot;&gt;GDT&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Clearly described on the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3 - 3.4.5 &quot;Segment Descriptors&quot; and in particular Figure 3-8 &quot;Segment Descriptor&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The Linux kernel v4.2 encodes it at: &lt;code&gt;arch/x86/include/asm/desc_defs.h&lt;/code&gt; in &lt;code&gt;struct desc_struct&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-idt&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#idt&quot;&gt;4.3.4. IDT&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Interrupt descriptor table.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Protected mode analogue to the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#ivt&quot;&gt;IVT&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
int 0 handled
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Handle interrupt 1 instead of 0:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run idt1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
int 1 handled
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;00000020\n&lt;/code&gt; at &lt;code&gt;18.2 Hz&lt;/code&gt; with the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pit&quot;&gt;PIT&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run pit_protected
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;The first 32 handlers are reserved by the processor and have predefined meanings, as specified in the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;Intel manual&lt;/a&gt; Volume 3 Table 3-3. &quot;Intel 64 and IA-32 General Exceptions&quot;.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h5 id=&quot;user-content-idt-divide-by-zero&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#idt-divide-by-zero&quot;&gt;4.3.4.1. IDT divide by zero&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Handle a division by zero:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run idt_zero_divide
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
division by zero handled
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Division by zero causes a Divide Error which Intel notes as &lt;code&gt;#DE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It is then handled by IDT 0.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;DEs are not only for division by zero: they also happens on overflow. TODO example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-smp&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#smp&quot;&gt;4.3.5. SMP&lt;/a&gt;&lt;/h4&gt;


&lt;div&gt;
&lt;p&gt;Start multiple processors and make them interact:&lt;/p&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
SMP started
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Implies that SMP worked because a spinlock was unlocked by the second processor.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Try commenting out waking up the second processor and see it not get printed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-paging&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#paging&quot;&gt;4.3.6. Paging&lt;/a&gt;&lt;/h4&gt;

&lt;div&gt;
&lt;p&gt;Change page tables and observe how that affects memory accesses:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run paging
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
00001234
00005678
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Implies that paging worked because we printed and modified the same physical address with two different virtual addresses.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h5 id=&quot;user-content-page-fault&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#page-fault&quot;&gt;4.3.6.1. Page fault&lt;/a&gt;&lt;/h5&gt;
&lt;div&gt;
&lt;p&gt;Generate and handle a page fault:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run page_fault
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
Page fault handled. Error code:
00000002
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is printed from a page fault handler that we setup an triggered by writing to an unmapped address.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h3 id=&quot;user-content-64-bit-mode&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#64-bit-mode&quot;&gt;4.5. 64-bit mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;64-bit is the major mode of operation, and enables the full 64 bit instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-compatibility-mode&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#compatibility-mode&quot;&gt;4.6. Compatibility mode&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Compatibility mode emulates IA-32 and allows to run 32 and 16 bit code.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But 64 bit Linux and Windows don’t seem to allow 16 bit code anymore?&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;p&gt;x86 has dedicated instructions for certain IO operations: &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;These instructions take an IO address which identifies which hardware they will communicate to.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;The Linux kernel wraps those instructions with the &lt;code&gt;inb&lt;/code&gt; and &lt;code&gt;outb&lt;/code&gt; family of instructions:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
man inb
man outb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-memory-mapped-vs-port-mapped-io&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#memory-mapped-vs-port-mapped-io&quot;&gt;5.1. Memory mapped vs port mapped IO&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Not all instruction sets have dedicated instructions such as &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; for IO.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;In ARM for example, everything is done by writing to magic memory addresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The dedicated &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; approach is called &quot;port mapped IO&quot;, and the approach of the magic addresses &quot;memory mapp&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;From an interface point of view, I feel that memory mapped is more elegant: port IO simply creates a second addresses space.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;TODO: are there performance considerations when designing CPUs?&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-ps-2-keyboard&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#ps-2-keyboard&quot;&gt;5.2. PS/2 keyboard&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Whenever you press a key down or up, the keyboard hex scancode is printed to the screen:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run ps2_keyboard
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;The &lt;code&gt;in&lt;/code&gt; always returns immediately with the last keyboard keycode: we then just poll for changes and print only the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Scancode tables: TODO: official specs?&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-ps-2-mouse&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#ps-2-mouse&quot;&gt;5.3. PS/2 mouse&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;TODO create an example:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;I am so going to make a pixel drawing program with this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-rtc&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#rtc&quot;&gt;5.4. RTC&lt;/a&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;p&gt;Get wall time with precision of seconds every second:&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;Sample outcome:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
00 01 02 03 04 10
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;which means:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;blockquote&gt;
&lt;div&gt;
&lt;p&gt;3rd April 2010, 02 hours 01 minute and 00 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Uses &lt;code&gt;out 70h&lt;/code&gt; and &lt;code&gt;in 71h&lt;/code&gt; to query the hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This hardware must therefore use a separate battery to keep going when we turn off the computer or remove the laptop battery.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We can control the initial value in QEMU with the option:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
qemu-system-x86_64 -rtc base='2010-04-03T02:01:00'
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The RTC cannot give accuracy greater than seconds. For that, consider the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pit&quot;&gt;PIT&lt;/a&gt;, or the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#hpet&quot;&gt;HPET&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-pit&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pit&quot;&gt;5.5. PIT&lt;/a&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;p&gt;Superseded by the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#hpet&quot;&gt;HPET&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;a\n&lt;/code&gt; with the minimal frequency possible of &lt;code&gt;0x1234DD / 0xFFFF = 18.2 Hz&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;Make the PIT generate a single interrupt instead of a frequency:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run pit_once
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;div&gt;
&lt;p&gt;TODO I think this counts down from the value value in channel 0, and therefore allows to schedule a single event in the future.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The PIT can generate periodic interrupts (or &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pc-speaker&quot;&gt;sound&lt;/a&gt;!) with a given frequency to &lt;code&gt;IRQ0&lt;/code&gt;, which on real mode maps to interrupt 8 by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Major application: interrupt the running process to allow the OS to schedule processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The PIT 3 channels that can generate 3 independent signals&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;channel 0 at port &lt;code&gt;40h&lt;/code&gt;: generates interrupts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel 1 at port &lt;code&gt;41h&lt;/code&gt;: not to be used for some reason&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel 2 at port &lt;code&gt;42h&lt;/code&gt;: linked to the speaker to generate sounds&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Port &lt;code&gt;43h&lt;/code&gt; is used to control signal properties except frequency, which goes in the channel ports, for the 3 channels.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-pit-frequency&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pit-frequency&quot;&gt;5.5.1. PIT frequency&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;We don’t control the frequency of the PIT directly, which is fixed at &lt;code&gt;0x1234DD&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;The constant &lt;code&gt;1193181 == 0x1234DD&lt;/code&gt; has 2 occurrences on Linux 4.16.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-pc-speaker&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pc-speaker&quot;&gt;5.5.3. PC speaker&lt;/a&gt;&lt;/h4&gt;

&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run pc_speaker
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Outcome: produces a foul noisy noise using the PC speaker hardware on &lt;code&gt;out 61h&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;QEMU only plays the sound if we give it the option:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
-soundhw pcspk
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The beep just uses the &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pit&quot;&gt;PIT&lt;/a&gt; Channel 2 to generate the frequency.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;p&gt;There are several video modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Modes determine what interrupt functions can be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;There are 2 main types of modes:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;text, where we operate character-wise&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;video, operate byte-wise&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Modes can be set with &lt;code&gt;int 0x10&lt;/code&gt; and &lt;code&gt;AH = 0x00&lt;/code&gt;, and get with &lt;code&gt;AH = 0x0F&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The most common modes seem to be:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;0x01: 40x25 Text, 16 colors, 8 pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0x03: 80x25 Text, 16 colors, 8 pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;0x13: 320x200 Graphics, 256 colors, 1 page&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;You can add 128 to the modes to prevent them from clearing the screen.&lt;/p&gt;
&lt;/div&gt;




&lt;div&gt;
&lt;h3 id=&quot;user-content-vga&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#vga&quot;&gt;6.2. VGA&lt;/a&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;p&gt;TODO: what is it exactly?&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;BIOS cannot be used when we move into &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#protected-mode&quot;&gt;Protected mode&lt;/a&gt;, but we can use the VGA interface to get output out of our programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Have a look at the macros prefixed with &lt;code&gt;VGA_&lt;/code&gt; inside &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/master/common.h&quot;&gt;common.h&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-reboot&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#reboot&quot;&gt;7.1. Reboot&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Infinite reboot loop on emulator!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;TODO why does it work?&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-apm&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#apm&quot;&gt;7.2. APM&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Turn on and immediately shutdown the system closing QEMU:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run apm_shutdown
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run apm_shutdown2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Older than &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#acpi&quot;&gt;ACPI&lt;/a&gt; and simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;By Microsoft in 1995. Spec seems to be in RTF format…​&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Bibliography:&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-acpi&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#acpi&quot;&gt;7.3. ACPI&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;TODO example&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Newer and better.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Now managed by the same group that manages UEFI.&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;



&lt;div&gt;
&lt;p&gt;Made by Intel, mostly MIT open source, which likely implies that vendors will hack away closed source versions.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Since it is huge, it inevitably contains bugs. Garret says that Intel sometimes does not feel like updating the firmware with bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;UEFI offers a large API comparable to what most people would call an operating system:&lt;/p&gt;
&lt;/div&gt;




&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;p&gt;TODO minimal examples.&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;Open source hippie freedom loving cross platform firmware that attempts to replace BIOS and UEFI for the greater good of mankind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/master/grub/README.adoc&quot;&gt;grub/README.adoc&lt;/a&gt; TODO cleanup and exemplify everything in that file. Some hosty stuff needs to go out maybe.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-grub-chainloader&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#grub-chainloader&quot;&gt;10.1. GRUB chainloader&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
make -C grub/chainloader run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Outcome: you are left in an interactive GRUB menu with two choices:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;hello-world&lt;/code&gt;: go into a hello world OS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self +1&lt;/code&gt;: reload ourselves, and almost immediately reload GRUB and fall on the same menu as before&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;This is what you need to boot systems like Windows which GRUB does not know anything about: just point to their partition and let them do the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Both of the menu options are implemented with &lt;code&gt;chainloader&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;code&gt;hello-world&lt;/code&gt;:&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;Loads a given image file within the partition.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;After build, &lt;code&gt;grub-mkrescue&lt;/code&gt; creates a few filesystems, and &lt;code&gt;grub/chainloader/iso/boot/main.img&lt;/code&gt; is placed inside one of those filesystems.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This illustrates GRUB’s awesome ability to understand certain filesystem formats, and fetch files from them, thus allowing us to pick between multiple operating systems with a single filesystem.&lt;/p&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self +1&lt;/code&gt;: uses the syntax:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
chainloader +1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;which reloads the first sector of the current partition, and therefor ourselves.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-grub-linux&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#grub-linux&quot;&gt;10.2. GRUB linux&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;TODO get working.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;OK, let’s have some fun and do the real thing!&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
make -C grub/linux run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;The GRUB command is of form:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
linux /boot/bzImage root=/dev/sda1 console=tty1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;so we see that the kernel boot parameters are passed right there, for example try to change the value of the &lt;code&gt;printk.time&lt;/code&gt; parameter:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
printk.time=y
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;and see how the dmesg times not get printed anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;

&lt;div&gt;
&lt;p&gt;Standard created by GRUB for booting OSes.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Multiboot files are an extension of ELF files with a special header.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Advantages: GRUB does housekeeping magic for you:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;you can store the OS as a regular file inside a filesystem&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;your program starts in 32-bit mode already, not 16 bit real mode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it gets the available memory ranges for you&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;more boilerplate&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;GRUB leaves the application into a well defined starting state.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h3 id=&quot;user-content-multiboot-hello-world&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#multiboot-hello-world&quot;&gt;11.1. Multiboot hello world&lt;/a&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
make -C multiboot/hello-world run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;which actually runs:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
qemu-system-i386 -kernel 'main.elf'
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;where &lt;code&gt;main.elf&lt;/code&gt; is the multiboot file we generated.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Or you can use &lt;code&gt;grub-mkrescue&lt;/code&gt; to make a multiboot file into a bootable ISO or disk:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
qemu-system-x86_64 -drive file=main.img,format=raw
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The &lt;code&gt;main.img&lt;/code&gt; file can also be burned to a USB and run on real hardware.&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-osdev-multiboot-hello-world&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#osdev-multiboot-hello-world&quot;&gt;11.2. osdev multiboot hello world&lt;/a&gt;&lt;/h3&gt;

&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
make -C multiboot/osdev run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
hello world
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is interesting as it uses C as much as possible with some GAS where needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This should serve as a decent basis for starting a pet OS. But please don’t, there are enough out there already :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-unit-tests&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#unit-tests&quot;&gt;12.1. Unit tests&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Tests for utilities defined in this repo, as opposed to x86 or external firmware concepts.&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4 id=&quot;user-content-print_bytes&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#print_bytes&quot;&gt;12.1.1. PRINT_BYTES&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Print several bytes in human readable form:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run test_print_bytes
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
40 41 42 43 44 45 46 47
48 49 4A 4B 4C 4D 4E 4F
50
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-pit_sleep_ticks&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pit_sleep_ticks&quot;&gt;12.1.2. PIT_SLEEP_TICKS&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Print &lt;code&gt;a\n&lt;/code&gt; with frequency 2Hz:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run test_pit_sleep_ticks
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Same but in protected mode:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
./run test_pit_sleep_protected
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-system-vs-userland&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#system-vs-userland&quot;&gt;13.1. System vs userland&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;This repository covers only things that can only be done from ring 0 (system) and not ring 3 (userland).&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-one-minimal-concept-per-os&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#one-minimal-concept-per-os&quot;&gt;13.2. One minimal concept per OS&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;There are a few tutorials that explain how to make an operating system and give examples of increasing complexity with more and more functionality added: &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#progressive-tutorials&quot;&gt;Progressive tutorials&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is not one of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The goal of this repository is to use the minimal setup possible to be able to observe &lt;em&gt;a single&lt;/em&gt; low-level programming concept for each minimal operating system we create.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;This is not meant provide a template from which you can write a real OS, but instead to illustrate how those low-level concepts work in isolation, so that you can use that knowledge to implement operating systems or drivers.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Minimal examples are useful because it is easier to observe the requirements for a given concept to be observable.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Another advantage is that it is easier to DRY up minimal examples with macros or functions, which is much harder on progressive OS template tutorials, which tend to repeat big chunks of code between the examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-to-c-or-not-to-c&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#to-c-or-not-to-c&quot;&gt;13.3. To C or not to C&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Using C or not is a hard choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;It does make it much easier to express higher level ideas, and gives portability.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;However, it increases the complexity that one has to understand a bit, so I decided to stay away from it when I wrote this tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Maybe we should just rewrite everything in C based on &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#c-hello-world&quot;&gt;C hello world&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-macros-vs-functions&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#macros-vs-functions&quot;&gt;13.4. Macros vs functions&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;Using macros for now on &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/master/common.h&quot;&gt;common.h&lt;/a&gt; instead of functions because it simplifies the linker script.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But the downsides are severe:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;no symbols to help debugging. TODO: I think there are assembly constructs for that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;impossible to step over method calls: you have to step into everything. TODO: &lt;code&gt;until&lt;/code&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;larger output, supposing I can get linker gc for unused functions working, see &lt;code&gt;--gc-section&lt;/code&gt;, which is for now uncertain.&lt;/p&gt;
&lt;div&gt;
&lt;p&gt;If I can get this working, I’ll definitely move to function calls.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The problem is that if I don’t, every image will need a stage 2 loader. That is not too serious though, it could be added to the &lt;code&gt;BEGIN&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We should just rewrite the whole thing to use functions instead…​&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-macro-conventions&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#macro-conventions&quot;&gt;13.4.1. Macro conventions&lt;/a&gt;&lt;/h4&gt;
&lt;div&gt;
&lt;p&gt;Every &quot;function-like macro&quot; in &lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples/blob/master/common.h&quot;&gt;common.h&lt;/a&gt; must maintain the state of general purpose registers.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Flags are currently not maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;%sp&lt;/code&gt; cannot be used to pass most arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;We don’t care about setting &lt;code&gt;%bp&lt;/code&gt; properly at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-nasm&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#nasm&quot;&gt;13.5. NASM&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
cd nasm/
./run bios_hello_world
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;While NASM is a bit more convenient than GAS to write a boot sector, I think it is just not worth it.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;When writing an OS in C, we are going to use GCC, which already uses GAS. So it’s better to reduce the number of assemblers to one and stick to GAS only.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Right now, this directory is not very DRY since NASM is secondary to me, so it contains mostly some copy / paste examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;On top of that, GAS also supports other architectures besides x86, so learning it is more useful in that sense.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h3 id=&quot;user-content-pre-requisites&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#pre-requisites&quot;&gt;13.7. Pre-requisites&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;OS dev is one of the most insanely hard programming tasks a person can undertake, and will push your knowledge of several domains to the limit.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Knowing the following will help a lot:&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;While it is possible to learn those topics as you go along, and it is almost certain that you will end up learning more about them, we will not explain them here in detail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div&gt;

&lt;div&gt;
&lt;div&gt;
&lt;h3 id=&quot;user-content-intel-manual&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#intel-manual&quot;&gt;15.1. Intel manual&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;p&gt;We are interested mostly in the &quot;Intel Manual Volume 3 System Programming Guide&quot;, where system programming basically means &quot;OS stuff&quot; or &quot;bare metal&quot; as opposed to userland present in the other manuals.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;



&lt;div&gt;
&lt;h3 id=&quot;user-content-progressive-tutorials&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#progressive-tutorials&quot;&gt;15.5. Progressive tutorials&lt;/a&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-jamesmolloy&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#jamesmolloy&quot;&gt;15.5.1. jamesmolloy&lt;/a&gt;&lt;/h4&gt;

&lt;div&gt;
&lt;p&gt;The classic tutorial. Highly recommended.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Multiboot based kernels of increasing complexity, one example builds on the last one. Non DRY as a result.&lt;/p&gt;
&lt;/div&gt;


&lt;div&gt;
&lt;p&gt;Good tutorials, author seems to master the subject.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;But he could learn more about version control and build automation: source code inside ugly tar.gz with output files.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-cfenollosa-os-tutorial&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#cfenollosa-os-tutorial&quot;&gt;15.5.2. cfenollosa/os-tutorial&lt;/a&gt;&lt;/h4&gt;


&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
cd 23-fixes
make run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Starts with raw assembly + inludes, moves to C midway.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Raw stage-2 loader. No task scheduling yet, but the feature is…​ &quot;scheduled&quot; ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Explains how to use the QEMU GDB stub and automates it on makefile, kudos.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Reviewed at: 7aff64740e1e3fba9a64c30c5cead0f88514eb62&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h4 id=&quot;user-content-samypesse-how-to-make-a-computer-operating-system&quot;&gt;&lt;a href=&quot;https://github.com/cirosantilli/x86-bare-metal-examples#samypesse-how-to-make-a-computer-operating-system&quot;&gt;15.5.3. SamyPesse/How-to-Make-a-Computer-Operating-System&lt;/a&gt;&lt;/h4&gt;

&lt;div&gt;
&lt;p&gt;Has one big source tree that goes up to multitasking and a stdlib. Kernel written C++ and stdlib in C. TODO 64-bit, ring 0 vs ring 3?&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Does have a &lt;code&gt;lucid32&lt;/code&gt; Vagrant file for the host, but lazy to try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Reviewed at: eb30f8802fac9f0f1c28d3a96bb3d402bdfc4687&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;

&lt;div&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/licenses/gpl-3.0.txt&quot; rel=&quot;nofollow&quot;&gt;GPL v3&lt;/a&gt; for executable computer program usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/&quot; rel=&quot;nofollow&quot;&gt;CC BY-SA v4&lt;/a&gt; for human consumption usage in learning material, e.g. &lt;code&gt;.md&lt;/code&gt; files, source code comments, using source code excerpts in tutorials. Recommended attribution:&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Single file adaptations:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
Based on https://github.com/cirosantilli/x86-bare-metal-examples/blob/&amp;lt;commit-id&amp;gt;/path/to/file.md under CC BY-SA v4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-file adaptations:&lt;/p&gt;
&lt;div&gt;
&lt;div&gt;
&lt;pre&gt;
Based on https://github.com/cirosantilli/x86-bare-metal-examples/tree/&amp;lt;commit-id&amp;gt; under CC BY-SA v4
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;If you want to use this work under a different license, contact the copyright owner, and he might make a good price.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 19 Mar 2019 07:07:14 +0000</pubDate>
<dc:creator>Cieplak</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/1429315?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>cirosantilli/x86-bare-metal-examples</og:title>
<og:url>https://github.com/cirosantilli/x86-bare-metal-examples</og:url>
<og:description>Dozens of minimal operating systems to learn x86 system programming. Tested on Ubuntu 17.10 host and real hardware. Userland cheat at: https://github.com/cirosantilli/x86-assembly-cheat ARM baremet...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/cirosantilli/x86-bare-metal-examples</dc:identifier>
</item>
<item>
<title>Stomach of Dead Whale Contained &amp;#039;Nothing but Nonstop Plastic&amp;#039;</title>
<link>https://www.npr.org/2019/03/18/704471596/stomach-of-dead-whale-contained-nothing-but-plastic</link>
<guid isPermaLink="true" >https://www.npr.org/2019/03/18/704471596/stomach-of-dead-whale-contained-nothing-but-plastic</guid>
<description>&lt;div id=&quot;res704534536&quot; class=&quot;bucketwrap image medium&quot;&gt;
&lt;div class=&quot;imagewrap&quot; data-crop-type=&quot;&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/03/18/gettyimages-1131400794-9dfd4ee2b08fb038b9134e0134a4905419e1cbeb-s800-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/03/18/gettyimages-1131400794-9dfd4ee2b08fb038b9134e0134a4905419e1cbeb-s800.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;&quot;/&gt;
&lt;/div&gt;
&lt;div class=&quot;credit-caption&quot;&gt;
&lt;div class=&quot;caption-wrap&quot; readability=&quot;8&quot;&gt;
&lt;div class=&quot;caption&quot; aria-label=&quot;Image caption&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;Darrell Blatchley, environmentalist and director of D' Bone Collector Museum, shows plastic waste found in the stomach of a Cuvier's beaked whale near the Philippine city of Davao. &lt;strong class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AFP/Getty Images&lt;/strong&gt; &lt;strong class=&quot;hide-caption&quot;&gt;hide caption&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;strong class=&quot;toggle-caption&quot;&gt;toggle caption&lt;/strong&gt;&lt;/div&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AFP/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;div class=&quot;enlarge_measure&quot;&gt;
&lt;div class=&quot;img_wrap&quot;&gt;&lt;img data-original=&quot;https://media.npr.org/assets/img/2019/03/18/gettyimages-1131400794-9dfd4ee2b08fb038b9134e0134a4905419e1cbeb-s1200.jpg&quot; alt=&quot;&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;enlarge_html&quot; readability=&quot;7.5&quot;&gt;
&lt;div class=&quot;image_data&quot; readability=&quot;10&quot;&gt;
&lt;p class=&quot;caption&quot;&gt;Darrell Blatchley, environmentalist and director of D' Bone Collector Museum, shows plastic waste found in the stomach of a Cuvier's beaked whale near the Philippine city of Davao.&lt;/p&gt;
&lt;span class=&quot;credit&quot; aria-label=&quot;Image credit&quot;&gt;AFP/Getty Images&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Updated at 5:44 p.m. ET&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Darrell Blatchley received a call from the Philippines' Bureau of Fisheries and Aquatic Resources early Friday morning reporting that it had a young Cuvier's beaked whale that was weak and vomiting blood.&lt;/p&gt;
&lt;p&gt;Within a few hours it was dead.&lt;/p&gt;
&lt;p&gt;Blatchley, a marine biologist and environmentalist based in the Philippine city of Davao, gathered his team to drive two hours to where the whale had washed up.&lt;/p&gt;
&lt;p&gt;When the necropsy was performed, Blatchley told NPR, he was not prepared for the amount of plastic they found in the whale's stomach.&lt;/p&gt;
&lt;p&gt;&quot;It was full of plastic — nothing but nonstop plastic,&quot; he said. &quot;It was compact to the point that its stomach was literally as hard as a baseball.&quot;&lt;/p&gt;
&lt;p&gt;&quot;That means that this animal has been suffering not for days or weeks but for months or even a year or more,&quot; Blatchley added.&lt;/p&gt;
&lt;p&gt;He noted that among the 88 pounds of plastic were 16 rice sacks — similar to potato sacks — and plastic bags from local Philippine grocery chains, Gaisano Capital and Gaisano grocery outlet.&lt;/p&gt;
&lt;p&gt;Blatchley is the founder and owner of the D' Bone Collector Museum, a natural history museum in Davao. In the coming days, the museum will post a list of all the items found in the whale's system, the museum said in &lt;a href=&quot;https://www.facebook.com/permalink.php?story_fbid=2689346287758609&amp;amp;id=216407245052538&quot;&gt;a post&lt;/a&gt; on its Facebook page.&lt;/p&gt;
&lt;aside id=&quot;ad-backstage-wrap&quot; aria-label=&quot;advertisement&quot;&gt;
&lt;/aside&gt;&lt;p&gt;Blatchley and his team work with the Bureau of Fisheries and Aquatic Resources and other organizations to assist in rescue and recovery of marine animals.&lt;/p&gt;
&lt;p&gt;&quot;Within the last 10 years, we have recovered 61 whales and dolphins just within the Davao Gulf,&quot; he said. &quot;Of them, 57 have died due to man — whether they ingested plastic or fishing nets or other waste, or gotten caught in pollution — and four were pregnant.&quot;&lt;/p&gt;
&lt;p&gt;In 2019 alone, Blatchley said, he and his team have found three whales or dolphins with plastic waste in their systems.&lt;/p&gt;
&lt;p&gt;The Philippines has been deemed one of the &quot;&lt;a href=&quot;https://wwf.panda.org/knowledge_hub/where_we_work/coraltriangle/?329831/The-scourge-of-single-use-plastic-in-the-Philippines&quot;&gt;world's leading plastic polluters&lt;/a&gt;.&quot;&lt;/p&gt;
&lt;div id=&quot;res704517067&quot; class=&quot;bucketwrap internallink insettwocolumn inset2col&quot;&gt;
&lt;div class=&quot;bucket img&quot;&gt;&lt;a id=&quot;featuredStackSquareImage683734379&quot; href=&quot;https://www.npr.org/sections/goatsandsoda/2019/01/15/683734379/an-island-crusader-takes-on-the-big-brands-behind-plastic-waste&quot; data-metrics=&quot;{&amp;quot;category&amp;quot;:&amp;quot;Story to Story&amp;quot;,&amp;quot;action&amp;quot;:&amp;quot;Click Internal Link&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;https:\/\/www.npr.org\/sections\/goatsandsoda\/2019\/01\/15\/683734379\/an-island-crusader-takes-on-the-big-brands-behind-plastic-waste&amp;quot;}&quot;&gt;&lt;img src=&quot;https://media.npr.org/assets/img/2019/01/10/npr_plastics_d5_20180928_0009_sq-a96a16dd401b0a6085e2581b8e55ec2151a2d983-s100-c15.jpg&quot; data-original=&quot;https://media.npr.org/assets/img/2019/01/10/npr_plastics_d5_20180928_0009_sq-a96a16dd401b0a6085e2581b8e55ec2151a2d983-s100.jpg&quot; class=&quot;img lazyOnLoad&quot; alt=&quot;A New Weapon In The War Against Plastic Waste&quot;/&gt;&lt;/a&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to the &lt;a href=&quot;http://web.unep.org/unepmap/un-declares-war-ocean-plastic&quot;&gt;U.N. Environment Programme&lt;/a&gt;, some 9 million tons of plastic end up in the ocean each year. According to a &lt;a href=&quot;https://oceanconservancy.org/wp-content/uploads/2017/04/full-report-stemming-the.pdf&quot;&gt;2017 study&lt;/a&gt; from the environmental group Ocean Conservancy, more than half of that waste comes from just five countries in East and Southeast Asia — China, Indonesia, the Philippines, Thailand and Vietnam.&lt;/p&gt;
&lt;p&gt;The study found that more than half a million metric tons of plastic waste from the Philippines makes it into the ocean each year.&lt;/p&gt;
&lt;p&gt;Blatchley said he hoped that the latest incident with the Cuvier's beaked whale would launch the issue of plastic pollution in the Philippines, and across the globe, to the forefront.&lt;/p&gt;
&lt;p&gt;&quot;If we keep going this way, it will be more uncommon to see an animal die of natural causes than it is to see an animal die of plastic,&quot; he said.&lt;/p&gt;
</description>
<pubDate>Tue, 19 Mar 2019 04:23:35 +0000</pubDate>
<dc:creator>Ultramanoid</dc:creator>
<og:title>Stomach Of Dead Whale Contained 'Nothing But Nonstop Plastic'</og:title>
<og:url>https://www.npr.org/2019/03/18/704471596/stomach-of-dead-whale-contained-nothing-but-plastic</og:url>
<og:type>article</og:type>
<og:description>In the Philippines, marine biologist Darrell Blatchley recovered the body of a young whale that showed signs of emaciation and dehydration due to the 88 pounds of plastic it had ingested.</og:description>
<og:image>https://media.npr.org/assets/img/2019/03/18/gettyimages-1131400794_wide-4779520d6739eb43bce3281ed359cb2138342ed9.jpg?s=1400</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.npr.org/2019/03/18/704471596/stomach-of-dead-whale-contained-nothing-but-plastic</dc:identifier>
</item>
<item>
<title>Why I believe Rails is still relevant in 2019</title>
<link>https://devbrett.com/2019/03/why-i-believe-rails-is-still-relevant-in-2019.html</link>
<guid isPermaLink="true" >https://devbrett.com/2019/03/why-i-believe-rails-is-still-relevant-in-2019.html</guid>
<description>&lt;p&gt;You might have read the infamous blog posts titled “Rails is Dead”, but I have seen development teams flounder over and over again when they try and &lt;a href=&quot;https://blog.codinghorror.com/dont-reinvent-the-wheel-unless-you-plan-on-learning-more-about-wheels/&quot;&gt;reinvent the wheel&lt;/a&gt; using &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt; on the backend.&lt;/p&gt;
&lt;h3 id=&quot;rails-is-scalable&quot;&gt;Rails is Scalable&lt;/h3&gt;
&lt;p&gt;Despite the negative press, I’ll argue &lt;strong&gt;rails does scale&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After developers at Twitter have &lt;a href=&quot;https://danielmiessler.com/blog/ruby-is-slow-and-rails-doesnt-scale-well/&quot;&gt;spoken at length about their issues with Rails performance&lt;/a&gt;, it’s easy to get the wrong idea.&lt;/p&gt;
&lt;p&gt;Rails is not the fastest framework in the world… but I will argue that performance is the last thing you should worry about when you want to scale.&lt;/p&gt;
&lt;p&gt;In my experience, NodeJS or projects written in other frameworks start to collapse architecturally after an alarmingly small amount of complexity is added to them.&lt;/p&gt;
&lt;p&gt;More important than how many requests you can serve per second, is how your development team can maintain productivity over time.&lt;/p&gt;
&lt;p&gt;With the strong opinions and emphasis on code quality, Rails applications continue to remain relatively healthy and concise when compared with their brethren.&lt;/p&gt;
&lt;p&gt;The hard cold fact of the matter is: CPU cycles are cheap. Developer hours are not. If your company and product are in their early stages of development I can almost promise you that the costs of poorly structured spaghetti code will far outweigh your hosting costs.&lt;/p&gt;
&lt;p&gt;As our Lord and savior Uncle Bob says: &lt;a href=&quot;http://butunclebob.com/ArticleS.UncleBob.VehementMediocrity&quot;&gt;the only way to go fast is to go well&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;https://devbrett.com/2019/03/why-i-believe-rails-is-still-relevant-in-2019/images/unclebob.jpg&quot;/&gt;&lt;/center&gt;
&lt;h3 id=&quot;rails-is-opinionated&quot;&gt;Rails is Opinionated&lt;/h3&gt;
&lt;p&gt;Rails is one of the most opinionated frameworks there is. Creating opinions in a development team is labor-intensive and wasteful. Trying to come to a consensus on the most arbitrary of decisions can be frustrating.&lt;/p&gt;
&lt;p&gt;Where should we put files relating to our data model? &lt;code&gt;/app/model&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Where should we put our config? &lt;code&gt;/config&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Our email code? &lt;code&gt;/app/mailers&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Decision made. Conversation over. Now let’s get back to our desks and write some code!&lt;/p&gt;
&lt;p&gt;Having an opinionated framework to lean back on is a breath of fresh air. If you know rails, you can instantly be productive in a new codebase. It’s easy to hire and onboard new developers because they are already familiar with the &lt;a href=&quot;https://facilethings.com/blog/en/convention-over-configuration&quot;&gt;conventions&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;database-management-and-tooling&quot;&gt;Database Management and Tooling&lt;/h3&gt;
&lt;p&gt;Database management is hard. Managing database schemas and migrations is hard.&lt;/p&gt;
&lt;p&gt;Rails provides you with a no-nonsense way of defining your database structures, as well as a full suite of CLI commands for migrating, resetting, seeding, dropping and creating databases across all environments.&lt;/p&gt;
&lt;p&gt;Just look at how simple and clear Rails migrations are:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div&gt;
&lt;table readability=&quot;6.5&quot;&gt;&lt;tr readability=&quot;19.5&quot;&gt;&lt;td readability=&quot;5&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt; 1
&lt;/span&gt;&lt;span&gt; 2
&lt;/span&gt;&lt;span&gt; 3
&lt;/span&gt;&lt;span&gt; 4
&lt;/span&gt;&lt;span&gt; 5
&lt;/span&gt;&lt;span&gt; 6
&lt;/span&gt;&lt;span&gt; 7
&lt;/span&gt;&lt;span&gt; 8
&lt;/span&gt;&lt;span&gt; 9
&lt;/span&gt;&lt;span&gt;10
&lt;/span&gt;&lt;span&gt;11
&lt;/span&gt;&lt;span&gt;12
&lt;/span&gt;&lt;span&gt;13
&lt;/span&gt;&lt;span&gt;14
&lt;/span&gt;&lt;span&gt;15
&lt;/span&gt;&lt;span&gt;16
&lt;/span&gt;&lt;span&gt;17
&lt;/span&gt;&lt;span&gt;18
&lt;/span&gt;&lt;span&gt;19
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td readability=&quot;14&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;CreateBookItems&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; &lt;span&gt;ActiveRecord&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Migration&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;change&lt;/span&gt;
    enable_extension &lt;span&gt;'hstore'&lt;/span&gt; &lt;span&gt;unless&lt;/span&gt; extension_enabled?(&lt;span&gt;'hstore'&lt;/span&gt;)
    enable_extension &lt;span&gt;'pgcrypto'&lt;/span&gt; &lt;span&gt;unless&lt;/span&gt; extension_enabled?(&lt;span&gt;'pgcrypto'&lt;/span&gt;)

    create_table &lt;span&gt;:book_items&lt;/span&gt;, id: &lt;span&gt;:uuid&lt;/span&gt; &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;t&lt;span&gt;|&lt;/span&gt;
      t&lt;span&gt;.&lt;/span&gt;belongs_to &lt;span&gt;:category&lt;/span&gt;

      t&lt;span&gt;.&lt;/span&gt;string &lt;span&gt;:name&lt;/span&gt;, &lt;span&gt;null&lt;/span&gt;: &lt;span&gt;false&lt;/span&gt;, &lt;span&gt;index&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;, &lt;span&gt;unique&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;
      t&lt;span&gt;.&lt;/span&gt;text &lt;span&gt;:description&lt;/span&gt;
      t&lt;span&gt;.&lt;/span&gt;string &lt;span&gt;:tags&lt;/span&gt;, &lt;span&gt;array&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;
      t&lt;span&gt;.&lt;/span&gt;float &lt;span&gt;:price&lt;/span&gt;, &lt;span&gt;default&lt;/span&gt;: &lt;span&gt;0&lt;/span&gt;

      t&lt;span&gt;.&lt;/span&gt;hstore &lt;span&gt;:metadata&lt;/span&gt;

      t&lt;span&gt;.&lt;/span&gt;timestamps
    &lt;span&gt;end&lt;/span&gt;
  &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Rails handles databases in a ubiquitous way. There are &lt;a href=&quot;http://37signals.com/rails/wiki/DatabaseDrivers.html&quot;&gt;database drivers&lt;/a&gt; for almost every popular database, and schema management and &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;Object Relational Mapping&lt;/a&gt; is handled the same way across all data stores.&lt;/p&gt;
&lt;p&gt;JavaScript’s ORM landscape is still too divided. &lt;a href=&quot;https://www.javascripting.com/data/&quot;&gt;The top data packages&lt;/a&gt; feel underdeveloped when compared to the &lt;a href=&quot;https://szabgab.com/batteries-included.html&quot;&gt;batteries included&lt;/a&gt; approach that Ruby and its ecosystem is known for.&lt;/p&gt;
&lt;h3 id=&quot;configuration-management&quot;&gt;Configuration Management&lt;/h3&gt;
&lt;p&gt;Item 3 of the &lt;a href=&quot;https://12factor.net/config&quot;&gt;12 factor app&lt;/a&gt; is configuration management.&lt;/p&gt;
&lt;p&gt;Rails has multi-environment support built into the framework, with sane defaults and safety checks across &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; stages.&lt;/p&gt;
&lt;p&gt;Rails also has great support for environment variables using the &lt;a href=&quot;https://github.com/bkeepers/dotenv&quot;&gt;dotenv&lt;/a&gt; library or similar.&lt;/p&gt;
&lt;p&gt;Because the NodeJS ecosystem is so fragmented, it is common to see libraries use entirely different configuration styles and it is frequently frustrating to try and massage them to work nicely together.&lt;/p&gt;
&lt;h3 id=&quot;rails-and-ruby-have-a-deep-culture-of-code-quality&quot;&gt;Rails (and Ruby) Have a Deep Culture of Code Quality&lt;/h3&gt;
&lt;p&gt;Writing clean, readable code has always been in Rails’ DNA. The &lt;a href=&quot;https://www.dummies.com/programming/the-principles-of-ruby/&quot;&gt;language of ruby itself&lt;/a&gt; was designed with clear and concise code as the primary design principle.&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;Often people, especially computer engineers, focus on the machines. They think, “By doing this, the machine will run fast. By doing this, the machine will run more effectively. By doing this, the machine will something something something.” They are focusing on machines. But in fact we need to focus on humans, on how humans care about doing programming or operating the application of the machines. We are the masters. They are the slaves.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Matsumoto - the creator of Ruby&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rails automatically generates tests as you build code, encouraging developers to write well-tested, clean code.&lt;/p&gt;
&lt;p&gt;Some would argue that Ruby and Rails were the combination that pushed TDD and BDD principles into the development lime-light.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.quora.com/Why-does-TDD-seem-to-be-more-prevalent-amongst-Ruby-developers-than-Javascript-developers&quot;&gt;Quora: Why does TDD seem to be more prevalent amongst Ruby developers than Javascript developers?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;asset-management&quot;&gt;Asset Management&lt;/h3&gt;
&lt;p&gt;The Rails team have put a lot of time and effort into creating simple (but powerful) ways to manage assets in a modern way.&lt;/p&gt;
&lt;p&gt;Javascript’s &lt;a href=&quot;https://blog.flennik.com/the-fine-art-of-the-webpack-2-config-dc4d19d7f172&quot;&gt;webpack is notoriously difficult to configure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thankfully Rails has included another “batteries included” approach with &lt;a href=&quot;https://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;the asset pipeline&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ruby-is-a-pleasure-to-use&quot;&gt;Ruby is a Pleasure to Use&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/the-renaissance-developer/idiomatic-ruby-1b5fa1445098&quot;&gt;Ruby as a language is simply gorgeous&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;div&gt;
&lt;table readability=&quot;3.5&quot;&gt;&lt;tr readability=&quot;10.5&quot;&gt;&lt;td&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;1
&lt;/span&gt;&lt;span&gt;2
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;td readability=&quot;10&quot;&gt;
&lt;pre&gt;
&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;even_numbers &lt;span&gt;=&lt;/span&gt; &lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt;, &lt;span&gt;3&lt;/span&gt;, &lt;span&gt;4&lt;/span&gt;, &lt;span&gt;5&lt;/span&gt;&lt;span&gt;].&lt;/span&gt;filter { &lt;span&gt;|&lt;/span&gt;el&lt;span&gt;|&lt;/span&gt; el&lt;span&gt;.&lt;/span&gt;even? }
even_numbers&lt;span&gt;.&lt;/span&gt;each { &lt;span&gt;|&lt;/span&gt;el&lt;span&gt;|&lt;/span&gt; puts &lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;el&lt;span&gt;}&lt;/span&gt;&lt;span&gt; is an even number&quot;&lt;/span&gt; }&lt;/code&gt;
&lt;/pre&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It gets out of your way, supports flexible and concise metaprogramming, and has a fantastic standard library.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rubygems.org/&quot;&gt;Not to mention one of the best package management tools in the industry!&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;rspec-is-the-gold-standard-of-testing-tools&quot;&gt;RSpec is the Gold Standard of Testing Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; is quite simply the gold standard for &lt;a href=&quot;https://www.agilealliance.org/glossary/bdd/&quot;&gt;behaviour driven development&lt;/a&gt;, and almost single-handedly created the BDD movement that is still raging in the industry today nearly a decade later.&lt;/p&gt;
&lt;h3 id=&quot;a-smorgasbord-of-plugins&quot;&gt;A Smorgasbord of Plugins&lt;/h3&gt;
&lt;p&gt;Almost no other framework can boast the shear number and range of &lt;a href=&quot;https://prograils.com/posts/top-19-ruby-gems-you-cant-miss-2018&quot;&gt;plugins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rails is all about getting on your feet quickly and being ultra-productive by leveraging it’s OpenSource community. Rails provides you with the tools (and the documentation) to get up and running immediately.&lt;/p&gt;
&lt;h3 id=&quot;heroku&quot;&gt;Heroku&lt;/h3&gt;
&lt;p&gt;While certainly a bit expensive when compared with &lt;a href=&quot;https://aws.amazon.com/console/&quot;&gt;AWS&lt;/a&gt;, &lt;a href=&quot;https://cloud.google.com/&quot;&gt;Google Cloud Platform&lt;/a&gt; or other solutions, &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; is something entirely unique.&lt;/p&gt;
&lt;p&gt;Heroku embraced Rails’ “batteries included” philosophy and revolutionized development operations almost overnight.&lt;/p&gt;
&lt;p&gt;By providing a single-command deployment and effortless plugin system, Heroku enabled developers for the first time to deploy and manage large, enterprise-level infrastructure with a simple and quick GUI.&lt;/p&gt;
&lt;p&gt;Rails was and still is their champion framework.&lt;/p&gt;
&lt;h3 id=&quot;activeadmin&quot;&gt;ActiveAdmin&lt;/h3&gt;
&lt;p&gt;One of my personal favorite aspects to Rails is the automatic tooling for generating admin and back office tools.&lt;/p&gt;
&lt;p&gt;Perhaps the best is &lt;a href=&quot;https://activeadmin.info/&quot;&gt;ActiveAdmin&lt;/a&gt;. Well-supported, secure, and with smart defaults; ActiveAdmin allows developers to scaffold complicated admin GUIs with just a few lines of code.&lt;/p&gt;
&lt;p&gt;Just point the tool at your database table, list a few fields and define the layout and &lt;em&gt;POOF&lt;/em&gt; you have yourself a personalised data management tool. Download one of the free themes and you’re free to move on and develop your project instead of wasting time building tooling.&lt;/p&gt;
&lt;h3 id=&quot;industry-proven&quot;&gt;Industry Proven&lt;/h3&gt;
&lt;p&gt;Rails is battle-hardened and industry-proven. There is a long list of (very) successful businesses building their product with Rails.&lt;/p&gt;
&lt;p&gt;Twitter, AirBNB, Github, Kickstarter, DigitalOcean, Groupon, SlideShare, Urban Dictionary, Couchsurfing, Basecamp… and many more!&lt;/p&gt;
&lt;p&gt;Rails is secure, open source and ubiquitous. The talent pool is deep. The framework is mature. The community is vibrant.&lt;/p&gt;
</description>
<pubDate>Tue, 19 Mar 2019 04:18:38 +0000</pubDate>
<dc:creator>mottiden</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devbrett.com/2019/03/why-i-believe-rails-is-still-relevant-in-2019.html</dc:identifier>
</item>
<item>
<title>Atta Elayyan, Developer of MetroTube and LazyWorm Apps, Killed in Christchurch</title>
<link>https://www.dailyesports.gg/remembering-atta-elayyan-christchurch-shooting-victim/</link>
<guid isPermaLink="true" >https://www.dailyesports.gg/remembering-atta-elayyan-christchurch-shooting-victim/</guid>
<description>&lt;div class=&quot;post-image&quot;&gt;&lt;img width=&quot;620&quot; height=&quot;341&quot; src=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre-620x341.png&quot; class=&quot;attachment-post-thumb size-post-thumb wp-post-image&quot; alt=&quot;Atta Elayyan, a former Counter-Strike pro known as 'crazyarab', was among those murdered in the Christchurch massacre&quot; srcset=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre-620x341.png 620w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre-300x165.png 300w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre-768x422.png 768w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre-240x132.png 240w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre-85x47.png 85w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre.jpg 1000w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The world is still reeling from the New Zealand Christchurch attacks that occurred on March 15, 2019. The deadliest act of terrorism in the country’s history left at least 50 dead and at least 50 more wounded. As news of the victims continues to trickle in, we have learned that one of the casualties of the massacre was 33-year-old Atta Elayyan, a legend of the New Zealand &lt;em&gt;Counter-Strike&lt;/em&gt; scene who played under the nickname “crazyarab” or “&lt;a href=&quot;https://www.dailyesports.gg/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;0b48794b71724a796a6925&quot;&gt;[email protected]&lt;/a&gt;”&lt;/p&gt;
&lt;p&gt;He was one of the most interesting men in the world.&lt;/p&gt;
&lt;h2&gt;Breaking into Counter-Strike&lt;/h2&gt;
&lt;p&gt;Elayyan, a Kuwait-born New Zealander, first discovered &lt;em&gt;Counter-Strike&lt;/em&gt; in 2002. &lt;a target=&quot;_blank&quot; href=&quot;https://www.gpforums.co.nz/threads/451018-Where-are-you-now?p=9063641#post9063641&quot;&gt;In his own words&lt;/a&gt;, while he never broke in with any major teams through &lt;em&gt;Counter-Strike&lt;/em&gt; &lt;em&gt;1.3 – 1.6&lt;/em&gt;, his early adoption of &lt;em&gt;Counter-Strike: Source&lt;/em&gt; paid off. When his old clan broke up, he moved on to join a “bunch of randoms” going by the squad name NewType. The team was unknown at the time but was committed to winning. The group spent hours playing and practicing together, until they had eventually taken down all of the top Australian teams.&lt;/p&gt;
&lt;div id=&quot;attachment_19614&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;34&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-19614&quot; class=&quot; wp-image-19614&quot; src=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-crazyarab-Elayyan-a-former-member-of-Counter-Strike-team-NewType-was-one-of-the-50-people-murdered-in-Christchurch-on-March-15.jpg&quot; alt=&quot;Atta &amp;quot;crazyarab&amp;quot; Elayyan, a former member of Counter-Strike team NewType, was one of the 50 people murdered in Christchurch on March 15&quot; width=&quot;901&quot; height=&quot;676&quot; srcset=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-crazyarab-Elayyan-a-former-member-of-Counter-Strike-team-NewType-was-one-of-the-50-people-murdered-in-Christchurch-on-March-15.jpg 1024w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-crazyarab-Elayyan-a-former-member-of-Counter-Strike-team-NewType-was-one-of-the-50-people-murdered-in-Christchurch-on-March-15-259x194.jpg 259w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-crazyarab-Elayyan-a-former-member-of-Counter-Strike-team-NewType-was-one-of-the-50-people-murdered-in-Christchurch-on-March-15-768x576.jpg 768w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-crazyarab-Elayyan-a-former-member-of-Counter-Strike-team-NewType-was-one-of-the-50-people-murdered-in-Christchurch-on-March-15-533x400.jpg 533w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-crazyarab-Elayyan-a-former-member-of-Counter-Strike-team-NewType-was-one-of-the-50-people-murdered-in-Christchurch-on-March-15-240x180.jpg 240w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-crazyarab-Elayyan-a-former-member-of-Counter-Strike-team-NewType-was-one-of-the-50-people-murdered-in-Christchurch-on-March-15-72x54.jpg 72w&quot; sizes=&quot;(max-width: 901px) 100vw, 901px&quot;/&gt;&lt;p id=&quot;caption-attachment-19614&quot; class=&quot;wp-caption-text&quot;&gt;Atta “crazyarab” Elayyan (bottom right) pictured with NewType, a New Zealand-based team that dominated the Oceanic region in the early years of &lt;em&gt;Counter-Strike: Source&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.gpforums.co.nz/threads/451018-Where-are-you-now?p=9063641#post9063641&quot;&gt;Elayyan documented his days as a pro &lt;em&gt;CS:S&lt;/em&gt; competitor on the community forum, GamePlanet:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;15.508532423208&quot;&gt;
&lt;p&gt;After my beloved .ar clan split up, I took a stab and decided to join the new kids on the block… a bunch of ‘randoms’ who called themselves NewType. Nobody had heard of Grudge, Atvar or Supertech at this stage but these guys were insanely hell bent on winning and we spent 6-7 hours a night, every night playing Australians where we eventually toppled all of their top teams. With most of the top CSNZ players still tied up in 1.6, we were fairly unstoppable winning xLAN after xLAN and nearly every online comp we entered.&lt;/p&gt;
&lt;p&gt;– Atta “&lt;a href=&quot;https://www.dailyesports.gg/cdn-cgi/l/email-protection&quot; class=&quot;__cf_email__&quot; data-cfemail=&quot;62211022181b23100300&quot;&gt;[email protected]&lt;/a&gt;” Elayyan, July 13, 2012&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NewType’s short run was one of dominance in the region. A list of the team’s accolades can be found on &lt;a target=&quot;_blank&quot; href=&quot;https://www.gpforums.co.nz/threads/258109-Newtype-Results&quot;&gt;GamePlanet&lt;/a&gt;, which documents 7 first place finishes, and 12 Top-3 finishes, out of 15 events. &lt;a target=&quot;_blank&quot; href=&quot;https://www.gpforums.co.nz/threads/258118-Newtype-History&quot;&gt;Elayyan departed the team in 2008&lt;/a&gt;, and while he wasn’t around the scene for a very long time, he was a pioneer for the region and left a lasting impression on the community.&lt;/p&gt;
&lt;h2&gt;Life after gaming&lt;/h2&gt;
&lt;p&gt;While the man was an excellent &lt;em&gt;Counter-Strike&lt;/em&gt; player, Atta Elayyan had no shortage of talents. If ever there were a way to move on to an even more interesting life after spending time as a pro-gamer, Atta lived it.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-19618 aligncenter&quot; src=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-developer-of-LazyWorm-Apps-worked-with-Microsoft-to-create-programs-like-Metrotube-and-Tweetro.png&quot; alt=&quot;Atta Elayyan, developer of LazyWorm Apps, worked with Microsoft to create programs like Metrotube and Tweetro+&quot; width=&quot;740&quot; height=&quot;416&quot; srcset=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-developer-of-LazyWorm-Apps-worked-with-Microsoft-to-create-programs-like-Metrotube-and-Tweetro.png 740w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-developer-of-LazyWorm-Apps-worked-with-Microsoft-to-create-programs-like-Metrotube-and-Tweetro-300x169.png 300w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-developer-of-LazyWorm-Apps-worked-with-Microsoft-to-create-programs-like-Metrotube-and-Tweetro-620x349.png 620w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-developer-of-LazyWorm-Apps-worked-with-Microsoft-to-create-programs-like-Metrotube-and-Tweetro-240x135.png 240w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-developer-of-LazyWorm-Apps-worked-with-Microsoft-to-create-programs-like-Metrotube-and-Tweetro-85x48.png 85w&quot; sizes=&quot;(max-width: 740px) 100vw, 740px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;His decline in &lt;em&gt;Counter-Strike&lt;/em&gt; only came as a result of focusing on final-year university exams for a degree in Computer Science. After graduating, he worked as a UX designer for FireTrust, a computer security company. Shortly after that, he started his own entrepreneurial project called Chatflow. Elayyan’s big break eventually came in 2010, when he and friend Mike Choeung got together to build &lt;a target=&quot;_blank&quot; href=&quot;http://lazywormapps.com/&quot;&gt;Lazyworm Apps&lt;/a&gt;, a media solutions company focused on developing programs for the Windows Store.&lt;/p&gt;
&lt;p&gt;Lazyworm went on to develop major apps like MetroTube and Tweetro+ and worked closely with large companies like Microsoft, Mediaworks, and Aramex. According to Nigel Parker, a principal software engineer at Microsoft, &lt;a target=&quot;_blank&quot; href=&quot;https://medium.com/@nzigel/atta-elayyan-a-great-new-zealander-276bfc3e8b02&quot;&gt;MetroTube was, at one point, the most popular app on the Windows store.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;960&quot; height=&quot;540&quot; src=&quot;https://www.youtube.com/embed/yZ3Q3AJiAag?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;Elayyan was featured in a &lt;a target=&quot;_blank&quot; href=&quot;https://www.youtube.com/watch?v=RF9lD_QxgPg&quot;&gt;September 2012 keynote on Microsoft Ignite as one of New Zealand’s top Windows app developers.&lt;/a&gt; He was also recognized by &lt;a target=&quot;_blank&quot; href=&quot;https://www.cio.co.nz/article/658893/atta-elayyan-cio100-leader-one-of-victims-of-christchurch-massacre/&quot;&gt;CIO100&lt;/a&gt; as “one of New Zealand’s most transformative technology and digital leaders” in both &lt;a target=&quot;_blank&quot; href=&quot;https://www.cio.co.nz/article/616197/cio100-2017-31-100-atta-elayyan-lwa-solutions/&quot;&gt;2017&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;https://www.cio.co.nz/article/635193/cio100-2018-31-100-atta-elayyan-lwa-solutions/&quot;&gt;2018&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In an article for Medium, Parker spoke at length on Elayyan’s acumen as a developer, and his character as a person.&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;Atta had that rare blend of engineering and design. His strength was understanding people and building user interfaces that worked best the way that we do. He wanted to build consumer apps that delighted people and attempted to reach as many people as possible. He didn’t want to sell users to advertisers or build platforms that prayed on people’s needs to pay for the best experiences. Instead he poured everything into the software he created, made it available for free without ads or tracking data and then invited people to pay if they liked the experience.&lt;/p&gt;
&lt;p&gt;– Nigel Parker, Principal Software Engineer for Microsoft&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Parker went on to note that, despite facing failures on a regular basis, Atta stayed positive. He’d mark every milestone by taking every member of his projects out to dinner.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;7.0161290322581&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/nzigel?ref_src=twsrc%5Etfw&quot;&gt;@nzigel&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/kpatton?ref_src=twsrc%5Etfw&quot;&gt;@kpatton&lt;/a&gt; awesome! It’s &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/lazywormapps?ref_src=twsrc%5Etfw&quot;&gt;@LazywormApps&lt;/a&gt; tradition to go out for dinner after major milestones so how about you guys join us after ;)!&lt;/p&gt;
&lt;p&gt;— Atta Elayyan (@attaelayyan) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/attaelayyan/status/177327902432563200?ref_src=twsrc%5Etfw&quot;&gt;March 7, 2012&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Christchurch’s own Clark Kent&lt;/h2&gt;
&lt;p&gt;Making the transition from trailblazing &lt;em&gt;CS:S&lt;/em&gt; pro to trailblazing app developer, Atta Elayyan spent a significant amount of his life on computers. But he wasn’t just your average nerd. He was just as much of a competitor physically as he was in the worlds of gaming and tech. As if his bio wasn’t already impressive enough, Elayyan was also the starting goalkeeper for the New Zealand Futsal Whites, the country’s national indoor-soccer team.&lt;/p&gt;
&lt;div id=&quot;attachment_19616&quot; class=&quot;wp-caption aligncenter&quot; readability=&quot;32&quot;&gt;&lt;img aria-describedby=&quot;caption-attachment-19616&quot; class=&quot;size-full wp-image-19616&quot; src=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team.jpeg&quot; alt=&quot;Atta Elayyan was also a goalkeeper for the New Zealand national futsal team&quot; width=&quot;800&quot; height=&quot;533&quot; srcset=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team.jpeg 800w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-291x194.jpeg 291w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-768x512.jpeg 768w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-600x400.jpeg 600w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-240x160.jpeg 240w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-81x54.jpeg 81w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;p id=&quot;caption-attachment-19616&quot; class=&quot;wp-caption-text&quot;&gt;Photo from FutsalPlanet (@futsalplanet97)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;According to &lt;a target=&quot;_blank&quot; href=&quot;https://www.nzfootball.co.nz/newsarticle/74347&quot;&gt;New Zealand Football&lt;/a&gt;, Elayyan was a “hugely popular member of the futsal community” and competed in 19 A Internationals for the Futsal Whites organization. He was also a cornerstone of the Canterbury United Futsal Dragons team. According to &lt;a target=&quot;_blank&quot; href=&quot;https://www.stuff.co.nz/sport/football/111348435/new-zealand-football-mourning-christchurch-shootings-victim-futsal-white-atta-elayyan&quot;&gt;&lt;em&gt;Stuff&lt;/em&gt;&lt;/a&gt;, a day before the attacks, Elayyan had met with Ronan Naicker, a good friend and Mainland Football’s futsal development officer, to pick up gear for the Christchurch Boys’ futsal team. Elayyan was set to coach the Christchurch Boys’ High School team at the secondary school nationals at Wellington this coming Monday.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;9.8913043478261&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;QUOTE | &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/NZ_Football?ref_src=twsrc%5Etfw&quot;&gt;@NZ_Football&lt;/a&gt; Futsal Development Manager &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/margetts_josh?ref_src=twsrc%5Etfw&quot;&gt;@margetts_josh&lt;/a&gt;: “To Atta’s family, we are deeply sorry for your loss. We can’t imagine what you are going through, but please know we love you and we are here for you during this incredibly difficult time.” &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/hashtag/RIPAtta?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#RIPAtta&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/MainlandFooty?ref_src=twsrc%5Etfw&quot;&gt;@MainlandFooty&lt;/a&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://t.co/tCcileWiUK&quot;&gt;pic.twitter.com/tCcileWiUK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— New Zealand Football (@NZ_Football) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/NZ_Football/status/1107096526613028864?ref_src=twsrc%5Etfw&quot;&gt;March 17, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Naicker, who himself had coached Elayyan and the Canterbury Dragons to two national championships (and a &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/attaelayyan/status/541462032386514944&quot;&gt;Player of the Year award for Elayyan&lt;/a&gt;), had this to say on his friend’s tragic death:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p class=&quot;sics-component__html-injector sics-component__story__paragraph&quot;&gt;He tried to give back to his old school by coaching teams. Even though he didn’t have the time he still found time and he did it all for nothing. He never asked for anything in return. He was a truly exceptional human being.&lt;/p&gt;
&lt;p class=&quot;sics-component__html-injector sics-component__story__paragraph&quot;&gt;– Ronan Naicker, Christchurch futsal development officer for Mainland Football&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;According to &lt;em&gt;Stuff,&lt;/em&gt; he also worked with the goalkeepers for the Canterbury women’s team, who won the inaugural national league title this past February.&lt;/p&gt;
&lt;p&gt;Beyond football, it seems Elayyan also had an avid interest in automobiles. He built a custom E30 340i V8 BMW which, according to a video posted on his own YouTube channel, won the award for Best 8 Cylinder Vehicle at a “South Islands Champs” show and shine competition.&lt;/p&gt;
&lt;p&gt;&lt;iframe width=&quot;960&quot; height=&quot;540&quot; src=&quot;https://www.youtube.com/embed/_NrEdpxlg00?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;

&lt;h2&gt;A lasting impression&lt;/h2&gt;
&lt;p&gt;In the short time since it was discovered that Atta Elayyan was one of the 50 people murdered in the Christchurch massacre, the outpouring of support from the community has been resounding. Peers, teammates, gamers and friends alike have openly offered respects and tributes.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.gpforums.com.au/threads/528025-RIP-Cr-zyArab&quot;&gt;Atvar, a &lt;em&gt;Counter-Strike&lt;/em&gt; teammate from NewType, shared the following words on GamePlanet:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;16&quot;&gt;
&lt;p&gt;I am honoured to have known Atta from our days back in 2005-2009 playing &lt;em&gt;Counter-Strike&lt;/em&gt;. He was one of the kindest, and [friendliest members] of the [CSNZ] community. He never had a bad word to say about anyone, and in my two to three years of playing with him, I don’t remember him ever speaking in anger to anyone.&lt;/p&gt;
&lt;p&gt;He stayed with myself and my parents for the odd LAN and they found him to be a very polite and well-mannered individual. He was driven to reach his potential in all aspects of his life and also assisted others in fulfilling their potential too. I will cherish the times we spent playing together and hope to emulate your best qualities where I can. He really was the best of us in the [&lt;em&gt;CS&lt;/em&gt;] community and I will miss you brother.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.nzfootball.co.nz/newsarticle/74347&quot;&gt;New Zealand Football Interim Chief Executive Andrew Pragnell had this to say:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;It is still hard to comprehend what happened in Christchurch on Friday afternoon. On behalf of everyone at New Zealand Football our thoughts and prayers go out to anyone who has been affected by these heinous acts of violence.  My heart goes out to the futsal community. They are a very tight-knit group and this news of Atta’s death will be devastating for all involved in the game. We feel their pain and their grief.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-19619 aligncenter&quot; src=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer.jpg&quot; alt=&quot;Atta Elayyan was a goalkeeper for the New Zealand national futsal team, a sport that focuses on indoor soccer&quot; width=&quot;1237&quot; height=&quot;700&quot; srcset=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer.jpg 1237w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer-300x170.jpg 300w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer-768x435.jpg 768w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer-1024x579.jpg 1024w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer-620x351.jpg 620w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer-240x136.jpg 240w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-was-a-goalkeeper-for-the-New-Zealand-national-futsal-team-a-sport-that-focuses-on-indoor-soccer-85x48.jpg 85w&quot; sizes=&quot;(max-width: 1237px) 100vw, 1237px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.stuff.co.nz/sport/football/111348435/new-zealand-football-mourning-christchurch-shootings-victim-futsal-white-atta-elayyan&quot;&gt;Chris Sinclair, a former futsal teammate, who had eventually moved into refereeing, shared these thoughts:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;I was a referee and he never had a bad word to say about anything. He’s just a genuine man – heart of gold, not only for his culture, but his family and the futsal community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.stuff.co.nz/sport/football/111348435/new-zealand-football-mourning-christchurch-shootings-victim-futsal-white-atta-elayyan&quot;&gt;Good friend and coach Ronan Naicker spoke on Elayyan being a devout Muslim and how seamlessly he adapted to the culture in New Zealand:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p class=&quot;sics-component__html-injector sics-component__story__paragraph&quot;&gt;He was somebody you would follow. He wasn’t someone that was trying to be a leader, he just naturally was by his personality… That’s why it’s so tragic because he set an example of someone that can seamlessly integrate across a faith, a community, and religions. It was never an issue when it came to that for him.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;5.1803278688525&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Wedding card design… for my own wedding :D! &lt;a target=&quot;_blank&quot; href=&quot;https://t.co/bdPmoKP2PA&quot;&gt;pic.twitter.com/bdPmoKP2PA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Atta Elayyan (@attaelayyan) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/attaelayyan/status/678643298039406592?ref_src=twsrc%5Etfw&quot;&gt;December 20, 2015&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.stuff.co.nz/sport/football/111348435/new-zealand-football-mourning-christchurch-shootings-victim-futsal-white-atta-elayyan&quot;&gt;Said Ryan Batty, another former teammate of Elayyan’s from the Canterbury and New Zealand squads:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;It was a great privilege to have known and played alongside such [an] incredible man. He has left a big hole in the futsal community and will be forever missed. Atta was a genuine, loyal, and committed man in every aspect of his life. He was well respected by everyone in the futsal community and you couldn’t have met a nicer man, who always made time for everybody.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.nzfootball.co.nz/newsarticle/74347&quot;&gt;Josh Margetts, the Futsal Development Manager for New Zealand, also once played alongside Elayyan:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;Atta was a great man and well-liked by everyone in the Futsal Whites squad and the futsal community. There are no words to sum up how we are all feeling. There is huge hole in our hearts as we come to terms with the loss of a great person and a good mate. He will be sorely missed. To Atta’s family, we are deeply sorry for your loss. We can’t imagine what you are going through, but please know we love you and we are here for you during this incredibly difficult time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; data-lang=&quot;en&quot; readability=&quot;9.135593220339&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Rest in peace Atta. We can’t understand the hate, but we do know the love of our futsal community and you won’t be forgotten.&lt;br/&gt;Futsal people, our people &lt;a target=&quot;_blank&quot; href=&quot;https://t.co/xuLfZKzlhz&quot;&gt;pic.twitter.com/xuLfZKzlhz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Futsalplanet.com (@futsalplanet97) &lt;a target=&quot;_blank&quot; href=&quot;https://twitter.com/futsalplanet97/status/1106863583793741825?ref_src=twsrc%5Etfw&quot;&gt;March 16, 2019&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://medium.com/@nzigel/atta-elayyan-a-great-new-zealander-276bfc3e8b02&quot;&gt;Nigel Parker, who was quoted above as a lead software engineer for Microsoft, added:&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;19&quot;&gt;
&lt;p&gt;Atta Elayyan to me was one of those people that you are lucky to meet in your lifetime. He was a genuine leader, talented designer and inspiring entrepreneur… Atta was a friend who gave so much to everyone that knew him. What he achieved in his short life is more than most.&lt;/p&gt;
&lt;p&gt;He raised to the top of everything he applied his energy to, he took risks, he was unafraid of failure and he failed often, yet he was humble and believed in collaboration over competition in everything he did.&lt;/p&gt;
&lt;p&gt;There is [a] hole that has opened up inside me that will take time to heal but instead of hate we must stand together, encourage diversity and integration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.reddit.com/r/GlobalOffensive/comments/b22gun/nz_player_crazyarab_passes_away_in_christchurch/&quot;&gt;A memorial thread for Elayyan was posted on the Global Offensive subreddit and many fans, teammates and fellow &lt;em&gt;Counter-Strike&lt;/em&gt; players also offered their condolences.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Gone, but never forgotten&lt;/h2&gt;
&lt;p&gt;Atta, an Arabic name, means &lt;em&gt;gift&lt;/em&gt; or &lt;em&gt;to give&lt;/em&gt;. By every account that’s come forth about the man since his passing, Atta Elayyan lived up to his name. He gave to his community. He gave to his teammates. He gave it his all in pursuing his passions. He was a relentlessly interesting and talented man that smiled in the face of adversity and took every failure in stride. In his short time on this planet, his kindness, charisma and work ethic touched many different people from all walks of life.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.gpforums.co.nz/threads/451018-Where-are-you-now?p=9063641#post9063641&quot;&gt;His own words give a glimpse into the man that he was.&lt;/a&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;I never thought I would ever be in a position to say this however I actually owe a lot to [&lt;em&gt;Counter-Strike&lt;/em&gt;]. I would have never gotten into the tech industry had I not been obsessed with gaming during those years and the hours of focus, intense game play and desire to succeed has actually helped me alot in many aspects of my life. Of course, even if it was a complete waste of time, the people and friends I met during those years made it worth it &lt;img class=&quot;inlineimg&quot; title=&quot;Smile&quot; src=&quot;https://www.gpforums.co.nz/skins/gpforums/images/smilies/smile.png&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Would I tell my 17 year old self to do it again?… Yep.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Elayyan’s father was with him at the time of his death and was among the few that survived the attack. Elayyan also left behind a wife, Farah, and a two-year-old daughter, Aya.&lt;/p&gt;
&lt;p&gt;If you would like to support Atta Elayyan’s family, a &lt;a target=&quot;_blank&quot; href=&quot;https://givealittle.co.nz/cause/help-atta-elayyans-family#&quot;&gt;&lt;em&gt;GiveALittle&lt;/em&gt; initiative has been opened in his name.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;size-full wp-image-19623 aligncenter&quot; src=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-Counter-Strike-pro-MetroTube-app-developer-Goalkeeper-for-New-Zealands-national-futsal-team-and-victim-of-the-Christchurch-Massacre.png&quot; alt=&quot;Atta Elayyan, Counter-Strike pro, MetroTube app developer, Goalkeeper for New Zealand's national futsal team, and victim of the Christchurch Massacre&quot; width=&quot;800&quot; height=&quot;480&quot; srcset=&quot;https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-Counter-Strike-pro-MetroTube-app-developer-Goalkeeper-for-New-Zealands-national-futsal-team-and-victim-of-the-Christchurch-Massacre.png 800w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-Counter-Strike-pro-MetroTube-app-developer-Goalkeeper-for-New-Zealands-national-futsal-team-and-victim-of-the-Christchurch-Massacre-300x180.png 300w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-Counter-Strike-pro-MetroTube-app-developer-Goalkeeper-for-New-Zealands-national-futsal-team-and-victim-of-the-Christchurch-Massacre-768x461.png 768w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-Counter-Strike-pro-MetroTube-app-developer-Goalkeeper-for-New-Zealands-national-futsal-team-and-victim-of-the-Christchurch-Massacre-620x372.png 620w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-Counter-Strike-pro-MetroTube-app-developer-Goalkeeper-for-New-Zealands-national-futsal-team-and-victim-of-the-Christchurch-Massacre-240x144.png 240w, https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-Counter-Strike-pro-MetroTube-app-developer-Goalkeeper-for-New-Zealands-national-futsal-team-and-victim-of-the-Christchurch-Massacre-85x51.png 85w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot;/&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Atta Elayyan was just one of 50. Remember him, but &lt;a target=&quot;_blank&quot; href=&quot;https://www.nzherald.co.nz/nz/news/article.cfm?c_id=1&amp;amp;objectid=12213358&quot;&gt;don’t forget to remember the other lives that were lost that day&lt;/a&gt;, each with their own story, their own path, and their own mark on this world.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;saboxplugin-wrap&quot; itemtype=&quot;http://schema.org/Person&quot; itemscope=&quot;&quot; itemprop=&quot;author&quot;&gt;
&lt;div class=&quot;saboxplugin-gravatar&quot;&gt;&lt;img src=&quot;https://dailyesports.gg/wp-content/uploads/2018/05/Avatar.jpeg&quot; alt=&quot;&quot; itemprop=&quot;image&quot;/&gt;&lt;/div&gt;

&lt;div class=&quot;saboxplugin-desc&quot; readability=&quot;7.5&quot;&gt;
&lt;div itemprop=&quot;description&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;Pizza. Music. Baseball. Wrestling. Netflix. If society thinks it’s a waste of time, I’m probably addicted to it. Also, I write about stuff sometimes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


</description>
<pubDate>Mon, 18 Mar 2019 22:55:50 +0000</pubDate>
<dc:creator>twistedlogicx</dc:creator>
<og:image>https://www.dailyesports.gg/wp-content/uploads/2019/03/Atta-Elayyan-a-former-Counter-Strike-pro-known-as-crazyarab-was-among-those-murdered-in-the-Christchurch-massacre-620x341.png</og:image>
<og:type>article</og:type>
<og:title>Remembering Atta Elayyan, CS:S pro and victim of Christchurch Shooting</og:title>
<og:description>Atta Elayyan was a Counter-Strike pro, an app developer, a national goalkeeper, a motorhead, and a victim in the Christchurch massacre. This is his story.</og:description>
<og:url>https://www.dailyesports.gg/remembering-atta-elayyan-christchurch-shooting-victim/</og:url>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.dailyesports.gg/remembering-atta-elayyan-christchurch-shooting-victim/</dc:identifier>
</item>
<item>
<title>Nvidia&amp;#039;s $99 Jetson Nano Is an AI Computer for DIY Enthusiasts</title>
<link>https://www.engadget.com/2019/03/18/nvidia-jetson-nano-ai-computer/</link>
<guid isPermaLink="true" >https://www.engadget.com/2019/03/18/nvidia-jetson-nano-ai-computer/</guid>
<description>&lt;p&gt;The kit can run Linux out of the box, and supports a raft of AI frameworks (including, of course, NVIDIA's own). It comes equipped with 4GB of RAM, gigabit Ethernet and the I/O you'd need for cameras and other attachments.&lt;/p&gt;
&lt;p&gt;Price, unsurprisingly, is the main hook. While the Nano isn't nearly as powerful as &lt;a href=&quot;https://www.engadget.com/2018/12/12/nvidia-jetson-agx-xavier-robot-processor-available/&quot;&gt;higher-end Jetson models&lt;/a&gt;, it's available now at $99 for individuals and $129 for &quot;production-ready&quot; units destined for companies. That puts it within range of hobbyists, inventors and students who are willing to spend a bit more (but only a bit more) to create their own automated devices.&lt;/p&gt;
</description>
<pubDate>Mon, 18 Mar 2019 22:36:28 +0000</pubDate>
<dc:creator>plasticchris</dc:creator>
<og:type>article</og:type>
<og:url>https://www.engadget.com/2019/03/18/nvidia-jetson-nano-ai-computer/</og:url>
<og:title>NVIDIA's $99 Jetson Nano is an AI computer for DIY enthusiasts</og:title>
<og:description>NVIDIA has unveiled a $99 computer that brings AI hardware to the homebrew crowd.</og:description>
<og:image>https://o.aolcdn.com/images/dims?thumbnail=1200%2C630&amp;quality=80&amp;image_uri=https%3A%2F%2Fo.aolcdn.com%2Fimages%2Fdims%3Fresize%3D2000%252C2000%252Cshrink%26image_uri%3Dhttps%253A%252F%252Fs.yimg.com%252Fos%252Fcreatr-uploaded-images%252F2019-03%252F99b73050-4a1c-11e9-bfff-1ba7ac6db079%26client%3Da1acac3e1b3290917d92%26signature%3D99d2c35b5a465131ec5defb69aded6d152165dac&amp;client=amp-blogside-v2&amp;signature=ad9c44fe58f283f22ea6a9ad638805b731b67e15</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.engadget.com/2019/03/18/nvidia-jetson-nano-ai-computer/</dc:identifier>
</item>
<item>
<title>How we do Vue: one year later (2017)</title>
<link>https://about.gitlab.com/2017/11/09/gitlab-vue-one-year-later/</link>
<guid isPermaLink="true" >https://about.gitlab.com/2017/11/09/gitlab-vue-one-year-later/</guid>
<description>&lt;p&gt;It's been a while since &lt;a href=&quot;https://about.gitlab.com/2016/10/20/why-we-chose-vue/&quot;&gt;we wrote about Vue&lt;/a&gt;. We've been using Vue for over a year now and life has been very good. Thanks &lt;a href=&quot;https://twitter.com/lnoogn&quot;&gt;@lnoogn&lt;/a&gt; for reminding me to write this article!&lt;/p&gt;
&lt;p&gt;Our situation reminds me of a quote about Scala from &lt;a href=&quot;https://www.reddit.com/r/scala/comments/2hw0bp/is_scala_slowly_dying/&quot;&gt;&quot;Is Scala slowly dying?&quot;&lt;/a&gt; Someone once said:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Scala people don't have time for redditing and blogging, they're busy getting crap done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which is exactly what we've been doing. Like Scala, Vue works really, really well, when used properly. It turns out Vue isn't a buzzword, Vue is a workhorse. A lot of our problems have been solved, by us and others. We still have problems but, we now have a reproducible &quot;way to write Vue.&quot; We don't adopt every new idea out there, but we have changed a few things since we last spoke.&lt;/p&gt;
&lt;p&gt;Since that last post, we published a &lt;a href=&quot;https://docs.gitlab.com/ee/development/fe_guide/vue.html&quot;&gt;very extensive Vue style guide&lt;/a&gt;, after which Vue also put out a &lt;a href=&quot;https://vuejs.org/v2/style-guide/&quot;&gt;style guide&lt;/a&gt;, &lt;a href=&quot;https://github.com/vuejs/eslint-plugin-vue/issues/77#issuecomment-315834845&quot;&gt;taking inspiration from ours&lt;/a&gt;. The style guide has been updated several times as we discover better ways to write Vue. Here are some of the things we discovered.&lt;/p&gt;
&lt;h2 id=&quot;just-use-vuex&quot;&gt;Just use VueX&lt;/h2&gt;
&lt;p&gt;We discovered that &lt;a href=&quot;https://vuex.vuejs.org/&quot;&gt;VueX&lt;/a&gt; makes our lives easier. If you are writing a medium to large feature, use VueX. If it's a tiny feature, you might get away without it. We made the mistake of not using VueX for a large feature. We wrote a &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/issues/31890&quot;&gt;multi-file editor&lt;/a&gt; (WIP) to replace our current repo file view, to allow easy editing of multiple files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/vue_2017/multi-file-editor.png&quot; alt=&quot;multi-file-editor.png&quot; class=&quot;shadow&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In the beginning we did not use VueX for this feature and instead used the store pattern. The Vue docs talk about the &lt;a href=&quot;https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratch&quot;&gt;store pattern&lt;/a&gt;, which works well when you are committed to strictly keeping to the pattern. We've found that you are better off spending your time with VueX instead. While VueX is initially more verbose, it is much more scalable, and will save you tons of time in the long run. Our mistake happened when we changed the data in multiple places. In VueX you are forced to change the data in one central place. If you don't do this, you will wind up chasing unexpected bugs around.&lt;/p&gt;
&lt;h2 id=&quot;write-high-quality-code&quot;&gt;Write high quality code&lt;/h2&gt;
&lt;p&gt;Even though VueJS and VueX are both wonderful, it is still possible (as with any code) to write bad Vue code. While the code may work, your longevity and scalability may suffer. Performance can suffer. With Vue, it makes it so easy to have what seems like working, perfect code because Vue is so simple to write. Longevity problems can mean that your code initially works, but you (and others) will have a hard time trying to update the code. Performance problems might not crop up with small data sets, but will with larger ones. Code can get messy. Your code can get smelly. Yes, even with Vue, you can have &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_smell&quot;&gt;code smell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you add something to the &lt;code&gt;data&lt;/code&gt; object or the &lt;code&gt;store&lt;/code&gt; for Vue to keep track of, Vue will recursively walk down your data object and keep track of everything. If your data is super hierarchical and just large in general, and you are changing things often (like maybe on &lt;code&gt;mousemove&lt;/code&gt;), then you can create jank. It's not bad to have Vue observe large data sets, but just confirm that you do in fact need the data you are watching to be reactive. It's easy with Vue to just make everything reactive, when it might not need to be.&lt;/p&gt;
&lt;p&gt;That's why we are very strict when anyone writes Vue code. They must &lt;a href=&quot;https://docs.gitlab.com/ee/development/fe_guide/vue.html&quot;&gt;follow our documentation&lt;/a&gt;. They must also only write Vue when it is necessary and not write it &lt;a href=&quot;https://docs.gitlab.com/ee/development/fe_guide/vue.html#when-not-to-use-vue-js&quot;&gt;when it is overkill&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All of our new Vue code follows the &lt;a href=&quot;https://facebook.github.io/flux/&quot;&gt;Flux architecture&lt;/a&gt;. VueX also follows Flux, which is part of the reason we use VueX. You can use the previously mentioned &quot;store pattern,&quot; but VueX is a better choice because it enforces all of the rules. If you go rogue, you will wind up enforcing the rules yourself, and you will probably make mistakes. The less you put on your plate, the better. A good example of a well-written Vue app is the &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/14303&quot;&gt;registry image list&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;i-want-to-use-jquery-with-vue&quot;&gt;I want to use jQuery with Vue&lt;/h3&gt;
&lt;p&gt;During new development, this question kept popping up.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Is it ever OK to mix jQuery with VueJS?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are not talking about using &lt;a href=&quot;https://select2.org/&quot;&gt;Select2&lt;/a&gt;, which is a jQuery library. We are talking about the need to query the DOM. We had discussions about using jQuery and the following was proposed:&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;Using jQuery is OK, but only for querying.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first I had several discussions about using jQuery with Vue. Some had said it might be OK, but only in read-only (querying) situations. However, after doing the research, we found that it is &lt;strong&gt;not&lt;/strong&gt; a good idea to use jQuery with Vue. There will always be a better solution. We found that if you ever find yourself needing to query to DOM within a Vue architecture, then you are doing something wrong.&lt;/p&gt;
&lt;p&gt;If one were to hypothetically use jQuery for only the tiniest querying situations, one would have to quantify those situations. You should instead swear off querying the DOM when in Vue.&lt;/p&gt;
&lt;p&gt;Instead of querying, you will find that using the &lt;code&gt;store&lt;/code&gt; in combination with the server-side code is usually a much simpler answer. The server can provide validity to your data that you cannot provide on the client side. For the most part, we find that the less we have to fool with the data on the client side the better. That's not to say it's never OK to modify the data on the client side, but that it isn't usually the cleanest solution. At GitLab we use querying only to grab endpoints from the &lt;code&gt;data&lt;/code&gt; attribute of our main element, but we don't use jQuery, we use &lt;code&gt;el.dataset&lt;/code&gt;. At GitLab, we (the Frontend people) talk with the Backend people to ensure the structure of the data we will be consuming. In that way, both the Frontend team and the Backend team can be in control.&lt;/p&gt;
&lt;h4 id=&quot;example-situation&quot;&gt;Example situation:&lt;/h4&gt;
&lt;p&gt;Check out this issue:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/vue_2017/issue.png&quot; alt=&quot;issue&quot; class=&quot;shadow&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We now render all issue comments in Vue. An example of a situation where we wanted to use jQuery was during the rewrite of the edit-the-last-user-comment feature. When someone presses that &lt;code&gt;up&lt;/code&gt; key on their keyboard from an empty new comment &lt;code&gt;textarea&lt;/code&gt; (at the very bottom of the page) we allow them to edit the last comment they created, just like in Slack. Not just the last comment, but the last comment &lt;em&gt;they created&lt;/em&gt;. We marked the last user comment in the picture in red. Of course there is a time crunch. Then someone might say,&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Can't we just do a quick solution here and fix it later?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Surely you &lt;em&gt;could&lt;/em&gt; query the DOM for this. A better solution, in this case, is to let the backend developers mark the last user comment in the JSON they return. Backend developers have direct access to the database, which means they may be able to optimize the code. Then no client-side work has to be done at all, in this case. Someone has to do the work to mark the last user comment. In this case the solution is just finding the right person for the job. Once you have that data from the server, the comment is in your &lt;code&gt;store&lt;/code&gt;, ready for your easy access. You can do anything now. The world is your oyster.&lt;/p&gt;
&lt;p&gt;If you find yourself querying the DOM, &quot;just this one time&quot; 😉, there is always a better solution.&lt;/p&gt;
&lt;h3 id=&quot;the-proper-vue-app&quot;&gt;The proper Vue app&lt;/h3&gt;
&lt;p&gt;Every Vue bundle needs one store, one service, and always has one entry point. Your entry point component is the only container component and every other component is presentational. All this information is in our Vue docs.&lt;/p&gt;
&lt;p&gt;You can start out with a single &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight html&quot;&gt;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--HAML--&amp;gt;&lt;/span&gt;
.js-vue-app{ data: { endpoint: 'foo' }}

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--HTML--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;js-vue-app&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-endpoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can pass your endpoints in through the data attributes. Vue can then call these endpoints with an HTTP client of your choice.&lt;/p&gt;
&lt;p&gt;You don't want to do any URL building in client-side JavaScript. Make sure you pass in all your server-built URLs through endpoints. When writing Vue it's important to let the server do what it should.&lt;/p&gt;
&lt;h2 id=&quot;improve-performance&quot;&gt;Improve performance&lt;/h2&gt;
&lt;p&gt;We recently rewrote our issue comments in Vue. The issue comments were previously written in Haml, jQuery, and Rails. We had a bottleneck because we were not loading the comments asynchronously. A quick solution is to load comments via ajax and populate comments after the page loads. One way to make a page load faster is to not block the page with heavy items and load them after.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/vue_2017/comments.png&quot; alt=&quot;comments.png&quot; class=&quot;shadow&quot;/&gt;&lt;/p&gt;
&lt;p&gt;What we love is that one day we turned on the new comments and some people didn't know that we had refactored it. As a result of the refactor our issue pages load much faster, and there is less jank.&lt;/p&gt;
&lt;p&gt;Loading the comments on the issue page is now streamlined and now individual issues load much faster. In the past, an issue page could have tens of thousands of event listeners. Our previous code was not properly removing and keeping track of event listeners. Those massive event listeners (along with other problems) created jank, so scrolling the page was choppy with many comments. We removed jQuery and added in Vue and focused on improving the performance. You can clearly see and feel that the page is much faster. However, our work to improve the performance has just begun. This rewrite sets the foundation for performance improvements that are easier to write, because the code is much more maintainable. Previously the code was hard to maintain. Now the issue comments code is properly separated and &quot;componentized.&quot;&lt;/p&gt;
&lt;p&gt;With these new improvements, as well as other parallel improvements, e.g. loading images on scroll, we were able to make the page load and perform faster.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://about.gitlab.com/images/vue_2017/speed.png&quot; alt=&quot;speed.png&quot; class=&quot;shadow&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Refactoring is that word that a new, super-green developer mentions on day one when they suggest to rewrite everything in Angular. That hasn't happened at GitLab. Our frontend devs tend to be very conservative, which is a very good thing. Which begs the question, why does it seems like &lt;a href=&quot;https://reasonml.github.io/community/blog/#reason-3&quot;&gt;everyone is always refactoring&lt;/a&gt;? What are they trying to achieve? I can only speak for GitLab. What do we want to achieve with a refactor? In reality it's going to cost a lot of money. The costs are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Cost of doing the refactoring.&lt;/li&gt;
&lt;li&gt;Cost of testing the change.&lt;/li&gt;
&lt;li&gt;Cost of updating tests and documentation.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You also have more risk:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Risk of introducing bugs.&lt;/li&gt;
&lt;li&gt;Risk of taking on a huge task that you can't finish.&lt;/li&gt;
&lt;li&gt;Risk of not achieving the quality/improvements you intended.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Our goals are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goal #1&lt;/strong&gt;: Make the code more maintainable. We want to make the process of adding new features easier. In the long term this refactor will save us time, but it takes a significant amount of time to recoup the time spent refactoring. The hard truth may be that a refactor usually does not save you time, but can save you stress.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goal #2&lt;/strong&gt;: What it can do, if done right, is make developers happy. Nothing gives your team more horsepower than a happy, excited coder. A stressed-out coder will want to stop coding; an excited coder will not want to stop. A happy coder saves the most time.&lt;/p&gt;
&lt;p&gt;To meet our goal our next step is to refactor the merge request comments section. Our merge request comments are massively slow for merge requests with lots of comments. The comments become slower and start to be less responsive at around 200 comments. The diffs are slow as well. There are a ton of reasons for this, one of which is that JavaScript is causing multiple reflows that take tons of time. We could refactor this and have already put in a fix, but this isn't a long-term solution. In the case of a huge MR, there was code that was causing a reflow that &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/issues/39332&quot;&gt;takes over eight seconds&lt;/a&gt;! This is now fixed. In this &lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ce/uploads/e18856a1544d4d0e6420d11fd0479af7/ss__2017-10-20_at_1.41.04_PM.png&quot;&gt;image&lt;/a&gt; you can see there is other stuff slowing things down. Clearly there is a lot of work to do here. Our biggest problem is that the code is not maintainable, which means that fixes take longer. A refactor into Vue will provide some great initial speed improvements, and lay the groundwork for easier improvements in the future.&lt;/p&gt;
&lt;p&gt;There is so much work to do at GitLab. If you want to be a part of exploring the massive catacombs of GitLab and writing awesome code and if you are interested in helping out our Frontend team, then &lt;a href=&quot;https://about.gitlab.com/job-families/engineering/frontend-engineer/&quot;&gt;apply&lt;/a&gt;.&lt;/p&gt;

</description>
<pubDate>Mon, 18 Mar 2019 21:38:29 +0000</pubDate>
<dc:creator>NicoJuicy</dc:creator>
<og:description>How we, at GitLab, write VueJS, one year later.</og:description>
<og:title>How we do Vue: one year later</og:title>
<og:type>article</og:type>
<og:url>https://about.gitlab.com/2017/11/09/gitlab-vue-one-year-later/</og:url>
<og:image>https://about.gitlab.com/images/vue_2017/vue-title.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://about.gitlab.com/2017/11/09/gitlab-vue-one-year-later/</dc:identifier>
</item>
<item>
<title>Eliminating Robocalls</title>
<link>https://www.twilio.com/blog/your-phone-your-call-eliminating-robocalls</link>
<guid isPermaLink="true" >https://www.twilio.com/blog/your-phone-your-call-eliminating-robocalls</guid>
<description>&lt;div readability=&quot;43&quot;&gt;
&lt;p&gt;All of us have had the experience. A meeting or a dinner interrupted by our phone ringing with some random number on the screen. Click ‘ignore’. Maybe a minute later we get the notification of a new voicemail (maybe in another language) touting a new deal on satellite TV, or better yet, alerting you to an urgent &quot;lawsuit from the cops.&quot; Or rather, they don't leave a voicemail at all... because they'll just robocall you again in 20 minutes, hoping you'll answer from a different random number.&lt;/p&gt;
&lt;p&gt;Sound familiar? If your experience is anything like mine, your &quot;missed calls&quot; screen looks a bit like mine:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;One day&amp;amp;#39;s worth of unknown callers.&quot; class=&quot;richtext-image left&quot; height=&quot;1082&quot; sizes=&quot;500px&quot; src=&quot;https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/VY0sh8Abc7IhPGBp1Z5D_dja_Sn9D5pbrneh5OdrXzemHe.width-500.png&quot; srcset=&quot;https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/VY0sh8Abc7IhPGBp1Z5D_dja_Sn9D5pbrneh5OdrXzemHe.width-500.png 500w, https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/VY0sh8Abc7IhPGBp1Z5D_dja_Sn9D5pbrneh5OdrXzemH.width-1000.png 739w&quot; width=&quot;500&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;p&gt;
&lt;center&gt;&lt;em&gt;Literally my missed calls screen. Yours too?&lt;/em&gt;&lt;/center&gt;
&lt;/p&gt;&lt;div readability=&quot;197.03282889919&quot;&gt;
&lt;p&gt;Robocalling has reached epic proportions and we're all starting to hate our phones. In fact, according to &lt;a href=&quot;https://firstorion.com/nearly-50-of-u-s-mobile-traffic-will-be-scam-calls-by-2019/&quot;&gt;First Orion&lt;/a&gt;, nearly 50% of all US mobile calls made in 2019 are expected to be robocalls. Stop and think about that for a second: half of all calls are unwanted.&lt;/p&gt;
&lt;p&gt;Since the pervasiveness of robocalling has exploded in the last year, folks have asked me my thoughts, and frankly, whether Twilio allows this with our platform. &lt;strong&gt;We don't&lt;/strong&gt;, and I'm as concerned as you are about robocalling. We don't want these robocallers on our platform, and we actively work to prevent these perpetrators from making unwanted calls using our product. Yet a simple &lt;a href=&quot;https://www.google.com/search?q=robocall&quot;&gt;Google search&lt;/a&gt; will show plenty of companies actually advertising their robocalling services!&lt;/p&gt;
&lt;p&gt;Clearly something must be done.&lt;/p&gt;
&lt;h2&gt;Why is it so bad?&lt;/h2&gt;
&lt;p&gt;The root cause started over a century ago…&lt;/p&gt;
&lt;p&gt;When the first US telephone services were created around the turn of the 20th century, one company, the Bell Telephone Company (later rebranded AT&amp;amp;T) not only built and operated the network but also every device attached to the network. In that world, trust wasn't an issue because every device was sanctioned by the same company.&lt;/p&gt;
&lt;p&gt;But that started to change in 1956 when the DC Circuit Court of Appeals ruled that the network needed to be open, forcing AT&amp;amp;T to allow 3rd party devices on the network. And thus began the trend toward more open communications. In 1968, AT&amp;amp;T was ordered by the FCC to allow 3rd party phones to attach to their network. In 1982, the DOJ split AT&amp;amp;T into multiple competitive companies. Fourteen years later, the Telecommunications Act of 1996 made communications even more competitive enabling the creation of competitive local carriers.&lt;/p&gt;
&lt;p&gt;At each step, consumers have generally received better service and lower prices through increased competition. So what's the problem?&lt;/p&gt;
&lt;p&gt;That original network, designed in the first half of the 20th century, was built and operated by one company. Any actor on the network was automatically and fundamentally trusted. That meant that little security was built into the network itself.&lt;/p&gt;
&lt;p&gt;But with all the breakups and competitive tides the network became more open. However, the underlying protocols – and trust – were fundamentally based on a 100-year-old model. There was no way to anticipate the technological advances that would dramatically change everything about telecommunications in the coming decades.&lt;/p&gt;
&lt;p&gt;Roll ahead to 2019: if you have the right access, hardware and/or software -- you can initiate a call on the network, from any phone number, to any phone number in a (pretty much) untraceable way.&lt;/p&gt;
&lt;p&gt;Vrrrrrrp? &lt;em&gt;Record screech.&lt;/em&gt; What?!? That's right… anybody can impersonate anybody else on the phone network to make a phone call. (Yeah, I was surprised to learn that too.)&lt;/p&gt;
&lt;h2&gt;Twilio’s Perspective&lt;/h2&gt;
&lt;p&gt;When we started Twilio in 2008, I was a software developer who knew nothing about telephony. We realized that software developers like ourselves needed to build communications into apps -- so we started down the path of figuring out how to make a phone ring.&lt;/p&gt;
&lt;p&gt;As a software and web developer raised with the Internet as my development background, I had certain assumptions about how trust and security work on networks: boundaries between trusted and untrusted networks, separation between layers of the stack, and so forth. And, I have to admit, when we first started learning about how telephony worked I was amazed at what the network would permit you to do. It seemed like absolute, utter, chaos, mitigated largely by good intentions. So we built a number of protections into Twilio's products to close what seemed like security holes you could drive a &lt;code&gt;${large_wheeled_vehicle}&lt;/code&gt; through.&lt;/p&gt;
&lt;p&gt;We require you to confirm ownership of a phone number before you are allowed to use it as &quot;caller-id&quot; when initiating a phone call via our APIs. By default, we bill by the minute, not the second, to deter short duration calls and impair the economics of robocalls. We’ve also built fraud protections into our product, such as geographic permissions that disable calls to high fraud destinations which are rarely used for legitimate use-cases. We also have default throughput limits, so an organization that just signed up yesterday can’t place a high volume of calls or send a high volume of messages immediately. All of these safeguards (and more) are features we added to prevent malicious actors from using Twilio.&lt;/p&gt;
&lt;p&gt;All of this is on top of our &lt;a href=&quot;https://www.twilio.com/legal/aup&quot;&gt;Terms of Service and Acceptable Use Policy&lt;/a&gt;, which expressly prohibits &quot;using the Twilio Services in connection with unsolicited, unwanted or harassing communications (commercial or otherwise), including, but not limited to, phone calls, SMS or MMS messages, chat, voice mail, video or faxes.&quot; We use artificial intelligence and other instrumentation to look for patterns that might indicate abuse.&lt;/p&gt;
&lt;p&gt;However, there are many competitive local carriers who have access to the telephony network, both inside the United States and outside. And in a world of untrusted devices plugging into a trusted network, it takes just a small handful of bad actors engaging in shenanigans to ruin the network for everybody.&lt;/p&gt;
&lt;h2&gt;Your Phone, Your Call.&lt;/h2&gt;
&lt;p&gt;We believe the next step is to put you back in control of your phone, where the communications industry provides the tools for you to receive only wanted communications from trusted parties. You’ll see a cryptographically signed caller-id asserting the company or person who's initiating a call to you is who they claim to be. In addition, ideally, your phone will only ring if a caller's reputation is up to par. To achieve this vision, illegal spoofing needs to be eliminated and a strong notion of identity needs to be established.&lt;/p&gt;
&lt;p&gt;This is not unlike the status of email, circa 2002. Back then, you could send an email as anybody -- you just put their address in the &lt;code&gt;From:&lt;/code&gt; field, and your mail server delivered it. It's true, a friend didn't believe me back in 2000, so I sent him an email from &quot;bgates@microsoft.com&quot; and he was blown away -- what a hacker I was!&lt;/p&gt;
&lt;p&gt;Clearly, the industry realized this situation wasn't sustainable and email spam was growing. So some smart people came up with some smart solutions to cryptographically sign emails and specify allowed IP addresses to send on behalf of a domain: &lt;a href=&quot;https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail&quot;&gt;DKIM&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Sender_Policy_Framework&quot;&gt;SPF&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Anti-spam technology within email has continued to evolve to address the emerging problems of phishing and other malicious attacks. DMARC is a DNS-based policy allowing domain owners sending email to give a set of instructions to receiving domains on how to treat email that fails either SPF or DKIM. As a result, the amount of spam we receive today is a tiny fraction of what we got 15 years ago and companies have ways to protect their reputations and their customers from malicious actors trying to impersonate legitimate businesses for nefarious purposes.&lt;/p&gt;
&lt;p&gt;For phone calls, there's some good news. Some very smart people have been working on new ways of cryptographically signing calls – a digital signature – proving ownership of a phone number before the call is initiated. One example of this is a new protocol called STIR/SHAKEN, which the communications ecosystem is working on now. Before any authentication method can be impactful at scale, it needs to be adopted by a broad swath of the ecosystem. Twilio is fully committed to efforts to authenticate calls so the identity of callers can be proven, and it looks like STIR/SHAKEN is a good candidate to do just that.&lt;/p&gt;
&lt;p&gt;But once you know the identity of the caller, what should you do about it? That’s where reputation comes into play. Once you know the caller isn’t pretending to be someone they aren’t, how do you (or a system working on your behalf) decide if your phone should ring, or if you should answer it? This is the next challenge, and so we'll explore identity and reputation in our next post...&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Your Phone, Your Call - Part II - Why did we have caller ID in the 90s but not today?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Jeff Lawson is the Founder, Chairman and CEO of Twilio. He's focused on restoring trust in the communications we rely on everyday so that you can answer your phone again. He can be reached on Twitter at&lt;/em&gt; &lt;em&gt;&lt;a href=&quot;https://twitter.com/jeffiel&quot;&gt;@jeffiel&lt;/a&gt;&lt;/em&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Mon, 18 Mar 2019 19:41:16 +0000</pubDate>
<dc:creator>johns</dc:creator>
<og:title>Your Phone, Your Call - Part I - Eliminating Robocalls</og:title>
<og:url>https://www.twilio.comhttps://www.twilio.com/blog/your-phone-your-call-eliminating-robocalls</og:url>
<og:type>article</og:type>
<og:image>https://s3.amazonaws.com/com.twilio.prod.twilio-docs/original_images/blogheader.jpg</og:image>
<og:description>Twilio's CEO talks about trusted communications, reputation, robocalling, and making it safe to pick up your phone again.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.twilio.com/blog/your-phone-your-call-eliminating-robocalls</dc:identifier>
</item>
<item>
<title>EU government websites have undisclosed adtech trackers from Google and others</title>
<link>https://www.theregister.co.uk/2019/03/18/cookie_government_tracking_report/</link>
<guid isPermaLink="true" >https://www.theregister.co.uk/2019/03/18/cookie_government_tracking_report/</guid>
<description>&lt;p&gt;All but three of the European Union member states' government websites are littered with undisclosed adtech trackers from Google and other firms, with many piggy-backing on third-party scripts, according to an analysis of almost 200,000 webpages.&lt;/p&gt;
&lt;p&gt;The &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.cookiebot.com/media/1121/cookiebot-report-2019-medium-size.pdf&quot;&gt;report&lt;/a&gt; (PDF), published today by Cookiebot in collaboration with civil rights association European Digital Rights (EDRi), scanned 184,683 EU government webpages on 11 and 12 March to assess the cookies on each.&lt;/p&gt;
&lt;p&gt;It found that there were 112 companies slurping up information on EU citizens' browsing habits on the webpages of the governments supposedly fighting the good fight against excess stalking of netizens.&lt;/p&gt;
&lt;p&gt;Adtech trackers were found on 25 of the 28 member states' sites, with only Spain, Germany and the Netherlands clean of commercial cookies. There were 52 companies identified on France's government sites, 27 on Latvia's and 19 on Belgium's. Twenty cookies were &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://www.dropbox.com/sh/uz5lrz5bqglracj/AAD9s8fzdpZem1KE-1KvNKqFa/UK?dl=0&amp;amp;subfolder_nav_tracking=1&quot;&gt;identified on GOV.UK&lt;/a&gt;, of which 12 were marketing, and all belonged to one company – Google.&lt;/p&gt;
&lt;p&gt;Indeed, the search giant is described as the &quot;kingpin of tracking&quot; within the report, present on 82 per cent of all the sites and accounting for three of the top five trackers: YouTube, DoubleClick and Google.&lt;/p&gt;
&lt;p&gt;The report authors said this was of &quot;special concern&quot; because Google can cross-reference trackers with its first-party account details via its widely used consumer services such as Mail, Search and Android apps.&lt;/p&gt;
&lt;p&gt;Separately, the work assessed public health service sites, again finding that cookies were widespread, with 52 per cent of those tested having commercial trackers.&lt;/p&gt;
&lt;p&gt;And again, Google was right up there, making up two of the top five, with the others being Adobe's eversttech.net, AppNexus' adnxs.com and Mediamath's Mathtag.com.&lt;/p&gt;
&lt;p&gt;For this assessment, the researchers chose six EU countries and carried out 15 health-related search queries – such as &quot;How do I know if I have HIV?&quot;, &quot;Signs of being an alcoholic&quot; and &quot;I want to terminate my pregnancy&quot; – from IP addresses in each country to identify the relevant landing pages on each nation's health service.&lt;/p&gt;
&lt;p&gt;In the UK, some 60 per cent of these landing pages had such ad trackers, less only than Irish sites, where trackers appeared on 73 per cent of landing pages. A single German website about maternity leave was monitored by 63 companies, while a French page about abortion was tracked by 21 firms.&lt;/p&gt;
&lt;p&gt;The group said this could be used to &quot;infer sensitive facts about [users'] health condition and life situation&quot; and be resold to target ads. &quot;These citizens have no clear way to prevent this leakage, understand where their data is sent, or to correct or delete the data,&quot; it said.&lt;/p&gt;
&lt;p&gt;The extent of tracking on these sites is even more alarming, the report argued, because they don't rely on ad revenue. In some cases, governments will want to use companies' services, but in others the firms gained access to these non-commercial sites through &quot;free&quot; third-party JavaScript tech services, like share buttons or plugins.&lt;/p&gt;
&lt;p&gt;&quot;These scripts can act as Trojan horses, opening backdoors to the website code through which ad tech companies can silently insert their trackers,&quot; the report said.&lt;/p&gt;
&lt;p&gt;It urged website owners to be more careful when including third-party components on their sites; to make sure they had a detailed overview of the current trackers; and to remove any unwanted ones from the source code.&lt;/p&gt;
&lt;p&gt;Visitors should also be offered full transparency and control over trackers on the site – but it shouldn't just be up to users to lock down their browsing habits. Stronger regulations need to be in force, and adhered to.&lt;/p&gt;
&lt;p&gt;&quot;How can any organisation live up to its [European General Data Protection Regulation] GDPR and ePrivacy obligations if it does not control unauthorised tracking actors accessing their website?&quot; asked Cookiebot founder Daniel Johannsen.&lt;/p&gt;
&lt;p&gt;&quot;Public sector bodies now have the opportunity to lead by example – at a minimum by shutting down any digital rights infringements that they are facilitating on their own websites.&quot;&lt;/p&gt;
&lt;p&gt;Diego Naranjo at EDRi used the opportunity to lament the delay to the long-awaited &lt;a target=&quot;_blank&quot; href=&quot;https://www.theregister.co.uk/2017/12/11/european_parliament_eprivacy_rapporteur_birgit_sippel_interview/&quot;&gt;ePrivacy Regulation&lt;/a&gt;, which was initially meant to be enforced as the yin to the GDPR's yang, covering communications data rather than personal data.&lt;/p&gt;
&lt;p&gt;However, it has been &lt;a target=&quot;_blank&quot; href=&quot;https://www.theregister.co.uk/2019/01/02/2019_eprivacy_brexit/&quot;&gt;stuck in discussions&lt;/a&gt; between member states for more than a year, and privacy activists fear it is being watered down as a result of lobbying from adtech industry and concerns among member states.&lt;/p&gt;
&lt;p&gt;If it does lose ground, Naranjo warned, it will &quot;open a Pandora's box of more and more sharing, merging and reselling of personal data in huge online commercial surveillance networks, in which citizens are being unwittingly tracked and micro-targeted with commercial and political manipulation.&quot;&lt;/p&gt;
&lt;p&gt;Their calls for progress echo those made by the European Data Protection Board last week. The group – made up of the bloc's data protection watchdogs and EU data protection supervisor – issued a statement urging legislators to &quot;intensify efforts&quot; to adopt it.&lt;/p&gt;
&lt;p&gt;&quot;The future ePrivacy Regulation should under no circumstance lower the level of protection offered by the current ePrivacy Directive and should complement the GDPR by providing additional strong guarantees for all types of electronic communications,&quot; it &lt;a target=&quot;_blank&quot; rel=&quot;nofollow&quot; href=&quot;https://edpb.europa.eu/news/news/2019/european-data-protection-board-eighth-plenary-session-interplay-eprivacy-directive_en&quot;&gt;said&lt;/a&gt;. ®&lt;/p&gt;
&lt;p class=&quot;wptl btm&quot;&gt;&lt;span&gt;Sponsored:&lt;/span&gt; &lt;a href=&quot;https://go.theregister.co.uk/tl/1818/-7142/becoming-a-pragmatic-security-leader?td=wptl1818&quot;&gt;Becoming a Pragmatic Security Leader&lt;/a&gt;&lt;/p&gt;
</description>
<pubDate>Mon, 18 Mar 2019 19:03:20 +0000</pubDate>
<dc:creator>snaky</dc:creator>
<og:image>https://regmedia.co.uk/2018/08/16/shutterstock_1096442255.jpg</og:image>
<og:type>article</og:type>
<og:url>https://www.theregister.co.uk/2019/03/18/cookie_government_tracking_report/</og:url>
<og:title>Public disgrace: 82% of EU govt websites stalked by Google adtech cookies – report</og:title>
<og:description>Plus: UK health service sites contain commercial trackers</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.theregister.co.uk/2019/03/18/cookie_government_tracking_report/</dc:identifier>
</item>
</channel>
</rss>