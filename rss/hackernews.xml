<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Google suspends some business with Huawei</title>
<link>https://www.reuters.com/article/us-huawei-tech-alphabet-exclusive/exclusive-google-suspends-some-business-with-huawei-after-trump-blacklist-source-idUSKCN1SP0NB</link>
<guid isPermaLink="true" >https://www.reuters.com/article/us-huawei-tech-alphabet-exclusive/exclusive-google-suspends-some-business-with-huawei-after-trump-blacklist-source-idUSKCN1SP0NB</guid>
<description>&lt;p&gt;NEW YORK (Reuters) - Alphabet Inc’s Google has suspended business with Huawei that requires the transfer of hardware, software and technical services except those publicly available via open source licensing, a source familiar with the matter told Reuters on Sunday, in a blow to the Chinese technology company that the U.S. government has sought to blacklist around the world.&lt;/p&gt;
&lt;p&gt;The move could hobble Huawei’s smartphone business outside China as the tech giant will immediately lose access to updates to Google’s Android operating system. The next version of its Android smartphones will also lose access to popular services including the Google Play Store and Gmail and YouTube apps.&lt;/p&gt;
&lt;p&gt;“Huawei will only be able to use the public version of Android and will not be able to get access to proprietary apps and services from Google,” the source said.&lt;/p&gt;
&lt;p&gt;The Trump administration on Thursday added Huawei Technologies Co Ltd to a trade blacklist, immediately enacting restrictions that will make it extremely difficult for the company to do business with U.S. counterparts.&lt;/p&gt;
&lt;p&gt;On Friday the U.S. Commerce Department said it was considering scaling back restrictions on Huawei to “prevent the interruption of existing network operations and equipment.” It was not immediately clear on Sunday whether Huawei’s access to mobile software would be affected.&lt;/p&gt;
&lt;p&gt;The extent to which Huawei will be hurt by the U.S. government’s blacklist is not yet known as its global supply chain assesses the impact. Chip experts have questioned Huawei’s ability to continue to operate without U.S. help.&lt;/p&gt;
&lt;p&gt;Details of the specific services affected by the suspension were still being discussed internally at Google, according to the source. Huawei attorneys are also studying the impact of the blacklist, a Huawei spokesman said on Friday. Huawei was not immediately reachable for further comment.&lt;/p&gt;
&lt;p&gt;Representatives of the U.S. Commerce Department did not immediately have comment.&lt;/p&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot;&gt;
&lt;div class=&quot;LazyImage_container LazyImage_dark&quot;&gt;&lt;img src=&quot;https://s4.reutersmedia.net/resources/r/?m=02&amp;amp;d=20190519&amp;amp;t=2&amp;amp;i=1388821984&amp;amp;r=LYNXNPEF4I0LU&amp;amp;w=20&quot; aria-label=&quot;FILE PHOTO: Visitors walk past Huawei's booth during Mobile World Congress in Barcelona, Spain, February 27, 2017. REUTERS/Eric Gaillard/File Photo&quot;/&gt;
&lt;/div&gt;

&lt;div class=&quot;Image_caption&quot;&gt;

&lt;span&gt;FILE PHOTO: Visitors walk past Huawei's booth during Mobile World Congress in Barcelona, Spain, February 27, 2017. REUTERS/Eric Gaillard/File Photo&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;POPULAR APPS&lt;/h3&gt;
&lt;p&gt;Huawei will continue to have access to the version of the Android operating system available through the open source license, known as Android Open Source Project (AOSP), that is available for free to anyone who wishes to use it. There are about 2.5 billion active Android devices worldwide, according to Google.&lt;/p&gt;
&lt;p&gt;But Google will stop providing Huawei with access, technical support and collaboration involving its proprietary apps and services going forward, the source said.&lt;/p&gt;
&lt;p&gt;Huawei has said it has spent the last few years preparing a contingency plan by developing its own technology in case it is blocked from using Android. Some of this technology is already being used in products sold in China, the company has said.&lt;/p&gt;
&lt;p&gt;In an interview with Reuters in March, Eric Xu, rotating chairman of Huawei, struck a defiant note in anticipation of retaliatory actions by U.S. companies. “No matter what happens, the Android Community does not have any legal right to block any company from accessing its open-source license,” he said.&lt;/p&gt;
&lt;p&gt;Popular Google apps such as Gmail, YouTube and the Chrome browser that are available through Google’s Play Store will disappear from future Huawei handsets as those services are not covered by the open source license and require a commercial agreement with Google.&lt;/p&gt;
&lt;p&gt;But users of existing Huawei devices who have access to the Google Play Store will still be able to download app updates provided by Google. Apps such as Gmail are updated through the store, unlike operating system updates which are typically handled by phone manufacturers and telecoms carriers, which the blacklist could affect, the source said.&lt;/p&gt;
&lt;p&gt;The impact is expected to be minimal in the Chinese market. Most Google mobile apps are banned in China, where alternatives are offered by domestic competitors such as Tencent and Baidu.&lt;/p&gt;
&lt;div class=&quot;SmallImage_small-image SmallImage_standard SmallImage_caption-truncate&quot;&gt;
&lt;div class=&quot;Image_container&quot; tabindex=&quot;-1&quot;&gt;


&lt;div class=&quot;Image_caption Image_full-width&quot;&gt;

&lt;span&gt;FILE PHOTO: An illuminated Google logo is seen inside an office building in Zurich, Switzerland December 5, 2018. REUTERS/Arnd Wiegmann&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Huawei’s European business, its second-biggest market, could be hit as Huawei licenses these services from Google in Europe.&lt;/p&gt;
&lt;p&gt;“Having those apps is critical for smartphone makers to stay competitive in regions like Europe,” said Geoff Blaber, vice president of research at CCS Insight.&lt;/p&gt;
&lt;div class=&quot;Attribution_container&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;Attribution_attribution&quot; readability=&quot;9&quot;&gt;
&lt;p class=&quot;Attribution_content&quot;&gt;Reporting by Angela Moon; Additional reporting by Georgina Prodhan in London, and David Shepardson and Karen Freifeld in Washington; Editing by Kenneth Li and Daniel Wallis&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;StandardArticleBody_trustBadgeContainer&quot;&gt;&lt;span class=&quot;StandardArticleBody_trustBadgeTitle&quot;&gt;Our Standards:&lt;/span&gt;&lt;span class=&quot;trustBadgeUrl&quot;&gt;&lt;a href=&quot;http://thomsonreuters.com/en/about-us/trust-principles.html&quot;&gt;The Thomson Reuters Trust Principles.&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 19 May 2019 18:28:52 +0000</pubDate>
<dc:creator>samsonradu</dc:creator>
<og:title>Exclusive: Google suspends some business with Huawei after Trump...</og:title>
<og:url>https://www.reuters.com/article/us-huawei-tech-alphabet-exclusive-idUSKCN1SP0NB</og:url>
<og:type>article</og:type>
<og:description>Alphabet Inc's Google has suspended business with Huawei that requires the ...</og:description>
<og:image>https://s4.reutersmedia.net/resources/r/?m=02&amp;d=20190519&amp;t=2&amp;i=1388821984&amp;w=1200&amp;r=LYNXNPEF4I0LU</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.reuters.com/article/us-huawei-tech-alphabet-exclusive/exclusive-google-suspends-some-business-with-huawei-after-trump-blacklist-source-idUSKCN1SP0NB</dc:identifier>
</item>
<item>
<title>A Decade of Remote Work</title>
<link>https://blog.viktorpetersson.com/2019/05/18/a-decade-of-remote.html</link>
<guid isPermaLink="true" >https://blog.viktorpetersson.com/2019/05/18/a-decade-of-remote.html</guid>
<description>&lt;p&gt;While still in college (go &lt;a href=&quot;https://www.santaclarabroncos.com&quot;&gt;Broncos&lt;/a&gt;!), I teamed up with Alex (&lt;a href=&quot;https://mobile.twitter.com/slevenbits&quot;&gt;@slevenbits&lt;/a&gt;) to create a startup. We were young, inexperienced and naive. Our first project was called YippieMail and it was an email aggregator. Simply put, YippieMail could display all your webmail accounts (i.e. Hotmail, Yahoo and Gmail etc) in the same web interface (this was before most email providers supported IMAP, so you couldn’t use an email client). Looking back at it, YippieMail was a pretty stupid idea, but it did land us meetings with Sequoia Capital and few other VCs on Sand Hill Road. Keep in mind that this was around the time &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Meebo&quot;&gt;Meebo&lt;/a&gt; raised many millions from Sequia and DFJ to do the same thing but for Instant Messaging (IM), so at the time it probably did not seem as such of a bad idea.&lt;/p&gt;
&lt;p&gt;It was in the early days of YippieMail, which was pivoted into &lt;a href=&quot;https://www.yippiemove.com&quot;&gt;YippieMove&lt;/a&gt; (RIP 2008-2019) my now decade-long remote experience began (some of which as a digital nomad).&lt;/p&gt;
&lt;p&gt;When we began working on YippieMail, Alex was living in San Jose, and I was living in Mountain View. For those of you not familiar with the Bay Area, these two cities are not very far apart, but when you factor in the horrendous traffic conditions, it can easily take well over an hour to drive between the two (while it might only take 20-30 minutes without traffic). It was then we decided to work remotely rather than getting an office somewhere in between. Ever since, in all our subsequent ventures (&lt;a href=&quot;https://www.wireload.net/products/blotter/&quot;&gt;Blotter&lt;/a&gt;, and then &lt;a href=&quot;https://www.screenly.io&quot;&gt;Screenly&lt;/a&gt;) have been remote-only.&lt;/p&gt;
&lt;p&gt;To this day, even though both Alex and I both live in London, we only get together every other month or so in person to catch up. Moreover, in my new venture (&lt;a href=&quot;https://www.wott.io&quot;&gt;WoTT&lt;/a&gt;), we have adopted this remote philosophy even if both founders are located in London.&lt;/p&gt;
&lt;p&gt;So what have I learned over this decade of working and running remote teams? Let’s dive in.&lt;/p&gt;
&lt;h2 id=&quot;remote-is-not-for-everyone&quot;&gt;Remote is not for everyone&lt;/h2&gt;
&lt;p&gt;The first thing that I would like to point out is that remote working is not for everyone. Over the years, we have had a few team members that could not work remotely. In some cases these people discovered this themselves and chose to leave, and in some other cases it became clear that it was not a match.&lt;/p&gt;
&lt;p&gt;Usually, people who fail at remote work tend to either lack the self-discipline it requires, or they are simply socially oriented and thrive being around other people. In the latter case, working from a shared office can help, but even then, if you lack the self-discipline and habits required, you are likely not going to thrive. While there are plenty of exceptions to this rule, young people (early 20s) tend to struggle more with this than people who have reach their late 20s and early 30s.&lt;/p&gt;
&lt;p&gt;The bottom line is that some people excel while working remotely, while others work better in a regular office environment. It’s hard to screen for this in an interview, but it usually becomes evident during the first year. It is important to look out for this in team members as a manager.&lt;/p&gt;
&lt;h2 id=&quot;either-youre-remote-or-youre-not&quot;&gt;Either you’re remote or you’re not&lt;/h2&gt;
&lt;p&gt;Either you’re remote-only or you don’t do remote at all. Lots of companies brag about giving their staff the freedom to work remotely. However, the reality is that unless it is in your companies DNA to be a remote company, it will inevitably favor the team members that are working in the office (in particular if this is where the leadership is). The reason for this is largely related to the flow of information. People chat over the water cooler, over coffee or over drinks after work. This leads to unevenly distributed information, which easily can make people feel left out or that other team members simply assumes everyone else knows about something despite it never made it to the official channels. In a remote-only culture however, the information flow tends to happen in a more organized fashion either over email or in the company chat rooms (or even in Github Issues).&lt;/p&gt;
&lt;h2 id=&quot;company-and-team-summits&quot;&gt;Company and team summits&lt;/h2&gt;
&lt;p&gt;Company summits matter a lot. Even if you’re a remote team, having everyone get together in person every year (or twice a year) can make a huge difference. While video chats is a &lt;a href=&quot;https://en.m.wikipedia.org/wiki/High-context_and_low-context_cultures&quot;&gt;higher context&lt;/a&gt; medium than email or chat, it still isn’t a full substitute for meeting face-to-face. When we did our very first summit for Screenly at the lovely &lt;a href=&quot;https://www.villalavacroatia.com&quot;&gt;Villa Lava&lt;/a&gt; in Croatia (a great place for company summits), it was the first time our team members got to meet each other in person, despite having worked alongside each other for years. In retrospect, it was a big mistake of not doing summits earlier, as we could see a big difference in &lt;em&gt;how&lt;/em&gt; the communication changed online &lt;em&gt;after&lt;/em&gt; the summit. Because text based chat is a low context medium, it’s very easy to misread the intent of a message. However, if you have met this person in real life, you have a lot more to work with and can use that context to read the same message in a new light. These days, the developers at Screenly get together in person every quarter (roughly) for a one week summit, and the entire company gets together annually. (You can read more about how we work at Screenly in the article &lt;a href=&quot;https://www.screenly.io/blog/2016/11/23/how-we-work-at-screenly/&quot;&gt;How we work at Screenly&lt;/a&gt; that I wrote a few years ago.)&lt;/p&gt;
&lt;h2 id=&quot;tap-in-to-a-large-talent-pool&quot;&gt;Tap in to a large talent pool&lt;/h2&gt;
&lt;p&gt;Hiring remote means a larger talent pool. I’m hardly the first to point this out, but one of the major reasons why it makes sense to be remote-only. You are no longer limited to hiring in your geographic area. The tools for recruiting have changed a lot over the last decade since I started working remotely. That said, recruiting is far from easy. Because people from around the world are able to apply to your openings, the second you post a job ad, the floodgate opens. The reality is that 99.9% of the applicants for remote jobs are people who utilize the “spray and pray” approach. Filtering them out is fairly easy, but in best case scenario, you’ll have a handful of decent candidates for every 100 or so applicants.&lt;/p&gt;
&lt;p&gt;The filtering process that tend to work well is to have rigorous screening questions that actually requires a little bit of work and is unique. This will help you weed out all the candidates that simply put “Call me to discuss” in all the boxes (or worse).&lt;/p&gt;
&lt;p&gt;Yes, this screening process will take a fair bit of time, but tools like Upwork makes it fairly quick to reject candidates that fail to put in the effort (or are clearly poor fits).&lt;/p&gt;
&lt;p&gt;From experience I am also very reluctant to work with agencies and prefer hiring team members directly. The reason being that a number of agencies we’ve run across over the years have a small amount of talented engineers that will do the screening process and perhaps the first few weeks, and then they gradually shift the work over to a more junior person, while charging the same rate.&lt;/p&gt;
&lt;p&gt;It’s also worth mentioning that with the raise of the digital nomad movement, there are a lot more job boards that are “remote friendly,” including &lt;a href=&quot;https://angel.co&quot;&gt;Angelist&lt;/a&gt; and a plethora of (IMHO overpriced) remote-focused job boards.&lt;/p&gt;
&lt;p&gt;A final word of warning for people hiring remote team members: don’t hire people who wants to join your company &lt;em&gt;just&lt;/em&gt; because offer them to work remotely and subsequently have more flexibility. While not always true, it is sometimes an indicator of people who wants to coast along with minimal supervision (while perhaps getting their own business off the ground). What you really want is people who believe in the vision and product, and where remote is a perk, not a the reason why they want to join.&lt;/p&gt;
&lt;p&gt;(I have intentionally not mentioned the legal structure of how to hire remote talent. IANAL so you probably should check with one to ensure you comply with the local laws.)&lt;/p&gt;
&lt;h2 id=&quot;finding-good-remote-workers-is-probably-easier-for-some-roles-than-others&quot;&gt;Finding good remote workers is probably easier for some roles than others&lt;/h2&gt;
&lt;p&gt;Remote work is likely easier for engineering than for other roles. In all my experiences, we have always been engineering heavy organizations. Yes, we’ve had a number of other roles too, but in terms of head count, the engineers always outnumbered all other roles. What I have noticed however is that it tends to be easier (in general) to manage engineers remotely compared to other roles (such as sales). This is likely related to a number of variables, but in general, I’ve found engineers to be more self-motivated and requiring less handholding. There is of course a large correlation with seniority too. Regardless of position, more senior people tend to require less handholding and thus work better remotely.&lt;/p&gt;
&lt;h2 id=&quot;remote-is-a-major-time-saver&quot;&gt;Remote is a major time saver&lt;/h2&gt;
&lt;p&gt;Remote work saves a lot of time. First, it should be said that remote work does not necessarily equal working from home. We’ve had plenty of team members over the years that preferred to work from a shared office (including myself for a period). To each and their own. If however you work from home, you can save a big chunk of time (and money) every day. When I had an office in Shoreditch, it took me 30-40 minutes each way. That adds up top a lot of time every week. These days I have a dedicated room as my home office (something I &lt;em&gt;strongly&lt;/em&gt; recommend if working from home). This means that my morning commute is roughly 60 seconds, and that includes a detour to the kitchen to fetch myself a cup of joe. What you do with this time is up to you, but I usually dedicate this 1-1.5h every day to exercise.&lt;/p&gt;
&lt;h2 id=&quot;the-power-of-routines-and-habits&quot;&gt;The power of routines and habits&lt;/h2&gt;
&lt;p&gt;Habits will make or break you as a remote worker. As mentioned earlier, remote work is not for everyone. It requires a lot more self-discipline than a regular office job where you’re constantly “supervised.” Over the years, I’ve experimented with a large number of habits, and at this point I’ve devised a set of habits that work pretty well for me (but they are likely to change as I keep experimenting). &lt;strong&gt;The most important habit when working remotely from home is to mentally trigger a beginning and an end of the work day&lt;/strong&gt;. It’s easy to sit in your PJ or sweats all day just because you can, but it will likely backfire in the long-run.&lt;/p&gt;
&lt;p&gt;To make this more concrete, here’s my current daily schedule:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;07:00: Wake up&lt;/li&gt;
&lt;li&gt;07:05: Reading (&lt;a href=&quot;https://www.artofmanliness.com/articles/the-7-habits-sharpen-the-saw/&quot;&gt;Sharpen the saw&lt;/a&gt; from The 7 Habits of Highly Effective People)&lt;/li&gt;
&lt;li&gt;08:00: Check in with the team&lt;/li&gt;
&lt;li&gt;08:10: Exercise + shower&lt;/li&gt;
&lt;li&gt;09:30: Start of my work day&lt;/li&gt;
&lt;li&gt;19:30: End of my work day&lt;/li&gt;
&lt;li&gt;23:00: Bedtime&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As my good friend Milos (&lt;a href=&quot;https://twitter.com/milosgajdos&quot;&gt;@milosgajdos&lt;/a&gt;) pointed out while reading a draft of this post, an early start isn’t for everyone. Shifting your day is perfectly fine too. The point is not when you start your day and when you wrap it, but building and sticking to habits that make you productive.&lt;/p&gt;
&lt;p&gt;If you want to learn more about the importance of habits, I strongly recommend reading &lt;a href=&quot;https://www.amazon.co.uk/Power-Habit-Why-What-Change/&quot;&gt;The Power of Habit&lt;/a&gt; by Charles Duhigg. Also, a word of warning, don’t get obsessed with reading all about productivity. I’ve been a victim of productivity-porn myself, but I can tell you first-hand that you’ll waste far more time reading about it than you’ll ever save.&lt;/p&gt;
&lt;h2 id=&quot;sleep-matters-shocking-i-know&quot;&gt;Sleep matters (shocking, I know…)&lt;/h2&gt;
&lt;p&gt;Perhaps not related to remote work itself, but more the startup culture. VC used beat it in to young and naive early 20-something kids that it was cool (and even expected) to frequently pull all-nighters and sleep under their desk. I feel like the tide has finally turned on this. Yes, you still have the Gary Vaynerchuk-wannabees out there with their hustle-porn, but I think (and hope) they are a dying breed.&lt;/p&gt;
&lt;p&gt;What is however related to remote work is the the importance of wrapping up your day. As you may have noticed above, I end my day at 19:30. After that I’m not allowed into my office (unless there’s an emergency). I also try to keep my screen time to minimal in the evenings. In my younger years, I frequently worked late into the night. Yet, even if I clocked more hours, I got less done.&lt;/p&gt;
&lt;p&gt;Switching off very important, and it is a lot more challenging when you’re working remotely.&lt;/p&gt;
&lt;p&gt;If you want to learn more on this, I recommend the book &lt;a href=&quot;https://www.amazon.co.uk/Why-We-Sleep-Science-Dreams/dp/0241269067&quot;&gt;Why We Sleep&lt;/a&gt; by Matthew Walker.&lt;/p&gt;
&lt;h2 id=&quot;distractions-kill-productivity&quot;&gt;Distractions kill productivity&lt;/h2&gt;
&lt;p&gt;Kill the distractions. Working from home is challenging for a lot of people. It’s easy to get distracted by various things around the house, but for me the biggest distraction has always been the digital kind. Cal Newport nails this in his latest book &lt;a href=&quot;https://www.amazon.co.uk/Digital-Minimalism-Living-Better-Technology/dp/0241341132&quot;&gt;Digital Minimalism&lt;/a&gt;, where he talks about how distracting mobile phones and social media can be. I’ve found this first hand. For a long time, I kept my phone next to me on the desk. However, every time the phone buzzed, I lost my focus. Even if I did not check the phone, it still got me distracted. The remedy for me was to simply move all my distractions to the living room (i.e. my phone and Apple Watch) and just check them periodically throughout the day. Alternatively, Airplane mode on your devices is another great way to kill noise.&lt;/p&gt;
&lt;p&gt;For the hackers out there, I’ve found that running something like &lt;a href=&quot;https://i3wm.org/&quot;&gt;i3&lt;/a&gt; is also great for cutting out noise on your desktop. I use this on my “developer workstation” (which is different from my other workstation).&lt;/p&gt;
&lt;h2 id=&quot;dont-skimp-on-equipment&quot;&gt;Don’t skimp on equipment&lt;/h2&gt;
&lt;p&gt;While having good equipment is always important, you tend to have more control over your equipment when working remotely than when you work in an office where everything is provided to you on your first day. You are going to spend a lot of time in front of your workstation. Your body will thank you for spending a bit more money and get:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;A large 4K screen (they have crawled down a lot in price recently) on a monitor arm&lt;/li&gt;
&lt;li&gt;A standing desk (I use &lt;a href=&quot;https://www.ikea.com/us/en/catalog/products/S29022520/&quot;&gt;this&lt;/a&gt; one from Ikea)&lt;/li&gt;
&lt;li&gt;A good ergonomic keyboard&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;thats-a-wrap&quot;&gt;That’s a wrap!&lt;/h2&gt;
&lt;p&gt;That’s it. At least for now. I’m sure there are things that I have missed, but it should hopefully be useful for other (new and old) remote workers out there.&lt;/p&gt;
&lt;p&gt;If you are eager to learn more, I would recommend the following additional books:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/Deep-Work-Focused-Success-Distracted/dp/0349411905&quot;&gt;Deep Work&lt;/a&gt; by Cal Newport&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://basecamp.com/books/rework&quot;&gt;ReWork&lt;/a&gt; by Jason Fried and David Heinemeier Hansson (DHH)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=19953854&quot;&gt;Discuss on Hacker News&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 15:47:57 +0000</pubDate>
<dc:creator>mvip</dc:creator>
<og:title>A Decade of Remote Work</og:title>
<og:description>While still in college (go Broncos!), I teamed up with Alex (@slevenbits) to create a startup. We were young, inexperienced and naive. Our first project was called YippieMail and it was an email aggregator. Simply put, YippieMail could display all your webmail accounts (i.e. Hotmail, Yahoo and Gmail etc) in the same web interface (this was before most email providers supported IMAP, so you couldn’t use an email client). Looking back at it, YippieMail was a pretty stupid idea, but it did land us meetings with Sequoia Capital and few other VCs on Sand Hill Road. Keep in mind that this was around the time Meebo raised many millions from Sequia and DFJ to do the same thing but for Instant Messaging (IM), so at the time it probably did not seem as such of a bad idea.</og:description>
<og:url>http://blog.viktorpetersson.com/2019/05/18/a-decade-of-remote.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.viktorpetersson.com/2019/05/18/a-decade-of-remote.html</dc:identifier>
</item>
<item>
<title>“A company is copyright-claiming every video I have ever made”</title>
<link>https://twitter.com/ThatMumboJumbo/status/1130009515766755328</link>
<guid isPermaLink="true" >https://twitter.com/ThatMumboJumbo/status/1130009515766755328</guid>
<description>&lt;p&gt;UPDATE - Things are a bit muddy.
- I do have written permission from the artist to use the claimed song.
- However; the song uses a sample that has been picked up by Warners content ID bot. So I am being claimed for a sample, not the song.

I'm still hoping we can resolve this.&lt;/p&gt;
</description>
<pubDate>Sun, 19 May 2019 14:46:02 +0000</pubDate>
<dc:creator>MagicPropmaker</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://mobile.twitter.com/ThatMumboJumbo/status/1130009515766755328</dc:identifier>
</item>
<item>
<title>Modern SAT solvers: fast, neat and underused</title>
<link>https://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-3-of-n/</link>
<guid isPermaLink="true" >https://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-3-of-n/</guid>
<description>&lt;p&gt;In the previous two parts (&lt;a href=&quot;https://codingnest.com/modern-sat-solvers-fast-neat-underused-part-1-of-n/&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-2-of-n/&quot;&gt;2&lt;/a&gt;) we used a SAT solver as a black box that we feed input into, and it will (usually quickly) spit out an answer. In this part, we will look at how SAT solvers work and what heuristics and other tricks they employ in their quest for performance.&lt;/p&gt;&lt;h2 id=&quot;approachestosatsolving&quot;&gt;Approaches to SAT solving&lt;/h2&gt;
&lt;p&gt;Modern SAT solvers fall into one of two groups: local search based solvers and&lt;br/&gt;&lt;em&gt;Conflict Driven Clause Learning&lt;/em&gt; (CDCL) based solvers. This post will concern itself with the latter for two simple reasons, one is that most of my experience is with CDCL solver, the second is that local-search based solvers are rarely used in practice.&lt;/p&gt;
&lt;p&gt;There are two main reasons for local search based SAT solvers dearth of practical usage:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;They are often not &lt;em&gt;complete&lt;/em&gt; (they might not find a solution even if it exists)&lt;/li&gt;
&lt;li&gt;They are usually slower than the deterministic CDCL solvers&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;They do however have their uses, e.g. when solving &lt;em&gt;MaxSAT&lt;/em&gt; problem, and have some interesting theoretical properties.&lt;/p&gt;
&lt;h3 id=&quot;cdclsolvers&quot;&gt;CDCL solvers&lt;/h3&gt;
&lt;p&gt;The CDCL solvers are an evolution of the &lt;em&gt;Davis-Putnam-Logemann-Loveland&lt;/em&gt; (DPLL) algorithm, which itself is a reasonably simple improvement over the naive backtracking algorithm. CDCL is both &lt;em&gt;complete&lt;/em&gt; (will answer &quot;SAT&quot; if a solution exists) and &lt;em&gt;sound&lt;/em&gt; (it will not answer &quot;SAT&quot; for an unsatisfiable formula).&lt;/p&gt;
&lt;p&gt;I think that the best way to explain how CDCL works is to start with a naive backtracking algorithm and then show how the DPLL and CDCL algorithms improve upon it.&lt;/p&gt;
&lt;h4 id=&quot;simplebacktracking&quot;&gt;Simple backtracking&lt;/h4&gt;
&lt;p&gt;A (very) naive backtracking algorithm could work as follows:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Pick a variable without an assigned truth value. If there are none, return SAT.&lt;/li&gt;
&lt;li&gt;Assign it a truth-value (true/false).&lt;/li&gt;
&lt;li&gt;Check if all clauses in our formula are still potentially satisfiable.
&lt;ul&gt;&lt;li&gt;If they are, go to 1.&lt;/li&gt;
&lt;li&gt;If they are not satisfiable, go to 2 and pick the other truth-value.&lt;/li&gt;
&lt;li&gt;If they are not satisfiable, and both truth-values have been tried, backtrack.&lt;/li&gt;
&lt;li&gt;If there is nowhere to backtrack, return UNSAT.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This algorithm is obviously both &lt;em&gt;complete&lt;/em&gt; and &lt;em&gt;sound&lt;/em&gt;. It is also very inefficient, so let's start improving it.&lt;/p&gt;
&lt;p&gt;The first improvement we will make is to speed up the check for unsatisfiable clauses in step 3, but we need to introduce two new concepts to do so, &lt;em&gt;positive literal&lt;/em&gt; and &lt;em&gt;negative literal&lt;/em&gt;. A literal is &lt;em&gt;positive&lt;/em&gt; if it evaluates to true given its variable truth value and &lt;em&gt;negative&lt;/em&gt; otherwise. As an example, $\neg x$ is &lt;em&gt;positive&lt;/em&gt; literal when variable $x$ is set to false, and &lt;em&gt;negative&lt;/em&gt; literal when variable $x$ is set to true.&lt;/p&gt;
&lt;p&gt;The trick we will use to speed up the check for unsatisfiable clauses is to update instead the state of our clauses based on variable assignment. This means that after step 2 we will take all clauses that contain a literal of the variable selected in step 1, and update them accordingly. If they contain a positive literal, they are satisfied, and we can remove them from further consideration completely. If they contain a negative literal, they cannot be satisfied using this variable, and we can remove the literal from them.&lt;/p&gt;
&lt;p&gt;If removing the negative literals creates an empty clause, then the clause is unsatisfiable under the current assignment, and we need to backtrack.&lt;/p&gt;
&lt;p&gt;The improved backtracking algorithm can thus be described as:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Pick a variable without an assigned truth value. If there are none, return SAT.&lt;/li&gt;
&lt;li&gt;Assign it a truth-value (true/false).&lt;/li&gt;
&lt;li&gt;Remove all clauses with positive literals of the variable assignment.&lt;/li&gt;
&lt;li&gt;Remove all negative literals of the variable assignment.&lt;/li&gt;
&lt;li&gt;Check if an empty clause was created.
&lt;ul&gt;&lt;li&gt;If it was, try the other truth-value or backtrack.&lt;/li&gt;
&lt;li&gt;If it was not, go to 1.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h4 id=&quot;dpllalgorithm&quot;&gt;DPLL algorithm&lt;/h4&gt;
&lt;p&gt;Given the implementation above, it can be seen that if step 4 creates a clause consisting of a single literal (called &lt;em&gt;unit clause&lt;/em&gt;), we are provided with extra information. Specifically, it provides us with an assignment for the variable of the literal inside the unit clause, because the only way to satisfy a unit clause is to make the literal inside positive. We can then also apply steps 3 and 4 for this forced assignment, potentially creating new unit clauses in the process. This is called &lt;em&gt;unit propagation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Another insight we could have is that if at any point, all literals of a variable have the same polarity, that is, they are either all negated or not, we can effectively remove that variable and all clauses that contain a literal of that variable. This is called &lt;em&gt;pure literal elimination&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;By adding these two tricks to our backtracking solver, we have reimplemented a DPLL solver:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Pick a variable without an assigned truth value. If there are none, return SAT.&lt;/li&gt;
&lt;li&gt;Assign it a truth-value (true/false).&lt;/li&gt;
&lt;li&gt;Remove all clauses with positive literals of the variable assignment.&lt;/li&gt;
&lt;li&gt;Remove all negative literals of the variable assignment.&lt;/li&gt;
&lt;li&gt;Keep performing unit propagation and pure literal elimination while possible.&lt;/li&gt;
&lt;li&gt;Check if an empty clause was created.
&lt;ul&gt;&lt;li&gt;If it was, try the other truth-value or backtrack.&lt;/li&gt;
&lt;li&gt;If it was not, go to 1.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Obviously, the order in which variables are picked in step 1 and which truth-values are attempted first in step 2, has a significant impact on solver's runtime, and we will get to heuristics for these later.&lt;/p&gt;
&lt;h4 id=&quot;cdclalgorithm&quot;&gt;CDCL algorithm&lt;/h4&gt;
&lt;p&gt;The difference between a DPLL solver and a CDCL solver is the introduction of something called &lt;em&gt;non-chronological backtracking&lt;/em&gt; or &lt;em&gt;backjumping&lt;/em&gt;. The idea behind it is that often, a conflict (an empty clause is created) is caused by a variable assignment that happened much sooner than it was detected, and if we could somehow identify when the conflict was caused, we could backtrack several steps at once, without running into the same conflict multiple times.&lt;/p&gt;
&lt;p&gt;The implementation of backjumping analyzes the current conflict via something called &lt;em&gt;conflict clause&lt;/em&gt;, finds out the earliest variable assignment involved in the conflict and then jumps back to that assignment. The conflict clause is also added to the problem, to avoid revisiting the parts of the search space that were involved in the conflict.&lt;/p&gt;
&lt;p&gt;If you want more details about how a CDCL SAT solver works, I recommend looking at the Chaff and the MiniSat solvers. Chaff is often seen as the first SAT solver performant enough to be of practical interest, while MiniSat was written in 2003 to show that implementing state of the art SAT solver can be quite easy, and its later versions are still used as the basis for some current solvers. Specifically, you can look at the paper on &lt;a href=&quot;https://www.princeton.edu/~chaff/publication/DAC2001v56.pdf&quot;&gt;Chaff's construction&lt;/a&gt;, or at the nitty-gritty of MiniSat's implementation. MiniSat has a very liberal open source licence, and &lt;a href=&quot;https://github.com/master-keying/minisat&quot;&gt;we provide a somewhat cleaned-up version in a GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;performancetricksofcdclsatsolvers&quot;&gt;Performance tricks of CDCL SAT solvers&lt;/h2&gt;
&lt;aside&gt;It is important to remember that while modern CDCL SAT solvers are fast, they are not magic. Solving SAT problems is still in the NP complexity class, and if you randomly generate a non-trivial SAT instance with a few hundred variables, it will stop most solvers in their tracks.&lt;/aside&gt;&lt;p&gt;As a reminder, the Sudoku solver we built in the first post creates SAT instances with 729 variables and ~12k clauses. MiniSat then needs ~1.5 ms to solve them. Similarly, my employer's translation of master-key systems often creates problems with 100k-1M variables and an order of magnitude more clauses. These large instances are then solved within a couple of minutes.&lt;/p&gt;
&lt;p&gt;In this section, we will look at the specific tricks used by the CDCL SAT solvers to achieve this excellent performance.&lt;/p&gt;
&lt;h3 id=&quot;datastructures&quot;&gt;Data structures&lt;/h3&gt;
&lt;p&gt;Good data structures are the backbone of every performant program and SAT solvers are no exceptions. Some of the data structures are generic, and well-known outside solvers, such as custom memory managers that batch allocations and keep data laid out in a cache-friendly manner, other are pretty much specific to CDCL SAT solvers, such as the &lt;em&gt;(2) watched literals&lt;/em&gt; scheme.&lt;/p&gt;
&lt;p&gt;I will skip over the tricks played with clause representation to ensure it is cache friendly because I want to make this post primarily about SAT specific tricks, and not generic tricks of the trade. This leaves us with the &lt;em&gt;2 watched literals&lt;/em&gt; trick.&lt;/p&gt;
&lt;p&gt;Let's backtrack a bit, and return to the first algorithm we wrote down for solving SAT. To improve upon it, we proposed a step where we update and evaluate clauses based on the currently assigned variable, so that satisfied clauses are removed, while unsatisfied clauses are shortened. This step is called &lt;em&gt;BCP&lt;/em&gt; (binary constraint propagation).&lt;/p&gt;
&lt;p&gt;The naive implementation is simple, you can create a mapping between a variable and each clause that contains its literal when you are loading the problem, and then just iterate through all clauses relevant to a variable, either marking them as solved or shortening them. Backtracking is also surprisingly simple because when you unset a variable, you can restore the related clauses.&lt;/p&gt;
&lt;p&gt;However, the naive implementation is also very inefficient. The only time when we can propagate a clause is when it is unsatisfied and is down to a single &lt;em&gt;unassigned&lt;/em&gt; literal, in which case we can use the unassigned literal for unit propagation. Visiting clauses that are either already satisfied, or are not yet down to single unassigned literal is thus a waste of time. This poses a question, how do we keep track of clause status, without explicitly updating them on every variable assignment change?&lt;/p&gt;
&lt;h4 id=&quot;2watchedliterals&quot;&gt;2 watched literals&lt;/h4&gt;
&lt;p&gt;Enter the 2 watched literals algorithm/data structure/trick, pioneered by the Chaff solver. The basic idea is that 2 literals from each clause are selected (watched), and the clause is only visited when one of them would be removed from the clause (in other words, its variable takes the opposite polarity). When a clause is visited, one of these four things happens&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;All but one literal evaluate to false. &lt;em&gt;This last literal is then unit propagated further.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;All literals evaluate to false. &lt;em&gt;This particular assignment is UNSAT, and the solver must backtrack.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;At least one literal evaluates to true. &lt;em&gt;Nothing to do.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;At least 2 literals are not assigned, and the clause is not satisfied. &lt;em&gt;Remove this clause from the watchlist that brought us here, add it to a watchlist of different literal.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This trick ensures that we only visit clauses with the &lt;em&gt;potential&lt;/em&gt; to become unit-clauses, speeding up BCP significantly. It is not without its disadvantages though, using these lazy checks means that we cannot easily answer queries like &quot;how many clauses currently have 3 unassigned literals&quot; because the only thing we know about a clause is that it is either satisfied, or it still has at least 2 unassigned literals. Implementation of backtracking is also a bit trickier than using the naive implementation of BCP updates, but not overly so.&lt;/p&gt;
&lt;p&gt;Note that we do not restore the original watches when backtracking, we keep the replaced ones. The invariant provided by the watches still holds, and there is no reason to do the extra work.&lt;/p&gt;
&lt;p&gt;Over time, two more practical optimizations emerged:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Store literals to propagate directly in watch for binary clauses&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Binary clauses consist of precisely two literals, and we use 2 watches per clause. In other words, once one of the watches is triggered, it will force unit-propagation to happen to the other literal. By specializing path for binary clauses, we can save time it would take to bring the clause from memory and determine that there is only one literal left, and instead, we can start propagating the assignment directly.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;Copy the watched literals into a separate location&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is another optimization based around decreasing cache pressure when working with watches. As it turns out when a clause is examined because of a watch, the most common result of the visit is option 3, that is, the clause is satisfied, and there is nothing to do. Furthermore, the most common reason for the clause being satisfied is the &lt;em&gt;other&lt;/em&gt; watched literal.&lt;/p&gt;
&lt;p&gt;Copying the watched literals of each clause into a separate location allows us to take advantage of this fact because we can check this case &lt;em&gt;without&lt;/em&gt; reading the whole clause from memory, thus alleviating the cache pressure a bit.&lt;/p&gt;
&lt;h3 id=&quot;clausedeletion&quot;&gt;Clause deletion&lt;/h3&gt;
&lt;p&gt;In the introduction, I said that the difference between the DPLL and CDCL algorithms is that the latter learns new clauses during its search for a solution. This learning improves the scalability of CDCL significantly, but it also carries a potential for a significant slowdown, because each learnt clause takes up valuable memory and increases the time needed for BCP. Given that the upper bound on the number of learnable clauses is $2^{|Vars|}$, storing &lt;em&gt;all&lt;/em&gt; of the learnt clauses obviously does not work, and we need to have a strategy for pruning them.&lt;/p&gt;
&lt;p&gt;Let's start with a very naive strategy, &lt;em&gt;first in, first out&lt;/em&gt; (FIFO). In this strategy, we decide on an upper limit of learnt clauses, and when adding a newly learnt clause exceeds this limit, the oldest learnt clause is deleted. This strategy avoids the problem with the ballooning number of learnt clauses, but at the cost of discarding potentially useful clauses. In fact, we are guaranteed to discard useful clauses because every learnt clause has a deterministic lifetime.&lt;/p&gt;
&lt;p&gt;Let's consider a different naive strategy, &lt;em&gt;random removal&lt;/em&gt;. In this strategy, we again decide on an upper limit of learnt clauses, but this time the clause to remove is picked completely randomly. This has the advantage that while we &lt;em&gt;might&lt;/em&gt; remove a useful clause, we are not &lt;em&gt;guaranteed&lt;/em&gt; that we remove useful clauses. While this distinction might seem minor, the random pruning strategy usually outperforms the FIFO one.&lt;/p&gt;
&lt;aside&gt;In practice, the number of kept clauses is not constant, but rather dynamic, and depends on the heuristic chosen for grading the quality of clauses.&lt;/aside&gt;&lt;p&gt;It is evident that a strategy that just keeps &lt;em&gt;n&lt;/em&gt; best learnt clauses dominates both of these. The problem with this idea is that we need a way to score clauses on their usefulness, and doing so accurately might be even harder than solving the SAT instance in the first place. This means that we need to find a good (quickly computable and accurate) heuristic that can score a clause's usefulness.&lt;/p&gt;
&lt;h4 id=&quot;clauseusefulnessheuristics&quot;&gt;Clause usefulness heuristics&lt;/h4&gt;
&lt;p&gt;The number of possible heuristics is virtually unlimited, especially if you count various hybrids and small tweaks, but in this post, we will look only at 3 of them. They are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Clause activity&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This heuristic is used by the MiniSat solver. A clause's activity is based on how recently it was used during conflict resolution, and clauses with low activity are removed from the learnt clause database. The idea behind this is that if a clause was involved in conflict resolution, it has helped us find a conflict quicker and thus let us skip over part of the search space. Conversely, if a clause has not been used for a while, then the slowdown and memory pressure it introduces is probably not worth keeping it around.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;&lt;em&gt;Literal Block Distance&lt;/em&gt; (LBD)&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This heuristic was introduced in a &lt;a href=&quot;https://www.ijcai.org/Proceedings/09/Papers/074.pdf&quot;&gt;2009 paper&lt;/a&gt; and subsequently implemented in the &lt;a href=&quot;http://www.labri.fr/perso/lsimon/glucose/&quot;&gt;Glucose solver&lt;/a&gt;. This heuristic assumes that we have a mapping between variables currently assigned a truth value and the &lt;em&gt;decision level&lt;/em&gt; (recursion level) at which they were assigned that value. Given clause $C$, $LBD(C)$ is then calculated by taking the decision levels from variables of all literals in that clause, and counting how many different decision levels were in this set.&lt;/p&gt;
&lt;p&gt;The less there are, the better, and clauses for which $LBD(C) = 2$ are called &lt;em&gt;glue clauses&lt;/em&gt;. The idea is that they &lt;em&gt;glue together&lt;/em&gt; variables from the higher (later) decision level (later in the search tree) to a variable from a lower (earlier) decision level, and the solver can then use this clause to set these variables earlier after backtracking. Solvers that use the LBD heuristic for learnt clause management almost always keep &lt;em&gt;all&lt;/em&gt; of the glue clauses and for removal only consider clauses where $LBD(C) \geq 3$.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Clause size&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The third heuristic we will look at is extremely simple, it is just the clause's size, $|C|$, with a lower score being better. To understand the reason why shorter clauses are considered better, consider a unit clause $\neg x_3$. Adding this clause to a problem forces assignment $x_3 := false$, effectively removing about half of the possible search space. The story is similar for binary clauses, e.g. $(x_3 \vee x_5)$ cuts out about $1 \over 4$ of the possible variable assignments, because it forbids assignment $x_3 := false \wedge x_5 := false$. More generally, if we do not consider overlaps, an &lt;em&gt;n&lt;/em&gt;-ary clause forbids $1 \over 2^{n}$ possible variable assignments.&lt;/p&gt;
&lt;aside&gt;It is worth considering that \[ 2 \leq LBD(C) \leq |C| \] always holds for learnt clauses.&lt;/aside&gt;&lt;p&gt;Using clause size metric for learnt clause management is then done by picking a threshold &lt;em&gt;k&lt;/em&gt; and splitting learnt clauses into two groups, those where $|C| \leq k$ and those where $|C| \gt k$. Pruning the learnt clauses then only considers the latter group for removal, where the longer clauses are deleted first. It should also incorporate a bit of randomness, to give a chance to &lt;em&gt;not&lt;/em&gt; delete the useful, but long, clause in lieu of the useless, but short(er), clause. The final rating of a clause is then $|C| + random()$.&lt;/p&gt;
&lt;p&gt;Let's compare these 3 heuristics across 3 criteria:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;How much is the clause's rating dependent on the path the solver took to learn this clause, or, how &lt;em&gt;dynamic&lt;/em&gt; is the heuristic&lt;/li&gt;
&lt;li&gt;What does it base its claims of predictive strength on&lt;/li&gt;
&lt;li&gt;Real-world performance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a quick overview:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th/&gt;
&lt;th&gt;Clause activity&lt;/th&gt;
&lt;th&gt;LBD&lt;/th&gt;
&lt;th&gt;Clause size&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;7&quot;&gt;&lt;tr&gt;&lt;td&gt;Dynamicity&lt;/td&gt;
&lt;td&gt;High&lt;/td&gt;
&lt;td&gt;Some&lt;/td&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;td&gt;Prediction basis&lt;/td&gt;
&lt;td&gt;Clauses's recent performance&lt;/td&gt;
&lt;td&gt;How many decision layers are involved in the clause&lt;/td&gt;
&lt;td&gt;Size of the cut the clause makes in the decision tree&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;8&quot;&gt;&lt;td&gt;Performance in the real world&lt;/td&gt;
&lt;td&gt;Used in MiniSat to good effect&lt;/td&gt;
&lt;td&gt;Used in Glucose to good effect&lt;/td&gt;
&lt;td&gt;MiniSat with randomized clause size as the management supposedly outperforms Glucose&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;There are various reasons why it is hard to compare different strategies for learnt clause management objectively. For starters, they are often implemented in entirely different solvers so they cannot be compared directly, and even if you vivify them and port these different strategies to the same solver, the results do not have to generalize. The different solvers might use different learning algorithms, different variable-selection heuristics (see below), different restart strategy and so on, and all of these design consideration must be optimized to work together.&lt;/p&gt;
&lt;p&gt;Another reason why generalization is hard is that different heuristics might perform differently on different kinds of instances, and the average user cares about &lt;em&gt;their&lt;/em&gt; kind of instances a lot more than some idealized average. After all, my employer uses SAT in our core product, and if we could get 10% more performance for &quot;our kind&quot; of instances at the cost of a 10x slowdown on the other kinds, we would take it in a heartbeat.&lt;/p&gt;
&lt;p&gt;So, instead of trying to compare these heuristics objectively, I will leave you with some food for your thoughts:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Glucose is seen as better performing than MiniSat, but a lot of it is its better performance on unsolvable instances, and there are more differences than just the learnt clause management&lt;/li&gt;
&lt;li&gt;More dynamic heuristics likely need more CPU and RAM for bookkeeping&lt;/li&gt;
&lt;li&gt;More static heuristics have to evaluate clauses with less instance-specific context&lt;/li&gt;
&lt;li&gt;As is often disclaimed, &quot;past performance is no guarantee of future results.&quot;&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;variableheuristics&quot;&gt;Variable heuristics&lt;/h3&gt;
&lt;p&gt;As was already mentioned, the solver's performance on a specific problem strongly depends on the order in which it assigns values to variables. In other words, a quickly-computable heuristic approximating &quot;good&quot; order is an essential part of each CDCL solver. The first strong heuristic, &lt;em&gt;VSIDS&lt;/em&gt; (Variable State Independent Decaying Sum), has also been introduced by the Chaff solver, and with minor tweaks, has remained the strongest heuristic for many years.&lt;/p&gt;
&lt;p&gt;Before we look at the heuristics, how they work and what facts about the SAT structure they exploit, it should be noted that they are usually employed in tandem with purely random selection, to balance between the needs to &lt;em&gt;exploit&lt;/em&gt; and to &lt;em&gt;explore&lt;/em&gt; the search space.&lt;/p&gt;
&lt;h4 id=&quot;vsids&quot;&gt;VSIDS&lt;/h4&gt;
&lt;p&gt;VSIDS works by assigning each variable a score and then picking the variable with the highest score. If there are multiple options with the same score, then the tie has to be broken somehow, but the specifics don't matter too much.&lt;/p&gt;
&lt;p&gt;The scores are determined using a simple algorithm:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Start with all counters initialized to 0.&lt;/li&gt;
&lt;li&gt;On conflict, increase the counter of all variables involved in the conflict by $c_{add}$.&lt;/li&gt;
&lt;li&gt;Every &lt;em&gt;j&lt;/em&gt; conflicts, decrease the counter of &lt;em&gt;all&lt;/em&gt; variables by multiplying it with coefficient $c_{decay}$.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The values for &lt;em&gt;j&lt;/em&gt;, $c_{add}$, and $c_{decay}$ are picked via empirical testing, and for any reasonable implementation of VSIDS, it must always hold that $0 &amp;lt; c_{decay} &amp;lt; 1$.&lt;/p&gt;
&lt;p&gt;The original VSIDS implementation in the Chaff solver used to only increase counter of literals in the learnt clause, rather than of all involved literals, and it also decreased the counters significantly, but rarely ($c_{decay} = 0.5$, $j = 1000$). More modern implementations update more literals and decay the counters less, but more often (e.g. $c_{decay} = 0.95$, $j = 1$). This increases the cost of computing the VSIDS but makes the heuristic more responsive to changes in the current search space.&lt;/p&gt;
&lt;p&gt;Over time, various different modifications of VSIDS have emerged, and I want to showcase at least one of them. The paper that introduced this modification called it &lt;em&gt;adaptVSIDS&lt;/em&gt;, short for adaptative VSIDS. The idea behind it is to dynamically change the value of $c_{decay}$ depending on the quality of the learnt clauses, so that when the learnt clauses are of high quality, the solver stays in the same area of the search space for longer, and if the learnt clauses are of poor quality, it will move out of this area of the search space quicker. Specifically, it will increase $c_{decay}$ when the learnt clauses are good, and decrease it when the learnt clauses are bad, as measured by a clause-quality metric such as LBD mentioned above.&lt;/p&gt;
&lt;h4 id=&quot;learningratebasedheuristicslrbandfriends&quot;&gt;Learning Rate Based heuristics (LRB and friends)&lt;/h4&gt;
&lt;p&gt;This is a relatively new family of heuristics (~2016 onwards), with a simple motivation: the big differences between the old DPLL algorithm and the modern CDCL one is that the latter learns about the structure of the problem it is solving. Thus, optimizing variable selection towards learning more is likely to perform better in the long run.&lt;/p&gt;
&lt;p&gt;However, while the idea is simple, implementation is much less so. Computing learning rate based heuristic boils down to solving an online reinforcement learning problem, specifically, it is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-armed_bandit&quot;&gt;Multi-armed bandit (MAB) problem&lt;/a&gt;. Our MAB is also non-stationary, that is, the underlying reward (learning rate) distribution changes during play (solving the problem), which further complicates finding the solution.&lt;/p&gt;
&lt;p&gt;In the end, the algorithm applied is in many ways similar to VSIDS, in that a variant of &lt;em&gt;exponential moving average&lt;/em&gt; (EMA), is applied to each variable and the one with the best score is selected at each step for branching. The important difference is that while VSIDS bumps each variable involved in a conflict by a fixed amount, the LRB heuristic assigns each variable a different payoff based on the amount of learning it has led to.&lt;/p&gt;
&lt;h3 id=&quot;restarts&quot;&gt;Restarts&lt;/h3&gt;
&lt;p&gt;As mentioned in the first post, solving NP-complete problems (such as SAT) naturally leads to heavy-tailed run times. To deal with this, SAT solvers frequently &quot;restart&quot; their search to avoid the runs that take disproportionately longer. What restarting here means is that the solver unsets all variables and starts the search using different variable assignment order.&lt;/p&gt;
&lt;p&gt;While at first glance it might seem that restarts should be rare and become rarer as the solving has been going on for longer, so that the SAT solver can actually finish solving the problem, the trend has been towards more aggressive (frequent) restarts.&lt;/p&gt;
&lt;p&gt;The reason why frequent restarts help solve problems faster is that while the solver does forget all current variable assignments, it does keep some information, specifically it keeps learnt clauses, effectively sampling the search space, and it keeps the last assigned truth value of each variable, assigning them the same value the next time they are picked to be assigned.&lt;/p&gt;
&lt;p&gt;Let's quickly examine 4 different restart strategies.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Fixed restarts&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This one is simple, restart happens every &lt;em&gt;n&lt;/em&gt; conflicts, and &lt;em&gt;n&lt;/em&gt; does not change during the execution. This strategy is here only for completeness sake, as it has been abandoned long ago because of poor performance.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;&lt;li&gt;Geometric restarts&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This is another simple strategy, where the time between restarts increases geometrically. What this does in practice is to restart often at the start, sampling the search space, and then provide the solver enough uninterrupted time to finish the search for a solution.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;&lt;li&gt;Luby restarts&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In this strategy, the number of conflicts between 2 restarts is based on the Luby sequence. The Luby restart sequence is interesting in that it was proven to be optimal restart strategy for randomized search algorithms where the runs &lt;em&gt;do not&lt;/em&gt; share information. While this is not true for SAT solving, Luby restarts have been quite successful anyway.&lt;/p&gt;
&lt;p&gt;The exact description of Luby restarts is that the &lt;em&gt;ith&lt;/em&gt; restart happens after \(\DeclareMathOperator{\Luby}{Luby} u \cdot \Luby(i)\) conflicts, where &lt;em&gt;u&lt;/em&gt; is a constant and \(\DeclareMathOperator{\Luby}{Luby}\Luby(i)\) is defined as&lt;/p&gt;
&lt;p&gt;\begin{align}&lt;br/&gt;\DeclareMathOperator{\Luby}{Luby}&lt;br/&gt;\Luby(i) =&lt;br/&gt;\begin{cases}&lt;br/&gt;2^{k-1} &amp;amp; \text{if } i = 2^{k} - 1 \\&lt;br/&gt;\Luby(i - 2^{k -1} + 1) &amp;amp; \text{if } 2^{k-1} \leq i \lt 2^{k} - 1&lt;br/&gt;\end{cases}&lt;br/&gt;\end{align}&lt;/p&gt;
&lt;p&gt;A less exact but more intuitive description of the Luby sequence is that all numbers in it are powers of two, and after a number is seen for the second time, the next number is twice as big. The following are the first 16 numbers in the sequence:&lt;/p&gt;
&lt;p&gt;\[&lt;br/&gt;(1, 1, 2, 1, 1, 2, 4, 1, 1, 2, 1, 1, 2, 4, 8, 1, \ldots)&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;From the above, we can see that this restart strategy tends towards frequent restarts, but some runs are kept running for much longer, and there is no upper limit on the longest possible time between two restarts.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;&lt;li&gt;Glucose restarts&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Glucose restarts were popularized by the Glucose solver, and it is an &lt;em&gt;extremely&lt;/em&gt; aggressive, dynamic restart strategy. The idea behind it is that instead of waiting for a fixed amount of conflicts, we restart when the last couple of learnt clauses are, on average, bad.&lt;/p&gt;
&lt;p&gt;A bit more precisely, if there were at least &lt;em&gt;X&lt;/em&gt; conflicts (and thus &lt;em&gt;X&lt;/em&gt; learnt clauses) since the last restart, and the average LBD of the last &lt;em&gt;X&lt;/em&gt; learnt clauses was at least &lt;em&gt;K&lt;/em&gt; times higher than the average LBD of &lt;em&gt;all&lt;/em&gt; learnt clauses, it is time for another restart. Parameters &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;K&lt;/em&gt; can be tweaked to achieve different restart frequency, and they are usually kept quite small, e.g. Glucose 2.1 uses \(X = 50\) and \(K = 1.25\).&lt;/p&gt;
&lt;p&gt;So what restart strategy is the best? There only correct answer is neither because while glucose restarts have been very successful in SAT competitions, they are heavily optimized towards the handling of industrial (real world problems encoded as SAT) unsatisfiable instances at the expense of being able to find solutions to problems that are actually satisfiable. In a similar vein, the Luby restarts heavily favor finding solutions to satisfiable industrial instances, at the expense of finding solutions to problems that are unsatisfiable.&lt;/p&gt;
&lt;p&gt;In practice, the current state of the art sat solvers use various hybrids of these techniques, such as switching between periods with glucose restarts and Luby restarts, where the lengths of the periods increase geometrically, or switching between glucose restarts and running without any restarts, and so on. There have also been some experiments with using machine learning to learn a restart strategy.&lt;/p&gt;
&lt;h3 id=&quot;preprocessingandinprocessing&quot;&gt;Preprocessing and Inprocessing&lt;/h3&gt;
&lt;p&gt;The last (but not least) trick I want to cover is preprocessing, and inprocessing of the input SAT instance. The motivation for preprocessing is quite simple: the provided encoding of the problem is often less than optimal. No matter the reasons for this, the end result is the same, modern state of the art SAT solvers use various preprocessing and inprocessing techniques.&lt;/p&gt;
&lt;p&gt;The difference between preprocessing and inprocessing is straightforward. Preprocessing happens once, before the actual solving starts. Inprocessing occurs more than once because it is interleaved with the actual solving. While it is harder to implement inprocessing than preprocessing, using inprocessing carries 2 advantages:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The solver does not have to pay the full processing cost at the start if the problem is easy&lt;/li&gt;
&lt;li&gt;Learnt clauses can be processed as well&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are too many processing techniques to show them all, so in the interest of keeping this already long post at least somewhat palatable, I will show only two. Specifically, I want to explain &lt;em&gt;self-subsumption&lt;/em&gt; (or &lt;em&gt;self-subsuming resolution&lt;/em&gt;) and &lt;em&gt;(bounded) variable elimination&lt;/em&gt; (BVE), but to explain them, I first have to explain &lt;em&gt;resolution&lt;/em&gt; and &lt;em&gt;subsumption&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let's start with subsumption. Given 2 clauses, A and B, A &lt;em&gt;subsumes&lt;/em&gt; B, \(A \subseteq B\), iff every literal from A is also present in B. What this means practically is that A is more restrictive in regards to satisfiability than B, and thus B can be thrown away.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Resolution&lt;/em&gt; is an inference rule that, given a set of existing clauses, allows us to create new clauses that do not change the satisfiability of the whole set of clauses because it is satisfied when its precursors are also satisfied. This is done by taking a pair of clauses that contain complementary literals, removing these complementary literals and splicing the rest of the clauses together. Complementary literals are literals where one of them is a negation of the other, e.g. \(x_{1}\) and \(\neg x_{1}\) are complimentary, while \(x_{1}\) and \(\neg x_{2}\) or \(x_{1}\) and \(x_{1}\) are not, because in the first pair the variables do not match and in the second pair, both literals have the same polarity.&lt;/p&gt;
&lt;p&gt;This sounds complex, but it really is not. Here is a simple example, where the two clauses &lt;em&gt;above&lt;/em&gt; the line are originals, and the clause below the line is the result of resolving them together:&lt;/p&gt;
&lt;p&gt;\[&lt;br/&gt;\frac{x_1 \vee \neg x_2, \neg x_1 \vee x_3}{\neg x_2 \vee x_3}&lt;br/&gt;\]&lt;/p&gt;
&lt;p&gt;A good way of thinking about how resolution works (and why it is correct) is to think through both of the possible assignments of variable \(x_1\). First, let us consider the case of \(x_1 = true\). In this case, the first original clause is satisfied, and the only way to satisfy the second clause is to assign \(x_3 = true\). This assignment means that the resolvent clause is also satisfied. The second option is to assign \(x_1 = false\). This satisfies the second clause, and to satisfy the first one as well, we need to assign \(x_2 = false\). This assignment also means that the resolvent clause is satisfied.&lt;/p&gt;
&lt;p&gt;With this knowledge in hand, we can look at self-subsumption. Given 2 clauses, A and B, and their resolvent R, A is &lt;em&gt;self-subsumed&lt;/em&gt; by B iff \( R \subseteq A \) (A is subsumed by R). This means that we can replace A with R, in effect shortening A by one literal.&lt;/p&gt;
&lt;p&gt;As an example, take \((x_1 \vee x_2 \vee \neg x_3)\) as clause A and \((\neg x_1 \vee \neg x_3 )\) as clause B. The resolvent of these two clauses is \((x_2 \vee \neg x_3)\), which subsumes A. This means that A is self-subsumed by B.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Bounded) variable elimination&lt;/em&gt; (BVE) is also simple. If we want to remove a specific variable &lt;em&gt;x&lt;/em&gt; from a set of clauses, all we have to do is split &lt;em&gt;all&lt;/em&gt; clauses containing that particular variable into two groups, one with all clauses where the variable's literal has positive polarity, and one with all clauses where the variable's literal has negative polarity. If we then resolve each clause from the first group with each clause from the second group, we get a (potentially large) set of resolvents without &lt;em&gt;x&lt;/em&gt;. If we then replace the original clauses with the resolvents, we removed &lt;em&gt;x&lt;/em&gt; from the original set of clauses, without changing the satisfiability of the set as a whole.&lt;/p&gt;
&lt;p&gt;Unlike self-subsumption, which will always simplify the SAT instance, variable elimination might make it harder. The reason is that it trades a variable for clauses, which might be beneficial, but does not have to be. This leads to the idea of &lt;em&gt;bounded&lt;/em&gt; variable elimination, where a variable is only eliminated if the resulting number of clauses is &lt;em&gt;bounded&lt;/em&gt; in some way, e.g. in the total number of added clauses, or the size of resulting clauses.&lt;/p&gt;
&lt;hr/&gt;&lt;p&gt;&lt;em&gt;That's it for part 3, but not for this series, because I still have at least two more posts planned, one of which will again be theoretical.&lt;/em&gt;&lt;/p&gt;
&lt;hr/&gt;</description>
<pubDate>Sun, 19 May 2019 13:36:59 +0000</pubDate>
<dc:creator>kachnuv_ocasek</dc:creator>
<og:type>article</og:type>
<og:title>Modern SAT solvers: fast, neat and underused (part 3 of N)</og:title>
<og:description>In the previous two parts we used a SAT solver as a black box that we feed input into, and it will (usually quickly) spit out an answer. In this part, we will look at how SAT solvers work and what heuristics and other tricks they employ in their quest for performance.</og:description>
<og:url>http://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-3-of-n/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://codingnest.com/modern-sat-solvers-fast-neat-and-underused-part-3-of-n/</dc:identifier>
</item>
<item>
<title>Why Racket? Why Lisp?</title>
<link>https://beautifulracket.com/appendix/why-racket-why-lisp.html</link>
<guid isPermaLink="true" >https://beautifulracket.com/appendix/why-racket-why-lisp.html</guid>
<description>&lt;h3 class=&quot;dept&quot; anchorize=&quot;false&quot;&gt;&lt;a href=&quot;https://beautifulracket.com/&quot;&gt;Beau­tiful Racket&lt;/a&gt; / &lt;a href=&quot;https://beautifulracket.com/#appendix&quot;&gt;appendix&lt;/a&gt;&lt;/h3&gt;



&lt;div class=&quot;sidebar-container&quot; readability=&quot;9.1735537190083&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_y8YCw&quot;&gt;&lt;em&gt;Beau­tiful Racket&lt;/em&gt; and &lt;em&gt;Prac­tical Typog­raphy&lt;/em&gt; were made possible by a publishing system called &lt;a class=&quot; ext&quot; href=&quot;http://pollenpub.com&quot;&gt;Pollen.&lt;/a&gt; I created Pollen with the &lt;a href=&quot;http://racket-lang.org&quot;&gt;Racket&lt;/a&gt; program­ming language. Racket is a descen­dant of &lt;a class=&quot; ext&quot; href=&quot;http://schemers.org/&quot;&gt;Scheme,&lt;/a&gt; which in turn is a descen­dant of Lisp.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_5IsIB&quot;&gt;So while Racket is not Lisp (in the specific Common Lisp sense), it is &lt;em&gt;a&lt;/em&gt; Lisp (in the familial sense). Its core ideas—and core virtues—are shared with Lisp. So talking about Racket means talking about Lisp.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;15.709259259259&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_HyW7x&quot;&gt;In prac­tical program­ming projects, Lisps are rare. Racket espe­cially so. Thus, before I orig­i­nally embarked on my Lisp adven­ture, I wanted to under­stand the costs &amp;amp; bene­fits of using a Lisp. Why do Lisps have such a great repu­ta­tion, yet few users? Was I seeing some­thing everyone else missed? Or did they know some­thing I didn’t? To find out, I read what­ever I could find about Lisps, including Paul Graham’s &lt;em&gt;&lt;a class=&quot; ext&quot; href=&quot;http://www.paulgraham.com/hackpaint.html&quot;&gt;Hackers &amp;amp; Painters&lt;/a&gt;&lt;/em&gt; and Peter Seibel’s &lt;em&gt;&lt;a class=&quot; ext&quot; href=&quot;http://www.gigamonkeys.com/book/&quot;&gt;Prac­tical Common Lisp&lt;/a&gt;&lt;/em&gt;. (OK, parts. It’s a big book.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_bJjwN&quot;&gt;What I found was plenty of Lisp flat­tery from expert Lisp program­mers. (Also plenty of Lisp kvetchery from its detrac­tors.) What I didn’t find were simple, persua­sive argu­ments in its favor. So here’s why Racket was the right tool for me, and what I see as the prac­tical virtues of Lisps in general.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_xAWNr&quot;&gt;I didn’t study computer science in college (though I was a math major for two years, before switching to design). I’ve never held an offi­cial job as a programmer. Rather, program­ming has been a secondary skill I’ve used in my work as a web designer, type designer, and writer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_T3NAB&quot;&gt;But in the last few years, I’ve spent an increasing amount of my time program­ming. This program­ming gener­ates income. So by the simplest defi­n­i­tion—does the skill make you money?—I suppose I qualify as a profes­sional programmer. And since most of my program­ming efforts are in Racket, I qualify as a profes­sional Racket programmer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11.560260586319&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_RgaHw&quot;&gt;Mind you, I’m not claiming that I’m an &lt;em&gt;expert&lt;/em&gt; programmer. Among the Racket commu­nity, which is laden with computer-science Ph­Ds &amp;amp; profes­sors, I (have no choice but to) embrace my rela­tive inex­pe­ri­ence. Hence the title of my talk at Racket­Con 2014: &lt;em&gt;&lt;a class=&quot; ext&quot; href=&quot;https://www.youtube.com/watch?v=IMz09jYOgoc&quot;&gt;Like a Blind Squirrel in a Ferrari&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;21&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_muaS9&quot;&gt;Yet despite my limi­ta­tions as a programmer, with Racket I’ve been able to render bigger ideas into programs more quickly, and with fewer bugs, than any language I’ve used before (and there have been many—BASIC, C, C++, Perl, Java, Java­Script, Python, and others). Since I haven’t gotten a brain trans­plant recently, there must be some­thing special about Racket as a language.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;sidebar-container&quot; readability=&quot;15.951635846373&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_2yvjM&quot;&gt;Lisp is a language most program­mers have heard of, for two reasons. First, it’s one of the oldest computer languages, in use since 1958. Second, it’s accrued a repu­ta­tion as a language for brainiacs. Orig­i­nally this repu­ta­tion arose from its asso­ci­a­tion with the field of arti­fi­cial intel­li­gence. Since then, this repu­ta­tion has been main­tained by peri­odic endorse­ments from respected program­mers (latterly, &lt;a class=&quot; ext&quot; href=&quot;http://www.catb.org/esr/faqs/hacker-howto.html&quot;&gt;Eric Raymond&lt;/a&gt; and &lt;a class=&quot; ext&quot; href=&quot;http://www.paulgraham.com/avg.html&quot;&gt;Paul Graham&lt;/a&gt;) and the enduring fame of the text­book used in intro­duc­tory computer-science courses at MIT, &lt;em&gt;&lt;a class=&quot; ext&quot; href=&quot;http://mitpress.mit.edu/sicp/&quot;&gt;Struc­ture and Inter­pre­ta­tion of Computer Programs&lt;/a&gt;&lt;/em&gt; (which uses Scheme, and that one I did read start to finish).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12.672268907563&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_NiXGx&quot;&gt;But as main­stream program­ming tools, Lisp and its descen­dants have been largely ignored. Popu­larity of program­ming languages is tricky to measure, but here’s a simple proxy—let’s count the number of projects currently hosted on &lt;a class=&quot; ext&quot; href=&quot;http://github.com&quot;&gt;Git­Hub.&lt;/a&gt; One could quibble about the accu­racy of this method, except that the results aren’t even close:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div id=&quot;a_5Uqiv&quot;&gt;
&lt;div class=&quot;sidebar-container&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div id=&quot;a_4QyJJ&quot;&gt;
&lt;table class=&quot;quick&quot; form=&quot;false&quot; id=&quot;a_i2oNb&quot;&gt;&lt;tr&gt;&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Git­Hub projects&lt;/th&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;JavaScript&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;3,280,706&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;Java&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;2,906,566&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;Python&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;1,553,633&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;Ruby&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;1,204,717&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;PHP&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;1,147,631&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;C&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;640,925&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;Clojure&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;46,561&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;Common Lisp&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;12,038&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;Scheme&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;8780&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td hyphens=&quot;none&quot;&gt;Racket&lt;/td&gt;
&lt;td hyphens=&quot;none&quot;&gt;6885&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_yIEIe&quot;&gt;The last four languages are Lisps, and together account for only 74,264 projects. Racket itself only accounts for a small frac­tion of this small frac­tion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12.816901408451&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_S33CA&quot;&gt;Popular program­ming languages aren’t neces­sarily good—look what’s at the top of that list. &lt;span class=&quot;tooltip&quot; onclick=&quot;this.classList.toggle('tooltip_visible')&quot;&gt; + &lt;span class=&quot;tooltip-inner&quot;&gt;&lt;em&gt;[Java­Script] has a lot of stupid in it … The good parts of [Java­Script] go back to Scheme and Self.&lt;/em&gt;&lt;br/&gt;—Brendan Eich, &lt;a class=&quot; ext&quot; href=&quot;http://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/#comment-1020&quot;&gt;here&lt;/a&gt; and &lt;a class=&quot; ext&quot; href=&quot;http://www.jwz.org/blog/2010/10/every-day-i-learn-something-new-and-stupid/#comment-1089&quot;&gt;here&lt;/a&gt;&lt;/span&gt;&lt;/span&gt; But unpop­ular languages often have fatal flaws that prevent wider adop­tion. As I was consid­ering languages, Racket had a lot to recom­mend it. But was there a fatal flaw I was over­looking? And by commit­ting to a Lisp, would I be painting myself into a corner? I wanted to under­stand the risks and bene­fits.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;sidebar-container&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_C5upJ&quot;&gt;I said above that Lisp flat­tery is easy to find. The problem with Lisp flat­tery is that it makes sense only to expe­ri­enced Lisp program­mers. To others—espe­cially those who are trying to decide whether to learn and use a Lisp—it just comes across as unsub­stan­ti­ated hoodoo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;14.355140186916&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_puqw7&quot;&gt;For example, in his essay &lt;em&gt;&lt;a class=&quot; ext&quot; href=&quot;http://www.catb.org/esr/faqs/hacker-howto.html&quot;&gt;How to Become a Hacker,&lt;/a&gt;&lt;/em&gt; Eric Raymond says “Lisp is worth learning for … the profound enlight­en­ment expe­ri­ence you will have when you finally get it. That expe­ri­ence will make you a better programmer for the rest of your days, even if you never actu­ally use Lisp itself a lot.” Unfor­tu­nately Raymond doesn’t follow up this claim by describing the “enlight­en­ment expe­ri­ence,” nor why it’s “profound,” nor how it will improve your program­ming skills gener­ally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10.767857142857&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_4jfHo&quot;&gt;To be fair, Raymond’s essay is not focused on Lisp. But compare &lt;em&gt;&lt;a class=&quot; ext&quot; href=&quot;http://www.paulgraham.com/avg.html&quot;&gt;Beating the Aver­ages,&lt;/a&gt;&lt;/em&gt; by Paul Graham, which is. Graham starts off by citing Raymond’s compli­ment to Lisp and seems ready to make the claim concrete.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_4czFe&quot;&gt;Instead, he breaks it into smaller chunks of flat­tery. “We knew Lisp was a really good language for writing soft­ware quickly.” Because of what char­ac­ter­is­tics? He doesn’t say, but then describes Lisp as his “secret weapon.” OK, so what’s the secret? He says “program­ming languages vary in power.” Fine, but what exactly makes Lisp more powerful?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12.810495626822&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_6jePR&quot;&gt;Graham offers one concrete example: Lisp’s &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#macro&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;macro&lt;/span&gt;&lt;/a&gt; facility, which he describes as its ability to make “programs that write programs.” After four years using a Lisp language, I’d agree with Graham that macros are great when you need them. But for someone new to Lisp languages, they’re not neces­sarily a bread-and-butter benefit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;15.114893617021&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_TdKBY&quot;&gt;I was hopeful when I opened Peter Seibel’s &lt;em&gt;&lt;a class=&quot; ext&quot; href=&quot;http://www.gigamonkeys.com/book&quot;&gt;Prac­tical Common Lisp&lt;/a&gt;&lt;/em&gt; and saw that the &lt;a class=&quot; ext&quot; href=&quot;http://www.gigamonkeys.com/book/introduction-why-lisp.html&quot;&gt;intro­duc­tion&lt;/a&gt; was subti­tled “Why Lisp?” Yes, tell me! Seibel echoes Graham’s claim: “You’ll get more done, faster, using [Lisp] than you would using pretty much any other language.” OK, but how? Seibel wonders whether “I like Lisp because of some quirk in the way my brain is wired. It could even be genetic, since my dad has it too.” That’s not encour­aging to those of us outside your family. Ulti­mately, he sums up the appeal of Lisp by describing it as “the program­mable program­ming language.” But I’ve never used a program­mable program­ming language. Why should I start?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_fhXXs&quot;&gt;And by the way, when do I get the speed and power you keep promising?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_rjm58&quot;&gt;In short—&lt;strong&gt;what’s in it for me, now?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_0gjYY&quot;&gt;This is the funda­mental ques­tion that Lisp advo­cates have to answer for new users. But more often, it’s side­stepped. I’m not picking on Raymond or Graham or Seibel. They’re excel­lent writers. As program­mers, they’re way out of my league. As I learn more about Lisps, I return to these arti­cles and they make more sense.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_NZLeJ&quot;&gt;But these arti­cles are also emblem­atic of a general weak­ness of messaging about Lisp. I say that not as a ranking member of the Lisp commu­nity, but rather as someone who spent a lot of time seeking an answer to that funda­mental ques­tion. I never got it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12.183856502242&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_uL2or&quot;&gt;Seibel is passing the buck when he says that to under­stand the bene­fits of Lisp, “you’re going to have to learn some Lisp and see for your­self.” Sure, this method works—using Racket for a few months finally made the bene­fits of Lisp clear to me. But it also required an invest­ment of about 100–200 hours. &lt;span class=&quot;tooltip&quot; onclick=&quot;this.classList.toggle('tooltip_visible')&quot;&gt; + &lt;span class=&quot;tooltip-inner&quot;&gt;&lt;span class=&quot;no-hyphens&quot;&gt;For more on the perils of taxing reader patience, see &lt;a class=&quot; ext&quot; href=&quot;http://practicaltypography.com/why-does-typography-matter.html&quot;&gt;why does typog­raphy matter&lt;/a&gt; in Prac­tical Typog­raphy.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13.58038147139&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_ZNhH0&quot;&gt;That’s asking too much. If Lisp languages are so great, then it should be possible to summa­rize their bene­fits in concise, prac­tical terms. It should be possible to demon­strate the power of Lisp &lt;a href=&quot;https://beautifulracket.com/stacker/&quot;&gt;in one hour&lt;/a&gt;, not 100. If Lisp advo­cates refuse to do this, then we shouldn’t be surprised when these languages remain stuck near the bottom of the charts.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_2NmuE&quot;&gt;In a word, &lt;em&gt;expres­sive­ness:&lt;/em&gt; the measure of how easy it is to put your ideas into code. For instance, an expres­sive language like Racket lets you write the “Hello world” program like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; id=&quot;a_LKlcy&quot;&gt;
&lt;p&gt;&quot;Hello world&quot;&lt;/p&gt;
&lt;div class=&quot;highlight&quot; form=&quot;false&quot; id=&quot;a_WN4dd&quot;&gt;
&lt;table class=&quot;sourcetable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;source&quot;&gt;
&lt;pre&gt;
&quot;Hello world&quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;copy-button&quot; form=&quot;false&quot; onclick=&quot;notify('copied to clipboard', 1000)&quot; id=&quot;a_Vldpk&quot; data-clipboard-target=&quot;#code_43&quot; data-clipboard-action=&quot;copy&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/fonts/feather-v1.1/svg/download.svg&quot; alt=&quot;copy to clipboard&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_IOOlh&quot;&gt;Whereas a less expres­sive language—I won’t name names—requires this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;6.5&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; id=&quot;a_n5gO8&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;public class HelloWorld {&lt;br/&gt;    public static void main(String[] args) {&lt;br/&gt;        System.out.println(&quot;Hello world&quot;);&lt;br/&gt;    }&lt;br/&gt;}&lt;/p&gt;
&lt;div class=&quot;highlight&quot; form=&quot;false&quot; id=&quot;a_SA9bL&quot;&gt;
&lt;table class=&quot;sourcetable&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td class=&quot;linenos&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4.5&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;copy-button&quot; form=&quot;false&quot; onclick=&quot;notify('copied to clipboard', 1000)&quot; id=&quot;a_Vldpk1&quot; data-clipboard-target=&quot;#code_44&quot; data-clipboard-action=&quot;copy&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/fonts/feather-v1.1/svg/download.svg&quot; alt=&quot;copy to clipboard&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_g2r6x&quot;&gt;Conci­sion is valu­able, but expres­sive­ness also embodies other qual­i­ties: preci­sion, read­ability, flex­i­bility, poten­tial for gener­al­iza­tion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_Vldpk2&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/appendix/racetrack.jpg&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;16&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_YBsQY&quot;&gt;Compared to other languages, Lisps are tremen­dously expres­sive. Like the over­pow­ered Japanese motor­cycle I once owned, they go where you want, very quickly, with a minimum of input. If you’ve ridden a motor­cycle, then you know what I mean. If you haven’t, good news—Lisps are cheaper and safer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_9HUGi&quot;&gt;Here’s my ranking of the language features that offered the most imme­diate value to me, when I was a programmer new to the Lisp world. For each, I’ve noted whether it’s a feature of Racket specif­i­cally, or Lisps gener­ally.&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;&lt;li readability=&quot;22.500664599025&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11.98753894081&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_XJzY5&quot;&gt;&lt;strong&gt;Every­thing is an expres­sion.&lt;/strong&gt; [Lisps] Most program­ming languages are a combi­na­tion of two distinct ingre­di­ents: &lt;em&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#expression&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;expres­sions&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; (things that are eval­u­ated to produce a value) and &lt;em&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#statement&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;state­ments&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; (things that denote an action). For instance, in Python, &lt;span class=&quot;my-code&quot; decode=&quot;exclude&quot;&gt;x = 1&lt;/span&gt; is a state­ment, and &lt;span class=&quot;my-code&quot; decode=&quot;exclude&quot;&gt;x + 1&lt;/span&gt; is an expres­sion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_YF5p4&quot;&gt;State­ments and expres­sions are distinct because while expres­sions can be natu­rally nested with each other, state­ments and expres­sions cannot. For instance, in Python, this is still a valid expres­sion:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; id=&quot;a_sMLb4&quot;&gt;
&lt;p&gt;x + (y + 1)&lt;/p&gt;
&lt;div class=&quot;highlight&quot; form=&quot;false&quot; id=&quot;a_cBBXb&quot;&gt;
&lt;table class=&quot;sourcetable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;source&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;copy-button&quot; form=&quot;false&quot; onclick=&quot;notify('copied to clipboard', 1000)&quot; id=&quot;a_Vldpk3&quot; data-clipboard-target=&quot;#code_45&quot; data-clipboard-action=&quot;copy&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/fonts/feather-v1.1/svg/download.svg&quot; alt=&quot;copy to clipboard&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_b6vB1&quot;&gt;but this is not:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; id=&quot;a_QsoVA&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;x + (if is_true(): 1 else: 2)&lt;/p&gt;
&lt;div class=&quot;highlight&quot; form=&quot;false&quot; id=&quot;a_NEQ11&quot;&gt;
&lt;table class=&quot;sourcetable&quot;&gt;&lt;tbody readability=&quot;1&quot;&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;td class=&quot;linenos&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;4&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;copy-button&quot; form=&quot;false&quot; onclick=&quot;notify('copied to clipboard', 1000)&quot; id=&quot;a_Vldpk4&quot; data-clipboard-target=&quot;#code_46&quot; data-clipboard-action=&quot;copy&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/fonts/feather-v1.1/svg/download.svg&quot; alt=&quot;copy to clipboard&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_5vYA6&quot;&gt;In Python, an &lt;span class=&quot;my-code&quot; decode=&quot;exclude&quot;&gt;if&lt;/span&gt; condi­tional is a state­ment, and can only be used in certain posi­tions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13.902097902098&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_7dNqY&quot;&gt;By making every­thing an expres­sion, however, Lisps remove this limi­ta­tion. Since expres­sions are nestable, anything in the language can be combined with nearly anything else. For instance, because an &lt;a href=&quot;http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;if&lt;/a&gt; condi­tional is an expres­sion, you can use it in place of a value:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; id=&quot;a_MPPdG&quot;&gt;
&lt;p&gt;(+ x (if (is_true) 1 2))&lt;/p&gt;
&lt;div class=&quot;highlight&quot; form=&quot;false&quot; id=&quot;a_9mghh&quot;&gt;
&lt;table class=&quot;sourcetable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;code&quot;&gt;
&lt;div class=&quot;source&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;+&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;if&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;copy-button&quot; form=&quot;false&quot; onclick=&quot;notify('copied to clipboard', 1000)&quot; id=&quot;a_Vldpk5&quot; data-clipboard-target=&quot;#code_47&quot; data-clipboard-action=&quot;copy&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/fonts/feather-v1.1/svg/download.svg&quot; alt=&quot;copy to clipboard&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_u5DG2&quot;&gt;You could also use a condi­tional in place of an oper­ator:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;5.5932203389831&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; id=&quot;a_U69dq&quot; readability=&quot;6.4909090909091&quot;&gt;
&lt;p&gt;((if (wants_sum) + *) x 1)&lt;/p&gt;
&lt;div class=&quot;highlight&quot; form=&quot;false&quot; id=&quot;a_Ao5It&quot;&gt;
&lt;table class=&quot;sourcetable&quot;&gt;&lt;tbody readability=&quot;0.85714285714286&quot;&gt;&lt;tr readability=&quot;1.7142857142857&quot;&gt;&lt;td class=&quot;linenos&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;3.3846153846154&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;5.9230769230769&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;if&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wants_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;+&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;*&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;copy-button&quot; form=&quot;false&quot; onclick=&quot;notify('copied to clipboard', 1000)&quot; id=&quot;a_Vldpk6&quot; data-clipboard-target=&quot;#code_48&quot; data-clipboard-action=&quot;copy&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/fonts/feather-v1.1/svg/download.svg&quot; alt=&quot;copy to clipboard&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_J8Vjz&quot;&gt;You could even nest another condi­tional within that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;5.6923076923077&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; id=&quot;a_G5bSZ&quot; readability=&quot;6.6283185840708&quot;&gt;
&lt;p&gt;((if ((if (this-cond) sub-cond-1 sub-cond-2)) + *) x 1)&lt;/p&gt;
&lt;div class=&quot;highlight&quot; form=&quot;false&quot; id=&quot;a_re9ii&quot;&gt;
&lt;table class=&quot;sourcetable&quot;&gt;&lt;tbody readability=&quot;0.89473684210526&quot;&gt;&lt;tr readability=&quot;1.7894736842105&quot;&gt;&lt;td class=&quot;linenos&quot;&gt;

&lt;/td&gt;
&lt;td class=&quot;code&quot; readability=&quot;3.5636363636364&quot;&gt;
&lt;div class=&quot;source&quot; readability=&quot;6.2363636363636&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;if&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;if&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this-cond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub-cond-1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub-cond-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;+&lt;/a&gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;&lt;a href=&quot;http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))&quot; class=&quot;docs&quot; hyphens=&quot;none&quot;&gt;*&lt;/a&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class=&quot;copy-button&quot; form=&quot;false&quot; onclick=&quot;notify('copied to clipboard', 1000)&quot; id=&quot;a_Vldpk7&quot; data-clipboard-target=&quot;#code_49&quot; data-clipboard-action=&quot;copy&quot;&gt;&lt;img src=&quot;https://beautifulracket.com/fonts/feather-v1.1/svg/download.svg&quot; alt=&quot;copy to clipboard&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;14&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_21HDo&quot;&gt;And so forth. This is a synthetic example. The point is not that you’d neces­sarily want to do this, but that Lisps permit it. As a programmer, this simpli­fies your work, because every­thing snaps together easily. It also expands your possi­bil­i­ties, because you can combine parts of the language in unusual ways if you feel like it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_8u6NZ&quot;&gt;It’s similar to the basic idea behind Legos. Other building sets offer special­ized pieces that can only fit together certain ways. But by sharing uniform measure­ments, Lego bricks offer maximum possi­bil­i­ties for combi­na­tions. This ends up being more flex­ible &amp;amp; more fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10.535211267606&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_92337&quot;&gt;So it is with an expres­sion-based language. If you find this idea exciting, congrat­u­la­tions—you might be a Lisp programmer. (If you find this idea weird and scary, this is a good moment to &lt;a class=&quot; ext&quot; href=&quot;https://www.youtube.com/watch?v=8CmeDu7K7f4&quot;&gt;bail out.&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;16.318409204602&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;9.1304347826087&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_7fc19&quot;&gt;&lt;strong&gt;Every expres­sion is either a single value or a list.&lt;/strong&gt; [Lisps] Single values are things like numbers and &lt;a href=&quot;https://beautifulracket.com/explainer/stringlike-types.html&quot;&gt;strings&lt;/a&gt; and &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#hash-table&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;hash tables&lt;/span&gt;&lt;/a&gt;. (In Lisps, they’re some­times called &lt;em&gt;atoms&lt;/em&gt;.) That part is no big deal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;16.877697841727&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_VPEC8&quot;&gt;The list part, however, is a big deal. In a language like Python, the list is one data type within the language. But in Lisps, the &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#list&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;list&lt;/span&gt;&lt;/a&gt; is more like an orga­nizing prin­ciple for every­thing that happens. &lt;span class=&quot;tooltip&quot; onclick=&quot;this.classList.toggle('tooltip_visible')&quot;&gt; + &lt;span class=&quot;tooltip-inner&quot;&gt;The name “Lisp” is an abbre­vi­a­tion for “list processing.”&lt;/span&gt;&lt;/span&gt; So yes, you can use the list as a data type. But a func­tion call is also a list. In fact, the source code for the func­tion is a list. Actu­ally, the rest of the program is too. Lists are every­where. &lt;span class=&quot;tooltip&quot; onclick=&quot;this.classList.toggle('tooltip_visible')&quot;&gt; + &lt;span class=&quot;tooltip-inner&quot;&gt;The fancy CS term for this prop­erty is &lt;em&gt;homoiconicity&lt;/em&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_IOotS&quot;&gt;The bene­fits of lists are similar to that of expres­sions. By bringing more of the language into a consis­tent form, more possi­bil­i­ties arise for how pieces can be combined and manip­u­lated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_b3bdV&quot;&gt;Seibel describes Lisp as a tool for getting “more done, faster.” Here, you can start to see why this is so. Lisp languages are immensely flex­ible and permis­sive in how their pieces can be connected. This means that the way you &lt;em&gt;think&lt;/em&gt; about a program­ming problem can be quite close to the way you actu­ally program it. (This is also why Lisps have tradi­tion­ally excelled for proto­types and exploratory work.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_oxN9a&quot;&gt;To be fair, getting the most out of a Lisp means learning to think more in the Lisp idiom of lists and expres­sions. For that reason, I agree with Seibel—trying it your­self is the best way to be convinced of the bene­fits. As you get a feel for lists and expres­sions, it does pay increasing divi­dends throughout the language. You see how tiny lines of code can produce epic amounts of work. You also start to appre­ciate that even in a well-designed language like Python, you’re spending a lot of time shaping your ideas to fit its limi­ta­tions, like shaving an invis­ible yak.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;17.065009560229&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_JDNGR&quot;&gt;&lt;strong&gt;Func­tional program­ming.&lt;/strong&gt; [Lisps] Yes, I know that other languages offer func­tional-program­ming features, and that Lisps aren’t consid­ered pure func­tional languages. But many program­mers haven’t been exposed to this idiom, and thus tend to under­rate its bene­fits. I know I was in that cate­gory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12.564102564103&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_Om4Rm&quot;&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#functional-programming&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;Func­tional program­ming&lt;/span&gt;&lt;/a&gt; doesn’t mean program­ming with &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#function&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;func­tions&lt;/span&gt;&lt;/a&gt;. Every­body does that. Func­tional program­ming refers to a stricter style where func­tions receive certain data as input, process only that data, and return a result. In func­tional program­ming, func­tions avoid two habits common in other languages: &lt;em&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#mutation&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;muta­tion&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; (= changing data in-place rather than returning a value) and relying on &lt;em&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#state&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;state&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; (= extra context that’s not provided as input, for instance global vari­ables).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_G2MXB&quot;&gt;“Wait—I love state and muta­tion. Why would you take them away?” Because they’re false friends. They contra­dict the essen­tial concept of a func­tion, which is to encap­su­late data and algo­rithms. When a func­tion relies on state or muta­tion, it’s oper­ating outside those bound­aries. There­fore, you either take on an increasing house­keeping burden to keep track of how func­tions affect each other, or watch your program sink into a swamp of myste­rious, compli­cated bugs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_K71iY&quot;&gt;Program­ming in a func­tional style takes more effort at the outset. But it encour­ages you to struc­ture the program in a clean, compart­men­tal­ized way. This pays off imme­di­ately in programs that are easier to test and debug. It’s also more likely to lead to reusable compo­nents, since func­tions are truly inde­pen­dent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_M3mzh&quot;&gt;This bite-the-bullet aspect of func­tional program­ming is another reason why you can get “more done, faster” with a Lisp. The differ­ence between proto­type and produc­tion code often ends up being small, because you don’t take as many short­cuts at the start. The program grows and evolves more smoothly because it’s easy to change one part without causing ripple effects else­where.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;10.739644970414&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;9.7326203208556&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_vmsLq&quot;&gt;&lt;strong&gt;Macros.&lt;/strong&gt; [Racket] Some Rack­e­teers quibble with this term, prefer­ring &lt;em&gt;syntax trans­formers&lt;/em&gt;, because a Racket &lt;a href=&quot;http://docs.racket-lang.org/guide/macros.html&quot;&gt;macro&lt;/a&gt; can be more sophis­ti­cated than the usual Common Lisp macro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;8.2894736842105&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_KGBbb&quot;&gt;A macro in Common Lisp is a func­tion that runs at &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#compile-time&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;compile time&lt;/span&gt;&lt;/a&gt;, accepting symbols as input and injecting them into a template to produce new code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10.538922155689&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_bAV9J&quot;&gt;Macros in Racket, on the other hand, rely on the concept of &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#hygiene&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;hygiene&lt;/span&gt;&lt;/a&gt;. They can handle Common Lisp-style macros, but also more elab­o­rate syntax rearrange­ments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_H9jTy&quot;&gt;But forget that—what’s in it for you? As a programmer, you end up getting two bites at the apple every time you run a file: Racket runs the macros (which alter the source code), and then the source code itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_v0SLB&quot;&gt;Unlike some­thing like the C preprocessor, which is basi­cally a sepa­rate mini-language, Racket macros are them­selves Racket func­tions that give you access to every­thing in Racket. Like lists and expres­sions, macros add another layer of expres­sive possi­bil­i­ties.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;12.70618556701&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;9.0948275862069&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_pwJR1&quot;&gt;&lt;strong&gt;Create new program­ming languages.&lt;/strong&gt; [Racket] When I first read that Racket could be used to &lt;a href=&quot;http://docs.racket-lang.org/guide/languages.html&quot;&gt;create new languages,&lt;/a&gt; I had two thoughts—&lt;em&gt;are they serious?&lt;/em&gt; and &lt;em&gt;would I really want to do that?&lt;/em&gt; The answers were &lt;em&gt;yes&lt;/em&gt; and &lt;em&gt;oh hell yes.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;16.634482758621&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_OVWAw&quot;&gt;Between expres­sions, lists, and macros, Racket gives you a huge amount of semantic flex­i­bility. But on top of that, it also adds syntactic flex­i­bility, in that you can define a &lt;em&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#reader&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;reader&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; that converts surface syntax into stan­dard Racket &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#s-expression&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;S-expres­sions&lt;/span&gt;&lt;/a&gt;, and an &lt;em&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#expander&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;expander&lt;/span&gt;&lt;/a&gt;&lt;/em&gt; that deter­mines the meaning of these S-expres­sions. &lt;span class=&quot;tooltip&quot; onclick=&quot;this.classList.toggle('tooltip_visible')&quot;&gt; + &lt;span class=&quot;tooltip-inner&quot;&gt;Paul Graham’s program­ming language &lt;a class=&quot; ext&quot; href=&quot;http://arclanguage.org/&quot;&gt;Arc,&lt;/a&gt; a dialect of Lisp, was built on top of Racket.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;8.8442211055276&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_vQdh7&quot;&gt;You can use this facility to make &lt;a href=&quot;http://docs.racket-lang.org/ts-guide/index.html&quot;&gt;special­ized dialects&lt;/a&gt; of Racket. Or imple­ment &lt;a href=&quot;http://docs.racket-lang.org/r6rs/index.html&quot;&gt;earlier languages.&lt;/a&gt; Or create entirely &lt;a href=&quot;http://docs.racket-lang.org/datalog/datalog.html&quot;&gt;new languages&lt;/a&gt; with their own rules. You can use any of these languages within Dr­Racket to code new projects. (These special languages are some­times called &lt;em&gt;&lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#domain-specific-language&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;domain-specific languages&lt;/span&gt;&lt;/a&gt;&lt;/em&gt;, or &lt;em&gt;DSLs&lt;/em&gt;.) Scribble is a DSL based on Racket; Pollen is a set of DSLs based on Scribble.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_1p7B2&quot;&gt;If you’re like most program­mers, you’ve never had a tool for making a new language, so you’ve not consid­ered it a real­istic approach to a problem. And you won’t need it all the time. But when you do, it is awesome, in both the new and old senses of that word.&lt;/p&gt;
&lt;/div&gt;

&lt;/li&gt;
&lt;li readability=&quot;13.958860759494&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_3dPRL&quot;&gt;&lt;strong&gt;Libraries &amp;amp; docu­men­ta­tion.&lt;/strong&gt; [Racket] This might not look like a compet­i­tive differ­en­tiator—doesn’t every program­ming language have libraries &amp;amp; docu­men­ta­tion?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_N2KtA&quot;&gt;Yes, but prob­ably not like this. As a conse­quence of being used in research settings for many years—Racket’s core devel­op­ment team is made of computer-science profes­sors—Racket’s libraries &amp;amp; docs are more like a trans­mis­sion from a highly evolved alien intel­li­gence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;9.1891891891892&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_LSaoM&quot;&gt;You get the essen­tials, of course: &lt;a href=&quot;http://docs.racket-lang.org/web-server-internal/index.html&quot;&gt;web server,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/json/index.html&quot;&gt;JSON,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/xml/index.html&quot;&gt;XML,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/draw/index.html&quot;&gt;drawing,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/foreign/index.html&quot;&gt;foreign-func­tion inter­face,&lt;/a&gt; and so on. Then you notice pack­ages you maybe didn’t expect: &lt;a href=&quot;http://docs.racket-lang.org/framework/index.html&quot;&gt;GUI appli­ca­tion frame­work,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/plot/index.html&quot;&gt;math plot­ting,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/pkg/index.html&quot;&gt;package-distri­bu­tion system,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/rackunit/index.html&quot;&gt;unit tester.&lt;/a&gt; Beyond that, your face starts to melt a little bit: &lt;a href=&quot;http://docs.racket-lang.org/redex/index.html&quot;&gt;seman­tics engi­neering?&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/future-visualizer/index.html&quot;&gt;Futures visu­al­izer?&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_ThF9h&quot;&gt;I won’t pretend to know what all this shit does. A lot of it is over my head. But I like that. Each week I use Racket, I end up exploring a new part of the library, and learning some­thing new. As opposed to other languages that seem to kill brain cells on contact (= pretty much anything named *Script, I find). &lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11.991836734694&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_Fi5nc&quot;&gt;This learning is only possible because of Racket’s truly outstanding docu­men­ta­tion. It’s vast, thor­ough, precise, and approach­able. &lt;a href=&quot;http://docs.racket-lang.org/&quot;&gt;See for your­self.&lt;/a&gt; &lt;span class=&quot;tooltip&quot; onclick=&quot;this.classList.toggle('tooltip_visible')&quot;&gt; + &lt;span class=&quot;tooltip-inner&quot;&gt;If you don’t like the typog­raphy and layout of the docs, blame me.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;8.6595744680851&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11.583333333333&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_QpSbi&quot;&gt;&lt;strong&gt;Dr­Racket.&lt;/strong&gt; [Racket] Yes, I know how to use a command line. But Racket includes a cross-plat­form graph­ical IDE called &lt;a href=&quot;http://docs.racket-lang.org/drracket/index.html&quot;&gt;Dr­Racket&lt;/a&gt; that’s pretty great. Dr­Racket lets you edit, run, and debug Racket source files (or any other language based on Racket—see item #9 on this list.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_qS0A6&quot;&gt;No, it doesn’t have the Ginsu-level search-and-replace facil­i­ties of some­thing like Sublime Text. But it does have helpful editing features opti­mized for Racket code (for instance, you can right-click on a symbol name and rename it throughout the file, or jump from a func­tion to its docu­men­ta­tion).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12.689361702128&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_K2ZIt&quot;&gt;More­over, the command line within Dr­Racket doesn’t just show plain text—it can show stacked frac­tions, &lt;a href=&quot;http://docs.racket-lang.org/teachpack/2htdpimage.html&quot;&gt;draw­ings,&lt;/a&gt; &lt;a href=&quot;http://docs.racket-lang.org/plot/renderer3d.html?q=plot&quot;&gt;math plots,&lt;/a&gt; and other unex­pected guests. If your command line does all that, by all means keep using it.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;11.930785868782&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_dV4tA&quot;&gt;&lt;strong&gt;X-expres­sions.&lt;/strong&gt; [Racket] This choice is some­what biased by my work with Racket, which mostly involves docu­ment processing and type­set­ting. But related topics arise in most web program­ming. An X-expres­sion is a special native data struc­ture that Lisps use to repre­sent HTML and other XML-ish data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_I95I0&quot;&gt;Well, not “special” in a Lispy sense—keeping with the usual policy, an X-expres­sion is just another list—but special in the sense that other program­ming languages don’t have it. Usually your choice is to repre­sent HTML either as a string or as a full XML tree. A string is wrong because it doesn’t capture the struc­ture of the HTML, as defined by its tags and attrib­utes. An XML tree shows this struc­ture, but conceals the sequen­tial nature of the data elements, and is unwieldy to work with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11.709090909091&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_kEs6W&quot;&gt;An X-expres­sion ends up being an ideal hybrid between a string and a tree. More­over, because it’s just another list-based expres­sion in the language, you have a lot of options for processing it. Trans­lating an X-expres­sion to or from a text repre­sen­ta­tion using angle brackets is trivial and fast. (&lt;a href=&quot;http://pkg-build.racket-lang.org/doc/pollen/second-tutorial.html#%28part._.X-expressions%29&quot;&gt;Details.&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_OyaFm&quot;&gt;Given the close kinship between XML-ish data struc­tures and Lisp languages, I have no expla­na­tion why, during the Internet era, they’ve not been paired more often. They’re like peanut butter and jelly.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;11.174694189602&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11.551204819277&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_TtSCx&quot;&gt;&lt;strong&gt;Scribble.&lt;/strong&gt; [Racket] Pollen wouldn’t have been possible without &lt;a href=&quot;http://docs.racket-lang.org/scribble/index.html&quot;&gt;Scribble,&lt;/a&gt; so for me, this has been the stone-cold killer feature of Racket. But that won’t be true for everyone, so I’m moving it down the list. &lt;span class=&quot;tooltip&quot; onclick=&quot;this.classList.toggle('tooltip_visible')&quot;&gt; + &lt;span class=&quot;tooltip-inner&quot;&gt;Scribble was orig­i­nally created to serve as Racket’s &lt;a class=&quot; ext&quot; href=&quot;https://www.cs.utah.edu/plt/publications/icfp09-fbf.pdf&quot;&gt;docu­men­ta­tion language&lt;/a&gt; (a job it does well).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_L1DOZ&quot;&gt;Scribble is a dialect of Racket that inverts the ordi­nary rela­tion­ship of plain text and code: rather than embed­ding text strings within source, a Scribble docu­ment consists of code expres­sions embedded within plain text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_QZ2GK&quot;&gt;“So it’s like an HTML template language.” Yes, in the sense that a template language allows code to be embedded in text. But also no, because a template language is usually a pidgin version of a real program­ming language. Scribble, by contrast, lets you invoke any Racket code simply by adding a command char­acter to the front. In keeping with the theme already estab­lished, this approach is both simpler (because there’s almost nothing new to learn) and more powerful (because you can invoke anything in Racket).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_Jd4s5&quot;&gt;In its combi­na­tion of text and code, Scribble has more kinship with La­TeX. While it doesn’t have the type­set­ting facil­i­ties of La­TeX, the program­ming facil­i­ties are much better.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li readability=&quot;8.8008429926238&quot;&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_fFuGh&quot;&gt;&lt;strong&gt;Oppor­tu­ni­ties to partic­i­pate.&lt;/strong&gt; [Racket] In theory, open-source soft­ware projects create the oppor­tu­nity for groups of devel­opers to join together and make better things in collab­o­ra­tion than they could sepa­rately.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_vxCU0&quot;&gt;In prac­tice, I’ve found that they sort into a bimodal distri­bu­tion: over here, the under­doc­u­mented solo projects that sputter along fitfully (if at all); over there, the mature, popular projects that can be intim­i­dating for new contrib­u­tors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;15.232876712329&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_JM40j&quot;&gt;As an open-source project, &lt;a class=&quot; ext&quot; href=&quot;https://github.com/racket/racket&quot;&gt;Racket&lt;/a&gt; is posi­tioned at a happy medium. The core devel­op­ment team has been working together for years, and the commits remain &lt;a class=&quot; ext&quot; href=&quot;https://github.com/racket/racket/commits/master&quot;&gt;fast &amp;amp; furious.&lt;/a&gt; But they’re friendly scien­tists, not Shire-dwelling egotists, and remain recep­tive to improve­ments across the whole system. If you have a better idea, they’ll listen; if you code it up to their stan­dards and make a pull request, they’ll take it.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;sidebar-container&quot; readability=&quot;11.545189504373&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_nYNRb&quot;&gt;The point of this list has been to tell you about the posi­tives. That doesn’t mean there aren’t nega­tives. The small pool of Racket program­mers means that when you hit a pothole, it’s possible no one’s ever seen your problem (= the inverse of &lt;a class=&quot; ext&quot; href=&quot;http://en.wikipedia.org/wiki/Linus's_Law&quot;&gt;Linus’s Law&lt;/a&gt;). If I wanted to hire a Racket programmer, the options would be few.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_LamO2&quot;&gt;Still, why shouldn’t I be enthu­si­astic? What I’ve been able to accom­plish so far with Racket has been tremen­dously useful, educa­tional, and fun—the most fun I’ve had in 25+ years of program­ming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_53fQB&quot;&gt;If you think I sound like a fanboy or cult member, I can live with that. But those are people whose enthu­siasm is dispro­por­tionate to reality. Here, I’ve tried to stay out of the clouds (and the weeds) and explain the concrete, prac­tical features that have made Racket such a plea­sure in my own work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;12.656&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_m39TE&quot;&gt;As always, your mileage may vary. But if I persuade a few people to &lt;a href=&quot;http://racket-lang.org/download/&quot;&gt;down­load Racket&lt;/a&gt; and try it, I’ll be happy. In fact, if you try it and &lt;em&gt;don’t&lt;/em&gt; like it, I invite you to &lt;a href=&quot;https://beautifulracket.com/about-the-author.html&quot;&gt;contact&lt;/a&gt; me, because I’m always curious to hear dissenting opin­ions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_Nn64r&quot;&gt;I will end by taking on the big kahuna—&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;sidebar-container&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_CLSPf&quot;&gt;I won’t claim I’ve reached the top of the moun­tain. But I can tell you what the view looks like so far.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;13.989473684211&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_ZQ3Mm&quot;&gt;There’s a sense in which Lisp and its descen­dants are more than program­ming languages. They’re tools in the broader intel­lec­tual inquiry into the theory of compu­ta­tion. Lisp’s inventor, John Mc­Carthy, orig­i­nally &lt;a class=&quot; ext&quot; href=&quot;http://www-formal.stanford.edu/jmc/history/lisp.ps&quot;&gt;consid­ered Lisp&lt;/a&gt; a “way of describing computable func­tions much neater than the Turing machines,” adapting the nota­tion of &lt;a class=&quot;glossary&quot; href=&quot;https://beautifulracket.com/appendix/glossary.html#lambda-calculus&quot;&gt;&lt;span class=&quot;glossary-link-text&quot;&gt;lambda calculus&lt;/span&gt;&lt;/a&gt; to do so. Racket, like­wise, has grown out of scien­tific research and explo­ration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_7I0JH&quot;&gt;The theory of compu­ta­tion is just one of many great scien­tific discov­eries in the last 100 years. But I don’t get to use quantum mechanics or rela­tivity or DNA sequencing in my daily work. When I’m program­ming, however, I’m using compu­ta­tion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;17&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_9eH95&quot;&gt;Racket, as a Lisp dialect, has many prac­tical bene­fits. But it also opens a window onto a vast theo­ret­ical world that under­lies every­thing we can do with programs. I’m not a brainiac computer scien­tist. But some days, through that window, I can start to see a bit of what they see—some math, some science, a lot of truth, and more than a little beauty and mystery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;10.633333333333&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_V2Odm&quot;&gt;Paul Graham &lt;a class=&quot; ext&quot; href=&quot;http://www.paulgraham.com/avg.html&quot;&gt;calls Lisp&lt;/a&gt; a “secret weapon.” I would clarify: Lisp itself isn’t the secret weapon. Rather, &lt;strong&gt;you&lt;/strong&gt; are—because a Lisp language offers you the chance to discover your poten­tial as a programmer and a thinker, and thereby raise your expec­ta­tions for what you can accom­plish.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebar-container&quot; readability=&quot;8&quot;&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p id=&quot;a_ZJRtj&quot;&gt;If that’s not a step toward enlight­en­ment, I don’t know what is.&lt;/p&gt;
&lt;/div&gt;


</description>
<pubDate>Sun, 19 May 2019 11:14:30 +0000</pubDate>
<dc:creator>alokrai</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://beautifulracket.com/appendix/why-racket-why-lisp.html</dc:identifier>
</item>
<item>
<title>Virtual DOM is pure overhead (2018)</title>
<link>https://svelte.dev/blog/virtual-dom-is-pure-overhead</link>
<guid isPermaLink="true" >https://svelte.dev/blog/virtual-dom-is-pure-overhead</guid>
<description>&lt;p class=&quot;standfirst svelte-s4jvel&quot;&gt;Let's retire the 'virtual DOM is fast' myth once and for all&lt;/p&gt;
&lt;p class=&quot;byline svelte-s4jvel&quot;&gt;&lt;a href=&quot;https://twitter.com/Rich_Harris&quot; class=&quot;svelte-s4jvel&quot;&gt;Rich Harris&lt;/a&gt; &lt;time datetime=&quot;2018-12-27&quot;&gt;Thu Dec 27 2018&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;If you've used JavaScript frameworks in the last few years, you've probably heard the phrase 'the virtual DOM is fast', often said to mean that it's faster than the &lt;em&gt;real&lt;/em&gt; DOM. It's a surprisingly resilient meme — for example people have asked how Svelte can be fast when it doesn't use a virtual DOM.&lt;/p&gt;
&lt;p&gt;It's time to take a closer look.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;What_is_the_virtual_DOM&quot; class=&quot;offset-anchor&quot;/&gt;  What is the virtual DOM?&lt;/h2&gt;
&lt;p&gt;In many frameworks, you build an app by creating &lt;code&gt;render()&lt;/code&gt; functions, like this simple &lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot;&gt;React&lt;/a&gt; component:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;HelloMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
      Hello &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can do the same thing without JSX...&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;HelloMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; className&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'greeting'&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;'Hello '&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...but the result is the same — an object representing how the page should now look. That object is the virtual DOM. Every time your app's state updates (for example when the &lt;code&gt;name&lt;/code&gt; prop changes), you create a new one. The framework's job is to &lt;em&gt;reconcile&lt;/em&gt; the new one against the old one, to figure out what changes are necessary and apply them to the real DOM.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;How_did_the_meme_start&quot; class=&quot;offset-anchor&quot;/&gt;  How did the meme start?&lt;/h2&gt;
&lt;p&gt;Misunderstood claims about virtual DOM performance date back to the launch of React. In &lt;a href=&quot;https://www.youtube.com/watch?v=x7cQ3mrcKaY&quot; target=&quot;_blank&quot;&gt;Rethinking Best Practices&lt;/a&gt;, a seminal 2013 talk by former React core team member Pete Hunt, we learned the following:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;This is actually extremely fast, primarily because most DOM operations tend to be slow. There's been a lot of performance work on the DOM, but most DOM operations tend to drop frames.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img alt=&quot;Pete Hunt at JSConfEU 2013&quot; src=&quot;media/rethinking-best-practices.jpg&quot;/&gt; Screenshot from &lt;a href=&quot;https://www.youtube.com/watch?v=x7cQ3mrcKaY&quot;&gt;Rethinking Best Practices&lt;/a&gt; at JSConfEU 2013
&lt;p&gt;But hang on a minute! The virtual DOM operations are &lt;em&gt;in addition to&lt;/em&gt; the eventual operations on the real DOM. The only way it could be faster is if we were comparing it to a less efficient framework (there were plenty to go around back in 2013!), or arguing against a straw man — that the alternative is to do something no-one actually does:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token function&quot;&gt;onEveryStateChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;renderMyApp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Pete clarifies soon after...&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;React is not magic. Just like you can drop into assembler with C and beat the C compiler, you can drop into raw DOM operations and DOM API calls and beat React if you wanted to. However, using C or Java or JavaScript is an order of magnitude performance improvement because you don't have to worry...about the specifics of the platform. With React you can build applications without even thinking about performance and the default state is fast.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;...but that's not the part that stuck.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;So_is_the_virtual_DOM_slow&quot; class=&quot;offset-anchor&quot;/&gt;  So... is the virtual DOM &lt;em&gt;slow&lt;/em&gt;?&lt;/h2&gt;
&lt;p&gt;Not exactly. It's more like 'the virtual DOM is usually fast enough', but with certain caveats.&lt;/p&gt;
&lt;p&gt;The original promise of React was that you could re-render your entire app on every single state change without worrying about performance. In practice, I don't think that's turned out to be accurate. If it was, there'd be no need for optimisations like &lt;code&gt;shouldComponentUpdate&lt;/code&gt; (which is a way of telling React when it can safely skip a component).&lt;/p&gt;
&lt;p&gt;Even with &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, updating your entire app's virtual DOM in one go is a lot of work. A while back, the React team introduced something called React Fiber which allows the update to be broken into smaller chunks. This means (among other things) that updates don't block the main thread for long periods of time, though it doesn't reduce the total amount of work or the time an update takes.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;Where_does_the_overhead_come_from&quot; class=&quot;offset-anchor&quot;/&gt;  Where does the overhead come from?&lt;/h2&gt;
&lt;p&gt;Most obviously, &lt;a href=&quot;https://twitter.com/pcwalton/status/1015694528857047040&quot; target=&quot;_blank&quot;&gt;diffing isn't free&lt;/a&gt;. You can't apply changes to the real DOM without first comparing the new virtual DOM with the previous snapshot. To take the earlier &lt;code&gt;HelloMessage&lt;/code&gt; example, suppose the &lt;code&gt;name&lt;/code&gt; prop changed from 'world' to 'everybody'.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Both snapshots contain a single element. In both cases it's a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, which means we can keep the same DOM node&lt;/li&gt;
&lt;li&gt;We enumerate all the attributes on the old &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and the new one to see if any need to be changed, added or removed. In both cases we have a single attribute — a &lt;code&gt;className&lt;/code&gt; with a value of &lt;code&gt;&quot;greeting&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Descending into the element, we see that the text has changed, so we'll need to update the real DOM&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Of these three steps, only the third has value in this case, since — as is the case in the vast majority of updates — the basic structure of the app is unchanged. It would be much more efficient if we could skip straight to step 3:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;changed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  text&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(This is almost exactly the update code that Svelte generates. Unlike traditional UI frameworks, Svelte is a compiler that knows at &lt;em&gt;build time&lt;/em&gt; how things could change in your app, rather than waiting to do the work at &lt;em&gt;run time&lt;/em&gt;.)&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;It_s_not_just_the_diffing_though&quot; class=&quot;offset-anchor&quot;/&gt;  It's not just the diffing though&lt;/h2&gt;
&lt;p&gt;The diffing algorithms used by React and other virtual DOM frameworks are fast. Arguably, the greater overhead is in the components themselves. You wouldn't write code like this...&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;StrawManComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;expensivelyCalculateValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;the value is &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;...because you'd be carelessly recalculating &lt;code&gt;value&lt;/code&gt; on every update, regardless of whether &lt;code&gt;props.foo&lt;/code&gt; had changed. But it's extremely common to do unnecessary computation and allocation in ways that seem much more benign:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;
&lt;code&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MoreRealisticComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;selected&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setSelected&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;Selected &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;selected &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; selected&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'nothing'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setSelected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ul&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here, we're generating a new array of virtual &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements — each with their own inline event handler — on every state change, regardless of whether &lt;code&gt;props.items&lt;/code&gt; has changed. Unless you're unhealthily obsessed with performance, you're not going to optimise that. There's no point. It's plenty fast enough. But you know what would be even faster? &lt;em&gt;Not doing that.&lt;/em&gt;&lt;/p&gt;
&lt;aside readability=&quot;2.010989010989&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React Hooks&lt;/a&gt; doubles down on defaulting to doing unnecessary work, with &lt;a href=&quot;https://twitter.com/thekitze/status/1078582382201131008&quot;&gt;predictable results&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;The danger of defaulting to doing unnecessary work, even if that work is trivial, is that your app will eventually succumb to 'death by a thousand cuts' with no clear bottleneck to aim at once it's time to optimise.&lt;/p&gt;
&lt;p&gt;Svelte is explicitly designed to prevent you from ending up in that situation.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;Why_do_frameworks_use_the_virtual_DOM_then&quot; class=&quot;offset-anchor&quot;/&gt;  Why do frameworks use the virtual DOM then?&lt;/h2&gt;
&lt;p&gt;It's important to understand that virtual DOM &lt;em&gt;isn't a feature&lt;/em&gt;. It's a means to an end, the end being declarative, state-driven UI development. Virtual DOM is valuable because it allows you to build apps without thinking about state transitions, with performance that is &lt;em&gt;generally good enough&lt;/em&gt;. That means less buggy code, and more time spent on creative tasks instead of tedious ones.&lt;/p&gt;
&lt;p&gt;But it turns out that we can achieve a similar programming model without using virtual DOM — and that's where Svelte comes in.&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 23:15:52 +0000</pubDate>
<dc:creator>nailer</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://svelte.dev/blog/virtual-dom-is-pure-overhead</dc:identifier>
</item>
<item>
<title>AMD Immune to MDS Vulnerabilities</title>
<link>https://www.tomshardware.com/news/amd-mds-vulnerability-immune-intel,39367.html</link>
<guid isPermaLink="true" >https://www.tomshardware.com/news/amd-mds-vulnerability-immune-intel,39367.html</guid>
<description>&lt;p&gt;&lt;span class=&quot;imgContent imgRight&quot;&gt;&lt;span class=&quot;iZoom&quot;&gt;&lt;img class=&quot;lazy&quot; data-src=&quot;https://img.purch.com/shutterstock-206908987-jpg/w/195/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9SLzgvODM4MTk2L29yaWdpbmFsL3NodXR0ZXJzdG9ja18yMDY5MDg5ODcuanBn&quot; big-src=&quot;https://img.purch.com/shutterstock-206908987-jpg/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9SLzgvODM4MTk2L29yaWdpbmFsL3NodXR0ZXJzdG9ja18yMDY5MDg5ODcuanBn&quot; alt=&quot;Credit: Shutterstock&quot; title=&quot;Credit: Shutterstock&quot;/&gt;&lt;span class=&quot;imgCaption&quot;&gt;Credit: Shutterstock&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;Perhaps unsurprisingly at this point, new security vulnerabilities have been found in Intel's CPUs dating all the way back to 2008. Known as &lt;a target=&quot;_blank&quot; href=&quot;https://www.tomshardware.com/news/intel-disable-hyper-threading-spectre-attack,39333.html&quot;&gt;Zombieload, RIDL, Fallout, and MDS&lt;/a&gt; (Intel's official naming), these holes in Intel's architecture are the latest in a string of vulnerabilities that have been revealed one after the other since the early 2018 debut of Meltdown. Meanwhile, AMD maintains that Zombieload, just like Meltdown, Foreshadow, and Spoiler before, only affects Intel processors and not any produced by AMD.&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.amd.com/en/corporate/product-security&quot;&gt;AMD listed its processors as immune&lt;/a&gt; on its website and made a statement on the r/AMD subreddit:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&quot;At AMD we develop our products and services with security in mind. Based on our analysis and discussions with the researchers, we believe our products are not susceptible to ‘Fallout’, ‘RIDL’ or ‘ZombieLoad Attack’ because of the hardware protection checks in our architecture. We have not been able to demonstrate these exploits on AMD products and are unaware of others having done so.&quot;&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not having these vulnerabilities is obviously important for AMD, especially for its growing data center products, where security is vital to business. But it's not just security holes that are plaguing Intel, the patches for them also harm Intel as well. Operating system- and software-level solutions to Intel's many vulnerabilities (which even include disabling Hyper-Threading, something Intel charges extra for) reduce the performance of its processors. The &lt;a target=&quot;_blank&quot; href=&quot;https://phoronix.com/scan.php?page=news_item&amp;amp;px=MDS-Zombieload-Initial-Impact&quot;&gt;Linux-focused Phoronix website&lt;/a&gt; tested the performance difference on Intel's Core i9 7980XE (with Hyper-Threading enabled) and found that the performance reduction was often around 10%, but sometimes as high as 50% (in one case). AMD, not requiring any patches, obviously loses no performance.&lt;/p&gt;&lt;p&gt;Consumers with Intel processors may accept these vulnerabilities so as to avoid performance penalties, but those who opted for Ryzen, Threadripper, and Epyc, are surely relieved that they can escape with their performance intact and security unaffected. &lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 22:29:03 +0000</pubDate>
<dc:creator>Boulth</dc:creator>
<og:url>https://www.tomshardware.com/news/amd-mds-vulnerability-immune-intel,39367.html</og:url>
<og:title>AMD Immune to Crippling MDS Vulnerabilities</og:title>
<og:description>Yet another Intel vulnerability is discovered, and yet again AMD is immune.</og:description>
<og:image>https://img.purch.com/o/aHR0cDovL21lZGlhLmJlc3RvZm1pY3JvLmNvbS9SLzgvODM4MTk2L29yaWdpbmFsL3NodXR0ZXJzdG9ja18yMDY5MDg5ODcuanBn</og:image>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.tomshardware.com/news/amd-mds-vulnerability-immune-intel,39367.html</dc:identifier>
</item>
<item>
<title>Faux Rogan</title>
<link>http://fakejoerogan.com/</link>
<guid isPermaLink="true" >http://fakejoerogan.com/</guid>
<description>&lt;head&gt;&lt;title&gt;Faux Rogan&lt;/title&gt;&lt;link href=&quot;https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lato:400,700,900&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimum-scale=1&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;23.417607223476&quot;&gt;
&lt;header&gt;
&lt;/header&gt;&lt;div class=&quot;intro&quot; readability=&quot;6.4087837837838&quot;&gt;
&lt;h3&gt;Our deep learning engineers at &lt;a href=&quot;http://www.dessa.com&quot; target=&quot;_blank&quot;&gt;Dessa&lt;/a&gt; built a model to replicate Joe Rogan's voice to showcase current AI techniques. To understand how we developed the technology and to discuss the ethical implications of this work, read our &lt;a href=&quot;https://medium.com/@dessa_/real-talk-speech-synthesis-5dd0897eef7f&quot; target=&quot;_blank&quot;&gt;announcement article&lt;/a&gt;.&lt;/h3&gt;&lt;p&gt;Can you tell which are real or fake (Faux Rogan)?&lt;/p&gt;&lt;/div&gt;
&lt;div class=&quot;intro&quot;&gt;
&lt;h3&gt;It's important that we listen to what others have to say about this work. For questions and comments, please email: &lt;a href=&quot;mailto:real.talk@dessa.com&quot; target=&quot;_blank&quot;&gt;real.talk@dessa.com&lt;/a&gt;&lt;/h3&gt;&lt;/div&gt;
&lt;/body&gt;</description>
<pubDate>Sat, 18 May 2019 22:02:17 +0000</pubDate>
<dc:creator>mgdo</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://fakejoerogan.com/</dc:identifier>
</item>
<item>
<title>“Python&amp;#039;s batteries are leaking”</title>
<link>http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</link>
<guid isPermaLink="true" >http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</guid>
<description>&lt;a href=&quot;http://1.bp.blogspot.com/-Z6QcSZJ-r74/XNzG_pDAiRI/AAAAAAAACN4/89VSfdr8X4YYOvt_xmo5AHtCt563sfDrACK4BGAYYCw/s1600/amber-brown-2.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-Z6QcSZJ-r74/XNzG_pDAiRI/AAAAAAAACN4/89VSfdr8X4YYOvt_xmo5AHtCt563sfDrACK4BGAYYCw/s640/amber-brown-2.jpg&quot;/&gt;&lt;/a&gt;&lt;p&gt;Amber Brown of the Twisted project shared her criticisms of the Python standard library. This proved to be the day’s most controversial talk; Guido van Rossum stormed from the room during Q &amp;amp; A.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://pyfound.blogspot.com/2019/05/the-2019-python-language-summit.html&quot;&gt;Read more 2019 Python Language Summit coverage&lt;/a&gt;.&lt;/p&gt;
Python claims to ship with batteries included, but according to Brown, without external packages it is only “marginally useful.” For example, &lt;code&gt;asyncio&lt;/code&gt; requires external libraries to connect to a database or to speak HTTP. Brown asserted that there were many such dependencies from the standard library to PyPI: &lt;code&gt;typing&lt;/code&gt; works best with &lt;code&gt;mypy&lt;/code&gt;, the &lt;code&gt;ssl&lt;/code&gt; module requires a monkeypatch to connect to non-ASCII domain names, &lt;code&gt;datetime&lt;/code&gt; needs &lt;code&gt;pytz&lt;/code&gt;, and &lt;code&gt;six&lt;/code&gt; is non-optional for writing code for Python 2 and 3.&lt;p&gt;Other standard library modules are simply inferior to alternatives on PyPI. The &lt;code&gt;http.client&lt;/code&gt; documentation advises readers to use Requests, and the &lt;code&gt;datetime&lt;/code&gt; module is confusing compared to its competitors such as &lt;code&gt;arrow&lt;/code&gt;, &lt;code&gt;dateutil&lt;/code&gt;, and &lt;code&gt;moment&lt;/code&gt;.&lt;/p&gt;&lt;br/&gt;“Python's batteries are leaking,” said Brown. She thinks that some bugs in the standard library will never be fixed. And even when bugs are fixed, PyPI libraries like Twisted cannot assume they run on the latest Python, so they must preserve their bug workarounds forever.&lt;p&gt;There are many modules that few applications use, but there is no method to install a subset of the standard library. Brown called out the XML parser and &lt;code&gt;tkinter&lt;/code&gt; in particular for making the standard library larger and harder to build, burdening all programmers for the sake of a few. As Russell Keith-Magee had described earlier in the day, the size of the standard library makes it difficult for PyBee to run Python on constrained devices. Brown also noted that some standard library modules were optimized in C for Python 3, but had to be reimplemented in pure Python for PyPy to support them.&lt;/p&gt;&lt;p&gt;Brown identified new standard library features that were “too little, too late,” leaving users to depend on backports to use those features in Python 2. For example, &lt;code&gt;socket&lt;/code&gt;.&lt;code&gt;sendmsg&lt;/code&gt; was added only recently, meaning Twisted must ship its own C extension to use &lt;code&gt;sendmsg&lt;/code&gt; in Python 2. Although Python 2 is nearly at its end of life, this only holds for the core developers, according to Brown, and for users, Red Hat and other distributors will keep Python 2 alive “until the goddam end of time.” Brown also mentioned that some &lt;code&gt;itertools&lt;/code&gt; code is shown as examples in the documentation instead of shipped as functions in the &lt;code&gt;itertools&lt;/code&gt; module.&lt;/p&gt;&lt;p&gt;Guido van Rossum, sitting at the back of the room, interrupted at this moment, “Can you keep to one topic? I'm sorry but this is just one long winding rant. What is your point?” Brown responded that her point was that there are a multitude of problems in the standard library.&lt;/p&gt;
&lt;br/&gt;Brown’s most controversial opinion, in her own estimation, is that adding modules to the standard library stifles innovation, by discouraging programmers from using or contributing to competing PyPI packages. Ever since &lt;code&gt;asyncio&lt;/code&gt; was announced she has had to explain why Twisted is still worthwhile, and now that data classes are in the standard library Hynek Schlawack must defend his &lt;code&gt;attrs&lt;/code&gt; package. Even as standard library modules crowd out other projects, they lag behind them. According to Brown, “the standard library is where code sometimes goes to die,” because it is difficult and slow to contribute code there. She acknowledged recent improvements, from Mariatta Wijaya’s efforts in particular, but Python is still harder to contribute to than PyPI packages.&lt;p&gt;“So I know a lot of this is essentially a rant,” she concluded, “but it's fully intended to be.”&lt;/p&gt;
&lt;br/&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-tLT2DbjKtxc/XNzHr10yy-I/AAAAAAAACOE/hyiyitxGS84hupReozH8XNTeO_O9kYspwCLcBGAs/s1600/amber-brown-1.jpg&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;1199&quot; data-original-width=&quot;800&quot; height=&quot;320&quot; src=&quot;https://2.bp.blogspot.com/-tLT2DbjKtxc/XNzHr10yy-I/AAAAAAAACOE/hyiyitxGS84hupReozH8XNTeO_O9kYspwCLcBGAs/s320/amber-brown-1.jpg&quot; width=&quot;213&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
Nick Coghlan interpreted Brown’s proposal as generalizing the “ensurepip” model to ensure some packages are always available but can be upgraded separately from the standard library, and he thought this was reasonable.&lt;p&gt;Van Rossum was less convinced. He asked again, “Amber, what is your point?” Brown said her point was to move &lt;code&gt;asyncio&lt;/code&gt; to PyPI, along with most new feature development. “We should embrace PyPI,” she exhorted. Some ecosystems such as Javascript rely too much on packages, she conceded, but there are others like Rust that have small standard libraries and high-quality package repositories. She thinks that Python should move farther in that direction.&lt;/p&gt;&lt;p&gt;Van Rossum argued instead that if the Twisted team wants the ecosystem to evolve, they should stop supporting older Python versions and force users to upgrade. Brown acknowledged this point, but said half of Twisted users are still on Python 2 and it is difficult to abandon them. The debate at this point became personal for Van Rossum, and he left angrily.&lt;/p&gt;&lt;p&gt;Nathaniel Smith commented, “I'm noticing some tension here.” He guessed that Brown and the core team were talking past each other because the core team had different concerns from other Python programmers. Brown went further adding that because few Python core developers are also major library maintainers, library authors’ complaints are devalued or ignored.&lt;/p&gt;&lt;p&gt;The remaining core developers continued the technical discussion. Barry Warsaw said that the core team had discussed deprecating modules in the standard library, or creating slim distributions with a subset of it, but that it required a careful design. Others objected that slimming down the standard library risked breaking downstream code, or making work for programmers in enterprises that trust the standard library but not PyPI.&lt;/p&gt;&lt;p&gt;Pablo Galindo Salgado was concerned that moving modules from the standard library to PyPI would create an explosion of configurations to test, but in Brown’s opinion, “We are already living that life.” Some Linux and Python distributions have selectively backported features and fixes, leading to a much more complex set of configurations than the core team realizes.
&lt;/p&gt;
</description>
<pubDate>Sat, 18 May 2019 17:40:52 +0000</pubDate>
<dc:creator>narimiran</dc:creator>
<og:url>http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</og:url>
<og:title>Amber Brown: Batteries Included, But They're Leaking</og:title>
<og:description>Amber Brown of the Twisted project shared her criticisms of the Python standard library. This proved to be the day’s most controversial ta...</og:description>
<og:image>https://1.bp.blogspot.com/-Z6QcSZJ-r74/XNzG_pDAiRI/AAAAAAAACN4/89VSfdr8X4YYOvt_xmo5AHtCt563sfDrACK4BGAYYCw/w1200-h630-p-k-no-nu/amber-brown-2.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://pyfound.blogspot.com/2019/05/amber-brown-batteries-included-but.html</dc:identifier>
</item>
<item>
<title>I Got a Knuth Check for 0x$3.00</title>
<link>https://nickdrozd.github.io/2019/05/17/knuth-check.html</link>
<guid isPermaLink="true" >https://nickdrozd.github.io/2019/05/17/knuth-check.html</guid>
<description>&lt;p&gt;&lt;strong&gt;Donald Knuth&lt;/strong&gt; is a computer scientist who is so committed to the correctness of his books that he offers &lt;strong&gt;one US hexadecimal dollar&lt;/strong&gt; ($2.56, 0x$1.00) for any “bug” found in his books, where a bug is anything that is “technically, historically, typographically, or politically incorrect”. I wanted to get a &lt;strong&gt;Knuth check&lt;/strong&gt; for myself, so I set out to find some errors in his magnum opus, &lt;strong&gt;&lt;em&gt;The Art of Computer Programming&lt;/em&gt;&lt;/strong&gt; (TAOCP). I found three and sent them in, and true to his word, he sent me back a check for &lt;strong&gt;0x$3.00&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://nickdrozd.github.io/assets/2019-05-17-knuth-check/knuth-check.jpeg&quot; alt=&quot;img&quot;/&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it’s not a real check. Knuth used to send out real checks, but stopped in 2008 due to &lt;a href=&quot;https://www-cs-faculty.stanford.edu/~knuth/news08.html&quot;&gt;&lt;strong&gt;rampant fraud&lt;/strong&gt;&lt;/a&gt;. Now he sends out “personal certificates of deposit” to the &lt;a href=&quot;https://www-cs-faculty.stanford.edu/~knuth/boss.html&quot;&gt;&lt;strong&gt;Bank of San Serriffe&lt;/strong&gt;&lt;/a&gt; (BoSS). He says he’ll still send real money if it’s desired, but that seems like a lot of hassle.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;two typographical errors and one historical error&lt;/strong&gt;. I’ll describe them in order of triviality from greatest to least.&lt;/p&gt;

&lt;p&gt;The first typo is on page 392 of Volume 3, &lt;em&gt;Sorting and Searching&lt;/em&gt;, eighth line from the bottom: “After an unsuccessful search it is sometime desirable to enter a new record, containing &lt;em&gt;K&lt;/em&gt;, into the table; a method that does this is called a &lt;em&gt;search-and-insertion&lt;/em&gt; algorithm.” The error is that &lt;strong&gt;&lt;em&gt;sometime&lt;/em&gt;&lt;/strong&gt; should be &lt;strong&gt;&lt;em&gt;sometimes&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Of course, it’s no surprise that such an error should get made. This post alone is sure to contain several typos (no rewards for finding them though). What’s surprising is that it went undiscovered for so long. Page 392 isn’t buried deep in a math-heavy section, it’s the &lt;strong&gt;very first page&lt;/strong&gt; of Chapter 6, “Searching”! You’d think that would be one of the most-read sections of the whole thing, and therefore also one of the most typo-free, but I guess not.&lt;/p&gt;
&lt;p&gt;By the way, if you’ve ever thought about reading TAOCP, give it a try. A lot of people will tell you that it’s a &lt;strong&gt;reference work&lt;/strong&gt;, and it’s not meant to be read straight through, but that isn’t true. The author has a clear point of view and a narrative and an idiosyncratic style, and the only thing that inhibits readability is the difficulty of the math. There’s an easy solution to that though: &lt;em&gt;read until you get to math you don’t understand, then skip it and find the next section you can understand.&lt;/em&gt; Reading this way, I skip at least 80% of the book, but the remaining 20% is great!&lt;/p&gt;
&lt;p&gt;People also say that TAOCP is &lt;strong&gt;irrelevant&lt;/strong&gt; or outdated or otherwise inapplicable to “real programming”. This also wrong. For instance, the first section after the chapter intro deals with the basic problem of searching for an item in an unsorted array. The simplest algorithm should be familiar to all programmers. Start your pointer at the head of the array, then do the following in a loop:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Check if the current item is the desired one. If it is, return success; otherwise&lt;/li&gt;
&lt;li&gt;Check if the pointer is past the array bound. If it is, return failure; otherwise&lt;/li&gt;
&lt;li&gt;Increment the pointer and continue.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Now consider: how many bound checks does this algorithm require on average? In the worst case, when the array doesn’t contain the item, one bound check will be required for each item in the list, and on average it will be something like &lt;em&gt;N/2&lt;/em&gt;. A more clever search algorithm can do it with just one bound check in all cases. Tack the desired item on to the end of the array, then start your pointer at the head of the array and do the following in a loop:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Check if the current item is the desired one. If it is, return success if the pointer is within the array bound and return failure if it isn’t; otherwise&lt;/li&gt;
&lt;li&gt;Increment the pointer and continue.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;With this algorithm, things are arranged such that the item is guaranteed to be found one way or another, and the bound check only needs to be executed once when the item is found. This is a deep idea, but it’s also simple enough even for a beginning programmer to understand. I guess I can’t speak about the relevance for the work of others, but I was immediately able to apply this wisdom in both personal and professional code. TAOCP is full of gems like this.&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Searching, searching&lt;br/&gt;For so long&lt;br/&gt;Searching, searching&lt;br/&gt;I just wanted to dance&lt;/p&gt;
&lt;p&gt;– Luther Vandross, Searching (1980)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second typo is in Volume 4A, &lt;em&gt;Combinatorial Algorithms, Part 1&lt;/em&gt;. There is a problem on page 60 that deals with scheduling comedians to perform at various casinos. Several real-life comedians are used as an example, including Lily Tomlin, Weird Al Yankovic, and &lt;strong&gt;Robin Williams&lt;/strong&gt;, who was not dead when the volume was published. Knuth always includes &lt;strong&gt;full names&lt;/strong&gt; in the indexes to his books,&lt;sup&gt;&lt;a id=&quot;fnr.2&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; so Williams appears on page 882 as “Williams, Robin &lt;strong&gt;McLaurim&lt;/strong&gt;”. But his middle name ends with an &lt;strong&gt;&lt;em&gt;n&lt;/em&gt;&lt;/strong&gt;, not an &lt;strong&gt;&lt;em&gt;m&lt;/em&gt;&lt;/strong&gt;, so it should be &lt;strong&gt;&lt;em&gt;McLaurin&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;McLaurin&lt;/em&gt; was his mother’s maiden name. She was the great-granddaughter of &lt;strong&gt;Anselm Joseph McLaurin&lt;/strong&gt;, the 34th governor of &lt;strong&gt;Mississippi&lt;/strong&gt;. His administration does not seem to have been noteworthy. According to &lt;a href=&quot;https://books.google.com/books?id=OvNjBAAAQBAJ&amp;amp;pg=PA177&amp;amp;lpg=PA177&amp;amp;dq=anselm+mclaurin&amp;amp;source=bl&amp;amp;ots=kPu_kLXUrz&amp;amp;sig=ACfU3U2UKRAmJyH_dVfcb2tfSmzYemEgTw&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ved=2ahUKEwjTl9vvroDiAhVHI6wKHfCTC6I4MhDoATADegQICRAB#v=onepage&amp;amp;q&amp;amp;f=false&quot;&gt;&lt;em&gt;Mississippi: A History&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most important event of McLaurin’s administration was the United States’ declaration of war against Spain in the spring of 1898…Unfortunately the war may have given some state officials the opportunity to practice graft. McLaurin was accused of various questionable practices, including nepotism and excessive use of his pardoning powers. And in this era of mounting support for the temperance movement, the governor’s critics charged him with drunkenness, an allegation he publicly admitted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider the &lt;strong&gt;traditional multiplication algorithm&lt;/strong&gt; taught to schoolchildren. How many single-digit multiplication operations does it require? Say you’re multiplying &lt;em&gt;m&lt;/em&gt;-digit &lt;em&gt;x&lt;/em&gt; by &lt;em&gt;n&lt;/em&gt;-digit &lt;em&gt;y&lt;/em&gt;. First you multiply the first digit of &lt;em&gt;x&lt;/em&gt; by each digit of &lt;em&gt;y&lt;/em&gt; in turn. Then you multiply the second digit of &lt;em&gt;x&lt;/em&gt; by each digit of &lt;em&gt;y&lt;/em&gt; in turn, and so on until you’ve gone through each digit of &lt;em&gt;x&lt;/em&gt;. Thus traditional multiplication requires &lt;em&gt;mn&lt;/em&gt; primitive multiplications. In particular, multiplying two numbers each with &lt;em&gt;n&lt;/em&gt; digits requires &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt; single-digit multiplications.&lt;/p&gt;
&lt;p&gt;That’s bad, but it’s possible to do better with a method devised by the Soviet mathematician &lt;strong&gt;Anatoly Alexeevich Karatsuba&lt;/strong&gt;. Say &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; are two-digit decimal numbers; that is, there are numbers &lt;em&gt;a, b, c, d&lt;/em&gt; such that &lt;em&gt;x = (ab)&lt;sub&gt;10&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;y = (cd)&lt;sub&gt;10&lt;/sub&gt;&lt;/em&gt;.&lt;sup&gt;&lt;a id=&quot;fnr.3&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Then &lt;em&gt;x = 10a + b&lt;/em&gt;, &lt;em&gt;y = 10c + d&lt;/em&gt;, and &lt;em&gt;xy = (10a + b)(10c + d)&lt;/em&gt;. FOILing that out gives &lt;em&gt;xy = 100ac + 10ad + 10bc + bd&lt;/em&gt;. At this point we still have the expected &lt;em&gt;n&lt;sup&gt;2&lt;/sup&gt; = 4&lt;/em&gt; single-digit multiplications: &lt;em&gt;ac, ad, bc, bd&lt;/em&gt;. Now add and subtract &lt;em&gt;10ac + 10bc&lt;/em&gt;. Some clever rearranging, which I’ll leave as an exercise for the reader, yields &lt;em&gt;xy = 110ac + 11bd + 10(a - b)(d - c)&lt;/em&gt; – just three single-digit multiplications! (There are some constant coefficients, but those can be calculated by doing only addition and bit-shifting.)&lt;/p&gt;
&lt;p&gt;Don’t ask me to prove it, but the &lt;strong&gt;Karatsuba algorithm&lt;/strong&gt; (recursively generalized from the example above) improves the traditional method’s &lt;em&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/em&gt; multiplications to &lt;em&gt;O(n&lt;sup&gt;(lg 3)&lt;/sup&gt;)&lt;/em&gt;. Note that this is an actual algorithmic improvement, not a “mental math” trick. Indeed, the algorithm is not suitable for use inside the human brain, as it requires a large overhead to deal with recursive bookkeeping. Besides, the speedup doesn’t start to kick in until the numbers get fairly large anyway.&lt;sup&gt;&lt;a id=&quot;fnr.4&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This algorithm is described on page 295 of Volume 2, &lt;em&gt;Seminumerical Algorithms&lt;/em&gt;. There, Knuth says, “Curiously, this idea does not seem to have been discovered before &lt;strong&gt;1962&lt;/strong&gt;,” which is when the paper describing the Karatsuba algorithm was published. But! In 1995 Karatsuba published a paper titled “The Complexity of Computations” in which he says a few things: 1) Around 1956, Kolmogorov conjectured that multiplication could not be done with less than &lt;em&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/em&gt; multiplication steps. 2) In &lt;strong&gt;1960&lt;/strong&gt;, Karatsuba attended a seminar wherein Kolmogorov pitched his n&lt;sup&gt;2&lt;/sup&gt; conjecture. 3) “Exactly within a week” Karatsuba devised his divide-and-conquer algorithm. 4) In 1962, Kolmogorov wrote and published a paper &lt;em&gt;in Karatsuba’s name&lt;/em&gt; describing the algorithm. “I learned about the article only when I was given its reprints.”&lt;/p&gt;
&lt;p&gt;Thus the error is that &lt;em&gt;1962&lt;/em&gt; should be &lt;em&gt;1960&lt;/em&gt;. That’s it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Finding these errors didn’t take a lot of skill.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;The first typo took no skill at all to find. The error was as mundane as could be, and it was in a relatively visible place (the beginning of a chapter). Any idiot could have found it; I just happened to be the idiot who did.&lt;/li&gt;
&lt;li&gt;Finding the second typo required luck and diligence, but no skill. The index entry for “Williams” appears on the penultimate page of the volume, a highly visible piece of book real estate. I happened to be thumbing through the index&lt;sup&gt;&lt;a id=&quot;fnr.5&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;, and it happened to catch my eye. Because I habitually look things up on &lt;strong&gt;Wikipedia&lt;/strong&gt;, I looked up Robin Williams, and I happened to notice the discrepancy.&lt;/li&gt;
&lt;li&gt;I wish I could say I did some serious digging to find the historical error, but really all I did was look at &lt;a href=&quot;https://en.wikipedia.org/wiki/Karatsuba_algorithm&quot;&gt;the Wikipedia page on the Karatsuba algorithm&lt;/a&gt;, the first two lines of which read: “The Karatsuba algorithm is a fast multiplication algorithm. It was discovered by Anatoly Karatsuba in 1960 and published in 1962.” After that it was just a matter of connecting the dots.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In the future, I’d like to find a more substantial bug, especially one in Knuth’s code. I’d also like to find a bug in Volume 1, &lt;em&gt;Fundamental Algorithms&lt;/em&gt;. I might have already, but my local public library for whatever reason only has Volumes 2, 3, and 4A.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Financial facts:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;In total, my contributions to TAOCP consist of &lt;strong&gt;just three characters&lt;/strong&gt;: one added &lt;em&gt;s&lt;/em&gt;, an &lt;em&gt;n&lt;/em&gt; to replace an &lt;em&gt;m&lt;/em&gt;, and a &lt;em&gt;0&lt;/em&gt; to replace a &lt;em&gt;2&lt;/em&gt;. At $2.56 a pop, those are some &lt;strong&gt;lucrative&lt;/strong&gt; characters; if you were paid $2.56/character to write 1000 words with an average of 4 characters/word, you’d clear ten grand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My three hex dollars put me in a 29-way tie for being the &lt;strong&gt;69th richest person in all of San Serriffe&lt;/strong&gt;.&lt;sup&gt;&lt;a id=&quot;fnr.6&quot; class=&quot;footref&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fn.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://kevinlawler.com/knuth&quot;&gt;How to Get a Knuth Check&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;General advice for finding errors in Knuth books. It mostly applies to technical errors, which mine are not. It does have one suggestion that I took seriously:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is better to wait until you have a collection of errors to send in. Bundling several legitimate but low-grade errors together can increase the chance that one is actually treated as an error or a suggestion. Sending several errors in piecemeal could cause each of them to be dismissed out of hand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I didn’t want to just send in some &lt;strong&gt;chickenshit typos&lt;/strong&gt; by themselves, so as per the suggestion I waited until I had the historical error, which seemed serious enough, and then sent everything in at once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://ashutoshmehra.net/blog/about/knuth-reward-checks-and-certificates/&quot;&gt;The Checks of Ashutosh Mehra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ashutosh Mehra is the third-richest person in San Serriffe, with a whopping 0x$207.f0 in BoSS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.truetex.com/knuthchk.htm&quot;&gt;A check for some nonfunctional bugs in the actual TeX code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Miscellaneous: &lt;a href=&quot;http://ed-thelen.org/KnuthCheck.html&quot;&gt;#1&lt;/a&gt; &lt;a href=&quot;http://www.club.cc.cmu.edu/~ajo/knuth-check.html&quot;&gt;#2&lt;/a&gt; &lt;a href=&quot;http://joaoff.com/2008/02/25/a-reward-check-from-donald-knuth/&quot;&gt;#3&lt;/a&gt; &lt;a href=&quot;https://www.quora.com/What-is-it-like-to-receive-a-Knuth-reward-check&quot;&gt;#4&lt;/a&gt; &lt;a href=&quot;http://www.joshwakefield.com/knuth/&quot;&gt;#5&lt;/a&gt; &lt;a href=&quot;http://www.righto.com/2011/05/my-knuth-reward-check.html&quot;&gt;#6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; To be clear, there’s also a lot of weird stuff, like &lt;a href=&quot;https://nickdrozd.github.io/2018/11/02/bubble.html&quot;&gt;the bubble sort machine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.2&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; From &lt;a href=&quot;https://www-cs-faculty.stanford.edu/~knuth/help.html&quot;&gt;Help Wanted&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I try to make the indexes to my books as complete as possible, or at least to give the illusion of completeness. Therefore I have adopted a policy of listing full names of everyone who is cited. For example, the index to Volume 1 of The Art of Computer Programming says ``Hoare, Charles Antony Richard’’ and ``Jordan, Marie Ennemond Camille’’ instead of just ``Hoare, C. A. R.’’ and ``Jordan, Camille.’’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.3&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Generalizing this algorithm to longer digits requires some bookkeeping, but isn’t too complicated. Still, I would certainly screw up the details, so I’m playing it safe by sticking with an easy example.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.4&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Fortunately, the Karatsuba algorithm has been superseded by even faster methods. In March 2019, an algorithm was published requiring &lt;a href=&quot;https://web.maths.unsw.edu.au/~davidharvey/papers/nlogn/&quot;&gt;&lt;em&gt;n log n&lt;/em&gt;&lt;/a&gt; multiplications. The speedup from this method only applies to numbers that are unimaginably large.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.5&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; This is less pathetic than it sounds, as Knuth’s indexes have &lt;strong&gt;Easter eggs&lt;/strong&gt; hidden in them. For instance, the index for &lt;strong&gt;&lt;em&gt;The TeXBook&lt;/em&gt;&lt;/strong&gt; has entries for &lt;em&gt;Arabic&lt;/em&gt; and &lt;em&gt;Hebrew&lt;/em&gt;, and they both point to page 66. But that page doesn’t mention either language; instead, it mentions “languages that read from right to left”.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;&lt;a id=&quot;fn.6&quot; href=&quot;https://nickdrozd.github.io/2019/05/17/knuth-check.html#fnr.6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; As of 1 May 2019.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;curl https://www-cs-faculty.stanford.edu/~knuth/boss.html | awk &lt;span class=&quot;s1&quot;&gt;'/0x\$[0-9a-f]+\.[0-9a-f]+/ { gsub(&quot;&amp;lt;[^&amp;gt;]*&amp;gt;&quot;, &quot; &quot;); print $NF }'&lt;/span&gt; | uniq &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;</description>
<pubDate>Sat, 18 May 2019 17:16:38 +0000</pubDate>
<dc:creator>Supermighty</dc:creator>
<og:title>I Got a Knuth Check for 0x$3.00</og:title>
<og:description>Donald Knuth is a computer scientist who is so committed to the correctness of his books that he offers one US hexadecimal dollar ($2.56, 0x$1.00) for any “bug” found in his books, where a bug is anything that is “technically, historically, typographically, or politically incorrect”. I wanted to get a Knuth check for myself, so I set out to find some errors in his magnum opus, The Art of Computer Programming (TAOCP). I found three and sent them in, and true to his word, he sent me back a check for 0x$3.00.</og:description>
<og:url>/2019/05/17/knuth-check.html</og:url>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://nickdrozd.github.io/2019/05/17/knuth-check.html</dc:identifier>
</item>
</channel>
</rss>