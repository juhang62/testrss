<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Ask HN: Which is the most successful one-person business you heard of in 2019?</title>
<link>https://news.ycombinator.com/item?id=21908577</link>
<guid isPermaLink="true" >https://news.ycombinator.com/item?id=21908577</guid>
<description>&lt;tr class=&quot;athing comtr&quot; id=&quot;21909131&quot; readability=&quot;11.91364902507&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.9568245125348&quot;&gt;&lt;tr readability=&quot;11.91364902507&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;12.371866295265&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;24.228949858089&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Ben Tossell of Makerpad. He made about $200k in the past year from a site that teaches others how to build interactive sites and apps without writing code.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Lynne Tye of Key Values. She made about $400k in 2019 from a site that connects software engineers with companies that that share their intangible values, e.g. diverse team, good for parents, fast or slow-paced, etc.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Robert James Gabriel of Helperbird. He struggled a lot with dyslexia growing up, and even had a teacher tell him he should give up and drop out of school. Luckily another teacher encouraged him to learn to code, and he's been quite prolific since. Helperbird is a browser extension that helps others with learning disabilities browse the web easier. Robert recently brought on a co-founder, but he'd grown the app to a &quot;comfortable five figures a month&quot; in revenue.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Plenty more on &lt;a href=&quot;https://www.IndieHackers.com&quot; rel=&quot;nofollow&quot;&gt;https://www.IndieHackers.com&lt;/a&gt; sharing their stories via interviews and on the podcast, and also posting about hitting revenue goals and other milestones here: &lt;a href=&quot;https://www.indiehackers.com/milestones&quot; rel=&quot;nofollow&quot;&gt;https://www.indiehackers.com/milestones&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909675&quot; readability=&quot;4.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.25&quot;&gt;&lt;tr readability=&quot;4.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;+1 on Robert of Helperbird. He's done a great job scaling that company up, although as you note he does have a cofounder now. Also a really helpful guy — I reached out to him and he was down for a chat about accessibility and assistive technology.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909769&quot; readability=&quot;3.5&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.75&quot;&gt;&lt;tr readability=&quot;3.5&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm still blown away that Key Values (as cool an idea as it is) manages to pull that kind of revenue. One thing I'd be curious to see is if the site actually can maintain revenue past year one?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909785&quot; readability=&quot;1.728813559322&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909798&quot; readability=&quot;6.6091954022988&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3045977011494&quot;&gt;&lt;tr readability=&quot;6.6091954022988&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.6091954022988&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.887543252595&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;If successful means total benefit delivered to shareholders, then I consider my one-man company to be very successful.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Used to be a corporate attorney grinding high billable hours at big firm. Quit to start a solo law practice serving clients working with my favorite thing, cryptocurrencies.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I made $100k working about 30 hours per week from home. Drop off and pick up kids from local school on cargo bike. Take them to the park after school a few days a week (babysitter gets them other days). Client list is kept short to manage stress and avoid need to hire employees.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909817&quot; readability=&quot;2.1521739130435&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908784&quot; readability=&quot;8.6807639836289&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3403819918145&quot;&gt;&lt;tr readability=&quot;8.6807639836289&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.6807639836289&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.880281690141&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I’m a one man show. I made a SaaS targeted towards a specific company. I did all the work up front, got them to trial it, and when they loved it they singed a contract for just over $100k/year.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I have a site with ads on it that makes ~$1500–2000/m in ad revenue.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I also do some hosting/maintenance for clients. 4 clients and it’s about $1,000/m.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;All in it’s about $130k/year and it requires about 5 hours a week of my time. It has freed up the rest of my time to keep building similar projects that can both boost and diversify my MRR.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I’m very grateful that I’m able to work on projects I enjoy now, but more importantly it’s given me time to spend with my family and be around for my kid.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908797&quot; readability=&quot;5.5714285714286&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7857142857143&quot;&gt;&lt;tr readability=&quot;5.5714285714286&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Wow, those number sound so high for a third world country that I can't help thinking that if I were in your situation I would give half of that salary (5k monthly) to my brother and father so they wouldn't have to worry about money again. Congratulations for being in that situation!&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908969&quot; readability=&quot;7.5333333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.7666666666667&quot;&gt;&lt;tr readability=&quot;7.5333333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.7083333333333&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;8.9010989010989&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Coming from scandinavian welfare state, it is really difficult for me to understand why someone would give to their relatives some of their income. Especially if you earn it by working, and the reasoning being so that they don't have to worry about money = have less pressure to work.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I don't want to judge anyone, just wanted to state that there is clearly quite a big cultural gap here. I don't know anyone around here who would do similar things.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909851&quot; readability=&quot;6.7675276752768&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3837638376384&quot;&gt;&lt;tr readability=&quot;6.7675276752768&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.6678966789668&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;18.879594423321&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Brit here. We have a welfare state (just about...), though it's getting pretty grim lately.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I've given a decent amount to family over the years. For the most part it's about a recognition of what people have done for me. My mother sacrificed significantly so that I could be the person I am today.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Not every country rewards work equivalently. In Sweden I see people working in supermarkets and petrol stations that still have decent lives. Norway is wealthier still.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;That's not the case in Britain for the most part - we have much higher income inequality. Someone can work a full time job and still struggle, because the low end jobs pay biscuits.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;(This is probably a significant contributor to the sticker shock I have when shopping in Scandinavia - the staff actually get paid...)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909164&quot; readability=&quot;6.655303030303&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3276515151515&quot;&gt;&lt;tr readability=&quot;6.655303030303&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;My non-European partner gives money to their parents despite being fairly middle-class and fiscally stable. You're right, it's cultural - theirs expects grown children to contribute to the parents after spending their childhood paying for them. It's an investment into the family unit as a whole, as the family will support you beyond what the state welfare could provide. Had a car accident and need some money? The family can help. Want help with a deposit for a place? The family will contribute.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909728&quot; readability=&quot;8.2432432432432&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.1216216216216&quot;&gt;&lt;tr readability=&quot;8.2432432432432&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.1216216216216&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;7.8701298701299&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;siblings are one thing, but your parents most likely worked very hard and spent a lot of money on you when you were young. They probably sacrificed some of their desires just so you could get an education, live comfortably, etc.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;If you can repay them somehow and make their lives easier, why not do so?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909117&quot; readability=&quot;2.4727272727273&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2363636363636&quot;&gt;&lt;tr readability=&quot;2.4727272727273&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Your country has a welfare net. For the third world countries usually children are the welfare net. It's not that hard to understand.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909220&quot; readability=&quot;9.3786982248521&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.689349112426&quot;&gt;&lt;tr readability=&quot;9.3786982248521&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.6272189349112&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.828125&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;There is factually/intellectually understanding it, and then there is being able to see things through that point of view, which opens up in depth discussions from it.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As parent said, he may have the first type, but not the second, so it's hard for him to answer on it without making it sound like a culture clash.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909441&quot; readability=&quot;4.6323529411765&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.3161764705882&quot;&gt;&lt;tr readability=&quot;4.6323529411765&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;I can't comprehend how you could judge someone negatively for wanting to provide for their family. So yes there does seem to be a huge cultural gap here and in this case I don't think Scandanavia does it better. Even if I lived in a country with a good safety net I would want to share my success with my family.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909613&quot; readability=&quot;5.5555555555556&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7777777777778&quot;&gt;&lt;tr readability=&quot;5.5555555555556&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I know several Scandinavians personally who help their friends &amp;amp; family monetarily. It's also real common in Estonia, which is about a hundred miles from Scandinavia. Thus I don't think helping family is something that is missing in the region. More likely it's just a blind spot for spottybanana.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909703&quot; readability=&quot;5.2876712328767&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6438356164384&quot;&gt;&lt;tr readability=&quot;5.2876712328767&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;4.8470319634703&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;9.7448979591837&quot;&gt;&lt;span class=&quot;commtext c73&quot;&gt;&amp;gt; just wanted to state that there is clearly quite a big cultural gap here&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c73&quot;&gt;This is why socialism works in scandinavian countries (it's a need, not a luxury), but fails in the south of europe&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908858&quot; readability=&quot;2.2871287128713&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909005&quot; readability=&quot;1.2820512820513&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909036&quot; readability=&quot;2.4310344827586&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2155172413793&quot;&gt;&lt;tr readability=&quot;2.4310344827586&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think &quot;for a third world country&quot; here means &quot;from (my) third world country perspective&quot;.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909091&quot; readability=&quot;2.4561403508772&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909465&quot; readability=&quot;5.2647058823529&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6323529411765&quot;&gt;&lt;tr readability=&quot;5.2647058823529&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;The &quot;site with ads&quot; is the one that really interests me. Can you give some details on that? What kind of site it is, how you grew traffic, what you use for ads? (Just AdWords?)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908795&quot; readability=&quot;3.2212389380531&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6106194690265&quot;&gt;&lt;tr readability=&quot;3.2212389380531&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Can you broadly talk about how you came up with the idea, how you contacted the company?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908852&quot; readability=&quot;6.7809867629362&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3904933814681&quot;&gt;&lt;tr readability=&quot;6.7809867629362&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;An acquaintance worked for the company and asked for help replacing an existing paper process with an excel document. I helped, but mentioned a web app would work much better. The company trialed the excel version but came back with some concerns. I talked it over with the friend and decided to spend my free time building it out. Once I had a beta ready they trailed it in their location and they loved it. We got it into 2 more locations (all free at this point) and everyone loved it. That raised interest and other stores in the district started asking for it. We launched it across the whole district and finally started to charge. After a year the company decided to launch it nationally. It was a risky move to do the work up front since it could have fizzled out, but it worked out in the end.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908883&quot; readability=&quot;3.3846153846154&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6923076923077&quot;&gt;&lt;tr readability=&quot;3.3846153846154&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.3846153846154&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.7177419354839&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Beautiful! one again, &quot;find Excel use case and replace with web app&quot; seems to have worked :)&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thank you for responding.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908898&quot; readability=&quot;5.358024691358&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.679012345679&quot;&gt;&lt;tr readability=&quot;5.358024691358&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Absolutely, I think there’s plenty of money to be made finding problems companies don’t know they have. The hard part is identifying them, and picking one where the value added by a web app is worth paying for.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908921&quot; readability=&quot;11.547945205479&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.7739726027397&quot;&gt;&lt;tr readability=&quot;11.547945205479&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;9.6232876712329&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;18.83185840708&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Asking here, unable to reply to the comment below.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;&lt;em&gt;The hard part is identifying them, and picking one where the value added by a web app is worth paying for.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As someone who doesn't have any contacts with companies (I'd assume this is true for most people here), any pointers on how to go about doing this? I tried the cold email route (even made a friend this way, we still keep in touch after two years, though we haven't met and probably never will), but I didn't succeed. I probably could have, but it made me so uncomfortable writing to total strangers :(&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909201&quot; readability=&quot;8.7428571428571&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3714285714286&quot;&gt;&lt;tr readability=&quot;8.7428571428571&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.7428571428571&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.891719745223&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;&amp;gt; As someone who doesn't have any contacts with companies (I'd assume this is true for most people here), any pointers on how to go about doing this?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;You need to develop contacts at companies! There are lots of different ways to build your network, but the bottom line is that to be successful with this line of work, which is essentially consulting (at least in the beginning stages), you need to meet people and earn their trust. If you are introverted this will likely feel awkward and uncomfortable (which is why it’s called getting out of your comfort zone).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;It takes a fair bit of effort to get someone to the point where they are willing to walk you through their business processes. Showing genuine interest in their operations and asking lots of good questions is key.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909197&quot; readability=&quot;1.4615384615385&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909294&quot; readability=&quot;5.4464944649446&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7232472324723&quot;&gt;&lt;tr readability=&quot;5.4464944649446&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Not particularly, I started a bit higher than I really wanted so they could negotiate down a bit, but it’s a reasonable price for what they get. I think the trick is pricing based on value provided by the solution; what’s it worth to them?&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909337&quot; readability=&quot;0.97435897435897&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909515&quot; readability=&quot;7.7202797202797&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.8601398601399&quot;&gt;&lt;tr readability=&quot;7.7202797202797&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.6853146853147&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.877344877345&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;What did your acquaintance get for their part?&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I had a kindof similar situation long ago, where a friend worked for a high-frequency trading company and I had been developing a low-overhead high-precision resource and system monitoring framework. I would supply him development builds of the agents and a web login to monitor and tune their trading systems while I got some free production testing in return, it seemed fair at the time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;As things matured and I started exploring paths for monetization, when I approached that trading company about a possible contract my &quot;friend&quot; demanded half ownership stake in the business in return for their becoming the first paying customer.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Nope.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908856&quot; readability=&quot;1.4324324324324&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909849&quot; readability=&quot;6.2068965517241&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909725&quot; readability=&quot;3.5555555555556&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7777777777778&quot;&gt;&lt;tr readability=&quot;3.5555555555556&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm running MinistryOfFlat.com and I have made 7 figures this year. No investors or co workers. No marketing beyond my 2k twitter followers and a website. Solve a very specific and hard problem and the right people will find you.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909765&quot; readability=&quot;4.4936708860759&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.246835443038&quot;&gt;&lt;tr readability=&quot;4.4936708860759&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;That'a pretty cool work; I've worked with UV mapping a bit and if this works this is beast. Side note, the top/hero video crashed mid animation for me (chrome/win10/modern hardware); everything else works fine.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909814&quot; readability=&quot;8.5863708399366&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2931854199683&quot;&gt;&lt;tr readability=&quot;8.5863708399366&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thanks! There are a lot of things that I could improve on my website but I don't think any of it matters that much. There are a lot of people in the startup community talking about metrics, marketing and having the right color on the download button, but its all kind of BS. It matters on the margin, but what really matters is delivering for your customers. Spend your time making the core offering good and if you do it right people will come no matter how ugly your webpage is. Its like a restaurant with amazing food doesn't need a good location of fancy interior design, it will always be full.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909854&quot; readability=&quot;11.560784313725&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.7803921568627&quot;&gt;&lt;tr readability=&quot;11.560784313725&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.7071895424837&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.898648648649&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think good design/presentation and solid approach towards attention to detail on everything you do - &lt;em&gt;it only adds&lt;/em&gt; and it doesn't take away from the core functional aspects of the product or service. Uber-functionalism, which is what you seem to be obsessed with, has its drawbacks. Imagine if Apple didn't care about design or aesthetics or presentation of their products.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;At the sametime, I see some contradiction to your philosophy - there is just so much pizzaz in the product you've built. It goes against the grain of what you just said - all those animations, futuristic aesthetic of your product, giant clock with Tron-like fonts, etc...all those things are unnecessary. You could just sell the command line tool, you know :)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909811&quot; readability=&quot;1.1645569620253&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909836&quot; readability=&quot;6.516049382716&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.258024691358&quot;&gt;&lt;tr readability=&quot;6.516049382716&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;When you do 3D graphics you first build a 3D shape and then you wrap an image around it to give it surface properties like color, reflectance, and transparency. In order to do this you need to &quot;unwrap&quot; the 3D shape so that it every XYZ point also exist in a 2D UV image space. This unwrapping step us usually done more or less by hand and is both tedious and time consuming.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909744&quot; readability=&quot;5.5724815724816&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7862407862408&quot;&gt;&lt;tr readability=&quot;5.5724815724816&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.036855036855&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.842519685039&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This has to be one of the most astonishing and remarkable work I've ever seen in recent times. Holyshit.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;UV mapping is a royal pain in the ass and I can't believe it can just be automated away. Many big studios tried - from Houdini to Maxon to large open source projects like Blender. You deserve huge returns, kudos! All the best!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Nit: you need a SSL cert on your website :)&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909779&quot; readability=&quot;3.3371428571429&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6685714285714&quot;&gt;&lt;tr readability=&quot;3.3371428571429&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Thank you very much! Its pretty good but its not even close to as good as the version I have in R&amp;amp;D.... SSL is coming, thanks for reminding me.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909828&quot; readability=&quot;2.4259259259259&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.212962962963&quot;&gt;&lt;tr readability=&quot;2.4259259259259&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Could you tell us more about yourself and project. How would you able to do without any coworkers when many big companies tried.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909874&quot; readability=&quot;6.7666666666667&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.3833333333333&quot;&gt;&lt;tr readability=&quot;6.7666666666667&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.2833333333333&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I kind of did it by accident. It was a side project that people started getting in touch over.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I think I'm very suited to solve this problem for a few reasons. I used to be a 3D artist so I know what artists want. I'm a C programmers so I can make complex things go fast, and I have done a lot of procedural 3D stuff so I know a lot of mesh processing tricks. The complexity of this is substantial. its currently around 1.5 megs of source code, not counting UIs loaders and savers or any of that. So I would say many long hours and being very focused is key. You can find more of my work at www.quelsolaar.com and @quelsolaar on twitter&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909138&quot; readability=&quot;8.6799431009957&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.3399715504979&quot;&gt;&lt;tr readability=&quot;8.6799431009957&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.75106685633&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.904552129222&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I run a one-person company [1] whose tech makes reading on screen easier/faster/more accessible. The B2C tools (iOS app and browser plugin) bring in 5 figures, but in 2019 the IP licensing took off.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;We have large educational clients that are integrating the tech because of its benefit for students (especially those with ADHD and dyslexia). IP licensing is great because it means I don't need to spend time building the integrations myself, and I don't have any costs attached to the licensing deals, so it's pretty much all profit. In 2020 the IP licensing will greatly exceed the B2C revenue, and we may even make the B2C tools free at that point.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;1: www.beelinereader.com&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909668&quot; readability=&quot;5.5205811138015&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7602905569007&quot;&gt;&lt;tr readability=&quot;5.5205811138015&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Do you think it makes sense to sell instructional content under IP licensing for basic education institution? I have produced a lot of basic infosec awareness materials this year I could be revamping to make suitable for teachers and school administration. Payment would be done once a year, more or less aligned with a new pack release which would contain updates/new content.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909690&quot; readability=&quot;8.4929577464789&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2464788732394&quot;&gt;&lt;tr readability=&quot;8.4929577464789&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.1338028169014&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.872881355932&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Just to clarify, would you be selling to K12 or higher ed? This could wrap into a &quot;media literacy&quot; package, which is taught in K12.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;My gut reaction is you would not want to position this as IP licensing if selling to schools. We do IP licensing to edtech/education companies, but our school offerings are all software/SaaS. I think schools would find the notion of IP licensing to be a mismatch, which would create friction even if the offering itself is a good fit.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909782&quot; readability=&quot;9.2872570194384&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.6436285097192&quot;&gt;&lt;tr readability=&quot;9.2872570194384&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.036717062635&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;11.86143187067&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Basic education, mainly. All levels except higher-Ed. Yes, the idea is to wrap it into digital literacy/citizenship modules that teachers could be using in their classes as complementary topics.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm struggling to find the right way to position this as a service in which the client/user can work, edit, deliver the content or part of it without having commercial ownership over it, e.g. cannot resell my content to 3rd parties.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909807&quot; readability=&quot;11.34375&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.671875&quot;&gt;&lt;tr readability=&quot;11.34375&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;160&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.671875&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.887063655031&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Selling into education (especially K12) is tough, and many startups have died on that hill. The sales cycle is slow, budgets are limited (unless there's a specific line-item for what you're selling, which is possible since &quot;digital/media literacy&quot; is popular these days), and billing can be problematic.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;If I were you, I'd find other companies that are already in the space, see what they offer and how they price/sell, and either mimic them or consider joining forces in some way.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909360&quot; readability=&quot;2.2682926829268&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909565&quot; readability=&quot;2.6285714285714&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909400&quot; readability=&quot;4.8292682926829&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.4146341463415&quot;&gt;&lt;tr readability=&quot;4.8292682926829&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I run SideProjectors, which generates some profit. But my reason for posting is for anyone who wants to take-over someone's side project, then have a look at some of the projects posted - &lt;a href=&quot;https://www.sideprojectors.com&quot; rel=&quot;nofollow&quot;&gt;https://www.sideprojectors.com&lt;/a&gt; - You don't need to start from zero. :)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909452&quot; readability=&quot;7.1783783783784&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.5891891891892&quot;&gt;&lt;tr readability=&quot;7.1783783783784&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Signing up to SideProjectors using Twitter requires permissions to follow, unfollow, tweet, update account info, read direct messages, etc. That's extremely scary.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908800&quot; readability=&quot;11.357601713062&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;5.678800856531&quot;&gt;&lt;tr readability=&quot;11.357601713062&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;7.5717344753747&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;14.831460674157&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Sorry to hijack slightly, but figured it's related: I am trying to build a &quot;lifestyle&quot; side project into something profitable, as a goal to replace my job. I think I have a good product and niche.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;What I want is some sort of mentor network. Someone who has already succeeded where I haven't, and that I can pester with questions, check I am on the right track, vent, etc, every now and then.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Does such a thing (or something like it) exist?&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908875&quot; readability=&quot;7.3543859649123&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6771929824561&quot;&gt;&lt;tr readability=&quot;7.3543859649123&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Drop me a message. I've started and run several ventures, a couple of which became more than lifestyle. Nothing is done alone though - there are always people who help you on your journey; employees, friends, mentors, family. Happy to point you in a direction&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908919&quot; readability=&quot;1.8461538461538&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909027&quot; readability=&quot;8.5153846153846&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.2576923076923&quot;&gt;&lt;tr readability=&quot;8.5153846153846&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;5.6769230769231&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;10.852150537634&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yes, they exist, but the ones I've seen are typically executive forums (ie a group of CEOs meet together). There also seem to be a lot of startup mentorship groups.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;However, you might get the most mileage from finding a few people who have been successful where you would like to be, and reach out to them for mentorship. Such connections can make a huge difference.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909529&quot; readability=&quot;1.1176470588235&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909041&quot; readability=&quot;1.1481481481481&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909070&quot; readability=&quot;1.6105263157895&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909178&quot; readability=&quot;2.5833333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2916666666667&quot;&gt;&lt;tr readability=&quot;2.5833333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;120&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Note that the lines are blurry and a lifestyle business can turn into a startup or a hybrid model if you run across something with good enough traction.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909559&quot; readability=&quot;5.6031746031746&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.8015873015873&quot;&gt;&lt;tr readability=&quot;5.6031746031746&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I have so many ideas and the path to reaching customers just seems impossible. I am constantly saying to myself, who could be persuaded to PAY for this? And yet so many people here have successful products that I NEVER would have thought could work (a color gradient on text?!?!). I do not know how people reach actual revenue on their side projects.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909693&quot; readability=&quot;3.2156862745098&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6078431372549&quot;&gt;&lt;tr readability=&quot;3.2156862745098&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I am the same here, I am so useless at sales that when I see the things some people manage to sell I get angry somewhat.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909729&quot; readability=&quot;5.2811059907834&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6405529953917&quot;&gt;&lt;tr readability=&quot;5.2811059907834&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;what kind of ideas about what audience? perhaps talk to other makers with overlapping audiences, and help each other. sadly, the main online media have become hostile to boostrapped sites.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908750&quot; readability=&quot;4.3508771929825&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.1754385964912&quot;&gt;&lt;tr readability=&quot;4.3508771929825&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Drew DeVault's SourceHut (&lt;a href=&quot;https://sr.ht&quot; rel=&quot;nofollow&quot;&gt;https://sr.ht&lt;/a&gt;). It may not make as much revenue yet, but it provides value to the open-source community by developing a set of developer collaboration tools that actually improve on existing workflows and embody the Unix philosophy.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909526&quot; readability=&quot;9.7373949579832&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;4.8686974789916&quot;&gt;&lt;tr readability=&quot;9.7373949579832&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;8.7636554621849&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;16.908602150538&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I run a small MOOC helping country side municipalities/rural communities in Scandinavia with teaching their youth and young adults about IT, networking and cloud technologies. It started as a pilot project in a small municipality north of the arctic circle and I sold my first license in February. It then quickly gained attraction in similar types of municipalities when the results came in.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;It was a lot of work in the beginning, but now I usually have a very nice schedule. Every week I spend around 4 hours researching different topics, 8 hours on updating or creating videos for the platform and 4-8 hours in video meetings with customers or regarding new business opportunities.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;This year I made north of €150k (~$167604) and will double that before Q3. Seeing how things are going, most likely I will not be a one man show by the summer due to a need for account management and/or content creation, but it's doable.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908872&quot; readability=&quot;5.4344262295082&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7172131147541&quot;&gt;&lt;tr readability=&quot;5.4344262295082&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Pull Reminders. Launched in 2018, acquired by GitHub in June 2019. A very good product that does one specific task really really well. I assume it was acquired for at least a few hundred thousand, if not a few million.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908788&quot; readability=&quot;2.7692307692308&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909636&quot; readability=&quot;0.62937062937063&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909035&quot; readability=&quot;7.2631578947368&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;3.6315789473684&quot;&gt;&lt;tr readability=&quot;7.2631578947368&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;6.3552631578947&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;12.284872298625&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I'm a one-man army, too. I've built SaaSHub &lt;a href=&quot;https://www.saashub.com&quot; rel=&quot;nofollow&quot;&gt;https://www.saashub.com&lt;/a&gt; &amp;amp; LibHunt. I left my job a few months ago and since then have focussed on developing and growing SaaSHub.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;It's been growing steadily for the last 2-3 months. My expectations are that it will generate ~$2,500+ in January and $100k+ in 2020 given the current growth.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;I have a massive list of ideas that I will work on next. Yet, I'd like to be fully sustainable (in an expensive city like Sydney) before jumping to the next project/idea.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909147&quot; readability=&quot;2.4406779661017&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2203389830508&quot;&gt;&lt;tr readability=&quot;2.4406779661017&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;How does SaaSHub generate revenue? I have neither seen any ads nor any payment possibilities.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909202&quot; readability=&quot;2.4597701149425&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909059&quot; readability=&quot;1.531914893617&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909092&quot; readability=&quot;5.5094339622642&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7547169811321&quot;&gt;&lt;tr readability=&quot;5.5094339622642&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;80&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;With proper incentives. Every day I'm featuring 4 projects (2 over the weekend) on the SaaS Tribune (homepage). These projects are usually selected 3 weeks in advance. During that period, product owners are reminded that their software will be higher in the list if they have more reviews.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909116&quot; readability=&quot;2.4583333333333&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2291666666667&quot;&gt;&lt;tr readability=&quot;2.4583333333333&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;p.s. another very successful one-person business should be levels.io. The person behind &quot;Remote OK&quot; &amp;amp; &quot;Nomad List&quot;.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909063&quot; readability=&quot;2.6312849162011&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.3156424581006&quot;&gt;&lt;tr readability=&quot;2.6312849162011&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.5083798882682&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.78125&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Depends a lot on your definition of &quot;successful&quot; and &quot;business&quot;.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c00&quot;&gt;Most very successful one person businesses I know of are specialty consulting businesses.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909169&quot; readability=&quot;5.2352941176471&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.6176470588235&quot;&gt;&lt;tr readability=&quot;5.2352941176471&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;This is a very good point. The definition I would use is &lt;em&gt;not selling your time&lt;/em&gt;, where my income is not just a multiplier of the hours I put in, even if the multiplier is high.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909622&quot; readability=&quot;3.5156950672646&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7578475336323&quot;&gt;&lt;tr readability=&quot;3.5156950672646&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I built a Product Management Interview training platform and earned about 50K total with 100K in the lifetime. Next step is to transition to online course and expected to make about $200k/year.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909617&quot; readability=&quot;3.3571428571429&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.6785714285714&quot;&gt;&lt;tr readability=&quot;3.3571428571429&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I run a one person company and made about 50K last year. This year, plan is to bring the courses online and generate about $100K in total.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909404&quot; readability=&quot;2.5945945945946&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909020&quot; readability=&quot;5.4476987447699&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.7238493723849&quot;&gt;&lt;tr readability=&quot;5.4476987447699&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;I heard that the site builtwith is still being run by the single founder, maybe he has recruited help by now, but if he still run it all alone then it is most successful one person business I have heard of in 2019.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909076&quot; readability=&quot;4.4036697247706&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;2.2018348623853&quot;&gt;&lt;tr readability=&quot;4.4036697247706&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;40&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;Yes, I've heart it's a one-man army project. His/their office is based on the other side of the bridge where I live. One of my small goals for SaaSHub is to be as successful as BuiltWith :)&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909722&quot; readability=&quot;3.455497382199&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.7277486910995&quot;&gt;&lt;tr readability=&quot;3.455497382199&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot;&gt;&lt;span class=&quot;commtext c00&quot;&gt;i m the only one person i know. ad revenue has really gone really downhill the past years, but i still make a lot more than i could working in (terrible) IT here.&lt;/span&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21908879&quot; readability=&quot;0.66666666666667&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909066&quot; readability=&quot;1.6363636363636&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909584&quot; readability=&quot;2.5964912280702&quot;&gt;&lt;td&gt;
&lt;table border=&quot;0&quot; readability=&quot;1.2982456140351&quot;&gt;&lt;tr readability=&quot;2.5964912280702&quot;&gt;&lt;td class=&quot;ind&quot;&gt;&lt;img src=&quot;https://news.ycombinator.com/s.gif&quot; height=&quot;1&quot; width=&quot;0&quot;/&gt;&lt;/td&gt;
&lt;td valign=&quot;top&quot; class=&quot;votelinks&quot;&gt;
&lt;center&gt;

&lt;/center&gt;
&lt;/td&gt;
&lt;td class=&quot;default&quot; readability=&quot;3.4619883040936&quot;&gt;

&lt;br/&gt;&lt;div class=&quot;comment&quot; readability=&quot;6.7682119205298&quot;&gt;&lt;span class=&quot;commtext c5a&quot;&gt;Can't reveal product without their permission.&lt;/span&gt;
&lt;p&gt;&lt;span class=&quot;commtext c5a&quot;&gt;But know of 1 person company that generates $500k revenue per year and gets its customers via SEO.&lt;/span&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909380&quot; readability=&quot;1.2602739726027&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909085&quot; readability=&quot;1.2533333333333&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;athing comtr&quot; id=&quot;21909189&quot; readability=&quot;0.85714285714286&quot;&gt;&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;</description>
<pubDate>Sun, 29 Dec 2019 21:20:29 +0000</pubDate>
<dc:creator>robsun</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://news.ycombinator.com/item?id=21908577</dc:identifier>
</item>
<item>
<title>Why are my Go executable files so large?</title>
<link>https://www.cockroachlabs.com/blog/go-file-size/</link>
<guid isPermaLink="true" >https://www.cockroachlabs.com/blog/go-file-size/</guid>
<description>&lt;div class=&quot;article-sidebar standard-content&quot; readability=&quot;6&quot;&gt;
&lt;div class=&quot;article-sidebar__close&quot;&gt;&lt;img src=&quot;https://d33wubrfki0l68.cloudfront.net/2a3b4a5c251a0f372393770bd645d46056b7923e/5cc57/wp-content/themes/cockroach-labs-2019/includes/img/close.svg&quot; alt=&quot;close icon&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;article-sidebar__content&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Get blog posts to your inbox.&lt;/p&gt;
&lt;span class=&quot;hbspt-form&quot; id=&quot;hubspot-form-1ab229c6039c3af7e223f5366c2e5e40b45bb900&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;I built some tooling to extract details about the contents of a Go executable file, and a small D3 application to visualize this information interactively as zoomable &lt;a href=&quot;https://en.wikipedia.org/wiki/Treemapping&quot;&gt;tree maps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a static screenshot of how the app illustrates the size of the compiled code, in this example for a group modules in CockroachDB:&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-2802 size-large&quot; src=&quot;https://www.cockroachlabs.com/wp-content/uploads/2019/04/go-file-size1-1024x688.png&quot; alt=&quot;&quot; width=&quot;980&quot; height=&quot;658&quot; srcset=&quot;https://www.cockroachlabs.com/wp-content/uploads/2019/04/go-file-size1-1024x688.png 1024w,https://www.cockroachlabs.com/wp-content/uploads/2019/04/go-file-size1-300x202.png 300w,https://www.cockroachlabs.com/wp-content/uploads/2019/04/go-file-size1-768x516.png 768w,https://www.cockroachlabs.com/wp-content/uploads/2019/04/go-file-size1-150x101.png 150w,https://www.cockroachlabs.com/wp-content/uploads/2019/04/go-file-size1.png 1278w&quot; sizes=&quot;(max-width: 980px) 100vw, 980px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The reason why I built this was to help me discover and learn what makes Go executable programs larger than I would expect. Thanks to this tool, I made several discoveries about how Go builds executable files.&lt;/p&gt;
&lt;p&gt;AnD YoU wOnT BeLiEVe WhAt I fOuND InSiDE! (Read more below.)&lt;/p&gt;
&lt;p&gt;The source code is public on GitHub: &lt;a href=&quot;https://github.com/knz/go-binsize-viz&quot;&gt;https://github.com/knz/go-binsize-viz&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;background-and-motivation&quot;&gt;Background and motivation&lt;/h2&gt;
&lt;p&gt;My co-workers and I are busy preparing the latest release of&lt;a href=&quot;http://www.cockroachlabs.com/&quot;&gt;CockroachDB&lt;/a&gt;, version 19.1. CockroachDB is released as a single program executable file containing all functionality.&lt;/p&gt;
&lt;p&gt;Today, the latest build is 123MB large, 88MB stripped. This is a 94% (resp. 125%) increase since CockroachDB v1.0 was released, a bit more than two years ago. What happened?&lt;/p&gt;
&lt;p&gt;This is especially puzzling given that:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;there is about 70MB of source code currently in CockroachDB 19.1, and there was 50MB of source code in CockroachDB v1.0. The increase in source was just ~40%. &lt;em&gt;How come did the binary size increase by a larger factor?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;typically, compiled code is smaller than the source code it is compiled from. There is 70MB of source, a lot of which is just comments. Yet the binary is 88MB. &lt;em&gt;What makes the executable size larger than the source code?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These questions alone made me curious.&lt;/p&gt;
&lt;p&gt;Meanwhile, I also personally care about program size for practical reasons: smaller binaries cause less &lt;a href=&quot;https://en.wikipedia.org/wiki/Thrashing_(computer_science)&quot;&gt;cache thrashing&lt;/a&gt;. They are easier to distribute and deploy. They make container orchestration more nimble. For these additional reasons, I would prefer if CockroachDB release binaries could become smaller. Figuring out what they contain might suggest how to achieve that.&lt;/p&gt;
&lt;p&gt;❦❦❦&lt;/p&gt;
&lt;h2 id=&quot;building-the-visualization&quot;&gt;Building the visualization&lt;/h2&gt;
&lt;h3 id=&quot;method&quot;&gt;Method&lt;/h3&gt;
&lt;p&gt;My goal was to find some clarity into 123MB of inscrutable executable data. I started without knowing exactly how to achieve that.&lt;/p&gt;
&lt;p&gt;I knew about the standard Unix utility &lt;a href=&quot;https://en.wikipedia.org/wiki/Nm_(Unix)&quot;&gt;nm&lt;/a&gt; which can display the size of individual entries in an excecutable file, and I knew that Go provides its own half-baked re-implementation (&lt;code&gt;go tool nm&lt;/code&gt;). However, even a small program in Go will contain dozens of entries, and there were tens of thousands in the particular files I was looking at. So I needed an overview.&lt;/p&gt;
&lt;p&gt;I also knew about &lt;a href=&quot;https://en.wikipedia.org/wiki/Treemapping&quot;&gt;tree maps&lt;/a&gt;, ever since the movie &lt;em&gt;Jurassic Park&lt;/em&gt; featured the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fsn_(file_manager)&quot;&gt;fsn 3D browser&lt;/a&gt; in 1993. This visualization represents sized hierarchical entries—for example files on disk, and in my case also like entries inside an executable binary—using visual elements whose size on the screen is proportional to their size in bytes on disk.&lt;/p&gt;
&lt;p&gt;I thus decided to connect the two: &lt;strong&gt;visualize Go binaries using tree maps.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, reminding myself that I have potentially tens of thousands of entries to visualize, I decided upfront that it would do me no good to attempt to represent them all simultaneously on screen. I thus went looking for &lt;strong&gt;zoomable&lt;/strong&gt; tree maps.&lt;/p&gt;
&lt;p&gt;Finally, I already had learned some &lt;a href=&quot;https://d3js.org/&quot;&gt;D3&lt;/a&gt; basics and wanted to learn more, so I decided I would use D3 for this exercise too.&lt;/p&gt;
&lt;p&gt;So I went to search for “zoomable d3 tree map” on my favorite search engine and discovered that D3 has native supports for tree maps, provided some input data in a suitable format.&lt;/p&gt;
&lt;p&gt;I initially started to tinker with &lt;a href=&quot;https://bost.ocks.org/mike/treemap/&quot;&gt;Mike Bostok’s zoomable treemaps&lt;/a&gt; but then quickly ran into some issue where some D3 feature I wanted to use was not available: Mike’s code uses D3 V3, “modern” D3 runs at V5, and there were major API changes between V3 and V4. Converting the V3 example to V4 (or even V5) seemed non-trivial. Instead I set out to find some examples built for V4+. I then discovered &lt;a href=&quot;http://bl.ocks.org/JacquesJahnichen/42afd0cde7cbf72ecb81&quot;&gt;this example from Jahnichen Jacques&lt;/a&gt;, itself inspired from Mike Bostok’s, and finally &lt;a href=&quot;http://bl.ocks.org/guglielmo/16d880a6615da7f502116220cb551498&quot;&gt;this simpler example from Guglielmo Celata&lt;/a&gt; inspired from both but with a simpler implementation.&lt;/p&gt;
&lt;p&gt;All these examples worked using D3 hierarchical data sets loaded from CSV or JSON with a particular schema.&lt;/p&gt;
&lt;p&gt;The main thinking exercise was thus to massage the output of &lt;code&gt;nm&lt;/code&gt; into a format suitable to load into D3. The rest of the work was simpler, to adapt D3 examples I found online into something that made sense for the type of data I was working with.&lt;/p&gt;

&lt;p&gt;A Go executable binaries contains, as per &lt;code&gt;go tool nm -size&lt;/code&gt;, two types of entries:&lt;/p&gt;
&lt;p&gt;The first column is the address,and is of no interest here. The second column is the size. The third column is the entry type, and of no interest here either. The last part is the symbol for the entry.&lt;/p&gt;
&lt;p&gt;To build a &lt;em&gt;tree&lt;/em&gt; visualization we thus need to decompose each symbol into &lt;em&gt;name components&lt;/em&gt; that group the symbols into a hierarchy.&lt;/p&gt;
&lt;h3 id=&quot;decomposing-go-symbols&quot;&gt;Decomposing Go symbols&lt;/h3&gt;
&lt;p&gt;Intuitively, a Go symbol contains a hierarchical package path (e.g.&lt;code&gt;github.com/lib/pq&lt;/code&gt;) and some package-local name. The package-name name is either global in the package (e.g. &lt;code&gt;main&lt;/code&gt;), or a method name with some receiver type prefix (e.g. &lt;code&gt;(*File).Write&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This model accurately describes a large majority of symbols, and can be readily decomposed using a simple regular expression. However, we quickly come across exotic names that do not fit this model:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;5250978         13 d crypto/tls..gobytes.1
3823b40         48 r go.itab.*compress/flate.byLiteral,sort.Interface
 aa3740        113 t go.(*struct { io.Reader; io.Closer }).Close
 e79cb0         10 t database/sql.glob..func1
 8ce580        123 t encoding/json.floatEncoder.encode-fm
 73aed0         82 t runtime.gcMarkDone.func1.1
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I thus iterated to expand a simple regular expression to properly decompose the variety of names found in Go binaries. The result was a bit gnarly can be found &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/tab2pydic.py#L119-L184&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the examples above, my program produces the following:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Path&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;11&quot;&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['crypto/', 'tls.', '.gobytes.']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['compress/', 'flate.']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;go.itab.*byLiteral,sort.Interface&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;113&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['go.', '(*struct { io.Reader; io.Closer }).']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Close&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['database/', 'sql.', 'glob..']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;func1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;123&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['encoding/', 'json.', 'floatEncoder.']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;encode-fm&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;82&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['runtime/', 'gcMarkDone.', 'func1.']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;h3 id=&quot;decomposing-c-c-symbols&quot;&gt;Decomposing C/C++ symbols&lt;/h3&gt;
&lt;p&gt;Intuitively, a C/C++ symbol contains a hierarchical namespace path (e.g.&lt;code&gt;std::&lt;/code&gt; or &lt;code&gt;google::protobuf::&lt;/code&gt;) and then a variable or function name.&lt;/p&gt;
&lt;p&gt;Again, looking at real-world binaries, we easily find many items that don’t fit the simple model:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;37ee1d0          8 r $f64.c05eb8bf2d05ba25
26abe20        100 T void rocksdb::JSONWriter::AddValue&amp;lt;int&amp;gt;(int const&amp;amp;)
28388f0         71 t rocksdb::(anonymous namespace)::PosixEnv::NowNanos()
2821ae0        231 T rocksdb::NumberToString[abi:cxx11](unsigned long)
 5b8c5c         34 t rocksdb::PosixRandomRWFile::Sync() [clone .cold.88]
265a740        211 T google::protobuf::internal::LogMessage::operator&amp;lt;&amp;lt;(long)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Using the same technique, I iterated from a simple regular expression to decompose the variety of symbols encountered. I even went one step further and chose to decompose identifiers at underscore boundaries. The result regular expressions are again rather complex and can be found &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/tab2pydic.py#L7-L117&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the examples above, my program produces the following:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Path&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody readability=&quot;8.5&quot;&gt;&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['$f64.']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c05eb8bf2d05ba25&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['rocksdb::', 'JSONWriter::']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;void AddValue&amp;lt;int&amp;gt;(int const&amp;amp;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;td&gt;71&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['rocksdb::', '(anonymous namespace)::', 'PosixEnv::']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NowNanos()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td&gt;231&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['rocksdb::', 'PosixRandomRWFile::']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Sync() [clone .cold.88]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;5&quot;&gt;&lt;td&gt;211&lt;/td&gt;
&lt;td&gt;&lt;code&gt;['google::', 'protobuf::', 'internal::', 'LogMessage::']&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;operator&amp;lt;&amp;lt;(long)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Some difficulty arises from the fact that C++ symbols can contain an arbitrarily amount of nested template parameters or parentheses in types, and regular expressions cannot match recursively.&lt;/p&gt;
&lt;p&gt;My current implementation is thus restricted to only supports 6 levels of nesting. This appears to be insufficient to capture all symbols in my program of interest (where some symbols contain 10+ levels of nesting!) but I chose to exclude a few symbols to keep my regular expression simple®. In my target analysis, the size of these excluded symbols is negligible anyway.&lt;/p&gt;
&lt;h3 id=&quot;organizing-the-data-as-a-tree&quot;&gt;Organizing the data as a tree&lt;/h3&gt;
&lt;p&gt;After decomposing the &lt;em&gt;path components&lt;/em&gt; of each symbol, my program creates &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/tab2pydic.py#L194-L211&quot;&gt;nested Python dictionaries using a simple recursive function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, the result of this strategy for the path &lt;code&gt;a,b,c&lt;/code&gt; is something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{'children':{
    'a':{'children':{
        'b':{'children':{
          'c': ...
          }}
     }}
}}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Whereas the D3 visualization code really wants this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{'children':[
    {'name':'a', 'children':[
        {'name':'b', 'children':[
           {'name':'c', ... }
          ]}
     ]}
]}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;For this, I built a &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/simplify.py&quot;&gt;separate simplification program&lt;/a&gt; that turns the former format into the latter.&lt;/p&gt;
&lt;p&gt;The reason why I separated the code into two programs is that the decomposition of symbols is rather expensive, and once I was satisfied with the decomposition I wanted the ability to iterate quickly on the tree transform without having to decompose over and over again.&lt;/p&gt;
&lt;p&gt;Additionally, the simplification program collapses (“flattens”) multiple hierarchy levels with a single child into just one level with a combined name. For example, the hierarchy &lt;code&gt;a/ → b/ → c/ → x,y&lt;/code&gt; becomes &lt;code&gt;a/b/c/ → x,y&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;visualization-using-d3&quot;&gt;Visualization using D3&lt;/h3&gt;
&lt;p&gt;The original D3 tree map example as initially designed by Mike Bostok, and modified by Jahnichen Jacques and Guglielmo Celata operates thus:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;it &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/app3.js#L46-L53&quot;&gt;prepares a SVG canvas&lt;/a&gt; in a named HTML “chart” entity;&lt;/li&gt;
&lt;li&gt;it defines a &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/app3.js#L69-L166&quot;&gt;display function&lt;/a&gt; which, given a computed D3 tree map layout, creates a 3-level (grandparent-parent-child) visualization in the SVG;&lt;/li&gt;
&lt;li&gt;the display function internally defines &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/app3.js#L123-L163&quot;&gt;transition logic&lt;/a&gt; to zoom in and out when clicking on the canvas;&lt;/li&gt;
&lt;li&gt;it &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/app3.js#L256&quot;&gt;loads the data from JSON&lt;/a&gt;, &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/app3.js#L252&quot;&gt;attaches it to a D3 tree map layout&lt;/a&gt;, and &lt;a href=&quot;https://github.com/knz/go-binsize-viz/blob/d9d15ccf1569747ac4f2ff643a56954c793ce56c/app3.js#L253&quot;&gt;renders it&lt;/a&gt; using the aforementioned facilities.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;On top of this logic by the previous authors, I added the following:&lt;/p&gt;
&lt;p&gt;❦❦❦&lt;/p&gt;
&lt;h2 id=&quot;example-visualization-for-a-simple-program&quot;&gt;Example visualization for a simple program&lt;/h2&gt;
&lt;h3 id=&quot;example-program&quot;&gt;Example program&lt;/h3&gt;
&lt;p&gt;We’ll use the following Go code:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-.go&quot;&gt;package main

import &quot;fmt&quot;

var x = struct { x [10000]int }{}

func main() {
    fmt.Println(&quot;hello world&quot;, x)
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I choose to use a large struct for variable &lt;code&gt;x&lt;/code&gt; so that the &lt;code&gt;main&lt;/code&gt; package becomes significant in size compared to the imported &lt;code&gt;runtime&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;The program can be compiled as usual:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ go build hello.go
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;transformation-process&quot;&gt;Transformation process&lt;/h3&gt;
&lt;p&gt;I then use the following commands:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ go tool nm -size hello            &amp;gt;hello.symtab
$ python3 tab2pydic.py hello.symtab &amp;gt;hellodic.py
$ python3 simplify.py hellodic.py   &amp;gt;hello.js
&lt;/code&gt;
&lt;/pre&gt;
&lt;h3 id=&quot;interactive-visualization&quot;&gt;Interactive visualization&lt;/h3&gt;
&lt;p&gt;The following HTML code is sufficient:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;language-.html&quot;&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
   &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&amp;gt;
   &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;treemap.css&quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
   &amp;lt;p class=&quot;chart&quot; id=&quot;chart&quot;&amp;gt;&amp;lt;/p&amp;gt;
   &amp;lt;script src=&quot;js/d3.v4.min.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;script src=&quot;js/d3-color.v1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;script src=&quot;js/d3-interpolate.v1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;script src=&quot;js/d3-scale-chromatic.v1.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;script src=&quot;app3.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
     viewTree(&quot;chart&quot;, &quot;example-data/hello.js&quot;);
   &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Which renders as follows (ensure Javascript is enabled):&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;Although this simple executable file appears to only contain Go symbols, it actually does contain C/C++ symbols too. However, their size is negligible and they initially appear as a mere line on the right side of the tree map. By clicking on that line, you may be able to zoom into them and obtain this:&lt;/p&gt;
&lt;h3 id=&quot;initial-impressions&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-2803&quot; src=&quot;https://www.cockroachlabs.com/wp-content/uploads/2019/04/hello-c.png&quot; alt=&quot;&quot; width=&quot;899&quot; height=&quot;479&quot; srcset=&quot;https://www.cockroachlabs.com/wp-content/uploads/2019/04/hello-c.png 899w,https://www.cockroachlabs.com/wp-content/uploads/2019/04/hello-c-300x160.png 300w,https://www.cockroachlabs.com/wp-content/uploads/2019/04/hello-c-768x409.png 768w,https://www.cockroachlabs.com/wp-content/uploads/2019/04/hello-c-150x80.png 150w&quot; sizes=&quot;(max-width: 899px) 100vw, 899px&quot;/&gt;Initial impressions&lt;/h3&gt;
&lt;p&gt;The small programm above contains 6 lines of source code and compiles to a 1.3MB binary. The breakdown of sizes is as follows:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;runtime&lt;/td&gt;
&lt;td&gt;900K / 71%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;main&lt;/td&gt;
&lt;td&gt;80K / 6.3%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;unicode&lt;/td&gt;
&lt;td&gt;77K / 6.1%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;reflect&lt;/td&gt;
&lt;td&gt;72K / 5.7%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;fmt&lt;/td&gt;
&lt;td&gt;38K / 3.0%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;strconv&lt;/td&gt;
&lt;td&gt;31K / 2.5%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sync&lt;/td&gt;
&lt;td&gt;10K / 0.8%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;internal&lt;/td&gt;
&lt;td&gt;9K / 0.7%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;syscall&lt;/td&gt;
&lt;td&gt;6K / 0.5%&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;(others)&lt;/td&gt;
&lt;td&gt;(remainder)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;In addition to code compiled from source, 24K (1.9% of size) are compiler-generated type equality and hashing functions. These are accumulated in the box TYPEINFO in the tree map.&lt;/p&gt;
&lt;p&gt;The following becomes clear quickly:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;the Go standard library is not well modularized; importing just one function (&lt;code&gt;fmt.Println&lt;/code&gt;) pulls in about 300KB of code.&lt;/li&gt;
&lt;li&gt;even accounting for &lt;code&gt;fmt.Println&lt;/code&gt; and its dependencies and the 80K of predictable code from the main program, we are still left to wonder about 900K (71%) of code from the &lt;code&gt;runtime&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;Zooming into there, we see that 450K (35%) are taken by just one single entry with name &lt;code&gt;runtime.pclntab&lt;/code&gt;. This is more than the code for the main program and all the supporting code for &lt;code&gt;fmt.Println&lt;/code&gt;combined.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We’ll come back to this below.&lt;/p&gt;
&lt;p&gt;❦❦❦&lt;/p&gt;
&lt;h2 id=&quot;what-s-inside-a-cockroachdb-executable-binary&quot;&gt;What’s inside a CockroachDB executable binary?&lt;/h2&gt;
&lt;h3 id=&quot;visual-exploration&quot;&gt;Visual exploration&lt;/h3&gt;
&lt;p&gt;Applying the tool on a recent CockroachDB build, one can find the following:&lt;/p&gt;

&lt;h3 id=&quot;analysis&quot;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;By exploring this visualization, we discover:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;71M of total entries;&lt;/li&gt;
&lt;li&gt;8.4M (12% of size) in C/C++ entries, including 3M (4.3%) from RocksDB;&lt;/li&gt;
&lt;li&gt;62M (88%) in Go entries, including:
&lt;ul&gt;&lt;li&gt;32M (45%) compiled directly from CockroachDB source code or its dependencies;&lt;/li&gt;
&lt;li&gt;26M (36%) from the &lt;code&gt;runtime&lt;/code&gt; package.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;… &lt;em&gt;wait, what?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We established above, in the simple example, that &lt;code&gt;runtime&lt;/code&gt; was about 900K in size. Now it has become 26M—a 28X increase! What is going on?&lt;/p&gt;
&lt;p&gt;Zooming in, the mystery is revealed: all of the increase went into that single object &lt;code&gt;runtime.pclntab&lt;/code&gt;. The other entries in package &lt;code&gt;runtime&lt;/code&gt; do not appear to differ between programs.&lt;/p&gt;
&lt;p&gt;We will come back to this &lt;code&gt;pclntab&lt;/code&gt; object later below.&lt;/p&gt;
&lt;h3 id=&quot;comparison-between-cockroachdb-versions&quot;&gt;Comparison between CockroachDB versions&lt;/h3&gt;
&lt;p&gt;The visualization above was for a pre-release build of CockroachDB v19.1. For reference, here is the data for CockroachDB v1.0:&lt;/p&gt;

&lt;p&gt;This has:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;32M of total entries;&lt;/li&gt;
&lt;li&gt;2.5M (7.8%) in C/C++ entries, including 1.5M (4.7%) from RocksDB;&lt;/li&gt;
&lt;li&gt;30M (92%) in Go entries, including:
&lt;ul&gt;&lt;li&gt;16M (50%) compiled from CockroachDB sources and dependencies;&lt;/li&gt;
&lt;li&gt;7.9M (25%) from the &lt;code&gt;runtime&lt;/code&gt; package, of which 7.3M (23%) comes directly from &lt;code&gt;pclntab&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Recalling the initial problem statement, CockroachDB increased about 40% in source code size between v1.0 and v19.1. Thanks to the visualization, we observe that the compiled code that directly originates from the CockroachDB sources increased from 16M to 32MB, which is about a 100% increase.&lt;/p&gt;
&lt;p&gt;Meanwhile, &lt;code&gt;runtime.pclntab&lt;/code&gt; increased from 7.9M to 26M—a 230% increase!&lt;/p&gt;
&lt;p&gt;❦❦❦&lt;/p&gt;
&lt;h2 id=&quot;what-s-this-runtime-pclntab-anyway&quot;&gt;What’s this &lt;code&gt;runtime.pclntab&lt;/code&gt; anyway?&lt;/h2&gt;
&lt;p&gt;It is not too well documented however &lt;a href=&quot;https://golang.org/src/debug/gosym/pclntab.go&quot;&gt;this comment from the Go source code&lt;/a&gt; suggests its purpose:&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;// A LineTable is a data structure mapping program counters to line numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The purpose of this data structure is to enable the Go runtime system to produce descriptive stack traces upon a crash or upon internal requests via the &lt;code&gt;runtime.GetStack&lt;/code&gt; API.&lt;/p&gt;
&lt;p&gt;So it seems useful. &lt;em&gt;But why is it so large?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The URL &lt;a href=&quot;https://golang.org/s/go12symtab&quot;&gt;https://golang.org/s/go12symtab&lt;/a&gt; hidden in the aforelinked source file redirects to a document that explains what happened between Go 1.0 and 1.2. To paraphrase:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;prior to 1.2, the Go linker was emitting a &lt;em&gt;compressed&lt;/em&gt; line table, and the program would decompress it upon initialization at run-time.&lt;/li&gt;
&lt;li&gt;in Go 1.2, a decision was made to pre-expand the line table in the executable file into its final format suitable for direct use at run-time, without an additional decompression step.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In other words, &lt;strong&gt;the Go team decided to make executable files larger to save up on initialization time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Also, looking at the data structure, it appears that its overall size in compiled binaries is super-linear in the &lt;strong&gt;number of functions&lt;/strong&gt; in the program, in addition to how large each function is. We will come back to this below.&lt;/p&gt;
&lt;h2 id=&quot;of-size-performance-trade-offs-and-use-cases&quot;&gt;Of size/performance trade-offs and use cases&lt;/h2&gt;
&lt;p&gt;The change in design between Go pre-1.2 and go 1.2 is a classic trade-off between performance (time) and memory (space).&lt;/p&gt;
&lt;p&gt;When is this trade-off warranted?&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;if a program is &lt;em&gt;executed often&lt;/em&gt; (e.g. microservice, system tools), then it is worth accelerating its start-up time at the cost of an increase in size.If, moreover, the program is &lt;em&gt;small&lt;/em&gt;, with relatively few functions, (a reasonable assumption for programs executed often, like microservices or system tools), the increase in size incurred by&lt;code&gt;runtime.pclntab&lt;/code&gt; will be negligible and thus have no significant impact on usability: file transfers, deployments, orchestration, etc.In that case, the Go 1.2 design is sound and warranted.&lt;/li&gt;
&lt;li&gt;if, in contrast, a program is &lt;em&gt;executed rarely&lt;/em&gt; (e.g. a system service that runs continuously in the background, like, say … a database server), then the start-up time can be amortized throughout the lifetime of the process. The performance benefit of accelerating start-up is then not so clear.If, moreover, the program is &lt;em&gt;large&lt;/em&gt;, with tens of thousands of of functions (a reasonable assumption for complex, feature-driven enterprise software like … database servers), the increase in size incurred by &lt;code&gt;runtime.pclntab&lt;/code&gt; becomes inconveniently significant.This makes the Go 1.2 design … not so advantageous.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;In the case of CockroachDB, &lt;code&gt;runtime.pclntab&lt;/code&gt; could soon exceed the entirety of code compiled from sources, even with a conservative assumption of linear growth in compiled code size:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;2017&lt;/th&gt;
&lt;th&gt;2019&lt;/th&gt;
&lt;th&gt;2021 (projected)&lt;/th&gt;
&lt;th&gt;2023&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Total size&lt;/td&gt;
&lt;td&gt;&amp;gt; 32M&lt;/td&gt;
&lt;td&gt;&amp;gt; 71M&lt;/td&gt;
&lt;td&gt;&amp;gt; 157M&lt;/td&gt;
&lt;td&gt;&amp;gt; 350M&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CockroachDB code&lt;/td&gt;
&lt;td&gt;&amp;gt; 16M (50%)&lt;/td&gt;
&lt;td&gt;&amp;gt; 32M (45%)&lt;/td&gt;
&lt;td&gt;&amp;gt; 64M (41%)&lt;/td&gt;
&lt;td&gt;&amp;gt; 128M (37%)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;runtime.pclntab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&amp;gt; 7.3M (23%)&lt;/td&gt;
&lt;td&gt;&amp;gt; 26M (36%)&lt;/td&gt;
&lt;td&gt;&amp;gt; 85M (54%)&lt;/td&gt;
&lt;td&gt;&amp;gt; 281M (80%)&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;❦❦❦&lt;/p&gt;
&lt;h2 id=&quot;other-oddities&quot;&gt;Other oddities&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;the Go compiler and linker always produce and keep the following entries, even when they are only used in functions elided by the linker because they are not used:
&lt;ul&gt;&lt;li&gt;Go interface conversion tables (&lt;code&gt;go.itab.&lt;/code&gt;) between every pair of interface ever mentioned in the source code.This accounts for about 1% of the CockroachDB 19.1 binary, and is predicted to increase with the introduction of more inter-component interfaces for testing in 19.2.&lt;/li&gt;
&lt;li&gt;Type equality and hashing functions (&lt;code&gt;type..&lt;/code&gt;).This accounts for about 1.2% of the CockroachDB 19.1 binary, and is predicted to increase with the increasing use of code generation for optimizations inside CockroachDB 19.2.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;as &lt;a href=&quot;https://science.raphael.poss.name/go-calling-convention-x86-64.html&quot;&gt;discussed in my previous article&lt;/a&gt;, Go uses memory instead of registers to pass arguments and return values across function calls. On x86/x86-64, memory-accessing instructions use longer machine encodings than register-only instructions.In my experience, this is specifically the inflection point for the ratio between source code size and compiled code size in a monomorphic C-like language: when targeting fixed-length instruction encodings and/or a memory-heavy calling convention, the size of the compiled code grows larger than the source code (excluding comments and whitespace). We can see this with both C on ARMv6 (no Thumb) or Go on x86(-64).When targeting variable-length instruction encodings and the calling convention suitably utilizes the more compact instructions, the size of the compiled code becomes smaller than the source code. We can see this with C on x86(-64) with a decent compiler, but, as examined here, not with Go.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;❦❦❦&lt;/p&gt;
&lt;h2 id=&quot;summary-and-conclusion&quot;&gt;Summary and Conclusion&lt;/h2&gt;
&lt;p&gt;To understand the internal structure of executable files compiled from Go, I built a D3 visualization using zoomable &lt;a href=&quot;https://en.wikipedia.org/wiki/Treemapping&quot;&gt;tree maps&lt;/a&gt;. This visualization is &lt;a href=&quot;https://github.com/knz/go-binsize-viz&quot;&gt;published on GitHub&lt;/a&gt; and has been tested to work with any executable produced by Go versions between 1.4 and 1.12.&lt;/p&gt;
&lt;p&gt;Using this tool, I have analyzed the space usage inside the monolithic&lt;a href=&quot;http://www.cockroachlabs.com/&quot;&gt;CockroachDB&lt;/a&gt; binary, &lt;code&gt;cockroach&lt;/code&gt;. I discovered that the majority of the growth of &lt;code&gt;cockroach&lt;/code&gt; over time is concentrated in one object, &lt;code&gt;runtime.pclntab&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This object is automatically generated by the Go compiler to support the generation of textual stack traces at run-time, for example in error reports.&lt;/p&gt;
&lt;p&gt;A design choice made in Go 1.2 causes this object to grow super-linearly in the &lt;em&gt;number&lt;/em&gt; of functions in a program, in addition to the sum of their sizes. Between CockroachDB 1.0 and 19.1, &lt;code&gt;runtime.pclntab&lt;/code&gt; grew by 230% while the total amount of source code only increased by 40% and compiled code by 100%.&lt;/p&gt;
&lt;p&gt;This design choice was intended to lower the start-up time of programs, and contrasts with the previous design using compressed tables—which is, incidentally, the industry standard for other C-like languages, even in contemporary compilers. This performance goal is not relevant to server software with long-running processes, like CockroachDB, and its incurred space cost is particularly inconvenient for large, feature-rich programs.&lt;/p&gt;
&lt;h2 id=&quot;copyright-and-licensing&quot;&gt;Copyright and licensing&lt;/h2&gt;
&lt;p&gt;Copyright © 2019, Raphael ‘kena’ Poss. Permission is granted to distribute, reuse and modify this document according to the terms of the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt;http://creativecommons.org/licenses/by-sa/4.0/&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 29 Dec 2019 17:32:07 +0000</pubDate>
<dc:creator>caiobegotti</dc:creator>
<og:type>article</og:type>
<og:title>Why are my Go executable files so large? | Cockroach Labs</og:title>
<og:description>Overview I built some tooling to extract details about the contents of a Go executable file, and a small D3 application to visualize this information interactiv</og:description>
<og:url>https://www.cockroachlabs.com/blog/go-file-size/</og:url>
<og:image>https://www.cockroachlabs.com/wp-content/uploads/2019/05/JSON_Part2_WentingLi.jpg</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cockroachlabs.com/blog/go-file-size/</dc:identifier>
</item>
<item>
<title>Focus has become more valuable than intelligence (2018)</title>
<link>https://alexand.ro/2018/08/how-focus-became-more-valuable-than-intelligence</link>
<guid isPermaLink="true" >https://alexand.ro/2018/08/how-focus-became-more-valuable-than-intelligence</guid>
<description>&lt;p&gt;This may be the most important problem of our lifetime.&lt;/p&gt;
&lt;p&gt;An individual is considered valuable to the society, to other people and to itself by the ability he has to apply what he knows in order to craft solutions to different problems or visions. The difficulty of the problem may vary: from rock climbing where your undivided focus and concentration decides every second if you will remain alive or not, to problem solving that may decide the future of your company or life.&lt;/p&gt;
&lt;p&gt;In our days we need to solve problems harder than ever before and we have a lot of intelligent people to do that. Or do we? You see, even if you are intelligent, there is a prerequisite every single time you wake up which will decide if your intelligence will be used or wasted that day. That prerequisite is focus.&lt;/p&gt;
&lt;h3 id=&quot;a-wasted-day-may-lead-to-a-wasted-life&quot;&gt;A wasted day may lead to a wasted life&lt;/h3&gt;
&lt;p&gt;Every single day you have the opportunity to do what &lt;em&gt;you&lt;/em&gt; want. It may be anything from relaxing to building a rocket that will send us to Mars, is your decision, but the question is: will you be able to do what you want during that day? In the year 2018 where the economy and technology are their high, I wish you good luck.&lt;/p&gt;
&lt;p&gt;Once you wake up, everything starts competing for your attention: every single channel on your TV, every single application on your phone, that device that you plan to use today needs special attention because is not charged and has full memory, the light bulb is blinking, the heating unit stopped working and you have notifications over notifications on your phone. You didn’t even manage to start what you planned for that day and the morning is already gone. Now you leave your house and the whole city competes for your attention: bars, restaurants, promoters inviting you inside for a coffee, ice cream, opposite sex trying to compete for your attention either directly or indirectly. Every single product or business tries to win a few seconds of your time, that’s how they survive in the end.&lt;/p&gt;
&lt;p&gt;With all of these distractions to handle, your head is already full of something completely different that you wanted to.&lt;/p&gt;
&lt;h3 id=&quot;doing-only-one-thing-became-boring&quot;&gt;Doing only one thing became boring&lt;/h3&gt;
&lt;p&gt;The advertisements are getting better and better on psychologically competing for our attention by creating emotions inside us. Our brain got used with the unlimited hits of instant gratifications from the notifications and with doing multiple things in the same time, because “it’s easy to be in a meeting and also reply to messages, it’s taking only a few seconds”. This false perception made our brain hyperactive and reluctant to do “only 1 thing at a time” like reading, solving problems, pay attention when we hang out with people, taking a shower without listening to music, etc.&lt;/p&gt;
&lt;p&gt;If you’re trying to dive deep in a certain domain like coding, playing an instrument, or any other activity that requires your undivided attention, you’ll be full of sweat after 5 minutes of not checking the phone. You will never reach the level of knowledge and skills required to be a valuable person in that domain.&lt;/p&gt;
&lt;h3 id=&quot;focus-effects-in-long-term&quot;&gt;Focus effects in long term&lt;/h3&gt;
&lt;p&gt;It may not ring any emergency bell in the present moment, and especially that you’re doing “so many things” at once, you will start to think that you’re doing an amazing job.&lt;/p&gt;
&lt;p&gt;Let’s zoom out a bit, how much did it matter in the last 2 years that you checked and responded to your notifications every 5 minutes? The answer is actually a lot, but not in a positive way. Almost nothing is that urgent to make your life stagnate for 2 years. If you lift your phone every 5 minutes, how much will you be able to work on your goals? And if you do manage to work on them, what quality do you think those goals have?&lt;/p&gt;
&lt;p&gt;To build solutions that will have a big impact now and in the future requires an amount of brainpower and concentration which will make you forget that your body even exists, you will not even be aware of the fact that you’re breathing or of your environment. You can’t achieve that by thinking about random things and by being reactive to the unlimited distractions in the environment.&lt;/p&gt;
&lt;p&gt;Every single day you don’t work on your goals, you’re pushing away the day when your vision becomes reality. If a random distraction is more fun than working on your goals, then your goals are not great enough. You should have goals that make you shiver with excitement just by thinking about them.&lt;/p&gt;
&lt;h3 id=&quot;managing-focus-when-you-have-multiple-passions&quot;&gt;Managing focus when you have multiple passions&lt;/h3&gt;
&lt;p&gt;This can be a tragedy disguised as a blessing. You have an incredible passion for life and all of the modalities that you can improve it for you and others, but there’s limited time and infinite possibilities. We can’t do things in parallel.&lt;/p&gt;
&lt;p&gt;This is when you start working on one of your passions, but after 1-2 minutes you stop because you remember of your other passion which seems a bit more important or urgent. After you switch, you find reasons to go back to the first one. In the end you create decision paralysis and don’t do nothing. The only thing left is to just go in the corner of the room and start crying because of the anxiety created by the lack of commitment to one of them.&lt;/p&gt;
&lt;p&gt;This requires commitment and the willingness to lose the other things that you are not doing at the moment. If you are not willing to do that, it means that the current passion is not the right one to work on.&lt;/p&gt;
&lt;h3 id=&quot;lack-of-purpose&quot;&gt;Lack of purpose&lt;/h3&gt;
&lt;p&gt;Purpose is the most important word in the dictionary for me. This is the key in life for happiness, passion, fulfilment, joy and all of the positive states that you can have. When you have a purpose and you’re working on it, it doesn’t matter what happens in the outside world or how bad your current situation is. The first step you take towards your purpose, you will feel all of that anxiety and worry disappear from your shoulders.&lt;/p&gt;
&lt;p&gt;When you have a clear purpose you have order in your life. You know what you want and don’t want, what you accept and don’t accept. You are in control of your mind and life.&lt;/p&gt;
&lt;p&gt;Your purpose and how strong it is, will determine your ability to focus, even after your brain got damaged by the times we live today.&lt;/p&gt;
&lt;h3 id=&quot;be-willing-to-lose-people&quot;&gt;Be willing to lose people&lt;/h3&gt;
&lt;p&gt;I care about my friends with all of my heart. I may look emotionless to many people, especially to new ones, but when it comes about their lives and struggles I’m all in. Sometimes I think that I was blessed to have these amazing people in my life and its one of the rare times that my emotions come close to my logical thinking. I meet new people every day and I can recognise instantly if we’ll have a special long-term relationship or not. And most of the times we have, but there’s a catch: you have to be willing to let them go. I know is hard, I know you had an amazing connection after just the first 1-2 days or weeks, just imagine the potential of that relationship long term.&lt;/p&gt;
&lt;blockquote readability=&quot;5&quot;&gt;
&lt;p&gt;Why would you let go of someone that you care about? Isn’t that hard?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is, but think about this: why would they go in the first place? If they understand where are you coming from and where are you going and they like that, then they will stick around. If they feel that they don’t receive enough attention, which will be inevitable when you are progressing on your purpose, then they will try to change that, they will try to make you change your behaviour, activities and priorities in a way that you will spend more time with them. It’s your decision if you want to do that, but imagine if you change your priorities after each new person that will come in your life, who will you be? You will be a mere shadow shaped by other people’s requirements to keep the relationships and you will never exist, you will never have your own identity.&lt;/p&gt;
&lt;p&gt;You need to have enough respect for yourself to have your own identity that people can align with: those who like it will stay and this is exactly who you want, those who don’t or don’t understand, you must be willing to let them go, no matter how great was the beginning or how good their intentions may look.&lt;/p&gt;
&lt;p&gt;I have friends/mentors which I cannot speak every day, week or month, but I know them and they know me, we are aware of where we are heading and think about each other, we don’t need to ask “how are you” because we already know the answer, and when we finally meet, we may be a bit sad that it was a long time, but we are much more happy because we know that we accomplished amazing things which we want to share.&lt;/p&gt;
&lt;p&gt;You can be the most intelligent person on earth, if you don’t have the focus which will enable you to use that intelligence, then the potential is gone.&lt;/p&gt;
</description>
<pubDate>Sun, 29 Dec 2019 16:31:30 +0000</pubDate>
<dc:creator>alexandroo</dc:creator>
<og:title>How Focus Became More Valuable Than Intelligence</og:title>
<og:description>This may be the most important problem of our lifetime.</og:description>
<og:url>https://alexand.ro/2018/08/how-focus-became-more-valuable-than-intelligence</og:url>
<og:image>https://alexand.ro/assets/images/2018-08-23-how-focus-became-more-valuable-than-intelligence.jpg</og:image>
<og:type>article</og:type>
<dc:format>text/html</dc:format>
<dc:identifier>https://alexand.ro/2018/08/how-focus-became-more-valuable-than-intelligence</dc:identifier>
</item>
<item>
<title>IncludeOS: a minimal unikernel operating system for C++ services</title>
<link>https://www.includeos.org/</link>
<guid isPermaLink="true" >https://www.includeos.org/</guid>
<description>&lt;p&gt;IncludeOS allows you to run your application in the cloud without an operating system. IncludeOS adds operating system functionality to your application allowing you to create performant, secure and resource efficient virtual machines.&lt;/p&gt;
&lt;p&gt;IncludeOS applications boot in tens of milliseconds and require only a few megabytes of disk and memory.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/includeos/IncludeOS&quot;&gt;[View on Github]&lt;/a&gt; &lt;a href=&quot;https://goo.gl/NXBVsc&quot;&gt;[Chat on Slack]&lt;/a&gt; &lt;a href=&quot;https://www.includeos.org/technology.html&quot;&gt;[Tell me more]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To run a service with IncludeOS on Linux or macOS you do not need to install IncludeOS, however you need to install a few dependencies depending on the service you will run. You can start by trying out our simplest hello_world service. For this service you will need the following dependencies.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Conan package manager&lt;/li&gt;
&lt;li&gt;cmake, make, nasm&lt;/li&gt;
&lt;li&gt;clang, or alternatively gcc on linux. Prebuilt packages are available for clang 6.0 and gcc 7.3&lt;/li&gt;
&lt;li&gt;qemu&lt;/li&gt;
&lt;li&gt;python3 packages: psutil, jsonschema&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With the above dependencies you should be able to build an application within minutes.&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conan config install https://github.com/includeos/conan_config.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/includeos/hello_world.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir build_hello_world
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build_hello_world
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conan install ../hello_world &lt;span class=&quot;nt&quot;&gt;-pr&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ./activate.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake ../hello_world
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot hello
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The hello world booted service should look like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot; readability=&quot;7&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;================================================================================
 IncludeOS 0.14.1-1093 (x86_64 / 64-bit)
 +--&amp;gt; Running [ Hello world - OS included ]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Hello world
    [ main ] returned with status 0
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For detailed instructions see the &lt;a href=&quot;https://github.com/includeos/IncludeOS/blob/master/README.md&quot;&gt;GitHub README&lt;/a&gt;. Once installed we suggest looking at and booting a few of the demo-examples to familarize yourself with the system.&lt;/p&gt;
&lt;p&gt;We strive to make it easy to create fast and useful services. The below code will set up a simple TCP echo service and happily talk to anyone connecting.&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;os&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;net/interfaces&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Get the IP stack thats already been automatically configured
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interfaces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Setup a TCP echo server on port 7 (echo port)
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Log incomming connections on the console:
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Connection &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; established&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// When data is received, echo back
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The network configuration of the virtual machine can reside in a JSON file, named config.json, placed in the same folder. It should look something like this, depending on your need:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot; readability=&quot;8.5&quot;&gt;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;
&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;net&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iface&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dhcp-with-fallback&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.0.0.42&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;netmask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;255.255.255.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gateway&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;
&lt;p&gt;For security related inquires please send email to security@includeos.org. You can use our &lt;a href=&quot;https://pgp.mit.edu/pks/lookup?search=security@includeos.org&amp;amp;op=index&quot;&gt;PGP key&lt;/a&gt; to encrypt the email.&lt;/p&gt;
&lt;p&gt;This project is maintained by Alfred Bratterud.&lt;/p&gt;
</description>
<pubDate>Sun, 29 Dec 2019 13:47:57 +0000</pubDate>
<dc:creator>lelf</dc:creator>
<og:title>IncludeOS - Run your application with zero overhead</og:title>
<og:description>IncludeOS allows you to run your application in the cloud without an operating system. IncludeOS adds operating system functionality to your application allowing you to create performant, secure and resource efficient virtual machines.</og:description>
<og:url>http://www.includeos.org/</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.includeos.org/</dc:identifier>
</item>
<item>
<title>Google’s Monopoly is Stifling Free Software?</title>
<link>https://medium.com/@byuu_san/googles-monopoly-is-stifling-free-software-e63dea114f39</link>
<guid isPermaLink="true" >https://medium.com/@byuu_san/googles-monopoly-is-stifling-free-software-e63dea114f39</guid>
<description>&lt;div readability=&quot;6.1025641025641&quot;&gt;

&lt;div class=&quot;du&quot;&gt;
&lt;div class=&quot;n dv dw dx dy&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;&lt;a rel=&quot;noopener&quot; href=&quot;https://medium.com/@byuu_san?source=post_page-----e63dea114f39----------------------&quot;&gt;&lt;img alt=&quot;byuu&quot; class=&quot;r dz ea eb&quot; src=&quot;https://miro.medium.com/fit/c/96/96/2*pqqXoDQn6_4Jo9MsclxA8Q.png&quot; width=&quot;48&quot; height=&quot;48&quot;/&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;2011&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;Google has an undeniable monopoly on search, and a near-monopoly on web browsing software via Chrome and its forks. And even alternative browsers such as Mozilla’s Firefox reference Google’s Safe Browsing service to decide on the trustworthiness of downloads.&lt;/p&gt;
&lt;p id=&quot;a788&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;Stopping the spread of malware is a laudible goal, but a consequence of this is directly harming free and open source software developers from being able to release their software without paying expensive certificate authority rent-seeking fees.&lt;/p&gt;
&lt;p id=&quot;bae7&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;If a software developer attempts to release a new version of their software online, they’re likely to be met with this warning in their Google Search Console:&lt;/p&gt;

&lt;p id=&quot;2eb3&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;By definition and with no exceptions, &lt;strong class=&quot;fo gx&quot;&gt;all&lt;/strong&gt; software is uncommon when it is first released.&lt;/p&gt;
&lt;p id=&quot;beb3&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;It doesn’t matter that you’ve had your domain for fourteen years without ever having hosted anything malicious:&lt;/p&gt;

&lt;p id=&quot;121a&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;It doesn’t matter if none of seventy-two virus scanners flag any malicious content in your executable:&lt;/p&gt;

&lt;p id=&quot;7916&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;It doesn’t matter if you request a review from Google which comes back clear:&lt;/p&gt;

&lt;p id=&quot;1b2a&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;The warnings just come back, often times on the very same file you’ve already had reviewed.&lt;/p&gt;
&lt;p id=&quot;a271&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;This isn’t just a scary warning that is easily ignored: web browsers will warn users that your software might be malicious. And it’s clear from Google’s warning that it considers your site compromised, which can lead to search result penalties including delisting.&lt;/p&gt;
&lt;p id=&quot;40f7&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;This in spite of the fact that you’ve done nothing wrong other than release software onto the web.&lt;/p&gt;
&lt;p id=&quot;7691&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;This process is totally opaque: How many downloads are needed before the software is no longer considered uncommon? How long can your site host an uncommon download before a penalty is applied to it in search? Will obtaining a Windows code signing certificate alleviate these warnings or not? Does it have to be an EV certificate?&lt;/p&gt;
&lt;p id=&quot;6801&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;So let’s say you want to get a code signing certificate to see if that helps:&lt;/p&gt;

&lt;p id=&quot;272e&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;What a deal for a small free software developer. Also, you need to have a registered business that is verified by the Better Business Bureau to receive your EV certificate.&lt;/p&gt;
&lt;p id=&quot;be2f&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;If you’d like a regular certificate, you can do so by attaching your public legal name to your software and sending in a copy of your driver’s license. And that is to say nothing of the risks you take these days online by publishing your legal name.&lt;/p&gt;
&lt;p id=&quot;8beb&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;And even if you do all of this and start signing your executables, I still can’t find any assurance whether Google will begin to treat these executables as safe or not.&lt;/p&gt;
&lt;p id=&quot;f1a0&quot; class=&quot;fm fn dc bk fo b fp fq fr fs ft fu fv fw fx fy fz&quot;&gt;In my own case, this has effectively prevented me from releasing compiled binaries of my own software going forward. If code signing is a requirement to distribute free software, then we need a Let’s Encrypt-style alternative for code signing— yesterday. If not, then Google needs a policy change on how it handles new software releases from free and open source software developers.&lt;/p&gt;
</description>
<pubDate>Sun, 29 Dec 2019 11:38:03 +0000</pubDate>
<dc:creator>byuu</dc:creator>
<og:type>article</og:type>
<og:title>Google’s Monopoly is Stifling Free Software</og:title>
<og:description>Google has an undeniable monopoly on search, and a near-monopoly on web browsing software via Chrome and its forks. And even alternative…</og:description>
<og:url>https://medium.com/@byuu_san/googles-monopoly-is-stifling-free-software-e63dea114f39</og:url>
<og:image>https://miro.medium.com/max/716/1*E6wn_ALLvQ0e8ecBvNHRMA.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@byuu_san/googles-monopoly-is-stifling-free-software-e63dea114f39</dc:identifier>
</item>
<item>
<title>Steel Bank Common Lisp 2.0</title>
<link>http://www.sbcl.org/all-news.html?2.0.0#2.0.0</link>
<guid isPermaLink="true" >http://www.sbcl.org/all-news.html?2.0.0#2.0.0</guid>
<description>&lt;p&gt;New SBCL versions are usually released at the end of each month: check the &lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=1373&quot;&gt;Sourceforge File List&lt;/a&gt; to see the current version. The new features of all SBCL releases are listed below.&lt;/p&gt;
&lt;div&gt;
&lt;h2&gt;New in version 2.0.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: heap relocation now works on Windows. Since this feature now works on all platforms, it is enabled unconditionally and the :RELOCATABLE-HEAP symbol no longer appears on *FEATURES* in any builds. (Thanks to Luís Borges de Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: malformed type specifiers and occurrences of deprecated types in :TYPE initargs of DEFCLASS and DEFINE-CONDITION slot specifications are detected and result in compile-time errors and warnings respectively.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: parallel contrib building, controlled by SBCL_MAKE_JOBS=-jX the same as for the C runtime.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: add a walker template for WITH-SOURCE-FORM.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: start the summary of a compilation unit on a fresh line. (Thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on Windows, PARSE-NATIVE-NAMESTRING produces an absolute directory when parsing a bare drive name and :AS-DIRECTORY is specified. (Thanks to Luís Borges de Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on RISCV, the runtime is linked with libz if the core compression feature is requested. (Thanks to Andreas Schwab)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ADJOIN using an EQL test and a KEY function only transforms into an EQ test if the key function returns values for which EQ and EQL are guaranteed to be the same.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimizations:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the instruction sequence for multiple-value calls is more efficient on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the direction flag is now unused on x86 and x86-64 when handling an unknown number of return values. (Thanks to Fanael Linithien)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the x86-64 backend is better able to use memory operands for arithmetic operations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compilation of TYPECASE to a jump table is enabled when all the types being tested are frozen.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compilation of CASE and ECASE into a jump table has been implemented on 32- and 64-bit powerpc platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the implementation of Unicode normalization has been sped up.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;pretty-printing dispatch on conses is faster, particularly with the standard pretty-print dispatch table. Deeply-nested forms should also pretty-print faster.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;a message intended to be more helpful will be displayed for an mmap failure on OpenBSD.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the soft-float ABI on ARM32 is better supported, in particular in returning double floats from calls into C.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimizations:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;CASE and ECASE with symbols as keys may be optimized into a vector lookup if all result forms are quoted or self-evaluating objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CASE and ECASE can be optimized into a jump table on the x86[-64] backends with arbitrary result forms provided that the clause keys are either all fixnums, all characters, or all symbols.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a number of forms are converted to use CASE in circumstances where that makes sense, including calls to POSITION, MEMQ and MEMBER, and TYPECASE where the types are MEMBER/EQL types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;POSITION of a variable symbol in a constant sequence of symbols is converted to CASE and thence to a jump table.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;TYPECASE of a variable where the clauses are member types is converted to CASE and thence to a jump table.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a number of slow instructions are no longer used on x86 and x86-64 machines. (Thanks to Fanael Linithien)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the compiler is better at tracking the implications of branches after EQ and EQL tests.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;parsing &amp;amp;KEY lists is slightly less register-intensive.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a pattern-based peephole optimizer pass has been added, running some simple transformations on the x86-64 backend.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancements: more thorough compile-time type checking of various initforms (defclass, &amp;amp;key, defstruct).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: unions of complicated CONS types are less likely to cause an infinite loop. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1799719&quot;&gt;#1799719&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DESCRIBE on functions not named by extended function designators no longer signals a type error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1850531&quot;&gt;#1850531&lt;/a&gt;, reported by Michal Herda)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;support for Mac OS X Catalina&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements in interoperability with C code compiled with memory sanitization options&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;libsbcl.so links to zlib when sb-core-compression is enabled. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1845763&quot;&gt;#1845763&lt;/a&gt;, thanks to Juan M. Bello-Rivas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;workarounds for BSD issues around mmap() and pthread_attr_setstack(). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1845936&quot;&gt;#1845936&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;support SSE for bzero if available on OpenBSD&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimizations:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;improved type understanding and translations for division operators (including TRUNCATE, GCD, LCM).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;sequential comparisons and branches can elide intermediate comparisons. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1847284&quot;&gt;#1847284&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;convert EQUAL and EQUALP to EQL if either of the arguments is a type for which the structural equality predicate is identical to the simpler equality check. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1848583&quot;&gt;#1848583&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;internal operators implementing string comparisons produce simpler-to-consume values. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1848776&quot;&gt;#1848776&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: inspecting adjustable arrays and vectors with fill pointers works better. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1846191&quot;&gt;#1846191&lt;/a&gt;, reported by Yves Pagani)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;many bug fixes to the experimental 64-bit PowerPC/Linux port, to the extent that the little-endian variant passes all applicable tests in the regression test suite; the big-endian variant currently has some failures&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;experimental support for sb-threads on 64-bit PowerPC/Linux&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;support threads on x86-64 Sun OS (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1841280&quot;&gt;#1841280&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;handle PAX restrictions on mprotect() on NetBSD&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;experimental support for HaikuOS&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the runtime is built as a position-independent executable by default on x86-64 Linux and x86-64 Darwin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes and enhancements related to Unicode:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;update of the data files to Unicode 8.0&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix a bug in the implementation of the Unicode line breaking algorithm regarding hebrew letters and hyphens&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: add a restart to OPEN with :IF-EXISTS :ERROR to allow re-opening with :APPEND. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/806398&quot;&gt;#806398&lt;/a&gt;, reported by Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler optimizations on SEARCH with :FROM-END T didn't account for the empty sequence. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1844821&quot;&gt;#1844821&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: handle SETF of nested empty VALUES correctly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1806478&quot;&gt;#1806478&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: FLOOR and CEILING on rationals are simpler, and the compiler's understanding of them is better.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;experimental support for 64-bit PowerPC running Linux (extending Brian Bokser's work from 2018), on both the v1 and v2 ABIs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:SEARCH-ROOTS discovers paths from live objects to the roots keeping them alive.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: string output streams created with :ELEMENT-TYPE 'BASE-CHAR use internal buffers of BASE-STRING instead of UCS-4 strings restricted to the ASCII range, yielding a theoretical 4:1 space reduction.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved make-array type derivation for multi-dimensional arrays. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838442&quot;&gt;#1838442&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compliant redefinition of classes whose previous definition caused argument mismatch errors does not generate errors any more. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1840595&quot;&gt;#1840595&lt;/a&gt;, reported by 3b on #sbcl)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixes for issues caught by the random tester:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;never derive the type of TRUNCATE on arbitrary numbers as the empty type. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838267&quot;&gt;#1838267&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;provide out-of-line definitions for internal machinery related to FLOAT-SIGN. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838337&quot;&gt;#1838337&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;include COMPLEX in the derived type of SIGNUM when appropriate. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838333&quot;&gt;#1838333&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more correct internal type testing for function types. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838808&quot;&gt;#1838808&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838888&quot;&gt;#1838888&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838986&quot;&gt;#1838986&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;don't assume that all objects of type (NOT SIMPLE-ARRAY) have an array header. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838827&quot;&gt;#1838827&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;recognize that PHASE on non-positive numbers can return 0 as well as PI. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1838892&quot;&gt;#1838892&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SunOS: bug reports and patches from Richard Lowe in sb-posix tests (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1837495&quot;&gt;#1837495&lt;/a&gt;), sb-concurrency tests (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1837817&quot;&gt;#1837817&lt;/a&gt;), unencapsulated tracing (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1837307&quot;&gt;#1837307&lt;/a&gt;), float registers in interrupt contexts (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1837168&quot;&gt;#1837168&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: do not generate version.lisp-expr from git describe if the git repository is not sbcl's own. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1836663&quot;&gt;#1836663&lt;/a&gt;, thanks to Richard Lowe)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler crash related to VALUES-LIST on a &amp;amp;REST argument in some contexts. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1836096&quot;&gt;#1836096&lt;/a&gt;, reported by Samuel Jimenez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler hang related to constraint propagation. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1835599&quot;&gt;#1835599&lt;/a&gt;, reported by Mark Cox)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the inspector showed the wrong array element type. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1835934&quot;&gt;#1835934&lt;/a&gt;, reported by Richard M Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: numerous improvements to hash table access and rehashing&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ASSERT compiles into substantially more compact code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1835221&quot;&gt;#1835221&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: hash tables on 64-bit machines consume roughly 20% less memory but can only grow to hold 2^31 entries (theoretically) due to use of 31-bit indices internally.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;RISC-V: improve rotate-byte support (thanks to Philipp Matthias Schaefer)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the system reasons more correctly regarding the array rank of complicated array types. (reported by Bart Botta)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DOUBLE-FLOAT-P never gets weaked to NUMBERP. (reported by Bart Botta)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the regression test suite can now benefit from paralellism, completing much faster when enough compute power is available.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: readtables with non-base-char dispatch characters are less inefficient.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: INTERN performs fewer redundant type checks.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: tests for PATHNAMEP and STRUCTURE-OBJECT (including in computing hash functions) are faster.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;RISC-V: numerous bug fixes and improvements&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;all platforms: better run-program performance when used from multiple threads.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: (declaim (optimize (debug 2))) ensures compilation of top-level forms, providing better debugging for simple forms that are otherwise &quot;byte-code interpreted&quot; when compiled into FASLs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: use of finalizers could in rare circumstances cause a crash in the garbage collector.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: show extended function designators, e.g. (setf foo), in the disassembler&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: reduced overhead of calling NTH/NTHCDR.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved FLOAT-SIGN on DOUBLE-FLOATs on 64-bit platforms&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: RISC-V support with the generational garbage collector.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: command-line option &quot;--tls-limit&quot; can be used to alter the maximum number of thread-local symbols from its default of 4096.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better muffling of redefinition and lambda-list warnings&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;platform support:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;OS X: use Grand Central Dispatch semaphores, rather than Mach semaphores&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Windows: remove non-functional definition of make-listener-thread&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: decimal reader syntax for rationals, using the R exponent marker and/or *READ-DEFAULT-FLOAT-FORMAT* of RATIONAL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: various Unicode tables have been packed more efficiently&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: restarts for missing package errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: FIND-PACKAGE should be faster even when run in the context of a package with local package-nicknames.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: fix TRUNCATE deftransform's results to have well-defined signs&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: thread-safety problems in RUN-PROGRAM with :PTY.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SLEEP transform could never fire.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;build enhancement: defend against quirky host floating point implementation&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;test enhancement: allow more parallelism in running the regression test suite&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.5.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-COVER emulates IN-PACKAGE when recording source maps; this makes it possible to generate coverage for forms that uses local package nicknames, or otherwise must be read in the correct package.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;build enhancement: new host quirks mechanism, support for building under ABCL and ECL (as well as CCL, CMUCL, CLISP and SBCL itself)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: (FIND-SYMBOL x &quot;P&quot;) for constant &quot;P&quot; executes faster, subject to &quot;P&quot; not being a package-local nickname of any package. Similarly INTERN. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1814924&quot;&gt;#1814924&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: bounds checks are elided when possible where the same array is dereferenced multiple times.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: initargs are now deduplicated when computing effective slots.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TREE-EQUAL with :TEST 'EQL now correctly computes its answer. (reported by Bahodir Mansurov)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiled (COERCE x 'FLOAT) no longer coerces double-floats into single-floats. (reported by J. Gareth Williams)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.16&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: ENSURE-DIRECTORIES-EXIST no longer establishes a CONTINUE restart in case of an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: Defining macros (DEFVAR, etc) which require a symbol as the name will fail to macroexpand if given a non-symbol.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the unexported restart names SB-{ALIEN,FASL,IMPL,PCL}::RETRY have been replaced by SB-EXT:RETRY.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.15&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: added AVX2 instructions on x86-64, which can be used with SB-SIMD-PACK.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: specializer name parsing is less lenient and signals a specific condition in case of syntax errors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1808681&quot;&gt;#1808681&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: provide interactive restarts for some file-system errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: COMPILE no longer acquires the world lock. (fixes most occurrences of &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/308959&quot;&gt;#308959&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RUN-PROGRAM is more responsive and less likely to deadlock (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1702178&quot;&gt;#1702178&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1808641&quot;&gt;#1808641&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: traceroot can search for simple-fun targets (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1808659&quot;&gt;#1808659&lt;/a&gt;, reported by Michal Herda)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler bug fixes:
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: attempting to build on openbsd 6.0 or newer without the wxallowed mount option now results in a more useful error message.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: by popular demand, SB-EXT now exports two functions HEAP-ALLOCATED-P and STACK-ALLOCATED-P to assist in writing debug assertions that objects in hash-tables are not stack-allocated, etc.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restored sb-thread support on OpenBSD.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: PRINT-TYPE and PRINT-TYPE-SPECIFIER are not exported from SB-EXT. These were never announced, so this change would only affects users who discovered these undocumented functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:SEARCH-ROOTS and SB-EXT:GC-AND-SEARCH-ROOTS are supported on all backends that use gencgc.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: a number of platform-specific elements of *FEATURES* related to whether the system implements particular strategies have been removed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: some changes to the (internal) implementation details of the x86 and x86-64 have necessitated changes to some low-level libraries.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: attempting to transfer control through GO or RETURN-FROM to frames which no longer exist are now caught and handled by the debugger.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: identical code (at the machine instruction level) can now be shared between functions, if explicitly requested.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:STRING-TO-OCTETS and SB-EXT:OCTETS-TO-STRING are now documented.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixes: fix a number of bugs revealed by random testing (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1793171&quot;&gt;#1793171&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1793150&quot;&gt;#1793150&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1791550&quot;&gt;#1791550&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1792030&quot;&gt;#1792030&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1791059&quot;&gt;#1791059&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1790157&quot;&gt;#1790157&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1790717&quot;&gt;#1790717&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1790703&quot;&gt;#1790703&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: changes to the (internal) assembler on x86 and x86-64 may cause problems to some low-level third-party libraries:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new macro EA for defining an effective address, without size information;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;an explicit size modifier is now needed for MOVSX and MOVSZ instructions;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MOVD and MOVQ move a single size of operand by definition.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support the latest MinGW (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1786731&quot;&gt;#1786731&lt;/a&gt;, reported by il71)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: checks for modifications of constants can now be done in local (FLET/LABELS) functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved type checking routines for various compound types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: array bound checks are elided on vectors when the index is known to be less than the length, including LOOP ACROSS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the register allocator's use of temporaries is somewhat improved.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: checking widetags involves fewer conditional jumps on x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix a number of bugs related to constant improper lists as sequence arguments (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1768563&quot;&gt;#1768563&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1768568&quot;&gt;#1768568&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1768652&quot;&gt;#1768652&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: added SB-EXT:MAKE-WEAK-VECTOR.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: constant-modification detection warnings can be generated in the presence of conditional constructs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: better bounds-checking on x86[-64] and ARM64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: adding 1 to or subtracting 1 from a fixnum variable does not cons.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixes: fix a number of bugs revealed by random testing (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1782826&quot;&gt;#1782826&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1779878&quot;&gt;#1779878&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1779737&quot;&gt;#1779737&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-COVER instrumentation for x86[-64] has signficantly less overhead. The performance penalty for 64-bit code has been measured at around 30% slower than uninstrumented code as contrasted with slowdowns in excess of 100% previously.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: tracing a generic function with the :METHODS T option produces output corresponding to each method called under the default :ENCAPSULATE NIL tracing implementation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: updated TRACE documentation. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/574614&quot;&gt;#574614&lt;/a&gt; was actually already fixed, but there were other issues.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed x86 GC bug causing heap corruption. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1749369&quot;&gt;#1749369&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: improved compatibility with macOS High Sierra and graphical applications.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: redefinition of method combinations now does the expected thing; generic functions using that method combination have their effective methods lazily recomputed according to the new definition of the method combination. (Reported by Didier Verna at ELS 2018)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: :arguments argument to the long form of DEFINE-METHOD-COMBINATION is now implemented more correctly, supporting suppliedp variables and &amp;amp;optional defaults. (Reported by Bruno Haible, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309084&quot;&gt;#309084&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: better handling of unknown keyword arguments (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1750466&quot;&gt;#1750466&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: namestrings can now be computed for certain pathnames that previously did not have namestrings because of #\. characters in their name and/or type components.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiling a SLEEP call with a float positive infinity argument no longer causes an internal error (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1754081&quot;&gt;#1754081&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: keyword arguments provided to a generic function with EQL-specialized methods are checked more correctly (reported by Syll, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1760987&quot;&gt;#1760987&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: DISASSEMBLE on a symbol naming a macro will disassemble the expander, not the code that traps attempted FUNCALL of the macro.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The sb-sprof contrib now provides an experimental interface for accessing collected profiler data.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The instruction-level profiling of the sb-prof contrib annotates the disassembler output more efficiently.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved dynamic-extent handling of nested variables.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: building with/without the :sb-package-locks feature is no longer an option. Package locks are always compiled in, and removing :sb-package-locks from *features* will have no effect.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: FIND-PACKAGE does not acquire a mutex&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: cheneygc can perform heap relocation on startup&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: in threaded builds, finalizers execute in a system-internal thread so that a user thread which invokes GC is unblocked from performing work as soon it returns from GC and invokes any post-GC hooks. As such, it is more important than before to avoid assumptions about special variable bindings in finalizers, even in single-threaded code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster (funcall (or function symbol)) on x86-64.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: pathname accessors such as PATHNAME-DIRECTORY work on SYNONYM-STREAMs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (pathname-{device,directory,name,type} ... :case :common) works as expected. In particular MAKE-PATHNAME composed with the accessors roundtrips properly when both use the same :case. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1739906&quot;&gt;#1739906&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DIRECTORY no longer gets confused when the value of *DEFAULT-PATHNAME-DEFAULTS* has a name or type component. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1740563&quot;&gt;#1740563&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: pattern pieces in pathname components are correctly escaped during unparsing.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DELETE-DIRECTORY no longer signals an error when the directory is supplied as a pathname with name and/or type components containing escaped characters. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1740624&quot;&gt;#1740624&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: weak hash-tables no longer cause GC time to scale superlinearly (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1241771&quot;&gt;#1241771&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CANCEL-FINALIZATION operates in approximately constant time per operation (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1587983&quot;&gt;#1587983&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: big-endian MIPS systems now (mostly) work again (broken since 1.3.14.x).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtrace from arg-count errors on systems other than x86, x86-64, ARM, and ARM64 now works again.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtrace from asynchronous interrupts on non-x86, non-x86-64 systems should now be more reliable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: warnings and errors referring to bindings established by LET, LET*, FLET and LABELS point to the offending form more accurately.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: backtrace for invalid argument count produces the exact supplied arguments including the extra ones on all platforms (no longer just x86, x86-64, ARM, and ARM64).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SLEEP respects deadlines established by SB-SYS:WITH-DEADLINE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DECODE-TIMEOUT and operators accepting a timeout no longer signal an error when called with an argument that is of type (real 0) but not (unsigned-byte 62) (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1727789&quot;&gt;#1727789&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed heap exhaustion bug when consing millions of small objects&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-safepoint builds are now a lot less prone to deadlocks and odd crashes (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1424031&quot;&gt;#1424031&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1268710&quot;&gt;#1268710&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: argumentless CALL-NEXT-METHOD where specialized-to-T or unspecialized parameters are mutated now uses the original (non-mutated) parameter values (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1734771&quot;&gt;#1734771&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: memory faults from lisp no longer use (thread-and-interrupt unsafe) global storage for fault addresses (everywhere), and now have cleaner backtraces (on x86 and x86-64). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309068&quot;&gt;#309068&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: pathnames with a directory component of the form (:absolute {:up,:wild,:wild-inferiors}) no longer fail to unparse. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1738775&quot;&gt;#1738775&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more reliable signal handling on macOS.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-EXT:QUIT is no longer marked as deprecated and behaves like SB-EXT:EXIT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF updated to 3.3.1. The ASDF release is dedicated to the late Elias Pipping who put enormous amounts of work into it despite his terminal illness. Thank you and rest in peace. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1681201&quot;&gt;#1681201&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: alien routines compiled with '-fsanitize=thread' and/or '-fsanitize=memory' cause fewer false positives in error reporting.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: fewer instances of consing float constants at runtime.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a number of compiler bugs detected by Paul F. Dietz' randomized tester. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1731503&quot;&gt;#1731503&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1730699&quot;&gt;#1730699&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1723993&quot;&gt;#1723993&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1730434&quot;&gt;#1730434&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1661911&quot;&gt;#1661911&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1729639&quot;&gt;#1729639&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1729471&quot;&gt;#1729471&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1728692&quot;&gt;#1728692&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better errors from NAMESTRING and friends on pathnames with no namestrings. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/792154&quot;&gt;#792154&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EQUAL and EQUALP compiler transforms were too confident in deriving a result. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1732277&quot;&gt;#1732277&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1732225&quot;&gt;#1732225&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FILL sometimes returned the underlying data vector rather than the given array. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1732553&quot;&gt;#1732553&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SEARCH returned the wrong answer in some cases. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1732952&quot;&gt;#1732952&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the type (COMPLEX INTEGER) behaves more as specified by Function TYPEP, which has stronger constraints than System Class COMPLEX. (Reported by Eric Marsden, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1733400&quot;&gt;#1733400&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: faster foreign callbacks.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: complex arrays can be stack allocated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: PROCESS-KILL now exists on win32 and PROCESS-PID actually returns the PID.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the register allocation method used by the compiler when optimizing for speed is now faster for functions with large bodies.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-INTROSPECT:ALLOCATION-INFORMATION works on big-endian CPUs (fixes &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/490490&quot;&gt;#490490&lt;/a&gt; for real rather than by disabling a test)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: code objects and bignums of large enough size to be placed on GC pages without any other object no longer cause accidental copying during garbage collection. (gencgc only)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-fasteval failure with 0-argument lambdas (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1722715&quot;&gt;#1722715&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RUN-PROGRAM doesn't leak handles on win32 and PROCESS-CLOSE doesn't crash. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1724472&quot;&gt;#1724472&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.4.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: DESTRUCTURING-BIND treats non-toplevel () as nested empty pattern. This seems to be what the standard mandates, so conforming code should not be affected.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ehancement: (GC :GEN 7) with gencgc will zero-fill dead pseudo-static objects so that they do not spuriously cause reachability of objects that would have been otherwise dead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: PROCESS-STATUS now tracks stopped and continued processes properly (also fixes &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1624941&quot;&gt;#1624941&lt;/a&gt;, based on patch by Elias Pipping).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: INSPECT handles errors signaled while printing slot values. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/454682&quot;&gt;#454682&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DESCRIBE works on classes like it used to.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: *LOAD-PATHNAME* and *LOAD-TRUENAME* are bound to pathnames when processing a sysinit or userinit file&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: save-lisp-and-die is able to collect more garbage on non-x86oid gencgc targets.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed out-of-bounds array read in optimized POSITION on bit-vectors&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: signal emulation respects the 128-byte stack red zone on x86-64 macOS.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.21&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the CLOBBER-IT restart for defstruct redefintion has been removed after a 15 year deprecation cycle. Use the new name, RECKLESSLY-CONTINUE. Note also that this restart is hidden if deemed unsafe due to altered placement of untagged slots in the structure.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the assignment of -DSBCL_PREFIX= in src/runtime/GNUmakefile can be removed as a local patch, which results in an sbcl executable that finds its core file relative to itself by looking in &quot;../lib/sbcl&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: backends using the generational GC are able to relocate dynamic space anywhere the operating system places it. This feature can be disabled by removing :relocatable-heap from the build configuration. Not supported on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DEFMETHOD no longer signals IMPLICIT-GENERIC-FUNCTION-WARNING.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better type conflict detection for high order functions, e.g. (find x &quot;123&quot; :test #'=)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the tabular output of ROOM is aligned dynamically, preventing misaligned tables for larger sizes or counts.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ROOM reports on immobile space if applicable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: optimized external-format routines.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-INTROSPECT:ALLOCATION-INFORMATION returns :IMMOBILE instead of :FOREIGN for objects in immobile space.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: dotted lists in special forms and function call forms signal an appropriate error&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EQUALP hash tables with pathname keys now ignore internal slots. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1712944&quot;&gt;#1712944&lt;/a&gt;, reported by Jason Miller)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.20&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: DEF{GENERIC,METHOD} no longer accept some illegal lambda lists such as (defgeneric bar (foo &amp;amp;key foo)) or (defgeneric baz (t)) that were accepted before.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: a valueless &amp;amp;AUX binding in a BOA constructor does not force all slots reads in safe code to perform a full type check.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ATOMIC-PUSH and ATOMIC-POP generate better code&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the low-level debugger would erroneously print - or not print as the case may be - &quot;(bad-address)&quot; for some objects depending whether the --dynamic-space-size argument was used at Lisp startup&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a DEFCONSTANT with a non non-eql-comparable object as the value could cause miscompilation if that constant appeared as the default expression for an &amp;amp;OPTIONAL binding&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: generic function lambda lists are now checked for repeated and otherwise illegal entries. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1704114&quot;&gt;#1704114&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: setting gencgc_verbose = 1 could cause deadlock in fprintf() depending on the platform's stdio implementation. The relevant code has been changed to use snprintf() and write() instead.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.19&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: specialized arrays can be printed readably without using *read-eval*&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-DEBUG:PRINT-BACKTRACE truncates huge string arguments. The full string remains available for inspection via (SB-DEBUG:ARG).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtracing from several threads at once could fail&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: floating-point infinities could not be used as keys in EQUALP hash tables. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1696274&quot;&gt;#1696274&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: random sb-fasteval failures. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1642708&quot;&gt;#1642708&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: align the stack in callback wrappers to defend against C compiler over-aggressive use of SIMD. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1697528&quot;&gt;#1697528&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: don't try to find the class when reporting that a class does not exist for a primitive type. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1697226&quot;&gt;#1697226&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.18&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: existing values of CFLAGS, ASFLAGS, CPPFLAGS, and LINKFLAGS will be incorporated into C compiler invocations when building from source.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the result of WRITE-TO-STRING may be a BASE-STRING if all characters written are of type BASE-CHAR.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the broadcast stream with no output streams is a singleton object. That object satisfies OPEN-STREAM-P regardless of how many times CLOSE is invoked on it.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: x86[-64] backends contain an experimental feature which aids in demonstrating reachability of any object starting from a tenured object or a thread stack by producing a proof as a sequence of pointers to follow. The file &quot;tests/traceroot.test.sh&quot; contains an example usage.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: if the alien symbol &quot;gc_coalesce_string_literals&quot; is set to 1 prior to SAVE-LISP-AND-DIE, then similar string constants loaded from different fasl files may be collapsed to one object. If the variable is set to 2, then additionally strings which are STRING= in code resulting from COMPILE can be coalesced. For instance, two functions returning the literal string &quot;HI&quot; might return EQ strings after collapsing, which may be undesired in a particular use. The flag pertains to gencgc only.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SXHASH values on pathnames are better distributed&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-PATHNAME removes empty strings as components of a directory, as is permitted: &quot;Whenever a pathname is constructed the components may be canonicalized if appropriate.&quot;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: various printer and FORMAT performance enhancements.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GET-FOREGROUND no longer fails in case all other interactive threads exit (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1682671&quot;&gt;#1682671&lt;/a&gt;, reported by Syll)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RELEASE-FOREGROUND always removes the current thread from the list of interactive threads. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1682867&quot;&gt;#1682867&lt;/a&gt;, reported by Syll)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.17&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: memory overhead from the garbage collector's metadata is reduced on 64-bit architectures; no change for 32-bit.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: further garbage collector speedups affecting pinned objects on conservative backends, and simple-vectors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: on Linux a custom handler for SIGSEGV can be called for page faults outside of dynamic space by changing the C symbol &quot;sbcl_fallback_sigsegv_handler&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-cover does not lose source positions for AND/OR/COND.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: random disassembler failures. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1527931&quot;&gt;#1527931&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The bundled sb-md5 contrib has been updated to release 2.0.4 which is licensed under Creative Commons CC0 per author's statement https://github.com/pmai/md5/commit/fd134e71b71a10ab78905833a7cb9d4d6817c589 (Refer to NEWS and COPYING in the contrib/sb-md5 subdirectory)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.16&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: various small tweaks give around 5% faster garbage collection&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better detection of when an impossible code path does not need a warning. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1668619&quot;&gt;#1668619&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stronger attempts to disable position-independent executable building. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1668986&quot;&gt;#1668986&lt;/a&gt;, patch from Mark Wright)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: OPEN :IF-EXISTS NIL signalled a condition on Windows. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1674437&quot;&gt;#1674437&lt;/a&gt;, reported by Jan Idzikowski)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.15&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the reader will when feasible create new symbols using a BASE-STRING for the print name. Additionally, string literals can favor the base-string type if desired, though the default is to always return UTF-32 strings for compatibility. A preference for base-string does not disable reading Unicode. The choice is controlled via (SETF READTABLE-BASE-CHAR-PREFERENCE). If Unicode was disabled at build time, this setting does nothing.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SBCL generates more debug information by default.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: type errors provide context information, such as which variable is being bound, which slot of which structure is being set.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: if #+immobile-symbols is in build-time *FEATURES* (not enabled by default), then symbols will never be moved in memory except by SAVE-LISP-AND-DIE. Immobility has helpful implications for code generation as well as interaction with foreign routines. This feature can only be enabled if #+immobile-space is enabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: undefined function errors can be restarted on x86-64, to either retry calling the function again or call a user supplied function.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-ext:restrict-compiler-policy accepts an upper bound in addition to a lower bound.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: #+immobile-code improves the speed of function calling. Some delay may be noticed when redefining an existing function from a saved core file however.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;defaults change: sb-ext:*disassemble-annotate* default to NIL, due to its poor reliability.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-LINKABLE-RUNTIME, allowing linking with extra object files to help with delivery of executables. (Thanks to François-René Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: data race in GENTEMP fixed - it can no longer return the same interned symbol to multiple threads if called concurrently&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interrupting LOADing of FASLs does not leave functions without source locations. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/540276&quot;&gt;#540276&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DYNAMIC-EXTENT-declared results of NOTINLINE local functions were treated as if they were actually stack allocated (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1659964&quot;&gt;#1659964&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correctly handle the case of a non-local exit within a function terminating the extent of dynamic-extent, dynamic-bound variables in the presence of multiple-values (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1655011&quot;&gt;#1655011&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: handling of SB-SYS:WITH-PINNED-OBJECTS in the interpreters (both sb-eval and sb-fasteval) now actually pins objects on gencgc.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: AVX registers are preserved during exceptions on x86-64 macOS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (directory &quot;SOMETHING/*/**/MORE&quot;) is no longer equivalent to (directory &quot;SOMETHING/**/MORE&quot;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better console IO on Windows (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1660906&quot;&gt;#1660906&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the SB-PCL walker no longer recognizes macros expanding into a DECLARE expression. This is not a language change, since ANSI forbids such usage (X3J13 issue DECLARE-MACROS:FLUSH).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: for several macros such as MULTIPLE-VALUE-{BIND,SETQ}, COND, DO{,*,LIST}, {RESTART,HANDLER}-{BIND,CASE}, *CASE, conditions signaled during macroexpansion point to the form that caused the problem more accurately.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the &quot;--noinform&quot; command-line option inhibits output from save-lisp-and-die in addition to removing the startup banner.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PROCESS-KILL failed to return errno if the system call failed&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: slightly more comprehensive treatment of the keyword arguments to MAKE-ARRAY in compiler transformations.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SET triggers package locks on undefined variables. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1645152&quot;&gt;#1645152&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: new Windows specific option to run-program, :escape-arguments (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1503496&quot;&gt;#1503496&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: recompiling a MAKE-INSTANCE form with an initarg :INITARG CONSTANT where CONSTANT names a constant variable picks up the new value of CONSTANT in case it has been redefined. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1644944&quot;&gt;#1644944&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster TYPEP on undefined at compile-time types and upcoming class definitions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1082967&quot;&gt;#1082967&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: memory consumption of each STANDARD-OBJECT instance is reduced by 2 words if the compact-instance-header feature is enabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CONDITION instances are quicker to allocate.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: unoptimized calls to FILL on specialized vectors are now just as fast as T vectors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: get-timezone returns corret DST on 64-bit Windows. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1641058&quot;&gt;#1641058&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: cross reference information in fasls is no longer incompatible between different cores (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1648186&quot;&gt;#1648186&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: on x86-64, compiled functions loaded from fasl files can not be moved, but can be freed, by GC. Additionally, COMPILE will produce immobile code if SB-C::*COMPILE-TO-MEMORY-SPACE* is set to :IMMOBILE. (Caution: the flag is experimental and subject to change.) The benefits are better physical separation of code from data, and potentially easier examination of live images by external tools.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the docstring for SAVE-LISP-AND-DIE has been amended to say that the :ROOT-STRUCTURES parameter is not meaningless on gencgc, depending on the platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: calling a named function (e.g. a DEFUN) concurrently with redefining that same function could lead to execution of random bytes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: yes-or-no-p accepts formatter functions (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1639490&quot;&gt;#1639490&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better handling of exceptions on macOS.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-EXT:*INTEXP-MAXIMUM-EXPONENT* is removed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: TRACE ... :REPORT {TRACE,NIL} now work as advertised in the documentation string (based on patch by Patrick Stein)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support unboxed signed-word structure slots on x86, x86-64 and ARM64. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/377616&quot;&gt;#377616&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster logical bit-array operations on multidimensional arrays.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: better GC performance in the presence of many threads. (patch by Ilya Perminov, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1339924&quot;&gt;#1339924&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: multiple-value-call is optimized with multiple argument forms, not just one. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/753803&quot;&gt;#753803&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-ALIEN-STRING returns the number of allocated bytes as a second value as advertised (reported by Johann 'Myrkraverk' Oskarsson)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: when TO-READTABLE is supplied to COPY-READTABLE, it will contain only the macros in FROM-READTABLE and no others. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1631506&quot;&gt;#1631506&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: gencgc has been modified for x86-64 on Linux and macOS to a support mark-and-sweep as well as the traditional copying strategy. It is conceivable that some applications might be adversely affected. Please see ':immobile-space' in 'base-target-features.lisp-expr' for further details, and possible reasons to disable this feature.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: x86-64 supports shrinking the fixed overhead in a structure from 2 words to 1 word, reducing memory consumption in applications which create many small structures.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: more compact low-level error signaling code&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: more compact encoding of cross-reference information&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster out of line fixnum-float comparisons.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: filling a known simple-vector with a constant value is about as fast in unoptimized code as in code compiled with (SPEED 3), and the x86-64 implementation is able to use SSE instructions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correctly handle the case of a non-local exit within a function terminating the extent of dynamic-extent functions and variables in the presence of multiple-values (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1563127&quot;&gt;#1563127&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restore builds on the latest OSX with the latest Xcode (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1470996&quot;&gt;#1470996&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: NAMESTRING prefers to return a BASE-STRING instead of (ARRAY CHARACTER (*)) when possible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: cached make-instance/allocate-instance constructors can now get garbage collected.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: better performance for some unoptimized operations on complex numbers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using the options :LOCAL-NICKNAMES and :LOCK in the same DEFPACKAGE form no longer signals a bogus error&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the system now understands that the CONDITION type is disjoint with many other system types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: argument types in condition report functions are now declared (in combination with the above change, this can result in early detection of erroneous code).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: simple arrays of any rank can be stack-allocated on platforms supporting stack allocation of vectors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved type derivation for FIND, POSITION, COUNT, SEARCH, MISMATCH and other array and sequence functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ALLOCATE-INSTANCE is now as fast as MAKE-INSTANCE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: more efficient CHANGE-CLASS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: versions of getresuid() and getresgid() in SB-POSIX no longer cause memory faults, and should work properly (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1603806&quot;&gt;#1603806&lt;/a&gt;, reported by Kieran Grant)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: handle ENOENT from getprotobyname() (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1596043&quot;&gt;#1596043&lt;/a&gt;, reported by Stephen Hassard)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: preserve the name of the destructive function for the destroyed constant and important result warnings, even when declared NOTINLINE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster operations on list-sets.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: better type derivation of set functions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1592152&quot;&gt;#1592152&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: load-time TLS-INDEX assignment, and other microoptimizations, on x86.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimizations in:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;APPEND;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ECASE/ETYPECASE;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ARRAY-DIMENSIONS;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ARRAY-TOTAL-SIZE;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;REMOVE, REMOVE-DUPLICATES, DELETE and DELETE-DUPLICATES on lists.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: do not insert conditional newlines in print-unreadable-object (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1398290&quot;&gt;#1398290&lt;/a&gt;). This reverses a change made in &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/488979&quot;&gt;#488979&lt;/a&gt; which reversed a fix advertised in release 0.8.14 to pass the GCL ANSI Test Suite.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: constant negative rotations of 32-bit quantities are compiled correctly on x86-64 and arm. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1586614&quot;&gt;#1586614&lt;/a&gt;, reported by Guillaume Le Vaillant)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: the platform's strtod() is exposed as SB-POSIX:STRTOD&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: speed up debug info creation for highly nested functions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1563355&quot;&gt;#1563355&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the interleaved structure slot optimization from release 1.2.6 has been ported to all architectures.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support run-program I/O redirection into lisp streams on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better wording in missed optimization note. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1003265&quot;&gt;#1003265&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interpreted (CAS SVREF) was broken&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: support CLISP as build host for ARM (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1568256&quot;&gt;#1568256&lt;/a&gt;, thanks to Tomas Hlavaty)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: who-sets and who-references work on DEFGLOBAL. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1552997&quot;&gt;#1552997&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: CONSTANTP understands backquote. e.g. (CONSTANTP '`(0 (,CHAR-CODE-LIMIT))) =&amp;gt; T&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improvements to sequence functions: CONCATENATE, SUBSTITUTE, REVERSE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EVAL does not signal an error for (THE KEYWORD :FOO)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a DEFTYPE name that is redefined into a DEFSTRUCT name is less likely to cause confusion in the compiler.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DOCUMENTATION works as intended for classes with non-standard metaclasses&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (TYPEP &amp;lt;extended-sequence&amp;gt; &amp;lt;extended-sequence-class&amp;gt;) no longer returns NIL in certain situations&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-SEQUENCE, MAP, CONCATENATE and MERGE accept class objects as result-type&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-SEQUENCE, MAP, CONCATENATE and MERGE expand DEFTYPEs in result-type&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: warn about argument mismatch for functions passed as arguments to other functions (e.g. REDUCE, MAP) at compile-time.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: functions accepting other functions (e.g. REDUCE, FIND) can now be constant-folded if all function arguments are declared as foldable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved logical operations on integers of unknown type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: exception handling no longer leaks memory on OS X. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/326238&quot;&gt;#326238&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: {READ,WRITE}-SEQUENCE are much faster for some combinations of short sequences and stream types&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: MAKE-LIST's result can be stack-allocated on x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WRITE-SEQUENCE no longer fails to write lists containing integers to bivalent streams&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOGTEST (and hence ODDP) no longer conses when given fixnum arguments and small bit positions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1277690&quot;&gt;#1277690&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: READ-FROM-STRING compiler-macro does not permute its arguments&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFUN of a function name that collides with a system-generated structure accessor does not confuse the runtime. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/540063&quot;&gt;#540063&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: heap corruption from miscompiled RESTART-BIND. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1530390&quot;&gt;#1530390&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-THREAD support for ARM64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: compiling an out-of-line DEFSTRUCT constructor call will warn if a defaulted value is incompatible with its slot type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: a local INLINE declaration on a structure constructor will work as intended, subject to any other factors that inhibit inlining, even if the DEFSTRUCT was not itself within a global INLINE proclamation for the named constructor&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:DYNAMIC-SPACE-SIZE is now defined for cheneygc.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: x86[-64] platforms support SB-EXT:CAS on structure slots of type SB-EXT:WORD&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the interleaved structure slot optimization from release 1.2.6 has been ported to 32-bit x86, Sparc, PowerPC, ARM64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-THREAD:JOIN-THREAD signals a proper error when an attempt is made to join the current thread&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: NTH-VALUE does not cause stack overflow. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1511419&quot;&gt;#1511419&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: structure constructor type checking is better. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1508735&quot;&gt;#1508735&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: supplied-p variables for unused optional or keyword variables no longer confuse SB-DI:PARSE-COMPILED-DEBUG-FUN-LAMBDA-LIST (and thus the backtrace machinery) (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1498644&quot;&gt;#1498644&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Backtrace correctly handles undefined-function frames on MIPS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WITH-FLOAT-TRAPS-MASKED correctly clears accrued traps on MIPS (fixes issues with floating-point type derivation in the compiler).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FLOAT-NAN-P and FLOAT-TRAPPING-NAN-P now work correctly on MIPS and HPPA.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MIPS context register access now masks to 32 bits (fixing issues parsing negative-fixnum values for internal-error arguments and escaped debug variables on 64-bit CPUs).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF SAP-REF-DOUBLE) with constant offset on big-endian MIPS now works correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Callback parameter (argument) handling on MIPS is now vastly more correct.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: %DECREMENT-SEMAPHORE adjusts the remaining timeout after a spurious wakeup&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.3.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the environment passed to a macro/setf/deftype expander is not always an object of type SB-KERNEL:LEXENV. It can be nil, as is permissible by the standard.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ported to ARM64 Linux.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: a new interpreter is included which has many benefits over sb-eval. It is disabled by default. See src/interpreter/README for instructions to enable it, and further details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: calling COMPILE when SB-EXT:*EVALUATOR-MODE* was :INTERPRET would fail to perform &quot;normal semantic processing such as macro expansion&quot; as stipulated by X3J13 issue LOAD-TIME-EVAL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-UNICODE:CONFUSABLE-P no longer treats &quot;&amp;lt;&quot; and the empty string as confusable. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1504739&quot;&gt;#1504739&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (ASSERT (COMPUTE-IT ...)) would expand incorrectly if COMPUTE-IT was a local macro that shadowed a global function.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-POSIX:CFSETISPEED and SB-POSIX:CFSETOSPEED now work properly on platforms that use only the minimum specified set of fields in struct termios (verified on Linux, still known not to work on FreeBSD and NetBSD, very probably others). (partial fix for &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1500951&quot;&gt;#1500951&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.16&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: by default, timers with a repeat interval do not &quot;catch up&quot; by repeatedly calling their function after a clock discontinuity such as a suspend and resume cycle&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correctly restore multiple values on the stack in the presence of alien calls. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1489590&quot;&gt;#1489590&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-STRING-OUTPUT-STREAM enforces that :ELEMENT-TYPE is a subtype of CHARACTER.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an EQL method specializer no longer causes garbage retention if there are no extant methods using the specializer. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/492851&quot;&gt;#492851&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.15&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: DEPRECATION declaration for functions, variables and types causes {EARLY,LATE,FINAL}-DEPRECATION-WARNING to be signaled when subject of the declaration is used. Integrated with DESCRIBE, DOCUMENTATION and SB-CLTL2:{VARIABLE,FUNCTION}-INFORMATION. Documented in the &quot;Deprecation&quot; section of the manual.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF updated to 3.1.5. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1476867&quot;&gt;#1476867&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: definitions within PROGN get proper source locations when compiled (needs latest Slime to take advantage of this). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1473147&quot;&gt;#1473147&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: source locations for DEFCLASS slots now point directly to the slot definitions, not the whole DEFCLASS form.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better source location in the presence of quoted forms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1370561&quot;&gt;#1370561&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better source locations inside backqoute. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1361502&quot;&gt;#1361502&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: HANDLER-BIND requires that the handler-function be a function designator at the time of binding establishment. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1480679&quot;&gt;#1480679&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: inlined functions surrounded by nested macrolets are properly inlined. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309123&quot;&gt;#309123&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The name of a compiled anonymous lambda as returned by the third value of FUNCTION-LAMBDA-EXPRESSION can have a lambda-list-like list following the introductory LAMBDA that is not in general a syntactically valid lambda list. Specifically, it won't retain default values, supplied-p variables, or &amp;amp;KEY or &amp;amp;AUX bindings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DESTRUCTURING-BIND has been totally reimplemented from scratch to address a handful of performance and correctness issues. Some minor behavioral differences exist regarding order of evaluation of default forms for unsupplied &amp;amp;OPTIONAL and &amp;amp;KEY arguments when nested destructuring patterns are involved. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/707556&quot;&gt;#707556&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/707573&quot;&gt;#707573&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/707578&quot;&gt;#707578&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/708051&quot;&gt;#708051&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DEFCONSTANT and DEFSTRUCT respect package locks. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1186238&quot;&gt;#1186238&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1036716&quot;&gt;#1036716&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-unicode:normalize-string has a new optional argument, FILTER, a callback which controls which decomposed characters are collected. Useful for stripping away diacritics more efficiently.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (TYPE-OF ARRAY) for a non-simple array is subject to change after a call of ADJUST-ARRAY. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1333731&quot;&gt;#1333731&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Dynamic-extent allocation with a loop between allocating a value and the start of its environment no longer discards the allocated data when the loop is taken. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1472785&quot;&gt;#1472785&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Variable-reference elimination no longer generates incorrect code under certain circumstances. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1446891&quot;&gt;#1446891&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: variables with EQL types are no longer treated as constants by VOPs, which caused problems with closures being allocated for such variables, but they remained unused. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1390149&quot;&gt;#1390149&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Windows installer generates registry key name correctly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1476447&quot;&gt;#1476447&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: on success, TRY-SEMAPHORE and WAIT-ON-SEMAPHORE return the new count&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: WAIT-ON-SEMAPHORE accepts a decrement parameter&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: JOIN-THREAD allows distinguishing timeout vs. abort in all situations&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: On Windows DBG_PRINTEXCEPTION_C is handled and its message is printed. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1437947&quot;&gt;#1437947&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug-fix: TRUENAME works properly on broken symlinks presented as directories. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1400003&quot;&gt;#1400003&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Inlined DPB and DEPOSIT-FIELD don't interfere with left-to-right order of argument evaluation. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1458190&quot;&gt;#1458190&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF (LDB (BYTE 1 2 JUNK) X) 0) is rightly rejected.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFSETF lambda lists should not permit argument destructuring.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: calls to (SETF SLOT-VALUE) on a missing slot would in certain situations incorrectly return the result of a SLOT-MISSING method instead of always returning the new value. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1460381&quot;&gt;#1460381&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a DEFMACRO occurring not at toplevel and capturing parts of its lexical environment (thus being a closure) caused expressions involving the macro name to cause corruption in the pretty-printer due to faulty introspection of the lambda list of a closure.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: out of line MAP/MAP-INTO check that the results produced by the function are of the matching sequence type. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1459581&quot;&gt;#1459581&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: pretty-printing of '(LET `((,X ,Y)) :B) is handled correctly.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the SB-C::*POLICY* variable is no longer a list. Code which manipulated it as such (including but not limited to non-bundled releases of ASDF) will need to be revised.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The input stream for COMPILE-FILE implements STREAM-LINE-COLUMN.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: EVAL errors that occur by way of LOAD report the starting line and column number of the erring toplevel form. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/565247&quot;&gt;#565247&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: better MAP and MAP-INTO on known vector result types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Read/modify/write macros accessing a place which is a composition of CAR+CDR operations, such as (SHIFTF (CADR X) (ELT V 0)), do not access subforms more than once. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1450968&quot;&gt;#1450968&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: short form of DEFSETF no longer allows trailing junk.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFINE-MODIFY-MACRO respects the provisions of CLHS 5.1.3 regarding argument evaluation order. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1452539&quot;&gt;#1452539&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: POP works as specified in CLHS if the setter for its argument has a side-effect on the existing CAR value. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1454021&quot;&gt;#1454021&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Reading &quot;#()&quot; with a positive numeric argument signals a reader error. As specified, reading &quot;#1()&quot; has undefined consequences, so correct portable code should be indifferent to this. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1252100&quot;&gt;#1252100&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Malformed reader conditionals such as &quot;(#-no-such-feature)&quot; and &quot;(#+sbcl)&quot; no longer parse as NIL. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1454400&quot;&gt;#1454400&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SET-PPRINT-DISPATCH will warn when given an expression in which any part is unrecognizable as a legal type-specifier. The dispatch table will be altered, but the new entry is disabled. Subsequent type-defining forms will cause pprint-dispatch tables to re-examine whether any disabled entries should be enabled. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1429520&quot;&gt;#1429520&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Loading code containing calls to a deprecated function will, under most circumstances, signal warnings similar to compiling such code. The usual caveat holds about not detecting calls through a computed name, as in (funcall (intern &quot;DEPRECATED-FUN&quot; &quot;SB-EXT&quot;)).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: (SB-EXT:COMPILE-FILE-LINE) is a new macro that expands to a constant (VALUES integer integer) indicating the source line/column from which it was read, intended for logging Lisp runtime errors in a style similar to that afforded by the C preprocessor __LINE__ macro. Similarly (SB-EXT:COMPILE-FILE-POSITION) returns a position in characters.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: improved source locations for VOPs, alien types and declarations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: functions in :FINAL deprecation have the correct docstring. No visible change, as no such functions presently exist. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1439151&quot;&gt;#1439151&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF (FDEFINITION this) (FDEFINITION OTHER)) signals an error if OTHER names either a macro or special-operator. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1439921&quot;&gt;#1439921&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: all SOCKINT::WIN32-* functions have been deprecated with EARLY deprecation state&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: performing introspection via the system-internal SB-INT:INFO function could expose that :TYPE :TRANSLATOR is not necessarily a function, as it always was before. (Affects swank-fancy-inspector)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The value of SXHASH on bit-vectors of length equal to the word size now depends on the vector's contents instead of being constant; its value on bit-vectors of length divisible by the word size now depends also on the contents of the vector's last word.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug-fix: sb-bsd-sockets on win32 uses proper C function declarations. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1426667&quot;&gt;#1426667&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: A new dead code elimination phase removes dead code loops that confuse stack analysis. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1255782&quot;&gt;#1255782&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/308914&quot;&gt;#308914&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: A toplevel form which was simple enough to bypass the main compiler in COMPILE-FILE, and which contained an empty SETQ or PROGN would produce an invalid fasl file. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1427050&quot;&gt;#1427050&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: The compiler no longer signals an internal error when encountering invalid FUNCTION forms like (function 1)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: express proper dependencies in the ASDF contrib, to support systems where make runs in parallel. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1434768&quot;&gt;#1434768&lt;/a&gt;; thanks to Nikhil Benesch)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change and bug fix: unboxed numeric constants on x86oids are arranged in memory differently, and the disassembler does not show them separately in DISASSEMBLE, but does if DISASSEMBLE-CODE-COMPONENT is used. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1421987&quot;&gt;#1421987&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: The compiler's treatment of type specifiers makes it slightly faster and more memory-efficient. Portable code should be indifferent to this change, however, users of SB-INTROSPECT:FUNCTION-TYPE might notice that (MEMBER T NIL) and (MEMBER NIL T) are both internally collapsed to the former, so that the latter can never be obtained as part of an FTYPE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: a TYPEP call in which the second argument is not a QUOTE form but nevertheless recognized as a compile-time constant might open-code the test. One scenario for this involves backquote, such as (TYPEP x `(my-type ,some-arg)). Code which relied upon deferring until runtime should declare (NOTINLINE TYPEP). [Due to the sematic constraints of DEFTYPE etc in in CLHS 3.2.2.3, code requiring delayed evaluation could be unportable though.]&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: unused variables at the top-level are now reported. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/492200&quot;&gt;#492200&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFCLASS handles cyclic {super,meta}class relations better (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1418883&quot;&gt;#1418883&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler no longer signals an error when compiling certain function calls. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1416704&quot;&gt;#1416704&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/404441&quot;&gt;#404441&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1417822&quot;&gt;#1417822&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1234919&quot;&gt;#1234919&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler doesn't stumble on a LOGIOR transform. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1389433&quot;&gt;#1389433&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more robust debugger and backtraces. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1413850&quot;&gt;#1413850&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1099500&quot;&gt;#1099500&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1412881&quot;&gt;#1412881&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/945261&quot;&gt;#945261&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1419205&quot;&gt;#1419205&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1409402&quot;&gt;#1409402&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: files larger than 4GB can now be compiled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: x86 truncated results from 64-bit foreign functions to 32 bits.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: file-position didn't work on large files on win32. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1271545&quot;&gt;#1271545&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: callbacks from foreign threads can work without enabling sb-safepoint.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-introspect:function-lambda-list works properly on interpeted macros. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1387404&quot;&gt;#1387404&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ADJUST-ARRAY properly handles non-adjustable arrays. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/886418&quot;&gt;#886418&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler no longer fails to dump a multidimensional array constant involving a circular reference to itself&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: conditional and nested DX allocation no longer confuse the compiler in STACK analysis. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1044465&quot;&gt;#1044465&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-rotate-byte constant folding bug fixed. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1423682&quot;&gt;#1423682&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: better error and warning messages. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1314767&quot;&gt;#1314767&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/736383&quot;&gt;#736383&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: backtrace for invalid argument count produces the exact supplied arguments including the extra ones, on x86, x86-64 and ARM.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: a STYLE-WARNING is signaled for DEFSTRUCT accessors which are used before the structure is defined; similarly for the predicate.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: FORMAT NIL with only ~a and string arguments is transformed into CONCATENATE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: POSITION and FIND when inlined into code that is compiled with qualities of safety &amp;lt; 2 and speed &amp;gt; space will no longer signal an error on circular lists, but will potentially loop forever if given no :END constraint. As was always the case, calls that are not inlined are safe regardless of lexical policy.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CLOS methods compiled with (OPTIMIZE (DEBUG 0)) no longer cause debugger failure when printing a backtrace&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more resilience to deleted code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1308328&quot;&gt;#1308328&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1390544&quot;&gt;#1390544&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the CLHS example of MAKE-LOAD-FORM involving TREE-WITH-PARENT did not work, and now it does.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: returning constant values refers to preboxed constants more reliably. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1398785&quot;&gt;#1398785&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: a STYLE-WARNING is produced if a compiler-macro is defined for a function after at least one ordinary (not inlined) call to that function was compiled, indicating a likely compilation order problem. Likewise a warning ensues if a call is compiled to a function that is subsequently proclaimed INLINE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: always lose() when something goes wrong while saving a core (instead of just printing an error on stderr in some situations).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: frames in the debugger are now restartable by default.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restore error handling on Windows x86.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-SEQUENCE detects type errors in its :INITIAL-ELEMENT at compile-time when possible. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/330299&quot;&gt;#330299&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: parsing of malformed type specifiers no longer results in a memory-fault-error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOOP properly destructures nested lists in WITH.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MACROEXPANDing the redefinition of an alien structure type no longer signals the wrong error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PROGV doesn't get confused by forced DEBUG 3 (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1405456&quot;&gt;#1405456&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SERVE-EVENTS uses the poll() system call in lieu of select() if the OS has the former. Previously poll() was used only if waiting on exactly one file descriptor.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: efficiency of access to untagged structure slots is improved on x86-64, and the order of slots in memory is exactly as specified by defstruct, simplifying use of structures as arguments to foreign calls.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-DEBUG:ARG now works in all TRACE options which evaluate forms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1357826&quot;&gt;#1357826&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GC memory corruption during internal memory handling.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: duplicate effective-slot-definition objects as compared by EQ on name could be present in CLASS-SLOTS of a class whose metaclass was structure-class or condition-class. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1049423&quot;&gt;#1049423&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: HANDLER-BIND with empty bindings works again; regression in 1.2.5. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1388707&quot;&gt;#1388707&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ATOMIC-INCF works on structure slots in interpreted code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1381867&quot;&gt;#1381867&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-ARRAY properly handles character types like (eql #\a) and (member #\a #\c). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1392068&quot;&gt;#1392068&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: READ sometimes accidentally preserved a whitespace character after a token when it should not have. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/327790&quot;&gt;#327790&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-bsd-sockets now has basic support for IPv6&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: An sb-unicode package has been added, containing many functions related to handling Unicode text&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The reader now normalizes symbols to Normalization Form KC (NFKC). This behavior can be disabled with SB-EXT:READTABLE-NORMALIZATION&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: a style-warning is signaled if OPTIMIZE declarations multiply specify a quality with differing values. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/310267&quot;&gt;#310267&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: conservatively pointed to pages wipe out unused dwords so that they cannot act as false roots in turn.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the walker's handling of lexical variable and symbol-macro bindings is improved (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/375326&quot;&gt;#375326&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1368305&quot;&gt;#1368305&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: HANDLER-{BIND,CASE} no longer drop into ldb when a clause contains an undefined condition type; regression in 1.1.19 (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1378939&quot;&gt;#1378939&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: in interpreted code, inequality predicates did not type-check arguments that weren't examined, and a 1-argument use of MIN or MAX accepted a complex number. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1373702&quot;&gt;#1373702&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: APROPOS and APROPOS-LIST handle inherited symbols correctly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1364413&quot;&gt;#1364413&lt;/a&gt;, thanks to Zach Beane)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: the sequence functions MAP, CONCATENATE and MERGE now call the new generic functions SEQUENCE:MAP, SEQUENCE:CONCATENATE and SEQUENCE:MERGE respectively when the specified result type designates an extended sequence.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Wrong binding order of supplied-p parameters in macro lambda lists. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/721135&quot;&gt;#721135&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: VALIDATE-SUPERCLASS returns T when the superclass is the universal superclass (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1332983&quot;&gt;#1332983&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: reading an uninterned symbol whose print name has the syntax of an integer signals an error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/310062&quot;&gt;#310062&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the walker is less likely to be confused when walking LET* forms with special bindings and use of those bindings and others of the same name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a rare bug affecting 32-bit platforms resulting in a fatal condition with the message &quot;Globaldb rehash failure&quot; has been fixed.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: DOCUMENTATION works on instances of FUNCALLABLE-STANDARD-CLASS&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASSERT reports arguments of calls to lexical functions in additional to global functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF updated to 3.1.3&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: UIOP can be loaded without ASDF.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some methods on CHANGE-CLASS did not finalize the new class before accessing its class-precedence list.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CHANGE-CLASS no longer fails on unbound slots in the source object.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CHANGE-CLASS signals an appropriate error when the destination class is a FORWARD-REFERENCED-CLASS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CHANGE-CLASS no longer signals bogus TYPE-ERRORs for slots for which initargs have been supplied.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: saving cores on ARM was broken since the introduction of GENCGC. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1349795&quot;&gt;#1349795&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: macroexpanding a backquoted expression involving &quot;,.&quot; outside of the compiler failed. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1354623&quot;&gt;#1354623&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: the #\` (&quot;backquote&quot;) reader macro was reimplemented to support robust pretty-printing. Reading a form involving #\` produces an invocation of the QUASIQUOTE ordinary macro which may contain subforms that are not lists. Code that unportably attempts operations on un-evaluated forms resulting therefrom, e.g. (SUBST a b (read-from-string &quot;`(x (,y))&quot;)) might generate incorrect results and/or errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support for GNU/kFreeBSD x86.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ATOMIC-INCF and ATOMIC-DECF can operate on (CAR x), (CDR x) and DEFGLOBAL variables of type fixnum.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: arithmetic constant reduction is now performed on defconstant constants too. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1337069&quot;&gt;#1337069&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: certain ftype proclamations containing &amp;amp;optional t &amp;amp;rest t no longer cause subsequent definitions to signal bogus style-warnings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #\Bell and #\Bel now read to different characters. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1319452&quot;&gt;#1319452&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CAS SYMBOL-VALUE on locally special variables didn't work. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1098355&quot;&gt;#1098355&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: GENCGC is enabled on ARM.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better error reporting for invalid calls to local functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support for GNU/kFreeBSD distributions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1079954&quot;&gt;#1079954&lt;/a&gt;, thanks to Christoph Egger)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: experimental support for threads on NetBSD/x86-64. (thanks to Robert Swindells)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support for DragonFly BSD. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1292845&quot;&gt;#1292845&lt;/a&gt;, thanks to Vasily Postnicov)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TYPE-OF must not return AND/OR/NOT expressions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1317308&quot;&gt;#1317308&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: accessing NIL arrays stopped producing errors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1311421&quot;&gt;#1311421&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DISASSEMBLE no longer prints unwanted stuff. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1251861&quot;&gt;#1251861&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiling SVREF on unknown types no longer produces scary errors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1258716&quot;&gt;#1258716&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: assorted LOOP fixes and enhancements. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/645534&quot;&gt;#645534&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1322923&quot;&gt;#1322923&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/700538&quot;&gt;#700538&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/613876&quot;&gt;#613876&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/695286&quot;&gt;#695286&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/798388&quot;&gt;#798388&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: silence compiler notes from the SEARCH transform. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1071310&quot;&gt;#1071310&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: array type intersection handles T and unknown element types correctly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1258716&quot;&gt;#1258716&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix a corner case in array type unparsing that would result in misleading translations from our internal type representation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: array-rank now sees through union and intersection types. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1310574&quot;&gt;#1310574&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: when DECLARE expressions are in the wrong place, be careful not to attempt to evaluate the subforms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/573747&quot;&gt;#573747&lt;/a&gt;; thanks to Roman Marynchak)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: misplaced and missing declarations in DEFTRANSFORM. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1066451&quot;&gt;#1066451&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FBOUNDP returned NIL for a class of incorrect function names instead of signaling an error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1095483&quot;&gt;#1095483&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix a compile-time AVER in regalloc: lifetime analysis used to (rarely) introduce duplicate conflict markers in a single TN/block pair. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1327008&quot;&gt;#1327008&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.2.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: read-time-eval backquote context mixup. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1321047&quot;&gt;#1321047&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: when SAVE-LISP-AND-DIE fails due multiple threads, the report of the signaled conditions lists currently running threads.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ported to ARM linux.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-gmp contrib has been updated. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1305266&quot;&gt;#1305266&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: new contrib sb-mpfr by Stephan Frank.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-SEQUENCE works with sequence types defined via DEFTYPE (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1315846&quot;&gt;#1315846&lt;/a&gt;, thanks to Mark Cox)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SET-[DISPATCH-]MACRO-CHARACTER should coerce a symbolic function-designator to a function only as needed. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1012335&quot;&gt;#1012335&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: remove references to asdf-install from the manual. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1207544&quot;&gt;#1207544&lt;/a&gt;, thanks to Thomas Hlavaty)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: handle --without-xxx options to make.sh more carefully. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1246665&quot;&gt;#1246665&lt;/a&gt;, thanks to Richard M Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: prevent maybe-delete-exit from doing semantically broken things with local exits. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309099&quot;&gt;#309099&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/518099&quot;&gt;#518099&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/533930&quot;&gt;#533930&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: attempts to subclass BUILT-IN-CLASSes signal errors, as required by AMOP. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/861004&quot;&gt;#861004&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.18&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: COERCE is now more effecient for more cases when the type is known at compile-time. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1309815&quot;&gt;#1309815&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correctly inherit condition initforms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1300904&quot;&gt;#1300904&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: properly pprint literal functions inside nested lists. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1300716&quot;&gt;#1300716&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more-correctly handle array-type unity (broken for ages, causing compilation problems since 1.1.13.x due to smarter TYPEP type propagation, reported by jasom in #lisp).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.17&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: printing backtraces respects SB-DEBUG:*DEBUG-PRINT-VARIABLE-ALIST* when printing call arguments (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1261646&quot;&gt;#1261646&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: defstruct out-of-line accessor are now as fast as inlined. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1264924&quot;&gt;#1264924&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: INVOKE-RESTART-INTERACTIVELY no longer refuses to invoke RESTART instances with a test-function (reported by Vivitron in #sbcl)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: STREAM-ERROR-POSITION-INFO fails in fewer situations (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1264902&quot;&gt;#1264902&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Change COND error message (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1254511&quot;&gt;#1254511&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOAD is no longer confused when called on a directory. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1077996&quot;&gt;#1077996&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-CONDITION reports names of missing condition classes properly (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1199223&quot;&gt;#1199223&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restore building with clang. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1293643&quot;&gt;#1293643&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restore building on SPARC (broken since 1.1.15).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: improved FreeBSD support.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PPC floating point conversion corrupted stack.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.16&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: improve read/print consistency for pathnames on Win32, by using the circumflex character #\^ as the escape character. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/673625&quot;&gt;#673625&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:DEFINE-LOAD-TIME-GLOBAL. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1253688&quot;&gt;#1253688&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Loading fasls with symbols from an undefined package includes the name of the symbol in the error message.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: problems when redefining classes and doing TYPEP on classes concurrently. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1272742&quot;&gt;#1272742&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixes to the x86-64 XCHG instruction:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;it was misencoded when used with RAX, R8-R15 registers. (reported by Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;it was misencoded when used to exchange EAX with itself.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the disassembler wrongly printed XCHG RAX, R8 and the corresponding 32- and 16-bit variations as NOP.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the disassembler outputs source annotations in the right place and no longer randomly drops some of them. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1249205&quot;&gt;#1249205&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix commutative-arg-swap from introducing undumpable structures into code, prevent code with errors from being compiled. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1276282&quot;&gt;#1276282&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: pathnames with :back in their directory component are succeffully resolved.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the deterministic profiler now uses ENCAPSULATE functionality to wrap functions around. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309086&quot;&gt;#309086&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.15&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: the iterative spilling/coloring register allocator developed by Alexandra Barchunova during Google Summer of Code 2013 is now merged in. By default, it only activates for functions that optimize with (speed 3) and (&amp;gt; speed compilation-speed), but setting sb-regalloc:*register-allocation-method* to :iterative forces its execution. The previous behaviour can be obtained by instead setting that variable to :greedy. Thanks again to Google for their support, and, more crucially, to Alexandra Barchunova for her hard work.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: make-array with known element-type and unknown dimensions is much faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: make-array with unknown element-type is faster as well. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1004501&quot;&gt;#1004501&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-ext:save-lisp-and-die on Windows now accepts :application-type argument, which can be :console or :gui. :gui allows having GUI applications without an automatically appearing console window.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: reduced conservativism on GENCGC platforms: conservative roots must be valid-looking tagged pointers or point within a code object, not merely point to within the allocated part of a page, in order to pin a page.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support for &quot;Mac Roman&quot; external format.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: encapsulation of named generic functions now happens without altering the identity of the function bound to the name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Windows applications without the console window no longer misbehave. (patch by Wilfredo Velazquez, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1256034&quot;&gt;#1256034&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: modular arithmetic optimizations do not stumble on dead branches with bad constants. (reported by Douglas Katzman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CLISP can be used again as a cross-compilation host. (Thanks to Vasily Postnicov, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1261451&quot;&gt;#1261451&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-program crashed with :directory nil. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1265077&quot;&gt;#1265077&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: complicated TYPEP tests are less opaque to the type propagation pass. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1229340&quot;&gt;#1229340&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: [N]BUTLAST perform a single pass over the list. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1245697&quot;&gt;#1245697&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: EQUALP on structures with raw slots (double-float/complex) no longer conses and is faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: RESTART-CASE expands to more compact code. Thanks to Jan Moringen. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1249055&quot;&gt;#1249055&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Top-level defmethod without defgeneric no longer causes undefined-function warnings in subsequent forms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/503095&quot;&gt;#503095&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Better error messages for system errors on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: run-sbcl.sh is usefully handled by rlwrap. Thanks to William Cushing. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1249183&quot;&gt;#1249183&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: new function SB-EXT:ASSERT-VERSION-&amp;gt;= accepts a version specification (multiple integer arguments) and signals a continuable error if the current SBCL version is lower (older) than the specification. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/674372&quot;&gt;#674372&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better ARRAY-RANK result derivation. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1252108&quot;&gt;#1252108&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EQUALP now compares correctly structures with raw slots larger than a single word.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: contribs couldn't be built on Windows with MinGW.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Better pathname handling on Windows. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/922117&quot;&gt;#922117&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: OPEN reports a more meaningful error when an existing file is opened for output with :if-exists :new-version. Thanks to Philip Munksgaard. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/455381&quot;&gt;#455381&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFSTRUCTs with NIL as a slot name no longer cause strange CLOS-related errors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/633911&quot;&gt;#633911&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GC deadlocks caused by concurrent consing on Windows.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: better distribution of SXHASH over small conses of related values. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309443&quot;&gt;#309443&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;other improvements to SXHASH:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;use the whole of the positive-fixnum range for SXHASH of fixnums&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The error message when calling an undefined alien function includes the name of the function on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-ext:run-program now supports :environment on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF is no longer required to load contribs at runtime. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1132254&quot;&gt;#1132254&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: when called with a symbol, FIND-RESTART no longer calls COMPUTE-RESTARTS, making it faster and cons less (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/769615&quot;&gt;#769615&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: FIND-RESTART and COMPUTE-RESTARTS handle huge restart clusters better in some cases&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SOME/ANY/other quantification higher-order functions no longer cons. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1070635&quot;&gt;#1070635&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: forward references to classes in fasls can now be loaded. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/746132&quot;&gt;#746132&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: don't warn on a interpreted-&amp;gt;compiled function redefinition from the same location. (patch by Douglas Katzman, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1042405&quot;&gt;#1042405&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Create vectors of proper internal length when reading literal vectors from FASLs. (Reported by Jan Moringen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COMPILE can now successfully compile setf functions. (Reported by Douglas Katzman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-program performs more correct escaping of arguments on Windows. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1239242&quot;&gt;#1239242&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: function-lambda-expression on generic functions returns the actual name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (the [type] [constant]) now warns when [constant] matches [type] except for the number of values. (Reported by Nathan Trapuzzano on sbcl-help)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: signal errors in required cases of slot-definition initialization protocol. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309072&quot;&gt;#309072&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-sbcl.sh works better in the presence of symlinks on OS X. (thanks to Stelian Ionescu, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1242643&quot;&gt;#1242643&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: when given a restart object, FIND-RESTART checks whether the restart is active and, when a condition is supplied, whether the restart is associated to a different condition (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/774410&quot;&gt;#774410&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: Add sb-bsd-sockets:socket-shutdown, for calling shutdown(3). (thanks to Jan Moringen, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1207483&quot;&gt;#1207483&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: document extensible sequences. (thanks to Jan Moringen, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/994528&quot;&gt;#994528&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: EQUAL and EQUALP transforms are smarter. (thanks to Elias Martenson, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1220084&quot;&gt;#1220084&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CHAR-EQUAL is faster for constant and base-char arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: probe-file now can access symlinks to pipes and sockets in /proc/pid/fd on Linux. (reported by Eric Schulte)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SBCL can now be built on Solaris x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Floating point exceptions do not persist on Solaris anymore.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (setf . a) is pprinted correctly (reported by Douglas Katzman).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: handle compiler-error in LOAD when it's not run from inside EVAL. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1219601&quot;&gt;#1219601&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-GMP:MPZ-POW no longer segfaults given a non-bignum base. (thanks to Stephan Frank)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: space allocation of result bignums in SB-GMP is more accurate. (thanks to Stephan Frank, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1206191&quot;&gt;#1206191&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-safepoint can now reliably handle signal interruptions of foreign code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1133018&quot;&gt;#1133018&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler-macro for MAKE-INSTANCE when emitting &quot;fallback&quot; constructors no longer fails to merge actual and default initargs (thanks to Jan Moringen, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1179858&quot;&gt;#1179858&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler-macro for MAKE-INSTANCE when emitting &quot;fallback&quot; constructors handles non-KEYWORD initialization arguments more correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: loading the SB-SIMPLE-STREAMS contributed module no longer clobbers FILE-NAMESTRING. (thanks to Anton Kovalenko, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/884603&quot;&gt;#884603&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: class definitions with CPLs inconsistent with their metaclasses are less likely to destroy the object system's integrity. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309076&quot;&gt;#309076&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restart clause parsing in RESTART-CASE is more in line with the standard. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1203585&quot;&gt;#1203585&lt;/a&gt;, thanks to Jan Moringen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: silence a note from RESTART-CASE under high-SPEED optimization settings. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1023721&quot;&gt;#1023721&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: getting the order of arguments to SB-MOP:SET-FUNCALLABLE-INSTANCE-FUNCTION wrong produces a sensible error rather than a failed AVER. (reported by Paul Nathan)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Parsing of &amp;amp;optional/&amp;amp;key/&amp;amp;rest arguments now never overwrites arguments during copying on x86 and x86-64; it may still happen on other platforms when there are more fixed arguments than stack slots. (reported by Jan Moringen)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: support building the manual under texinfo version 5. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1189146&quot;&gt;#1189146&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Windows builds no longer display the &quot;Kitten of Death&quot; message. A warning is instead appended to the regular banner, and may be muted with --noinform. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/728247&quot;&gt;#728247&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support building under new linker handling of syscalls under NetBSD. (thanks to Robert Swindells)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: undefined function errors are now properly reported on PPC and MIPS. (regression since 1.1.9)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (funcall (function X junk)) didn't causes an error when X had a compiler macro. (thanks to Douglas Katzman).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: signal a warning when defining a setf-function when a setf-expander is already present. (thanks to Douglas Katzman).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: improved threading on PPC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ROOM works again on Windows. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1206456&quot;&gt;#1206456&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Streams were flushed even when there was one byte still left in the buffer. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/910213&quot;&gt;#910213&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: OPEN handles correctly when :if-exists and :if-does-not-exist are either NIL or :ERROR. (reported by Jan Moringen)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated to 3.0.2.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: stack frames are packed more efficiently on x86oids, which ought to reduce the frequency of Methuselahn conservative references (it certainly helps with gc.impure.lisp / BUG-936304 on x86).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: on x86 and x86-64, integer negation forms like (- x) are now recognized in modular arithmetic contexts, and compile to native negate, rather than going through bignums only to keep the low bits.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Compiling potential modularic arithmetic forms does not cause type errors when some integer types lack lower or upper bounds. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1199127&quot;&gt;#1199127&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Non-trivial modular arithmetic forms are always cut to the right bitwidth before being used in a non-modular context. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1199428&quot;&gt;#1199428&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Multiple catch/unwind blocks in a single function are now allocated in the right stack order on win32. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1072739&quot;&gt;#1072739&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: the contrib SB-GMP links with libgmp at runtime to speed up arithmetic on bignums and ratios. (contributed by Stephan Frank)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: disassemble now annotates some previously missing static functions, like LENGTH.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: clean.sh now also cleans doc/internals.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:PRINT-SYMBOL-WITH-PREFIX can be used within ~// to print a symbol with a package prefix.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The debugger and backtracing are more robust against buggy PRINT-OBJECT methods.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: calls to static functions on x86-64 use less instructions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: compute encode-universal-time at compile time when possible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: when referencing internal functions as #'x, don't go through an indirect fdefn structure.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SLEEP doesn't cons on non-immediate floats and on ratios.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: (mod fixnum) type-checks are performed using one unsigned comparison, instead of two.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: enable more modular arithmetic transforms in the presence of conditionals.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: bitwise OR forms can now trigger modular arithmetic as well, when the result is known to be negative.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: recognize more cases of useless LOGAND/LOGIOR with constants.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: comparisons between rationals and constant floats or between integers and constant ratios are now converted to rationals/integers at compile time.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: Smaller and faster DOUBLE-FLOAT-LOW-BITS on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: problems with NCONC type derivation (reported by Jerry James).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EXPT type derivation no longer constructs bogus floating-point types. (reported by Vsevolod Dyomkin)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-bsd-sockets has correct declaration of the canonname field of addrinfo. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1187041&quot;&gt;#1187041&lt;/a&gt;, patch by Jerry James)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: uninitialized type-error conditions can now be printed. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1184586&quot;&gt;#1184586&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: tests for sb-bsd-sockets no longer use a predefined port for listening, allowing several tests to run in parallel.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: during disassembly to *COMPILER-TRACE-OUTPUT* instruction prefixes as used on x86 and x86-64 no longer sometimes print incorrectly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1085729&quot;&gt;#1085729&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Specialised SIMD-PACK types can be negated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Modular arithmetic is more robust. (incidentally fixes another bug reported by Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FP return values from foreign calls are always rounded to single or double float precision on x87.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Known-safe vector access on x86oids should not fail spuriously when the index is of the form (+ x constant-positive-integer).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Remove GPL-licensed files from source distribution. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1185668&quot;&gt;#1185668&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtrace printer no longer tries to create very large lists when the arg-count register is clobberred by other code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1192929&quot;&gt;#1192929&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: x86 should never signal an FP exception while boxing an FP value, a situation that lands us into ldb.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;notice: The implementation of MAP-ALLOCATED-OBJECTS (the heart of ROOM, plus a few SB-INTROSPECT functions) has been completely rewritten; it may now exhibit different bugs than before.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: minimal runtime/compiler intrastructure support for SSE SIMD values, as SB-EXT:SIMD-PACK. Enabled on x86-64 via the build-time feature :sb-simd-pack. This should enable intrinsics extensions as libraries, without patching SBCL itself. Thanks to Alexander Gavrilov for maintaining a branch for so long.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: RUN-PROGRAM supports a :DIRECTORY argument to set the working directory of the spawned process. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/791800&quot;&gt;#791800&lt;/a&gt;) (patch by Matthias Benkard)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: boxed vectors (vectors of T or of FIXNUM) can now be stack-allocated on PPC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: &quot;fixed objects&quot; can now be stack-allocated on PPC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: WITH-PINNED-OBJECTS no longer conses on PPC/GENCGC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: (sb-introspect:find-definition-sources-by-name x :vop) now also returns VOPs which do not translate any functions, and finds defoptimizer types ir2convert and stack-allocate-result.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better type derivation for APPEND, NCONC, LIST. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/538957&quot;&gt;#538957&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: MAP-ALLOCATED-OBJECTS (the heart of ROOM) now walks the heap in a manner similar to the GC rather than its previous ad-hoc scheme, and is therefore no less and possibly more accurate.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes and enhancements related to Unicode:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the character database information has been updated to Unicode 6.2;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;support for canonical and compatibility decomposition of characters has been added, along with support for primary composition;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;support for Unicode normalization forms of strings (NFC, NFKC, NFD and NFKD) has been included;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;querying the character database for code points not defined by Unicode gives less wrong answers (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1178038&quot;&gt;#1178038&lt;/a&gt;, reported by Ken Harris)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: print intermediate evaluation results for some ASSERTed expressions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/789497&quot;&gt;#789497&lt;/a&gt;) (patch by Alexandra Barchunova)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: x86-64 disassemblies are annotated with unboxed constant values when there are references to (RIP-relative) unboxed constants.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: type derivation for LOG{AND,IOR,XOR} scales linearly instead of quadratically with the size of the input in the worst case. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1096444&quot;&gt;#1096444&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: handle errors when initializing *default-pathname-defaults*, sb-ext:*runtime-pathname*, sb-ext:*posix-argv* on startup, like character decoding errors, or directories being deleted.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Loading a core with a discontiguous dynamic space now correctly computes the amount of dynamic space used.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: disassembler missing &quot;,8&quot; on SHLD&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtracing through INTERNAL-ERROR signal handlers on systems that provide an &quot;invalid&quot; stack frame link for the signal handler itself now use the saved-fp-and-pc mechanism to pick up from the stack frame in the interrupt (signal) context. This is known to affect threaded FreeBSD/x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some LOOP statements couldn't be compiled. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1178989&quot;&gt;#1178989&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-sequence:dosequence works on literal vectors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: errors in generic arithmetic show the assembly routine's caller on x86 and x86-64. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/800343&quot;&gt;#800343&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Compile-time type errors should never result in COMPILE-FILE failure. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/943953&quot;&gt;#943953&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Known bad local calls do not cause strange failures when emitting or dumping code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/504121&quot;&gt;#504121&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Multiply-inlined structure constructor don't cause IR2-time codegen errors: type checks are inserted as necessary. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1177703&quot;&gt;#1177703&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Unsigned modular arithmetic is correctly converted into signed modular arithemtic (mostly to exploit fixnum-width VOPs). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1026634&quot;&gt;#1026634&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a combination of inlined local function with &amp;amp;optional and recursion no longer causes undescriptive compiler errors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1180992&quot;&gt;#1180992&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sub-word BOOLEAN alien types now disregard higher order bits when testing for non-zero-ness.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (CONCATENATE 'null ...) no longer fails for generic sequences. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1162301&quot;&gt;#1162301&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Type mismatch for the value of conditional expressions are correctly reported when detected at compile-time, instead of complaining about a constant NIL (similar for non-EQ-comparable catch tags).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Referring to INLINE global functions as values should not result in a compilation failure. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1035721&quot;&gt;#1035721&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster ISQRT on fixnums and small bignums&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster and smaller INTEGER-LENGTH on fixnums on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: On x86-64, the number of multi-byte NOP instructions used for code alignment is now always minimal.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: On 64-bit targets, the compiler generates much faster code for type checks for types known at compile time that are smaller than (SIGNED-BYTE 64) or (UNSIGNED-BYTE 64) and larger than FIXNUM, and their COMPLEX variants.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: On x86 targets, more uses of ALIEN-FUNCALL during cross compilation now inline the INVOKE-WITH-SAVED-FP-AND-PC dance.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ROOM no longer conses so egregiously on non-x86oid systems.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: associative bitwise operations reassociate patterns like (f (f x k1) k2) to expose (f x (f k1 k2)). Same for + and * of rational values.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: quasiquote expressions now perform more constant folding, instead of consing equal lists at runtime. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1026439&quot;&gt;#1026439&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: local call analysis of inlined higher-order function should converge more quickly, resulting in better code for complex functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: On x86-64, medium (word-sized but wider than 32 bits) integer constants are handled more cleverly, especially when they can be represented as sign-extended (signed-byte 32). (Based on a patch by Douglas Katzman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: IF/IF conversion should reliably result in sane code when (some of) the results of the inner IF are always false or always true.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: On x86oids, variable right shifts of machine words are compiled into straight SAR/SHR, instead of going through the generic VOP. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1066204&quot;&gt;#1066204&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: TRACE :PRINT-ALL handles multiple-valued forms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/457053&quot;&gt;#457053&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: :allocation slot option works for condition slots (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1049404&quot;&gt;#1049404&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefining conditions does not lead to multiple evaluations of hairy slot initfunctions anymore (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1164969&quot;&gt;#1164969&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CLASS-DIRECT-DEFAULT-INITARGS now works for condition classes (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1164970&quot;&gt;#1164970&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: function constants now work as initforms and default initarg values of conditions (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/539517&quot;&gt;#539517&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: svref/(setf svref) on symbol macros don't crash the compiler anymore. (Minimal test case provided by James M. Lawrence on sbcl-devel)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: no more bogus ## references when pretty printing backquoted forms with non-trivial structure sharing. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1161218&quot;&gt;#1161218&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Don't signal an error on (setf (documentation nil 'function) &quot;doc&quot;). Signal a style-warning instead when trying to set documentation of NIL for all other documentation types. (Reported by Zach Beane; regression since 2e52fa05.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: modular arithmetic involving large constants and conditionals should no longer result in spurious dead code elimination. (Reported by Eric Marsden).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: our mach exception handler can seemingly called very early in the program execution process on OS X 10.8.0. Try and handle that case robustly, without potentially leaking mach ports too much.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: LOGBITP and LOGTEST optimizations from x86 ported to x86_64.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: the continuable error when defknown-ing over extant fndb entries can be ignored by passing :overwrite-fndb-silently t as a keyword argument to sb-c:defknown (after attributes). Useful to allow defknown to be re-loaded. Use with :allow-other-keys t for backward compatibility.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: compiler is much faster in compiling SVREF and (SETF SVREF) forms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Prevent a make-array transform from modifying source forms causing problems for inlined code. Thanks to Bart Botta. (regression since 1.0.42.11-bis)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: clear-output calls the correct gray stream routine, sb-gray:stream-clear-output. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1153257&quot;&gt;#1153257&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an error is signalled for an invalid format modifier: ~&amp;lt;~@&amp;gt;. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1153148&quot;&gt;#1153148&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Better error messages for package operations (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1154776&quot;&gt;#1154776&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: delete-package on a nonexistent package should signal a cerror. (regression since 1.0.37.44).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: accessing &amp;amp;MORE (stack allocated &amp;amp;REST) arguments checks bounds. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1154946&quot;&gt;#1154946&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1072112&quot;&gt;#1072112&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiling make-array no longer signals an error when the element-type is an uknown type, a warning is issued instead. Thanks to James Kalenius (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1156095&quot;&gt;#1156095&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SEARCH on generic (non-VECTOR non-LIST) sequence types no longer produces wrong results for some inputs. (Thanks to Jan Moringen.) (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1153312&quot;&gt;#1153312&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-SPROF:WITH-PROFILING no longer loops by default.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: package local nicknames. See manual for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:MAP-DIRECTORY provides a powerful interface for directory traversal: it is the backend used by SBCL for CL:DIRECTORY.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: easier to use restarts for resolving name-conflicts resulting from IMPORT, EXPORT, or USE-PACKAGE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: variant DEFPACKAGE forms now signal a full error with restarts provided for resolving the situation. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/891351&quot;&gt;#891351&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: by setting SB-EXT:*ON-PACKAGE-VARIANCE* appropriately variant DEFPACKAGE forms can now signal a full error with restarts provided for resolving the situation. See manual for details. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/891351&quot;&gt;#891351&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: make-random-state now uses CryptGenRandom as a seed on Windows. (Thanks to Anton Kovalenko.) (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1102748&quot;&gt;#1102748&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: backtrace improvements
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;secondary CLOS dispatch functions have better debug names (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/503081&quot;&gt;#503081&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;easier to read method names in backtraces. See SB-DEBUG:*METHOD-FRAME-STYLE*.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-DEBUG:PRINT-BACKTRACE and SB-DEBUG:LIST-BACKTRACE are available as forwards-compatible replacements for SB-DEBUG:BACKTRACE and SB-DEBUG:BACKTRACE-AS-LIST.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-DEBUG:*SHOW-ENTRY-POINT-DETAILS** has been deprecated, as the same information is available in less intrusive form as frame annotations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-POSIX now provides MAP-ANON.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: test-suite results are colorized, failures in red, unexpected success in green. Works on Windows and on terminals with ANSI escape code support. Can be disabled with --no-color.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SB-CONCURRENCY:QUEUE implementation is more efficient. (thanks to James M. Lawrence)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: no more unused variable style warnings from RESTART-CASE macroexpansion (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1113859&quot;&gt;#1113859&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: no more unused variable style warnings when loading sb-bsd-sockets.asd (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1114681&quot;&gt;#1114681&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: deleting a package removes it from implementation-package lists of other packages.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-SPROF:WITH-PROFILING is now usable in the Slime REPL on Darwin. This does not fix the occasional &quot;interrupt already pending&quot; issue, though.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (setf (documentation 'x 'function)) and (setf (documentation #'x t)) set documentation in different places. (regression since 1.0.43.63)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: build on newer glibc. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1095036&quot;&gt;#1095036&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: LOOP expressions using &quot;of-type character&quot; have slightly more efficient expansions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: very long (or infinite) constant lists in DOLIST do not result in very long compile times or heap exhaustion anymore. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1095488&quot;&gt;#1095488&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: `#3(1) is read as #(1 1 1), not as #(1). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1095918&quot;&gt;#1095918&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: adjust-array ignored :initial-element for simple-vectors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1096359&quot;&gt;#1096359&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: optimizations to MAKE-INSTANCE with literal list initargs no longer cause infinite loops (on circular data) or violate eqlity constraints. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1099708&quot;&gt;#1099708&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FIRST was not being open coded. (regression from 1.1.0)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: warnings about bad locale settings, LANG, LC_CTYPE, etc. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/727625&quot;&gt;#727625&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support for C-c to interrupt the foreground thread on Windows. (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: STDCALL alien callbacks. (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Safepoint builds on POSIX platforms can now optionally be built without pseudo-atomic sequences and their run-time overhead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Threads created outside of Lisp can enter Lisp through alien callbacks and appear as Lisp threads for the duration of that function invocation. On safepoint builds only.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Miscellaneous improvements to namestrings and underlying calls to OS functions for file system access on Windows. (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The MSI installer support for Windows now uses Windows Installer XML at least version 3.5 and includes various usability improvements. (Thanks to Dmitry Kalyanov and Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The sb-bsd-sockets contrib now supports non-blocking-mode on Windows. (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: The Windows backend now supports the x86-64 platform. (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fasls are now once again directly executable (on platforms supporting shebang lines, with a suitably-installed sbcl).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: make.sh --help no longer runs clean.sh. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/937001&quot;&gt;#937001&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix CAS access to slots of direct instances of structure classes in the presence of subclasses sharing the same conc-name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Logical pathname namestrings on Windows have been changed to be lower-case, to minimize differences between POSIX and Windows.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;notice: System requirements for SBCL on Microsoft Windows: Windows NT 5.1 or newer (Windows XP, Server 2003) is required. Support for Windows 2000 (NT 5.0) is no longer being maintained.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;notice: Starting with this version, SBCL on Windows no longer supports building with disabled thread support.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: frlocks have been added to SB-CONCURRENCY contrib module.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: New feature sb-dynamic-core allows the runtime to be rebuilt or relocated without requiring changes to the core file on all linkage table platforms. Required on Windows. (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Console I/O streams use UCS-2. (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: I/O on Windows unnamed pipes is interruptible asynchronously using interrupt-thread, timers when running on Windows NT version 6.1 or newer (Windows 7, Server 2008 R2). (Thanks to Anton Kovalenko.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Support for the experimental safepoint-based stop-the-world protocol on the PowerPC platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Non-blocking reads from the Windows console were not necessarily non-blocking. Thanks to Anton Kovalenko. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/308923&quot;&gt;#308923&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stability of threads on Windows has been improved upon through an updated stop-the-world protocol (thanks to Anton Kovalenko).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: WITH-COMPILATION-UNIT no longer grabs the world-lock. (COMPILE and COMPILE-FILE still do.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the SPARC backend now supports the precise generational (GENCGC) garbage collection. Enabled by default on Solaris/SPARC and Linux/SPARC. Thanks to Raymond Toy (via CMUCL).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: add experimental support for the SB-THREAD feature and the timer facility on Windows. Thanks to Dmitry Kalyanov and Anton Kovalenko. Threads are enabled by default, and this version of SBCL is considered to be the last and final release to officially support building with threads disabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: The compiler no longer rotates loops in some cases where this transformation actually lead to worse code being generated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-CLTL2:MACROEXPAND-ALL correctly handles shadowing of symbol-macros by lexical bindings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stack allocation was prevented by high DEBUG declaration in several cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EXT:GC-LOGFILE signaled an error when no logfile was set. (thanks to SANO Masatoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PARSE-NATIVE-NAMESTRING performed non-native parsing when :JUNK-ALLOWED was true.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: type derivation inferred overly conservative types for unions of array types. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1050768&quot;&gt;#1050768&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.1.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: New variable, sb-ext:*disassemble-annotate* for controlling source annotation of DISASSEMBLE output. Defaults to T.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: TIMEOUT arguments added to WITH-MUTEX and WITH-RECURSIVE-LOCK, and WAIT-P argument added to WITH-RECURSIVE-LOCK.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:ATOMIC-PUSH and SB-EXT:ATOMIC-POP allow atomic operations on list heads.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Optional features (not enabled by default) allow the use of signals for inter-thread synchronization to be reduced on certain supported platforms (currently Linux, Solaris, and FreeBSD on x86 and x86-64). Set (and :sb-thread :sb-safepoint :sb-thruption :sb-wtimer) to test these experimental features. Known remaining bugs include minor thread safety issues, less timely freeing of memory by GC, and certain (not yet optimally low) runtime overhead. Thanks to Anton Kovalenko.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CL:SORT and CL:STABLE-SORT of lists are faster and use fewer comparisons, particularly on almost-sorted inputs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Reading floats with large exponents no longer takes too much time before reporting that the exponent is too large.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-BSD-SOCKETS:SOCKET-RECEIVE with a UDP socket now works correctly when the received datagram is larger than the provided buffer. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1023438&quot;&gt;#1023438&lt;/a&gt;, thanks to Robert Uhl)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EXT:GET-CAS-EXPANSION returned a bogus read-form when given a SYMBOL-VALUE form with a constant symbol argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EXT:GET-CAS-EXPANSION signaled an error when a macro expanding into a DEFCAS defined place was used as the place.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FIND and POSITION signaled a type-error when non-bits where looked for from bit-vectors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a race condition around thread creation could (in SBCL 1.0.57) lead to internal errors or crashes (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1058799&quot;&gt;#1058799&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: a section on random number generation has been added to the manual. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/656839&quot;&gt;#656839&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.58&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: implicit generic function warnings now specify the package in which the new generic function is being created.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:ATOMIC-UPDATE makes it easy to perform non-destructive updates of CAS-able places (similar to Clojure's swap!).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: run-program no longer decodes and re-encodes environment when :environment argument is not provided. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/985904&quot;&gt;#985904&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: errors during compiler-macro expansion no longer cause runtime errors, only a compile-time warning, otherwise behaving as if the compiler macro had declined to expand.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: On x86-64, code alignment of block headers is done with multi-byte NOPs now instead of repetitions of the single-byte NOP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MAP-INTO is substantially faster when the target sequence is of unknown type; mapping into lists is no longer O(N^2). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1001043&quot;&gt;#1001043&lt;/a&gt;, thanks to James M. Lawrence)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the compiler no longer heap-conses to check exits in cases where the exit function is dynamic extent, or when it can prove the exit function cannot escape. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1002534&quot;&gt;#1002534&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SB-SEQUENCE:DOSEQUENCE is faster on vectors of unknown element type, and vectors that aren't SIMPLE-ARRAYs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CL:SORT and CL:STABLE-SORT are more efficient in execution speed (around 1/3 the time in some cases), and a little better in terms of comparison calls. (Thanks to Takeru Ohta)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: On SPARC, a limitation on the number of code constants emittable by the compiler has been lifted, allowing certain long functions to compiled and assembled which had previously been unsupported; fixes cl-bench on this ISA (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1008996&quot;&gt;#1008996&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: potential for infinite recursion during compilation of CLOS slot typechecks when dependency graph had loops. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1001799&quot;&gt;#1001799&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: error forms reported with some program-errors were not escaped properly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: functions from EVAL are now on more equal footing with functions from COMPILE. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1000783&quot;&gt;#1000783&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/851170&quot;&gt;#851170&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/922408&quot;&gt;#922408&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ENSURE-GENERIC-METHOD-COMBINATION accepts method combination objects as its :METHOD-COMBINATION argument, not just lists designating method combinations. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/936513&quot;&gt;#936513&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-program no longer unconditionally uses /tmp/ for temporary files. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/968837&quot;&gt;#968837&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restore build on solaris/sparc. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1008506&quot;&gt;#1008506&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an issue with LDB in the PowerPC backend has been resolved; this fixes an issue found with cl-postgres (thanks to Tomas Hlavaty).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler-macro lambda-lists specifying non-keyword symbols as keyword arguments no longer accidentally match unevaluated symbols against them.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FORMAT used to loop infinitely in some cases when a COLINC parameter was zero, now it signals an error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/905817&quot;&gt;#905817&lt;/a&gt;, fixed since 1.0.56.19)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-program with :pty t no longer makes the pty as the process's controling terminal.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: spawning threads on OS X 10.8 no longer crashes the process (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1012811&quot;&gt;#1012811&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.57&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;RANDOM enhancements and bug fixes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: the range and distribution of random integers could be catastrophically wrong when the compiler derived the type of its argument as a disjoint set of small integers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the distribution of random integers is now completely uniform even when the specified limit is not a power of two. (Previously some values could be about 0.1 % more probable than others in the worst case.) (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309467&quot;&gt;#309467&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;RANDOM on large integer arguments is generally faster and conses less than before; this is visible for fixnums above a length of about 24 bits, but extremely so for bignums: the old implementation used time and space quadratical in the size of the argument there, the new one is linear.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: redesigned protocol for quitting SBCL. SB-EXT:EXIT is the new main entry point, SB-EXT:QUIT is deprecated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: additions to the SB-THREAD API: RETURN-FROM-THREAD, ABORT-THREAD, MAIN-THREAD-P, and MAIN-THREAD.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: FASL loading no longer grabs the world-lock.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: GENCGC reclaims space more aggressively when objects being allocated are a large fraction of the total available heap space. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/936304&quot;&gt;#936304&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: backtraces show the correct number of arguments for frames called with too many arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: support for abort(3), exit(3), and _exit(2) has been added to SB-POSIX.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated 2.21.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: fewer uses of full calls to signed modular functions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/903821&quot;&gt;#903821&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: typechecking alien values is typically 5 x faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: FDEFINITION, SYMBOL-FUNCTION, MACRO-FUNCTION, and FBOUNDP are 20% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: file compilation performance issues when dumping subtypes of CHARACTER (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/994487&quot;&gt;#994487&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed disassembly of some SSE instructions on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-SIMPLE-STREAMS signals an error for bogus :CLASS arguments in OPEN. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/969352&quot;&gt;#969352&lt;/a&gt;, thanks to Kambiz Darabi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CASE normal-clauses do not allow T and OTHERWISE as keys. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/959687&quot;&gt;#959687&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF (FIND-CLASS X) NIL) removed proper name of the underlying classoid even if X was not the proper name of the class. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/941102&quot;&gt;#941102&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: declaration leakage between lexical environments due to careless use of NCONC in MAKE-LEXENV. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/924276&quot;&gt;#924276&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ENSURE-DIRECTORIES-EXIST now works when *default-pathname-defaults* contains NAME or TYPE components.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PPRINT couldn't print improper lists with CARs being some symbols from CL package, e.g. (loop . 10).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-program with existent or non-existent files for :output or :input when :if-output-exists or :if-input-does-not-exist are NIL properly returns NIL instead of signalling an obscure error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix miscompilation of some logand forms with large constant arguments. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/974406&quot;&gt;#974406&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: account for funcallable-instance objects properly in ROOM.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: incorrect octets reported for c-string decoding errors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/985505&quot;&gt;#985505&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: miscompilation of LDB on the PowerPC platform. (thanks to Bruce O'Neel)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better input error reporting for COMPILE-FILE. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/493380&quot;&gt;#493380&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: default size of non-nursery generations has been shrunk on GENCGC, allowing faster release of memory back to the OS. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/991293&quot;&gt;#991293&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WITH-DEADLINE (:SECONDS NIL :OVERRIDE T) now drops any existing deadline for the dynamic scope of its body.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler-internal interval arithmetic needed to be more conservative about open intervals when operated on by monotonic but not strictly-monotonic functions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/975528&quot;&gt;#975528&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: copy-tree caused stack exhaustion on long linear lists, and now it's also slightly faster. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/998926&quot;&gt;#998926&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better error messages for malformed declarations. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/1000239&quot;&gt;#1000239&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: define-condition didn't return the name of the defined condition.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;improved docstrings: REPLACE (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/965592&quot;&gt;#965592&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.56&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: fix copy-structure. When copying from stack to heap, garbage could end up in the heap making GC unhappy. (Thanks to James Knight, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/911027&quot;&gt;#911027&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancements
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SBCL can now be built using Clang.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ASDF has been updated 2.20.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler errors when weakening hairy integer types. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/913232&quot;&gt;#913232&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: don't complain about a too-hairy lexical environment for inlining when the function has never been requested for inlining. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/963530&quot;&gt;#963530&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.55&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancements to building SBCL using make.sh:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;--fancy can be specified to enable all supported feature enhancements.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;--with-&amp;lt;feature&amp;gt; and --without-&amp;lt;feature&amp;gt; can be used to specify which features to build with.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;--arch option can be used to specify the architecture to build for. (Mainly useful for building 32-bit SBCL's on x86-64 hosts, not full-blows cross-compilation.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: extended package prefix syntax &amp;lt;pkgname&amp;gt;::&amp;lt;form-in-package&amp;gt; which allows specifying name of the default interning package for the whole form.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: when *READ-EVAL* is true, arrays with element type other than T can be printed readably using #.-based syntax. (Thanks to Robert Brown)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: MAKE-ALIEN signals a storage-condition instead of returning a null alien when malloc() fails. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/891268&quot;&gt;#891268&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:PRINT-UNREADABLY restart for PRINT-NOT-READABLE conditions can be conveniently accessed through function with the same name, analogously to CONTINUE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:*SUPPRESS-PRINT-ERRORS* can be used to suppress errors from the printer by type, causing an error marker to be printed instead. (Thanks to Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: BACKTRACE and DESCRIBE now bind *PRINT-CIRCLE* to T, and generally behave better when errors occur during printing.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the test runner now takes a --report-skipped-tests argument to report the individual tests skipped as well as the number of skipped tests.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: undefined functions now appear in backtraces as (&quot;undefined function&quot;) instead of (&quot;bogus stack frame&quot;) on x86oids.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: detected deadlocks no longer cause stderr to be spammed, and deadlock errors are reported in an easier-to-decipher manner.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DESCRIBE on type designators reports the expansion in more cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SBCL now provides either an explicit :BIG-ENDIAN or :LITTLE-ENDIAN in *FEATURES*, instead of :BIG-ENDIAN being implied by lack of the :LITTLE-ENDIAN feature. (Thanks to Luís Oliveira, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/901661&quot;&gt;#901661&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better disassembly of segment-prefixes on x86 and other instruction prefixes (e.g. LOCK) on x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: FIND and POSITION on bit-vectors are orders of magnitude faster (assuming KEY and TEST are not used, or are sufficiently trivial.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SUBSEQ on vectors of unknown element type is substantially faster. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/902537&quot;&gt;#902537&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: specialized arrays with non-zero :INITIAL-ELEMENT can be stack-allocated. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/902351&quot;&gt;#902351&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the compiler is smarter about representation selection for floating point constants used in full calls.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the compiler no longer refuses to coerce large fixnums to single floats inline, except on x86 where this limitation is still necessary.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: truncation operations on integers with constant divisor arguments 1 and -1 are optimized away.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: deadlock detection could report the same deadlock twice, for two different threads. Now a single deadlock is reported exactly once.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interval-arithmetic division during type derivation did not account for signed zeros.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler error when typechecking a call to a function with non-constant keyword arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: misoptimization of TRUNCATE causing erratic behaviour.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: condition slot accessors no longer cause undefined function style-warnings when used in the :REPORT clause of the DEFINE-CONDITION form that defines them. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/896379&quot;&gt;#896379&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFGENERIC warns about unsupported declarations, as specified by ANSI. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/894202&quot;&gt;#894202&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SUBTYPEP tests involving forward-referenced classes no longer bogusly report NIL, T.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bogus style-warnings for DEFMETHOD forms that both declared some required arguments ignored and performed assignments to others. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/898331&quot;&gt;#898331&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: *EVALUATOR-MODE* :COMPILE treated (LET () ...) identically to (LOCALLY ...) leading to internally inconsistent toplevel-formness.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non-toplevel DEFSTRUCT signaled a style warning for unknown type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefining a function whose previous definition contained an unknown type no longer causes a style-warning. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/806243&quot;&gt;#806243&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: undefined functions now appear in backtraces as (&quot;undefined function&quot;) instead of (&quot;bogus stack frame&quot;) on non-x86oids.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtraces are no longer cut off at (&quot;undefined function&quot;) when called under certain circumstances (involving a caller-allocated stack frame) on PPC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RUN-PROGRAM leaked a file-descriptor per call on non-Windows systems. (regression since 1.0.53)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GC deadlocks from dladdr() on certain platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: broken standard streams no longer automatically cause recursive errors on debugger entry.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: build ignored --dynamic-space-size=&amp;lt;size&amp;gt; argument to make.sh (regression since 1.0.53)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: attempts to stack allocate a required argument to a function with an external entry point caused compiler-errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler notes for failed stack allocation for a function argument no longer claim to be unable to stack allocate the function.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COERCE now signals a type-error on several coercions to subtypes of CHARACTER that are forbidden according to ANSI. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/841312&quot;&gt;#841312&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: missing failure-to-stack-allocate compiler notes for some forms of MAKE-ARRAY with dynamic-extent. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/902351&quot;&gt;#902351&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some of the compile-time side-effects of DEFCLASS were not caught by package locks.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Proper handling of --dynamic-space-size option on 32 bit platforms.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.54&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible changes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;RENAME-FILE on a symbolic links used to rename the linked-to file instead of the link.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DELETE-DIRECTORY on symbolic link to a directory used to delete the directory, but now signal an error instead. Use TRUENAME to resolve the pathname if you wish to delete the linked directory, and DELETE-FILE if you wish to delete the&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The internal SB-THREAD::SPINLOCK API has been deprecated, and using symbols associated with it will trigger a compile-time warning.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;thread-related enhancements: (This work has been funded by the SBCL Threading 2011 IndieGoGo campaign. Many thanks to generous donors!)
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Threading is now more reliable on non-Linux platforms. We still don't consider threads on non-Linux platforms good enough to enable them by default, but they're in a clearly better shape now.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Deadlines supported now on all platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;All blocking functions in the threading API now have a :TIMEOUT argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Semaphore notification objects have been added to SB-THREAD.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-CONCURRENCY contrib now includes Allegro-style GATE objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-EXT:COMPARE-AND-SWAP has been extended to support SLOT-VALUE, STANDARD-INSTANCE-ACCESS, and FUNCALLABLE-STANDARD-INSTANCE-ACCESS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Users can now defined new places usable with SB-EXT:COMPARE-AND-SWAP using an API anologous to defining new SETFable places.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GC-related enhancements and bug fixes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;--dynamic-space-size and --control-stack-size now understand Kb, Mb, and Gb suffixes. Default is megabytes as before.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on GENCGC targets, the default dynamic space size is now 512Mb for 32-bit systems, and 1Gb for 64-bit systems. (OpenBSD/x86-64 is the only exception, defaulting to mere 444Mb to fit under default ulimits.) The new defaults are in place to prevent hitting swap on low-end systems. Use build-time option --dynamic-space-size to build an SBCL with another default, or the runtime option to adjust the size at startup: a good size is at most equal to the amount of physical memory the system has.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on GENCGC targets, nursery and generation sizes now default to 5% of dynamic-space size.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on GENCGC targets, SB-KERNEL:MAKE-LISP-OBJ no longer categorically refuses to create SIMPLE-FUN objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on 64-bit GENCGC targets, setting the nursery size above 4Gb now works. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/870868&quot;&gt;#870868&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on CHENEYGC targets, SB-KERNEL:MAKE-LISP-OBJ now does the same validation of pointer objects as GENCGC does, instead of a comparatively weak bounds-check against the heap spaces.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-BSD-SOCKETS bug fixes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;GET-PROTOCOL-BY-NAME had a significant memory leak.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GET-HOST-BY-NAME and GET-HOST-BY-ADDRESS small amounts of memory on systems with getaddrinfo().&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GET-HOST-BY-NAME and GET-HOST-BY-ADDRESS weren't thread or interrupt safe outside systems with getaddrinfo().&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated 2.019.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: special-case TCO prevention for functions which never return extended to untrusted types, keeping one more frame's worth of debug information around in many cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: debug-names of anonymous and local function are more descriptive. Affects backtraces and SB-SPROF results. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/805100&quot;&gt;#805100&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: on win32, ABS of complex floats guards better against overflows. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/888410&quot;&gt;#888410&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: RUN-PROGRAM now distinguishes exec() failing from child process exiting with code 1. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/676987&quot;&gt;#676987&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: convenience function SET-SBCL-SOURCE-LOCATION for informing the system where on the filesystem the SBCL sources themselves are located. (Thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the compiler is now able to derive tighter bounds for floating point numbers in some cases. (Thanks to Lutz Euler, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/894498&quot;&gt;#894498&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on 64-bit targets, atomic-incf/aref does index computation correctly, even on wide-fixnum builds. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/887220&quot;&gt;#887220&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (DIRECTORY &quot;foo/*/*.*&quot;) did not follow symlinks in foo/ that resolved to directories.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: type mismatch when assigning to lexical variables no longer result in fasl-dumping internal type objects. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/890750&quot;&gt;#890750&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: type mismatch on (SETF AREF) and function return values no longer result in fasl-dumping internal type objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: With several combinations of argument types, for example (EXPT &amp;lt;integer&amp;gt; &amp;lt;(complex double)&amp;gt;), EXPT now uses double-precision throughout instead of partially calculating only to single-precision. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/741564&quot;&gt;#741564&lt;/a&gt;; thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SYMBOL-VALUE-IN-THREAD is no longer able to construct bogus objects when interrupted by GC on PPC.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.53&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: on 64-bit targets, in src/compiler/generic/early-vm.lisp, the parameter n-fixnum-tag-bits may now vary from 1 (fixnum = (signed-byte 63)) to 3 (fixnum = (signed-byte 61)) at build-time.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:WAIT-FOR allows waiting for arbitrary events.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor(?) incompatible(?) change: The default fixnum width on 64-bit targets is now 63 bits (up from 61).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DESCRIBE now reports a lambda-list and source location for complext setf-expanders.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PUSH, PUSHNEW, POP, REMF, INCF, DECF, DEFINE-MODIFY-MACRO, GETF, LOGBITP, LDB, and MASK-FIELD now arrange for non-primary values of multiple-valued places to be set to NIL, instead of signalling an error (per a careful reading of CLHS 5.1.2.3).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: floating-point traps now work on darwin/x86 and /x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: repair crash in x86oid darwin signal handling emulation when built with certain compilers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-ROTATE-BYTE misrotated to the right when using constant rotation arguments on x86-64. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/882151&quot;&gt;#882151&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: low-level control flow optimisations could result in bogus code in functions with tail and non-tail calls to local functions on x86oids. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/883500&quot;&gt;#883500&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on SPARC/:sb-unicode, avoid crashing the assembler by trying to emit literal characters &amp;gt; (code-char 4095), for comparisons with constant characters.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ROOM reported only the low 32 bits of dynamic space usage on 64 bit platforms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/881445&quot;&gt;#881445&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DELETE-FILE did not MERGE-PATHNAMES, making it possible to delete the wrong file when using relative pathnames. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/882877&quot;&gt;#882877&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: optimized SEARCH of vectors-on-vectors mishandled zero-length sequences and :KEY NIL.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.52&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated to version 2.017.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the --core command line option now accepts binaries with an embedded core.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: when built with :sb-core-compression, core files (regular or executable) can be compressed with zlib. Use the :COMPRESSION argument to SAVE-LISP-AND-DIE to specify a compression level.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: --[no-]merge-core-pages determines whether the runtime hints the operating system that identical core pages between SBCL processes should share the same physical memory. Default is to only enable this for compressed cores.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SLEEP no longer conses.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: *PRINT-PRETTY* no longer slows down printing of strings or bit-vectors when using the standard pretty-print dispatch table.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non-function FTYPE declarations no longer cause a compiler-error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/738464&quot;&gt;#738464&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler-errors causes by MEMBER types in conjunction with with AREF, CHAR, etc. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/826971&quot;&gt;#826971&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler-errors causes by integer arguments with composed of multiple ranges to ARRAY-IN-BOUNDS-P. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/826970&quot;&gt;#826970&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ,@ and ,. now signal a read-time error for certain non-list expressions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/770184&quot;&gt;#770184&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: complex single float literals are correctly aligned when used as arguments of arithmetic operators.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on 32-bit platforms, rounding of double floats larger than a fixnum is correct. (reported by Peter Keller)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stray FD-HANDLERs are no longer left lying around after unwinds from RUN-PROGRAM. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/840190&quot;&gt;#840190&lt;/a&gt;, reported by Dominic Pearson; fix from Max Mikhanosha)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefining classes such that slots with custom allocation are added or removed works again.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.51&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-BSD-SOCKET socket streams no longer participate in SERVE-EVENT by default: pass :SERVE-EVENTS T to MAKE-SOCKET-STREAM if using SERVE-EVENT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: added support for socket keepalive timeout intervals and probe counts on Linux.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: building 32-bit SBCL on Linux/x86-64 now works without a chroot. (Use &quot;SBCL_ARCH=x86 sh make.sh&quot; to build.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: added new toplevel options --quit and --non-interactive (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/822712&quot;&gt;#822712&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the Windows port of SBCL now builds and runs on Wine (thanks to Anton Kovalenko).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: more, and more correct, SSE instruction definitions on x86-64 (thanks to Alexander Gavrilov).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:SPIN-LOOP-HINT assembles to an instruction designed to help the processor execute spin loops, when applicable. Currently implemented for x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: unsigned integer divisions by a constant are implemented using multiplication (affects CEILING, FLOOR, TRUNCATE, MOD, and REM.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved type-derivation for LOAD-TIME-VALUE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correct RIP offset calculation in SSE comparison and shuffle instructions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/814688&quot;&gt;#814688&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COERCE to unfinalized extended sequence classes now works. (reported by Jan Moringen; &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/815155&quot;&gt;#815155&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a compiler error during typecheck generation, reported by Eric Marsden. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/816564&quot;&gt;#816564&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: obsolete instance protocol fires when shared slots are added or removed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed-format floating point printing with scaling factors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/811386&quot;&gt;#811386&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using GCC &amp;gt;= 4.6 to build SBCL on x86 no longer breaks backtraces. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/818460&quot;&gt;#818460&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better backtraces for interrupted syscall frames on x86. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/549673&quot;&gt;#549673&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SSE comparison instructions can be disassembled even when one operand is in memory. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/814702&quot;&gt;#814702&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: incomplete writes when not using SERVE-EVENTS. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/820599&quot;&gt;#820599&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MULTIPLE-VALUE-BIND + VALUES -&amp;gt; LET conversion could lose derived type information associated with the VALUES form.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: broken warnings/errors for type-errors involving LOAD-TIME-VALUE forms. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/823014&quot;&gt;#823014&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: OPEN :IF-EXISTS :APPEND now returns correct FILE-POSITION before first write (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/561642&quot;&gt;#561642&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiled closures from EVAL could not be DESCRIBEd. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/824974&quot;&gt;#824974&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bound propagation involving conversion of large bignums to floats no longer signals a SIMPLE-TYPE-ERROR, reported by Lutz Euler. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/819269&quot;&gt;#819269&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: &amp;amp;REST to &amp;amp;MORE conversion still works in unsafe call to known functions; reported by Lutz Euler (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/826459&quot;&gt;#826459&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bogus deadlocks from interrupts and GCs. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/807475&quot;&gt;#807475&lt;/a&gt;, regression since 1.0.48)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.50&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: errors from FD handlers now provide a restart to remove the offending handler.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-INTROSPECT:FIND-DEFINITION-SOURCE now works on structure copiers as well.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: location of user or system initialization file can now easily be customized for saved cores. See: SB-EXT:*USERINIT-PATHNAME-FUNCTION* and SB-EXT:*SYSINIT-PATHNAME-FUNCTION*.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:MAKE-THREAD accepts an argument list designator for the thunk, as a keyword argument, :arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: constraint propagation is simplified (and sped up) when COMPILATION-SPEED &amp;gt; SPEED.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-ALIEN exports alien type specifiers SIZE-T and OFF-T.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: debugger understands &amp;amp;MORE arguments better.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: extracting bits of a single-float on x86-64 has been optimized. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/555201&quot;&gt;#555201&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MAP and MAP-INTO are more efficient for non-simple vectors, when (&amp;gt; SPEED SPACE).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: local call trampolines (x86 and x86-64) are emitted inline.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: implicit value cells for dynamic-extent closed-over bindings on x86 and x86-64 can hold unboxed values as well.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;meta-optimization: improved compilation speed, especially for large functions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/792363&quot;&gt;#792363&lt;/a&gt; and &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/394206&quot;&gt;#394206&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bound derivation for floating point operations is now more careful about rounding possibly closing open bounds. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/793771&quot;&gt;#793771&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-POSIX:SYSCALL-ERROR's argument is now optional. (accidental backwards incompatible change in 1.0.48.27)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: occasional debugger errors in when a type-error occured in a function with dynamic-extent &amp;amp;rest list.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: &amp;amp;optional and &amp;amp;key supplied-p arguments in DEFSTRUCT boa-construtors can be used to initialized structure slots.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FMAKUNBOUND removes the MACRO-FUNCTION, should one exist. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/795705&quot;&gt;#795705&lt;/a&gt;, regression)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DIRECTORY works better on logical pathnames.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RUN-PROGRAM no longer fails spuriously when argument strings are of the order of ARRAY-TOTAL-SIZE-LIMIT. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/787237&quot;&gt;#787237&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler no longer constant-folds NaNs in MAKE-{SINGLE,DOUBLE}-FLOAT. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/486812&quot;&gt;#486812&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FORMAT now handles floating point rounding correct, eg. (format nil &quot;~,1F&quot; 0.01) =&amp;gt; &quot;0.0&quot; instead of &quot;0.01&quot; as previously. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/308961&quot;&gt;#308961&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: style warning during lambda-list introspection of generic functions with both optional and key argments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: regalloc doesn't barf on unused TNs due to type-directed constant folding. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/729765&quot;&gt;#729765&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fixed an off-by-one in MAP-ALLOCATED-OBJECTS that might have caused infinite loops.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.49&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: WITH-LOCKED-HASH-TABLE no longer disables interrupts for its body.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: source locations are now available for files loaded as source, compile-time-too evaluation, and initialization files.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: WITH-COMPILATION-UNIT :SOURCE-NAMESTRING allows providing virtual source-file information, eg. overriding input-file of COMPILE-FILE when a temporary file is used for compilation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated to version 2.015.3.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: backtraces involving frames from the default evaluator are more readable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: RUN-PROGRAM works with user-defined binary input and output streams.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: more informative compile-time warnings and runtime errors for type-errors detected at compile-time.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: deadlock detection for mutexes and spinlocks.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: dynamic-extent for &amp;amp;rest lists stack allocate only their spines, not their argumets. While portable code should not rely on this, particularly in combination with inlining, it should make dynamic-extent easier to use safely.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-POSIX improvements:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;WNOHANG and WUNTRACED are exported.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SYSCALL-ERROR now also provides the name of the failing system call.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: --script improvements:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;errors on standard input, output, and error streams are handled and cause scripts to exit silently, making them easier to use in shell pipelines.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;backtraces from scripts now go to standard error instead of the terminal even if one is available.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;--script can be an argument, causing the script to be loaded from standard input.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: MAKE-ALIEN-STRING provides an easy way to transport lisp strings to foreign memory.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: (SETF GC-LOGFILE) allows logging garbage collections to a file, making it easier to understand heap dynamics.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: using a &amp;amp;REST argument only in APPLY or VALUES-LIST calls allows the compiler to automatically elide rest-list allocation so long as the call sites are in functions that the compiler knows cannot escape. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/504575&quot;&gt;#504575&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CALL-NEXT-METHOD using explicit arguments is faster, especially in safe code when none of the required arguments have changed their identities.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: blocking reads from FIFOs created by RUN-PROGRAM were uninterruptible, as well as blocking reads from socket streams created with for which :SERVE-EVENTS NIL. (regression from 1.0.42.43)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SET-SYNTAX-FROM-CHAR now removes dispatch-macro character syntax from the to-char if the from-char is not a dispatch-macro character.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: references to undefined variables in function calls that are optimized away now signal a runtime error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/722734&quot;&gt;#722734&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: miscompilation of MULTIPLE-VALUE-CALL when asserting derived types from a function defined in the same file. (regression from 1.0.43.57)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TRULY-THE forms are now macroexpandable and setf-expandable. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/771673&quot;&gt;#771673&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: spurious errors during QUIT when standard streams were closed.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.48&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: SB!KERNEL:INSTANCE-LAMBDA, deprecated for over five years, is now no longer supported.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: read() and write() have been added to SB-POSIX.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: types of DEFSTRUCT constructors are proclaimed more accurately, allowing better typechecking of call-sites.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: errors during compile-time-too processing (i.e. EVAL-WHEN) are no longer caught. (reverted to pre 1.0.34 behaviour)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: slightly faster ISQRT. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/713343&quot;&gt;#713343&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better support for Solaris /bin/sh in sh-based tests.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TRACE behaves better when attempting to trace undefined functions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/740717&quot;&gt;#740717&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: missed optimizations for (FUNCALL (LAMBDA ...) ...) in comparison to (FUNCALL #'(LAMBDA ...) ...).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ((LAMBDA ...) ...) forms with invalid argument counts resulted in a compile-time error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/720382&quot;&gt;#720382&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: forms such as (FUNCALL (FUNCTION NAME OOPS) ...) were compiled without complaints.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: less verbose source forms for functions from EVAL. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/747485&quot;&gt;#747485&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sense of SLOT-BOUNDP-USING-CLASS was inverted in a MAKE-INSTANCE optimization. (regression from 1.0.45.18/1.0.46.15)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: package locks did not protects against compile-time side-effects of DEFUN. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/675584&quot;&gt;#675584&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: --dynamic-space-size argument is validated more carefully. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/721457&quot;&gt;#721457&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: memory fault from printing a malformed simple-condition. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/705690&quot;&gt;#705690&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefining classes so that slot-definition classes change now engages the obsolete instance protocol. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/766271&quot;&gt;#766271&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: constant improper lists could break source coverage recording. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/767959&quot;&gt;#767959&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiling calls to eg. MEMBER with massive constant list arguments could exhaust stack.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.47&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: fix mach port rights leaks in mach exception handling code on darwin/x86 and /x86-64. (thanks to Willem Oudshoorn for motivation and the initial patch)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: --script muffles style-warnings and compiler notes. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/677779&quot;&gt;#677779&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: redefinition warnings for macros from different files. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/434657&quot;&gt;#434657&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better MACHINE-VERSION on Darwin x86 and x86-64. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/668332&quot;&gt;#668332&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: (FORMAT &quot;foo&quot; ...) and similar signal a compile-time warning. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/327223&quot;&gt;#327223&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: no more &quot;in: LAMBDA NIL&quot; messages from the compiler for forms processed using EVAL -- now the appropriate toplevel form is reported instead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: more legible style-warnings for inappropriate IGNORE and IGNORABLE declarations. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/726331&quot;&gt;#726331&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: :NOT-NULL option has been added to alien C-STRING type to indicate that NIL/NULL is excluded from the type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-INTROSPECT:MAP-ROOT allows mapping over pointers contained in arbitrary objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SLOT-VALUE &amp;amp;co are faster in the presence of SLOT-VALUE-USING-CLASS and its compatriots.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: core startup time is reduced by 30% on x86-64. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/557357&quot;&gt;#557357&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-DEBUG:BACKTRACE-AS-LIST guards against potentially leaking stack-allocated values out of their dynamic-extent. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/310175&quot;&gt;#310175&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: attempts to use SB-SPROF for wallclock profiling on threaded x86-64 builds caused a type-error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: calling COMPILE with something else than a lambda-expression as the second argument reports a more sensible error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/718905&quot;&gt;#718905&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: invalid combinations of :PREDICATE and :TYPE options in DEFSTRUCT are detected. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/520607&quot;&gt;#520607&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: constant keyword argument checking didn't take :ALLOW-OTHER-KEYS into account.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SLOT-BOUNDP information is correct during MAKE-INSTANCE in the presence of (SETF SLOT-VALUE-USING-CLASS) and SLOT-BOUNDP-USING-CLASS methods. (regression from 1.0.45.18)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: INITIALIZE-INSTANCE :AROUND methods supplying initargs via CALL-NEXT-METHOD work correctly. (regression from 1.0.45.19)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: several foreign functions accepting string also accepted NIL and consequently caused a memory fault at 0 now signal a type-error instead. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/721087&quot;&gt;#721087&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: under rare circumstances, constraint propagation could rewrite a variable reference to refer to a variable not in scope, causing an error during physical environment analysis when attempting to close over the variable. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/551227&quot;&gt;#551227&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SIMPLE-CONDITION :FORMAT-CONTROL defaults to NIL.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.46&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: largefile support on Solaris.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-PROFILE:REPORT now supports :LIMIT and :PRINT-NO-CALL-LIST arguments (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/710017&quot;&gt;#710017&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-PCL:+SLOT-UNBOUND+ is exported, making it possible to distinguish unbound instance slots when using STANDARD-INSTANCE-ACCESS &amp;amp;co. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/718039&quot;&gt;#718039&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ERROR and CERROR are approximately 5 times faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: optimized constructors are used for MAKE-INSTANCE of classes with applicable non-standard (SETF SLOT-VALUE-USING-CLASS), SLOT-BOUNDP-USING-CLASS, and INITIALIZE-INSTANCE :AROUND methods, speeding up instance creation in those cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: arithmetic operations with multiple constant arguments in now have them reduced at compile-time. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/676414&quot;&gt;#676414&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: determining current character position on string-streams for pretty-printing was overly slow.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: local tail calls to DYNAMIC-EXTENT functions can no longer cause lifetime analysis to overwrite closed-over variables (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/681092&quot;&gt;#681092&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: encoding errors from some multibyte external formats such as EUC-JP were not handled correctly (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/713063&quot;&gt;#713063&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: printing waitqueue objects without setting *PRINT-CIRCLE* to T is now safe (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/673630&quot;&gt;#673630&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Solaris/x86-64 wasn't getting built with lutex support by mistake. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/667297&quot;&gt;#667297&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CONSTANTLY generated functions had bogus lambda-lists. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/713626&quot;&gt;#713626&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RUN-PROGRAM :PTY option was racy on OpenBSD. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/669485&quot;&gt;#669485&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: UNINTERN takes a symbol, not a symbol designator -- could previously unintern the wrong symbol with the same name. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/693796&quot;&gt;#693796&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COPY-PPRINT-DISPATCH always has access to a pristine table, making it possible to restore the initial table if it has been messed up. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/678409&quot;&gt;#678409&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.45&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: ~/ and ~user/ are treated specially in pathnames. Refer to documentation for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated to version 2.010.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: mutated closed-over variables that are only accessed by DYNAMIC-EXTENT closures (currently only FLET and LABELS functions declared to be DYNAMIC-EXTENT) are stored directly in their containing stack frame, rather than allocating a VALUE-CELL (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/586103&quot;&gt;#586103&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: UNWIND-PROTECT cleanup functions are now declared DYNAMIC-EXTENT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtracing function with &amp;amp;REST arguments now shows the full argument list. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/310173&quot;&gt;#310173&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: return types for functions with complex lambda-lists are now derived properly (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/384892&quot;&gt;#384892&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: when SPEED &amp;gt; SPACE compiling CONCATENATE 'STRING with constant long string arguments slowed the compiler down to a crawl.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: closure VALUE-CELLs are no longer stack-allocated (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/308934&quot;&gt;#308934&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non-standard MAKE-METHOD-LAMBDA methods could break RETURN-FROM in the DEFMETHOD body.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #&amp;lt;SB-C::DEFINED-FUN ...&amp;gt; should no longer appear in compiler messages, being instead replaced with the corresponding function name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: don't derive overly complex unions of numeric types for arithmetic operators. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309448&quot;&gt;#309448&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.44&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: RUN-PROGRAM accepts :EXTERNAL-FORMAT argument to select the external-format for its :INPUT, :OUTPUT, AND :ERROR :STREAMs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ALLOCATION-INFORMATION also provides the page the object resides on.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: default dynamic-space size can be configured at build-time without touching source, using the --dynamic-space-size argument to make.sh.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DESCRIBE recognizes symbols naming optimization policy qualities, and mentions ALWAYS-BOUND declarations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ATOMIC-INCF now supports AREF of (SIMPLE-ARRAY SB-EXT:WORD (*)) as a place.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated to 2.009.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the system detects known type-erros in calls better, signalling a full warning about violated proclaimed FTYPEs and violations of derived FTYPEs within the same file, including self-calls.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: new function: SB-EXT:DELETE-DIRECTORY is now provided.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: constant-folding exploits numeric and character types, in addition member types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: numeric, character and member types that are inhabited by exactly one value are tested with EQL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: more conditional branches are eliminated during IR1. Branches are simplified before performing if/if-conversion, and simple equivalent branches (that only read the same constant or variable) are merged.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Windows port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;change: canonical unparsing form for pathname namestrings now uses / as directory separator. NATIVE-NAMESTRING still uses \ as the separator.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stackoverwriting due to incorrect usage of PeekConsoleInput on Windows. (thanks to Kalyanov Dmitry)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: build now works on cygwin with GCC 4.x installed. (thanks to Kalyanov Dmitry)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-sbcl.sh now works on Cygwin. (thanks to Kalyanov Dmitry)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler failed to derive the result-type of MAKE-ARRAY as (AND VECTOR (NOT SIMPLE-ARRAY)) when appropriate. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309130&quot;&gt;#309130&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (THE (VALUES ...)) in LOAD-TIME-VALUE caused a compiler-error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/646796&quot;&gt;#646796&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interrupts arriving during CL:OPEN caused an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: overeager character buffering could cause input to block spuriously when reading from a pipe (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/643686&quot;&gt;#643686&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more efficient timer expiry should avoid starvation on systems where number of SIGALRMs per second is restricted. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/375515&quot;&gt;#375515&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non-unicode builds no longer fail (broken since 1.0.36.15).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compile-times no longer scale linearly with the size of quoted lists in source-code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/654289&quot;&gt;#654289&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better errors for unknown external-formats in OPEN. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/561974&quot;&gt;#561974&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEBUG&amp;gt;SPEED no longer degrades ALIEN-FUNCALL performance quite so badly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/654485&quot;&gt;#654485&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-INTROSPECT:FIND-DEFINITION-SOURCES-BY-NAME no longer signals an error for eg. STRUCTURE. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/458015&quot;&gt;#458015&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOOP WITH NIL = ... signalled an unused variable style-warning. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/613871&quot;&gt;#613871&lt;/a&gt;, thanks to Roman Marynchak)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more reliable &amp;amp;REST list type derivation. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/655203&quot;&gt;#655203&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PPRINT-LOGICAL-BLOCK multiply-evaluated :PER-LINE-PREFIX, and issued pointles code-deletion notes for it, :PREFIX, and :SUFFIX.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler didn't utilize the proclaimed ftype for functions also declared NOTINLINE. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/655581&quot;&gt;#655581&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler could attempt to emit constant left shifts of greater value than n-word-bits. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309063&quot;&gt;#309063&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF SYMBOL-FUNCTION) and (SETF FDEFINITION) clear derived type information for the function being set. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/659220&quot;&gt;#659220&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the system used to signal bogus STYLE-WARNINGs when functions containing self-calls were recompiled with a new signature, and failed to warn when a self-call using the old signature was left in. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/655126&quot;&gt;#655126&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: incorrect FILE-POSITION on streams opened using :EXTERNAL-FORMAT :DEFAULT when the default external had character size other than 8 bits. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/657183&quot;&gt;#657183&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: derived types of functions in the same file were implicitly trusted, leading to potential heap corruption when those function were defined incompatibly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/657499&quot;&gt;#657499&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: existing ASDF source registries are ignored when building contribs (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/659105&quot;&gt;#659105&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: short-form DEFSETF checks that the second argument is a symbol (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/655824&quot;&gt;#655824&lt;/a&gt;, thanks to Roman Marynchak)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF MACRO-FUNCTION) clobbered macro-definitions before package-lock violation was detected. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/660752&quot;&gt;#660752&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the system can store different docstrings for a single function under different names. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/661631&quot;&gt;#661631&lt;/a&gt;, regression from 1.0.29.24)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: source-locations of DEFGENERIC forms weren't getting recorded properly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/384801&quot;&gt;#384801&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (COERCE X '(SIMPLE-VECTOR 5)) and similar coercions to vectors of specified length could confuse the type derivation in unsafe code. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/655872&quot;&gt;#655872&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-POSIX:FORK now signals an error if an attempt to fork with multiple Lisp threads running is made on every platform, not just Darwin. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/451111&quot;&gt;#451111&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-BSD-SOCKETS and SB-SIMPLE-STREAMS could leave stale finalizers around when core was saved, which could cause undefined behaviour when the core was reified.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Allow UNTRACE of functions that are no longer defined (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/667657&quot;&gt;#667657&lt;/a&gt;, thanks to Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-ARRAY calls with invalid keyword argument lists now signal a compile-time warning (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/664373&quot;&gt;#664373&lt;/a&gt;, thanks to Stas Boukarev)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.43&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: FD-STREAMS no longer participate in the serve-event event-loop by default. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/316072&quot;&gt;#316072&lt;/a&gt;)
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;In addition to streams created by explicit calls to MAKE-FD-STREAM this affects streams from CL:OPEN.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Streams from SOCKET-MAKE-STREAM still participate in serve-event by default, but this is liable to change: applications needing serve-event for socket streams should explicitly request it using :SERVE-EVENTS T in the call.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:WORD type is provided for use with SB-EXT:ATOMIC-INCF &amp;amp;co.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: CLOS effective method functions and defclass slot typechecking function now have debug names for use in backtraces and profiles.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF has been updated to version 2.004. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/605260&quot;&gt;#605260&lt;/a&gt;, thanks to Faré Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: symbols are printed using fully qualified names in several error and warning messages which are often associated with package conflicts or mixups (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/622789&quot;&gt;#622789&lt;/a&gt;, thanks to Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-BSD-SOCKETS:SOCKET-CONNECT was not thread safe. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/505497&quot;&gt;#505497&lt;/a&gt;, thanks to Andrew Golding)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: reading /proc files on Linux works. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/425199&quot;&gt;#425199&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DOTIMES accepted literal non-integer reals. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/619393&quot;&gt;#619393&lt;/a&gt;, thanks to Roman Marynchak)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WRITE-TO-STRING compiler macro binding special variable names, breaking code that tried to write the value of a printer control variable. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/581564&quot;&gt;#581564&lt;/a&gt;, thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WRITE compiler macro did not handle output stream designators correctly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/598374&quot;&gt;#598374&lt;/a&gt;, thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better availability of names of foreign functions in backtraces on Linux. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/626962&quot;&gt;#626962&lt;/a&gt;, thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: scripting and build for Solaris and FreeBSD. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/615497&quot;&gt;#615497&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/627581&quot;&gt;#627581&lt;/a&gt;, thanks to Josh Elsasser and Jim Wise)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: build fixes for OpenBSD -current and 4.8 (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/615489&quot;&gt;#615489&lt;/a&gt;, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/615492&quot;&gt;#615492&lt;/a&gt;, thanks to Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using aliases for builtin classes as defmethod specializers without adding DEFTYPEs for them works. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/618387&quot;&gt;#618387&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: timetravel by getrusage() no longer causes type-errors during GC. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/544421&quot;&gt;#544421&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: legally dynamic-extent lists and vectors used as initialization arguments to MAKE-ARRAY can be stack allocated. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/586105&quot;&gt;#586105&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: inline-expansion creating references to dead lambda-variables (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/454681&quot;&gt;#454681&lt;/a&gt;, thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better error message for bogus numerical arguments to RANDOM. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/598986&quot;&gt;#598986&lt;/a&gt;, thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler occasionally inlined references from incompatible environments occurs. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/308951&quot;&gt;#308951&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler threw an error when trying to compile a local function (labels or flet) known to take a specialized complex argument. (not in launchpad, reported by sykopomp in #lispgames)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: package-locks failed to protect against compile-time effects of DEFUN when the symbol previously had a macro definition. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/576637&quot;&gt;#576637&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: spurious ignore warnings even given (DECLARE IGNORE) in methods when parameter bindings mutated. (reported by Faré Rideau; lp #611361)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: workaround for compiler hang in ORDER-UVL-SETS (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/308914&quot;&gt;#308914&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: evaluation in debugger REPL works using the global context when in frames that do not have sufficient debug information.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: exceeding FD_SETSIZE limit now results in an sensible error (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/316068&quot;&gt;#316068&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF DOCUMENTATION) of a macro works properly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/643958&quot;&gt;#643958&lt;/a&gt;, thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interrupt taking longer than the requested period caused SLEEP to hang on Darwin. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/640516&quot;&gt;#640516&lt;/a&gt;, thanks to Joe Lebroco for the analysis)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.42&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;build changes
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Cross-compilation host is now specified to make.sh using command-line argument --xc-host=&amp;lt;command&amp;gt; instead of a positional argument. (thanks to Daniel Herring)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Install location can be specified to make.sh using command-line argument --prefix=&amp;lt;path&amp;gt;. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/550889&quot;&gt;#550889&lt;/a&gt;s, thanks to Daniel Herring)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: The default implementation of COMPUTE-DISCRIMINATING-FUNCTION does much less wasted work.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Explicit memory barrier operations are now available for use by multithreaded code. See documentation for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Experimental support for threading on Linux/PPC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RENAME-PACKAGE returns the package. (Thanks to Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EXPT signals an error if first argument is a zero and second argument is a floating point zero. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/571581&quot;&gt;#571581&lt;/a&gt;, thanks to Roman Marynchak)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFTYPE signals an error for non-list lambda-lists. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/576594&quot;&gt;#576594&lt;/a&gt;, thanks to Roman Marynchak)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: make ASDF-INSTALL compatible with the now-included ASDF2. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/612998&quot;&gt;#612998&lt;/a&gt;, reported by Phil Hargett; patch from Jim Wise)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.41&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: validity of observed keyword initargs to MAKE-INSTANCE is cached, leading to many fewer expensive calls to COMPUTE-APPLICABLE-METHODS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: in the (unoptimized) general method for MAKE-INSTANCE on a CLASS argument, search for and call an appropriate optimized ctor function if it exists.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WRITE always returns the correct value.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.40&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: readdir now works on :inode64 darwin builds (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/592897&quot;&gt;#592897&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Name conflicts between symbols passed as arguments to a single call to IMPORT no longer add multiple symbols with the same name to the package (detectable via DO-SYMBOLS).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: support building without the dlshim on darwin x86 and x86-64 (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/533470&quot;&gt;#533470&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TRACE :ENCAPSULATE NIL now works on ppc/linux.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.39&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: Backtrace from undefined function on x86 and x86-64 now show the calling frame.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: linkage-table entries on PPC now no longer overflow their space allocation (potentially causing crashes if they are written out of order).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Scrub control stack after scavenging in gencgc on non-x86oid platforms, preventing the GC from seeing stale pointers on the control stack in subsequent GCs (which would, and does, break invariants).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: 32-bit unicode external formats now work on big-endian systems.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Literal characters with code points greater than about 32767 now work on PPC UNICODE builds.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Any noise left by SSE operations (sqrt and conversions) in the high order bits are explicitly cleared out. In some contrived situations, this could lead to wrong results in mixed real/complex float arithmetic.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix function/macro redefinition warnings when building with clisp. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/576787&quot;&gt;#576787&lt;/a&gt;, thanks to Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new platform: experimental support for ppc/openbsd (thanks to Josh Elsasser).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Floating-point traps now work on ppc/linux.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.38&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: Thread names are now restricted to SIMPLE-STRINGs like for any other thread-related datastructure, MUTEX, etc. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/547095&quot;&gt;#547095&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deprecation: the SB-QUEUE contrib was merged into the SB-CONCURRENCY contrib module. New code should depend on SB-CONCURRENCY, not SB-QUEUE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deprecation: SB-THEAD:GET-MUTEX was deprecated in favor of SB-THREAD:GRAB-MUTEX.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new contributed module: SB-CONCURRENCY is a new contrib; it's supposed to contain additional data structures and tools for concurrent programming; at the moment it contains a lock-free queue, and a lock-free mailbox implementation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: added SB-THREAD:GRAB-MUTEX; it's like the now deprecated GET-MUTEX but takes &amp;amp;key rather than &amp;amp;optional parameters. Also added :TIMEOUT argument to GRAB-MUTEX on non-sb-lutex platforms like Linux and BSD.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: added SB-THREAD:TRY-SEMAPHORE, a non-blocking variant of SB-THREAD:WAIT-ON-SEMAPHORE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:ATOMIC-DECF has been added as a companion to SB-EXT:ATOMIC-INCF.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: a CANCEL-DEADLINE is associated with DEADLINE-TIMEOUT conditions to defer the deadline for forever.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: *STANDARD-OUTPUT*, *STANDARD-INPUT*, and *ERROR-OUTPUT* are now bivalent.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: errors from NO-APPLICABLE-METHOD and NO-PRIMARY-METHOD now have a RETRY restart available to retry the generic function call.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-BSD-SOCKET improvements
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;sockets and socket streams now have a more informative printed representation based on the corresponding SOCKET-NAME and SOCKET-PEERNAME.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SOCKET-MAKE-STREAM once more supports the :AUTO-CLOSE option. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/540413&quot;&gt;#540413&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SOCKET-CLOSE now accepts :ABORT argument, which is passed on to CL:CLOSE when appropriate, and no longer disassociates the stream from the socket if close failed. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/543951&quot;&gt;#543951&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the instrumenting profiler
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: report per-function GC overhead. (thanks to John Fremlin)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: counters no longer use locks for the overflow mode.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: whenever a profiling counter wrapped into overflow mode, it incurred an off-by-one miscount.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: improved MAKE-HASH-TABLE documentation (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/543473&quot;&gt;#543473&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: improved DEFMETHOD pretty-printing.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: perform range reduction when arguments are too large for x87's transcendentals (instead of returning 0). (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/327192&quot;&gt;#327192&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: eliminate some spurious TYPE-WARNINGs. Should help with some of CL-PPCRE's macros. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/570079&quot;&gt;#570079&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: our machine code is slightly less hostile to valgrind on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: up-to-date versions of NetBSD-current are supported. (Thanks to Robert Swindells and Aleksej Saushev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correct restart text for the continuable error in MAKE-PACKAGE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a rare case of startup-time page table corruption.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a semaphore with multiple waiters and some of them unwinding due to timeouts could be left in an inconsistent state.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix typo in &quot;Reporting Bugs&quot; section of the manual (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/520366&quot;&gt;#520366&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: misoptimization of multiplication by one in (SB-C::FLOAT-ACCURACY 0) policies.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: miscounts in SB-PROFILE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix lost wakeup bug between SB-THREAD:CONDITION-WAIT and CONDITION-NOTIFY on Linux. See threads &quot;lost wakeup in condition-wait / condition-notify&quot; (Feb 2010) and &quot;Condition-Wait, Deadline handler, waking up itself&quot; (March 2010) for further details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: allow forward FIND and POSITION on lists to elide checking :END against length of the list if the element is found before the specified END is reached. (thanks to Alec Berryman, &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/554385&quot;&gt;#554385&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: errors signalled during package graph modification no longer block FIND-SYMBOL and FIND-PACKAGE in other threads. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/511072&quot;&gt;#511072&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-POSIX build was broken when SBCL was compiled without the :SB-DOC feature. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/552564&quot;&gt;#552564&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-INTROSPECT build issues on GENGC/PPC. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/490490&quot;&gt;#490490&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more robust runtime executable path detection. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/375549&quot;&gt;#375549&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GCD always returns positive values. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/413680&quot;&gt;#413680&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Converting division to multiplication by reciprocal handles denormals.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: We were too eager in eliding range reduction tests on x87. The maximal magnitude is 2^63, not 2^64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Transforms for TRUNCATE don't die when the result is completely ignored anymore.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Maybe restore buildability on Alpha.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: READ-BYTE isn't inline anymore, fixing weird streams failures. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/569404&quot;&gt;#569404&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RANDOM-STATE can be printed readably again.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Unreadable objects were sometimes printed like #&amp;lt;\nFoo&amp;gt;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Using EQL with non-constant values of constant type (e.g. EQL types) could result in type mismatches during compilation.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.37&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: Backtrace from THROW to uncaught tag on x86oids now shows stack frame thrown from.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: WITH-COMPILATION-UNIT :POLICY allows restricting changes to compiler optimization qualities inside dynamic extent of its body.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: LOAD-LOGICAL-PATHNAME-TRANSLATIONS can be used to load translations from SYS:SITE;&amp;lt;HOST&amp;gt;.TRANSLATIONS.NEWEST (thanks to Michael Weber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SLOT-VALUE and (SETF SLOT-VALUE) take advantage of constraint propgation, allowing better compilation eg. when used to access structures with WITH-SLOTS. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/520366&quot;&gt;#520366&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the compiler is now more aware of the type of the underlying storage vector for multidimensional simple arrays resulting in better code for accessing such arrays.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: passing NIL as the environment argument to TYPEP no longer inhibits optimizing it. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309788&quot;&gt;#309788&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: more efficient register usage when handling single-float arguments on x86-64. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ADJUST-ARRAY and STABLE-SORT on vectors no longer use pre-allocated temporary vectors. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/496249&quot;&gt;#496249&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix compiler error involving MAKE-ARRAY and IF forms in :INITIAL-CONTENTS. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/523612&quot;&gt;#523612&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FUNCTION-LAMBDA-EXPRESSION lost declarations from interpreted functions. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/524707&quot;&gt;#524707&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bogus style warnings from certain (SETF SLOT-VALUE) and WITH-SLOTS usages during compilation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-C::CLASS-INFO now prints correctly. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/514762&quot;&gt;#514762&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Can now build with ud2 instead of int3 as trap instruction on all x86oid platforms with :UD2-BREAKPOINTS target feature.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Breakpoints now work when using ud2 instead of int3 as trap instruction (tested on x86oid linux with ud2-breakpoints).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: slam.sh now works on win32.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better differences of numeric types. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309124&quot;&gt;#309124&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: arrays declared intersection and union types can have their upgraded element type derived. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/316078&quot;&gt;#316078&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-SPROF allocation profiling for all threads failed to profile threads started during profiling. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/472499&quot;&gt;#472499&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-INTROSPECT test failure when building without SB-EVAL feature. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/535658&quot;&gt;#535658&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-CLTL2:DECLARATION-INFORMATION did not take SB-EXT:RESTRICT-COMPILER-POLICY into account. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/313337&quot;&gt;#313337&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Comma inside a backquoted array or structure resulted in nonsense values instead of signaling an error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309093&quot;&gt;#309093&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Spurious unused variable warning in a DEFSTRUCT edge case. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/528807&quot;&gt;#528807&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: More consistent warnings and notes for ignored DYNAMIC-EXTENT declarations (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/497321&quot;&gt;#497321&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FIND and POSITION on lists did not check sequence bounds properly and failed to detect circular lists (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/452008&quot;&gt;#452008&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: leakage from ~/.asdf-install into the ASDf-INSTALL contrib build (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/538974&quot;&gt;#538974&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOOP OF-TYPE VECTOR compile-time error. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/540186&quot;&gt;#540186&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SIGNAL SB-SYS:INTERACTIVE-INTERRUPT before entering the debugger due to it, so that handlers can run.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: reparsing undefined types if they have become defined since parsing. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309128&quot;&gt;#309128&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: missing &amp;amp;REST type in a proclamation for a function with both &amp;amp;REST and &amp;amp;KEY in lambda-list caused miscompilation (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/458354&quot;&gt;#458354&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WHO-CALLS information for source-transformed and compiler-macro expanded calls (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/542174&quot;&gt;#542174&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more accurate WHO-MACROEXPANDS information; point into rather than just at toplevel form.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.36&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:TYPEXPAND-1, SB-EXT:TYPEXPAND, and SB-EXT:TYPEXPAND-ALL behave exactly like their MACROEXPAND counterparts but work on type specifiers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:DEFINED-TYPE-NAME-P returns whether a symbol is known to name a type specifier.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:VALID-TYPE-SPECIFIER-P returns whether a given type specifier is valid where &quot;valid&quot; basically means &quot;would be accepted as second argument of TYPEP&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-INTROSPECT:FUNCTION-TYPE takes a function-designator and returns the function's declared, or derived FTYPE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-POSIX now supports accessing the d_ino member of dirent structures. (Thanks to Philipp Marek and Pierre THEIRRY)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: The function SB-EXT:SEED-RANDOM-STATE has been added to provide for seeding a RANDOM-STATE object with user-provided data or from the operating system's PRNG. Also, (MAKE-RANDOM-STATE T) will attempt to initialize the returned state from the operating system's PRNG where possible. (Thanks to Fare Rideau; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/310116&quot;&gt;#310116&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix SB-SIMPLE-STREAMS:READ-VECTOR to correctly set the FILE-POSITION of the stream being read from. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/491087&quot;&gt;#491087&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix grammar and style issues for the docstrings of printer-related variables and functions. (Thanks to mon_key; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/518696&quot;&gt;#518696&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix compilation on chenygc platforms. Thanks to Larry Valkama and Bruce O'Neel.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-THREAD:CONDITION-WAIT sometimes signaled a deadline twice in a row even though a handler defered the deadline long into the future. (&lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/512914&quot;&gt;#512914&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: A deadline handler was run without interrupts enabled for a deadline signaled within SB-THREAD:CONDITION-WAIT. That could result in infinitely spinning, non-killable threads.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Backtrace from internal-errors on x86-64 os x was truncated before reaching the erring stack frame.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix type derivation for EXPT when raising a fixnum to a real power. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/525949&quot;&gt;#525949&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix SB-EXT:GENERATION-* accessors for generations &amp;gt; 0 on GENCGC platforms. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/529014&quot;&gt;#529014&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: More robust checks for invalid DEFMETHOD argument specializers. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/525916&quot;&gt;#525916&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fix building on Darwin when sysctl is not in the user's PATH. (Thanks to Robert Goldman)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.35&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: ROUND with a single single-float or double-float argument is properly inlined when possible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: Slightly better code is generated for integer&amp;lt;-&amp;gt;float conversions and for single-float&amp;lt;-&amp;gt;double-float conversions on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SB-ROTATE-BYTE:ROTATE-BYTE now generates more efficient code for 32-bit and 64-bit rotations on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: The install script changes the ownership of directories as well as files for contrib modules using asdf. (thanks to Eugene Ossintsev; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/508485&quot;&gt;#508485&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TRUNCATE with a single single-float or double-float argument is properly inlined when possible. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/489388&quot;&gt;#489388&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Passing a rotation count of zero to SB-ROTATE-BYTE:ROTATE-BYTE no longer causes a compiler error on x86 and ppc.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GET-MACRO-CHARACTER bogusly computed its second return value always relative to *READTABLE* rather than the passed argument.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.34&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: threading support is now enabled by default on x86[-64] Linux.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-INTROSPECT:DEFTYPE-LAMBDA-LIST now also works on most builtin types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: Errors during compile-time-too processing (i.e. EVAL-WHEN) are now caught and reported just like errors during macroexpansion.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-POSIX now provides access to tcdrain(), tcflow(), tcflush(), tcgetsid(), and tcsendbreak(). (thanks to Jerry James)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: ASDF systems can now depends on SB-QUEUE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes and improvements related to Unicode and external formats:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: error handling and restart usage in the ucs-2 external format has been improved.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;there is now an implementation of the ucs-4 external format.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the utf-16 and utf-32 external formats are supported.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-POSIX wrapper for putenv no longer tries to put lisp strings in the environment. setenv() and unsetenv() are also provided. (reported by Fare Rideau; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/460455&quot;&gt;#460455&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOAD of both .fasl and .FASL type files now forces fasl-style loading. This ensures sensible errors for .FASL files from other implementations on case-insensitive filesystems. (reported by Willem Broekema; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/489417&quot;&gt;#489417&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #p&quot;\\\\&quot; can now be read without error on Win32. (reported by Willem Broekema; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/489698&quot;&gt;#489698&lt;/a&gt;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some minor code rearrangements to reenable warning-free building from CMUCL (reported by xme@gmx.net; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/491104&quot;&gt;#491104&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PRINT-OBJECT for clos instances respects the right margin when pretty printing&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FIND-PACKAGE &amp;amp; DEFPACKAGE were not thread safe. (reported by Attila Lendvai)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.33&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new port: support added for x86-64 NetBSD. (thanks to Aymeric Vincent)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: support O_LARGEFILE access to files larger than 2GB on x86-64/linux. (thanks to Daniel Janus; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/453080&quot;&gt;#453080&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-INTROSPECT:WHO-SPECIALIZES-DIRECTLY to get a list of definitions for methods specializing on the passed class itself.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-INTROSPECT:WHO-SPECIALIZES-GENERALLY to get a list of definitions for methods specializing on the passed class itself, or on subclasses of it.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new build flag: :sb-xref-for-internals; SBCL will collect xref information about itself during the build (e.g. for M-? in Slime), if this flag is enabled in customize-target-features.lisp. This will increase the core size by about 5-6mb, though, so it's mostly interesting to SBCL developers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: various GENCGC tuning parameters have been experimentally documented and exported from SB-EXT. See documentation for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes and improvements related to Unicode and external formats:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the Unicode character database has been upgraded to the Unicode 5.2 standard, giving names and properties to a number of new characters, and providing a few extra characters with case transformations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: restarts for providing replacement input/output on coding errors for fd-stream external formats.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: where :&amp;lt;encoding&amp;gt; is a keyword corresponding to an external format the system supports, it is now possible to specify (:&amp;lt;encoding&amp;gt; :replacement &amp;lt;character&amp;gt;) as an external format which will automatically substitute &amp;lt;character&amp;gt; on encoding or decoding errors for streams and for STRING-TO-OCTETS and its inverse. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/317072&quot;&gt;#317072&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: the file streams underlying the standard streams (such as *STANDARD-INPUT*, *TERMINAL-IO*) are opened with an external format which uses the replacement mechanism to handle encoding errors, preventing various infinite error chains and unrecoverable I/O confusion.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the utf-8 external format now correctly refuses to encode Lisp characters in the surrogate range (char-codes between #xd800 and #xdfff).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix a typo preventing conversion of strings into octet vectors in the latin-2 encoding. (reported by Attila Lendvai; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/471689&quot;&gt;#471689&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix a bug in the octet multibyte handling of decoding errors and the USE-VALUE restart. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/314939&quot;&gt;#314939&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix the bug underlying the expected failure in the FORCE-END-OF-FILE restart on fd-stream decoding errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix a bug in the ATTEMPT-RESYNC fd-stream decoding restart when the error is near the end of file.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix a double-error case in unibyte octet conversions, when the first use of USE-VALUE is ignored.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix bugs in handling of undefined code points in unibyte encodings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix LISTEN (and consequent hangs in READ-CHAR-NO-HANG) on bivalent streams after an UNREAD-CHAR.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-INTROSPECT:ALLOCATION-INFORMATION also reports if the object is allocated in a boxed region of dynamic space.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-POSIX:FORK now signals an error if an attempt to fork with multiple Lisp threads running is made, instead of going ahead with unpredictable consequences. (reported by Leslie Polzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: uses of slot accessors on specialized method parameters within the bodies of SLOT-VALUE-USING-CLASS methods no longer triggers a type error while finalizing the class. This fix may cause classes with slot accessors to be finalized later than previously. (reported by Lars Rune Nøstdal; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/473699&quot;&gt;#473699&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restore buildability on the MIPS platform. (regression from 1.0.30.38, reported by Samium Gromoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: inspecting closures is less likely to fail with a type error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: no timer starvation when setting the system clock back. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/460283&quot;&gt;#460283&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WITH-STANDARD-IO-SYNTAX now binds *PRINT-PPRINT-DISPATCH* to the standard pprint dispatch table as specified by CLHS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: give CLISP a hint about a type declaration to enable it to build the cross-compiler without warnings. (thanks to Josh Elasser; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/396597&quot;&gt;#396597&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correctly dump literal objects in defaulting forms of arglists. (reported by Attila Lendvai; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/310132&quot;&gt;#310132&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: distinguish in type specifiers between arrays that might be complex and arrays that are definitely complex. (launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/309129&quot;&gt;#309129&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SUBTYPEP knows that the SYMBOL type is not SUBTYPEP the KEYWORD type. (reported by Levente Mészáros; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/485972&quot;&gt;#485972&lt;/a&gt;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: setting the value of a symbol-macro within a method in the presence of type declarations works properly again. (reported by Iban Hatchondo; launchpad bug &lt;a href=&quot;https://bugs.launchpad.net/sbcl/+bug/485019&quot;&gt;#485019&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.32&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;optimization: faster FIND and POSITION on strings of unknown element type in high SPEED policies. (thanks to Karol Swietlicki)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster CONCATENATE 'STRING in low SPEED policies (reported by David Vázquez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: better error signalling for bogus parameter specializer names in DEFMETHOD forms (reported by Pluijzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DELETE-FILE once again works on logical pathnames (regression since 1.0.30.49)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOGICAL-PATHNAME signals a TYPE-ERROR if pathspec is specified incorrectly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefinition of a class via DEFCLASS without :DEFAULT-INITARGS removes previous default initargs (reported by Lars Rune Nøstdal and Samium Gromoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correct WHO-CALLS information for inlined lambdas with complex lambda-lists. (reported by Peter Seibel)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SAVE-LISP-AND-DIE option :SAVE-RUNTIME-OPTIONS did not work correctly when starting from an executable core without saved runtime options (reported by Faré Rideau, thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF SLOT-VALUE) signalled a warning which should have been an optimization note instead. (reported by Martin Cracauer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WITH-SLOTS did not work with THE forms. (thanks to David Tolpin)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Have RUN-PROGRAM with :INPUT T only run the subprocess in a new process group if it doesn't need to share stdin with the sbcl process. (thanks to Leslie Polzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SATISFIES could be misoptimized to refer to a local function. (reported by Stanislaw Halik)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.31&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;improvement: stack allocation is should now be possible in all nested inlining cases: failure to stack allocate when equivalent code is manually open coded is now considered a bug.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements related to Unicode:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the Unicode character database has been upgraded to the Unicode 5.1 standard, giving names and properties to a number of new characters, and providing a few extra characters with case transformations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the system now recognizes and produces names for Unicode Hangul syllable characters.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the EBCDIC-US external-format is now supported for octet operations (as well as for stream operations).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: experimental :EMIT-CFASL parameter to COMPILE-FILE can be used to output toplevel compile-time effects into a separate .CFASL file.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: COERCE to VECTOR, STRING, SIMPLE-STRING and recognizable one-dimenstional subtypes of ARRAY is upto 70% faster when the coercion is actually needed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: TRUNCATE on known single- and double-floats is upto 25% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: division of floating point numbers by constants uses multiplication by reciprocal when an exact reciprocal exists.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: multiplication of single- and double-floats floats by constant two has been optimized.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ARRAY-IN-BOUNDS-P is resolved at compile-time when sufficient type information is available. (thanks to Leslie Polzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SLOT-VALUE and (SETF SLOT-VALUE) with constant slot names on known structure objects are as efficient as defstruct generated accessors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: unused vector creation can now be optimized away.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: ASDF systems can now depends on SB-INTROSPECT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: a STYLE-WARNING is signalled when a generic function clobbers an earlier FTYPE proclamation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: the compiler is able to track the effective type of generic function across method addition and removal even in the absence of an explicit DEFGENERIC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: DESCRIBE now reports on symbols naming undefined but assumed or declared function as well.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: recompilation of systems using SB-GROVEL now works (thanks to Leslie Polzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to SB-CLTL2 (thanks to Larry D'Anna):
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;functions DECLARATION-INFORMATION, PARSE-MACRO, and ENCLOSE have been documented.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;AUGMENT-ENVIRONMENT and DEFINE-DECLARATION have been implemented.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DECLARATION-INFORMATION now supports declaration name DECLARATION as well as user defined declaration names.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;VARIABLE-INFORMATION is now aware of alien variables.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: improved address space layout on OpenBSD (thanks to Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: pretty-printing of various Lisp forms has been improved (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: calls to DECODE-FLOAT and INTEGER-DECODE-FLOAT whose value was unused were deleted in safe code. (reported by John Fremlin)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a failing AVER compiling certain MAKE-ARRAY forms. (reported by James Wright)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some out-of-line array predicates were missing (reported by Stelian Ionescu)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a failing AVER in CONVERT-MV-CALL has been fixed. (thanks to Larry D'Anna)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a failing AVER in %ALLOCATE-CLOSURES conversion has been fixed (thanks to Larry D'Anna)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SLEEP supports times over 100 million seconds on long on OpenBSD as well. (reported by Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DELETE-FILE on streams no longer closes the stream with :ABORT T, leading to possible attempts to delete the same file twice. See docstring on DELETE-FILE for details. (reported by John Fremlin)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DELETE-FILE once again deletes the file named by the pathname designator argument, rather than its truename. (reported by Luis Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the low-level debugger had 32-bit assumptions and was missing information about some array types. (thanks to Luis Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: moderately complex combinations of inline expansions could be miscompiled if the result was declared to be dynamic extent.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on x86, SAP-REF of sizes greater than 8 bits with offsets of the form (+ &amp;lt;variable&amp;gt; &amp;lt;integer&amp;gt;) were miscompiled under certain circumstances.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: in some cases no compiler note about failure to stack allocate was emitted, even if the objects were in fact heap allocated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: minor violation of &quot;otherwise inaccessible&quot; rule for stack allocation could cause objects users might reasonably expect to be heap allocated to be stack allocated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DESCRIBE signalled an error for generic functions under certain circumstances. (thanks to Leslie Polzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Fixed spelling of an error message.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.30&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-THREAD:JOIN-THREAD-ERROR-THREAD and SB-THREAD:INTERRUPT-THREAD-ERROR-THREAD have been deprecated in favor of SB-THREAD:THREAD-ERROR-THREAD.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new contrib module: SB-QUEUE provides thread-safe lockless FIFO queues.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: docstrings for local and anonymous functions are no longer discarded. (thanks to Leslie Polzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-THREAD:SYMBOL-VALUE-IN-THREAD provides access to symbol values in other threads.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-INTROSPECT:ALLOCATION-INFORMATION provides information about object allocation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: division of a real float by a complex float is implemented with a specialised code sequence.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MAKE-INSTANCE with non-constant class-argument but constant keywords is an order of magnitude faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MAKE-INSTANCE with constant keyword arguments is x2-4 faster in the presence of :AROUND or non-standard primary INITIALIZE-INSTANCE methods, and similarly for non-standard metaclass classes as long as there are no methods additional on MAKE-INSTANCE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: more efficient type-checks for FIXNUMs when the value is known to be a signed word on x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: compiler now optimizes (EXPT -1 INTEGER), (EXPT -1.0 INTEGER), and (EXPT -1.0d0 INTEGER) into an ODDP test. (thanks to Stas Boukarev and Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: compiler is smarter about delegating argument type checks to callees.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: several character functions are now compiled somewhat more efficiently. (reported by Lynn Quam)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the compiler now derives simple types for LOAD-VALUE-FORMs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: less unsafe constant folding in floating point arithmetic, especially for mixed complex/real -float operations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: constant double and single floats are stored in native unboxed format on x86[-64].&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: smarter code for arithmetic operations with constant floats, complex floats, or integers on x86[-64].&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: smarter code for conjugate/multiplication of float complexes and abs/negate of floats on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: more efficient complex float and real float operations on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: complex float division is slightly more stable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: DESCRIBE output has been reworked to be easier to read and contains more pertinent information.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: failure to provide requested stack allocation compiler notes provided in all cases (requested stack allocation not happening without a note being issued is now considered a bug.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-POSIX exports the documented types and functions FILE-DESCRIPTOR and FILENAME, and also the corresponding -DESCRIPTOR types. (reported by &quot;abhi&quot;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on 64 bit platforms FILL worked incorrectly on arrays with upgraded element type (COMPLEX SINGLE-FLOAT), regression from 1.0.28.55. (thanks to Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: looping around HANDLER-CASE could silently consume stack space on each iteration. (reported by &quot;foobar&quot;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better error signalling when calls to functions seeking elements from lists (eg. ADJOIN) are compiled with both :TEST and :TEST-NOT. (reported by Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: regressions in DIRECTORY from 1.0.28.61: pattern matching of directory components now works as it used to. (various prolems reported by Michael Becker, Gabriel Dos Reis, Cyrus Harmon, and Harald Hanche-Olsen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: :PTY option in RUN-PROGRAM was broken with stream arguments. (reported by Elliot Slaughter, thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bogus undefined variable warnings from fopcompiled references to global variables. (thanks to Lars Rune Nøstdal)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: foreign function names should now appear in backtraces on FC6 as well. (reported by Tomasz Skutnik and Tobias Rautenkranz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SETF compiler macro documentation strings are not discarded anymore.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GENTEMP is now unaffected by pretty printer dispatch table. (thanks to Alex Plotnick)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SLEEP accepts large integer arguments, truncating them to SIGNED-WORD on the assumption that sleeping for 68 years is sufficient for anyone. (reported by Leslie Polzer, thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler notes for expensive slot type checks could be emitted at runtime MAKE-INSTANCE calls. (reported by Samium Gromoff)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.29&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;IMPORTANT: bug database has moved from the BUGS file to Launchpad https://bugs.launchpad.net/sbcl Bugs can be reported directly there, or by sending email to sbcl-bugs@lists.sourceforge.net (no subscription required.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: under weak type checking policy integer types are weakened less aggressively.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SAVE-LISP-AND-DIE :TOPLEVEL function is now allowed to return, which causes SBCL to quit with exit status 0. Previously if the function returned with a small integer return value, that value was accidentally reused as the exit status.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:DEFINE-HASH-TABLE-TEST allows defining new arguments to MAKE-HASH-TABLE :TEST, and MAKE-HASH-TABLE has been extended with :HASH-FUNCTION argument. Refer to user manual for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:DEFGLOBAL macro allows defining global non-special variables.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:GET-TIME-OF-DAY provides access to seconds and microseconds since the Unix epoch on all platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:ALWAYS-BOUND proclamation inhibits MAKUNBOUND, and allows the compiler to safely elide boundedness checks for special variables.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:GLOBAL proclamation inhibits SPECIAL proclamations for the symbol, prohibits both lexical and dynamic binding. This is mainly an efficiency measure for threaded platforms, but also valueable in expressing intent.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: UNC pathnames are now understood by the system on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the compiler uses a specialized version of FILL when the element type is know in more cases, making eg. (UNSIGNED-BYTE 8) case almost 90% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: accesses to potentially non-simple arrays where element type is known are 50% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: compiler now generates faster array typechecking code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ARRAY-DIMENSION is now faster for multidimensional and non-simple arrays.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: multidimensional array accesses in the absence of type information regarding array rank are approximately 10% faster due to open coding of ARRAY-RANK.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: result of (FILL (MAKE-ARRAY ...) ...) and (REPLACE (MAKE-ARRAY ...) ...) can be stack allocated if the result of MAKE-ARRAY form can be.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: result of call to VECTOR can now be stack allocated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MAKE-ARRAY with :INITIAL-CONTENTS is now vastly faster as long as the resulting array is one-dimensional and has a known element type. In particular, :INITIAL-CONTENTS (LIST ...) where the length of the list matches the known length of the vector does not allocate the list as an intermediate step. Ditto for VECTOR and simple backquoted forms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MAKE-ARRAY can now stack allocate in the presence of :INITIAL-CONTENTS and :INITIAL-ELEMENT as long as the result has a known element type, and is known to be simple and one dimensional.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: SBCL now emits a compiler note where stack allocation was requested but could not be provided (not in all cases, unfortunately)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: better MACHINE-VERSION responses. (thanks to Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: pretty-printing loop has been implemented properly. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: CLOS slot typechecing policy has been documented.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FILE-AUTHOR no longer signals an error on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-SPROF could be foiled by foreign code not have a frame pointer, leading to memory faults. (thanks to Bart Botta)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better floating point exception handling on x86/OpenBSD. (thanks to Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: exit status from QUIT when called under --script was lost (reported by Hubert Kauker)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-ARRAY for non-zero :INITIAL-ELEMENT always used the same implementation of FILL to initialize the array, even if a more efficient one was available (reported by Stas Boukarev, thanks to Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: potential miscompilation of array stack allocation on x86 and x86-64. (reported by Time Tossavainen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some forms of AND, OR, and COND resulted in expansions that could result in their subforms being treated as top level forms. (reported by James Knight)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: On x86/x86-64 alien functions declared to return integers shorter than a machine register could leave garbage in the high bits of the result register (bug 316325).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: disable address space randomization Linux/x86-64 as well, not just x86-64. (reported by Ken Olum)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Attempting to DEREF an (ALIEN (* T)) would produce a WARNING and generate incorrect code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #201; type inference for CONS and ARRAY types could derive wrong results in the presence of eg. RPLACA or ADJUST-ARRAY.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: special variables with a proclaimed specific subtype of FUNCTION could not be assigned to or bound with PROGV. (reported by Lorenz Mösenlechner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the value of CL:- in the inspector was the previous expression evaluated rather than the expression being evaluated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: constants can no longer be locally declared special.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: signals delivered to threads started from foreign land (read: directly by pthread_create, not by MAKE-THREAD) are redirected to a Lisp thread by blocking all signals and resignalling.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SHARED-INITIALIZE initialized unbound :ALLOCATION :CLASS slots from :INITFORM, if any.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.28&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;a number of bugs in cross-compilation have been fixed, with the ultimate result that building under (at least) clisp should be much more reliable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible changes: echo-streams now propagate unread-char to the underlying input stream, and no longer permit unreading more than one character.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: on x86/x86-64 Lisp call frames now have the same layout as C frames, allowing for instance more reliable backtraces.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: the debugger REPL can now reference lexical variables by name directly for code compiled with (DEBUG 3).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: errors from malformed declarations now have better source paths associated with them. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster local calls on x86/x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some error messages for out-of-bound array indexes confused the index and the bound. (thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: pretty printing malformed DEFPACKAGE forms (thanks to Sidney Markowitz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: running regressions tests in shells without OSTYPE set now works. (reported by Harald Hanche-Olsen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more robust static space exhaustion signalling from MAKE-STATIC-VECTOR (thanks to Daniel Lowe)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF DOCUMENTATION) for anonymous function now throws the docstring away instead of storing it under names such as (LAMBDA (X)). (reported by Leslie Polzer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: timers could go off in the wrong order, be delayed indefinitely (thanks to Ole Arndt for the patch)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RESTART-FRAME and RETURN-FROM-FRAME stack corruption&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the discriminating function for PRINT-OBJECT no longer preserves potentially-invalid effective methods in its cache.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-INTROSPECT:FIND-DEFINITION-SOURCE now works with funcallable instances as well (thanks to Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using RUN-PROGRAM does not interfere with SB-POSIX:WAIT, SB-POSIX:WAITPID and their C equivalents.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RUN-PROGRAM does not crash on Darwin when stressed.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.27&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new port: support added for x86-64 OpenBSD. (thanks to Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new port: support added for x86-64 Solaris. (thanks to Alex Viskovatoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: the system either recovers from stack exhaustion or dies properly as opposed to leaving the user uncertain of whether the handler trampled on some random memory next to the stack or having to rely on --lose-on-corruption (which is still a good idea to use in production because stack exhaustion can happen in signal handlers which will likely lead to hangs.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix gc related interrupt handling bug on ppc (regression from 1.0.25.37, reported by Harald Hanche-Olsen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: work around signal delivery bug in darwin (regression from 1.0.25.44, reported by Sidney Markowitz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix ERROR leaking memory (reported by David Thompson)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.26&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: an interruption (be it a function passed to INTERRUPT-THREAD or a timer function) runs in an environment where interrupts can be enabled. The interruption can use WITH-INTERRUPTS or WITHOUT-INTERRUPTS as it sees fit. Use WITHOUT-INTERRUPTS to avoid nesting of interruptions and potentially running out of stack. Keep in mind that in the absence of WITHOUT-INTERRUPTS some potentially blocking operation such as acquiring a lock can enable interrupts.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: GC-OFF and GC-ON are removed, as they were always unsafe. Use WITHOUT-GCING instead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: runtime option --disable-ldb&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: runtime option --lose-on-corruption to die at the slightest hint of possibly non-recoverable errors: running out of memory, stack, alien stack, binding stack, encountering a memory fault, etc. In the absence of --lose-on-corruption a warning is printed to stderr.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: detect binding stack exhaustion&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: detect alien stack exhaustion on x86/x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: generally more stable and reliable interrupt handling&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: there is a per thread interruption queue, interruptions are executed in order of arrival&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: a repeating timer reschedules itself when the it has finished, but expiration times are spaced equally. If an expiration time is in the past it will trigger after a short grace period that may give a chance to other things to run.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: slightly faster gc on multithreaded builds&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster WITHOUT-GCING&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: when JOIN-THREAD signals an error, do it when not holding important locks so that the debugger/handler doesn't produce recursive errors or deadlock.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: real-time signals are not used anymore, so no more hanging when the system wide real-time signal queue gets full.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: INTERRUPT-THREAD on a dying thread could produce memory fault.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: finalizers, gc hooks never run in a WITHOUT-INTERRUPTS&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix random memory faults related to interrupts on alpha&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix random memory faults related to interrupts on sparc&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix deadlocks related to starting threads&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix deadlines on locks on futex platforms&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restore errno in signal handlers&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix deadlocks related to hash tables&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix deadlocks in pcl&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.25&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: SB-INTROSPECT:FUNCTION-ARGLIST is deprecated, to be removed later. Please use SB-INTROSPECT:FUNCTION-LAMBDA-LIST instead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-INTROSPECT:DEFTYPE-LAMBDA-LIST allows retrieval of DEFTYPE lambda lists. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: MUTEX-VALUE is to be superseded by MUTEX-OWNER that has a better name and does not return values so stale on multiprocessor systems. Also, HOLDING-MUTEX-P was added for about the only sane usage of MUTEX-OWNER.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: unithread builds keep track of MUTEX-VALUE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: reading from a TWO-WAY-STREAM does not touch the output stream anymore making it thread safe to have a concurrent reader and a writer, for instance, in a pipe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: GET-SETF-EXPANDER avoids adding bindings for constant arguments, making compiler-macros for SETF-functions able to inspect their constant arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: COMPILE-FILE reports times with millisecond accuracy (thanks to Luis Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CHAR-CODE type derivation has been improved, making TYPEP elimination on subtypes of CHARACTER work better. (reported by Tobias Rittweiler, patch by Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: setting alien structure fields of type struct by value now computes the right offset for the memory copy.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compilation problem involving inlined calls to aliens with result type VOID. (reported by Ken Olum)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #235a; sequential inline expasion in different policies no longer reuses the functional from the previous expansion site.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFTYPE no longer breaks on bodies consisting of a single unquoted symbol. Regression from 1.0.22.8. (reported by Ariel Badichi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: named ENUMs in multiply-referenced alien record types no longer cause an implied type redefinition. Regression from 1.0.21.29.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sign-extension of small signed return values now works with C code compiled with gcc 4.3 or newer. (reported by Liam Healy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Windows port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SB-BSD-SOCKETS now works from saved cores as well. (reported by Stephen Westfold, thanks to Rudi Schlatte)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.24&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: ARRAY-STORAGE-VECTOR provides access to the underlying data vector of a multidimensional SIMPLE-ARRAY.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: the system now signals a continuable error if standard readtable modification is attempted. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: DIRECTORY has been extended with a non-standard keyword argument :RESOLVE-SYMLINKS. (thanks to TC-Rucho)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-BSD-SOCKETS:MAKE-SOCKET-STREAM keyword argument handling has been robustified and documented better. (thanks to Robert Goldman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster generic arithmetic dispatch on x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: FORMAT ~D and ~F are now approximately 5% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tradeoff: constant FORMAT control strings are now compiled unless SPACE &amp;gt; SPEED (previously only when SPEED &amp;gt; SPACE.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Red Hat Enterprise 3 mmap randomization workaround. (thanks to Thomas Burdick)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFCLASS and ENSURE-CLASS-USING-CLASS are now expected to be thread safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: lexical type declarations are now correctly reported by SB-CLTL2. (reported by Larry D'Anna)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: STRING-TO-OCTETS did not handle :START properly when using UTF-8 as external format. (thanks to Luis Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: errors from invalid fill-pointer values to (SETF FILL-POINTER) are signalled correctly. (thanks to Stas Boukarev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SET-MACRO-CHARACTER accepts NIL as the readtable designator. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SET-DISPATCH-MACRO-CHARACTER accepts NIL as the readtable designator, and returns T instead of the function. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: direct superclasses of STANDARD-CLASS and FUNCALLABLE-STANDARD-CLASS now default to STANDARD-OBJECT and FUNCALLABLE-STANDARD-OBJECT as required by AMOP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiling a call to SLOT-VALUE with a constant slot-name when no class with the named slot yet exists no longer causes a compile-time style-warning.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: :ALLOCATION :CLASS slots are type-checked properly in safe code. (reported by Didier Verna)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #430; nested structure constructors can stack allocate.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on some 64-bit platforms dynamic space size was truncated to #xffff0000 bytes. (reported by Benjamin Lambert)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: setting *READ-SUPPRESS* to T no longer renders the default REPL unusable. (reported by Daniel Herring)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: return values of READ-SEQUENCE did not take :START into account on file streams, regressions since 1.0.12.22. (reported by Thomas Russ, patch by Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using SET or (SETF SYMBOL-VALUE) to change the value of a method specializer used to confuse permuation vector optimization.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: system inserted bogus implicit type declarations for local special variables in DEFMETHOD bodies.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #354; duplicated frames in backtraces due to non-tail-call-optimized XEPs to functions with return type NIL have been elimited.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #357; MAKE-INSTANCE/SHARED-INITIALIZE now initializes structure object slots according to DEFSTRUCT initforms, and DEFSTRUCT forms :INCLUDEind structure classes defined using DEFCLASS :METACLASS STRUCTURE-CLASS now inherit their initforms. (reported by Bruno Haible and Stephen Wilson)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #395; fill-pointer output streams used now support element-type BASE-CHAR as well.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler error when attempting to derive return value of ARRAY-ELEMENT-TYPE when the array type was a union of intersection types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: address-spaces overlapped on OpenBSD. (thanks to Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Mac OS X binaries should now be portable between Leopard and Tiger.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.23&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: when disassembling method functions, disassembly for the associated fast function is also produced.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: system stores DEFTYPE lambda-lists, so DESCRIBE can report them.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: printing with *PRINT-PRETTY* true is now more efficient as long as the object being printed doesn't require special handling by the pretty printer.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: slot symbol-macros from WITH-SLOTS inside DEFMETHOD bodies now interact correctly with type declarations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;partial bug fix: PCL detects infinite recursion during wrapper validation. (thanks to Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #426; nested function calls are inlined properly. Previously if FOO was an inline function, in calls of the form (FOO (FOO ...)) the outer call was not inlined.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: long long arguments passed in registers to alien functions on PowerPC Linux and NetBSD are now handled correctly when preceded by SYSTEM-AREA-POINTERs. (reported by Josh Elsasser)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.22&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: LOAD-SHARED-OBJECT no longer by default looks for the shared object in the current directory, but passes the native namestring of the designated pathname to the operation system's shared object loading function as-it.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: --disable-debugger toplevel option now takes effect before processing of initialization files and --eval or --load options.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: new commandline argument: --script, which supports shebang lines. See documentation for details. (based on work by Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SAVE-LISP-AND-DIE can save current values of --dynamic-space-size and --control-stack-size in the executable core, causing it to skip normal runtime option processing. See documentation for details. (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: inoccous calls to EVAL or generic functions dispatching on subclasses of eg. STREAM no longer cause compiler notes to appear.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the system no longer resignals errors from --load and --eval toplevel arguments as SIMPLE-ERRORS, which caused restarts associated with the original error to be lost. (thanks to Ariel Badichi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: :DONT-SAVE keyword argument has been added to LOAD-SHARED-OBJECT for controlling interaction with SAVE-LISP-AND-DIE, and UNLOAD-SHARED-OBJECT can be used to undo the effects of an earlier LOAD-SHARED-OBJECT call.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ADJUST-ARRAY on multidimensional arrays used bogusly give them a fill pointer unless :DISPLACED-TO or :INITIAL-CONTENTS were provided. (reported by Cedric St-Jean)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: circularity handling in the reader did not treat raw structure slots correctly. (reported by Cedric St-Jean)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SERVE-EVENT occasionally signaled an error about bogus file descriptors when there were none.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFINE-COMPILER-MACRO support of destructuring lambda-lists was broken. (reporteed by Willem Broekema)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EXT:NATIVE-NAMESTRING on Windows did not work on pathnames without a directory.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COMPILE-FILE did not warn about undefined variable references at toplevel, and LOAD of the resulting fasl did not signal an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: functions with non-required arguments used to end up with (SB-C::&amp;amp;OPTIONAL-DISPATCH ...) as their name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefining a function with non-required arguments didn't update the system's knowledge about its call signature properly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed #431; incompatible alien record type redefinitions are detected and handled. (reported by Neil Haven)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using RESTRICT-COMPILER-POLICY with DEBUG 3 could cause PROGV miscompilation. (reported by Matthias Benkard, patch by Juho Snellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on x86 and x86-64 backtraces were sometimes truncated after alien stack frames.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: strings passed to mk{s,d}temp lacked null termination&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.21&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: the compiler is able to track the effective type of a generic function across method addition and removal.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:ATOMIC-INCF allows atomic incrementation of appropriately typed structure slots without locking.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:CALL-WITH-TIMING provides access to timing information like those gathered by TIME using a programming-friendly interface.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: TIME reports time taken even if the form performs a non-local transfer of control.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: reduced conservativism on GENCGC platforms: on average 45% less pages pinned (measured from SBCL self build).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EXT:COMPARE-AND-SWAP on SYMBOL-VALUE can no longer mutate constant symbols or violate declaimed type of the symbol.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-THREAD:SIGNAL-SEMAPHORE could fail to wakeup threads sleeping on the semaphore in heavily contested semaphores.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: semaphores and condition variables were not interrupt safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-THREAD:CONDITION-WAIT doesn't allow waits on mutexes owned by other threads anymore.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FIND on lists called KEY outside the specified subsequence. (reported by budden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOG doesn't use single-float intermediate results when given mixed integer and double-float arguments, leading to better precision. (reported by Bob Felts)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOG with base zero returned values of inconsistent type.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.20&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: OPTIMIZE qualities SB-C::STACK-ALLOCATE-DYNAMIC-EXTENT, SB-C::STACK-ALLOCATE-VECTOR, and SB-C::STACK-ALLOCATE-VALUE-CELLS no longer exist. See documentation and SB-EXT:*STACK-ALLOCATE-DYNAMIC-EXTENT* for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: some slot access efficiency guidelines have been added to the user manual.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ASSOC-IF, ASSOC-IF-NOT, MEMBER-IF, MEMBER-IF-NOT, RASSOC, RASSOC-IF, and RASSOC-IF-NOT are now equally efficient as ASSOC and MEMEBER.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: calls to ASSOC, MEMBER, and RASSOC can be transformed to more efficient EQ-comparison versions more often.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: enhanced derivation of DOLIST iteration variable type for constant lists.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: constant folding of simple (LIST ...) forms as DOLIST arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: runtime lookup of function definitions can be elided in more cases, eg: (let ((x 'foo)) (funcall foo)).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: compiler is able to derive the return type of (AREF (THE STRING X) Y) as being CHARACTER.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CLRHASH on empty hash-tables no longer does pointless work. (thanks to Alec Berryman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: REPLACE deftransforms don't punt when :START1 or :START2 is given&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiling DESTRUCTURING-BIND on constant list arguments no longer emits a code deletion note. (reported by Andrew Gasparovic)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bogus odd-number-of-keywords STYLE-WARNINGs from calls to functions with an odd number of &amp;amp;OPTIONAL arguments, a &amp;amp;REST argument, and one or more &amp;amp;KEY arguments at the call site.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: STYLE-WARNINGs for functions with both &amp;amp;OPTIONAL and &amp;amp;KEY arguments appeared at call sites as well.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed #425; CLOSE drops input buffers from streams, so READ-LINE &amp;amp;co can no longer read from them afterwards. (reported by Damien Cassou)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed #427: unused local aliens no longer cause compiler breakage. (reported by Stelian Ionescu, Andy Hefner and Stanislaw Halik)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non-local exit from a WITH-ALIEN form no longer causes alien-stack leakage. (reported by Andy Hefner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PROGV signals an error when an attempt to violate declared type of a variable or bind a constant is made.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SET signals an error when an attempt to violate declared type of a variable is made.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: restart computation during the execution of a restart test function no longer causes infinite recursion. (reported by Michael Weber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: calling SB-COVER:REPORT with a non-directory pathname now signals an error. (thanks to Pierre Mai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EXPORT left symbol unexported in conflict situations. (thanks to Michael Weber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correctly handle name conflicts involving CL:NIL. (thanks to Michael Weber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RESOLVE-CONFLICT restart for name conflicts handles conflicts arising from USEing package with conflicting symbols correctly. (thanks to Michael Weber)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.19&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: user-customizable variable SB-EXT:*MUFFLED-WARNINGS*; warnings that go otherwise unhandled will be muffled if they are of the type that's the value of this variable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: stack allocation is slightly more efficient on x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFSTRUCT forms with user-specified :CONSTRUCTOR options, where a raw slot always is initialized using the initform whose type is not know sufficiently well a compile-time are now compiled correctly. (reported by John Morrison)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler no longer makes erronous assumptions in the presence of non-foldable SATISFIES types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stack analysis missed cleanups of dynamic-extent arguments in non-let-converted calls to local functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Windows port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;adjusted address spaces for building on both Win32 and Win64. (thanks for John Connors)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;interval arithmetic during type derivation used inexact integer to single-float coercions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;arithmetic operations involving large integers and single floats give the same results in compiled and interpreted code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deriving the result type of COERCE no longer signals an error if the derived type of the second argument is a MEMBER type containing invalid type specifiers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ADJOIN with constant NIL as second argument works correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FUNCTION-KEYWORDS was called SB-PCL::FUNCTION-KEYWORD-PARAMETERS.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.18&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-SPROF:WITH-PROFILING now by default profiles only the current thread.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: changes to SYMBOL-VALUE of constants defined with DEFCONSTANT now signal an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-SPROF now has support for wallclock profiling, and is also able to profile specific threads. REPORT output has also additional sorting options.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: better pretty-printing of DEFPACKAGE forms. (Thanks to Michael Weber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: structure allocation has been improved
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;constructors created by non-toplevel DEFSTRUCTs are ~40% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;out of line constructors are ~10% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;inline constructors are ~15% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;inline constructors are capable of dynamic extent allocation (generally on x86 and x86-64, in some cases on other platforms as well.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: simple uses of HANDLER-CASE and HANDLER-BIND no longer cons.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: file compiler is now able to coalesce non-circular lists, non-base strings, and bit-vectors. Additionally, constants are never referenced through SYMBOL-VALUE at runtime.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: code defining methods on PRINT-OBJECT (and other generic functions in the COMMON-LISP package) now loads faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EAI_NODATA is deprecated since RFC 3493. Stop using it in sb-bsd-sockets.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: if COMPILE-FILE aborts due to an unwind, the partial fasl is now deleted. (reported by Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: READ-LINE always returned NIL for the last line in files. (reported by Yoshinori Tahara)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more accurate disassembly annotations of foreign function calls. (thanks to Andy Hefner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: trimming non-simple strings and non-string string designators when the there is nothing to trim works properly. (thanks to James Knight)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-POSIX bindings for mlockall, munlockall, and setsid. (thanks to Travis Cross)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;NIL is a valid function name (regression at 1.0.13.38)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FILL on lists was missing its return value (regression at 1.0.12.27)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;STRING-TRIM, STRING-LEFT-TRIM, and STRING-RIGHT-TRIM did not respect fill pointers properly (regression at 1.0.12.23)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;STRING-TRIM, STRING-LEFT-TRIM, and STRING-RIGHT-TRIM did not respect displacement indices properly (regression at 1.0.12.23)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.17&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;temporary regression: user code can no longer allocate closure variable storage on stack, due to bug 419 without explicitly requesting it. Please consult sbcl-devel for advice if you need to use this feature in the meanwhile.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: runtime argument --control-stack-size can be used to adjust thread default control stack size.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: improved TIME output
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;all times are reported using the measured accuracy (milliseconds for real and GC times, microseconds for everything else.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;processor cycle counts on x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;interpreted forms are counted for both evaluator modes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;number of lambdas converted by the compiler is reported.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CPU percentage report (computed from real and total run time.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more comprehensive run time reporting, using a condenced format&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;interperted form, lambda, and page fault counts are omitted when zero.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ADJOIN and PUSHNEW are upto ~70% faster in normal SPEED policies.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: APPEND is upto ~10% faster in normal SPEED policies.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: two argument forms of LAST are upto ~10% faster in normal SPEED policies.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: NCONC no longer needs to heap cons its &amp;amp;REST list in normal SPEED policies.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-FLUID build feature no longer breaks the build. (thanks to Sidney Markowitz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: UNION and NUNION work with :TEST-NOT once more, regression since 1.0.9.1. (thanks to Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: result of MAKE-ARRAY can be stack allocated - regression since 1.0.15.36. (thanks to Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LAST when always returned the whole list when given a bignum as the second argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: dynamic extent allocation of nested lists and vectors could leak to otherwise accessible parts.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: invalid optimization of heap-allocated alien variable reference.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fasl header checking is less vulnerable to different platform word lengths.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more correct assembler syntax for GNU binutils 2.18.50.0.4 support. (thanks to Marijn Schouten)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix ECASE warnings from CMUCL-as-xc-host. (reported by Andreas Franke)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the fopcompiler can handle LOCALLY forms (with no declarations) successfully. (reported by Attila Lendvai)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.16&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: revert the changes to sb-posix's error signaling added in 1.0.14.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: change PROBE-FILE back to returning NIL whenever we can't get a truename, as was the case before 1.0.14.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-BSD-SOCKETS:NAME-SERVICE-ERROR now inherits from ERROR instead of just CONDITION.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-INTROSPECT can provide source locations for instances as well. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: binding special variables now generates smaller code on threaded platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MEMBER and ASSOC are over 50% faster for :TEST #'EQ and cases where no :TEST is given but the compiler can infer that the element to search is of type (OR FIXNUM (NOT NUMBER)).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: better LOGNOT on fixnums.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: modular arithmetic for a particular requested width is implemented using a tagged representation unless a better representation is available.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 423: TRULY-THE and *CHECK-CONSISTENCY* interaction.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-BSD-SOCKETS:MAKE-INET-ADDRESS checks the input string for wellformedness and returns a specialized vector. (reported by Francois-Rene Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FIND-CLASS was not thread-safe. (reported by Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ~R was broken for vigtillions. (thanks to Luis Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: attempt to obtain *SCHEDULER-LOCK* recursively when unscheduling timer at the same time as another timer fires.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: don't reschedule timers for dead threads.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: periodic polling was broken. (thanks to Espen S Johnsen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: copying output from RUN-PROGRAM to a stream signalled bogus errors if select() was interrupted.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: add support for fcntl's struct flock to SB-POSIX.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.15&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: cleaner backtraces for interactive interrupts, as well as other cases where the interesting frames used to be obscured by interrupt handling frames.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: untracing a whole package using (UNTRACE &quot;FOO&quot;) is now supported, and tracing a whole package using (TRACE &quot;FOO&quot;) now traces SETF-functions as well.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: implement SB-POSIX:MKTEMP and SB-POSIX:MKDTEMP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-DEBUG:PRINT-FRAME-CALL now prints the entry-point kind even when SB-DEBUG:*SHOW-ENTRY-POINT-DETAILS* is NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;unreadably printed representation of hash-tables now includes weakness if any.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: partially fixed #188: type propagation from assignments is now more efficient.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed #407: (COERCE X 'SINGLE-FLOAT) and (COERCE X 'DOUBLE-FLOAT) are not flushable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on x86 and x86-64 pointer based EQ-hashing now uses the full address of the object, and none of the tag bits.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: readably printing hash-tables now respects other printer control variables. (reported by Cedric St-Jean)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler gave a bogus STYLE-WARNING for the :SYNCHRONIZED keyword with MAKE-HASH-TABLE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: export SB-POSIX:MKSTEMP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SORT was not interrupt safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: XREF accounts for the last node of each basic-block as well.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-INSTANCE optimizations interacted badly with non-keyword :DEFAULT-INITARGS in the presence of :BEFORE/:AFTER methods on SHARED-INITIALIZE. (thanks to Matt Marjanovic)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the CTOR optimization for MAKE-INSTANCE should no longer create obsolete instances in the case of redefinition or obsoletion of a superclass. (thanks to Andy Hefner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Support for the Alpha architecture has been revived; it had suffered somewhat from lack of maintenance since sbcl-1.0.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Windows port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The system detects the codepage to use at startup, instead of using the value from the saved core. (thanks to Kei Suzuki)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: SB-EXT:*EXIT-HOOKS* are called when the process exits (see documentation for details.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;revived support for OpenBSD (contributed by Josh Elsasser)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;partially fixed bug #108: ROOM no longer suffers from occasional (AVER (SAP= CURRENT END)) failures.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #402: proclaimed non-standard declarations in DEFMETHOD bodies no longer cause a WARNING to be signalled. (reported by Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (TRUNCATE X 0) when X is a bignum now correctly signals DIVISION-BY-ZERO. Similarly for MOD and REM (which suffered due to the bug in TRUNCATE.) (reported by Michael Weber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-SPROF:REPORT no longer signals an error if there are no samples. (reported by Andy Hefner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: functions compiled using (COMPILE NIL '(LAMBDA ...)) no longer appear as (NIL ...) frames in backtraces.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RESOLVE-CONFLICT (and the other name conflict machinery) is now actually exported from SB-EXT as documented. (reported by Maciej Katafiasz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-aclrepl now correctly understands how to inspect single-floats on 64-bit platforms where single-floats are not boxed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-MOP:CLASS-SLOTS now signals an error if the class has not yet been finalized. (reported by Levente Meszaros)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CLOSE :ABORT T behaves more correctly on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DESCRIBE and (DOCUMENTATION ... 'OPTIMIZE) describe meaning of SBCL-specific optimize qualities.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: RUN-PROGRAM now uses execvp(3) to find an executable in the search path, and does so in the child process's PATH. The function FIND-EXECUTABLE-IN-SEARCH-PATH has been removed; it can be found in the CVS history, for somebody who needs that search behavior (see the manual).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: compiler policy re. weakening type checks has changed: now type checks are weakened only if SAFETY &amp;lt; 2 and SAFETY &amp;lt; SPEED.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-EXT:NATIVE-NAMESTRING takes a new keyword AS-FILE, forcing unparsing of directory pathnames as files. Analogously, SB-EXT:PARSE-NATIVE-NAMESTRING takes an AS-DIRECTORY, forcing a filename to parse into a directory pathname.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: implicit generic function creation now signals a specific style-warning IMPLICIT-GENERIC-FUNCTION-WARNING, which users can bind handlers for and muffle around calls to LOAD.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: RUN-PROGRAM allows unicode arguments and environments to be used (using the default stream external format), and allows non-simple strings to be used. (thanks to Harald Hanche-Olsen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: COPY-SEQ, FILL, and SUBSEQ are 30-80% faster for strings and vectors whose element-type or simplicity is not fully known at compile-time.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: STRING-TRIM and related functions no longer allocate a new string when no trimming needs to be performed. These functions are also faster than before when the input string has been declared as a simple-string.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: READ-SEQUENCE on simple-strings is up to 80% faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: READ-LINE is significantly faster for files containing long lines.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: non-open coded uses of character comparison operators (e.g. char=) no longer cons when called with more than one parameter on platforms supporting dynamic-extent allocation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: READ-SEQUENCE on composite stream wrapping a Gray stream with STREAM-ELEMENT-TYPE (UNSIGNED-BYTE 8) signalled an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COPY-SEQ on lists did not signal a type-error on improper lists in safe code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some sequence functions elided bounds checking when SPEED &amp;gt; SAFETY.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: too liberal weakening of union-type checks when SPEED &amp;gt; SAFETY.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more bogus fixnum declarations in ROOM implementation have been fixed.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: MAKE-HASH-TABLE now experimentally accepts a :SYNCHRONIZED argument, which makes the hash-table safe for concurrent accesses (but not iteration.) See also: SB-EXT:WITH-LOCKED-HASH-TABLE, and SB-EXT:HASH-TABLE-SYNCHRONIZED-P.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: CONCATENATE on strings is an order of magnitude faster in code compiled with (&amp;gt; SPEED SPACE).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SUBSEQ is ~50% faster on lists.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bug 417 fixed -- source location reporting is now more robust.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SUBSEQ on a list will now correctly signal an error if if END is smaller then START.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-PROFILE will no longer report extra consing for nested calls to profiled functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ROOM implementation had bogus fixnum declarations which could cause type-errors when calling ROOM on large images.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: if file compilation is aborted, the partial fasl is now deleted, and COMPILE-FILE returns NIL as the primary value.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: number of thread safety issues relating to SBCL's internal hash-table usage have been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-SYS:WITH-PINNED-OBJECTS could cause garbage values to be returned from its body when the values were being returned using unknown-values return convection and the W-P-O was wrapped inside an UNWIND-PROTECT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-posix should now compile again under Windows, enabling slime to work again.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: hash-table accessor functions are no longer automatically protected by locks. Concurrent accesses on the same hash-table from multiple threads can give inconsistent results or even corrupt the hash-table completely. Multi-threaded applications should do their own locking at the correct granularity. In the current implementation it is still safe to have multiple readers access the same table, but it's not guaranteed that this property will be maintained in future releases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: (SETF MUTEX-VALUE) is not longer supported, and will signal an error at runtime.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-THREAD package now exports a semaphore interface.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: CONS can now stack-allocate on x86 and x86-64. (Earlier LIST and LIST* supported stack-allocation, but CONS did not.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: nested lists can now be stack allocated on platforms providing stack allocation support.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: dynamic-extent support has been extended to support cases where there are multiple possible sources for the stack allocated value.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: RELEASE-MUTEX no longer needs to perform a syscall if the mutex is uncontested on Linux.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: symbol-macro expansion now uses the *MACROEXPAND-HOOK* as specified by the CLHS. (thanks to Tobias Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: NaN comparison now works on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CLOSE :ABORT T on a stream with pending output now works.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: instances of non-standard metaclasses using standard instance structure protocol sometimes missed the slot type checks in safe code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: known functions can be inlined in high-debug code.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the MSI installer on Windows no longer associates .lisp and .fasl files with the installed SBCL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: :UNIX is no longer present in *FEATURES* on Windows. (thanks to Luis Oliviera)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: SB-CLTL2 contrib module now implements FUNCTION-INFORMATION. (thanks to Larry D'Anna)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: scavenging weak pointers is now more efficient, requiring O(1) instead of O(N) per weak pointer to identify scanvenged vs. unscavenged pointers. (thanks to Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: typechecking (SETF SLOT-VALUE) is now ~5x faster in method bodies using constant slot-names when the first argument is a specializer parameter for the method.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SLOT-VALUE &amp;amp;co are now ~50% faster for variable slot names, when the class of the instance is a direct instance STANDARD-CLASS or FUNCALLABLE-STANDARD-CLASS (making them only 3x as slow as the constant slot-name case.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: member type construction is now O(N) instead of O(N^2).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: UNION and NUNION are now O(N+M) for large inputs as long as the :TEST function is one of EQ, EQL, EQUAL, or EQUALP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DEFINE-MODIFY-MACRO lambda-list information is now more readable in environments like Slime which display it. (thanks to Tobias C. Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EXT:COMPARE-AND-SWAP was non-atomic unless the compiler was able to infer the correct argument type for the object on which the CAS operation was being performed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: copy propagation interfered with parallel assignment semantics in local calls. (reported by Paul Khuong)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the signed modular fixnum shift compiled to wrong code on x86 and x86-64. (spotted by a slight modification to some of PFD's random tests)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-SYS:OUTPUT-RAW-BYTES is deprecated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-EXT:FINALIZE accepts a :DONT-SAVE keyword argument, indicating the finalizer should be cancelled when SAVE-LISP-AND-DIE is called.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: default PRINT-OBJECT methods for classes, slot-definitions, and generic function now print the object identity for anonymous instances. (thanks to Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: as an extension to MOP, SBCL now supports SETF of STANDARD-INSTANCE-ACCESS and FUNCALLABLE-STANDARD-INSTANCE-ACCESS. (thanks to Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-cover has an alternate annotation mode which puts the form annotations at the car of the form, instead of annotating it completely. The benefit of this mode is that it shows better which forms were instrumented by the compiler.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: new compiler transforms for MEMBER and ASSOC were affected by printer control variables. (reported by Dan Corkill)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: system leaked memory when delayed output was performed by the OS in smaller chunks then expected. (thanks to David Smith)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: system leaked memory when file streams were not closed properly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: large objects written to slow streams that were modified after the write could end up with the modified state written to the underlying file descriptor.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: multiple threads operating in parallel on the same stream could cause buffer-overflows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: source location information is stored correctly (broken since 1.0.6). This bug would generally show up as the Slime debugger highlighting the wrong form when the sldb-show-source command was used.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Branch forms are again annotated as branches in the sb-cover annotations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GCD on MOST-NEGATIVE-FIXNUM no longer causes an infinite loop on x86-64. (reported by Gregory Vanuxem)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EQUALP could return wrong results for structures with raw slots (slots with a :TYPE of SINGLE-FLOAT, DOUBLE-FLOAT, or a machine word). (reported by Vjacheslav Fyodorov)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sb-sprof sampling didn't work on non-x86oid platforms. (patch by Pierre Mai)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: experimental macro SB-EXT:COMPARE-AND-SWAP provides atomic compare-and-swap operations on threaded platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: experimental function SB-EXT:RESTRICT-COMPILER-POLICY allows assigning a global minimum value to optimization qualities (overriding proclamations and declarations).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: closed over variables can be stack-allocated on x86 and x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;performance bug fix: GETHASH and (SETF GETHASH) are once again non-consing.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: slot definition lookup is now O(1). This speeds up eg. SLOT-VALUE and (SETF SLOT-VALUE) with variable slot names.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: STRING-TO-OCTETS is now up to 60% faster for UTF-8.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ASSOC and MEMBER can now be open-coded for all combinations of keyword arguments when second argument is constant and SPEED &amp;gt;= SPACE. In other cases a specialized version is selected.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using obsoleted structure instances with TYPEP and generic functions now signals a sensible error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: threads waiting on GET-FOREGROUND can be interrupted. (reported by Kristoffer Kvello)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtrace construction is now more careful when making lisp-objects from pointers on the stack, to avoid creating bogus objects that can be seen by the GC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: defaulting of values in contexts expecting more than 7 variables now works on x86-64. (reported by Christopher Laux)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: modifications to packages (INTERN, EXPORT, etc) are now thread safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF SYMBOL-PLIST) no longer allows assigning a non-list as the property-list of a symbol.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFMETHOD forms with CALL-NEXT-METHOD in the method body, in EVAL-WHEN forms with both :COMPILE-TOPLEVEL and :LOAD-TOPLEVEL situations requested, are once again file-compileable. (reported by Sascha Wilde)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;MOP improvement: support for user-defined subclasses of SB-MOP:SPECIALIZER has been enhanced. The experimental interface function SB-PCL:MAKE-METHOD-SPECIALIZERS-FORM, called as part of the expansion of DEFMETHOD, is responsible for generating a form which creates a list of specializers when evaluated. Additional functions SB-PCL:[UN]PARSE-SPECIALIZER-USING-CLASS provide debugging and introspective support.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the (unsupported) spinlock interface has changed: free spinlock now has the value NIL, and a held spinlock has the owning thread as its value.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: WITHOUT-INTERRUPTS now binds ALLOW-WITH-INTERRUPTS and WITH-LOCAL-INTERRUPTS as local macros. Refer to documentation string for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: name of a socket-stream is now &quot;a socket&quot; instead of &quot;a constant string&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-POSIX now supports lockf(). (Thanks to Zach Beane.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-POSIX now supports getcwd(). (Thanks to Tassilo Horn.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-INTROSPECT:FUNCTION-ARGLIST shows nicer argument lists for generic functions. (Thanks to Tobias C. Rittweiler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: bignum printing speed has been improved by 20-40% (depending on the bignum size.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WITH-MUTEX and WITH-RECURSIVE-LOCK are now interrupt safe on Linux.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the cache used by the CLOS to store precomputed effective methods, slot offsets, and constant return values is now thread and interrupt safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: generic function dispatch function updating is now thread and interrupt safe (in the sense that the known issues have been fixed.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ADD/REMOVE-METHOD is now thread and interrupt safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interning EQL-specializers is now thread and interrupt safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: asdf systems with dependencies to the SB-POSIX or SB-BSD-SOCKETS contribs can be loaded with :FORCE T.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interrupt safety of applicable method computation has been improved.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new contrib: sb-cover, an experimental code coverage tool, is included as a contrib module.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: STRING-TO-OCTETS for unibyte encodings and UTF-8 is significantly faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: calls of the form (AREF FOO (+ INDEX &amp;lt;constant&amp;gt;)) now produce more efficient code on x86-64 if the compiler can determine that (+ INDEX &amp;lt;constant&amp;gt;) does not require a bounds check and FOO has an element type at least 8 bits wide.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: a new, experimental synchronous timeout facility is provided. Refer to SB-SYS:WITH-DEADLINE for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: when a symbol name conflict error arises, the conflicting symbols are always printed with a package prefix. (thanks to Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: stepping is now once again supported on the SPARC and MIPS platforms. (It is also now more likely to work on CheneyGC builds on the PPC.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: sb-sprof can now also track and report accurate call counts.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixes: the treatment of non-standard subclasses of SB-MOP:SPECIALIZER is more correct.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: PURIFY no longer copies the data from the dynamic space into the static and read-only spaces on platforms that use the generational garbage collector&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GETHASH, (SETF GETHASH), CLRHASH and REMHASH are now interrupt safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GC race condition occasionally resulting in crashes with the error message &quot;SIG_STOP_FOR_GC blocked at a bad place&quot; has been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: &amp;amp;ENVIRONMENT variables in macro lambda lists can now be declared ignored.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFSETF lambda lists without &amp;amp;ENVIRONMENT no longer cause a STYLE-WARNING to be signalled (regression from 1.0.4.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an asynchronous interrupt could previously leave the system running with GC inhibited.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a DECLARE form evaluated at top-level now causes an error rather than silently (or verbosely) returning NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: trying to dissassemble functions compiled at high DEBUG could result in a error being signalled due to source form lookup errors. (reported by Peter Graves)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: removed writer methods for host-ent-name, host-ent-addresses -- changing the values did not update the DNS information anyway.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: changed experimental JOIN-THREAD interface&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: the manual now lists reader and writer methods in class slot documentation sections. (thanks to Richard M Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: unwinding from asyncronous events has been documented as unsafe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: SB-SYS:WITHOUT-GCING has been documented as unsafe in multithreaded application code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: GET-INTERNAL-REAL-TIME has been optimized on POSIX platforms. (thanks to James Anderson for the optimization hint)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: REPLACE, SUBSEQ, and COPY-SEQ are now optimized in more cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: STRING-{EQUAL,LESSP,GREATER-P} and their NOT- variants no longer cons.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: Direct calls to CHAR-{EQUAL,LESSP,GREATERP} and their NOT- variants no longer cons.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: EQUAL hash tables no longer use SXHASH for objects of all data types, but instead use an EQL hash for types for which EQUAL is the same as EQL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the non-inlined generic versions of AREF and (SETF AREF) are significantly faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: new STRING-OUTPUT-STREAM implementation is much faster for large outputs and conses 30% less on average.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: XREF information is now collected for references made to global variables using SYMBOL-VALUE and a constant argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SIGINT now causes a specific condition SB-SYS:INTERACTIVE-INTERRUPT to be signalled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FILE-POSITION used to signal an error in some cases where ANSI requires it to return NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ADJUST-ARRAY is now interrupt-safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: adding and removing fd-handlers is now interrupt-safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: inlined calls to C now ensure 16byte stack alignment on x86/Darwin.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: bad type declaration in the CLOS implementation has been fixed. (reported by James Anderson)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: incorrect ROOM reporting on x86-64 has been fixed. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFSETF now allows &amp;amp;ENVIRONMENT and disallows &amp;amp;AUX as required by the CLHS. (reported by Samium Gromoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: dead unbound variable references now signal an error. (reported by Marco Monteiro)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: / with an unused value was being deleted in safe code. (thanks to Marco Monteiro and Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: number of characters that can be written onto a single line in a file is unlimited.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some GC deadlocks caused by asynchronous interrupts have been fixed by inhibiting interrupts for when GC is disabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: some interrupt safety issues with GETHASH, (SETF GETHASH), CLRHASH and REMHASH have been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: binding *BREAK-ON-SIGNALS* to a value that is not a type specifier no longer causes infinite recursion.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-EXT:MUFFLE-CONDITIONS declarations no longer trigger a bogus warning in DEFMETHOD bodies. (reported by Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an &amp;amp;environment argument with the correct variable information is passed to macros that are expanded during byte compilation. (reported by Samium Gromoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a logic error was causing the hash function for bignums to have excessive amounts of collisions. (reported by Faré Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: modifying the contents of an array could change the return value of SXHASH on that array, which is only allowed for strings and bit vectors. (bug introduced in 0.9.16)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: the x86-64/darwin port now passes all tests (except for the debugger tests) but should still be considered experimental until this is fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: a style-warning is signaled for CASE (etc) clauses with duplicate keys. (thanks to Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: macos/x86 and macos/x86-64 now use mach exception handlers for dealing with illegal instructions (for trapping and error handling) and memory protection violations (for GC).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new platform: experimental support for x86-64/darwin (MacOS).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: the thread-safe (on most platforms) getaddrinfo and getnameinfo sockets functions are used instead of gethostbyaddr and gethostbyname, on platforms where the newer functions are available. As a result, the ALIASES field of HOST-ENT will always be NIL on these platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;change: runtimes with embedded cores (i.e. saved with :EXECUTABLE T) don't print the startup banner, but behave as if --noinform was passed as a command line argument. (thanks to Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new experimental feature: added JOIN-THREAD (by NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: code using alien values with undeclared types is much faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the compiler is now able to open code SEARCH in more cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: more compact typechecks on x86-64 (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: using standardized COMMON-LISP special variables as loop variables no longer signals bogus package lock violations. (reported by Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: declaring local loop variables to be of a range-limited type such as (SINGLE-FLOAT 1.0 2.0) no longer causes a compile-time error. (reported by Andras Simon)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: &amp;gt;= and &amp;lt;= gave wrong results when used with NaNs. (Some NaN bugs remain on x86-64.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the #= and ## reader macros now interact reasonably with funcallable instances.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: type-checks for function arguments were compiled using the compiler policy settings of the wrong lexical environment (in 1.0.2 and 1.0.3).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SHADOW accepts characters as string designators, as required by the spec (thanks to Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed GC safety issues when foreign functions are called with non-base strings as arguments&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more consistent error output for fatal-compiler-warnings, like reader errors&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: functions with proper names were showing up as NIL in backtraces (reported by Edi Weitz, regression in 1.0.2)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new platform: NetBSD/PPC. (thanks to Aymeric Vincent)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: calls of the form (AREF FOO (+ INDEX &amp;lt;constant&amp;gt;)) now produce more efficient code on the x86 if the compiler can determine that (+ INDEX &amp;lt;constant&amp;gt;) does not require a bounds check and FOO has an element type at least 8 bits wide.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: references to undefined variables are handled the same way in toplevel forms as in the normal compiler&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the build scripts again work with non-bash /bin/sh (thanks to Magnus Henoch)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: use &quot;gtar&quot; as the asdf-install *TAR-PROGRAM* on NetBSD (thanks to Jon Buller)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: faster compilation times for complex functions&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: added readlink support to SB-POSIX (thanks to Richard M Kreuter)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;improvement: experimental support for mach exception handling on x86/macos. requires building with :MACH-EXCEPTION-HANDLER feature to use.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: support for GBK external format. (thanks to Chun Tian (binghe))&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: the debugger now displays variables that have been closed over, in code compiled with (DEBUG 2) or higher&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: support for executable cores on NetBSD (thanks to Richard Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: added a RESTART-FRAME debugger command&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: new generic function SB-GRAY:STREAM-FILE-POSITION can be used to provide an implementation for FILE-POSITION on Gray streams (thanks to Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: add syslog, openlog and closelog support to SB-POSIX (thanks to Richard Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the function call overhead in code compiled with a high DEBUG optimization setting is significantly&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an error is signaled for attempts to use READ-SEQUENCE for a (SIGNED-BYTE 8) stream and (UNSIGNED-BYTE 8) vector, or vice versa. (thanks to Tony Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the initforms for DEFMETHOD &amp;amp;AUX parameters are only evaluated once (reported by Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the :SHOW-PROGRESS keyword parameter to SB-SPROF:WITH-PROFILING works again (thanks to Kilian Sprotte)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an error is signaled for tagbodies with duplicate tags (thanks to Stephen Wilson)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: NIL can be used as a tagbody tag (thanks to Stephen Wilson)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Win32 port can now handle foreign code unwinding Lisp stack frames from alien callbacks.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ATANH returned incorrect results on win32 (thanks to Pierre Mai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SBCL works on Linux/ppc systems with a kernel configured to use 65k pages (thanks to David Woodhouse)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix SB-POSIX dirent and socket on NetBSD (thanks to Richard Kreuter)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new platform: FreeBSD/x86-64, including support for threading.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: the compiler stores cross-referencing information about function calls (who-calls), macroexpansion (who-macroexpands) and special variables (who-binds, who-sets, who-references) for code compiled with (&amp;lt; SPACE 3). This information is available through the sb-introspect contrib.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: users may subclass SEQUENCE, and have instances of these classes interoperate with standard Common Lisp functions if a number of methods are defined. (This feature is experimental and the interface subject to change based on feedback from SBCL users and the general community)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: sb-sprof traces call stacks to an arbitrary depth on x86/x86-64, rather than the previous fixed depth of 8&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: another pthread back-end of mutex &quot;pthread-futex&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non-ascii command-line arguments are processed correctly (thanks to Yaroslav Kavenchuk)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non-required arguments were not passed correctly when a method defined using DEFMETHOD was called from a mop-generated method using CALL-NEXT-METHOD (reported by Pascal Costanza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: recursion is now permitted in accessors through SLOT-UNBOUND. (reported by Pascal Costanza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an error was signaled at startup if the HOME environment variable was defined, but had an empty value (reported by Peter Van Eynde)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: non ordinary lambda-list keyword in ordinary lambda lists signal a PROGRAM-ERROR, not a BUG.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-POSIX:READDIR works when built with large file support.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ENOUGH-NAMESTRING works relative to #p&quot;/&quot; as well. (thanks to Marco Monteiro)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: DESTRUCTURING-BIND lambda-list uses &amp;amp;BODY instead of &amp;amp;REST for better automatic indentation support. (thanks to Matt Pillsbury)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: loading generic functions no longer takes O(n^2) time, proportional to the amount of methods in the generic function (reported by Todd Sabin and Jeremy Brown)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the FIND and POSITION family of sequence functions are significantly faster on arrays whose element types have been declared.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Windows port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Intermittent heap corruption problems have been fixed. (thanks to Alastair Bridgewater)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;TRACE :ENCAPSULATE NIL (and function end breakpoints) work on Windows.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Lisp is able to unwind foreign exception frames from alien callbacks. (thanks to Alastair Bridgewater)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 1.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;improvement: experimental support for threading on FreeBSD/x86. (thanks to NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: runtime option --dynamic-space-size can be used to set the size of the dynamic space reserved on startup.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: floating point modes in effect are now saved in core, and restored on startup.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: GET-INTERNAL-REAL-TIME now reports the time since startup, not time since first call to GET-INTERNAL-REAL-TIME.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: SAVE-LISP-AND-DIE explicitly checks that multiple threads are not running after *SAVE-HOOKS* have run.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: writes to CLOS instance slots are type-checked in code compiled with (SAFETY 3)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: floating-point exception handling on FreeBSD (thanks to NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: SB-POSIX supports time(2), utime(2) and utimes(2) (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: support for files larger than 2GB for CL streams and SB-POSIX on Linux/x86&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: added support for the Shift-JIS external format. (contributed by NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: callbacks are supported on Linux/PPC. (thanks to Joshua Ross)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler bug triggered by a (non-standard) VALUES declaration in a LET* was fixed. (reported by Kaersten Poeck)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: file compiler no longer confuses validated and already dumped structurres. (reported by Kaersten Poeck)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ADJUST-ARRAY :FILL-POINTER T on an array without a fill-pointer signals a type-error as required. (thanks to Lars Brinkhoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: disassemly of funcallable instances works.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: single stepping on PPC.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fix thread-safety problems in the type system (generally manifesting as nonsensical errors like &quot;STRING is a bad type specifier for sequences&quot; or &quot;The value 1 is not of type FIXNUM&quot;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: version components are handled correctly in TRANSLATE-PATHNAME (reported by Josip Gracin)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: an error is signaled for attempts to displace arrays with incompatible element types (thanks to Mario Mommer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more correct handling of wide characters in debug info (bug reported by Attila Lendvai and fixed by Juho Snellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: method calls with &amp;amp;OPTIONAL or &amp;amp;KEY arguments are faster and don't cause extra consing&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: MAP and MAP-INTO are significantly faster on vectors whose elements types have been declared.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Improvements to SB-SPROF:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Support for allocation profiling&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Reduced profiling overhead, especially for long profiling runs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Improvements to the Windows port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;floating point exceptions are now reported correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;stack exhaustion detection works partially.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more accurate GET-INTERNAL-REAL-TIME.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;better RUN-PROGRAM behaviour in case of errors in the child process.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PROBE-FILE now simplifies pathnames correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DIRECTORY now works correctly with :WILD-INFERIORS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DECODE-UNIVERSAL-TIME works on times before 00:00:00 January 1st 1970 (although time timezone data will be unreliable).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Hyperbolic functions TANH, ASINH, ACOSH, and ATANH work.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.18&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-POSIX now supports cfsetispeed(3), cfsetospeed(3), cfgetispeed(3), cfgetospeed(3), and related constants. (thanks to Max-Gerd Retzlaff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: two potential GC deadlocks affecting threaded builds.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (TYPEP #\A '(NOT (MEMBER #\&quot; #\{ #\:))) now correctly returns T (reported by Anton Kazennikov)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the STORE-VALUE restart of CHECK-TYPE works correctly with non-variable places&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: remove a race condition in the setting of funcallable-instance functions, this should make threaded CLOS code more stable against memory faults.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: corruption of specials when unbinding is interrupted by an asynchronous unwind (reported by Hannu Koivisto)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: the debugger will now also display local variables that are only used once, for code compiled with a DEBUG optimization quality of 2 or higher.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.17&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;feature: weak hash tables, see MAKE-HASH-TABLE documentation&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: External-format support for FFI calls. The SB-ALIEN:C-STRING no longer implies an ASCII external-format. Instead the string is subject to external-format conversion. Additionally return values of type SB-ALIEN:C-STRING are by default of type (SIMPLE-ARRAY CHARACTER), not SIMPLE-BASE-STRING. For an alien type that behaves like the old SB-ALIEN:C-STRING type, use (SB-ALIEN:C-STRING :EXTERNAL-FORMAT :ASCII :ELEMENT-TYPE BASE-CHAR). (thanks to Yaroslav Kavenchuk)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: SB-EXT package no longer contains the following unused symbols: *GC-NOTIFY-AFTER*, *GC-NOTIFY-BEFORE*, *GC-NOTIFY-STREAM*, *ERROR-PRINT-LENGTH*, *ERROR-PRINT-LEVEL*, *ERROR-PRINT-LINES*&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: the single-stepper is no longer available on Alpha, Mips and Sparc platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the direct superclasses of SB-MOP:FUNCALLABLE-STANDARD-OBJECT are (FUNCTION STANDARD-OBJECT), not (STANDARD-OBJECT FUNCTION). This makes the class-precedence-lists of GENERIC-FUNCTION and STANDARD-GENERIC-FUNCTION comply with the requirement of ANSI 1.4.4.5.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the default stream external format on non-unicode SBCL is no longer detected from the locale, but is always ISO-8859-1&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: Add a version of evaluator that uses an interpreter instead of the compiler. EVAL still uses the compiler by default, to switch it to use the interpreter, set the value of the variable SB-EXT:*EVALUATOR-MODE* to :INTERPRET.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the single-stepper REPL has been merged with the normal debugger (see the &quot;Stepping&quot; heading of the debugger help for more details). The debugger command STEP will no longer switch to the single-stepper REPL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ENOUGH-NAMESTRING on pathnames with no name and a pattern for a type now works.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: loading of default sysinit file works. (thanks to Leonid Slobodov)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better detection of circularities in the file-compiler. (reported by Marco Monteiro)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the CL pathname functions now work with files that have non-ASCII characters in their names (thanks to Yaroslav Kavenchuk)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: The :PTY argument for RUN-PROGRAM will now work on systems with Unix98 pty semantics.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ASDF-INSTALL will now work with bsd tar.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ASDF-INSTALL uses GNU tar on Solaris (thanks to Josip Gracin).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: timers expiring in dead threads no longer cause a type-error (reported by Paul &quot;Nonny Mouse&quot;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: thanks to more lightweight single-stepper instrumentation, code compiled with (DEBUG 3) will compile and execute significantly faster, and will have more accurate type-inferencing than before&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SLOT-VALUE optimizations are no longer done on method parameters whose bindings are modified&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the win32 port (thanks to Yaroslav Kavenchuk):
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: arguments to RUN-PROGRAM are escaped correctly&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;replace dummy implementations of CL:MACHINE-INSTANCE and CL:SOFTWARE-VERSION with proper version&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.16&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;feature: implemented the READER-METHOD-CLASS and WRITER-METHOD-CLASS portion of the Class Initialization Protocol as specified by AMOP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: variable SB-EXT:*USE-IMPLEMENTATION-TYPES* no longer exists.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster LOGCOUNT implementation on x86 and x86-64 (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: hashing of general arrays and vectors has been improved. (reported by Any Fingerhut)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SB-INTROSPECT is now able to find definitions of profiled functions. (thanks to Troels Henriksen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: compiler-macro expansion applies now to FUNCALL forms as well, allowing compiler-macros for SETF-functions to expand.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: step-instrumentation no longer wraps known single-value functions with multiple-value context, allowing better type inference.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #337: use of MAKE-METHOD in method combination now works even in the presence of user-defined method classes. (reported by Bruno Haible and Pascal Costanza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #339(c): if there are applicable methods not part of any long-form method-combination group, call INVALID-METHOD-ERROR. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #361: the :FUNCTION initarg in the protocol for initialization of methods can now be used to override internally-produced optimized functions. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: extensions of MAKE-METHOD-LAMBDA which wrap the system-provided lambda expression no longer cause warnings about unbound #:|pv-table| symbols.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: improved the handling of type declarations and the detection of violations for keyword arguments with non-constant defaults.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: potentially erronous calls to PATHNAME and MERGE-PATHNAMES were being flushed in some cases. (reported by Richard Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiled calls to TYPEP were mishandling obsolete instances. (reported by James Bielman and Attila Lendvai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: format strings with ~&amp;gt; without matching ~&amp;lt; no longer trigger an AVER, but signal an understandable error instead. (reported by Antonio Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: specifying an output-file without a pathname-type for COMPILE-FILE or COMPILE-FILE-PATHNAME resulted in using the type of input-file instead of &quot;fasl&quot;. (reported by Robert Dodier)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler-macro lambda-list parsing of FUNCALL forms. (reported by James Y Knight).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler-macros-function did not consider the environment argument for shadowing by local functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler-macros expansion was inhibited by local INLINE declarations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: inline expansions of known functions were subject to step-instrumentation in high debug policies, leading to problems with type-inference.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler failed to differentiate between different CONS types in some cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed input, output and error redirection in RUN-PROGRAM for win32. (thanks to Mike Thomas and Yaroslav Kavenchuk)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #368: incorrect use of expressed vs. upgraded array element type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: #306a: more precise unions of array types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;thread-safety improvements:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;CONDITION-WAIT could return early on Linux, if the thread was interrupted and subsequently continued with SIGCONT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;STABLE-SORT and ADJUST-ARRAY were not reentrant.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.15&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;added support for the ucs-2 external format. (contributed by Ivan Boldyrev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: pretty printing of objects of type (cons symbol) is, in the default pprint-dispatch-table, now sensitive to whether the symbol satisfies FBOUNDP. (thanks to Marcus Pearce)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-MOP:FINALIZE-INHERITANCE is now called later in a class's lifetime, possibly as late as when the first instance of the class is created. Previously, SB-MOP:FINALIZE-INHERITANCE was called by the system as soon as a class became finalizeable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: FILE-POSITION sometimes returned inconsistent results for multibyte external-format streams. (thanks to &quot;vbzoli&quot;)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: CHANGE-CLASS would fail to preserve the values of slots with :ALLOCATION :CLASS inherited from superclasses of the original class.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: anonymous classes can now be created using the :NAME initarg and MAKE-INSTANCE / REINITIALIZE-INSTANCE, as specified by AMOP. (reported by Leonid Slobodov on comp.lang.lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: core-files saved with :EXECUTABLE T can again be executed when SBCL_HOME isn't set. (reported by James Knight)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: toplevel LOCALLY forms with declarations could occasionally get miscompiled. (reported by Yaroslav Kavenchuk)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: printing from several different threads using different values of *print-case* could cause invalid output, due to some internal special variables of the printer not being bound thread-locally (reported by Max Mikhanosha)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: SPECIALIZER metaobjects (including anonymous classes and EQL-SPECIALIZERs) can be used as specializers to DEFMETHOD. (reported by Pascal Costanza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: FINALIZE-INHERITANCE is called from REINITIALIZE-INSTANCE on classes when the class has previously been finalized, as required by AMOP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor code generation optimizations:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;better register allocation in CLOS dispatching functions&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;overflow detection when coercing signed bytes to fixnums on x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;is now implemented with one IMUL instruction instead of three shifts&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more efficient bit-vector access on x86 and x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more efficient access to raw structure slots on x86 and x86-64&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;ENSURE-DIRECTORIES-EXIST.8: ENSURE-DIRECTORIES-EXIST must return its argument.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;feature: thread support on Solaris/x86, and experimental thread support on OS X/x86.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;feature: SBCL now tries to signal a STORAGE-CONDITION when running out of heap.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;feature: SBCL now provides USE-VALUE and STORE-VALUE restarts in the default method for SLOT-UNBOUND.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: prevent the user from specializing the new-value argument to SB-MOP:SLOT-VALUE-USING-CLASS. It's somewhat counter to the intent of the protocol, I (CSR) think, and additionally it just doesn't work in SBCL as currently implemented, thanks to optimizations (that are always valid for the other three SLOT-VALUEish functions, but not for the setter).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the :SB-LDB feature is now enabled by default, and DISABLE-DEBUGGER and ENABLE-DEBUGGER also affect the low-level debugger.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enchancement: RUN-PROGRAM is now able to extract the file-descriptor from SYNONYM-STREAM and TWO-WAY-STREAM provided they can be decomposed down to an SB-SYS:FD-STREAM, allowing direct communication in more cases. Temporary files and pipes are still used as a fallback strategy.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;thread-safety: DECODE-UNIVERSAL-TIME &amp;amp; GET-DECODED-TIME depended on the non-reentrant C functions localtime(3) and gmtime(3).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: global optimization policy was not visible in LOCALLY and MACROLET forms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: class objects can be used as specializers in methods. (reported by Pascal Costanza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: native unparsing of pathnames with :DIRECTORY NIL failed with a type error. (reported by blitz_ on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: unparsing logical pathnames with :NAME :WILD :TYPE NIL failed with a type error. (reported by Pascal Bourguignon)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: merging pathnames against defaults with :DIRECTORY starting with '(:RELATIVE :BACK) should preserve the :BACK. (reported by James Y Knight)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: saving large (&amp;gt;2GB) cores on x86-64 now works&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a x86-64 backend bug when compiling (setf aref) with a constant index and a (simple-array (signed-byte 32)) array&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: NAME-CHAR on an invalid symbol no longer signals an error (patch by Robert J. Macomber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;feature: TIME now displays the amount of run-time spent in GC&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: The debugger now does a better job of respecting (PUSH '(*PRINT-CIRCLE* . T) SB-DEBUG:*DEBUG-PRINT-VARIABLE-ALIST*) when printing SB-DEBUG:*DEBUG-CONDITION*. (This is a debugger-only workaround for bug 403.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: floating point exception handling now works on FreeBSD (thanks to NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;MISC.641: LET-conversion were not supposed to work in late compilation stages.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Win32/x86 port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;GET-INTERNAL-RUN-TIME implemented, thanks to Frank Buss.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improved SB-BSD-SOCKETS support, thanks to Timothy Ritchey.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: source path information is generated for macro-expansion errors for use in IDE's like Slime (thanks to Helmut Eller)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: calls to the compiler no longer modify *RANDOM-STATE*&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler does not loop forever on an invalid type in TYPEP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement: compilation of most CLOS applications is significantly faster&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: added a limited bytecode compiler for simple toplevel forms, speeding up compilation and FASL loading&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the statistical profiler now properly distinguishes anonymous functions&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: in sbcl-0.9.11 (but not earlier versions) SB-MOP:FINALIZE-INHERITANCE would recursively descend into subclasses of the finalized class. Now user calls to FINALIZE-INHERITANCE finalize just the one class, and calls by the system return before any subclasses are finalized.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The reader no longer ignores errors regarding non-existent packages in #+ and #- feature tests.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: command line options --no-sysinit, --no-userinit to inhibit loading the corresponding init files&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: add a generic function SOCKET-SEND to SB-BSD-SOCKETS, for sending data through UDP sockets (thanks to François-René Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SIGPIPE is ignored and &quot;Broken pipe&quot; error is signalled instead (thanks to François-René Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: Error signalling behaviour of lexical operations violating package locks has changed slightly. Refer to documentation on package locks for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: EVAL can process IF-expressions without resorting to the compiler.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Some operations involving SIN, COS, or TAN weren't being constant-folded properly due to missing out-of-line functions. (reported by Mika Pihlajamäki)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LISTEN sometimes returned T even in cases where no data was immediately available from the stream&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: types of the last two arguments to SET-SYNTAX-FROM-CHAR were reversed. (reported by Levente Mészáros)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: Tests for the (VECTOR T) type gave the wrong answer when given a vector displaced to an adjustable array. (reported by Utz-Uwe Haus)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: derivation of float boundaries from numbers outside the appropriate float range (reported by John Wiseman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-LOAD-FORM-SAVING-SLOTS accepts en empty slot name list.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: precomputing cache entries for generic functions with some subclasses of specializers as yet invalid does not attempt to fill a cache line with a negative offset. (reported by Levente Mészároz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to DOCUMENTATION for TYPE and STRUCTURE doc-types: allow condition class objects as arguments to DOCUMENTATION and (SETF DOCUMENTATION); only find and set documentation for structure names for the STRUCTURE doc-type. (suggested by Gary King)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Win32/x86 port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;(user-homedir-pathname) and default initialization file locations now know about the user's &quot;Documents and Settings&quot; directory (thanks to Yaroslav Kavenchuk)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;run-program is implemented (thanks to Mike Thomas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;sockets support (thanks to Timothy Ritchey)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;better backtrace support (thanks to Alastair Bridgewater)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;sb-grovel supported&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;asdf-install and sb-posix work somewhat&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;capable of running Slime using SWANK:*COMMUNICATION-STYLE* NIL&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the Solaris/x86 port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;works on Solaris 11/Solaris Express&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;floating-point exception handling support&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;support for the breakpoint-based TRACE :ENCAPSULATE NIL facility&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;REMOVE-METHOD returns its generic function argument even when the method is not one of the generic functions' methods.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;objects declared as MEMBER types can be admissible arguments to structure accessors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;printing characters should simply be printed by the FORMAT ~:C directive.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler failure when compiling functions with hairy constant defaults for optional parameters.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler produces wrong code when MAYBE-INLINE-expanding a function, which is already optimized.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new platform: experimental support for SBCL x86/Darwin, including MacOS X 10.4.5 on Intel.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: Unicode character names are now known to the system (through CHAR-NAME and NAME-CHAR).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: the filesystem location of SBCL's core file is exposed to lisp through the variable SB-EXT:*CORE-PATHNAME*.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the contrib modules SB-POSIX and SB-BSD-SOCKETS no longer depend on stub C libraries; the intent of this change is to make it easier to distribute location-independent binaries.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: as implied by AMOP, standardized classes no longer have slots named by external symbols of public packages. (reported by Pascal Costanza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: calling functions via constant symbols -- as in (FUNCALL 'FOO) -- is now roughly as efficient as calling them via the function object as in (FUNCALL #'FOO).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: on x86 and x86-64, the calling convention for the case of dealing with an unknown number of values has been altered to be friendlier to the prediction heuristics implemented, particularly with reference to CALL and RET pairing. (thanks to Alastair Bridgewater)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: on x86, the code for access to thread-local symbol values and binding/unbinding of thread-local symbols is smaller. (thanks to Alastair Bridgewater)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: CONSTANTP is now able to determine constantness of more complex forms, including calls to constant-foldable standardized functions and some special forms beyond QUOTE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: occasional GC crashes on Solaris/x86&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: x86-64 supports stack allocation of results of simple calls of MAKE-ARRAY, bound to variables, declared DYNAMIC-EXTENT&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enchancement: the PROCESS-INPUT and -OUTPUT streams created by SB-EXT:RUN-PROGRAM can be used for both character and byte IO (thanks to James Knight)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: CL:LISTEN always returns NIL at end of file, as required by the standard (thanks to Stephen Compall)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: new SAVE-LISP-AND-DIE keyword argument :EXECUTABLE can be used for bundling the runtime and the core file into one executable binary. This feature is not currently supported on all SBCL platforms. (thanks to James Bielman and NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: a generational or ephemeral garbage collector is now the default on the PowerPC platform (both Linux and Darwin). The old Cheney (stop and copy) collector is a build-time option. (thanks to Cyrus Harmon, after Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the method by which SBCL finds its contributed modules has changed; it no longer relies on symbolic links from an $SBCL_HOME/systems directory, but searches directly in the subdirectories of $SBCL_HOME.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the dynamic heap size on the Linux/PPC platform is markedly larger, even using the older Cheney garbage collector.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #399: full call to DATA-VECTOR-REF in accesses to certain complicated string types. (reported by Gary King)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: STRING-TO-OCTETS and OCTETS-TO-STRING did not convert character codes. (thanks to Yaroslav Kavenchuk and Ivan Boldyrev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: DOCUMENTATION on structures no longer signals an error if no structure type of the right name exists. (reported by Glenn Ehrlich)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: compiled calls to MAKE-INSTANCE where there is an applicable non-standard primary or :AROUND method on INITIALIZE-INSTANCE or SHARED-INITIALIZE and a non-keyword initarg no longer cause unbound variable errors. (reported by Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: metacircle resolution in cases where methods have slots added before the slots from STANDARD-METHOD. (reported by Jean Bresson)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: the Power PC assembly code for calling into lisp sometimes computed its return address wrongly (depending on the 15th bit of the address, fixed at link time). This used to manifest itself in a segmentation violation while building PCL. (reported by Kevin Rosenberg, Eric Marsden, Lars Brinkhoff and many others over the years)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: ROOM no longer reports silly numbers for stack usage if the stack pointer (treated as a signed integer) is negative. (thanks to Peter van Eynde)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new platform: experimental support for the Windows operating system has been added. (thanks to Alastair Bridgewater)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed several bugs in and robustified the PPC FFI (including callbacks). (thanks to Cyrus Harmon and Heiner Schwarte)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: allow non-simple string symbol names (reported by Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interrupt handling on NetBSD (thanks to Richard M Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: saving a core corrupted callbacks on x86/x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: closed a loophole in metacircularity detection and grounding in the PCL implementation of CLOS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TRUENAME on &quot;/&quot; no longer returns a relative pathname. (reported by tomppa on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: clear the direction flag on Lisp -&amp;gt; C transitions, as required by the x86-64 ABI. Fixes mysterious GC crashes on SuSE. (reported by Andrej Grozin and Hendrik Maryns)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: major improvements to GC efficiency on GENCGC platforms&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster implementation of EQUAL&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: emit more efficient opcodes for some common immediate-&amp;gt;register MOV instructions on x86-64. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: several other minor code-generation improvements on x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed segfaults on x86 FreeBSD 7-current. (thanks to NIIMI Satoshi)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: (SETF CLASS-NAME) and (SETF GENERIC-FUNCTION-NAME) are generic functions once more (reverting the change in the 0.9.7 release). (SETF CLASS-NAME) is specified by ANSI as a generic function, and for consistency (SETF GENERIC-FUNCTION-NAME) is treated likewise.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #233.b: make constraint propagation notice when a variable value is changed after it is referenced but before it is used&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #296: no more arbitrary behaviour from filenames with odd characters as --load arguments. (reported by Adam Warner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #390: :CHARACTER-SET pathname components now work as expected. (reported by Tim Daly Jr)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #391: complicated :TYPE intersections in slot definitions no longer cause an error in PCL internals.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #392: plugged a hole in the obsolete-instance protocol.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FILE-STRING-LENGTH is now external-format sensitive, returning the number of octets which would be written to the file-stream. (thanks to Robert J. Macomber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the SB-SIMPLE-STREAMS contrib passes external-format arguments to the internal stream functions. (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stack exhaustion is now handled on the x86/SunOS platform. (thanks to Daisuke Homma)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more accurate ROOM results on GENCGC platforms&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved type inference for arithmetic-for index variables in LOOP&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster floating-point SQRT on x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;DOCUMENTATION returns NIL instead of &quot;&quot; for method combinations that don't have a docstring&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: (SETF CLASS-NAME) and (SETF GENERIC-FUNCTION-NAME) are no longer generic functions, and therefore are not customizeable by user code (as seems to be at least permitted and maybe required by AMOP). As a consolation, however, the SBCL implementation of these functions now calls REINITIALIZE-INSTANCE as specified by AMOP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: slot-definition documentation is propagated as per ANSI 7.6.2 to EFFECTIVE-SLOT-DEFINITIONS. COMPUTE-EFFECTIVE-SLOT-DEFINITION now receives a :DOCUMENTATION argument, as do eslotd initialization methods. (from Pascal Costanza's &quot;Closer&quot; project)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: REINITIALIZE-INSTANCE on generic functions calls COMPUTE-DISCRIMINATING-FUNCTION (almost) unconditionally, as specified by AMOP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: it is now possible to have more than one subclass of STANDARD-GENERIC-FUNCTION without causing stack overflow. (reported by Bruno Haible, Pascal Costanza and others)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the dependent update protocol now works for generic functions. (thanks to Gerd Moellmann; reported by Bruno Haible and Pascal Costanza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: condition-class instances corresponding to DEFINE-CONDITION forms are now created eagerly. (reported by Kalle Olavi Niemitalo on comp.lang.lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: floating point printing is more accurate in some circumstances. (thanks to Simon Alexander)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: *COMPILE-FILE-PATHNAME* now contains the user's pathname merged with *DEFAULT-PATHNAME-DEFAULTS*.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: callbacks on OS X now preserve stack-alignment. (thanks to Cyrus Harmon)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the x86-64 disassembler is much better at disassembling SSE instructions. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: CHECK-TYPE on a variable now allows type-inference (thanks to Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved performance of EUC-JP external format. (thanks to NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: performance improvements to IO on file streams of :ELEMENT-TYPE CHARACTER&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: much faster memory allocation on x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster garbage collections (latency and throughput) on gencgc&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster bignum subtraction and division on x86 and x86-64 (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: more accurate type-inference for loops that use a floating point index variable or a negative step.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: add a workaround to SBCL looping infinitely at startup on Linux kernels with apparently buggy implementations of personality(). (thanks to Svein Ove Aas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Unicode symbols are correctly printed in LDB backtraces (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: local bindings shadow global symbol macros for macroexpansion. (reported by Matthew D Swank on comp.lang.lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: non-open coded uses of numeric comparison operators (e.g. &amp;gt;) no longer cons when called with more than one parameter on platforms supporting dynamic-extent allocation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: saving cores with foreign code loaded is now supported on MIPS/Linux in addition to the previously supported platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FIND-RESTART now tests for activity, not applicability when given a restart object as identifier. (reported by Helmut Eller for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: division by zero in sb-sprof when no samples were collected&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a race when a slow to arrive sigprof signal killed sbcl&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: asdf-install uses CRLF as required by the HTTP spec. (thanks to Alexander Kjeldaas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: ignoring the return values of destructive functions like NREVERSE signals a compile-time style-warning. (thanks to Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: the alignment of alien structure fields can be explicitly specified. (thanks to Cyrus Harmon)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run cleanup forms (in all threads) when receiving a SIGTERM and dump core on SIGQUIT&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;threads
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: threads do not inherit values of specials from their parents (see manual)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: threads stacks belonging to dead threads are freed by the next exiting thread, no need to gc to collect thread stacks anymore&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: INTERRUPT-THREAD-ERROR-ERRNO removed&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;WITH-RECURSIVE-LOCK can be nested in a WITH-MUTEX for the same lock&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: dynamic variable and thread start related gc lossage&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: job control (SIGSTOP/SIGCONT) no longer confuses threads suspended for gc&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SUBTYPEP is slightly more accurate on heinously complicated CONS types where some of the members have uncertain (in the NIL, NIL sense) type relationships to each other.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GENCGC
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Cores produced by SAVE-LISP-AND-DIE on GENCGC platforms are no longer purified unless :PURIFY T is explicitly specified.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Non-purified cores are significantly smaller than before&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: timers based on Zach Beane's excellent timer package&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added support for the following external formats: koi8-u, x-mac-cyrillic, cp437, cp850, cp852, cp855, cp857, cp860, cp861, cp862, cp863, cp864, cp865, cp866, cp869, cp874, iso-8859-2, iso-8859-3, iso-8859-4, iso-8859-5, iso-8859-6, iso-8859-7, iso-8859-8, iso-8859-9, iso-8859-10, iso-8859-11, iso-8859-13, iso-8859-14, cp1250, cp1251, cp1252, cp1253, cp1254, cp1255,cp1256, cp1257, cp1258 (contributed by Ivan Boldyrev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: a threaded SBCL will no longer revert to non-threaded mode on non-NPTL systems, but refuse to start entirely.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interrupts are disabled until startup is complete; no more sigsegvs when receiving a signal to soon&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: faster 32-bit SB-ROTATE-BYTE:ROTATE-BYTE on non-x86/ppc platforms&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: add a workaround for the memory randomization features in Linux kernels &amp;gt;= 2.6.12 that interfere with SBCL's memory maps. This workaround will only be in effect on systems with the proc filesystem mounted.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: printing objects of type HASH-TABLE signals a PRINT-NOT-READABLE error when *READ-EVAL* is NIL. (reported by Faré Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GET-INTERNAL-REAL-TIME now works even for processes that have been running for over 50 days. (reported by Gilbert Baumann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the logic for getting names of functions gets less confused when confronded with alternate-metaclass funcallable-instances. (reported by Cyrus Harmon)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FUNCTIONP and (LAMBDA (X) (TYPEP X 'FUNCTION)) are now consistent, even on internal alternate-metaclass objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: flush closure information collected by physical environment analysis prepass before the main pass. (bug reported by Vasile Rotaru)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler pack phase does not modify a hashtable, which is iterated. (reported by Bryan O'Connor, fixed by Rob MacLachlan)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backquote does not optimize (LIST* x y) to CONS when x may be expanded. (reported by Alexander &amp;lt;malishev&amp;gt; on c.l.l)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: no more style-warnings when compiling code using LAST under high-SPEED low-SPACE settings. (reported by David Wallin aka froog on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some incompatibilities between SBCL's MOP and the MOP specified by AMOP:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the METAOBJECT class is now implemented;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FUNCALLABLE-STANDARD-OBJECT is now a subclass of STANDARD-OBJECT, as required;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the classes STANDARD-CLASS and FUNCALLABLE-STANDARD-CLASS are now compatible (as required by VALIDATE-SUPERCLASS); there remains a consistency requirement over the presence or absence of the FUNCTION class in the superclass list of finalized classes; see the manual for more details;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the :AROUND method for COMPUTE-SLOTS on FUNCALLABLE-STANDARD-CLASS now honours the primary method's requested slot ordering.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;threads
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: parent thread now can be gc'ed even with a live child thread&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: binding a special with PROGV to no value is not the same as that symbol not having been bound (thanks to Hannu Koivisto)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: binding specials is thread safe (thanks to Hannu Koivisto)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: interrupt handlers are now per-process, RUN-PROGRAM and SB-SPROF do not die with 'no handler for signal XX in interrupt_handle_now(..)' anymore&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: WITH-TIMEOUT works with multiple running threads&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;ENSURE-GENERIC-FUNCTION should take a method class object for the :method-class keyword argument.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new port: the Solaris operating system on x86 processors is now mostly supported, though some rough edges in the environment remain. (thanks to Daisuke Homma)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: SBCL on MIPS platforms now has a much larger dynamic space for its heap. (thanks to Thiemo Seufer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SBCL on MIPS platforms now supports dynamic-extent closures. (thanks to Thiemo Seufer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: eof selects abort in the debugger.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: *INVOKE-DEBUGGER-HOOK* is run before *DEBUGGER-HOOK* =&amp;gt; *DEBUGGER-HOOK* is not run when the debugger is disabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-KERNEL:INSTANCE-LAMBDA is deprecated, and will go away in a future revision of SBCL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: GC-ON and GC-OFF are no longer implemented with a counter, it does not matter how many times gc is switched on or off&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: discriminating functions for generic function classes with non-standard methods for COMPUTE-APPLICABLE-METHODS no longer make invalid assumptions about method precedence order. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: TRUNCATE now correctly signals division by zero on MIPS platforms. (thanks to Thiemo Seufer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: degree sign (&amp;lt;U00B0&amp;gt;) could not be encoded in KOI8-R.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correct pathname printing with printer escaping is on. (thanks to Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: complex VOP definitions in &quot;user-space&quot; no longer trigger package locks. (reported by Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 343: SB-KERNEL:INSTANCE-LAMBDA is no longer necessary for funcallable-instance functions, and is no different from regular LAMBDA.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PARSE-INTEGER no longer depends on the whitespaceness of characters in the current readtable. (reported by Nicholas Neuss)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SUBTYPEP on various CONS types returns more a more accurate acknowledgment of its certainty.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimizations: REMOVE-DUPLICATES now runs in linear time on lists in some cases. This partially fixes bug 384.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;flush all standard streams before prompting in the REPL and the debugger.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: signal handling and triggering gc do not conflict directly anymore, in particular a high frequency sb-sprof does not prevent gc from running&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DECODE-UNIVERSAL-TIME now uses a more reasonable approximation for timezone and DST information between the universal time epoch and the smallest negative 32-bit time_t.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ENCODE-UNIVERSAL-TIME no longer errors when passed the year 1899 so long as the encoded time is non-negative.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on the x86 platform, SB-ROTATE-BYTE:ROTATE-BYTE returns the correct answer for non-constant rotate amounts when performing an inline 32-bit rotation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;threads
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: RELEASE-FOREGROUND doesn't choke on session lock if there is only one thread in the session&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: memory leak for streams created in one thread and written to in another&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: lockup when compiled with gcc4&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: race that allows the gc to be triggered when gc is inhibited&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: one less memory fault in INTERRUPT-THREAD, again&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: gc and INTERRUPT-THREAD don't hang when the RT signal queue is full&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: finished threads are gc'ed properly&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;CALL-NEXT-METHOD signals an error (in safe code) when the call has arguments with a different set of applicable methods from the orignal arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The type error thrown by MAP now has a correct expected-type cell.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DISASSEMBLE now throws a TYPE-ERROR when its argument does not name a compiled function.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Three MISC tests where a large bignum was improperly coerced to a float that couldn't represent that bignum during type derivation were fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SUBTYPEP can now handle types involving the negation of a list-form FUNCTION type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SUBTYPEP also now handles certain COMPLEX type specifiers such as (COMPLEX (AND RATIO (NOT FIXNUM))).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;READ-BYTE and WRITE-BYTE no longer take stream designators.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;New feature: Experimental support for bivalent streams: streams opened with :element-type :default now allow character and binary (unsigned-byte 8) I/O&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Support for the koi8-r external format. (thanks to Ivan Boldyrev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: OPEN no longer fails when *PRINT-READABLY* is T. (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: no more highly sporadic &quot;couldn't check whether ~S is readable&quot; when reading a stream and an interrupt hits in the middle of a select system call&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler better recognizes complex arrays (reported by Eduardo Muñoz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: out-of-line SB-SYS:FOREIGN-SYMBOL-ADDRESS did not work for variables on SBCL built with linkage-tables. (reported by Luis Oliveira)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;various error reporting improvements.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimizations: LOGNOR on fixnums is improved in the MIPS backend. (Thanks to Thiemo Seufer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: nested reader invokations work correctly&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: it is possible to have simultaneous references to foreign code and foreign data with the same name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;threads
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;added x86-64 support&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: the threading api now works with thread objects instead of thread ids&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: threads are protected from signals and interruption when starting up or going down&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: a race where an exiting thread could lose its stack to gc&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: don't halt on infinite error in threads if possible&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed numerous gc deadlocks introduced in the pthread merge&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: fixed thread safety issues in read and print&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: debugger doesn't hang on session lock if interrupted at an inappropriate moment&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: run-program is now thread safe(r)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: inner with-recursive-lock no longer releases the mutex&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in (DECODE-UNIVERSAL-TIME 0) (reported by Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;TYPE-ERRORs from signalled by COERCE now have DATUM and EXPECTED-TYPE slots filled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MULTIPLE-VALUE-SETQ always returns the primary value of the values form.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MAKE-CONDITION accepts classes as type-designators.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;COMPILE may never return NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ENCODE-UNIVERSAL-TIME now guards against times out of Unix's range before calling Unix time functions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;numerous signal handling fixes to increase stability&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Support for EUC-JP external format. (thanks to NIIMI Satoshi)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: we now correctly canonize default initargs, making them be a list of (INITARG INITFORM INITFUNCTION) as per the MOP, rather than the historical (INITARG INITFUNCTION INITFORM). (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: WITH-COMPILATION-UNIT now accepts a non-standard :SOURCE-PLIST option. See (DOCUMENTATION #'WITH-COMPILATION-UNIT T) for more information.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;TRUENAME and PROBE-FILE now correctly resolve symlinks even if the pathname is a directory pathname.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-SPROF now works (more) reliably on non-GENCGC platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;dynamic space size on PPC has been increased to 768Mb. (thanks to Cyrus Harmon)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-MOP:ENSURE-CLASS-USING-CLASS now accepts a class as the :METACLASS argument in addition to a class name. (reported by Bruno Haible for CMUCL, patch for CMUCL by Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;RESTART-CASE can now be wrapped around CALL-METHOD forms. (reported by Bruno Haible; patch from Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: sbcl runtime can now be compiled with gcc4 (thanks to Sascha Wilde)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: more cleanups to the floating point exception handling on x86-64 (thanks to James Knight)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler does not try to constant fold calls of COERCE and BIT-* functions when they return freshly constructed objects. (reported by Nikodemus Siivola and Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved the MIPS versions of generic (in the generic sense) arithmetic routines. (thanks to Thiemo Seufer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: direct conversion of (unsigned-byte 32) to floats on the PowerPC platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: structure instances with raw slots now use less memory, and probably show better memory locality. (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: DYNAMIC-EXTENT declarations for lists and closures are treated as requests for stack allocation on the x86-64, Alpha-32, PPC and SPARC platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;contrib improvement: it's harder to cause SOCKET-CLOSE to close() the wrong file descriptor; implementation of SOCKET-OPEN-P. (thanks to Tony Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;threads
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;gcing a dead thread can no longer lead to lockups&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;threads block signals until they are set up properly&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;errno is no longer shared by threads&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;interrupt-thread restores the eflags register on x86&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some lockups due to gc/thread interaction&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;invalid dotted lists no longer raise a read error when *READ-SUPPRESS* is T&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;signal an error if a symbol that names a declaration is used as the name of a type, or vice versa&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;allow using the (declare (typespec var*)) abbreviation for (declare (type typespec var*)) with all type specifiers&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;circularity detection works properly with PPRINT-LOGICAL-BLOCK&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;always return NIL from PPRINT-POP when OBJECT is NIL&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;don't signal errors when pretty-printing malformed LABELS, FLET or MACROLET forms&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;declarations in a DOLIST body are also in scope for the DOLIST return-form&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;COMPILE-FILE accepts all pathname designators as INPUT-FILE and OUTPUT-FILE&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the ELEMENT-TYPE keyword argument to WITH-OUTPUT-STREAM is always evaluated&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;fixed cross-compiler leakages that prevented building a 32-bit target with a 64-bit host compiler.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in CLOSE :ABORT T: no longer attempts to remove files opened with :IF-EXISTS :OVERWRITE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 281: error for an invalid qualifier in a short-form method combination method is not signalled until the faulty method is called.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: iteration variable type inferrer failed to deal with open intervals. (reported by Alan Shields)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: dynamically loading (via LOAD-SHARED-OBJECT or similar) &quot;frameworks&quot; on Mac OS X no longer causes an EXC_BAD_ACCESS if two or more runtime options were provided to the sbcl binary.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiled code is not steppable if COMPILATION-SPEED &amp;gt;= DEBUG.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;contrib improvement: implement SB-POSIX:MKSTEMP (Yannick Gingras)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: there's now a fast-path for fixnum arguments in the generic subtraction routines on x86/x86-64. (Thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the code generated on x86-64 is more compact thanks to not outputting unnecessary prefix bytes. (Thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: floating-point exception handling now partly works on x86-64. (Thanks to James Knight)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvement to the MIPS backend from Thiemo Seufer: C-style 64-bit long long arguments and return values to alien functions are now supported.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the type-error signalled from WARN has a filled-in DATUM slot.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the type-error required when a stream is not associated with a file has the stream as its datum.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;type-errors on single-floats on x86-64 no longer have :INVALID-OBJECT as the datum&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the type-errors signalled for invalid function names now have a correct expected type&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(SETF (DOCUMENTATION ... 'STRUCTURE)) no longer signals an error for structures defined with a :TYPE. Documentation strings for typed structures are no longer immediately discarded&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FILE-STRING-LENGTH and STREAM-EXTERNAL-FORMAT now work on broadcast streams and synonym streams. FILE-LENGTH now also works on broadcast streams.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.9.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: the --noprogrammer option, deprecated since version 0.7.5, has been removed. Please use the equivalent --disable-debugger option instead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: finalizers and *AFTER-GC-HOOKS* are now run with interrupts enabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: support for *BEFORE-GC-HOOKS* (that have been inoperational for a while now) has been completely removed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;null lexical environments are now printed as #&amp;lt;NULL-LEXENV&amp;gt;, significantly reducing the amount of clutter in typical backtraces.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation on weak pointers, finalization, and after GC hooks has been added to the manual.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: REPLACE on declared (UNSIGNED-BYTE 8) vectors, as well as other specialized array types, is much faster. SUBSEQ and COPY-SEQ on such arrays have also been sped up.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: EQL is now more efficient when at least other argument is known to be of type (OR FIXNUM (NOT NUMBER)).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: the runtime is now less vulnerable to changes in the size of the SBCL object on OS X, and virtual memory is reserved for all spaces that need to be at a fixed address.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: finalizers are now thread-safe. (thanks to Gabor Mellis)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: finalizers and after GC hooks that cause consing are now safe.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: compiler error messages and summaries are now printed to *ERROR-OUTPUT*, not *STANDARD-OUTPUT*.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed inference of the upper bound of an iteration variable. (reported by Rajat Datta).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 211e: calling local functions with duplicated constant keyword argument no longer causes a bogus style warning about an unused variable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 305: INLINE/NOTINLINE declaration no longer causes local ftype declaration to be disregarded. (reported by Dave Roberts)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 373: caused by erronous compilation of references to alien variables in the runtime on ppc/darwin.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 376: CONJUGATE type deriver.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed infinite looping of ALIEN-FUNCALL, compiled with high DEBUG. (reported by Baughn on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a cross-compiler bug on non-x86 platforms has been identified and fixed. (thanks to Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the MIPS runtime code for increased stability. (thanks to Thiemo Seufer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;increased the maximimum compact environment size to allow purify on images with large amounts of functions. (thanks to Cyrus Harmon)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;partial workaround for bug 135: don't name the function we're calling for hairy cases of EVAL, so as not to accumulate one environment entry per call to EVAL. (reported by Kevin Reid)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improvements to the x86-64 disassembler. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: type testing for non-vector arrays should be faster.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed TRACE :ENCAPSULATE NIL, added support for :ENCAPSULATE NIL on x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: setting 31st element of a bit vector to zero did not work on Alpha-32.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefining a class definition which failed due to a previous accessor / function clash now works (but see BUGS entry #380 for more problems in this area). (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the long form of DEFINE-METHOD-COMBINATION disables method group checking when given a single method group with pattern *. (thanks to Wendall Marvel)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on x86 compiler supports stack allocation of results of simple calls of MAKE-ARRAY, bound to variables, declared DYNAMIC-EXTENT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;support for building and running on Mac OS X 10.4 &quot;Tiger&quot; has been added
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Binaries built on Tiger will not run on 10.2 &quot;Jaguar&quot; currently&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs related to Unicode integration:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the restarts for recovering from input and output encoding errors only appear when there is in fact such an error to handle.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;MISC.549 and similar: late transformation of unsafe type assertions into derived types caused unexpected code transformations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SCALE-FLOAT type deriver is less wrong.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;type derivers for EXP, LOG and similar functions compute result types for complex arguments better.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(MISC.563) CONJUGATE type deriver works for very restricted complex types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;out-of-line type testers for character strings are available.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;EQUAL compiler transform understands specialness of objects of type BIT-VECTOR.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;accessing double-floats stored on the stack now works on x86-64.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;debugger internals could sometimes create invalid lispobjs, resulting in GC crashes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MISC.548: type check weakening can convert required type into optional.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;initialization forms for bindings are not in scope of free special declarations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.21&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: thread support for non-NPTL systems has been removed - locking is buggy and unreliable. A threaded SBCL build will now warn at startup and refuse to create new threads, unless futex support is detected in the kernel&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: the top level REPL now has only an ABORT restart associated with it, not TOPLEVEL and ABORT as it used to. TOP and TOPLEVEL are now available as debugger commands for returning to the top level.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: forms evaluated in the REPL now use the global optimization policy.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: user- and system-initialization files are no longer processed with LOAD, but by READ and EVAL; hence the global optimization policy, startup package, readtable, etc, can be set by them.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The .fasl file format number has been incremented because of various incompatible changes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;internal entry point details and argument counts no longer appear in backtraces unless explicitly requested by setting SB-DEBUG:*SHOW-ENTRY-POINT-DETAILS*.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;built-in and standard functions no longer have names like &quot;top level local call to FOO&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 32: functions defined in non-null lexical environments now have more legible printed representation&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 33: functions defined in non-null lexical environemnts are now more amenable to inspection by INSPECT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;workaround for bug 354: XEPs no longer appear in backtraces unless explicitly requested.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: receiving the signal which results from attempting to write to mprotect()ed memory (SIGSEGV on Linux and some *BSDs, SIGBUS on other *BSDs) on architectures where the C stack is also the Lisp stack (x86 and x86-64) from foreign code no longer leads to debugger confusion or wild instability. (reported by Cheuksan Wang)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: COUNT and EQUAL no longer issue compiler efficiency notes when operating on objects known to be SIMPLE-BIT-VECTORs. (reported by Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: (TYPEP X '(MEMBER ...)) no longer returns a list in compiled code. (reported by Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 276b: mutating with MULTIPLE-VALUE-SETQ a binding of a specialized parameter to a method to something that is not TYPEP the specializer is now possible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: the MAKE-INSTANCE optimization is now correct in the face of package deletion.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: LOAD should bind *LOAD-PATHNAME* to the merged pathname. (reported by David Tolpin on c.l.l)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;contrib improvement: the SB-SIMPLE-STREAMS contrib now defines STRING-SIMPLE-STREAM and FILE-SIMPLE-STREAM as subclasses of STRING-STREAM and FILE-STREAM, respectively.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;contrib improvement: SB-INTROSPECT handles more of SLIME's needs than previously; in addition, its test suite is now run on build. (thanks to Luke Gorrie)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a more robust x86-64 disassembler. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: added a immediate representation for single-floats on x86-64&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;MISC.564: defined out-of-line version of %ATAN2 on x86.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;attempting to create a package with a colliding nickname causes correctable errors to be signalled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MISC.572-574: :START1 and :START2 broken for simple-base-strings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;several x86-64 backend bugs related to sign-extension of immediate operands.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.20&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;fixed inspection of specialized arrays. (thanks to Simon Alexander)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed disassembly of SHLD and SHRD on x86. (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed loading of multiply forward-referenced layouts. (thanks to Cheuksan Wang)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 7: less verbose COMPILE-FILE output. Additionally, the output is now directed to *STANDARD-OUTPUT* as specified by ANSI. (see COMPILE-FILE documentation for details of :PRINT option)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs 19 and 317: fixed-format floating point printing is more accurate. This also fixes a bug reported by Adam Warner related to the ~@F format directive.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 371: bignum print/read inconsistency. (thanks to Harald Hanche-Olsen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: SET-SYNTAX-FROM-CHAR correctly shallow-copies a dispatch table if the from-char is a dispatch macro character.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: COUNT and EQUAL on bit vectors with lengths divisible by the wordsize no longer ignore the last word. (reported by Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in type checking of dynamic-extent variables. (reported by Svein Ove Aas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: sequence traversal functions use their freedom to coerce function designators to functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: code with many calls to CLOS methods specialized on CLOS classes has had redundant type checks removed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: added declarations to speed up operations that access the internal character database (for example STRING-UPCASE)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: comparison operations between floats and sufficiently small fixnums no longer create extra rationals&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs related to Unicode integration:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;portions of multibyte characters at the end of buffers for character-based file input are correctly transferred to the start of the buffer at the next read.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;COMPILE-FILE now respects any EXTERNAL-FORMAT argument given, passing it through to OPEN.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOAD on source files likewise passes any EXTERNAL-FORMAT argument given to internal calls to OPEN.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the built-in comment readers (introduced by character sequences &quot;;&quot; and &quot;#|&quot;) are more forgiving to encoding errors; they will STYLE-WARN and then attempt to resync the stream at a character boundary. (thanks to Teemu Kalvas)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs in the x86-64 port:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Negative short int return values from c-calls are sign-extended correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The stack is aligned to 16-bytes for c-calls, as required by the ABI. (thanks to Cheuksan Wang)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The disassembler understands more x86-64. (thanks to Cheuksan Wang)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The regression tests use SB-ALIEN:INT instead of SB-ALIEN:INTEGER for enums. (thanks to Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Multiple small optimizations and bugfixes for floating point operations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Space, Tab, Linefeed, Return and Page have the invalid secondary constituent character trait.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SET-SYNTAX-FROM-CHAR correctly copies multiple-escape character syntax.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;WITH-INPUT-FROM-STRING should only update the index place on normal termination.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Pretty-printing backquoted forms when *PRINT-CIRCLE* is true works more reliably.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bit-array operations (BIT-AND and similar) worked incorrectly with one-dimensional arrays with fill pointers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;TYPE-OF failed on a complex with an integer realpart and a RATIO imagpart.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler failure during type inference for the code of form (IF (EQL X (THE ...)) ...) (MISC.535).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.19&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new port: SBCL now works in native 64-bit mode on x86-64/Linux platform. The port supports 61-bit fixnums, large memory spaces and reloading shared object files.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: saving cores with foreign code loaded is now supported on ppc/Darwin in addition to the previously supported platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: the statistical profiler now walks deeper into the call stack for more meaningful call-graphs and accrued time reports (x86/x86-64 only). It also now reports time spent in foreign functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;enhancement: it is now possible to trace most individual methods of a generic function in addition to tracing the generic function itself.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: invalid :DEFAULT-INITARGS are detected in compiled calls to MAKE-INSTANCE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: defaulted initargs are passed to INITIALIZE-INSTANCE and SHARED-INITIALIZE methods from compiled calls to MAKE-INSTANCE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COERCE to (COMPLEX FLOAT) of a complex number no longer produces an error. (thanks to Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: NAMESTRING on pathnames with :WILD components in their directories works correctly. (thanks to Artem V. Andreev)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 125: compiler preserves identity of closures. (reported by Gabe Garza)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixed: functions with &amp;amp;REST arguments sometimes failed with &quot;Undefined function&quot; when compiled with (DEBUG 3). (reported by Robert J. Macomber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: overflow during compiling of setting element of a bit vector with constant index and value. (reported by Timmy Douglas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;build fix: fixed the dependence on *LOAD-PATHNAME* and *COMPILE-FILE-PATHNAME* being absolute pathnames.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on x86 compiler partially supports stack allocation of dynamic-extent closures.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GO and RETURN-FROM do not check the extent of their exit points when compiled with SAFETY 0.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs related to Unicode integration:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;encoding and decoding errors are now much more robustly handled; it should now be possible to recover even from invalid input or output to the terminal. (thanks to Teemu Kalvas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;provided a first cut at implementing STRING-TO-OCTETS and OCTETS-TO-STRING. (thanks to Robert J. Macomber)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;altered the SB-MD5 contributed module slightly, changing the interface just enough for it to be supportable for builds where lisp characters are not eight bits.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the FORMATTER-generated functions for ~V[ conditionals require the correct number of arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;READ-FROM-STRING returns the mandated second value when applied to displaced strings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the #\Rubout and #\Backspace characters are treated as invalid constituent characters by the tokenizer.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.18&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: reloading changed shared object files with LOAD-SHARED-OBJECT now causes the new definitions to take effect.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: references to foreign variables and functions can now be compiled and loaded before the corresponding shared object file is loaded, as long as the foreign definitions are available at runtime.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Solaris 10 (aka SunOS 5.10) on the SPARC platform is now supported. (thanks to Dan Debertin)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-ALIEN enums can now be represented in Lisp by any symbols, not just keywords. (thanks to Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #331: structure-class instances corresponding to DEFSTRUCT forms are now created eagerly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #345: backtraces from calls to undefined functions work on x86 as well. Related bug #61 is now also partially fixed on x86 (backtraces from throws to unknown catch tags.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: lambda-list parsing is now stricter vrt. order and number of lambda-list keywords.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: as specified by AMOP, an error is signalled if a class-option appears multiple times in a DEFCLASS form. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RANDOM can be compiled when the compiler derives the type of its numeric argument as a disjoint set of small integers. (reported by Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: starting a core saved with shared objects loaded when those objects are not available no longer causes threaded SBCL to hang. (reported by Sean Ross)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: evaluated FUNCTION no longer bypasses encapsulation (eg. TRACE).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF MACRO-FUNCTION) now accepts an optional environment argument, which must always be NIL. (reported by Kalle Niemitalo)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: printing 1.0d+23 no longer results in an error. (reported by Rolf Wester for CMUCL; bug fix from Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: structure slot setters preserve evaluation order. (thanks to Gabor Melis)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs related to Unicode integration:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;RUN-PROGRAM can allow its child to take input from a Lisp stream. (reported by Stefan Scholl)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ASDF-INSTALL successfully downloads .tar.gz files in all locales. (reported by Ken Causey)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;INCF, DECF and REMF evaluate their place form as specified in CLtS 5.1.3.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FORMATTER expands ~{ ~} iteration directives with V or # parameters correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FORMATTER deals with the ~@[ ~] conditional directive where the consequent uses no arguments correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the system has a partial understanding of the (COMPLEX RATIO) type specifier.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;UPGRADED-COMPLEX-PART-TYPE obeys the lattice upgrading rules required.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.17&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: a build-time option (controlled by the :SB-UNICODE keyword feature, enabled by default) for building the system with support for the entire 21-bit character space defined by the Unicode consortium.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: the system now has rudimentary external-format support; the primary user-visible change at this time is that characters with the high bit set (such as lower-case-e-acute) will print correctly to a terminal in a UTF-8 environment.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: BASE-CHAR no longer names a class; however, CHARACTER continues to do so, as required by ANSI.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-DEBUG:*DEBUG-PRINT-FOO* variables are no longer supported, and SB-DEBUG:*DEBUG-PRINT-VARIABLE-ALIST* has been moved to the SB-EXT package (temporarily re-exported from SB-DEBUG).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-C::*COMPILER-ERROR-PRINT-FOO* variables are no longer supported: use SB-EXT:*COMPILER-PRINT-VARIABLE-ALIST* instead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #351: better error-handlind and reporting for malformed LET and LET* forms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #350: bignum-printing is now more memory-efficient, allowing printing of very large bignums, eg. (expt 2 10000000). (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #302: better primitive-type selection for intersection types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #308: non-graphic characters now all have names, as required. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefining a class with different superclasses now correctly removes it from the direct-subclasses of its previous superclasses. (reported by David Morse)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF FIND-CLASS) using a FORWARD-REFERENCED-CLASS as the new value now works. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: correct canonicalization of multiple non-standard slot options in DEFCLASS as per AMOP 5.4.2. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-MOP:CLASS-PROTOTYPE now signals an error if the class is not yet finalized, as required by AMOP. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-MOP:ALLOCATE-INSTANCE method for instances of BUILT-IN-CLASS now exists, an signals an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: duplicate LOOP variable bindings now signal PROGRAM-ERROR during macroexpansion for non-iteration variables as well. (reported by Bruno Haible for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Cyclic structures and unprintable objects in compiler messages no longer cause errors. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: READ, READ-PRESERVING-WHITESPACE, READ-DELIMITED-LIST, and READ-FROM-STRING all now return a primary value of NIL if *READ-SUPPRESS* is true. (reported by Bruno Haible for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Default value of EOF-ERROR-P in READ-FROM-STRING is true. (reported by Bruno Haible for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ERROR now signals a TYPE-ERROR if the arguments to ERROR do not designate a condition. (reported by Bruno Haible for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: UNINTERN, USE-PACKAGE, IMPORT and EXPORT all signal an SB-EXT:NAME-CONFLICT condition (subtype of PACKAGE-ERROR) in the name conflict situations in CLHS 11.1.1.2.5, and provide a restart permitting resolution in favour of any of the conflicting symbols. (reported by Bruno Haible for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: EQUAL compiler optimizations is less aggressive on strings which can potentially compare true despite having distinct specialized array element types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: unit enumerations can be defined without dividing by zero. (thanks to Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FORMAT compile-time argument count checking has been enhanced. (report from Bruno Haible for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a partial workaround for the bug 262: the compiler does not try to inline-expand a local function doing RETURN-FROM from a deleted BLOCK. (thanks to Peter Denno for the bug report and to David Wragg for the simple test case)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;RENAME-PACKAGE allows all package designators as new package names.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;constraint propagation and lambda variable substitution are more cautious in dealing with partially deleted code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler sometimes lost reoptimization passes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CERROR, given a condition as condition designator, passes its remaining arguments to the continue format control without complaint.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Case-altering FORMAT directives work correctly on non-ASCII characters.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The REAL type specifier handles bounds outside the floating point ranges without signalling FLOATING-POINT-OVERFLOW.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Functions with IR1-transformations can create intercomponent references to global functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;NIL parameter to the FORMAT directive ~^ means `unsupplied parameter'.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FORMAT ~R treats a nil value for its first parameter correctly.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.16&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;enhancement: saving cores with foreign code loaded is now supported on x86/NetBSD and sparc/Linux in addition to the previously supported platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on some platforms repeated installations caused multiple copies of HTML documentation to be installed -- should not happen any more. (reported by Stefan Scholl)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: parsing self-recursive alien record types multiple times no longer causes infinite recursion. (reported by Thomas F. Burdick, original patch by Helmut Eller for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: stack-exhaustion detection works now on NetBSD as well. (thanks to Richard Kreuter)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: defining classes whose accessors are methods on existing generic functions in other (locked) packages no longer signals bogus package lock violations. (reported by François-René Rideau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: special variables as DEFMETHOD parameters no longer have associated bogus type declarations. (reported by David Wragg and Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: read-write consistency on streams of element-type (SIGNED-BYTE N) for N &amp;gt; 32. (reported by Bruno Haible for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: redefiniton of the only method of a generic function with no DEFGENERIC no longer emits a full WARNING. In addition, redefinition of generic functions with no DEFGENERIC to an incompatible lambda list now signals an error. (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFGENERIC now works even when there's a function of the same name in an enclosing lexical environment. (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed compiler failure, caused by instrumenting code during IR1-optimization. (Debian bug report #273606 by Gabor Melis)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: added loop analysis and improved register allocation&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;POSITION on displaced vectors with non-zero displacement returns the right answer.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(SIMPLE-STRING) is a valid type specifier for sequence creators.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;*PRINT-LEVEL* handling for slotless structures is pedantically correct.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PPRINT-INDENT accepts a request for an indentation of any REAL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PPRINT-TAB (and the FORMAT ~T directive) now indent by the correct amounts.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The justification version of the FORMAT ~&amp;lt; directive treats non-zero minpad parameter correctly.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.15&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: SB-INT:*BEFORE-SAVE-INITIALIZATIONS* and SB-INT:*AFTER-SAVE-INITIALIZATIONS* have been renamed SB-EXT:*SAVE-HOOKS* and SB-EXT:*INIT-HOOKS*, and are now part of the supported interface.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: Single-stepping of code compiled with DEBUG 2 or higher and (&amp;gt; DEBUG (MAX SPACE SPEED)) is now possible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: saving cores with foreign code loaded is now supported on x86/FreeBSD, x86/Linux, and sparc/SunOS. (based on Timothy Moore's work for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFTYPE lambda-list parsing now binds unsupplied keyword parameters to * instead of NIL if no initform is supplied. (reported by Johan Bockgaard)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DEFINE-COMPILER-MACRO lambda-list parsing now binds correctly when FUNCALL appears as the car of the form. Note: despite this FUNCALL forms are not currently subject to compiler-macro expansion. (port of Raymond Toy's fix for the same from CMUCL, reported by Johan Bockgaard)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FOR ... ON ... -clauses in LOOP now work on dotted lists (thanks for Teemu Kalvas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: in FORMAT ~^ inside ~:{ now correctly steps to the next case instead of terminating the iteration (thanks for Julian Squires, Sean Champ and Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: incorrect expansion of defgeneric that caused a style warning. (thanks for Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: slot accessor effective method computation works properly for classes with multiple non-standard applicable methods on SB-MOP:SLOT-VALUE-USING-CLASS. (reported by Ralf Mattes)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on x86 compiler supports stack allocation of results of LIST and LIST*, bound to variables, declared DYNAMIC-EXTENT. (based on CMUCL implementation by Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;FORMAT strings with both the ~&amp;lt;~:;~&amp;gt; form of the justification directive and pretty-printing directives cause an error.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: the internal functions SB-KERNEL:32BIT-LOGICAL-FOO, intended for providing efficient logical operations on (UNSIGNED-BYTE 32) values, have been renamed to SB-KERNEL:WORD-LOGICAL-FOO. Modular arithmetic should be used instead of the old functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: on platforms where &quot;dladdr&quot; is available foreign function names now appear in backtraces. (based on Helmut Eller's work for CMUCL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: documentation for SB-BSD-SOCKETS, SB-GRAY, SB-SIMPLE-STREAMS, and SB-PROFILE have been integrated into the user manual.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;documentation: ASDF manual is now distributed with SBCL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SBCL can now load its contributed modules with REQUIRE even if the system-provided entries have been removed from ASDF:*CENTRAL-REGISTRY*. Infinite recursion in REQUIRE is also detected.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: backtraces involving undefined functions or assembly routines are more informative. (thanks to Brian Downing)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: mutually referent alien structures now work correctly. (reported by Rick Taube)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: structures defined by WITH-ALIEN can be referred to within other definitions in the same WITH-ALIEN.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: division operators (MOD, TRUNCATE and the like) with constant zero divisors and integer dividends no longer generate left shifts.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: provide default methods for INPUT-STREAM-P and OUTPUT-STREAM-P specialized on SB-GRAY:FUNDAMENTAL-STREAM.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: improve the detection and resolution of MOP metacycles (where effective method computation depends on the generic function having its effective method computed). (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: pass the right initargs to :BEFORE or :AFTER methods on SHARED-INITIALIZE or INITIALIZE-INSTANCE in optimized MAKE-INSTANCE constructors. (reported by Axel Schairer for cmucl)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: pathnames with relative directory components can be represented relative to default pathnames.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: in taking the GCD of bignums, reduce the two bignums to approximately the same size (using Euclid's algorithm) before applying the more sophisticated binary GCD. (thanks to Juho Snellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: COUNT on bitvectors now operates word-at-a-time.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: ASH with a positive, but not necessarily constant, (leftwards) shift, when in a modular context, is compiled to a hardware shift.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;FORMAT variable parameters (&quot;~V&amp;lt;char&amp;gt;&quot;) are defaulted properly if the corresponding argument is NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FORMAT directives accepting a minpad parameter treat negative values as 0.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;literal commas as character parameters to FORMAT directives are parsed correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;literal spaces directly after ~&amp;lt;Newline&amp;gt; directives within a format-logical-block (~:&amp;lt; ~@:&amp;gt;) do not induce :FILL-style conditional newlines.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PRINT-UNREADABLE-OBJECT inserts spaces as specified (and only as specified: it no longer includes conditional newlines).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PRINC-TO-STRING binds *PRINT-READABLY* to NIL (as well as *PRINT-ESCAPE*).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PPRINT-LOGICAL-BLOCK signals a TYPE-ERROR if its :PREFIX or :PER-LINE-PREFIX argument does not evaluate to a string.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;new feature: SB-PACKAGE-LOCKS. See the &quot;Package Locks&quot; section of the manual for details; for now, package locks can be disabled by removing :SB-PACKAGE-LOCKS in customize-target-features.lisp, but if no major problems are found then it is likely that they will be compiled in unconditionally.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;major incompatible change: LOAD-FOREIGN and LOAD-1-FOREIGN are now unsupported operators on all platforms. To load a shared library into SBCL, use SB-ALIEN:LOAD-SHARED-OBJECT. To load a non-shared object file, link it into a shared library outside of SBCL and load it using SB-ALIEN:LOAD-SHARED-OBJECT. (incidentally fixes bug #79)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug workaround: ROOM T and the GC were not working together reliably, because invariants expected by the SB!VM:INSTANCE-USAGE reporting facility aren't preserved. That reporting has been disabled, so now until and unless someone figures out how to make it work reliably with the current GC, (ROOM T) is equivalent to (ROOM).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: as threatened around sbcl-0.8.0, the home package of MOP-related symbols is now SB-MOP, not SB-PCL. The symbols are also exported from SB-PCL for backwards compatibility, but more so than before SB-PCL should be treated as an implementation-internal package.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fasl format changed: SBCL 0.8.13 fasls are incompatible with those of earlier versions&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the SB-SPROF contrib now works on (most) non-x86 architectures. It is known as of this release not to work on the Alpha, however.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #167: errors signalled due to illegal syntax in method bodies are now more legible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #338: instances of EQL-SPECIFIER are now valid type designators and can hence be used with TYPEP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #333: CHECK-TYPE now ensures that the type error signalled, if any, has the right object to be accessed by TYPE-ERROR-DATUM. (reported by Tony Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #340: SETF of VALUES obeys the specification in ANSI 5.1.2.3 for multiple-value place subforms. (reported by Kalle Olavi Niemetalo)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #334: programmatic addition of slots using specialized methods on SB-MOP:COMPUTE-SLOTS works for :ALLOCATION :INSTANCE and :ALLOCATION :CLASS slots.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug #269: SCALE-FLOAT scales floats by any integer, not just float exponents. (rereported by Peter Seibel)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug: #\Space (and other whitespace characters) are no longer considered to be macro characters in standard syntax by GET-MACRO-CHARACTER.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: initialization of condition class metaobjects no longer causes an instance of the condition to be created. (reported by Marco Baringer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: it is now possible to have slots such that SB-MOP:SLOT-DEFINITION-ALLOCATION of the effective slot description is neither :INSTANCE nor :CLASS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: the ctor optimization of MAKE-INSTANCE now respects user-defined methods on SLOT-BOUNDP-USING-CLASS and (SETF SLOT-VALUE-USING-CLASS), and no longer causes errors with non-standard SLOT-DEFINITION-ALLOCATION values.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs: various race conditions handling exiting threads. CL-PPCRE's thread torture test now passes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed arguably-a-bug: GC time proportional to number of threads in system even when most of them are idle&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: improved performance of BIT and SBIT on bit-vectors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;.fasl file incompatibility: The fasl file version number has been incremented because of changes associated with package locks.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the system no longer provides optimization hints (conditions which are TYPEP SB-EXT:COMPILER-NOTE) for conforming code in default compilation mode; these hints are still emitted when higher SPEED optimization is requested.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new contrib module: a sampling profiler (profiling by statistical sampling, rather than by instrumenting functions) is available as the SB-SPROF contrib. (thanks to Gerd Moellmann and Juho Snellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the behaviour of the standard function ED is now customizeable by third parties through a hook variable: see ED's documentation string for information on the protocol.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the compiler no longer emits efficiency notes for (FUNCALL X) when the type of X is uncertain under default optimization settings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 276: mutating a binding of a specialized parameter to a method to something that is not TYPEP the specializer is now possible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs 45d and 118: DOUBLE-FLOAT[-NEGATIVE]-EPSILON now exhibit the required behaviour on the x86 platform. (thanks to Peter van Eynde, Eric Marsden and Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 335: ATANH now computes the inverse hyperbolic tangent even for difficult arguments. (reported by Peter Graves)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 141a: the backquote printer now descends quoted structure.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed another bug in backquote printing: no more destructive modification of the form's list structure. (reported by Brian Downing)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in INTERRUPT-THREAD: pin the function, so that it cannot move between its address being taken and the call to interrupt_thread, fixing a crashing race condition.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the SB-POSIX contrib implementation has been adjusted so that it no longer exhibits ridiculously poor performance when constructing instances corresponding to C structs.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the sb-grovel contrib now treats C structures as alien (in the sense of SB-ALIEN) objects rather than as undistinguished (simple-array (unsigned-byte 8) (*))s. This has implications for memory management of client code (sb-grovel-returned objects must now be manually managed) and for type safety (alien objects now have full types).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new feature: the SB-EXT:MUFFLE-CONDITIONS declaration should be used to control emission of compiler diagnostics, rather than the SB-EXT:INHIBIT-WARNINGS OPTIMIZE quality. See the manual for documentation on this feature. The SB-EXT:INHIBIT-WARNINGS quality should be considered deprecated.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;install.sh now installs the user manual as well&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(not quite a new documentable feature, but worth considering in the light of the new SB-EXT:MUFFLE-CONDITIONS declaration): the beginnings of a semantically meaningful condition hierarchy is under development, for use in SB-EXT:MUFFLE-CONDITIONS and by IDEs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: PARSE-NAMESTRING now accepts any valid pathaname designator as the defaults argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: Displaced arrays whose displaced-to array has become too small now cause ARRAY-DIMENSION to signal an error, providing for safer bounds-checking. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: DEFCLASS slot definitions with identical :READER and :WRITER names now signal a reasonable error. (reported by Thomas Burdick)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: CLOSE :ABORT T on appending stream no longer causes file deletion.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: Invalid slot specification errors now print correctly. (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 320: Shared to local slot value transfers in class redefinitions now happen corrently from superclasses as well. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 316: SHIFTF now accepts VALUES forms. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 322: DEFSTRUCT :TYPE LIST type predicates now handle improper lists correctly. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 313: source-transform for &amp;lt;fun-name&amp;gt; was erroneously applied to a call of a value of a variable with name &amp;lt;fun-name&amp;gt;. (reported by Antonio Menezes Leitao)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 307: The obsolete instance protocol ensures that subclasses are properly obsoleted. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 298, revealed by Paul F. Dietz' test suite: SBCL can remove dead unknown-values globs from the middle of the stack.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added a new restart to *BREAK-ON-SIGNALS* handling to make it easier to resume long computations after using *BREAK-ON-SIGNALS* to diagnose and fix failures. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug reported by PFD in lisppaste #747 (and Bruno Haible from CLISP test suite): WRITE-TO-STRING is not constant-foldable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs in COMPLEX type specifier: UPGRADED-COMPLEX-PART-TYPE is now consistent with (COMPLEX &amp;lt;x&amp;gt;); bugs in treatment of COMPLEX MEMBER and UNION types have likewise been fixed. (thanks to Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a (fairly theoretical) bug in string printing: if *PRINT-READABLY* is true, signal PRINT-NOT-READABLE if the string does not have array-element-type equal to the most general string type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: SET-PPRINT-DISPATCH does not immediately resolve function name. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: compile-time format string checker failed on non-closed ~{. (reported by Thomas F Burdick)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: as reported by Kalle Olavi Niemitalo on #lisp IRC, don't warn on legal loop code involving more than one aggregate boolean. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: as reported by Peter Graves on #lisp IRC, passing a NIL in keyword position to MAKE-PACKAGE was not being reported as invalid.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: as reported by Juan Ripoll on cmucl-imp, MULTIPLE-VALUE-BIND should be able to lexically bind lambda list keywords.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs 280 and 312: the checking for multiple definitions in a file is less likely to become confused by uses of inline functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: the #S reader macro performs the keyword coercion specified for slot names. (reported by Kalle Niemitalo)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: lambda lists may contain symbols whose names start with &amp;amp; but are not lambda-list-keywords; their occurrence triggers a STYLE-WARNING.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 321: define-method-combination argument lambda lists do not cause invalid code to be generated when &amp;amp;optional or &amp;amp;aux variables have default values. (reported by Bruno Haible)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 327: system subclasses of STRUCTURE-OBJECT or CONDITION have CLOS classes; this appears also to have fixed reported instability in stack exhaustion detection.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: the CONTROL-ERROR from ABORT, CONTINUE and MUFFLE-WARNING when no associated restart is present is now printable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: rearranged the expansion of various defining macros so that each expands into only one top-level form in a :LOAD-TOPLEVEL context; this appears to decrease fasl sizes by approximately 10%.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: used a previously little-used slot in symbols to cache SXHASH values, yielding a 5-10% compiler speedup. (thanks to Juho Snellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;MAKE-INSTANCES-OBSOLETE returns the class name when called with a symbol.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Fixed an optimization bug related to inheritance of initforms from local to shared slots.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FILE-POSITION works as specified on BROADCAST-STREAMs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CAST optimizer forgot to flush argument derived type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;print/read consistency on floats is now orders of magnitude more likely. (thanks also to Bruno Haible for a similar report and discussions)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;removed stack cleaning in the cleanup part of UNWIND-PROTECT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;IMAGPART is specified (infelicitously) to return (* 0 &amp;lt;thing&amp;gt;) for objects of type REAL. Make it so.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SXHASH is specified (infelicitously) to respect similarity, which means that (SXHASH 0.0) must equal (SXHASH -0.0). Make it so. (thanks to Markus Ziegler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;on the Alpha, the compiler succeeds in compiling functions returning a known number of arguments greater than 63.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed handling of invalid NIL arguments in keyword position in local calls.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed non-pretty printing of arrays with *PRINT-RADIX* being true.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;provided a readably-printable representation for RANDOM-STATE objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ensured that pathnames, where they have a namestring, always print using #P&quot;...&quot; syntax.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Support for the forthcoming 2.0 version of the NetBSD kernel running on x86 hardware has been added. (thanks to Perry E. Metzger most immediately, and others for their past work)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SBCL now runs on OpenBSD 3.4. (Thanks to Scott Parish; 3.4 is the current release version; SBCL's OpenBSD support had been broken since about the time of OpenBSD's switch to ELF binary format.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;[placeholder for DX summary]
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;user code with &amp;amp;REST lists declared dynamic-extent, under high speed or space and low safety and debug optimization policy.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The manual has been converted to Texinfo format and the debugger chapter from the cmucl manual has been added.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A facility has been added to extract documentation strings from sbcl and store them as Texinfo-formatted snippets for inclusion in the manual (via Texinfo's @include directive)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compiler emitted division in optimized DEREF. (thanks for the test case to Dave Roberts)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: multidimensional simple arrays loaded from FASLs had fill pointers. (reported by Sean Ross)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: PROFILE output is printed nicely even for large numerical values. (thanks to Zach Beane)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: streams with element-type (SIGNED-BYTE &amp;lt;N&amp;gt;) for &amp;lt;N&amp;gt; greater than 32 handle EOF correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: on X86 an immediate argument of the IMUL instruction is correctly printed in disassembly. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: class slots in redefined classes preserve their old values. (thanks to Bruno Haible and Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: compilation of funcalls of CXX+R (e.g. CDDR) now succeeds. (reported by Marco Baringer)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;READ-SEQUENCE now works on ECHO-STREAMs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;RATIONALIZE works more according to its specification. (thanks to Bruno Haible)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;deprecation of old extension: *DEBUG-PRINT-LEVEL* and *DEBUG-PRINT-LENGTH* are now deprecated in favor of the new, more general SB-DEBUG:*DEBUG-PRINT-VARIABLE-ALIST* mechanism. (This should matter to you only if you rebind the printer control variables and then find you want different bindings in the debugger than in the ordinary execution of your program.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The runtime build system has been tweaked to support building (on SPARC/SunOS) using a C compiler which invokes Sun's own assembler and linker. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Unbound, undefined, undeclared variables now trigger full WARNINGs, not just STYLE-WARNINGs, on the assumption that this is more often programmer error than deliberate exploitation of undefined behaviour.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the hash algorithm for strings has changed to one that is less vulnerable to spurious collisions. (thanks to Juho Snellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: VECTOR-POP, VECTOR-PUSH-EXTEND and REPLACE do less needless bounds checking. (thanks to Juho Snellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: implemented multiplication as a modular (UNSIGNED-BYTE 32) operation on the PPC backend.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;ADJUST-ARRAY now copies the datum in a zero rank array if required.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ADJUST-ARRAY no longer adjusts non-adjustable arrays.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MAKE-STRING-INPUT-STREAM accepts NIL as a value for :END.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MAKE-STRING-INPUT-STREAM functions correctly for strings with element-type NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CLEAR-INPUT accepts NIL and T for its (optional) stream argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Ratios can now be printed correctly with *PRINT-BASE* bound to 2, 8 or 16.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ECHO-STREAMs no longer attempt to echo the end of file value to their output stream on EOF from read.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CONCATENATED-STREAM-STREAMS discards constituent streams which have been read to end-of-file.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CLOSE works as expected on the null CONCATENATED-STREAM, and on STRING-STREAMS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Printing symbols with *PRINT-CASE* :CAPITALIZE respects the description of determination of which consecutive characters constitute a word.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Printing the &quot;Space&quot; character with escaping on now yields &quot;#\\ &quot;, rather than &quot;#\\Space&quot;, as mandated by ANSI 22.1.3.2.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Reading floating-point numbers with *READ-BASE* set to a number less than 10 works correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Reading floating-point numbers with *READ-BASE* set to a number more than 10 works correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Printing with *PRINT-READABLY* targets the standard readtable, not the readtable currently in effect.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: parsing of namestrings on a physical (Unix) host has changed; numbers after the final #\. in a namestring are no longer interpreted as a version field. This is intented to be largely invisible to the user, except that the meaning of the namestring &quot;*.*.*&quot; has changed: it now refers to a pathname with :TYPE :WILD :NAME #&amp;lt;pattern &quot;*.*&quot;&amp;gt;. This namestring should usually be replaced by (make-pathname :name :wild :type :wild :version :wild) with the added benefit that this is more likely to be portable. As a consequence of this change, the :IF-EXISTS :NEW-VERSION option to OPEN now signals an error if the file being opened exists; this may have an impact on existing code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 190: RUN-PROGRAM should now work properly, respecting signals received, on the PowerPC platforms (both Linux and Darwin). (thanks to Pierre Mai for pointing out the location of the error)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;several fixes on OS X: The system now builds and runs cleanly on Panther (10.3), and works around sigreturn bug (no more SIGFPEs). (thanks to Brian Mastenbrook)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DECODE-UNIVERSAL-TIME now accepts timezone arguments with second-resolution: integer multiples of 1/3600 between -24 and 24. (thanks to Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: functions =, /=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;= did not check the argument type when called with 1 argument; PEEK-CHAR checked type of PEEK-TYPE only after having read first character from a stream. (reported by Peter Graves)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the garbage collector now has much better locality behaviour, and in particular no longer treats all memory as being exhausted when many small objects point to each other in a deeply recursive manner.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: arrays specialized on (UNSIGNED-BYTE 15) are now recognized as being TYPEP their class.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the PUSHNEW documentation string has been corrected. (thanks to Vincent Arkesteijn)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: defaulting of the value for the last of an atypically large number of multiple values being bound was not being performed correctly on the Alpha or PPC platforms&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: implemented multiplication as a modular (UNSIGNED-BYTE 32) operation on the x86 backend.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: SEARCH on simple-base-strings can now be open-coded. (see also contrib/compiler-extras.lisp for inspiration for teaching the compiler about the Boyer-Moore algorithm).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;value, returned by MAX (and MIN) called with several EQUALP, but not EQL, arguments now does not depend on compiler settings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;in stack analysis liveness information is propagated from non-local entry points.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;pathwise CAST removing failed when the CAST node did not start a block.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;INPUT-STREAM-P, OUTPUT-STREAM-P, STREAM-ELEMENT-TYPE and OPEN-STREAM-P signal a TYPE-ERROR if their argument is not a stream.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOAD-LOGICAL-PATHNAME-TRANSLATIONS returns NIL if the logical host is already defined.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;RENAME-FILE works on streams instead of signalling an internal type error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PEEK-CHAR uses the current readtable when determining whether or not a character is whitespace.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MERGE-PATHNAMES handles the case when the pathname does not specify a name while the default-pathname specifies a version.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Pathnames now stand a better chance of respecting print/read consistency.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Attempting to use standardized file system operators with a pathname with invalid :DIRECTORY components signals a FILE-ERROR.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;OPEN :DIRECTION :IO no longer fails to work on non-existent files.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DIRECTORY on logical pathnames is more correct.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CLEAR-INPUT, CLEAR-OUTPUT, FINISH-OUTPUT and FORCE-OUTPUT signal a TYPE-ERROR if their argument is not a stream.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;READ-BYTE and WRITE-BYTE signal a TYPE-ERROR if their stream designator argument does not designate a stream.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;OPEN-STREAM-P and INPUT-STREAM-P on synonym streams work by examining the synonym.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;STREAM-ELEMENT-TYPE and FRESH-LINE on broadcast-streams now work as specified.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;OPEN and WITH-OPEN-STREAM allow opening streams with element-type larger than ([UN]SIGNED-BYTE 32).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;When built with the :SB-FUTEX feature, threaded builds now take advantage of the &quot;fast userspace mutex&quot; facility in Linux kernel 2.6 for faster/more reliable mutex and condition variable support.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Incompatible change (but one you probably shouldn't have been using anyway): the interface and code for arbitrating between multiple threads in the same user session has been redesigned.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GET-SETF-EXPANSION no longer throws an internal type error when called without an explicit environment argument. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: buffered :DIRECTION :IO streams are less likely to become confused about their position. (thanks to Adam Warner and Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Pretty printing backquoted forms with unquotations in the argument list position of various code constructs such as LAMBDA now works correctly. (reported by Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Pretty printing unquotations no longer loses all stream position information.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: performance of string output streams is now less poor for multiple small sequence writes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: performance of CSUBTYPEP in the presence of complex expressions involving CONS and NOT many times has been improved. (reported by Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ASDF-INSTALL bug fix: now parses *PROXY* properly. (thanks to Sean Ross)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-SIMPLE-STREAMS enhancement: simple-streams can now be used as streams for the REPL, for the debugger, and so on. (thanks to David Licteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFINE-CODITION is more efficient. (thanks to Brian Mastenbrook)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the value of the :REHASH-THRESHOLD argument to MAKE-HASH-TABLE is ignored if it is too small, rather than propagating through to cause DIVIDE-BY-ZERO or FLOATING-POINT-OVERFLOW errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;extremely complex negations of CONS types were not being sufficiently canonicalized, leading to inconsistencies in SUBTYPEP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;VALUES tranformer lost derived type.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;fixed a bootstrapping bug: the build process no longer assumes that the various BOOLE-related constants have the same value in host and target lisps. (noted by Paul Dietz' test suite on an SBCL binary built from CLISP)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system can now be dynamically linked on the MIPS platform, which enables dynamic loading of foreign code from Lisp. (thanks to Ralf Baechle for discussions on the MIPS ABI)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now records debugging information for its own source files in a filesystem-position-independent manner, relative to the &quot;SYS&quot; logical host.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a compiler bug: MV-LET convertion did not check references to the &quot;max args&quot; entry point. (reported by Brian Downing)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tweaked disassembly notes to be less confident about proclaiming some instruction as an LRA. (thanks to Brian Downing)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;contrib update: SB-ACLREPL is now threadsafe; multiple listeners now each have their own history, command character, and other characteristics. (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;compiler failure in compiling LOGAND expressions including a constant 0&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Implementation of ASH-MOD32 on X86 and PPC did not work for the shift greater than 32.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FLUSH-DEST did not mark blocks for type check regeneration.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;HANDLER-CASE failed to accept declarations in handler clauses in some circumstances.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;New code in contrib/sb-introspect (still probably not entirely stable yet) provides some support for smart Lisp development environments like SLIME.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The conditions signalled for errors occurring when loading .fasl files have been systematized (inheriting from SB-EXT:INVALID-FASL) in a way which should help ASDF recover gracefully.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The REQUIRE/PROVIDE behavior of *MODULE-PROVIDER-FUNCTIONS* stuff has been cleaned up. If you code contrib/ stuff, this might affect you, and you can look at contrib/README, contrib/STANDARDS, and/or the 0.8.4.27 diff to check.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;In full calls the compiler now does not generate checks for declared argument types for all arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;various threading fixes
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;and some experimental patches which didn't make it into the main tree for this release, but which are shipped in contrib/experimental-thread.patch as a possible fix for some failures (deadlock, spinning...) in GC-intensive multithreaded applications.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed PPC build problem (source code incompatibility of different library versions): added offsetof() hackery which attempts to divine where glibc maintainers put uc_mcontext today&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 282: compiler does not trust type assertions while passing arguments to a full call.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 261: compiler allows NIL or &quot;no value&quot; to be accepted for &amp;amp;OPTIONAL VALUES type parameter.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix bug 214: algorithm for noting rejected templates is now more similar to that of template seletion. (also reported by rydis on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 141b: printing backquoted information readably and prettily inserts a space where necessary.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: obviously wrong type specifiers such as (FIXNUM 1) or (CHARACTER 10) are now reported as errors, rather than propagated as unknown types. (reported by piso on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the :IF-EXISTS argument to OPEN now behaves correctly with values NIL and :ERROR. (thanks to Milan Zamazal)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 191c: CLOS now does proper keyword argument checking as described in CLHS 7.6.5 and 7.6.5.1.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOOP forms using NIL as a for-as-arithmetic counter no longer raise an error; further, using a list as a for-as-arithmetic counter now raises a meaningful error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 213a: even fairly unreasonable CONS type specifiers are now understood by sequence creation functions such as MAKE-SEQUENCE and COERCE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 46k: READ-BYTE now signals an error when asked to read from a STRING-INPUT-STREAM.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler enhancement: SIGNUM is now better able to derive the type of its result.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;type declarations inside WITH-SLOTS are checked. (reported by salex on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incorrect optimization of TRUNCATE for a positive first argument and negative second.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler failure in let-convertion during flushing dead code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler failure while deriving type of TRUNCATE on an interval, containing 0.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ASH of a negative bignum by a negative bignum count now returns -1, not 0.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;intersection of CONS types now canonicalizes properly, fixing inconsistencies in SUBTYPEP.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: The --disable-debugger command line option now clobbers the debugger at a more fundamental level, by redefining #'INVOKE-DEBUGGER instead of by rebinding *DEBUGGER-HOOK*. The main difference is that BREAK is specified by ANSI to ignore *DEBUGGER-HOOK* and INVOKE-DEBUGGER regardless. Under the old system, BREAK would enter the debugger REPL and then suffer recursive errors because *DEBUG-IO* is also messed up in --disable-debugger mode; while under the new system, BREAK in --disable-debugger mode terminates the system just as an unhandled error would.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed compiler performance when processing loops with a step &amp;gt;1;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DOCUMENTATION now retrieves generic function documentation. Also, DOCUMENTATION and (SETF DOCUMENTATION) support has been systematized, and now supports the methods specified by ANSI, along with a default method and a method for slot documentation. (reported by Nathan Froyd)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: effective methods associated with a generic function are no longer cached over a change of that generic function's method combination. (reported by Andreas Fuchs)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: RUN-PROGRAM now does not fail if some element in $PATH names a non-existent directory. (thanks to Andreas Fuchs)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ROUND and TRUNCATE could, under certain circumstances on the PPC platform, lead to stack corruption; this has been fixed. (reported by Rainer Joswig)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: ASH on an (UNSIGNED-BYTE 32) with a shift of -32 or lower no longer ever returns 1 instead of 0. (thanks to Lars Brinkhoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 285: TRUNCATE on bignum arguments, and indeed bignum arithmetic in general, is now much more reliable on the PPC platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOGCOUNT on (UNSIGNED-BYTE 64) objects on the Alpha platform now returns the right answer.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: restored some effective method precomputation in CLOS (turned off by an ANSI fix in sbcl-0.8.3); the amount of precomputation is now tunable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: compiler-internal data structure use has been reviewed, and changes have been made that should improve the performance of the compiler by about 20%.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: performance of FILL (and :INITIAL-ELEMENT) on simple-base-strings and simple-bit-vectors is improved.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: the optimization of 32-bit logical and arithmetic functions introduced in version 0.8.3 on the x86 has been implemented on the mips, ppc and sparc platforms; an implementation of the same facility, but for 64-bit arithmetic, has been added for the alpha.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;microoptimization: the compiler is better able to make use of the x86 LEA instruction for multiplication by constants.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: in some situations compiler did not report usage of generic arithmetic in (SPEED 3) policy.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 145b fix: compiler used wrong type specifier while converting MEMBER-types to numeric.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: COMPILE-FILE must bind *READTABLE*. (reported by Doug McNaught)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF AREF) on byte-sized-element arrays with constant index argument now works properly on the Alpha platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: floating point exception treatment on the Alpha platform is improved.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FILE-POSITION works much better on string input and output streams. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: many threading/garbage collection symptoms sorted. SB-THREAD:INTERRUPT-THREAD now safe to call on a thread that might be pseudo-atomic.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;internal change: Stopping for GC is now done with signals not ptrace. GC is now done in whichever thread wanted it, instead of in the parent.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: GC hooks (missing since 0.8) reinstated, so finalizers work again.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: result form in DO is not contained in the implicit TAGBODY.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: ICR structure is changed; the value part of CONTINUATION is now called LVAR; corresponding functions are renamed (e.g. SB-C::CONTINUATION-TYPE has become SB-C::LVAR-TYPE).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added type deriver for ISQRT (thanks to Robert E. Brown).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: better support for loading from the command line when an initialization file sets (READTABLE-CASE *READTABLE*). (thanks to Adam Warner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the RETURN clause in LOOP is now equivalent to DO (RETURN ...).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ROUND and FROUND now give the right answer when given very small float arguments.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(FLOAT X) for X of type DOUBLE-FLOAT now returns X in all circumstances.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimizer for (EXPT X 0) did not work for X not of type FLOAT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(GCD 0 &amp;lt;negative-integer&amp;gt;) returned &amp;lt;negative-integer&amp;gt;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LCM should return a non-negative integer.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PARSE-INTEGER returned the index of a terminator instead of the upper bounding index of a substring in case :JUNK-ALLOWED NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PARSE-INTEGER returned an incorrect index being applied to a displaced string.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LCM with two arguments of 0 returns 0 rather than signalling DIVISION-BY-ZERO.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;unsigned addition of a 32-bit constant with the high bit set no longer causes an internal compiler error on the x86.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOGBITP accepts a non-negative bignum as its INDEX argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler incorrectly derived types of DPB and DEPOSIT-FIELD with negative last argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;byte specifiers with zero size and position no longer cause an error during type derivation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bignum multiplication on the Alpha platform now returns the right answer.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;porting: The system now builds on SuSE AMD64, although it still generates a 32-bit binary.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;.fasl file incompatibility: The fasl file version number has been incremented (because of the changes to internal compiler data structures referred to above).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SBCL now builds and runs on MacOS X (version 10.2), or perhaps more accurately, on the Darwin kernel running on PowerPC hardware. (thanks to Brian Mastenbrook, Pierre Mai and Patrik Nordebo)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Compiler code deletion notes now signal a condition of type SB-EXT:CODE-DELETION-NOTE (a subtype of SB-EXT:COMPILER-NOTE) with an associated MUFFLE-WARNING restart.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler now performs limited argument count validation of constant format strings in FORMAT, and where appropriate in ERROR, CERROR and WARN. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;New ASDF-INSTALL contrib can be used for automatic download and installation of third-party Lisp code from CCLAN or other sites via CLiki.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Threaded builds (:SB-THREAD) now support SB-THREAD:INTERRUPT-THREAD, which forces another thread to execute a function supplied by the caller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 75 fix: WITH-OUTPUT-TO-STRING (and MAKE-STRING-OUTPUT-STREAM) now accept and act upon their :ELEMENT-TYPE keyword argument. (reported by Martin Atzmueller, Edi Weitz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FILE-POSITION now accepts position designators up to ARRAY-DIMENSION-LIMIT or the extreme of the off_t range, whichever is the greater. (thanks to Patrik Nordebo)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: MAKE-ARRAY ignored :INITIAL-CONTENTS NIL. (reported by Kalle Olavi Niemitalo)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the CLASS-PROTOTYPE of the GENERIC-FUNCTION class is now printable. (reported by Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix in sb-posix: mmap() now works on systems with a 64-bit off_t, including Darwin and FreeBSD. (thanks to Andreas Fuchs)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;x86 bug fix in control stack exhaustion checking: now shows backtrace&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix in WITH-TIMEOUT: now the body can have more than one form. (thanks to Stig Sandoe)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix in READ-SEQUENCE: READ-SEQUENCE following PEEK-CHAR or UNREAD-CHAR now correctly includes the unread character in the target sequence. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix in threaded builds: the system can now be suspended and resumed by shell job control with minimal disruption.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixes in times and timezones &amp;gt;2038AD&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;better handling of &quot;where is GNU make?&quot; problem in build scripts (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new optimization: inside a named function any reference to a function with the same name is considered to be a self-reference; this behaviour is controlled with SB-C::RECOGNIZE-SELF-CALLS optimization quality.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new optimization on x86: logical functions and + now have optimized (UNSIGNED-BYTE 32) versions, which are automatically used when the result is truncated to 32 bits.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;VALUES declaration is partially enabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes in SB-GROVEL (thanks to Andreas Fuchs)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The system now obeys the constraint imposed by UPGRADED-ARRAY-ELEMENT-TYPE that the upgraded array element types form a lattice under type intersection.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FFLOOR, FTRUNCATE, FCEILING and FROUND work with integers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ASSOC now ignores NIL elements in an alist.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CEILING now gives the right answer with MOST-NEGATIVE-FIXNUM and (1+ MOST-POSITIVE-FIXNUM) answers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The addition of a method with invalid qualifiers to a generic function does not cause an error to be signalled immediately; a warning is signalled, and the error is generated only on calling the generic function.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changed .fasl file version number, in part to add type codes for new array subtypes UNSIGNED-BYTE 7, 15, 29, and 31 mandated by obscure ANSI requirements&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;fixed bug 148: failure to inline-expand a local function left garbage, confusing the compiler.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs 3cd: structure slot readers perform type check if the slot can have an invalid value (i.e. it is either not initialized or can be written with a less specific slot writer).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the compiler now traps array references to elements off the end of an array; previously, the bounds checking in some circumstances could go off-by-one.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improved MACHINE-VERSION, especially on Linux (thanks to Lars Brinkhoff)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;type declarations for array element types now obey the description on the CLHS page &quot;Declaration TYPE&quot;, as per discussions on sbcl-help around 2003-05-08. This means that a declaration (TYPE (ARRAY FOO) BAR) means that, within the scope of the declaration, all references to BAR will be asserted or assumed (with THE, so dependent on compiler policy) to involve objects of type FOO. Note that no such declaration is implied in (MAKE-ARRAY .. :ELEMENT-TYPE 'FOO).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;declared types of functions from the &quot;Conditions&quot; chapter. (reported by Paul Dietz)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: CERROR accepts a function as its first argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: NTH an NTHCDR accept a bignum as index arguments. (reported by Adam Warner)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;optimization: character compare routines now optimize comparing against a constant character. (reported by Gilbert Baumann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SETF AREF) on byte-sized-element arrays with constant index argument now works properly on the MIPS platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed compiler failure on (TYPEP x '(NOT (MEMBER 0d0))).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;repeated evaluation of the same DEFSTRUCT, a slot of which is declared to have a functional type, does not cause an error anymore.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: sometimes MAKE-INSTANCE did not work with classes with many :DEFAULT-INITARGS. (reported by Istvan Marko)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: if last continuation of a deleted block has a destination, this destination should be deleted too. (reported by ohler on #lisp)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in the bootstrap process: the host compiler's values of ARRAY-DIMENSION-LIMIT and ARRAY-TOTAL-SIZE-LIMIT no longer leak into the newly-built SBCL. (reported by Eric Marsden on #lisp, test case from Patrik Nordebo)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improved the ability of the disassembler on the PPC platform to provide helpful disassembly notes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-MOP:CLASS-PROTOTYPE on built-in-classes returns an instance of the class in more cases than previously.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FILE-POSITION now understands :START and :END for STRING-INPUT-STREAMs. (thanks to Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: (SIGNED-BYTE 8) streams no longer return (UNSIGNED-BYTE 8) data. (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: it is possible to add a method to a generic function without lambda list.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: reader failed to signal END-OF-FILE inside an object representation. (reported by Nikodemus Siivola)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;LAST and [N]BUTLAST should accept a bignum.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;condition slot accessors are methods.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(VECTOR NIL) is a subtype of STRING.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: some nonsensical specialized lambda lists (used in DEFMETHOD) which were previously ignored now signal errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: the system is now aware of the types of variables in the COMMON-LISP package, and will signal errors for most violations of these type constraints (where previously they were silently accepted).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: COMPILE-FILE now uses the freedom afforded (ANSI 3.2.2.3) to use derived function types for functions defined in the same file. This also permits the system to warn on static type mismatches and function redefinition. (Currently it does not work with high DEBUG level.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: VALUES declaration is disabled.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;When issuing notes, the compiler now signals a condition of type SB-EXT:COMPILER-NOTE, and provides an associated MUFFLE-WARNING restart for use in user handlers. It is expected that the COMPILER-NOTE condition will eventually become a condition supertype to a hierarchy of note types, which will then be handleable in a similar fashion. However, at the moment, no such note subtypes yet exist. (SB-INT:SIMPLE-COMPILER-NOTE exists, but it's an implementation detail, not a classification for the purpose above.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Changes in type checking closed the following bugs:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;type checking of unused values (192b, 194d, 203);&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;template selection based on unsafe type assertions (192c, 236);&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;type checking in branches (194bc).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A short form of VALUES type specifier has ANSI meaning (it has increased the number of situations when SBCL cannot perform type checking).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in DEFSTRUCT: once again, naming structure slots with keywords or constants is permissible.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;STREAM-READ-SEQUENCE and STREAM-WRITE-SEQUENCE now have methods defined on the relevant FUNDAMENTAL-BINARY-{INPUT,OUTPUT}-STREAM classes. (thanks to Antonio Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improved ANSIness in DESCRIBE: The DESCRIBE function no longer outputs FRESH-LINE or TERPRI, and no longer converts its stream argument to a pretty-print stream. Instead, it leaves any such operations to DESCRIBE-OBJECT methods.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: APROPOS now respects the EXTERNAL-ONLY flag. (reported by Teemu Kalvas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: NIL is now a valid destructuring argument in DEFMACRO lambda lists. (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Defining a generic function with a :METHOD-CLASS being a subclass of STANDARD-METHOD no longer causes stack exhaustion. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 246: increased compilation speed of long MULTIPLE-VALUE-BIND (and likewise of NTH-VALUE with a constant integer argument)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a contributed module implementing COMPILER-LET and MACROEXPAND-ALL has been included.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFCONSTANT now throws a condition of type SB-EXT:DEFCONSTANT-UNEQL if it is being asked to redefine a constant to a non-EQL value; CONTINUE and ABORT restarts respectively change and preserve the value.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 63: The code walker, part of the implementation of CLOS, is now better at handling symbol macros.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: There is no longer an internal implementation type named CL:LENGTH. (reported by Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: In macro-like defining macros/special operators the implicit block does not enclose the lambda list.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs 10 and 43: Bare VALUES, AND, OR and MEMBER symbols (not enclosed in parentheses) are not suitable as type specifiers, and their use properly signals an error now.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: An argument count mismatch for a type specifier in code being compiled no longer causes an unhandled error at compile time, but signals a compile-time warning.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed simple vector readable printing&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: DESCRIBE takes more care over whether the class precedence list slot of a class is bound before accessing it. (reported by Markus Krummenacker)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: FORMATTER can successfully compile pretty-printer format strings which use variants of the ~* directive inside.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SEARCH now applies its TEST predicate to the elements of the arguments in the correct order. (thanks to Wolfhard Buss)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 235b: The compiler uses return types of MAPCAR and friends in type inference. (thanks to Robert E. Brown)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Reading in symbols with an explicit package name of &quot;&quot; (e.g. '||::FOO) now works correctly. (reported by Henrik Motakef)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;NIL is now allowed as a structure slot name.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Arbitrary numbers, not just REALs, are allowed in certain circumstances in LOOP for-as-arithmetic clauses.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Multiple class redefinitions before slot access no longer causes a type error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(SETF FIND-CLASS) now accepts NIL as an argument to remove the association between the name and a class.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Generic functions with non-standard method-combination and over five methods all of which return constants no longer return NIL after the first few invocations. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CALL-NEXT-METHOD with no arguments now passes the original values of the arguments, even in the presence of assignment.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Functions [N]SUBST*, LAST, NRECONC, [N]SUBLIS may return any object.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DISASSEMBLE works with closures and funcallable instances.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ADD-METHOD now returns the generic function, not the new method.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FIND-METHOD signals an error if the lengths of the specializers is incompatible with the generic function, even if the ERRORP argument is true.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;TYPE-OF returns recognizeable subtypes of all built-in-types of which its argument is a member.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFCLASS only redefines the class named by its class-name argument if that name is the proper name of the class; otherwise, it creates a new class.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SLOT-UNBOUND now correctly initalizes the CELL-ERROR-NAME slot of the UNBOUND-SLOT condition to the name of the slot.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(SETF (AREF bv 0) ...) did not work for bit vectors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SLOT-UNBOUND and SLOT-MISSING now have their return values treated by SLOT-BOUNDP, SLOT-VALUE, (SETF SLOT-VALUE) and SLOT-MAKUNBOUND in the specified fashion.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SBCL now builds using CLISP (version of late April 2003 from CVS) as cross-compilation host. As a consequence, we can now bootstrap our way up to SBCL starting with a bare gcc toolchain and human-readable source code (first the source to CLISP, then the source to SBCL).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A contributed module containing a partial implementation of the simple-streams interface has been included. (thanks to Rudi Schlatte)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A contributed module implementing the RFC1321 Message Digest Algorithm, known as MD5, has been included.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The :NEGATIVE-ZERO-IS-NOT-ZERO feature no longer has any effect, as the code controlled by this feature has been deleted. (As far as we know, no-one has ever built using this feature, and its semantics were confused in any case).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: As a consequence of making SLOT-EXISTS-P work on conditions (as required by the ANSI specification), SLOT-VALUE, (SETF SLOT-VALUE) and SLOT-BOUNDP likewise have the expected behaviour on conditions. Users should note, however, that such behaviour is not required by the ANSI specification, and so use of this behaviour may render their code unportable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the GENERIC-FUNCTION type is no longer disjoint from FUNCTION types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;&amp;amp;ENVIRONMENT parameter in macro lambda list is bound first.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SXHASH on condition objects no longer returns NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;:ALLOCATION :CLASS slots are better treated; their values are updated on class redefinition, and initforms inherited from superclasses are applied.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;REMOVE-METHOD returns its generic function argument even when no method was removed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SHARED-INITIALIZE now initializes the values of the requested slots, including those with :ALLOCATION :CLASS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ALLOCATE-INSTANCE now works on structure classes defined via DEFSTRUCT (and not just by those from DEFCLASS :METACLASS STRUCTURE-CLASS).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SLOT-EXISTS-P now works on conditions, as well as structures and CLOS instances.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MAKE-LOAD-FORM now has the required methods on STRUCTURE-OBJECT, CONDITION and STANDARD-OBJECT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MAKE-LOAD-FORM-SAVING-SLOTS no longer returns a special keyword, and now implements the SLOT-NAMES argument.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;methods with &amp;amp;OPTIONAL arguments no longer allow too many arguments to be passed in the call without error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFGENERIC now checks that the :ARGUMENT-PRECEDENCE-ORDER option is consistent with the required arguments of the generic function lambda list.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: REQUIRE accepts a string designator. (Thanks to Antonio Martinez.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SB-MOP:DIRECT-SLOT-DEFINITION-CLASS and SB-MOP:EFFECTIVE-SLOT-DEFINITION-CLASS now have the specified-by-AMOP lambda list of (CLASS &amp;amp;REST INITARGS).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: The compiler now checks for duplicated variables in macro lambda lists.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: SETQ on globals returns the correct value.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 47.d: (DEFGENERIC IF (X)) now signals a PROGRAM-ERROR, not a COMPILER-ERROR (followed by some other strange error on choosing the CONTINUE restart).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: make.sh and friends are now more consistent in the way that they look for GNU &quot;make&quot;.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.8alpha.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;experimental native threads support (on x86 Linux &amp;gt;=2.4 only). This is not compiled in by default: you need to add :SB-THREAD to the target features. See the &quot;Beyond ANSI&quot; chapter of the manual for details.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fix for longstanding nonANSIism: The old distinction between CL:CLASS objects and SB-PCL:CLASS objects has been eliminated. The return value from CL:FIND-CLASS is now a CLOS class, and likewise that of CL:CLASS-OF; CL:BUILT-IN-CLASS, CL:STRUCTURE-CLASS and CL:STANDARD-CLASS name CLOS classes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;An interface to the MetaObject Protocol, as described in Kiczales, des Rivieres and Bobrow's &quot;The Art of the Metaobject Protocol&quot;, MIT Press, 1991, is available from the SB-MOP package.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incompatible change: the SB-PCL package should now be considered a private implementation detail, and no longer a semi-private MOP interface.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: due to rearrangement for threads, the control stack and binding stack are now allocated at arbitrary addresses instead of being hardcoded per-port. Users affected by this probably have to be doing advanced things with shared libraries, and will know who they are.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: Previously, all --eval forms used were processed with READ before any of them were processed with EVAL. Now each --eval form is processed with both READ and EVAL before the next --eval form is processed. (Thus package operations like sbcl --eval &quot;(defpackage :foo)&quot; --eval &quot;(print 'foo::bar)&quot; now work as the user might reasonably expect.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: *STANDARD-INPUT* is now only an INPUT-STREAM, not a BIDIRECTIONAL-STREAM. (thanks to Antonio Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: Y-OR-N-P is now character-oriented, not line oriented. Also, YES-OR-NO-P now works without errors. (thanks to Antonio Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;sb-aclrepl module improvements: an integrated inspector, added repl features, and a bug fix to :trace command.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Known functions, which cannot be open coded by the backend, are considered to be able to check types of their arguments. (fixing a bug report by Nathan J. Froyd)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in computing method discriminating functions: It is now possible to define methods specialized on classes which have forward-referenced superclasses. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed evaluation order in optional entries (reported by Gilbert Baumann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-MOP:ENSURE-CLASS-USING-CLASS now takes its arguments in the specified-by-AMOP order of (CLASS NAME &amp;amp;REST ARGS &amp;amp;KEY).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-MOP:COMPUTE-EFFECTIVE-SLOT-DEFINITION now takes the required-by-AMOP NAME argument, as well as CLASS and DIRECT-SLOT-DEFINITIONS. (thanks to Kevin Rosenberg)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 20: DEFMETHOD can define methods using names that are not the proper names of classes to designate class specializers.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: INTERACTIVE-STREAM-P now works on streams associated with Unix file descriptors, instead of blowing up. (thanks to Antonio Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Garbage collection refactoring: user-visible change is that a call to the GC function during WITHOUT-GCING will not do garbage collection until the end of the WITHOUT-GCING. If you were doing this you were probably losing anyway.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in MEMBER type: (MEMBER 0.0) is not the same as (SINGLE-FLOAT 0.0 0.0), because of the existence of -0.0 which is TYPEP the latter but not the former.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler issues a full WARNING for calls to undefined functions with names from the CL package.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MAP-INTO for a vector destination is open coded. (reported by Brian Downing on c.l.l)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: the long form of DEFINE-METHOD-COMBINATION now accepts a documentation string.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;COPY-ALIST now signals an error if its argument is a dotted list.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Condition slots are now accessed more correctly in the presence of multiple initargs for a given slot.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The USE-VALUE, CONTINUE and STORE-VALUE functions now correctly exclude restarts of the same name associated with a different condition.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFCLASS of forward-referenced classes with another forward-referenced class in the superclasses list no longer causes an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Condition slots are now initialized once each, not multiple times. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CONVERT-MORE-CALL failed on a lambda list (&amp;amp;KEY). (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;&amp;amp;WHOLE and &amp;amp;REST arguments in macro lambda lists are patterns.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;NSET-EXCLUSIVE-OR does not return extra elements when its arguments contain duplicated elements.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;RESTART-CASE understands local macros.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;RESTART-CASE associates exactly its own restarts with a condition.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ENDP in safe mode checks its argument to be of type LIST.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;COPY-SYMBOL in a threaded build no longer fails when the symbol in question is unbound.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Optimized MAKE-INSTANCE functions no longer cause internal assertion failures in the presence of duplicate initargs.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SLOT-MAKUNBOUND returns the instance acted upon, not NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Side-effectful :DEFAULT-INITARGS have their side-effects propagated even in the ctor optimized implementation of MAKE-INSTANCE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;:ALLOW-OTHER-KEYS NIL is now accepted in an initarg list.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.14&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;a better implementation of SXHASH on (simple) bit vectors, measured both in execution speed and in distribution of results over the positive fixnums, has been installed. Likewise, a better implementation of EQUAL for simple bit vectors is now available.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed CEILING optimization for a divisor of form 2^k.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 240 (emitting extra style warnings &quot;using the lexical binding of the symbol *XXX*&quot; for &amp;amp;OPTIONAL arguments). (reported by Antonio Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed SXHASH, giving different results for NIL depending on type declarations (SYMBOL or LIST). (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in DEFPARAMETER and DEFVAR: they could assign a lexical variable. (found by Rolf Wester)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SBCL does not ignore type declarations for special variables. (reported by rif on c.l.l 2003-03-05)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;some bug fixes in contrib/sb-aclrepl/&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;a bug in the CONS type specifier, whereby the CAR and CDR types got intertwined, has been fixed;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the type system is now able to reason about the interaction between INTEGER and RATIO types more completely;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;APPEND, [N]REVERSE and NRECONC check that those their arguments, which must be proper lists, are really so;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;An array specialized to be unable to hold elements has been implemented, as required -- yes, really -- by ANSI;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GETF and GET-PROPERTIES throw a TYPE-ERROR, not a SIMPLE-ERROR, on malformed property lists;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible packaging change: in line with Unix convention, SBCL now looks for its core file in /usr/{local/,}lib/sbcl/sbcl.core if it's not in $SBCL_HOME. It also sets SBCL_HOME to match.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;REQUIRE and PROVIDE are now optionally capable of doing something useful. See the documentation string for REQUIRE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;infrastructure for a managed SBCL contrib system: contributed modules in this release include:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the ASDF system definition facility;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;an interface to the BSD Sockets API;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;an ACL-like convenience interface to the repl; (thanks to Kevin Rosenberg)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;an implementation of ROTATE-BYTE, with efficient implementation on x86 hardware;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in LOG, so that LOG of a rational argument near 1 now gives a closer approximation to the right answer than previously. (thanks to Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 157: TYPEP, SUBTYPEP, UPGRADED-ARRAY-ELEMENT-TYPE and UPGRADED-COMPLEX-PART-TYPE now take (ignored, in all situations) optional environment arguments, as required by ANSI.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs in other functions taking environment objects, allowing calls with an explicit NIL environment argument to be compiled without error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 228: primary return values from FUNCTION-LAMBDA-EXPRESSION are either NIL or suitable for input to COMPILE or FUNCTION.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in DEFSTRUCT: predicates for :NAMED structures with :TYPE will no longer signal errors on innocuous objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 231b: SETQ is better at respecting type declarations in the lexical environment.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in DEFCLASS: classes named by symbols with no or unprintable packages can now be defined.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in RESTART-BIND: The :TEST-FUNCTION option had been carelessly renamed to :TEST-FUN. (thanks to Robert E. Brown)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed compiler failure related to checking types of functions. (reported by Robert E. Brown)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the compiler is now much more consistent in its error-checking treatment of bounding index arguments to sequence functions: in (SAFETY 3) code, errors will be signalled in almost all cases if invalid sequence bounding indices are passed to functions defined by ANSI to operate on sequences.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in the build procedure: documentation of SBCL-specific packages is now preserved and available in the final Lisp image.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;lifted FDEFINITION lookup out of loops in the implementation of many list operations. (thanks to Robert E. Brown)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in the reader: the #n# reader macro now works for objects of type STANDARD-OBJECT. (reported by Tony Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the compiler is now aware that SYMBOL-FUNCTION returns a FUNCTION and that READ-DELIMITED-LIST returns a LIST. (thanks to Robert E. Brown and Tony Martinez respectively)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PCL is now smarter about SLOT-VALUE, (SETF SLOT-VALUE) and SLOT-BOUNDP: in particular, it is now able to optimize them much better, and is now not vulnerable to having packages renamed. Furthermore, a compliance bug has been fixed: SLOT-MISSING is now always called when a slot is not present in an instance. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug related to CONCATENATED-STREAMs: PEEK-CHAR will no longer signal an error on unreading a character following EOF on the previous constituent stream. (thanks to Tony Martinez)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;ARRAY-IN-BOUNDS-P now allows arbitrary integers as arguments, not just nonnegative fixnums;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the logical bit-array operators such as BIT-AND now accept an explicit NIL for their &quot;opt-arg&quot; argument (to indicate a freshly-consed result bit-array);&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ELT now signals an error on an invalid sequence index in safe code;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the type system is now cleverer about negations of numeric types, and consequently understands the BIGNUM and RATIO types better;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the type system is now cleverer about the interaction between INTEGER and RATIO types: while bugs still remain, many more cases are accurately computed;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;in TYPECASE, OTHERWISE now only introduces an otherwise-clause if it is in the last clause;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CONSTANTLY now correctly returns a side-effect-free function in all cases;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DECLARE is no longer treated as a special-operator; in particular, SPECIAL-OPERATOR-P no longer returns T for DECLARE;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incremented fasl file version number due to the change in the DEFSTRUCT-SLOT-DESCRIPTION structure.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: code processed by the &quot;interpreter&quot; or EVAL now has a compilation optimization policy of (DEBUG 2) (changed from (DEBUG 1)) to improve debuggability of interactive development, and to allow the use of the debug RETURN command in such code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;an experimental implementation of the RETURN command for the debugger has been included. (thanks to Frederik Kuivinen)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 62: constraints were not propagated into a loop.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in embedded calls of SORT (reported and investigated by Wolfgang Jenkner).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;printing and reading of arrays with some dimensions having length 0 (thanks to Gerd Moellmann);&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;BOA constructor with &amp;amp;AUX argument without a default value does not cause a type error;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CONSTANTP now returns true for all self-evaluating objects.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;fixed bug 127: DEFSTRUCT now does not clobber old structure accessors that are related by inheritance, as specified in the :CONC-NAME section of the specification of DEFSTRUCT. (thanks to Valtteri Vuorikoski)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler is now able to inline functions that were defined in a complex lexical environment (e.g. inside a MACROLET).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in DESCRIBE, which now works on rank-0 arrays. (thanks to Lutz Euler)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Support for the upcoming FreeBSD-5.0 release has been included. (thanks to Dag-Erling Smorgrav)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 219: DEFINE-COMPILER-MACRO no longer has compile-time effect when it is not in a toplevel context.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 222: DEFMETHOD and SYMBOL-MACROLET interactions now stand a better chance of being correct. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in COERCE, which now signals an error on coercing a rational to a bounded real type which excludes the expected answer.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler is now able to derive types more accurately from the COERCE and COMPILE functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 223: functional binding is considered to be constant only for symbols in the CL package.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 231: SETQ did not check the type of a variable being set (reported by Robert E. Brown)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A new optimization for MAKE-INSTANCE has been included, fixing various bugs (including relating to :ALLOCATION :CLASS slots and :DEFAULT-INITARGS over-eager evalueation). (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some LOOP bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;As required by ANSI, LOOP now disallows anonymous collection clauses such as COLLECT I in conjunction with aggregate boolean clauses such as THEREIS (= I 1);&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOOP now signals an error when any variable is reused in the same loop (including the potentially useful construct analogous to WITH A = 1 WITH A = (1+ A);&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;IT is only a special loop symbol within the first clause of a conditional loop clause;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOOP with a typed iteration variable over a hashtable now signals a type error iff it should.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some other bugs revealed by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;FILE-STREAM now names the class previously known as FD-STREAM;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;in DEFSTRUCT, a bare :CONC-NAME (or a :CONC-NAME with no argument) no longer signals an error;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;likewise in DEFSTRUCT, :CONC-NAME NIL now respects the package of the slot symbol, rather than using the current package ((:CONC-NAME &quot;&quot;) continues to intern the slot's name in the current package);&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incremented fasl file version number, because of the incompatible change to the DEFSTRUCT-DESCRIPTION structure, and again because of the new implementation of DEFINE-COMPILER-MACRO.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Support for building SBCL for MIPS platforms running in little-endian mode has now been checked in, and basic functionality on said platforms verified.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: PCL now records the pathname of a file in which methods and the like are defined, rather than its truename.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: TRUENAME now considers the truename of a file naming a directory to be the pathname with :DIRECTORY component indicating that directory.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: a NAMED clause in the extended form of LOOP no longer causes a BLOCK named NIL to surround the LOOP. The reason for the previous behaviour is unclear.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more systematization and improvement of CLOS and MOP conformance in PCL (thanks to Gerd Moellman and Pierre Mai):
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the standard ANSI CL generic function NO-NEXT-METHOD is now implemented;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFINE-METHOD-COMBINATION no longer signals an error for primary methods with no specializers;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the MOP generic function GENERIC-FUNCTION-DECLARATIONS is now implemented;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the Readers for Class Metaobjects methods CLASS-DIRECT-SLOTS and CLASS-DIRECT-DEFAULT-INITARGS have been implemented for FORWARD-REFERENCED-CLASSes; error reporting on CLASS-DEFAULT-INITARGS, CLASS-PRECEDENCE-LIST and CLASS-SLOTS has been improved;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SXHASH on CLOS instances now uses a slot internal to the instance to return different numbers on distinct instances, while preserving the same return value through invocations of CHANGE-CLASS;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFMETHOD signals errors when methods with longer incongruent lambda lists are added to generic functions;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;COMPUTE-CLASS-PRECEDENCE-LIST now has a method specialized on CLASS, as specified in AMOP;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;COMPUTE-SLOTS :AROUND now assigns locations sequentially based on the order returned by the primary method for classes of class STANDARD-CLASS;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFINE-METHOD-COMBINATION now works with the :ARGUMENTS option.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed some bugs shown by Paul Dietz' test suite:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;DOLIST puts its body in TAGBODY;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SET-EXCLUSIVE-OR sends arguments to :TEST function in the correct order;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;MULTIPLE-VALUE-SETQ evaluates side-effectful places before value producing form;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;if more variables are given to PROGV than values, extra variables are bound and made to have no value;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;NSUBSTITUTE on list arguments gets the right answer with :FROM-END;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;ELT signals an error of type TYPE-ERROR when the index argument is not a valid sequence index;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOOP signals (at macroexpansion time) an error of type PROGRAM-ERROR when duplicate variable names are found;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOOP supports DOWNTO and ABOVE properly; (thanks to Matthew Danish)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FUNCALL of special-operators now cause an error of type UNDEFINED-FUNCTION;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PSETQ now works as required in the presence of side-effecting symbol-macro places;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;NCONC accepts any object as its last argument;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;:COUNT argument to sequence functions may be BIGNUM; (thanks to Gerd Moellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;loop-for-as-package does not require a package to be explicitely specified;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOOP WITH now treats NIL in the d-var-spec correctly as an ignored binding.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 166: compiler preserves &quot;there is a way to go&quot; invariant when deleting code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 172: macro lambda lists with required arguments after &amp;amp;REST arguments now cause an error to be signalled. (thanks to Matthew Danish)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed Entomotomy PEEK-CHAR-WRONGLY-ECHOS-TO-ECHO-STREAM bug. (thanks to Matthew Danish)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 225: STRING-STREAM is now a class. (reported by Gilbert Baumann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 136: CALL-NEXT-METHOD no longer gets confused when arguments are lexically rebound. (thanks to Gerd Moellmann and Pierre Mai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 194: error messages are now more informative when there is no primary method applicable in a call to a generic function. (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in command line argument checking (thanks to Julian Fondren)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in COUNT-IF, making it handle :FROM-END correctly (thanks to Matthew Danish)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incremented fasl file version number, because of the SXHASH-related changes in the layout of CLOS data structures&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The runtime (the Unix executable named &quot;sbcl&quot;) is now much pickier about the .core files it will load. Essentially it now requires .core files to descend from the same build (not just the same sources or LISP-IMPLEMENTATION-VERSION) as the runtime does. (The intent is to prevent the crashes which can occur, and which can even be reported as mysterious failures, when people patch the sources or change the build parameters without changing LISP-IMPLEMENTATION-VERSION, then mix and match sbcl and .core files.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: VALUES-LIST is no longer optimized away.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 142: The FFI conversion of C string values to Lisp string values no longer conses excessively. (thanks to Nathan Froyd porting Raymond Toy's fix to CMU CL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;began to systematize and improve MOP conformance in PCL (thanks to Nathan Froyd, Gerd Moellman and Pierre Mai):
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SLOT-DEFINITION-ALLOCATION now returns :CLASS, not the class itself;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER is now implemented;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FINALIZE-INHERITANCE is now called on class finalization;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DOCUMENTATION and (SETF DOCUMENTATION) now have the correct argument precedence order.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 202: The compiler no longer fails on functions whose derived types contradict their declared type.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFMACRO is implemented via EVAL-WHEN instead of IR1 translation, so it can be non-toplevel.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The fasl file version number has changed (because of the new implementation of DEFMACRO).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(mostly) fixed bugs 46b and 46c: sequence functions now check, in safe code, that any length requirement by their type-specifier argument is valid. The exceptions to this are described in bug 213.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs 46h and 46i: TWO-WAY- and CONCATENATED-STREAM creation functions now check the types of their inputs as required by ANSI.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 48c: SYMBOL-MACROLET signals PROGRAM-ERROR when an introduced symbol is DECLAREd to be SPECIAL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed reading of (COMPLEX DOUBLE-FLOAT) literals from fasl files&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: :COUNT argument to sequence functions may be negative&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: body of DO-SYMBOLS may contain declarations&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: PUSHNEW now evaluates its arguments from left to right (reported by Paul F. Dietz, fixed by Gerd Moellman)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: PUSH, PUSHNEW and POP now evaluate a place given by a symbol macro only once&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed printing of call frame when argument list is unavailable&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: :ALLOW-OTHER-KEYS is an allowed keyword name&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler no longer signals WARNING on unknown keyword :ALLOW-OTHER-KEYS&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;A beta-quality port to the mips architecture running Linux, based on the old CMUCL backend, has been made. It has been tested on a big-endian kernel, and works sufficiently well to be able to rebuild itself; it has not been tested in little-endian mode.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed an inconsistency between gencgc.c and purify.c which made dumping/loading .core files unreliable&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 120a: The compiler now deals correctly with IFs where the consequent is the same as the alternative, instead of misderiving the return type. (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 113: Logical pathnames are now dumpable (the logical host is resolved at load-time, throwing an error if it is not found).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 174: FORMAT's error message is slightly clearer when a non-printing character is used in a format directive.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed several bugs in compiler checking of type declarations, i.e. violations of the Python &quot;declarations are assertions&quot; principle (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed several bugs in PCL's error checking (thanks to Gerd Moellmann)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug: printing of FILE-ERROR (thanks to Antonio Martinez-Shotton)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug in compilation of functions as first class values (thanks to Antonio Martinez-Shotton)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler's handling TYPE-ERRORs which it can prove will inevitably happen at runtime has been cleaned up and corrected in several ways. (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improved argument type checking for various basic arithmetic operations (MAX, +, LOGXOR, etc.) which have had so much TLC lavished on them in the past that they can be compiled in many ways in different special cases&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 181: compiler checks validity of user supplied type specifiers&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;cleaned up code flushing in optimization: Function calls which should signal errors for safety purposes (e.g. which ANSI says should signal errors when their arguments are of incorrect type) are no longer optimized away.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added new extension: SB-DEBUG:BACKTRACE-AS-LIST&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;incremented fasl file version number, because changes in the implementation of sequence functions like COERCE caused internal utility functions like COERCE-TO-SIMPLE-VECTOR (used in old inline expansions) to become undefined. (Actually these changes were later undone, so we might very well be binary compatible with 0.7.7 after all, but leaving the version number incremented seemed like the simplest and most conservative thing to do.)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;An alpha-quality port to the parisc architecture running Linux, based on the old CMUCL backend, has been made. This, even more so than the other backends, should be considered still a work in progress; known problems include that the Linux kernel in 64-bit mode does not propagate the correct sigcontext structure to userspace, and consequently SBCL on a parisc64 kernel will not work yet.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 189: The compiler now respects NOTINLINE declarations for functions declared in FLET and LABELS. (I.e. &quot;LET conversion&quot; is suppressed.) Also now that the compiler is looking at declarations in the environment, it checks optimization declarations as well, and suppresses inlining when (&amp;gt; DEBUG SPEED).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;More fixes have been made to treatment of floating point exception treatment and other Unix signals. In particular, floating point exceptions no longer cause Bus errors on the SPARC/Linux platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The detection and handling of control stack exhaustion (infinite or very deeply nested recursion) has changed. Stack exhaustion detection is now done by write-protecting pages at the OS level and applies at all optimization settings; when found, a SB-KERNEL:CONTROL-STACK-EXHAUSTED condition (subclass of STORAGE-CONDITION) is signalled, so stack exhaustion can no longer be caught using IGNORE-ERRORS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bugs 65, 70, and 109 fixed: The compiler now preserves invariants correctly when transforming recursive LABELS functions to LETs. (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug 48a./b. fixed: SYMBOL-MACROLET now refuses to bind symbols that are names of constants or global variables.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: DEFINE-ALIEN-ROUTINE now declaims the correct FTYPE for alien routines with docstrings.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug 184 fixed: Division of ratios by the integer 0 now signals an error of type DIVISION-BY-ZERO. (thanks to Wolfhard Buss and Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: Errors in PARSE-INTEGER are now of type PARSE-ERROR. (thanks to Eric Marsden)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: COERCE to (COMPLEX FLOAT) of rationals now returns an object of type (COMPLEX FLOAT). (thanks to Wolfhard Buss)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: The SPARC backend can now compile functions involving LOGAND and stack-allocated arguments. (thanks to Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: We no longer segfault on passing a non-FILE-STREAM stream to a functions expecting a PATHNAME-DESIGNATOR.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: DEFGENERIC now enforces the ANSI restrictions on its lambda lists. (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug fix: changed encoding of PCL's internal MAKE-INSTANCE functions so that EXPORTing the name of the class doesn't cause MAKE-INSTANCE functions from earlier DEFCLASSes to get lost (thanks to Antonio Martinez for reporting this)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug 192 fixed: The internal primitive DATA-VECTOR-REF can now be constant-folded without failing an assertion. (thanks to Einar Floystad Dorum for reporting this)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bugs 123 and 165 fixed: array specializations on as-yet-undefined types are now dealt with more correctly by the compiler.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Minor incompatible change: COMPILE-FILE-PATHNAME now merges its OUTPUT-FILE argument with its INPUT-FILE argument, resulting in behaviour analogous to RENAME-FILE. This puts its behaviour more in line with ANSI's wording on COMPILE-FILE-PATHNAME. (thanks to Marco Antinotti)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The fasl file version number has changed again. (because of the bug fix involving the names of PCL MAKE-INSTANCE functions)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug fix: Floating point exceptions are treated much more consistently on the x86/Linux and PPC/Linux platforms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Array initialization with :INITIAL-ELEMENT is now much faster for cases when the compiler cannot open code the array creation, but does know what the UPGRADED-ARRAY-ELEMENT-TYPE will be. General array accesses have also seen a speed increase.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: LOAD :IF-DOES-NOT-EXIST NIL now works when file type is specified. (This was at the root of some bad interactions between SBCL and ILISP: thanks to Gregory Wright for diagnosing this and reporting the bug.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Internal error arguments for undefined functions are now computed correctly on the PPC/Linux platform.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Bad &amp;amp;REST syntax is now checked correctly. (thanks to Raymond Toy's patch for CMU CL)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Support for the Solaris 9 operating environment has been included (thanks to Daniel Merritt)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A very ugly but hopefully complete draft of the missing FFI chapter of the manual has been created by reformatting the corresponding CMU CL manual chapter into (currently very ugly and incoherent) DocBook and bringing it up to date for SBCL behavior. Thus, the manual is now essentially complete, at least by my extreme once-and-only-once standards, whereby it's acceptable to refer to the doc strings of SB-EXT functions as the primary documentation.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The fasl file version number has changed again, due to cleanup of (user-invisible) bitrotted stuff. (E.g. *!INITIAL-FDEFN-OBJECTS* is no longer a static symbol.)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SBCL now builds with OpenMCL (version 0.12) as the cross-compilation host; also, more progress has been made toward bootstrapping under CLISP.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SBCL now runs on the Tru64 (aka OSF/1) operating system on the Alpha architecture.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 158 fixed: The compiler can now deal with integer loop increments different from 1; fixing this turned out also to fix bug 164.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 169 fixed: no more bogus warnings about using lexical bindings despite the presence of perfectly good SPECIAL declarations (thanks to David Lichteblau)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 175 fixed: CHANGE-CLASS is now more ANSI-conforming, accepting initargs. (thanks to Espen Johnsen and Pierre Mai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 179 fixed: DIRECTORY can now deal with filenames with pattern characters in them.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 180 fixed: Method combination specifications no longer ignore the :MOST-SPECIFIC-LAST option. (thanks to Pierre Mai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Structure type predicate functions now check their argument count as they should.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fix: Classes with :METACLASS STRUCTURE-CLASS now print correctly. (thanks to Pierre Mai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The --noprogrammer option is deprecated in favor of the new --disable-debugger option, which is very similar. (The major difference is that it takes effect at a slightly different time at startup, causing handling of errors in --sysinit and --userinit files will be affected differently.) The SB-EXT:DISABLE-DEBUGGER and SB-EXT:ENABLE-DEBUGGER functions have been added to allow this functionality to be controlled from ordinary Lisp code. (ENABLE-DEBUGGER should help people like the Debian maintainers, who might want to run non-interactive scripts to build SBCL cores which will later be used interactively.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The LOAD function no longer, when given a wild pathname to load, loads all files matching that pathname. Instead, an error of type FILE-ERROR is signalled.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;bug 147 fixed: The compiler preserves its block link/count invariants more correctly now so that it doesn't crash. (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Dynamic loading of object files in OpenBSD is now supported. (thanks to Pierre Mai)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;COMPILE now works correctly on macros. (thanks to Matthias Hoelzl)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;GET-MACRO-CHARACTER and SET-MACRO-CHARACTER now represent no-value-for-this-character as NIL (as specified by ANSI).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;HOST-NAMESTRING on physical pathnames now returns a string that is valid as a host argument to MERGE-PATHNAMES and to MAKE-PATHNAME. (thanks to Christophe Rhodes)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The Alpha port handles icache flushing more correctly. (thanks to Dan Barlow)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;More progress has been made toward bootstrapping under CLISP. (thanks to Christophe Rhodes)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The fasl file format has changed again, because dynamic loading on OpenBSD (which has non-ELF object files) motivated some cleanups in the way that foreign symbols are transformed and passed around.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The ASCII RUBOUT character, (CHAR-CODE 127), is no longer treated as whitespace by the reader, but instead as an ordinary character. Thus e.g. (READ-FROM-STRING &quot;AB&quot;) returns |AB|, instead of A as it used to.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;ANSI's DEFINE-SYMBOL-MACRO is now supported. (thanks to Nathan Froyd porting CMU CL code originally by Douglas Thomas Crosher)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SBCL now runs on the PPC archtiecture under Linux. It actually did this as of 0.7.1.45, but was left out of the previous news section (thanks to Dan Barlow)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SBCL now runs on the Solaris operating system on SPARC architectures (thanks to Christophe Rhodes's port of the CMUCL runtime)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;cleanups to the runtime on SPARC, both Linux and Solaris, and for gcc&amp;gt;=3 (thanks to Nathan Froyd and Ingvar Mattsson)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SPARC backend cleanups, allowing builds of cores optimized for V8 and V9 SPARCS, and also emission of code targeted to a particular backend chosen at runtime (thanks to Christophe Rhodes and Raymond Toy)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SBCL is closer to bootstrapping under CLISP, thanks to various fixes by Christophe Rhodes.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The fasl file format has changed again, to allow the compiler's INFO database to support symbol macros.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The user manual (in doc/) is formatted into HTML more nicely. (thanks to coreythomas)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system is smarter about SUBTYPEP relationships, especially those involving NOT types (including types such as ATOM which are represented internally using NOT types). Thus SUBTYPEP is less likely to return (VALUES NIL NIL) in general, and in particular bugs 58 and (the remaining bits of) bug 50 are fixed. (thanks to Christophe Rhodes)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The fasl file format has changed again, because the internal representation of types now includes a new slot to support the new SUBTYPEP-of-NOT-types logic.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(not a change in the main branch of SBCL, but a related prototype which can hopefully be merged into the main branch of SBCL in the future:) Brian Spilsbury has produced a Unicode-enabled variant of sbcl-0.7.0, available as a patch against sbcl-0.7.0 at &amp;lt;http://designix.com.au/brian/SBCL/sbcl-0.7.0-unicode.p0.gz&amp;gt;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug 151 fixed: GET-DISPATCH-MACRO-CHAR now returns NIL for undefined dispatch macro character combinations. (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bugfix in PARSE-NAMESTRING: we now correctly parse unix namestrings that superficially look like logical namestrings correctly.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;USER-HOMEDIR-PATHNAME now returns a (physical) pathname that SBCL can deal with.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bugfix in DEFSTRUCT: BOA constructor lambda lists now accept (name default supplied-p) for &amp;amp;optional and &amp;amp;key arguments. (thanks to Martin Atzmueller)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: The compiler is now less aggressive about tail call optimization, doing it only when (&amp;gt; SPACE DEBUG) or (&amp;gt; SPEED DEBUG). (This is an incompatible change because there are programs which relied on the old CMU-CL-style behavior to optimize away their unbounded recursion which will now die of stack overflow.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The default BYTES-CONSED-BETWEEN-GCS for non-GENCGC systems has been increased to 20M (since that seems much closer to the likely performance optimum for modern systems than the old 4M value was)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: new larger values for *DEBUG-PRINT-LENGTH* and *DEBUG-PRINT-LEVEL*&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SBCL runs on SPARC systems now. (thanks to Christophe Rhodes' port of CMU CL's support for SPARC, and various endianness and other SBCL portability fixes due to Christophe Rhodes and Dan Barlow)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new syntactic sugar for the Unix command line: --load foo.bar is now an alternate notation for --eval '(load &quot;foo.bar&quot;)'.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug fixes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The system now detects stack overflow and handles it gracefully, at least for (OR (&amp;gt; SAFETY (MAX SPEED SPACE)) (= SAFETY 3)) optimization settings. (This is a good thing in general, and its introduction in this version should be particularly timely for anyone whose code fails because of suppression of tail recursion!)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now hunts for the C variable &quot;environ&quot; in a more devious way, to avoid segfaults when the C library version differs between compile time and run time. (thanks to Christophe Rhodes)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;INTEGER-valued CATCH tags now work. (thanks to Alexey Dejneka, and also to Christophe Rhodes for porting the fix to non-X86 CPUs)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler no longer issues bogus style warnings for undefined classes in the same source file as the DEFCLASSes which defined them. (thanks to Stig E Sandoe for reporting and Martin Atzmueller for fixing this)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes in CONDITION class precedence list for undefined function errors (thanks to Alexei Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;*DEFAULT-PATHNAME-DEFAULTS* is used more consistently and correctly. (thanks to Dan Barlow)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;portability fixes aiming at bootstrapping under CLISP (thanks to Dave McDonald and Christophe Rhodes)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FORMAT fixes (thanks to Robert Strandh and Dan Barlow)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes in type translation and and type inference (thanks to Christophe Rhodes)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes to optimizer internal errors (thanks to Alexei Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;various fixes in the new ports (thanks to Dan Barlow)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;several changes related to debugging:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;suppression of tail recursion, as noted above&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;stack overflow detection, as noted above&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The default implementation of TRACE has changed. :ENCAPSULATE T is now the default. (For some time encapsulation has been more reliable than the breakpoint-based :ENCAPSULATE NIL implementation, at least on X86 systems; and I just noticed that encapsulation also seems closer to the spirit of the ANSI specification.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;mostly bug fixes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;SB-ALIEN:LOAD-FOREIGN and SB-ALIEN:LOAD-1-FOREIGN are set up properly again. (There was a packaging bug in 0.7.0 which left their definitions in SB-SYS::LOAD-FOREIGN and SB-SYS::LOAD-1-FOREIGN. LOAD-FOREIGN and LOAD-1-FOREIGN are vital for most things which interface to C-level interfaces, like extensions working with sockets or databases or Perl-compatible regexes or whatever, and the need to fix this bug is the main reason that 0.7.1 was released so soon after 0.7.0.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFGENERIC is now choosier about the methods it redefines, so that reLOADing a previously-LOADed file containing DEFGENERICs does the right thing now. Thus, the Lispy edit/reLOAD-a-little/test cycle now works as it should. (thanks to Alexey Dejneka)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug 106 (types (COMPLEX FOO) where FOO is an obscure type) was fixed by Christophe Rhodes. (He actually submitted this patch months ago, and I delayed until after 0.7.0.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug 111 (internal compiler confusion about runtime checks on FUNCTION types) was fixed by Alexey Dejneka.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Some internal cleanups (getting rid of variables which aren't needed now that the byte interpreter is gone) caused the fasl file format number to change again.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.7.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;major incompatible change: The default fasl file extension, i.e. the default extension for files produced by COMPILE-FILE, has changed to &quot;.fasl&quot;, for all architectures. (No longer &quot;.x86f&quot; and &quot;.axpf&quot;.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;compiler changes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;There are many changes in the implementation of the compiler. SBCL is now essentially a compiler-only implementation of ANSI Common Lisp. EVAL still &quot;interprets&quot; a few special cases, but almost all the interesting cases are handled by creating a LAMBDA expression, calling COMPILE on it, then calling FUNCALL on the result.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The EVAL-WHEN code has been rewritten to be ANSI-compliant, and various related bugs (IR1-1, IR1-2, IR1-3, IR1-3a) have gone away. Since the code is newer, there might still be some new bugs (though not as many as before Martin Atzmueller's fixes:-). But the new code is substantially simpler and clearer, and hopefully any remaining bugs will be simpler, less fundamental, and more fixable then the bugs in the old code.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The revised compiler is still a little unsteady on its feet. In particular,
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The debugging information it produces (particularly the names of FUNCTION objects) is sometimes much less useful than what the old compiler produced.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The support for inlining FOO when you (DECLAIM (INLINE FOO)) then do (DEFUN FOO ..) in a non-null lexical environment (e.g. within a MACROLET) has been temporarily weakened.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;There are new compiler optimizations for various functions:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;the sequence functions FIND, POSITION, FIND-IF, POSITION-IF, FIND-IF-NOT, POSITION-IF-NOT, and FILL&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the math functions TRUNCATE, FLOOR, and CEILING&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;the function-of-all-trades COERCE Mostly these should be transparent, but there's one potentially-annoying problem (bug 117): when the compiler inline-expands a function and does type analysis on the result, it can create control paths which have type mismatches, and when it can't prove that those control paths aren't taken, it will issue WARNINGs about the type mismatches. This is a particular problem in practice for the new sequence functions. It's not clear how this should be fixed, and for now, a workaround is given in the entry for 117 in the BUGS file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(Because of the interaction between the two previous items -- occasional inlining problems and new inline expansions -- some of the new sequence function optimizations won't really kick in completely until debugging information, and then inlining, are straightened out in some future version.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible changes:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;As part of a bug fix by Christophe Rhodes to DIRECTORY behavior, DIRECTORY no longer implicitly promotes NIL slots of its pathname argument to :WILD. In particular, when you ask for the contents of a directory (which you used to be able to do without explicit wildcards, e.g. (DIRECTORY &quot;/tmp/&quot;)) you now need to use explicit wildcards, e.g. (DIRECTORY &quot;/tmp/*.*&quot;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changes in behavior that ANSI explicitly defines to be implementation dependent:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The new compiler-only implementation still conforms with ANSI, but acts a little different than before. Besides the obvious changes in performance tradeoffs (that the cost per form passed to EVAL has gone up, and the cost per form executed by EVAL has gone down), the behavior of the system changes a little because there are no longer any interpreted function objects. COMPILED-FUNCTION-P is now synonymous with FUNCTIONP, and e.g. doing COMPILE on the output of interactive DEFUN is now a no-op.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The value of INTERNAL-TIME-UNITS-PER-SECOND has been increased from 100 to 1000.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The default for the USE list in MAKE-PACKAGE and DEFPACKAGE has changed from (:CL) to NIL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The CHAR-NAME of unprintable ASCII characters which, unlike e.g. #\Newline and #\Tab, don't have names specified in the ANSI Common Lisp standard, is now based on their ASCII symbolic names (#\Nul, #\Soh, #\Stx, etc.) The old CMU-CL-style names (#\Null, #\^a, #\^b, etc.) are still accepted by NAME-CHAR, but are no longer used for output.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changes in internal implementation constants:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The default value of *BYTES-CONSED-BETWEEN-GCS* has doubled, to 4 million. (If your application spends a lot of time GCing and you have a lot of RAM, you might want to experiment with increasing it even more.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The SB-C-CALL package has been merged into the SB-ALIEN package. However, almost all old code should still continue to work without immediate update, as SB-C-CALL is now a (deprecated) nickname for SB-ALIEN.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Old operator names in the style DEF-FOO are now deprecated in favor of new corresponding names DEFINE-FOO, for consistency with the naming convention used in the ANSI standard (DEFSTRUCT, DEFVAR, DEFINE-CONDITION, DEFINE-MODIFY-MACRO..). This mostly affects internal symbols, but a few supported extensions like SB-ALIEN:DEF-ALIEN-FUNCTION are also affected. (So e.g. DEF-ALIEN-FUNCTION becomes DEFINE-ALIEN-FUNCTION.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The debugger prompt sequence now goes &quot;5]&quot;, &quot;5[2]&quot;, &quot;5[3]&quot;, etc. as you get deeper into recursive calls to the debugger command loop, instead of the old &quot;5]&quot;, &quot;5]]&quot;, &quot;5]]]&quot; sequence. (I was motivated to do this when squabbles between ILISP and SBCL left me very deeply nested in the debugger. In the short term, this change will probably provoke more ILISP/SBCL squabbles, but hopefully it will be an improvement in the long run.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-ALIEN:DEFINE-ALIEN-FUNCTION (also known by the old deprecated name DEF-ALIEN-FUNCTION) now does DECLAIM FTYPE for the defined function, since declaiming return types involving aliens is (1) annoyingly messy to do by hand and (2) vital to efficient compilation of code which calls such functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-ALIEN:LOAD-FOREIGN and SB-ALIEN:LOAD-1-FOREIGN are no longer reexported by the SB-EXT package. They're solely useful for alien code, so it seems more logical that you should get them from the SB-ALIEN package, not in SB-EXT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;:SB-CONSTRAIN-FLOAT-TYPE, :SB-PROPAGATE-FLOAT-TYPE, and :SB-PROPAGATE-FUN-TYPE are no longer considered to be optional features. Instead, the code that they used to control is always built into the system.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;many other bug fixes
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;DEFSTRUCT and DEFCLASS have been substantially updated to take advantage of the new EVAL-WHEN stuff and to clean them up in general, and they are now more ANSI-compliant in a number of ways. Martin Atzmueller is responsible for a lot of this.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Besides the cleanups discussed above, Martin Atzmueller fixed several other bugs:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;fixes in READ-SEQUENCE and WRITE-SEQUENCE&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;correct ERROR type for various file operations&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;some fixes for Lisp streams&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFMETHOD syntax checking&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changing old weird representation of debug information as strings (which, among their other deficiencies, don't transform correctly when you rename packages, and don't change their print representation when you change things like *PACKAGE* and *PRINT-LENGTH*) to symbols and lists of symbols He also made several improvements and fixed several bugs in DESCRIBE.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Alexey Dejneka fixed many bugs, including classic bugs and bugs he discovered himself:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;misbehavior of WRITE-STRING/WRITE-LINE&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOOP over keys of a hash table, LOOP bugs 49b and 81 and 103, and several other LOOP problems as well&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DIRECTORY when similar filenames are present&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFGENERIC with :METHOD options&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 126, in (MAKE-STRING N :INITIAL-ELEMENT #\SPACE))&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug in the optimization of ARRAY-ELEMENT-TYPE&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;argument ordering in FIND with :TEST option&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;mishandled package designator argument in APROPOS-LIST&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;various problems in the backquote readmacro&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;a bug in APROPOS&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;probably some others that I'm not describing very well here, since the CVS log documents them by reference to sbcl-devel messages, and the SourceForge archives aren't working well.:-(&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Dan Barlow improved the Alpha port (and is making progress on the PPC port, for those of you who think different).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Besides the DIRECTORY fixes and changes mentioned elsewhere, Christophe Rhodes cleaned up the system self-test scripts (in tests/*), contributed the optimization of FIND-IF-NOT and POSITION-IF-NOT, and continues to work on the SPARC port (for those of you in a position to look down upon our little PC-compatible boxes from a great height).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PPRINT-LOGICAL-BLOCK now copies the *PRINT-LINES* value on entry and uses that copy, rather than the current dynamic value, when it's trying to decide whether to truncate output. Thus e.g. (let ((*print-lines* 50)) (pprint-logical-block (stream nil) (dotimes (i 10) (let ((*print-lines* 8)) (print (aref possiblybigthings i) stream))))) should now truncate the logical block only at 50 lines, instead of often truncating it at 8 lines, as it did before.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The doc/cmucl/ directory, containing old CMU CL documentation from the time of the fork, is no longer part of the base system. SourceForge has shut down its anonymous FTP service, and with it my original plan for distributing the old CMU CL documentation there. For now, if you need these files you can download an old SBCL source release and extract them from it.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The fasl file version number changed again, for dozens of reasons, some of which are apparent above.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.13&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;a port to the Compaq/DEC Alpha CPU, thanks to Dan Barlow&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller ported Tim Moore's marvellous CMU CL DISASSEMBLE patch, so that DISASSEMBLE output is much nicer.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The code in the SB-PROFILE package now seems reasonably stable. I still haven't decided what the final interface should look like (I'd like PROFILE to interact cleanly with TRACE, since both facilities use function encapsulation) but if you have a need for profiling now, you can probably use it successfully with the current CMU-CL-style interface.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Pathnames and *DEFAULT-DIRECTORY-DEFAULTS* are much more ANSI-compliant, thanks to various fixes and tests from Dan Barlow. Also, at Dan Barlow's suggestion, TRUENAME on a dangling symbolic link now returns the dangling link itself, and for similar reasons, TRUENAME on a cyclic symbolic link returns the cyclic link itself. (In these cases the old code signalled an error and looped endlessly, respectively.) Thus, DIRECTORY now works even in the presence of dangling and cyclic symbolic links.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Compiler trace output (the :TRACE-FILE option to COMPILE-FILE) is now a supported extension again, since the consensus on sbcl-devel was that it can be useful for ordinary development work, not just for debugging SBCL itself.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The default for SB-EXT:*DERIVE-FUNCTION-TYPES* has changed to NIL, i.e. ANSI behavior, i.e. the compiler now recognizes that currently-defined functions might be redefined later with different return types.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Hash tables can be printed readably, as inspired by CMU CL code of Eric Marsden and SBCL code of Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;better error handling in CLOS method combination, thanks to Martin Atzmueller porting Pierre Mai's CMU CL patches&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more overflow fixes for &amp;gt;16Mbyte I/O buffers&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A bug in READ has been fixed, so that now a single Ctrl-D character suffices to cause end-of-file on character streams. In particular, now you only need one Ctrl-D at the command line (not two) to exit SBCL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 26: ARRAY-DISPLACEMENT now returns (VALUES NIL 0) for undisplaced arrays.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 107 (reported as a CMU CL bug by Erik Naggum on comp.lang.lisp 2001-06-11): (WRITE #*101 :RADIX T :BASE 36) now does the right thing.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The implementation of some type tests, especially for CONDITION types, is now tidier and maybe faster, due to CMU CL code originally by Douglas Crosher, ported by Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Some math functions have been fixed, and there are new optimizers for deriving the types of COERCE and ARRAY-ELEMENT-TYPE, thanks to Raymond Toy's work on CMU CL, ported by Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(There are also some new optimizers in contrib/*-extras.lisp. Those aren't built into sbcl-0.6.13, but are a sneak preview of what's likely to be built into sbcl-0.7.0.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A bug in COPY-READTABLE was fixed. (Joao Cachopo's patch to CMU CL, ported to SBCL by Martin Atzmueller)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DESCRIBE now gives more information in some cases. (Pierre Mai's patch to CMU CL, ported to SBCL by Martin Atzmueller)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller and Bill Newman fixed some bugs in INSPECT.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;There's a new slam.sh hack to shorten the edit/compile/debug cycle for low-level changes to SBCL itself, and a new :SB-AFTER-XC-CORE target feature to control the generation of the after-xc.core file needed by slam.sh.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The ENTRY-POINTS &amp;amp;KEY argument to COMPILE-FILE is no longer supported, so that now every function gets an entry point, so that block compilation looks a little more like the plain vanilla ANSI section 3.2.2.3 scheme.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: SB-EXT:GET-BYTES-CONSED now returns the number of bytes consed since the system started, rather than the number consed since the first time the function was called. (The new definition parallels ANSI functions like CL:GET-INTERNAL-RUN-TIME.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;minor incompatible change: The old CMU-CL-style DIRECTORY options, i.e. :ALL, :FOLLOW-LINKS, and :CHECK-FOR-SUBDIRS, are no longer supported. Now DIRECTORY always does the abstract Common-Lisp-y thing, i.e. :ALL T :FOLLOW-LINKS T :CHECK-FOR-SUBDIRS T.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Fasl file version numbers are now independent of the target CPU, since historically most system changes which required version number changes have affected all CPUs equally. Similarly, the byte fasl file version is now equal to the ordinary fasl file version.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.12&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;incompatible change: The old SB-EXT:OPTIMIZE-INTERFACE declaration is no longer recognized. I apologize for this, because it was listed in SB-EXT as a supported extension, but I found that its existing behavior was poorly specified, as well as incorrectly specified, and it looked like too much of a mess to straighten it out. I have enough on my hands trying to get ANSI stuff to work..&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;many patches ported from CMU CL by Martin Atzmueller, with half a dozen bug fixes in pretty-printing and the debugger, and half a dozen others elsewhere&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 13: Floating point infinities are now supported again. They might still be a little bit flaky, but thanks to bug reports from Nathan Froyd and CMU CL patches from Raymond Toy they're not as flaky as they were.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The --noprogrammer command line option is now supported. (Its behavior is slightly different in detail from what the old man page claimed it would do, but it's still appropriate under the same circumstances that the man page talks about.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The :SB-PROPAGATE-FLOAT-TYPE and :SB-PROPAGATE-FUN-TYPE features are now supported, and enabled by default. Thus, the compiler can handle many floating point and complex operations much less inefficiently. (Thus e.g. you can implement a complex FFT without consing!)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler now detects type mismatches between DECLAIM FTYPE and DEFUN better, and implements CHECK-TYPE more correctly, and SBCL builds under CMU CL again despite its non-ANSI EVAL-WHEN, thanks to patches from Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;various fixes to make the cross-compiler more portable to ANSI-conforming-but-different cross-compilation hosts (notably Lispworks for Windows, following bug reports from Arthur Lemmens)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A bug in READ-SEQUENCE for CONCATENATED-STREAM, and a gross ANSI noncompliance in DEFMACRO &amp;amp;KEY argument parsing, have been fixed thanks to Pierre Mai's CMU CL patches.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes to keep the system from overflowing internal counters when it tries to use i/o buffers larger than 16M bytes&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 45a: Various internal functions required to support complex special functions have been merged from CMU CL sources. (When I was first setting up SBCL, I misunderstood a compile-time conditional #-OLD-SPECFUN, and so accidentally deleted them.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;improved support for type intersection and union, fixing bug 12 (e.g., now (SUBTYPEP 'KEYWORD 'SYMBOL)=&amp;gt;T,T) and some other more obscure bugs as well&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;some steps toward byte-compiling non-performance-critical parts of the system, courtesy of patches from Martin Atzmueller&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Christophe Rhodes has made some debian packages of sbcl at &amp;lt;http://www-jcsu.jesus.cam.ac.uk/ftp/pub/debian/lisp&amp;gt;. From his sbcl-devel e-mail of 2001-04-08 they're not completely stable, but are nonetheless usable. When he's ready, I'd be happy to add them to the SourceForge &quot;File Releases&quot; section. (And if anyone wants to do RPMs or *BSD packages, they'd be welcome too.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new fasl file format version number (because of changes in internal representation of (OR ..) types to accommodate the new support for (AND ..) types, among other things)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.11&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller pointed out that bugs #9 and #25 are gone in current SBCL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;bug 34 fixed by Martin Atzmueller: dumping/loading instances works better&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 40: TYPEP, SUBTYPEP, UPGRADED-ARRAY-ELEMENT-TYPE, and UPGRADED-COMPLEX-PART-TYPE now work better with of compound types built from undefined types, e.g. '(VECTOR SOME-UNDEF-TYPE).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DESCRIBE now works on structure objects again.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Most function call argument type mismatches are now handled as STYLE-WARNINGs instead of full WARNINGs, since the compiler doesn't know whether the function will be redefined before the call is executed. (The compiler could flag local calls with full WARNINGs, as per the ANSI spec &quot;3.2.2.3 Semantic Constraints&quot;, but right now it doesn't keep track of enough information to know whether calls are local in this sense.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Compiler output is now more verbose, with messages truncated later than before. (There should be some supported way for users to override the default verbosity, but I haven't decided how to provide it yet, so this behavior is still controlled by the internal SB-C::*COMPILER-ERROR-PRINT-FOO* variables in src/compiler/ir1util.lisp.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Fasl file format version numbers have increased again, because support for the Gray streams extension changes the layout of the system's STREAM objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The Gray subclassable streams extension now works, thanks to a patch from Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The full LOAD-FOREIGN extension (not just the primitive LOAD-FOREIGN-1) now works, thanks to a patch from Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The default behavior of RUN-PROGRAM has changed. Now, unlike CMU CL but like most other programs, it defaults to copying the Unix environment from the original process instead of starting the new process in an empty environment.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Extensions which manipulate the Unix environment now support an :ENVIRONMENT keyword option which doesn't smash case or do other bad things. The CMU-CL-style :ENV option is retained for porting convenience.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;LOAD-FOREIGN (and LOAD-1-FOREIGN) now support logical pathnames, as per Daniel Barlow's suggestion and Martin Atzmueller's patch&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.10&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;A patch from Martin Atzmueller seems to have solved the SIGINT problem, and as far as we know, signal-handling now works cleanly. (If you find any new bugs, please report them!)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system no longer defaults Lisp source file names to types &quot;.l&quot;, &quot;.cl&quot;, or &quot;.lsp&quot;, but only to &quot;.lisp&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler no longer uses special default file extensions for byte-compiled code. (The ANSI definition of COMPILE-FILE-PATHNAME seems to expect a single default extension for all compiled code, and there's no compelling reason to try to stretch the standard to allow two different extensions.) Instead, byte-compiled files default to the same extension as native-compiled files.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Fasl file format version numbers have increased again, because a rearrangement of internal implementation packages made some dumped symbols in old fasl files unreadable in new cores.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DECLARE/DECLAIM/PROCLAIM logic is more nearly ANSI in general, with many fewer weird special cases.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug #17 (differing COMPILE-FILE behavior between logical and physical pathnames) has been fixed, and some related misbehavior too, thanks to a patch from Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bug #30 (reader problems) is gone, thanks to a CMU CL patch by Tim Moore, ported to SBCL by Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller fixed several filesystem-related problems, including bug #36, in part by porting CMU CL patches, which were written in part by Paul Werkowski.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;More compiler warnings in src/runtime/ are gone, thanks to more patches from Martin Atzmueller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller pointed out that bug 37 was fixed by his patches some time ago.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.9&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;DESCRIBE now works on CONDITION objects.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The debugger now handles errors which arise when trying to print *DEBUG-CONDITION*, so that it's less likely to fall into infinite regress.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The build system now uses an additional file, customize-target-features.lisp, to allow local modifications to the target *FEATURES* list. (The point of this is that now I can set up a custom configuration, e.g. with :SB-SHOW debugging features enabled, without having to worry about propagating it into everyone's system when I do a &quot;cvs update&quot;.) When no customize-target-features.lisp file exists, the target *FEATURES* list should be constructed the same way as before.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bugs in DEFCONSTANT ANSI-compatibility:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;DEFCONSTANT now tests reassignments using EQL, not EQUAL, in order to warn about behavior which is undefined under the ANSI spec. Note: This is specified by ANSI, but it's not very popular with programmers. If it causes you problems, take a look at the new SB-INT:DEFCONSTANT-EQX macro in the SBCL sources for an example of a workaround which you might use to make portable ANSI-standard code which does what you want.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFCONSTANT's implementation is now based on EVAL-WHEN instead of on pre-ANSI IR1 translation magic, so it does the ANSI-specified thing when it's used as a non-toplevel form. (This is required in order to implement the DEFCONSTANT-EQX macro.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(DEFCONSTANT X 1) (DEFVAR X) (SETF X 2) no longer &quot;works&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Unfortunately, non-toplevel DEFCONSTANT forms can still do some funny things, due to bugs in the implementation of EVAL-WHEN (bug #IR1-3). This probably won't be fixed until 0.7.x. (Fortunately, non-toplevel DEFCONSTANTs are uncommon.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The core file version number and fasl file version number have been incremented, because the old noncompliant DEFCONSTANT behavior involved calling functions which no longer exist, and because I also took the opportunity to chop an unsupported slot out of the DEBUG-SOURCE structure.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 1 (error handling before read-eval-print loop starts), and redid debugger restarts and related debugger commands somewhat while doing so:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The QUIT debugger command is gone, since it did something rather different than the SB-EXT:QUIT command, and since it never worked properly outside the main toplevel read/eval/print loop. Invoking the new TOPLEVEL restart provides the same functionality.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The GO debugger command is also gone, since you can just invoke the CONTINUE restart directly instead.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The TOP debugger command is also gone, since it's redundant with the FRAME 0 command, and since it interfered with abbreviations for the TOPLEVEL restart.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now recovers better from non-PACKAGE values of the *PACKAGE* variable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now understands compound CONS types (e.g. (CONS FIXNUM T)) as required by ANSI. (thanks to Douglas Crosher's CMU CL patches, with some porting work by Martin Atzmueller)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller reviewed the CMU CL mailing lists and came back with a boatload of patches which he ported to SBCL. Now that those have been applied,
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The system tries to make sure that its low-priority messages are prefixed by semicolons, to help people who like to use syntax highlighting in their ILISP buffer. (This patch was originally due to Raymond Toy.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now optimizes INTEGER-LENGTH better, thanks to more patches originally written by Raymond Toy.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler understands coercion between single-value and multiple-VALUES type expressions better, getting rid of some very weird behavior, thanks to patches originally by Robert MacLachlan and Douglas Crosher.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system understands ANSI-style non-KEYWORD &amp;amp;KEY arguments in lambda lists, thanks to a patch originally by Pierre Mai.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system no longer bogusly warns about &quot;abbreviated type declarations&quot;.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The compiler gets less confused by inlining and RETURN-FROM, thanks to some patches originally by Tim Moore.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system no longer hangs when dumping circular lists to fasl files, thanks to a patch originally from Douglas Crosher.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller also fixed ROOM, so that it no longer fails with an undefined function error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;gave up on fixing bug 3 (forbidden-by-ANSI warning for type mismatch in structure slot initforms) for now, documented workaround instead:-|&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 4 (no WARNING for DECLAIM FTYPE of slot accessor function)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 5: added stubs for various Gray stream functions called in the not-a-CL:STREAM case, so that even when Gray streams aren't installed, at least appropriate type errors are generated&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 8: better reporting of various PROGRAM-ERRORs&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed bug 9: IGNORE and IGNORABLE now work reasonably and more consistently in DEFMETHOD forms.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;removed bug 21 from BUGS, since Martin Atzmueller points out that it doesn't seem to affect SBCL after all&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The C runtime system now builds with better optimization and many fewer warnings, thanks to lots of cleanups by Martin Atzmueller.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.8&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The system is now under CVS at SourceForge (instead of the CVS repository on my home machine).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The new signal handling code has been tweaked to treat register contents as (UNSIGNED-BYTE 32), as the old CMU CL code did, instead of (SIGNED-BYTE 32), as the C header files have it. (Code downstream, e.g. in debug-int.lisp, has implicit dependencies on the unsignedness of integer representation of machine words, and that caused the system to bomb out with infinite regress when trying to recover from type errors involving signed values, e.g. (BUTLAST '(1 2 3) -1).)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(BUTLAST NIL) and (NBUTLAST NIL) now return NIL as they should. (This was one of the bugs Peter Van Eynde reported back in July.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now uses code inspired by Colin Walters' O(N) implementation of MAP (from the cmucl-imp@cons.org mailing list, 2 September 2000) when it can't use a DEFTRANSFORM to inline the MAP operation, and there is more than one sequence argument to the MAP call (so that it can't just do ETYPECASE once and for all based on the type of the single sequence argument). (The old non-inline implementation of the general M-argument sequence-of-length-N case required O(M*N*N) time when any of the sequence arguments were LISTs.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The QUIT :UNIX-CODE keyword argument has been renamed to QUIT :UNIX-STATUS. (The old name still works, but is deprecated.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Raymond Wiker's patches to port RUN-PROGRAM from CMU CL to SBCL have been added.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Raymond Wiker's patches to port dynamic loading from Linux to FreeBSD have been added.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The BUGS file is now more nearly up to date, thanks in large part to Martin Atzmueller's review of it.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The debugger now flushes standard output streams before it begins its output (&quot;debugger invoked&quot; and so forth).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The core version number and fasl file version number have both been incremented, because of incompatible changes in the layout of static symbols.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;FINISH-OUTPUT is now called more consistently on QUIT. (It used to not be called for a saved Lisp image.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Martin Atzmueller's version of a patch to fix a compiler crash, as posted on sbcl-devel 13 September 2000, has been installed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Instead of installing Martin Atzmueller's patch for the compiler transform for SUBSEQ, I deleted the compiler transform, and transforms for some similar consing operations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A bug in signal handling which kept TRACE from working on OpenBSD has been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added enough DEFTRANSFORMs to allow (SXHASH 'FOO) to be optimized away by constant folding&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now defines its address space constants in one place (in the Lisp sources), and propagates them automatically elsewhere (through GENESIS and the sbcl.h file). Therefore, patching the address map is less unnecessarily tedious and error-prone. The Lisp names of address space constants have also been systematized.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CVS tags like dollar-Header-dollar have been removed from the sources, because they have never saved me trouble and they've been source of trouble working with patches and other diff-related operations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed the PROG1-vs.-PROGN bug in HANDLER-BIND (reported by ole.rohne@cern.ch on cmucl-help@cons.org 2000-10-25)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.7&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The system has been ported to OpenBSD.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now compiles with a simple &quot;sh make.sh&quot; on the systems that it's supported on. I.e., now you no longer need to tweak text in the target-features.lisp-expr and symlinks in src/runtime/ by hand, the make.sh takes care of it for you.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system is no longer so grossly inefficient when compiling code involving vectors implemented as general (not simple) vectors (VECTOR T), so code which dares to use VECTOR-PUSH-EXTEND and FILL-POINTER, or which dares to use the various sequence functions on non-simple vectors, takes less of a performance hit.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;There is now a primitive type predicate VECTOR-T-P to test for the (VECTOR T) type, so that e.g. (DEFUN FOO (V) (DECLARE (TYPE (VECTOR T) V)) (AREF V 3)) can now be compiled with some semblance of efficiency. (The old code turned the type declaration into a full call to %TYPEP at runtime!)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;AREF on (VECTOR T) is still not fast, since it's still compiled as a full call to SB-KERNEL:DATA-VECTOR-REF, but at least the ETYPECASE used in DATA-VECTOR-REF is now compiled reasonably efficiently. (The old version made full calls to SUBTYPEP at runtime!)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(MAKE-ARRAY 12 :FILL-POINTER T) is now executed less inefficiently, without making full calls to SUBTYPEP at runtime. (Some analogous efficiency issues for non-simple vectors specialized to element types other than T, or for non-simple multidimensional arrays, have not been addressed. They could almost certainly be handled the same way if anyone is motivated to do so.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The changes in array handling break binary compatibility, so *BACKEND-FASL-FILE-VERSION* has been bumped to 4.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(TYPEP (MAKE-ARRAY 12 :FILL-POINTER 4) 'VECTOR) now returns (VALUES T) instead of (VALUES T T).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;By following the instructions that Dan Barlow posted to sbcl-devel on 2 July 2000, I was able to enable primitive dynamic object file loading code for Linux. The full-blown CMU CL LOAD-FOREIGN functionality is not implemented (since it calls ld to resolve library references automatically, requiring RUN-PROGRAM for its implementation), but a simpler SB-EXT:LOAD-1-FOREIGN (which doesn't try to resolve library references) is now supported.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now flushes the standard output streams when it terminates, unless QUIT is used with the RECKLESSLY-P option set. It also flushes them at several other probably-convenient times, e.g. in each pass of the toplevel read-eval-print loop, and after evaluating a form given as an &quot;--eval&quot; command-line option. (These changes were motivated by a discussion of stream flushing issues on cmucl-imp in August 2000.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The source transform for TYPEP of array types no longer assumes that an array whose element type is a not-yet-defined type is implemented as an array of T, but instead punts, so that the type will be interpreted at runtime.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;There is now some support for cross-compiling in make.sh: each of the phases of make.sh has its own script. (This should be transparent to people doing ordinary, non-cross-compile builds.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Since my laptop doesn't have hundreds of megabytes of memory like my desktop machine, I became more motivated to do some items on my to-do list in order to reduce the size of the system a little:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Arrange for various needed-only-at-cold-init things to be uninterned after cold init. To support this, those things have been renamed from FOO and *FOO* to !FOO and *!FOO* (i.e., all symbols with such names are now uninterned after cold init).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Bind SB!C::*TOP-LEVEL-LAMBDA-MAX* to a nonzero value when building fasl files for cold load.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Remove the old compiler structure pooling code (which used to be conditional on the target feature :SB-ALLOC) completely.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Redo the representation of some data in cold init to be more compact. (I also looked into supporting byte compiled code at bootstrap time, which would probably reduce the size of the system a lot, but that looked too complicated, so I punted for now.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The maximum signal nesting depth in the src/runtime/ support code has been reduced from 4096 to 256. (I don't know any reason for the very large old value. If the new smaller value turns out to break something, I'll probably just bump it back up.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PPRINT-LOGICAL-BLOCK is now pickier about the types of its arguments, as per ANSI.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Many, many bugs reported by Peter Van Eynde have been added to the BUGS list; some have even been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;While enabling dynamic object file loading, I tried to make the code easier to understand, renaming various functions and variables with less ambiguous names, and changing some function calling conventions to be Lispier (e.g. returning NIL instead of 0 for failure).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;While trying to figure out how to do the OpenBSD port, I tried to clean up some of the code in src/runtime/. In particular, I dropped support for non-POSIX signal handling, added various comments, tweaked the code to reduce the number of compilation warnings, and renamed some files to increase consistency.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;To support the new automatic configuration functionality in make.sh, the source file target-features.lisp-expr has been replaced with the source file base-target-features.lisp-expr and the machine-generated file local-target-features.lisp-expr.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a stupid quoting error in make.sh so that using CMU CL &quot;lisp -batch&quot; as cross-compilation host works again&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.6&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;DESCRIBE no longer tries to call itself recursively to describe bound/fbound values, so that it no longer fails on symbols which are bound to themselves (like keywords, T, and NIL).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DESCRIBE now works on generic functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The printer now prints less-screwed-up representations of closures (not naively trying to bogusly use the %FUNCTION-NAME accessor on them).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A private symbol is used instead of the :EMPTY keyword previously used to mark empty slots in hash tables. Thus (DEFVAR *HT* (MAKE-HASH-TABLE)) (SETF (GETHASH :EMPTY *HT*) :EMPTY) (MAPHASH (LAMBDA (K V) (FORMAT T &quot;~&amp;amp;~S ~S~%&quot; K V))) now does what ANSI says that it should. (You can still get similar noncompliant behavior if bang on the hash table implementation with all the symbols you get back from DO-ALL-SYMBOLS, but at least that's a little harder to do.) This breaks binary compatibility, since tests for equality to :EMPTY are wired into things like the macroexpansion of WITH-HASH-TABLE-ITERATOR in FASL files produced by earlier implementations.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;There's now a minimal placeholder implementation for CL:STEP, as required by ANSI.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;An obscure bug in the interaction of the normal compiler, the byte compiler, inlining, and structure predicates has been patched by setting the flags for the DEFTRANSFORM of %INSTANCE-TYPEP as :WHEN :BOTH (as per Raymond Toy's suggestion on the cmucl-imp@cons.org mailing list).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Missing ordinary arguments in a macro call are now detected even when the macro lambda list contains &amp;amp;KEY or &amp;amp;REST.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The debugger no longer complains about encountering the top of the stack when you type &quot;FRAME 0&quot; to explicitly instruct it to go to the top of the stack. And it now prints the frame you request even if it's the current frame (instead of saying &quot;You are here.&quot;).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;As specified by ANSI, the system now always prints keywords as #\: followed by SYMBOL-NAME, even when *PACKAGE* is the KEYWORD package.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The default initial SIZE of HASH-TABLEs is now smaller.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Type information from CLOS class dispatch is now propagated into DEFMETHOD bodies, so that e.g. (DEFMETHOD FOO ((X SINGLE-FLOAT)) (+ X 123.0)) is now basically equivalent to (DEFMETHOD FOO ((X SINGLE-FLOAT)) (DECLARE (TYPE SINGLE-FLOAT X)) (+ X 123.0)) and the compiler can compile (+ X 123.0) as a SINGLE-FLOAT-only operation, without having to do run-time type dispatch.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The macroexpansion of DEFMETHOD has been tweaked so that it has reasonable behavior when arguments are declared IGNORE or IGNORABLE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Since I don't seem to be making big file reorganizations very often any more (and since my archive of sbcl-x.y.zv.tar.bz2 snapshots is overflowing my ability to conveniently back them up), I've finally checked the system into CVS. (The CVS repository is on my home system, not at SourceForge -- putting it on SourceForge might come later.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;SB-EXT:*GC-NOTIFY-STREAM* has been added, to control where the high-level GC-NOTIFY-FOO functions send their output. (There's still very little control of where low-level verbose GC functions send their output.) The SB-EXT:*GC-VERBOSE* variable now controls less than it used to -- the GC-NOTIFY-FOO functions are now under the control of *GC-NOTIFY-STREAM*, not *GC-VERBOSE*.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now stores the version string (LISP-IMPLEMENTATION-VERSION) in only one place in the source code, and propagates it automatically everywhere that it's needed. Thus e.g. when I bump the version from 0.6.6 to 0.6.7, I'll only need to modify the sources in one place.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The C source files now include boilerplate legalese and documentation at the head of each file (just as the Lisp source files already did).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;At Dan Barlow's suggestion, the hyperlink from the SBCL website to his page will be replaced with a link to his new CLiki service.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.5&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;Raymond Wiker's patches to port the system to FreeBSD have been merged.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The build process now looks for GNU make under the default name &quot;gmake&quot;, instead of &quot;make&quot; as it used to. If GNU make is not available as &quot;gmake&quot; on your system, you can change this default behavior by setting the GNUMAKE environment variable.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Replace #+SB-DOC with #!+SB-DOC in seq.lisp so that the system can build without error under CMU CL.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.4&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;There is now a partial SBCL user manual (with some new text and some text cribbed from the CMU CL manual).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The beginnings of a profiler have been added (starting with the CMU CL profiler and simplifying and cleaning up). Eventually the main interface should be through the TRACE macro, but for now, it's still accessed through vaguely CMU-CL-style functions and macros exported from the package SB-PROFILE.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Some problems left over from porting CMU CL to the new cross-compilation bootstrap process have been cleaned up:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;DISASSEMBLE now works. (There was a problem in using DEFMACRO instead of SB!XC:DEFMACRO, compounded by an oversight on my part when getting rid of the compiler *BACKEND* stuff.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The value of *NULL-TYPE* was screwed up, because it was being initialized before the type system knew the final definition of the 'NULL type. This screwed up several key optimizations in the compiler, causing inefficiency in all sorts of places. (I found it because I wanted to understand why GET-INTERNAL-RUN-TIME was consing.)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed a bug in DEFGENERIC which was causing it to overwrite preexisting PROCLAIM FTYPE information. Unfortunately this broke binary compatibility again, since now the forms output by DEFGENERIC to refer to functions which didn't exist in 0.6.3.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added declarations so that SB-PCL::USE-CACHING-DFUN-P can use the new (as of 0.6.3) transform for SOME into MAP into inline code&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changed (MOD 1000000) type declarations for Linux timeval.tv_usec slot values to (INTEGER 0 1000000), so that the time code will no longer occasionally get blown up by Linux returning 1000000 microseconds&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;PRINT-UNREADABLE-OBJECT has been tweaked to make the spacing of its output conform to the ANSI spec. (Alas, this makes its output uglier in the :TYPE T :IDENTITY NIL case, but them's the breaks.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A full call to MAP NIL with a single sequence argument no longer conses.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixes to problems pointed out by Martin Atzmueller:&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The manual page no longer talks about multiprocessing as though it were currently supported.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The ILISP support patches have been removed from the distribution, because as of version 5.10.1, ILISP now supports SBCL without us having to maintain patches.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added a modified version of Raymond Toy's recent CMU CL patch for EQUALP comparison of HASH-TABLE&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.3&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;The system still can't cross-compile itself with *TYPE-SYSTEM-INITIALIZED* (and all the consistency checks that entails), but at least it can compile more of itself that way than it used to be able to, and various buglets which were uncovered by trying to cross-compile itself that way have now been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;This release breaks binary compatibility again. This time at least I've incremented the FASL file format version to 2, so that the problem can be detected reliably instead of just causing weird errors.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;various new style warnings:
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;using DEFUN, DEFMETHOD, or DEFGENERIC to overwrite an old definition&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;using the deprecated EVAL/LOAD/COMPILE situation names in EVAL-WHEN&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;using the lexical binding of a variable named in the *FOO* style&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DESCRIBE has been substantially rewritten. It now calls DESCRIBE-OBJECT as specified by ANSI.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;*RANDOM-STATE* is no longer automatically initialized from (GET-UNIVERSAL-TIME), but instead from a constant seed. Thus, the default behavior of the system is to repeat its behavior every time it's run. If you'd like to change this behavior, you can always explicitly set the seed from (GET-UNIVERSAL-TIME); whereas under the old convention there was no comparably easy way to get the system to repeat its behavior every time it was run.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Support for the pre-CLTL2 interpretation of FUNCTION declarations as FTYPE declarations has been removed, in favor of their ANSI interpretation as TYPE FUNCTION declarations. (See p. 228 of CLTL2.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The quantifiers SOME, EVERY, NOTANY, and NOTEVERY no longer cons when the types of their sequence arguments can be determined at compile time. This is done through a new open code expansion for MAP which eliminates consing for (MAP NIL ..), and reduces consing otherwise, when sequence argument types can be determined at compile time.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The optimizer now transforms COERCE into an identity operation when it can prove that the coerced object is already of the correct type. (This can be a win for machine generated code, including the output of other optimization transforms, such as the MAP transform above.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Credit information has been moved from source file headers into CREDITS.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Source file headers have been made more standard.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The CASE macro now compiles without complaining even when it has no clauses.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.2&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;(Note that the way that the PCL macroexpansions were rewritten to accommodate the change in DEFGENERIC below breaks binary compatibility. That is, fasl files compiled under sbcl-0.6.1 may not run under sbcl-0.6.2. Once we get out of alpha releases, i.e. hit release 1.0.0, we'll probably try to maintain binary compatibility between maintenance releases, e.g. between sbcl-1.4.3 and sbcl-1.4.4. Until then, however, it might be fairly common for maintenance releases to break binary compatibility.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A bug in the calculation of WARNINGS-P and FAILURE-P in COMPILE-FILE has been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The reporting of unhandled signals has been changed to print some explanatory text as well as the report form. (Previously only the report form was printed.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The macroexpansion for DEFGENERIC now DECLAIMs the function that it defines, so that the compiler no longer issues undefined function warnings for compiled-but-not-yet-loaded generic functions.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The CLTL-style &quot;LISP&quot; and &quot;USER&quot; nicknames for the &quot;COMMON-LISP&quot; and &quot;COMMON-LISP-USER&quot; packages have been removed. Now only the &quot;CL&quot; and &quot;CL-USER&quot; standard nicknames from the &quot;11.1.2 Standardized Packages&quot; section of the ANSI spec are supported.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The &quot;&quot; nickname for the &quot;KEYWORD&quot; package has been removed. The reader still handles symbol tokens which begin with a package marker as keywords, but it doesn't expose its mechanism for doing so in the (PACKAGE-NICKNAMES (FIND-PACKAGE &quot;KEYWORD&quot;)) list.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The system now issues STYLE-WARNINGs for contradictory TYPE proclamations. (Warnings for contradictory FTYPE proclamations would be nice too, but those can't be done usefully unless the type system is made smarter about FUNCTION types.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The names of source files &quot;*host-*.lisp&quot; and &quot;*target-*.lisp&quot; have been systematized, so that &quot;*target-*.lisp is supposed to exist only on the target and imply that there's a related file which exists on the host, and *host-*.lisp is supposed to exist only on the host and imply that there's a related file which exists on the target. This involves a lot of renaming. Hopefully the acute confusion caused by the renaming will be justified by the reduction in chronic confusion..
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;runtime-type.lisp -&amp;gt; early-target-type.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;target-type.lisp -&amp;gt; late-target-type.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;early-host-format.lisp -&amp;gt; early-format.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;late-host-format.lisp -&amp;gt; late-format.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-error.lisp -&amp;gt; misc-error.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;early-error.lisp -&amp;gt; early-target-error.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;late-error.lisp -&amp;gt; late-target-error.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-defboot.lisp -&amp;gt; early-defboot.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;code/misc.lisp -&amp;gt; code/target-misc.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;code/host-misc.lisp -&amp;gt; code/misc.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;code/numbers.lisp -&amp;gt; code/target-numbers.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;code/early-numbers.lisp -&amp;gt; numbers.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;early-host-type.lisp -&amp;gt; early-type.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;late-host-type.lisp -&amp;gt; late-type.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-typep.lisp -&amp;gt; typep.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;load.lisp -&amp;gt; target-load.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-load.lisp -&amp;gt; load.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-disassem.lisp -&amp;gt; disassem.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-insts.lisp -&amp;gt; insts.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;byte-comp.lisp -&amp;gt; target-byte-comp.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-byte-comp.lisp -&amp;gt; byte-comp.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-signal.lisp -&amp;gt; signal.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;host-defstruct.lisp -&amp;gt; defstruct.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;late-target-type.lisp -&amp;gt; deftypes-for-target.lisp Furthermore, several other previously target-only files foo.lisp (e.g. hash-table.lisp and random.lisp) have been split into a target-and-host foo.lisp file and a target-only target-foo.lisp file, with their key type definitions in the target-and-host part, so that the cross-compiler will know more about target types.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;DEFSTRUCT BACKEND, and the BACKEND-valued *BACKEND* variable, have gone away. In their place are various *BACKEND-FOO* variables corresponding to the slots of the old structure.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;A bug which caused the SB-COLD bootstrap-time package to be propagated into the target SBCL has been fixed.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;The chill.lisp system for loading cold code into a running SBCL now works better.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Support for the CMU CL &quot;scavenger hook&quot; extension has been removed. (It was undocumented and unused in the CMU CL sources that SBCL was derived from, and stale in sbcl-0.6.1.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Various errors in the cross-compiler type system were detected by running the cross-compiler with *TYPE-SYSTEM-INITIALIZED* (enabling various consistency checks). Many of them were fixed, but some hard problems remain, so the compiler is back to running without *TYPE-SYSTEM-INITIALIZED* for now.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;As part of the cross-compiler type system cleanup, I implemented DEF!TYPE and got rid of early-ugly-duplicates.lisp.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;I have started adding UNCROSS calls throughout the type system and the INFO database. (Thus perhaps eventually the blanket UNCROSS on cross-compiler input files will be able to go away, and various kludges with it).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;CONSTANTP now returns true for quoted forms (as explicitly required by the ANSI spec).&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.1&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;changed build optimization from (SAFETY 1) to (SAFETY 3) as a short-term fix for various type-unsafety bugs, e.g. failures with (LENGTH 123) and (MAKE-LIST -1). In the longer term, it ought to become true that declarations are assertions even at SAFETY 1. For now, it's not quite true even at SAFETY 3, but it's at least more nearly true.. (Note that this change seems to increases the size of the system by O(5%) and to decrease the speed of the compiler by 20% or more.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changed ALIEN printing to be much more abbreviated, as a short-term fix for the problem of printing dozens of lines of distracting information about low-level system machinery as part of the top stack frame on entry to the debugger when an undefined function was called.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tweaked the debugger's use of WITH-STANDARD-IO-SYNTAX so that *PACKAGE* is not reset to COMMON-LISP-USER.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Compilation of stuff related to dyncount.lisp has been made conditional on the :SB-DYNCOUNT target feature, so that the ordinary core system is smaller. The various dyncount-related symbols have been moved into a new &quot;SB-DYNCOUNT&quot; package.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tty-inspect.lisp has been renamed to inspect.lisp.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;unix-glibc2.lisp has been renamed to unix.lisp, and the :GLIBC2 feature has gone away. (When we eventually port to other flavors of libc and/or Unix, we'll try to make the differences between flavors invisible at the user level.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Various other *FEATURES* tags, and/or their associated conditionals, have been removed if obsolescent, or given better documentation, or sometimes given more-mnemonic names.&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;New in version 0.6.0&lt;/h2&gt;
&lt;span class=&quot;back-to-top-link&quot;&gt;&lt;a href=&quot;http://www.sbcl.org/all-news.html?2.0.0#top&quot;&gt;Back to top&lt;/a&gt;&lt;/span&gt;
&lt;ul class=&quot;news-items&quot;&gt;&lt;li class=&quot;news-item&quot;&gt;tidied up &quot;make.sh&quot; script&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tidied up system directory structure&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;better &quot;clean.sh&quot; behavior&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added doc/FOR-CMUCL-DEVELOPERS&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;many many small tweaks to output format, e.g. removing possibly-confusing trailing #\. character in DESCRIBE-INSTANCE&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;(EQUALP #\A 'A) no longer signals an error.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;new hashing code, including EQUALP hashing&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tidied up Lisp initialization and toplevel&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;initialization files (e.g. /etc/sbclrc and $HOME/.sbclrc)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;command line argument processing&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added POSIX-GETENV function to deal with Unix-ish environment variables&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;more-Unixy handling of *STANDARD-INPUT* and other Lisp streams, e.g. terminating SBCL on EOF&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;non-verbose GC by default&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;There is no more &quot;sbcl&quot; shell script; the sbcl file is now the C runtime executable (just like CMU CL).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;removed some unused fops, e.g. FOP-UNIFORM-VECTOR, FOP-CHARACTER, and FOP-POP-FOR-EFFECT&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tweaked debug-info.lisp and debug-int.lisp to make the debugger store symbol and package information as Lisp native symbol and package objects instead of strings naming symbols and strings naming packages. This way, whenever packages are renamed (as in warm init), debug information is transformed along with everything else.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tweaked the optimization policy declarations which control the building of SBCL itself. Now, among other things, the system no longer saves source location debugging information. (This helps two problems at once by reducing SBCL size and by keeping SBCL from trying to look for its sources -- which may not exist -- when reporting errors.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added src/cold/chill.lisp, to let SBCL read its own cold sources for debugging and testing purposes&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;cleaned up printing, making the printer call PRINT-OBJECT for instances, and using PRINT-UNREADABLE-OBJECT for most PRINT-OBJECT methods, giving nearly-ANSI behavior&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;converted almost all special variables to use *FOO* naming convention&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deleted PARSE-TIME functionality, since it can be done portably&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;moved some files out of cold init into warm init&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deleted DEFUN UNDEFINED-VALUE, replaced (UNDEFINED-VALUE) forms with (VALUES) forms&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;regularized formatting of source files&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added an install.sh script&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed ridiculous memory usage of cross-compiler by making compiler/alloc.lisp not try to do pooling unless it can hook itself into the GC of the cross-compilation host. Now the system builds nicely on my old laptop.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added :SB-ALLOC in target-features.lisp-expr&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deleted mention of :ANSI-DOC from target-features.lisp-expr (since it was not implemented)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;re-did condition handling and note reporting in the compiler. Notes are no longer handled by signalling conditions. Style warnings and warnings are handled more correctly and reported in such a way that it's easy to find one or the other in your output (so that you can e.g. figure out which of many problems caused COMPILE-FILE to return FAILURE-P).&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changed the severity of several compiler warnings from full WARNING to STYLE-WARNING in order to conform with the ANSI spec; also changed compiler note reporting so that it doesn't use the condition system at all (and hence affects neither FAILURE-P nor WARNINGS-P in the COMPILE-FILE command)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;made PROCLAIM and DECLAIM conform to ANSI. PROCLAIM is now an ordinary function. As a consequence, START-BLOCK and END-BLOCK declarations are no longer supported, since their implementation was deeply intertwingled with the magical, non-ANSI treatment that PROCLAIM received in CMU CL.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;removed bogus &quot;support&quot; for compiler macros named (SETF FOO), and removed the compiler macro for SETF INFO (but only after making a fool of myself on the cmucl-imp mailing list by posting a bogus patch for DEFINE-COMPILER-MACRO..)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;Compiled files containing forms which have side effects on the Lisp reader (such as DEFPACKAGE forms) are now handled more correctly. (Compiler queuing of top level lambdas has been suppressed by setting *TOP-LEVEL-LAMBDA-MAX* to 0. )&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deleted various currently-unused source files, e.g. gengc.lisp. They may be added back at some point e.g. when porting to other architectures, but until they are it's distracting to distribute them and to try to maintain them.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;deleted &quot;UNCROSS couldn't recurse through..&quot; style warnings, since there were so many of them they're just distractions, and UNCROSS is known to be able to handle the current sources&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;moved PROFILE functionality into TRACE, so that it will be clear how the wrapping and unwrapping of functions when you profile them interacts with the wrapping and unwrapping of functions when you trace them. (Actually, the functionality isn't there yet, but at least the interface specification is there. Hopefully, the functionality will arrive with some future maintenance release.)&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;removed host-oops.lisp&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;changed signature of QUIT function to allow UNIX-CODE argument&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;fixed READ-SEQUENCE bug&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;tweaked verbose GC output so that it looks more like the progress output that ANSI specifies for functions like LOAD&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;set up the system on sourceforge.com, with home pages, mailing lists, etc.&lt;/li&gt;
&lt;li class=&quot;news-item&quot;&gt;added &amp;lt;http://sbcl.sourceforge.com&amp;gt; to the banner information printed by the sbcl executable&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
<pubDate>Sun, 29 Dec 2019 11:13:42 +0000</pubDate>
<dc:creator>bjoli</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://www.sbcl.org/all-news.html?2.0.0</dc:identifier>
</item>
<item>
<title>Encoding your WiFi access point password into a QR code</title>
<link>https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/</link>
<guid isPermaLink="true" >https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/</guid>
<description>&lt;p&gt;Up until recently, it was a pain to defend againt &lt;a href=&quot;https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access#Weak_password&quot;&gt;WPA2 brute-force attacks&lt;/a&gt; by using a random 63-character password (the maximum in &lt;a href=&quot;https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access#Target_users_(authentication_key_distribution&quot;&gt;WPA-Personal&lt;/a&gt;) mode). Thanks to Android 10 and iOS 11 supporting reading WiFi passwords from a QR code, this is finally a practical defense.&lt;/p&gt;&lt;h2 id=&quot;Generating_the_QR_code&quot;&gt;Generating the QR code&lt;/h2&gt;
&lt;p&gt;After installing the &lt;a href=&quot;https://packages.debian.org/stable/qrencode&quot;&gt;&lt;code&gt;qrencode&lt;/code&gt;&lt;/a&gt; package, run the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;qrencode -o wifi.png &quot;WIFI:T:WPA;S:&amp;lt;SSID&amp;gt;;P:&amp;lt;PASSWORD&amp;gt;;;&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;substituting &lt;code&gt;&amp;lt;SSID&amp;gt;&lt;/code&gt; for the name of your WiFi network and &lt;code&gt;&amp;lt;PASSWORD&amp;gt;&lt;/code&gt; for the 63-character password you hopefully generated with &lt;code&gt;pwgen -s 63&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only pitfall I ran into is that if you include a trailing newline character (for example piping &lt;code&gt;echo &quot;...&quot;&lt;/code&gt; into &lt;code&gt;qrencode&lt;/code&gt; as opposed to &lt;code&gt;echo -n &quot;...&quot;&lt;/code&gt;) then it will fail on both iOS and Android.&lt;/p&gt;
&lt;h2 id=&quot;Scanning_the_QR_code&quot;&gt;Scanning the QR code&lt;/h2&gt;
&lt;p&gt;On iOS, simply open the camera app and scan the QR code to bring up a notification which allows you to connect to the WiFi network:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/ios_qr_scanner.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;On Android, go into the WiFi settings and tap on the WiFi network you want to join:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/android_wifi_settings.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;then click the QR icon in the password field and scan the code:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/android_qr_scanner.png&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;In-browser_alternative&quot;&gt;In-browser alternative&lt;/h2&gt;
&lt;p&gt;If you can't do this locally for some reason, there is also an &lt;a href=&quot;https://qifi.org/&quot;&gt;in-browser QR code generator&lt;/a&gt; with &lt;a href=&quot;https://github.com/evgeni/qifi&quot;&gt;source code available&lt;/a&gt;.&lt;/p&gt;
</description>
<pubDate>Sun, 29 Dec 2019 07:50:15 +0000</pubDate>
<dc:creator>edward</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/</dc:identifier>
</item>
<item>
<title>Programmers Should Plan for Lower Pay?</title>
<link>https://www.jefftk.com/p/programmers-should-plan-for-lower-pay</link>
<guid isPermaLink="true" >https://www.jefftk.com/p/programmers-should-plan-for-lower-pay</guid>
<description>&lt;em&gt;Summary: we don't understand why programmers are paid so well. If you're a programmer, there's enough of a chance that this is temporary that it's worth explicitly planning for a future in which you're laid off and unable to find similarly high-paying work.&lt;/em&gt;&lt;p&gt;Programmers are paid surprisingly well given how much work it is to become one. Here's &lt;a href=&quot;https://danluu.com/bimodal-compensation/&quot;&gt;Dan Luu comparing it to other high-paid careers&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;21&quot;&gt;
&lt;p&gt;If you look at law, you have to win the prestige lottery and get into a top school, which will cost hundreds of thousands of dollars. Then you have to win the grades lottery and get good enough grades to get into a top firm. And then you have to continue winning tournaments to avoid getting kicked out, which requires sacrificing any semblance of a personal life. Consulting, investment banking, etc., are similar. Compensation appears to be proportional to the level of sacrifice (e.g., investment bankers are paid better, but work even longer hours than lawyers).&lt;/p&gt;
&lt;p&gt;Medicine seems to be a bit better from the sacrifice standpoint because there's a cartel which limits entry into the field, but the combination of medical school and residency is still incredibly brutal compared to most jobs at places like Facebook and Google.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My sister is currently a second-year medical resident, and &quot;incredibly brutal compared...&quot; feels like a understatement to me. She works 80hr weeks, often nights, helping people with deeply personal and painful issues that are hard to leave behind when you go home. This is after four years in medical school, with still at least a year to go before starting to earn doctor-level money. When I compare it to how I started programming right out of college, &lt;a href=&quot;https://www.jefftk.com/money&quot;&gt;making more money&lt;/a&gt; for 40hr weeks and no on-call, I feel embarrassed.&lt;/p&gt;
&lt;p&gt;What makes me nervous, though, is that we don't really understand why programmers are paid this well, and especially why this has persisted. People have a bunch of guesses:&lt;/p&gt;
&lt;ul readability=&quot;6.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;Demand: as software eats the world there are far more profitable things for programmers to do than people to do them.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Supply: it's hard to train people to be programmers, fewer people are suited for it than expected, and bootcamps haven't worked out as well as we'd hoped.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Startups: big companies need to compete with programmers choosing to go off and start companies, which is harder to do in many fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;Novelty: the field is relatively new, and something about new fields leads to higher profits and higher pay, maybe via competition not being mature yet?&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Something else: I'd be curious if people have other thoughts—leave comments!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
Things are pretty good now, and seem to have gotten even better since Dan's &lt;a href=&quot;https://danluu.com/bimodal-compensation/&quot;&gt;2015 post&lt;/a&gt;, but something could change. Given how poorly we understand this, and the wide range of ways the future might be different, I think we should treat collapse as a real possibility: not something that will definitely happen, or that's going to happen on any certain timescale, but something likely enough prepare against.
&lt;p&gt;Specifically, I'd recommend living on a small portion of your income and saving a multiple of your living expenses. It's far more painful to cut expenses back than it is to keep them from growing, and the more years of expenses you have saved the better a position you'll be in. If you take this approach and there's no bust, you're still in a good place: you can &lt;a href=&quot;https://en.wikipedia.org/wiki/FIRE_movement&quot;&gt;retire early&lt;/a&gt; or &lt;a href=&quot;https://www.jefftk.com/p/one-million-dollars&quot;&gt;support things you believe in&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If being laid off and unable to find similarly high-paying work would be a disaster, figure out what you need to change so that it wouldn't be.&lt;/p&gt;
&lt;p&gt;(This isn't really specific to programming, but I think the chances of a bust are higher in programming than in more mature fields.)&lt;/p&gt;
</description>
<pubDate>Sun, 29 Dec 2019 05:03:42 +0000</pubDate>
<dc:creator>luu</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.jefftk.com/p/programmers-should-plan-for-lower-pay</dc:identifier>
</item>
<item>
<title>SamyGO: Open-Source Firmware for Samsung TVs (2011)</title>
<link>https://www.samygo.tv/</link>
<guid isPermaLink="true" >https://www.samygo.tv/</guid>
<description>&lt;head&gt;&lt;meta content=&quot;text/html; charset=utf-8&quot; http-equiv=&quot;content-type&quot;/&gt;&lt;title&gt;SamyGO, Samsung Firmware on the GO&lt;/title&gt;&lt;meta content=&quot;Erdem U. Altinyurt&quot; name=&quot;author&quot;/&gt;&lt;meta content=&quot;Samsung Television firmware customization project&quot; name=&quot;description&quot;/&gt;&lt;meta name=&quot;keywords&quot; content=&quot;Samsung, TV, Television, HD, HDTV, High Definition, Firmware, Hack, Custom, Plasma TV, LED TV, LCD TV, Satellite, Dish, Cable TV, PVR&quot;/&gt;&lt;link href=&quot;images/SamyGO_TVx72.png&quot; rel=&quot;icon&quot; type=&quot;image/PNG/&quot;/&gt;&lt;meta name=&quot;google-site-verification&quot; content=&quot;evm-XZvo8UlQ8UJ6Htyf49mpxPQWOXsDOIKyx8vwheU&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;27.752454118651&quot;&gt;
&lt;noscript&gt;
&lt;p&gt;&lt;img src=&quot;https://piwik.samygo.tv/piwik.php?idsite=1&quot; alt=&quot;&quot;/&gt;&lt;/p&gt;
&lt;/noscript&gt;
&lt;center readability=&quot;12.14169867691&quot;&gt;&lt;img width=&quot;400&quot; src=&quot;https://www.samygo.tv/images/SamyGO_Logo.svg&quot;/&gt;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; readability=&quot;3.0859053497942&quot;&gt;&lt;tr readability=&quot;6.1718106995885&quot;&gt;&lt;td valign=&quot;top&quot;/&gt;
&lt;td&gt;       &lt;/td&gt;
&lt;td&gt;
&lt;table readability=&quot;3.988082340195&quot;&gt;&lt;tr readability=&quot;7.97616468039&quot;&gt;&lt;td align=&quot;center&quot; valign=&quot;top&quot;&gt;&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/WIR7AI1JDAQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt; &lt;br/&gt;&lt;strong&gt;&lt;a href=&quot;https://forum.samygo.tv/viewtopic.php?f=16&amp;amp;t=2701&quot;&gt;Samsung D6 Series TVs Root tools and Gadgets...&lt;br/&gt;Released on 11/11/11 11:11 PM&lt;/a&gt;&lt;/strong&gt;&lt;center&gt;


&lt;/center&gt;
&lt;/td&gt;
&lt;td&gt;&lt;small&gt;&lt;small&gt;# ./busybox uname -a&lt;br/&gt;Linux localhost 2.6.18_SELP-ARM #79 PREEMPT Thu Mar 12 11:15:31 KST&lt;/small&gt;&lt;/small&gt;
&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; readability=&quot;4.7819314641745&quot;&gt;&lt;tr readability=&quot;11.954828660436&quot;&gt;&lt;td&gt;&lt;small&gt;&lt;small&gt;2009 armv6l unknown&lt;br/&gt;# cat /proc/cpuinfo&lt;br/&gt;Processor : ARMv6-compatible processor rev 7 (v6l)&lt;br/&gt;BogoMIPS : 599.65&lt;br/&gt;Features : swp half fastmult vfp edsp java&lt;br/&gt;CPU implementer : 0x41&lt;br/&gt;CPU architecture: 6TEJ&lt;br/&gt;CPU variant : 0x0&lt;br/&gt;CPU part : 0xb76&lt;br/&gt;CPU revision : 7&lt;br/&gt;Cache type : write-back&lt;br/&gt;Cache clean : cp15 c7 ops&lt;br/&gt;Cache lockdown : format C&lt;br/&gt;Cache format : Harvard&lt;br/&gt;I size : 16384&lt;br/&gt;I assoc : 4&lt;br/&gt;I line length : 32&lt;br/&gt;I sets : 128&lt;br/&gt;D size : 16384&lt;br/&gt;D assoc : 4&lt;br/&gt;D line length : 32&lt;br/&gt;D sets : 128&lt;/small&gt;&lt;/small&gt;&lt;/td&gt;
&lt;td&gt;    &lt;/td&gt;
&lt;td readability=&quot;6.6506024096386&quot;&gt;&lt;p&gt;&lt;strong&gt;an0ther Pr0jects:&lt;/strong&gt;&lt;br/&gt;&lt;a title=&quot;wxHexEditor&quot; href=&quot;http://wxhexeditor.org&quot;&gt;&lt;img src=&quot;https://www.samygo.tv/images/death/wxHexIcon.png&quot; align=&quot;center&quot;/&gt;wxHexEditor&lt;/a&gt; 64-bit Hex Editor for Linux,Win,Mac.&lt;br/&gt;&lt;a title=&quot;DivFix++&quot; href=&quot;http://divfix.org&quot;&gt;&lt;img src=&quot;https://www.samygo.tv/images/death/DivFixpp32x32.png&quot; align=&quot;center&quot;/&gt;DivFix++&lt;/a&gt; AVI Repair &amp;amp; Preview tool.&lt;br/&gt;&lt;a title=&quot;project_Meteorite&quot; href=&quot;http://meteorite.sourceforge.net/&quot;&gt;&lt;img src=&quot;https://www.samygo.tv/images/death/Meteorite-logo-32x32.png&quot; align=&quot;center&quot;/&gt;Meteorite&lt;/a&gt; Matroska / MKV video repair tool.&lt;br/&gt;I made them. Just try.&lt;br/&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
Hardware : Samsung-SDP83 Eval. Board(64bit 512MB)&lt;br/&gt;Revision : 0000&lt;br/&gt;Serial : 0000000000000000&lt;div class=&quot;cse-branding-bottom&quot;&gt;

&lt;div class=&quot;cse-branding-logo&quot;&gt;&lt;img src=&quot;https://www.google.com/images/poweredby_transparent/poweredby_FFFFFF.gif&quot; alt=&quot;Google&quot;/&gt;&lt;/div&gt;
&lt;p&gt;SamyGO.tv Site Search&lt;/p&gt;
&lt;/div&gt;

&lt;br/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;SamyGO is a project for legal reverse engineering and research on Samsung Television firmwares which is Open Sourced, partially.&lt;br/&gt;We try to fix problems that in the firmware. We don't want money from you. We make this modifications for us and ourself but you are allowed to join us.&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;&lt;small&gt;( The recent set of Samsung TV Firmwares is based on Linux core (GPL), which our work will be building upon. Therefore all work done is in compliance with and subject to the GPL )&lt;/small&gt;&lt;br/&gt;&lt;h2&gt;Enable PVR for Cable TV or Dish Network&lt;/h2&gt;
SamyGO enables PVR on some TV models so users could record their favorite programs.&lt;br/&gt;Notice: PVR requires use of internal digital tuner of TV. Dish recording available only for TVs that has DVB-S tuner inside.&lt;br/&gt;So Set top box setups not supported.&lt;br/&gt;Ask your Satelite Dish or Cable TV Provider if they allows use of internal tuner with Crypt cards.&lt;h2&gt;For your Samsung Plasma TV, LCD TV and LED TV&lt;/h2&gt;
SamyGo supports LED, LCD and Plasma TV models made by Samsung from 2009.&lt;br/&gt;You can look if SamyGO supports your television model from tables bellow.&lt;p&gt;&lt;a href=&quot;https://forum.samygo.tv/viewtopic.php?f=16&amp;amp;t=2060&quot;&gt;!!! Old SamyGO Forum Members Read Here !!!&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://forum.samygo.tv&quot;&gt;SamyGO Forum&lt;/a&gt;     &lt;a href=&quot;https://wiki.samygo.tv&quot;&gt;SamyGO Wiki&lt;/a&gt;     &lt;a href=&quot;https://wiki.samygo.tv/index.php5/Content_Library_applications_list&quot;&gt;SamyGO Applications&lt;/a&gt;     &lt;a href=&quot;https://twitter.com/SamyGOProject&quot;&gt;SamyGO on twitter&lt;/a&gt;      &lt;a href=&quot;https://www.facebook.com/samygo.project&quot;&gt;SamyGO on facebook&lt;/a&gt;&lt;br/&gt;     &lt;a href=&quot;http://webchat.freenode.net/?channels=samygo&amp;amp;uio=d4&quot;&gt;SamyGO IRC #samygo on irc.freenode.net&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;small&gt;&lt;small&gt;Founder and legal responsible of the project: &lt;a href=&quot;http://erdem_ua.users.sourceforge.net&quot;&gt;Erdem U. Altinyurt&lt;/a&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;&lt;p&gt;This site also uses affiliate networks like &lt;a href=&quot;http://skimlinksvsviglink.info&quot;&gt;VigLink and SkimLinks&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/center&gt;
&lt;/body&gt;</description>
<pubDate>Sun, 29 Dec 2019 03:05:14 +0000</pubDate>
<dc:creator>pabs3</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.samygo.tv/</dc:identifier>
</item>
<item>
<title>Computer Science from the Bottom Up (2016)</title>
<link>https://www.bottomupcs.com/index.xhtml</link>
<guid isPermaLink="true" >https://www.bottomupcs.com/index.xhtml</guid>
<description>&lt;div readability=&quot;13.66328011611&quot;&gt;

&lt;div&gt;
&lt;div class=&quot;author&quot;&gt;
&lt;h3 class=&quot;author&quot;&gt;&lt;span class=&quot;firstname&quot;&gt;Ian&lt;/span&gt; &lt;span class=&quot;surname&quot;&gt;Wienand&lt;/span&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div readability=&quot;23&quot;&gt;
&lt;p class=&quot;copyright&quot;&gt;Copyright © 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019 Ian Wienand&lt;/p&gt;
&lt;/div&gt;
&lt;div readability=&quot;7.8127413127413&quot;&gt;
&lt;div class=&quot;legalnotice&quot; id=&quot;legal&quot; readability=&quot;11.513513513514&quot;&gt;
&lt;p&gt;This work is licensed under the Creative Commons Attribution-ShareAlike License. To view a copy of this license, visit &lt;a class=&quot;link&quot; href=&quot;http://creativecommons.org/licenses/by-sa/3.0/&quot; target=&quot;_top&quot;&gt;http://creativecommons.org/licenses/by-sa/3.0/&lt;/a&gt; or send a letter to Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;</description>
<pubDate>Sun, 29 Dec 2019 00:51:06 +0000</pubDate>
<dc:creator>merlinsbrain</dc:creator>
<dc:format>application/xhtml+xml</dc:format>
<dc:identifier>https://www.bottomupcs.com/index.xhtml</dc:identifier>
</item>
</channel>
</rss>