<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Go 1.16 Release Notes</title>
<link>https://golang.org/doc/go1.16</link>
<guid isPermaLink="true" >https://golang.org/doc/go1.16</guid>
<description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction to Go 1.16&lt;/h2&gt;
&lt;p&gt;The latest Go release, version 1.16, arrives six months after &lt;a href=&quot;https://golang.org/doc/go1.15&quot;&gt;Go 1.15&lt;/a&gt;. Most of its changes are in the implementation of the toolchain, runtime, and libraries. As always, the release maintains the Go 1 &lt;a href=&quot;https://golang.org/doc/go1compat.html&quot;&gt;promise of compatibility&lt;/a&gt;. We expect almost all Go programs to continue to compile and run as before.&lt;/p&gt;
&lt;h2 id=&quot;language&quot;&gt;Changes to the language&lt;/h2&gt;
&lt;p&gt;There are no changes to the language.&lt;/p&gt;
&lt;h2 id=&quot;ports&quot;&gt;Ports&lt;/h2&gt;
&lt;h3 id=&quot;darwin&quot;&gt;Darwin and iOS&lt;/h3&gt;
&lt;p&gt; Go 1.16 adds support of 64-bit ARM architecture on macOS (also known as Apple Silicon) with &lt;code&gt;GOOS=darwin&lt;/code&gt;, &lt;code&gt;GOARCH=arm64&lt;/code&gt;. Like the &lt;code&gt;darwin/amd64&lt;/code&gt; port, the &lt;code&gt;darwin/arm64&lt;/code&gt; port supports cgo, internal and external linking, &lt;code&gt;c-archive&lt;/code&gt;, &lt;code&gt;c-shared&lt;/code&gt;, and &lt;code&gt;pie&lt;/code&gt; build modes, and the race detector.&lt;/p&gt;
&lt;p&gt; The iOS port, which was previously &lt;code&gt;darwin/arm64&lt;/code&gt;, has been renamed to &lt;code&gt;ios/arm64&lt;/code&gt;. &lt;code&gt;GOOS=ios&lt;/code&gt; implies the &lt;code&gt;darwin&lt;/code&gt; build tag, just as &lt;code&gt;GOOS=android&lt;/code&gt; implies the &lt;code&gt;linux&lt;/code&gt; build tag. This change should be transparent to anyone using gomobile to build iOS apps.&lt;/p&gt;
&lt;p&gt; Go 1.16 adds an &lt;code&gt;ios/amd64&lt;/code&gt; port, which targets the iOS simulator running on AMD64-based macOS. Previously this was unofficially supported through &lt;code&gt;darwin/amd64&lt;/code&gt; with the &lt;code&gt;ios&lt;/code&gt; build tag set. See also &lt;a href=&quot;https://golang.org/misc/ios/README&quot;&gt;&lt;code&gt;misc/ios/README&lt;/code&gt;&lt;/a&gt; for details about how to build programs for iOS and iOS simulator.&lt;/p&gt;
&lt;p&gt; Go 1.16 is the last release that will run on macOS 10.12 Sierra. Go 1.17 will require macOS 10.13 High Sierra or later.&lt;/p&gt;
&lt;h3 id=&quot;netbsd&quot;&gt;NetBSD&lt;/h3&gt;
&lt;p&gt; Go now supports the 64-bit ARM architecture on NetBSD (the &lt;code&gt;netbsd/arm64&lt;/code&gt; port).&lt;/p&gt;
&lt;h3 id=&quot;openbsd&quot;&gt;OpenBSD&lt;/h3&gt;
&lt;p&gt; Go now supports the MIPS64 architecture on OpenBSD (the &lt;code&gt;openbsd/mips64&lt;/code&gt; port). This port does not yet support cgo.&lt;/p&gt;
&lt;p&gt; On the 64-bit x86 and 64-bit ARM architectures on OpenBSD (the &lt;code&gt;openbsd/amd64&lt;/code&gt; and &lt;code&gt;openbsd/arm64&lt;/code&gt; ports), system calls are now made through &lt;code&gt;libc&lt;/code&gt;, instead of directly using the &lt;code&gt;SYSCALL&lt;/code&gt;/&lt;code&gt;SVC&lt;/code&gt; instruction. This ensures forward-compatibility with future versions of OpenBSD. In particular, OpenBSD 6.9 onwards will require system calls to be made through &lt;code&gt;libc&lt;/code&gt; for non-static Go binaries.&lt;/p&gt;
&lt;h3 id=&quot;386&quot;&gt;386&lt;/h3&gt;
&lt;p&gt; As &lt;a href=&quot;https://golang.org/doc/go1.15#386&quot;&gt;announced&lt;/a&gt; in the Go 1.15 release notes, Go 1.16 drops support for x87 mode compilation (&lt;code&gt;GO386=387&lt;/code&gt;). Support for non-SSE2 processors is now available using soft float mode (&lt;code&gt;GO386=softfloat&lt;/code&gt;). Users running on non-SSE2 processors should replace &lt;code&gt;GO386=387&lt;/code&gt; with &lt;code&gt;GO386=softfloat&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;riscv&quot;&gt;RISC-V&lt;/h3&gt;
&lt;p&gt; The &lt;code&gt;linux/riscv64&lt;/code&gt; port now supports cgo and &lt;code&gt;-buildmode=pie&lt;/code&gt;. This release also includes performance optimizations and code generation improvements for RISC-V.&lt;/p&gt;

&lt;h3 id=&quot;go-command&quot;&gt;Go command&lt;/h3&gt;
&lt;h4 id=&quot;modules&quot;&gt;Modules&lt;/h4&gt;
&lt;p&gt; Module-aware mode is enabled by default, regardless of whether a &lt;code&gt;go.mod&lt;/code&gt; file is present in the current working directory or a parent directory. More precisely, the &lt;code&gt;GO111MODULE&lt;/code&gt; environment variable now defaults to &lt;code&gt;on&lt;/code&gt;. To switch to the previous behavior, set &lt;code&gt;GO111MODULE&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; Build commands like &lt;code&gt;go&lt;/code&gt; &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; no longer modify &lt;code&gt;go.mod&lt;/code&gt; and &lt;code&gt;go.sum&lt;/code&gt; by default. Instead, they report an error if a module requirement or checksum needs to be added or updated (as if the &lt;code&gt;-mod=readonly&lt;/code&gt; flag were used). Module requirements and sums may be adjusted with &lt;code&gt;go&lt;/code&gt; &lt;code&gt;mod&lt;/code&gt; &lt;code&gt;tidy&lt;/code&gt; or &lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; &lt;code&gt;go&lt;/code&gt; &lt;code&gt;install&lt;/code&gt; now accepts arguments with version suffixes (for example, &lt;code&gt;go&lt;/code&gt; &lt;code&gt;install&lt;/code&gt; &lt;code&gt;example.com/cmd@v1.0.0&lt;/code&gt;). This causes &lt;code&gt;go&lt;/code&gt; &lt;code&gt;install&lt;/code&gt; to build and install packages in module-aware mode, ignoring the &lt;code&gt;go.mod&lt;/code&gt; file in the current directory or any parent directory, if there is one. This is useful for installing executables without affecting the dependencies of the main module.&lt;/p&gt;
&lt;p&gt; &lt;code&gt;go&lt;/code&gt; &lt;code&gt;install&lt;/code&gt;, with or without a version suffix (as described above), is now the recommended way to build and install packages in module mode. &lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt; should be used with the &lt;code&gt;-d&lt;/code&gt; flag to adjust the current module's dependencies without building packages, and use of &lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt; to build and install packages is deprecated. In a future release, the &lt;code&gt;-d&lt;/code&gt; flag will always be enabled.&lt;/p&gt;
&lt;p&gt; &lt;code&gt;retract&lt;/code&gt; directives may now be used in a &lt;code&gt;go.mod&lt;/code&gt; file to indicate that certain published versions of the module should not be used by other modules. A module author may retract a version after a severe problem is discovered or if the version was published unintentionally.&lt;/p&gt;
&lt;p&gt; The &lt;code&gt;go&lt;/code&gt; &lt;code&gt;mod&lt;/code&gt; &lt;code&gt;vendor&lt;/code&gt; and &lt;code&gt;go&lt;/code&gt; &lt;code&gt;mod&lt;/code&gt; &lt;code&gt;tidy&lt;/code&gt; subcommands now accept the &lt;code&gt;-e&lt;/code&gt; flag, which instructs them to proceed despite errors in resolving missing packages.&lt;/p&gt;
&lt;p&gt; The &lt;code&gt;go&lt;/code&gt; command now ignores requirements on module versions excluded by &lt;code&gt;exclude&lt;/code&gt; directives in the main module. Previously, the &lt;code&gt;go&lt;/code&gt; command used the next version higher than an excluded version, but that version could change over time, resulting in non-reproducible builds.&lt;/p&gt;
&lt;p&gt; In module mode, the &lt;code&gt;go&lt;/code&gt; command now disallows import paths that include non-ASCII characters or path elements with a leading dot character (&lt;code&gt;.&lt;/code&gt;). Module paths with these characters were already disallowed (see &lt;a href=&quot;https://golang.org/ref/mod#go-mod-file-ident&quot;&gt;Module paths and versions&lt;/a&gt;), so this change affects only paths within module subdirectories.&lt;/p&gt;
&lt;h4 id=&quot;embed&quot;&gt;Embedding Files&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; command now supports including static files and file trees as part of the final executable, using the new &lt;code&gt;//go:embed&lt;/code&gt; directive. See the documentation for the new &lt;a href=&quot;https://golang.org/pkg/embed/&quot;&gt;&lt;code&gt;embed&lt;/code&gt;&lt;/a&gt; package for details.&lt;/p&gt;
&lt;h4 id=&quot;go-test&quot;&gt;&lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt; When using &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt;, a test that calls &lt;code&gt;os.Exit(0)&lt;/code&gt; during execution of a test function will now be considered to fail. This will help catch cases in which a test calls code that calls &lt;code&gt;os.Exit(0)&lt;/code&gt; and thereby stops running all future tests. If a &lt;code&gt;TestMain&lt;/code&gt; function calls &lt;code&gt;os.Exit(0)&lt;/code&gt; that is still considered to be a passing test.&lt;/p&gt;
&lt;p&gt; &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; reports an error when the &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt; flags are used together with unknown flags. Normally, unknown flags are passed to tests, but when &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt; are used, tests are not run.&lt;/p&gt;
&lt;h4 id=&quot;go-get&quot;&gt;&lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt; The &lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt; &lt;code&gt;-insecure&lt;/code&gt; flag is deprecated and will be removed in a future version. This flag permits fetching from repositories and resolving custom domains using insecure schemes such as HTTP, and also bypasses module sum validation using the checksum database. To permit the use of insecure schemes, use the &lt;code&gt;GOINSECURE&lt;/code&gt; environment variable instead. To bypass module sum validation, use &lt;code&gt;GOPRIVATE&lt;/code&gt; or &lt;code&gt;GONOSUMDB&lt;/code&gt;. See &lt;code&gt;go&lt;/code&gt; &lt;code&gt;help&lt;/code&gt; &lt;code&gt;environment&lt;/code&gt; for details.&lt;/p&gt;
&lt;p&gt; &lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt; &lt;code&gt;example.com/mod@patch&lt;/code&gt; now requires that some version of &lt;code&gt;example.com/mod&lt;/code&gt; already be required by the main module. (However, &lt;code&gt;go&lt;/code&gt; &lt;code&gt;get&lt;/code&gt; &lt;code&gt;-u=patch&lt;/code&gt; continues to patch even newly-added dependencies.)&lt;/p&gt;
&lt;h4 id=&quot;govcs&quot;&gt;&lt;code&gt;GOVCS&lt;/code&gt; environment variable&lt;/h4&gt;
&lt;p&gt; &lt;code&gt;GOVCS&lt;/code&gt; is a new environment variable that limits which version control tools the &lt;code&gt;go&lt;/code&gt; command may use to download source code. This mitigates security issues with tools that are typically used in trusted, authenticated environments. By default, &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;hg&lt;/code&gt; may be used to download code from any repository. &lt;code&gt;svn&lt;/code&gt;, &lt;code&gt;bzr&lt;/code&gt;, and &lt;code&gt;fossil&lt;/code&gt; may only be used to download code from repositories with module paths or package paths matching patterns in the &lt;code&gt;GOPRIVATE&lt;/code&gt; environment variable. See &lt;a href=&quot;https://golang.org/cmd/go/#hdr-Controlling_version_control_with_GOVCS&quot;&gt;&lt;code&gt;go&lt;/code&gt; &lt;code&gt;help&lt;/code&gt; &lt;code&gt;vcs&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 id=&quot;all-pattern&quot;&gt;The &lt;code&gt;all&lt;/code&gt; pattern&lt;/h4&gt;
&lt;p&gt; When the main module's &lt;code&gt;go.mod&lt;/code&gt; file declares &lt;code&gt;go&lt;/code&gt; &lt;code&gt;1.16&lt;/code&gt; or higher, the &lt;code&gt;all&lt;/code&gt; package pattern now matches only those packages that are transitively imported by a package or test found in the main module. (Packages imported by &lt;em&gt;tests of&lt;/em&gt; packages imported by the main module are no longer included.) This is the same set of packages retained by &lt;code&gt;go&lt;/code&gt; &lt;code&gt;mod&lt;/code&gt; &lt;code&gt;vendor&lt;/code&gt; since Go 1.11.&lt;/p&gt;
&lt;h4 id=&quot;toolexec&quot;&gt;The &lt;code&gt;-toolexec&lt;/code&gt; build flag&lt;/h4&gt;
&lt;p&gt; When the &lt;code&gt;-toolexec&lt;/code&gt; build flag is specified to use a program when invoking toolchain programs like compile or asm, the environment variable &lt;code&gt;TOOLEXEC_IMPORTPATH&lt;/code&gt; is now set to the import path of the package being built.&lt;/p&gt;
&lt;h4 id=&quot;i-flag&quot;&gt;The &lt;code&gt;-i&lt;/code&gt; build flag&lt;/h4&gt;
&lt;p&gt; The &lt;code&gt;-i&lt;/code&gt; flag accepted by &lt;code&gt;go&lt;/code&gt; &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt; &lt;code&gt;install&lt;/code&gt;, and &lt;code&gt;go&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; is now deprecated. The &lt;code&gt;-i&lt;/code&gt; flag instructs the &lt;code&gt;go&lt;/code&gt; command to install packages imported by packages named on the command line. Since the build cache was introduced in Go 1.10, the &lt;code&gt;-i&lt;/code&gt; flag no longer has a significant effect on build times, and it causes errors when the install directory is not writable.&lt;/p&gt;
&lt;h4 id=&quot;list-buildid&quot;&gt;The &lt;code&gt;list&lt;/code&gt; command&lt;/h4&gt;
&lt;p&gt; When the &lt;code&gt;-export&lt;/code&gt; flag is specified, the &lt;code&gt;BuildID&lt;/code&gt; field is now set to the build ID of the compiled package. This is equivalent to running &lt;code&gt;go&lt;/code&gt; &lt;code&gt;tool&lt;/code&gt; &lt;code&gt;buildid&lt;/code&gt; on &lt;code&gt;go&lt;/code&gt; &lt;code&gt;list&lt;/code&gt; &lt;code&gt;-exported&lt;/code&gt; &lt;code&gt;-f&lt;/code&gt; &lt;code&gt;{{.Export}}&lt;/code&gt;, but without the extra step.&lt;/p&gt;
&lt;h4 id=&quot;overlay-flag&quot;&gt;The &lt;code&gt;-overlay&lt;/code&gt; flag&lt;/h4&gt;
&lt;p&gt; The &lt;code&gt;-overlay&lt;/code&gt; flag specifies a JSON configuration file containing a set of file path replacements. The &lt;code&gt;-overlay&lt;/code&gt; flag may be used with all build commands and &lt;code&gt;go&lt;/code&gt; &lt;code&gt;mod&lt;/code&gt; subcommands. It is primarily intended to be used by editor tooling such as gopls to understand the effects of unsaved changes to source files. The config file maps actual file paths to replacement file paths and the &lt;code&gt;go&lt;/code&gt; command and its builds will run as if the actual file paths exist with the contents given by the replacement file paths, or don't exist if the replacement file paths are empty.&lt;/p&gt;
&lt;h3 id=&quot;cgo&quot;&gt;Cgo&lt;/h3&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/cmd/cgo&quot;&gt;cgo&lt;/a&gt; tool will no longer try to translate C struct bitfields into Go struct fields, even if their size can be represented in Go. The order in which C bitfields appear in memory is implementation dependent, so in some cases the cgo tool produced results that were silently incorrect.&lt;/p&gt;
&lt;h3 id=&quot;vet&quot;&gt;Vet&lt;/h3&gt;
&lt;h4 id=&quot;vet-testing-T&quot;&gt;New warning for invalid testing.T use in goroutines&lt;/h4&gt;
&lt;p&gt; The vet tool now warns about invalid calls to the &lt;code&gt;testing.T&lt;/code&gt; method &lt;code&gt;Fatal&lt;/code&gt; from within a goroutine created during the test. This also warns on calls to &lt;code&gt;Fatalf&lt;/code&gt;, &lt;code&gt;FailNow&lt;/code&gt;, and &lt;code&gt;Skip{,f,Now}&lt;/code&gt; methods on &lt;code&gt;testing.T&lt;/code&gt; tests or &lt;code&gt;testing.B&lt;/code&gt; benchmarks.&lt;/p&gt;
&lt;p&gt;Calls to these methods stop the execution of the created goroutine and not the &lt;code&gt;Test*&lt;/code&gt; or &lt;code&gt;Benchmark*&lt;/code&gt; function. So these are &lt;a href=&quot;https://golang.org/pkg/testing/#T.FailNow&quot;&gt;required&lt;/a&gt; to be called by the goroutine running the test or benchmark function. For example:&lt;/p&gt;
&lt;pre&gt;
func TestFoo(t *testing.T) {
    go func() {
        if condition() {
            t.Fatal(&quot;oops&quot;) // This exits the inner func instead of TestFoo.
        }
        ...
    }()
}
&lt;/pre&gt;
&lt;p&gt;Code calling &lt;code&gt;t.Fatal&lt;/code&gt; (or a similar method) from a created goroutine should be rewritten to signal the test failure using &lt;code&gt;t.Error&lt;/code&gt; and exit the goroutine early using an alternative method, such as using a &lt;code&gt;return&lt;/code&gt; statement. The previous example could be rewritten as:&lt;/p&gt;
&lt;pre&gt;
func TestFoo(t *testing.T) {
    go func() {
        if condition() {
            t.Error(&quot;oops&quot;)
            return
        }
        ...
    }()
}
&lt;/pre&gt;
&lt;h4 id=&quot;vet-frame-pointer&quot;&gt;New warning for frame pointer&lt;/h4&gt;
&lt;p&gt; The vet tool now warns about amd64 assembly that clobbers the BP register (the frame pointer) without saving and restoring it, contrary to the calling convention. Code that doesn't preserve the BP register must be modified to either not use BP at all or preserve BP by saving and restoring it. An easy way to preserve BP is to set the frame size to a nonzero value, which causes the generated prologue and epilogue to preserve the BP register for you. See &lt;a href=&quot;https://golang.org/cl/248260&quot;&gt;CL 248260&lt;/a&gt; for example fixes.&lt;/p&gt;
&lt;h4 id=&quot;vet-asn1-unmarshal&quot;&gt;New warning for asn1.Unmarshal&lt;/h4&gt;
&lt;p&gt; The vet tool now warns about incorrectly passing a non-pointer or nil argument to &lt;a href=&quot;https://golang.org/pkg/encoding/asn1/#Unmarshal&quot;&gt;&lt;code&gt;asn1.Unmarshal&lt;/code&gt;&lt;/a&gt;. This is like the existing checks for &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Unmarshal&quot;&gt;&lt;code&gt;encoding/json.Unmarshal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/encoding/xml/#Unmarshal&quot;&gt;&lt;code&gt;encoding/xml.Unmarshal&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;runtime&quot;&gt;Runtime&lt;/h2&gt;
&lt;p&gt;The new &lt;a href=&quot;https://golang.org/pkg/runtime/metrics/&quot;&gt;&lt;code&gt;runtime/metrics&lt;/code&gt;&lt;/a&gt; package introduces a stable interface for reading implementation-defined metrics from the Go runtime. It supersedes existing functions like &lt;a href=&quot;https://golang.org/pkg/runtime/#ReadMemStats&quot;&gt;&lt;code&gt;runtime.ReadMemStats&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/runtime/debug/#GCStats&quot;&gt;&lt;code&gt;debug.GCStats&lt;/code&gt;&lt;/a&gt; and is significantly more general and efficient. See the package documentation for more details.&lt;/p&gt;
&lt;p&gt; Setting the &lt;code&gt;GODEBUG&lt;/code&gt; environment variable to &lt;code&gt;inittrace=1&lt;/code&gt; now causes the runtime to emit a single line to standard error for each package &lt;code&gt;init&lt;/code&gt;, summarizing its execution time and memory allocation. This trace can be used to find bottlenecks or regressions in Go startup performance. The &lt;a href=&quot;https://golang.org/pkg/runtime/#hdr-Environment_Variables&quot;&gt;&lt;code&gt;GODEBUG&lt;/code&gt; documentation&lt;/a&gt; describes the format.&lt;/p&gt;
&lt;p&gt; On Linux, the runtime now defaults to releasing memory to the operating system promptly (using &lt;code&gt;MADV_DONTNEED&lt;/code&gt;), rather than lazily when the operating system is under memory pressure (using &lt;code&gt;MADV_FREE&lt;/code&gt;). This means process-level memory statistics like RSS will more accurately reflect the amount of physical memory being used by Go processes. Systems that are currently using &lt;code&gt;GODEBUG=madvdontneed=1&lt;/code&gt; to improve memory monitoring behavior no longer need to set this environment variable.&lt;/p&gt;
&lt;p&gt; Go 1.16 fixes a discrepancy between the race detector and the &lt;a href=&quot;https://golang.org/ref/mem&quot;&gt;Go memory model&lt;/a&gt;. The race detector now more precisely follows the channel synchronization rules of the memory model. As a result, the detector may now report races it previously missed.&lt;/p&gt;
&lt;h2 id=&quot;compiler&quot;&gt;Compiler&lt;/h2&gt;
&lt;p&gt; The compiler can now inline functions with non-labeled &lt;code&gt;for&lt;/code&gt; loops, method values, and type switches. The inliner can also detect more indirect calls where inlining is possible.&lt;/p&gt;
&lt;h2 id=&quot;linker&quot;&gt;Linker&lt;/h2&gt;
&lt;p&gt; This release includes additional improvements to the Go linker, reducing linker resource usage (both time and memory) and improving code robustness/maintainability. These changes form the second half of a two-release project to &lt;a href=&quot;https://golang.org/s/better-linker&quot;&gt;modernize the Go linker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The linker changes in 1.16 extend the 1.15 improvements to all supported architecture/OS combinations (the 1.15 performance improvements were primarily focused on &lt;code&gt;ELF&lt;/code&gt;-based OSes and &lt;code&gt;amd64&lt;/code&gt; architectures). For a representative set of large Go programs, linking is 20-25% faster than 1.15 and requires 5-15% less memory on average for &lt;code&gt;linux/amd64&lt;/code&gt;, with larger improvements for other architectures and OSes. Most binaries are also smaller as a result of more aggressive symbol pruning.&lt;/p&gt;
&lt;p&gt; On Windows, &lt;code&gt;go build -buildmode=c-shared&lt;/code&gt; now generates Windows ASLR DLLs by default. ASLR can be disabled with &lt;code&gt;--ldflags=-aslr=false&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;library&quot;&gt;Core library&lt;/h2&gt;
&lt;h3 id=&quot;library-embed&quot;&gt;Embedded Files&lt;/h3&gt;
&lt;p&gt;The new &lt;a href=&quot;https://golang.org/pkg/embed/&quot;&gt;&lt;code&gt;embed&lt;/code&gt;&lt;/a&gt; package provides access to files embedded in the program during compilation using the new &lt;a href=&quot;https://golang.org/doc/go1.16#embed&quot;&gt;&lt;code&gt;//go:embed&lt;/code&gt; directive&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;fs&quot;&gt;File Systems&lt;/h3&gt;
&lt;p&gt;The new &lt;a href=&quot;https://golang.org/pkg/io/fs/&quot;&gt;&lt;code&gt;io/fs&lt;/code&gt;&lt;/a&gt; package defines the &lt;a href=&quot;https://golang.org/pkg/io/fs/#FS&quot;&gt;&lt;code&gt;fs.FS&lt;/code&gt;&lt;/a&gt; interface, an abstraction for read-only trees of files. The standard library packages have been adapted to make use of the interface as appropriate.&lt;/p&gt;
&lt;p&gt;On the producer side of the interface, the new &lt;a href=&quot;https://golang.org/pkg/embed/#FS&quot;&gt;&lt;code&gt;embed.FS&lt;/code&gt;&lt;/a&gt; type implements &lt;code&gt;fs.FS&lt;/code&gt;, as does &lt;a href=&quot;https://golang.org/pkg/archive/zip/#Reader&quot;&gt;&lt;code&gt;zip.Reader&lt;/code&gt;&lt;/a&gt;. The new &lt;a href=&quot;https://golang.org/pkg/os/#DirFS&quot;&gt;&lt;code&gt;os.DirFS&lt;/code&gt;&lt;/a&gt; function provides an implementation of &lt;code&gt;fs.FS&lt;/code&gt; backed by a tree of operating system files.&lt;/p&gt;
&lt;p&gt;On the consumer side, the new &lt;a href=&quot;https://golang.org/pkg/net/http/#FS&quot;&gt;&lt;code&gt;http.FS&lt;/code&gt;&lt;/a&gt; function converts an &lt;code&gt;fs.FS&lt;/code&gt; to an &lt;a href=&quot;https://golang.org/pkg/net/http/#FileSystem&quot;&gt;&lt;code&gt;http.FileSystem&lt;/code&gt;&lt;/a&gt;. Also, the &lt;a href=&quot;https://golang.org/pkg/html/template/&quot;&gt;&lt;code&gt;html/template&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;&lt;code&gt;text/template&lt;/code&gt;&lt;/a&gt; packages’ &lt;a href=&quot;https://golang.org/pkg/html/template/#ParseFS&quot;&gt;&lt;code&gt;ParseFS&lt;/code&gt;&lt;/a&gt; functions and methods read templates from an &lt;code&gt;fs.FS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For testing code that implements &lt;code&gt;fs.FS&lt;/code&gt;, the new &lt;a href=&quot;https://golang.org/pkg/testing/fstest/&quot;&gt;&lt;code&gt;testing/fstest&lt;/code&gt;&lt;/a&gt; package provides a &lt;a href=&quot;https://golang.org/pkg/testing/fstest/#TestFS&quot;&gt;&lt;code&gt;TestFS&lt;/code&gt;&lt;/a&gt; function that checks for and reports common mistakes. It also provides a simple in-memory file system implementation, &lt;a href=&quot;https://golang.org/pkg/testing/fstest/#MapFS&quot;&gt;&lt;code&gt;MapFS&lt;/code&gt;&lt;/a&gt;, which can be useful for testing code that accepts &lt;code&gt;fs.FS&lt;/code&gt; implementations.&lt;/p&gt;
&lt;h3 id=&quot;ioutil&quot;&gt;Deprecation of io/ioutil&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://golang.org/pkg/io/ioutil/&quot;&gt;&lt;code&gt;io/ioutil&lt;/code&gt;&lt;/a&gt; package has turned out to be a poorly defined and hard to understand collection of things. All functionality provided by the package has been moved to other packages. The &lt;code&gt;io/ioutil&lt;/code&gt; package remains and will continue to work as before, but we encourage new code to use the new definitions in the &lt;a href=&quot;https://golang.org/pkg/io/&quot;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/os/&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; packages. Here is a list of the new locations of the names exported by &lt;code&gt;io/ioutil&lt;/code&gt;:&lt;/p&gt;
&lt;h3 id=&quot;minor_library_changes&quot;&gt;Minor changes to the library&lt;/h3&gt;
&lt;p&gt;As always, there are various minor changes and updates to the library, made with the Go 1 &lt;a href=&quot;https://golang.org/doc/go1compat&quot;&gt;promise of compatibility&lt;/a&gt; in mind.&lt;/p&gt;
&lt;dl id=&quot;archive/zip&quot; readability=&quot;-1.2285714285714&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/archive/zip/&quot;&gt;archive/zip&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.72413793103448&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/archive/zip/#Reader.Open&quot;&gt;&lt;code&gt;Reader.Open&lt;/code&gt;&lt;/a&gt; method implements the &lt;a href=&quot;https://golang.org/pkg/io/fs/#FS&quot;&gt;&lt;code&gt;fs.FS&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/dsa&quot; readability=&quot;-1.0857142857143&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/dsa/&quot;&gt;crypto/dsa&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.6271186440678&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/crypto/dsa/&quot;&gt;&lt;code&gt;crypto/dsa&lt;/code&gt;&lt;/a&gt; package is now deprecated. See &lt;a href=&quot;https://golang.org/issue/40337&quot;&gt;issue #40337&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/hmac&quot; readability=&quot;-0.92708333333333&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/hmac/&quot;&gt;crypto/hmac&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.98333333333333&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/crypto/hmac/#New&quot;&gt;&lt;code&gt;New&lt;/code&gt;&lt;/a&gt; will now panic if separate calls to the hash generation function fail to return new values. Previously, the behavior was undefined and invalid outputs were sometimes generated.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/tls&quot; readability=&quot;5.8558456299659&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/tls/&quot;&gt;crypto/tls&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;14.381609195402&quot;&gt;
&lt;p&gt; I/O operations on closing or closed TLS connections can now be detected using the new &lt;a href=&quot;https://golang.org/pkg/net/#ErrClosed&quot;&gt;&lt;code&gt;net.ErrClosed&lt;/code&gt;&lt;/a&gt; error. A typical use would be &lt;code&gt;errors.Is(err, net.ErrClosed)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; A default write deadline is now set in &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#Conn.Close&quot;&gt;&lt;code&gt;Conn.Close&lt;/code&gt;&lt;/a&gt; before sending the &quot;close notify&quot; alert, in order to prevent blocking indefinitely.&lt;/p&gt;
&lt;p&gt; Clients now return a handshake error if the server selects &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#ConnectionState.NegotiatedProtocol&quot;&gt;an ALPN protocol&lt;/a&gt; that was not in &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#Config.NextProtos&quot;&gt;the list advertised by the client&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; Servers will now prefer other available AEAD cipher suites (such as ChaCha20Poly1305) over AES-GCM cipher suites if either the client or server doesn't have AES hardware support, unless both &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#Config.PreferServerCipherSuites&quot;&gt;&lt;code&gt;Config.PreferServerCipherSuites&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#Config.CipherSuites&quot;&gt;&lt;code&gt;Config.CipherSuites&lt;/code&gt;&lt;/a&gt; are set. The client is assumed not to have AES hardware support if it does not signal a preference for AES-GCM cipher suites.&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/crypto/tls/#Config.Clone&quot;&gt;&lt;code&gt;Config.Clone&lt;/code&gt;&lt;/a&gt; now returns nil if the receiver is nil, rather than panicking.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;crypto/x509&quot; readability=&quot;11.23872026251&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/crypto/x509/&quot;&gt;crypto/x509&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;25.401822700911&quot;&gt;
&lt;p&gt;The &lt;code&gt;GODEBUG=x509ignoreCN=0&lt;/code&gt; flag will be removed in Go 1.17. It enables the legacy behavior of treating the &lt;code&gt;CommonName&lt;/code&gt; field on X.509 certificates as a host name when no Subject Alternative Names are present.&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#ParseCertificate&quot;&gt;&lt;code&gt;ParseCertificate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#CreateCertificate&quot;&gt;&lt;code&gt;CreateCertificate&lt;/code&gt;&lt;/a&gt; now enforce string encoding restrictions for the &lt;code&gt;DNSNames&lt;/code&gt;, &lt;code&gt;EmailAddresses&lt;/code&gt;, and &lt;code&gt;URIs&lt;/code&gt; fields. These fields can only contain strings with characters within the ASCII range.&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#CreateCertificate&quot;&gt;&lt;code&gt;CreateCertificate&lt;/code&gt;&lt;/a&gt; now verifies the generated certificate's signature using the signer's public key. If the signature is invalid, an error is returned, instead of a malformed certificate.&lt;/p&gt;
&lt;p&gt; DSA signature verification is no longer supported. Note that DSA signature generation was never supported. See &lt;a href=&quot;https://golang.org/issue/40337&quot;&gt;issue #40337&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; On Windows, &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#Certificate.Verify&quot;&gt;&lt;code&gt;Certificate.Verify&lt;/code&gt;&lt;/a&gt; will now return all certificate chains that are built by the platform certificate verifier, instead of just the highest ranked chain.&lt;/p&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#SystemRootsError.Unwrap&quot;&gt;&lt;code&gt;SystemRootsError.Unwrap&lt;/code&gt;&lt;/a&gt; method allows accessing the &lt;a href=&quot;https://golang.org/pkg/crypto/x509/#SystemRootsError.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; field through the &lt;a href=&quot;https://golang.org/pkg/errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; package functions.&lt;/p&gt;
&lt;p&gt; On Unix systems, the &lt;code&gt;crypto/x509&lt;/code&gt; package is now more efficient in how it stores its copy of the system cert pool. Programs that use only a small number of roots will use around a half megabyte less memory.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;debug/elf&quot; readability=&quot;-1.4901960784314&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/debug/elf/&quot;&gt;debug/elf&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.90243902439024&quot;&gt;
&lt;p&gt; More &lt;a href=&quot;https://golang.org/pkg/debug/elf/#DT_NULL&quot;&gt;&lt;code&gt;DT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/debug/elf/#PT_NULL&quot;&gt;&lt;code&gt;PT&lt;/code&gt;&lt;/a&gt; constants have been added.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;encoding/asn1&quot; readability=&quot;-0.75115207373272&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/encoding/asn1&quot;&gt;encoding/asn1&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.79802955665025&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/encoding/asn1/#Unmarshal&quot;&gt;&lt;code&gt;Unmarshal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/encoding/asn1/#UnmarshalWithParams&quot;&gt;&lt;code&gt;UnmarshalWithParams&lt;/code&gt;&lt;/a&gt; now return an error instead of panicking when the argument is not a pointer or is nil. This change matches the behavior of other encoding packages such as &lt;a href=&quot;https://golang.org/pkg/encoding/json&quot;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;encoding/json&quot; readability=&quot;-0.41988950276243&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/encoding/json/&quot;&gt;encoding/json&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;1.8083832335329&quot;&gt;
&lt;p&gt; The &lt;code&gt;json&lt;/code&gt; struct field tags understood by &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/encoding/json/#Unmarshal&quot;&gt;&lt;code&gt;Unmarshal&lt;/code&gt;&lt;/a&gt;, and related functionality now permit semicolon characters within a JSON object name for a Go struct field.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;encoding/xml&quot; readability=&quot;1.9183673469388&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/encoding/xml/&quot;&gt;encoding/xml&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;7&quot;&gt;
&lt;p&gt; The encoder has always taken care to avoid using namespace prefixes beginning with &lt;code&gt;xml&lt;/code&gt;, which are reserved by the XML specification. Now, following the specification more closely, that check is case-insensitive, so that prefixes beginning with &lt;code&gt;XML&lt;/code&gt;, &lt;code&gt;XmL&lt;/code&gt;, and so on are also avoided.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;flag&quot; readability=&quot;-0.91666666666667&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/flag/&quot;&gt;flag&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.94039735099338&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/flag/#Func&quot;&gt;&lt;code&gt;Func&lt;/code&gt;&lt;/a&gt; function allows registering a flag implemented by calling a function, as a lighter-weight alternative to implementing the &lt;a href=&quot;https://golang.org/pkg/flag/#Value&quot;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;go/build&quot; readability=&quot;3.4423076923077&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/go/build/&quot;&gt;go/build&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;9.0821917808219&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/go/build/#Package&quot;&gt;&lt;code&gt;Package&lt;/code&gt;&lt;/a&gt; struct has new fields that report information about &lt;code&gt;//go:embed&lt;/code&gt; directives in the package: &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.EmbedPatterns&quot;&gt;&lt;code&gt;EmbedPatterns&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.EmbedPatternPos&quot;&gt;&lt;code&gt;EmbedPatternPos&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.TestEmbedPatterns&quot;&gt;&lt;code&gt;TestEmbedPatterns&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.TestEmbedPatternPos&quot;&gt;&lt;code&gt;TestEmbedPatternPos&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.XTestEmbedPatterns&quot;&gt;&lt;code&gt;XTestEmbedPatterns&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.XTestEmbedPatternPos&quot;&gt;&lt;code&gt;XTestEmbedPatternPos&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/go/build/#Package&quot;&gt;&lt;code&gt;Package&lt;/code&gt;&lt;/a&gt; field &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.IgnoredGoFiles&quot;&gt;&lt;code&gt;IgnoredGoFiles&lt;/code&gt;&lt;/a&gt; will no longer include files that start with &quot;_&quot; or &quot;.&quot;, as those files are always ignored. &lt;code&gt;IgnoredGoFiles&lt;/code&gt; is for files ignored because of build constraints.&lt;/p&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/go/build/#Package&quot;&gt;&lt;code&gt;Package&lt;/code&gt;&lt;/a&gt; field &lt;a href=&quot;https://golang.org/pkg/go/build/#Package.IgnoredOtherFiles&quot;&gt;&lt;code&gt;IgnoredOtherFiles&lt;/code&gt;&lt;/a&gt; has a list of non-Go files ignored because of build constraints.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;go/build/constraint&quot; readability=&quot;0&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/go/build/constraint/&quot;&gt;go/build/constraint&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2.6608187134503&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/go/build/constraint/&quot;&gt;&lt;code&gt;go/build/constraint&lt;/code&gt;&lt;/a&gt; package parses build constraint lines, both the original &lt;code&gt;// +build&lt;/code&gt; syntax and the &lt;code&gt;//go:build&lt;/code&gt; syntax that will be introduced in Go 1.17. This package exists so that tools built with Go 1.16 will be able to process Go 1.17 source code. See &lt;a href=&quot;https://golang.org/design/draft-gobuild&quot;&gt;https://golang.org/design/draft-gobuild&lt;/a&gt; for details about the build constraint syntaxes and the planned transition to the &lt;code&gt;//go:build&lt;/code&gt; syntax. Note that &lt;code&gt;//go:build&lt;/code&gt; lines are &lt;strong&gt;not&lt;/strong&gt; supported in Go 1.16 and should not be introduced into Go programs yet.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;html/template&quot; readability=&quot;-0.43169398907104&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/html/template/&quot;&gt;html/template&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.46153846153846&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/html/template/#ParseFS&quot;&gt;&lt;code&gt;template.ParseFS&lt;/code&gt;&lt;/a&gt; function and &lt;a href=&quot;https://golang.org/pkg/html/template/#Template.ParseFS&quot;&gt;&lt;code&gt;template.Template.ParseFS&lt;/code&gt;&lt;/a&gt; method are like &lt;a href=&quot;https://golang.org/pkg/html/template/#ParseGlob&quot;&gt;&lt;code&gt;template.ParseGlob&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/html/template/#Template.ParseGlob&quot;&gt;&lt;code&gt;template.Template.ParseGlob&lt;/code&gt;&lt;/a&gt;, but read the templates from an &lt;a href=&quot;https://golang.org/pkg/io/fs/#FS&quot;&gt;&lt;code&gt;fs.FS&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;io&quot; readability=&quot;0.72413793103448&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/io/&quot;&gt;io&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;3.6549707602339&quot;&gt;
&lt;p&gt; The package now defines a &lt;a href=&quot;https://golang.org/pkg/io/#ReadSeekCloser&quot;&gt;&lt;code&gt;ReadSeekCloser&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt;
&lt;p&gt; The package now defines &lt;a href=&quot;https://golang.org/pkg/io/#Discard&quot;&gt;&lt;code&gt;Discard&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/io/#NopCloser&quot;&gt;&lt;code&gt;NopCloser&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://golang.org/pkg/io/#ReadAll&quot;&gt;&lt;code&gt;ReadAll&lt;/code&gt;&lt;/a&gt;, to be used instead of the same names in the &lt;a href=&quot;https://golang.org/pkg/io/ioutil/&quot;&gt;&lt;code&gt;io/ioutil&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;log&quot; readability=&quot;-1.5223880597015&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/log/&quot;&gt;log&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;-0.79365079365079&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/log/#Default&quot;&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; function provides access to the default &lt;a href=&quot;https://golang.org/pkg/log/#Logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;log/syslog&quot; readability=&quot;-0.46296296296296&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/log/syslog/&quot;&gt;log/syslog&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;1.9414634146341&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/log/syslog/#Writer&quot;&gt;&lt;code&gt;Writer&lt;/code&gt;&lt;/a&gt; now uses the local message format (omitting the host name and using a shorter time stamp) when logging to custom Unix domain sockets, matching the format already used for the default log socket.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;mime/multipart&quot; readability=&quot;-1.1470588235294&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/mime/multipart/&quot;&gt;mime/multipart&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/mime/multipart/#Reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;https://golang.org/pkg/mime/multipart/#Reader.ReadForm&quot;&gt;&lt;code&gt;ReadForm&lt;/code&gt;&lt;/a&gt; method no longer rejects form data when passed the maximum int64 value as a limit.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;net&quot; readability=&quot;6.8990384615385&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/net/&quot;&gt;net&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;16.815217391304&quot;&gt;
&lt;p&gt; The case of I/O on a closed network connection, or I/O on a network connection that is closed before any of the I/O completes, can now be detected using the new &lt;a href=&quot;https://golang.org/pkg/net/#ErrClosed&quot;&gt;&lt;code&gt;ErrClosed&lt;/code&gt;&lt;/a&gt; error. A typical use would be &lt;code&gt;errors.Is(err, net.ErrClosed)&lt;/code&gt;. In earlier releases the only way to reliably detect this case was to match the string returned by the &lt;code&gt;Error&lt;/code&gt; method with &lt;code&gt;&quot;use of closed network connection&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; In previous Go releases the default TCP listener backlog size on Linux systems, set by &lt;code&gt;/proc/sys/net/core/somaxconn&lt;/code&gt;, was limited to a maximum of &lt;code&gt;65535&lt;/code&gt;. On Linux kernel version 4.1 and above, the maximum is now &lt;code&gt;4294967295&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; On Linux, host name lookups no longer use DNS before checking &lt;code&gt;/etc/hosts&lt;/code&gt; when &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; is missing; this is common on musl-based systems and makes Go programs match the behavior of C programs on those systems.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;net/http&quot; readability=&quot;11.772838002436&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/net/http/&quot;&gt;net/http&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;26.389467238212&quot;&gt;
&lt;p&gt; In the &lt;a href=&quot;https://golang.org/pkg/net/http/&quot;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; package, the behavior of &lt;a href=&quot;https://golang.org/pkg/net/http/#StripPrefix&quot;&gt;&lt;code&gt;StripPrefix&lt;/code&gt;&lt;/a&gt; has been changed to strip the prefix from the request URL's &lt;code&gt;RawPath&lt;/code&gt; field in addition to its &lt;code&gt;Path&lt;/code&gt; field. In past releases, only the &lt;code&gt;Path&lt;/code&gt; field was trimmed, and so if the request URL contained any escaped characters the URL would be modified to have mismatched &lt;code&gt;Path&lt;/code&gt; and &lt;code&gt;RawPath&lt;/code&gt; fields. In Go 1.16, &lt;code&gt;StripPrefix&lt;/code&gt; trims both fields. If there are escaped characters in the prefix part of the request URL the handler serves a 404 instead of its previous behavior of invoking the underlying handler with a mismatched &lt;code&gt;Path&lt;/code&gt;/&lt;code&gt;RawPath&lt;/code&gt; pair.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/http/&quot;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; package now rejects HTTP range requests of the form &lt;code&gt;&quot;Range&quot;: &quot;bytes=--N&quot;&lt;/code&gt; where &lt;code&gt;&quot;-N&quot;&lt;/code&gt; is a negative suffix length, for example &lt;code&gt;&quot;Range&quot;: &quot;bytes=--2&quot;&lt;/code&gt;. It now replies with a &lt;code&gt;416 &quot;Range Not Satisfiable&quot;&lt;/code&gt; response.&lt;/p&gt;
&lt;p&gt; Cookies set with &lt;a href=&quot;https://golang.org/pkg/net/http/#SameSiteDefaultMode&quot;&gt;&lt;code&gt;SameSiteDefaultMode&lt;/code&gt;&lt;/a&gt; now behave according to the current spec (no attribute is set) instead of generating a SameSite key without a value.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/http/#Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; now sends an explicit &lt;code&gt;Content-Length:&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; header in &lt;code&gt;PATCH&lt;/code&gt; requests with empty bodies, matching the existing behavior of &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/http/#ProxyFromEnvironment&quot;&gt;&lt;code&gt;ProxyFromEnvironment&lt;/code&gt;&lt;/a&gt; function no longer returns the setting of the &lt;code&gt;HTTP_PROXY&lt;/code&gt; environment variable for &lt;code&gt;https://&lt;/code&gt; URLs when &lt;code&gt;HTTPS_PROXY&lt;/code&gt; is unset.&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/http/#Transport&quot;&gt;&lt;code&gt;Transport&lt;/code&gt;&lt;/a&gt; type has a new field &lt;a href=&quot;https://golang.org/pkg/net/http/#Transport.GetProxyConnectHeader&quot;&gt;&lt;code&gt;GetProxyConnectHeader&lt;/code&gt;&lt;/a&gt; which may be set to a function that returns headers to send to a proxy during a &lt;code&gt;CONNECT&lt;/code&gt; request. In effect &lt;code&gt;GetProxyConnectHeader&lt;/code&gt; is a dynamic version of the existing field &lt;a href=&quot;https://golang.org/pkg/net/http/#Transport.ProxyConnectHeader&quot;&gt;&lt;code&gt;ProxyConnectHeader&lt;/code&gt;&lt;/a&gt;; if &lt;code&gt;GetProxyConnectHeader&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;, then &lt;code&gt;ProxyConnectHeader&lt;/code&gt; is ignored.&lt;/p&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/net/http/#FS&quot;&gt;&lt;code&gt;http.FS&lt;/code&gt;&lt;/a&gt; function converts an &lt;a href=&quot;https://golang.org/pkg/io/fs/#FS&quot;&gt;&lt;code&gt;fs.FS&lt;/code&gt;&lt;/a&gt; to an &lt;a href=&quot;https://golang.org/pkg/net/http/#FileSystem&quot;&gt;&lt;code&gt;http.FileSystem&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;net/http/httputil&quot; readability=&quot;-1.1753731343284&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/net/http/httputil/&quot;&gt;net/http/httputil&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/net/http/httputil/#ReverseProxy&quot;&gt;&lt;code&gt;ReverseProxy&lt;/code&gt;&lt;/a&gt; now flushes buffered data more aggressively when proxying streamed responses with unknown body lengths.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;net/smtp&quot; readability=&quot;-0.87234042553191&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/net/smtp/&quot;&gt;net/smtp&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.92424242424242&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/net/smtp/#Client&quot;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;https://golang.org/pkg/net/smtp/#Client.Mail&quot;&gt;&lt;code&gt;Mail&lt;/code&gt;&lt;/a&gt; method now sends the &lt;code&gt;SMTPUTF8&lt;/code&gt; directive to servers that support it, signaling that addresses are encoded in UTF-8.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;os&quot; readability=&quot;7.9757085020243&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/os/&quot;&gt;os&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;18.376649746193&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/os/#Process.Signal&quot;&gt;&lt;code&gt;Process.Signal&lt;/code&gt;&lt;/a&gt; now returns &lt;a href=&quot;https://golang.org/pkg/os/#ErrProcessDone&quot;&gt;&lt;code&gt;ErrProcessDone&lt;/code&gt;&lt;/a&gt; instead of the unexported &lt;code&gt;errFinished&lt;/code&gt; when the process has already finished.&lt;/p&gt;
&lt;p&gt; The package defines a new type &lt;a href=&quot;https://golang.org/pkg/os/#DirEntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt; as an alias for &lt;a href=&quot;https://golang.org/pkg/io/fs/#DirEntry&quot;&gt;&lt;code&gt;fs.DirEntry&lt;/code&gt;&lt;/a&gt;. The new &lt;a href=&quot;https://golang.org/pkg/os/#ReadDir&quot;&gt;&lt;code&gt;ReadDir&lt;/code&gt;&lt;/a&gt; function and the new &lt;a href=&quot;https://golang.org/pkg/os/#File.ReadDir&quot;&gt;&lt;code&gt;File.ReadDir&lt;/code&gt;&lt;/a&gt; method can be used to read the contents of a directory into a slice of &lt;a href=&quot;https://golang.org/pkg/os/#DirEntry&quot;&gt;&lt;code&gt;DirEntry&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;https://golang.org/pkg/os/#File.Readdir&quot;&gt;&lt;code&gt;File.Readdir&lt;/code&gt;&lt;/a&gt; method (note the lower case &lt;code&gt;d&lt;/code&gt; in &lt;code&gt;dir&lt;/code&gt;) still exists, returning a slice of &lt;a href=&quot;https://golang.org/pkg/os/#FileInfo&quot;&gt;&lt;code&gt;FileInfo&lt;/code&gt;&lt;/a&gt;, but for most programs it will be more efficient to switch to &lt;a href=&quot;https://golang.org/pkg/os/#File.ReadDir&quot;&gt;&lt;code&gt;File.ReadDir&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; The package now defines &lt;a href=&quot;https://golang.org/pkg/os/#CreateTemp&quot;&gt;&lt;code&gt;CreateTemp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/os/#MkdirTemp&quot;&gt;&lt;code&gt;MkdirTemp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/os/#ReadFile&quot;&gt;&lt;code&gt;ReadFile&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://golang.org/pkg/os/#WriteFile&quot;&gt;&lt;code&gt;WriteFile&lt;/code&gt;&lt;/a&gt;, to be used instead of functions defined in the &lt;a href=&quot;https://golang.org/pkg/io/ioutil/&quot;&gt;&lt;code&gt;io/ioutil&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt; The types &lt;a href=&quot;https://golang.org/pkg/os/#FileInfo&quot;&gt;&lt;code&gt;FileInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/os/#FileMode&quot;&gt;&lt;code&gt;FileMode&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://golang.org/pkg/os/#PathError&quot;&gt;&lt;code&gt;PathError&lt;/code&gt;&lt;/a&gt; are now aliases for types of the same name in the &lt;a href=&quot;https://golang.org/pkg/io/fs/&quot;&gt;&lt;code&gt;io/fs&lt;/code&gt;&lt;/a&gt; package. Function signatures in the &lt;a href=&quot;https://golang.org/pkg/os/&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; package have been updated to refer to the names in the &lt;a href=&quot;https://golang.org/pkg/io/fs/&quot;&gt;&lt;code&gt;io/fs&lt;/code&gt;&lt;/a&gt; package. This should not affect any existing code.&lt;/p&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/os/#DirFS&quot;&gt;&lt;code&gt;DirFS&lt;/code&gt;&lt;/a&gt; function provides an implementation of &lt;a href=&quot;https://golang.org/pkg/io/fs/#FS&quot;&gt;&lt;code&gt;fs.FS&lt;/code&gt;&lt;/a&gt; backed by a tree of operating system files.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;os/signal&quot; readability=&quot;-1.2179487179487&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/os/signal/&quot;&gt;os/signal&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/os/signal/#NotifyContext&quot;&gt;&lt;code&gt;NotifyContext&lt;/code&gt;&lt;/a&gt; function allows creating contexts that are canceled upon arrival of specific signals.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;path&quot; readability=&quot;0&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/path/&quot;&gt;path&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;2.9311926605505&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/path/#Match&quot;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; function now returns an error if the unmatched part of the pattern has a syntax error. Previously, the function returned early on a failed match, and thus did not report any later syntax error in the pattern.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;path/filepath&quot; readability=&quot;2.6214149139579&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/path/filepath/&quot;&gt;path/filepath&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;8.0628683693517&quot;&gt;
&lt;p&gt; The new function &lt;a href=&quot;https://golang.org/pkg/path/filepath/#WalkDir&quot;&gt;&lt;code&gt;WalkDir&lt;/code&gt;&lt;/a&gt; is similar to &lt;a href=&quot;https://golang.org/pkg/path/filepath/#Walk&quot;&gt;&lt;code&gt;Walk&lt;/code&gt;&lt;/a&gt;, but is typically more efficient. The function passed to &lt;code&gt;WalkDir&lt;/code&gt; receives a &lt;a href=&quot;https://golang.org/pkg/io/fs/#DirEntry&quot;&gt;&lt;code&gt;fs.DirEntry&lt;/code&gt;&lt;/a&gt; instead of a &lt;a href=&quot;https://golang.org/pkg/io/fs/#FileInfo&quot;&gt;&lt;code&gt;fs.FileInfo&lt;/code&gt;&lt;/a&gt;. (To clarify for those who recall the &lt;code&gt;Walk&lt;/code&gt; function as taking an &lt;a href=&quot;https://golang.org/pkg/os/#FileInfo&quot;&gt;&lt;code&gt;os.FileInfo&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;os.FileInfo&lt;/code&gt; is now an alias for &lt;code&gt;fs.FileInfo&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/path/filepath#Match&quot;&gt;&lt;code&gt;Match&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/path/filepath#Glob&quot;&gt;&lt;code&gt;Glob&lt;/code&gt;&lt;/a&gt; functions now return an error if the unmatched part of the pattern has a syntax error. Previously, the functions returned early on a failed match, and thus did not report any later syntax error in the pattern.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;runtime/debug&quot; readability=&quot;-0.85792349726776&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/runtime/debug/&quot;&gt;runtime/debug&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.92307692307692&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/runtime#Error&quot;&gt;&lt;code&gt;runtime.Error&lt;/code&gt;&lt;/a&gt; values used when &lt;code&gt;SetPanicOnFault&lt;/code&gt; is enabled may now have an &lt;code&gt;Addr&lt;/code&gt; method. If that method exists, it returns the memory address that triggered the fault.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;strconv&quot; readability=&quot;-0.69230769230769&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/strconv/&quot;&gt;strconv&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.72049689440994&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/strconv/#ParseFloat&quot;&gt;&lt;code&gt;ParseFloat&lt;/code&gt;&lt;/a&gt; now uses the &lt;a href=&quot;https://nigeltao.github.io/blog/2020/eisel-lemire.html&quot;&gt;Eisel-Lemire algorithm&lt;/a&gt;, improving performance by up to a factor of 2. This can also speed up decoding textual formats like &lt;a href=&quot;https://golang.org/pkg/encoding/json/&quot;&gt;&lt;code&gt;encoding/json&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;syscall&quot; readability=&quot;6.8821385176185&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/syscall/&quot;&gt;syscall&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;16.482208588957&quot;&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/syscall/?GOOS=windows#NewCallback&quot;&gt;&lt;code&gt;NewCallback&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/syscall/?GOOS=windows#NewCallbackCDecl&quot;&gt;&lt;code&gt;NewCallbackCDecl&lt;/code&gt;&lt;/a&gt; now correctly support callback functions with multiple sub-&lt;code&gt;uintptr&lt;/code&gt;-sized arguments in a row. This may require changing uses of these functions to eliminate manual padding between small arguments.&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/syscall/?GOOS=windows#SysProcAttr&quot;&gt;&lt;code&gt;SysProcAttr&lt;/code&gt;&lt;/a&gt; on Windows has a new &lt;code&gt;NoInheritHandles&lt;/code&gt; field that disables inheriting handles when creating a new process.&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://golang.org/pkg/syscall/?GOOS=windows#DLLError&quot;&gt;&lt;code&gt;DLLError&lt;/code&gt;&lt;/a&gt; on Windows now has an &lt;code&gt;Unwrap&lt;/code&gt; method for unwrapping its underlying error.&lt;/p&gt;
&lt;p&gt; On Linux, &lt;a href=&quot;https://golang.org/pkg/syscall/#Setgid&quot;&gt;&lt;code&gt;Setgid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://golang.org/pkg/syscall/#Setuid&quot;&gt;&lt;code&gt;Setuid&lt;/code&gt;&lt;/a&gt;, and related calls are now implemented. Previously, they returned an &lt;code&gt;syscall.EOPNOTSUPP&lt;/code&gt; error.&lt;/p&gt;
&lt;p&gt; On Linux, the new functions &lt;a href=&quot;https://golang.org/pkg/syscall/#AllThreadsSyscall&quot;&gt;&lt;code&gt;AllThreadsSyscall&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/syscall/#AllThreadsSyscall6&quot;&gt;&lt;code&gt;AllThreadsSyscall6&lt;/code&gt;&lt;/a&gt; may be used to make a system call on all Go threads in the process. These functions may only be used by programs that do not use cgo; if a program uses cgo, they will always return &lt;a href=&quot;https://golang.org/pkg/syscall/#ENOTSUP&quot;&gt;&lt;code&gt;syscall.ENOTSUP&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;testing/iotest&quot; readability=&quot;-0.68711656441718&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/testing/iotest/&quot;&gt;testing/iotest&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0.75&quot;&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/testing/iotest/#ErrReader&quot;&gt;&lt;code&gt;ErrReader&lt;/code&gt;&lt;/a&gt; function returns an &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt; that always returns an error.&lt;/p&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/testing/iotest/#TestReader&quot;&gt;&lt;code&gt;TestReader&lt;/code&gt;&lt;/a&gt; function tests that an &lt;a href=&quot;https://golang.org/pkg/io/#Reader&quot;&gt;&lt;code&gt;io.Reader&lt;/code&gt;&lt;/a&gt; behaves correctly.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;text/template&quot; readability=&quot;16.611111111111&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;text/template&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;3.3394160583942&quot;&gt;
&lt;p&gt; Newlines characters are now allowed inside action delimiters, permitting actions to span multiple lines.&lt;/p&gt;
&lt;p&gt; The new &lt;a href=&quot;https://golang.org/pkg/text/template/#ParseFS&quot;&gt;&lt;code&gt;template.ParseFS&lt;/code&gt;&lt;/a&gt; function and &lt;a href=&quot;https://golang.org/pkg/text/template/#Template.ParseFS&quot;&gt;&lt;code&gt;template.Template.ParseFS&lt;/code&gt;&lt;/a&gt; method are like &lt;a href=&quot;https://golang.org/pkg/text/template/#ParseGlob&quot;&gt;&lt;code&gt;template.ParseGlob&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://golang.org/pkg/text/template/#Template.ParseGlob&quot;&gt;&lt;code&gt;template.Template.ParseGlob&lt;/code&gt;&lt;/a&gt;, but read the templates from an &lt;a href=&quot;https://golang.org/pkg/io/fs/#FS&quot;&gt;&lt;code&gt;fs.FS&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;text/template/parse&quot; readability=&quot;16.896694214876&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/text/template/parse/&quot;&gt;text/template/parse&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;0&quot;&gt;
&lt;p&gt; A new &lt;a href=&quot;https://golang.org/pkg/text/template/parse/#CommentNode&quot;&gt;&lt;code&gt;CommentNode&lt;/code&gt;&lt;/a&gt; was added to the parse tree. The &lt;a href=&quot;https://golang.org/pkg/text/template/parse/#Mode&quot;&gt;&lt;code&gt;Mode&lt;/code&gt;&lt;/a&gt; field in the &lt;code&gt;parse.Tree&lt;/code&gt; enables access to it.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;time/tzdata&quot; readability=&quot;-0.94883720930233&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/time/tzdata/&quot;&gt;time/tzdata&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;1&quot;&gt;
&lt;p&gt; The slim timezone data format is now used for the timezone database in &lt;code&gt;$GOROOT/lib/time/zoneinfo.zip&lt;/code&gt; and the embedded copy in this package. This reduces the size of the timezone database by about 350 KB.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;dl id=&quot;unicode&quot; readability=&quot;0.90666666666667&quot;&gt;&lt;dt&gt;&lt;a href=&quot;https://golang.org/pkg/unicode/&quot;&gt;unicode&lt;/a&gt;&lt;/dt&gt;
&lt;dd readability=&quot;4.6404109589041&quot;&gt;
&lt;p&gt; The &lt;a href=&quot;https://golang.org/pkg/unicode/&quot;&gt;&lt;code&gt;unicode&lt;/code&gt;&lt;/a&gt; package and associated support throughout the system has been upgraded from Unicode 12.0.0 to &lt;a href=&quot;https://www.unicode.org/versions/Unicode13.0.0/&quot;&gt;Unicode 13.0.0&lt;/a&gt;, which adds 5,930 new characters, including four new scripts, and 55 new emoji. Unicode 13.0.0 also designates plane 3 (U+30000-U+3FFFF) as the tertiary ideographic plane.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;</description>
<pubDate>Tue, 16 Feb 2021 20:01:04 +0000</pubDate>
<dc:creator>ra7</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://golang.org/doc/go1.16</dc:identifier>
</item>
<item>
<title>Functorio</title>
<link>https://bartoszmilewski.com/2021/02/16/functorio/.</link>
<guid isPermaLink="true" >https://bartoszmilewski.com/2021/02/16/functorio/.</guid>
<description>&lt;p&gt;You might have heard people say that functional programming is more academic, and real engineering is done in imperative style. I’m going to show you that real engineering is functional, and I’m going to illustrate it using a computer game that is designed by engineers for engineers. It’s a simulation game called Factorio, in which you are given resources that you have to explore, build factories that process them, create more and more complex systems, until you are finally able to launch a spaceship that may take you away from an inhospitable planet. If this is not engineering at its purest then I don’t know what is. And yet almost all you do when playing this game has its functional programming counterparts and it can be used to teach basic concepts of not only programming but also, to some extent, category theory. So, without further ado, let’s jump in.&lt;/p&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;The building blocks of every programming language are functions. A function takes input and produces output. In Factorio they are called assembling machines, or assemblers. Here’s an assembler that produces copper wire.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/assembler.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11081&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/assembler/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/assembler.png&quot; data-orig-size=&quot;204,202&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Assembler&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/assembler.png?w=204&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/assembler.png?w=204&quot; class=&quot;aligncenter wp-image-11081 size-thumbnail&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/assembler.png?w=150&amp;amp;h=150&quot; alt=&quot;&quot; width=&quot;150&quot; height=&quot;150&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/assembler.png?w=150&amp;amp;h=150 150w, https://bartoszmilewski.files.wordpress.com/2020/10/assembler.png 204w&quot; sizes=&quot;(max-width: 150px) 100vw, 150px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you bring up the info about the assembler you’ll see the recipe that it’s using. This one takes one copper plate and produces a pair of coils of copper wire.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-11071 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=121&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;121&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=121&amp;amp;h=50 121w, https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=150&amp;amp;h=62 150w, https://bartoszmilewski.files.wordpress.com/2020/10/cable.png 242w&quot; sizes=&quot;(max-width: 121px) 100vw, 121px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This recipe is really a function signature in a strongly typed system. We see two types: copper plate and copper wire, and an arrow between them. Also, for every copper plate the assembler produces a pair of copper wires. In Haskell we would declare this function as&lt;/p&gt;
&lt;pre&gt;
makeCopperWire :: CopperPlate -&amp;gt; (CopperWire, CopperWire)
&lt;/pre&gt;
&lt;p&gt;Not only do we have types for different components, but we can combine types into tuples–here it’s a homogenous pair &lt;code&gt;(CopperWire, CopperWire)&lt;/code&gt;. If you’re not familiar with Haskell notation, here’s what it might look like in C++:&lt;/p&gt;
&lt;pre&gt;
std::pair&amp;lt;CopperWire, CopperWire&amp;gt; makeCopperWire(CopperPlate);
&lt;/pre&gt;
&lt;p&gt;Here’s another function signature in the form of an assembler recipe:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11072&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/gear/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png&quot; data-orig-size=&quot;244,104&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;gear&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=244&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=244&quot; class=&quot;wp-image-11072 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=117&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;117&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=117&amp;amp;h=50 117w, https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=234&amp;amp;h=100 234w, https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=150&amp;amp;h=64 150w&quot; sizes=&quot;(max-width: 117px) 100vw, 117px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It takes a pair of iron plates and produces an iron gear wheel. We could write it as&lt;/p&gt;
&lt;pre&gt;
makeGear :: (IronPlate, IronPlate) -&amp;gt; Gear
&lt;/pre&gt;
&lt;p&gt;or, in C++,&lt;/p&gt;
&lt;pre&gt;
Gear makeGear(IronPlate, IronPlate);
&lt;/pre&gt;
&lt;p&gt;Many recipes require a combination of differently typed ingredients, like the one for producing red science packs&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11074&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/red_science/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot; data-orig-size=&quot;366,100&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;red_science&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=366&quot; class=&quot;wp-image-11074 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;183&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50 183w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=150&amp;amp;h=41 150w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&amp;amp;h=82 300w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png 366w&quot; sizes=&quot;(max-width: 183px) 100vw, 183px&quot;/&gt;&lt;/a&gt;&lt;br/&gt;We would declare this function as:&lt;/p&gt;
&lt;pre&gt;
makeRedScience :: (CopperPlate, Gear) -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;Pairs are examples of product types. Factorio recipes use the plus sign to denote tuples; I guess this is because we often read a sum as “this and this”, and “and” introduces a product type. The assembler requires &lt;em&gt;both&lt;/em&gt; inputs to produce the output, so it accepts a product type. If it required either one, we’d call it a &lt;em&gt;sum type&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can also tuple more than two ingredients, as in this recipe for producing electronic circuits (or green circuits, as they are commonly called)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-11073 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=167&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;167&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=167&amp;amp;h=50 167w, https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=334&amp;amp;h=100 334w, https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=150&amp;amp;h=45 150w, https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=300&amp;amp;h=90 300w&quot; sizes=&quot;(max-width: 167px) 100vw, 167px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
makeGreenCircuit :: 
  (CopperWire, CopperWire, CopperWire, IronPlate) -&amp;gt; GreenCircuit
&lt;/pre&gt;
&lt;p&gt;Now suppose that you have at your disposal the raw ingeredients: iron plates and copper plates. How would you go about producing red science or green circuits? This is where function composition kicks in. You can pass the output of the copper wire assembler as the input to the green circuit assembler. (You will still have to tuple it with an iron plate.)&lt;/p&gt;
&lt;div class=&quot;container&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11071&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/cable/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png&quot; data-orig-size=&quot;242,100&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;cable&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=242&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=242&quot; class=&quot;alignleft wp-image-11071&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=121&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;121&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=121&amp;amp;h=50 121w, https://bartoszmilewski.files.wordpress.com/2020/10/cable.png?w=150&amp;amp;h=62 150w, https://bartoszmilewski.files.wordpress.com/2020/10/cable.png 242w&quot; sizes=&quot;(max-width: 121px) 100vw, 121px&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11073&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/green_circuit/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png&quot; data-orig-size=&quot;374,112&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;green_circuit&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=374&quot; class=&quot;alignleft wp-image-11073&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=167&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;167&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=167&amp;amp;h=50 167w, https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=334&amp;amp;h=100 334w, https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=150&amp;amp;h=45 150w, https://bartoszmilewski.files.wordpress.com/2020/10/green_circuit.png?w=300&amp;amp;h=90 300w&quot; sizes=&quot;(max-width: 167px) 100vw, 167px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;Similarly, you can compose the gear assembler with the red science assembler.&lt;/p&gt;
&lt;div class=&quot;container&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11072&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/gear/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png&quot; data-orig-size=&quot;244,104&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;gear&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=244&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=244&quot; class=&quot;wp-image-11072 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=117&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;117&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=117&amp;amp;h=50 117w, https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=234&amp;amp;h=100 234w, https://bartoszmilewski.files.wordpress.com/2020/10/gear.png?w=150&amp;amp;h=64 150w&quot; sizes=&quot;(max-width: 117px) 100vw, 117px&quot;/&gt;&lt;/div&gt;
&lt;div class=&quot;container&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11074&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/red_science/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot; data-orig-size=&quot;366,100&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;red_science&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=366&quot; class=&quot;wp-image-11074 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;183&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50 183w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=150&amp;amp;h=41 150w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&amp;amp;h=82 300w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png 366w&quot; sizes=&quot;(max-width: 183px) 100vw, 183px&quot;/&gt;&lt;/div&gt;
&lt;p&gt;The result is a new function with the following signature&lt;/p&gt;
&lt;pre&gt;
makeRedScienceFrom :: 
    (CopperPlate, IronPlate, IronPlate) -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;And this is the implementation:&lt;/p&gt;
&lt;pre&gt;
makeRedScienceFrom (cu, fe1, fe2) = 
    makeRedScience (cu, makeGear (fe1, fe2))
&lt;/pre&gt;
&lt;p&gt;You start with one copper plate and two iron plates. You feed the iron plates to the gear assembler. You pair the resulting gear with the copper plate and pass it to the red science assembler.&lt;/p&gt;
&lt;p&gt;Most assemblers in Factorio take more than one argument, so I couldn’t come up with a simpler example of composition, one that wouldn’t require untupling and retupling. In Haskell we usually use functions in their curried form (we’ll come back to this later), so composition is easy there.&lt;/p&gt;
&lt;p&gt;Composition is also a feature of a category, so we should ask the question if we can treat assemblers as arrows in a category. Their composition is obviously associative. But do we have an equivalent of an identity arrow? It is something that takes input of some type and returns it back unchanged. And indeed we have things called inserters that do exactly that. Here’s an inserter between two assemblers.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11106&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/inserter/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png&quot; data-orig-size=&quot;614,644&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Inserter&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png?w=286&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png?w=510&quot; class=&quot;aligncenter wp-image-11106&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png?w=227&amp;amp;h=237&quot; alt=&quot;&quot; width=&quot;227&quot; height=&quot;237&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png?w=227&amp;amp;h=237 227w, https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png?w=452&amp;amp;h=474 452w, https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png?w=143&amp;amp;h=150 143w, https://bartoszmilewski.files.wordpress.com/2020/11/inserter.png?w=286&amp;amp;h=300 286w&quot; sizes=&quot;(max-width: 227px) 100vw, 227px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In fact, in Factorio, you have to use an inserter for direct composition of assemblers, but that’s an implementation detail (technically, inserting an identity function doesn’t change anything).&lt;/p&gt;
&lt;p&gt;An inserter is actually a polymorphic function, just like the identity function in Haskell&lt;/p&gt;
&lt;pre&gt;
inserter :: a -&amp;gt; a
inserter x = x
&lt;/pre&gt;
&lt;p&gt;It works for any type &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But the Factorio category has more structure. As we have seen, it supports finite products (tuples) of arbitrary types. Such a category is called &lt;em&gt;cartesian&lt;/em&gt;. (We’ll talk about the unit of this product later.)&lt;/p&gt;
&lt;p&gt;Notice that we have identified multiple Factorio subsystem as functions: assemblers, inserters, compositions of assemblers, etc. In a programming language they would all be just functions. If we were to design a language based on Factorio (we could call it &lt;em&gt;Functorio&lt;/em&gt;), we would enclose the composition of assemblers into an assembler, or even make an assembler that takes two assemblers and produces their composition. That would be a higher-order assembler.&lt;/p&gt;
&lt;h2&gt;Higher order functions&lt;/h2&gt;
&lt;p&gt;The defining feature of functional languages is the ability to make functions first-class objects. That means the ability to pass a function as an argument to another function, and to return a function as a result of another function. For instance, we should have a recipe for producing assemblers. And, indeed, there is such recipe. All it needs is green circuits, some gear wheels, and a few iron plates:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11086&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/assembly_function/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png&quot; data-orig-size=&quot;410,206&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;assembly_function&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png?w=410&quot; class=&quot;wp-image-11086 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png?w=194&amp;amp;h=97&quot; alt=&quot;&quot; width=&quot;194&quot; height=&quot;97&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png?w=194&amp;amp;h=97 194w, https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png?w=386&amp;amp;h=194 386w, https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png?w=150&amp;amp;h=75 150w, https://bartoszmilewski.files.wordpress.com/2020/11/assembly_function.png?w=300&amp;amp;h=151 300w&quot; sizes=&quot;(max-width: 194px) 100vw, 194px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If Factorio were a strongly typed language all the way, there would be separate recipes for producing different assemblers (that is assemblers with different recipes). For instance, we could have:&lt;/p&gt;
&lt;pre&gt;
makeRedScienceAssembler :: 
   (GreenCircuit, Gear, IronPlate) -&amp;gt; RedScienceAssembler
&lt;/pre&gt;
&lt;p&gt;Instead, the recipe produces a generic assembler, and it lets the player manually set the recipe in it. In a way, the player provides one last ingredient, an element of the enumeration of all possible recipes. This enumeration is displayed as a menu of choices:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11118&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/enumrecipe/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png&quot; data-orig-size=&quot;1294,1050&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;EnumRecipe&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png?w=510&quot; class=&quot;aligncenter wp-image-11118&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png?w=372&amp;amp;h=301&quot; alt=&quot;&quot; width=&quot;372&quot; height=&quot;301&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png?w=372&amp;amp;h=301 372w, https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png?w=742&amp;amp;h=602 742w, https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png?w=150&amp;amp;h=122 150w, https://bartoszmilewski.files.wordpress.com/2020/11/enumrecipe.png?w=300&amp;amp;h=243 300w&quot; sizes=&quot;(max-width: 372px) 100vw, 372px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After all, Factorio is an interactive game.&lt;/p&gt;
&lt;p&gt;Since we have identified the inserter as the identity function, we should have a recipe for producing it as well. And indeed there is one:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11103&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/inserterrecipe/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png&quot; data-orig-size=&quot;392,208&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;InserterRecipe&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png?w=392&quot; class=&quot;wp-image-11103 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png?w=205&amp;amp;h=109&quot; alt=&quot;&quot; width=&quot;205&quot; height=&quot;109&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png?w=205&amp;amp;h=109 205w, https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png?w=150&amp;amp;h=80 150w, https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png?w=300&amp;amp;h=159 300w, https://bartoszmilewski.files.wordpress.com/2020/11/inserterrecipe.png 392w&quot; sizes=&quot;(max-width: 205px) 100vw, 205px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Do we also have functions that take functions as arguments? In other words, recipes that use assemblers as input? Indeed we do:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11088&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/higher_function/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png&quot; data-orig-size=&quot;470,204&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;higher_function&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png?w=470&quot; class=&quot;wp-image-11088 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png?w=224&amp;amp;h=97&quot; alt=&quot;&quot; width=&quot;224&quot; height=&quot;97&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png?w=224&amp;amp;h=97 224w, https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png?w=448&amp;amp;h=194 448w, https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png?w=150&amp;amp;h=65 150w, https://bartoszmilewski.files.wordpress.com/2020/11/higher_function.png?w=300&amp;amp;h=130 300w&quot; sizes=&quot;(max-width: 224px) 100vw, 224px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Again, this recipe accepts a generic assembler that hasn’t been assigned its own recipe yet.&lt;/p&gt;
&lt;p&gt;This shows that Factorio supports higher-order functions and is indeed a functional language. What we have here is a way of treating functions (assemblers) not only as arrows between objects, but also as objects that can be produced and consumed by functions. In category theory, such objectified arrow types are called exponential objects. A category in which arrow types are represented as objects is called &lt;em&gt;closed&lt;/em&gt;, so we can view Factorio as a cartesian closed category.&lt;/p&gt;
&lt;p&gt;In a strongly typed Factorio, we could say that the object &lt;code&gt;RedScienceAssembler&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11281&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/redscienceassembler/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png&quot; data-orig-size=&quot;282,270&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;RedScienceAssembler&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png?w=282&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png?w=282&quot; class=&quot;aligncenter wp-image-11281&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png?w=101&amp;amp;h=97&quot; alt=&quot;&quot; width=&quot;101&quot; height=&quot;97&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png?w=101&amp;amp;h=97 101w, https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png?w=202&amp;amp;h=194 202w, https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png?w=150&amp;amp;h=144 150w&quot; sizes=&quot;(max-width: 101px) 100vw, 101px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;is equivalent to its recipe&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11074&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/red_science/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot; data-orig-size=&quot;366,100&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;red_science&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=366&quot; class=&quot;wp-image-11074 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;183&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50 183w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=150&amp;amp;h=41 150w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&amp;amp;h=82 300w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png 366w&quot; sizes=&quot;(max-width: 183px) 100vw, 183px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
type RedScienceAssembler = 
    (CopperPlate, Gear) -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;We could then write a higher-order recipe that produces this particular assembler as:&lt;/p&gt;
&lt;pre&gt;
makeRedScienceAssembler :: 
     (GreenCircuit, Gear, IronPlate) 
  -&amp;gt; ((CopperPlate, Gear) -&amp;gt; RedScience)
&lt;/pre&gt;
&lt;p&gt;Similarly, in a strongly typed Factorio we would replace this higher-order recipe&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11134&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/greenscience/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png&quot; data-orig-size=&quot;368,102&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;GreenScience&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png?w=368&quot; class=&quot;wp-image-11134 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png?w=188&amp;amp;h=52&quot; alt=&quot;&quot; width=&quot;188&quot; height=&quot;52&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png?w=188&amp;amp;h=52 188w, https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png?w=150&amp;amp;h=42 150w, https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png?w=300&amp;amp;h=83 300w, https://bartoszmilewski.files.wordpress.com/2020/11/greenscience.png 368w&quot; sizes=&quot;(max-width: 188px) 100vw, 188px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;with the following signature&lt;/p&gt;
&lt;pre&gt;
makeGreenScience :: ((a -&amp;gt; a), Belt) -&amp;gt; GreenScience
&lt;/pre&gt;
&lt;p&gt;assuming that the inserter is a polymorphic function &lt;code&gt;a -&amp;gt; a&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Linear types&lt;/h2&gt;
&lt;p&gt;There is one important aspect of functional programming that seems to be broken in Factorio. Functions are supposed to be pure: mutation is a no-no. And in Factorio we keep talking about assemblers &lt;em&gt;consuming&lt;/em&gt; resources. A pure function doesn’t consume its arguments–you may pass the same item to many functions and it will still be there. Dealing with resources is a real problem in programming in general, including purely functional languages. Fortunately there are clever ways of dealing with it. In C++, for instance, we can use unique pointers and move semantics, in Rust we have ownership types, and Haskell recently introduced linear types. What Factorio does is very similar to Haskell’s linear types. A linear function is a function that is guaranteed to consume its argument. Functorio assemblers are linear functions.&lt;/p&gt;
&lt;p&gt;Factorio is all about consuming and transforming resources. The resources originate as various ores and coal in mines. There are also trees that can be chopped to yield wood, and liquids like water or crude oil. These external resources are then consumed, linearly, by your industry. In Haskell, we would implement it by passing a linear function called a continuation to the resource producer. A linear function guarantees to consume the resource completely (no resource leaks) and not to make multiple copies of the same resource. These are the guarantees that the Factorio industrial complex provides automatically.&lt;/p&gt;
&lt;h2&gt;Currying&lt;/h2&gt;
&lt;p&gt;Of course Factorio was not designed to be a programming language, so we can’t expect it to implement every aspect of programming. It is fun though to imagine how we would translate some more advanced programming features into Factorio. For instance, how would currying work? To support currying we would first need partial application. The idea is pretty simple. We have already seen that assemblers can be treated as first class objects. Now imagine that you could produce assemblers with a set recipe (strongly typed assemblers). For instance this one:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11074&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/red_science/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot; data-orig-size=&quot;366,100&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;red_science&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=366&quot; class=&quot;wp-image-11074 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;183&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50 183w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=150&amp;amp;h=41 150w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&amp;amp;h=82 300w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png 366w&quot; sizes=&quot;(max-width: 183px) 100vw, 183px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s a two-input assembler. Now give it a single copper plate, which in programmer speak is called &lt;em&gt;partial application&lt;/em&gt;. It’s partial because we haven’t supplied it with an iron gear. We can think of the result of partial application as a new single-input assembler that expects an iron gear and is able to produce one beaker of red science. By partially applying the function &lt;code&gt;makeRedScience&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
makeRedScience :: (CopperPlate, Gear) -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;we have created a new function of the type&lt;/p&gt;
&lt;pre&gt;
Gear -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;In fact we have just designed a process that gave us a (higher-order) function that takes a copper plate and creates a “primed” assembler that only needs an iron gear to produce red science:&lt;/p&gt;
&lt;pre&gt;
makeGearToRedScience :: CopperPlate -&amp;gt; (Gear -&amp;gt; RedScience)
&lt;/pre&gt;
&lt;p&gt;In Haskell, we would implement this function using a lambda expression&lt;/p&gt;
&lt;pre&gt;
makeGearToRedScience cu = \gear -&amp;gt; makeRedScience (cu, gear)
&lt;/pre&gt;
&lt;p&gt;Now we would like to automate this process. We want to have something that takes a two-input assembler, for instance &lt;code&gt;makeRedScience&lt;/code&gt;, and returns a single input assembler that produces another “primed” single-input assembler. The type signature of this beast would be:&lt;/p&gt;
&lt;pre&gt;
curryRedScienceAssembler ::
     ((CopperPlate, Gear) -&amp;gt; RedScience)  -- RedScienceAssembler
  -&amp;gt; (CopperPlate -&amp;gt; (Gear -&amp;gt; RedScience))
&lt;/pre&gt;
&lt;p&gt;We would implement it as a double lambda:&lt;/p&gt;
&lt;pre&gt;
curryRedScienceAssembler rsAssembler = 
  \cu -&amp;gt; (\gear -&amp;gt; rsAssembler (cu, gear))
&lt;/pre&gt;
&lt;p&gt;Notice that it really doesn’t matter what the concrete types are. What’s important is that we can turn a function that takes a pair of arguments into a function that returns a function. We can make it fully polymorphic:&lt;/p&gt;
&lt;pre&gt;
curry :: ((a, b) -&amp;gt; c) 
       -&amp;gt; (a -&amp;gt; (b -&amp;gt; c))
&lt;/pre&gt;
&lt;p&gt;Here, the type variables &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; can be replaced with any types (in particular, &lt;code&gt;CopperPlate&lt;/code&gt;, &lt;code&gt;Gear&lt;/code&gt;, and &lt;code&gt;RedScience&lt;/code&gt;).&lt;br/&gt;This is a Haskell implementation:&lt;/p&gt;
&lt;pre&gt;
curry f = \a -&amp;gt; \b -&amp;gt; f (a, b)
&lt;/pre&gt;
&lt;h2&gt;Functors&lt;/h2&gt;
&lt;p&gt;So far we haven’t talked about how arguments (items) are delivered to functions (assemblers). We can manually drop items into assemblers, but that very quickly becomes boring. We need to automate the delivery systems. One way of doing it is by using some kind of containers: chests, train wagons, barrels, or conveyor belts. In programming we call these &lt;em&gt;functors&lt;/em&gt;. Strictly speaking a functor can hold only one type of items at a time, so a chest of iron plates should be a different type than a chest of gears. Factorio doesn’t enforce this but, in practice, we rarely mix different types of items in one container.&lt;/p&gt;
&lt;p&gt;The important property of a functor is that you can apply a function to its contents. This is best illustrated with conveyor belts. Here we take the recipe that turns a copper plate into copper wire and apply it to a whole conveyor belt of copper (coming from the right) to produce a conveyor belt of copper wire (going to the left).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/functor.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11139&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/functor-3/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/functor.png&quot; data-orig-size=&quot;668,674&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Functor&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/functor.png?w=297&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/functor.png?w=510&quot; class=&quot;aligncenter wp-image-11139&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/functor.png?w=245&amp;amp;h=247&quot; alt=&quot;&quot; width=&quot;245&quot; height=&quot;247&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/functor.png?w=245&amp;amp;h=247 245w, https://bartoszmilewski.files.wordpress.com/2020/11/functor.png?w=490&amp;amp;h=494 490w, https://bartoszmilewski.files.wordpress.com/2020/11/functor.png?w=150&amp;amp;h=150 150w, https://bartoszmilewski.files.wordpress.com/2020/11/functor.png?w=297&amp;amp;h=300 297w&quot; sizes=&quot;(max-width: 245px) 100vw, 245px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The fact that a belt can carry any type of items can be expressed as a type constructor–a data type parameterized by an arbitrary type &lt;code&gt;a&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
data Belt a
&lt;/pre&gt;
&lt;p&gt;You can apply it to any type to get a belt of specific items, as in&lt;/p&gt;
&lt;pre&gt;
Belt CopperPlate
&lt;/pre&gt;
&lt;p&gt;We will model belts as Haskell lists.&lt;/p&gt;
&lt;pre&gt;
data Belt a = MakeBelt [a]
&lt;/pre&gt;
&lt;p&gt;The fact that it’s a functor is expressed by implementing a polymorphic function &lt;code&gt;mapBelt&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
mapBelt :: (a -&amp;gt; b) -&amp;gt; (Belt a -&amp;gt; Belt b)
&lt;/pre&gt;
&lt;p&gt;This function takes a function &lt;code&gt;a-&amp;gt;b&lt;/code&gt; and produces a function that transforms a belt of &lt;code&gt;a&lt;/code&gt;s to a belt of &lt;code&gt;b&lt;/code&gt;s. So to create a belt of (pairs of) copper wire we’ll map the assembler that implements &lt;code&gt;makeCoperWire&lt;/code&gt; over a belt of &lt;code&gt;CopperPlate&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
makeBeltOfWire :: (Belt CopperPlate) -&amp;gt; (Belt (CopperWire, CopperWire))
makeBeltOfWire = mapBelt makeCopperWire
&lt;/pre&gt;
&lt;p&gt;You may think of a belt as corresponding to a list of elements, or an infinite stream, depending on the way you use it.&lt;/p&gt;
&lt;p&gt;In general, a type constructor &lt;code&gt;F&lt;/code&gt; is called a functor if it supports the mapping of a function over its contents:&lt;/p&gt;
&lt;pre&gt;
map :: (a -&amp;gt; b) -&amp;gt; (F a -&amp;gt; F b)
&lt;/pre&gt;
&lt;h2&gt;Sum types&lt;/h2&gt;
&lt;p&gt;Uranium ore processing is interesting. It is done in a centrifuge, which accepts uranium ore and produces two isotopes of Uranium.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11077&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/uranium/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png&quot; data-orig-size=&quot;368,96&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;uranium&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png?w=368&quot; class=&quot;wp-image-11077 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png?w=211&amp;amp;h=55&quot; alt=&quot;&quot; width=&quot;211&quot; height=&quot;55&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png?w=211&amp;amp;h=55 211w, https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png?w=150&amp;amp;h=39 150w, https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png?w=300&amp;amp;h=78 300w, https://bartoszmilewski.files.wordpress.com/2020/10/uranium.png 368w&quot; sizes=&quot;(max-width: 211px) 100vw, 211px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The new thing here is that the output is probabilistic. Most of the time (on average, 99.3% of the time) you’ll get Uranium 238, and only occasionally (0.7% of the time) Uranium 235 (the glowy one). Here the plus sign is used to actually encode a sum type. In Haskell we would use the &lt;code&gt;Either&lt;/code&gt; type constructor, which generates a sum type:&lt;/p&gt;
&lt;pre&gt;
makeUranium :: UraniumOre -&amp;gt; Either U235 U238
&lt;/pre&gt;
&lt;p&gt;In other languages you might see it called a &lt;em&gt;tagged union&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The two alternatives in the output type of the centrifuge require different actions: U235 can be turned into fuel cells, whereas U238 requires reprocessing. In Haskell, we would do it by pattern matching. We would apply one function to deal with U235 and another to deal with U238. In Factorio this is accomplished using filter inserters (a.k.a., purple inserters). A filter inserter corresponds to a function that picks one of the alternatives, for instance:&lt;/p&gt;
&lt;pre&gt;
filterInserterU235 :: Either U235 U238 -&amp;gt; Maybe U235
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Maybe&lt;/code&gt; data type (or &lt;code&gt;Optional&lt;/code&gt; in some languages) is used to accommodate the possibility of failure: you can’t get &lt;code&gt;U235&lt;/code&gt; if the union contained &lt;code&gt;U238&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each filter inserter is programmed for a particular type. Below you see two purple inserters used to split the output of the centrifuge into two different chests:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/filters.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11143&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/filters/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/filters.png&quot; data-orig-size=&quot;314,606&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Filters&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/filters.png?w=155&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/filters.png?w=314&quot; class=&quot;aligncenter wp-image-11143&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/filters.png?w=233&amp;amp;h=449&quot; alt=&quot;&quot; width=&quot;233&quot; height=&quot;449&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/filters.png?w=233&amp;amp;h=449 233w, https://bartoszmilewski.files.wordpress.com/2020/11/filters.png?w=78&amp;amp;h=150 78w, https://bartoszmilewski.files.wordpress.com/2020/11/filters.png?w=155&amp;amp;h=300 155w, https://bartoszmilewski.files.wordpress.com/2020/11/filters.png 314w&quot; sizes=&quot;(max-width: 233px) 100vw, 233px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Incidentally, a mixed conveyor belt may be seen as carrying a sum type. The items on the belt may be, for instance, either copper wire or steel plates, which can be written as &lt;code&gt;Either CopperWire SteelPlate&lt;/code&gt;. You don’t even need to use purple inserters to separate them, as any inserter becomes selective when connected to the input of an assembler. It will only pick up the items that are the inputs of the recipe for the given assembler.&lt;/p&gt;
&lt;h2&gt;Monoidal functors&lt;/h2&gt;
&lt;p&gt;Every conveyor belt has two sides, so it’s natural to use it to transport pairs. In particular, it’s possible to merge a pair of belts into one belt of pairs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11147&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/monoidal/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png&quot; data-orig-size=&quot;1106,592&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Monoidal&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=510&quot; class=&quot;aligncenter wp-image-11147&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=473&amp;amp;h=252&quot; alt=&quot;&quot; width=&quot;473&quot; height=&quot;252&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=471&amp;amp;h=252 471w, https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=942&amp;amp;h=504 942w, https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=150&amp;amp;h=80 150w, https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=300&amp;amp;h=161 300w, https://bartoszmilewski.files.wordpress.com/2020/11/monoidal.png?w=768&amp;amp;h=411 768w&quot; sizes=&quot;(max-width: 473px) 100vw, 473px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We don’t use an assembler to do it, just some belt mechanics, but we can still think of it as a function. In this case, we would write it as&lt;/p&gt;
&lt;pre&gt;
(Belt CopperPlate, Belt Gear) -&amp;gt; Belt (CopperPlate, Gear)
&lt;/pre&gt;
&lt;p&gt;In the example above, we map the red science function over it&lt;/p&gt;
&lt;pre&gt;
streamRedScience :: Belt (CopperPlate, Gear) -&amp;gt; Belt RedScience
streamRedScience beltOfPairs = mapBelt makeRedScience beltOfPairs
&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;makeRedScience&lt;/code&gt; has the signature&lt;/p&gt;
&lt;pre&gt;
makeRedScience :: (CopperPlate, Gear) -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;it all type checks.&lt;/p&gt;
&lt;p&gt;Since we can apply belt merging to any type, we can write it as a polymorphic function&lt;/p&gt;
&lt;pre&gt;
mergeBelts :: (Belt a, Belt b) -&amp;gt; Belt (a, b)
mergeBelts (MakeBelt as, MakeBelt bs) = MakeBelt (zip as bs)
&lt;/pre&gt;
&lt;p&gt;(In our Haskell model, we have to zip two lists together to get a list of pairs.)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Belt&lt;/code&gt; is a functor. In general, a functor that has this kind of merging ability is called a &lt;em&gt;monoidal functor&lt;/em&gt;, because it preserves the monoidal structure of the category. Here, the monoidal structure of the Factorio category is given by the product (pairing). Any monoidal functor &lt;code&gt;F&lt;/code&gt; must preserve the product:&lt;/p&gt;
&lt;pre&gt;
(F a, F b) -&amp;gt; F (a, b)
&lt;/pre&gt;
&lt;p&gt;There is one more aspect to monoidal structure: the unit. The unit, when paired with anything, does nothing to it. More precisely, a pair &lt;code&gt;(Unit, a)&lt;/code&gt; is, for all intents and purposes, equivalent to &lt;code&gt;a&lt;/code&gt;. The best way to understand the unit in Factorio is to ask the question: The belt of what, when merged with the belt of &lt;code&gt;a&lt;/code&gt;, will produce a belt of &lt;code&gt;a&lt;/code&gt;? The answer is: the belt of nothing. Merging an empty belt with any other belt, makes no difference.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/unit.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11150&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/unit-2/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/unit.png&quot; data-orig-size=&quot;568,576&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Unit&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/unit.png?w=296&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/unit.png?w=510&quot; class=&quot;aligncenter wp-image-11150&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/unit.png?w=207&amp;amp;h=210&quot; alt=&quot;&quot; width=&quot;207&quot; height=&quot;210&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/11/unit.png?w=207&amp;amp;h=210 207w, https://bartoszmilewski.files.wordpress.com/2020/11/unit.png?w=414&amp;amp;h=420 414w, https://bartoszmilewski.files.wordpress.com/2020/11/unit.png?w=148&amp;amp;h=150 148w, https://bartoszmilewski.files.wordpress.com/2020/11/unit.png?w=296&amp;amp;h=300 296w&quot; sizes=&quot;(max-width: 207px) 100vw, 207px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So emptiness is the monoidal unit, and we have, for instance:&lt;/p&gt;
&lt;pre&gt;
(Belt CopperPlate, Belt Nothing) -&amp;gt; Belt CopperPlate
&lt;/pre&gt;
&lt;p&gt;The ability to merge two belts, together with the ability to create an empty belt, makes &lt;code&gt;Belt&lt;/code&gt; a monoidal functor. In general, besides preserving the product, the condition for the functor &lt;code&gt;F&lt;/code&gt; to be monoidal is the ability to produce&lt;/p&gt;
&lt;pre&gt;
F Nothing
&lt;/pre&gt;
&lt;p&gt;Most functors, at least in Factorio, are not monoidal. For instance, chests cannot store pairs.&lt;/p&gt;
&lt;h2&gt;Applicative functors&lt;/h2&gt;
&lt;p&gt;As I mentioned before, most assembler recipes take multiple arguments, which we modeled as tuples (products). We also talked about partial application which, essentially, takes an assembler and one of the ingredients and produces a “primed” assembler whose recipe requires one less ingredient. Now imagine that you have a whole belt of a single ingredient, and you map an assembler over it. In current Factorio, this assembler will accept one item and then get stuck waiting for the rest. But in our extended version of Factorio, which we call Functorio, mapping a multi-input assembler over a belt of single ingredient should produce a belt of “primed” assemblers. For instance, the red science assembler has the signature&lt;br/&gt;&lt;a href=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot;&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;11074&quot; data-permalink=&quot;https://bartoszmilewski.com/2021/02/16/functorio/red_science/&quot; data-orig-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png&quot; data-orig-size=&quot;366,100&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;red_science&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&quot; data-large-file=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=366&quot; class=&quot;wp-image-11074 aligncenter&quot; src=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50&quot; alt=&quot;&quot; width=&quot;183&quot; height=&quot;50&quot; srcset=&quot;https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=183&amp;amp;h=50 183w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=150&amp;amp;h=41 150w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png?w=300&amp;amp;h=82 300w, https://bartoszmilewski.files.wordpress.com/2020/10/red_science.png 366w&quot; sizes=&quot;(max-width: 183px) 100vw, 183px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;
(CopperPlate, Gear) -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;When mapped over a belt of &lt;code&gt;CopperPlate&lt;/code&gt; it should produce a belt of partially applied assemblers, each with the recipe:&lt;/p&gt;
&lt;pre&gt;
Gear -&amp;gt; RedScience
&lt;/pre&gt;
&lt;p&gt;Now suppose that you have a belt of gears ready. You should be able to produce a belt of red science. If there only were a way to apply the first belt over the second belt. Something like this:&lt;/p&gt;
&lt;pre&gt;
(Belt (Gear -&amp;gt; RedScience), Belt Gear) -&amp;gt; Belt RedScience
&lt;/pre&gt;
&lt;p&gt;Here we have a belt of primed assemblers and a belt of gears and the output is a belt of red science.&lt;/p&gt;
&lt;p&gt;A functor that supports this kind of merging is called an &lt;em&gt;applicative functor&lt;/em&gt;. &lt;code&gt;Belt&lt;/code&gt; is an applicative functor. In fact, we can tell that it’s applicative because we’ve established that it’s monoidal. Indeed, monoidality lets us merge the two belts to get a belt of pairs&lt;/p&gt;
&lt;pre&gt;
Belt (Gear -&amp;gt; RedScience, Gear)
&lt;/pre&gt;
&lt;p&gt;We know that there is a way of applying the &lt;code&gt;Gear-&amp;gt;RedScience&lt;/code&gt; assembler to a &lt;code&gt;Gear&lt;/code&gt; resulting in &lt;code&gt;RedScience&lt;/code&gt;. That’s just how assemblers work. But for the purpose of this argument, let’s give this application an explicit name: &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
eval :: (Gear -&amp;gt; RedScience, Gear) -&amp;gt; RedScience
eval (gtor, gr) = gtor gr
&lt;/pre&gt;
&lt;p&gt;(&lt;code&gt;gtor gr&lt;/code&gt; is just Haskell syntax for applying the function &lt;code&gt;gtor&lt;/code&gt; to the argument &lt;code&gt;gr&lt;/code&gt;). We are abstracting the basic property of an assembler that it can be applied to an item.&lt;/p&gt;
&lt;p&gt;Now, since &lt;code&gt;Belt&lt;/code&gt; is a functor, we can map &lt;code&gt;eval&lt;/code&gt; over our belt of pairs and get a belt of &lt;code&gt;RedScience&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;
apBelt :: (Belt (Gear -&amp;gt; RedScience), Belt Gear) -&amp;gt; Belt RedScience
apBelt (gtors, gear) = mapBelt eval (mergeBelts (gtors, gears))
&lt;/pre&gt;
&lt;p&gt;Going back to our original problem: given a belt of copper plate and a belt of gear, this is how we produce a belt of red science:&lt;/p&gt;
&lt;pre&gt;
redScienceFromBelts :: (Belt CopperPlate, Belt Gear) -&amp;gt; Belt RedScience
redScienceFromBelts (beltCu, beltGear) = 
  apBelt (mapBelt (curry makeRedScience) beltCu, beltGear)
&lt;/pre&gt;
&lt;p&gt;We curry the two-argument function &lt;code&gt;makeRedScience&lt;/code&gt; and map it over the belt of copper plates. We get a beltful of primed assemblers. We then use &lt;code&gt;apBelt&lt;/code&gt; to apply these assemblers to a belt of gears.&lt;/p&gt;
&lt;p&gt;To get a general definition of an applicative functor, it’s enough to replace &lt;code&gt;Belt&lt;/code&gt; with generic functor &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;CopperPlate&lt;/code&gt; with &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;Gear&lt;/code&gt; with &lt;code&gt;b&lt;/code&gt;. A funtor &lt;code&gt;F&lt;/code&gt; is applicative if there is a polymorphic function:&lt;/p&gt;
&lt;pre&gt;
(F (a -&amp;gt; b), F a) -&amp;gt; F b
&lt;/pre&gt;
&lt;p&gt;or, in curried form,&lt;/p&gt;
&lt;pre&gt;
F (a -&amp;gt; b) -&amp;gt; F a -&amp;gt; F b
&lt;/pre&gt;
&lt;p&gt;To complete the picture, we also need the equivalent of the monoidal unit law. A function called &lt;code&gt;pure&lt;/code&gt; plays this role:&lt;/p&gt;
&lt;pre&gt;
pure :: a -&amp;gt; F a
&lt;/pre&gt;
&lt;p&gt;This just tell you that there is a way to create a belt with a single item on it.&lt;/p&gt;
&lt;h2&gt;Monads&lt;/h2&gt;
&lt;p&gt;In Factorio, the nesting of functors is drastically limited. It’s possible to produce belts, and you can put them on belts, so you can have a beltful of belts, &lt;code&gt;Belt Belt&lt;/code&gt;. Similarly you can store chests inside chests. But you can’t have belts of &lt;em&gt;loaded&lt;/em&gt; belts. You can’t pick a belt filled with copper plates and put it on another belt. In other words, you cannot transport beltfuls of stuff. Realistically, that wouldn’t make much sense in real world, but in Functorio, this is exactly what we need to implement monads. So imagine that you have a belt carrying a bunch of belts that are carrying copper plates. If belts were monadic, you could turn this whole thing into a single belt of copper plates. This functionality is called &lt;code&gt;join&lt;/code&gt; (in some languages, “flatten”):&lt;/p&gt;
&lt;pre&gt;
join :: Belt (Belt CopperPlate) -&amp;gt; Belt CopperPlate
&lt;/pre&gt;
&lt;p&gt;This function just gathers all the copper plates from all the belts and puts them on a single belt. You can thing of it as concatenating all the subbelts into one.&lt;/p&gt;
&lt;p&gt;Similarly, if chests were monadic (and there’s no reason they shouldn’t be) we would have:&lt;/p&gt;
&lt;pre&gt;
join :: Chest (Chest Gear) -&amp;gt; Chest Gear
&lt;/pre&gt;
&lt;p&gt;A monad must also support the applicative &lt;code&gt;pure&lt;/code&gt; (in Haskell it’s called &lt;code&gt;return&lt;/code&gt;) and, in fact, every monad is automatically applicative.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are many other aspects of Factorio that lead to interesting topics in programming. For instance, the train system requires dealing with concurrency. If two trains try to enter the same crossing, we’ll have a data race which, in Functorio, is called a train crash. In programming, we avoid data races using locks. In Factorio, they are called train signals. And, of course, locks lead to deadlocks, which are very hard to debug in Factorio.&lt;/p&gt;
&lt;p&gt;In functional programming we might use STM (Software Transactional Memory) to deal with concurrency. A train approaching a crossing would start a &lt;em&gt;crossing transaction&lt;/em&gt;. It would temporarily ignore all other trains and happily make the crossing. Then it would attempt to commit the crossing. The system would then check if, in the meanwhile, another train has successfully commited the same crossing. If so, it would say “oops! try again!”.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-rating-enabled sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-3549518-11067-602c6a5cc2671&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20200826#blog_id=3549518&amp;amp;post_id=11067&amp;amp;origin=bartoszmilewski.wordpress.com&amp;amp;obj_id=3549518-11067-602c6a5cc2671&amp;amp;domain=bartoszmilewski.com&quot; data-name=&quot;like-post-frame-3549518-11067-602c6a5cc2671&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;h3 class=&quot;jp-relatedposts-headline&quot;&gt;&lt;em&gt;Related&lt;/em&gt;&lt;/h3&gt;
&lt;/p&gt;
&lt;/div&gt;


</description>
<pubDate>Tue, 16 Feb 2021 19:50:48 +0000</pubDate>
<dc:creator>ibobev</dc:creator>
<og:type>article</og:type>
<og:title>Functorio</og:title>
<og:url>https://bartoszmilewski.com/2021/02/16/functorio/</og:url>
<og:description>You might have heard people say that functional programming is more academic, and real engineering is done in imperative style. I’m going to show you that real engineering is functional, and …</og:description>
<og:image>https://bartoszmilewski.files.wordpress.com/2020/12/redscienceassembler.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bartoszmilewski.com/2021/02/16/functorio/</dc:identifier>
</item>
<item>
<title>What I Worked On</title>
<link>http://paulgraham.com/worked.html</link>
<guid isPermaLink="true" >http://paulgraham.com/worked.html</guid>
<description>&lt;img src=&quot;https://s.yimg.com/aah/paulgraham/what-i-worked-on-1.gif&quot; width=&quot;147&quot; height=&quot;18&quot; border=&quot;0&quot; hspace=&quot;0&quot; vspace=&quot;0&quot; alt=&quot;What I Worked On&quot; /&gt;&lt;p&gt;&lt;span&gt;February 2021&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Before college the two main things I worked on, outside of school, were writing and programming. I didn't write essays. I wrote what beginning writers were supposed to write then, and probably still are: short stories. My stories were awful. They had hardly any plot, just characters with strong feelings, which I imagined made them deep.&lt;/p&gt;&lt;p&gt;The first programs I tried writing were on the IBM 1401 that our school district used for what was then called &quot;data processing.&quot; This was in 9th grade, so I was 13 or 14. The school district's 1401 happened to be in the basement of our junior high school, and my friend Rich Draves and I got permission to use it. It was like a mini Bond villain's lair down there, with all these alien-looking machines — CPU, disk drives, printer, card reader — sitting up on a raised floor under bright fluorescent lights.&lt;/p&gt;&lt;p&gt;The language we used was an early version of Fortran. You had to type programs on punch cards, then stack them in the card reader and press a button to load the program into memory and run it. The result would ordinarily be to print something on the spectacularly loud printer.&lt;/p&gt;&lt;p&gt;I was puzzled by the 1401. I couldn't figure out what to do with it. And in retrospect there's not much I could have done with it. The only form of input to programs was data stored on punched cards, and I didn't have any data stored on punched cards. The only other option was to do things that didn't rely on any input, like calculate approximations of pi, but I didn't know enough math to do anything interesting of that type. So I'm not surprised I can't remember any programs I wrote, because they can't have done much. My clearest memory is of the moment I learned it was possible for programs not to terminate, when one of mine didn't. On a machine without time-sharing, this was a social as well as a technical error, as the data center manager's expression made clear.&lt;/p&gt;&lt;p&gt;With microcomputers, everything changed. Now you could have a computer sitting right in front of you, on a desk, that could respond to your keystrokes as it was running instead of just churning through a stack of punch cards and then stopping. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f1n&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The first of my friends to get a microcomputer built it himself. It was sold as a kit by Heathkit. I remember vividly how impressed and envious I felt watching him sitting in front of it, typing programs right into the computer.&lt;/p&gt;&lt;p&gt;Computers were expensive in those days and it took me years of nagging before I convinced my father to buy one, a TRS-80, in about 1980. The gold standard then was the Apple II, but a TRS-80 was good enough. This was when I really started programming. I wrote simple games, a program to predict how high my model rockets would fly, and a word processor that my father used to write at least one book. There was only room in memory for about 2 pages of text, so he'd write 2 pages at a time and then print them out, but it was a lot better than a typewriter.&lt;/p&gt;&lt;p&gt;Though I liked programming, I didn't plan to study it in college. In college I was going to study philosophy, which sounded much more powerful. It seemed, to my naive high school self, to be the study of the ultimate truths, compared to which the things studied in other fields would be mere domain knowledge. What I discovered when I got to college was that the other fields took up so much of the space of ideas that there wasn't much left for these supposed ultimate truths. All that seemed left for philosophy were edge cases that people in other fields felt could safely be ignored.&lt;/p&gt;&lt;p&gt;I couldn't have put this into words when I was 18. All I knew at the time was that I kept taking philosophy courses and they kept being boring. So I decided to switch to AI.&lt;/p&gt;&lt;p&gt;AI was in the air in the mid 1980s, but there were two things especially that made me want to work on it: a novel by Heinlein called &lt;em&gt;The Moon is a Harsh Mistress&lt;/em&gt;, which featured an intelligent computer called Mike, and a PBS documentary that showed Terry Winograd using SHRDLU. I haven't tried rereading &lt;em&gt;The Moon is a Harsh Mistress&lt;/em&gt;, so I don't know how well it has aged, but when I read it I was drawn entirely into its world. It seemed only a matter of time before we'd have Mike, and when I saw Winograd using SHRDLU, it seemed like that time would be a few years at most. All you had to do was teach SHRDLU more words.&lt;/p&gt;&lt;p&gt;There weren't any classes in AI at Cornell then, not even graduate classes, so I started trying to teach myself. Which meant learning Lisp, since in those days Lisp was regarded as the language of AI. The commonly used programming languages then were pretty primitive, and programmers' ideas correspondingly so. The default language at Cornell was a Pascal-like language called PL/I, and the situation was similar elsewhere. Learning Lisp expanded my concept of a program so fast that it was years before I started to have a sense of where the new limits were. This was more like it; this was what I had expected college to do. It wasn't happening in a class, like it was supposed to, but that was ok. For the next couple years I was on a roll. I knew what I was going to do.&lt;/p&gt;&lt;p&gt;For my undergraduate thesis, I reverse-engineered SHRDLU. My God did I love working on that program. It was a pleasing bit of code, but what made it even more exciting was my belief — hard to imagine now, but not unique in 1985 — that it was already climbing the lower slopes of intelligence.&lt;/p&gt;&lt;p&gt;I had gotten into a program at Cornell that didn't make you choose a major. You could take whatever classes you liked, and choose whatever you liked to put on your degree. I of course chose &quot;Artificial Intelligence.&quot; When I got the actual physical diploma, I was dismayed to find that the quotes had been included, which made them read as scare-quotes. At the time this bothered me, but now it seems amusingly accurate, for reasons I was about to discover.&lt;/p&gt;&lt;p&gt;I applied to 3 grad schools: MIT and Yale, which were renowned for AI at the time, and Harvard, which I'd visited because Rich Draves went there, and was also home to Bill Woods, who'd invented the type of parser I used in my SHRDLU clone. Only Harvard accepted me, so that was where I went.&lt;/p&gt;&lt;p&gt;I don't remember the moment it happened, or if there even was a specific moment, but during the first year of grad school I realized that AI, as practiced at the time, was a hoax. By which I mean the sort of AI in which a program that's told &quot;the dog is sitting on the chair&quot; translates this into some formal representation and adds it to the list of things it knows.&lt;/p&gt;&lt;p&gt;What these programs really showed was that there's a subset of natural language that's a formal language. But a very proper subset. It was clear that there was an unbridgeable gap between what they could do and actually understanding natural language. It was not, in fact, simply a matter of teaching SHRDLU more words. That whole way of doing AI, with explicit data structures representing concepts, was not going to work. Its brokenness did, as so often happens, generate a lot of opportunities to write papers about various band-aids that could be applied to it, but it was never going to get us Mike.&lt;/p&gt;&lt;p&gt;So I looked around to see what I could salvage from the wreckage of my plans, and there was Lisp. I knew from experience that Lisp was interesting for its own sake and not just for its association with AI, even though that was the main reason people cared about it at the time. So I decided to focus on Lisp. In fact, I decided to write a book about Lisp hacking. It's scary to think how little I knew about Lisp hacking when I started writing that book. But there's nothing like writing a book about something to help you learn it. The book, &lt;em&gt;On Lisp&lt;/em&gt;, wasn't published till 1993, but I wrote much of it in grad school.&lt;/p&gt;&lt;p&gt;Computer Science is an uneasy alliance between two halves, theory and systems. The theory people prove things, and the systems people build things. I wanted to build things. I had plenty of respect for theory — indeed, a sneaking suspicion that it was the more admirable of the two halves — but building things seemed so much more exciting.&lt;/p&gt;&lt;p&gt;The problem with systems work, though, was that it didn't last. Any program you wrote today, no matter how good, would be obsolete in a couple decades at best. People might mention your software in footnotes, but no one would actually use it. And indeed, it would seem very feeble work. Only people with a sense of the history of the field would even realize that, in its time, it had been good.&lt;/p&gt;&lt;p&gt;There were some surplus Xerox Dandelions floating around the computer lab at one point. Anyone who wanted one to play around with could have one. I was briefly tempted, but they were so slow by present standards; what was the point? No one else wanted one either, so off they went. That was what happened to systems work.&lt;/p&gt;&lt;p&gt;I wanted not just to build things, but to build things that would last.&lt;/p&gt;&lt;p&gt;In this dissatisfied state I went in 1988 to visit Rich Draves at CMU, where he was in grad school. One day I went to visit the Carnegie Institute, where I'd spent a lot of time as a kid. While looking at a painting there I realized something that might seem obvious, but was a big surprise to me. There, right on the wall, was something you could make that would last. Paintings didn't become obsolete. Some of the best ones were hundreds of years old.&lt;/p&gt;&lt;p&gt;And moreover this was something you could make a living doing. Not as easily as you could by writing software, of course, but I thought if you were really industrious and lived really cheaply, it had to be possible to make enough to survive. And as an artist you could be truly independent. You wouldn't have a boss, or even need to get research funding.&lt;/p&gt;&lt;p&gt;I had always liked looking at paintings. Could I make them? I had no idea. I'd never imagined it was even possible. I knew intellectually that people made art — that it didn't just appear spontaneously — but it was as if the people who made it were a different species. They either lived long ago or were mysterious geniuses doing strange things in profiles in &lt;em&gt;Life&lt;/em&gt; magazine. The idea of actually being able to make art, to put that verb before that noun, seemed almost miraculous.&lt;/p&gt;&lt;p&gt;That fall I started taking art classes at Harvard. Grad students could take classes in any department, and my advisor, Tom Cheatham, was very easy going. If he even knew about the strange classes I was taking, he never said anything.&lt;/p&gt;&lt;p&gt;So now I was in a PhD program in computer science, yet planning to be an artist, yet also genuinely in love with Lisp hacking and working away at &lt;em&gt;On Lisp&lt;/em&gt;. In other words, like many a grad student, I was working energetically on multiple projects that were not my thesis.&lt;/p&gt;&lt;p&gt;I didn't see a way out of this situation. I didn't want to drop out of grad school, but how else was I going to get out? I remember when my friend Robert Morris got kicked out of Cornell for writing the internet worm of 1988, I was envious that he'd found such a spectacular way to get out of grad school.&lt;/p&gt;&lt;p&gt;Then one day in April 1990 a crack appeared in the wall. I ran into professor Cheatham and he asked if I was far enough along to graduate that June. I didn't have a word of my dissertation written, but in what must have been the quickest bit of thinking in my life, I decided to take a shot at writing one in the 5 weeks or so that remained before the deadline, reusing parts of &lt;em&gt;On Lisp&lt;/em&gt; where I could, and I was able to respond, with no perceptible delay &quot;Yes, I think so. I'll give you something to read in a few days.&quot;&lt;/p&gt;&lt;p&gt;I picked applications of continuations as the topic. In retrospect I should have written about macros and embedded languages. There's a whole world there that's barely been explored. But all I wanted was to get out of grad school, and my rapidly written dissertation sufficed, just barely.&lt;/p&gt;&lt;p&gt;Meanwhile I was applying to art schools. I applied to two: RISD in the US, and the Accademia di Belli Arti in Florence, which, because it was the oldest art school, I imagined would be good. RISD accepted me, and I never heard back from the Accademia, so off to Providence I went.&lt;/p&gt;&lt;p&gt;I'd applied for the BFA program at RISD, which meant in effect that I had to go to college again. This was not as strange as it sounds, because I was only 25, and art schools are full of people of different ages. RISD counted me as a transfer sophomore and said I had to do the foundation that summer. The foundation means the classes that everyone has to take in fundamental subjects like drawing, color, and design.&lt;/p&gt;&lt;p&gt;Toward the end of the summer I got a big surprise: a letter from the Accademia, which had been delayed because they'd sent it to Cambridge England instead of Cambridge Massachusetts, inviting me to take the entrance exam in Florence that fall. This was now only weeks away. My nice landlady let me leave my stuff in her attic. I had some money saved from consulting work I'd done in grad school; there was probably enough to last a year if I lived cheaply. Now all I had to do was learn Italian.&lt;/p&gt;&lt;p&gt;Only &lt;em&gt;stranieri&lt;/em&gt; (foreigners) had to take this entrance exam. In retrospect it may well have been a way of excluding them, because there were so many &lt;em&gt;stranieri&lt;/em&gt; attracted by the idea of studying art in Florence that the Italian students would otherwise have been outnumbered. I was in decent shape at painting and drawing from the RISD foundation that summer, but I still don't know how I managed to pass the written exam. I remember that I answered the essay question by writing about Cezanne, and that I cranked up the intellectual level as high as I could to make the most of my limited vocabulary. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f2n&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I'm only up to age 25 and already there are such conspicuous patterns. Here I was, yet again about to attend some august institution in the hopes of learning about some prestigious subject, and yet again about to be disappointed. The students and faculty in the painting department at the Accademia were the nicest people you could imagine, but they had long since arrived at an arrangement whereby the students wouldn't require the faculty to teach anything, and in return the faculty wouldn't require the students to learn anything. And at the same time all involved would adhere outwardly to the conventions of a 19th century atelier. We actually had one of those little stoves, fed with kindling, that you see in 19th century studio paintings, and a nude model sitting as close to it as possible without getting burned. Except hardly anyone else painted her besides me. The rest of the students spent their time chatting or occasionally trying to imitate things they'd seen in American art magazines.&lt;/p&gt;&lt;p&gt;Our model turned out to live just down the street from me. She made a living from a combination of modelling and making fakes for a local antique dealer. She'd copy an obscure old painting out of a book, and then he'd take the copy and maltreat it to make it look old. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f3n&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;While I was a student at the Accademia I started painting still lives in my bedroom at night. These paintings were tiny, because the room was, and because I painted them on leftover scraps of canvas, which was all I could afford at the time. Painting still lives is different from painting people, because the subject, as its name suggests, can't move. People can't sit for more than about 15 minutes at a time, and when they do they don't sit very still. So the traditional m.o. for painting people is to know how to paint a generic person, which you then modify to match the specific person you're painting. Whereas a still life you can, if you want, copy pixel by pixel from what you're seeing. You don't want to stop there, of course, or you get merely photographic accuracy, and what makes a still life interesting is that it's been through a head. You want to emphasize the visual cues that tell you, for example, that the reason the color changes suddenly at a certain point is that it's the edge of an object. By subtly emphasizing such things you can make paintings that are more realistic than photographs not just in some metaphorical sense, but in the strict information-theoretic sense. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f4n&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I liked painting still lives because I was curious about what I was seeing. In everyday life, we aren't consciously aware of much we're seeing. Most visual perception is handled by low-level processes that merely tell your brain &quot;that's a water droplet&quot; without telling you details like where the lightest and darkest points are, or &quot;that's a bush&quot; without telling you the shape and position of every leaf. This is a feature of brains, not a bug. In everyday life it would be distracting to notice every leaf on every bush. But when you have to paint something, you have to look more closely, and when you do there's a lot to see. You can still be noticing new things after days of trying to paint something people usually take for granted, just as you can still be noticing new things after days of trying to write an essay about something people usually take for granted.&lt;/p&gt;&lt;p&gt;This is not the only way to paint. I'm not 100% sure it's even a good way to paint. But it seemed a good enough bet to be worth trying.&lt;/p&gt;&lt;p&gt;Our teacher, professor Ulivi, was a nice guy. He could see I worked hard, and gave me a good grade, which he wrote down in a sort of passport each student had. But the Accademia wasn't teaching me anything except Italian, and my money was running out, so at the end of the first year I went back to the US.&lt;/p&gt;&lt;p&gt;I wanted to go back to RISD, but I was now broke and RISD was very expensive, so I decided to get a job for a year and then return to RISD the next fall. I got one at a company called Interleaf, which made software for creating documents. You mean like Microsoft Word? Exactly. That was how I learned that low end software tends to eat high end software. But Interleaf still had a few years to live yet. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f5n&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Interleaf had done something pretty bold. Inspired by Emacs, they'd added a scripting language, and even made the scripting language a dialect of Lisp. Now they wanted a Lisp hacker to write things in it. This was the closest thing I've had to a normal job, and I hereby apologize to my boss and coworkers, because I was a bad employee. Their Lisp was the thinnest icing on a giant C cake, and since I didn't know C and didn't want to learn it, I never understood most of the software. Plus I was terribly irresponsible. This was back when a programming job meant showing up every day during certain working hours. That seemed unnatural to me, and on this point the rest of the world is coming around to my way of thinking, but at the time it caused a lot of conflict. Toward the end of the year I spent much of my time surreptitiously working on &lt;em&gt;On Lisp&lt;/em&gt;, which I had by this time gotten a contract to publish.&lt;/p&gt;&lt;p&gt;The good part was that I got paid huge amounts of money, especially by art student standards. In Florence, after paying my part of the rent, my budget for everything else had been $7 a day. Now I was getting paid more than 4 times that every hour, even when I was just sitting in a meeting. By living cheaply I not only managed to save enough to go back to RISD, but also paid off my college loans.&lt;/p&gt;&lt;p&gt;I learned some useful things at Interleaf, though they were mostly about what not to do. I learned that it's better for technology companies to be run by product people than sales people (though sales is a real skill and people who are good at it are really good at it), that it leads to bugs when code is edited by too many people, that cheap office space is no bargain if it's depressing, that planned meetings are inferior to corridor conversations, that big, bureaucratic customers are a dangerous source of money, and that there's not much overlap between conventional office hours and the optimal time for hacking, or conventional offices and the optimal place for it.&lt;/p&gt;&lt;p&gt;But the most important thing I learned, and which I used in both Viaweb and Y Combinator, is that the low end eats the high end: that it's good to be the &quot;entry level&quot; option, even though that will be less prestigious, because if you're not, someone else will be, and will squash you against the ceiling. Which in turn means that prestige is a danger sign.&lt;/p&gt;&lt;p&gt;When I left to go back to RISD the next fall, I arranged to do freelance work for the group that did projects for customers, and this was how I survived for the next several years. When I came back to visit for a project later on, someone told me about a new thing called HTML, which was, as he described it, a derivative of SGML. Markup language enthusiasts were an occupational hazard at Interleaf and I ignored him, but this HTML thing later became a big part of my life.&lt;/p&gt;&lt;p&gt;In the fall of 1992 I moved back to Providence to continue at RISD. The foundation had merely been intro stuff, and the Accademia had been a (very civilized) joke. Now I was going to see what real art school was like. But alas it was more like the Accademia than not. Better organized, certainly, and a lot more expensive, but it was now becoming clear that art school did not bear the same relationship to art that medical school bore to medicine. At least not the painting department. The textile department, which my next door neighbor belonged to, seemed to be pretty rigorous. No doubt illustration and architecture were too. But painting was post-rigorous. Painting students were supposed to express themselves, which to the more worldly ones meant to try to cook up some sort of distinctive signature style.&lt;/p&gt;&lt;p&gt;A signature style is the visual equivalent of what in show business is known as a &quot;schtick&quot;: something that immediately identifies the work as yours and no one else's. For example, when you see a painting that looks like a certain kind of cartoon, you know it's by Roy Lichtenstein. So if you see a big painting of this type hanging in the apartment of a hedge fund manager, you know he paid millions of dollars for it. That's not always why artists have a signature style, but it's usually why buyers pay a lot for such work. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f6n&quot;&gt;&lt;span&gt;6&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;There were plenty of earnest students too: kids who &quot;could draw&quot; in high school, and now had come to what was supposed to be the best art school in the country, to learn to draw even better. They tended to be confused and demoralized by what they found at RISD, but they kept going, because painting was what they did. I was not one of the kids who could draw in high school, but at RISD I was definitely closer to their tribe than the tribe of signature style seekers.&lt;/p&gt;&lt;p&gt;I learned a lot in the color class I took at RISD, but otherwise I was basically teaching myself to paint, and I could do that for free. So in 1993 I dropped out. I hung around Providence for a bit, and then my college friend Nancy Parmet did me a big favor. A rent-controlled apartment in a building her mother owned in New York was becoming vacant. Did I want it? It wasn't much more than my current place, and New York was supposed to be where the artists were. So yes, I wanted it! &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f7n&quot;&gt;&lt;span&gt;7&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Asterix comics begin by zooming in on a tiny corner of Roman Gaul that turns out not to be controlled by the Romans. You can do something similar on a map of New York City: if you zoom in on the Upper East Side, there's a tiny corner that's not rich, or at least wasn't in 1993. It's called Yorkville, and that was my new home. Now I was a New York artist — in the strictly technical sense of making paintings and living in New York.&lt;/p&gt;&lt;p&gt;I was nervous about money, because I could sense that Interleaf was on the way down. Freelance Lisp hacking work was very rare, and I didn't want to have to program in another language, which in those days would have meant C++ if I was lucky. So with my unerring nose for financial opportunity, I decided to write another book on Lisp. This would be a popular book, the sort of book that could be used as a textbook. I imagined myself living frugally off the royalties and spending all my time painting. (The painting on the cover of this book, &lt;em&gt;ANSI Common Lisp&lt;/em&gt;, is one that I painted around this time.)&lt;/p&gt;&lt;p&gt;The best thing about New York for me was the presence of Idelle and Julian Weber. Idelle Weber was a painter, one of the early photorealists, and I'd taken her painting class at Harvard. I've never known a teacher more beloved by her students. Large numbers of former students kept in touch with her, including me. After I moved to New York I became her de facto studio assistant.&lt;/p&gt;&lt;p&gt;She liked to paint on big, square canvases, 4 to 5 feet on a side. One day in late 1994 as I was stretching one of these monsters there was something on the radio about a famous fund manager. He wasn't that much older than me, and was super rich. The thought suddenly occurred to me: why don't I become rich? Then I'll be able to work on whatever I want.&lt;/p&gt;&lt;p&gt;Meanwhile I'd been hearing more and more about this new thing called the World Wide Web. Robert Morris showed it to me when I visited him in Cambridge, where he was now in grad school at Harvard. It seemed to me that the web would be a big deal. I'd seen what graphical user interfaces had done for the popularity of microcomputers. It seemed like the web would do the same for the internet.&lt;/p&gt;&lt;p&gt;If I wanted to get rich, here was the next train leaving the station. I was right about that part. What I got wrong was the idea. I decided we should start a company to put art galleries online. I can't honestly say, after reading so many Y Combinator applications, that this was the worst startup idea ever, but it was up there. Art galleries didn't want to be online, and still don't, not the fancy ones. That's not how they sell. I wrote some software to generate web sites for galleries, and Robert wrote some to resize images and set up an http server to serve the pages. Then we tried to sign up galleries. To call this a difficult sale would be an understatement. It was difficult to give away. A few galleries let us make sites for them for free, but none paid us.&lt;/p&gt;&lt;p&gt;Then some online stores started to appear, and I realized that except for the order buttons they were identical to the sites we'd been generating for galleries. This impressive-sounding thing called an &quot;internet storefront&quot; was something we already knew how to build.&lt;/p&gt;&lt;p&gt;So in the summer of 1995, after I submitted the camera-ready copy of &lt;em&gt;ANSI Common Lisp&lt;/em&gt; to the publishers, we started trying to write software to build online stores. At first this was going to be normal desktop software, which in those days meant Windows software. That was an alarming prospect, because neither of us knew how to write Windows software or wanted to learn. We lived in the Unix world. But we decided we'd at least try writing a prototype store builder on Unix. Robert wrote a shopping cart, and I wrote a new site generator for stores — in Lisp, of course.&lt;/p&gt;&lt;p&gt;We were working out of Robert's apartment in Cambridge. His roommate was away for big chunks of time, during which I got to sleep in his room. For some reason there was no bed frame or sheets, just a mattress on the floor. One morning as I was lying on this mattress I had an idea that made me sit up like a capital L. What if we ran the software on the server, and let users control it by clicking on links? Then we'd never have to write anything to run on users' computers. We could generate the sites on the same server we'd serve them from. Users wouldn't need anything more than a browser.&lt;/p&gt;&lt;p&gt;This kind of software, known as a web app, is common now, but at the time it wasn't clear that it was even possible. To find out, we decided to try making a version of our store builder that you could control through the browser. A couple days later, on August 12, we had one that worked. The UI was horrible, but it proved you could build a whole store through the browser, without any client software or typing anything into the command line on the server.&lt;/p&gt;&lt;p&gt;Now we felt like we were really onto something. I had visions of a whole new generation of software working this way. You wouldn't need versions, or ports, or any of that crap. At Interleaf there had been a whole group called Release Engineering that seemed to be at least as big as the group that actually wrote the software. Now you could just update the software right on the server.&lt;/p&gt;&lt;p&gt;We started a new company we called Viaweb, after the fact that our software worked via the web, and we got $10,000 in seed funding from Idelle's husband Julian. In return for that and doing the initial legal work and giving us business advice, we gave him 10% of the company. Ten years later this deal became the model for Y Combinator's. We knew founders needed something like this, because we'd needed it ourselves.&lt;/p&gt;&lt;p&gt;At this stage I had a negative net worth, because the thousand dollars or so I had in the bank was more than counterbalanced by what I owed the government in taxes. (Had I diligently set aside the proper proportion of the money I'd made consulting for Interleaf? No, I had not.) So although Robert had his graduate student stipend, I needed that seed funding to live on.&lt;/p&gt;&lt;p&gt;We originally hoped to launch in September, but we got more ambitious about the software as we worked on it. Eventually we managed to build a WYSIWYG site builder, in the sense that as you were creating pages, they looked exactly like the static ones that would be generated later, except that instead of leading to static pages, the links all referred to closures stored in a hash table on the server.&lt;/p&gt;&lt;p&gt;It helped to have studied art, because the main goal of an online store builder is to make users look legit, and the key to looking legit is high production values. If you get page layouts and fonts and colors right, you can make a guy running a store out of his bedroom look more legit than a big company.&lt;/p&gt;&lt;p&gt;(If you're curious why my site looks so old-fashioned, it's because it's still made with this software. It may look clunky today, but in 1996 it was the last word in slick.)&lt;/p&gt;&lt;p&gt;In September, Robert rebelled. &quot;We've been working on this for a month,&quot; he said, &quot;and it's still not done.&quot; This is funny in retrospect, because he would still be working on it almost 3 years later. But I decided it might be prudent to recruit more programmers, and I asked Robert who else in grad school with him was really good. He recommended Trevor Blackwell, which surprised me at first, because at that point I knew Trevor mainly for his plan to reduce everything in his life to a stack of notecards, which he carried around with him. But Rtm was right, as usual. Trevor turned out to be a frighteningly effective hacker.&lt;/p&gt;&lt;p&gt;It was a lot of fun working with Robert and Trevor. They're the two most &lt;a href=&quot;http://paulgraham.com/think.html&quot;&gt;&lt;u&gt;independent-minded&lt;/u&gt;&lt;/a&gt; people I know, and in completely different ways. If you could see inside Rtm's brain it would look like a colonial New England church, and if you could see inside Trevor's it would look like the worst excesses of Austrian Rococo.&lt;/p&gt;&lt;p&gt;We opened for business, with 6 stores, in January 1996. It was just as well we waited a few months, because although we worried we were late, we were actually almost fatally early. There was a lot of talk in the press then about ecommerce, but not many people actually wanted online stores. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f8n&quot;&gt;&lt;span&gt;8&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;There were three main parts to the software: the editor, which people used to build sites and which I wrote, the shopping cart, which Robert wrote, and the manager, which kept track of orders and statistics, and which Trevor wrote. In its time, the editor was one of the best general-purpose site builders. I kept the code tight and didn't have to integrate with any other software except Robert's and Trevor's, so it was quite fun to work on. If all I'd had to do was work on this software, the next 3 years would have been the easiest of my life. Unfortunately I had to do a lot more, all of it stuff I was worse at than programming, and the next 3 years were instead the most stressful.&lt;/p&gt;&lt;p&gt;There were a lot of startups making ecommerce software in the second half of the 90s. We were determined to be the Microsoft Word, not the Interleaf. Which meant being easy to use and inexpensive. It was lucky for us that we were poor, because that caused us to make Viaweb even more inexpensive than we realized. We charged $100 a month for a small store and $300 a month for a big one. This low price was a big attraction, and a constant thorn in the sides of competitors, but it wasn't because of some clever insight that we set the price low. We had no idea what businesses paid for things. $300 a month seemed like a lot of money to us.&lt;/p&gt;&lt;p&gt;We did a lot of things right by accident like that. For example, we did what's now called &quot;doing things that &lt;a href=&quot;http://paulgraham.com/ds.html&quot;&gt;&lt;u&gt;don't scale&lt;/u&gt;&lt;/a&gt;,&quot; although at the time we would have described it as &quot;being so lame that we're driven to the most desperate measures to get users.&quot; The most common of which was building stores for them. This seemed particularly humiliating, since the whole raison d'etre of our software was that people could use it to make their own stores. But anything to get users.&lt;/p&gt;&lt;p&gt;We learned a lot more about retail than we wanted to know. For example, that if you could only have a small image of a man's shirt (and all images were small then by present standards), it was better to have a closeup of the collar than a picture of the whole shirt. The reason I remember learning this was that it meant I had to rescan about 30 images of men's shirts. My first set of scans were so beautiful too.&lt;/p&gt;&lt;p&gt;Though this felt wrong, it was exactly the right thing to be doing. Building stores for users taught us about retail, and about how it felt to use our software. I was initially both mystified and repelled by &quot;business&quot; and thought we needed a &quot;business person&quot; to be in charge of it, but once we started to get users, I was converted, in much the same way I was converted to &lt;a href=&quot;http://paulgraham.com/kids.html&quot;&gt;&lt;u&gt;fatherhood&lt;/u&gt;&lt;/a&gt; once I had kids. Whatever users wanted, I was all theirs. Maybe one day we'd have so many users that I couldn't scan their images for them, but in the meantime there was nothing more important to do.&lt;/p&gt;&lt;p&gt;Another thing I didn't get at the time is that &lt;a href=&quot;http://paulgraham.com/growth.html&quot;&gt;&lt;u&gt;growth rate&lt;/u&gt;&lt;/a&gt; is the ultimate test of a startup. Our growth rate was fine. We had about 70 stores at the end of 1996 and about 500 at the end of 1997. I mistakenly thought the thing that mattered was the absolute number of users. And that is the thing that matters in the sense that that's how much money you're making, and if you're not making enough, you might go out of business. But in the long term the growth rate takes care of the absolute number. If we'd been a startup I was advising at Y Combinator, I would have said: Stop being so stressed out, because you're doing fine. You're growing 7x a year. Just don't hire too many more people and you'll soon be profitable, and then you'll control your own destiny.&lt;/p&gt;&lt;p&gt;Alas I hired lots more people, partly because our investors wanted me to, and partly because that's what startups did during the Internet Bubble. A company with just a handful of employees would have seemed amateurish. So we didn't reach breakeven until about when Yahoo bought us in the summer of 1998. Which in turn meant we were at the mercy of investors for the entire life of the company. And since both we and our investors were noobs at startups, the result was a mess even by startup standards.&lt;/p&gt;&lt;p&gt;It was a huge relief when Yahoo bought us. In principle our Viaweb stock was valuable. It was a share in a business that was profitable and growing rapidly. But it didn't feel very valuable to me; I had no idea how to value a business, but I was all too keenly aware of the near-death experiences we seemed to have every few months. Nor had I changed my grad student lifestyle significantly since we started. So when Yahoo bought us it felt like going from rags to riches. Since we were going to California, I bought a car, a yellow 1998 VW GTI. I remember thinking that its leather seats alone were by far the most luxurious thing I owned.&lt;/p&gt;&lt;p&gt;The next year, from the summer of 1998 to the summer of 1999, must have been the least productive of my life. I didn't realize it at the time, but I was worn out from the effort and stress of running Viaweb. For a while after I got to California I tried to continue my usual m.o. of programming till 3 in the morning, but fatigue combined with Yahoo's &lt;a href=&quot;http://paulgraham.com/yahoo.html&quot;&gt;&lt;u&gt;prematurely aged culture&lt;/u&gt;&lt;/a&gt; and grim cube farm in Santa Clara gradually dragged me down. After a few months it felt disconcertingly like working at Interleaf.&lt;/p&gt;&lt;p&gt;Yahoo had given us a lot of options when they bought us. At the time I thought Yahoo was so overvalued that they'd never be worth anything, but to my astonishment the stock went up 5x in the next year. I hung on till the first chunk of options vested, then in the summer of 1999 I left. It had been so long since I'd painted anything that I'd half forgotten why I was doing this. My brain had been entirely full of software and men's shirts for 4 years. But I had done this to get rich so I could paint, I reminded myself, and now I was rich, so I should go paint.&lt;/p&gt;&lt;p&gt;When I said I was leaving, my boss at Yahoo had a long conversation with me about my plans. I told him all about the kinds of pictures I wanted to paint. At the time I was touched that he took such an interest in me. Now I realize it was because he thought I was lying. My options at that point were worth about $2 million a month. If I was leaving that kind of money on the table, it could only be to go and start some new startup, and if I did, I might take people with me. This was the height of the Internet Bubble, and Yahoo was ground zero of it. My boss was at that moment a billionaire. Leaving then to start a new startup must have seemed to him an insanely, and yet also plausibly, ambitious plan.&lt;/p&gt;&lt;p&gt;But I really was quitting to paint, and I started immediately. There was no time to lose. I'd already burned 4 years getting rich. Now when I talk to founders who are leaving after selling their companies, my advice is always the same: take a vacation. That's what I should have done, just gone off somewhere and done nothing for a month or two, but the idea never occurred to me.&lt;/p&gt;&lt;p&gt;So I tried to paint, but I just didn't seem to have any energy or ambition. Part of the problem was that I didn't know many people in California. I'd compounded this problem by buying a house up in the Santa Cruz Mountains, with a beautiful view but miles from anywhere. I stuck it out for a few more months, then in desperation I went back to New York, where unless you understand about rent control you'll be surprised to hear I still had my apartment, sealed up like a tomb of my old life. Idelle was in New York at least, and there were other people trying to paint there, even though I didn't know any of them.&lt;/p&gt;&lt;p&gt;When I got back to New York I resumed my old life, except now I was rich. It was as weird as it sounds. I resumed all my old patterns, except now there were doors where there hadn't been. Now when I was tired of walking, all I had to do was raise my hand, and (unless it was raining) a taxi would stop to pick me up. Now when I walked past charming little restaurants I could go in and order lunch. It was exciting for a while. Painting started to go better. I experimented with a new kind of still life where I'd paint one painting in the old way, then photograph it and print it, blown up, on canvas, and then use that as the underpainting for a second still life, painted from the same objects (which hopefully hadn't rotted yet).&lt;/p&gt;&lt;p&gt;Meanwhile I looked for an apartment to buy. Now I could actually choose what neighborhood to live in. Where, I asked myself and various real estate agents, is the Cambridge of New York? Aided by occasional visits to actual Cambridge, I gradually realized there wasn't one. Huh.&lt;/p&gt;&lt;p&gt;Around this time, in the spring of 2000, I had an idea. It was clear from our experience with Viaweb that web apps were the future. Why not build a web app for making web apps? Why not let people edit code on our server through the browser, and then host the resulting applications for them? &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f9n&quot;&gt;&lt;span&gt;9&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt; You could run all sorts of services on the servers that these applications could use just by making an API call: making and receiving phone calls, manipulating images, taking credit card payments, etc.&lt;/p&gt;&lt;p&gt;I got so excited about this idea that I couldn't think about anything else. It seemed obvious that this was the future. I didn't particularly want to start another company, but it was clear that this idea would have to be embodied as one, so I decided to move to Cambridge and start it. I hoped to lure Robert into working on it with me, but there I ran into a hitch. Robert was now a postdoc at MIT, and though he'd made a lot of money the last time I'd lured him into working on one of my schemes, it had also been a huge time sink. So while he agreed that it sounded like a plausible idea, he firmly refused to work on it.&lt;/p&gt;&lt;p&gt;Hmph. Well, I'd do it myself then. I recruited Dan Giffin, who had worked for Viaweb, and two undergrads who wanted summer jobs, and we got to work trying to build what it's now clear is about twenty companies and several open source projects worth of software. The language for defining applications would of course be a dialect of Lisp. But I wasn't so naive as to assume I could spring an overt Lisp on a general audience; we'd hide the parentheses, like Dylan did.&lt;/p&gt;&lt;p&gt;By then there was a name for the kind of company Viaweb was, an &quot;application service provider,&quot; or ASP. This name didn't last long before it was replaced by &quot;software as a service,&quot; but it was current for long enough that I named this new company after it: it was going to be called Aspra.&lt;/p&gt;&lt;p&gt;I started working on the application builder, Dan worked on network infrastructure, and the two undergrads worked on the first two services (images and phone calls). But about halfway through the summer I realized I really didn't want to run a company — especially not a big one, which it was looking like this would have to be. I'd only started Viaweb because I needed the money. Now that I didn't need money anymore, why was I doing this? If this vision had to be realized as a company, then screw the vision. I'd build a subset that could be done as an open source project.&lt;/p&gt;&lt;p&gt;Much to my surprise, the time I spent working on this stuff was not wasted after all. After we started Y Combinator, I would often encounter startups working on parts of this new architecture, and it was very useful to have spent so much time thinking about it and even trying to write some of it.&lt;/p&gt;&lt;p&gt;The subset I would build as an open source project was the new Lisp, whose parentheses I now wouldn't even have to hide. A lot of Lisp hackers dream of building a new Lisp, partly because one of the distinctive features of the language is that it has dialects, and partly, I think, because we have in our minds a Platonic form of Lisp that all existing dialects fall short of. I certainly did. So at the end of the summer Dan and I switched to working on this new dialect of Lisp, which I called Arc, in a house I bought in Cambridge.&lt;/p&gt;&lt;p&gt;The following spring, lightning struck. I was invited to give a talk at a Lisp conference, so I gave one about how we'd used Lisp at Viaweb. Afterward I put a postscript file of this talk online, on paulgraham.com, which I'd created years before using Viaweb but had never used for anything. In one day it got 30,000 page views. What on earth had happened? The referring urls showed that someone had posted it on Slashdot. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f10n&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Wow, I thought, there's an audience. If I write something and put it on the web, anyone can read it. That may seem obvious now, but it was surprising then. In the print era there was a narrow channel to readers, guarded by fierce monsters known as editors. The only way to get an audience for anything you wrote was to get it published as a book, or in a newspaper or magazine. Now anyone could publish anything.&lt;/p&gt;&lt;p&gt;This had been possible in principle since 1993, but not many people had realized it yet. I had been intimately involved with building the infrastructure of the web for most of that time, and a writer as well, and it had taken me 8 years to realize it. Even then it took me several years to understand the implications. It meant there would be a whole new generation of &lt;a href=&quot;http://paulgraham.com/essay.html&quot;&gt;&lt;u&gt;essays&lt;/u&gt;&lt;/a&gt;. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f11n&quot;&gt;&lt;span&gt;11&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;In the print era, the channel for publishing essays had been vanishingly small. Except for a few officially anointed thinkers who went to the right parties in New York, the only people allowed to publish essays were specialists writing about their specialties. There were so many essays that had never been written, because there had been no way to publish them. Now they could be, and I was going to write them. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f12n&quot;&gt;&lt;span&gt;12&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I've worked on several different things, but to the extent there was a turning point where I figured out what to work on, it was when I started publishing essays online. From then on I knew that whatever else I did, I'd always write essays too.&lt;/p&gt;&lt;p&gt;I knew that online essays would be a marginal medium at first. Socially they'd seem more like rants posted by nutjobs on their GeoCities sites than the genteel and beautifully typeset compositions published in &lt;em&gt;The New Yorker&lt;/em&gt;. But by this point I knew enough to find that encouraging instead of discouraging.&lt;/p&gt;&lt;p&gt;One of the most conspicuous patterns I've noticed in my life is how well it's worked, for me at least, to work on things that weren't prestigious. Still life has always been the least prestigious form of painting. Viaweb and Y Combinator both seemed lame when we started them. I still get the glassy eye from strangers when they ask what I'm writing, and I explain that it's an essay I'm going to publish on my web site. Even Lisp, though prestigious intellectually in something like the way Latin is, also seems about as hip.&lt;/p&gt;&lt;p&gt;It's not that unprestigious types of work are good per se. But when you find yourself drawn to some kind of work despite its current lack of prestige, it's a sign both that there's something real to be discovered there, and that you have the right kind of motives. Impure motives are a big danger for the ambitious. If anything is going to lead you astray, it will be the desire to impress people. So while working on things that aren't prestigious doesn't guarantee you're on the right track, it at least guarantees you're not on the most common type of wrong one.&lt;/p&gt;&lt;p&gt;Over the next several years I wrote lots of essays about all kinds of different topics. O'Reilly reprinted a collection of them as a book, called &lt;em&gt;Hackers &amp;amp; Painters&lt;/em&gt; after one of the essays in it. I also worked on spam filters, and did some more painting. I used to have dinners for a group of friends every thursday night, which taught me how to cook for groups. And I bought another building in Cambridge, a former candy factory (and later, twas said, porn studio), to use as an office.&lt;/p&gt;&lt;p&gt;One night in October 2003 there was a big party at my house. It was a clever idea of my friend Maria Daniels, who was one of the thursday diners. Three separate hosts would all invite their friends to one party. So for every guest, two thirds of the other guests would be people they didn't know but would probably like. One of the guests was someone I didn't know but would turn out to like a lot: a woman called Jessica Livingston. A couple days later I asked her out.&lt;/p&gt;&lt;p&gt;Jessica was in charge of marketing at a Boston investment bank. This bank thought it understood startups, but over the next year, as she met friends of mine from the startup world, she was surprised how different reality was. And how colorful their stories were. So she decided to compile a book of &lt;a href=&quot;https://www.amazon.com/Founders-Work-Stories-Startups-Early/dp/1430210788&quot;&gt;&lt;u&gt;interviews&lt;/u&gt;&lt;/a&gt; with startup founders.&lt;/p&gt;&lt;p&gt;When the bank had financial problems and she had to fire half her staff, she started looking for a new job. In early 2005 she interviewed for a marketing job at a Boston VC firm. It took them weeks to make up their minds, and during this time I started telling her about all the things that needed to be fixed about venture capital. They should make a larger number of smaller investments instead of a handful of giant ones, they should be funding younger, more technical founders instead of MBAs, they should let the founders remain as CEO, and so on.&lt;/p&gt;&lt;p&gt;One of my tricks for writing essays had always been to give talks. The prospect of having to stand up in front of a group of people and tell them something that wouldn't waste their time was a great spur to the imagination. When the Harvard Computer Society, the undergrad computer club, asked me to give a talk, I decided I would tell them how to start a startup. Maybe they'd be able to avoid the worst of the mistakes we'd made.&lt;/p&gt;&lt;p&gt;So I gave this talk, in the course of which I told them that the best sources of seed funding were successful startup founders, because then they'd be sources of advice too. Whereupon it seemed they were all looking expectantly at me. Horrified at the prospect of having my inbox flooded by business plans (if I'd only known), I blurted out &quot;But not me!&quot; and went on with the talk. But afterward it occurred to me that I should really stop procrastinating about angel investing. I'd been meaning to since Yahoo bought us, and now it was 7 years later and I still hadn't done one angel investment.&lt;/p&gt;&lt;p&gt;Meanwhile I had been scheming with Robert and Trevor about projects we could work on together. I missed working with them, and it seemed like there had to be something we could collaborate on.&lt;/p&gt;&lt;p&gt;As Jessica and I were walking home from dinner on March 11, at the corner of Garden and Walker streets, these three threads converged. Screw the VCs who were taking so long to make up their minds. We'd start our own investment firm and actually implement the ideas we'd been talking about. I'd fund it, and Jessica could quit her job and work for it, and we'd get Robert and Trevor as partners too. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f13n&quot;&gt;&lt;span&gt;13&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Once again, ignorance worked in our favor. We had no idea how to be angel investors, and in Boston in 2005 there were no Ron Conways to learn from. So we just made what seemed like the obvious choices, and some of the things we did turned out to be novel.&lt;/p&gt;&lt;p&gt;There are multiple components to Y Combinator, and we didn't figure them all out at once. The part we got first was to be an angel firm. In those days, those two words didn't go together. There were VC firms, which were organized companies with people whose job it was to make investments, but they only did big, million dollar investments. And there were angels, who did smaller investments, but these were individuals who were usually focused on other things and made investments on the side. And neither of them helped founders enough in the beginning. We knew how helpless founders were in some respects, because we remembered how helpless we'd been. For example, one thing Julian had done for us that seemed to us like magic was to get us set up as a company. We were fine writing fairly difficult software, but actually getting incorporated, with bylaws and stock and all that stuff, how on earth did you do that? Our plan was not only to make seed investments, but to do for startups everything Julian had done for us.&lt;/p&gt;&lt;p&gt;YC was not organized as a fund. It was cheap enough to run that we funded it with our own money. That went right by 99% of readers, but professional investors are thinking &quot;Wow, that means they got all the returns.&quot; But once again, this was not due to any particular insight on our part. We didn't know how VC firms were organized. It never occurred to us to try to raise a fund, and if it had, we wouldn't have known where to start. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f14n&quot;&gt;&lt;span&gt;14&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The most distinctive thing about YC is the batch model: to fund a bunch of startups all at once, twice a year, and then to spend three months focusing intensively on trying to help them. That part we discovered by accident, not merely implicitly but explicitly due to our ignorance about investing. We needed to get experience as investors. What better way, we thought, than to fund a whole bunch of startups at once? We knew undergrads got temporary jobs at tech companies during the summer. Why not organize a summer program where they'd start startups instead? We wouldn't feel guilty for being in a sense fake investors, because they would in a similar sense be fake founders. So while we probably wouldn't make much money out of it, we'd at least get to practice being investors on them, and they for their part would probably have a more interesting summer than they would working at Microsoft.&lt;/p&gt;&lt;p&gt;We'd use the building I owned in Cambridge as our headquarters. We'd all have dinner there once a week — on tuesdays, since I was already cooking for the thursday diners on thursdays — and after dinner we'd bring in experts on startups to give talks.&lt;/p&gt;&lt;p&gt;We knew undergrads were deciding then about summer jobs, so in a matter of days we cooked up something we called the Summer Founders Program, and I posted an &lt;a href=&quot;http://paulgraham.com/summerfounder.html&quot;&gt;&lt;u&gt;announcement&lt;/u&gt;&lt;/a&gt; on my site, inviting undergrads to apply. I had never imagined that writing essays would be a way to get &quot;deal flow,&quot; as investors call it, but it turned out to be the perfect source. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f15n&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt; We got 225 applications for the Summer Founders Program, and we were surprised to find that a lot of them were from people who'd already graduated, or were about to that spring. Already this SFP thing was starting to feel more serious than we'd intended.&lt;/p&gt;&lt;p&gt;We invited about 20 of the 225 groups to interview in person, and from those we picked 8 to fund. They were an impressive group. That first batch included reddit, Justin Kan and Emmett Shear, who went on to found Twitch, Aaron Swartz, who had already helped write the RSS spec and would a few years later become a martyr for open access, and Sam Altman, who would later become the second president of YC. I don't think it was entirely luck that the first batch was so good. You had to be pretty bold to sign up for a weird thing like the Summer Founders Program instead of a summer job at a legit place like Microsoft or Goldman Sachs.&lt;/p&gt;&lt;p&gt;The deal for startups was based on a combination of the deal we did with Julian ($10k for 10%) and what Robert said MIT grad students got for the summer ($6k). We invested $6k per founder, which in the typical two-founder case was $12k, in return for 6%. That had to be fair, because it was twice as good as the deal we ourselves had taken. Plus that first summer, which was really hot, Jessica brought the founders free air conditioners. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f16n&quot;&gt;&lt;span&gt;16&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Fairly quickly I realized that we had stumbled upon the way to scale startup funding. Funding startups in batches was more convenient for us, because it meant we could do things for a lot of startups at once, but being part of a batch was better for the startups too. It solved one of the biggest problems faced by founders: the isolation. Now you not only had colleagues, but colleagues who understood the problems you were facing and could tell you how they were solving them.&lt;/p&gt;&lt;p&gt;As YC grew, we started to notice other advantages of scale. The alumni became a tight community, dedicated to helping one another, and especially the current batch, whose shoes they remembered being in. We also noticed that the startups were becoming one another's customers. We used to refer jokingly to the &quot;YC GDP,&quot; but as YC grows this becomes less and less of a joke. Now lots of startups get their initial set of customers almost entirely from among their batchmates.&lt;/p&gt;&lt;p&gt;I had not originally intended YC to be a full-time job. I was going to do three things: hack, write essays, and work on YC. As YC grew, and I grew more excited about it, it started to take up a lot more than a third of my attention. But for the first few years I was still able to work on other things.&lt;/p&gt;&lt;p&gt;In the summer of 2006, Robert and I started working on a new version of Arc. This one was reasonably fast, because it was compiled into Scheme. To test this new Arc, I wrote Hacker News in it. It was originally meant to be a news aggregator for startup founders and was called Startup News, but after a few months I got tired of reading about nothing but startups. Plus it wasn't startup founders we wanted to reach. It was future startup founders. So I changed the name to Hacker News and the topic to whatever engaged one's intellectual curiosity.&lt;/p&gt;&lt;p&gt;HN was no doubt good for YC, but it was also by far the biggest source of stress for me. If all I'd had to do was select and help founders, life would have been so easy. And that implies that HN was a mistake. Surely the biggest source of stress in one's work should at least be something close to the core of the work. Whereas I was like someone who was in pain while running a marathon not from the exertion of running, but because I had a blister from an ill-fitting shoe. When I was dealing with some urgent problem during YC, there was about a 60% chance it had to do with HN, and a 40% chance it had do with everything else combined. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f17n&quot;&gt;&lt;span&gt;17&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;As well as HN, I wrote all of YC's internal software in Arc. But while I continued to work a good deal &lt;em&gt;in&lt;/em&gt; Arc, I gradually stopped working &lt;em&gt;on&lt;/em&gt; Arc, partly because I didn't have time to, and partly because it was a lot less attractive to mess around with the language now that we had all this infrastructure depending on it. So now my three projects were reduced to two: writing essays and working on YC.&lt;/p&gt;&lt;p&gt;YC was different from other kinds of work I've done. Instead of deciding for myself what to work on, the problems came to me. Every 6 months there was a new batch of startups, and their problems, whatever they were, became our problems. It was very engaging work, because their problems were quite varied, and the good founders were very effective. If you were trying to learn the most you could about startups in the shortest possible time, you couldn't have picked a better way to do it.&lt;/p&gt;&lt;p&gt;There were parts of the job I didn't like. Disputes between cofounders, figuring out when people were lying to us, fighting with people who maltreated the startups, and so on. But I worked hard even at the parts I didn't like. I was haunted by something Kevin Hale once said about companies: &quot;No one works harder than the boss.&quot; He meant it both descriptively and prescriptively, and it was the second part that scared me. I wanted YC to be good, so if how hard I worked set the upper bound on how hard everyone else worked, I'd better work very hard.&lt;/p&gt;&lt;p&gt;One day in 2010, when he was visiting California for interviews, Robert Morris did something astonishing: he offered me unsolicited advice. I can only remember him doing that once before. One day at Viaweb, when I was bent over double from a kidney stone, he suggested that it would be a good idea for him to take me to the hospital. That was what it took for Rtm to offer unsolicited advice. So I remember his exact words very clearly. &quot;You know,&quot; he said, &quot;you should make sure Y Combinator isn't the last cool thing you do.&quot;&lt;/p&gt;&lt;p&gt;At the time I didn't understand what he meant, but gradually it dawned on me that he was saying I should quit. This seemed strange advice, because YC was doing great. But if there was one thing rarer than Rtm offering advice, it was Rtm being wrong. So this set me thinking. It was true that on my current trajectory, YC would be the last thing I did, because it was only taking up more of my attention. It had already eaten Arc, and was in the process of eating essays too. Either YC was my life's work or I'd have to leave eventually. And it wasn't, so I would.&lt;/p&gt;&lt;p&gt;In the summer of 2012 my mother had a stroke, and the cause turned out to be a blood clot caused by colon cancer. The stroke destroyed her balance, and she was put in a nursing home, but she really wanted to get out of it and back to her house, and my sister and I were determined to help her do it. I used to fly up to Oregon to visit her regularly, and I had a lot of time to think on those flights. On one of them I realized I was ready to hand YC over to someone else.&lt;/p&gt;&lt;p&gt;I asked Jessica if she wanted to be president, but she didn't, so we decided we'd try to recruit Sam Altman. We talked to Robert and Trevor and we agreed to make it a complete changing of the guard. Up till that point YC had been controlled by the original LLC we four had started. But we wanted YC to last for a long time, and to do that it couldn't be controlled by the founders. So if Sam said yes, we'd let him reorganize YC. Robert and I would retire, and Jessica and Trevor would become ordinary partners.&lt;/p&gt;&lt;p&gt;When we asked Sam if he wanted to be president of YC, initially he said no. He wanted to start a startup to make nuclear reactors. But I kept at it, and in October 2013 he finally agreed. We decided he'd take over starting with the winter 2014 batch. For the rest of 2013 I left running YC more and more to Sam, partly so he could learn the job, and partly because I was focused on my mother, whose cancer had returned.&lt;/p&gt;&lt;p&gt;She died on January 15, 2014. We knew this was coming, but it was still hard when it did.&lt;/p&gt;&lt;p&gt;I kept working on YC till March, to help get that batch of startups through Demo Day, then I checked out pretty completely. (I still talk to alumni and to new startups working on things I'm interested in, but that only takes a few hours a week.)&lt;/p&gt;&lt;p&gt;What should I do next? Rtm's advice hadn't included anything about that. I wanted to do something completely different, so I decided I'd paint. I wanted to see how good I could get if I really focused on it. So the day after I stopped working on YC, I started painting. I was rusty and it took a while to get back into shape, but it was at least completely engaging. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f18n&quot;&gt;&lt;span&gt;18&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;I spent most of the rest of 2014 painting. I'd never been able to work so uninterruptedly before, and I got to be better than I had been. Not good enough, but better. Then in November, right in the middle of a painting, I ran out of steam. Up till that point I'd always been curious to see how the painting I was working on would turn out, but suddenly finishing this one seemed like a chore. So I stopped working on it and cleaned my brushes and haven't painted since. So far anyway.&lt;/p&gt;&lt;p&gt;I realize that sounds rather wimpy. But attention is a zero sum game. If you can choose what to work on, and you choose a project that's not the best one (or at least a good one) for you, then it's getting in the way of another project that is. And at 50 there was some opportunity cost to screwing around.&lt;/p&gt;&lt;p&gt;I started writing essays again, and wrote bunch of new ones over the next few months. I even wrote a couple that &lt;a href=&quot;http://paulgraham.com/know.html&quot;&gt;&lt;u&gt;weren't&lt;/u&gt;&lt;/a&gt; about startups. Then in March 2015 I started working on Lisp again.&lt;/p&gt;&lt;p&gt;The distinctive thing about Lisp is that its core is a language defined by writing an interpreter in itself. It wasn't originally intended as a programming language in the ordinary sense. It was meant to be a formal model of computation, an alternative to the Turing machine. If you want to write an interpreter for a language in itself, what's the minimum set of predefined operators you need? The Lisp that John McCarthy invented, or more accurately discovered, is an answer to that question. &lt;span&gt;[&lt;a href=&quot;http://paulgraham.com/worked.html#f19n&quot;&gt;&lt;span&gt;19&lt;/span&gt;&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;p&gt;McCarthy didn't realize this Lisp could even be used to program computers till his grad student Steve Russell suggested it. Russell translated McCarthy's interpreter into IBM 704 machine language, and from that point Lisp started also to be a programming language in the ordinary sense. But its origins as a model of computation gave it a power and elegance that other languages couldn't match. It was this that attracted me in college, though I didn't understand why at the time.&lt;/p&gt;&lt;p&gt;McCarthy's 1960 Lisp did nothing more than interpret Lisp expressions. It was missing a lot of things you'd want in a programming language. So these had to be added, and when they were, they weren't defined using McCarthy's original axiomatic approach. That wouldn't have been feasible at the time. McCarthy tested his interpreter by hand-simulating the execution of programs. But it was already getting close to the limit of interpreters you could test that way — indeed, there was a bug in it that McCarthy had overlooked. To test a more complicated interpreter, you'd have had to run it, and computers then weren't powerful enough.&lt;/p&gt;&lt;p&gt;Now they are, though. Now you could continue using McCarthy's axiomatic approach till you'd defined a complete programming language. And as long as every change you made to McCarthy's Lisp was a discoveredness-preserving transformation, you could, in principle, end up with a complete language that had this quality. Harder to do than to talk about, of course, but if it was possible in principle, why not try? So I decided to take a shot at it. It took 4 years, from March 26, 2015 to October 12, 2019. It was fortunate that I had a precisely defined goal, or it would have been hard to keep at it for so long.&lt;/p&gt;&lt;p&gt;I wrote this new Lisp, called &lt;a href=&quot;http://paulgraham.com/bel.html&quot;&gt;&lt;u&gt;Bel&lt;/u&gt;&lt;/a&gt;, in itself in Arc. That may sound like a contradiction, but it's an indication of the sort of trickery I had to engage in to make this work. By means of an egregious collection of hacks I managed to make something close enough to an interpreter written in itself that could actually run. Not fast, but fast enough to test.&lt;/p&gt;&lt;p&gt;I had to ban myself from writing essays during most of this time, or I would never have finished. In late 2015 I spent 3 months writing essays, and when I went back to working on Bel I could barely understand the code. Not so much because it was badly written as because the problem is so convoluted. When you're working on an interpreter written in itself, it's hard to keep track of what's happening at what level, and errors can be practically encrypted by the time you get them.&lt;/p&gt;&lt;p&gt;So I said no more essays till Bel was done. But I told few people about Bel while I was working on it. So for years it must have seemed that I was doing nothing, when in fact I was working harder than I'd ever worked on anything. Occasionally after wrestling for hours with some gruesome bug I'd check Twitter or HN and see someone asking &quot;Does Paul Graham still code?&quot;&lt;/p&gt;&lt;p&gt;Working on Bel was hard but satisfying. I worked on it so intensively that at any given time I had a decent chunk of the code in my head and could write more there. I remember taking the boys to the coast on a sunny day in 2015 and figuring out how to deal with some problem involving continuations while I watched them play in the tide pools. It felt like I was doing life right. I remember that because I was slightly dismayed at how novel it felt. The good news is that I had more moments like this over the next few years.&lt;/p&gt;&lt;p&gt;In the summer of 2016 we moved to England. We wanted our kids to see what it was like living in another country, and since I was a British citizen by birth, that seemed the obvious choice. We only meant to stay for a year, but we liked it so much that we still live there. So most of Bel was written in England.&lt;/p&gt;&lt;p&gt;In the fall of 2019, Bel was finally finished. Like McCarthy's original Lisp, it's a spec rather than an implementation, although like McCarthy's Lisp it's a spec expressed as code.&lt;/p&gt;&lt;p&gt;Now that I could write essays again, I wrote a bunch about topics I'd had stacked up. I kept writing essays through 2020, but I also started to think about other things I could work on. How should I choose what to do? Well, how had I chosen what to work on in the past? I wrote an essay for myself to answer that question, and I was surprised how long and messy the answer turned out to be. If this surprised me, who'd lived it, then I thought perhaps it would be interesting to other people, and encouraging to those with similarly messy lives. So I wrote a more detailed version for others to read, and this is the last sentence of it.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f1n&quot; id=&quot;f1n&quot;&gt;&lt;span&gt;1&lt;/span&gt;&lt;/a&gt;] My experience skipped a step in the evolution of computers: time-sharing machines with interactive OSes. I went straight from batch processing to microcomputers, which made microcomputers seem all the more exciting.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f2n&quot; id=&quot;f2n&quot;&gt;&lt;span&gt;2&lt;/span&gt;&lt;/a&gt;] Italian words for abstract concepts can nearly always be predicted from their English cognates (except for occasional traps like &lt;em&gt;polluzione&lt;/em&gt;). It's the everyday words that differ. So if you string together a lot of abstract concepts with a few simple verbs, you can make a little Italian go a long way.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f3n&quot; id=&quot;f3n&quot;&gt;&lt;span&gt;3&lt;/span&gt;&lt;/a&gt;] I lived at Piazza San Felice 4, so my walk to the Accademia went straight down the spine of old Florence: past the Pitti, across the bridge, past Orsanmichele, between the Duomo and the Baptistery, and then up Via Ricasoli to Piazza San Marco. I saw Florence at street level in every possible condition, from empty dark winter evenings to sweltering summer days when the streets were packed with tourists.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f4n&quot; id=&quot;f4n&quot;&gt;&lt;span&gt;4&lt;/span&gt;&lt;/a&gt;] You can of course paint people like still lives if you want to, and they're willing. That sort of portrait is arguably the apex of still life painting, though the long sitting does tend to produce pained expressions in the sitters.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f5n&quot; id=&quot;f5n&quot;&gt;&lt;span&gt;5&lt;/span&gt;&lt;/a&gt;] Interleaf was one of many companies that had smart people and built impressive technology, and yet got crushed by Moore's Law. In the 1990s the exponential growth in the power of commodity (i.e. Intel) processors rolled up high-end, special-purpose hardware and software companies like a bulldozer.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f6n&quot; id=&quot;f6n&quot;&gt;&lt;span&gt;6&lt;/span&gt;&lt;/a&gt;] The signature style seekers at RISD weren't specifically mercenary. In the art world, money and coolness are tightly coupled. Anything expensive comes to be seen as cool, and anything seen as cool will soon become equally expensive.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f7n&quot; id=&quot;f7n&quot;&gt;&lt;span&gt;7&lt;/span&gt;&lt;/a&gt;] Technically the apartment wasn't rent-controlled but rent-stabilized, but this is a refinement only New Yorkers would know or care about. The point is that it was really cheap, less than half market price.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f8n&quot; id=&quot;f8n&quot;&gt;&lt;span&gt;8&lt;/span&gt;&lt;/a&gt;] Most software you can launch as soon as it's done, but when the software is an online store builder and you're hosting the stores, if you don't have any users yet, that fact will be painfully obvious. So before we could launch publicly we had to launch privately, in the sense of recruiting an initial set of users and making sure they had decent-looking stores.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f9n&quot; id=&quot;f9n&quot;&gt;&lt;span&gt;9&lt;/span&gt;&lt;/a&gt;] We'd had a code editor in Viaweb for users to define their own page styles. They didn't know it, but they were editing Lisp expressions underneath. But this wasn't an app editor, because the code ran when the merchants' sites were generated, not when shoppers visited them.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f10n&quot; id=&quot;f10n&quot;&gt;&lt;span&gt;10&lt;/span&gt;&lt;/a&gt;] This was the first instance of what is now a familiar experience, and so was what happened next, when I read the comments and found they were full of angry people. How could I claim that Lisp was better than other languages? Weren't they all Turing complete? People who see the responses to essays I write sometimes tell me how sorry they feel for me, but I'm not exaggerating when I reply that it has always been like this, since the very beginning. It comes with the territory. An essay must tell readers things they &lt;a href=&quot;http://paulgraham.com/useful.html&quot;&gt;&lt;u&gt;don't already know&lt;/u&gt;&lt;/a&gt;, and some people dislike being told such things.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f11n&quot; id=&quot;f11n&quot;&gt;&lt;span&gt;11&lt;/span&gt;&lt;/a&gt;] People put plenty of stuff on the internet in the 90s of course, but putting something online is not the same as publishing it online. Publishing online means you treat the online version as the (or at least a) primary version.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f12n&quot; id=&quot;f12n&quot;&gt;&lt;span&gt;12&lt;/span&gt;&lt;/a&gt;] There is a general lesson here that our experience with Y Combinator also teaches: Customs continue to constrain you long after the restrictions that caused them have disappeared. Customary VC practice had once, like the customs about publishing essays, been based on real constraints. Startups had once been much more expensive to start, and proportionally rare. Now they could be cheap and common, but the VCs' customs still reflected the old world, just as customs about writing essays still reflected the constraints of the print era.&lt;/p&gt;&lt;p&gt;Which in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).&lt;/p&gt;&lt;p&gt;Here's an interesting point, though: you can't always predict which fields will be affected by rapid change. Obviously software and venture capital will be, but who would have predicted that essay writing would be?&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f13n&quot; id=&quot;f13n&quot;&gt;&lt;span&gt;13&lt;/span&gt;&lt;/a&gt;] Y Combinator was not the original name. At first we were called Cambridge Seed. But we didn't want a regional name, in case someone copied us in Silicon Valley, so we renamed ourselves after one of the coolest tricks in the lambda calculus, the Y combinator.&lt;/p&gt;&lt;p&gt;I picked orange as our color partly because it's the warmest, and partly because no VC used it. In 2005 all the VCs used staid colors like maroon, navy blue, and forest green, because they were trying to appeal to LPS, not founders. The YC logo itself is an inside joke: the Viaweb logo had been a white V on a red circle, so I made the YC logo a white Y on an orange square.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f14n&quot; id=&quot;f14n&quot;&gt;&lt;span&gt;14&lt;/span&gt;&lt;/a&gt;] YC did become a fund for a couple years starting in 2009, because it was getting so big I could no longer afford to fund it personally. But after Heroku got bought we had enough money to go back to being self-funded.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f15n&quot; id=&quot;f15n&quot;&gt;&lt;span&gt;15&lt;/span&gt;&lt;/a&gt;] I've never liked the term &quot;deal flow,&quot; because it implies that the number of new startups at any given time is fixed. This is not only false, but it's the purpose of YC to falsify it, by causing startups to be founded that would not otherwise have existed.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f16n&quot; id=&quot;f16n&quot;&gt;&lt;span&gt;16&lt;/span&gt;&lt;/a&gt;] She reports that they were all different shapes and sizes, because there was a run on air conditioners and she had to get whatever she could, but that they were all heavier than she could carry now.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f17n&quot; id=&quot;f17n&quot;&gt;&lt;span&gt;17&lt;/span&gt;&lt;/a&gt;] Another problem with HN was a bizarre edge case that occurs when you both write essays and run a forum. When you run a forum, you're assumed to see if not every conversation, at least every conversation involving you. And when you write essays, people post highly imaginative misinterpretations of them on forums. Individually these two phenomena are tedious but bearable, but the combination is disastrous. You actually have to respond to the misinterpretations, because the assumption that you're present in the conversation means that not responding to any sufficiently upvoted misinterpretation reads as a tacit admission that it's correct. But that in turn encourages more; anyone who wants to pick a fight with you senses that now is their chance.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f18n&quot; id=&quot;f18n&quot;&gt;&lt;span&gt;18&lt;/span&gt;&lt;/a&gt;] The worst thing about leaving YC was not working with Jessica anymore. We'd been working on YC almost the whole time we'd known each other, and we'd neither tried nor wanted to separate it from our personal lives, so leaving was like pulling up a deeply rooted tree.&lt;/p&gt;&lt;p&gt;[&lt;a name=&quot;f19n&quot; id=&quot;f19n&quot;&gt;&lt;span&gt;19&lt;/span&gt;&lt;/a&gt;] One way to get more precise about the concept of invented vs discovered is to talk about space aliens. Any sufficiently advanced alien civilization would certainly know about the Pythagorean theorem, for example. I believe, though with less certainty, that they would also know about the Lisp in McCarthy's 1960 paper.&lt;/p&gt;&lt;p&gt;But if so there's no reason to suppose that this is the limit of the language that might be known to them. Presumably aliens need numbers and errors and I/O too. So it seems likely there exists at least one path out of McCarthy's Lisp along which discoveredness is preserved.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt; to Trevor Blackwell, John Collison, Patrick Collison, Daniel Gackle, Ralph Hazell, Jessica Livingston, Robert Morris, and Harj Taggar for reading drafts of this.&lt;/p&gt;</description>
<pubDate>Tue, 16 Feb 2021 16:16:35 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://paulgraham.com/worked.html</dc:identifier>
</item>
<item>
<title>Why Is Esbuild Fast?</title>
<link>https://esbuild.github.io/faq/#why-is-esbuild-fast</link>
<guid isPermaLink="true" >https://esbuild.github.io/faq/#why-is-esbuild-fast</guid>
<description>&lt;head&gt;&lt;meta charset=&quot;utf8&quot;/&gt;&lt;title&gt;esbuild - FAQ&lt;/title&gt;&lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/favicon.svg&quot;/&gt;&lt;meta property=&quot;og:title&quot; content=&quot;esbuild - FAQ&quot;/&gt;&lt;meta property=&quot;og:type&quot; content=&quot;website&quot;/&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://esbuild.github.io/index.png&quot;/&gt;&lt;meta property=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;/&gt;&lt;meta property=&quot;twitter:title&quot; content=&quot;esbuild - FAQ&quot;/&gt;&lt;meta property=&quot;twitter:image&quot; content=&quot;https://esbuild.github.io/index.png&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;91.846789064379&quot;&gt;

&lt;nav&gt;

&lt;/nav&gt;
&lt;p&gt;This is a collection of common questions about esbuild. You can also ask questions on the &lt;a href=&quot;https://github.com/evanw/esbuild/issues&quot;&gt;GitHub issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-is-esbuild-fast&quot;&gt;&lt;a href=&quot;https://esbuild.github.io/faq/#why-is-esbuild-fast&quot;&gt;#&lt;/a&gt; Why is esbuild fast?&lt;/h2&gt;
&lt;p&gt;Several reasons:&lt;/p&gt;
&lt;ul readability=&quot;30.947885019864&quot;&gt;&lt;li readability=&quot;15.640287769784&quot;&gt;
&lt;p&gt;It's written in &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; and compiles to native code.&lt;/p&gt;
&lt;p&gt;Most other bundlers are written in JavaScript, but a command-line application is a worst-case performance situation for a JIT-compiled language. Every time you run your bundler, the JavaScript VM is seeing your bundler's code for the first time without any optimization hints. While esbuild is busy parsing your JavaScript, node is busy parsing your bundler's JavaScript. By the time node has finished parsing your bundler's code, esbuild might have already exited and your bundler hasn't even started bundling yet.&lt;/p&gt;
&lt;p&gt;In addition, Go is designed from the core for parallelism while JavaScript is not. Go has shared memory between threads while JavaScript has to serialize data between threads. Both Go and JavaScript have parallel garbage collectors, but Go's heap is shared between all threads while JavaScript has a separate heap per JavaScript thread. This seems to cut the amount of parallelism that's possible with JavaScript worker threads in half &lt;a href=&quot;https://github.com/evanw/esbuild/issues/111#issuecomment-719910381&quot;&gt;according to my testing&lt;/a&gt;, presumably since half of your CPU cores are busy collecting garbage for the other half.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;7&quot;&gt;
&lt;p&gt;Parallelism is used heavily.&lt;/p&gt;
&lt;p&gt;The algorithms inside esbuild are carefully designed to fully saturate all available CPU cores when possible. There are roughly three phases: parsing, linking, and code generation. Parsing and code generation are most of the work and are fully parallelizable (linking is an inherently serial task for the most part). Since all threads share memory, work can easily be shared when bundling different entry points that import the same JavaScript libraries. Most modern computers have many cores so parallelism is a big win.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;11.355531686359&quot;&gt;
&lt;p&gt;Everything in esbuild is written from scratch.&lt;/p&gt;
&lt;p&gt;There are a lot of performance benefits with writing everything yourself instead of using 3rd-party libraries. You can have performance in mind from the beginning, you can make sure everything uses consistent data structures to avoid expensive conversions, and you can make wide architectural changes whenever necessary. The drawback is of course that it's a lot of work.&lt;/p&gt;
&lt;p&gt;For example, many bundlers use the official TypeScript compiler as a parser. But it was built to serve the goals of the TypeScript compiler team and they do not have performance as a top priority. Their code makes pretty heavy use of &lt;a href=&quot;https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html&quot;&gt;megamorphic object shapes&lt;/a&gt; and unnecessary &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/39247&quot;&gt;dynamic property accesses&lt;/a&gt; (both well-known JavaScript speed bumps). And the TypeScript parser appears to still run the type checker even when type checking is disabled. None of these are an issue with esbuild's custom TypeScript parser.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;22&quot;&gt;
&lt;p&gt;Memory is used efficiently.&lt;/p&gt;
&lt;p&gt;Compilers are ideally mostly O(n) complexity in the length of the input. So if you are processing a lot of data, memory access speed is likely going to heavily affect performance. The fewer passes you have to make over your data (and also the fewer different representations you need to transform your data into), the faster your compiler will go.&lt;/p&gt;
&lt;p&gt;For example, esbuild only touches the whole JavaScript AST three times:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;A pass for lexing, parsing, scope setup, and declaring symbols&lt;/li&gt;
&lt;li&gt;A pass for binding symbols, minifying syntax, JSX/TS to JS, and ESNext-to-ES2015&lt;/li&gt;
&lt;li&gt;A pass for minifying identifiers, minifying whitespace, generating code, and generating source maps&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;This maximizes reuse of AST data while it's still hot in the CPU cache. Other bundlers do these steps in separate passes instead of interleaving them. They may also convert between data representations to glue multiple libraries together (e.g. string→TS→JS→string, then string→JS→older JS→string, then string→JS→minified JS→string) which uses more memory and slows things down.&lt;/p&gt;
&lt;p&gt;Another benefit of Go is that it can store things as compactly in memory, which enables it to use less memory and fit more in the CPU cache. All object fields have types and fields are packed tightly together so e.g. several boolean flags only take one byte each. Go also has value semantics and can embed one object directly in another so it comes &quot;for free&quot; without another allocation. JavaScript doesn't have these features and also has other drawbacks such as JIT overhead (e.g. hidden class slots) and inefficient representations (e.g. non-integer numbers are heap-allocated with pointers).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Each one of these factors is only a somewhat significant speedup, but together they can result in a bundler that is multiple orders of magnitude faster than other bundlers commonly in use today.&lt;/p&gt;
&lt;h2 id=&quot;benchmark-details&quot;&gt;&lt;a href=&quot;https://esbuild.github.io/faq/#benchmark-details&quot;&gt;#&lt;/a&gt; Benchmark details&lt;/h2&gt;
&lt;p&gt;Here are the details about each benchmark:&lt;/p&gt;
&lt;p&gt;JavaScript benchmark&lt;/p&gt;
&lt;div&gt;








&lt;p&gt;0.37s&lt;/p&gt;



&lt;p&gt;1.54s&lt;/p&gt;



&lt;p&gt;36.00s&lt;/p&gt;



&lt;p&gt;41.91s&lt;/p&gt;



&lt;p&gt;54.50s&lt;/p&gt;



&lt;p&gt;56.71s&lt;/p&gt;



&lt;p&gt;118.51s&lt;/p&gt;
&lt;p&gt;0s&lt;/p&gt;
&lt;p&gt;30s&lt;/p&gt;
&lt;p&gt;60s&lt;/p&gt;
&lt;p&gt;90s&lt;/p&gt;
&lt;p&gt;120s&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This benchmark approximates a large JavaScript codebase by duplicating the &lt;a href=&quot;https://github.com/mrdoob/three.js&quot;&gt;three.js&lt;/a&gt; library 10 times and building a single bundle from scratch, without any caches. The benchmark can be run with &lt;code&gt;make bench-three&lt;/code&gt; in the &lt;a href=&quot;https://github.com/evanw/esbuild&quot;&gt;esbuild repo&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Bundler&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Relative slowdown&lt;/th&gt;
&lt;th&gt;Absolute speed&lt;/th&gt;
&lt;th&gt;Output size&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;esbuild&lt;/td&gt;
&lt;td&gt;0.37s&lt;/td&gt;
&lt;td&gt;1x&lt;/td&gt;
&lt;td&gt;1479.6 kloc/s&lt;/td&gt;
&lt;td&gt;5.80mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;esbuild (1 thread)&lt;/td&gt;
&lt;td&gt;1.54s&lt;/td&gt;
&lt;td&gt;4x&lt;/td&gt;
&lt;td&gt;355.5 kloc/s&lt;/td&gt;
&lt;td&gt;5.80mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;rollup + terser&lt;/td&gt;
&lt;td&gt;36.00s&lt;/td&gt;
&lt;td&gt;97x&lt;/td&gt;
&lt;td&gt;15.2 kloc/s&lt;/td&gt;
&lt;td&gt;5.81mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;webpack 4&lt;/td&gt;
&lt;td&gt;41.91s&lt;/td&gt;
&lt;td&gt;113x&lt;/td&gt;
&lt;td&gt;13.1 kloc/s&lt;/td&gt;
&lt;td&gt;5.97mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;webpack 5&lt;/td&gt;
&lt;td&gt;54.50s&lt;/td&gt;
&lt;td&gt;147x&lt;/td&gt;
&lt;td&gt;10.0 kloc/s&lt;/td&gt;
&lt;td&gt;5.84mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;parcel 2&lt;/td&gt;
&lt;td&gt;56.71s&lt;/td&gt;
&lt;td&gt;153x&lt;/td&gt;
&lt;td&gt;9.7 kloc/s&lt;/td&gt;
&lt;td&gt;5.92mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;parcel 1&lt;/td&gt;
&lt;td&gt;118.51s&lt;/td&gt;
&lt;td&gt;320x&lt;/td&gt;
&lt;td&gt;4.6 kloc/s&lt;/td&gt;
&lt;td&gt;5.89mb&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Each time reported is the best of three runs. I'm running esbuild with &lt;code&gt;--bundle &lt;wbr/&gt;--minify &lt;wbr/&gt;--sourcemap&lt;/code&gt; (the single-threaded version uses &lt;code&gt;GOMAXPROCS=1&lt;/code&gt;). I used the &lt;code&gt;rollup-&lt;wbr/&gt;plugin-&lt;wbr/&gt;terser&lt;/code&gt; plugin because Rollup itself doesn't support minification. Webpack uses &lt;code&gt;--mode=&lt;wbr/&gt;production &lt;wbr/&gt;--devtool=&lt;wbr/&gt;sourcemap&lt;/code&gt;. Parcel uses the default options. Absolute speed is based on the total line count including comments and blank lines, which is currently 547,441. The tests were done on a 6-core 2019 MacBook Pro with 16gb of RAM.&lt;/p&gt;
&lt;p&gt;Caveats:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Parcel 1: The bundle crashes at run time with &lt;code&gt;TypeError: &lt;wbr/&gt;Cannot &lt;wbr/&gt;redefine &lt;wbr/&gt;property: &lt;wbr/&gt;dynamic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;TypeScript benchmark&lt;/p&gt;
&lt;div&gt;








&lt;p&gt;0.09s&lt;/p&gt;



&lt;p&gt;0.37s&lt;/p&gt;



&lt;p&gt;18.38s&lt;/p&gt;



&lt;p&gt;18.76s&lt;/p&gt;



&lt;p&gt;25.12s&lt;/p&gt;



&lt;p&gt;42.32s&lt;/p&gt;
&lt;p&gt;0s&lt;/p&gt;
&lt;p&gt;10s&lt;/p&gt;
&lt;p&gt;20s&lt;/p&gt;
&lt;p&gt;30s&lt;/p&gt;
&lt;p&gt;40s&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This benchmark uses the &lt;a href=&quot;https://github.com/facebookexperimental/rome&quot;&gt;Rome&lt;/a&gt; build tool to approximate a large TypeScript codebase. All code must be combined into a single minified bundle with source maps and the resulting bundle must work correctly. The benchmark can be run with &lt;code&gt;make bench-rome&lt;/code&gt; in the &lt;a href=&quot;https://github.com/evanw/esbuild&quot;&gt;esbuild repo&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Bundler&lt;/th&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Relative slowdown&lt;/th&gt;
&lt;th&gt;Absolute speed&lt;/th&gt;
&lt;th&gt;Output size&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;esbuild&lt;/td&gt;
&lt;td&gt;0.09s&lt;/td&gt;
&lt;td&gt;1x&lt;/td&gt;
&lt;td&gt;1464.8 kloc/s&lt;/td&gt;
&lt;td&gt;0.97mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;esbuild (1 thread)&lt;/td&gt;
&lt;td&gt;0.37s&lt;/td&gt;
&lt;td&gt;4x&lt;/td&gt;
&lt;td&gt;356.3 kloc/s&lt;/td&gt;
&lt;td&gt;0.97mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;webpack 4&lt;/td&gt;
&lt;td&gt;18.38s&lt;/td&gt;
&lt;td&gt;204x&lt;/td&gt;
&lt;td&gt;7.2 kloc/s&lt;/td&gt;
&lt;td&gt;1.26mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;parcel 1&lt;/td&gt;
&lt;td&gt;18.76s&lt;/td&gt;
&lt;td&gt;208x&lt;/td&gt;
&lt;td&gt;7.0 kloc/s&lt;/td&gt;
&lt;td&gt;1.56mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;webpack 5&lt;/td&gt;
&lt;td&gt;24.57s&lt;/td&gt;
&lt;td&gt;273x&lt;/td&gt;
&lt;td&gt;5.4 kloc/s&lt;/td&gt;
&lt;td&gt;1.26mb&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;parcel 2&lt;/td&gt;
&lt;td&gt;42.32s&lt;/td&gt;
&lt;td&gt;470x&lt;/td&gt;
&lt;td&gt;3.1 kloc/s&lt;/td&gt;
&lt;td&gt;1.68mb&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;Each time reported is the best of three runs. I'm running esbuild with &lt;code&gt;--bundle &lt;wbr/&gt;--minify &lt;wbr/&gt;--sourcemap &lt;wbr/&gt;--platform=&lt;wbr/&gt;node&lt;/code&gt; (the single-threaded version uses &lt;code&gt;GOMAXPROCS=1&lt;/code&gt;). Webpack uses &lt;code&gt;ts-loader&lt;/code&gt; with &lt;code&gt;transpileOnly: &lt;wbr/&gt;true&lt;/code&gt; and &lt;code&gt;--mode=&lt;wbr/&gt;production &lt;wbr/&gt;--devtool=&lt;wbr/&gt;sourcemap&lt;/code&gt;. Parcel 1 uses &lt;code&gt;--target &lt;wbr/&gt;node --bundle-&lt;wbr/&gt;node-&lt;wbr/&gt;modules&lt;/code&gt;. Parcel 2 uses &lt;code&gt;&quot;engines&quot;: &lt;wbr/&gt;&quot;node&quot;&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; and needs the &lt;code&gt;@parcel/&lt;wbr/&gt;transformer-&lt;wbr/&gt;typescript-&lt;wbr/&gt;tsc&lt;/code&gt; transformer to be able to handle the TypeScript code used in the benchmark. Absolute speed is based on the total line count including comments and blank lines, which is currently 131,836. The tests were done on a 6-core 2019 MacBook Pro with 16gb of RAM.&lt;/p&gt;
&lt;p&gt;The results don't include Rollup because I couldn't get it to work. I tried &lt;code&gt;rollup-&lt;wbr/&gt;plugin-&lt;wbr/&gt;typescript&lt;/code&gt;, &lt;code&gt;@rollup/&lt;wbr/&gt;plugin-&lt;wbr/&gt;typescript&lt;/code&gt;, and &lt;code&gt;@rollup/&lt;wbr/&gt;plugin-&lt;wbr/&gt;sucrase&lt;/code&gt; and they all didn't work for different reasons relating to TypeScript compilation.&lt;/p&gt;
&lt;h2 id=&quot;upcoming-roadmap&quot;&gt;&lt;a href=&quot;https://esbuild.github.io/faq/#upcoming-roadmap&quot;&gt;#&lt;/a&gt; Upcoming roadmap&lt;/h2&gt;
&lt;p&gt;These features are already in progress and are first priority:&lt;/p&gt;
&lt;p&gt;These are potential future features but may not happen or may happen to a more limited extent:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;HTML content type (&lt;a href=&quot;https://github.com/evanw/esbuild/issues/31&quot;&gt;#31&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Lowering to ES5 (&lt;a href=&quot;https://github.com/evanw/esbuild/issues/297&quot;&gt;#297&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Bundling top-level await (&lt;a href=&quot;https://github.com/evanw/esbuild/issues/253&quot;&gt;#253&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;After that point, I will consider esbuild to be relatively complete. I'm planning for esbuild to reach a mostly stable state and then stop accumulating more features. This will involve saying &quot;no&quot; to requests for adding major features to esbuild itself. I don't think esbuild should become an all-in-one solution for all frontend needs. In particular, I want to avoid the pain and problems of the &quot;webpack config&quot; model where the underlying tool is too flexible and usability suffers.&lt;/p&gt;
&lt;p&gt;For example, I am &lt;em&gt;not&lt;/em&gt; planning to include these features in esbuild's core itself:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Support for other frontend languages (e.g. &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt;, &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue&lt;/a&gt;, &lt;a href=&quot;https://angular.io/&quot;&gt;Angular&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;TypeScript type checking (just run &lt;code&gt;tsc&lt;/code&gt; separately)&lt;/li&gt;
&lt;li&gt;An API for custom AST manipulation&lt;/li&gt;
&lt;li&gt;Hot-module reloading&lt;/li&gt;
&lt;li&gt;Module federation&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I hope that the extensibility points I'm adding to esbuild (&lt;a href=&quot;https://esbuild.github.io/plugins/&quot;&gt;plugins&lt;/a&gt; and the &lt;a href=&quot;https://esbuild.github.io/api/&quot;&gt;API&lt;/a&gt;) will make esbuild useful to include as part of more customized build workflows, but I'm not intending or expecting these extensibility points to cover all use cases. If you have very custom requirements then you should be using other tools. I also hope esbuild inspires other build tools to dramatically improve performance by overhauling their implementations so that everyone can benefit, not just those that use esbuild.&lt;/p&gt;
&lt;p&gt;I am planning to continue to maintain everything in esbuild's existing scope even after esbuild reaches stability. This means implementing support for newly-released JavaScript and TypeScript syntax features, for example.&lt;/p&gt;
&lt;h2 id=&quot;production-readiness&quot;&gt;&lt;a href=&quot;https://esbuild.github.io/faq/#production-readiness&quot;&gt;#&lt;/a&gt; Production readiness&lt;/h2&gt;
&lt;p&gt;This project has not yet hit version 1.0.0 and is still in active development. That said, it is far beyond the alpha stage and is pretty stable. I think of it as a late-stage beta. For some early-adopters that means it's good enough to use for real things. Some other people think this means esbuild isn't ready yet. This section doesn't try to convince you either way. It just tries to give you enough information so you can decide for yourself whether you want to use esbuild as your bundler.&lt;/p&gt;
&lt;p&gt;Some data points:&lt;/p&gt;
&lt;ul readability=&quot;14.64586846543&quot;&gt;&lt;li readability=&quot;3.7647058823529&quot;&gt;&lt;strong&gt;Used by other projects&lt;/strong&gt;
&lt;p&gt;The API is already being used as a library within some other developer tools. For example, &lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite&lt;/a&gt; and &lt;a href=&quot;https://github.com/pikapkg/snowpack&quot;&gt;Snowpack&lt;/a&gt; are using esbuild's &lt;a href=&quot;https://esbuild.github.io/api/#transform-api&quot;&gt;transform API&lt;/a&gt; to transform TypeScript into JavaScript. And &lt;a href=&quot;https://github.com/gohugoio/hugo&quot;&gt;Hugo&lt;/a&gt; is using esbuild's bundler to package JavaScript code during a build. I have also heard reports of others using it in production successfully, although I don't know the details. I intend to use esbuild in production myself once it has enough features but haven't done that yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;3.8378378378378&quot;&gt;&lt;strong&gt;API stability&lt;/strong&gt;
&lt;p&gt;Even though esbuild's version is not yet 1.0.0, effort is still made to keep the API stable. Patch versions are intended for backwards-compatible changes and minor versions are intended for backwards-incompatible changes (as &lt;a href=&quot;https://docs.npmjs.com/misc/semver&quot;&gt;recommended by npm&lt;/a&gt;). If you plan to use esbuild for something real, you should either pin the exact version (maximum safety) or pin the major and minor versions (only accept backwards-compatible upgrades).&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4.9794661190965&quot;&gt;&lt;strong&gt;Only one main developer&lt;/strong&gt;
&lt;p&gt;This tool is primarily built by &lt;a href=&quot;https://github.com/evanw&quot;&gt;me&lt;/a&gt;. For some people this is fine, but for others this means esbuild is not a suitable tool for their organization. That's ok with me. I'm building esbuild because I find it fun to build and because it's the tool I'd want to use. I'm sharing it with the world because there are others that want to use it too, because the feedback makes the tool itself better, and because I think it will inspire the ecosystem to make better tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;10.918518518519&quot;&gt;&lt;strong&gt;Not always open to scope expansion&lt;/strong&gt;
&lt;p&gt;I'm not planning on including major features that I'm not interested in building and/or maintaining. I also want to limit the project's scope so it doesn't get too complex and unwieldy, both from an architectural perspective, a testing and correctness perspective, and from a usability perspective. Think of esbuild as a &quot;linker&quot; for the web. It knows how to transform and bundle JavaScript and CSS. But the details of how your source code ends up as plain JavaScript or CSS may need to be 3rd-party code.&lt;/p&gt;
&lt;p&gt;I'm hoping that &lt;a href=&quot;https://esbuild.github.io/plugins/&quot;&gt;plugins&lt;/a&gt; will allow the community to add major features (e.g. WebAssembly import) without needing to contribute to esbuild itself. However, not everything is exposed in the plugin API and it may be the case that it's not possible to add a particular feature to esbuild that you may want to add. This is intentional; esbuild is not meant to be an all-in-one solution for all frontend needs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/body&gt;</description>
<pubDate>Tue, 16 Feb 2021 15:07:50 +0000</pubDate>
<dc:creator>mef</dc:creator>
<og:title>esbuild - FAQ</og:title>
<og:type>website</og:type>
<og:image>https://esbuild.github.io/index.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://esbuild.github.io/faq/</dc:identifier>
</item>
<item>
<title>&amp;#039;New car smell&amp;#039; is the scent of carcinogens</title>
<link>https://www.sciencealert.com/a-20-minute-commute-puts-you-at-risk-of-unacceptably-high-levels-of-carcinogens</link>
<guid isPermaLink="true" >https://www.sciencealert.com/a-20-minute-commute-puts-you-at-risk-of-unacceptably-high-levels-of-carcinogens</guid>
<description>&lt;p&gt;The average American spends &lt;a href=&quot;https://www.washingtonpost.com/transportation/2018/09/17/american-commutes-keep-getting-longer-according-survey-data-show/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;almost one hour each day&lt;/a&gt; commuting to work, a number that adds up quickly.&lt;/p&gt;
&lt;p&gt;Now, research has found that Californian car commuters can be exposed to above-acceptable levels of unhealthy chemicals during their daily work trips.&lt;/p&gt;


&lt;p&gt;Estimating commuter times from census data and using measurements of chemicals detected in previous studies, the new study found commutes of more than 20 minutes put people at risk of unacceptably high levels of two carcinogens used in car manufacturing.&lt;/p&gt;
&lt;p&gt;At first glance, it might seem like worrying news for people who spend a lot of time behind the wheel on daily commutes. But there are a lot of factors at play, so let's unpack it a little.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/New_car_smell&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;distinct smell of a new car&lt;/a&gt; gives you a whiff of what's happening here. Materials used to fit out cars, from hard and soft plastics to adhesives, textiles and foam, contain some chemicals that can slowly seep into the air (the technical term is 'off-gas') or catch a ride on dust.&lt;/p&gt;
&lt;p&gt;&quot;These chemicals are very volatile, moving easily from plastics and textiles to the air that you breathe,&quot; &lt;a href=&quot;https://www.eurekalert.org/pub_releases/2021-02/uoc--cai021221.php&quot;&gt;said&lt;/a&gt; environmental toxicologist David Volz from the University of California Riverside, who co-authored the study.&lt;/p&gt;
&lt;p&gt;Volatile compounds can build up in small spaces, such as inside a car (unless you open a window for fresh air).&lt;/p&gt;


&lt;p&gt;While much research to date has focused on &lt;a href=&quot;https://www.science.org.au/curious/people-medicine/health-effects-air-pollution&quot;&gt;outdoor air pollution and its impact on health&lt;/a&gt;, and &lt;a href=&quot;https://theconversation.com/air-pollution-over-three-billion-people-breathe-harmful-air-inside-their-own-homes-152986&quot;&gt;indoor environments&lt;/a&gt;, such as workplaces or homes where people spend most of their days, this study suggests chemicals building up inside vehicles could also be a concern - to some drivers. &lt;/p&gt;
&lt;p&gt;The study aimed to estimate when a person's exposure to known carcinogens likely tipped over safe thresholds based on the time commuters spent inside their vehicles, and on the levels of five chemicals detected inside cars in previous studies.&lt;/p&gt;
&lt;p&gt;The researchers predicted that commuters' daily exposure to two out of five chemicals studied - benzene and formaldehyde - would probably exceed levels considered safe or allowable by Californian health authorities after 20 minutes. The likelihood continued to rise the longer a person's commute.  &lt;/p&gt;
&lt;p&gt;The two chemicals of concern are not huge unknowns, but certainly warrant attention. Benzene is found in rubber and dyes, and formaldehyde is used in carpets and paints, and both are &lt;a href=&quot;https://www.cancer.org/cancer/cancer-causes/general-info/cancer-warning-labels-based-on-californias-proposition-65.html&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;included on California's Proposition 65&lt;/a&gt; lengthy carcinogen list. What's new here is looking at the risk these chemicals may pose to drivers specifically.&lt;/p&gt;


&lt;p&gt;&quot;Our study raises concerns about the potential risk associated with inhalation of benzene and formaldehyde for people who spend a significant amount of time in their vehicles, an issue that is especially pertinent to traffic-congested areas where people have longer commutes,&quot; the study authors &lt;a href=&quot;https://doi.org/10.1016/j.envint.2021.106402&quot;&gt;wrote&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Perhaps unsurprisingly, a greater fraction of people had an elevated chance (above 1 in 10) of exceeding &lt;a href=&quot;https://www.sciencealert.com/cancer&quot; target=&quot;_blank&quot; title=&quot;cancer&quot;&gt;cancer&lt;/a&gt; risk thresholds for benzene and formaldehyde on their daily commute in areas around San Francisco and the notoriously traffic-congested Los Angeles.&lt;/p&gt;
&lt;p&gt;&quot;Of course, there is a range of exposure that depends on how long you're in the car, and how much of the compounds your car is emitting,&quot; which can depend on the vehicle's age and surrounding temperatures, &lt;a href=&quot;https://www.eurekalert.org/pub_releases/2021-02/uoc--cai021221.php&quot;&gt;said&lt;/a&gt; graduate student and study lead author Aalekhya Reddam, also from the University of California Riverside.&lt;/p&gt;
&lt;p&gt;In other words, just because something is listed as a carcinogen doesn't mean it's guaranteed to cause health problems – &lt;a href=&quot;https://toxedfoundation.org/hazard-vs-risk/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;it depends on the dose&lt;/a&gt; that people are exposed to, and how often.&lt;/p&gt;
&lt;p&gt;Even known carcinogens are not likely to cause cancer under certain thresholds, and limiting your exposure to harmful substances goes a long way to reducing any associated risk.&lt;/p&gt;
&lt;p&gt;Plus, the poor health outcomes observed among commuters – which &lt;a href=&quot;https://doi.org/10.1016/S2542-5196(20)30079-6&quot;&gt;does include higher rates of cancer&lt;/a&gt; – may stem from a combination of inactivity, obesity and shorter sleep that often come with lengthy commutes. These factors were not considered in this study.  &lt;/p&gt;
&lt;p&gt;Some people, however, have no option but to travel by car - or perhaps they are taxi drivers, whose job &lt;em&gt;is&lt;/em&gt; to drive. To reduce their risk of exposure, more could be done during the car manufacturing process to substitute chemicals such as benzene and formaldehyde for less harmful alternatives, the researchers &lt;a href=&quot;https://www.eurekalert.org/pub_releases/2021-02/uoc--cai021221.php&quot;&gt;said&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;As people with long commutes are an already vulnerable sub-population, additional measures may need to be implemented in order to mitigate potential cancer risks associated with benzene and formaldehyde exposure,&quot; the duo &lt;a href=&quot;https://doi.org/10.1016/j.envint.2021.106402&quot;&gt;wrote in their paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&quot;There should be alternatives to these chemicals to achieve the same goals during vehicle manufacturing,&quot; &lt;a href=&quot;https://www.eurekalert.org/pub_releases/2021-02/uoc--cai021221.php&quot;&gt;added&lt;/a&gt; Volz. &quot;If so, these should be used.&quot;&lt;/p&gt;
&lt;p&gt;Improving access to public transport and bicycle networks could also give people more options to get to work while at the same time adding some incidental exercise to their commute and helping to alleviate traffic congestion that clogs up city roads. &lt;/p&gt;
&lt;p&gt;The research was published in &lt;em&gt;&lt;a href=&quot;https://doi.org/10.1016/j.envint.2021.106402&quot;&gt;Environment International&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;


</description>
<pubDate>Tue, 16 Feb 2021 15:04:01 +0000</pubDate>
<dc:creator>samizdis</dc:creator>
<og:type>article</og:type>
<og:title>'New Car Smell' Is The Scent of Carcinogens, And Even Short Trips May Overexpose Us</og:title>
<og:description>The average American spends almost one hour each day commuting to work, a number that adds up quickly.</og:description>
<og:url>https://www.sciencealert.com/a-20-minute-commute-puts-you-at-risk-of-unacceptably-high-levels-of-carcinogens</og:url>
<og:image>https://www.sciencealert.com/images/2021-02/processed/j-torres-o1eDaWJanpA-unsplash-Edit_1024.jpg</og:image>
<dc:language>en-gb</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sciencealert.com/a-20-minute-commute-puts-you-at-risk-of-unacceptably-high-levels-of-carcinogens</dc:identifier>
</item>
<item>
<title>Show HN: Endgame – An AWS Pentesting tool to backdoor or expose AWS resources</title>
<link>https://github.com/salesforce/endgame</link>
<guid isPermaLink="true" >https://github.com/salesforce/endgame</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://github.com/salesforce/endgame&quot;&gt;https://github.com/salesforce/endgame&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=26154038&quot;&gt;https://news.ycombinator.com/item?id=26154038&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 298&lt;/p&gt;
&lt;p&gt;# Comments: 68&lt;/p&gt;
</description>
<pubDate>Tue, 16 Feb 2021 14:16:54 +0000</pubDate>
<dc:creator>kmcquade</dc:creator>
<og:type>article</og:type>
<og:title>'New Car Smell' Is The Scent of Carcinogens, And Even Short Trips May Overexpose Us</og:title>
<og:description>The average American spends almost one hour each day commuting to work, a number that adds up quickly.</og:description>
<og:url>https://www.sciencealert.com/a-20-minute-commute-puts-you-at-risk-of-unacceptably-high-levels-of-carcinogens</og:url>
<og:image>https://www.sciencealert.com/images/2021-02/processed/j-torres-o1eDaWJanpA-unsplash-Edit_1024.jpg</og:image>
<dc:language>en-gb</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.sciencealert.com/a-20-minute-commute-puts-you-at-risk-of-unacceptably-high-levels-of-carcinogens</dc:identifier>
</item>
<item>
<title>Changes to LastPass Free</title>
<link>https://blog.lastpass.com/2021/02/changes-to-lastpass-free/</link>
<guid isPermaLink="true" >https://blog.lastpass.com/2021/02/changes-to-lastpass-free/</guid>
<description>&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;You’re spending more time online than ever before. Work. School. Connecting with family and friends.  Each week, millions of LastPass users add millions of new passwords, notes, files, payment cards and more to their encrypted vault. &lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;We love being a part of the security routines of more than 20 million users across the world. As our community of users continues to grow, we need to adapt our offerings to keep up with the constantly evolving digital world.&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt; With that, we have some changes to our LastPass Free offering.&lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;Here’s What’s Changing&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;We’re making changes to how Free users access LastPass across device types. LastPass offers access across two device types –&lt;/span&gt; &lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;computers&lt;/span&gt;&lt;/strong&gt;&lt;span data-contrast=&quot;none&quot;&gt; (including all browsers running on desktops and laptops) or &lt;/span&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;mobile&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;devices&lt;/span&gt;&lt;/strong&gt;&lt;span data-contrast=&quot;none&quot;&gt; (including mobile phones, smart watches, and tablets). Starting March 16th, 2021, LastPass Free will only include access on unlimited devices of one type. &lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;  &lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;To further clarify what we mean by active device type, we’ve included two examples below:&lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li data-leveltext=&quot;&quot; data-font=&quot;Symbol&quot; data-listid=&quot;1&quot; data-aria-posinset=&quot;1&quot; data-aria-level=&quot;1&quot;&gt;&lt;span data-contrast=&quot;auto&quot;&gt;Sarah is a Free user with &lt;/span&gt;&lt;strong&gt;&lt;span data-contrast=&quot;auto&quot;&gt;Computers&lt;/span&gt;&lt;/strong&gt;&lt;span data-contrast=&quot;auto&quot;&gt; as her active device type. She can use LastPass on her laptop, desktop and her dad’s laptop (anyone’s computer!), but she can’t use LastPass on her phone, tablet, or smart watch&lt;/span&gt;&lt;span data-contrast=&quot;auto&quot;&gt; &lt;/span&gt;&lt;span data-contrast=&quot;auto&quot;&gt;unless she upgrades to LastPass Premium, which has unlimited device type access.&lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:0,&amp;quot;335559740&amp;quot;:240}&quot;&gt; &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;ul&gt;&lt;li data-leveltext=&quot;&quot; data-font=&quot;Symbol&quot; data-listid=&quot;1&quot; data-aria-posinset=&quot;1&quot; data-aria-level=&quot;1&quot;&gt;&lt;span data-contrast=&quot;auto&quot;&gt;Steve is a Free user with &lt;/span&gt;&lt;strong&gt;&lt;span data-contrast=&quot;auto&quot;&gt;Mobile&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span data-contrast=&quot;auto&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span data-contrast=&quot;auto&quot;&gt;Devices&lt;/span&gt;&lt;/strong&gt; &lt;span data-contrast=&quot;auto&quot;&gt;as his active device type. He can use LastPass on his iPhone, Android work phone, tablet, and smart watch, but he can’t use LastPass on his desktop or laptop unless he upgrades to LastPass Premium, which has unlimited device type access. &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;As a Free user, your first login on or after March 16th will set your active device type. You’ll have three opportunities to switch your active device type to explore what’s right for you. Please note, that all of your devices sync automatically, so you’ll never lose access to anything stored in your vault or be locked out of your account, regardless of whether you use computer or mobile devices to access LastPass. Learn more about device types in our &lt;/span&gt;&lt;a href=&quot;https://support.logmeininc.com/lastpass/help/what-can-i-expect-to-change-for-lastpass-free-on-march-16-2021&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;Support Center&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;&lt;span data-contrast=&quot;none&quot;&gt;.&lt;/span&gt;&lt;/em&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;In addition to this change, a&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;s of May &lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;17&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;th&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;, 2021, email support will only be available for Premium and Families customers. &lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;LastPass Free users will always have access to our Support Center which has a robust library of self-help resources available 24/7 plus access to our LastPass Community, which is actively monitored by LastPass specialists. Free users will continue to receive email support for technical issues until May 16&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;th&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt; to assist through the transition of selecting an active device type. Learn more about our customer support offerings in our&lt;/span&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt; &lt;/span&gt;&lt;/strong&gt;&lt;a href=&quot;https://support.logmeininc.com/lastpass/help/how-is-lastpass-customer-support-changing-for-free-users&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;Support Center&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;&lt;span data-contrast=&quot;none&quot;&gt;.&lt;/span&gt;&lt;/em&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;If you’d like unlimited device type access and email support, you can &lt;/span&gt;&lt;a href=&quot;http://www.lastpass.com/buy-premium?cp=LPP2021-DT-25CS&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span data-contrast=&quot;none&quot;&gt;upgrade from Free to LastPass &lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;Premium for a limited time, for &lt;/span&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;$2.25 per month (billed annually)&lt;/span&gt;&lt;/strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;.&lt;/span&gt;&lt;/a&gt;&lt;span data-contrast=&quot;none&quot;&gt; *&lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;LastPass Premium at a Glance&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;LastPass Premium is your single and secure one-stop shop to your digital life. It includes dark web monitoring, emergency access, unlimited device type access, a security score dashboard, dedicated personal support, advanced multi-factor authentication and more. At only $3 per month (billed annually), LastPass Premium enables you to not only store your passwords but also protect your digital life, which is more important than ever in this new era of working from anywhere. As a current Free user, you can &lt;/span&gt;&lt;a href=&quot;http://www.lastpass.com/buy-premium?cp=LPP2021-DT-25CS&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;span data-contrast=&quot;none&quot;&gt;upgrade to Premium now for an exclusive, limited time discount and receive Premium for &lt;/span&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;$2.25 per month (billed annually).&lt;/span&gt;&lt;/strong&gt;&lt;/a&gt;&lt;span data-contrast=&quot;none&quot;&gt; *&lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span data-contrast=&quot;none&quot;&gt;Next Steps for Free Users&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;We understand how much you rely on LastPass in your daily life, so we wanted to let you know well in advance and give you resources to make this adjustment easier. Here’s what you need to know:&lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;For more information about these changes, please review these additional resources: &lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:0,&amp;quot;335559740&amp;quot;:240}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;Whether yo&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;u continue using LastPass &lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;F&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;ree on one device type, or across all your device&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;s&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt; types with LastPass Premium, &lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt;we’re committed to&lt;/span&gt;&lt;span data-contrast=&quot;none&quot;&gt; offering you a best-in-class password management experience.  We sincerely thank you for continuing to be part of our LastPass community.&lt;/span&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:200,&amp;quot;335559740&amp;quot;:276}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span data-contrast=&quot;none&quot;&gt;*&lt;/span&gt;&lt;em&gt;&lt;span data-contrast=&quot;none&quot;&gt;Additional Terms and Conditions: Advertised price valid for new users on their first year of LastPass Premium. Price not valid for renewals or existing customers and cannot be used for other LastPass plans, products or services.&lt;/span&gt;&lt;/em&gt;&lt;span data-ccp-props=&quot;{&amp;quot;201341983&amp;quot;:0,&amp;quot;335559739&amp;quot;:0,&amp;quot;335559740&amp;quot;:240}&quot;&gt; &lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Tue, 16 Feb 2021 13:52:21 +0000</pubDate>
<dc:creator>seng</dc:creator>
<og:type>article</og:type>
<og:title>Changes to LastPass Free - The LastPass Blog</og:title>
<og:description>We’re making changes to how Free users’ access LastPass across device types.</og:description>
<og:url>http://blog.lastpass.com/2021/02/changes-to-lastpass-free/</og:url>
<og:image>https://blog.lastpass.com/wp-content/uploads/sites/20/2021/02/paywall3.jpg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://blog.lastpass.com/2021/02/changes-to-lastpass-free/</dc:identifier>
</item>
<item>
<title>“User Engagement” Is Code for “Addiction”</title>
<link>https://craigwritescode.medium.com/user-engagement-is-code-for-addiction-a2f50d36d7ac</link>
<guid isPermaLink="true" >https://craigwritescode.medium.com/user-engagement-is-code-for-addiction-a2f50d36d7ac</guid>
<description>&lt;div class=&quot;&quot;&gt;
&lt;h2 id=&quot;1d4b&quot; class=&quot;gm df fo av b gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc bt&quot;&gt;Social media is a civilization-level problem&lt;/h2&gt;
&lt;div class=&quot;cr&quot;&gt;
&lt;div class=&quot;n ce hd he hf&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;&lt;a rel=&quot;noopener&quot; href=&quot;https://craigwritescode.medium.com/?source=post_page-----a2f50d36d7ac--------------------------------&quot;&gt;&lt;img alt=&quot;Craig&quot; class=&quot;s hg hh hi&quot; src=&quot;https://miro.medium.com/fit/c/56/56/0*CGizS0hqM6uHcz-C.jpeg&quot; width=&quot;28&quot; height=&quot;28&quot;/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;dt w n co&quot;&gt;

&lt;span class=&quot;av b aw ax bt&quot;/&gt;
&lt;p class=&quot;av b aw ax bt&quot;&gt;&lt;span class=&quot;av b aw ax bt&quot;&gt;1 day ago&lt;span class=&quot;hk&quot;&gt;·&lt;/span&gt;6 min read&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

Just keep scrolling
&lt;p id=&quot;a3bd&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;There is something about social media that human beings are not psychologically prepared for. It is a perverse and unnatural abstraction of human social community to which our brain does not react well. As a facsimile of genuine humanity, it plunges into something resembling &lt;a href=&quot;https://www.scientificamerican.com/article/why-uncanny-valley-human-look-alikes-put-us-on-edge/&quot; class=&quot;dn kd&quot; rel=&quot;noopener nofollow&quot;&gt;The Uncanny Valley&lt;/a&gt; for social interactions. It might be, for all we know, that the primary reason someone posts on social media is anger. If a proper study was done, I bet it would show exactly that.&lt;/p&gt;
&lt;p id=&quot;ea1f&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Quarantines and loc&lt;span id=&quot;rmm&quot;&gt;k&lt;/span&gt; downs forced people indoors and onto social media. That means that everyone’s own emotions became the most important thing in their world. Suddenly, everyone is in the daily habit of an unhealthy and irrational solipsism. Not because we wanted to be, or would be under other circumstances, but because we are all being conditioned to be introverted and consumption-obsessed egomaniacs.&lt;/p&gt;
&lt;p id=&quot;4827&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;I believe that human beings, on some fundamental level as social creatures, need to have trusting face-to-face community with others. Forcing people indoors and abstracting their social interactions, forcing human contact into a communication channel that is both easily monetized and easily monitored, it harms our brains in a way that we don’t yet fully understand, in addition to giving untold amounts of power to private tech companies.&lt;/p&gt;
&lt;p id=&quot;ba22&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;When Facebook says they want to “make the world more open and connected,” they mean they want to become the middle-man for all interpersonal interaction.&lt;/p&gt;
&lt;p id=&quot;1e57&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;When looking back at this era of humanity future humans will say, “How could they have just scrolled and scrolled all day? Didn’t they know what it was doing to them?” Social media is the new cigarettes. Everyone does it, it’s addictive, it’s harmful, and you should quit.&lt;/p&gt;
&lt;p id=&quot;71c9&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;The strangest part is that, while social media is extremely habit-forming, it also seems to consist of mostly negativity. &lt;a href=&quot;https://webcomicname.com/&quot; class=&quot;dn kd&quot; rel=&quot;noopener nofollow&quot;&gt;Webcomic Name&lt;/a&gt; accurately called it “an endless stream of the most horrible things in the world”. That means that it adversely affects our mental health in ways we don’t fully understand yet.&lt;/p&gt;
&lt;p id=&quot;9092&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;As a UI developer by trade, I can pinpoint precisely &lt;strong class=&quot;jj cu&quot;&gt;the Dark Triad of Web UI Design Choices&lt;/strong&gt; that addict people to social media and drive us all slowly crazy (by design!):&lt;/p&gt;
&lt;ol class=&quot;&quot;&gt;&lt;li id=&quot;989a&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc ke kf kg gl&quot;&gt;Relative timestamps (“3 hours ago” instead of “6:56 PM”). This creates IMMEDIACY.&lt;/li&gt;
&lt;li id=&quot;7796&quot; class=&quot;jh ji fo jj b gn kh jl jm gq ki jo jp jq kj js jt ju kk jw jx jy kl ka kb kc ke kf kg gl&quot;&gt;Infinite scrolling with no “more” button or link. This creates PERPETUATION.&lt;/li&gt;
&lt;li id=&quot;d1c5&quot; class=&quot;jh ji fo jj b gn kh jl jm gq ki jo jp jq kj js jt ju kk jw jx jy kl ka kb kc ke kf kg gl&quot;&gt;Fake internet points (clickable, often animated icons with incrementing numbers. Likes, reactions, upvotes, retweets, etc.). This creates ADDICTION.&lt;/li&gt;
&lt;/ol&gt;&lt;p id=&quot;6753&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Relative timestamps make everything feel immediate and time-sensitive. This is necessary for social media companies because otherwise these textual interactions can feel asynchronous. That’s the perk of email; You can respond whenever you want. Without relative time stamps, social media would feel just a bit more like an old-style internet forum or BBS, and less like an instant messaging service. This minuscule feature change has a massive impact: it subconsciously increases FOMO (Fear Of Missing Out), which encourages longer and more frequent use patterns at the direct mental expense of the user.&lt;/p&gt;
&lt;p id=&quot;99f0&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Infinite scrolling is also problematic because it makes users stick around longer. If the app allows for scrolling down forever and never stops interrupts, this means that any user can now scroll compulsively, half paying attention, without being interrupted, indefinitely. The result is that users unthinkingly keep themselves glued to their forever-feeds for a much longer period of time, which increases profit for the company running the app. Again, this is all subconscious. The user has no idea that they are being drawn in to addictive use patterns to improve the profits of Big Tech.&lt;/p&gt;
&lt;p id=&quot;ae4d&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Most alarming is the “internet points”. On Reddit, this is called Karma. On Twitter, it’s likes and retweets. Ostensibly, this simple numeric score displays the community’s overall attitude toward a given piece of content. On its face, this appears to be a radically democratic concept; Everyone can vote! The reality is very different. Reddit, for example, has always obfuscated the true Karma score (“to prevent vote brigading”), and the position of a piece of content within the feed can be purposely decided by the Reddit home office, not by the community. This is incredibly, deeply sinister.&lt;/p&gt;
&lt;p id=&quot;6746&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;The most addictive part of social media is the chemical addiction. When you can click an animated icon to show your appreciation for or reaction to a piece of content, it gives you a shot of dopamine. It adds value to the interaction, and it makes the user feel empowered. Likewise, if you get a lot of reactions to your content, you get rewarded by your own brain. This leads to, quite literally, &lt;em class=&quot;km&quot;&gt;a chemically addictive component&lt;/em&gt; to social media.&lt;/p&gt;
&lt;p id=&quot;0222&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Reddit has created an app that supports a community such that it appears to be democratic in its general functioning, but is actually very specifically curated toward a preferred set of political and social ends. It fosters a feeling of being an outsider in anyone who dares to disagree with what “everyone” purportedly already believes. This makes it incredibly easy to fall into irrational rage fits over “the other,” or what one imagines them to be, and to allow one’s political and social views to slip ever more deeply toward extremism, destructiveness, and the worst of the mob mentality. “Everyone already believes X,” the user says to herself, “why in the world don’t I? What’s wrong with me?” And thus, the user is gaslit out of her own principles, and conditioned to follow the herd without question. Who doesn’t want to fit in and be seen as “normal”?&lt;/p&gt;
&lt;p id=&quot;eefb&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Reddit has only developed into this Great Beast With Seven Heads And Ten Horns fairly recently. Facebook has actually been doing this exact psychological manipulation tactic for years. They tell you that your friends all think a certain way already, and that leads you to believe that you are the odd one out for having your own opinions. They even infamously tell users on occasion that their friends are “liking” the Facebook pages of big-name sponsors. Some users noticed this when they saw that their deceased relatives had “liked” an advertisement’s Facebook page. How much more evil can you get?&lt;/p&gt;
&lt;p id=&quot;5450&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Facebook invented the monetization of peer-pressure. Everyone else just followed suit.&lt;/p&gt;

&lt;em class=&quot;ku&quot;&gt;From Star Trek: The Next Generation, S5E6, “The Game”&lt;/em&gt;
&lt;p id=&quot;6194&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;At the risk of sounding like the &lt;em class=&quot;km&quot;&gt;massive&lt;/em&gt; nerd that I absolutely am, this reminds me of an episode of Star Trek: The Next Generation. Commander Riker happens upon a “game” which is actually an extremely efficient dopamine delivery device. Basically, placing this device on your head (&lt;em class=&quot;km&quot;&gt;image to the right&lt;/em&gt;) makes you feel like you’re getting a shot of straight dopamine, or morphine, or some pleasurable brain-drug, and it’s incredibly addictive. So addictive that it causes problems across the whole crew. To me, that’s the episode that tried to warn us about social media. We should have listened.&lt;/p&gt;
&lt;p id=&quot;4d37&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;The great specter haunting the twenty-first century will not be any sort of -&lt;em class=&quot;km&quot;&gt;ism&lt;/em&gt;. It will be the great beast of global technocracy, and Big Brother will not be a government. To the contrary, the Ministries of Truth, Peace, Love, and Plenty will all be private (or publicly traded) entities. In this way, no Constitution, or Magna Carta, or any other foundational document designed to keep government tyranny at bay will be able to operate as intended. It won’t be “the government” depriving us of our rights. It will be private companies with their own verbose and opaquely worded Terms of Service, and wide-ranging End User License Agreements. Right now, we can get by without Twitter or Reddit or Facebook if we really have to (and many of us do quite happily). Soon, you will not be able to opt out of the technocratic dictatorship that we are all to be subject to.&lt;/p&gt;
&lt;p id=&quot;ffea&quot; class=&quot;jh ji fo jj b gn jk jl jm gq jn jo jp jq jr js jt ju jv jw jx jy jz ka kb kc dh gl&quot;&gt;Welcome to the Machine.&lt;/p&gt;
</description>
<pubDate>Tue, 16 Feb 2021 12:42:19 +0000</pubDate>
<dc:creator>wilsocr88</dc:creator>
<og:type>article</og:type>
<og:title>“User Engagement” Is Code For “Addiction”</og:title>
<og:description>Social media is a civilization-level problem</og:description>
<og:url>https://craigwritescode.medium.com/user-engagement-is-code-for-addiction-a2f50d36d7ac</og:url>
<og:image>https://miro.medium.com/max/1200/0*lhrtMVRvjz4tsDi6.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://craigwritescode.medium.com/user-engagement-is-code-for-addiction-a2f50d36d7ac</dc:identifier>
</item>
<item>
<title>Arranging Invisible Icons in Quadratic Time</title>
<link>https://randomascii.wordpress.com/2021/02/16/arranging-invisible-icons-in-quadratic-time/</link>
<guid isPermaLink="true" >https://randomascii.wordpress.com/2021/02/16/arranging-invisible-icons-in-quadratic-time/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://twitter.com/FreyaHolmer/status/1355971680406007810&quot;&gt;&lt;img title=&quot;Tweet asking why explorer keeps hanging on a fast computer&quot; border=&quot;0&quot; alt=&quot;Tweet asking why explorer keeps hanging on a fast computer&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image.png?w=417&amp;amp;h=116&quot; width=&quot;417&quot; align=&quot;right&quot; height=&quot;116&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Near the end of January I was pointed to a twitter thread where a Windows user with a powerful machine was hitting random hangs in explorer. Lots of unscientific theories were being proposed. I don’t generally do random analysis of strangers’ performance problems but the case sounded interesting so I thought I’d take a look.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/freyaholmer&quot;&gt;Freya&lt;/a&gt; shared an &lt;a href=&quot;https://randomascii.wordpress.com/2015/09/24/etw-central/&quot;&gt;ETW trace&lt;/a&gt; of what was happening on her machine and I took a look using &lt;a href=&quot;https://randomascii.wordpress.com/2012/06/19/wpaxperf-trace-analysis-reimagined/&quot;&gt;Windows Performance Analyzer (WPA)&lt;/a&gt;. The first thing I noticed was that the UI Delays graph showed that, as promised, &lt;em&gt;explorer.exe’s&lt;/em&gt; thread 7,888 was failing to check for messages for 20.531 seconds. It was hung.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/image-1.png&quot;&gt;&lt;img title=&quot;UI Delays graph showing thread 7,888 not checking for messages&quot; border=&quot;0&quot; alt=&quot;UI Delays graph showing thread 7,888 not checking for messages&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image_thumb.png?w=652&amp;amp;h=170&quot; width=&quot;652&quot; height=&quot;170&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, explorer.exe has many UI threads so it’s not like the entire process was hung, but one of its windows was definitely hung, it was causing hangs elsewhere, and this is bad.&lt;/p&gt;
&lt;p&gt;If a thread is failing to pump messages then that is either because it is busy doing something else (&lt;a href=&quot;https://randomascii.wordpress.com/2013/04/23/xperf-for-excess-cpu-consumption-wpa-edition/&quot;&gt;consuming CPU&lt;/a&gt;) or it is waiting on something else (&lt;a href=&quot;https://randomascii.wordpress.com/2012/05/05/xperf-wait-analysisfinding-idle-time/&quot;&gt;idle CPU&lt;/a&gt;). After zooming in to the 20.531 second &lt;em&gt;MsgCheck Delay&lt;/em&gt; time period I checked the &lt;em&gt;CPU Usage (Precise)&lt;/em&gt; data (derived from context switch instrumentation and 100% accurate) and saw that thread 9,228 was running 99.2% of the time – it was consuming lots of CPU.&lt;/p&gt;
&lt;p&gt;The next task was to figure out what it was doing. The &lt;em&gt;CPU Usage (Sampled)&lt;/em&gt; data (derived from a 1 kHz sampling profiler) told me that thread 9,228 was spending roughly 99.7% of its time (26994 out of 27074 samples) in the &lt;em&gt;BatchPositionChangesHelper&lt;/em&gt; destructor (line 21) and its children (lines 23-25). That is a very expensive destructor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/image-2.png&quot;&gt;&lt;img title=&quot;CPU Usage (Sampled) call stack showing samples mostly in the BatchPositionChangesHelper destructor&quot; border=&quot;0&quot; alt=&quot;CPU Usage (Sampled) call stack showing samples mostly in the BatchPositionChangesHelper destructor&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image_thumb-1.png?w=623&amp;amp;h=441&quot; width=&quot;623&quot; height=&quot;441&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I don’t have access to this source code but I looked through the stacks for a bit and they seemed to suggest that explorer.exe was spending more than 20 seconds doing a lot of tasks related to… arranging icon positions.&lt;/p&gt;
&lt;h2&gt;Yup, that’s it&lt;/h2&gt;
&lt;p&gt;Arranging icons on the desktop is pretty simple. You just stack then in columns, overflow to the next column, and stop when the screens are full. So, 20 seconds arranging icons didn’t seem plausible and I assumed that the root cause would be some weird shell extension or other third-party software, but eventually I tried to reproduce the bug in the simplest way possible. I thought to myself, what if I just make a thousand copies of a tiny .jpg image on my desktop and see if explorer.exe misbehaves. It was too dumb to be sufficient, and yet:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;src = os.path.join(script_path, ‘SunsetWhales.jpg’)&lt;br/&gt;dst = os.path.join(desktop_path, ‘TestFiles%04d.jpg’)&lt;br/&gt;for i in range(file_count):&lt;br/&gt;  shutil.copy(src, dst % i)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I ran this simple script with a &lt;em&gt;file_count&lt;/em&gt; of 1,000 and suddenly explorer.exe was spinning like mad for more than twenty seconds. It really was that simple.&lt;/p&gt;
&lt;h2&gt;But how?&lt;/h2&gt;
&lt;p&gt;Computers today are really fast. The CPU of the original reporter (OP) was running at 4.6 GHz and they had approximately 950 GIF files on their desktop. In 20 seconds their CPU would tick through 92 &lt;em&gt;billion&lt;/em&gt; cycles, or 97 &lt;em&gt;million&lt;/em&gt; cycles per image. That is a lot.&lt;/p&gt;
&lt;p&gt;My guess was that &lt;a href=&quot;https://randomascii.wordpress.com/2019/12/08/on2-again-now-in-wmi/&quot;&gt;once again&lt;/a&gt; this was due to an observation which I have taken to calling &lt;em&gt;Dawson’s first law of computing:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/BruceDawson0xB/status/1120381406700429312&quot;&gt;O(n^2) is the sweet spot of badly scaling algorithms&lt;/a&gt;: fast enough to make it into production, but slow enough to make things fall down once it gets there.&lt;/p&gt;
&lt;p&gt;That is, the most likely explanation for why arranging icons was taking so long is that the icon rearranging code used an O(n^2) (aka &lt;a href=&quot;https://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities&quot;&gt;quadratic&lt;/a&gt;) algorithm such that as the number of icons doubled the time to arrange them quadrupled. This sort of performance scaling can take an algorithm that works fine for ten items and make it fail miserably with just 1,000 items.&lt;/p&gt;
&lt;p&gt;Good theory, but how can I prove it?&lt;/p&gt;
&lt;h2&gt;Science!&lt;/h2&gt;
&lt;p&gt;I started by writing a script that would populate my desktop with a specified number of images. I ran that repeatedly with increasingly large numbers of images, and recorded an ETW trace so that I could measure the performance. I also monitored &lt;em&gt;explorer.exe&lt;/em&gt; using &lt;em&gt;Task Manager&lt;/em&gt; so that I could tell when it had finished one job and was ready for the next.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/image-3.png&quot;&gt;&lt;img title=&quot;Messy graph showing non-linear increase in time of BatchPositionChangesHelper destructor samples versus image count&quot; border=&quot;0&quot; alt=&quot;Messy graph showing non-linear increase in time of BatchPositionChangesHelper destructor samples versus image count&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image_thumb-2.png?w=334&amp;amp;h=202&quot; width=&quot;334&quot; align=&quot;right&quot; height=&quot;202&quot;/&gt;&lt;/a&gt;My first test gave messy results – it looked like a non-linear increase but any attempt at line fitting was going to be more about hope-and-magic than following the data. I needed to understand what was going on in order to better test my theory.&lt;/p&gt;
&lt;p&gt;While looking at the traces I realized that the &lt;em&gt;BatchPositionChangesHelper&lt;/em&gt; destructor was running &lt;em&gt;most&lt;/em&gt; of the time (blue region) but not &lt;em&gt;all of the time&lt;/em&gt; that explorer was running (green region):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/image-4.png&quot;&gt;&lt;img title=&quot;Windows Performance Analyzer screen shot showing explorer.exe CPU time in green, with the times when the BatchPositionChangesHelper is running in blue&quot; border=&quot;0&quot; alt=&quot;Windows Performance Analyzer screen shot showing explorer.exe CPU time in green, with the times when the BatchPositionChangesHelper is running in blue&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image_thumb-3.png?w=597&amp;amp;h=316&quot; width=&quot;597&quot; height=&quot;316&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I realize that, among other things, the layout work was being interrupted by display work, and then I understood the cause of the variability.&lt;/p&gt;
&lt;p&gt;When my Python script started creating images the &lt;em&gt;explorer.exe&lt;/em&gt; process would notice and immediately start trying to lay out icons. It might end up doing this multiple times while I was creating the images and this was creating unpredictable results. It was a race condition which made the total cost inconsistent. Since I didn’t have access to the &lt;em&gt;explorer.exe&lt;/em&gt; source code I had to hack up a way to make it wait until all of the images were created before doing any layout. I did this by using &lt;em&gt;psutil&lt;/em&gt; to suspend the &lt;em&gt;explorer.exe&lt;/em&gt; process while I was creating the images. Then when I resumed the process it would do all of the work. The code looks something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;explorer = p = psutil.Process(explorer_pid)&lt;br/&gt;explorer.suspend()&lt;br/&gt;CreateImages()&lt;br/&gt;explorer.resume()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that in place I ran &lt;a href=&quot;https://github.com/randomascii/blogstuff/blob/main/DesktopIcons/runtests.bat&quot;&gt;my test batch file&lt;/a&gt; while recording an ETW trace. To minimize noise and trace size I disabled context switch call stacks (unneeded) and I turned off indexing for the desktop folder. I monitored &lt;em&gt;explorer.exe&lt;/em&gt; CPU usage with Task Manager and hit enter to go to the next test whenever it had gone to zero. That gave me this very nice graph of the CPU Usage of &lt;em&gt;explorer.exe&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/image-5.png&quot;&gt;&lt;img title=&quot;CPU Usage of explorer .exe as image_count increases&quot; border=&quot;0&quot; alt=&quot;CPU Usage of explorer .exe as image_count increases&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image_thumb-4.png?w=617&amp;amp;h=191&quot; width=&quot;617&quot; height=&quot;191&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The individual blocks represent CPU usage for 100, 200, 300, and so on images up to 1,000. If you have a keen eye then you will see that the CPU usage increases &lt;em&gt;faster than linear&lt;/em&gt; but &lt;em&gt;slower than quadratic&lt;/em&gt;. That is, the initial data suggests that the layout algorithm is &lt;em&gt;not-quite-O(n^2).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, explorer does more work that just icon layout. If some of its tasks are O(n) – linear – then they will diffuse the impact of the O(n^2) tasks. As ‘n’ increases the O(n^2) tasks will eventually dominate, but I didn’t want my test harness to run even longer than the 160 seconds it was already taking.&lt;/p&gt;
&lt;h2&gt;Isolation&lt;/h2&gt;
&lt;p&gt;Therefore my next task was to isolate out the time spent in the &lt;em&gt;BatchPositionChangesHelper&lt;/em&gt; destructor. It represented 78.4% of the time spent in explorer.exe in my test trace, and 92.3% of the time spent in the busy thread, and if I could prove that it was quadratic then I would have proved that as ‘n’ increased it would dominate evermore.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/image-6.png&quot;&gt;&lt;img title=&quot;Improbably perfect quadratic performance graph&quot; border=&quot;0&quot; alt=&quot;Improbably perfect quadratic performance graph&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image_thumb-5.png?w=373&amp;amp;h=222&quot; width=&quot;373&quot; align=&quot;right&quot; height=&quot;222&quot;/&gt;&lt;/a&gt;To do that I looked at the CPU Usage (Sampled) data and filtered it down to just show the samples in the &lt;em&gt;BatchPositionChangesHelper&lt;/em&gt; destructor and its children. I then looked at the ten different areas of the graph, and graphed the sample counts. The curve is so smooth that it looks fake, but this is the actual data.&lt;/p&gt;
&lt;p&gt;If you look at key points on the graph such as when the image count is 500 and then 1,000 you can see that the performance scaling is slightly &lt;em&gt;worse&lt;/em&gt; than O(n^2). That is, laying out 1,000 icons takes more than four times longer than laying out 500 icons.&lt;/p&gt;
&lt;h2&gt;The coup de grace&lt;/h2&gt;
&lt;p&gt;I don’t tend to have many icons on my desktop, so I am mostly immune to this bug. However I’ve seen people with their desktop completely full of icons and they are probably hitting lesser versions of this.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/image-7.png&quot;&gt;&lt;img title=&quot;Desktop settings - icon display off&quot; border=&quot;0&quot; alt=&quot;Desktop settings - icon display off&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/image_thumb-6.png?w=314&amp;amp;h=111&quot; width=&quot;314&quot; align=&quot;right&quot; height=&quot;111&quot;/&gt;&lt;/a&gt;The OP used their desktop to store GIF files. They treated it like a folder (which it is) where you can easily store images. They rarely used the icons on the desktop. So, when the number of icons eventually became excessive they decided to uncheck “Show desktop icons” to reduce the clutter. The icons were hidden and they could continue to store images in that folder.&lt;/p&gt;
&lt;p&gt;And yet.&lt;/p&gt;
&lt;p&gt;The hangs that they saw, where &lt;em&gt;explorer&lt;/em&gt; was repeatedly spending 20+ seconds arranging the icons on their desktop, where &lt;em&gt;explorer&lt;/em&gt; was burning 92 &lt;em&gt;billion&lt;/em&gt; CPU cycles to get the icons positioned &lt;em&gt;just right…&lt;/em&gt; were happening with the icons hidden.&lt;/p&gt;
&lt;p&gt;That’s next level amazing.&lt;/p&gt;
&lt;p&gt;Laying out icons on a grid should be an inherently linear operation, but somehow it was written as quadratic and was executed even when the icons were not being displayed.&lt;/p&gt;
&lt;p&gt;That’s it. If you write code that is going to be run by others then make sure that it scales well enough to handle any conceivable data set – reasonable or not. Quadratic algorithms usually fail that test.&lt;/p&gt;
&lt;h2&gt;Pitfalls&lt;/h2&gt;
&lt;p&gt;The original bug seemed to be related to rearranging multi-monitor setups (a job hazard for streamers, so I’m told) so for a while I was testing by plugging and unplugging my external monitor. That works poorly for efficient testing, and it also seems to have worn out the external monitor connection on my personal laptop. My laptop can no longer see my external monitor. Oops.&lt;/p&gt;
&lt;h2&gt;Yes, with symbols&lt;/h2&gt;
&lt;p&gt;When I analyzed the OP’s trace I just loaded it into Windows Performance Analyzer (WPA) and waited. I didn’t have to check to see what version of Windows they were running or what patches they had installed. WPA just looked at the debug information for all of the EXEs and PE files and downloaded symbol files from Microsoft’s symbol servers (and Chrome’s because I have that configured as well). &lt;a href=&quot;https://randomascii.wordpress.com/2013/03/09/symbols-the-microsoft-way/&quot;&gt;Symbol servers are good&lt;/a&gt;. If you are on Windows then make sure you are using symbol servers. If you are not on Windows – I’m very sorry.&lt;/p&gt;
&lt;h2&gt;Passing it along&lt;/h2&gt;
&lt;p&gt;I don’t know how many people this bug affects (anyone with 200-300 icons is hitting a modest version of this, and it gets progressively worse with more) and I have no power to fix it. So, &lt;a href=&quot;https://github.com/microsoft/WinDev/issues/80&quot;&gt;I filed a bug&lt;/a&gt;. I am not hopeful that it will be fixed. My last &lt;a href=&quot;https://github.com/microsoft/WinDev/issues/67&quot;&gt;quadratic-in-Windows bug&lt;/a&gt; has had zero comments since it was filed a few months ago.&lt;/p&gt;
&lt;p&gt;The raw measurements from my tests are &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1pXrr30W9-Ek-gPhaSlnLL9lWjflQbEbuB0cYN8rexmY/edit?usp=sharing&quot;&gt;here&lt;/a&gt; and the tests themselves are &lt;a href=&quot;https://github.com/randomascii/blogstuff/tree/main/DesktopIcons&quot;&gt;here on github&lt;/a&gt;. This bug is extremely easy to reproduce. If somebody wants a Feedback Hub entry they should create one. I recommend using UIforETW’s &lt;em&gt;Browse Folder&lt;/em&gt; option while the desktop is hung – the operation will be blocked for the duration.&lt;/p&gt;
&lt;h2&gt;Lessons for software developers&lt;/h2&gt;
&lt;p&gt;I’ve gone through quite a few interview loops during my career. I have often been asked to come up with an algorithm to do some artificial task. The obvious “brute-force” algorithm &lt;a href=&quot;https://randomascii.files.wordpress.com/2021/02/img_20180602_213715.jpg&quot;&gt;&lt;img title=&quot;View from Hotel Indigo rooftop bar, Leicester Square&quot; border=&quot;0&quot; alt=&quot;View from Hotel Indigo rooftop bar, Leicester Square&quot; src=&quot;https://randomascii.files.wordpress.com/2021/02/img_20180602_213715_thumb.jpg?w=328&amp;amp;h=247&quot; width=&quot;328&quot; align=&quot;right&quot; height=&quot;247&quot;/&gt;&lt;/a&gt;would usually be quadratic (O(n^2)) or, occasionally, exponential (O(2^n)). This would then generally lead to a discussion of:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Why quadratic and exponential are unacceptably slow for most real-world problems&lt;/li&gt;
&lt;li&gt;How to improve the algorithm so that it was O(n log n) or better.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Despite the obvious awareness of this issue we, as an industry, keep shipping code that is quadratic. Code that is fast enough to make it into production, but &lt;a href=&quot;https://twitter.com/BruceDawson0xB/status/1120381406700429312&quot;&gt;slow enough to make things fall down once it gets there&lt;/a&gt;. See for example &lt;a href=&quot;https://randomascii.wordpress.com/2019/12/08/on2-again-now-in-wmi/&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://randomascii.wordpress.com/2019/10/20/63-cores-blocked-by-seven-instructions/&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://randomascii.wordpress.com/2019/04/21/on2-in-createprocess/&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://randomascii.wordpress.com/2018/10/15/making-windows-slower-part-2-process-creation/&quot;&gt;this&lt;/a&gt;, &lt;a href=&quot;https://randomascii.wordpress.com/2011/08/05/making-virtualalloc-arbitrarily-slower/&quot;&gt;this&lt;/a&gt;, and many more. We really need to stop.&lt;/p&gt;
&lt;p&gt;Tired of reading boring performance analysis? Instead you can read about how I used &lt;a href=&quot;https://randomascii.wordpress.com/2018/08/26/commute-challenge-2018/&quot;&gt;19 different commute methods in September 2018&lt;/a&gt;, or &lt;a href=&quot;https://randomascii.wordpress.com/2017/05/01/commute-challenge-2017/&quot;&gt;20 different commute methods in April 2017&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&quot;jp-post-flair&quot; class=&quot;sharedaddy sd-like-enabled sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;sharedaddy sd-sharing-enabled&quot;&gt;
&lt;div class=&quot;robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Share this:&lt;/h3&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded&quot; id=&quot;like-post-wrapper-18565082-3702-602c6ac97a471&quot; data-src=&quot;//widgets.wp.com/likes/index.html?ver=20200826#blog_id=18565082&amp;amp;post_id=3702&amp;amp;origin=randomascii.wordpress.com&amp;amp;obj_id=18565082-3702-602c6ac97a471&quot; data-name=&quot;like-post-frame-18565082-3702-602c6ac97a471&quot;&gt;
&lt;h3 class=&quot;sd-title&quot;&gt;Like this:&lt;/h3&gt;
&lt;div class=&quot;likes-widget-placeholder post-likes-widget-placeholder&quot;&gt;&lt;span class=&quot;button&quot;&gt;&lt;span&gt;Like&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;loading&quot;&gt;Loading...&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Tue, 16 Feb 2021 09:26:18 +0000</pubDate>
<dc:creator>ingve</dc:creator>
<og:type>article</og:type>
<og:title>Arranging Invisible Icons in Quadratic Time</og:title>
<og:url>https://randomascii.wordpress.com/2021/02/16/arranging-invisible-icons-in-quadratic-time/</og:url>
<og:description>Near the end of January I was pointed to a twitter thread where a Windows user with a powerful machine was hitting random hangs in explorer. Lots of unscientific theories were being proposed. I don…</og:description>
<og:image>https://randomascii.files.wordpress.com/2021/02/image.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://randomascii.wordpress.com/2021/02/16/arranging-invisible-icons-in-quadratic-time/</dc:identifier>
</item>
<item>
<title>Many small queries are efficient in SQLite</title>
<link>https://sqlite.org/np1queryprob.html</link>
<guid isPermaLink="true" >https://sqlite.org/np1queryprob.html</guid>
<description>&lt;div class=&quot;nosearch&quot; readability=&quot;7&quot;&gt;
&lt;p&gt;Many Small Queries Are Efficient In SQLite&lt;/p&gt;
&lt;/div&gt;

&lt;ul readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;200 SQL statements per webpage is excessive for client/server database engines like MySQL, PostgreSQL, or SQL Server.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;But with SQLite, 200 or more SQL statement per webpage is not a problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;SQLite can also do large and complex queries efficiently, just like client/server databases. But SQLite can do many smaller queries efficiently too. Application developers can use whichever technique works best for the task at hand.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href=&quot;https://sqlite.org/whentouse.html#website&quot;&gt;Appropriate Uses For SQLite&lt;/a&gt; page says that dynamic pages on the SQLite website typically do about 200 SQL statements each. This has provoked criticism from readers. Examples:&lt;/p&gt;
&lt;ul readability=&quot;0.5&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;200 SQL statements is a ridiculously high number for a single page&quot;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;em&gt;&quot;For most sites, 200 queries is way, way, way too much.&quot;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;&quot;[This is] bad design&quot;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Such criticism would be well-founded for a traditional client/server database engine, such as MySQL, PostgreSQL, or SQL Server. In a client/server database, each SQL statement requires a message round-trip from the application to the database server and back to the application. Doing over 200 round-trip messages, sequentially, can be a serious performance drag. This is sometimes called the &quot;N+1 Query Problem&quot; or the &quot;N+1 Select Problem&quot; and it is an anti-pattern.&lt;/p&gt;

&lt;p&gt;SQLite is &lt;u&gt;not&lt;/u&gt; client/server, however. The SQLite database runs in the same process address space as the application. Queries do not involve message round-trips, only a function call. The latency of a single SQL query is far less in SQLite. Hence, using a large number of queries with SQLite is not the problem.&lt;/p&gt;

&lt;p&gt;The dynamic webpages on the SQLite website are mostly generated by the &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;Fossil version control system&lt;/a&gt;. A typical dynamic page would be a timeline such as &lt;a href=&quot;https://www.sqlite.org/src/timeline&quot;&gt;https://www.sqlite.org/src/timeline&lt;/a&gt;. A log of all SQL used by the timeline is shown below.&lt;/p&gt;
&lt;p&gt;The first group of queries in the log are extracting display options from the &quot;config&quot; and &quot;global_config&quot; tables of the Fossil database. Then there is a single complex query that extracts a list of all elements to be displayed on the timeline. This &quot;timeline&quot; query demonstrates that SQLite can easily process complex relational database queries involving multiple tables, subqueries, and complex WHERE clause constraints, and it can make effective use of indexes to solve the queries with minimal disk I/O.&lt;/p&gt;
&lt;p&gt;Following the single big &quot;timeline&quot; query, there are additional queries for each timeline element. Fossil is using the &quot;N+1 Query&quot; pattern rather than trying to grab all the information in as few queries as possible. But that is ok because there is no unnecessary IPC overhead. At the bottom of each timeline page, Fossil shows approximately how long it took to generate the page. For a 50-entry timeline, the latency is usually less than 25 milliseconds. Profiling shows that few of those milliseconds were spent inside the database engine.&lt;/p&gt;
&lt;p&gt;Using the N+1 Query pattern in Fossil does not harm the application. But the N+1 Query pattern does have benefits. For one, the section of the code that creates the timeline query can be completely separate from the section that prepares each timeline entry for display. This provides a separation of responsibility that helps keep the code simple and easy to maintain. Secondly, the information needed for display, and the queries needed to extract that information, vary according to what type of objects to be shown. Check-ins need one set of queries. Tickets need another set of queries. Wiki pages need a different query. And so forth. By implementing these queries on-demand and in the part of the code dealing with the various entities, there is further separation of responsibility and simplification of the overall code base.&lt;/p&gt;
&lt;p&gt;So, SQLite is able to do one or two large and complex queries, or it can do many smaller and simpler queries. Both are efficient. An application can use either or both techniques, depending on what works best for the situation at hand.&lt;/p&gt;
&lt;p&gt;The following is a log of all SQL used to generate one particular timeline (captured on 2016-09-16):&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;47&quot;&gt;
&lt;pre&gt;
-- sqlite3_open: /home/drh/sqlite/sqlite/.fslckout
PRAGMA foreign_keys=OFF;
SELECT sql FROM localdb.sqlite_schema WHERE name=='vfile';
-- sqlite3_open: /home/drh/.fossil
PRAGMA foreign_keys=OFF;
SELECT value FROM vvar WHERE name='repository';
ATTACH DATABASE '/home/drh/www/repos/sqlite.fossil' AS 'repository' KEY '';
SELECT value FROM config WHERE name='allow-symlinks';
SELECT value FROM global_config WHERE name='allow-symlinks';
SELECT value FROM config WHERE name='aux-schema';
SELECT 1 FROM config WHERE name='baseurl:http://';
SELECT value FROM config WHERE name='ip-prefix-terms';
SELECT value FROM global_config WHERE name='ip-prefix-terms';
SELECT value FROM config WHERE name='localauth';
SELECT value FROM vvar WHERE name='default-user';
SELECT uid FROM user WHERE cap LIKE '%s%';
SELECT login FROM user WHERE uid=1;
SELECT cap FROM user WHERE login = 'nobody';
SELECT cap FROM user WHERE login = 'anonymous';
SELECT value FROM config WHERE name='public-pages';
SELECT value FROM global_config WHERE name='public-pages';
SELECT value FROM config WHERE name='header';
SELECT value FROM config WHERE name='project-name';
SELECT value FROM config WHERE name='th1-setup';
SELECT value FROM global_config WHERE name='th1-setup';
SELECT value FROM config WHERE name='redirect-to-https';
SELECT value FROM global_config WHERE name='redirect-to-https';
SELECT value FROM config WHERE name='index-page';
SELECT mtime FROM config WHERE name='css';
SELECT mtime FROM config WHERE name='logo-image';
SELECT mtime FROM config WHERE name='background-image';
CREATE TEMP TABLE IF NOT EXISTS timeline(
  rid INTEGER PRIMARY KEY,
  uuid TEXT,
  timestamp TEXT,
  comment TEXT,
  user TEXT,
  isleaf BOOLEAN,
  bgcolor TEXT,
  etype TEXT,
  taglist TEXT,
  tagid INTEGER,
  short TEXT,
  sortby REAL
)
;
INSERT OR IGNORE INTO timeline SELECT
  blob.rid AS blobRid,
  uuid AS uuid,
  datetime(event.mtime,toLocal()) AS timestamp,
  coalesce(ecomment, comment) AS comment,
  coalesce(euser, user) AS user,
  blob.rid IN leaf AS leaf,
  bgcolor AS bgColor,
  event.type AS eventType,
  (SELECT group_concat(substr(tagname,5), ', ') FROM tag, tagxref
    WHERE tagname GLOB 'sym-*' AND tag.tagid=tagxref.tagid
      AND tagxref.rid=blob.rid AND tagxref.tagtype&amp;gt;0) AS tags,
  tagid AS tagid,
  brief AS brief,
  event.mtime AS mtime
 FROM event CROSS JOIN blob
WHERE blob.rid=event.objid
 AND NOT EXISTS(SELECT 1 FROM tagxref WHERE tagid=5 AND tagtype&amp;gt;0 AND rid=blob.rid)
 ORDER BY event.mtime DESC LIMIT 50;
-- SELECT value FROM config WHERE name='timeline-utc';
SELECT count(*) FROM timeline WHERE etype!='div';
SELECT min(timestamp) FROM timeline;
SELECT julianday('2016-09-15 14:54:51',fromLocal());
SELECT EXISTS (SELECT 1 FROM event CROSS JOIN blob WHERE blob.rid=event.objid AND mtime&amp;lt;=2457647.121412037);
SELECT max(timestamp) FROM timeline;
SELECT julianday('2016-09-24 17:42:43',fromLocal());
SELECT EXISTS (SELECT 1 FROM event CROSS JOIN blob WHERE blob.rid=event.objid AND mtime&amp;gt;=2457656.238009259);
SELECT value FROM config WHERE name='search-ci';
SELECT value FROM vvar WHERE name='checkout';
SELECT value FROM config WHERE name='timeline-max-comment';
SELECT value FROM global_config WHERE name='timeline-max-comment';
SELECT value FROM config WHERE name='timeline-date-format';
SELECT value FROM config WHERE name='timeline-truncate-at-blank';
SELECT value FROM global_config WHERE name='timeline-truncate-at-blank';
SELECT * FROM timeline ORDER BY sortby DESC;
SELECT value FROM config WHERE name='hash-digits';
SELECT value FROM global_config WHERE name='hash-digits';
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68028;
SELECT pid FROM plink WHERE cid=68028 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM tagxref WHERE rid=68028 AND tagid=9 AND tagtype&amp;gt;0;
SELECT value FROM config WHERE name='timeline-block-markup';
SELECT value FROM config WHERE name='timeline-plaintext';
SELECT value FROM config WHERE name='wiki-use-html';
SELECT value FROM global_config WHERE name='wiki-use-html';
SELECT 1 FROM private WHERE rid=68028;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68026;
SELECT pid FROM plink WHERE cid=68026 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=68026;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68024;
SELECT pid FROM plink WHERE cid=68024 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=68024;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68018;
SELECT pid FROM plink WHERE cid=68018 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=68018;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68012;
SELECT pid FROM plink WHERE cid=68012 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=68012;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68011;
SELECT value FROM config WHERE name='details';
SELECT pid FROM plink WHERE cid=68011 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM tagxref WHERE rid=68011 AND tagid=9 AND tagtype&amp;gt;0;
SELECT 1 FROM private WHERE rid=68011;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68008;
SELECT pid FROM plink WHERE cid=68008 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=68008;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68006;
SELECT pid FROM plink WHERE cid=68006 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=68006;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=68000;
SELECT pid FROM plink WHERE cid=68000 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=68000;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67997;
SELECT pid FROM plink WHERE cid=67997 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67997;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67992;
SELECT pid FROM plink WHERE cid=67992 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67992;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67990;
SELECT pid FROM plink WHERE cid=67990 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67990;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67989;
SELECT pid FROM plink WHERE cid=67989 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67989;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67984;
SELECT pid FROM plink WHERE cid=67984 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67984;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67983;
SELECT pid FROM plink WHERE cid=67983 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67983;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67979;
SELECT pid FROM plink WHERE cid=67979 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67979;
SELECT value FROM config WHERE name='ticket-closed-expr';
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='1ec41379c9c1e400' AND tkt_uuid&amp;lt;'1ec41379c9c1e401';
SELECT 1 FROM private WHERE rid=67980;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67977;
SELECT pid FROM plink WHERE cid=67977 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='1ec41379c9c1e400' AND tkt_uuid&amp;lt;'1ec41379c9c1e401';
SELECT 1 FROM private WHERE rid=67977;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='1ec41379c9c1e400' AND tkt_uuid&amp;lt;'1ec41379c9c1e401';
SELECT 1 FROM private WHERE rid=67974;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67971;
SELECT pid FROM plink WHERE cid=67971 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67971;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67972;
SELECT pid FROM plink WHERE cid=67972 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67972;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67969;
SELECT pid FROM plink WHERE cid=67969 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67969;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67966;
SELECT pid FROM plink WHERE cid=67966 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67966;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67962;
SELECT pid FROM plink WHERE cid=67962 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67962;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67960;
SELECT pid FROM plink WHERE cid=67960 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67960;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67957;
SELECT pid FROM plink WHERE cid=67957 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67957;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67955;
SELECT pid FROM plink WHERE cid=67955 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67955;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67953;
SELECT pid FROM plink WHERE cid=67953 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='5990a1bdb4a073' AND tkt_uuid&amp;lt;'5990a1bdb4a074';
SELECT 1 FROM blob WHERE uuid&amp;gt;='5990a1bdb4a073' AND uuid&amp;lt;'5990a1bdb4a074';
SELECT 1 FROM private WHERE rid=67953;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67941;
SELECT pid FROM plink WHERE cid=67941 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67941;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67940;
SELECT pid FROM plink WHERE cid=67940 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67940;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67938;
SELECT pid FROM plink WHERE cid=67938 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67938;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67935;
SELECT pid FROM plink WHERE cid=67935 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67935;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67934;
SELECT pid FROM plink WHERE cid=67934 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67934;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67932;
SELECT pid FROM plink WHERE cid=67932 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67932;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67930;
SELECT pid FROM plink WHERE cid=67930 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67930;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67928;
SELECT pid FROM plink WHERE cid=67928 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM tagxref WHERE rid=67928 AND tagid=9 AND tagtype&amp;gt;0;
SELECT 1 FROM private WHERE rid=67928;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='0eab1ac7591f511d' AND tkt_uuid&amp;lt;'0eab1ac7591f511e';
SELECT 1 FROM private WHERE rid=67919;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='01874d252ac44861' AND tkt_uuid&amp;lt;'01874d252ac44862';
SELECT 1 FROM blob WHERE uuid&amp;gt;='01874d252ac44861' AND uuid&amp;lt;'01874d252ac44862';
SELECT 1 FROM private WHERE rid=67918;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67916;
SELECT pid FROM plink WHERE cid=67916 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='0eab1ac759' AND tkt_uuid&amp;lt;'0eab1ac75:';
SELECT 1 FROM private WHERE rid=67916;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='a49bc0a8244feb08' AND tkt_uuid&amp;lt;'a49bc0a8244feb09';
SELECT 1 FROM blob WHERE uuid&amp;gt;='a49bc0a8244feb08' AND uuid&amp;lt;'a49bc0a8244feb09';
SELECT 1 FROM private WHERE rid=67914;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67913;
SELECT pid FROM plink WHERE cid=67913 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='0eab1ac7591f' AND tkt_uuid&amp;lt;'0eab1ac7591g';
SELECT 1 FROM private WHERE rid=67913;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67911;
SELECT pid FROM plink WHERE cid=67911 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67911;
SELECT status='Closed' OR status='Fixed' FROM ticket  WHERE tkt_uuid&amp;gt;='0eab1ac7591f511d' AND tkt_uuid&amp;lt;'0eab1ac7591f511e';
SELECT 1 FROM private WHERE rid=67909;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67907;
SELECT pid FROM plink WHERE cid=67907 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67907;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67899;
SELECT pid FROM plink WHERE cid=67899 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67899;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67897;
SELECT pid FROM plink WHERE cid=67897 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67897;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67895;
SELECT pid FROM plink WHERE cid=67895 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67895;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67893;
SELECT pid FROM plink WHERE cid=67893 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67893;
SELECT value FROM tagxref WHERE tagid=8 AND tagtype&amp;gt;0 AND rid=67891;
SELECT pid FROM plink WHERE cid=67891 AND pid NOT IN phantom ORDER BY isprim DESC;
SELECT 1 FROM private WHERE rid=67891;
SELECT count(*) FROM plink
 WHERE pid=67928 AND isprim
   AND coalesce((SELECT value FROM tagxref
                  WHERE tagid=8 AND rid=plink.pid), 'trunk')
      =coalesce((SELECT value FROM tagxref
                  WHERE tagid=8 AND rid=plink.cid), 'trunk')
;
SELECT count(*) FROM plink
 WHERE pid=68011 AND isprim
   AND coalesce((SELECT value FROM tagxref
                  WHERE tagid=8 AND rid=plink.pid), 'trunk')
      =coalesce((SELECT value FROM tagxref
                  WHERE tagid=8 AND rid=plink.cid), 'trunk')
;
SELECT count(*) FROM plink
 WHERE pid=68028 AND isprim
   AND coalesce((SELECT value FROM tagxref
                  WHERE tagid=8 AND rid=plink.pid), 'trunk')
      =coalesce((SELECT value FROM tagxref
                  WHERE tagid=8 AND rid=plink.cid), 'trunk')
;
SELECT value FROM config WHERE name='show-version-diffs';
SELECT value FROM config WHERE name='adunit-omit-if-admin';
SELECT value FROM global_config WHERE name='adunit-omit-if-admin';
SELECT value FROM config WHERE name='adunit-omit-if-user';
SELECT value FROM global_config WHERE name='adunit-omit-if-user';
SELECT value FROM config WHERE name='adunit';
SELECT value FROM global_config WHERE name='adunit';
SELECT value FROM config WHERE name='auto-hyperlink-delay';
SELECT value FROM global_config WHERE name='auto-hyperlink-delay';
SELECT value FROM config WHERE name='footer';
PRAGMA database_list;
PRAGMA database_list;
PRAGMA localdb.freelist_count;
PRAGMA localdb.page_count;
&lt;/pre&gt;&lt;/div&gt;
</description>
<pubDate>Tue, 16 Feb 2021 05:45:22 +0000</pubDate>
<dc:creator>ArtTimeInvestor</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://sqlite.org/np1queryprob.html</dc:identifier>
</item>
</channel>
</rss>