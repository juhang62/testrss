<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Advanced Data Structures</title>
<link>https://courses.csail.mit.edu/6.851/fall17/</link>
<guid isPermaLink="true" >https://courses.csail.mit.edu/6.851/fall17/</guid>
<description>&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;&lt;title&gt;Advanced Data Structures (6.851)&lt;/title&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;66.374785100287&quot;&gt;

&lt;h2&gt;Prof. &lt;a href=&quot;http://erikdemaine.org/&quot;&gt;Erik Demaine&lt;/a&gt;     TAs: Adam Hesterberg, Jayson Lynch     LAs: Andrew He, Stef Ren&lt;/h2&gt;
&lt;hr /&gt;&lt;p&gt;&lt;span&gt;[Home] [&lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;Lectures&lt;/a&gt;] [&lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/psets/&quot;&gt;Problem Sets&lt;/a&gt;] [&lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/project/&quot;&gt;Project&lt;/a&gt;] [&lt;a href=&quot;https://coauthor.csail.mit.edu/6.851-2017/&quot;&gt;Coauthor&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;&lt;p&gt;Data structures play a central role in modern computer science. You interact with data structures even more often than with algorithms (think Google, your mail server, and even your network routers). In addition, data structures are essential building blocks in obtaining efficient algorithms. This course covers major results and current research directions in data structures:&lt;/p&gt;
&lt;table readability=&quot;18.5&quot;&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;th&gt;TIME TRAVEL&lt;/th&gt;
&lt;td&gt;We can remember the past efficiently (a technique called persistence), but in general it's difficult to change the past and see the outcomes on the present (retroactivity). So alas, Back To The Future isn't really possible.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;th&gt;GEOMETRY&lt;/th&gt;
&lt;td&gt;When data has more than one dimension (e.g. maps, database tables).&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;th&gt;DYNAMIC OPTIMALITY&lt;/th&gt;
&lt;td&gt;Is there one binary search tree that's as good as all others? We still don't know, but we're close.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;4&quot;&gt;&lt;th&gt;MEMORY HIERARCHY&lt;/th&gt;
&lt;td&gt;Real computers have multiple levels of caches. We can optimize the number of cache misses, often without even knowing the size of the cache.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;3&quot;&gt;&lt;th&gt;HASHING&lt;/th&gt;
&lt;td&gt;Hashing is the most used data structure in computer science. And it's still an active area of research.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;6&quot;&gt;&lt;th&gt;INTEGERS&lt;/th&gt;
&lt;td&gt;Logarithmic time is too easy. By careful analysis of the information you're dealing with, you can often reduce the operation times substantially, sometimes even to constant. We will also cover lower bounds that illustrate when this is not possible.&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;4&quot;&gt;&lt;th&gt;DYNAMIC GRAPHS&lt;/th&gt;
&lt;td&gt;A network link went down, or you just added or deleted a friend in a social network. We can still maintain essential information about the connectivity as it changes.&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;2&quot;&gt;&lt;th&gt;STRINGS&lt;/th&gt;
&lt;td&gt;Searching for phrases in giant text (think Google or DNA).&lt;/td&gt;
&lt;/tr&gt;&lt;tr class=&quot;odd&quot; readability=&quot;6&quot;&gt;&lt;th&gt;SUCCINCT&lt;/th&gt;
&lt;td&gt;Most “linear size” data structures you know are much larger than they need to be, often by an order of magnitude. Some data structures require almost no space beyond the raw data but are still fast (think heaps, but much cooler).&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;h2&gt;Inverted Lectures&lt;/h2&gt;
&lt;p&gt;This year, we're experimenting with inverted lectures: most material is covered in &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;video lectures&lt;/a&gt; recorded in 2012 (already watched by over 100,000 people), which you can conveniently play at faster speed than real time. In-class time will be divided between &lt;strong&gt;answers to questions&lt;/strong&gt;, &lt;strong&gt;new material&lt;/strong&gt; presented by the professor and/or guest lecturers, and &lt;strong&gt;in-class problem solving&lt;/strong&gt;, with a focus on problem solving. Particularly unusual is that the problems we'll solve in groups will include &lt;strong&gt;problem-set style&lt;/strong&gt; problems with known solutions, &lt;strong&gt;coding&lt;/strong&gt; problems, and &lt;strong&gt;open research problems&lt;/strong&gt; that no one knows the answer to, with the goal of publishing papers about whatever we discover. (Past offerings of 6.851 have led to over a dozen published papers.) You can work on whatever type of problem most interests you. To facilitate collaboration, we'll be using a new &lt;a href=&quot;https://github.com/edemaine/coauthor/&quot;&gt;open-source software platform&lt;/a&gt; called &lt;strong&gt;&lt;a href=&quot;https://coauthor.csail.mit.edu/6.851-2017&quot;&gt;Coauthor&lt;/a&gt;&lt;/strong&gt;, along with &lt;a href=&quot;https://github.com/6851-2017&quot;&gt;Github&lt;/a&gt; for (optional) coding.&lt;/p&gt;
&lt;h2&gt;Specifics&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Lecture time:&lt;/strong&gt; Wednesdays 7:00–9:30pm&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;First lecture:&lt;/strong&gt; &lt;em&gt;Wednesday, September 6, 2017&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lecture room:&lt;/strong&gt; &lt;a href=&quot;http://whereis.mit.edu/?go=32&quot;&gt;32&lt;/a&gt;-082 — except Sept. 27 in 32-155&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Units:&lt;/strong&gt; 3-0-9, G-level &amp;amp; TCS AAGS credit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contact:&lt;/strong&gt; Email &lt;code&gt;6851-staff#at#csail.mit.edu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; &lt;a href=&quot;http://courses.csail.mit.edu/6.046/&quot;&gt;6.046 (Design and Analysis of Algorithms)&lt;/a&gt;, or an equivalently thorough undergraduate algorithms class from another school (e.g., covering much of &lt;a href=&quot;http://mitpress.mit.edu/algorithms/&quot;&gt;CLRS&lt;/a&gt;). &lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;p&gt;There's no perfect textbook for this class, but there are some relevant books:&lt;/p&gt;
&lt;h2&gt;Participating&lt;/h2&gt;
&lt;p&gt;We welcome both undergraduate and graduate students from all universities, although officially this is a graduate class.&lt;/p&gt;
&lt;p&gt;If you are interested in attending the class, for credit or as a listener, please do the following:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Join the &lt;a href=&quot;http://lists.csail.mit.edu/mailman/listinfo/6851-students&quot;&gt;6851-students mailing list&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Sign up for an account on &lt;a href=&quot;https://coauthor.csail.mit.edu/6.851-2017&quot;&gt;Coauthor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fill out &lt;a href=&quot;https://goo.gl/forms/KdyiC48NzmrXubc82&quot;&gt;this signup form&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Grading&lt;/h2&gt;
&lt;p&gt;There are four requirements:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Watching &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;lecture videos&lt;/a&gt;. Be sure to fill out the linked feedback forms.&lt;/li&gt;
&lt;li&gt;Attending in-person classes (except when you have a valid excuse, which you need to tell the course staff). In particular, you must participate weekly by posting or being @mentioned in a post on Coauthor.&lt;/li&gt;
&lt;li&gt;Lightweight (weekly, one-page) &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/psets/&quot;&gt;problem sets&lt;/a&gt;. Problem sets will be posted weekly, and follow a “one-page in, one-page out” rule.&lt;/li&gt;
&lt;li&gt;Revise &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/lectures/&quot;&gt;existing scribe notes&lt;/a&gt; for one lecture (or maybe two), according to your own inspiration for improvement and feedback from fellow students. The entire calendar for the course has been posted, so you can select a lecture that interests you. We will circulate a sign-up sheet during the second week. Scribe notes are generally due noon on Tuesday after the corresponding class (but extensions are possible).&lt;/li&gt;
&lt;li&gt;Research-oriented &lt;a href=&quot;https://courses.csail.mit.edu/6.851/fall17/project/&quot;&gt;final project&lt;/a&gt; (paper and presentation). We allow theoretical, experimental, survey, and Wikipedia final projects.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Past and Future&lt;/h2&gt;
&lt;p&gt;The class is offered once every two years or so. It was given in &lt;a href=&quot;http://courses.csail.mit.edu/6.897/spring03/&quot;&gt;Spring 2003&lt;/a&gt; and &lt;a href=&quot;http://courses.csail.mit.edu/6.897/spring05/&quot;&gt;Spring 2005&lt;/a&gt; as 6.897, and in &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring07/&quot;&gt;Spring 2007&lt;/a&gt;, &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring10/&quot;&gt;Spring 2010&lt;/a&gt;, &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring12/&quot;&gt;Spring 2012&lt;/a&gt;, &lt;a href=&quot;http://courses.csail.mit.edu/6.851/spring14/&quot;&gt;Spring 2014&lt;/a&gt;, as 6.851.&lt;/p&gt;
&lt;/body&gt;</description>
<pubDate>Wed, 29 May 2019 20:17:02 +0000</pubDate>
<dc:creator>rjammala</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://courses.csail.mit.edu/6.851/fall17/</dc:identifier>
</item>
<item>
<title>Google to restrict modern ad blocking Chrome extensions to enterprise users</title>
<link>https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</link>
<guid isPermaLink="true" >https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</guid>
<description>&lt;p&gt;Back in January, Google &lt;a href=&quot;https://9to5google.com/2019/01/22/google-chrome-break-ad-blockers/&quot;&gt;announced a proposed change&lt;/a&gt; to Chrome’s extensions system, called Manifest V3, that would stop current ad blockers from working efficiently. In a response to the overwhelming negative feedback, Google is standing firm on Chrome’s ad blocking changes, sharing that current ad blocking capabilities will be restricted to enterprise users.&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-292442&quot;/&gt; &lt;ins class=&quot;adsbygoogle author_ad&quot; data-ad-client=&quot;ca-pub-5506057612223327&quot; data-ad-slot=&quot;7752856384&quot;/&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://9to5google.com/guides/manifest-v3/&quot;&gt;Manifest V3&lt;/a&gt; comprises a major change to Chrome’s extensions system, including a revamp to the permissions system and a fundamental change to the way ad blockers operate. In particular, modern ad blockers, like uBlock Origin and &lt;a href=&quot;https://9to5google.com/2019/01/23/ghostery-anti-trust-chrome-ad-blocking/&quot;&gt;Ghostery&lt;/a&gt;, use Chrome’s webRequest API to block ads before they’re even downloaded.&lt;/p&gt;
&lt;p&gt;With the Manifest V3 proposal, Google deprecates the webRequest API’s ability to block a particular request before it’s loaded. As you would expect, power users and extension developers alike criticized Google’s proposal for limiting the user’s ability to browse the web as they see fit.&lt;/p&gt;
&lt;p&gt;Now, months later, Google &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/m/#!msg/chromium-extensions/veJy9uAwS00/9iKaX5giAQAJ&quot;&gt;has responded&lt;/a&gt; to some of the various issues raised by the community, sharing more details on the changes to permissions and more. The most notable aspect of their response, however, is a single sentence buried in the text, clarifying their changes to ad blocking and privacy blocking extensions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chrome is deprecating the blocking capabilities of the webRequest API in Manifest V3, not the entire webRequest API (though blocking will still be available to enterprise deployments).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google is essentially saying that Chrome will still have the capability to block unwanted content, but this will be restricted to only paid, enterprise users of Chrome. This is likely to allow enterprise customers to develop in-house Chrome extensions, not for ad blocking usage.&lt;/p&gt;
&lt;p&gt;For the rest of us, Google hasn’t budged on their changes to content blockers, meaning that ad blockers will need to switch to a less effective, rules-based system. This system is how blockers like AdBlock Plus currently work.&lt;/p&gt;
&lt;p&gt;One of the original concerns of switching to this system was the fact that Chrome currently &lt;a href=&quot;https://developers.chrome.com/extensions/declarativeNetRequest#properties&quot;&gt;imposes a limit&lt;/a&gt; of 30,000 rules, while popular ad blocking rules lists like &lt;a href=&quot;https://easylist.to/&quot;&gt;EasyList&lt;/a&gt; use upwards of 75,000 rules. In the response, Google claims that they’re looking to increase this number, depending on performance tests, but couldn’t commit to anything specific.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are planning to raise these values but we won’t have updated numbers until we can run performance tests to find a good upper bound that will work across all supported devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The lead developer of uBlock Origin, Raymond Hill, has commented on the situation, both to &lt;a href=&quot;https://www.theregister.co.uk/2019/05/29/google_webrequest_api/&quot;&gt;&lt;em&gt;The Register&lt;/em&gt;&lt;/a&gt; and on &lt;a href=&quot;https://github.com/uBlockOrigin/uBlock-issues/issues/338#issuecomment-496009417&quot;&gt;uBlock Origin’s GitHub&lt;/a&gt;, pointing out that allowing ad blockers goes completely against Google’s business model.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google’s primary business is incompatible with unimpeded content blocking. Now that Google Chrome product has achieve high market share, the content blocking concerns as stated in its 10K filing are being tackled.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Google themselves have even admitted as such in a &lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/1652044/000165204419000004/goog10-kq42018.htm#sB8A92C82A7085B27A37F412D2216BC6F&quot;&gt;recent SEC Form 10-K filing&lt;/a&gt; by Alphabet, uncovered by Hill, in which ad blocking extensions are labeled as a “risk factor” to Google’s revenues.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New and existing technologies could affect our ability to customize ads and/or could block ads online, which would harm our business.&lt;/p&gt;
&lt;p&gt;Technologies have been developed to make customizable ads more difficult or to block the display of ads altogether and some providers of online services have integrated technologies that could potentially impair the core functionality of third-party digital advertising. Most of our Google revenues are derived from fees paid to us in connection with the display of ads online. As a result, such technologies and tools could adversely affect our operating results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that in mind, the change makes a great deal of sense, when you think of Chrome as a way for Google to better deliver ads to your devices. By allowing in-depth ad blockers to continue to function, they’re allowing for a direct, negative impact on their largest revenue stream. Chrome’s enterprise users get an exception because they’re a separate revenue stream.&lt;/p&gt;
&lt;h4&gt;9to5Google’s Take&lt;/h4&gt;
&lt;p&gt;Firefox is available on all platforms (including Chrome OS via the Android or Linux app) and, &lt;a href=&quot;https://9to5google.com/2019/04/16/hands-on-kiwi-browser-brings-full-chrome-extensions-to-android-gallery/&quot;&gt;unlike Chrome&lt;/a&gt;, supports browser extensions on Android, including uBlock Origin and other privacy extensions. Just remember to unblock sites you wish to support financially.&lt;/p&gt;

&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/c/9to5google?sub_confirmation=1&quot;&gt;&lt;em&gt;Check out 9to5Google on YouTube for more news:&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;embed-youtube&quot;&gt;&lt;iframe class=&quot;youtube-player&quot; type=&quot;text/html&quot; width=&quot;1000&quot; height=&quot;563&quot; src=&quot;https://www.youtube.com/embed/TKi2NqyG58A?version=3&amp;amp;rel=0&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 19:38:04 +0000</pubDate>
<dc:creator>estranhosidade</dc:creator>
<og:type>article</og:type>
<og:title>Chrome to limit full ad blocking extensions to enterprise users - 9to5Google</og:title>
<og:description>In a response to negative feedback, Google shared that Chrome's current ad blocking capabilities for extensions will soon be restricted to enterprise users.</og:description>
<og:url>https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</og:url>
<og:image>https://9to5google.com/wp-content/uploads/sites/4/2019/03/chrome_logo_windows_2.jpg?resize=1024,512</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://9to5google.com/2019/05/29/chrome-ad-blocking-enterprise-manifest-v3/</dc:identifier>
</item>
<item>
<title>TypeScript 3.5</title>
<link>https://devblogs.microsoft.com/typescript/announcing-typescript-3-5</link>
<guid isPermaLink="true" >https://devblogs.microsoft.com/typescript/announcing-typescript-3-5</guid>
<description>&lt;div class=&quot;row justify-content-center&quot;&gt;
&lt;div class=&quot;col-md-4&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/8499bf678149d617cc71a23afb377736?s=58&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;58&quot; height=&quot;58&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-58 wp-user-avatar wp-user-avatar-58 photo avatar-default&quot;/&gt;&lt;p&gt;Daniel&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;entry-meta&quot;&gt;
&lt;p&gt;May 29th, 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Today we’re happy to announce the availability of TypeScript 3.5!&lt;/p&gt;
&lt;p&gt;If you’re new to TypeScript, it’s a language that builds on JavaScript that adds optional static types. TypeScript code gets type-checked to avoid common mistakes like typos and accidental coercions, and then gets transformed by a program called the TypeScript compiler. The compiler strips out any TypeScript-specific syntax and optionally transforms your code to work with older browsers, leaving you with clean, readable JavaScript that can run in your favorite browser or Node.js. Built on top of all this is also a language service which uses all the type information TypeScript has to provide powerful editor functionality like code completions, find-all-references, quick fixes, and refactorings. All of this is cross-platform, cross-editor, and open source.&lt;/p&gt;
&lt;p&gt;TypeScript also provides that same tooling for JavaScript users, and can even type-check JavaScript code typed with JSDoc using the &lt;code&gt;checkJs&lt;/code&gt; flag. If you’ve used editors like Visual Studio or Visual Studio Code with &lt;code&gt;.js&lt;/code&gt; files, TypeScript powers that experience, so you might already be using TypeScript!&lt;/p&gt;
&lt;p&gt;To get started with TypeScript, you can get it &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.TypeScript.MSBuild&quot; rel=&quot;nofollow&quot;&gt;through NuGet&lt;/a&gt;, or through npm with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
npm install -g typescript
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also get editor support by&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/TypeScript-Editor-Support&quot;&gt;Support for other editors&lt;/a&gt; will likely be rolling in in the near future.&lt;/p&gt;
&lt;p&gt;Let’s explore what’s new in 3.5!&lt;/p&gt;
&lt;h2 id=&quot;speed-improvements&quot;&gt;Speed improvements&lt;/h2&gt;
&lt;p&gt;TypeScript 3.5 introduces several optimizations around type-checking and incremental builds.&lt;/p&gt;
&lt;h3&gt;Type-checking speed-ups&lt;/h3&gt;
&lt;p&gt;Much of the expressivity of our type system comes with a cost – any more work that we expect the compiler to do translates to longer compile times. Unfortunately, as part of a bug fix in TypeScript 3.4 we accidentally introduced a regression that could lead to an explosion in how much work the type-checker did, and in turn, type-checking time. The most-impacted set of users were those using the styled-components library. This regression was serious not just because it led to much higher build times for TypeScript code, but because editor operations for both TypeScript and JavaScript users became unbearably slow.&lt;/p&gt;
&lt;p&gt;Over this past release, we focused heavily on optimizing certain code paths and stripping down certain functionality to the point where TypeScript 3.5 is actually &lt;em&gt;faster&lt;/em&gt; than TypeScript 3.3 for many incremental checks. Not only have compile times fallen compared to 3.4, but code completion and any other editor operations should be much snappier too.&lt;/p&gt;
&lt;p&gt;If you haven’t upgraded to TypeScript 3.4 due to these regressions, we would value your feedback to see whether TypeScript 3.5 addresses your performance concerns!&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;--incremental&lt;/code&gt; improvements&lt;/h3&gt;
&lt;p&gt;TypeScript 3.4 introduced a new &lt;code&gt;--incremental&lt;/code&gt; compiler option. This option saves a bunch of information to a &lt;code&gt;.tsbuildinfo&lt;/code&gt; file that can be used to speed up subsequent calls to &lt;code&gt;tsc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TypeScript 3.5 includes several optimizations to caching how the state of the world was calculated – compiler settings, why files were looked up, where files were found, etc. In scenarios involving hundreds of projects using TypeScript’s project references in &lt;code&gt;--build&lt;/code&gt; mode, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/31101&quot;&gt;we’ve found that the amount of time rebuilding can be reduced by as much as 68% compared to TypeScript 3.4&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;For more details, you can see the pull requests to&lt;/p&gt;
&lt;h2 id=&quot;the-omit-helper-type&quot;&gt;The &lt;code&gt;Omit&lt;/code&gt; helper type&lt;/h2&gt;
&lt;p&gt;Much of the time, we want to create an object that omits certain properties. It turns out that we can express types like that using TypeScript’s built-in &lt;code&gt;Pick&lt;/code&gt; and &lt;code&gt;Exclude&lt;/code&gt; helpers. For example, if we wanted to define a &lt;code&gt;Person&lt;/code&gt; that has no &lt;code&gt;location&lt;/code&gt; property, we could write the following:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
    age&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
    location&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
};

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;RemainingKeys&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Exclude&lt;/span&gt;&amp;lt;&lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;location&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&amp;gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;QuantumPerson&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Pick&lt;/span&gt;&amp;lt;&lt;span&gt;Person&lt;/span&gt;, &lt;span&gt;RemainingKeys&lt;/span&gt;&amp;gt;;

&lt;span&gt;// equivalent to&lt;/span&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;QuantumPerson&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
    age&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we “subtracted” &lt;code&gt;&quot;location&quot;&lt;/code&gt; from the set of properties of &lt;code&gt;Person&lt;/code&gt; using the &lt;code&gt;Exclude&lt;/code&gt; helper type. We then picked them right off of &lt;code&gt;Person&lt;/code&gt; using the &lt;code&gt;Pick&lt;/code&gt; helper type.&lt;/p&gt;
&lt;p&gt;It turns out this type of operation comes up frequently enough that users will write a helper type to do exactly this:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Omit&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;any&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;Pick&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;Exclude&lt;/span&gt;&amp;lt;&lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;, &lt;span&gt;K&lt;/span&gt;&amp;gt;&amp;gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of making everyone define their own version of &lt;code&gt;Omit&lt;/code&gt;, TypeScript 3.5 will include its own in &lt;code&gt;lib.d.ts&lt;/code&gt; which can be used anywhere. The compiler itself will use this &lt;code&gt;Omit&lt;/code&gt; type to express types created through object rest destructuring declarations on generics.&lt;/p&gt;
&lt;p&gt;For more details, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/30552&quot;&gt;see the pull request on GitHub to add &lt;code&gt;Omit&lt;/code&gt;&lt;/a&gt;, as well as &lt;a href=&quot;https://github.com/microsoft/TypeScript/pull/31134&quot;&gt;the change to use &lt;code&gt;Omit&lt;/code&gt; for object rest&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;improved-excess-property-checks-in-union-types&quot;&gt;Improved excess property checks in union types&lt;/h2&gt;
&lt;p&gt;TypeScript has a feature called &lt;em&gt;excess property checking&lt;/em&gt; in object literals. This feature is meant to detect typos for when a type isn’t expecting a specific property.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Style&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    alignment&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;,
    color&lt;span class=&quot;pl-k&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;
};

&lt;span&gt;const&lt;/span&gt; s&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Style&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    alignment: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;center&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    colour: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;grey&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;//  ^^^^^^ error! &lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.4 and earlier, certain excess properties were allowed in situations where they really shouldn’t have been. For instance, TypeScript 3.4 permitted the incorrect &lt;code&gt;name&lt;/code&gt; property in the object literal even though its types don’t match between &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;Label&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    x&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
    y&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
};

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Label&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    name&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
};

&lt;span&gt;const&lt;/span&gt; thing&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;Label&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    x: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    y: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    name: &lt;span&gt;true&lt;/span&gt; &lt;span&gt;// uh-oh!&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Previously, a non-disciminated union wouldn’t have &lt;em&gt;any&lt;/em&gt; excess property checking done on its members, and as a result, the incorrectly typed &lt;code&gt;name&lt;/code&gt; property slipped by.&lt;/p&gt;
&lt;p&gt;In TypeScript 3.5, the type-checker at least verifies that all the provided properties belong to &lt;em&gt;some&lt;/em&gt; union member and have the appropriate type, meaning that the sample above correctly issues an error.&lt;/p&gt;
&lt;p&gt;Note that partial overlap is still permitted as long as the property types are valid.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;const&lt;/span&gt; pl&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Point&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;Label&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    x: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    y: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt;,
    name: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;origin&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span&gt;// okay&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the---allowumdglobalaccess-flag&quot;&gt;The &lt;code&gt;--allowUmdGlobalAccess&lt;/code&gt; flag&lt;/h2&gt;
&lt;p&gt;In TypeScript 3.5, you can now reference UMD global declarations like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;export as namespace foo;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;from anywhere – even modules – using the new &lt;code&gt;--allowUmdGlobalAccess&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;This feature might require some background if you’re not familiar with UMD globals in TypeScript. A while back, JavaScript libraries were often published as global variables with properties tacked on – you sort of hoped that nobody picked a library name that was identical to yours. Over time, authors of modern JavaScript libraries started publishing using module systems to prevent some of these issues. While module systems alleviated certain classes of issues, they did leave users who were used to using global variables out in the rain.&lt;/p&gt;
&lt;p&gt;As a work-around, many libraries are authored in a way that define a global object if a module loader isn’t available at runtime. This is typically leveraged when users target a module format called “UMD”, and as such, TypeScript has a way to describe this pattern which we’ve called “UMD global namespaces”:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;export&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;namespace&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;preact&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Whenever you’re in a script file (a non-module file), you’ll be able to access one of these UMD globals.&lt;/p&gt;
&lt;p&gt;So what’s the problem? Well, not all libraries &lt;em&gt;conditionally&lt;/em&gt; set their global declarations. Some just &lt;em&gt;always&lt;/em&gt; create a global in addition to registering with the module system. We decided to err on the more conservative side, and many of us felt that if a library &lt;em&gt;could&lt;/em&gt; be imported, that was probably the the intent of the author.&lt;/p&gt;
&lt;p&gt;In reality, we received a lot of feedback that users were writing modules where some libraries were consumed as globals, and others were consumed through imports. So in the interest of making those users’ lives easier, we’ve introduced the &lt;code&gt;allowUmdGlobalAccess&lt;/code&gt; flag in TypeScript 3.5.&lt;/p&gt;
&lt;p&gt;For more details, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/30776/files&quot;&gt;see the pull request on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;smarter-union-type-checking&quot;&gt;Smarter union type checking&lt;/h2&gt;
&lt;p&gt;When checking against union types, TypeScript typically compares each constituent type in isolation. For example, take the following code:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;S&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { done&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;, value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; }
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; { done&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;false&lt;/span&gt;, value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; }
    &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; { done&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;, value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt; };

&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; source&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;S&lt;/span&gt;;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;let&lt;/span&gt; target&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;;

&lt;span class=&quot;pl-smi&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;source&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assigning &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt; involves checking whether the type of &lt;code&gt;source&lt;/code&gt; is assignable to &lt;code&gt;target&lt;/code&gt;. That in turn means that TypeScript needs to check whether &lt;code&gt;S&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{ done: boolean, value: number }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is assignable to &lt;code&gt;T&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;{ done: false, value: number } | { done: true, value: number }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Prior to TypeScript 3.5, the check in this specific example would fail, because &lt;code&gt;S&lt;/code&gt; isn’t assignable to &lt;code&gt;{ done: false, value: number }&lt;/code&gt; nor &lt;code&gt;{ done: true, value: number }&lt;/code&gt;. Why? Because the &lt;code&gt;done&lt;/code&gt; property in &lt;code&gt;S&lt;/code&gt; isn’t specific enough – it’s &lt;code&gt;boolean&lt;/code&gt; whereas each constituent of &lt;code&gt;T&lt;/code&gt; has a &lt;code&gt;done&lt;/code&gt; property that’s specifically &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. That’s what we meant by each constituent type being checked in isolation: TypeScript doesn’t just union each property together and see if &lt;code&gt;S&lt;/code&gt; is assignable to that. If it did, some bad code could get through like the following:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
}

&lt;span&gt;interface&lt;/span&gt; &lt;span&gt;Bar&lt;/span&gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bar&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
}

&lt;span&gt;function&lt;/span&gt; doSomething(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Foo&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;Bar&lt;/span&gt;) {
    &lt;span&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-smi&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;===&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toLowerCase&lt;/span&gt;();
    }
}

&lt;span&gt;// uh-oh - luckily TypeScript errors here!&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;doSomething&lt;/span&gt;({
    kind: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;,
    value: &lt;span class=&quot;pl-c1&quot;&gt;123&lt;/span&gt;,
});
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So clearly this behavior is good for some set of cases. Was TypeScript being helpful in the original example though? Not really. If you figure out the precise type of any possible value of &lt;code&gt;S&lt;/code&gt;, you can actually see that it matches the types in &lt;code&gt;T&lt;/code&gt; exactly.&lt;/p&gt;
&lt;p&gt;That’s why in TypeScript 3.5, when assigning to types with discriminant properties like in &lt;code&gt;T&lt;/code&gt;, the language actually &lt;em&gt;will&lt;/em&gt; go further and decompose types like &lt;code&gt;S&lt;/code&gt; into a union of every possible inhabitant type. In this case, since &lt;code&gt;boolean&lt;/code&gt; is a union of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt; will be viewed as a union of &lt;code&gt;{ done: false, value: number }&lt;/code&gt; and &lt;code&gt;{ done: true, value: number }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For more details, you can &lt;a href=&quot;https://github.com/microsoft/TypeScript/pull/30779&quot;&gt;see the original pull request on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;higher-order-type-inference-from-generic-constructors&quot;&gt;Higher order type inference from generic constructors&lt;/h2&gt;
&lt;p&gt;In TypeScript 3.4, we improved inference for when generic functions that return functions like so:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; compose&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt;&amp;gt;(
    &lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;, &lt;span class=&quot;pl-en&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt; {
    
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;g&lt;/span&gt;(&lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;))
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;took other generic functions as arguments, like so:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; arrayify&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;[] {
    &lt;span&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;];
}

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;Box&lt;/span&gt;&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt; }
&lt;span&gt;function&lt;/span&gt; boxify&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;Box&lt;/span&gt;&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt; {
    &lt;span&gt;return&lt;/span&gt; { value: &lt;span class=&quot;pl-smi&quot;&gt;y&lt;/span&gt; };
}

&lt;span&gt;let&lt;/span&gt; newFn &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;compose&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;arrayify&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;boxify&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of a relatively useless type like &lt;code&gt;(x: {}) =&amp;gt; Box&amp;lt;{}[]&amp;gt;&lt;/code&gt;, which older versions of the language would infer, TypeScript 3.4’s inference allows &lt;code&gt;newFn&lt;/code&gt; to be generic. Its new type is &lt;code&gt;&amp;lt;T&amp;gt;(x: T) =&amp;gt; Box&amp;lt;T[]&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;TypeScript 3.5 generalizes this behavior to work on constructor functions as well.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Box&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;box&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;;
    &lt;span&gt;constructor&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) {
        &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
    }
}

&lt;span&gt;class&lt;/span&gt; &lt;span&gt;Bag&lt;/span&gt;&amp;lt;&lt;span&gt;U&lt;/span&gt;&amp;gt; {
    kind&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;bag&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
    value&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;;
    &lt;span&gt;constructor&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;) {
        &lt;span&gt;this&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
    }
}


&lt;span&gt;function&lt;/span&gt; composeCtor&amp;lt;&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;U&lt;/span&gt;, &lt;span&gt;V&lt;/span&gt;&amp;gt;(
    &lt;span class=&quot;pl-v&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;U&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;V&lt;/span&gt; {
    
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; &lt;span&gt;G&lt;/span&gt;(&lt;span&gt;new&lt;/span&gt; &lt;span&gt;F&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;))
}

&lt;span&gt;let&lt;/span&gt; f &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;composeCtor&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;Box&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;Bag&lt;/span&gt;); &lt;span&gt;// has type '&amp;lt;T&amp;gt;(x: T) =&amp;gt; Bag&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;'&lt;/span&gt;
&lt;span&gt;let&lt;/span&gt; a &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;1024&lt;/span&gt;); &lt;span&gt;// has type 'Bag&amp;lt;Box&amp;lt;number&amp;gt;&amp;gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to compositional patterns like the above, this new inference on generic constructors means that functions that operate on class components in certain UI libraries like React can more correctly operate on generic class components.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;ComponentClass&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;new&lt;/span&gt; (&lt;span class=&quot;pl-v&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;) &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt; {
    props&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;;
    &lt;span&gt;constructor&lt;/span&gt;(&lt;span class=&quot;pl-v&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;P&lt;/span&gt;);
}

&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; myHoc&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;ComponentClass&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;ComponentClass&lt;/span&gt;&amp;lt;&lt;span&gt;P&lt;/span&gt;&amp;gt;;

&lt;span&gt;type&lt;/span&gt; &lt;span&gt;NestedProps&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { foo&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, stuff&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; };

&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;class&lt;/span&gt; &lt;span&gt;GenericComponent&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;Component&lt;/span&gt;&amp;lt;&lt;span&gt;NestedProps&lt;/span&gt;&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;&amp;gt; {
}

&lt;span&gt;// type is 'new &amp;lt;T&amp;gt;(props: NestedProps&amp;lt;T&amp;gt;) =&amp;gt; Component&amp;lt;NestedProps&amp;lt;T&amp;gt;&amp;gt;'&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; GenericComponent2 &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;myHoc&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;GenericComponent&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To learn more, &lt;a href=&quot;https://github.com/microsoft/TypeScript/pull/31116&quot;&gt;check out the original pull request on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;smart-select&quot;&gt;Smart Select&lt;/h2&gt;
&lt;p&gt;TypeScript 3.5 provides an API for editors to expand text selections farther and farther outward in a way that is syntactically aware – in other words, the editor knows which constructs it should expand out to. This feature is called &lt;em&gt;Smart Select&lt;/em&gt;, and the result is that editors don’t have to resort to heuristics like brace-matching, and you can expect &lt;a href=&quot;https://code.visualstudio.com/docs/editor/codebasics#_shrinkexpand-selection&quot; rel=&quot;nofollow&quot;&gt;selection expansion in editors like Visual Studio Code&lt;/a&gt; to “just work”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/smartSelect-3.5.gif&quot;&gt;&lt;img alt=&quot;Smart selection in action&quot; src=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/smartSelect-3.5.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As with all of our editing features, this feature is cross-platform and available to any editor which can appropriately query &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29&quot;&gt;TypeScript’s language server&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;extract-to-type-alias&quot;&gt;Extract to type alias&lt;/h2&gt;
&lt;p&gt;Thanks to Wenlu Wang (GitHub user &lt;a href=&quot;https://github.com/Kingwl&quot;&gt;@Kingwl&lt;/a&gt;), TypeScript supports a useful new refactoring to extract types to local type aliases.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/extractType-3.5.gif&quot;&gt;&lt;img alt=&quot;Example of extracting to a type alias&quot; src=&quot;https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2019/05/extractType-3.5.gif&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For those who prefer interfaces over type aliases, &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/31640&quot;&gt;an issue exists for extracting object types to interfaces as well&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;breaking-changes&quot;&gt;Breaking changes&lt;/h2&gt;
&lt;h3&gt;Generic type parameters are implicitly constrained to &lt;code&gt;unknown&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In TypeScript 3.5, &lt;a href=&quot;https://github.com/Microsoft/TypeScript/pull/30637&quot;&gt;generic type parameters without an explicit constraint are now implicitly constrained to &lt;code&gt;unknown&lt;/code&gt;&lt;/a&gt;, whereas previously the implicit constraint of type parameters was the empty object type &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In practice, &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;unknown&lt;/code&gt; are pretty similar, but there are a few key differences:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; can be indexed with a string (&lt;code&gt;k[&quot;foo&quot;]&lt;/code&gt;), though this is an implicit &lt;code&gt;any&lt;/code&gt; error under &lt;code&gt;--noImplicitAny&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; is assumed to not be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, whereas &lt;code&gt;unknown&lt;/code&gt; is possibly one of those values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; is assignable to &lt;code&gt;object&lt;/code&gt;, but &lt;code&gt;unknown&lt;/code&gt; is not.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The decision to switch to &lt;code&gt;unknown&lt;/code&gt; is rooted that it is more correct for unconstrained generics – there’s no telling how a generic type will be instantiated.&lt;/p&gt;
&lt;p&gt;On the caller side, this typically means that assignment to &lt;code&gt;object&lt;/code&gt; will fail, and methods on &lt;code&gt;Object&lt;/code&gt; like &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;toLocaleString&lt;/code&gt;, &lt;code&gt;valueOf&lt;/code&gt;, &lt;code&gt;hasOwnProperty&lt;/code&gt;, &lt;code&gt;isPrototypeOf&lt;/code&gt;, and &lt;code&gt;propertyIsEnumerable&lt;/code&gt; will no longer be available.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; foo&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;] {
    &lt;span&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toString&lt;/span&gt;()]
    &lt;span&gt;//           ~~~~~~~~ error! Property 'toString' does not exist on type 'T'.&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a workaround, you can add an explicit constraint of &lt;code&gt;{}&lt;/code&gt; to a type parameter to get the old behavior.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;//             vvvvvvvvvv&lt;/span&gt;
&lt;span&gt;function&lt;/span&gt; foo&amp;lt;&lt;span&gt;T&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; {}&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; [&lt;span&gt;T&lt;/span&gt;, &lt;span&gt;string&lt;/span&gt;] {
    &lt;span&gt;return&lt;/span&gt; [&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;, &lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;toString&lt;/span&gt;()]
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the caller side, failed inferences for generic type arguments will result in &lt;code&gt;unknown&lt;/code&gt; instead of &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; parse&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;JSON&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;parse&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;x&lt;/span&gt;);
}

&lt;span&gt;// k has type 'unknown' - previously, it was '{}'.&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;parse&lt;/span&gt;(&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a workaround, you can provide an explicit type argument:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;// 'k' now has type '{}'&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;parse&lt;/span&gt;&amp;lt;{}&amp;gt;(&lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code&gt;{ [k: string]: unknown }&lt;/code&gt; is no longer a wildcard assignment target&lt;/h3&gt;
&lt;p&gt;The index signature &lt;code&gt;{ [s: string]: any }&lt;/code&gt; in TypeScript behaves specially: it’s a valid assignment target for any object type. This is a special rule, since types with index signatures don’t normally produce this behavior.&lt;/p&gt;
&lt;p&gt;Since its introduction, the type &lt;code&gt;unknown&lt;/code&gt; in an index signature behaved the same way:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;let&lt;/span&gt; dict&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { [&lt;span class=&quot;pl-v&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;unknown&lt;/span&gt; };
&lt;span&gt;// Was okay&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; () &lt;span class=&quot;pl-k&quot;&gt;=&amp;gt;&lt;/span&gt; {};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In general this rule makes sense; the implied constraint of “all its properties are some subtype of &lt;code&gt;unknown&lt;/code&gt;” is trivially true of any object type. However, in TypeScript 3.5, this special rule is removed for &lt;code&gt;{ [s: string]: unknown }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This was a necessary change because of the change from &lt;code&gt;{}&lt;/code&gt; to &lt;code&gt;unknown&lt;/code&gt; when generic inference has no candidates. Consider this code:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; someFunc()&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt;;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; fn&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { [&lt;span class=&quot;pl-v&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt; })&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt;;
&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;someFunc&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.4, the following sequence occurred:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;No candidates were found for &lt;code&gt;T&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt; is selected to be &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;someFunc&lt;/code&gt; isn’t assignable to &lt;code&gt;arg&lt;/code&gt; because there are no special rules allowing arbitrary assignment to &lt;code&gt;{ [k: string]: {} }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The call is correctly rejected&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Due to changes around unconstrained type parameters falling back to &lt;code&gt;unknown&lt;/code&gt; (see above), &lt;code&gt;arg&lt;/code&gt; would have had the type &lt;code&gt;{ [k: string]: unknown }&lt;/code&gt;, which anything is assignable to, so the call would have incorrectly been allowed. That’s why TypeScript 3.5 removes the specialized assignability rule to permit assignment to &lt;code&gt;{ [k: string]: unknown }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that fresh object literals are still exempt from this check.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;const&lt;/span&gt; obj &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { m: &lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt; }; 
&lt;span&gt;// okay&lt;/span&gt;
&lt;span&gt;const&lt;/span&gt; dict&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; { [&lt;span class=&quot;pl-v&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;]&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;unknown&lt;/span&gt; } &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;obj&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on the intended behavior of &lt;code&gt;{ [s: string]: unknown }&lt;/code&gt;, several alternatives are available:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;{ [s: string]: any }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ [s: string]: {} }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unknown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;We recommend sketching out your desired use cases and seeing which one is the best option for your particular use case.&lt;/p&gt;
&lt;h3&gt;Improved excess property checks in union types&lt;/h3&gt;
&lt;p&gt;As mentioned above, TypeScript 3.5 is stricter about excess property checks on constituents of union types.&lt;/p&gt;
&lt;p&gt;We have not witnessed examples where this checking hasn’t caught legitimate issues, but in a pinch, any of the workarounds to disable excess property checking will apply:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Add a type assertion onto the object (e.g. &lt;code&gt;{ myProp: SomeType } as ExpectedType&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Add an index signature to the expected type to signal that unspecified properties are expected (e.g. &lt;code&gt;interface ExpectedType { myProp: SomeType; [prop: string]: unknown }&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Fixes to unsound writes to indexed access types&lt;/h3&gt;
&lt;p&gt;TypeScript allows you to represent the operation of accessing a property of an object via the name of that property:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;type&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; {
    s&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;string&lt;/span&gt;;
    n&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;;
};

&lt;span&gt;function&lt;/span&gt; read&amp;lt;&lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;)&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt;] {
    &lt;span&gt;return&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;key&lt;/span&gt;];
} 

&lt;span&gt;const&lt;/span&gt; a&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; { s: &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, n: &lt;span class=&quot;pl-c1&quot;&gt;0&lt;/span&gt; };
&lt;span&gt;const&lt;/span&gt; x &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-en&quot;&gt;read&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;s&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;); &lt;span&gt;// x: string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While commonly used for reading values from an object, you can also use this for writes:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; write&amp;lt;&lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt;])&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt; {
    &lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;value&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.4, the logic used to validate a &lt;em&gt;write&lt;/em&gt; was much too permissive:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; write&amp;lt;&lt;span&gt;K&lt;/span&gt; &lt;span&gt;extends&lt;/span&gt; &lt;span&gt;keyof&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;&amp;gt;(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;K&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;A&lt;/span&gt;[&lt;span&gt;K&lt;/span&gt;])&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;void&lt;/span&gt; {
    &lt;span&gt;// ???&lt;/span&gt;
    &lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt;[&lt;span class=&quot;pl-smi&quot;&gt;key&lt;/span&gt;] &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;hello, world&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;;
}
&lt;span&gt;// Breaks the object by putting a string where a number should be&lt;/span&gt;
&lt;span class=&quot;pl-en&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;a&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;n&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;oops&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In TypeScript 3.5, this logic is fixed and the above sample correctly issues an error.&lt;/p&gt;
&lt;p&gt;Most instances of this error represent potential errors in the relevant code. If you are convinced that you are not dealing with an error, you can use a type assertion instead.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;lib.d.ts&lt;/code&gt; includes the &lt;code&gt;Omit&lt;/code&gt; helper type&lt;/h3&gt;
&lt;p&gt;TypeScript 3.5 includes a new &lt;code&gt;Omit&lt;/code&gt; helper type. As a result, any global declarations of &lt;code&gt;Omit&lt;/code&gt; included in your project will result in the following error message:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span class=&quot;pl-smi&quot;&gt;Duplicate&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;identifier&lt;/span&gt; &lt;span&gt;&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;Omit&lt;span class=&quot;pl-pds&quot;&gt;'&lt;/span&gt;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two workarounds may be used here:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Delete the duplicate declaration and use the one provided in &lt;code&gt;lib.d.ts&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Export the existing declaration from a module file or a namespace to avoid a global collision. Existing usages can use an &lt;code&gt;import&lt;/code&gt; or explicit reference to your project’s old &lt;code&gt;Omit&lt;/code&gt; type.&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;&lt;code&gt;Object.keys&lt;/code&gt; rejects primitives in ES5&lt;/h3&gt;
&lt;p&gt;In ECMAScript 5 environments, &lt;code&gt;Object.keys&lt;/code&gt; throws an exception if passed any non-&lt;code&gt;object&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;// Throws if run in an ES5 runtime&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In ECMAScript 2015, &lt;code&gt;Object.keys&lt;/code&gt; returns &lt;code&gt;[]&lt;/code&gt; if its argument is a primitive:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;// [] in ES6 runtime&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-c1&quot;&gt;10&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a potential source of error that wasn’t previously identified. In TypeScript 3.5, if &lt;code&gt;target&lt;/code&gt; (or equivalently &lt;code&gt;lib&lt;/code&gt;) is &lt;code&gt;ES5&lt;/code&gt;, calls to &lt;code&gt;Object.keys&lt;/code&gt; must pass a valid &lt;code&gt;object&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In general, errors here represent possible exceptions in your application and should be treated as such. If you happen to know through other means that a value is an &lt;code&gt;object&lt;/code&gt;, a type assertion is appropriate:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;function&lt;/span&gt; fn(&lt;span class=&quot;pl-v&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;object&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;|&lt;/span&gt; &lt;span&gt;number&lt;/span&gt;, &lt;span class=&quot;pl-v&quot;&gt;isArgActuallyObject&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;boolean&lt;/span&gt;) {
    &lt;span&gt;if&lt;/span&gt; (&lt;span class=&quot;pl-smi&quot;&gt;isArgActuallyObject&lt;/span&gt;) {
        &lt;span&gt;const&lt;/span&gt; k &lt;span class=&quot;pl-k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-smi&quot;&gt;arg&lt;/span&gt; &lt;span&gt;as&lt;/span&gt; &lt;span&gt;object&lt;/span&gt;);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this change interacts with the change in generic inference from &lt;code&gt;{}&lt;/code&gt; to &lt;code&gt;unknown&lt;/code&gt;, because &lt;code&gt;{}&lt;/code&gt; is a valid &lt;code&gt;object&lt;/code&gt; whereas &lt;code&gt;unknown&lt;/code&gt; isn’t:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-ts&quot;&gt;
&lt;pre class=&quot;lang:default decode:true&quot;&gt;
&lt;span&gt;declare&lt;/span&gt; &lt;span&gt;function&lt;/span&gt; fn&amp;lt;&lt;span&gt;T&lt;/span&gt;&amp;gt;()&lt;span class=&quot;pl-k&quot;&gt;:&lt;/span&gt; &lt;span&gt;T&lt;/span&gt;;

&lt;span&gt;// Was okay in TypeScript 3.4, errors in 3.5 under --target ES5&lt;/span&gt;
&lt;span class=&quot;pl-c1&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;pl-c1&quot;&gt;keys&lt;/span&gt;(&lt;span class=&quot;pl-en&quot;&gt;fn&lt;/span&gt;());
&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;
&lt;p&gt;As with our last release, you can see our &lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/31639&quot;&gt;3.6 iteration plan document&lt;/a&gt;, as well as the &lt;a href=&quot;https://github.com/Microsoft/TypeScript/wiki/Roadmap&quot;&gt;feature roadmap page&lt;/a&gt; to get an idea of what’s coming in the next version of TypeScript. We’re anticipating 3.6 will bring a better experience for authoring and consuming generators, support for ECMAScript’s private fields proposal, and APIs for build tools to support fast incremental builds and projects references. Also of note is the fact that as of TypeScript 3.6, our release schedule will be switching to a cadence of every 3 months (instead of every 2 months as it has been until this point). We believe this will make it easier for us to validate changes with partner teams and&lt;/p&gt;
&lt;p&gt;We hope that this version of TypeScript makes you faster and happier as you code. Let us know what you think of this release &lt;a href=&quot;https://twitter.com/typescript&quot; rel=&quot;nofollow&quot;&gt;on Twitter&lt;/a&gt;, and if you’ve got any suggestions on what we can do better, feel free to &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/new/choose&quot;&gt;file an issue on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;– Daniel Rosenwasser and the TypeScript team&lt;/p&gt;


&lt;div class=&quot;authorinfoarea&quot;&gt;
&lt;div&gt;&lt;img src=&quot;https://secure.gravatar.com/avatar/8499bf678149d617cc71a23afb377736?s=96&amp;amp;d=mm&amp;amp;r=g&quot; width=&quot;96&quot; height=&quot;96&quot; alt=&quot;Avatar&quot; class=&quot;avatar avatar-96 wp-user-avatar wp-user-avatar-96 photo avatar-default&quot;/&gt;&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Wed, 29 May 2019 17:20:03 +0000</pubDate>
<dc:creator>DanRosenwasser</dc:creator>
<og:type>article</og:type>
<og:title>Announcing TypeScript 3.5 | TypeScript</og:title>
<og:description>Today we’re happy to announce the availability of TypeScript 3.5! If you’re new to TypeScript, it’s a language that builds on JavaScript that adds optional static types. TypeScript code gets type-checked to avoid common mistakes like typos and accidental coercions, and then gets transformed by a program called the TypeScript compiler.</og:description>
<og:url>https://devblogs.microsoft.com/typescript/announcing-typescript-3-5/</og:url>
<og:image>https://devblogs.microsoft.com/typescript/wp-content/uploads/sites/11/2018/08/typescriptfeature.png</og:image>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://devblogs.microsoft.com/typescript/announcing-typescript-3-5/</dc:identifier>
</item>
<item>
<title>0x Launch Kit – Launch your own cryptocurrency exchange or marketplace</title>
<link>https://0x.org/launch-kit</link>
<guid isPermaLink="true" >https://0x.org/launch-kit</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://0x.org/launch-kit&quot;&gt;https://0x.org/launch-kit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20042355&quot;&gt;https://news.ycombinator.com/item?id=20042355&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 305&lt;/p&gt;
&lt;p&gt;# Comments: 124&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 16:41:05 +0000</pubDate>
<dc:creator>tomhschmidt</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://0x.org/launch-kit</dc:identifier>
</item>
<item>
<title>Prevented mortality from historical and projected nuclear power (2013)</title>
<link>https://pubs.giss.nasa.gov/abs/kh05000e.html</link>
<guid isPermaLink="true" >https://pubs.giss.nasa.gov/abs/kh05000e.html</guid>
<description>&lt;div id=&quot;cpad&quot; readability=&quot;36.511003521127&quot;&gt;
&lt;h2&gt;Publication Abstracts&lt;/h2&gt;
&lt;h3&gt;Kharecha and Hansen 2013&lt;/h3&gt;
&lt;p&gt;&lt;span class=&quot;gissauthor&quot;&gt;Kharecha, P.A.&lt;/span&gt;, and &lt;span class=&quot;gissauthor&quot;&gt;J.E. Hansen&lt;/span&gt;, 2013: Prevented mortality and greenhouse gas emissions from historical and projected nuclear power. &lt;cite&gt;Environ. Sci. Technol.&lt;/cite&gt;, &lt;strong&gt;47&lt;/strong&gt;, 4889-4895, doi:10.1021/es3051197.&lt;/p&gt;
&lt;p&gt;In the aftermath of the March 2011 accident at Japan's Fukushima Daiichi nuclear power plant, the future contribution of nuclear power to the global energy supply has become somewhat uncertain. Because nuclear power is an abundant, low-carbon source of base-load power, it could make a large contribution to mitigation of global climate change and air pollution. Using historical production data, we calculate that global nuclear power has prevented an average of 1.84 million air pollution-related deaths and 64 gigatonnes of CO&lt;sub&gt;2&lt;/sub&gt;-equivalent (GtCO&lt;sub&gt;2&lt;/sub&gt;-eq) greenhouse gas (GHG) emissions that would have resulted from fossil fuel burning. On the basis of global projection data that take into account the effects of the Fukushima accident, we find that nuclear power could additionally prevent an average of 420,000-7.04 million deaths and 80-240 GtCO&lt;sub&gt;2&lt;/sub&gt;-eq emissions due to fossil fuels by midcentury, depending on which fuel it replaces. By contrast, we assess that large-scale expansion of unconstrained natural gas use would not mitigate the climate problem and would cause far more deaths than expansion of nuclear power.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Export citation:&lt;/strong&gt; [ &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showBibtexCite(1)&quot; onkeypress=&quot;showBibtexCite(1)&quot;&gt;BibTeX&lt;/a&gt; ] [ &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;showRisCite(1)&quot; onkeypress=&quot;showRisCite(1)&quot;&gt;RIS&lt;/a&gt; ]&lt;/p&gt;
&lt;div id=&quot;bibtex&quot; class=&quot;bibtex&quot; readability=&quot;18.680134680135&quot;&gt;
&lt;h4&gt;BibTeX Citation&lt;/h4&gt;
&lt;pre&gt;
@article{kh05000e,
  author={Kharecha, P. A. and Hansen, J. E.},
  title={Prevented mortality and greenhouse gas emissions from historical and projected nuclear power},
  year={2013},
  journal={Environ. Sci. Technol.},
  volume={47},
  pages={4889--4895},
  doi={10.1021/es3051197},
}
&lt;/pre&gt;
&lt;p&gt;[ &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;hideBibtexCite(1)&quot; onkeypress=&quot;hideBibtexCite(1)&quot;&gt;Close&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;ris&quot; class=&quot;ris&quot; readability=&quot;10.802158273381&quot;&gt;
&lt;h4&gt;RIS Citation&lt;/h4&gt;
&lt;pre&gt;
TY  - JOUR
ID  - kh05000e
AU  - Kharecha, P. A.
AU  - Hansen, J. E.
PY  - 2013
TI  - Prevented mortality and greenhouse gas emissions from historical and projected nuclear power
JA  - Environ. Sci. Technol.
VL  - 47
SP  - 4889
EP  - 4895
DO  - 10.1021/es3051197
ER  -
&lt;/pre&gt;
&lt;hr/&gt;&lt;p&gt;[ &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;hideRisCite(1)&quot; onkeypress=&quot;hideRisCite(1)&quot;&gt;Close&lt;/a&gt; ]&lt;/p&gt;
&lt;/div&gt;

&lt;h4 class=&quot;goback&quot;&gt;&lt;a href=&quot;https://pubs.giss.nasa.gov/year/2013.html&quot;&gt;• Return to 2013 Publications&lt;/a&gt;&lt;/h4&gt;
&lt;h4 class=&quot;goback&quot;&gt;&lt;a href=&quot;https://pubs.giss.nasa.gov/&quot;&gt;• Return to Publications Homepage&lt;/a&gt;&lt;/h4&gt;

&lt;/div&gt;
</description>
<pubDate>Wed, 29 May 2019 16:26:50 +0000</pubDate>
<dc:creator>Melchizedek</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://pubs.giss.nasa.gov/abs/kh05000e.html</dc:identifier>
</item>
<item>
<title>Uber will start deactivating riders with low ratings</title>
<link>https://techcrunch.com/2019/05/29/uber-will-start-deactivating-riders-with-low-ratings/</link>
<guid isPermaLink="true" >https://techcrunch.com/2019/05/29/uber-will-start-deactivating-riders-with-low-ratings/</guid>
<description>&lt;p id=&quot;speakable-summary&quot;&gt;&lt;a class=&quot;crunchbase-link&quot; href=&quot;https://crunchbase.com/organization/uber&quot; target=&quot;_blank&quot; data-type=&quot;organization&quot; data-entity=&quot;uber&quot;&gt;Uber&lt;/a&gt; is now requiring the same good behavior from riders that it has long expected from its drivers. Uber riders have always had ratings, but they were never really at risk of deactivation — until now. Starting today, riders in the U.S. and Canada are now at risk of deactivation if their rating falls significantly below a city’s average.&lt;/p&gt;
&lt;p&gt;“Respect is a two-way street, and so is accountability,” Uber Head of Safety Brand and Initiatives Kate Parker wrote in a blog post. “Drivers have long been required to meet a minimum rating threshold which can vary city to city. While we expect only a small number of riders to ultimately be impacted by ratings-based deactivations, it’s the right thing to do.”&lt;/p&gt;
&lt;p&gt;For drivers, they face a risk of deactivation if they fall below 4.6, &lt;a href=&quot;https://www.businessinsider.com/leaked-charts-show-how-ubers-driver-rating-system-works-2015-2&quot;&gt;according to leaked documents from 2015&lt;/a&gt;. Though, average ratings are city-specific. Uber, however, is not disclosing the average rider rating, but says “any rider at risk of losing access will receive several notifications and opportunities to improve his or her rating,” an Uber spokesperson told TechCrunch.&lt;/p&gt;
&lt;p&gt;For example, Uber will offer tips to riders around encouraging polite behavior and keeping the car clean.&lt;/p&gt;
&lt;p&gt;“Ultimately, we expect this to impact only a very small number of riders,” the spokesperson said.&lt;/p&gt;
&lt;p&gt;This is part of Uber’s refreshed community guidelines, which will appear front and center on the Uber app and require confirmation of acknowledgment.&lt;/p&gt;
&lt;p&gt;“Holding riders accountable for their behavior on the Uber platform is an important safety measure to protect drivers as well as fellow riders who may book shared rides,” Moira Muntz, spokesperson for the &lt;a href=&quot;http://drivingguild.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; data-saferedirecturl=&quot;https://www.google.com/url?q=http://drivingguild.org&amp;amp;source=gmail&amp;amp;ust=1559243279458000&amp;amp;usg=AFQjCNEI_0tNeym0df5WEKF5SIs0zpuBxQ&quot;&gt;Independent Drivers Guild,&lt;/a&gt; said in a statement. “While most riders are respectful, banning riders who threaten driver safety, spew racist rants, and disrespect or damage our vehicles is the right thing to do. For too long there has been one-sided accountability and this is a positive step toward correcting that.”&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;vertical alignnone size-large wp-image-1833400&quot; src=&quot;https://techcrunch.com/wp-content/uploads/2019/05/CG-In-App.png?w=509&quot; alt=&quot;&quot; width=&quot;509&quot; height=&quot;680&quot; srcset=&quot;https://techcrunch.com/wp-content/uploads/2019/05/CG-In-App.png 1726w, https://techcrunch.com/wp-content/uploads/2019/05/CG-In-App.png?resize=112,150 112w, https://techcrunch.com/wp-content/uploads/2019/05/CG-In-App.png?resize=224,300 224w, https://techcrunch.com/wp-content/uploads/2019/05/CG-In-App.png?resize=768,1027 768w, https://techcrunch.com/wp-content/uploads/2019/05/CG-In-App.png?resize=509,680 509w, https://techcrunch.com/wp-content/uploads/2019/05/CG-In-App.png?resize=37,50 37w&quot; sizes=&quot;(max-width: 509px) 100vw, 509px&quot;/&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 15:30:51 +0000</pubDate>
<dc:creator>hbcondo714</dc:creator>
<og:title>Uber will start deactivating riders with low ratings – TechCrunch</og:title>
<og:description>Uber is now requiring the same good behavior from riders that it has long expected from its drivers. Uber riders have always had ratings, but they were never really at risk of deactivation — until now. Starting today, riders in the U.S. and Canada are now at risk of deactivation if their rati…</og:description>
<og:image>https://techcrunch.com/wp-content/uploads/2019/05/GettyImages-843316824.jpg?w=600</og:image>
<og:url>http://social.techcrunch.com/2019/05/29/uber-will-start-deactivating-riders-with-low-ratings/</og:url>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://techcrunch.com/2019/05/29/uber-will-start-deactivating-riders-with-low-ratings/</dc:identifier>
</item>
<item>
<title>ProtonMail Voluntarily Offers Assistance for Real-Time Surveillance?</title>
<link>https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/</link>
<guid isPermaLink="true" >https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003.jpg&quot;&gt;&lt;img src=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003-600x482.jpg&quot; alt=&quot;Photo: Locked padlock with key in the lock&quot; width=&quot;600&quot; height=&quot;482&quot; class=&quot;alignright size-medium wp-image-32207&quot; srcset=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003-600x482.jpg 600w, https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003-200x161.jpg 200w, https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003-768x617.jpg 768w, https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003-1200x964.jpg 1200w, https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003-150x121.jpg 150w, https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003-1320x1061.jpg 1320w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Email service provider ProtonMail, based in Switzerland, offers assistance for real-time surveillance: Voluntarily!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This insight goes back to public prosecutor &lt;a href=&quot;%20https://staatsanwaltschaften.zh.ch/internet/justiz_inneres/staatsanwaltschaften/de/org_ueber_uns/org_sv_erw/bes_sta/sta_i/abteilung_b1.html&quot;&gt;Stephan Walder&lt;/a&gt;, who heads the Cybercrime Competence Center in the Canton of Zurich in Switzerland:&lt;/p&gt;
&lt;p&gt;On 10 May 2019, Walder gave a presentation on the &lt;a href=&quot;https://twitter.com/martinsteiger/status/1126813262929190917&quot;&gt;possibilities and limits of criminal prosecution&lt;/a&gt; at a continuing education event on the digitization of criminal law and criminal procedure. Walder incidentally &lt;a href=&quot;%20https://twitter.com/martinsteiger/status/1126818939105886208&quot;&gt;mentioned&lt;/a&gt; as a positive example that ProtonMail &lt;em&gt;voluntarily&lt;/em&gt; offers assistance for real-time surveillance. Public prosecutor Walder had expected that he would have to obtain a federal court decision.&lt;/p&gt;

&lt;div class=&quot;infobox_top&quot; readability=&quot;9.344262295082&quot;&gt;&lt;strong id=&quot;note&quot;&gt;Note:&lt;/strong&gt; Public prosecutor Walder contacted me, saying he had been misquoted. See the &lt;a href=&quot;https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/#addendum&quot;&gt;addendum&lt;/a&gt; below for further information.&lt;/div&gt;
&lt;p&gt;On Twitter, ProtonMail repeatedly avoided to address the question why real-time surveillance was carried out &lt;em&gt;voluntarily&lt;/em&gt;. Instead, ProtonMail &lt;a href=&quot;%20https://twitter.com/ProtonMail/status/1128370563926429696&quot;&gt;stressed&lt;/a&gt; that the contents of the communication could not be monitored due to end-to-end encryption.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001.jpg&quot;&gt;&lt;img src=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001-1200x671.jpg&quot; alt=&quot;Screenshot: Website of ProtonMail (&amp;quot;Secure Email Based in Switzerland&amp;quot;)&quot; width=&quot;1200&quot; height=&quot;671&quot; class=&quot;alignnone size-large wp-image-32370&quot; srcset=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001-1200x671.jpg 1200w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001-200x112.jpg 200w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001-600x335.jpg 600w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001-768x429.jpg 768w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001-150x84.jpg 150w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_001-1320x738.jpg 1320w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;switzerland&quot;&gt;Advertising by ProtonMail: Trust due to Domicile in Switzerland?&lt;/h2&gt;
&lt;p&gt;ProtonMail aggressively promotes data protection and encryption. The aim is to inspire confidence through the facts that ProtonMail was founded by CERN employees in the Canton of Geneva and that ProtonMail has its domicile in Switzerland.&lt;/p&gt;
&lt;p&gt;ProtonMail claims that &lt;em&gt;„all user data is protected by strict Swiss privacy laws“&lt;/em&gt;. ProtonMail further claims that it is exempt from the &lt;a href=&quot;%20https://www.admin.ch/opc/en/classified-compilation/20122728/index.html&quot;&gt;Swiss Federal Act on the Surveillance of Post and Telecommunications&lt;/a&gt; (SPTA, German: Bundesgesetz betreffend die Überwachung des Post- und Fernmeldeverkehrs, BÜPF) and the Ordinance on the Surveillance of Post and Telecommunications (SPTO, German: &lt;a href=&quot;https://www.admin.ch/opc/de/classified-compilation/20172173/index.html&quot;&gt;Verordnung über die Überwachung des Post- und Fernmeldeverkehrs&lt;/a&gt;, VÜPF).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Both claims are wrong:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The Swiss &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/19920153/index.html&quot;&gt;Federal Act on Data Protection&lt;/a&gt; (FADP, German: Bundesgesetz über den Datenschutz, DSG) is not applicable to pending criminal proceedings and thus to ongoing surveillance measures &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/19920153/index.html#a2&quot;&gt;(art. 2 para. 2 lit. c FADP)&lt;/a&gt;. In addition, the current data protection laws in Switzerland are not strict but largely a paper tiger and lag behind the &lt;a href=&quot;%20https://en.wikipedia.org/wiki/General_Data_Protection_Regulation&quot;&gt;General Data Protection Regulation&lt;/a&gt; (GDPR) of the European Union (EU) in almost every respect. The current revision of the GDPR is not making progress.&lt;/li&gt;
&lt;li&gt;The SPTA explicitly applies to providers of derived communication services (PDCS, German: Anbieterinnen abgeleiteter Kommunikationsdienste, AAKD), i.e., to &lt;em&gt;„providers of services which are based on telecommunications services and enable one-way or multipath communication“&lt;/em&gt; &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/20122728/index.html#a2&quot;&gt;(art. 2 lit. c SPTA)&lt;/a&gt;. The SPTA was revised on 1 March 2018, in particular with the aim of being able to monitor Internet services such as providers of email, instant messaging and VPN services. The SPTA does not provide for Internet services to be excluded.&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;spta&quot;&gt;SPTA: Surveillance Obligations for ProtonMail&lt;/h2&gt;
&lt;h3 id=&quot;pdcs&quot;&gt;ProtonMail as a Provider of Derived Communication Services&lt;/h3&gt;
&lt;p&gt;ProtonMail is a provider of derived communication services (PDCS). ProtonMail must therefore &lt;em&gt;„tolerate surveillance carried out by the Service or by persons it designates of the data that the person under surveillance transmits or stores using derived communications services“&lt;/em&gt;. For this purpose, ProtonMail must without delay &lt;em&gt;„grant access to [its] facilities“&lt;/em&gt; and &lt;em&gt;„provide the information required for the surveillance“&lt;/em&gt; &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/20122728/index.html#a27&quot;&gt;(art. 27 para. 1 SPTA)&lt;/a&gt;. In addition, ProtonMail must &lt;em&gt;„supply the secondary data of telecommunications available to them relating to the person under surveillance“&lt;/em&gt; (art. 27 para. 2 SPTA).&lt;/p&gt;
&lt;div class=&quot;herotext width-half align-right&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;text&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;ProtonMail has no obligation for real-time surveillance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;ProtonMail has to tolerate surveillance measures and has to provide information as well as access for this purpose. Metadata or secondary data that is available must be provided. On the other hand, ProtonMail, as a provider of derived communication services, has in principle no obligation for real-time surveillance. &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/20122728/index.html#a26&quot;&gt;Art. 26 para. 4 SPTA&lt;/a&gt; provides such obligation only for providers of telecommunications services such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Swisscom&quot;&gt;Swisscom&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/UPC_Switzerland&quot;&gt;UPC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Providers of derived communications services which &lt;em&gt;„provide services of major economic importance or to a large number of users“&lt;/em&gt;, however, may be subject in whole or in part to the surveillance obligations for providers of telecommunications services &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/20122728/index.html#a27&quot;&gt;(art. 27 para. 3 SPTA)&lt;/a&gt;. The Swiss Federal &lt;a href=&quot;https://www.li.admin.ch/en&quot;&gt;Post and Telecommunications Surveillance Service&lt;/a&gt; (PTSS) decrees such more extensive surveillance obligations, in particular if surveillance orders have been assigned to 10 different targets in the last 12 months.&lt;/p&gt;
&lt;p&gt;There is currently no evidence that ProtonMail is a provider of derived communications services with more extensive surveillance obligations. ProtonMail would therefore not have to &lt;em&gt;voluntarily&lt;/em&gt; provide assistance for real-time surveillance.&lt;/p&gt;
&lt;h3 id=&quot;tsp&quot;&gt;ProtonMail as a Provider of Telecommunications Services?&lt;/h3&gt;
&lt;p&gt;ProtonMail &lt;a href=&quot;https://twitter.com/protonmail/status/1082365555087233024&quot;&gt;argues&lt;/a&gt; that it is not a provider of derived communication services, but a telecommunications service provider (TSP) with reduced surveillance obligations &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/20122728/index.html#a26&quot;&gt;(art. 26 para. 6 SPTA)&lt;/a&gt;. Telecommunications service providers can request reduced surveillance obligations from the PTSS if their annual turnover in Switzerland is less than CHF 100 million and if in the last 12 months less than 10 surveillance orders have been assigned to different targets.&lt;/p&gt;
&lt;div class=&quot;herotext width-half align-right&quot; readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;text&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;„The reinterpretation by the PTSS of the concept of telecommunications services &amp;amp;lbrack;…&amp;amp;rbrack; is &amp;amp;lbrack;…&amp;amp;rbrack; obviously unlawful.“&lt;/p&gt;
&lt;footer class=&quot;person&quot;&gt;Prof. Dr. Simon Schlauri&lt;/footer&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;According to the Swiss Federal Council &lt;a href=&quot;https://www.admin.ch/opc/de/federal-gazette/2013/2683.pdf&quot;&gt;dispatch on the revised SPTA&lt;/a&gt;, it is clear that email service providers are considered PDCSs. However, the PTSS uses a reinterpretation of the definition of &lt;em&gt;„telecommunications service provider“&lt;/em&gt; as shown by its &lt;a href=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/20190416_ptss_information-sheet_tsp-pdcs.pdf&quot;&gt;information sheet „Distinction between Telecommunications Service Providers (TSP) and Providers of Derived Communications Services (PDCS)“&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this information sheet, the PTSS claims that email is an over-the-top (OTT) service provided by telecommunications service providers. Simon Schlauri, a fellow Swiss lawyer specialised in telecommunications law and &lt;a href=&quot;https://www.ius.uzh.ch/de/staff/adjunct-professors/tit-schlauri/person.html&quot;&gt;professor at the University of Zurich&lt;/a&gt;, finds &lt;a href=&quot;https://www.digitale-gesellschaft.ch/2018/10/09/rechtswidrige-uminterpretation-des-begriffs-der-fernmeldedienste-definition-des-fernmeldedienstes-gemaess-fmg-und-buepf/&quot;&gt;clear words&lt;/a&gt; for this reinterpretation (with &lt;strong&gt;emphasis&lt;/strong&gt;):&lt;/p&gt;
&lt;blockquote readability=&quot;13&quot;&gt;
&lt;p&gt;„This new interpretation clearly contradicts the […] intentions of the legislator in issuing the revised SPTA. To subordinate OTT services to the regime for normal telecommunications services would mean to throw over the clear order of competence of the SPTA already with the introduction of the revised law.&lt;/p&gt;
&lt;p&gt;Such a reinterpretation of terms would also contradict the decades-old practice of the Swiss Federal Supreme Court to give considerable weight to the historical interpretation at least in the first period after the introduction of a new law. […] &lt;strong&gt;The reinterpretation by the PTSS of the concept of telecommunications services in the SPTA and the associated arbitrary extension of the obligations of OTT service providers is thus obviously unlawful.“&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Swiss Federal Council supports – unsurprisingly – this reinterpretation by the PTSS, as can be seen from its statement on National Councilor Beat Flach’s interpellation &lt;a href=&quot;https://www.parlament.ch/de/ratsbetrieb/suche-curia-vista/geschaeft?AffairId=20193267&quot;&gt;19.3267&lt;/a&gt;. The statement reads as if it had been written by the PTSS itself. ProtonMail is not explicitly mentioned in the interpellation.&lt;/p&gt;
&lt;p&gt;Even as a telecommunications service provider with reduced surveillance obligations, ProtonMail would not have to &lt;em&gt;voluntarily&lt;/em&gt; offer assistance for real-time monitoring. At the same time, however, telecommunications service providers must identify their users (identification obligation, &lt;a href=&quot;%20https://www.admin.ch/opc/en/classified-compilation/20122728/index.html#a22&quot;&gt;art. 22 para. 2 SPTA&lt;/a&gt; in conjunction with &lt;a href=&quot;%20https://www.admin.ch/opc/de/classified-compilation/20172173/index.html#a19&quot;&gt;art. 19 para. 1 SPTO&lt;/a&gt;). In addition, there would always be a risk that ProtonMail could be upgraded to a telecommunications service provider with all monitoring obligations, including &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_retention#Switzerland&quot;&gt;data retention&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002.jpg&quot;&gt;&lt;img src=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002-1200x598.jpg&quot; alt=&quot;Screenshot: Website of ProtonMail («Swiss Privacy»)&quot; width=&quot;1200&quot; height=&quot;598&quot; class=&quot;alignnone size-large wp-image-32371&quot; srcset=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002-1200x598.jpg 1200w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002-200x100.jpg 200w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002-600x299.jpg 600w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002-768x383.jpg 768w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002-150x75.jpg 150w, https://steigerlegal.ch/wp-content/uploads/2019/05/20190528_protonmail-com_002-1320x658.jpg 1320w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;transparency&quot;&gt;Real-Time Surveillance: Transparency by ProtonMail&lt;/h2&gt;
&lt;p&gt;ProtonMail falsely claims to be exempt from the SPTA, wrongly advertises with &lt;em&gt;„strict Swiss privacy laws“&lt;/em&gt; and &lt;a href=&quot;https://protonmail.com/blog/swiss-surveillance-law/&quot;&gt;trivializes&lt;/a&gt; the surveillance state in Switzerland. However, ProtonMail is one of the few &lt;a href=&quot;https://steigerlegal.ch/transparenzberichte-schweiz/&quot;&gt;Internet companies in Switzerland with a transparency report&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;herotext width-half align-right&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;text&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;ProtonMail trivializes the surveillance state in Switzerland.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In its &lt;a href=&quot;https://protonmail.com/blog/transparency-report/&quot;&gt;transparency report&lt;/a&gt;, ProtonMail explicitly mentions the possibility of real-time surveillance &lt;em&gt;(„ProtonMail may also be obligated to monitor the IP addresses which are being used to access the ProtonMail accounts which are engaged in criminal activities“)&lt;/em&gt;. ProtonMail even mentions a current case of real-time surveillance:&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;„In April 2019, at the request of the Swiss judiciary in a case of clear criminal conduct, we enabled IP logging against a specific user account which is engaged in illegal activities which contravene Swiss law. Pursuant to Swiss law, the user in question will also be notified and afforded the opportunity to defend against this in court before the data can be used in criminal proceedings.“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By writing of a &lt;em&gt;„case of clear criminal conduct“&lt;/em&gt; and of &lt;em&gt;„illegal activities which contravene Swiss law“&lt;/em&gt;, ProtonMail violates the &lt;a href=&quot;https://en.wikipedia.org/wiki/Presumption_of_innocence&quot;&gt;presumption of innocence&lt;/a&gt; against the monitored suspects.&lt;/p&gt;
&lt;p&gt;Such suspects are of course not informed by ProtonMail about ongoing real-time surveillance measures. They will only subsequently receive notification from the responsible public prosecutor’s office &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/20052319/index.html#a279&quot;&gt;(art. 279 para. 1 Swiss Federal Criminal Procedure Code, CrimPC)&lt;/a&gt;, unless an exception applies (art. 279 para. 2 CrimPC).&lt;/p&gt;

&lt;p&gt;ProtonMail claims that the contents of emails are protected by end-to-end encryption. At the same time, ProtonMail &lt;a href=&quot;https://twitter.com/ProtonMail/status/1128370563926429696&quot;&gt;confirms&lt;/a&gt; that at least metadata or marginal data are delivered &lt;em&gt;(„Metadata can always be handed over in a criminal investigation“)&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;herotext width-half align-right&quot; readability=&quot;31&quot;&gt;
&lt;div class=&quot;text&quot; readability=&quot;32&quot;&gt;
&lt;p&gt;„We kill people based on metadata.“&lt;/p&gt;
&lt;footer class=&quot;person&quot;&gt;Michael Hayden, NSA&lt;/footer&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Users may believe ProtonMail that the contents of emails cannot be monitored at the present time. ProtonMail, on the other hand, &lt;em&gt;voluntarily&lt;/em&gt; offers real-time surveillance of metadata such as IP addresses. Such metadata also includes the &lt;a href=&quot;https://protonmail.com/support/knowledge-base/what-is-encrypted/&quot;&gt;sender and recipient&lt;/a&gt; as well as the &lt;a href=&quot;https://protonmail.com/support/knowledge-base/does-protonmail-encrypt-email-subjects/&quot;&gt;subject&lt;/a&gt; of individual emails. Other metadata are the date and time of an email and its length. It is possible to monitor who sent an email to whom, when, with which subject and with which size.&lt;/p&gt;
&lt;p&gt;Anyone who believes ProtonMail and consoles himself that the email contents are encrypted underestimates the significance of metadata. In the &lt;a href=&quot;https://www.nybooks.com/daily/2014/05/10/we-kill-people-based-metadata/&quot;&gt;words&lt;/a&gt; of the American National Security Agency (NSA):&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;„Metadata absolutely tells you everything about somebody’s life. If you have enough metadata, you don’t really need content. […] We kill people based on metadata.“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The importance of metadata was demonstrated by the revelations of whistleblower &lt;a href=&quot;https://en.wikipedia.org/wiki/Edward_Snowden&quot;&gt;Edward Snowden&lt;/a&gt;, as journalist Glen Greenwald &lt;a href=&quot;https://kritisch-lesen.de/rezension/uberwachte-kommunikation-und-die-folgen-fur-die-freiheit&quot;&gt;wrote&lt;/a&gt; in his book on global surveillance:&lt;/p&gt;
&lt;blockquote readability=&quot;12&quot;&gt;
&lt;p&gt;„[…] As in Europe, US citizens should be reassured with the statement that the collection of metadata ‚does not constitute surveillance‘ since ’no contents of communication are captured‘ […]. For Greenwald, this statement is ‚dishonest‘ […]. Because: ‚It obscures the fact that especially the monitoring of metadata represents at least as strong – and often even stronger – an invasion of privacy as the interception of content‘ […]. This enables the government to provide citizens with an amazingly comprehensive picture of their way of life, their connections and contacts, their activities and some of the most intimate and private information.“&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Surveillance State Switzerland: How much Trust does ProtonMail deserve?&lt;/h2&gt;
&lt;p&gt;If you believe ProtonMail’s advertising, the email service is not affected by the surveillance state in Switzerland and benefits from &lt;em&gt;„strict Swiss privacy laws.“&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;herotext width-half align-right&quot; readability=&quot;31.5&quot;&gt;
&lt;div class=&quot;text&quot; readability=&quot;33&quot;&gt;
&lt;p&gt;ProtonMail has its domicile in Switzerland and therefore in a surveillance state that is being expanded step by step.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;ProtonMail in particular gives the impression of being a suitable service for users looking for a trustworthy email service provider with data protection and encryption. Even the cliché of the &lt;a href=&quot;https://protonmail.com/why-protonmail&quot;&gt;data bunker in the Alps&lt;/a&gt; is not omitted by ProtonMail &lt;em&gt;(„ProtonMail is hosted in a former military command center deep inside the Swiss alps.“)&lt;/em&gt; and, of course, the neutrality of Switzerland is mentioned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The reality looks different. ProtonMail has its domicile in Switzerland and therefore in a surveillance state that is being expanded step by step:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;The revised Swiss Federal Act on the Surveillance of Post and Telecommunications (SPTA) is directed in particular against Internet services such as ProtonMail.&lt;/li&gt;
&lt;li&gt;With the new Swiss Federal Intelligence Service Act (German: &lt;a href=&quot;https://www.admin.ch/opc/de/classified-compilation/20120872/index.html&quot;&gt;Nachrichtendienstgesetz&lt;/a&gt;, NDG), the use of ProtonMail is subject to mass surveillance by means of &lt;a href=&quot;https://www.digitale-gesellschaft.ch/uploads/2016/08/Faktenblatt_Kabelaufklaerung.pdf&quot;&gt;cable surveillance&lt;/a&gt; (German: Kabelaufklärung) and many other surveillance measures.&lt;/li&gt;
&lt;li&gt;Data protection laws in Switzerland are a paper tiger or in principle not applicable to surveillance measures by secret services, police authorities and public prosecutors.&lt;/li&gt;
&lt;li&gt;Surveillance measures in Switzerland are approved behind forever closed doors by Compulsory Measures Courts (German: &lt;a href=&quot;https://steigerlegal.ch/2017/11/21/justiz-oeffentlichkeit-tagung-2018/#recht&quot;&gt;Zwangsmassnahmengerichte&lt;/a&gt;, ZMG) and there is no effective supervision of the security authorities.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;ProtonMail is – as far as is known – not yet subject to the more extensive surveillance obligations according to the SPTA. Nevertheless, ProtonMail &lt;em&gt;voluntarily&lt;/em&gt; offers assistance for real-time surveillance pursuant to &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/20122728/index.html#a26&quot;&gt;art. 26 para. 4 SPTA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Email contents may not affected by real-time surveillance, but metadata is just as meaningful or even more meaningful. And who guarantees that ProtonMail will not sooner or later enable that email contents can be monitored too, for example when encrypting emails for &lt;a href=&quot;https://protonmail.com/blog/zero-access-encryption/&quot;&gt;„zero-access encryption“&lt;/a&gt;, where ProtonMail necessarily receives all emails in plain text?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Every user of ProtonMail (or ProtonVPN) must decide for himself whether the email service is trustworthy. The difference between advertising and reality at least speaks against too much trust for ProtonMail.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;strong&gt;Image:&lt;/strong&gt; &lt;a href=&quot;https://pixabay.com/photos/padlock-lock-chain-key-security-597495/&quot;&gt;Pixabay / stevepb&lt;/a&gt;, &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;public domain-like&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;addendum&quot;&gt;Addendum&lt;/h2&gt;
&lt;p&gt;Public prosecutor Walder of the Competence Center Cybercrime contacted me, saying he had been misquoted. He claims that had not divulged at the above-mentioned event that ProtonMail &lt;em&gt;voluntarily&lt;/em&gt; releases real-time data. He had merely described ProtonMail as a potential provider of derived communication services (PDCS).&lt;/p&gt;
&lt;p&gt;I was live-tweeting the event, including the &lt;a href=&quot;https://twitter.com/martinsteiger/status/1126813262929190917&quot;&gt;interesting presentation by public prosecutor Walder&lt;/a&gt;. The remark that ProtonMail was a (potential) PDCS would have been too trivial to be live-tweeted. The insight on the other hand that ProtonMail &lt;em&gt;voluntarily&lt;/em&gt; offers assistance for real-time surveillance, was spectacular and I therefore &lt;a href=&quot;https://twitter.com/martinsteiger/status/1126818939105886208&quot;&gt;live-tweeted&lt;/a&gt; the statement. In its transparency report, ProtonMail – &lt;a href=&quot;https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/#transparency&quot;&gt;as mentioned above&lt;/a&gt; – itself refers to at least one case of real-time surveillance.&lt;/p&gt;
&lt;hr/&gt;&lt;h2 id=&quot;addendum2&quot;&gt;Addendum 2&lt;/h2&gt;
&lt;p&gt;Tonight, on 29 May 2019, ProtonMail responded to this article with a blog post entitled &lt;a href=&quot;https://protonmail.com/blog/martin-steiger-false-statements/&quot;&gt;&lt;em&gt;„Response to false statements on surveillance made by Martin Steiger“&lt;/em&gt;&lt;/a&gt;. (This article was published on 23 May 2019 and not &lt;em&gt;„earlier today“&lt;/em&gt; as claimed by ProtonMail.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ProtonMail claims that this article is &lt;em&gt;„factually incorrect“&lt;/em&gt; and states first and foremost that it does not &lt;em&gt;voluntarily&lt;/em&gt; offer assistance for real-time surveillance. Apart from that, ProtonMail does not respond to the many points raised in this article.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ProtonMail essentially refers to my &lt;a href=&quot;https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/#addendum&quot;&gt;addendum&lt;/a&gt;, where I point out that the public prosecutor in question contacted me, saying he had been misquoted. ProtonMail of course „forgets“ to quote my full addendum and shows an incomplete screenshot of my addendum. ProtonMail quotes only the part with the public prosecutor’s claim and not my explanation why I am confident that the public prosecutor was not misquoted. ProtonMail also claims that the addendum is &lt;em&gt;„hidden at the bottom of Mr. Steiger’s article“&lt;/em&gt;, although it is linked &lt;a href=&quot;https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/#note&quot;&gt;right at the beginning of this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001.jpg&quot;&gt;&lt;img src=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001-1200x561.jpg&quot; alt=&quot;Screenshot: ProtonMail Blog&quot; width=&quot;1200&quot; height=&quot;561&quot; class=&quot;alignnone size-large wp-image-32413&quot; srcset=&quot;https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001-1200x561.jpg 1200w, https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001-200x94.jpg 200w, https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001-600x281.jpg 600w, https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001-768x359.jpg 768w, https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001-150x70.jpg 150w, https://steigerlegal.ch/wp-content/uploads/2019/05/protonmail_addendum-incomplete_001-1320x617.jpg 1320w&quot; sizes=&quot;(max-width: 1200px) 100vw, 1200px&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In a direct email to me, ProtonMail’s legal department confirmed that real-time monitoring could be carried out. The legal counsel of ProtonMail now argues that ProtonMail is after all a &lt;a href=&quot;https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/#pdcs&quot;&gt;provider of derived communication services&lt;/a&gt; and that having to tolerate surveillance carried out by the Swiss Federal Post and Telecommunications Surveillance Service (PTSS) according to Art. 27 para. 1 SPTA is equal to an obligation for real-time surveillance. In addition, ProtonMail threatens to take legal action for defamation pursuant to &lt;a href=&quot;https://www.admin.ch/opc/en/classified-compilation/19370083/index.html#a174&quot;&gt;art. 174 of the Swiss Criminal Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/#spta&quot;&gt;As mentioned above&lt;/a&gt;, the SPTA provides neither for providers of derived communications services without more extensive surveillance obligations nor for telecommunications service providers with reduced surveillance obligations an obligation for real-time surveillance. &lt;a href=&quot;https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/#tsp&quot;&gt;As also mentioned above&lt;/a&gt;, ProtonMail used to claim to be a telecommunications service provider with reduced surveillance obligations. In either case, there is no obligation for real-time surveillance, i.e., any real-time surveillance is performed &lt;em&gt;voluntarily&lt;/em&gt; by ProtonMail.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ProtonMail once again argues contradictorily and inconsistently. Every user of ProtonMail must still decide for himself whether the email service is trustworthy.&lt;/strong&gt;&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 15:04:48 +0000</pubDate>
<dc:creator>sebiw</dc:creator>
<og:type>article</og:type>
<og:title>ProtonMail voluntarily offers Assistance for Real-Time Surveillance | Steiger Legal</og:title>
<og:description>The following text is an inofficial English translation of the article ProtonMail bietet freiwillig Hand für Echtzeit-Überwachungen as published on 23 May 2019 in German. The translation was arranged for …</og:description>
<og:url>https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/</og:url>
<og:image>https://steigerlegal.ch/wp-content/uploads/2019/05/vorhaengeschloss-mit-schluessel_003_en-uk.jpg</og:image>
<dc:language>de-DE</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://steigerlegal.ch/2019/05/23/protonmail-real-time-surveillance/</dc:identifier>
</item>
<item>
<title>Falsehoods Programmers Believe About Search</title>
<link>https://opensourceconnections.com/blog/2019/05/29/falsehoods-programmers-believe-about-search/</link>
<guid isPermaLink="true" >https://opensourceconnections.com/blog/2019/05/29/falsehoods-programmers-believe-about-search/</guid>
<description>&lt;p&gt;As much as anyone I’m a fan of resurrecting trends and memes and pretending it’s cool. In that vein dear friends, I’ve exhumed the venerable “Falsehoods Programmers Believe” party from 4 years ago to bring you one about, no less, Search.&lt;/p&gt;
&lt;p&gt;Search is a deceptively complex field, where competence is hard-won through training, practice, and experience. The list stands at a total of 105 falsehoods. I couldn’t mash up the ole 99-problems meme with this to cull 6 unworthy items, because they are all worthy. I will leave you with that brief introduction and, of course, the list:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Search engines work like databases&lt;/li&gt;
&lt;li&gt;Search can be considered an additional feature just like any other&lt;/li&gt;
&lt;li&gt;Search can be added as a well performing feature to your existing product quickly&lt;/li&gt;
&lt;li&gt;Search can be added as a well performing feature to your existing product with reasonable effort&lt;/li&gt;
&lt;li&gt;Choosing the correct search engine is easy and you will always be happy with your decision&lt;/li&gt;
&lt;li&gt;Once setup, search will work the same way forever&lt;/li&gt;
&lt;li&gt;Once setup, search will work the same way for a while&lt;/li&gt;
&lt;li&gt;Once setup, search will work the same way for the next week&lt;/li&gt;
&lt;li&gt;The default search engine settings will deliver a good search experience&lt;/li&gt;
&lt;li&gt;Customers know what they are looking for&lt;/li&gt;
&lt;li&gt;Customers who know what they are looking for will search for it in the way you expect&lt;/li&gt;
&lt;li&gt;Customers who don’t know what they are looking for will search accordingly&lt;/li&gt;
&lt;li&gt;A customer using the same query twice expects the same results for both searches&lt;/li&gt;
&lt;li&gt;Customers only search for a few terms&lt;/li&gt;
&lt;li&gt;Customers only search for less than some set number of terms&lt;/li&gt;
&lt;li&gt;Customers never copy and paste a whole document into a search bar&lt;/li&gt;
&lt;li&gt;Customers balance quotes and parenthesis&lt;/li&gt;
&lt;li&gt;Customers that don’t balance quotes or parenthesis don’t expect phrasing or grouping&lt;/li&gt;
&lt;li&gt;You can pass the customer query directly into your search engine&lt;/li&gt;
&lt;li&gt;You can write a query parser that will always parse the query successfully&lt;/li&gt;
&lt;li&gt;You will never have to return a query parse error to the customer&lt;/li&gt;
&lt;li&gt;When you find the boolean operator ‘OR’, you always know it doesn’t mean Oregon&lt;/li&gt;
&lt;li&gt;Customers notice their own misspellings&lt;/li&gt;
&lt;li&gt;Customers don’t expect your search to correct misspellings&lt;/li&gt;
&lt;li&gt;It is possible to create a list of all misspellings&lt;/li&gt;
&lt;li&gt;It is possible to create an algorithm to handle all misspellings&lt;/li&gt;
&lt;li&gt;A misspelled word is never the same as another correctly spelled word&lt;/li&gt;
&lt;li&gt;All customers expect spelling correction to work the same&lt;/li&gt;
&lt;li&gt;All customers want their misspellings corrected&lt;/li&gt;
&lt;li&gt;A search should always return results, no matter how absurd&lt;/li&gt;
&lt;li&gt;If you don’t have any results to show, customers won’t mind&lt;/li&gt;
&lt;li&gt;When the perfect results are shown to the customer, they will notice it&lt;/li&gt;
&lt;li&gt;You don’t need to monitor search queries, results, and clicks&lt;/li&gt;
&lt;li&gt;Customers won’t get nervous that you are logging their search activity&lt;/li&gt;
&lt;li&gt;Search queries are not affected by GDPR&lt;/li&gt;
&lt;li&gt;Looking at the data, it is always possible to tell whether a customer found what they were looking for&lt;/li&gt;
&lt;li&gt;Customers will click on what they are looking for when they’ve found it&lt;/li&gt;
&lt;li&gt;You can build a search that works like Google&lt;/li&gt;
&lt;li&gt;You can build a search that works like Google sometimes&lt;/li&gt;
&lt;li&gt;You should use Google as a target for your search&lt;/li&gt;
&lt;li&gt;Customers don’t mind if your search doesn’t work like Google&lt;/li&gt;
&lt;li&gt;Customers don’t expect your search to work like Google&lt;/li&gt;
&lt;li&gt;Customers won’t compare you to Google&lt;/li&gt;
&lt;li&gt;A bad search, no matter how minor nor how rare, will never reflect poorly on your product&lt;/li&gt;
&lt;li&gt;Since Google doesn’t use facets, customers don’t need them&lt;/li&gt;
&lt;li&gt;Facet hit counts are always correct&lt;/li&gt;
&lt;li&gt;Facets have no impact on performance&lt;/li&gt;
&lt;li&gt;You can just cache queries to get performant facets&lt;/li&gt;
&lt;li&gt;Personalized search is easy&lt;/li&gt;
&lt;li&gt;Learning to rank is easy and just requires a plugin&lt;/li&gt;
&lt;li&gt;You have enough data for learning-to-rank&lt;/li&gt;
&lt;li&gt;Over time, you can curate enough data for learning-to-rank&lt;/li&gt;
&lt;li&gt;You don’t need to spend lots of time formatting content for it to work well in your search engine&lt;/li&gt;
&lt;li&gt;Text extraction engines will always produce text that doesn’t need to be post-processed&lt;/li&gt;
&lt;li&gt;All your markup will be stripped as you expect it to be&lt;/li&gt;
&lt;li&gt;Content is well formed&lt;/li&gt;
&lt;li&gt;Content is mostly well formed&lt;/li&gt;
&lt;li&gt;Content is predictably well formed&lt;/li&gt;
&lt;li&gt;Content, sourced from a database and templates, are formed the same&lt;/li&gt;
&lt;li&gt;Content teams treat search as their top priority&lt;/li&gt;
&lt;li&gt;Manually changing content to improve search is easy&lt;/li&gt;
&lt;li&gt;Improving content can be automated with reasonable effort&lt;/li&gt;
&lt;li&gt;Queries for ‘C programming’ and ‘C++ programming’ will produce different results&lt;/li&gt;
&lt;li&gt;Queries for ‘401k’ and ‘401(k)’ will produce the same results&lt;/li&gt;
&lt;li&gt;Tokenization as it works out of the box is right for your content and queries&lt;/li&gt;
&lt;li&gt;Tokenization can be changed to meet the needs of your entire corpus and all queries&lt;/li&gt;
&lt;li&gt;Tokenization can be changed to meet the needs of most of your corpus and most queries&lt;/li&gt;
&lt;li&gt;Tokenization can be conditional&lt;/li&gt;
&lt;li&gt;You should roll your own tokenizer&lt;/li&gt;
&lt;li&gt;You will never have a debate about tokenization&lt;/li&gt;
&lt;li&gt;Regular Expressions for tokenization is a good idea&lt;/li&gt;
&lt;li&gt;Regular Expressions have minimal performance impact&lt;/li&gt;
&lt;li&gt;You will never have a debate about regular expressions&lt;/li&gt;
&lt;li&gt;You should remove stop words&lt;/li&gt;
&lt;li&gt;You should not remove stop words&lt;/li&gt;
&lt;li&gt;You know what the list of stop words should be&lt;/li&gt;
&lt;li&gt;Stop words will never change&lt;/li&gt;
&lt;li&gt;When you find the stopword ‘in’, you know it doesn’t mean Indiana&lt;/li&gt;
&lt;li&gt;It’s easy to make certain things case sensitive&lt;/li&gt;
&lt;li&gt;Case sensitivity is a good idea&lt;/li&gt;
&lt;li&gt;Synonyms are easy&lt;/li&gt;
&lt;li&gt;Synonyms will improve recall in the way you want&lt;/li&gt;
&lt;li&gt;Synonyms have the same relevance in all documents&lt;/li&gt;
&lt;li&gt;Synonyms for Abbreviations and Acronyms always work as you expect&lt;/li&gt;
&lt;li&gt;Synonyms can be extracted from your corpus with natural language processing&lt;/li&gt;
&lt;li&gt;Using Word2Vec for synonyms is a good idea&lt;/li&gt;
&lt;li&gt;Stemming will solve your recall problems&lt;/li&gt;
&lt;li&gt;Lemmatization will solve your recall problems&lt;/li&gt;
&lt;li&gt;Lemmatization dictionaries are static&lt;/li&gt;
&lt;li&gt;Languages don’t change&lt;/li&gt;
&lt;li&gt;Natural language processing (NLP) tools work perfectly&lt;/li&gt;
&lt;li&gt;Incorporating NLP into your analysis pipeline is straightforward&lt;/li&gt;
&lt;li&gt;Search queries are complete sentences and can be accurately tagged with parts of speech&lt;/li&gt;
&lt;li&gt;Showing a list of search suggestions is easy&lt;/li&gt;
&lt;li&gt;Suggestions should just use the out of the box search engine suggestions&lt;/li&gt;
&lt;li&gt;Suggestions should incorporate customer query logs&lt;/li&gt;
&lt;li&gt;Customers would never type anything offensive into your search bar&lt;/li&gt;
&lt;li&gt;Customers would never try to hack you through your search bar&lt;/li&gt;
&lt;li&gt;Customers don’t need highlighting to find what they’ve searched for&lt;/li&gt;
&lt;li&gt;Default highlighters are good enough for all your content and queries&lt;/li&gt;
&lt;li&gt;Making a custom highlighter isn’t too difficult. It’s just matching strings right?&lt;/li&gt;
&lt;li&gt;Making a custom highlighter that is better than the default version will take less than a year&lt;/li&gt;
&lt;li&gt;Turning on caching will solve your performance issues&lt;/li&gt;
&lt;li&gt;Customers don’t expect near real time updates&lt;/li&gt;
&lt;li&gt;30 second commit time is short enough for everyone&lt;/li&gt;
&lt;/ul&gt;</description>
<pubDate>Wed, 29 May 2019 13:29:57 +0000</pubDate>
<dc:creator>binarymax</dc:creator>
<og:title>Falsehoods Programmers Believe About Search</og:title>
<og:type>article</og:type>
<og:url>https://opensourceconnections.com/blog/2019/05/29/falsehoods-programmers-believe-about-search/</og:url>
<og:image>https://opensourceconnections.com/images/search-quality.png</og:image>
<og:description>Search is a deceptively complex field, where competence is hard-won through training, practice, and experience. In that vein dear friends, I’ve exhumed the ...</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://opensourceconnections.com/blog/2019/05/29/falsehoods-programmers-believe-about-search/</dc:identifier>
</item>
<item>
<title>Buyer&amp;#039;s Remorse: High Debt and Low Pay Leave Some College Grads Rueful</title>
<link>https://www.bloomberg.com/news/articles/2019-05-28/buyer-s-remorse-high-debt-and-low-pay-leave-some-grads-rueful</link>
<guid isPermaLink="true" >https://www.bloomberg.com/news/articles/2019-05-28/buyer-s-remorse-high-debt-and-low-pay-leave-some-grads-rueful</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://www.bloomberg.com/news/articles/2019-05-28/buyer-s-remorse-high-debt-and-low-pay-leave-some-grads-rueful&quot;&gt;https://www.bloomberg.com/news/articles/2019-05-28/buyer-s-remorse-high-debt-and-low-pay-leave-some-grads-rueful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=20039863&quot;&gt;https://news.ycombinator.com/item?id=20039863&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 222&lt;/p&gt;
&lt;p&gt;# Comments: 416&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 13:27:14 +0000</pubDate>
<dc:creator>pseudolus</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.bloomberg.com/tosv2.html?vid=&amp;uuid=18bddbe0-826e-11e9-a45c-592bbe8b72ed&amp;url=L25ld3MvYXJ0aWNsZXMvMjAxOS0wNS0yOC9idXllci1zLXJlbW9yc2UtaGlnaC1kZWJ0LWFuZC1sb3ctcGF5LWxlYXZlLXNvbWUtZ3JhZHMtcnVlZnVs</dc:identifier>
</item>
<item>
<title>News Websites Are Dumpster Fires</title>
<link>https://bradleytaunt.com/2019/05/29/news-websites-are-dumpster-fires/</link>
<guid isPermaLink="true" >https://bradleytaunt.com/2019/05/29/news-websites-are-dumpster-fires/</guid>
<description>&lt;span class=&quot;post-date&quot;&gt;&lt;time datetime=&quot;2019-05-29T00:00:00+00:00&quot;&gt;May&lt;/time&gt;&lt;time class=&quot;date-day&quot; datetime=&quot;2019-05-29T00:00:00+00:00&quot;&gt;29&lt;/time&gt;&lt;time datetime=&quot;2019-05-29T00:00:00+00:00&quot;&gt;2019&lt;/time&gt;&lt;/span&gt;
&lt;p class=&quot;lead&quot;&gt;Online news outlets are a dying breed and many users have decided to consume information elsewhere. Why? Because the news industry has become a cesspool of anti-consumer and blackhat practices that has eroded trust for the sake of money.&lt;/p&gt;
&lt;h2 id=&quot;what-news-sites-get-wrong&quot;&gt;What news sites get wrong&lt;/h2&gt;
&lt;p&gt;I could write up an entire essay about all the shady practices that &lt;em&gt;most&lt;/em&gt; news sites are guilty of, but here are just a few top level issues:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Clickbait headings with misleading information&lt;/li&gt;
&lt;li&gt;Disabling the user from reading if ad-block is present&lt;/li&gt;
&lt;li&gt;Tracking the user with 3rd party scripts&lt;/li&gt;
&lt;li&gt;Taking massive performance hits (specifically on mobile due to huge JavaScript blocks)&lt;/li&gt;
&lt;li&gt;Pop-up ads&lt;/li&gt;
&lt;li&gt;Fixed headers or footers which leads to harder readability / accidental element interactions&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;but-they-need-ad-revenue&quot;&gt;But they need ad revenue!&lt;/h2&gt;
&lt;p&gt;If your business is solely dependent on tracking scripts, tricking users with clickbait titles and using archaic ads - then you’re destined to fail regardless. These practices create an unsafe and unhealthy web for everyday users - not to mention most browsers have announced that future updates &lt;a href=&quot;https://support.mozilla.org/en-US/kb/content-blocking&quot;&gt;will be blocking ads by default&lt;/a&gt;. &lt;em&gt;News outlets need to adapt or die&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;whats-the-solution&quot;&gt;What’s the solution?&lt;/h2&gt;
&lt;p&gt;I don’t have a &lt;em&gt;fix all&lt;/em&gt; band-aid to replace current revenue streams for news websites. I’m sure someone much smarter than I can come up with better ideas, but just off the top of my head:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Switch over to a monthly subscription plan (if no one pays for it maybe you weren’t as useful of a source as you thought)&lt;/li&gt;
&lt;li&gt;Partner with brands to create sponsored articles (without ruining the user experience of course)&lt;/li&gt;
&lt;li&gt;Place a larger emphasis on user donations or promotions&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;the-news-shouldnt-be-spam&quot;&gt;The News Shouldn’t be Spam&lt;/h2&gt;
&lt;p&gt;Most traffic flowing into news websites are there for one thing: &lt;em&gt;the content&lt;/em&gt;. News outlets should not be spamming their main revenue supply (&lt;strong&gt;the users&lt;/strong&gt;) or misleading people with false information.&lt;/p&gt;
&lt;p&gt;If you’re a regular consumer of news and you happen to run across a platform that is guilty of any of these practices, shoot them an email explaining why you won’t be returning to their website (unless they change their ways). These anti-consumer practices will only stop when these organizations start losing money.&lt;/p&gt;
</description>
<pubDate>Wed, 29 May 2019 11:34:51 +0000</pubDate>
<dc:creator>bradley_taunt</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://bradleytaunt.com/2019/05/29/news-websites-are-dumpster-fires/</dc:identifier>
</item>
</channel>
</rss>