<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>Microplastics found in 93% of bottled water</title>
<link>https://www.cbc.ca/news/technology/bottled-water-microplastics-1.4575045</link>
<guid isPermaLink="true" >https://www.cbc.ca/news/technology/bottled-water-microplastics-1.4575045</guid>
<description>&lt;p&gt;
Microplastics are the result of the breakdown of all the plastic waste that makes its way into landfills and oceans. The purpose of the study was to establish the presence of the plastics in bottled water. (Fred Dufour/AFP/Getty Images)
&lt;/p&gt;&lt;div readability=&quot;227.98920863309&quot;&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;The bottled water industry is estimated to be worth&lt;/span&gt; &lt;a href=&quot;https://globenewswire.com/news-release/2017/05/26/998349/0/en/Global-Bottled-Water-Market-will-reach-USD-280-0-Billion-by-2020.html&quot;&gt;nearly $200 billion a year&lt;/a&gt;, surpassing sugary sodas as the most popular beverage in many countries. But its perceived image of cleanliness and purity is being challenged by a global investigation that found the water tested is often contaminated with tiny particles of plastic.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;Our love affair with making single-use disposable plastics out of a material that lasts for literally centuries — that's a disconnect, and I think we need to rethink our relationship with that,&quot; says Prof. Sherri Mason, a microplastics researcher who carried out the laboratory work at the State University of New York (SUNY).&lt;/span&gt;&lt;/p&gt;
&lt;section id=&quot;inread-wrapper-id-33473279&quot;/&gt;&lt;p&gt;&lt;span&gt;The research was conducted on behalf of&lt;/span&gt; &lt;a href=&quot;https://orbmedia.org/&quot;&gt;Orb Media&lt;/a&gt;, a U.S-based non-profit journalism organization with which CBC News has partnered.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mason's team tested 259 bottles of water purchased in nine countries (none were bought in Canada). Though many brands are sold internationally, the water source, manufacturing and bottling process for the same brand can differ by country.&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;11.578947368421&quot;&gt;

The 11 brands tested include the world's dominant players — Nestle Pure Life, Aquafina, Dasani, Evian, San Pellegrino and Gerolsteiner — as well as major national brands across Asia, Africa, Europe and the Americas.&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Researchers found &lt;a href=&quot;https://orbmedia.org/stories/plus-plastic&quot;&gt;93 per cent of all bottles tested&lt;/a&gt; contained some sort of microplastic, including polypropylene, polystyrene, nylon and polyethylene terephthalate (PET).&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;10.4 particles/litre on average&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Microplastics are the result of the breakdown of all the plastic waste that makes its way into&lt;/span&gt; landfills and oceans. They are also manufactured intentionally, as microbeads used in skin care products. Microbeads are now being phased out in Canada, after significant numbers began to appear in the Great Lakes and the tiny particles were found filling the stomachs of fish.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Anything smaller than five millimetres in size (5,000 microns) is considered microplastic.&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;&quot; sizes=&quot;&quot; src=&quot;https://i.cbc.ca/1.4576269.1521053804!/fileImage/httpImage/image.png_gen/derivatives/original_780/image2-png.png&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;Using the Red Nile test, researchers identified tiny particles believed to be microplastics in many bottles of water.  (Orb Media)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Orb found on average there were 10.4 particles of plastic per litre that were 100 microns (0.10 mm) or bigger. This is double the level of microplastics in the tap water tested from more than a dozen countries across five continents, examined in a 2017 study by Orb that looked at similar-sized plastics.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Other, smaller particles were also discovered — 314 of them per litre, on average — which&lt;/span&gt; some of the experts consulted about the Orb study believe are plastics but cannot definitively identify.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The amount of particles varied from bottle to bottle: while some contained one, others contained thousands.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The purpose of the study was to establish the presence of the plastics in bottled water.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;It's unclear what the effect of microplastics is on human health, and no previous work has established a maximum safe level of consumption. There are no rules or standards for allowable limits of microplastics in bottled water in Canada, the United States and Europe. Rules and standards for other countries from the study are not known.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Two brands — Nestle and Gerolsteiner — confirmed their own testing showed their water contained microplastics, albeit at much lower levels than what Orb Media is reporting.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Emerging science&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Plastics are present nearly everywhere and can take hundreds of years to degrade, if at all. Many types only continue to break down into smaller and smaller particles, until they are not visible to the naked eye.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Plastics have also been known to act like a sponge, and can absorb and release chemicals that could be harmful if consumed by mammals and fish.&lt;/span&gt;&lt;/p&gt;
&lt;div readability=&quot;5.1223021582734&quot;&gt;

&quot;It's not straightforward,&quot; said Prof. Max Liboiron of Memorial University in St John's.&lt;/div&gt;
&lt;p&gt;&lt;span&gt;&quot;If you've ever had chili or spaghetti and you put it in Tupperware, and you can't scrub the orange colour out, that's a manifestation of how plastics absorb oily chemicals,&quot; says Liboiron, director of the&lt;/span&gt; Civic Laboratory for Environmental Action Research (CLEAR), which monitors plastic pollution.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The European Food Safety Authority&lt;/span&gt; &lt;a href=&quot;https://drive.google.com/file/d/1om9TTZjiQPhFE4TqbtL80Omg_uozrwYW/view&quot;&gt;suggests&lt;/a&gt; most microplastics will be excreted by the body. But the United Nations Food and Agriculture Organization &lt;a href=&quot;https://drive.google.com/file/d/1oHSOj9s48Rat-cn1FRDUwuFIDkYH2Sm0/view&quot;&gt;has raised concerns&lt;/a&gt; about the possibility some particles could be small enough to pass into the bloodstream and organs.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;It's not clear how the plastic is getting into the bottled water — whether it's the water source itself or the air or the manufacturing and bottling process.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;Even the simple act of opening the cap could cause plastic to be chipping off the cap,&quot; Mason said.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;The science behind the test&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;The water tested was purchased in the U.S., Kenya, China, Brazil, India, Indonesia, Lebanon, Mexico and Thailand, and represented a range of brands across several continents. It was shipped to the specialized lab at SUNY in Fredonia, N.Y.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Scientists used Nile Red fluorescent tagging, an emerging method for the rapid identification of microplastics, as the dye binds to plastic. Scientists put the dyed water through a filter and then viewed samples under a microscope.&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;
&lt;div class=&quot;placeholder&quot;&gt;

&lt;span&gt;&lt;img alt=&quot;&quot; srcset=&quot;&quot; sizes=&quot;&quot; src=&quot;https://i.cbc.ca/1.4575049.1520980956!/fileImage/httpImage/image.JPG_gen/derivatives/original_780/prof-sherri-mason.JPG&quot;/&gt;&lt;/span&gt;&lt;/div&gt;
&lt;span&gt;Prof. Sherri Mason carried out the laboratory work at the State University of New York (SUNY), on behalf of Orb Media.  (Dave MacIntosh/CBC)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;span&gt;Mason's team was able to identify specific plastics over 100 microns (0.10 mm) in size but not smaller particles. According to experts contacted by CBC News, there is a chance the Nile Red dye is adhering to another unknown substance other than plastic.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mason leaves open that possibility but leans strongly to the smaller particles being plastic.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The developer of the Nile Red method agrees.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Fluorescing particles that were too small to be analyzed should be called &quot;probable microplastic,&quot; said Andrew Mayes, senior lecturer in chemistry at the University of East Anglia in the U.K.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Orb consulted several toxicologists and microplastics experts throughout the entire process who also reviewed the findings.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;This is pretty substantial,&quot; Mayes said. &quot;I've looked in some detail at the finer points of the way the work was done, and I'm satisfied that it has been applied carefully and appropriately, in a way that I would have done it in my lab.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;CBC News also asked multiple experts to review Orb's study; while similar questions came up with the Nile Red dye, they were convinced there was some level of microplastics in the water and further research was warranted.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Big brands respond&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Nestle said in a response that it had tested six bottles of water from two of its brands — Nestle Pure Life and San Pellegrino — and found between two and 12 microplastics per litre, much lower than what Orb found in its study. The company suggested that Nile Red dye is known to &quot;generate false positives.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Gerolsteiner also said its tests showed a &quot;significantly lower quantity of microplastics per litre&quot; in its products.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;We still cannot understand how the study reached the conclusions it did,&quot; the company said. &quot;The research results do not correspond to the internal analyses that we conduct on a regular basis,&quot; the company said in a response.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Danone, the company behind Evian and Indonesian brand Aqua, told Orb it is &quot;not in a position to comment as the testing methodology used is unclear. There is still limited data on the topic, and conclusions differ dramatically from one study to another.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Brazilian brand Minalba told Orb that it abides by all quality and security standards required by Brazilian legislation.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;The American Beverage Association, which represents many of the biggest brands across North America, including Nestle, Evian, Dasani and Aquafina, told Orb that &quot;the science on microplastics and microfibres is nascent and an emerging field…. We stand by the safety of our bottled water products and we are interested in contributing to serious scientific research that will ... help us all understand the scope, impact and appropriate next steps.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Brands &lt;span&gt;Biserli and Wahaha did not respond to Orb's request for comment.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span&gt;Plastics, plastics everywhere&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span&gt;Within three decades, there will be more plastics in the oceans than fish. They are having a profound effect on the environment. In the oceans, vast quantities float on the surface, trapping sea life and blocking the sun's rays from entering the waters.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Mason points out people can choose to not buy water in a plastic bottle, and to carry a refillable bottle instead. But for other products, there is no choice. The majority of products on grocery and retail store shelves are contained in plastic.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&quot;It's portable, it's lightweight, it's convenient, it's cheap — that just makes it easy,&quot; Mason says. &quot;It's so difficult to get people to care about things they can't see.&quot;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 27 Sep 2019 17:30:17 +0000</pubDate>
<dc:creator>simonebrunozzi</dc:creator>
<og:url>https://www.cbc.ca/news/technology/bottled-water-microplastics-1.4575045</og:url>
<og:title>93% of bottled water tested contained microplastics: Study | CBC News</og:title>
<og:image>https://i.cbc.ca/1.4575047.1520980876!/fileImage/httpImage/image.jpg_gen/derivatives/16x9_620/hkg10235388.jpg</og:image>
<og:description>The image of bottle water as clean and pure is being challenged by a global investigation that found the water tested is often contaminated with tiny particles of plastic.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.cbc.ca/news/technology/bottled-water-microplastics-1.4575045</dc:identifier>
</item>
<item>
<title>The Spinner</title>
<link>https://www.thespinner.net/</link>
<guid isPermaLink="true" >https://www.thespinner.net/</guid>
<description>&lt;p class=&quot;landing-text&quot;&gt;The Spinner* is a service that enables you to subconsciously influence a specific person, by controlling the content on the websites he or she usually visits.&lt;/p&gt;
&lt;p class=&quot;landing-text&quot;&gt;The targeted person gets repetitively exposed to hundreds of items which are placed and disguised as editorial content.&lt;/p&gt;
</description>
<pubDate>Fri, 27 Sep 2019 17:11:44 +0000</pubDate>
<dc:creator>MaysonL</dc:creator>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.thespinner.net/</dc:identifier>
</item>
<item>
<title>MyPayrollHR CEO Arrested, Admits to $70M Fraud</title>
<link>https://krebsonsecurity.com/2019/09/mypayrollhr-ceo-arrested-admits-to-70m-fraud/</link>
<guid isPermaLink="true" >https://krebsonsecurity.com/2019/09/mypayrollhr-ceo-arrested-admits-to-70m-fraud/</guid>
<description>&lt;p&gt;Earlier this month, employees at more than 1,000 companies saw one or two paycheck’s worth of funds deducted from their bank accounts after the CEO of their cloud payroll provider &lt;a href=&quot;https://krebsonsecurity.com/2019/09/ny-payroll-company-vanishes-with-35-million/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;absconded with $35 million in payroll and tax deposits from customers&lt;/a&gt;. On Monday, the CEO was arrested and allegedly confessed that the diversion was the last desperate gasp of a financial shell game that earned him $70 million over several years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Michael T. Mann&lt;/strong&gt;, the 49-year-old CEO of Clifton Park, NY-based &lt;strong&gt;MyPayrollHR&lt;/strong&gt;, was &lt;a href=&quot;https://www.nbcnews.com/news/us-news/fbi-agents-raid-home-ceo-connected-payroll-processing-fraud-n1055591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;arrested this week&lt;/a&gt; and charged with bank fraud. In court filings, FBI investigators said Mann admitted under questioning that in early September — on the eve of a big payroll day — he diverted to his own bank account some $35 million in funds sent by his clients to cover their employee payroll deposits and tax withholdings.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;aligncenter wp-image-48969&quot; src=&quot;https://krebsonsecurity.com/wp-content/uploads/2019/09/mypayroll-message.png&quot; alt=&quot;&quot; width=&quot;596&quot; height=&quot;218&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After that stunt, two different banks that work with Mann’s various companies froze those corporate accounts to keep the funds from being moved or withdrawn. That action set off a chain of events that led another financial institution that helps MyPayrollHR process payments to briefly pull almost $26 million out of checking accounts belonging to employees at more than 1,000 companies that use MyPayrollHR.&lt;/p&gt;
&lt;p&gt;At the same time, MyPayrollHR sent a message (see screenshot above) to clients saying it was shutting down and that customers should find alternative methods for paying employees and for processing payroll going forward.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://krebsonsecurity.com/wp-content/uploads/2019/09/manncomplain.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the criminal complaint against Mann&lt;/a&gt; (PDF), a New York FBI agent said the CEO admitted that starting in 2010 or 2011 he began borrowing large sums of money from banks and financing companies under false pretenses.&lt;/p&gt;
&lt;blockquote readability=&quot;17&quot;&gt;
&lt;p&gt;“While stating that MyPayroll was legitimate, he admitted to creating other companies that had no purpose other than to be used in the fraud; fraudulently representing to banks and financing companies that his fake businesses had certain receivables that they did not have; and obtaining loans and lines of credit by borrowing against these non-existent receivables.”&lt;/p&gt;
&lt;p&gt;“Mann estimated that he fraudulently obtained about $70 million that he has not paid back. He claimed that he committed the fraud in response to business and financial pressures, and that he used almost all of the fraudulently obtained funds to sustain certain businesses, and purchase and start new ones. He also admitted to kiting checks between Bank of America and Pioneer [Savings Bank], as part of the fraudulent scheme.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check-kiting is the illegal act of writing a check from a bank account without sufficient funds and depositing it into another bank account, &lt;a href=&quot;https://www.magnifymoney.com/blog/banking/check-kiting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;explains&lt;/a&gt; MagnifyMoney.com. “Then, you withdraw the money from that second account before the original check has been cleared.”&lt;/p&gt;
&lt;p&gt;Kiting also is known as taking advantage of the “float,” which is the amount of time between when an individual submits a check as payment and when the individual’s bank is instructed to move the funds from the account.&lt;span id=&quot;more-49067&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Magnify Money explains more:&lt;/p&gt;
&lt;blockquote readability=&quot;29&quot;&gt;
&lt;p&gt;“Say, for example, that you write yourself a check for $500 from checking account A, and deposit that check into checking account B — but the balance in checking account A is only $75. Then, you promptly withdraw the $500 from checking account B. This is check-kiting, a form of check fraud that uses non-existent funds in a checking account or other type of bank account. Some check-kiting schemes use multiple accounts at a single bank, and more complicated schemes involve multiple financial institutions.”&lt;/p&gt;
&lt;p&gt;“In a more complex scenario, a person could open checking accounts at bank A and bank B, at first depositing $500 into bank A and nothing in bank B. Then, they could write a check for $10,000 with account A and deposit it into account B. Bank B immediately credits the account, and in the time it might take for bank B to clear the check (generally about three business days), the scammer writes a $10,000 check with bank B, which gets deposited into bank A to cover the first check. This could keep going, with someone writing checks between banks where there’s no actual funds, yet the bank believes the money is real and continues to credit the accounts.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The government alleges Mann was kiting millions of dollars in checks between his accounts at Bank of American and Pioneer from Aug. 1, 2019 to Aug. 30, 2019.&lt;/p&gt;
&lt;p&gt;For more than a decade, MyPayrollHR worked with California-based Cachet Financial Services to process payroll deposits for MyPayrollHR client employees. Every other week, MyPayrollHR’s customers would deposit their payroll funds into a holding account run by Cachet, which would then disburse the payments into MyPayrollHR client employee bank accounts.&lt;/p&gt;
&lt;p&gt;But when Mann diverted $26 million in client payroll deposits from Cachet to his account at Pioneer Bank, Cachet’s emptied holding account was debited for the payroll payments. Cachet quickly reversed those deposits, causing one or two pay periods worth of salary to be deducted from bank accounts for employees of companies that used MyPayrollHR.&lt;/p&gt;
&lt;p&gt;That action caused so much uproar from affected companies and their employees that Cachet ultimately decided to cancel all of those reversals and absorb that $26 million hit, which it is now trying to recover through the courts.&lt;/p&gt;
&lt;p&gt;According to prosecutors in New York, Pioneer was Mann’s largest creditor.&lt;/p&gt;
&lt;p&gt;“Mann stated that the payroll issue was precipitated by his decision to route MyPayroll’s clients’ payroll payments to an account at Pioneer instead of directly to Cachet,” wrote &lt;strong&gt;FBI Special Agent Matthew J. Wabby&lt;/strong&gt;. “He did this in order to temporarily reduce the amount of money he owed to Pioneer. When Pioneer froze Mann’s accounts, it’s also (inadvertently) stopped movement of MyPayroll’s clients’ payroll payments to Cachet.”&lt;/p&gt;
&lt;p&gt;Approximately $9 million of the $35 million diverted by Mann was supposed to go to accounts at the &lt;strong&gt;National Payment Corporation&lt;/strong&gt; (NatPay) — the Florida-based firm which handles tax withholdings for MyPayrollHR clients. NatPay said its insurance should help cover the losses it incurred when MyPayrollHR’s banks froze the company’s accounts.&lt;/p&gt;
&lt;p&gt;Court records indicate Mann hasn’t yet entered a plea, but that he was ordered to be released today under a $200,000 bond secured by a family home and two vehicles. His passport also was seized.&lt;/p&gt;

&lt;p class=&quot;mid-banner&quot;&gt;&lt;a href=&quot;https://www.akamai.com/us/en/security.jsp?utm_source=krebsonsecurity&amp;amp;utm_medium=display&amp;amp;utm_id=F-MC-44701&amp;amp;utm_campaign=unifiedsecurity_digital_2019&amp;amp;utm_content=unifiedsecurity_global&amp;amp;utm_term=unifiedsecurity_ros&quot;&gt;&lt;img src=&quot;https://krebsonsecurity.com/b-akamai/15.jpg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;small&quot;&gt;Tags: &lt;a href=&quot;https://krebsonsecurity.com/tag/michael-t-mann/&quot; rel=&quot;tag&quot;&gt;Michael T. Mann&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/tag/mypayrollhr/&quot; rel=&quot;tag&quot;&gt;mypayrollHR&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;postmetadata alt&quot;&gt;&lt;small&gt;This entry was posted on Friday, September 27th, 2019 at 12:17 pm and is filed under &lt;a href=&quot;https://krebsonsecurity.com/category/sunshine/&quot; rel=&quot;category tag&quot;&gt;A Little Sunshine&lt;/a&gt;, &lt;a href=&quot;https://krebsonsecurity.com/category/neer-do-well-news/&quot; rel=&quot;category tag&quot;&gt;Ne'er-Do-Well News&lt;/a&gt;. You can follow any comments to this entry through the &lt;a href=&quot;https://krebsonsecurity.com/2019/09/mypayrollhr-ceo-arrested-admits-to-70m-fraud/feed/&quot;&gt;RSS 2.0&lt;/a&gt; feed. You can skip to the end and leave a comment. Pinging is currently not allowed.&lt;/small&gt;&lt;/p&gt;
</description>
<pubDate>Fri, 27 Sep 2019 16:33:37 +0000</pubDate>
<dc:creator>headalgorithm</dc:creator>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://krebsonsecurity.com/2019/09/mypayrollhr-ceo-arrested-admits-to-70m-fraud/</dc:identifier>
</item>
<item>
<title>The One Man MMO Project</title>
<link>http://onemanmmo.com/</link>
<guid isPermaLink="true" >http://onemanmmo.com/</guid>
<description>&lt;div readability=&quot;35.996462264151&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;20.430424528302&quot;&gt;One of the big new features in &lt;em&gt;Unnamed Update&lt;/em&gt; is the revamped loot system. I've been working on this for quite some time as part of other features I've been doing. The most visible change is that players will now get the new consumable crates in battlefield loot crates after enemy units are destroyed. Internally there have been a lot of changes.&lt;p&gt;Where there used to be just one loot table, there are now a number of them for various features within the game, and the loot you get from any particular loot table will change as players advance in level. I also reworked the way the game determines the value of units within the game so that more valuable units give more loot.&lt;/p&gt;&lt;div readability=&quot;9&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Bad%20Login.png&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Bad%20Login_Lo.jpg&quot; width=&quot;600&quot; height=&quot;322&quot; alt=&quot;The%20Imperial%20Realm%20-%20Miranda%20-%20Bad%20Login_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[TFW: You log in, and immediately hear &quot;Unit under attack! Unit lost. Unit lost. Unit lost. Unit lost.&quot; Zoom to that area. &quot;Aww damn.&quot;]&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;41.338809034908&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;29.52772073922&quot;&gt;&lt;em&gt;Unnamed Update&lt;/em&gt; is still coming along. My regular work schedule got slightly derailed the last couple weeks of August with travelling, a bunch of unreasonably hot weather and back-to-school. I have a whole bunch of things that I have been working on, none of which are finished. Most of my thought and effort the last month has been focused on level progression through the game. Other games I have seen have a little notification screen every time players level up that tells them all the new abilities they have unlocked and sometimes even gives loot. I'm not at the point yet where every level adds new things to do, but that is the direction the game is heading.&lt;h2&gt;Level Requirements&lt;/h2&gt;
There is now a minimum level requrement for components, so if players aren't a high enough level for a component they can't put it in designs and can't buy or build units that contain it. Each time a player levels up, they will gain access to new, better components. Most of the existing components will be assigned to level 1, so I'll be adding new components to fill the higher levels.&lt;p&gt;I started work on some of those new components I mentioned, my favourite is this tank chassis with ten guns on it. Those white boxes aren't part of the model, and don't show up in the game, they are how the game tells where to add guns and exhaust and other effects.&lt;/p&gt;&lt;div readability=&quot;7&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/10guns.png&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/10guns_Lo.jpg&quot; width=&quot;600&quot; height=&quot;322&quot; alt=&quot;10guns_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[Upcoming unit with white-boxes for positioning dust and weapon effects. &lt;strong&gt;And 10 guns!&lt;/strong&gt;]&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;52.198996655518&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;50.707596751075&quot;&gt;Production is the part of game development where the game's design and features are &lt;em&gt;mostly&lt;/em&gt; set, and the team starts taking all the systems that have been developed and filling them with all the tens of thousands of individual things players will interact with: swords, shields, guns, outfits, soccer players, teams and much more.&lt;div readability=&quot;7&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/component.png&quot; width=&quot;600&quot; height=&quot;98&quot; alt=&quot;component.png&quot; /&gt;&lt;br /&gt;[Every item in Miranda actually looks like this...]&lt;/div&gt;
&lt;p&gt;Miranda has been in production for a little while now. When I added loot crates I didn't make just one loot crate, I made 78, 12 different types in all. I plan to add more, but that is at least a respectable start.&lt;/p&gt;&lt;p&gt;The feature brief for my current feature is &quot;Add plasma rifle weapon effect like the one in the Terminator movies.&quot; With the requirements pretty clear, I started digging in to what that actually means to implement with production in mind. First I need new art for the weapon, then a shader that will run it because it isn't exactly like previous beam weapons, then some code changes to support the additional data requirements of the shader, then code changes to the simulation to support weapons taking time to arrive on target. Doable.&lt;/p&gt;&lt;p&gt;Then I looked at my great list of components in the game - every tank, crate, weapon, building, power source, shield and so on. I realized that I need that plasma rifle's art and many, many stats to vary by 4 levels of veterancy, by as many as 8 quality levels (blues/greens etc) and by a to-be-determined number of level ranges spanning the player's 80 levels. OK, I can do that with my current system, but I'm immediately overwhelmed by the sheer number of components and stat variations that will be needed. How can I build all those in a reasonable amount of time without having tons of bugs in the thousands of numbers I would need to calculate and enter? How do I tweak the weapon afterwards? How do I back-port those veterancy/quality/level variations to all the existing weapons in the game? How do I quickly iterate to develop the art variations and test all of those weapon variations?&lt;/p&gt;&lt;p&gt;I don't know yet, but I'm working on it.&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;34.101883561644&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;16.330479452055&quot;&gt;
&lt;p&gt;It's been over a month since I've blogged, mainly because I don't have any one big thing to talk about. So here are a bunch of the little things I've been working on.&lt;/p&gt;
&lt;h2&gt;Redeploy Forces&lt;/h2&gt;
&lt;p&gt;The tricky change this month was adding a main menu option to &lt;strong&gt;Redeploy Forces&lt;/strong&gt; which allows the player to move their base to a new location. This is a shortcut for the log out, log in, relocate base dance players have done up until now - but it is much faster. I think I might disable this if the player is in combat.&lt;/p&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Redeploy%20Base%20(was%20Move%20Base).jpg&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Redeploy%20Base%20(was%20Move%20Base)_Lo.jpg&quot; width=&quot;600&quot; height=&quot;338&quot; alt=&quot;The%20Imperial%20Realm%20-%20Miranda%20-%20Redeploy%20Base%20(was%20Move%20Base)_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[Redeploy Forces - back when it was Move Base.]&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;32.15061295972&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;12.476357267951&quot;&gt;I did a bit of work on The Fallen, adding guardians at monoliths and vendors, increasing the size of base attack forces and modifying the guardians at resource fields to respawn more often. I discovered that the Fallen were having difficulty teleporting which turned out to be a number of bugs working together in concert in addition to my choice of formation. With teleports fixed a lot more Fallen are now at large on Miranda. There is still a bit more I have planned for them.&lt;div readability=&quot;7&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Inventory.png&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Inventory_Lo.jpg&quot; width=&quot;600&quot; height=&quot;338&quot; alt=&quot;The%20Imperial%20Realm%20-%20Miranda%20-%20Inventory_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[Destroying a stack of items on the Inventory Screen.]&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;36.945717732207&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;21.389626055489&quot;&gt;There is no level editor for Miranda. The terrain is built in a tool called WorldMachine and then all the textures, plants, rocks and everything you see in the game are added procedurally based on a bunch of text files. So when I added all the vendors and monoliths to the game I randomly assigned them locations, but I didn't have a way to check that every single one was in a good location (not on the side of a cliff.)&lt;p&gt;Monday morning I decided I wanted to address that bug. I figured I'd need to add keyboard controls to visit all the discoverables, and some debug prints so I could figure out which discoverable to modify in the text files, then it would take a couple hours to move them all, then another hour to verify after the moves. That should take a day.&lt;/p&gt;&lt;div readability=&quot;7&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Vendors%201.png&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Vendors%201_Lo.jpg&quot; width=&quot;600&quot; height=&quot;338&quot; alt=&quot;The%20Imperial%20Realm%20-%20Miranda%20-%20Vendors%201_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[A Vendor in her new home.]&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;33.554757630162&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;14.380610412926&quot;&gt;Attributes have been in Miranda for some time, but they reached their final form this month.&lt;div&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Attributes%20Final.jpg&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Attributes%20Final_Lo.jpg&quot; width=&quot;600&quot; height=&quot;338&quot; alt=&quot;The%20Imperial%20Realm%20-%20Miranda%20-%20Attributes%20Final_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[Miranda's Attributes]&lt;/div&gt;
&lt;p&gt;There are nine attributes in the game, and each attribute is assigned a value from 1 to 9. There are a total of 45 attribute points available right now. 9 are automatically assigned. Players are given 18 to assign when they start, and one is given each time the player levels up until they reach level 19 for a grand total of 45 attribute points. 9 bonus points will be available through rare consumables.&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;36.183923705722&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;23.194822888283&quot;&gt;This weekend, (May 11-12) everyone who has purchased any &lt;a href=&quot;http://theimperialrealm.com&quot;&gt;Early Access package&lt;/a&gt; for the &lt;em&gt;The Imperial Realm::Miranda&lt;/em&gt; will be able to try all the new features of &lt;strong&gt;Bold New World&lt;/strong&gt; from midnight Friday to midnight Sunday GMT.&lt;p&gt;Bold New World is the third major update to &lt;em&gt;The Imperial Realm::Miranda&lt;/em&gt; and a major upgrade to the art and rendering engine.&lt;/p&gt;&lt;div readability=&quot;7&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Vermillion%20Hardship%20-%201.jpg&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Vermillion%20Hardship%20-%201_Lo.jpg&quot; width=&quot;600&quot; height=&quot;338&quot; alt=&quot;The%20Imperial%20Realm%20-%20Miranda%20-%20Vermillion%20Hardship%20-%201_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[New Biome - Vermillion Hardship.]&lt;/div&gt;
&lt;div readability=&quot;7&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Perilous%20Precipices%20-%201.jpg&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20Miranda%20-%20Perilous%20Precipices%20-%201_Lo.jpg&quot; width=&quot;600&quot; height=&quot;338&quot; alt=&quot;The%20Imperial%20Realm%20-%20Miranda%20-%20Perilous%20Precipices%20-%201_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[New Rock Formations and Sky - The Perilous Precipices.]&lt;/div&gt;
&lt;p&gt;Support the development of this one-of-a-kind massively multiplayer RTS and check it out at the same time with &lt;a href=&quot;http://theimperialrealm.com&quot;&gt;Early Access packages&lt;/a&gt; starting at just $8.&lt;/p&gt;&lt;p&gt;Rob will be online at the start of the weekend (Friday 4pm Pacific Time) to chat, answer questions, or blow up your stuff.&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;36.41874180865&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;19.423328964613&quot;&gt;I made a video to demo the Independents' new Spy Satellite. The Spy Satellite removes the shroud anywhere on the map. Once built, it can be used every three minutes. There are four perks related to the Spy Satellite: the first unlocks the unit, the second and third increase the diameter of the area revealed, and the final perk enables real-time surveillance of the target area for two minutes.&lt;center&gt;Sorry, your browser does not support HTML5 video.&lt;/center&gt;
&lt;p&gt;Adding the Spy Satellite was really fun. Unlike everything I've done the last year, it was a few lines in a config file, a new in-game model, a new icon and just a pinch of new code. This gave me time to do a bit of polish: a new mouse cursor when targeting and custom sound effects.&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;32.922465208748&quot;&gt;
&lt;div class=&quot;intro&quot; readability=&quot;14.314115308151&quot;&gt;I'm still working on desyncs - units having different health or position or orientation on the server and clients. Unit movement replication is the second most complicated part of Miranda, so everything I'm doing I usually have to do twice. I do a bunch of analysis, then an initial implementation, then I find a few things I'm not handling properly and then I do it all again. It is slow, but I am making progress.&lt;div readability=&quot;7&quot;&gt;&lt;a href=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20New%20Replication.png&quot;&gt;&lt;img src=&quot;http://static.onemanmmo.com/articleimages/The%20Imperial%20Realm%20-%20New%20Replication_Lo.jpg&quot; width=&quot;600&quot; height=&quot;338&quot; alt=&quot;The%20Imperial%20Realm%20-%20New%20Replication_Lo.jpg&quot; /&gt;&lt;/a&gt;&lt;br /&gt;[Standalone unit path replication system at work.]&lt;/div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div readability=&quot;19.061147695202&quot;&gt;
&lt;p&gt;
&lt;h3&gt;Recent Comments&lt;/h3&gt;
&lt;/p&gt;

&lt;div class=&quot;rowbody&quot; readability=&quot;36&quot;&gt;Uploading videos to PC from HF-S100.&lt;p&gt;1) If you want thumbnails:&lt;br /&gt;Connect camera power.&lt;br /&gt;Connect camera to PC via USB cable.&lt;br /&gt;Turn camera on&lt;br /&gt;Open Screen&lt;br /&gt;Press Camera/Play button below screen.&lt;br /&gt;Generate Thumbnails.&lt;br /&gt;2) Run canonimport for directions.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Please ignore this test comment.&lt;/p&gt;

&lt;p&gt;One more issue: If you've forgotten your password you'll have to let me know so I can set your email preferences so that you will receive forgotten password emails. Once you've reset your password, you can go into settings to set your email ...&lt;/p&gt;

&lt;p&gt;Thanks for the feedback, I really appreciate it.&lt;/p&gt;

&lt;p&gt;Looks really cool! Good job! Even though I haven't bought any of the packages, I am still following your progress and I have to say this looks really good!&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 27 Sep 2019 15:27:12 +0000</pubDate>
<dc:creator>larksimian</dc:creator>
<og:type>website</og:type>
<og:title>The One Man MMO Project</og:title>
<og:description>The story of a lone developer's quest to build an online world</og:description>
<og:image>http://static.onemanmmo.com/images/facebook-16x9.png</og:image>
<og:url>http://onemanmmo.com/index.php?cmd=news</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>http://onemanmmo.com/</dc:identifier>
</item>
<item>
<title>Crafting Interpreters: Closures</title>
<link>http://craftinginterpreters.com/closures.html</link>
<guid isPermaLink="true" >http://craftinginterpreters.com/closures.html</guid>
<description>&lt;p&gt;25&lt;/p&gt;&lt;div class=&quot;sign-up closable&quot; readability=&quot;14.326530612245&quot;&gt;

&lt;span class=&quot;dismiss&quot;&gt;×&lt;/span&gt;
&lt;p&gt;If you see a mistake, find something unclear, or have a suggestion, please &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/issues&quot; target=&quot;_blank&quot;&gt;let me know&lt;/a&gt;. To learn when new chapters are up, join the mailing list:&lt;/p&gt;

&lt;p class=&quot;small&quot;&gt;(I post about once a month. Don’t worry, I won’t spam you.)&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;As the man said, for every complex problem there’s a simple solution, and it’s wrong. &lt;cite&gt;Umberto Eco, &lt;em&gt;Foucault’s Pendulum&lt;/em&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thanks to our diligent labor in &lt;a href=&quot;http://craftinginterpreters.com/calls-and-functions.html&quot;&gt;the last chapter&lt;/a&gt;, we have a virtual machine with working functions. What it lacks is closures. Aside from global variables, which are their own breed of animal, a function has no way to reference a variable declared outside of its own body:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;global&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;outer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run this example now and it prints “global”. It’s supposed to print “outer”. To fix this, we need to include the entire lexical scope of all surrounding functions when resolving a variable.&lt;/p&gt;
&lt;p&gt;This problem is harder in clox than it was in jlox because our bytecode VM stores locals on a stack. We used a stack because I claimed locals have stack semantics&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;variables are discarded in the reverse order that they are created. But with closures, that’s only &lt;em&gt;mostly&lt;/em&gt; true:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The outer function &lt;code&gt;makeClosure()&lt;/code&gt; declares a variable, &lt;code&gt;local&lt;/code&gt;. It also creates an inner function, &lt;code&gt;closure()&lt;/code&gt; that captures that variable. Then &lt;code&gt;makeClosure()&lt;/code&gt; returns a reference to that function. Since the closure &lt;span name=&quot;flying&quot;&gt;escapes&lt;/span&gt; while holding onto the local variable, &lt;code&gt;local&lt;/code&gt; must outlive the function call where it was created.&lt;/p&gt;
&lt;aside name=&quot;flying&quot;&gt;&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/flying.png&quot; class=&quot;above&quot; alt=&quot;A local variable flying away from the stack.&quot;/&gt; Oh no, it's escaping!&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;We could solve this problem by dynamically allocating memory for all local variables. That’s what jlox does by putting everything in those Environment objects that float around in Java’s heap. But we don’t want to. Using a &lt;span name=&quot;stack&quot;&gt;stack&lt;/span&gt; is &lt;em&gt;really&lt;/em&gt; fast. Most local variables are &lt;em&gt;not&lt;/em&gt; captured by closures and do have stack semantics. It would suck to make all of those slower for the benefit of the rare local that is captured.&lt;/p&gt;
&lt;aside name=&quot;stack&quot; readability=&quot;3&quot;&gt;&lt;p&gt;There is a reason that C and Java use the stack for their local variables, after all.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This means a more complex approach than we used in our Java interpreter. Because some locals have very different lifetimes, we will have two implementations strategies, one optimized for each. For locals that aren’t used in closures, we’ll keep them just as they are on the stack. When a local is captured by a closure, we’ll adopt another solution that lifts them onto the heap where they can live as long as needed.&lt;/p&gt;
&lt;p&gt;Closures have been around since the early Lisp days when bytes of memory and CPU cycles were more precious than emeralds. Over the intervening decades, hackers devised all &lt;span name=&quot;lambda&quot;&gt;manner&lt;/span&gt; of ways to compile closures to optimized runtime representations. Some are more efficient but require a more complex compilation process than we could easily retrofit into clox.&lt;/p&gt;
&lt;aside name=&quot;lambda&quot; readability=&quot;2&quot;&gt;&lt;p&gt;Search for “closure conversion” or “lambda lifting” to start exploring.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;The technique I explain here comes the design of the Lua VM. It is fast, parsimonious with memory, and relatively little code to implement. Even more impressive, it fits naturally into the single-pass compilers clox and Lua both use. It is somewhat intricate, though. It might take a while before all the pieces click together in your mind. We’ll build them one step at a time and I’ll try to introduce the concepts in stages.&lt;/p&gt;

&lt;p&gt;Our VM represents functions at runtime using ObjFunction. These objects are created by the front end during compilation. At runtime, all the VM does is load the function object from a constant table and bind it to a name. There is no operation to “create” a function at runtime. Much like string and number &lt;span name=&quot;literal&quot;&gt;literals&lt;/span&gt;, they are instantiated purely at compile time.&lt;/p&gt;
&lt;aside name=&quot;literal&quot; readability=&quot;4&quot;&gt;&lt;p&gt;In other words, a function declaration in Lox &lt;em&gt;is&lt;/em&gt; a kind of literal&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;a piece of syntax that defines a constant value of a built in type.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;That made sense because all of the data that composes a function is known at compile time: the chunk of bytecode compiled from the function’s body, and some constants. Once we introduce closures, though, that representation is no longer sufficient. Take a gander at:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doughnut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;doughnut&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bagel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bagel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;doughnut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bagel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;makeClosure()&lt;/code&gt; function defines and returns a function. We call it twice and get two closures back. They are created by the same nested function declaration, but close over different values. When we call the two closures, each prints a different string. That implies we need some runtime representation for a closure that captures the local variables surrounding the function as they exist when the function declaration is executed.&lt;/p&gt;
&lt;p&gt;We’ll work our way up to capturing variables, but a good first step is defining that object representation. Our existing ObjFunction type represents the &lt;span name=&quot;raw&quot;&gt;“raw”&lt;/span&gt; compile-time state of a function declaration, since all closures created from a single declaration share the same code and constants. At runtime, when we execute a function declaration, we wrap the ObjFunction in a new ObjClosure structure. The latter has a reference to the underlying bare function along with runtime state for the variables the function closes over.&lt;/p&gt;
&lt;aside name=&quot;raw&quot; readability=&quot;5.3888888888889&quot;&gt;&lt;p&gt;The Lua implementation refers to the raw function object containing the bytecode as a “prototype”, which is a great word to describe this, except that word also gets overloaded to refer to &lt;a href=&quot;https://en.wikipedia.org/wiki/Prototype-based_programming&quot;&gt;prototypal inheritance&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/obj-closure.png&quot; alt=&quot;An ObjClosure with a reference to an ObjFunction.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We’ll wrap every function in an ObjClosure, even if the function doesn’t actually close over and capture any surrounding local variables. This is a little wasteful, but it simplifies the VM because we can always assume that the function we’re calling is an ObjClosure. That new struct starts out like this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;add after struct &lt;em&gt;sObjString&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
  &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;              
  &lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, add after struct &lt;em&gt;sObjString&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Right now, it simply points to an ObjFunction and adds the necessary object header stuff. Grinding through the usual ceremony for adding a new object type to clox, we declare a C function to create a new closure:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                 
&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;add after struct &lt;em&gt;ObjClosure&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, add after struct &lt;em&gt;ObjClosure&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then implement it:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;add after &lt;em&gt;allocateObject&lt;/em&gt;()&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;               
  &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOCATE_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJ_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                               
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                             
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                             
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, add after &lt;em&gt;allocateObject&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;It takes a pointer to the ObjFunction it wraps. It also initializes the type field to a new type:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;in enum &lt;em&gt;ObjType&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OBJ_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OBJ_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, in enum &lt;em&gt;ObjType&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And when we’re done with a closure, we release its memory:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                       
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;memory.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;freeObject&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                         
      &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                 
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                           
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;memory.c&lt;/em&gt;, in &lt;em&gt;freeObject&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;We only free the ObjClosure itself, not the ObjFunction. That’s because the closure doesn’t &lt;em&gt;own&lt;/em&gt; the function. There may be multiple closures that all reference the same function, and none of them claims any special privilege over it. We can’t free the ObjFunction until &lt;em&gt;all&lt;/em&gt; objects referencing it are gone&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;including even the surrounding function whose constant table contains it. Tracking that sounds tricky, and it is! That’s why we’ll write a garbage collector soon to manage it for us.&lt;/p&gt;
&lt;p&gt;We also have the usual &lt;span name=&quot;macro&quot;&gt;macros&lt;/span&gt; for checking a value’s type:&lt;/p&gt;
&lt;aside name=&quot;macro&quot; readability=&quot;3&quot;&gt;&lt;p&gt;Perhaps I should have defined a macro to make it easier to generate these macros. Maybe that would be a little too meta.&lt;/p&gt;
&lt;/aside&gt;&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define OBJ_TYPE(value)         (AS_OBJ(value)-&amp;gt;type)         &lt;/span&gt;
&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define IS_CLOSURE(value)       isObjType(value, OBJ_CLOSURE) &lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define IS_FUNCTION(value)      isObjType(value, OBJ_FUNCTION)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And to cast a value:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define IS_STRING(value)        isObjType(value, OBJ_STRING) &lt;/span&gt;
&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define AS_CLOSURE(value)       ((ObjClosure*)AS_OBJ(value)) &lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define AS_FUNCTION(value)      ((ObjFunction*)AS_OBJ(value))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Closures are first-class objects, so you can print them:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                      
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;printObject&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                             
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;fn %s&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                      
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;printObject&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;They display exactly as ObjFunction does. From the user’s perspective, the difference between ObjFunction and ObjClosure is purely a hidden implementation detail.&lt;/p&gt;
&lt;p&gt;There’s a funny edge case to handle here. If you enable &lt;code&gt;DEBUG_TRACE_EXECUTION&lt;/code&gt;, the VM prints the stack after each opcode. The stack includes the special function the compiler creates to hold the top level code. That function doesn’t have a name. A user can never get a hold of this hidden function, so that isn’t usually a problem. But our diagnostic code can, so we need to not crash in that case:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                             
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;printObject&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AS_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;script&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                       
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                    
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                           
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;fn %s&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;printObject&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;With that out of the way, we have a working but empty representation for closures.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#compiling-to-closure-objects&quot; name=&quot;compiling-to-closure-objects&quot;&gt;&lt;small&gt;25 . 1 . 1&lt;/small&gt; Compiling to closure objects&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have closure objects but our VM never creates them. The next step is getting the compiler to emit instructions to tell the runtime when to create a new ClosureObj to wrap a given FunctionObj. This happens right at the end of a function declaration:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endCompiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                 
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;function&lt;/em&gt;()&lt;br/&gt;replace 1 line&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;emitBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OP_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;function&lt;/em&gt;(), replace 1 line&lt;/p&gt;
&lt;p&gt;Before, the final bytecode for a declaration was a single &lt;code&gt;OP_CONSTANT&lt;/code&gt; instruction to load the compiled function from the surrounding function’s constant table and push it onto the stack. Now we have a new instruction:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;chunk.h&lt;/em&gt;&lt;br/&gt;in enum &lt;em&gt;OpCode&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;chunk.h&lt;/em&gt;, in enum &lt;em&gt;OpCode&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;OP_CONSTANT&lt;/code&gt;, it takes a single operand that represents a constant table index for the function. But when we get over to the runtime implementation, we do something more interesting.&lt;/p&gt;
&lt;p&gt;First, let’s be diligent VM hackers and slot in disassembler support for it:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;20&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jumpInstruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OP_LOOP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_CALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                          
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byteInstruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OP_CALL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                     
      &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                            
      &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;            
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%-16s %4d &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OP_CLOSURE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        
      &lt;span class=&quot;n&quot;&gt;printValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;       
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                       
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                      
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;, in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;There’s more going on here than we usually have in the disassembler. By the end of the chapter, you’ll discover that &lt;code&gt;OP_CLOSURE&lt;/code&gt; is quite an unusual instruction. It’s straightforward right now&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;just a single byte operand&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;but we’ll be adding to it. This code here anticipates that future.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#interpreting-function-declarations&quot; name=&quot;interpreting-function-declarations&quot;&gt;&lt;small&gt;25 . 1 . 2&lt;/small&gt; Interpreting function declarations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Most of the work we need to do is in the runtime. We have to handle the new instruction, naturally. But we also need to touch every piece of code in the VM that works with ObjFunction and change it to use ObjClosure instead&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;function calls, callframes, etc. We’ll start with the instruction, though:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                      
&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                     
        &lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;READ_CONSTANT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;                              
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                               
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                      
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                      
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Like the &lt;code&gt;OP_CONSTANT&lt;/code&gt; instruction we used before, first we load the compiled function from the constant table. The difference now is that we wrap that function in a new ObjClosure and push the result onto the stack.&lt;/p&gt;
&lt;p&gt;Once you have a closure, you’ll eventually want to call it:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                   
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;callValue&lt;/em&gt;()&lt;br/&gt;replace 3 lines&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                           
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AS_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;callee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_NATIVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                          
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;callValue&lt;/em&gt;(), replace 3 lines&lt;/p&gt;
&lt;p&gt;We remove the code for calling objects whose type is &lt;code&gt;OBJ_FUNCTION&lt;/code&gt;. Since we wrap all functions in ObjClosures, the runtime will never try to invoke a bare ObjFunction anymore. Those objects only live in constant tables and get immediately &lt;span name=&quot;naked&quot;&gt;wrapped&lt;/span&gt; in closures before anything else sees them.&lt;/p&gt;
&lt;aside name=&quot;naked&quot; readability=&quot;2&quot;&gt;&lt;p&gt;We don’t want any naked functions wandering around the VM! What would the neighbors say?&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;We replace the old code with very similar code for calling a closure instead. The only difference is the type of object we pass to &lt;code&gt;call()&lt;/code&gt;. The real changes are over in that function. First, we update its signature:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;function &lt;em&gt;call&lt;/em&gt;()&lt;br/&gt;replace 1 line&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, function &lt;em&gt;call&lt;/em&gt;(), replace 1 line&lt;/p&gt;
&lt;p&gt;Then, in the body, we need to fix everything that referenced the function to handle the fact that we’ve introduced a layer of indirection. First, the arity checking:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;call&lt;/em&gt;()&lt;br/&gt;replace 3 lines&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;        
    &lt;span class=&quot;n&quot;&gt;runtimeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expected %d arguments but got %d.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;         
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;call&lt;/em&gt;(), replace 3 lines&lt;/p&gt;
&lt;p&gt;The only change is that we unwrap the closure to get to the underlying function. The next thing &lt;code&gt;call()&lt;/code&gt; does is create a new CallFrame. We change that to store the closure in the CallFrame and get the bytecode pointer from the closure’s function:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;CallFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;call&lt;/em&gt;()&lt;br/&gt;replace 2 lines&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                      
  &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;call&lt;/em&gt;(), replace 2 lines&lt;/p&gt;
&lt;p&gt;This necessitates changing the declaration of CallFrame too:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;      
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.h&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;CallFrame&lt;/em&gt;&lt;br/&gt;replace 1 line&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.h&lt;/em&gt;, in struct &lt;em&gt;CallFrame&lt;/em&gt;, replace 1 line&lt;/p&gt;
&lt;p&gt;That change triggers a few other cascading changes. Every place in the VM that accessed CallFrame’s function needs to use a closure instead. First, the macro for reading a constant from the current function’s constant table:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;br/&gt;replace 2 lines&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define READ_CONSTANT() \                                             &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;READ_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;   
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#define READ_STRING() AS_STRING(READ_CONSTANT())                      &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;(), replace 2 lines&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;DEBUG_TRACE_EXECUTION&lt;/code&gt; is enabled, it needs to get to the chunk from the closure:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                                
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;br/&gt;replace 2 lines&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;n&quot;&gt;disassembleInstruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;cp&quot;&gt;#endif                                                           &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;(), replace 2 lines&lt;/p&gt;
&lt;p&gt;Likewise, when reporting a runtime error:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;n&quot;&gt;CallFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;                            
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;runtimeError&lt;/em&gt;()&lt;br/&gt;replace 1 line&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;c1&quot;&gt;// -1 because the IP is sitting on the next instruction to be&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;runtimeError&lt;/em&gt;(), replace 1 line&lt;/p&gt;
&lt;p&gt;Almost there. The last piece is the blob of code that sets up the very first CallFrame to begin executing the top level code for a Lox script:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTERPRET_COMPILE_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;                             
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;interpret&lt;/em&gt;()&lt;br/&gt;replace 1 line&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          
  &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                                               
  &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;                              
  &lt;span class=&quot;n&quot;&gt;callValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                      
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                                        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;interpret&lt;/em&gt;(), replace 1 line&lt;/p&gt;
&lt;p&gt;&lt;span name=&quot;pop&quot;&gt;The&lt;/span&gt; compiler still returns a raw ObjFunction when compiling a script. That’s fine, but it means we need to wrap it in an ObjClosure here before the VM can execute it.&lt;/p&gt;
&lt;aside name=&quot;pop&quot; readability=&quot;7.3275362318841&quot;&gt;&lt;p&gt;The code looks a little silly because we still push the original ObjFunction onto the stack. Then we pop it after creating the closure, only to then push the closure. Why put the ObjFunction on there at all? As usual, when you see weird stack stuff going on, it’s to keep the &lt;a href=&quot;http://craftinginterpreters.com/garbage-collection.html&quot;&gt;forthcoming garbage collector&lt;/a&gt; aware of some heap-allocated objects.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;We are back to a working interpreter. The &lt;em&gt;user&lt;/em&gt; can’t tell any difference, but the compiler now generates code to produce a closure for each function declaration. The VM then handles executing those closures. That’s the boring stuff out of the way. Now we’re ready to make these closures actually &lt;em&gt;do&lt;/em&gt; something.&lt;/p&gt;

&lt;p&gt;Our existing instructions for reading and writing local variables are limited to a single function’s stack window. Locals from a surrounding function are outside of the inner function’s window. We’re going to need some new instructions.&lt;/p&gt;
&lt;p&gt;The easiest approach might be an instruction that takes a relative stack slot offset that can reach before the current function’s window. That would work if closed-over variables were always on the stack. But as we saw earlier, these variables sometimes outlive the function where they are declared. That means they won’t always be on the stack.&lt;/p&gt;
&lt;p&gt;The next easiest approach then would be to take any local variable that gets closed over and have it always live on the heap. When the local variable declaration in the surrounding function is executed, the VM allocates memory for it dynamically. That way it can live as long as needed.&lt;/p&gt;
&lt;p&gt;This would be a fine approach if clox didn’t have a single-pass compiler. But that restriction we chose in our implementation makes things harder. Take a look at this example:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// (2)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (3)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the compiler compiles the declaration of &lt;code&gt;x&lt;/code&gt; at &lt;code&gt;(1)&lt;/code&gt; and emits code for the assignment at &lt;code&gt;(2)&lt;/code&gt;. It does that before reaching the declaration of &lt;code&gt;inner()&lt;/code&gt; at &lt;code&gt;(3)&lt;/code&gt; and discovering that &lt;code&gt;x&lt;/code&gt; is in fact closed over. We don’t have an easy way to go back and fix that already-emitted code to treat &lt;code&gt;x&lt;/code&gt; specially. Instead, we want a solution that allows a closed over variable to live on the stack exactly like a normal local variable &lt;em&gt;until the point that is closed over&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately, thanks to the Lua dev team, we have a solution. We use a level of indirection that they call an &lt;strong&gt;upvalue&lt;/strong&gt;. An upvalue refers to a local variable in an enclosing function. Every closure maintains an array of upvalues, one for each surrounding local variable that the closure uses.&lt;/p&gt;
&lt;p&gt;The upvalue points back into the stack to where the variable it captured lives. When the closure needs to access a closed-over variable, it goes through the corresponding upvalue to reach it. When a function declaration is first executed and we create a closure for it, the VM creates the array of upvalues and wires them up to “capture” the surrounding local variables that the closure needs.&lt;/p&gt;
&lt;p&gt;For example, if we throw this program at clox:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The compiler and runtime will conspire together to build up a set of objects in memory like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/open-upvalue.png&quot; alt=&quot;The object graph of the stack, ObjClosure, ObjFunction, and upvalue array.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;That might look overwhelming, but fear not. We’ll work our way through it. The important part is that upvalues serve as the level of indirection we need to continue to find a captured local variable even after it moves off the stack. But before we get to all that, let’s focus on compiling captured variables.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#compiling-upvalues&quot; name=&quot;compiling-upvalues&quot;&gt;&lt;small&gt;25 . 2 . 1&lt;/small&gt; Compiling upvalues&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As usual, we want to do as much work as possible during compilation to keep execution simple and fast. Since local variables are lexically scoped in Lox, we have enough knowledge at compile time to resolve which surrounding local variables a function accesses and where those locals are declared. That in turn means we know &lt;em&gt;how many&lt;/em&gt; upvalues a closure needs, &lt;em&gt;which&lt;/em&gt; variables they capture, and &lt;em&gt;which stack slots&lt;/em&gt; contain those variables in the declaring function’s stack window.&lt;/p&gt;
&lt;p&gt;Currently, when the compiler resolves an identifier, it walks the block scopes for the current function from innermost to outermost. If we don’t find the variable in that function, we assume the variable must be a global variable. We don’t consider the local scopes of enclosing functions&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;they get skipped right over. The first change then is inserting a resolution step for those outer local scopes:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                          
    &lt;span class=&quot;n&quot;&gt;getOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_GET_LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   
    &lt;span class=&quot;n&quot;&gt;setOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_SET_LOCAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;namedVariable&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_GET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                 
    &lt;span class=&quot;n&quot;&gt;setOp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OP_SET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                 
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;namedVariable&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;This new &lt;code&gt;resolveUpvalue()&lt;/code&gt; function looks for a local variable declared in any of the surrounding functions. If it finds one, it returns an “upvalue index” for that variable. (We’ll get into what that means later.) Otherwise, it returns -1 to indicate the variable wasn’t found. If it was found, we use these two new instructions for reading or writing to the variable through its upvalue:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_SET_GLOBAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;chunk.h&lt;/em&gt;&lt;br/&gt;in enum &lt;em&gt;OpCode&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_GET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;OP_SET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_EQUAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;chunk.h&lt;/em&gt;, in enum &lt;em&gt;OpCode&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We’re implementing this sort of top-down, so I’ll show you how these work at runtime soon. The part to focus on now is how the compiler actually resolves the identifier:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;15&quot;&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;add after &lt;em&gt;resolveLocal&lt;/em&gt;()&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resolveUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enclosing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enclosing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                        
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                         

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, add after &lt;em&gt;resolveLocal&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;We call this after failing to resolve a local variable in the current function’s scope, so we know the variable isn’t in the current compiler. Recall that Compiler stores a pointer to the Compiler for the enclosing function and these pointers form a linked chain that goes all the way to the root Compiler for the top-level code. Thus, if the enclosing Compiler is &lt;code&gt;NULL&lt;/code&gt;, we know we’ve reached the outermost function without finding a local variable. The variable must be &lt;span name=&quot;undefined&quot;&gt;global&lt;/span&gt; so we return -1.&lt;/p&gt;
&lt;aside name=&quot;undefined&quot; readability=&quot;6&quot;&gt;&lt;p&gt;It might end up being an entirely undefined variable and not even global. But in Lox, we don’t detect that error until runtime, so from the compiler’s perspective, it’s “hopefully global.”&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Otherwise, we try to resolve the identifier as a &lt;em&gt;local&lt;/em&gt; variable in the &lt;em&gt;enclosing&lt;/em&gt; compiler. In other words, we look for it right outside the current function. For example:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (1)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When compiling the identifier expression at &lt;code&gt;(1)&lt;/code&gt;, &lt;code&gt;resolveUpvalue()&lt;/code&gt; looks for a local variable &lt;code&gt;x&lt;/code&gt; declared in &lt;code&gt;outer()&lt;/code&gt;. If found&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;like it is in this example&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;then we’ve successfully resolved the variable. We create an upvalue so that the inner function can access the variable through that. The upvalue is created here:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;add after &lt;em&gt;resolveLocal&lt;/em&gt;()&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
  &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                       
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                       
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, add after &lt;em&gt;resolveLocal&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;The compiler keeps an array of upvalue structures to track the closed-over identifiers that it has resolved in the body of each function. Remember how the compiler’s Local array mirrors the stack slot indexes where locals live at runtime? This new upvalue array works the same way. The indexes in the compiler’s array match the indexes where upvalues will live in the ObjClosure at runtime.&lt;/p&gt;
&lt;p&gt;This function adds a new upvalue to that array. It also keeps track of the number of upvalues the function uses. It stores that count directly in the ObjFunction itself because we’ll also &lt;span name=&quot;span&quot;&gt;need that number for use at runtime.&lt;/span&gt;&lt;/p&gt;
&lt;aside name=&quot;span&quot; readability=&quot;4&quot;&gt;&lt;span name=&quot;span&quot;/&gt;
&lt;p&gt;&lt;span name=&quot;span&quot;&gt;Like constants and function arity, the upvalue count is another one of those little pieces of data that forms the bridge between the compiler and runtime.&lt;/span&gt;&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;&lt;span name=&quot;span&quot;&gt;The &lt;code&gt;index&lt;/code&gt; field tracks the closed-over local variable’s slot index. That way the compiler knows &lt;em&gt;which&lt;/em&gt; variable in the enclosing function needs to be captured. We’ll circle back to what that &lt;code&gt;isLocal&lt;/code&gt; field is for before too long. Finally, &lt;code&gt;addUpvalue()&lt;/code&gt; returns the index of the created upvalue in the function’s upvalue list. That index becomes the operand to the &lt;code&gt;OP_GET_UPVALUE&lt;/code&gt; and &lt;code&gt;OP_SET_UPVALUE&lt;/code&gt; instructions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span name=&quot;span&quot;&gt;That’s the basic idea for resolving upvalues, but the function isn’t fully baked. A closure may reference the same variable in a surrounding function multiple times. In that case, we don’t want to waste time and memory creating a separate upvalue for each identifier expression. To fix that, before we add a new upvalue, we first check to see if the function already has an upvalue that closes over that variable:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;17&quot;&gt;&lt;span name=&quot;span&quot;/&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span name=&quot;span&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;addUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                              
    &lt;span class=&quot;n&quot;&gt;Upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;                          
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                         
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                   
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                     
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;addUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;If we find an upvalue in the array whose slot index matches the one we’re adding, we just return that &lt;em&gt;upvalue&lt;/em&gt; index and reuse it. Otherwise, we fall through and add the new upvalue.&lt;/p&gt;
&lt;p&gt;These two functions access and modify a bunch of new state, so let’s define that. First, we add the upvalue count to ObjFunction:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;ObjFunction&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;Chunk&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, in struct &lt;em&gt;ObjFunction&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We’re conscientious C programmers, so we zero-initialize that when an ObjFunction is first allocated:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;newFunction&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;newFunction&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;In the compiler, we add a field for the upvalue array:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;Compiler&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;Upvalue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UINT8_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scopeDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in struct &lt;em&gt;Compiler&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For simplicity, I gave it a fixed size. The &lt;code&gt;OP_GET_UPVALUE&lt;/code&gt; and &lt;code&gt;OP_SET_UPVALUE&lt;/code&gt; instructions encode an upvalue index using a single byte operand, so there’s a restriction on how many upvalues a function can have&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;how many unique variables it can close over. Given that, we can afford a static array that large. We also need to make sure the compiler doesn’t overflow that limit:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                            
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                              
&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;addUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT8_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                             
    &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Too many closure variables in function.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                              
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;addUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Finally, the Upvalue struct type itself:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;add after struct &lt;em&gt;Local&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Upvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, add after struct &lt;em&gt;Local&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;index&lt;/code&gt; field stores which local slot the upvalue is capturing. The &lt;code&gt;isLocal&lt;/code&gt; field deserves its own section, which we’ll get to next.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#flattening-upvalues&quot; name=&quot;flattening-upvalues&quot;&gt;&lt;small&gt;25 . 2 . 2&lt;/small&gt; Flattening upvalues&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the example I showed before, the closure is accessing a variable declared in the immediately enclosing function. Lox also supports accessing local variables declared in &lt;em&gt;any&lt;/em&gt; enclosing scope, as in:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we’re accessing &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;inner()&lt;/code&gt;. That variable is defined not in &lt;code&gt;middle()&lt;/code&gt;, but all the way out in &lt;code&gt;outer()&lt;/code&gt;. We need to handle cases like this too. You &lt;em&gt;might&lt;/em&gt; think that this isn’t much harder since the variable will simply be somewhere farther down on the stack. But consider this devious example:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;create inner closure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;return from outer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you run this, it should print:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
return from outer
create inner closure
value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I know, it’s convoluted. The important part is that &lt;code&gt;outer()&lt;/code&gt;&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;where &lt;code&gt;x&lt;/code&gt; is declared&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;returns and pops all of its variables off the stack before the &lt;em&gt;declaration&lt;/em&gt; of &lt;code&gt;inner()&lt;/code&gt; executes. So, at the point in time that we create the closure for &lt;code&gt;inner()&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is already off the stack.&lt;/p&gt;
&lt;p&gt;Here, I traced out the execution flow for you:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/execution-flow.png&quot; alt=&quot;Tracing through the previous example program.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;See how &lt;code&gt;x&lt;/code&gt; is popped (1) before it is captured (2) and then later accessed (3)? We really have two problems:&lt;/p&gt;
&lt;ol readability=&quot;-0.5&quot;&gt;&lt;li readability=&quot;0&quot;&gt;
&lt;p&gt;We need to resolve local variables that are declared in surrounding functions beyond the immediately enclosing one.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;We need to be able to capture variables that have already left the stack.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Fortunately, we’re in the middle of adding upvalues to the VM, and upvalues are explicitly designed for tracking variables that have escaped the stack. So, in a clever bit of self-reference, we can use upvalues to allow upvalues to capture variables declared outside of the immediately surrounding function.&lt;/p&gt;
&lt;p&gt;The solution is to allow a closure to capture either a local variable or &lt;em&gt;an existing upvalue&lt;/em&gt; in the enclosing function. If a deeply nested function references a local variable declared several hops away, we’ll thread it through all of the intermediate functions by having each function capture an upvalue for the next function to grab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/linked-upvalues.png&quot; alt=&quot;An upvalue in inner() points to an unvalue in middle(), which points to a local variable in outer().&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In the above example, &lt;code&gt;middle()&lt;/code&gt; captures the local variable &lt;code&gt;x&lt;/code&gt; in the immediately enclosing function &lt;code&gt;outer()&lt;/code&gt; and stores it in its own upvalue. It does this even though &lt;code&gt;middle()&lt;/code&gt; itself doesn’t reference &lt;code&gt;x&lt;/code&gt;. Then, when the declaration of &lt;code&gt;inner()&lt;/code&gt; executes, its closure grabs the &lt;em&gt;upvalue&lt;/em&gt; from &lt;code&gt;middle()&lt;/code&gt; that captured &lt;code&gt;x&lt;/code&gt;. A function only ever captures&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;either a local or upvalue&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;from the immediately surrounding function, which is guaranteed to still be around at the point that the inner function declaration executes.&lt;/p&gt;
&lt;p&gt;In order to implement this, &lt;code&gt;resolveUpvalue()&lt;/code&gt; becomes recursive:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                      
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                       
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;resolveUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolveUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enclosing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                       
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;resolveUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;It’s only another three lines of code, but I found this function really challenging to get right the first time. This in spite of the fact that I wasn’t inventing anything new, just porting the concept over from Lua. Most recursive functions either do all their work before the recursive call (a &lt;em&gt;pre-order traversal&lt;/em&gt;, or “on the way down”), or they do all the work after the recursive call (a &lt;em&gt;post-order traversal&lt;/em&gt;, or “on the way back up”). This function does both. The recursive call is right in the middle.&lt;/p&gt;
&lt;p&gt;We’ll walk through it slowly. First, we look for a matching local variable in the enclosing function. If we find one, we capture that local and return. That’s the &lt;span name=&quot;base&quot;&gt;base case.&lt;/span&gt;&lt;/p&gt;
&lt;aside name=&quot;base&quot; readability=&quot;6&quot;&gt;&lt;span name=&quot;base&quot;/&gt;
&lt;p&gt;&lt;span name=&quot;base&quot;&gt;The other base case, of course, is if there is no enclosing function. In that case, the variable can’t be resolved lexically and is treated as global.&lt;/span&gt;&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;&lt;span name=&quot;base&quot;&gt;Otherwise, we look for a local variable beyond the immediately enclosing function. We do that by recursively calling &lt;code&gt;resolveUpvalue()&lt;/code&gt; on the &lt;em&gt;enclosing&lt;/em&gt; compiler, not the current one. This series of &lt;code&gt;resolveUpvalue()&lt;/code&gt; calls works its way along the chain of nested compilers until it hits one of the base cases&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;either it finds an actual local variable to capture or it runs out of compilers.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Assuming a local variable is found, the mostly deeply &lt;span name=&quot;outer&quot;&gt;nested&lt;/span&gt; call to &lt;code&gt;resolveUpvalue()&lt;/code&gt; captures it as a local and returns the upvalue index. That returns to the next call for the inner function declaration. That call captures the &lt;em&gt;upvalue&lt;/em&gt; from the surrounding function, and so on. As each nested call to &lt;code&gt;resolveUpvalue()&lt;/code&gt; returns, we drill back down into the innermost function declaration where the identifier we are resolving appears. At each step along the way, we add an upvalue to the intervening function and pass the resulting upvalue index down to the next call.&lt;/p&gt;
&lt;aside name=&quot;outer&quot; readability=&quot;6&quot;&gt;&lt;p&gt;Each recursive call to &lt;code&gt;resolveUpvalue()&lt;/code&gt; walks &lt;em&gt;out&lt;/em&gt; one level of function nesting. So an inner &lt;em&gt;recursive call&lt;/em&gt; refers to an &lt;em&gt;outer&lt;/em&gt; nested declaration. The innermost recursive call to &lt;code&gt;resolveUpvalue()&lt;/code&gt; that finds the local variable will be for the &lt;em&gt;outermost&lt;/em&gt; function, just inside the enclosing function where that variable is actually declared.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;It might help to walk through the original example when resolving &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/recursion.png&quot; alt=&quot;Tracing through a recursive call to resolveUpvalue().&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Note that the new call to &lt;code&gt;addUpvalue()&lt;/code&gt; passes &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;isLocal&lt;/code&gt; parameter. Now you see that that flag controls whether the closure captures a local variable or an upvalue from the surrounding function.&lt;/p&gt;
&lt;p&gt;By the time the compiler reaches the end of a function declaration, every variable reference has been resolved as either a local, an upvalue, or a global. Each upvalue may in turn capture a local variable from the surrounding function, or an upvalue in the case of transitive closures. We finally have enough data to emit bytecode which creates a closure at runtime that captures all of the correct variables:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;emitBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OP_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeConstant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;function&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;emitByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;      
    &lt;span class=&quot;n&quot;&gt;emitByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                      
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;function&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OP_CLOSURE&lt;/code&gt; instruction is unique in that it has a variably-sized encoding. For each upvalue the closure captures, there are two single-byte operands. Each pair of operands specifies what that upvalue captures. If the first byte is one, it captures a local variable in the enclosing function. If zero, it captures one of the function’s upvalues. The next byte is the local slot or upvalue index to capture.&lt;/p&gt;
&lt;p&gt;This odd encoding means we need some bespoke support in the disassembler:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                              
&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
      &lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_FUNCTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;                       
          &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;                    
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;         
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;                     
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;                       
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%04d      |                     %s %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        
               &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;local&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;upvalue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                          
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                             
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;, in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;For example, take this script:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we disassemble the instruction that creates the closure for &lt;code&gt;inner()&lt;/code&gt; it prints:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
0004    9 OP_CLOSURE          2 &amp;lt;fn inner&amp;gt;
0006      |                     upvalue 0
0008      |                     local 1
0010      |                     upvalue 1
0012      |                     local 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have two other, simpler instructions to add disassembler support for:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_SET_GLOBAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                          
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constantInstruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OP_SET_GLOBAL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_GET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                         
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byteInstruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OP_GET_UPVALUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_SET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                         
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byteInstruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OP_SET_UPVALUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_EQUAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                               
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;, in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;These both have a single byte operand, so there’s nothing exciting going on.&lt;/p&gt;
&lt;p&gt;With that, our compiler is where we want it. For each function declaration, it outputs an &lt;code&gt;OP_CLOSURE&lt;/code&gt; instruction followed by a series of operand byte pairs for each upvalue it needs to capture at runtime. It’s time to hop over to that side of the VM and get things running.&lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;OP_CLOSURE&lt;/code&gt; instruction is now followed by the series of bytes that specify the upvalues the ObjClosure should own. Before we process those operands, we need a runtime representation for upvalues:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;add after struct &lt;em&gt;sObjString&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sUpvalue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               
  &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, add after struct &lt;em&gt;sObjString&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We know upvalues must manage closed-over variables that no longer live on the stack, which implies some amount of dynamic allocation. The easiest way to do that in our VM is by building on the object system we already have. That way, when we implement a garbage collector in &lt;a href=&quot;http://craftinginterpreters.com/garbage-collection.html&quot;&gt;the next chapter&lt;/a&gt;, the GC can manage memory for upvalues too.&lt;/p&gt;
&lt;p&gt;Thus, our runtime upvalue structure is an ObjUpvalue with the typical Obj header field. Following that is the field that points to the closed-over variable. Note that this is a &lt;em&gt;pointer&lt;/em&gt; to a Value, not a Value itself. It’s a reference to a &lt;em&gt;variable&lt;/em&gt;, not a &lt;em&gt;value&lt;/em&gt;. This is important because it means that when we assign to the variable the upvalue captures, we’re assigning to the actual variable, not a copy. For example:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;before&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;assigned&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program should print “assigned” even though the closure assigns to &lt;code&gt;x&lt;/code&gt; and the surrounding function accesses it.&lt;/p&gt;
&lt;p&gt;Because upvalues are objects, we’ve got all the usual object machinery. A constructor-like function:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;n&quot;&gt;ObjString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;copyString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;add after &lt;em&gt;copyString&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                 
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                       
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, add after &lt;em&gt;copyString&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;It takes the address of the slot where the closed-over variable lives. Here is the implementation:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;add after &lt;em&gt;copyString&lt;/em&gt;()&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                         
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOCATE_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJ_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                             
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                             
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, add after &lt;em&gt;copyString&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;We simply initialize the object and store the pointer. That requires a new object type:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OBJ_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;in enum &lt;em&gt;ObjType&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OBJ_UPVALUE&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, in enum &lt;em&gt;ObjType&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And on the back side, a destructor-like function:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                          
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;memory.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;freeObject&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;          
      &lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                   
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;memory.c&lt;/em&gt;, in &lt;em&gt;freeObject&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Multiple closures can close over the same variable, so ObjUpvalue does not own the variable it references. Thus, the only thing to free is the ObjUpvalue itself.&lt;/p&gt;
&lt;p&gt;And, finally, to print:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                  
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS_CSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                          
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;printObject&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OBJ_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                 
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;upvalue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                          
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;printObject&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Printing isn’t useful to end users. Upvalues are only objects so that we can take advantage of the VM’s memory management. They aren’t first-class values that a Lox user can directly access in a program. So this code will never actually execute… but it keeps the compiler from yelling at us about an unhandled switch case so here we are.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#upvalues-in-closures&quot; name=&quot;upvalues-in-closures&quot;&gt;&lt;small&gt;25 . 3 . 1&lt;/small&gt; Upvalues in closures&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I first introduced upvalues, I said each closure has an array of them. We’ve finally worked our way back to implementing that:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;ObjClosure&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, in struct &lt;em&gt;ObjClosure&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span name=&quot;count&quot;&gt;Different&lt;/span&gt; closures may have a different number of upvalues, so we need a dynamic array. The upvalues themselves are dynamically allocated too, so we end up with a double pointer&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;a pointer to a dynamically allocated array of pointers to upvalues. We also store the number of elements in the array.&lt;/p&gt;
&lt;aside name=&quot;count&quot; readability=&quot;6&quot;&gt;&lt;p&gt;Storing the upvalue count in the closure is redundant because the ObjFunction that the ObjClosure references also keeps that count. As usual, this weird code is to appease the GC. The collector may need to know an ObjClosure’s upvalue array size after the closure’s corresponding ObjFunction has already been freed.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;When we create an ObjClosure, we allocate an upvalue array of the proper size, which we determined at compile time and stored in the ObjFunction:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                         
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;newClosure&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOCATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                    
    &lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                     
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOCATE_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJ_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;          
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;newClosure&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Before creating the closure object itself, we allocate the array of upvalues and initialize them all to &lt;code&gt;NULL&lt;/code&gt;. This weird ceremony around memory is a careful dance to please the (forthcoming) garbage collection deities. It ensures the memory manager never sees uninitialized memory.&lt;/p&gt;
&lt;p&gt;Then we store the array in the new closure, as well as copying the count over from the ObjFunction:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;newClosure&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  
  &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;newClosure&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;When an ObjClosure is freed, we also free the upvalue array:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                  
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;memory.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;freeObject&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
      &lt;span class=&quot;n&quot;&gt;FREE_ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
      &lt;span class=&quot;n&quot;&gt;FREE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjClosure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;memory.c&lt;/em&gt;, in &lt;em&gt;freeObject&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;ObjClosure does not own the ObjUpvalue objects itself, but it does own its dynamic array that contains &lt;em&gt;pointers&lt;/em&gt; to those upvalues.&lt;/p&gt;
&lt;p&gt;We fill the upvalue array over in the interpreter when it creates a closure. This is where we walk through all of the operands after &lt;code&gt;OP_CLOSURE&lt;/code&gt; to see what kind of upvalue each slot captures:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OBJ_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;                                         
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalueCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;               
          &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                                
          &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                                  
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLocal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                
            &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captureUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                      
            &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;     
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                             
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                               
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                                          
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;This code is the magic moment when a closure comes to life and captures variables. We iterate over each upvalue the closure expects. For each one, we read a pair of operand bytes. If the upvalue closes over a local variable in the enclosing function, we let &lt;code&gt;captureUpvalue()&lt;/code&gt; do the work.&lt;/p&gt;
&lt;p&gt;Otherwise, we capture an upvalue from the surrounding function. An &lt;code&gt;OP_CLOSURE&lt;/code&gt; instruction is emitted at the end of a function declaration. At the moment that we are executing that declaration, the &lt;em&gt;current&lt;/em&gt; function is the surrounding one. That means the current function’s closure is stored in the CallFrame at the top of the callstack. So, to grab an upvalue from the enclosing function, we can read it right from the &lt;code&gt;frame&lt;/code&gt; local variable, which caches a reference to that CallFrame.&lt;/p&gt;
&lt;p&gt;Closing over a local variable is more interesting. Most of the work happens in a separate function, but first we calculate the argument to pass to it. We need to grab a pointer to the captured local’s slot in the surrounding function’s stack window. That window begins at &lt;code&gt;frame-&amp;gt;slots&lt;/code&gt;, which points to slot zero. Adding &lt;code&gt;index&lt;/code&gt; offsets that to the local slot we want to capture. Then we go to:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;10&quot;&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;add after &lt;em&gt;callValue&lt;/em&gt;()&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;captureUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, add after &lt;em&gt;callValue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;This seems a little silly. All it does is create a new ObjUpvalue that captures the given stack slot and returns it. Did we need a separate function for this? Well, no, not &lt;em&gt;yet&lt;/em&gt;. But you know we are going to end up sticking more code in here.&lt;/p&gt;
&lt;p&gt;First, let’s wrap up what we’re working on. Back in the interpreter code for handling &lt;code&gt;OP_CLOSURE&lt;/code&gt;, we eventually finish iterating through the upvalue array and initialize each one. When that completes, we have a new closure with an array full of upvalues pointing to variables.&lt;/p&gt;
&lt;p&gt;With that in hand, we can implement the instructions for using those upvalues:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                 
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_GET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                            
        &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                     
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                          
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                 
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_EQUAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                  
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;The operand is the index into the current function’s upvalue array. So we simply look up the corresponding upvalue and dereference its location pointer to read the value in that slot. Setting a variable is similar:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                     
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_SET_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                
        &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;READ_BYTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                         
        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                              
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                     
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_EQUAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                      
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;We &lt;span name=&quot;assign&quot;&gt;take&lt;/span&gt; the value on top of the stack and store it into the slot pointed to by the chosen upvalue. Just as with the instructions for local variables, it’s important that these instructions are fast. User programs are constantly reading and writing variables, so if that’s slow, everything is slow. And, as usual, the way we make them fast is by keeping them simple. These two new instructions are pretty good: no control flow, no complex arithmetic, just a couple of pointer indirections and a &lt;code&gt;push()&lt;/code&gt;.&lt;/p&gt;
&lt;aside name=&quot;assign&quot; readability=&quot;6&quot;&gt;&lt;p&gt;The set instruction doesn’t &lt;em&gt;pop&lt;/em&gt; the value from the stack because, remember, assignment is an expression in Lox. So the result of the assignment&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;the assigned value&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;needs to remain on the stack for the surrounding expression.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This is a milestone. As long as all of the variables remain on the stack, we have working closures:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;outside&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run this and it correctly prints “outside”.&lt;/p&gt;

&lt;p&gt;Of course, a key feature of closures is that they hold onto the variable as long as needed, even after the function that declares the variable has returned. Here’s another example that &lt;em&gt;should&lt;/em&gt; work:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;outside&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you run it right now… who knows what it does? At runtime, it will end up reading from a stack slot that no longer contains the closed-over variable. Like I’ve mention a few times, the crux of the issue is that variables in closures don’t have stack semantics. That means we’ve got to hoist them off the stack when the function where they were declared returns. This final section of the chapter does that.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#values-and-variables&quot; name=&quot;values-and-variables&quot;&gt;&lt;small&gt;25 . 4 . 1&lt;/small&gt; Values and variables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before we get to writing code, I want to dig into an important semantic point. Does a closure close over a &lt;em&gt;value&lt;/em&gt; or a &lt;em&gt;variable?&lt;/em&gt; This isn’t purely an &lt;span name=&quot;academic&quot;&gt;academic&lt;/span&gt; question. I’m not just splitting hairs. Consider:&lt;/p&gt;
&lt;aside name=&quot;academic&quot; readability=&quot;3&quot;&gt;&lt;p&gt;If Lox didn’t allow assignment, it &lt;em&gt;would&lt;/em&gt; be an academic question.&lt;/p&gt;
&lt;/aside&gt;&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;initial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;updated&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;globalSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;globalGet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;globalSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;globalGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The outer &lt;code&gt;main()&lt;/code&gt; function creates two closures and stores them in &lt;span name=&quot;global&quot;&gt;global&lt;/span&gt; variables so that they outlive the execution of &lt;code&gt;main()&lt;/code&gt; itself. Both of those closures capture the same variable. The first closure assigns a new value to it and the second closure reads the variable.&lt;/p&gt;
&lt;aside name=&quot;global&quot; readability=&quot;5&quot;&gt;&lt;p&gt;The fact that I’m using a couple of global variables isn’t significant. I needed some way to return two values from a function and without any kind of collection type in Lox, my options were limited.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;What does the call to &lt;code&gt;globalGet()&lt;/code&gt; print? If closures capture &lt;em&gt;values&lt;/em&gt; then each closure gets its own copy of &lt;code&gt;a&lt;/code&gt; with the value that &lt;code&gt;a&lt;/code&gt; had at the point in time that the closure’s function declaration executed. The call to &lt;code&gt;globalSet()&lt;/code&gt; will modify &lt;code&gt;set()&lt;/code&gt;’s copy of &lt;code&gt;a&lt;/code&gt;, but &lt;code&gt;get()&lt;/code&gt;’s copy will be unaffected. Thus, the call to &lt;code&gt;globalGet()&lt;/code&gt; will print “initial”.&lt;/p&gt;
&lt;p&gt;If closures close over variables, then &lt;code&gt;get()&lt;/code&gt; and &lt;code&gt;set()&lt;/code&gt; will both capture&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;reference&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;the &lt;em&gt;same mutable variable&lt;/em&gt;. When &lt;code&gt;set()&lt;/code&gt; changes &lt;code&gt;a&lt;/code&gt;, it changes the same &lt;code&gt;a&lt;/code&gt; that &lt;code&gt;get()&lt;/code&gt; reads from. There is only one &lt;code&gt;a&lt;/code&gt;. That in turn implies the call to &lt;code&gt;globalGet()&lt;/code&gt; will print “updated”.&lt;/p&gt;
&lt;p&gt;Which is it? The answer for Lox and most other languages I know with closures is the latter. Closures capture variables. You can think of them as capturing &lt;em&gt;the place the value lives&lt;/em&gt;. This is important to keep in mind as we deal with closed-over variables that are no longer on the stack. When a variable moves to the heap, we need to ensure that all closures capturing that variable retain a reference to its &lt;em&gt;one&lt;/em&gt; new location. That way, when the variable is mutated, all closures see the change.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#closing-upvalues&quot; name=&quot;closing-upvalues&quot;&gt;&lt;small&gt;25 . 4 . 2&lt;/small&gt; Closing upvalues&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We know that local variables always start out on the stack. This is faster, and lets our single-pass compiler emit code before it discovers the variable has been captured. We also know that closed-over variables need to move to the heap if the closure outlives the function where the captured variable is declared.&lt;/p&gt;
&lt;p&gt;Following Lua, we’ll use &lt;strong&gt;open upvalue&lt;/strong&gt; to refer to an upvalue that points to a local variable still on the stack. When a variable moves to the heap, we are &lt;em&gt;closing&lt;/em&gt; the upvalue and the result is, naturally, a &lt;strong&gt;closed upvalue&lt;/strong&gt;. The two questions we need to answer are:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Where on the heap does the closed-over variable go?&lt;/li&gt;
&lt;li&gt;When do we close the upvalue?&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The answer to the first question is easy. We already have a convenient object on the heap that represents a reference to a variable&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;ObjUpvalue itself. The closed-over variable will move into a new field right inside the ObjValue struct. That way we don’t need to do any additional heap allocation to close an upvalue.&lt;/p&gt;
&lt;p&gt;The second question is straightforward too. As long as the variable is on the stack, there may be code that refers to it there and that code must work correctly. So the logical time to hoist the variable to the heap is as late as possible. If we move the local variable right when it goes out of scope, we are certain that no code after that point will try to access it from the stack. &lt;span name=&quot;after&quot;&gt;After&lt;/span&gt; the variable is out of scope, the compiler will have reported an error if any code tried to use it.&lt;/p&gt;
&lt;aside name=&quot;after&quot; readability=&quot;4&quot;&gt;&lt;p&gt;By “after” here, I mean in the lexical or textual sense&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;code past the &lt;code&gt;}&lt;/code&gt; for the block containing the declaration of the closed-over variable.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;The compiler already emits an &lt;code&gt;OP_POP&lt;/code&gt; instruction when a local variable goes out of scope. If a variable is captured by a closure, we will instead emit a different instruction to hoist that variable out of the stack and into its corresponding upvalue. To do that, the compiler needs to know which &lt;span name=&quot;param&quot;&gt;locals&lt;/span&gt; are closed over.&lt;/p&gt;
&lt;aside name=&quot;param&quot; readability=&quot;4&quot;&gt;&lt;p&gt;The compiler doesn’t pop parameters and locals declared immediately inside the body of a function. We’ll handle those too, in the runtime.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;The compiler already maintains an array of Upvalue structs for each local variable in the function to track exactly that state. That array is good for answering “Which variables does this closure use?” But it’s poorly suited for answering, “Does &lt;em&gt;any&lt;/em&gt; function capture this local variable?” In particular, once the Compiler for some closure has finished, the Compiler for the enclosing function whose variable has been captured no longer has access to any of the upvalue state.&lt;/p&gt;
&lt;p&gt;In other words, the compiler maintains pointers from upvalues to the locals they capture, but not in the other direction. So we first need to add some extra tracking inside the existing Local struct so that we can tell if a given local is captured by a closure:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;Local&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isCaptured&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in struct &lt;em&gt;Local&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This field is &lt;code&gt;true&lt;/code&gt; if the local is captured by any later nested function declaration. Initially, all locals are not captured:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;addLocal&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCaptured&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;addLocal&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;&lt;span name=&quot;zero&quot;&gt;Likewise&lt;/span&gt;, the special “slot zero local” that the compiler implicitly declares:&lt;/p&gt;
&lt;aside name=&quot;zero&quot; readability=&quot;4&quot;&gt;&lt;p&gt;Later in the book, it &lt;em&gt;will&lt;/em&gt; become possible for a user to capture this variable. Just building some anticipation here.&lt;/p&gt;
&lt;/aside&gt;&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;initCompiler&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCaptured&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;initCompiler&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;When resolving an identifier, if we end up creating an upvalue for a local variable, we mark it as captured:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                     
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;resolveUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enclosing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCaptured&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compiler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;resolveUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Now, at the end of a block scope when the compiler emits code to free the stack slots for the locals, we can tell which ones need to get hoisted onto the heap. We’ll use a new instruction for that:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;                           
         &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     
            &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scopeDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                            
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;endScope&lt;/em&gt;()&lt;br/&gt;replace 1 line&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCaptured&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;emitByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OP_CLOSE_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                             
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                  
      &lt;span class=&quot;n&quot;&gt;emitByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OP_POP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                       
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                         
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;compiler.c&lt;/em&gt;, in &lt;em&gt;endScope&lt;/em&gt;(), replace 1 line&lt;/p&gt;
&lt;p&gt;The instruction requires no operand. We know that the variable will always be right on top of the stack at the point that this instruction executes. We declare the instruction:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_CLOSURE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;chunk.h&lt;/em&gt;&lt;br/&gt;in enum &lt;em&gt;OpCode&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_CLOSE_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;OP_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;chunk.h&lt;/em&gt;, in enum &lt;em&gt;OpCode&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And add trivial disassembler support for it:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                      
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_CLOSE_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;simpleInstruction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OP_CLOSE_UPVALUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                                        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;debug.c&lt;/em&gt;, in &lt;em&gt;disassembleInstruction&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Excellent. Now the generated bytecode tells the runtime exactly when each captured local variable must move to the heap. Better, it only does so for the locals that &lt;em&gt;are&lt;/em&gt; used by a closure and need this special treatment. This aligns with our general performance goal that we only want users to pay for functionality that they use. Variables that aren’t used by closures live and die entirely on the stack just as they did before.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#tracking-open-upvalues&quot; name=&quot;tracking-open-upvalues&quot;&gt;&lt;small&gt;25 . 4 . 3&lt;/small&gt; Tracking open upvalues&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s move over to the runtime side. Before we can interpret &lt;code&gt;OP_CLOSE_UPVALUE&lt;/code&gt; instructions, we have an issue to resolve. Earlier, when I talked about whether closures capture variables or values, I said it was important that if multiple closures access the same variable that they end up with a reference to the exact same storage location in memory. That way if one closure writes to the variable, the other closure sees the change.&lt;/p&gt;
&lt;p&gt;Right now, if two closures capture the same &lt;span name=&quot;indirect&quot;&gt;local&lt;/span&gt; variable, the VM creates a separate Upvalue for each one. That breaks that sharing. When we move the variable off the heap, if we move into in only one of upvalues, the other will see an orphaned value.&lt;/p&gt;
&lt;aside name=&quot;indirect&quot; readability=&quot;5&quot;&gt;&lt;p&gt;The VM &lt;em&gt;does&lt;/em&gt; share upvalues if one closure captures an &lt;em&gt;upvalue&lt;/em&gt; from a surrounding function. The nested case works correctly. But if two &lt;em&gt;sibling&lt;/em&gt; closures capture the same local variable, they each create a separate ObjUpvalue.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;To fix that, whenever the VM needs an upvalue that captures a particular local variable slot, we will first search for an existing upvalue pointing to that slot. If found, we reuse that. The challenge is that all of the previously created upvalues are squirreled away inside the upvalue arrays of the various closures. Those closures could be anywhere in the VM’s memory.&lt;/p&gt;
&lt;p&gt;The first step is to give the VM its own list of all open upvalues that point to variables still on the stack. Seaching a list each time the VM needs an upvalue sounds like it might be slow, but in practice, it’s not bad. The number of variables on the stack that actually get closed over tends to be small. And function declarations that &lt;span name=&quot;create&quot;&gt;create&lt;/span&gt; closures are rarely on performance critical execution paths in the user’s program.&lt;/p&gt;
&lt;aside name=&quot;create&quot; readability=&quot;3.8169014084507&quot;&gt;&lt;p&gt;Closures are frequently &lt;em&gt;invoked&lt;/em&gt; inside hot loops. Think about the closures passed to typical higher-order functions on collections like &lt;a href=&quot;https://en.wikipedia.org/wiki/Map_(higher-order_function)&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Filter_(higher-order_function)&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;. That should be fast. But the function declaration that &lt;em&gt;creates&lt;/em&gt; the closure only happens once and is usually outside of the loop.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;Even better, we can order the list of open upvalues by the stack slot index they point to. The common case is that a slot has &lt;em&gt;not&lt;/em&gt; already been captured&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;sharing variables between closures is uncommon&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;and closures tend to capture locals near the top of the stack. If we store the open upvalue array in stack slot order, as soon as we step past the slot where the local we’re capturing lives, we know it won’t be found. When that local is near the top of the stack, we can exit the loop pretty early.&lt;/p&gt;
&lt;p&gt;Maintaining a sorted list requires inserting elements in the middle efficiently. That suggests using a linked list instead of a dynamic array. Since we defined the ObjUpvalue struct ourselves, the easiest implementation is an intrusive list that puts the next pointer right inside the ObjUpvalue struct itself:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;ObjUpvalue&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, in struct &lt;em&gt;ObjUpvalue&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When we allocate an upvalue, it is not attached to any list yet so the link is &lt;code&gt;NULL&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;newUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;newUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;The VM owns the list, so the head pointer goes right inside the main VM struct:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.h&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;VM&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;n&quot;&gt;Obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                      
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.h&lt;/em&gt;, in struct &lt;em&gt;VM&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The list starts out empty:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;resetStack&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                        
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;resetStack&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Starting with the first upvalue pointed to by the VM, each open upvalue points to the next open upvalue that references a local variable farther down the stack. For example, this script:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Should produce a series of linked upvalues like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/linked-list.png&quot; alt=&quot;Three upvalues in a linked list.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Whenever we close over a local variable, before creating a new upvalue, we look for an existing one in the list:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;captureUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                   
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;captureUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevUpvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
    &lt;span class=&quot;n&quot;&gt;prevUpvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                          
    &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                        
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                                                 

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;captureUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;We start at the &lt;span name=&quot;head&quot;&gt;head&lt;/span&gt; of the list, which is the upvalue closest to the top of the stack. We walk through the list, using a little pointer comparison to iterate past every upvalue pointing to slots above the one we’re looking for. While we do that, we keep track of the preceding upvalue on the list. We’ll need to update that node’s &lt;code&gt;next&lt;/code&gt; pointer if we end up inserting a node after it.&lt;/p&gt;
&lt;aside name=&quot;head&quot; readability=&quot;3&quot;&gt;&lt;p&gt;It’s a singly-linked list. It’s not like we have any other choice than to start at the head and go forward from there.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;There are three ways we can exit the loop:&lt;/p&gt;
&lt;ol readability=&quot;5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;The local slot we stopped at &lt;em&gt;is&lt;/em&gt; the slot we’re looking for.&lt;/strong&gt; We found an existing upvalue capturing the variable, so we reuse that upvalue.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;4&quot;&gt;
&lt;p&gt;&lt;strong&gt;We ran out of upvalues to search.&lt;/strong&gt; When &lt;code&gt;upvalue&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, it means every open upvalue in the list points to locals above the slot we’re looking for, or (more likely) the upvalue list is empty. Either way, we didn’t find an upvalue for our slot.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2&quot;&gt;
&lt;p&gt;&lt;strong&gt;We found an upvalue whose local slot is &lt;em&gt;below&lt;/em&gt; the one we’re looking for.&lt;/strong&gt; Since the list is sorted, that means we’ve gone past the slot we are closing over and thus there must not be an existing upvalue for it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In the first case, we’re done and we’ve returned. Otherwise, we need to create a new upvalue for our local slot and insert it into the list at the right location:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;captureUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prevUpvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                     
    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                       
    &lt;span class=&quot;n&quot;&gt;prevUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                              
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createdUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;captureUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;We already create the upvalue in the first incarnation of this function, so we only need to add code to insert it in the list. We exited the list traversal by either going past the end of the list, or by stopping on the first upvalue whose stack slot is below the one we’re looking for. In either case, that means we need to insert the new upvalue &lt;em&gt;before&lt;/em&gt; &lt;code&gt;upvalue&lt;/code&gt; (which may be &lt;code&gt;NULL&lt;/code&gt; if we hit the end of the list).&lt;/p&gt;
&lt;p&gt;As you may have learned in Data Structures 101, to insert a node into a linked list, you set the &lt;code&gt;next&lt;/code&gt; pointer of the previous node to point to your new one. We have been conveniently keeping track of that preceding node as we walked the list. We also need to handle the &lt;span name=&quot;double&quot;&gt;special&lt;/span&gt; case where we are inserting a new upvalue at the head of the list, in which case the “next” pointer is the VM’s head pointer.&lt;/p&gt;
&lt;aside name=&quot;double&quot; readability=&quot;6&quot;&gt;&lt;p&gt;There is a shorter implementation that handles updating either the head pointer or the previous upvalue’s &lt;code&gt;next&lt;/code&gt; pointer uniformly by using a pointer to a pointer, but that kind of code confuses almost everyone who hasn’t reached some Zen master level of pointer expertise. I went with the basic if statement approach.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;With this updated function, the VM now ensures that there is only ever a single ObjUpvalue for any given local slot. If two closures capture the same variable, they will get the same upvalue. We’re ready to move those upvalues off the stack now.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://craftinginterpreters.com/closures.html#closing-upvalues-at-runtime&quot; name=&quot;closing-upvalues-at-runtime&quot;&gt;&lt;small&gt;25 . 4 . 4&lt;/small&gt; Closing upvalues at runtime&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The compiler helpfully emits an &lt;code&gt;OP_CLOSE_UPVALUE&lt;/code&gt; instruction to tell the VM exactly when it should hoist a local variable onto the heap. Now is the interpreter’s responsibility:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                
&lt;br/&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_CLOSE_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           
        &lt;span class=&quot;n&quot;&gt;closeUpvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stackTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                         
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                         
&lt;br/&gt;&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OP_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;When we reach that instruction, the variable we are hoisting is right on top of the stack. We call a helper function, passing the address of that stack slot. That function is responsible for closing the upvalue and moving the local from the stack to the heap. After that, the VM is free to discard the stack slot, which it does by calling &lt;code&gt;pop()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fun stuff happens here:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;add after &lt;em&gt;captureUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;closeUpvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;          
         &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openUpvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                          
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                                            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, add after &lt;em&gt;captureUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;This function takes a pointer to a stack slot. It closes every open upvalue it can find that points to that slot or any slot above it on the stack. Right now, we only pass a pointer to the top slot on the stack, so the “or above it” part doesn’t come into play, but it will soon.&lt;/p&gt;
&lt;p&gt;To do this, we walk the VM’s list of open upvalues, again from top to bottom. If an upvalue’s location points into the range of slots we’re closing, we close the upvalue. Otherwise, once we reach an upvalue outside of the range, we know the rest will be too so we stop iterating.&lt;/p&gt;
&lt;p&gt;The way an upvalue gets closed is pretty &lt;span name=&quot;cool&quot;&gt;cool&lt;/span&gt;. First, we copy the variable’s value into the &lt;code&gt;closed&lt;/code&gt; field in the ObjUpvalue. That’s where closed-over variables live on the heap. The &lt;code&gt;OP_GET_UPVALUE&lt;/code&gt; and &lt;code&gt;OP_SET_UPVALUE&lt;/code&gt; instructions need to look for the variable there after it’s been moved. We could add some conditional logic in the interpreter code for those instructions to check some flag for whether the upvalue is open or closed.&lt;/p&gt;
&lt;p&gt;But there is already a level of indirection in play&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;those instructions dereference the &lt;code&gt;location&lt;/code&gt; pointer to get to the variable’s value. When the variable moves from the stack to the &lt;code&gt;closed&lt;/code&gt; field, we simply update that &lt;code&gt;location&lt;/code&gt; to the address of the ObjUpvalue’s &lt;em&gt;own &lt;code&gt;closed&lt;/code&gt; field.&lt;/em&gt;&lt;/p&gt;
&lt;aside name=&quot;cool&quot; readability=&quot;2&quot;&gt;&lt;p&gt;I’m not praising myself here. This is all the Lua dev team’s innovation.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;&lt;img src=&quot;http://craftinginterpreters.com/image/closures/closing.png&quot; alt=&quot;Moving a value from the stack to the upvalue's 'closed' field and then pointing the 'value' field to it.&quot;/&gt;&lt;/p&gt;
&lt;p&gt;We don’t need to change how &lt;code&gt;OP_GET_UPVALUE&lt;/code&gt; and &lt;code&gt;OP_SET_UPVALUE&lt;/code&gt; are interpreted at all. That keeps them simple, which in turn keeps them fast. We do need to add the new field to ObjUpvalue, though:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;&lt;br/&gt;in struct &lt;em&gt;ObjUpvalue&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.h&lt;/em&gt;, in struct &lt;em&gt;ObjUpvalue&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And we should zero it out when we create an ObjUpvalue so there’s no uninitialized memory floating around:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOCATE_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjUpvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJ_UPVALUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;newUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NIL_VAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                  
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
  &lt;span class=&quot;n&quot;&gt;upvalue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                                   
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;object.c&lt;/em&gt;, in &lt;em&gt;newUpvalue&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;Whenever the compiler reaches the end of a block, it discards all local variables in that block and emits an &lt;code&gt;OP_CLOSE_UPVALUE&lt;/code&gt; for each local variable that was closed over. The compiler &lt;span name=&quot;close&quot;&gt;does&lt;/span&gt; &lt;em&gt;not&lt;/em&gt; emit any instructions at the end of the outermost block scope that defines a function body. That scope contains the function’s parameters and any locals declared immediately inside the function. Those need to get closed too.&lt;/p&gt;
&lt;aside name=&quot;close&quot; readability=&quot;4&quot;&gt;&lt;p&gt;There’s nothing &lt;em&gt;preventing&lt;/em&gt; us from closing the outermost function scope in the compiler and emitting &lt;code&gt;OP_POP&lt;/code&gt; and &lt;code&gt;OP_CLOSE_UPVALUE&lt;/code&gt; instructions. Doing so was just unnecessary because the runtime discards all of the stack slots used by the function implicitly when it pops the callframe.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;This is the reason &lt;code&gt;closeUpvalues()&lt;/code&gt; accepts a pointer to a stack slot. When a function returns, we call that same helper and pass in the first stack slot owned by the function:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;insert-before&quot;&gt;
        &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;       
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;&lt;br/&gt;in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;pre class=&quot;insert&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;n&quot;&gt;closeUpvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class=&quot;insert-after&quot;&gt;
&lt;br/&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;vm.c&lt;/em&gt;, in &lt;em&gt;run&lt;/em&gt;()&lt;/p&gt;
&lt;p&gt;By passing the first slot in the function’s stack window, we close every remaining open upvalue owned by the returning function. And with that, we now have a fully functioning closure implementation. Closed-over variables live as long as needed by the functions that capture them.&lt;/p&gt;
&lt;p&gt;This was a lot of work! In jlox, closures fell out naturally from our environment representation. In clox, we had to add a lot of code&lt;span class=&quot;em&quot;&gt;—&lt;/span&gt;new bytecode instructions, more data structures in the compiler, and new runtime objects. The VM very much treats variables in closures as different from other variables.&lt;/p&gt;
&lt;p&gt;There is a rationale for that. In terms of implementation complexity, jlox gave us closures “for free”. But in terms of &lt;em&gt;performance&lt;/em&gt;, jlox’s closures are anything but. By allocating &lt;em&gt;all&lt;/em&gt; environments on the heap, jlox pays a significant performance price for &lt;em&gt;all&lt;/em&gt; local variables, even the majority which are never captured by closures.&lt;/p&gt;
&lt;p&gt;With clox, we have a more complex system, but that allows us to tailor the implementation to fit the two use patterns we observe for local variables. For most variables which do have stack semantics, we allocate them entirely on the stack which is simple and fast. Then, for the few local variables where that doesn’t work, we have a second slower path we can opt in to as needed.&lt;/p&gt;
&lt;p&gt;Fortunately, users don’t perceive the complexity. From their perspective, local variables in Lox are simple and uniform. The &lt;em&gt;language itself&lt;/em&gt; is as simple as jlox’s implementation. But under the hood, clox is watching what the user does and optimizing for their specific uses. As your language implementations grow in sophistication, you’ll find yourself doing this more. A large fraction of “optimization” is about adding special case code that detects certain usage patterns and provides a custom-build faster path for code that fits that pattern.&lt;/p&gt;
&lt;p&gt;We have lexical scoping fully working in clox now, which is a major milestone. And, now that we have functions and variables with complex lifetimes, we also have a &lt;em&gt;lot&lt;/em&gt; of objects floating around in clox’s heap, with a web of pointers stringing them together. The &lt;a href=&quot;http://craftinginterpreters.com/garbage-collection.html&quot;&gt;next step&lt;/a&gt; is figuring out how to manage that memory so that we can free some of those objects when they’re no longer needed.&lt;/p&gt;
&lt;div class=&quot;challenges&quot;&gt;

&lt;ol readability=&quot;7.4383408071749&quot;&gt;&lt;li readability=&quot;8&quot;&gt;
&lt;p&gt;Wrapping every ObjFunction in an ObjClosure introduces a level of indirection that has a performance cost. That cost isn’t necessary for functions that do not close over any variables, but it does let the runtime treat all calls uniformly.&lt;/p&gt;
&lt;p&gt;Change clox to only wrap functions in ObjClosures that need upvalues. How does the code complexity and performance compare to always wrapping functions? Take care to benchmark programs that do and do not use closures. How should you weight the importance of each benchmark? If one gets slower and one faster, how do you decide what trade-off to make to choose an implementation strategy?&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Read the design note below. I’ll wait. Now, how do you think Lox &lt;em&gt;should&lt;/em&gt; behave? Change the implementation to create a new variable for each loop iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;2.94&quot;&gt;
&lt;p&gt;A &lt;a href=&quot;http://wiki.c2.com/?ClosuresAndObjectsAreEquivalent&quot;&gt;famous koan&lt;/a&gt; teaches us that “objects are a poor man’s closure” (and vice versa). Our VM doesn’t support objects yet, but now that we have closures we can approximate them. Using closures, write a Lox program that expresses two-dimensional vector “objects”. It should:&lt;/p&gt;
&lt;ul readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Define a “constructor” function to create a new vector with the given &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; coordinates.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Provide “methods” to access the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; coordinates of values returned from that constructor.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Define an addition “method” that adds two vectors and produces a third.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class=&quot;design-note&quot; readability=&quot;121.62266822119&quot;&gt;

&lt;p&gt;Closures capture variables. When two closures capture the same variable, they share a reference to the same underlying storage location. This fact is visible when new values are assigned to the variable. Obviously, if two closures capture &lt;em&gt;different&lt;/em&gt; variables, there is no sharing:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;globalOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;globalTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;globalOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;globalTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This prints “one” then “two”. In this example, it’s pretty clear that the two &lt;code&gt;a&lt;/code&gt; variables are different. But it’s not always so obvious. Consider:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;9&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;globalTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;globalOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;globalOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;globalTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;globalOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;globalTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code is convoluted because Lox has no collection types. The important part is that the &lt;code&gt;main()&lt;/code&gt; function does two iterations of a for loop. Each time through the loop, it creates a closure that captures the loop variable. It stores the first closure in &lt;code&gt;globalOne&lt;/code&gt; and the second in &lt;code&gt;globalTwo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are definitely two different closures. Do they close over two different variables? Is there only one &lt;code&gt;a&lt;/code&gt; for the entire duration of the loop, or does each iteration get its own distinct &lt;code&gt;a&lt;/code&gt; variable?&lt;/p&gt;
&lt;p&gt;The script here is strange and contrived, but this does show up in real code in languages that aren’t as minimal as clox. Here’s a JavaScript example:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does this print “1” then “2”, or does it print &lt;span name=&quot;three&quot;&gt;“3”&lt;/span&gt; twice? You may be surprised to hear that it prints “3” twice. In this JavaScript program, there is only a single &lt;code&gt;i&lt;/code&gt; variable whose lifetime includes all iterations of the loop, including the final exit.&lt;/p&gt;
&lt;aside name=&quot;three&quot; readability=&quot;7&quot;&gt;&lt;p&gt;You’re wondering how &lt;em&gt;three&lt;/em&gt; enters the picture? After the second iteration, &lt;code&gt;i++&lt;/code&gt; is executed, which increments &lt;code&gt;i&lt;/code&gt; to three. That’s what causes &lt;code&gt;i &amp;lt;= 2&lt;/code&gt; to evaluate to false and end the loop. If &lt;code&gt;i&lt;/code&gt; never reached three, the loop would run forever.&lt;/p&gt;
&lt;/aside&gt;&lt;p&gt;If you’re familiar with JavaScript, you probably know that variables declared using &lt;code&gt;var&lt;/code&gt; are implicitly &lt;em&gt;hoisted&lt;/em&gt; to the surrounding function or top level scope. It’s as if you really wrote:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At that point, it’s clearer that there is only a single &lt;code&gt;i&lt;/code&gt;. Now consider if you change the program to use the newer &lt;code&gt;let&lt;/code&gt; keyword:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Does this new program behave the same? Nope. In this case, it prints “1” then “2”. Each closure gets its own &lt;code&gt;i&lt;/code&gt;. That’s sort of strange when you think about it. The increment clause is &lt;code&gt;i++&lt;/code&gt;. That looks very much like it is assigning to and mutating an existing variable, not creating a new one.&lt;/p&gt;
&lt;p&gt;Let’s try some other languages. Here’s Python:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python doesn’t really have block scope. Variables are implicitly declared and are automatically scoped to the surrounding function. Kind of like hoisting in JS, now that I think about it. So this prints “3” twice.&lt;/p&gt;
&lt;p&gt;What about Ruby? Ruby has two typical ways to iterate numerically. Here’s the classic imperative style:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;7&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This, like Python, prints “3” twice. But the more idiomatic Ruby style is using a higher-order &lt;code&gt;each()&lt;/code&gt; method on range objects:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot; readability=&quot;8&quot;&gt;
&lt;pre&gt;
&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you’re not familiar with Ruby, the &lt;code&gt;do |i| ... end&lt;/code&gt; part is basically a closure that gets created and passed to the &lt;code&gt;each()&lt;/code&gt; method. The &lt;code&gt;|i|&lt;/code&gt; is the parameter signature for the closure. The &lt;code&gt;each()&lt;/code&gt; method invokes that closure twice, passing in 1 for &lt;code&gt;i&lt;/code&gt; the first time and 2 the second time.&lt;/p&gt;
&lt;p&gt;In this case, the “loop variable” is really a function parameter. And, since each iteration of the loop is a separate invocation of the function, those are definitely separate variables for each call. So this prints “1” then “2”.&lt;/p&gt;
&lt;p&gt;If a language has a higher-level iterator-based looping structure like &lt;code&gt;foreach&lt;/code&gt; in C#, Java’s “enhanced for”, &lt;code&gt;for-of&lt;/code&gt; in JavaScript, &lt;code&gt;for-in&lt;/code&gt; in Dart, etc. then I think it’s natural to the reader to have each iteration create a new variable. The code &lt;em&gt;looks&lt;/em&gt; like a new variable because the loop header looks like a variable declaration. And there’s no increment expression that looks like it’s mutating that variable to advance to the next step.&lt;/p&gt;
&lt;p&gt;If you dig around StackOverflow and other places, you find evidence that this is what users expect because they are very surprised when they &lt;em&gt;don’t&lt;/em&gt; get it. In particular, C# originally did &lt;em&gt;not&lt;/em&gt; create a new loop variable for each iteration of a &lt;code&gt;foreach&lt;/code&gt; loop. This was such a frequent source of user confusion that they took the very rare step of shipping a breaking change to the language. In C# 5, each iteration creates a fresh variable.&lt;/p&gt;
&lt;p&gt;Old C-style for loops are harder. The increment clause really does look like mutation. That implies there is a single variable that’s getting updated each step. But it’s almost never &lt;em&gt;useful&lt;/em&gt; for each iteration to share a loop variable. The only time you can even detect this is when closures capture it. And it’s rarely helpful to have a closure that references a variable whose value is whatever value caused you to exit the loop.&lt;/p&gt;
&lt;p&gt;The pragmatically useful answer is probably to do what JavaScript does with &lt;code&gt;let&lt;/code&gt; in for loops. Make it look like mutation but actually create a new variable each time because that’s what users want. It is kind of weird when you think about it, though.&lt;/p&gt;
&lt;/div&gt;
&lt;footer&gt;&lt;a href=&quot;http://craftinginterpreters.com/garbage-collection.html&quot; class=&quot;next&quot;&gt;Next Chapter: “Garbage Collection” →&lt;/a&gt; Hand-crafted by Robert Nystrom — &lt;a href=&quot;https://github.com/munificent/craftinginterpreters/blob/master/LICENSE&quot; target=&quot;_blank&quot;&gt;© 2015&amp;amp;hairsp;–&amp;amp;hairsp;2018&lt;/a&gt;&lt;/footer&gt;</description>
<pubDate>Fri, 27 Sep 2019 14:58:48 +0000</pubDate>
<dc:creator>azhenley</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>http://craftinginterpreters.com/closures.html</dc:identifier>
</item>
<item>
<title>Strengthening Congressional Independence from Corporate Lobbyists</title>
<link>https://elizabethwarren.com/plans/congressional-independence</link>
<guid isPermaLink="true" >https://elizabethwarren.com/plans/congressional-independence</guid>
<description>&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;&lt;em class=&quot;RichTextBlocks__Italic-sc-190n2pz-9 eNoyiE&quot;&gt;As published on Medium on September 27th, 2019:&lt;/em&gt;&lt;/p&gt;&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;When I fought for the Consumer Financial Protection Bureau, I saw firsthand how lobbyists use their resources and expertise to overpower the needs and wishes of ordinary people.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Financial reform was complicated, and the bank lobbyists used a clever technique: They bombarded the members of Congress with complex arguments filled with obscure terms. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Whenever a congressman pushed back on an idea, the lobbyists would explain that although the congressman seemed to be making a good point, he didn’t really understand the complex financial system. And keep in mind, the lobbyists would tell the congressman, that if you get this wrong, you will bring down the global economy. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;It was the ultimate insiders’ play: &lt;em class=&quot;RichTextBlocks__Italic-sc-190n2pz-9 eNoyiE&quot;&gt;Trust us because we understand it and you don’t.&lt;/em&gt; And too often –– Congress doesn’t.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;It’s just another way that our government is working for the wealthy and well-connected.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;While a big part of the problem is a broken campaign finance system, members of Congress aren’t just dependent on corporate lobbyist propaganda because they’re bought and paid for. It’s also because of a successful, decades-long campaign to starve Congress of the resources and expertise needed to independently evaluate complex public policy questions. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;For every bad faith actor in Congress bought off by the big banks, there are others who are genuinely trying to grapple with the technical aspects of financial reform. But as the issues facing Congress have grown more complex, resources to objectively and independently analyze them have been slashed.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Republicans &lt;a href=&quot;https://www.the-scientist.com/news/congressional-decision-to-disband-ota-prompts-dire-warnings-from-supporters-58375&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;eliminated&lt;/a&gt; an independent office of experts dedicated to advising Congress on technical and scientific information. Congressional staff salaries, for most roles, have &lt;a href=&quot;https://fas.org/sgp/crs/misc/R44323.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;failed to keep pace&lt;/a&gt; with inflation, making it harder to attract and retain staff with scientific expertise. And the committees focusing on science and technology have seen their staff levels &lt;a href=&quot;https://www.belfercenter.org/sites/default/files/2019-06/PAE/CFO%20Policy%20Brief_vF.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;fall by over 40%&lt;/a&gt; over the past few decades. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;How has Congress filled that gap? By turning to lobbyists.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Over the last 20 years, lobbying spending has grown much &lt;a href=&quot;https://www.opensecrets.org/lobby/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;faster&lt;/a&gt; than &lt;a href=&quot;https://www.brookings.edu/wp-content/uploads/2017/01/vitalstats_ch5_tbl9.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Congress’s&lt;/a&gt; &lt;a href=&quot;https://fas.org/sgp/crs/misc/R44899.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;budget&lt;/a&gt; has. As the urgency of confronting climate change bears down upon us, fossil fuel companies spent &lt;a href=&quot;https://www.opensecrets.org/lobby/indusclient.php?id=E01&amp;amp;year=2018&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;more than twice as much&lt;/a&gt; on lobbying than they did 15 years ago – over $125 million last year alone. And as foreign powers &lt;a href=&quot;https://www.nytimes.com/2017/10/30/technology/facebook-google-russia.html&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;exploit social media platforms&lt;/a&gt; to &lt;a href=&quot;https://www.nytimes.com/2017/10/30/technology/facebook-google-russia.html&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;spread disinformation&lt;/a&gt; and influence our elections, Big Tech companies have &lt;a href=&quot;https://www.nytimes.com/2019/06/05/us/politics/amazon-apple-facebook-google-lobbying.html&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;dramatically increased&lt;/a&gt; their lobbying efforts to avoid regulation. Lobbyists are filling in the gaps in congressional resources and expertise by &lt;a href=&quot;https://www.theatlantic.com/politics/archive/2015/03/when-congress-cant-think-for-itself-it-turns-to-lobbyists/387295/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;providing Congress information&lt;/a&gt; from the perspective of their paying corporate clients.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;So let’s fix it.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;&lt;strong class=&quot;RichTextBlocks__Strong-sc-190n2pz-8 fqVVTH&quot;&gt;Members of Congress should have the resources they need to make decisions without relying on corporate lobbyists. &lt;/strong&gt;&lt;/p&gt;

&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;When Congress debates the Green New Deal, our representatives shouldn’t have to rely on &lt;a href=&quot;https://www.politico.com/story/2016/05/exxon-climate-campaign-222920&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Exxon lobbyists&lt;/a&gt; to explain who should pay for the effects of carbon emissions on our planet.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;When Congress decides whether it should break up big tech companies, our representatives shouldn’t have to rely on &lt;a href=&quot;https://www.reuters.com/article/us-tech-lobbying/google-facebook-spend-big-on-u-s-lobbying-amid-policy-battles-idUSKCN1PG2TD&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Google’s policy team&lt;/a&gt; to understand the effects of technology consolidation.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;And when Congress votes on restoring net neutrality protections, our representatives shouldn’t have to turn to &lt;a href=&quot;https://www.fastcompany.com/40507541/amid-net-neutrality-debate-biggest-isps-spent-at-least-26-3-million-on-lobbying&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;internet service providers&lt;/a&gt; to explain whether their industry needs more regulation.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;That’s why we must end lobbying as we know it. My &lt;a href=&quot;https://elizabethwarren.com/plans/end-washington-corruption&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;plan to end Washington corruption&lt;/a&gt; lays out several changes to reduce the influence of corporate lobbyists. But strengthening Congress’s independence requires more. We must also invest in resources to allow members of Congress to make informed decisions without relying on self-interested outside sources.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;&lt;strong class=&quot;RichTextBlocks__Strong-sc-190n2pz-8 fqVVTH&quot;&gt;My anti-corruption plan reinstates and modernizes the Congressional Office of Technology Assessment (OTA), strengthens congressional support agencies, and transitions congressional staffers to competitive salaries so that Congress can act based on the best expertise and information available.&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Congress has long recognized the need for independent bodies to help lawmakers make more informed decisions. That's why, by the end of 1921, Congress had established three bodies to support Congress – the &lt;a href=&quot;https://www.gao.gov/about/history&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Government Accountability Office&lt;/a&gt; to help Congress spend money efficiently, the &lt;a href=&quot;https://www.gpo.gov/who-we-are/our-agency/history&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Government Publishing Office to&lt;/a&gt; help the American people stay informed about the actions of the federal government, and the &lt;a href=&quot;https://www.loc.gov/crsinfo/about/history.html&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Congressional Research Service&lt;/a&gt; to provide policy and legal insight. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;In the 1970s, Congress established two additional agencies – the &lt;a href=&quot;https://www.cbo.gov/about/history&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Congressional Budget Office&lt;/a&gt; to analyze the budgetary effects of proposed legislation and the &lt;a href=&quot;http://govinfo.library.unt.edu/ota/ota72_95.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Office of Technology Assessment&lt;/a&gt; to help members understand challenging issues related to science and technology. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;The OTA was ahead of its time – producing roughly &lt;a href=&quot;https://www.sciencemag.org/news/2019/04/house-democrats-move-resurrect-congress-s-science-advisory-office&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;750 reports&lt;/a&gt; on subjects ranging from the &lt;a href=&quot;https://repository.library.georgetown.edu/bitstream/handle/10822/708058/9311.PDF?sequence=1&amp;amp;isAllowed=y&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;biological components of substance abuse&lt;/a&gt; to the &lt;a href=&quot;https://repository.library.georgetown.edu/bitstream/handle/10822/708046/9240.PDF?sequence=1&amp;amp;isAllowed=y&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;intricacies of the American banking system&lt;/a&gt;, and its staff helped to provide members of Congress with informal advice on these issues. One series of OTA studies on &lt;a href=&quot;https://www.belfercenter.org/CongressSciTech&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;synthetic fuels&lt;/a&gt; even helped to save the federal government $60 billion.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;The OTA also published objective research on climate change. In 1991 and 1993, the OTA published a pair of 350-page reports, the first on the &lt;a href=&quot;https://www.princeton.edu/~ota/disk1/1991/9111/9111.PDF&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;dangers&lt;/a&gt; of greenhouse gas emissions and the second on the &lt;a href=&quot;https://ota.fas.org/reports/9338.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;need&lt;/a&gt; to address rising global temperatures to mitigate the effects of climate change. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Two years later, House Speaker Newt Gingrich, who believed that the OTA was “&lt;a href=&quot;https://physicstoday.scitation.org/doi/10.1063/1.1420545&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;used by liberals to cover up political ideology&lt;/a&gt;,” &lt;a href=&quot;https://www.the-scientist.com/news/congressional-decision-to-disband-ota-prompts-dire-warnings-from-supporters-58375&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;defunded&lt;/a&gt; the office. This move prompted &lt;a href=&quot;https://www.the-scientist.com/news/congressional-decision-to-disband-ota-prompts-dire-warnings-from-supporters-58375&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;bipartisan outcry&lt;/a&gt; from members of Congress who relied on objective information to make informed decisions.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;If the OTA had survived Gingrich’s purge, it would have provided Congress with a vital resource to counter the &lt;a href=&quot;https://www.washingtonpost.com/outlook/2019/01/10/how-fossil-fuel-industry-got-media-think-climate-change-was-debatable/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;disinformation&lt;/a&gt; peddled by the fossil fuel industry and climate change deniers. More independent information on the threat of greenhouse gas emissions could have pushed Congress to take decisive action decades ago. Instead, experts &lt;a href=&quot;https://www.ipcc.ch/sr15/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;say&lt;/a&gt; we now have only about twelve years to cut our carbon emissions roughly in half, as the effects of climate change continue to worsen.  &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;It’s not just climate. Without objective scientific and technical analysis, Congress has also struggled to even debate how we might competently regulate other industries that require a complex understanding of science and technology. When Mark Zuckerberg testified about &lt;a href=&quot;https://techcrunch.com/2018/05/10/russian-facebook-ads-house-intelligence-full-list/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Facebook’s role&lt;/a&gt; in Russia’s interference in our elections, members of Congress struggled to engage meaningfully in a conversation about basic technological concepts. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Senator Roy Blunt &lt;a href=&quot;https://www.vox.com/policy-and-politics/2018/4/10/17222062/mark-zuckerberg-testimony-graham-facebook-regulations&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;boasted&lt;/a&gt; of the “Facebook address” printed on his business card, and Senator Orrin Hatch asked how Facebook makes money if it is free to use. “&lt;a href=&quot;https://www.thewrap.com/senator-orrin-hatch-facebook-biz-model-zuckerberg/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;Senator, we run ads&lt;/a&gt;,” Zuckerberg replied. Even Senators well-versed in social media struggled to ask about &lt;a href=&quot;https://www.nytimes.com/2018/04/12/technology/mark-zuckerberg-testimony.html&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;difficult&lt;/a&gt; &lt;a href=&quot;https://www.washingtonpost.com/news/the-switch/wp/2018/04/10/transcript-of-mark-zuckerbergs-senate-hearing/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;concepts&lt;/a&gt; like end-to-end encryption, location tracking, and the competitive landscape of Silicon Valley. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;It’s harder and harder for Members of Congress to directly employ individual experts, too. Our government works best when it can attract the top talent to tackle the difficult problems that we face. But congressional staff salaries for most roles have actually &lt;a href=&quot;https://fas.org/sgp/crs/misc/R44323.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;declined&lt;/a&gt; over the past few decades, making it &lt;a href=&quot;https://sunlightfoundation.com/policy/documents/keeping_congress_competent/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;harder&lt;/a&gt; for government to compete – and far more tempting for those who serve in government to go through the revolving door into the private sector. Meanwhile, between 2001 and 2018, federal employees in Washington who were paid on the General Schedule, the predominant pay scale for federal employees, saw an 8.19 percent &lt;a href=&quot;https://fas.org/sgp/crs/misc/R44323.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;salary increase&lt;/a&gt;. Nobody should be surprised, then, that the average tenure of House staffers is &lt;a href=&quot;https://fas.org/sgp/crs/misc/R44682.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;less than four years&lt;/a&gt; for all positions, compared to &lt;a href=&quot;https://www.opm.gov/policy-data-oversight/data-analysis-documentation/federal-employment-reports/reports-publications/profile-of-federal-civilian-non-postal-employees/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;13.5 years&lt;/a&gt; for the average federal employee –– and that congressional staffers &lt;a href=&quot;https://www.opensecrets.org/revolving/top.php?display=M&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;often leave&lt;/a&gt; to take lobbyist jobs working on behalf of giant corporations.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;In a democracy, Members of Congress invariably will come from a variety of backgrounds - and that’s a good thing. But we are increasingly asking them to climb steep learning curves on these technical subjects without much help other than from corporate lobbyists whose goal isn’t to find the right policy answer but rather to secure the most profitable outcome for their companies. If we want competent public policy that can actually hold big corporations accountable, we need reform.  &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Here’s how I would start:&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;&lt;strong class=&quot;RichTextBlocks__Strong-sc-190n2pz-8 fqVVTH&quot;&gt;Reinstate and modernize the Office of Technology Assessment&lt;/strong&gt;. The OTA was originally led by a &lt;a href=&quot;https://www.govinfo.gov/content/pkg/STATUTE-86/pdf/STATUTE-86-Pg797.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;bipartisan group&lt;/a&gt; of lawmakers, with votes divided evenly between Democrats and Republicans. The new OTA should be led by a single, independent director to ensure that &lt;a href=&quot;https://voteview.com/articles/party_polarization&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;increased partisanship&lt;/a&gt; does not prevent members of Congress from receiving the information they need. The OTA should also have the authority to self-commission reports and be equipped to respond to short-term requests from Members, such as preparing for hearings, writing regulatory letters, and weighing in on agency rulemaking, rather than largely &lt;a href=&quot;https://www.americanprogress.org/issues/green/news/2019/05/13/469793/congress-revive-office-technology-assessment/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;limiting&lt;/a&gt; its efforts to lengthy long-term reports. And the OTA should have in-house experts on interdisciplinary issue areas so that it can provide information and analysis on issues like climate change and technology consolidation that do not fit within a &lt;a href=&quot;https://www.legbranch.org/bring-back-the-ota-not-without-a-few-changes/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;single issue area&lt;/a&gt;. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;&lt;strong class=&quot;RichTextBlocks__Strong-sc-190n2pz-8 fqVVTH&quot;&gt;Increase funding for congressional support agencies&lt;/strong&gt;. Congress needs all the support it can get to defend against the influence of lobbyists, but the agencies set up to support Congress have been gutted over the past few decades. Between 1975 and 2015, the Congressional Research Service, the Congressional Budget Office, and the Government Accountability Office have lost &lt;a href=&quot;https://www.brookings.edu/wp-content/uploads/2017/01/vitalstats_ch5_tbl8.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;nearly half&lt;/a&gt; of their combined staff. That’s why my plan establishes a Lobbying Defense Trust Fund, financed by a tax on excessive lobbying, to reverse these cuts and further strengthen support agencies that members of Congress rely on for independent information and advice during the policy-making process.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;&lt;strong class=&quot;RichTextBlocks__Strong-sc-190n2pz-8 fqVVTH&quot;&gt;Transition congressional staffers to competitive salaries&lt;/strong&gt;. After years of budget cuts and &lt;a href=&quot;https://fas.org/sgp/crs/misc/R44323.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;stagnant pay&lt;/a&gt;, Congressional staff salaries lag far behind the &lt;a href=&quot;https://sunlightfoundation.com/policy/documents/keeping_congress_competent/&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;private sector&lt;/a&gt;. And because congressional staffers are &lt;a href=&quot;https://fas.org/sgp/crs/misc/R43774.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;not paid&lt;/a&gt; according to the General Schedule, their salaries are more likely to &lt;a href=&quot;https://fas.org/sgp/crs/misc/R44323.pdf&quot; class=&quot;m-rte__anchor RichTextBlocks__Anchor-sc-190n2pz-6 iNsuUj&quot; target=&quot;_blank&quot;&gt;fall further behind&lt;/a&gt;. My plan would treat congressional staff like other federal employees, transitioning them to competitive salaries to attract and retain committed, hard-working public servants from diverse backgrounds.&lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;We elect our representatives because we trust them to make decisions in our best interests – with the best information and scientific research our government has to offer. But today, members of Congress don’t have access to the latest science and evidence, and lobbyists working for corporate clients are quick to fill this vacuum and bend the ears of members of Congress to advance their own narrow interests. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Time and time again, widely popular policies are narrowed or blocked by powerful interests capable of providing resources and expertise to a vastly under-resourced Congress. We ended up winning the fight against the big banks over the Consumer Financial Protection Bureau, but Congress didn’t make all of the structural changes that we need to make our financial system work for ordinary people. &lt;/p&gt;
&lt;p class=&quot;RichTextBlocks__Paragraph-sc-190n2pz-0 ddscZi&quot;&gt;Reinstating the Office of Technology Assessment and strengthening congressional independence will give Congress important tools to fight back. It will also ensure that members of Congress acting in good faith do not recite talking points from the very companies trying to avoid regulations – and that members of Congress acting in bad faith can’t get away with parroting industry disinformation. These reforms are vital parts of my plan to free our government from the grip of lobbyists – and restore the public’s trust in its government in the process.&lt;/p&gt;
&lt;div class=&quot;PlanSignupInterruptorBlocks__Container-wh051i-0 grcidI&quot; readability=&quot;5.356&quot;&gt;
&lt;div class=&quot;PlanSignupInterruptorBlocks__ContentColumn-wh051i-1 iELvvu&quot; readability=&quot;33&quot;&gt;


&lt;p class=&quot;FormBlocks__DisclaimerCopy-sc-1flxr0o-8 fXvAip&quot;&gt;If you've saved your information with ActBlue Express, your donation will go through immediately.&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
<pubDate>Fri, 27 Sep 2019 13:59:55 +0000</pubDate>
<dc:creator>evo_9</dc:creator>
<og:url>https://elizabethwarren.com/plans/congressional-independence</og:url>
<og:type>website</og:type>
<og:title>Strengthening Congressional Independence from Corporate Lobbyists | Elizabeth Warren</og:title>
<og:description>When Elizabeth fought for the Consumer Financial Protection Bureau, she saw firsthand how lobbyists use their resources and expertise to overpower the needs and wishes of ordinary people.</og:description>
<og:image>https://images.ctfassets.net/4ubxbgy9463z/7J68NLoi86NVF9lkCHAcdC/9c7ca2a883d651ed0e5641ab0209c276/190927_Lobbyist_Meta.png</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://elizabethwarren.com/plans/congressional-independence</dc:identifier>
</item>
<item>
<title>Checkm8 – Bootrom exploit for many iOS devices</title>
<link>https://github.com/axi0mX/ipwndfu</link>
<guid isPermaLink="true" >https://github.com/axi0mX/ipwndfu</guid>
<description>&lt;div class=&quot;Box-body&quot;&gt;
&lt;article class=&quot;markdown-body entry-content p-5&quot; itemprop=&quot;text&quot;&gt;&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/axi0mX/ipwndfu/blob/master/repo/ipwndfu.png&quot;&gt;&lt;img src=&quot;https://github.com/axi0mX/ipwndfu/raw/master/repo/ipwndfu.png&quot; alt=&quot;&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Read &lt;a href=&quot;https://github.com/axi0mX/ipwndfu#disclaimer&quot;&gt;disclaimer&lt;/a&gt; before using this software.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;checkm8&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;permanent unpatchable bootrom exploit for hundreds of millions of iOS devices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meant for researchers, this is not a jailbreak with Cydia yet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;allows dumping SecureROM, decrypting keybags for iOS firmware, and demoting device for JTAG&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;current SoC support: s5l8947x, s5l8950x, s5l8955x, s5l8960x, t8002, t8004, t8010, t8011, t8015&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;future SoC support: s5l8940x, s5l8942x, s5l8945x, s5l8747x, t7000, t7001, s7002, s8000, s8001, s8003, t8012&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;full jailbreak with Cydia on latest iOS version is possible, but requires additional work&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Quick start guide for checkm8&lt;/h2&gt;
&lt;ol&gt;&lt;li&gt;
&lt;p&gt;Use a cable to connect device to your Mac. Hold buttons as needed to enter DFU Mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First run &lt;code&gt;./ipwndfu -p&lt;/code&gt; to exploit the device. Repeat the process if it fails, it is not reliable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;./ipwndfu --dump-rom&lt;/code&gt; to get a dump of SecureROM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;./ipwndfu --decrypt-gid KEYBAG&lt;/code&gt; to decrypt a keybag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;./ipwndfu --demote&lt;/code&gt; to demote device and enable JTAG.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Jailbreak and downgrade iPhone 3GS (new bootrom) with alloc8 untethered bootrom exploit. :-)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pwned DFU Mode with steaks4uce exploit for S5L8720 devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pwned DFU Mode with limera1n exploit for S5L8920/S5L8922 devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pwned DFU Mode with SHAtter exploit for S5L8930 devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump SecureROM on S5L8920/S5L8922/S5L8930 devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump NOR on S5L8920 devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flash NOR on S5L8920 devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encrypt or decrypt hex data on a connected device in pwned DFU Mode using its GID or UID key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;This tool should be compatible with Mac and Linux. It won't work in a virtual machine.&lt;/p&gt;
&lt;h2&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;This tool can be used to downgrade or jailbreak iPhone 3GS (new bootrom) without SHSH blobs, as documented in &lt;a href=&quot;https://github.com/axi0mX/ipwndfu/blob/master/JAILBREAK-GUIDE.md&quot;&gt;JAILBREAK-GUIDE&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Exploit write-up&lt;/h2&gt;
&lt;p&gt;Write-up for alloc8 exploit can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/axi0mX/alloc8&quot;&gt;https://github.com/axi0mX/alloc8&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;iBSS&lt;/h2&gt;
&lt;p&gt;Download iPhone 3GS iOS 4.3.5 IPSW from Apple:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://appldnld.apple.com/iPhone4/041-1965.20110721.gxUB5/iPhone2,1_4.3.5_8L1_Restore.ipsw&quot; rel=&quot;nofollow&quot;&gt;http://appldnld.apple.com/iPhone4/041-1965.20110721.gxUB5/iPhone2,1_4.3.5_8L1_Restore.ipsw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Terminal, extract iBSS using the following command, then move the file to ipwndfu folder:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;unzip -p iPhone2,1_4.3.5_8L1_Restore.ipsw Firmware/dfu/iBSS.n88ap.RELEASE.dfu &amp;gt; n88ap-iBSS-4.3.5.img3
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Coming soon!&lt;/h2&gt;
&lt;ul&gt;&lt;li&gt;
&lt;p&gt;Reorganize and refactor code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easier setup: download iBSS automatically using partial zip.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dump SecureROM on S5L8720 devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install custom boot logos on devices jailbroken with 24Kpwn and alloc8.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable verbose boot on devices jailbroken with 24Kpwn and alloc8.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This is BETA software.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Backup your data.&lt;/p&gt;
&lt;p&gt;This tool is currently in beta and could potentially brick your device. It will attempt to save a copy of data in NOR to nor-backups folder before flashing new data to NOR, and it will attempt to not overwrite critical data in NOR which your device requires to function. If something goes wrong, hopefully you will be able to restore to latest IPSW in iTunes and bring your device back to life, or use nor-backups to restore NOR to the original state, but I cannot provide any guarantees.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There is NO warranty provided.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.&lt;/p&gt;
&lt;h2&gt;Toolchain&lt;/h2&gt;
&lt;p&gt;You will not need to use &lt;code&gt;make&lt;/code&gt; or compile anything to use ipwndfu. However, if you wish to make changes to assembly code in &lt;code&gt;src/*&lt;/code&gt;, you will need to use an ARM toolchain and assemble the source files by running &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you are using macOS with Homebrew, you can use binutils and gcc-arm-embedded. You can install them with these commands:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;brew install binutils
brew cask install https://raw.githubusercontent.com/Homebrew/homebrew-cask/b88346667547cc85f8f2cacb3dfe7b754c8afc8a/Casks/gcc-arm-embedded.rb
&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;p&gt;geohot for limera1n exploit&lt;/p&gt;
&lt;p&gt;posixninja and pod2g for SHAtter exploit&lt;/p&gt;
&lt;p&gt;chronic, CPICH, ius, MuscleNerd, Planetbeing, pod2g, posixninja, et al. for 24Kpwn exploit&lt;/p&gt;
&lt;p&gt;pod2g for steaks4uce exploit&lt;/p&gt;
&lt;p&gt;walac for pyusb&lt;/p&gt;
&lt;/article&gt;&lt;/div&gt;
</description>
<pubDate>Fri, 27 Sep 2019 12:38:26 +0000</pubDate>
<dc:creator>theshrike79</dc:creator>
<og:image>https://avatars3.githubusercontent.com/u/15119213?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>axi0mX/ipwndfu</og:title>
<og:url>https://github.com/axi0mX/ipwndfu</og:url>
<og:description>open-source jailbreaking tool for many iOS devices - axi0mX/ipwndfu</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/axi0mX/ipwndfu</dc:identifier>
</item>
<item>
<title>Plane Tests Must Use Average Pilots, NTSB Says After 737 Max Crashes</title>
<link>https://www.wsj.com/articles/plane-tests-must-use-average-pilots-ntsb-says-after-737-max-crashes-11569506401?mod=rsswn</link>
<guid isPermaLink="true" >https://www.wsj.com/articles/plane-tests-must-use-average-pilots-ntsb-says-after-737-max-crashes-11569506401?mod=rsswn</guid>
<description>&lt;div class=&quot;is-lead-inset&quot;&gt;
      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          header&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--header&amp;#10;    article__inset--lead&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-header article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-111110?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-111110?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-111110?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-111110?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-111110?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-111110?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-111110?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-111110?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;The cockpit of a Boeing 737 MAX 8 aircraft.&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;The cockpit of a Boeing 737 MAX 8 aircraft.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        abhirup roy/Reuters
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 
    &lt;/div&gt;

  &lt;div class=&quot;clearfix byline-wrap&quot;&gt;


      
      &lt;div class=&quot;byline article__byline&quot;&gt;
      
      
          &lt;span&gt;By&lt;/span&gt;
              &lt;div class=&quot;author mobile-scrim hasMenu&quot; data-scrim=&quot;{&amp;quot;type&amp;quot;:&amp;quot;author&amp;quot;,&amp;quot;header&amp;quot;:&amp;quot;Andy Pasztor&amp;quot;,&amp;quot;subhead&amp;quot;:&amp;quot;The Wall Street Journal&amp;quot;,&amp;quot;list&amp;quot;:[{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;bio&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;https://www.wsj.com/news/author/1472&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Biography&amp;quot;},{&amp;quot;type&amp;quot;:&amp;quot;link&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;email&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;mailto:Andy.Pasztor@wsj.com&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Andy.Pasztor@wsj.com&amp;quot;}]}&quot;&gt;
                  &lt;span class=&quot;name&quot; itemprop=&quot;name&quot;&gt;Andy Pasztor&lt;/span&gt;
                  &lt;/div&gt;

      &lt;/div&gt;
      
        &lt;time class=&quot;timestamp article__timestamp flexbox__flex--1&quot;&gt;
          Sept. 26, 2019 10:00 am ET
        &lt;/time&gt;&lt;/div&gt;

  

  &lt;div class=&quot;article-content &quot;&gt;

       &lt;p&gt;Federal accident investigators called for broad changes in decades-old engineering principles and design assumptions related to pilot emergency responses, the first formal U.S. safety recommendations stemming from two fatal Boeing 737 MAX crashes.&lt;/p&gt; &lt;p&gt;As part of lessons learned from the &lt;a href=&quot;https://www.wsj.com/graphics/boeing-max-tale-of-two-crashes/?mod=article_inline&quot; class=&quot;icon none&quot;&gt;crashes that took 346 lives&lt;/a&gt; and &lt;a href=&quot;https://www.wsj.com/articles/new-delays-could-keep-boeing-737-max-grounded-into-holiday-travel-season-11567376957?mod=article_inline&quot; class=&quot;icon none&quot;&gt;grounded the global MAX fleet&lt;/a&gt;, the National Transportation Safety Board suggested that 






            &lt;a href=&quot;https://quotes.wsj.com/BA&quot;&gt;Boeing&lt;/a&gt;
            &lt;span class=&quot;company-name-type&quot;&gt; Co.&lt;/span&gt;

      &lt;a href=&quot;https://quotes.wsj.com/BA?mod=chiclets&quot; class=&quot;media-object-chiclet down &quot; data-channel=&quot;/zigman2/quotes/208579720/composite&quot; data-symbol=&quot;BA&quot; data-changepercent=&quot;-1.04&quot;&gt;
        BA &lt;span&gt;-1.04%&lt;/span&gt;
      &lt;/a&gt;

       and the Federal Aviation Administration used unrealistic tests to initially certify the aircraft to carry passengers. The board also urged the plane maker and the FAA to pay more attention to interactions between humans and cockpit computers to ensure safety. The board wants Boeing and the FAA to reassess—and potentially jettison—what senior investigators portrayed as overly optimistic assumptions about the speed and effectiveness of cockpit-crew reactions to complex automation failures.&lt;/p&gt;




      &lt;div class=&quot;paywall&quot;&gt;




       &lt;p&gt;Five of the NTSB’s seven recommendations, released Thursday, called for the use of more-objective methods to predict likely responses of airline pilots in such cases when automation goes haywire. The board’s announcement challenged long-held industry and FAA practices that largely use the nearly instantaneous responses of highly trained test pilots—rather than those of average pilots, who typically have less experience—to verify the safety of new jetliner models. Some of the recommendations cover future airliner designs, not just the MAX.&lt;/p&gt; 






      &lt;div data-layout=&quot;inline&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          inline&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--inline&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-inline article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-111073?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-111073?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-111073?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-111073?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-111073?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-111073?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-111073?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-111073?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;The wreckage of an engine, from the Lion Air flight, recovered from the sea., Nov....&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;The wreckage of an engine, from the Lion Air flight, recovered from the sea., Nov. 3. &lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        Ed Wray/Getty Images
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt;The Wall Street Journal &lt;a href=&quot;https://www.wsj.com/articles/the-four-second-catastrophe-how-boeing-doomed-the-737-max-11565966629?mod=article_inline&quot; class=&quot;icon none&quot;&gt;previously reported&lt;/a&gt; that mistaken assumptions by Boeing and the FAA about pilot response were at the core of &lt;a href=&quot;https://www.wsj.com/articles/indonesia-to-fault-737-max-design-u-s-oversight-in-lion-air-crash-report-11569185664?mod=article_inline&quot; class=&quot;icon none&quot;&gt;last year’s Lion Air MAX crash&lt;/a&gt; as well as the &lt;a href=&quot;https://www.wsj.com/articles/the-final-minutes-of-ethiopian-airlines-doomed-boeing-737-max-11553876300?mod=article_inline&quot; class=&quot;icon none&quot;&gt;Ethiopian Airlines MAX crash&lt;/a&gt; in March. The safety board is assisting local authorities in the Lion Air and Ethiopian Airlines probes.&lt;/p&gt; &lt;p&gt;Both planes went down because pilots—seemingly confused and distracted by sometimes contradictory warnings prompted by faulty sensor readings—failed to cope with a powerful automated flight-control feature, called MCAS, that pushed down the noses of the jets and ultimately put them into unrecoverable dives.&lt;/p&gt; &lt;p&gt;NTSB officials told reporters that before the MAX began commercial service Boeing failed to test—and the FAA never asked to see demonstrated—the full range of alerts, warnings and related system failures that could result from an MCAS misfire. Pilots of the ill-fated jets were overwhelmed by multiple alerts caused by a single malfunctioning sensor, leading to what safety experts call task saturation.&lt;/p&gt; &lt;p&gt;The pilots “did not react in the ways Boeing and the FAA assumed,” said NTSB Chairman Robert Sumwalt, a retired pilot who flew older 737 models. “We have found a gap between the assumptions” used to certify the MAX, he said, “and the real-world experiences of these crews.”&lt;/p&gt; &lt;p&gt;Amid a flurry of outside investigations, including a Justice Department criminal probe of the certification process, FAA officials already are moving to bring some procedures and regulations in line with the NTSB recommendations. In consultation with its foreign counterparts, for example, the agency intends to use a range of airline pilots—with varying degrees of flying expertise, experience and training—to verify the safety of pending software fixes and changes to flight-control computers on the MAX.&lt;/p&gt; &lt;p&gt; 




      Dana Schulze, 




       the NTSB’s top aviation investigator, said it is important to discount the bias that test pilots have “because they know the airplane like the back of their hand,” and instead seek new ways to determine “what the average pilot would do.” She also said additional recommendations are possible.&lt;/p&gt; &lt;p&gt;Ms. Schulze also told reporters the all-important certification tests “did not look at all potential flight-deck alerts and indications that pilots might see” in a real-world MCAS emergency.&lt;/p&gt; 






      &lt;div data-layout=&quot;inline&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          inline&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--inline&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-inline article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-111113?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-111113?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-111113?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-111113?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-111113?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-111113?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-111113?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-111113?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;Dana Schulze, the NTSB’s top aviation investigator, testified during a congressional hearing on the crash...&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;Dana Schulze, the NTSB’s top aviation investigator, testified during a congressional hearing on the crash of Ethiopian Airlines’ Flight 302 in July.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        Jay Mallin/Zuma Press
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt;The nonbinding recommendations also call on the FAA to help its foreign counterparts avoid such missteps when certifying aircraft in their countries. Eventually, the safety board wants Boeing and other U.S. plane manufacturers to devise onboard diagnostic systems capable on their own of sorting through a jumble of emergency alerts, to help pilots prioritize and speed through the correct checklist and alleviate the danger.&lt;/p&gt; &lt;p&gt;The FAA said it would carefully review these and all other recommendations as part of ongoing work to safely return the MAX to service. In a statement, it said that it is committed to a philosophy of improvement and that lessons learned from the two crashes will be a springboard to an even greater level of safety.&lt;/p&gt; &lt;p&gt;Boeing said it is “committed to working with the FAA in reviewing the NTSB recommendations.” Previously, the Chicago plane maker said the MAX was certified according to accepted industry standards and FAA requirements.&lt;/p&gt; 






      &lt;div data-layout=&quot;inline&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          inline&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--inline&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-inline article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-111075?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-111075?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-111075?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-111075?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-111075?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-111075?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-111075?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-111075?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;Relatives at the funeral of a passenger who died in the Lion Air crash in...&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;Relatives at the funeral of a passenger who died in the Lion Air crash in Indonesia, Nov. 1.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        fully handoko/epa/Shutterstock
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt;NTSB recommendations usually refrain from mandating specific technical solutions, so those involving the 737 MAX predictably leave the door open to a combination of design and training changes.&lt;/p&gt; &lt;p&gt;But in a teleconference laying out the recommendations, senior NTSB investigators questioned historical assumptions that pilots can be counted on to identify certain in-flight emergencies and respond to them within seconds.&lt;/p&gt; &lt;p&gt;Instead of the subjective validation of those assumptions by using test pilots, Ms. Schulze said the board is advocating for a “more data-driven, more scientific” evaluation of pilot performance. “We’re asking the FAA to improve the human-factors aspects” of aircraft certification, she said.&lt;/p&gt; 






      &lt;div data-layout=&quot;header&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaVideo&amp;#10;          header&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaVideo&amp;#10;          article__inset--header&amp;#10;  &quot;&gt;
      
      
      
          &lt;figure class=&quot;media-object-video article__inset__video media-object-video--standard&quot;&gt;
  
    &lt;figcaption class=&quot;wsj-article-caption article__inset__video__caption&quot;&gt;
          Two crashes and the global grounding of Boeing’s 737 MAX commercial airliner led to extensive disruption in the international aerospace industry. WSJ’s Robert Wall explains the continuing effects of the plane’s grounding. Photo: Getty Images
        &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt;In designing the flight controls for the 737 MAX, Boeing assumed that, regardless of experience or background, pilots trained on existing safety procedures should be able to sift through a jumble of contradictory warnings and take the proper action 100% of the time within four seconds. The FAA based part of its certification on that assumption, though it is currently considering lengthening that time requirement.&lt;/p&gt; &lt;p&gt;But now the safety board is explicitly calling on Boeing and the FAA to identify and correct for potential “pilot actions that are inconsistent with manufacturer assumptions.” In addition, the recommendations urge the creation of robust tools and methods, with the help of human-factors experts, to validate “assumptions about pilot recognition and response” to significant safety risks or system malfunctions.&lt;/p&gt; &lt;p&gt;The board, according to people familiar with the details, initially drafted language calling for a review of the way the FAA gives industry officials authority to conduct certain safety reviews on behalf of the government. But the final document doesn’t include such a recommendation.&lt;/p&gt; 






       






      &lt;div data-layout=&quot;inline&amp;#10;              &quot; data-layout-mobile=&quot;&quot; class=&quot;&amp;#10;        media-object&amp;#10;        type-InsetMediaIllustration&amp;#10;          inline&amp;#10;    scope-web|mobileapps&amp;#10;  article__inset&amp;#10;        article__inset--type-InsetMediaIllustration&amp;#10;          article__inset--inline&amp;#10;  &quot;&gt;
      
      
          
    &lt;figure class=&quot;media-object-image enlarge-image renoImageFormat- img-inline article__inset__image&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;div data-mobile-ratio=&quot;66.66666666666666%&quot; data-layout-ratio=&quot;66.66666666666666%&quot; data-subtype=&quot;photo&quot; class=&quot;image-container  responsive-media article__inset__image__image&quot;&gt;
    
        &lt;img srcset=&quot;https://images.wsj.net/im-111076?width=140&amp;amp;size=1.5 140w,&amp;#10;https://images.wsj.net/im-111076?width=540&amp;amp;size=1.5 540w,&amp;#10;https://images.wsj.net/im-111076?width=620&amp;amp;size=1.5 620w,&amp;#10;https://images.wsj.net/im-111076?width=700&amp;amp;size=1.5 700w,&amp;#10;https://images.wsj.net/im-111076?width=860&amp;amp;size=1.5 860w,&amp;#10;https://images.wsj.net/im-111076?width=1260&amp;amp;size=1.5 1260w&quot; sizes=&quot;(max-width: 140px) 100px,&amp;#10;(max-width: 540px) 500px,&amp;#10;(max-width: 620px) 580px,&amp;#10;(max-width: 700px) 660px,&amp;#10;(max-width: 860px) 820px,&amp;#10;1260px&quot; src=&quot;https://images.wsj.net/im-111076?width=620&amp;amp;size=1.5&quot; data-enlarge=&quot;https://images.wsj.net/im-111076?width=1260&amp;amp;size=1.5&quot; alt=&quot;&quot; title=&quot;Nadia Milleron, mother of Samya Stumo who was killed in the Ethiopian Airlines crash, at...&quot;/&gt;&lt;/div&gt;

    
      &lt;figcaption class=&quot;wsj-article-caption article__inset__image__caption&quot; itemprop=&quot;caption&quot;&gt;&lt;span class=&quot;wsj-article-caption-content&quot;&gt;Nadia Milleron, mother of Samya Stumo who was killed in the Ethiopian Airlines crash, at a hearing in Washington, D.C., in June.&lt;/span&gt;
      &lt;span class=&quot;wsj-article-credit article__inset__image__caption__credit&quot; itemprop=&quot;creator&quot;&gt;
            &lt;span class=&quot;wsj-article-credit-tag&quot;&gt;
              Photo: 
            &lt;/span&gt;
        andrew caballero-reynolds/Agence France-Presse/Getty Images
          &lt;/span&gt;
  &lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt; 




       &lt;p&gt; &lt;strong&gt;Write to &lt;/strong&gt;Andy Pasztor at &lt;a href=&quot;mailto:andy.pasztor@wsj.com&quot; target=&quot;_blank&quot; class=&quot;icon &quot;&gt;andy.pasztor@wsj.com&lt;/a&gt;&lt;/p&gt;






      &lt;/div&gt;



  
  &lt;p&gt;Copyright ©2019 Dow Jones &amp;amp; Company, Inc. All Rights Reserved. 87990cbe856818d5eddac44c7b1cdeb8&lt;/p&gt;
  
  &lt;/div&gt;


</description>
<pubDate>Fri, 27 Sep 2019 11:28:58 +0000</pubDate>
<dc:creator>tompic823</dc:creator>
<og:title>Plane Tests Must Use Average Pilots, NTSB Says After 737 MAX Crashes</og:title>
<og:description>Investigators called for broad changes in engineering principles and design assumptions related to pilot emergency responses, the first formal U.S. safety recommendations stemming from two 737 MAX crashes.</og:description>
<og:url>https://www.wsj.com/articles/plane-tests-must-use-average-pilots-ntsb-says-after-737-max-crashes-11569506401</og:url>
<og:image>https://images.wsj.net/im-111110/social</og:image>
<og:type>article</og:type>
<dc:language>en-US</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.wsj.com/articles/plane-tests-must-use-average-pilots-ntsb-says-after-737-max-crashes-11569506401?mod=rsswn</dc:identifier>
</item>
<item>
<title>Elements of Clojure</title>
<link>https://www.therepl.net/episodes/23/</link>
<guid isPermaLink="true" >https://www.therepl.net/episodes/23/</guid>
<description>&lt;p&gt;Your browser does not support the &lt;code&gt;audio&lt;/code&gt; element.&lt;/p&gt;&lt;p&gt;Zach Tellman talks about writing Elements of Clojure, some of the work he's done in Clojure over the last ten years, and what's next.&lt;/p&gt;&lt;div readability=&quot;1764.7547527558&quot;&gt;
&lt;p&gt;Daniel: 00:00:00 Hello, welcome to the REPL, a podcast diving into Clojure programs and libraries. This week, I’m talking about Clojure with Zach Tellman, the creator of Manifold and Elements of Clojure, a recent book about Clojure. Welcome to the show, Zach.&lt;/p&gt;
&lt;p&gt;Zach: 00:00:13 Thanks for having me.&lt;/p&gt;
&lt;p&gt;Daniel: 00:00:14 Yeah, it’s great to have you on. So, I think that in preparation for this interview, I was thinking a little bit about people in the Clojure community and your impact on Clojure. And I would say that you’d probably be the top 10 at least, if not top five people who’ve had impact on Clojure programmers. And that’s, I guess, most Clojure programs running today would have some of your code somewhere in it. Do you think that would be a fair assessment?&lt;/p&gt;
&lt;p&gt;Zach: 00:00:42 I think so. I’ve never been sure if people use my libraries because they’re the right libraries to use, or because they think they’re kind of near, or because the name is just more memorable than the other library. Yeah, I think that they’ve propagated pretty far into the community at this point.&lt;/p&gt;
&lt;p&gt;Daniel: 00:01:00 Yeah. And so, you’ve been working with Clojure for 10 years, maybe more by now?&lt;/p&gt;
&lt;p&gt;Zach: 00:01:06 Yeah, that sounds about right. I started in … It would’ve been late 2008, early 2009 I think.&lt;/p&gt;
&lt;p&gt;Daniel: 00:01:14 Right, cool. And so, you’ve kind of covered off your intro to Clojure pretty well in talks in other interviews, so I don’t want to kind of rehash your whole Clojure origin story. But I guess maybe would be able to just sort of give us a brief overview of why Clojure, how you got here, and then maybe start with some of the original libraries that you worked on?&lt;/p&gt;
&lt;p&gt;Zach: 00:01:36 I started using Clojure during my first job, where I was working with C# to write desktop software for Windows. I realized a few years in that this was not something I wanted to be doing for the rest of my career. And so, I started looking at alternative languages. I was looking at Ruby because I was in SoMa in San Francisco. GitHub had just been founded like down the street, it was very much in the air. I looked at Ocaml, I looked at Erlang. I looked at Clojure, and Clojure was because I was working at the time with Tom Faulhaber, who wrote clojure.pprint among other things. And he was a fan of Lisp from back in the day with Common Lisp. And he really thought Clojure was something worth looking at.&lt;/p&gt;
&lt;p&gt;Zach: 00:02:24 And the absolutely absurd sort to test I did for each of these languages was, I tried to write something with Open Gl. Because in school I had focused on graphics and computational geometry, and I felt like I kind of missed that and wanted to get back into that. And so, I played around with Ruby. I played around with Ocaml, both of those bindings weren’t very good. Erlang didn’t even have them, so, that was a non started. But, Clojure, when I started playing around with it, I was able to just take LWJGL which is the Lightweight Java Gaming Library, which provides extremely literal bindings over the Open Gl speck. Literally it just has a bunch of static classes which correspond to the different Open Gl versions. So, there’s GL-01, GL-11, GL-12 and you have to import with the static methods from the correct one. It’s actually really tedious.&lt;/p&gt;
&lt;p&gt;Zach: 00:03:21 But as I was learning Clojure and trying to go and learn how this library worked at the same time, I found that there is this really interesting semantic compression I was getting. I could go and I could say, “Actually, I don’t care what class this is in. I’ll just use macro time reflection to figure out which of the classes this should be. Because I know there’s something named this somewhere, so just find it.” And also Open Gl has a lot of scoped operators where you have to explicitly enter and exit some sort of scope. And of course with Macros it’s very easy to go and just say, “Enter this at the top, exit this at the bottom within some sort of try-finally.” And so, It was actually weirdly a very good way to get familiar with the benefits of using Clojure. At least as a way of interfacing with the Java library ecosystem.&lt;/p&gt;
&lt;p&gt;Zach: 00:04:11 And so, based on that I created my very first Open source library on any language, which was called Penumbra which was a wrapper for Open Gl. And it was actually a wrapper for a older version of Open Gl which is called Immediate Mode, where you go and you …. for each frame, you make a call for each vertex that you want to draw. And this is very inefficient and not used by any serious game engine anywhere. But it is a very easy, fun way to go and experiment with it. That’s what I did. I just played around with it and came up with a little graphical demos and figured out how that should work with Clojure.&lt;/p&gt;
&lt;p&gt;Zach: 00:04:48 And towards the end of it I was actually trying to create something that transfiled Clojure into GLSL with a GL shading language which is the code that executes on the GPU. To do this you had to type inference and stuff because GLSL is effectively like C99 with like a few extra operators. It worked-ish, but basically I was the only one who understood what sorts of programs would properly transfile and which ones wouldn’t. And so, that also became my first introduction to the fact that, if you write enough Clojures and you build enough Macros and enough compile time logic, it becomes an opaque tool for anyone but yourself. So, hat was a fairly fully featured introduction to the good and bad parts of Lisps and Clojure more specifically.&lt;/p&gt;
&lt;p&gt;Daniel: 00:05:41 Nice, and I think probably a feature of your work would be your Macros. You’ve written a lot of Macros, your code is Macro heavy, sounds like it’s a negative thing, which I’m not saying it is, but-&lt;/p&gt;
&lt;p&gt;Zach: 00:05:52 I mean it might be. I’m willing to accept that if that’s how you’re going to put it, so.&lt;/p&gt;
&lt;p&gt;Daniel: 00:05:59 No, I just think it’s dimly a feature of your work and you’ve probably written a lot more open source Macros that many people have I would guess. And probably have a mature take on Macros by now, I would imagine.&lt;/p&gt;
&lt;p&gt;Zach: 00:06:11 I don’t know. I think that the way that I try to approach things, the way I try to approach learning things specifically, is to try to figure out where things break down. What’s the boundary of this thing? Where does it become this absurd thing as opposed to a useful application of some concept? A lot of my open source libraries like ones that I’ve actually released and ones that just never really quite made it off the ground, were me trying to understand like, “Where is this sensible and where is this me doing this for the sake of doing it?”&lt;/p&gt;
&lt;p&gt;Zach: 00:06:48 And a great example of that is my catch all utility library called Potemkin, which is actually I think the second library I built or rather released. Because I had this idea for how name spaces should work in Clojure. Because, Again, Open Gl has this huge surface area to cover and so I wanted to be able to have a lot of these operators exposed in some places for my own use. And then I wanted to take a sub-set of those and lift them up into a different name space for public consumption. And so, created this Macro called import-vars, which I thought at the time was just insanely clever idea. I was very proud of it.&lt;/p&gt;
&lt;p&gt;Zach: 00:07:30 But I think that it also spoke to a problem I was seeing which was that, Clojure doesn’t really have a out-of-the-box opinion as to how you should structure namespaces. The only limitation of what goes in the namespace is, you can’t have two vars that have the same name. And if you take that to its logical conclusion, you basically get Clojure core, which is thousands of vars, none of which collide with each other. But there’s no relationship between them other than the fact that they are just built ins to the language. And if it were something that were actively developed, I would think that most developers, maybe not Rich, but most developers would find that very ungainly and very hard to navigate. And then I want to go and put in like seek related functions in its own namespace and special formulated stuff into their own namespace and everything.&lt;/p&gt;
&lt;p&gt;Zach: 00:08:17 And then just be able to say, “Actually, all of these should get imported and surfaced into this Clojure core thing.” And so, it’s sort of decoupling how your code is organized for your purposes, and how your code is exposed to the consumers of your code. Having those be separate seemed good to me at the moment, and I still think it actually seems pretty valid as I explain it right now. But the rest of the community did not agree. In fact, I think that this was like the first time that someone just like expressed a general, “Ew,” sort of like, “That’s a gross thing you just made there,” sort of reaction, which is not the last time that that’s happened certainly. But, it was the first time that someone just had a very strong negative aesthetic reaction to this idea that I had.&lt;/p&gt;
&lt;p&gt;Zach: 00:09:01 In honesty that was actually really interesting to me and motivated me to do this further because I had this question in my head of like, what is good design? Software design has always been something that has really interested me, because it seems like there is a difference between something that is good and something that is bad. Certainly in day to day conversation when we’re collaborating a code, people have these aesthetic reactions. But to really understand, to predict how people will respond to this thing is hard. And so, being able to have this test bed, which was the Clojure community and be able to put something out there and say, “What do you think? Do you hate it? Do you love it?” And just see how people respond to it, what parts people sort of take and run with, what parts they’re just confused by, was actually genuinely exciting to me. I felt this was a way to answer these questions much more directly than just writing some code at work.&lt;/p&gt;
&lt;p&gt;Zach: 00:09:54 That was really what drove me to go and build more open source libraries, was the fact that I could get feedback, sometimes explicit and sometimes implicit through just people choosing to use or not use the thing that I have built. Of course, it’s not objective, because once you become established in the community, people use it not because they’ve carefully considered all the alternatives or something like that. They use it because there’s a brand associated with that or whatever. It’s more complex than I think I’m making it out to be, but still I think that it was an opportunity for me to learn about software design much more quickly than I would just if I were heads down coding through the work day and letting it go at the end of the day.&lt;/p&gt;
&lt;p&gt;Daniel: 00:10:34 Nice. I’ve heard lots of people talk about why they contribute to open source, and why they create open source libraries. But I’ve never heard anyone talk about that aspect of understanding good design, at least not as clearly as you have.&lt;/p&gt;
&lt;p&gt;Zach: 00:10:46 Well, I think that people are motivated to do open source for a wide variety of reasons. I mean this will, I assume come up later in the conversation, but this is something that I don’t think that if you would have asked me when I started doing this like, “Why are you doing this?” I would have had as articulate an answer to that question. I think that at the time it was just weirdly compelling for reasons I couldn’t quite say. In the same way that Clojure as a language is weirdly compelling to me for reasons I couldn’t quite say. The answer I would give when I was just starting out and I was telling people about this cool, new language that I was using, they would say, “Well, cool, pitch me on it.” The best I could come up with was just, “It fits my brain, it fits the way that I think and maybe it will fit yours too if you check it out.” It’s far from the most winning elevator pitch I think, but it’s hard. It’s hard to, I think, be really clear about, “Why am I having anesthetic reaction to this thing?”&lt;/p&gt;
&lt;p&gt;Zach: 00:11:42 It’s undeniable that I was and that other people have had this reaction to Clojure. To really break it down I think is a much more complex process, I’m not even quite sure that I’ve fully done it at this point.&lt;/p&gt;
&lt;p&gt;Daniel: 00:11:55 Yeah, maybe … diving back into your timeline there, that after Potemkin the other long running Clojure library, that I think many people will be familiar with is Aleph which is a … Would you still call it a Netty wrapper? Wrapper sounds quite diminutive.&lt;/p&gt;
&lt;p&gt;Zach: 00:12:12 It’s interesting, so, to start from the beginning, Aleph started in … I want to say 2010.&lt;/p&gt;
&lt;p&gt;Daniel: 00:12:19 Yeah.&lt;/p&gt;
&lt;p&gt;Zach: 00:12:20 I believe around July. I remember because I wrote it over a long like 4th of July weekend, that was when that happened. The impetus for that was that, I had gone to a Clojure meetup and people were talking idly about what would an async ring look like? And it’s important to remember that in 2010, the new hot news was Node.js. This had just come out I think less than a year prior. It was taking the world by storm, everyone was really excited to async all the things.&lt;/p&gt;
&lt;p&gt;Zach: 00:12:54 And I think that there was a sense that Clojure as another newcomer on the stage needed to have an answer to Node.js. What was our community’s thing that was going to be able to tap into the same excitement and be able to use it to grow our community as well. I didn’t have very good answer to it, and it’s worth remembering at this point, I was doing front end … or really I guess desktop development, and my background was in graphics. I hadn’t done systems development or any real sort before. But it seemed like an interesting problem, and other people that I was talking to there who were more experienced of this problem than I was, felt it was difficult and hard to navigate. And so, I thought I’d just play around with it a little bit.&lt;/p&gt;
&lt;p&gt;Zach: 00:13:41 And so, I found Netty, which was like the Java async option. And I wrote just enough code in Clojure to expose enough Netty that you could stand up in http server. That was over the course of a couple of days, and I tested. I curled it once to make sure that it were to return “Hello World!”, that was the extent of my testing. And then I just was like, “Hey, here’s the thing.” I think I posted it on the Clojure mailing list. I haven’t looked at this announcement for a while, but I think I was pretty clear. This is just like me playing around with what does async Clojure look like?&lt;/p&gt;
&lt;p&gt;Zach: 00:14:16 And someone posted on the Hacker News that David Nolan ran a benchmark, which I had not bothered to do up until that point and said, “It’s faster than Node.js,” which is a total not apples or oranges comparison for tons of reasons. For instance Node.js is single threaded, and he was on an eight core machine or something like that. It was an absurd comparison. But both the announcement and the benchmark made it to the top of Hacker News for a day. I had my little moment in the sun, and it was absurd on some level because literally I had just written a “Hello, World!” demo of how one could interact with Netty and Clojure.&lt;/p&gt;
&lt;p&gt;Zach: 00:14:57 But what that did prove to me is that there was an interest in that space, and a much more avid interest than there was in Open Gl, which is where I’d been putting all of my time and effort up until that point. And so, I thought, “Well, if people like this and people are interested in this, maybe I ought to think about this some more.” And so, I started to tinker with it and think about, “Okay, what are the right ways to deal with asynchrony?” and other sorts of things like that. And at some point all of those questions, which were largely orthogonal to Netty specifically got pulled out into a library called Lamina, which was dealing with kind of data flow streams. Now, it wasn’t a queuing library because none of the things there had back pressure or like any of the things you’d assume that a queuing library ought to have. It left that as a, “At your end you should be paying attention to when things come out the other end.” And, “If there’s too much then stop sending stuff in.”&lt;/p&gt;
&lt;p&gt;Zach: 00:15:58 And that just was reflective of, again, my lack of experience there. These are not things that I realized were important to have. On the basis of that, on the basis of me just really brazenly trying to solve problems, I had no business or experience trying to solve, people gave me a lot attention. And I got a job offer out of that to go work on Clojure full time. And so, that was very beneficial to me and I think that like also that is very reflective of how I’ve treated a lot of open source libraries, which is a chance for me to go and learn about something I didn’t know very much about before with the idea that if I’m doing it in public, it’s going to be extremely embarrassing if I get it wrong, so, I better not get it wrong. So, I better think about it pretty hard and put the time in to make sure that it’s not at least embarrassingly wrong, which again sometimes it is. That’s a lot of the motivation for me, is that I feel like I learn better in public, I guess, or learn more quickly at least.&lt;/p&gt;
&lt;p&gt;Daniel: 00:16:59 You’re working in public, but also what are your thoughts, how do you feel about working with other people? Not just showing your work, but also contributing with others or having others contribute?&lt;/p&gt;
&lt;p&gt;Zach: 00:17:10 I mean I’ve done a little bit of it, but I have to confess that a lot of what I’ve worked on … I mean, certainly Aleph by now is a collaborative project. At this point I’m getting a lot of contributions from Alexei [inaudible 00:17:25] and he is, at this point, basically maintainer and all but name of that library. And I’ve been talking to him a little bit about whether or not he would like to make that a little bit more formal.&lt;/p&gt;
&lt;p&gt;Zach: 00:17:34 For some of the other ones that I’ve worked on, I think that occasionally someone will just come in with a PR where it’s clear that they just must have spent days digging into the innards of something and come up with the exact two line change that needs to go and fix the problem. I’m always incredibly surprised and impressed when somebody does that. But whether it’s just kind of like the code seems a little bit weird than what people are used to or they just don’t feel like they’re up to the challenge of understanding it … I don’t know what. I have not successfully created many projects that people are comfortable going in, contributing to. I think that Aleph is the one that is exception to that rule, basically.&lt;/p&gt;
&lt;p&gt;Daniel: 00:18:16 Right, I guess maybe following on from Aleph and Lamina, another asynchronous streaming library would be Manifold, which looks like some of the things you learned from Lamina.&lt;/p&gt;
&lt;p&gt;Zach: 00:18:28 Yeah, basically. It was a chance to do a clean sweep. So, the exact order of operations here is I wrote Lamina, Lamina was a kitchen sink for all the ideas I had about asynchronous everything. Had a ton of Macros. Had a ton of really complex stuff in there. Then core.async came out, and core.async was a different overall approach. But the thing that it really had over Lamina is that it was incredibly simple, which is not to say the implementation was simple, but the API that it had come up with was very direct. It had a handful of operators you had to learn. It had a couple of very big caveats in terms of the way it did [inaudible 00:19:06] writing in terms like not being able to enter into functions inside of a go routine which I think is still the case. But other than that I think it just was a smaller conceptual surface area for someone to have to learn.&lt;/p&gt;
&lt;p&gt;Zach: 00:19:21 And I was impressed by that and I certainly wasn’t upset that someone had not taken Lamina and just being like, “This is clearly the way to go.” Because it’s just a ridiculously big sprawling mess. But I had concerns when I looked at it that they were thinking like, “Oh, well, this is just how Clojure’s going to do a asynchronous stuff from now.” Because it had a very tight coupling between the way that it dealt with an event that hadn’t occurred yet or data that we haven’t received over a channel yet and the execution model. Like when does the code that consumes those things run? Notably it had a fixed size thread pull that all that stuff had to run on. And that seemed like a reasonable decision you could make if you were writing an application, but I think a very limiting choice to make if you’re writing a library. Because a library doesn’t go and get to dictate what the execution model of the code that is consuming that library ought to run on. I think that that’s not the right sort of separation of concerns there.&lt;/p&gt;
&lt;p&gt;Zach: 00:20:21 And beyond that, I think that core.async is an entirely separate way of thinking about lazy or eventual consumption of data which doesn’t play nicely necessarily with, for instance, [inaudible 00:20:32] or with Java Queues or with a bunch of other sorts of things that are all playing in the same space, all are mutually incompatible with each other. And so, my thought was, “Let’s go and take the intersection at the center of this Venn diagram of all these things and be something that can go and bridge the gaps between all of them, can convey data between them. And also provides something that is a reasonable, unopinionated set of abstractions that you could use in a library because it’s very easy to go and turn that from the manifold representation. And a manifold is just a thing that goes … like sits between a bunch of pipes or conduits or something like this and connects them to each other. It’s just the neutral party there. It’s Switzerland in the asynchronous territories.&lt;/p&gt;
&lt;p&gt;Zach: 00:21:18 And that was the motivating factor. It was also just that I felt like Lamina was something where I’d made so many mistakes that I needed to go and just start over. But that was the idea. And so, I wrote that and then I rewrote Aleph on top of that. I think that core.async still is a much more widely used library in terms of the Clojure ecosystem. But Manifold, I think, has a smaller group of fairly avid fans. And I think that people will occasionally reach out to let me know that they’ve used it in one way or another often on a fairly central piece of their infrastructure. And that’s always really gratifying to hear.&lt;/p&gt;
&lt;p&gt;Daniel: 00:21:54 Yeah. I remember when core.async came out and for a few years afterwards many libraries would provide, if there was an asynchronous API it would be a core.async API. And that’s maybe … I’m not sure if maybe I’m just paying less attention or it no longer surprises me anymore. But I don’t feel like I see that so much anymore that people are doing less asynchronous stuff maybe, just because it’s already been written or they delegate. It just seems to be less common that core.async is the API for new libraries.&lt;/p&gt;
&lt;p&gt;Zach: 00:22:30 I think that’s true. And you could ascribe a lot of reasons to that. I think one of which is just that asynchronous is less cool than it used to be. And so, having that be a necessary component of your API is no longer seen as a requirement. I also think that core.async just hasn’t seen a lot of uptake on the server side of things. There are absolutely counter examples of that. But I think where core.async has seen a lot of use and I think provides the most value is in Clojure script. Like in the front end.&lt;/p&gt;
&lt;p&gt;Zach: 00:22:59 And that also comes back to … in that case it’s not going and imposing its own execution model, because JavaScript has its own execution model that is non-negotiable. So, I think that in that case, some of the downsides articulated just frankly don’t exist. And also there’s fewer things that can do what it does. And so, I think that that probably wasn’t how it was conceived of at the time but I think that Clojure script was core.async’s killer app or possibly the other way around.&lt;/p&gt;
&lt;p&gt;Daniel: 00:23:29 Yeah. That’s an interesting point to end, so we considered the Clojure side of it so much. I’ve done a lot of work with re-frame, which doesn’t tend to use core.async so much, it has it’s own queuing model and asynchronous execution. But I know certainly many other Clojure script applications that don’t use re-frame and probably some that do use reframe, use quite a bit of core.async.&lt;/p&gt;
&lt;p&gt;Zach: 00:23:51 And I think most of the wrappers for making an hv-call or doing WebSocket communication, whatever, they al use core.async because that is a reasonable way to go and expose that in that ecosystem I think.&lt;/p&gt;
&lt;p&gt;Daniel: 00:24:04 Yeah. So, there’s other smaller libraries you’ve written. One that I’ve come back to … I’ve used it over the years and still use it today is byte streams, which is just a very useful thing. Especially when you don’t necessarily … I know it’s fast enough that it’s not a core performance tool by any means, but especially when you don’t really care about the transformations and you just want it … so, for people who are not aware, byte streams is a utility knife for byte representations. Is that the tagline?&lt;/p&gt;
&lt;p&gt;Zach: 00:24:39 I called it a Rosetta Stone for byte representation. The ideas that … there are many things in Java or in Clojure that represent a collection of ordered bytes. So, a byte array is the most obvious, but a byte buffer is one that got introduced in Java 1.5 and is weirdly incompatible in some ways, or some APIs won’t accept one versus the other. And then you have strings and character sequences which are clearly bytes with some additional meta data atop them. But you want to be able to convert from one to the other. And then when you start getting into Clojure specifically, you have things where it’s like, “Well, what if it’s a sequence of byte containers? What if it’s a sequence of strings? What if it’s a core.async channel of strings? Or a manifold stream of strings or byte arrays or what have you?”&lt;/p&gt;
&lt;p&gt;Zach: 00:25:35 And all of these are isomorphic to each other in that they contain the same core information but all of the APIs expect them to look like a very particular type of representation. There is nothing that will go and just take whatever you give it and find a way to go and make it into what it needs.&lt;/p&gt;
&lt;p&gt;Zach: 00:25:56 And in fairness, that’s not what you really want in an API. An API should be strict in terms of what it accepts. Because otherwise the performance characteristics there are unknowable. But you as the application writer, as the person who’s gluing together these strict APIs, you don’t want to think overly much about how to convert this. So, the idea was that I would come up with a bunch of these little piecewise conversions. Like, how do you turn a sequence of byte buffers into a byte buffer? How do you turn a byte buffer into an array? How do you turn an array into a string.&lt;/p&gt;
&lt;p&gt;Zach: 00:26:27 And so, if you go and give it something which is a sequence of byte buffers and say, “I’d like this to be a string with a UTF-8 encoding,” it’ll go and just compose together the stepwise transformations and poof, you have a string. And because it’s a graph of type conversions and each of them has a cost associated with it. Like, “How much copying of memory are we doing here?” It can find the minimal path.&lt;/p&gt;
&lt;p&gt;Zach: 00:26:50 So, and then once it finds the minimal path between point A and B it’ll [inaudible 00:26:55] that so that it’s not having to go and do that search repeatedly. And so, there are some constants here. Certainly, there’s overhead of the initial graph traversal. There’s the overhead of the [inaudible 00:27:07] functionals, all that sort of stuff. And so, if you just really care about performance this is not what you should be using. But if all you really want to do is just take data that’s in some shape and turn it to data that’s some other shape without thinking about it too much, then it’s a very useful tool.&lt;/p&gt;
&lt;p&gt;Zach: 00:27:21 And yeah, I think that that’s a very helpful piece and is used extensively inside Aleph to turn from Netty’s own peculiar byte containers into other sorts of things. And the nice thing about this is that it is an extensible graph. You can go and create an edge between the existing graph and some other representation you might come up with and now you get that transitive transformability into all these other things for free.&lt;/p&gt;
&lt;p&gt;Daniel: 00:27:44 Nice. Like you said, a more conventional way that this might have been written in Clojure lang would be to use perhaps multimethods or some other implementation writing that [inaudible 00:27:57] and this to this is this transformation but that wouldn’t have been quite so extensible as what you’ve come up with with the graph.&lt;/p&gt;
&lt;p&gt;Zach: 00:28:05 Right. And in fairness, I wrote little util name spaces that would do piecewise transformations like you described, a number of times before I finally broke down and tried to generalize this. Because I try not to turn to the most absurd way to go and solve the problem immediately. I try to keep myself a little bit honest there. But it is, I think if you’re doing systems programming in Clojure, it just keeps on coming up. It just keeps on coming up that you have to go and do this because you’re getting bytes over the wire but they’re actually like [inaudible 00:28:37] so, you have to go and do all these other sorts of things.&lt;/p&gt;
&lt;p&gt;Zach: 00:28:39 And either you just create this memory palace that has all of the conversions just sitting in it or you create this ever increasingly large utility name space or you just try to create something which is an extensible version of that utility name space. And so yeah, I think that that’s a library that I still get a lot of use out of. And so, I think that that’s probably one of my more successful open source experiments.&lt;/p&gt;
&lt;p&gt;Daniel: 00:29:06 Right. And the other thing that you’re pretty well known for is your work on data structures, high performance, functional, data structures. And you’ve worked on quite a few of them over the years and most recently with the …&lt;/p&gt;
&lt;p&gt;Zach: 00:29:22 It’s bifurcan, I think is what you’re searching for.&lt;/p&gt;
&lt;p&gt;Daniel: 00:29:24 Yes. Yes, yes. That’s the word. I didn’t know that was the pronunciation.&lt;/p&gt;
&lt;p&gt;Zach: 00:29:28 yeah, so it’s actually … so, circling back to Aleph, I have two different libraries that are named for a Jorge Luis Borges story. He was this Argentine writer from the first half of the 20th century who was a librarian. But he wrote a lot of these little short stories and other essays about infinities. How things become absurd once they’ve hit their limit of infinity. And so, the Aleph is a story about a guy who discovers that if he walks into his wine cellar and stares just beneath the 12th step into the cellar, he sees a point from which he can see all points, which he calls the Aleph, because the Aleph is the notation for infinity.&lt;/p&gt;
&lt;p&gt;Zach: 00:30:14 And obviously it’s a completely ridiculous premise, but he plays around with it. And he has a very playful tone in a lot of his stories. And the idea of a networking library being the point from which you can see all points seemed a propos at the time. And so, that’s where that came from. And bifurcan is from another story of his called The Garden of Forking Paths. Bifurcan means broadly, “It forks,” I guess, in Spanish. It bifurcates. That’s one about this branching narrative where there are many paths through the story that are being explored. Some people actually call it the first narrative or literary example of hypertext.&lt;/p&gt;
&lt;p&gt;Zach: 00:31:00 I think there were actually a couple of people who have tried to go and rewrite the story as a hypertext navigable narrative. And the reason that I called it that was … so, Clojure, of course, was I think very much at the forefront of so-called persistent or immutable or functional data structures. Have your pick as to what you call them. I’ve settled on functional because immutable implies nothing can change. And persistent implies that it’s persisted to disk to a fairly large portion of the software community. So, I think functional is maybe the best thing, which is that I take a function, I return a new function. There’s a functional semantics associated with the API.&lt;/p&gt;
&lt;p&gt;Zach: 00:31:43 And so, Clojure uses the terms persistent and transient to talk about data structures which do allow for this pure functional semantics versus this mutable functional semantics. Like you give it a data structure, it still returns a new data structure, but it reserves the right to go and mutate that data structure in the process. And the use of transient is a little bit of a weird one. Because if you go and look at the literature around data structures, they actually prefer ephemeral. Like persistent and ephemeral are antonyms to each other. I don’t know. I am extremely fussy about nomenclature. As people who have read my book may be aware.&lt;/p&gt;
&lt;p&gt;Zach: 00:32:23 And neither of … the idea persistent versus ephemeral, these feel like things that you talk about, again, with storage devices. Like main memory is ephemeral memory. And it’s the sort of thing where it feels like the wrong analogy to me, basically. And so, the one that I settled on was this idea of thinking about the data flow. So, if we’re going and we have a data structure … typically where you use transient data structures is we have an empty data structure and we want to fill it with a bunch of stuff. So, we go and we take it and we take this empty data structure and we [inaudible 00:33:00] a value and then we [inaudible 00:33:01] a 1,000 more values.&lt;/p&gt;
&lt;p&gt;Zach: 00:33:02 And each time we’re going and effectively discarding the previous version of that data structure. We don’t care about it anymore. We only care about the most recent. And in that case we have this linear data flow where each time you’re not holding on to the previous reference. You only care about the new one. And that previous value only exists to go and feed into these accumulated data structures that were building. In my mind that’s a linear chain of that data structure flowing through those method calls. In the cases where we actually want it to be, “Persistent,” where we want it to have true immutable semantics there, is where that chain, that linear chain, forks, where it bifurcates. Where now two people need to be able to own this data structure. And we don’t know what each of them is going to do with it.&lt;/p&gt;
&lt;p&gt;Zach: 00:33:47 And so, my terminology, which is entirely of my own invention and I think this is a bad habit to not go and honor what the industry calls it or [inaudible 00:33:56] calls it, but in all those cases I think it is sufficiently niche and confusing that I could justify this, is I called it a linear data structure. Which is one that we assume is linear data flow we allow for mutation, and a forked data structure, which is one where there are multiple owners or presumed to be multiple owners. And therefore we need the more classic structural sharing and partial copying and all that other stuff.&lt;/p&gt;
&lt;p&gt;Zach: 00:34:23 And so, bifurcan means forked or, “It forks.” And so, it seemed an appropriate name. Also, of course, all these data structures under the covers are trees. And so, it felt like it had a slight dual meaning, at least that I found amusing. And that’s really the ultimate measure whether I like a name is, “Does it amuse me?” So, that’s what I went with.&lt;/p&gt;
&lt;p&gt;Daniel: 00:34:46 Yeah. I had to think a little bit about that, the linear name, was not immediately obviously to me. But yeah.&lt;/p&gt;
&lt;p&gt;Zach: 00:34:53 And I think that you could very rightly quibble with that. But it’s something where I was writing it as … it is a Java library. It is aimed at Java programmers because I feel like Clojure has a lot of really interesting ideas and even though its core library is largely written in Java, those APIs were never meant for public consumption. And there are a few people who have gone and taken that and cleaned it up and changed the hashing inequalities semantics back to the standard Java variants and then just exposes as a library. There’s one called Paguro, I think … P-A-G-U-R-O, that does this.&lt;/p&gt;
&lt;p&gt;Zach: 00:35:30 It’s fine but it’s a little weird. And it will seem weird to anyone who doesn’t understand the lineage of that code and understand like, “Oh, well that’s what it’s called in Clojure.” And so, the idea was, if we just wipe the slate clean, don’t worry about the conducts, because we’re trying to go and sell this to people who do not have this built-in communal understanding of, “Here’s why Clojure’s data structures are great, here’s what persistent means, here’s what transient means.” If you assume none of that, then I think that you can be a little more free with the terminology and hopefully linear and fork make certain amount of sense. But it’s entirely possible that it doesn’t or a more standard term would’ve been better in that case.&lt;/p&gt;
&lt;p&gt;Daniel: 00:36:11 And so, this maybe isn’t necessarily the best measure of a data structure that’s very important, but the performance of these data structures is extremely competitive. With mutable Java often and it’s going to be a lot faster in many cases than Clojure’s built-in collections.&lt;/p&gt;
&lt;p&gt;Zach: 00:36:28 Yeah. So, Clojure, unfortunately, suffers from equality semantics, which I’m not going to go and litigate whether those were the right choices. But the fact that it, for instance, says longs and big nums, that represent the same value are equal. Which is not true in Java. You can’t go and check that a 1 and 1N are the same thing. So, if you call .equals() on that, then that will return false. And in Clojure that would seem as a something that was worth preserving. In part, I think, because Clojure having auto overflow was seen as a huge value add for the language, which I think has not necessarily proven out. But, again, these are things that you expect to find in a Lisp, is a rich numeric stack.&lt;/p&gt;
&lt;p&gt;Zach: 00:37:17 So, for that reason though, creating hashes and checking equality is significantly more expensive. And largely because it’s just large enough that it can’t be easily end lined. And so, doing simple things in Clojure, like adding a key to a map, which invokes all those equality semantics, just costs more. So, you compare it Java, you compare it to Scala, you compare it to any of those sorts of things and Clojure is just marginally but measurably slower.&lt;/p&gt;
&lt;p&gt;Zach: 00:37:44 The additional thing that I do in bifurcan though that is probably cheating in the eyes of anyone else who’s libraries I’m comparing this with, is I say, “Well, we want to be able to switch between this mutable and immutable representation,” like this linear and forked. But there are cases where we never care about forking the data structure. And this is actually where immutable data structure is fine, where using a Java hashmap is fine, is it’s just local to some scope, you’re using it as a little accumulator. No one else will ever see it, no one else will ever write to it. Therefore, “Why are we bothering with immutability in the first place?” And so, I said, “I’m going to write variants of my data structures which share the same API but are just permanently mutable, or rather if you want to make them immutable it’ll create a little wrapper around it that will make it so you can’t write to it directly anymore and we’ll just keep track of which keys have been added and removed atop this base data structure.&lt;/p&gt;
&lt;p&gt;Zach: 00:38:41 And this is legitimately cheating if you’re going and just saying, “Who’s written the highest performance tree based data structures?” But I think it speaks, if you were speaking to, “What are the actual workflows that people are using their data structures for?” There are a great deal that don’t require this kind of behavior at all. But we want to have the opportunity to, if we need to go and now take this data structure and pass it off to somebody else, to make it something which has that functionality. And so, by saying I can instantiate this map, this eye map, this generic map, with either something which is permanently mutable or flexibly mutable and having that not change all the downstream code, not change the implications, not change the semantics in a meaningful way, I think is useful. Or hopefully is useful.&lt;/p&gt;
&lt;p&gt;Zach: 00:39:32 So, in that case, it’s pretty easy to be competitive with Java, because I’m just writing another mutable data structure. But it has the key difference here is that it has a functional API, one where you go and you pass in a collection and the thing you want to do to that collection, and it passes back a new collection. Or at least passes back a collection which might be the same thing. And so, you don’t have to think super hard about what are the semantics of this thing, except in the sort of, “Is it in this moment a mutable or immutable data structure?”&lt;/p&gt;
&lt;p&gt;Daniel: 00:40:06 Right. Another data structure improvement change you worked on was the unrolled tuples. Both a library and in a patched Clojure, if I’m remembering correctly. So, that ultimately didn’t make it into Clojure, I wondered if you had any thoughts on that. Anything you wanted to talk about in relation to that?&lt;/p&gt;
&lt;p&gt;Zach: 00:40:28 Yeah. This actually came out of some work I was doing on byte streams. Because in byte streams you’re going and you’re saying, “Hey, I want to look up what is the fastest path between this type and this type for conversions.” And it turns out that in Clojure, doing that lookup is in some cases as expensive as simply doing the conversion. Because some of that stuff is very optimized, like going and turning a string into an array of bytes or something like that. That takes about 100 nano seconds. And the lookup to find out how to do that also took 100 nano seconds.&lt;/p&gt;
&lt;p&gt;Zach: 00:41:01 And so, I started looking at why that was and the reason was that I was going and I was doing a lookup where I was instantiating a vector of the from type and the to type. And then doing the lookup. And that was just slow because the tuples had to be instantiated in the way where it’s like, “I’m taking an arbitrarily sized vector and then adding two things.” And then going and calculating a hash on that was a little bit slower. And so, there’s a few things that were just small little losses of performance that were adding up to enough that now byte streams was a measurably slower way to go and do this conversion.&lt;/p&gt;
&lt;p&gt;Zach: 00:41:35 And so, my bright idea for how to fix this was, “Well, if we know that it’s just going to be a two vector, this is going to only ever contain two things, why not create a special two vector? And for that matter, why not make a special one vector and zero vector and two and three and so on.” In my case, up to six, which was a fairly arbitrarily chosen thing but I just got sick of going and trying to deal with that stuff.&lt;/p&gt;
&lt;p&gt;Zach: 00:41:59 And so, I first wrote this as a macro generated thing. And it worked pretty well. At least worked well for the use case I was coming up with, like that two tuple, or two vector lookup became measurably faster. And so, I talked about this at a conference and Rich was there and I was talking to him over lunch and I said, “Would you have any interest in putting this into Clojure?” And he said, “Yeah, sure. As long as you write it in Java.” Because Clojure data structures are written in Java, that’s just how it is. And I was like, “Okay. Well, I wrote this whole thing using Macros, I’ll get back to you on that. I don’t know if I … ” because even if I were to just go and take a agonizingly long day and type a bunch, I would probably make lots of little mistakes, copy paste errors, all the other stuff.&lt;/p&gt;
&lt;p&gt;Zach: 00:42:48 And so, I let that hang there for a while. Probably eight or nine months. Until for a hackathon when I was working for Factual, I decided, “Let’s give this a shot.” And the way that I decided to do that was, “I’m going to write Java that generate … ” I’m sorry, “I’m going to write Clojure,” rather, “That generates the Java for this.” The way I did that is I basically took some code from Eclipse that did Java indentation. I used that as basically a syntax check. So, “I’m going to go and create a big blob of Java that has no new lines in it. And then I’m going to go and pass it into this formatter and if that’s correct, then I’m going to assume it’s reasonably well formed.” Maybe not semantically correct, but that’s something that you can test generatively. So, that’s pretty straightforward to go and do once you have the Java all written out and compiled.&lt;/p&gt;
&lt;p&gt;Zach: 00:43:36 And so, it was a total hack. The hack that I feel really kind of pleasing in a perverse way. And so, I had that and then I circled back and I said, “Hey, I’ve got this. I’ve got thousands of lines of Java that I’ve generated. Do you want this in Clojure? Yes? No?” And the response was tentatively positive. Because anytime someone comes to you with a PR which is just enormous, you want to go and say, “Yeah. Okay. Well, maybe.” Certainly you don’t want to just get a, “Yes.”&lt;/p&gt;
&lt;p&gt;Zach: 00:44:07 And I said, “Look, I just want to make sure that I’m spending time towards some productive end, so just let me know. I could also do the same thing for maps if you like.” Because we could have a map of one, map of two. And in fact, Clojure has two different types of maps. It has the hash map and the array map, where the array map is just a flat list that you linearly scan. There’s no actual attempt to go and hash locate anything. And for any map smaller than eight elements it will go and use that approach, because that deems to be a more efficient approach overall.&lt;/p&gt;
&lt;p&gt;Zach: 00:44:43 And so, this had some prior art to it and so they said, “Yeah, sure. Go ahead. That’ll be helpful just for comparative purposes.” So, I wrote that. And this all took place over about 18 months. I was chipping away at this just whenever the mood took me. There was no one who was willing to commit on the other side to like, “Yes. Let’s go and test this.” But I did it, I wrote some benchmarks. And I’d been pushing on his for a little bit. And then at that point finally Rich entered the conversation. Because the contribution process is that there are some gate keepers, it’s Stu or Alex or whomever, are going and making sure that the PR is sufficiently vetted. At which point Rich will come in and consider it. In this case mostly for the first time.&lt;/p&gt;
&lt;p&gt;Zach: 00:45:31 And so, he looked at it and he said, “That’s an awful lot of code. I think I can do this … I can go and get the same effect by doing less.” And so, he wrote up a much smaller thing that unrolled in a much less aggressive way and said, “If we’re going to do this, this is what I’m going to use.” And I was, I think at the time, pretty upset about that. Because it felt to me like if all I was doing was writing a proof of concept, why all of the attempts to go and polish this and make this a very complete and production ready PR … like if all it was just way, “Here’s a thing that Rich might want to write someday.”&lt;/p&gt;
&lt;p&gt;Zach: 00:46:10 And I think that I still think that that was reasonable reason to be upset about this. And I think that this is something that people [inaudible 00:46:18] before. The reason that I can’t go and really hold a grudge about it is because once Rich ran it, and he put it into Clojure proper, which I had not done yet. I’d only used it for a couple of cases like this two tuple lookup. And then a couple of other tests that I had run on some code. But I hadn’t gone and taken a version of Clojure with these new data structures jammed in and seen what happened. He found that it wasn’t actually faster on the whole, because having seven different classes that implement vector make that actually less efficient in terms of dispatch. It’s what’s called megamorphic dispatch where Java can no longer do clever things in terms of being able to figure out which implementation it should go en route to when you go and call conj, for instance.&lt;/p&gt;
&lt;p&gt;Zach: 00:47:00 And this is not something that I had tested in any way. And, to be fair, I’ve still not seen Rich’s benchmarks for any of that stuff.&lt;/p&gt;
&lt;p&gt;Daniel: 00:47:09 Yeah, I was going to ask about that.&lt;/p&gt;
&lt;p&gt;Zach: 00:47:11 Yeah. I have not. He just said, “This is slow. I think it’s because of megamorphic dispatch.” And that parses, that is a thing that I think is quite possible. I have no idea what he was testing on, I have no idea what his methodology was. It is genuinely something that I had no thought of [inaudible 00:47:27]. My enthusiasm had pushed me, I had not stopped to consider that side of things. And so, I’m happy to go and say that that was my bad. It was a less good idea than I thought it was. If it had turned out to be exactly as good an idea as I thought it was and then my implementation not made it into Clojure proper, I think I woudlve probably held a little bit of frustration there still because it’s a little bit weird to be trying to contribute and then finding that actually you’re just providing a general sketch of what will at one point be in the code. Because I think that there’s a pride that you derive from saying, “I like Clojure, I use Clojure.” Clojure is in part code that I’ve written.&lt;/p&gt;
&lt;p&gt;Zach: 00:48:09 That last part is, at least to a certain person in the open source community, a really key part of what motivates them and makes them feel like Clojure’s ongoing success is something that they are very invested in. At the very least I feel like I’m one of those people and I’ve known other people who I think get frustrated with Clojure for the same reason. But I will say, very explicitly, in this case for the unrolled tuples, that is not something that I harbor any great frustration or resentment about. Because, turns out, it was not nearly as good of an idea as I thought it was, or at the very least, there’s a plausible reason for why it wasn’t.&lt;/p&gt;
&lt;p&gt;Daniel: 00:48:45 Right. Yeah, that’s good. I don’t think I had all of that context all in one place and one conversation, I’d picked up different bits and pieces.&lt;/p&gt;
&lt;p&gt;Zach: 00:48:54 Yeah. I don’t think … I never did a writeup of it. Possibly that was bad idea because I’ve seen people use that whole experience of an example of being like, “Here’s why the Cognitect contribution process is no good.” And again, there is an alternate version of this thing where that actually, I think, is a legitimate point to make. But in this case where it turns out that my idea was not well suited to be in the core language, [inaudible 00:49:20] only be good as a stand alone library because if you’re using it for something where you don’t have many different sizes of vectors or something like this. It is legitimately faster. But it is not well suited for the general purpose, Clojure implementation because of that.&lt;/p&gt;
&lt;p&gt;Zach: 00:49:35 So, I think that it’s not something that people should use as the shining example of why people are getting frustrated with Clojure’s contribution process.&lt;/p&gt;
&lt;p&gt;Daniel: 00:49:45 Sure. But one thing in that that … there’s probably a few things we could take from that process, one was I guess the expectations or communication about expectations where it seems like there was perhaps a mismatch of what you thought you were doing and what the likely outcome or response was going to be and then what it actually turned out to be. Those didn’t seem to be aligned.&lt;/p&gt;
&lt;p&gt;Zach: 00:50:09 Yeah. Well … So, I’d seen … I’d been working with Kyle Kingsbury, who’s better known as Aphyr, around that same time. And he had gone through a similar process where keyword interning in Clojure for fairly slow for reasons that were not intrinsic to how keywords worked. But if you went and you tried to convert a string into a keyword it would take a long time to the point where converting or parsing, rather, JSON, where you wanted all these keys to be keyword-ized, the major computational cost there was just turning strings into keywords.&lt;/p&gt;
&lt;p&gt;Zach: 00:50:45 And so, he went through a similar exercise where he came up with a big … or not even a very large PR, but a 20 change or something like that. Went through all the hoops in terms of demonstrating that this is indeed faster, there are no regressions, etc. And then in the end Rich took his PR and rewrote it. So, then Rich was like, “Well, thanks for the recommendations as to how I could go and I could fix this.” I, having seen that payout, I thought I was being very clever by checking in periodically saying, “You still want me to do this, right? This is still a thing that you want?”&lt;/p&gt;
&lt;p&gt;Zach: 00:51:16 And I was assured along the way like, “Yes, yes. This is good. This is great.” What I assumed, I guess, was that when someone who was at Cognitect told me that that was on the basis of some sort of conversation they were having. That was a collective assurance as opposed to a personal assurance from Stu Holloway or something like that. And it turns out that it wasn’t. And looking back I can’t point to anything that made me reliably infer that this was Cognitect as an entity giving me this assurance. But when in fact, basically what it was is that someone was saying, “Yeah. I’m pretty sure Rich will like this when he takes the time to look at it.” And then Rich took the time to look at it and didn’t like it.&lt;/p&gt;
&lt;p&gt;Zach: 00:51:55 And so, I think that the assumptions that I had going in were wrong. And I think that it’s interesting because there was a little bit more recent drama with Clojure, which we can talk about if you would like to. But basically I was going and voicing some of my frustrations. Which again, are not because my data structures didn’t make it into Clojure but because I see people who want to make Clojure something that they feel somewhat degree of ownership over are being turned away, basically. And from that they lose a lot of their motivation to continue to invest in the community and end up going elsewhere. Some of them more loudly than others.&lt;/p&gt;
&lt;p&gt;Zach: 00:52:37 So, Chas Emerick, for instance, has largely vanished. He’s writing Haskell these days. And he wrote a book. He contributed a ton to the Clojure community and then one day he just stopped showing up. And I can’t speak for him and all of his reasons but I think that he has articulated to me that he’s definitely seen a shift in terms of how people were encouraged to go and help shape Clojure as a collaborative process versus this very top down autocratic process. And it’s undeniable that that has changes. The NS Macro in Clojure was not created by Rich. It was created by Steve Gilardi.&lt;/p&gt;
&lt;p&gt;Zach: 00:53:18 Originally you were just encouraged to go and put a bunch of imports and requires and whatever as the prelude to your thing. There wasn’t a single NS Macro that did all of those things. And try to imagine someone today coming up with a different way to do namespace declarations in Clojure. Try to imagine someone going and saying, “I’ve got a great new idea for the ergonomics of Clojure.” It wouldn’t even make it off of the initial post. People would just be like, “Yeah. Sorry. This is never going to happen.” And, in fairness, there’s this concept in neurophysiology called plasticity, which is basically how quickly does your brain reshape itself in response to incoming stimuli? And children have extremely plastic brains. Adults have much less plasticity in their brain, which is probably good. Because when you’re a child you’re changing a lot. You’re going through all these things. You want to reach this level of maturity and stability. You don’t want to go and shake things up all the time just because you can.&lt;/p&gt;
&lt;p&gt;Zach: 00:54:21 And so, I’m not saying, “Why aren’t we able to go and rewrite Clojure from release to release,” or something like that. But I think it’s fair to say that there has been a change and that there was a time when Clojure was a more collaborative process. And to pretend that it has never been that, which I think is sometimes a talking point that comes up, is false. To say that it shouldn’t be that is fair. And I think that is a defensible stance, though not necessarily one that I agree with. But some people say like, “It’s always just been Rich’s thing. And there’s never been external input. There’s never been meaningful changes to how the language is written by people who are not working for Cognitect or not Rich himself,” isn’t true. It’s just that that time where that was a reasonable expectation about how the language was maintained has passed.&lt;/p&gt;
&lt;p&gt;Daniel: 00:55:11 Yeah. And I think either of those approaches are valid ones to take. But probably my frustration or my feelings about it was that the issue was that wasn’t explained particularly clearly this new model or this new intention. And maybe it wasn’t even consciously understood by Cognitect as they were doing it, it just was a natural shift. But it’s frustrating to see people new to Clojure get excited, come up with some ideas, see some possible improvements and then to hit the brick wall and just not necessarily understand why, what’s going on. They come to Clojure with, “Clojure’s an open source project.” And they have a bunch of assumptions about that works. And there was no documents being extremely clear, until recently, being extremely clear about, “No. This is a very different project. And we don’t work the same as other projects.”&lt;/p&gt;
&lt;p&gt;Daniel: 00:56:08 And that’s, again, as we’ve [inaudible 00:56:10] in Rich’s most recent post, he had no obligation to explain himself, but it certainly would’ve saved a lot of time and energy and frustration on a lot of [inaudible 00:56:21].&lt;/p&gt;
&lt;p&gt;Zach: 00:56:21 Certainly. And I should say, like you say, it hasn’t been written up anywhere, the only written record of Clojure’s contribution process, which approaches a honest, straightforward articulation, is in a gist on GitHub. And there’s a followup conversation in the comments of that gist. It’s not on Clojure.org, it’s not like … this is not something where I think it is discoverable by people who are coming to Clojure. So, I think that there’s still work that could be done there, unless I’m wrong and there has been some change in Clojure.org without me noticing.&lt;/p&gt;
&lt;p&gt;Zach: 00:56:54 But I think that talking about it in terms of incompatible, unspoken assumptions is exactly right. And something that came up repeatedly was Evan Czaplicki, who’s the creator of the Elm language, gave a really great talk at Strange Loop last year called The Hard Part of Open Source. And in it he talked about, what’s hard about open source is not the technology, it’s not the technological decisions, it’s the people and navigating those conversations. And in that he brought up the, “By who’s authority?” Or, better known as the Clojure Post, which is the first sentence in that post. And it doesn’t get much better from there.&lt;/p&gt;
&lt;p&gt;Zach: 00:57:36 And people talk about entitlement in open source, and I think it is undeniable a deeply entitled post. And it’s not one that I like, and it’s not one that I’m very happy with. Because I think it poisoned the well for having a more constructive and meaningful conversation where what’s being said by the community isn’t very easily dismissed as just more Clojure-y, basically. And that’s very frustrating to me. But I think that there is … a real point was being made in Evan’s talk which is not, “People shouldn’t be mean to open source creators.” I mean, that is a point that he makes, and there’s a point that people are doing. But it’s not just like, “You should shut up and be grateful.” What he’s saying is that people don’t state their assumptions when they go make an assertion that something is true or ought to be true.&lt;/p&gt;
&lt;p&gt;Zach: 00:58:28 People are going and predicating what they’re saying. And they have very strong opinions. But what is left unstated is the assumption that goes and gives birth to that very strongly held view. And I actually talk about this a little bit in my book, not about open source stewardship, but like I say, if you say that software is over engineered, that’s not an intrinsic property of the software, it’s a property of where you expect that software to be used. Something which needs to … a piece of hardware that needs to go and survive cosmic rays, if it’s not going into space or some other place where that’s a problem, then yeah, it’s over engineered, it probably has more complexity or more costs than it needs to. But again, that’s not an intrinsic property of the thing, it’s a property of where we put the thing.&lt;/p&gt;
&lt;p&gt;Zach: 00:59:11 And so, similarly, when we’re talking about, “What can we reasonably as a community expect from someone who is the creator and ongoing steward of a language, is not, I think, something that we can talk about from first principles. Or at least it’s not most interesting to talk about from first principles. Because the only first principle that’s really available is, “It’s his language, he gets to do what he wants.” Which is undeniable true. But what’s not discussed in that conversation is there are norms that exist in open source in terms of what is expected. If people come together and start working on a language and form a community around that language, and if there’s a company that’s formed around the stewardship of that language, the general expectation is, ongoing maintenance of that language is a first class concern.&lt;/p&gt;
&lt;p&gt;Zach: 00:59:58 And that having the language reflect a plurality of perspectives and uses is valuable. Because that will allow the community to grow to allow the language to be used in ways that the creator never necessarily expected. It will flourish and go off in directions that no one could have predicted, basically. That assumption, which I think is reflected in many other successful languages, is not valid in Clojure. Again, this is not meant to be a value judgment where I’m saying, “It ought to be.” I think it was certainly surprising to me to find that it wasn’t.&lt;/p&gt;
&lt;p&gt;Zach: 01:00:31 And I’m not trying to go and say that things should change necessarily. But I think that to go and pretend that people are being entitled just because they expect Clojure to be maintained the way that other major open source languages are maintained, is I think very odd and a little bit victim blame-y. Because I think that if you’re trying to reason about this from first principles, then the broader societal context around how open source works, maybe that doesn’t matter. But that’s not how people thing. And I don’t think that’s a good way to go and think about it.&lt;/p&gt;
&lt;p&gt;Zach: 01:01:04 And so, I think that that’s why people feel frustrated, is that never is there a conversation about, “Here’s how open source normally works. We acknowledge that. And we want it to work differently because of these reasons that we give, or just because that’s how we want it to work.” And of that would be a huge improvement to the current thing, which is, “Clojure exists in a universe unto itself. We do not acknowledge other methodologies or other expectations that people might bring with them from other communities. It’s up to you to figure out how things work here. You should go and treat this as a blank slate.&lt;/p&gt;
&lt;p&gt;Zach: 01:01:40 And people reason by analogy. People go and make inferences and they fill in what they don’t know with things they know from things that they believe to be similar, other projects that they’ve worked with. And so, it’s unsurprising when people are surprised. And it’s unsurprising when people are frustrated. And I think that it is reasonable for people to go and ask why this hasn’t been more clearly articulated. Rich is an extremely articulate, thoughtful person. And I have no doubt that he has thoughts on this. There have been conversations I’ve had with him, I had one at the most recent [inaudible 01:02:12]. I don’t really feel like it’s my place to go and characterize what he said to me, but these are not things that he’s said or tried to go and write down outside of the heat of the moment.&lt;/p&gt;
&lt;p&gt;Zach: 01:02:21 And I think that that’s unfortunate. I think that it leads to far more acrimony than is at all necessary.&lt;/p&gt;
&lt;p&gt;Daniel: 01:02:28 Yeah. I think I feel similar. And over the last year or so, as the [inaudible 01:02:36] became more and more frequent, culminating in Rich’s post, I think at least … I had people talk to me and say they felt hurt by that and that they didn’t feel respected or other things. But I definitely feel like it at least put … it brought clarity to a situation where there was little before and so people were free to superimpose their own views over how they thought the situation was working and then it was only months or years later when that didn’t align that they became frustrated.&lt;/p&gt;
&lt;p&gt;Daniel: 01:03:09 So, at least I guess people at least now have a better idea of what to expect or what not to expect, which is something.&lt;/p&gt;
&lt;p&gt;Zach: 01:03:16 Right. Though, again, I think that one of the things that I raised was that the community is not growing like it used to. And I have thoughts on why that might be. And I don’t think that they all relate to just Clojure has been mismanaged, I think that Clojure got an enormous boost from coming out at the height of the Paul Graham, Lisp mania. And I think that that was a lot of fertilizer from which it could grow, but I think that there was maybe an implicit assumption that all of that was down to Clojure and Clojure being intrinsically excellent or intrinsically well maintained or something like that. And that that was just a growth trajectory that we could expect to continue indefinitely. And it couldn’t. Once the hype dried up and I think that Clojure had to go and very much succeed or fail on its own merits there.&lt;/p&gt;
&lt;p&gt;Zach: 01:04:07 And I think that it’s certainly continued to grow but much less rapidly than before. And so, maybe it matters less. Maybe the fact that the people who were around for the great Clojure debate of 2018 know now that this is how the language is maintained is good enough. But I still think it’s curious that there hasn’t been something which is just there to talk on Clojure.org is just, “Welcome to Clojure. Here’s how we think about language, design, questions. Here’s how we think about data and immutability. And here’s how we think about open source stewardship.” These things I think could all be together somewhere in a well, clearly articulated place. And that’s not the case right now. And I’m not wholly sure why.&lt;/p&gt;
&lt;p&gt;Daniel: 01:04:56 Yeah. And going back to growth, I think that growth is another assumption that people have when they come to a language or a project that’s implicit in what they expect that’s like, “The creator wants us to grow,” and that, “Everybody involved wants us to continue growing and growing and growing.” And that’s a unstated, implicit good. And I’m not necessarily sure that’s a value that Clojure holds. I don’t think they don’t want growth but certainly growth is definitely not the number one priority. I think most people would probably agree with that.&lt;/p&gt;
&lt;p&gt;Zach: 01:05:34 Yeah. I would agree with that as well. I think that Clojure’s growth is certainly not the primary concern. And it’s not clear to me that it ought to be. Because I think that you can go and you can easily make a case for a tool being niche, like useful to a certain problem or certain person who has a perspective on software. So, it’s not inherently bad to not be chasing growth at all costs. I think that the most worrisome thing, though, to me was in terms of the response Rich had to some of the criticisms that were coming from the community was that he talked about all the work that had been done on the error messages as work that had effectively come out of his pocket.&lt;/p&gt;
&lt;p&gt;Zach: 01:06:19 He talked about he had paid his retirement into the initial development Clojure. He hasn’t made that back. And so, seeing community oriented improvements, things that don’t necessarily reflect his use of Clojure to say, write the atomic, things that are aimed at beginners rather than the experts that Cognitect employs, as a gift. As a thing that is not actually financially viable in and of itself. That’s deeply worrisome to me. Growth, even if it’s not a foremost concern should at the very least be a profit center for the people who are running Clojure. If work that is in the aid of growth is something that is costly and distracting and generally not aligned with the other motivations that they have, then I think the consequences of that are predictable. It’s pretty clear where that leads in the long term.&lt;/p&gt;
&lt;p&gt;Zach: 01:07:24 With no visibility into any of this, like how well the atomic’s doing, what Rich’s finances are like … nor should I or anyone in the community expect to have that level of visibility. All I can say for sure is that it seems like the community is seen as a cost center. I don’t know how you would realign that. Because I don’t know how we got here. I don’t think it was clear to me until that post that that’s how it was seen. But that’s the part that worries me the most because that’s the part that makes me think that it’s going to be hard to do even slight course corrections. To the aid of having people who come here with these expectations based on how other open source are run and not have those be totally overturned.&lt;/p&gt;
&lt;p&gt;Zach: 01:08:10 And it’s possible that growth can be a non-goal and Clojure will continue to grow despite that. Or at least it won’t be hampered by that. But it does mean that things that are in the purview of Cognitect alone, like error messages, which are hard to bolt on to language outside of the core, are probably going to be fairly slow to arrive. And it’s going to be contentious because it’s going to be seen as this great gift that’s being bestowed upon the community as opposed to just a thing which naturally one would do, because the community is the source of your continued consulting income or what have you.&lt;/p&gt;
&lt;p&gt;Daniel: 01:08:52 Yeah. And it doesn’t seem clear to me that any core [inaudible 01:08:57] are coming either, that there’s going to be any difference or changes. Although I should point out Alex Miller’s weekly roundup of what he’s been working on with Clojure, I really enjoy, I think it’s really useful getting a bit of an insight into what’s being worked on. So, I wouldn’t say nothing has changed, certainly.&lt;/p&gt;
&lt;p&gt;Zach: 01:09:16 No, and I want to be perfectly clear. Because I don’t think I was and I think that I was needlessly hurtful by painting with this broad brush. I think that there is individual work that’s being down, which is absolutely community oriented. With Alex at the forefront of that. And I think that is not something that should be taken for granted. I don’t think that it’s something which we are inherently owed and can be freely ignored. I frankly wish I had said this earlier in this conversation. But I’m worried about what are the structural incentives here. Because if the entirety of the community engagement is born from Alex Miller just being willing to do that in spite of everything, to make the case for that, if it’s something where a bad quarter at Cognitect might go and change whether or not he’s allowed to do that, that’s cause for concern I think.&lt;/p&gt;
&lt;p&gt;Zach: 01:10:07 And to talk about that the structure is misaligned doesn’t impune the good intentions or motivations of any of the individuals that exist within that structure. But I think it’s hard sometimes to go and speak separately about the two. And so, I just want to say, if I’ve ever given someone who’s worked very hard on behalf of the Clojure community cause to think that I take what they’ve done for granted or don’t appreciate what they’ve done, that’s not true. But I don’t think that that’s by itself reason to not criticize the overall direction that these things are taking or the motivations that we can infer from what is said whenever there’s a flare up within the community.&lt;/p&gt;
&lt;p&gt;Daniel: 01:10:54 So, another large project you’ve been working on more recently and finished just in the last few months, I think, was the Elements of Clojure, your book about … it’s not quite a style guide for Clojure, it’s a bit more than just that. So, if you want to talk a little bit about, what is it, why did you create it … ?&lt;/p&gt;
&lt;p&gt;Zach: 01:11:12 Well, it did actually start out as, effectively, a style guide for Clojure. Yeah. So, I was, back in the day, doing meetups. And currently still running the Bay Area Clojure meetup. And when I was at Factual, we were hosting regular office hours, where we encouraged people to come in and just pair up. We weren’t going to try and have a lecture or anything like that, we were just going to go and make sure that people who knew about some facet of Clojure and people who wanted to learn about some facet of Clojure would be able to find each other and chat about that. Because I thought that that’s what happens in the margins of a typical meetup, like at the beginning, at the end. And to my mind that’s often the most valuable part of it, because you will have good talks and bad talks, but it’s very rare that a talk will be of interest to everyone who’s attending.&lt;/p&gt;
&lt;p&gt;Zach: 01:12:03 And so, I thought, “Let’s just go and try to take that out and see if there’s still something worthwhile leftover.” And something that I was noticing a lot was that people were coming in who liked Clojure, had learned Clojure, were trying to advocate for Clojure being used inside their company, but they were extremely tentative. Because they were coming in as the advocate for Clojure, and therefore the presumptive expert on it. And they were extremely worried about being right in terms of how they talked about how one should use Clojure.&lt;/p&gt;
&lt;p&gt;Zach: 01:12:32 Because I think that Clojure is peculiar, or at least somewhat more extreme in terms of the impetus that it puts on, being very thoughtful on your design and coming up with the right design. And so, if they were going and saying, “Well, this is how you structure name spaces,” and then it turns out that that’s not true because they hire someone who is an experienced Clojure developer and they come in and look at it and say, “Well, what on earth is this?” That was actually a meaningful impediment to them even advocating for Clojure being adopted at their company. Because they felt like they would have to go and take on a role of authority that they weren’t comfortable with.&lt;/p&gt;
&lt;p&gt;Zach: 01:13:05 And I thought that that was a shame. And I thought that that was something that was clearly hampering growth and adoption. So, I thought, what if there was a book that would take the [inaudible 01:13:17] work out of it? Would say, “Here are some reasonable ways to go and approach the writing of Clojure. These are not the only ways. These are not the canonically right ways to do it. But they’re solid. They’re good enough. And if you go and you keep on writing code and eventually you hit the point where these guidelines are no longer serving you well, toss them out. You’ve outgrown them.”&lt;/p&gt;
&lt;p&gt;Zach: 01:13:36 And so, I was just saying, “This is a good second book to read about Clojure.” Because it goes and says, “Here’s some norms that we can establish and some of them reflect what’s already happening in the community, some of them reflect what I personally, as an opinionated person, think ought to be happening in the community.” And then at the end of the day, there’s some people who think that I’m wrong and then a bunch of other people who ideally would hopefully just happily follow this stuff because it gets them out of their own head and stops them from just getting wrapped around the axil of, “But is it the right thing to do?”&lt;/p&gt;
&lt;p&gt;Zach: 01:14:10 And so, that was the initial motivation for the book. And that’s why the book was originally called Elements of Clojure, because it was meant to be very much in the [inaudible 01:14:18] white style of, “Well, sure, it’s not right. But at least it’s a reasonable set of defaults to follow. But as a I started to write it I realized that my ambitions were somewhat deeper than I had originally realized. And just exacerbated the fact that after effectively writing the first chapter I quit my job to focus on it full time because I wanted to get this right.&lt;/p&gt;
&lt;p&gt;Zach: 01:14:45 And what I realized was that I wasn’t just trying to go and say, “Here are some decent guidelines.” Because, when it comes down to it, with a style guide you can talk about the appearance of the code, but to talk about the conceptual layout of the code isn’t something you can write a style guide about. There’s not a right way to go and build interfaces, “Let’s just check off the boxes.” Because I, the author, don’t know the domain that the software’s interacting with as well as the person who’s reading it. And so, I can’t go and tell them what to do. All I can do is give them a framework that they can combine with their domain knowledge to come up with what they think is a reasonable answer.&lt;/p&gt;
&lt;p&gt;Zach: 01:15:21 And so, creating a conceptual framework is, it turns out, a lot harder than coming up with a style guide. And so, that was what I fell into. And so, what was originally going to be, I was going to quit my job, I was going to spend three months finishing the book, and then I was going to go off and work on a whole bunch of other things. And it ended up being, I quit my job, I spent 16 months writing the book and then some amount of time going and finalizing the manuscript and everything like that. And throughout that I was releasing chapters and getting feedback from readers and other things. And I’m of course hugely grateful to everyone who stuck with me through the roughly three year process of this book getting finished.&lt;/p&gt;
&lt;p&gt;Zach: 01:16:00 That’s what it turned into. And that’s why it became a much broader thing. This just comes back to scope creep which I’ve always been bad about. And I think that at the end of it all, I’m happy with the result. And as much as … it more clearly articulates my sensibilities about software in the conceptual framework that I struggled to put into words a the beginning of writing this book. What I’m less thrilled about is that, having taking this book, which was a fairly general book about software design, and having used Clojure as the example language, I think cuts down on the potential audience for the book. The people who would go and take the time to read through it. It cuts it down quite drastically.&lt;/p&gt;
&lt;p&gt;Zach: 01:16:44 And so, I recently mentioned, on Twitter and on the mailing list for the book and other places, that I’ve been considering a book which is not exactly a rewrite of the book, but is maybe a spiritual sequel to it which will just be called, or at least tentatively called, Principles of Software Design, which will attempt to cover the same territory without the Clojure specific aspects. And that book will have tot be more general because Clojure has certain idioms the language just feeds you into, it makes it very hard to fall outside of.&lt;/p&gt;
&lt;p&gt;Zach: 01:17:18 And so, there are a lot of questions about classic object oriented design with mutable objects that you don’t need to talk about in a book about Clojure, that you don’t need to go and articulate how these different ideas play with that style of software design. And so, that’s something that I need to think about a lot more, frankly. And be able to have that be something that fits into this conceptual framework built around specific use of Clojure.&lt;/p&gt;
&lt;p&gt;Zach: 01:17:44 But I think that’s going to be a worthwhile and interesting. And my hope is that in the meantime, people who don’t use Clojure professionally or whatever else are able to look past the parens and take the more general lessons from my book. But I think that in order to really have the impact that I would like to have, it’s going to have to be a book that doesn’t mention Clojure and doesn’t use Lisp as its teaching language. Because I think that, from just a pedagogical perspective, Lisp is not a very friendly language. It’s something that people are not going to go and happily learn just for the purposes of reading the book.&lt;/p&gt;
&lt;p&gt;Daniel: 01:18:25 You never know.&lt;/p&gt;
&lt;p&gt;Zach: 01:18:26 It’s possible. I mean, SICP may be the counter example there, but I’m not Gerald Sussman, so, I think I have to be a little more humble in terms of what bridges people are willing to cross just to meet me on the other side.&lt;/p&gt;
&lt;p&gt;Daniel: 01:18:40 Yeah. People switched to MX just for [inaudible 01:18:44]. So, yeah.&lt;/p&gt;
&lt;p&gt;Zach: 01:18:45 It’s possible. I don’t know. I think that that will require people to be very, very effusive about the book. And so, if people want to start seeing the praises of Elements of Clojure, please go ahead. Prove me wrong. But I don’t want to predicate my expectations on that happening. I will say that some people have said some very kind words to me in private and publicly and of course that is very nice to hear, especially given the amount of time and energy that I put into this. But yeah, I think that it’s hard. A book will never matter as much to anyone as it does to you, the author. That’s just necessarily the case.&lt;/p&gt;
&lt;p&gt;Zach: 01:19:25 And so, at this point I’m just trying to not get too presumptuous in terms of what I can and can’t expect from the broader audience of software engineers.&lt;/p&gt;
&lt;p&gt;Daniel: 01:19:36 Yeah. Were there any recommendations that you made in the book which people disagreed about? That said, “Actually, I think this is not a good recommendation,” or … ?&lt;/p&gt;
&lt;p&gt;Zach: 01:19:47 I tried to, in the cases where I made what I thought was being a somewhat overly broad statement, I tried to articulate a couple of cases where that advice didn’t apply. So, I use a very basic example. I say that variatic keyword params. So, like having a function where you have the ampersand map de structuring so that you can go and just add a bunch of keyword parameters to the function, shouldn’t be used. You should instead pass in an actual option map. And the reason for that is oftentimes the option map is being passed many layers down into the code. And having to go and put that back into a map and then de structure to go and call the next thing is actually fairly laborious. It makes the code more complex to read. In general we should just go and put things in a map and not try and go and have it be magically de structured just so we can remove one set of curly braces from our code.&lt;/p&gt;
&lt;p&gt;Zach: 01:20:43 The case that I give of where that’s not the case though, is if you’re going and doing Macros. Because in Macros typically, you’re not going and calling many layers deep because it’s happening at compiled time, not at run time. And so, I think someone can read this and be like, “Well, I like keyword params. I like having that be how my code looks and everything. It seems cleaner.” And that’s fine.&lt;/p&gt;
&lt;p&gt;Daniel: 01:21:06 They’re clearly wrong.&lt;/p&gt;
&lt;p&gt;Zach: 01:21:09 But no one’s sent me an angry email saying, “How dare you?” So, I don’t know. I’m sure that there are many small pieces of advice that I give that people will happily ignore. And I think it’s important when you give that advice, which is overly broad, to go and articulate an example of something where this does not apply. And if you find a similar case, you should be free to not treat this as gospel. But I do think that for the most part where the advice is specific it’s not super controversial. And where the advice is broad I think it’s easy for someone to interpret it in whatever way they choose.&lt;/p&gt;
&lt;p&gt;Zach: 01:21:47 So, I think that … hopefully there’s no deeply angry readers of this. I think that there’s some people that maybe were hoping for something that was much more concrete and specific. And to them I can just say, “I’m sorry. I don’t know how to write that book. I don’t think that the subject matter I was trying to cover allows for that much specificity. Because otherwise it just becomes a book about software in that specific domain.&lt;/p&gt;
&lt;p&gt;Daniel: 01:22:13 Yeah. Yeah. I really enjoyed Elements of Clojure and I know, I’ve seen lots of companies in particular buy a copy for everyone in the team and share discussions about it and it’s built a shared context which previously was implicit. One part I really liked in particular, one example of it, was the quote, “Functions can do three things. Pulling your data into scope, transform data already in scope or push data into another scope.” Experienced Clojurists know that implicitly but it would be quite hard to put into words, potentially for many of them, they wouldn’t know exactly why they feel that some code is wrong.&lt;/p&gt;
&lt;p&gt;Zach: 01:22:54 Right. Some function does too much for … That’s great to hear. Because I think that was very much the goal is, there’s a thing, you know it, you feel it, there’s a visceral feeling when you look at some sort of code and you know it’s not quite right. But when you’re talking to someone who wrote it, who might be a more junior engineer who you’re mentoring, who you’re trying to go and share your experience with, all you can say is, “That feels wrong.” Which is a dissatisfying way to go and try to mentor somebody is to just go and tell them, “No,” periodically.&lt;/p&gt;
&lt;p&gt;Zach: 01:23:24 Ideally you can help them find their way to, “What is the broader principle at play here?” Rather than treat them as some sort of supervised machine learning model or something like that. So, that is very much the goal. So, I’m happy to hear that. And I’ve thankfully heard that from other people as well and everything. But there is, I think, just an interesting problem with a lot of industry books about software design. And in preparation for this second book I’ve just ordered a bunch of them. Every book I could find that seems to talk about software design, I ordered a used copy of it and have been paging through it.&lt;/p&gt;
&lt;p&gt;Zach: 01:24:00 And there’s a term that gets thrown around a lot, which is heuristic. Which is … that’s what we use to go and come up with what’s good design in software. We have a heuristic which is the rule of three. Like if you go and you write code three times, then you can generalize it, but not before. And there are lots of things that you can do this. There are also contradictory heuristics. Like, you should right code to be deleted rather than modify. We’re not going to go and we’re not going to try to generalize it. We’re just going to go and write a thing and if that’s ever not useful we’ll just go and we’ll throw it away and we’ll write a new thing.&lt;/p&gt;
&lt;p&gt;Zach: 01:24:37 I’m not a big believer in the dictionary definition as a motivating idea for a talk or for a design principle or whatever, but the etymology of heuristic is interesting in that it comes from the Greek Eureka, as in, “I’ve found it.” And I think that that’s what all heuristics are, they’re this intuitive leap into the void. It’s going to take time for us to go and walk our way back and figure out what is the actual principle at play, but we know that we found a thing. But we also know about heuristics, where it’s something that Gerald Weinberg observed in his Introductions to General Systems Thinking, is that heuristics don’t tell us when to stop. So, a heuristic is a bounded tool. It doesn’t apply universally. It’s meant to be applied within a particular context or scope. But no heuristic goes and describes what its scope is. It just makes itself out to be this universal truth.&lt;/p&gt;
&lt;p&gt;Zach: 01:25:33 And that’s how you can get into a situation where you have contradictory heuristics, because they exist in bipartite scopes. But you don’t know what they are. And so, the problem with heuristics are that they require expert knowledge to apply properly. And that’s a bad place to be if you’re trying to go and write something which is an intermediate level book on software design, which is full of little nuggets of wisdom that you need to have already learned well enough to apply … in order to apply properly you already need to have outgrown the book effectively. It’s something that only really makes sense looking backwards once you’ve surpassed the text.&lt;/p&gt;
&lt;p&gt;Zach: 01:26:14 And so, I think that that characterizes a lot of conversations I see in a day to day software shop where people are going and quoting different heuristics at each other, which may sport their point without any necessarily understanding of, “Is this applicable here?” Because that’s just this argument from authority of, “Well, you know what they say about the rule of three. You know what they say about never optimizing. You know what they say about never optimizing except in that important three percent.” There’s all these things that we use as a proxy for understanding this. And my hope is, from elements of Clojure and certainly in the new book that I’m writing, that it’s not just a collection of heuristics, it’s actually a collection of concepts and from those concepts the heuristics fall out, but what also falls out of that is an intuition for where they are meant to be applied. Like, what is the interrelationships between these things? Where is one applicable and where is the other applicable?&lt;/p&gt;
&lt;p&gt;Zach: 01:27:09 I mean, I genuinely don’t know if I’m going to achieve the goal that I just described there, but I think that it is an absence in the literature today that I’ve recognized. And if not me, I think someone ought to go and fill that because I think that right now we’re not talking about software design in a particularly articulate way. We talk about names, we talk about abstractions, we talk about all these things without really defining what we mean, and a lot of it just comes down to who’s the loudest voice in the room. And that’s a bad place to be as an industry, I think. We are a relatively new field, but it seems like there’s a lot of room to do better there.&lt;/p&gt;
&lt;p&gt;Zach: 01:27:52 So, that’s the goal. And I think that as far as career goals go, I think that being able to explain that more effectively is what’s motivating me right now. And that’s why when I was looking for a new job after I came off of this book sabbatical, I chose a job which is not a Clojure job because I thought that the most interesting software design problem I could find happened to be outside of that domain. And that makes me very sad. And I think that I had very much hoped and had held on to hope that I could make Clojure a home for myself, not least because people know me in this community and I get more leeway to go and try things out the way that I want to try them out and all that other stuff, but … and also just because, again, Clojure fits the way that I think.&lt;/p&gt;
&lt;p&gt;Zach: 01:28:42 And it makes me happy to be able to express my ideas in that language. But ultimately, at this point, what matters more to me is being able to refine my ideas about software design in the general case, outside of any particular language by going and working on what I consider to be the mot interesting problem. And the media software design problem. And so, yeah, I announced recently that I’m going to work at Microsoft on the semantic machines team which is doing natural language processing. And they are a Scala shop. And so, I am now the proud owner of the Martin Odersky Scala book, which I’m fully making my way through.&lt;/p&gt;
&lt;p&gt;Zach: 01:29:22 And it’s fine. It doesn’t fill me with that same excitement as Clojure did at the outset and it’s possible that I’ll never be as excited about a language as I was about Clojure. Maybe that’s just something that happens at some phase in your career or at some age or whatever. But it’s a sad thing. And I think that part of why I was as vocal as I was last year was because I was realizing that. I was realizing that the jobs … I was looking at the job landscape and what I could work on and I realized that there were so many opportunities that took me away from Clojure. And the opportunities that would keep me within Clojure were not as exciting to me. The problems were not as exciting to me.&lt;/p&gt;
&lt;p&gt;Zach: 01:30:04 And that’s not a absolute truth that’s just going to continue on to the future indefinitely, but I think that I struggle to articulate what are the driving forces that are going to reverse that trend. I don’t know what those are. And I think that certainly I am not the person to reverse them. So, that’s where I find myself.&lt;/p&gt;
&lt;p&gt;Daniel: 01:30:27 Yeah. I felt, when I saw your announcement, there was … I was happy for you, I was also sad. Sad for myself and for the community that … I mean, we’re not losing you, it’s not like you’re slicing yourself off completely from the Clojure community but I imagine you’ll have less time and attention for Clojure stuff in the future.&lt;/p&gt;
&lt;p&gt;Zach: 01:30:44 I think so. In fairness I’ve been a pretty absentee maintainer of my Clojure open source libraries for a number of years now because I’ve just … my attention has been elsewhere. And the goal [inaudible 01:30:56] those libraries always was to learn more about software design. And so, the problem with that is that once people start to use the library, if they’re not coming to me regularly with, “This is a bad design,” it’s actually less interesting. A successful library is less interesting then a library which is unsuccessful for some meaningful reason.&lt;/p&gt;
&lt;p&gt;Zach: 01:31:15 And so, that’s a little bit tricky, speaking to my own motivations. But yeah, I’m definitely not trying to pretend Clojure doesn’t exist or pretend that I don’t have this deep affection and connection to the language and to the community around it. It’s just that it’s hard for me to imagine how professionally I’m going to be able to be a Clojure programmer. Because I’ve realized that what motivates me is dealing with problems that get to the essence of what is good software design. And I just don’t know that that’s best answered by continuing to be a full time Clojure developer.&lt;/p&gt;
&lt;p&gt;Zach: 01:31:54 And again, I hope someone proves me wrong here. I hope that if the time comes for me to go look for my next job, I look around and the landscape is just chock full of really deep fundamentally interesting design problems that are all implemented in Clojure. But it’s something where I just have to go and take stock and say that I’ve spent roughly 10 years of my life optimizing for Clojure above all else. And I think that that’s not something that I can justify indefinitely. And so, it’s very bittersweet. I’m excited about this role, I’m excited about things I’m going to learn, I’m excited about the people that I’ll be working with, some of whom are former Clojure people. Jason Wolfe, formally of Prismatic, author of the Schema library, is there. And is in fact the reason that I was aware of this job at all.&lt;/p&gt;
&lt;p&gt;Zach: 01:32:44 But I think that it’s something where I’ve just reached a point where Clojure cannot be the overwriting consideration here, for better or for worse.&lt;/p&gt;
&lt;p&gt;Daniel: 01:32:55 Yeah. I’m excited to see what you come up with at Microsoft with … so semantic machines and conversational AI chat box sounds a little bit reductive but …&lt;/p&gt;
&lt;p&gt;Zach: 01:33:08 That’s how I describe it to annoy Jason, basically. Yeah, it is reductive. Not least because that calls up the extremely limited conversations that you’ll have with Alexa or whatever. And so, the hope here is that what it is is going to be significantly more. And so, maybe you’ll reclaim that term as a point of pride at some point. But for the time being yeah, it’s conversational AI or conversational UI depending on how you want to think about the domain of the application.&lt;/p&gt;
&lt;p&gt;Daniel: 01:33:39 Well, people can buy a copy of Elements of Clojure on elementsofclojure.com, there’s print book and ebook available. That was pretty recent, the print book. And you’re on Twitter, ztellman, GitHub, ztellman, probably many other social media websites @ztellman. So, yeah, I’m going to say thanks for all of the work and effort and time you’ve put into the Clojure community and 10 years is a long time and you’ve made a really, really lasting impact on Clojure.&lt;/p&gt;
&lt;p&gt;Zach: 01:34:16 Well, and I want to say the same to you. The work that you’ve done with Clojurists Together and other things like that, it’s been extremely time consuming to go and herd the community in a particular direction and everything like this is, I think, very thinkless work. And you’ve been doing it for a while now and I am a proud contributor to Clojurists Together and will be for at least as long as people are buying the book, because why wouldn’t I go and hold that back into the community? And so, everyone who’s listening to this, I encourage you, I believe its clojuriststogether.org.&lt;/p&gt;
&lt;p&gt;Daniel: 01:34:53 That’s right.&lt;/p&gt;
&lt;p&gt;Zach: 01:34:54 Am I getting that right?&lt;/p&gt;
&lt;p&gt;Daniel: 01:34:54 Yeah.&lt;/p&gt;
&lt;p&gt;Zach: 01:34:55 If you want to prove me wrong here, if you want to go and say that there is a vibrant future for Clojure that I’m just too pessimistic to see or something like this, one of the ways you can go and contribute to that and to make that true is to contribute to Clojurists Together to be an active voice about what needs to be supported, what needs to be improved. There are still many, many things that can be done, I think, to improve the ecosystem to make it more friendly to beginners to spur growth.&lt;/p&gt;
&lt;p&gt;Zach: 01:35:29 And so, I don’t want to have people walk away from this thinking that this is somehow hopeless. I’m only speaking to the trends that I see. And trends are absolutely reversible.&lt;/p&gt;
&lt;p&gt;Daniel: 01:35:40 Great. Well, yeah. Thanks again and I’m sure I will be seeing a lot more of you and your work in the future.&lt;/p&gt;
&lt;p&gt;Zach: 01:35:47 Well, thanks for having me on. Yeah.&lt;/p&gt;
&lt;/div&gt;</description>
<pubDate>Fri, 27 Sep 2019 10:22:32 +0000</pubDate>
<dc:creator>tosh</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.therepl.net/episodes/23/</dc:identifier>
</item>
<item>
<title>Stallman Still Heading the GNU Project</title>
<link>https://lists.gnu.org/archive/html/info-gnu/2019-09/msg00008.html</link>
<guid isPermaLink="true" >https://lists.gnu.org/archive/html/info-gnu/2019-09/msg00008.html</guid>
<description>&lt;head&gt;&lt;title&gt;GNU Project&lt;/title&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;&lt;/head&gt;&lt;body id=&quot;readabilityBody&quot; readability=&quot;31.310133060389&quot;&gt;
&lt;center&gt;


&lt;/center&gt;
&lt;hr /&gt;&lt;p&gt;[&lt;a href=&quot;https://lists.gnu.org/archive/html/info-gnu/2019-09/msg00007.html&quot;&gt;Date Prev&lt;/a&gt;][Date Next][&lt;a href=&quot;https://lists.gnu.org/archive/html/info-gnu/2019-09/msg00007.html&quot;&gt;Thread Prev&lt;/a&gt;][Thread Next][&lt;a href=&quot;https://lists.gnu.org/archive/html/info-gnu/2019-09/index.html#00008&quot;&gt;Date Index&lt;/a&gt;][&lt;a href=&quot;https://lists.gnu.org/archive/html/info-gnu/2019-09/threads.html#00008&quot;&gt;Thread Index&lt;/a&gt;] &lt;/p&gt;
&lt;h2&gt;GNU Project&lt;/h2&gt;
&lt;hr /&gt;&lt;table border=&quot;0&quot;&gt;&lt;tbody readability=&quot;1.5&quot;&gt;&lt;tr&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;strong&gt;From&lt;/strong&gt;:&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Richard Stallman&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;strong&gt;Subject&lt;/strong&gt;:&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;GNU Project&lt;/td&gt;
&lt;/tr&gt;&lt;tr readability=&quot;3&quot;&gt;&lt;td align=&quot;right&quot; valign=&quot;top&quot;&gt;&lt;strong&gt;Date&lt;/strong&gt;:&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Thu, 26 Sep 2019 13:20:25 -0400&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr /&gt;&lt;pre&gt;
[[[ To any NSA and FBI agents reading my email: please consider    ]]]
[[[ whether defending the US Constitution against all enemies,     ]]]
[[[ foreign or domestic, requires you to follow Snowden's example. ]]]

On September 16 I resigned as president of the Free Software
Foundation, but the GNU Project and the FSF are not the same.
I am still the head of the GNU Project (the Chief GNUisance),
and I intend to continue as such.

-- 
Dr Richard Stallman
Founder, Free Software Foundation (&lt;a rel=&quot;nofollow&quot; href=&quot;https://gnu.org&quot;&gt;https://gnu.org&lt;/a&gt;, &lt;a rel=&quot;nofollow&quot; href=&quot;https://fsf.org&quot;&gt;https://fsf.org&lt;/a&gt;)
Internet Hall-of-Famer (&lt;a rel=&quot;nofollow&quot; href=&quot;https://internethalloffame.org&quot;&gt;https://internethalloffame.org&lt;/a&gt;)




&lt;/pre&gt;
&lt;hr /&gt;
&lt;hr /&gt;&lt;table width=&quot;100%&quot;&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;[Prev in Thread]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;strong&gt;Current Thread&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;[Next in Thread]&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;strong&gt;GNU Project&lt;/strong&gt;, &lt;em&gt;Richard Stallman&lt;/em&gt;&lt;/span&gt; &lt;strong&gt;&amp;lt;=&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr /&gt;&lt;/body&gt;</description>
<pubDate>Fri, 27 Sep 2019 05:23:16 +0000</pubDate>
<dc:creator>rurban</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://lists.gnu.org/archive/html/info-gnu/2019-09/msg00008.html</dc:identifier>
</item>
</channel>
</rss>