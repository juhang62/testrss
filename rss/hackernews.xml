<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://192.168.1.4/fivefilters/makefulltextfeed.php?url=hnrss.org%2Fnewest%3Fpoints%3D200&amp;max=10&amp;links=preserve&amp;exc=" />
<atom:link rel="alternate" title="Source URL" href="http://hnrss.org/newest?points=200" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D&amp;back=http%3A%2F%2F192.168.1.4%2Ffivefilters%2Fmakefulltextfeed.php%3Furl%3Dhnrss.org%252Fnewest%253Fpoints%253D200%26max%3D10%26links%3Dpreserve%26exc%3D" />
<title>Hacker News: Newest</title>
<link>https://news.ycombinator.com/newest</link>
<description>Hacker News RSS</description>
<item>
<title>The best way to exercise self-control is not to exercise it at all</title>
<link>https://psyche.co/ideas/the-best-way-to-exercise-self-control-is-not-to-exercise-it-at-all</link>
<guid isPermaLink="true" >https://psyche.co/ideas/the-best-way-to-exercise-self-control-is-not-to-exercise-it-at-all</guid>
<description>&lt;p&gt;You’ve had a long week but fortunately it’s Friday and things are looking up. After grinding through the day, you stop on the way home to buy groceries for dinner. After getting the necessities, you decide on impulse to buy a dozen cookies. You’re on a diet, but you reassure yourself that you’ll eat only one, two at most, to celebrate the arrival of the weekend. Once home, you enjoy your celebratory cookies as planned. Two are enough, but despite your best efforts you continue eyeballing those remaining cookies. Wouldn’t they go great with milk? Maybe just one more with a glass? Before you know it, you’ve polished off a dozen cookies and several glasses of milk, and you’re cursing your poor self-control.&lt;/p&gt;
&lt;p&gt;Look on the bright side, at least it was fat-free milk. Also, you’re not alone. Research that prompted people to record what’s happening multiple times a day &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/22149456&quot;&gt;found&lt;/a&gt; that self-control failures are a frequent and common occurrence of everyday life. Whether it’s pizza, beer or doing anything but exercising, we all have our vices, and many of us would like to have better self-control. But what is self-control exactly? A working definition is that it’s the ability to do what’s in your best interests in the long run – such as managing your weight – over what’s enjoyable right now – such as gorging on cookies.&lt;/p&gt;
&lt;p&gt;In 2007, the American psychologist Roy Baumeister put forward what has become the most influential psychological model of self-control. His &lt;a href=&quot;https://journals.sagepub.com/doi/10.1111/j.1467-8721.2007.00534.x&quot;&gt;strength model&lt;/a&gt; likens willpower to a muscle. If you start doing pushups, you’ll feel only a minor burn. But keep it up, and that minor burn will grow into a full-blown conflagration, at which point you won’t be able to keep going. Baumeister suggested that the same thing happens when you use self-control. If you overwork your self-control muscle, you’ll eventually run out of willpower, and lose the ability to exert self-control.&lt;/p&gt;
&lt;p&gt;The success of Baumeister’s &lt;a href=&quot;https://www.penguinrandomhouse.com/books/307740/willpower-by-roy-f-baumeister-and-john-tierney/&quot;&gt;book&lt;/a&gt; &lt;em&gt;Willpower: Rediscovering the Greatest Human Strength&lt;/em&gt; (2012), co-authored with John Tierney, suggests that the strength model resonates with many people. As a doctoral student studying self-control, I can understand why. The model eloquently explains many of our most vexing self-control failures. In the cookie example, the tumultuous week, capped off by an agonising day, sapped your willpower, leaving you unable to resist those cookies. Additionally, it conforms to our commonsense beliefs about self-control. After all, everyone knows that self-control is hard and, more often than not, we need herculean willpower to overcome temptation.&lt;/p&gt;
&lt;p&gt;If the strength model is correct, what does this mean for improving your self-control? Applying the muscle analogy, one possibility might be to strengthen your ‘self-control muscle’. Researchers have &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/22149456&quot;&gt;tested&lt;/a&gt; this by asking people to do things such as brush their teeth with their nondominant hand for two weeks. Such exercises are quite challenging because they force you to curtail deeply ingrained habits using ‘inhibitory self-control’. But does self-control training actually work? According to a 2017 &lt;a href=&quot;https://journals.sagepub.com/doi/full/10.1177/1745691617697076&quot;&gt;meta-analysis&lt;/a&gt; of many relevant studies, self-control training seems to be effective at improving ‘self-control stamina’ – the ability to exert inhibitory self-control for longer periods.&lt;/p&gt;
&lt;p&gt;So, is that the solution to greater self-discipline? Exercise your self-control muscle and get better at inhibitory self-control?&lt;/p&gt;
&lt;p class=&quot;pullquote&quot;&gt;Your heroic efforts are likely to leave you looking more like Sisyphus than Hercules&lt;/p&gt;
&lt;p&gt;Unfortunately, it’s not so simple. You might have noticed how I switched back and forth between ‘inhibitory self-control’ and the broader concept of ‘self-control’, but the two are not synonymous. Though boosting your inhibitory self-control or ‘willpower’ might sound appealing – perhaps you imagined yourself using inhibitory self-control to force yourself not to eat the cookies, just like you would if you forced yourself to brush with the opposite hand – it’s not clear that inhibitory self-control actually works this way in everyday life.&lt;/p&gt;
&lt;p&gt;Take the findings from a 2017 &lt;a href=&quot;https://journals.sagepub.com/doi/full/10.1177/1948550616679237&quot;&gt;study&lt;/a&gt; that involved volunteers recording their daily experiences of temptation for a week. The individuals who experienced more temptation were less likely to achieve their long-term goals, even if they also reported using more inhibitory self-control. This suggests that using inhibitory self-control to resist those cookies might help you in the moment, but not in the long run. So even if you use inhibitory training (eg, the teeth-brushing challenge) to build a brawny self-control muscle, your heroic efforts are likely to leave you looking more like Sisyphus than Hercules.&lt;/p&gt;
&lt;p&gt;Research in my own lab and others suggests that, if you want to improve your self-control, what you should do instead is focus on proactively reducing, rather than reactively overpowering temptation. Fortunately, there are several ways and opportunities to do this.&lt;/p&gt;
&lt;p&gt;Before getting to the specifics, it helps to think in terms of a model that the American psychologist Angela Duckworth and her colleagues &lt;a href=&quot;https://journals.sagepub.com/doi/10.1177/1745691615623247&quot;&gt;proposed&lt;/a&gt; – ‘the process model of self-control’. It organises self-control strategies according to when they’re initiated in the ‘temptation generation cycle’. This cycle describes the stages we must go through before we get to the point where we actually act upon a temptation – see the figure below.&lt;/p&gt;
&lt;p&gt;For example, to gorge on those cookies at the end of your working week, you first had to go through a &lt;em&gt;situational stage&lt;/em&gt;, where you put yourself in a compromising situation with tempting cookies. From there, you transitioned to an &lt;em&gt;attentional stage&lt;/em&gt;, where you directed your attention back towards those cookies. After that, you went through an &lt;em&gt;appraisal stage&lt;/em&gt;, where you thought about how good those cookies would taste (especially with a glass of milk). All this led to a &lt;em&gt;response stage&lt;/em&gt;, where you broke down and eventually ate all the cookies. To put it bluntly, a lot of things had to go wrong for you to end up giving in to temptation. The good news is that this means you could have applied self-control at several instances prior to when you tried and failed to exert &lt;em&gt;inhibitory&lt;/em&gt; self-control (or ‘willpower’ in everyday talk).&lt;/p&gt;
&lt;img src=&quot;https://d2e1bqvws99ptg.cloudfront.net/user_image_upload/1214/Williamson-self-control-Figure.jpg&quot; alt=&quot;&quot; title=&quot;&quot; class=&quot;ld-image-block&quot;/&gt;&lt;em&gt;Figure supplied by the author&lt;/em&gt;
&lt;p&gt;Let’s start with the situational stage. You don’t need to be well-versed in social psychology to recognise the power of the situation. Most teachers will tell you it’s easier for students to focus when they sit in the front of the classroom. With this in mind, you could have employed what Duckworth’s team call ‘situational self-control strategies’. For instance, instead of sitting in front of a box of cookies and forcing yourself not to eat them, you could have either not bought them in the first place – known as ‘situation selection’ – or simply removed them from sight by placing them in a cabinet (or thrown them out) – ‘situation modification’.&lt;/p&gt;
&lt;p&gt;Prior research suggests that these situational strategies are quite effective. For example, one &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/27158155&quot;&gt;study&lt;/a&gt; that instructed high-school students to use situational strategies (such as removing buzzing cellphones and other temptations from sight) found that they made more progress towards their academic goals, compared with others who were simply instructed to use inhibitory self-control. Similarly, dieting &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0195666318305889?dgcid=api_sd_search-api-endpoint&quot;&gt;research&lt;/a&gt; suggests that a simple yet overlooked way to lose weight is to avoid situations where tempting, high-calorie foods are readily available. For example, when you go grocery shopping, plan to avoid walking through the bakery. That way, you are less likely to encounter cues (pleasant smells and sights) that strengthen temptation. Think ‘out of sight, out of mind’.&lt;/p&gt;
&lt;p&gt;But what if you can’t use situational strategies? After all, you might have no choice but to walk through the bakery, or perhaps you’ll upset your kids if you throw away the cookies. Thankfully, there are other ‘psychological strategies’, initiated during the attentional and appraisal stages, that can be useful when the situation is uncontrollable.&lt;/p&gt;
&lt;p&gt;Some clues come from Walter Mischel’s classic ‘marshmallow test’ that &lt;a href=&quot;https://www.tandfonline.com/doi/abs/10.1080/152988602317319285&quot;&gt;involved&lt;/a&gt; children attempting to resist a single beckoning marshmallow for 15 minutes, for the reward of two if they were successful. Among other crucial variables, Mischel and his collaborators, including the American psychologist Ozlem Ayduk, suggested that one reason some kids were so good at resisting temptation was their ability to use ‘cooling strategies’. For instance, research in Mischel’s lab found that children would wait longer if they distracted themselves by simply turning away from the marshmallow. He also found that they could wait longer if he taught them to ‘reappraise’ the temptation by thinking of the marshmallows as ‘puffy round clouds’.&lt;/p&gt;
&lt;p&gt;Importantly, these strategies work for adults too. In a series of &lt;a href=&quot;https://journals.sagepub.com/doi/10.1177/0146167219883606&quot;&gt;studies&lt;/a&gt; I conducted with Ben Wilkowski at the University of Wyoming, we found that the use of distraction (for instance, directing attention away from the temptation to go out by focusing on work that’s particularly interesting) and reappraisal (reminding oneself there will be many opportunities to go out, but only one opportunity to take the upcoming exam), along with the situational strategies discussed earlier, consistently helped college students make progress towards their long-term goals. So, it might be useful to direct your attention away from the cookies by simply picking up a book or reframing the cookies in a way that makes them seem less desirable. You know, from where I’m sitting, the cookies look kind of old.&lt;/p&gt;
&lt;p&gt;Taken altogether, the message from the latest research on willpower is that it’s time to stop lamenting your poor self-control and accept that you have a weak self-control muscle. It might be fun to change things up while you brush your teeth but, remember, building your self-control muscle probably won’t help you achieve your long-term goals. Why drive a stone up a hill when you know it’s going to tumble down the other side? Unless you’re cursed by the gods, there’s no reason to do this – you’re not Sisyphus. Instead of brute strength, be strategic; you might find that it’s much easier to achieve your goals.&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 17:26:52 +0000</pubDate>
<dc:creator>MurizS</dc:creator>
<og:type>article</og:type>
<og:title>The best way to exercise self-control is not to exercise it at all | Psyche Ideas</og:title>
<og:description>Accept it: your self-control is weak. You’re more likely to reach long-term goals if you find ways to avoid temptation</og:description>
<og:url>https://psyche.co/ideas/the-best-way-to-exercise-self-control-is-not-to-exercise-it-at-all</og:url>
<og:image>https://omicron.aeon.co/images/475074d7-42c5-46e0-b0dc-63027ef59e2c/2700x1530.jpg</og:image>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://psyche.co/ideas/the-best-way-to-exercise-self-control-is-not-to-exercise-it-at-all</dc:identifier>
</item>
<item>
<title>Kosmonaut: web browser from scratch in Rust</title>
<link>https://github.com/twilco/kosmonaut</link>
<guid isPermaLink="true" >https://github.com/twilco/kosmonaut</guid>
<description>&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/twilco/kosmonaut/blob/master/img/Kosmonaut_Banner_1200x400-01.png&quot;&gt;&lt;img src=&quot;https://github.com/twilco/kosmonaut/raw/master/img/Kosmonaut_Banner_1200x400-01.png&quot; alt=&quot;Kosmonaut banner&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci.com/twilco/kosmonaut&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/12be05de5aa570129945cf1d176c68aa2355f6bf/68747470733a2f2f7472617669732d63692e636f6d2f7477696c636f2f6b6f736d6f6e6175742e7376673f6272616e63683d6d6173746572&quot; alt=&quot;Build Status&quot; data-canonical-src=&quot;https://travis-ci.com/twilco/kosmonaut.svg?branch=master&quot;/&gt;&lt;/a&gt; &lt;a href=&quot;https://gitter.im/kosmonaut-browser/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;https://camo.githubusercontent.com/15fdd4bb19ed554a2e0725953cac77fb023ec4fb/68747470733a2f2f6261646765732e6769747465722e696d2f6b6f736d6f6e6175742d62726f777365722f636f6d6d756e6974792e737667&quot; alt=&quot;Join the chat at https://gitter.im/kosmonaut-browser/community&quot; data-canonical-src=&quot;https://badges.gitter.im/kosmonaut-browser/community.svg&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Kosmonaut is a web browser engine created to serve as the vehicle for your journey across the world wide web.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;The road to the stars is steep and dangerous. But we're not afraid...space flights can't be stopped.&lt;/p&gt;
&lt;p&gt;― Yuri Gagarin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;What can Kosmonaut do?&lt;/h3&gt;
&lt;p&gt;So far, not much. Only a very limited subset of CSS is currently supported, so most web pages will not work. However, given very basic HTML and CSS, Kosmonaut does render the right things — see Kosmonaut's rendering of &lt;a href=&quot;https://github.com/twilco/kosmonaut/blob/eef5274c252038062049769861d02354cbaa4b2a/web/rainbow-divs-incl-css.html&quot;&gt;this code&lt;/a&gt;, compared with that of Firefox:&lt;/p&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://github.com/twilco/kosmonaut/blob/master/img/rainbow-divs-vs-firefox.png&quot;&gt;&lt;img src=&quot;https://github.com/twilco/kosmonaut/raw/master/img/rainbow-divs-vs-firefox.png&quot; alt=&quot;Kosmonaut and Firefox rendering HTML and CSS the same, resulting in a picture of some rainbow colored boxes.&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here is a summary of things Kosmonaut can do, things I'm currently working on, and things that are towards the front of the todo list.&lt;/p&gt;
&lt;h3&gt;Project goals&lt;/h3&gt;
&lt;p&gt;Kosmonaut was created with the intention of learning browser engine development. However, the project has come a little ways now, and I've been thinking about niches I can work towards fitting Kosmonaut into. I've shared some thoughts on potential niches &lt;a href=&quot;https://github.com/twilco/kosmonaut/issues/6&quot;&gt;in this issue&lt;/a&gt;, and would love to hear your ideas too.&lt;/p&gt;
&lt;h3&gt;Build and test&lt;/h3&gt;
&lt;p&gt;Kosmonaut is built with Rust using OpenGL bindings via &lt;a href=&quot;https://github.com/brendanzab/gl-rs&quot;&gt;gl-rs&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-windowing/glutin&quot;&gt;Glutin&lt;/a&gt; for window management and OpenGL context creation, Servo's &lt;a href=&quot;https://github.com/servo/html5ever&quot;&gt;html5ever&lt;/a&gt; and &lt;a href=&quot;https://github.com/servo/rust-cssparser&quot;&gt;cssparser&lt;/a&gt; for HTML and CSS parsing, and various other auxiliary libraries.&lt;/p&gt;
&lt;p&gt;To build from source:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Install Rust: &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot; rel=&quot;nofollow&quot;&gt;https://www.rust-lang.org/tools/install&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cargo build&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Kosmonaut does not currently support any networking. To render HTML and CSS with Kosmonaut, you may instead run the executable you just built passing any number of HTML and CSS files via the &lt;code&gt;--files&lt;/code&gt; (or &lt;code&gt;-f&lt;/code&gt;) flag.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo run -- --files my.html my.css more.css&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run the rainbow divs example pictured above, try:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo run -- --files tests/websrc/rainbow-divs.html tests/websrc/rainbow-divs.css&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To run the tests, both unit and layout, run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For layout tests, Kosmonaut transforms the given HTML and CSS into the layout tree and dumps that as text. Those text snapshots are verified with &lt;a href=&quot;https://docs.rs/insta/latest/insta/index.html&quot; rel=&quot;nofollow&quot;&gt;insta&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you need to review / update snapshots, it is helpful to install the Cargo insta CLI tool like so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cargo install cargo-insta&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;License and credits&lt;/h3&gt;
&lt;p&gt;Kosmonaut's current implementation is heavily inspired by &lt;a href=&quot;https://github.com/servo/servo&quot;&gt;Servo&lt;/a&gt;, sometimes taking code directly from it. Thus, Kosmonaut is licensed with the &lt;a href=&quot;https://www.mozilla.org/en-US/MPL/2.0/&quot; rel=&quot;nofollow&quot;&gt;Mozilla Public License 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kosmonaut also takes inspiration from &lt;a href=&quot;https://github.com/mbrubeck/robinson&quot;&gt;Robinson&lt;/a&gt;. Thanks to &lt;a href=&quot;https://github.com/mbrubeck&quot;&gt;mbrubeck&lt;/a&gt; for their great series of articles on browser engines.&lt;/p&gt;
&lt;p&gt;Finally, Kosomonaut's DOM implementation was taken from &lt;a href=&quot;https://github.com/kuchiki-rs/kuchiki&quot;&gt;Kuchiki&lt;/a&gt; and has been slightly modified to fit our needs.&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 16:43:07 +0000</pubDate>
<dc:creator>adamnemecek</dc:creator>
<og:image>https://avatars0.githubusercontent.com/u/6610100?s=400&amp;v=4</og:image>
<og:type>object</og:type>
<og:title>twilco/kosmonaut</og:title>
<og:url>https://github.com/twilco/kosmonaut</og:url>
<og:description>A web browser engine for the space age :rocket:. Contribute to twilco/kosmonaut development by creating an account on GitHub.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://github.com/twilco/kosmonaut</dc:identifier>
</item>
<item>
<title>Isoflow – Infrastructure Diagrams</title>
<link>https://isoflow.io/</link>
<guid isPermaLink="true" >https://isoflow.io/</guid>
<description>[unable to retrieve full-text content]
&lt;p&gt;Article URL: &lt;a href=&quot;https://isoflow.io/&quot;&gt;https://isoflow.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comments URL: &lt;a href=&quot;https://news.ycombinator.com/item?id=24168152&quot;&gt;https://news.ycombinator.com/item?id=24168152&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Points: 266&lt;/p&gt;
&lt;p&gt;# Comments: 49&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 11:41:16 +0000</pubDate>
<dc:creator>willemlabu</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://isoflow.io/</dc:identifier>
</item>
<item>
<title>Buying a single character domain – and 3 character FQDN – for £15</title>
<link>https://shkspr.mobi/blog/2020/08/buying-a-single-character-domain-and-3-character-fqdn-for-15/</link>
<guid isPermaLink="true" >https://shkspr.mobi/blog/2020/08/buying-a-single-character-domain-and-3-character-fqdn-for-15/</guid>
<description>&lt;p&gt;Short domains are useful for security testing. If you only have a limited number of characters, you need to be able to reference code on a remote server in as few characters as possible.&lt;/p&gt;
&lt;p&gt;A few years ago, I tried to find a &lt;a href=&quot;https://shkspr.mobi/blog/2016/03/minimum-viable-xss/&quot;&gt;Minimum Viable XSS&lt;/a&gt;. The conclusion that I (&lt;a href=&quot;https://jlajara.gitlab.io/web/2019/11/30/XSS_20_characters.html&quot;&gt;and others&lt;/a&gt;) came to is that 20 characters is the bare minimum. But it requires you have a 2 character domain name on a 2-character TLD. Something like &lt;code&gt;xy.uk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I don’t think any 1- or 2-character domain names are available. If they’re for sale, it will be at extortionate price. There are no Top-Level Domains shorter than 2 characters.&lt;/p&gt;
&lt;p&gt;So, let’s &lt;em&gt;cheat!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the story of how I bought a &lt;em&gt;single character&lt;/em&gt; domain, and am able to reference it in 3 characters, for the cost of a round of drinks.&lt;/p&gt;
&lt;h2&gt;Brief History&lt;/h2&gt;
&lt;p&gt;As I discussed in &lt;a href=&quot;https://shkspr.mobi/blog/2018/11/domain-hacks-with-unusual-unicode-characters/&quot;&gt;Domain hacks with unusual Unicode characters&lt;/a&gt; – there are a bunch of single Unicode codepoints which are &lt;a href=&quot;https://www.unicode.org/charts/normalization/&quot;&gt;normalised to 2- or 3-character sequences&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;㎐&lt;/code&gt; is the scientific symbol for Hertz. It is a single codepoint (U+3390). When your browser sees it in a domain name, it automatically splits it into the &lt;code&gt;H&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; characters. This is called decomposition.&lt;/p&gt;
&lt;p&gt;Based on my count, there are about 90 symbols which decompose into 2 characters – for example &lt;code&gt;™&lt;/code&gt;, &lt;code&gt;㏄&lt;/code&gt;, &lt;code&gt;ǳ&lt;/code&gt;.&lt;br/&gt;There are about 35 symbols which decompose into 3 characters – for example &lt;code&gt;㎪&lt;/code&gt;, &lt;code&gt;㍹&lt;/code&gt;, &lt;code&gt;ﬃ&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But, as mentioned, it is almost impossible to find a cheap 2- or 3-letter domain name.&lt;/p&gt;
&lt;p&gt;There are, however, a couple of &lt;em&gt;four&lt;/em&gt; character decompositions!&lt;/p&gt;
&lt;h2&gt;&lt;span lang=&quot;la&quot;&gt;Quidquid latine dictum sit, altum videtur&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The Romans didn’t use a positional number system. The number 1 was Ⅰ, the number 2 was Ⅱ, the number 9 was Ⅸ.&lt;/p&gt;
&lt;p&gt;But – look closely! The &lt;code&gt;Ⅰ&lt;/code&gt; is not the English letter &lt;code&gt;I&lt;/code&gt; – it is its own, separate, Unicode character &lt;a href=&quot;https://www.compart.com/en/unicode/U+2160&quot;&gt;(U+2160)&lt;/a&gt;. And &lt;code&gt;Ⅱ&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; two &lt;code&gt;Ⅰ&lt;/code&gt;s smushed together, it is &lt;a href=&quot;https://www.compart.com/en/unicode/U+2161&quot;&gt;(U+2161)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When decomposed, however, they return to English letters.&lt;/p&gt;
&lt;p&gt;What’s the &lt;em&gt;longest&lt;/em&gt; Roman numeral captured in a single codepoint?&lt;/p&gt;
&lt;p&gt;The number 8 is &lt;code&gt;Ⅷ&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+2167&quot;&gt;(U+2167)&lt;/a&gt; – which decomposes to V I I I. Four characters!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;but apart from the sanitation, the medicine, education, wine, public order, irrigation, roads, a fresh water system, public health, &lt;strong&gt;and a number system suitable for character decomposition&lt;/strong&gt; what have the Romans ever done for us?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;tl;dr TLD&lt;/h2&gt;
&lt;p&gt;There are a number of Top-Level Domains which can also be represented by a single character.&lt;/p&gt;
&lt;p&gt;For example, Australia’s TLD &lt;code&gt;.au&lt;/code&gt; can be represented by the Astronomical Unit sign &lt;code&gt;㍳&lt;/code&gt; &lt;a href=&quot;https://www.compart.com/en/unicode/U+3373&quot;&gt;(U+3373)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most of those domains were expensive, or unavailable. But I found one which was both cheap and available.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;embed-youtube&quot;&gt;&lt;iframe class=&quot;youtube-player&quot; width=&quot;620&quot; height=&quot;349&quot; src=&quot;https://www.youtube.com/embed/baHsoEAAMZU?version=3&amp;amp;rel=1&amp;amp;fs=1&amp;amp;autohide=2&amp;amp;showsearch=0&amp;amp;showinfo=1&amp;amp;iv_load_policy=1&amp;amp;wmode=transparent&quot; allowfullscreen=&quot;true&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Yes! The &lt;a href=&quot;https://en.wikipedia.org/wiki/Orthographic_ligature&quot;&gt;orthographic ligature&lt;/a&gt; of &lt;code&gt;ﬁ&lt;/code&gt; decomposes to &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt;. That’s the TLD for Finland.&lt;/p&gt;
&lt;p&gt;I was able to register a Finnish domain on &lt;a href=&quot;https://gandi.link/f/0e14fbd6&quot;&gt;Gandi&lt;/a&gt; for £15.&lt;/p&gt;

&lt;p&gt;That’s Roman Numeral Eight (U+2167), dot (U+002E), Latin Small Ligature Fi (U+FB01).&lt;/p&gt;
&lt;h2&gt;Is this useful?&lt;/h2&gt;
&lt;p&gt;This gives me a Minimum Viable XSS in &lt;em&gt;eighteen&lt;/em&gt; characters!&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;script src=//Ⅷ.ﬁ&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I’m &lt;em&gt;pretty&lt;/em&gt; sure that’s the shortest possible sequence!&lt;/p&gt;
&lt;p&gt;Or, for loading remote resources in 15 characters:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;&amp;lt;img src=//Ⅷ.ﬁ&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There aren’t many sites which are secured &lt;em&gt;only&lt;/em&gt; by using a restricted character count – thankfully! But shrunk domains can also be useful for evading all sorts of filters.&lt;/p&gt;
&lt;h2&gt;Other domains are available&lt;/h2&gt;
&lt;p&gt;There’s one other 4-character decomposition available – see if you can find it!&lt;br/&gt;There are a few shrinkable TLDs which still have some of the 2- and 3-character domains available, but they are extortionately priced.&lt;/p&gt;
&lt;p&gt;If you do grab one of these, and make something cool with it, please let me know.&lt;/p&gt;
&lt;h2&gt;Support this blog&lt;/h2&gt;
&lt;p&gt;If you’ve learned something from my blog posts, here’s how you can return the favour:&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 11:39:00 +0000</pubDate>
<dc:creator>edent</dc:creator>
<og:type>article</og:type>
<og:title>Buying a single character domain – and 3 character FQDN – for £15</og:title>
<og:url>https://shkspr.mobi/blog/2020/08/buying-a-single-character-domain-and-3-character-fqdn-for-15/</og:url>
<og:description>Short domains are useful for security testing. If you only have a limited number of characters, you need to be able to reference code on a remote server in as few characters as possible. A few year…</og:description>
<og:image>https://shkspr.mobi/blog/wp-content/uploads/2019/05/domains.jpg</og:image>
<dc:language>en-GB</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://shkspr.mobi/blog/2020/08/buying-a-single-character-domain-and-3-character-fqdn-for-15/</dc:identifier>
</item>
<item>
<title>Ghost.org deleted my website</title>
<link>https://postapathy.substack.com/p/i-was-building-a-new-website-for</link>
<guid isPermaLink="true" >https://postapathy.substack.com/p/i-was-building-a-new-website-for</guid>
<description>&lt;h3&gt;I have received all my data and a full refund, and I am now self-hosting my website. I no longer have any beef with John O'Nolan and Ghost. I wish them all the best.&lt;/h3&gt;
&lt;p class=&quot;button-wrapper&quot; data-attrs=&quot;{&amp;quot;url&amp;quot;:&amp;quot;https://postapathy.substack.com/p/i-was-building-a-new-website-for?&amp;amp;utm_source=substack&amp;amp;utm_medium=email&amp;amp;utm_content=share&amp;amp;action=share&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;Share&amp;quot;,&amp;quot;class&amp;quot;:null}&quot;&gt;&lt;a class=&quot;button primary&quot; href=&quot;https://postapathy.substack.com/p/i-was-building-a-new-website-for?&amp;amp;utm_source=substack&amp;amp;utm_medium=email&amp;amp;utm_content=share&amp;amp;action=share&quot;&gt;&lt;span&gt;Share&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re curious about Post Apathy, here are some examples of the content I publish:&lt;/p&gt;
&lt;ul readability=&quot;2.8145400593472&quot;&gt;&lt;li readability=&quot;3.4108527131783&quot;&gt;
&lt;p&gt;I write a monthly newsletter that covers China, society, governance, political economy, technology and more. &lt;a href=&quot;https://postapathy.substack.com/p/post-apathy-newsletter-6&quot;&gt;Here’s an example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;0.58771929824561&quot;&gt;
&lt;p&gt;I also write original essays on a variety of topics, such as &lt;a href=&quot;https://postapathy.substack.com/p/archeofuturism&quot;&gt;metapolitical theory&lt;/a&gt; and &lt;a href=&quot;https://postapathy.substack.com/p/on-the-commodification-and-technologification&quot;&gt;techno-surveillance society&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-1&quot;&gt;
&lt;p&gt;Click the subscribe button below so you can receive weekly content straight into your inbox.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
<pubDate>Sat, 15 Aug 2020 08:22:48 +0000</pubDate>
<dc:creator>davidbarker</dc:creator>
<og:type>article</og:type>
<og:title>Issue Now Resolved</og:title>
<og:description>UPDATE: I have received all my data and a full refund, and I am now self-hosting my website. I no longer have any beef with John O'Nolan and Ghost. I wish them all the best.</og:description>
<og:image>https://bucketeer-e05bbc84-baa3-437e-9518-adb32be77984.s3.amazonaws.com/public/images/0b0ca240-fba0-4422-b1f5-4e64287357dd_1280x1280.jpeg</og:image>
<dc:format>text/html</dc:format>
<dc:identifier>https://postapathy.substack.com/p/i-was-building-a-new-website-for</dc:identifier>
</item>
<item>
<title>Amazon&amp;#039;s ML University is making its online courses available to the public</title>
<link>https://www.amazon.science/latest-news/machine-learning-course-free-online-from-amazon-machine-learning-university</link>
<guid isPermaLink="true" >https://www.amazon.science/latest-news/machine-learning-course-free-online-from-amazon-machine-learning-university</guid>
<description>&lt;p&gt;Machine learning is a field in computational science that analyzes patterns and structures in data to help with learning, reasoning, and decision-making—all without human interaction. Data is the lifeblood of business, and machine learning helps identify signals among the data noise.&lt;/p&gt;
&lt;p&gt;Machine learning (ML), a subset of artificial intelligence, is at the center of Amazon’s business. It’s used by teams across the company, from the Supply Chain Optimization team to improve its &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/working-at-amazon/predicting-what-amazons-customers-will-need-tomorrow-next-week-and-beyond&quot; data-cms-ai=&quot;0&quot;&gt;product forecasts&lt;/a&gt;, and the Alexa science team to &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/blog/alexa-at-five-looking-back-looking-forward&quot; data-cms-ai=&quot;0&quot;&gt;revolutionize daily convenience&lt;/a&gt; for customers, to the Amazon Go team for enabling a &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/blog/wacv-computer-vision-conference-prioritizes-real-solutions-to-real-problems&quot; data-cms-ai=&quot;0&quot;&gt;checkout-free&lt;/a&gt; shopping experience, and by the Amazon.com team, in order to &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/the-history-of-amazons-recommendation-algorithm&quot; data-cms-ai=&quot;0&quot;&gt;enhance customers’&lt;/a&gt; shopping experiences. Moreover, &lt;a class=&quot;Link&quot; href=&quot;https://aws.amazon.com/sagemaker/&quot; target=&quot;_blank&quot; data-cms-ai=&quot;0&quot;&gt;Amazon Sagemaker&lt;/a&gt; is an AWS service that provides developers and data scientists the ability to build, train, and deploy machine learning models, attracting customers such as &lt;a class=&quot;Link&quot; href=&quot;https://aws.amazon.com/partners/success/nasa-image-library/&quot; target=&quot;_blank&quot; data-cms-ai=&quot;0&quot;&gt;NASA&lt;/a&gt;, the &lt;a class=&quot;Link&quot; href=&quot;https://aws.amazon.com/nfl/&quot; target=&quot;_blank&quot; data-cms-ai=&quot;0&quot;&gt;National Football League&lt;/a&gt; and &lt;a class=&quot;Link&quot; href=&quot;https://aws.amazon.com/solutions/case-studies/general-electric/?hp=tile&amp;amp;tile=customerstories&quot; target=&quot;_blank&quot; data-cms-ai=&quot;0&quot;&gt;GE Healthcare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Machine learning has the potential to transform businesses in all industries, but there’s a major limitation: demand for individuals with ML expertise far outweighs supply. That’s a challenge for Amazon, and for companies big and small across the globe.&lt;/p&gt;
&lt;p&gt;To help meet that demand, Amazon founded its in-house Machine Learning University (MLU) in 2016. MLU’s curriculum is designed to sharpen the skills of current ML practitioners, while also giving neophytes the tools they need to deploy machine learning for their own projects. Classes are taught by Amazon ML experts.&lt;/p&gt;
&lt;p&gt;Three accelerated online courses are now available and will expand to include nine more in-depth courses before year’s end. Beginning in 2021, all MLU classes will be available via on-demand video, along with associated coding materials.&lt;/p&gt;
&lt;div class=&quot;Enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;Enhancement-item&quot;&gt;
&lt;div class=&quot;VideoEnhancement&quot; data-video-disable-history=&quot;&quot; readability=&quot;4.8382352941176&quot;&gt;
&lt;p&gt;&lt;iframe id=&quot;YouTubeVideoPlayer-f54ebf056afa04181863b417d995b509f&quot; role=&quot;application&quot; title=&quot;YouTube embedded video player&quot; allowfullscreen=&quot;&quot; src=&quot;https://www.youtube.com/embed/0FXKbEgz-uU?enablejsapi=1&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;div class=&quot;VideoEnhancement-info&quot; readability=&quot;9.2732843137255&quot;&gt;
&lt;p&gt;Machine Learning University course on natural language processing&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first three online courses cover natural language processing (the machine understanding of human language), computer vision (the machine understanding of images and video), and tabular data (machine learning associated to spreadsheet-like tables).&lt;/p&gt;
&lt;p&gt;“Machine Learning University got its start from the idea that we were going to have a difficult time finding enough people with ML skills to meet our needs,” says Brent Werness, an AWS research scientist who is, in effect, MLU’s academic director. “Universities can’t develop students with ML skills fast enough for Amazon, much less for all the other companies out there.&lt;/p&gt;
&lt;div class=&quot;Enhancement&quot; data-align-right=&quot;&quot;&gt;
&lt;div class=&quot;Enhancement-item&quot; readability=&quot;9&quot;&gt;

&lt;div class=&quot;Figure-content&quot; readability=&quot;38&quot;&gt;Brent Werness, AWS research scientist, and Bree Al-Rashid, who manages the Machine Learning University team, are leading the initiative to bring Amazon's Machine Learning University classes online. This photo was taken prior to the COVID-19 pandemic.
&lt;p&gt;Credit: Dave Quigg&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;“By going public with the classes, we are contributing to the scientific community on the topic of machine learning, and making machine learning more democratic,” Werness adds. “This field isn’t limited to individuals with advanced science degrees, or technical backgrounds. This initiative to bring our courseware online represents a step toward lowering barriers for software developers, students and other builders who want to get started with practical machine learning.”&lt;/p&gt;
&lt;p&gt;MLU courseware is developed via several mechanisms, says Werness. Often, a class will be created to address a specific business problem, such as in computer vision, or natural language processing. In other cases, advances in machine learning suggest changes to the curriculum.&lt;/p&gt;
&lt;p&gt;“That way we stay in touch with the business needs, and keep up with advances, such as recent improvements in state-of-the-art AutoML solutions provided by systems like AutoGluon,” says Werness.&lt;/p&gt;
&lt;p&gt;MLU’s core curriculum is challenging, and several courses require a multi-week study of the mathematics that are foundational to ML and AI, but the program also now offers accelerated courseware, such as the initial classes being made publicly available, that give students a quick overview of a topi&lt;/p&gt;
&lt;div class=&quot;Enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;Enhancement-item&quot;&gt;
&lt;div class=&quot;VideoEnhancement&quot; data-video-disable-history=&quot;&quot; readability=&quot;4.3877551020408&quot;&gt;
&lt;p&gt;&lt;iframe id=&quot;YouTubeVideoPlayer-fbdb0f8fca70a4fe5b10dac83edfba581&quot; role=&quot;application&quot; title=&quot;YouTube embedded video player&quot; allowfullscreen=&quot;&quot; src=&quot;https://www.youtube.com/embed/_6CFi2CO2AI?enablejsapi=1&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;div class=&quot;VideoEnhancement-info&quot; readability=&quot;7.6785714285714&quot;&gt;
&lt;p&gt;Machine Learning University course on computer vision&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;“Instead of a three-class sequence that takes upwards of 18 or 20 weeks to complete, in the accelerated classes we can engage students with machine learning right up front,” says Ben Starsky, MLU program manager. “They can get their hands dirty very quickly in the areas that will provide an opportunity to apply machine-learning concepts to solve business problems. You may not learn everything you need to know in three days, but you’ll know enough to ask, ‘Is this an opportunity for addressing my business problem?’”&lt;/p&gt;
&lt;p&gt;MLU classes are taught by Amazon scientists, and some courseware incorporates a textbook, &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/latest-news/amazon-scientists-author-popular-deep-learning-book&quot; data-cms-ai=&quot;0&quot;&gt;Dive into Deep Learning&lt;/a&gt;, written by Amazon scientists &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/author/aston-zhang&quot; data-cms-ai=&quot;0&quot;&gt;Aston Zhang&lt;/a&gt;, &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/author/mu-li&quot; data-cms-ai=&quot;0&quot;&gt;Mu Li&lt;/a&gt;, &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/author/zachary-lipton&quot; data-cms-ai=&quot;0&quot;&gt;Zachary Lipton&lt;/a&gt;, and &lt;a class=&quot;Link&quot; href=&quot;https://www.amazon.science/author/alex-smola&quot; data-cms-ai=&quot;0&quot;&gt;Alex Smola&lt;/a&gt;. The book offers a detailed yet accessible path toward machine-learning knowledge.&lt;/p&gt;
&lt;p&gt;In her work with Amazon students, MLU instructor Rachel Hu says she enjoys the problems they bring into class—an experience she expects to carry over to the public online class.&lt;/p&gt;
&lt;p&gt;“When I’m teaching a class for Amazon, I also feel like I’m learning a lot,” says Hu, an AWS applied scientist who previously was a graduate student instructor for an Introduction to Deep Learning class at the University of California, Berkeley. “That’s because students ask great questions. In industry, engineers are solving big problems every day, and those can be really interesting. That also helps us make the courses more relevant to real-world needs.”&lt;/p&gt;
&lt;div class=&quot;Enhancement&quot; data-align-center=&quot;&quot;&gt;
&lt;div class=&quot;Enhancement-item&quot;&gt;
&lt;div class=&quot;VideoEnhancement&quot; data-video-disable-history=&quot;&quot; readability=&quot;4.4459016393443&quot;&gt;
&lt;p&gt;&lt;iframe id=&quot;YouTubeVideoPlayer-fb2dd7dd5e4c04ba88542007af5f6f58a&quot; role=&quot;application&quot; title=&quot;YouTube embedded video player&quot; allowfullscreen=&quot;&quot; src=&quot;https://www.youtube.com/embed/kj-sPC6pai4?enablejsapi=1&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/p&gt;
&lt;div class=&quot;VideoEnhancement-info&quot; readability=&quot;7.7803278688525&quot;&gt;
&lt;p&gt;Machine Learning University course on tabular data&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Similar to other open-source initiatives, MLU’s courseware will evolve and improve over time based on input from the builder community.&lt;/p&gt;
&lt;p&gt;To help make the online classes more engaging, Starsky shipped mobile recording studios to the MLU instructors. “The teachers set up the recording studios in their living rooms or basements,” he says. “That way we get better audio and video than from a webcam on a laptop.”&lt;/p&gt;
&lt;p&gt;Demand for machine-learning classes is certain to grow as the technology pervades more and more areas of business. Werness says MLU is currently rebuilding its curriculum, in part to further integrate “Dive into Deep Learning” into class sessions.&lt;/p&gt;
&lt;p&gt;“We want to make sure we’re teaching the important things up front and that we’re making good use of students’ time,” he says. “With the transition to working from home, it’s even harder now for class participants to set aside multiple hours of time. We want to be flexible in how people can take these classes.”&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 08:18:04 +0000</pubDate>
<dc:creator>karxxm</dc:creator>
<og:title>Amazon's Machine Learning University is making its online courses available to the public</og:title>
<og:url>https://www.amazon.science/latest-news/machine-learning-course-free-online-from-amazon-machine-learning-university</og:url>
<og:image>https://assets.amazon.science/dims4/default/07ceabb/2147483647/strip/true/crop/1532x804+0+36/resize/1200x630!/quality/90/?url=http%3A%2F%2Famazon-topics-brightspot.s3.amazonaws.com%2Fscience%2Faa%2Fd2%2Fc6f68351463ca69dc25790152692%2Famazon-machine-learning-university.png</og:image>
<og:description>Classes previously only available to Amazon employees will now be available to the community.</og:description>
<og:type>article</og:type>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.amazon.science/latest-news/machine-learning-course-free-online-from-amazon-machine-learning-university</dc:identifier>
</item>
<item>
<title>Fungus at Chernobyl absorbs nuclear radiation via radiosynthesis</title>
<link>https://www.technologynetworks.com/applied-sciences/videos/chernobyl-fungus-eats-nuclear-radiation-via-radiosynthesis-338464</link>
<guid isPermaLink="true" >https://www.technologynetworks.com/applied-sciences/videos/chernobyl-fungus-eats-nuclear-radiation-via-radiosynthesis-338464</guid>
<description>&lt;p&gt;The earth’s atmosphere and magnetic field protect humans from harmful radiation. However, it is a known fact that astronauts are exposed to radiation levels that are 20-fold higher than those found on planet earth. NASA recently did an experiment on the International Space Station after realizing that a fungus growing near the Chernobyl site was thriving on nuclear radiation because of radiosynthesis. The fungus was using melanin to convert gamma radiation into chemical energy. Therefore, space scientists grew the fungus inside the ISS for a month and analyzed its ability to block radiation.&lt;br/&gt;&lt;em&gt;&lt;strong&gt;&lt;br/&gt;What Exactly Happened at Chernobyl? Learn more&lt;/strong&gt; &lt;a href=&quot;https://www.technologynetworks.com/applied-sciences/videos/what-exactly-happened-at-chernobyl-323005&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;br/&gt;&lt;/em&gt;&lt;br/&gt;The experiment showed that the Chernobyl fungus, now identified as “&lt;em&gt;Cladosporium sphaerospermum&lt;/em&gt;,” was able to block some of the incoming radiation. This finding has implications for future space missions. Scientists are thinking of shielding astronauts and space objects with a layer of this radiation-absorbing protective fungus. Meanwhile, let’s await further updates from NASA. Please share your thoughts with us in the comments section. &lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 08:09:38 +0000</pubDate>
<dc:creator>atlasshorts</dc:creator>
<og:title>Chernobyl Fungus Eats Nuclear Radiation Via Radiosynthesis</og:title>
<og:type>video.other</og:type>
<og:image>https://cdn.technologynetworks.com/tn/images/thumbs/jpeg/640_360/chernobyl-fungus-eats-nuclear-radiation-via-radiosynthesis-338464.jpg?cb=20200812</og:image>
<og:url>https://www.technologynetworks.com/applied-sciences/videos/chernobyl-fungus-eats-nuclear-radiation-via-radiosynthesis-338464</og:url>
<og:description>A fungus growing near the Chernobyl site was thriving on nuclear radiation thanks to radiosynthesis, using melanin to convert gamma radiation into chemical energy. Scientists are exploring whether its radiation-absorbing properties could be used to protect astronauts in space.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.technologynetworks.com/applied-sciences/videos/chernobyl-fungus-eats-nuclear-radiation-via-radiosynthesis-338464</dc:identifier>
</item>
<item>
<title>Mozilla’s Uncertain Future</title>
<link>https://civilityandtruth.com/2020/08/13/mozillas-uncertain-future/</link>
<guid isPermaLink="true" >https://civilityandtruth.com/2020/08/13/mozillas-uncertain-future/</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://civilityandtruth.com/assets/images/mozilla-revenues-vs-expenses.png&quot;&gt;&lt;img src=&quot;https://civilityandtruth.com/assets/images/mozilla-revenues-vs-expenses.png&quot; alt=&quot;Graph of Mozilla revenues compared to expenses&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
The graph above shows the consolidated revenues and expenses of the Mozilla Foundation and Mozilla Corporation from the Foundation’s founding in 2003 through 2018. Almost all of the revenues and expenses are associated with the Mozilla Corporation, and almost all of the revenues of the Mozilla Corporation are from Google and other search engine providers. Graph © 2020 Frank Hecker, made available under the &lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/&quot;&gt;Creative Commons Attribution 4.0 International license&lt;/a&gt;.
&lt;p&gt;&lt;em&gt;tl;dr: Some thoughts on Mozilla for people who don’t know Mozilla.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;By now everyone in the tech world has heard of the major layoffs at the Mozilla Corporation, the organization that creates and distributes the Firefox web browser. (For those who haven’t heard, about 250 people were laid off, about a quarter of the work force.) Lots of people in the tech world have spoken their piece about the significance of this event and what it means for the future of Mozilla, the web, and so on.&lt;/p&gt;
&lt;p&gt;Rather than write something of and for the tech world, I wanted to briefly explain what’s going on for those of my readers who don’t know HTML from XML, and who are more familar with the worlds of nonprofits and regular old businesses. I used to work for Mozilla, and have more knowledge of it and (I hope) insight into it than most people, but I’ve been gone from Mozilla for ten years now. Thus what I write below is based on observing it from a distance, like seeing an old friend whose life has long since diverged from mine.&lt;/p&gt;
&lt;p&gt;Disclaimer: I work for a tech company, and I don’t usually write about other tech companies. So I will strongly emphasize that what I write here are my personal opinions only, and do not represent the positions of my present employer or past employers.&lt;/p&gt;
&lt;h2 id=&quot;what-is-mozilla&quot;&gt;What is Mozilla?&lt;/h2&gt;
&lt;p&gt;Mozilla is actually two things, the Mozilla Foundation and the Mozilla Corporation, which are often confused and conflated in public discourse. (There’s actually at least one other piece, but these two are the main ones.) The Mozilla Foundation, founded in 2003 to take over development of the source code for the Netscape web browser, is a 501(c)(3) tax-exempt nonprofit organization, with a staff of 80 people and a budget of about $27 million in 2018, the last year for which figures are available. The Mozilla Corporation, founded in 2005, is a for-profit business, wholly owned by the Mozilla Foundation, with a staff of about a thousand and revenue of about $440 million, again from the 2018 financials.&lt;/p&gt;
&lt;p&gt;This organizational structure was designed to allow the Mozilla Corporation to engage in business activities which would be incompatible with 501(c)(3) status, with a portion of the revenues from those activities directed to the Mozilla Foundation to help fund its activities. Having a nonprofit parent also means that the management and employees of the Mozilla Corporation can help serve the public benefit goals of the Mozilla Foundation, while still having interesting jobs, being paid reasonably well, and feeling themselves to be part of the overall Silicon Valley high-tech milieu.&lt;/p&gt;
&lt;p&gt;Second: The customers of the Mozilla Corporation are not the users of Firefox (among whom you may count yourself). The Mozilla Corporation’s customers are large corporations like Google that pay for things that will help them make money, most notably having their Internet search service be the default in the Firefox browser. And to complete the old saying, “If you’re not the customer…”, then the 200+ million Firefox users are the product, potential viewers of ads served up by Google or others.&lt;/p&gt;
&lt;p&gt;(The existence of the Firefox browser as a competitor to Google’s Chrome browser also supposedly helps Google avoid unwelcome antitrust attention, especially now that Microsoft has abandoned its own browser development efforts to base its own browser on the Chrome code. But it’s unclear how important this consideration actually is to Google senior management.)&lt;/p&gt;
&lt;p&gt;In the early days of the Mozilla Corporation these search engine relationships proved extremely lucrative, jumping from less than $5 million in 2004 to over $50 million in 2005, the first year in which the Mozilla Corporation reported financial results, and eventually growing to a high of about $540 million in 2017.&lt;/p&gt;
&lt;p&gt;But as the number of Firefox users decreases (due to the growing market dominance of the Chrome browser), and those users click on fewer online ads (for example, because they’re spending less during the COVID-19 pandemic), the willingness of Google and other customers to pay the Mozilla Corporation for those users decreases accordingly. Thus the Mozilla Corporation cutting a quarter of its workforce.&lt;/p&gt;
&lt;p&gt;(In contrast, to my knowledge the Mozilla Foundation itself is not laying off anyone, at least at this time. It gets its funding from a combination of royalties from the Mozilla Corporation for use of the Firefox and Mozilla trademarks, government and foundation grants, and individual donations. For 2018 the royalties accounted for about half of the Mozilla Foundation’s budget, with grants and individual donations each accounting for about a quarter of the budget.)&lt;/p&gt;
&lt;p&gt;So, if you’re an avid user of the Firefox browser and want to chip in a few dollars to help support its development, there’s actually no way for you to do so, at least not at present. Your donations will go to the Mozilla Foundation, which will use them to help fund its outreach and advocacy initiatives, of which it has several. The Mozilla Foundation itself does not develop Firefox—or any other software, to my knowledge.&lt;/p&gt;
&lt;h2 id=&quot;whence-mozilla&quot;&gt;Whence Mozilla?&lt;/h2&gt;
&lt;p&gt;How has Mozilla (or, more correctly, the Mozilla Corporation) come to its present pass? The best way I can explain it is that the Mozilla Corporation is not really a business in the way we’d normally think of a business, profit-focused and subject to market discipline.&lt;/p&gt;
&lt;p&gt;Instead you can think of the Mozilla Corporation as being analogous to the Bell Labs or Xerox PARC of yore, R&amp;amp;D organizations funded by a seemingly-unending stream of profits earned by other businesses that enjoyed dominant positions in their respective markets. In this sense Google is to Mozilla as AT&amp;amp;T was to Bell Labs, or Xerox to Xerox PARC.&lt;/p&gt;
&lt;p&gt;Like Bell Labs and Xerox PARC, the Mozilla Corporation provided a home for some of the smartest software developers around. Like those organizations, the Mozila Corporation has initiated a myriad of projects ranging from the mundane and useful (like the Firefox browser) to the esoteric and speculative. Like those organizations, the Mozilla Corporation has given away much of what it has produced in the form of public goods available to everyone at no charge.&lt;/p&gt;
&lt;p&gt;Like Bell Labs and Xerox PARC, the Mozilla Corporation has indulged a taste for “build it yourself” vertical integration, and in particular for creating its own bespoke development tools and software stack. For example, like those organizations the Mozilla Corporation has created its own operating system (FirefoxOS), its own programming language (Rust), and (of course) its own graphical user environment in the form of the Firefox browser (not to mention yet another web browser, this one more research-oriented, and various experiments in software for virtual reality environments).&lt;/p&gt;
&lt;p&gt;And finally, the Mozilla Corporation is engaged in the same struggle that Bell Labs and Xerox PARC found themselves in: trying to convert a research-oriented organization into an actual business, and capture for itself more of the value that it has been providing to the world (and to its past, present, and future competitors) for free.&lt;/p&gt;
&lt;h2 id=&quot;whither-mozilla&quot;&gt;Whither Mozilla?&lt;/h2&gt;
&lt;p&gt;What will happen to Mozilla, and to the Mozilla Corporation in particular? The basic situation is that Mozilla has tried to be at least three things simultaneously: an advocacy organization, a developer and distributor of mass market consumer software and related services, and (as noted above) a research lab.&lt;/p&gt;
&lt;p&gt;Being an advocacy organization is relatively inexpensive, but the other two functions are not: software development (including research-related activities) and branding and marketing together consumed almost three quarters of the combined Mozilla Corporation and Foundation expense budget of $450 million in 2018. Thus when COVID-19 hit and the Mozilla Corporation hit a brick wall in terms of search engine revenue, its choice was apparently either to stop being a consumer software and services company, or to stop being a research lab.&lt;/p&gt;
&lt;p&gt;In the end Mozilla Corporation senior management apparently decided to go for being a consumer software and services company, and to ditch any activities not related to that, including research projects. Having done so, the Mozilla Corporation faces a number of problems:&lt;/p&gt;
&lt;p&gt;First, as noted above the Mozilla ethos is arguably more like that of an R&amp;amp;D lab than of a business proper. Just getting Mozilla employees to think of themselves as working in the service of a profit-driven business, and to act in accordance with that thought every single day, may be an uphill battle.&lt;/p&gt;
&lt;p&gt;Second, Mozilla is arguably becoming superfluous, at least as far as its own largest customer, Google, is concerned. Google has its own browser and browser development team, its own research lab, and presumably an inclination to want to spend its R&amp;amp;D money on things it can control and direct itself. Google also has the ability and the opportunity to capture the remaining base of Firefox users, at least those that are monetizable.&lt;/p&gt;
&lt;p&gt;There will always be a core of enthusiastic Firefox users, but a lot of them switch their search engine to something other than Google, run ad blockers, and don’t click on online ads. Thus they are for the most part irrelevant from Google’s point of view. At some point the major value Firefox has for Google will be as presumed insulation from antitrust enforcement efforts targeting Chrome, but such insurance, even if it’s of value to Google, doesn’t necessarily require a large Firefox user base.&lt;/p&gt;
&lt;p&gt;Finally, it’s not at all clear how successful the Mozilla Corporation can be at the task of running a business for which individual consumers are the customers, not search engine vendors. The Mozilla Corporation has had a number of previous efforts to try to break out of its dependence on Google, et al., none of which were successful. Based purely on history one would be skeptical of their succeeding this time.&lt;/p&gt;
&lt;p&gt;This is especially true given the basic math: To replace (say) $100 million of lost revenue from search engines Mozilla would need to make 50 cents or so per year from each of its $200+ million Firefox users. This seems reasonable, but remember that Internet users have been used to a world where everything is provided to them for free, so the number of Firefox users who would pay anything at all is likely to be low.&lt;/p&gt;
&lt;p&gt;If we assume 2% of Firefox users would purchase Mozilla products and services (apparently a fairly typical conversion rate for “freemium” products), replacing $100 million of lost revenue with a user base of approximately 200 million users would require each paid user to be contributing about $25 per year to the Mozilla Corporation’s bottom line. Assuming the same conversion rate and no growth in the user base, matching the $500+ million of revenue the Mozilla Corporation had at its peak would require each paid user to purchase &lt;del&gt;$75&lt;/del&gt; $125 per year of Mozilla products and services. That’s a fair amount of money.&lt;/p&gt;
&lt;p&gt;Assuming that the Mozilla Corporation can’t convert itself into a true profit-making business serving individual customers, what are the other possibilities?&lt;/p&gt;
&lt;p&gt;One is to aggressively shrink the organization to a size that is sustainable long-term on greatly-reduced revenues, while still ensuring that Mozilla as a whole is able to do a reasonably good job of fulfilling its nonprofit mission. For example, this might involve cutting out all development except for basic maintenance of Firefox itself, in an effort to preserve a user base large enough to justify someone paying the Mozilla Corporation for access to it.&lt;/p&gt;
&lt;p&gt;A problem with this approach is that it likely does not accord with the feelings and ambitions of either Mozilla employees or senior management, who are used to thinking of Mozilla as being on the cutting edge of web development. It would be a far step down from that to maintaining an aging browser code base in an attempt to sustain a relatively small revenue stream.&lt;/p&gt;
&lt;p&gt;A more drastic approach would be to get out of the software development business entirely in a few years, liquidate the assets of the Mozilla Corporation and direct any remaining revenue into an endowment, and revert to being a pure nonprofit organization focused on Internet and web advocacy. I suspect such a conversion could be very complicated and time-consuming from a tax and legal perspective due to the money involved and the restrictions placed on how it can be moved around, but that’s why you hire lawyers and tax experts, to determine what’s possible and how to do it.&lt;/p&gt;
&lt;p&gt;I consider this scenario even less likely than the previous possibility: senior management of the Mozilla Corporation seem very attached to the idea of software being a “force multiplier” for the Mozilla Foundation’s efforts, supplementing advocacy efforts by creating software that implements the public benefit ideals of the nonprofit.&lt;/p&gt;
&lt;p&gt;Finally, a more “out there” possibility is leaning even more into the idea of being a “public interest R&amp;amp;D lab” for the Internet and the web, focusing on research activities primarily producing public goods, and looking for increased funding from foundations and governments as opposed to funding from corporations and end users. It’s certainly possible to build large nonprofit organizations this way, with billion dollar budgets and thousands of employees; see for example the Battelle Memorial Institute, the MITRE Corporation, and Howard County’s own Johns Hopkins University Applied Physics Laboratory.&lt;/p&gt;
&lt;p&gt;However the way that Battelle, MITRE, and APL got to be that big is by aggressively pursuing defense contracts. I doubt that Mozilla management or employees are interested in the Mozilla Corporation becoming a DoD contractor, and it’s unclear to me how much government or foundation funding Mozilla could attract as an R&amp;amp;D lab focused purely on civilian applications in the Internet and web space.&lt;/p&gt;
&lt;p&gt;In the end it’s possible and perhaps most likely that the Mozilla Corporation will continue down its present path, trying a variety of new business opportunities without any of them being a runaway success, drawing upon a steadily declining revenue stream, and slowly contracting the organization over time. In ten years it’s possible that the Mozilla Corporation may be just a memory, with the Mozilla Foundation surviving as a modestly-funded advocacy organization.&lt;/p&gt;
&lt;p&gt;And, honestly, there are worse fates than that. The Mozilla Corporation has existed now for fifteen years, the Mozilla Foundation for seventeen, and the overall Mozilla project for over twenty. Mozilla as a whole has done many great things, greater than many organizations much bigger in size and public awareness. Even if it were to close up shop tomorrow, like Bell Labs and Xerox PARC its place in history would be secure.&lt;/p&gt;
&lt;h2 id=&quot;for-further-exploration&quot;&gt;For further exploration&lt;/h2&gt;
&lt;p&gt;The most recent &lt;a href=&quot;https://www.mozilla.org/en-US/foundation/annualreport/2018/&quot;&gt;State of Mozilla&lt;/a&gt; report gives an overview of the Mozilla organizations’ activities and finances. The 2019 report should be out later this year. The report is released concurrently with the release of the Mozilla Foundation IRS Form 990, i.e., its tax return, and the Foundation always requests an extension and files its tax return in November. Thus we won’t know the true impact of Mozilla’s current financial woes until late 2021.&lt;/p&gt;
&lt;p&gt;Incidentally, doing a Twitter search on ”Mozilla” gives a good feel for public perception of Mozilla among technologists, but unfortunately most of the people commenting have no real idea what they’re talking about.&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 06:03:06 +0000</pubDate>
<dc:creator>jonathankoren</dc:creator>
<og:type>article</og:type>
<og:title>Mozilla’s uncertain future</og:title>
<og:url>https://civilityandtruth.com/2020/08/13/mozillas-uncertain-future/</og:url>
<og:description>Some thoughts on Mozilla for people who don’t know Mozilla.</og:description>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://civilityandtruth.com/2020/08/13/mozillas-uncertain-future/</dc:identifier>
</item>
<item>
<title>Write Your Own Virtual Machine</title>
<link>https://justinmeiners.github.io/lc3-vm/</link>
<guid isPermaLink="true" >https://justinmeiners.github.io/lc3-vm/</guid>
<description>&lt;div class=&quot;section&quot; readability=&quot;73.666077738516&quot;&gt;
&lt;h4&gt;2. Introduction&lt;/h4&gt;
&lt;p&gt;In this tutorial, I will teach you how to write your own virtual machine (VM) that can run assembly language programs, such as my friend's &lt;a href=&quot;https://github.com/rpendleton/lc3-2048&quot;&gt;2048&lt;/a&gt; or my &lt;a href=&quot;https://github.com/justinmeiners/lc3-rogue&quot;&gt;Roguelike&lt;/a&gt;. If you know how to program, but would like to gain a deeper understanding of what is going on inside a computer and better understand how programming languages work, then this project is for you. Writing your own VM may sound a little scary, but I promise that you will find it to be surprisingly simple and enlightening.&lt;/p&gt;
&lt;p&gt;The final code is about 250 lines of C (&lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/src/lc3.c&quot;&gt;unix&lt;/a&gt;, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/src/lc3-win.c&quot;&gt;windows&lt;/a&gt;). All you need to know is how to read basic C or C++ and how to do &lt;a href=&quot;https://www.swarthmore.edu/NatSci/echeeve1/Ref/BinaryMath/BinaryMath.html&quot;&gt;binary arithmetic&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote readability=&quot;7.2727272727273&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This VM is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Literate_programming&quot;&gt;literate program&lt;/a&gt;. This means you are reading the source code right now! Each piece of code from the project will be shown and explained thoroughly, so you can be sure nothing is left out. The final code was created by &lt;a href=&quot;https://github.com/zyedidia/Literate&quot;&gt;&quot;weaving&quot;&lt;/a&gt; the blocks of code together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;What is a virtual machine?&lt;/h3&gt;
&lt;p&gt;A VM is a program that acts like a computer. It simulates a CPU along with a few other hardware components, allowing it to perform arithmetic, read and write to memory, and interact with I/O devices, just like a physical computer. Most importantly, it can understand a machine language which you can use to program it.&lt;/p&gt;
&lt;p&gt;The amount of computer hardware the VM attempts to simulate depends on its purpose. Some VMs are designed to reproduce the behavior of some particular computer, such as video game emulators. Most people don't have an NES lying around anymore, but we can still play NES games by simulating the NES hardware in a program. These emulators must &lt;a href=&quot;http://wiki.nesdev.com/w/index.php/Tricky-to-emulate_games&quot;&gt;faithfully recreate&lt;/a&gt; every &lt;a href=&quot;http://wiki.nesdev.com/w/index.php/Emulator_tests&quot;&gt;detail&lt;/a&gt; and major hardware component of the original device.&lt;/p&gt;
&lt;p&gt;Other VMs don't act like any real computer and are entirely made up! This is primarily done to make software development easier. Imagine you wanted to create a program that ran on multiple computer architectures. A VM could offer a standard platform which provided portability for all of them. Instead of rewriting a program in different dialects of assembly for each CPU architecture, you would only need to write the small VM program in each assembly language. Each program would then be written only once in the VM's assembly language.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/no_vm.gif&quot; alt=&quot;architecture specific implementation&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/vm.gif&quot; alt=&quot;vm for each architecture&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;11&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A compiler solves a similar problem by compiling a standard &lt;em&gt;high-level language&lt;/em&gt; to several CPU architectures. A VM creates one standard &lt;em&gt;CPU architecture&lt;/em&gt; which is simulated on various hardware devices. One advantage of a compiler is that it has no runtime overhead while a VM does. Even though compilers do a pretty good job, writing a new one that targets multiple platforms is very difficult, so VMs are still helpful here. In practice, VMs and compilers are mixed at various levels.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_virtual_machine&quot;&gt;Java Virtual Machine (JVM)&lt;/a&gt; is a very successful example. The JVM itself is a moderately sized program that is small enough for one programmer to understand. This has made it possible to be written for thousands of devices including phones. Once the JVM is implemented on a new device, any Java, Kotlin, or Clojure program ever written can run on it without modification. The only cost is the overhead of the VM itself and the &lt;a href=&quot;https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/&quot;&gt;further abstraction&lt;/a&gt; from the machine. Most of the time, this is a pretty good tradeoff.&lt;/p&gt;
&lt;p&gt;A VM doesn't have to be large or pervasive to provide a similar benefit. Old &lt;a href=&quot;https://fabiensanglard.net/anotherWorld_code_review/&quot;&gt;video games&lt;/a&gt; often used small VMs to provide simple &lt;a href=&quot;https://sf2platinum.wordpress.com/page/1/&quot;&gt;scripting systems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;VMs are also useful for executing code in a secure or isolated way. One application of this is garbage collection. There &lt;a href=&quot;https://www.lua.org/pil/24.2.html&quot;&gt;is no trivial way&lt;/a&gt; to implement automatic garbage collection on top of C or C++ since a program cannot see its own stack or variables. However, a VM is “outside” the program it is running and can observe all of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection&quot;&gt;memory references&lt;/a&gt; on the stack.&lt;/p&gt;
&lt;p&gt;Another example of this behavior is demonstrated by &lt;a href=&quot;https://solidity.readthedocs.io/en/v0.4.24/introduction-to-smart-contracts.html&quot;&gt;Ethereum smart contracts&lt;/a&gt;. Smart contracts are small programs which are executed by each validating node in the blockchain network. This requires the node operators to run programs on their machines that have been written by complete strangers, without any opportunity to scrutinize them beforehand. To prevent a contract from doing malicious things, they are run inside a &lt;a href=&quot;http://ethdocs.org/en/latest/introduction/what-is-ethereum.html#ethereum-virtual-machine&quot;&gt;VM&lt;/a&gt; that has no access to the file system, network, disc, etc. Ethereum is also a good application of the portability features that result when using a VM. Since Ethereum nodes can be run on many kinds of computers and operating systems, the use of a VM allows smart contracts to be written without any consideration of the many platforms they run on.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;100.07495410973&quot;&gt;
&lt;h4&gt;3. LC-3 Architecture&lt;/h4&gt;
&lt;p&gt;Our VM will simulate a fictional computer called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Little_Computer_3&quot;&gt;LC-3&lt;/a&gt;. The LC-3 is popular for teaching university students how to program in assembly language. It has a simplified instruction set &lt;a href=&quot;http://ref.x86asm.net/coder64.html&quot;&gt;compared to x86&lt;/a&gt;, but contains all the main ideas used in modern CPUs.&lt;/p&gt;
&lt;p&gt;First, we need to simulate the essential hardware components of the machine. Try to understand what each component is, but don't worry right now if you are unsure of how it fits into the larger picture. Start by creating a C file. Each of the code snippets in this section should be placed in the global scope of this file.&lt;/p&gt;
&lt;h3&gt;Memory&lt;/h3&gt;
&lt;p&gt;The LC-3 has 65,536 memory locations (the maximum that is addressable by a 16-bit unsigned integer &lt;code&gt;2^16&lt;/code&gt;), each of which stores a 16-bit value. This means it can store a total of only 128kb, which is a lot smaller than you may be used to! In our program, this memory will be stored in a simple array:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.7613636363636&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Memory Storage &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
/* 65536 locations */
uint16_t memory[UINT16_MAX];
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Registers&lt;/h3&gt;
&lt;p&gt;A register is a slot for storing a single value on the CPU. Registers are like the &quot;workbench&quot; of the CPU. For the CPU to work with a piece of data, it has to be in one of the registers. However, since there are just a few registers, only a minimal amount of data can be loaded at any given time. Programs work around this by loading values from memory into registers, calculating values into other registers, and then storing the final results back in memory.&lt;/p&gt;
&lt;p&gt;The LC-3 has 10 total registers, each of which is 16 bits. Most of them are general purpose, but a few have designated roles.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;8 general purpose registers (&lt;code&gt;R0&lt;/code&gt;-&lt;code&gt;R7&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;1 program counter (&lt;code&gt;PC&lt;/code&gt;) register&lt;/li&gt;
&lt;li&gt;1 condition flags (&lt;code&gt;COND&lt;/code&gt;) register&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The general purpose registers can be used to perform any program calculations. The program counter is an unsigned integer which is the address of the next instruction in memory to execute. The condition flags tell us information about the previous calculation.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;17.848739495798&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Registers &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    R_R0 = 0,
    R_R1,
    R_R2,
    R_R3,
    R_R4,
    R_R5,
    R_R6,
    R_R7,
    R_PC, /* program counter */
    R_COND,
    R_COUNT
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like the memory, we will store the registers in an array:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Register Storage &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t reg[R_COUNT];
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Instruction Set&lt;/h3&gt;
&lt;p&gt;An instruction is a command which tells the CPU to do some fundamental task, such as add two numbers. Instructions have both an &lt;strong&gt;opcode&lt;/strong&gt; which indicates the kind of task to perform and a set of &lt;strong&gt;parameters&lt;/strong&gt; which provide inputs to the task being performed.&lt;/p&gt;
&lt;p&gt;Each &lt;strong&gt;opcode&lt;/strong&gt; represents one task that the CPU &quot;knows&quot; how to do. There are just 16 opcodes in LC-3. Everything the computer can calculate is some sequence of these simple instructions. Each instruction is 16 bits long, with the left 4 bits storing the opcode. The rest of the bits are used to store the parameters.&lt;/p&gt;
&lt;p&gt;We will discuss, in detail, what each instruction does later. For now, define the following opcodes. Make sure they stay in this order so that they are assigned the proper enum value:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;24.941860465116&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Opcodes &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    OP_BR = 0, /* branch */
    OP_ADD,    /* add  */
    OP_LD,     /* load */
    OP_ST,     /* store */
    OP_JSR,    /* jump register */
    OP_AND,    /* bitwise and */
    OP_LDR,    /* load register */
    OP_STR,    /* store register */
    OP_RTI,    /* unused */
    OP_NOT,    /* bitwise not */
    OP_LDI,    /* load indirect */
    OP_STI,    /* store indirect */
    OP_JMP,    /* jump */
    OP_RES,    /* reserved (unused) */
    OP_LEA,    /* load effective address */
    OP_TRAP    /* execute trap */
};
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;9.8961937716263&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Intel x86 architecture has hundreds of instructions, while others such as ARM and LC-3 have very few. Small instruction sets are referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Reduced_instruction_set_computer&quot;&gt;RISCs&lt;/a&gt; while larger ones are called &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_instruction_set_computer&quot;&gt;CISCs&lt;/a&gt;. Larger instruction sets typically do not provide any fundamentally new possibilities, but they &lt;a href=&quot;https://cs.stanford.edu/people/eroberts/courses/soco/projects/risc/risccisc/&quot;&gt;often make it more convenient&lt;/a&gt; to write assembly for. A single instruction in CISC might take the place of several in RISC. However, they tend to be more complex and expensive for engineers to design and manufacture. This and other tradeoffs cause the designs to come &lt;a href=&quot;https://cs.stackexchange.com/questions/269/why-would-anyone-want-cisc&quot;&gt;in and out of style&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Condition Flags&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;R_COND&lt;/code&gt; register stores condition flags which provide information about the most recently executed calculation. This allows programs to check logical conditions such as &lt;code&gt;if (x &amp;gt; 0) { ... }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each CPU has a variety of condition flags to signal various situations. The LC-3 uses only 3 condition flags which indicate the sign of the previous calculation.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9038461538462&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Condition Flags &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    FL_POS = 1 &amp;lt;&amp;lt; 0, /* P */
    FL_ZRO = 1 &amp;lt;&amp;lt; 1, /* Z */
    FL_NEG = 1 &amp;lt;&amp;lt; 2, /* N */
};
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;5.3366834170854&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; (The &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; symbol is called the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/336xbhcz.aspx&quot;&gt;left bitshift operator&lt;/a&gt;. &lt;code&gt;(n &amp;lt;&amp;lt; k)&lt;/code&gt; shifts the bits of &lt;code&gt;n&lt;/code&gt; to the left &lt;code&gt;k&lt;/code&gt; places. Thus &lt;code&gt;1 &amp;lt;&amp;lt; 2&lt;/code&gt; will equal &lt;code&gt;4&lt;/code&gt;. Read that link if you are not familiar. It will be important.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are finished setting up the hardware components of our VM! After adding standard includes (see reference), your file should look something like this:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.083333333333&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{&lt;strong&gt;lc3.c&lt;/strong&gt; &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Includes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Registers, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Opcodes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Condition Flags, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Added to in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;51.18234387047&quot;&gt;
&lt;h4&gt;4. Assembly Examples&lt;/h4&gt;
&lt;p&gt;Now let's look at an LC-3 assembly program to get an idea of what the VM actually runs. You don't need to know how to program assembly or understand everything that is going on. Just try to get a general idea of what is going on. Here is a simple &quot;Hello World&quot;:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.96918767507&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Hello World Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:4&quot;&gt;4&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
.ORIG x3000                        ; this is the address in memory where the program will be loaded
LEA R0, HELLO_STR                  ; load the address of the HELLO_STR string into R0
PUTs                               ; output the string pointed to by R0 to the console
HALT                               ; halt the program
HELLO_STR .STRINGZ &quot;Hello World!&quot;  ; store this string here in the program
.END                               ; mark the end of the file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like in C, the program starts at the top and executes one statement at a time. However, unlike C, there are no nested scopes &lt;code&gt;{}&lt;/code&gt; or control structures such as &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;; just a flat list of statements. This makes it much easier to execute.&lt;/p&gt;
&lt;p&gt;Notice that some of the statements have names which match the opcodes we defined earlier. Previously, we learned that every instruction was 16 bits, but each line looks like it is a different number of characters. How is this inconsistency possible?&lt;/p&gt;
&lt;p&gt;This is because the code we are reading is written in &lt;strong&gt;assembly&lt;/strong&gt; which is a human-readable and writable form, encoded in plain text. A tool called an &lt;strong&gt;assembler&lt;/strong&gt; is used to transform each line of text into a 16-bit binary instruction the VM can understand. This binary form, which is essentially an array of 16-bit instructions, is called &lt;strong&gt;machine code&lt;/strong&gt; and is what the VM actually runs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/assembler.gif&quot; alt=&quot;assembler diagram&quot;/&gt;&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although a compiler and an assembler play a similar role in development, they are not the same. An assembler simply encodes what the programmer has written in text into binary, replacing symbols with their binary representation and packing them into instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The commands &lt;code&gt;.ORIG&lt;/code&gt; and &lt;code&gt;.STRINGZ&lt;/code&gt; look like instructions but they aren't. They are assembler directives which generate a piece of code or data (like macros). For example, the &lt;code&gt;.STRINGZ&lt;/code&gt; inserts a string of characters into the program binary at the location it is written.&lt;/p&gt;
&lt;p&gt;Loops and conditions are done with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Goto&quot;&gt;goto&lt;/a&gt;-like instruction. Here is another example which counts to 10.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;14.942307692308&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Loop Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:4&quot;&gt;4&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
AND R0, R0, 0                      ; clear R0
LOOP                               ; label at the top of our loop
ADD R0, R0, 1                      ; add 1 to R0 and store back in R0
ADD R1, R0, -10                    ; subtract 10 from R0 and store back in R1
BRn LOOP                           ; go back to LOOP if the result was negative
... ; R0 is now 10!
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;7.5348837209302&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Learning to write assembly is not necessary for this tutorial. However, if you are interested, you can write and assemble your own LC-3 programs using the &lt;a href=&quot;http://highered.mheducation.com/sites/0072467509/student_view0/lc-3_simulator.html&quot;&gt;LC-3 Tools&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;55.797677461564&quot;&gt;
&lt;h4&gt;5. Executing Programs&lt;/h4&gt;
&lt;p&gt;Once again, the previous examples are just to give you an idea of what the VM does. To write a VM, you don't need to be fluent in assembly. As long as you follow the proper procedure for reading and executing instructions, &lt;em&gt;any&lt;/em&gt; LC-3 program will run correctly, no matter how complicated it is. In theory, it could even run a web browser or an operating system like Linux!&lt;/p&gt;
&lt;p&gt;If you think about this property deeply, it is a philosophically remarkable idea. The programs themselves can do all kinds of intelligent things that we never anticipated and may not be able to understand, but at the same time, everything they can do is limited to the simple code we will write! We simultaneously know everything and nothing about how each program works. Turing observed this marvelous idea:&lt;/p&gt;
&lt;blockquote readability=&quot;10.631578947368&quot;&gt;
&lt;p&gt;&quot;The view that machines cannot give rise to surprises is due, I believe, to a fallacy to which philosophers and mathematicians are particularly subject. This is the assumption that as soon as a fact is presented to a mind all consequences of that fact spring into the mind simultaneously with it. It is a very useful assumption under many circumstances, but one too easily forgets that it is false.&quot; — &lt;a href=&quot;https://academic.oup.com/mind/article-pdf/LIX/236/433/9866119/433.pdf&quot;&gt;Alan M. Turing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Procedure&lt;/h3&gt;
&lt;p&gt;Here is the procedure we need to write:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Load one instruction from memory at the address of the &lt;code&gt;PC&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;Increment the &lt;code&gt;PC&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;Look at the &lt;em&gt;opcode&lt;/em&gt; to determine which type of instruction it should perform.&lt;/li&gt;
&lt;li&gt;Perform the instruction using the parameters in the instruction.&lt;/li&gt;
&lt;li&gt;Go back to step 1.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You may be wondering, &quot;if the loop keeps incrementing the &lt;code&gt;PC&lt;/code&gt;, and we don't have &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt;, won't it quickly run out of instructions?&quot; No. As we mentioned before, some goto-like instructions change the execution flow by jumping the &lt;code&gt;PC&lt;/code&gt; around.&lt;/p&gt;
&lt;p&gt;Let's start outlining this process in the main loop:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;28.196385542169&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Main Loop &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;

int main(int argc, const char* argv[])
{
&lt;span class=&quot;nocode pln&quot;&gt;    {Load Arguments, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;    {Setup, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

    /* set the PC to starting position */
    /* 0x3000 is the default */
    enum { PC_START = 0x3000 };
    reg[R_PC] = PC_START;

    int running = 1;
    while (running)
    {
        /* FETCH */
        uint16_t instr = mem_read(reg[R_PC]++);
        uint16_t op = instr &amp;gt;&amp;gt; 12;

        switch (op)
        {
            case OP_ADD:
&lt;span class=&quot;nocode pln&quot;&gt;                {ADD, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_AND:
&lt;span class=&quot;nocode pln&quot;&gt;                {AND, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_NOT:
&lt;span class=&quot;nocode pln&quot;&gt;                {NOT, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_BR:
&lt;span class=&quot;nocode pln&quot;&gt;                {BR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_JMP:
&lt;span class=&quot;nocode pln&quot;&gt;                {JMP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_JSR:
&lt;span class=&quot;nocode pln&quot;&gt;                {JSR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_LD:
&lt;span class=&quot;nocode pln&quot;&gt;                {LD, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_LDI:
&lt;span class=&quot;nocode pln&quot;&gt;                {LDI, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_LDR:
&lt;span class=&quot;nocode pln&quot;&gt;                {LDR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_LEA:
&lt;span class=&quot;nocode pln&quot;&gt;                {LEA, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_ST:
&lt;span class=&quot;nocode pln&quot;&gt;                {ST, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_STI:
&lt;span class=&quot;nocode pln&quot;&gt;                {STI, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_STR:
&lt;span class=&quot;nocode pln&quot;&gt;                {STR, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_TRAP:
&lt;span class=&quot;nocode pln&quot;&gt;                {TRAP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
                break;
            case OP_RES:
            case OP_RTI:
            default:
&lt;span class=&quot;nocode pln&quot;&gt;                {BAD OPCODE, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
                break;
        }
    }
&lt;span class=&quot;nocode pln&quot;&gt;    {Shutdown, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;While we are at the main loop let's handle command line input to make our program usable. We expect one or more paths to VM images and present a usage string if none are given.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9555555555556&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Load Arguments &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
if (argc &amp;lt; 2)
{
    /* show usage string */
    printf(&quot;lc3 [image-file1] ...\n&quot;);
    exit(2);
}

for (int j = 1; j &amp;lt; argc; ++j)
{
    if (!read_image(argv[j]))
    {
        printf(&quot;failed to load image: %s\n&quot;, argv[j]);
        exit(1);
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;151.39199630954&quot;&gt;
&lt;h4&gt;6. Implementing Instructions&lt;/h4&gt;
&lt;p&gt;Your task now is to fill in each opcode case with a correct implementation. This is easier than it sounds. A detailed specification for each instruction is included in the &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/supplies/lc3-isa.pdf&quot;&gt;project documents&lt;/a&gt;. The specificiation for each translates pretty easily to several lines of codes. I will demonstrate how to implement two of them here. The code for the rest can be found in the next section.&lt;/p&gt;
&lt;h3&gt;ADD&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ADD&lt;/code&gt; instruction takes two numbers, adds them together, and stores the result in a register. Its specification is found on page 526. Each &lt;code&gt;ADD&lt;/code&gt; instruction looks like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/add_layout.gif&quot; alt=&quot;Add Encoding&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The encoding shows two rows because there are two different &quot;modes&quot; for this instruction. Before I explain modes, let's try to find the similarities between them. In both rows, we can see that we start with 4 bits, &lt;code&gt;0001&lt;/code&gt;. This is the opcode value for &lt;code&gt;OP_ADD&lt;/code&gt;. The next 3 bits are marked &lt;code&gt;DR&lt;/code&gt;. This stands for destination register. The destination register is where the added sum will be stored. The next 3 bits are &lt;code&gt;SR1&lt;/code&gt;. This is the register containing the first number to add.&lt;/p&gt;
&lt;p&gt;So we know where we want to store the result and we know the first number to add. The last bit of information we need is the second number to add. At this point, the two rows start to look different. Notice that on the top row the 5th bit is a &lt;code&gt;0&lt;/code&gt; and in the second row it is &lt;code&gt;1&lt;/code&gt;. This bit indicates whether it is &lt;em&gt;immediate mode&lt;/em&gt; or &lt;em&gt;register mode&lt;/em&gt;. In &lt;em&gt;register mode&lt;/em&gt;, the second number is stored in a register just like the first. This is marked &lt;code&gt;SR2&lt;/code&gt; and is contained in bits 2-0. Bits 3 and 4 are unused. In assembly this would be written as:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.9186046511628&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Add Register Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
ADD R2 R0 R1 ; add the contents of R0 to R1 and store in R2.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Immediate mode is a convenience which reduces the length of a typical program. Instead of adding two values stored in separate registers, the second value is embedded in the instruction itself, marked &lt;code&gt;imm5&lt;/code&gt; in the diagram. This removes the need to write instructions to load the value from memory. The tradeoff is that the instruction only has room for a small number, up to &lt;code&gt;2^5=32&lt;/code&gt; (unsigned) to be exact, making immediate mode primarily useful for incrementing and decrementing. In assembly, it could be written as:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.9041095890411&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Add Immediate Assembly &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
ADD R0 R0 1 ; add 1 to R0 and store back in R0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a summary from the specification:&lt;/p&gt;
&lt;blockquote readability=&quot;10&quot;&gt;
&lt;p&gt;If bit [5] is 0, the second source operand is obtained from SR2. If bit [5] is 1, the second source operand is obtained by sign-extending the imm5 field to 16 bits. In both cases, the second source operand is added to the contents of SR1 and the result stored in DR. (Pg. 526)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That sounds just like the behaviour we discussed, but what is &quot;sign-extending&quot;? The immediate mode value has only 5 bits, but it needs to be added to a 16-bit number. To do the addition, those 5 bits need to be extended to 16 to match the other number. For positive numbers, we can simply fill in 0's for the additional bits. For negative numbers, this causes a problem. For example, -1 in 5 bits is &lt;code&gt;1 1111&lt;/code&gt;. If we just extended it with 0's, this is &lt;code&gt;0000 0000 0001 1111&lt;/code&gt; which is equal to 31. Sign extension corrects this problem by filling in 0's for positive numbers and 1's for negative numbers, so that original values are preserved.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.83125&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Sign Extend &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t sign_extend(uint16_t x, int bit_count)
{
    if ((x &amp;gt;&amp;gt; (bit_count - 1)) &amp;amp; 1) {
        x |= (0xFFFF &amp;lt;&amp;lt; bit_count);
    }
    return x;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;8.4418604651163&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are interested in exactly how negative numbers can be represented in binary, you can read about &lt;a href=&quot;https://en.wikipedia.org/wiki/Two%27s_complement&quot;&gt;Two's Complement&lt;/a&gt;. However, this is not essential. You can just copy the code above and use it whenever the specification says to sign extend numbers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is one last sentence in the specification:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The condition codes are set, based on whether the result is negative, zero, or positive. (Pg. 526)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Earlier we defined a condition flags enum, and now it's time to use them. &lt;em&gt;Any time&lt;/em&gt; a value is written to a register, we need to update the flags to indicate its sign. We will write a function so that this can be reused:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8884297520661&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Update Flags &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void update_flags(uint16_t r)
{
    if (reg[r] == 0)
    {
        reg[R_COND] = FL_ZRO;
    }
    else if (reg[r] &amp;gt;&amp;gt; 15) /* a 1 in the left-most bit indicates negative */
    {
        reg[R_COND] = FL_NEG;
    }
    else
    {
        reg[R_COND] = FL_POS;
    }
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Now we are ready to write the code for the &lt;code&gt;ADD&lt;/code&gt; case:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.945945945946&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{ADD &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* destination register (DR) */
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    /* first operand (SR1) */
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    /* whether we are in immediate mode */
    uint16_t imm_flag = (instr &amp;gt;&amp;gt; 5) &amp;amp; 0x1;

    if (imm_flag)
    {
        uint16_t imm5 = sign_extend(instr &amp;amp; 0x1F, 5);
        reg[r0] = reg[r1] + imm5;
    }
    else
    {
        uint16_t r2 = instr &amp;amp; 0x7;
        reg[r0] = reg[r1] + reg[r2];
    }

    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This section contained a lot of information, so let's summarize.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;code&gt;ADD&lt;/code&gt; takes two values and stores them in a register.&lt;/li&gt;
&lt;li&gt;In register mode, the second value to add is found in a register.&lt;/li&gt;
&lt;li&gt;In immediate mode, the second value is embedded in the right-most 5 bits of the instruction.&lt;/li&gt;
&lt;li&gt;Values which are shorter than 16 bits need to be sign extended.&lt;/li&gt;
&lt;li&gt;Any time an instruction modifies a register, the condition flags need to be updated.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You may be feeling overwhelmed about writing 15 more instructions. However, all of what you learned here will be reused. Most of the instructions use some combination of sign extension, different modes, and updating flags.&lt;/p&gt;
&lt;h3&gt;LDI&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;LDI&lt;/code&gt; stands for &quot;load indirect.&quot; This instruction is used to load a value from a location in memory into a register. The specification is found on page 532.&lt;/p&gt;
&lt;p&gt;Here is what the binary layout looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/ldi_layout.gif&quot; alt=&quot;LDI Encoding&quot;/&gt;&lt;/p&gt;
&lt;p&gt;In contrast to &lt;code&gt;ADD&lt;/code&gt;, there are no modes and fewer parameters. This time, the opcode is &lt;code&gt;1010&lt;/code&gt; which corresponds with the &lt;code&gt;OP_LDI&lt;/code&gt; enum value. Just like &lt;code&gt;ADD&lt;/code&gt;, it contains a 3-bit &lt;code&gt;DR&lt;/code&gt; (the destination register) for storing the loaded value. The remaining bits are labeled &lt;code&gt;PCoffset9&lt;/code&gt;. This is an immediate value embedded in the instruction (similar to &lt;code&gt;imm5&lt;/code&gt;). Since this instruction loads from memory, we can guess that this number is some kind of address which tells us where to load from. The specification provides more detail:&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;An address is computed by sign-extending bits &lt;code&gt;[8:0]&lt;/code&gt; to 16 bits and adding this value to the incremented &lt;code&gt;PC&lt;/code&gt;. What is stored in memory at this address is the address of the data to be loaded into &lt;code&gt;DR&lt;/code&gt;. (Pg. 532)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just like before, we need to sign extend this 9-bit value, but this time add it to the current &lt;code&gt;PC&lt;/code&gt;. (If you look back at the execution loop, the &lt;code&gt;PC&lt;/code&gt; was incremented right after this instruction was loaded.) The resulting sum is an address to a location in memory, and that address &lt;em&gt;contains, yet another&lt;/em&gt; value which is the address of the value to load.&lt;/p&gt;
&lt;p&gt;This may seem like a roundabout way to read from memory, but it is indispensable. The &lt;code&gt;LD&lt;/code&gt; instruction is limited to address offsets that are 9 bits, whereas the memory requires 16 bits to address. &lt;code&gt;LDI&lt;/code&gt; is useful for loading values that are stored in locations far away from the current PC, but to use it, the address of the final location needs to be stored in a neighborhood nearby. You can think of it like having a local variable in C which is a pointer to some data:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9722991689751&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{C LDI Sample &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
// the value of far_data is an address
// of course far_data itself (the location in memory containing the address) has an address
char* far_data = &quot;apple&quot;;

// In memory it may be layed out like this:

// Address Label      Value
// 0x123:  far_data = 0x456
// ...
// 0x456:  string   = 'a'

// if PC was at 0x100
// LDI R0 0x023
// would load 'a' into R0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Same as before, the flags need to be updated after putting the value into &lt;code&gt;DR&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote readability=&quot;8&quot;&gt;
&lt;p&gt;The condition codes are set based on whether the value loaded is negative, zero, or positive. (Pg. 532)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here is the code for this case: (&lt;code&gt;mem_read&lt;/code&gt; will be discussed in a later section.)&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;11.926605504587&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LDI &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* destination register (DR) */
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    /* PCoffset 9*/
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1FF, 9);
    /* add pc_offset to the current PC, look at that memory location to get the final address */
    reg[r0] = mem_read(mem_read(reg[R_PC] + pc_offset));
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As I said, this instruction shared a lot of the code and knowledge learned from &lt;code&gt;ADD&lt;/code&gt;. You will find this is the case with the remaining instructions.&lt;/p&gt;
&lt;p&gt;You now need to go back and implement the rest of the switch cases for the instructions. Follow &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/supplies/lc3-isa.pdf&quot;&gt;the specification&lt;/a&gt; and use the code listed here to complete the others. The code for all instructions is listed at the end of the tutorial. Two of the opcodes specified before will not be used, they are &lt;code&gt;OP_RTI&lt;/code&gt; and &lt;code&gt;OP_RES&lt;/code&gt;. You can ignore these cases or throw an error if they are executed. After you are done, the bulk of your VM will be completed!&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;34.377176015474&quot;&gt;
&lt;h4&gt;7. Instruction Cheat Sheet&lt;/h4&gt;
&lt;p&gt;This section contains the full implementations of the remaining instructions if you get stuck.&lt;/p&gt;
&lt;h3&gt;RTI &amp;amp; RES&lt;/h3&gt;
&lt;p&gt;(these are unused)&lt;/p&gt;
&lt;div class=&quot;codeblock&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{BAD OPCODE &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
abort();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operation#AND&quot;&gt;Bitwise and&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9354838709677&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{AND &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    uint16_t imm_flag = (instr &amp;gt;&amp;gt; 5) &amp;amp; 0x1;

    if (imm_flag)
    {
        uint16_t imm5 = sign_extend(instr &amp;amp; 0x1F, 5);
        reg[r0] = reg[r1] &amp;amp; imm5;
    }
    else
    {
        uint16_t r2 = instr &amp;amp; 0x7;
        reg[r0] = reg[r1] &amp;amp; reg[r2];
    }
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operation#NOT&quot;&gt;Bitwise not&lt;/a&gt;&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.8814814814815&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{NOT &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;

    reg[r0] = ~reg[r1];
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Branch&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8988764044944&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{BR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1FF, 9);
    uint16_t cond_flag = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    if (cond_flag &amp;amp; reg[R_COND])
    {
        reg[R_PC] += pc_offset;
    }
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Jump&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;RET&lt;/code&gt; is listed as a separate instruction in the specification, since it is a different keyword in assembly. However, it is actually a special case of &lt;code&gt;JMP&lt;/code&gt;. &lt;code&gt;RET&lt;/code&gt; happens whenever &lt;code&gt;R1&lt;/code&gt; is 7.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8691588785047&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{JMP &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* Also handles RET */
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    reg[R_PC] = reg[r1];
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Jump Register&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9310344827586&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{JSR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t long_flag = (instr &amp;gt;&amp;gt; 11) &amp;amp; 1;
    reg[R_R7] = reg[R_PC];
    if (long_flag)
    {
        uint16_t long_pc_offset = sign_extend(instr &amp;amp; 0x7FF, 11);
        reg[R_PC] += long_pc_offset;  /* JSR */
    }
    else
    {
        uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
        reg[R_PC] = reg[r1]; /* JSRR */
    }
    break;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Load&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8971428571429&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LD &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1FF, 9);
    reg[r0] = mem_read(reg[R_PC] + pc_offset);
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Load Register&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.910447761194&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LDR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    uint16_t offset = sign_extend(instr &amp;amp; 0x3F, 6);
    reg[r0] = mem_read(reg[r1] + offset);
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Load Effective Address&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8915662650602&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{LEA &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1FF, 9);
    reg[r0] = reg[R_PC] + pc_offset;
    update_flags(r0);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Store&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.8726114649682&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{ST &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1FF, 9);
    mem_write(reg[R_PC] + pc_offset, reg[r0]);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Store Indirect&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.8809523809524&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{STI &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t pc_offset = sign_extend(instr &amp;amp; 0x1FF, 9);
    mem_write(mem_read(reg[R_PC] + pc_offset), reg[r0]);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Store Register&lt;/h3&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.8907103825137&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{STR &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:7&quot;&gt;7&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    uint16_t r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
    uint16_t r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7;
    uint16_t offset = sign_extend(instr &amp;amp; 0x3F, 6);
    mem_write(reg[r1] + offset, reg[r0]);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;89.801730184709&quot;&gt;
&lt;h4&gt;8. Trap Routines&lt;/h4&gt;
&lt;p&gt;The LC-3 provides a few predefined routines for performing common tasks and interacting with I/O devices. For example, there are routines for getting input from the keyboard and for displaying strings to the console. These are called &lt;em&gt;trap routines&lt;/em&gt; which you can think of as the operating system or API for the LC-3. Each trap routine is assigned a &lt;em&gt;trap code&lt;/em&gt; which identifies it (similar to an opcode). To execute one, the &lt;code&gt;TRAP&lt;/code&gt; instruction is called with the trap code of the desired routine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://justinmeiners.github.io/lc3-vm/img/trap_layout.gif&quot; alt=&quot;Trap Encoding&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Define an enum for each trap code:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;16.863636363636&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP Codes &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    TRAP_GETC = 0x20,  /* get character from keyboard, not echoed onto the terminal */
    TRAP_OUT = 0x21,   /* output a character */
    TRAP_PUTS = 0x22,  /* output a word string */
    TRAP_IN = 0x23,    /* get character from keyboard, echoed onto the terminal */
    TRAP_PUTSP = 0x24, /* output a byte string */
    TRAP_HALT = 0x25   /* halt the program */
};
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You may be wondering why the trap codes are not included in the instructions. This is because they do not actually introduce any new functionality to the LC-3, they just provide a convenient way to perform a task (similar to system functions in C). In the official LC-3 simulator, trap routines are &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/supplies/os.asm&quot;&gt;written in assembly&lt;/a&gt;. When a trap code is called, the &lt;code&gt;PC&lt;/code&gt; is moved to that code's address. The CPU executes instructions of the procedure, and when it is complete, the PC is reset to the location the trap was called from.&lt;/p&gt;
&lt;blockquote readability=&quot;6&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is why programs start at address &lt;code&gt;0x3000&lt;/code&gt; instead of &lt;code&gt;0x0&lt;/code&gt;. The lower addresses are left empty to leave space for the trap routine code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is no specification for &lt;em&gt;how&lt;/em&gt; trap routines must be implemented, only what they are supposed to do. In our VM, we are going to do things slightly differently by writing them in C. When a trap code is invoked, a C function will be called. When it is completed, execution will return to the instructions.&lt;/p&gt;
&lt;p&gt;Even though the trap routines can be written in assembly and this is what a physical LC-3 computer would do, it isn't the best fit for a VM. Instead of writing our own primitive I/O routines, we can take advantage of the ones available on our OS. This will make the VM run better on our computers, simplify the code, and provide a higher level of abstraction for portability.&lt;/p&gt;
&lt;blockquote readability=&quot;7&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Getting input from the keyboard is one specific example of this. The assembly version uses a loop to continuously check the keyboard for input. This consumes a lot of CPU time for nothing! Using a proper OS input function allows the program to sleep until input is received.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the switch case form the &lt;code&gt;TRAP&lt;/code&gt; opcode, add another switch:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;16.401408450704&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
switch (instr &amp;amp; 0xFF)
{
    case TRAP_GETC:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP GETC, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_OUT:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP OUT, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_PUTS:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP PUTS, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_IN:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP IN, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_PUTSP:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP PUTSP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
    case TRAP_HALT:
&lt;span class=&quot;nocode pln&quot;&gt;        {TRAP HALT, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
        break;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in sections &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt; and &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:15&quot;&gt;15&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As with instructions, I will show you how to implement a single trap routine and leave the rest to you.&lt;/p&gt;
&lt;h3&gt;PUTS&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;PUTS&lt;/code&gt; trap code is used to output a null-terminated string (similar to &lt;code&gt;printf&lt;/code&gt; in C). The specification is found on page 543.&lt;/p&gt;
&lt;p&gt;To display a string, we must give the trap routine a string to display. This is done by storing the address of the first character in &lt;code&gt;R0&lt;/code&gt; before beginning the trap.&lt;/p&gt;
&lt;p&gt;The specification says:&lt;/p&gt;
&lt;blockquote readability=&quot;9&quot;&gt;
&lt;p&gt;Write a string of ASCII characters to the console display. The characters are contained in consecutive memory locations, one character per memory location, starting with the address specified in &lt;code&gt;R0&lt;/code&gt;. Writing terminates with the occurrence of &lt;code&gt;x0000&lt;/code&gt; in a memory location. (Pg. 543)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice that unlike C strings, characters are &lt;em&gt;not stored&lt;/em&gt; in a single byte, but in a &lt;em&gt;single memory location&lt;/em&gt;. Memory locations in LC-3 are 16 bits, so each character in the string is 16 bits wide. To display this with a C function, we will need to convert each value to a char and output them individually.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.9333333333333&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP PUTS &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* one char per word */
    uint16_t* c = memory + reg[R_R0];
    while (*c)
    {
        putc((char)*c, stdout);
        ++c;
    }
    fflush(stdout);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's all for this routine. The trap routines are pretty straightforward if you are familiar with C. Go back to the specification and implement the others now. As with the instructions, the full code can be found at the end of the tutorial.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;16.804822043628&quot;&gt;
&lt;h4&gt;9. Trap Routine Cheat Sheet&lt;/h4&gt;
&lt;p&gt;This section contains the full implementations of the remaining trap routines.&lt;/p&gt;
&lt;p&gt;Input Character&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8526315789474&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP GETC &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
/* read a single ASCII char */
reg[R_R0] = (uint16_t)getchar();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Output Character&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.7922077922078&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP OUT &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
putc((char)reg[R_R0], stdout);
fflush(stdout);
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Prompt for Input Character&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.8730158730159&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP IN &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    printf(&quot;Enter a character: &quot;);
    char c = getchar();
    putc(c, stdout);
    reg[R_R0] = (uint16_t)c;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Output String&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;10.926910299003&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP PUTSP &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
{
    /* one char per byte (two bytes per word)
       here we need to swap back to
       big endian format */
    uint16_t* c = memory + reg[R_R0];
    while (*c)
    {
        char char1 = (*c) &amp;amp; 0xFF;
        putc(char1, stdout);
        char char2 = (*c) &amp;gt;&amp;gt; 8;
        if (char2) putc(char2, stdout);
        ++c;
    }
    fflush(stdout);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Halt Program&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.8108108108108&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{TRAP HALT &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:9&quot;&gt;9&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
puts(&quot;HALT&quot;);
fflush(stdout);
running = 0;
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;40.726942298955&quot;&gt;
&lt;h4&gt;10. Loading Programs&lt;/h4&gt;
&lt;p&gt;We have mentioned a lot about loading and executing instructions from memory, but how do instructions get into memory in the first place? When an assembly program is converted to machine code, the result is a file containing an array of instructions and data. This can be loaded by just copying the contents right into an address in memory.&lt;/p&gt;
&lt;p&gt;The first 16 bits of the program file specify the address in memory where the program should start. This address is called the &lt;strong&gt;origin&lt;/strong&gt;. It must be read first, after which the rest of the data can be read from the file into memory starting at the origin address.&lt;/p&gt;
&lt;p&gt;Here is the code for reading an LC-3 program into memory:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;15.868041237113&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Read Image File &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void read_image_file(FILE* file)
{
    /* the origin tells us where in memory to place the image */
    uint16_t origin;
    fread(&amp;amp;origin, sizeof(origin), 1, file);
    origin = swap16(origin);

    /* we know the maximum file size so we only need one fread */
    uint16_t max_read = UINT16_MAX - origin;
    uint16_t* p = memory + origin;
    size_t read = fread(p, sizeof(uint16_t), max_read, file);

    /* swap to little endian */
    while (read-- &amp;gt; 0)
    {
        *p = swap16(*p);
        ++p;
    }
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Notice that &lt;code&gt;swap16&lt;/code&gt; is called on each loaded value. LC-3 programs are big-endian, but most of the modern computers we use are little endian. As a result, we need to swap each &lt;code&gt;uint16&lt;/code&gt; that is loaded. (If you happen to be using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Power_Mac_G4_Cube&quot;&gt;strange computer&lt;/a&gt;, like a &lt;a href=&quot;https://en.wikipedia.org/wiki/PowerPC#Endian_modes&quot;&gt;PPC&lt;/a&gt; then you should not swap.)&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.6818181818182&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Swap &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t swap16(uint16_t x)
{
    return (x &amp;lt;&amp;lt; 8) | (x &amp;gt;&amp;gt; 8);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote readability=&quot;12.664082687339&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Endianness&quot;&gt;Endianness&lt;/a&gt; refers to how bytes of an integer are interpreted. In little-endian, the first byte is the least significant digit, and in big-endian, it is reversed. As far as I know, the decision is &lt;em&gt;mostly&lt;/em&gt; arbitrary. Different companies made different decisions, so now we are left with varying implementations. You do not need to know anything else about endianness for this project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's also add a convenience function for &lt;code&gt;read_image_file&lt;/code&gt; which takes a path a string;&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.8085106382979&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Read Image &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
int read_image(const char* image_path)
{
    FILE* file = fopen(image_path, &quot;rb&quot;);
    if (!file) { return 0; };
    read_image_file(file);
    fclose(file);
    return 1;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;47.041402825134&quot;&gt;
&lt;h4&gt;11. Memory Mapped Registers&lt;/h4&gt;
&lt;p&gt;Some special registers are not accessible from the normal register table. Instead, a special address is reserved for them in memory. To read and write to these registers, you just read and write to their memory location. These are called &lt;strong&gt;memory mapped registers&lt;/strong&gt;. They are commonly used to interact with special hardware devices.&lt;/p&gt;
&lt;p&gt;The LC-3 has two memory mapped registers that need to be implemented. They are the keyboard status register (&lt;code&gt;KBSR&lt;/code&gt;) and keyboard data register (&lt;code&gt;KBDR&lt;/code&gt;). The &lt;code&gt;KBSR&lt;/code&gt; indicates whether a key has been pressed, and the &lt;code&gt;KBDR&lt;/code&gt; identifies which key was pressed.&lt;/p&gt;
&lt;p&gt;Although you can request keyboard input using &lt;code&gt;GETC&lt;/code&gt;, this blocks execution until input is received. &lt;code&gt;KBSR&lt;/code&gt; and &lt;code&gt;KBDR&lt;/code&gt; allows you to &lt;a href=&quot;https://en.wikipedia.org/wiki/Polling_(computer_science)&quot;&gt;poll the state&lt;/a&gt; of the device and continue execution, so the program can stay responsive while waiting for input.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.8608695652174&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Memory Mapped Registers &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
enum
{
    MR_KBSR = 0xFE00, /* keyboard status */
    MR_KBDR = 0xFE02  /* keyboard data */
};
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Memory mapped registers make memory access a bit more complicated. We can't read and write to the memory array directly, but must instead call setter and getter functions. When memory is read from &lt;code&gt;KBSR&lt;/code&gt;, the getter will check the keyboard and update both memory locations.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;9.9317406143345&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Memory Access &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void mem_write(uint16_t address, uint16_t val)
{
    memory[address] = val;
}

uint16_t mem_read(uint16_t address)
{
    if (address == MR_KBSR)
    {
        if (check_key())
        {
            memory[MR_KBSR] = (1 &amp;lt;&amp;lt; 15);
            memory[MR_KBDR] = getchar();
        }
        else
        {
            memory[MR_KBSR] = 0;
        }
    }
    return memory[address];
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That completes the last component of the VM! Provided that you implemented the rest of the trap routines and instructions, you are almost ready to try it out!&lt;/p&gt;
&lt;p&gt;All that we have written should have been added to the C file in the following order:&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;21.11743772242&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{&lt;strong&gt;lc3.c&lt;/strong&gt; &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;} +=&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Memory Mapped Registers, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{TRAP Codes, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Memory Storage, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Register Storage, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Sign Extend, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Swap, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Update Flags, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:6&quot;&gt;6&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Read Image File, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Read Image, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:10&quot;&gt;10&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Check Key, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Memory Access, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Input Buffering, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;span class=&quot;nocode pln&quot;&gt;{Handle Interrupt, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;

&lt;span class=&quot;nocode pln&quot;&gt;{Main Loop, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;29.602272727273&quot;&gt;
&lt;h4&gt;12. Platform Specifics (Unix)&lt;/h4&gt;
&lt;p&gt;This section contains some tedious details that are needed to access the keyboard and behave nicely. These are not insightful or relevant to learning about VMs. Feel free to copy paste!&lt;/p&gt;
&lt;p&gt;NOTE: Skip to the next section for the &lt;strong&gt;Windows&lt;/strong&gt; versions of these functions.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;13.771428571429&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Check Key &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t check_key()
{
    fd_set readfds;
    FD_ZERO(&amp;amp;readfds);
    FD_SET(STDIN_FILENO, &amp;amp;readfds);

    struct timeval timeout;
    timeout.tv_sec = 0;
    timeout.tv_usec = 0;
    return select(1, &amp;amp;readfds, NULL, NULL, &amp;amp;timeout) != 0;
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is Unix specific code for setting up terminal input.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;14.826589595376&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Input Buffering &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
struct termios original_tio;

void disable_input_buffering()
{
    tcgetattr(STDIN_FILENO, &amp;amp;original_tio);
    struct termios new_tio = original_tio;
    new_tio.c_lflag &amp;amp;= ~ICANON &amp;amp; ~ECHO;
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;amp;new_tio);
}

void restore_input_buffering()
{
    tcsetattr(STDIN_FILENO, TCSANOW, &amp;amp;original_tio);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.7829457364341&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Handle Interrupt &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
void handle_interrupt(int signal)
{
    restore_input_buffering();
    printf(&quot;\n&quot;);
    exit(-2);
}
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:11&quot;&gt;11&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.7303370786517&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Setup &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
signal(SIGINT, handle_interrupt);
disable_input_buffering();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When the program is interrupted, we want to restore the terminal settings back to normal.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.6379310344828&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Shutdown &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
restore_input_buffering();
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:5&quot;&gt;5&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;8.9007352941176&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Includes &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:12&quot;&gt;12&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;signal.h&amp;gt;
/* unix */
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/termios.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
&lt;/pre&gt;
&lt;p class=&quot;seealso&quot;&gt;Used in section &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:3&quot;&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;22.828358208955&quot;&gt;
&lt;h4&gt;13. Platform Specifics (Windows)&lt;/h4&gt;
&lt;p&gt;This section contains some tedious details that are needed to access the keyboard and behave nicely. These are not insightful or relevant to learning about VMs. Feel free to copy paste!&lt;/p&gt;
&lt;p&gt;NOTE: If you already included the &lt;strong&gt;Unix&lt;/strong&gt; versions don't add these!&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.864406779661&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Check Key Windows &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:13&quot;&gt;13&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
uint16_t check_key()
{
    return WaitForSingleObject(hStdin, 1000) == WAIT_OBJECT_0 &amp;amp;&amp;amp; _kbhit();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;13.944&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Input Buffering Windows &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:13&quot;&gt;13&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
DWORD fdwMode, fdwOldMode;

void disable_input_buffering()
{
    hStdin = GetStdHandle(STD_INPUT_HANDLE);
    GetConsoleMode(hStdin, &amp;amp;fdwOldMode); /* save old mode */
    fdwMode = fdwOldMode 
            ^ ENABLE_ECHO_INPUT  /* no input echo */
            ^ ENABLE_LINE_INPUT; /* return when one or 
                                    more characters are available */
    SetConsoleMode(hStdin, fdwMode); /* set new mode */
    FlushConsoleInputBuffer(hStdin); /* clear buffer */
}

void restore_input_buffering()
{
    SetConsoleMode(hStdin, fdwOldMode);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.7974683544304&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Windows Setup &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:13&quot;&gt;13&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
signal(SIGINT, handle_interrupt);
disable_input_buffering();
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the program is interrupted, we want to restore the terminal settings back to normal.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;6.7083333333333&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Windows Shutdown &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:13&quot;&gt;13&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
restore_input_buffering();
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;7.926267281106&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Windows Includes &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:13&quot;&gt;13&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
#include &amp;lt;stdint.h&amp;gt; // uint16_t
#include &amp;lt;stdio.h&amp;gt;  // FILE
#include &amp;lt;signal.h&amp;gt; // SIGINT
/* windows only */
#include &amp;lt;Windows.h&amp;gt;
#include &amp;lt;conio.h&amp;gt;  // _kbhit

HANDLE hStdin = INVALID_HANDLE_VALUE;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;16.144466209598&quot;&gt;
&lt;h4&gt;14. Running the VM&lt;/h4&gt;
&lt;p&gt;You can now build and run the LC-3 VM!&lt;/p&gt;
&lt;ol readability=&quot;2.3&quot;&gt;&lt;li readability=&quot;1.8070175438596&quot;&gt;
&lt;p&gt;Compile your program] with your favorite C compiler. (Final source for &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/src/lc3.c&quot;&gt;unix&lt;/a&gt;, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/src/lc3-win.c&quot;&gt;windows&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For gcc: &lt;code&gt;$ gcc lc3.c -o lc3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;-0.8125&quot;&gt;
&lt;p&gt;Download the assembled version of &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/supplies/2048.obj&quot;&gt;2048&lt;/a&gt; or &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/supplies/rogue.obj&quot;&gt;Rogue&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li readability=&quot;1&quot;&gt;
&lt;p&gt;Run the program with the obj file as an argument:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ lc3-vm path/to/2048.obj&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Play 2048!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;codeblock&quot; readability=&quot;7.9139784946237&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{2048 Example &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:14&quot;&gt;14&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
Control the game using WASD keys.
Are you on an ANSI terminal (y/n)? y
+--------------------------+
|                          |
|                          |
|                          |
|                     2    |
|                          |
|   2                      |
|                          |
|                          |
|                          |
+--------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Debugging&lt;/h3&gt;
&lt;p&gt;If the program doesn't work correctly, it is likely because you programmed an instruction incorrectly. This can be tricky to debug. I recommend reading through the assembly source code of an LC-3 program while simultaneously using a debugger to step through the VM instructions one at a time. As you read the assembly, make sure the VM goes to the instruction that you expect it to. If a discrepancy occurs, you will then know which instruction caused the issue. Reread its specification and double check your code.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;45.966001813237&quot;&gt;
&lt;h4&gt;15. Alternate C++ Technique&lt;/h4&gt;
&lt;p&gt;This section shows an advanced way of executing instructions that makes the code a whole lot smaller. This section is entirely optional.&lt;/p&gt;
&lt;p&gt;Since C++ has powerful compile-time generics, we can use the compiler to generate parts of the instructions for us. This method reduces code duplication and is actually closer to how the computer would be wired in hardware.&lt;/p&gt;
&lt;p&gt;The idea here is to reuse the steps common to each instruction. For example, several of the instructions use indirect addressing or sign extend a value and add it to the current PC value. Wouldn't it be nice if we could write this code once for all instructions?&lt;/p&gt;
&lt;p&gt;By thinking of the instruction as a pipeline of steps we can see that each instruction is just a permutation of several of the smaller steps. We will use bitwise flags to mark which steps to perform for each instruction. A &lt;code&gt;1&lt;/code&gt; in the bit corresponding to the instruction number indicates the compiler should include this section of code for that instruction.&lt;/p&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;22.963062098501&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Instruction C++ &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:15&quot;&gt;15&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
template &amp;lt;unsigned op&amp;gt;
void ins(uint16_t instr)
{
    uint16_t r0, r1, r2, imm5, imm_flag;
    uint16_t pc_plus_off, base_plus_off;

    constexpr uint16_t opbit = (1 &amp;lt;&amp;lt; op);
    if (0x4EEE &amp;amp; opbit) { r0 = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7; }
    if (0x12F3 &amp;amp; opbit) { r1 = (instr &amp;gt;&amp;gt; 6) &amp;amp; 0x7; }
    if (0x0022 &amp;amp; opbit)
    {
        imm_flag = (instr &amp;gt;&amp;gt; 5) &amp;amp; 0x1;

        if (imm_flag)
        {
            imm5 = sign_extend(instr &amp;amp; 0x1F, 5);
        }
        else
        {
            r2 = instr &amp;amp; 0x7;
        }
    }
    if (0x00C0 &amp;amp; opbit)
    {   // Base + offset
        base_plus_off = reg[r1] + sign_extend(instr &amp;amp; 0x3F, 6);
    }
    if (0x4C0D &amp;amp; opbit)
    {
        // Indirect address
        pc_plus_off = reg[R_PC] + sign_extend(instr &amp;amp; 0x1FF, 9);
    }
    if (0x0001 &amp;amp; opbit)
    {
        // BR
        uint16_t cond = (instr &amp;gt;&amp;gt; 9) &amp;amp; 0x7;
        if (cond &amp;amp; reg[R_COND]) { reg[R_PC] = pc_plus_off; }
    }
    if (0x0002 &amp;amp; opbit)  // ADD
    {
        if (imm_flag)
        {
            reg[r0] = reg[r1] + imm5;
        }
        else
        {
            reg[r0] = reg[r1] + reg[r2];
        }
    }
    if (0x0020 &amp;amp; opbit)  // AND
    {
        if (imm_flag)
        {
            reg[r0] = reg[r1] &amp;amp; imm5;
        }
        else
        {
            reg[r0] = reg[r1] &amp;amp; reg[r2];
        }
    }
    if (0x0200 &amp;amp; opbit) { reg[r0] = ~reg[r1]; } // NOT
    if (0x1000 &amp;amp; opbit) { reg[R_PC] = reg[r1]; } // JMP
    if (0x0010 &amp;amp; opbit)  // JSR
    {
        uint16_t long_flag = (instr &amp;gt;&amp;gt; 11) &amp;amp; 1;
        reg[R_R7] = reg[R_PC];
        if (long_flag)
        {
            pc_plus_off = reg[R_PC] + sign_extend(instr &amp;amp; 0x7FF, 11);
            reg[R_PC] = pc_plus_off;
        }
        else
        {
            reg[R_PC] = reg[r1];
        }
    }

    if (0x0004 &amp;amp; opbit) { reg[r0] = mem_read(pc_plus_off); } // LD
    if (0x0400 &amp;amp; opbit) { reg[r0] = mem_read(mem_read(pc_plus_off)); } // LDI
    if (0x0040 &amp;amp; opbit) { reg[r0] = mem_read(base_plus_off); }  // LDR
    if (0x4000 &amp;amp; opbit) { reg[r0] = pc_plus_off; } // LEA
    if (0x0008 &amp;amp; opbit) { mem_write(pc_plus_off, reg[r0]); } // ST
    if (0x0800 &amp;amp; opbit) { mem_write(mem_read(pc_plus_off), reg[r0]); } // STI
    if (0x0080 &amp;amp; opbit) { mem_write(base_plus_off, reg[r0]); } // STR
    if (0x8000 &amp;amp; opbit)  // TRAP
    {
&lt;span class=&quot;nocode pln&quot;&gt;         {TRAP, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:8&quot;&gt;8&lt;/a&gt;}&lt;/span&gt;
    }
    //if (0x0100 &amp;amp; opbit) { } // RTI
    if (0x4666 &amp;amp; opbit) { update_flags(r0); }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;codeblock&quot; readability=&quot;22.752688172043&quot;&gt;&lt;span class=&quot;codeblock_name&quot;&gt;{Op Table &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/index.html#1:15&quot;&gt;15&lt;/a&gt;}&lt;/span&gt;
&lt;pre class=&quot;prettyprint lang-c&quot;&gt;
static void (*op_table[16])(uint16_t) = {
    ins&amp;lt;0&amp;gt;, ins&amp;lt;1&amp;gt;, ins&amp;lt;2&amp;gt;, ins&amp;lt;3&amp;gt;,
    ins&amp;lt;4&amp;gt;, ins&amp;lt;5&amp;gt;, ins&amp;lt;6&amp;gt;, ins&amp;lt;7&amp;gt;,
    NULL, ins&amp;lt;9&amp;gt;, ins&amp;lt;10&amp;gt;, ins&amp;lt;11&amp;gt;,
    ins&amp;lt;12&amp;gt;, NULL, ins&amp;lt;14&amp;gt;, ins&amp;lt;15&amp;gt;
};
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote readability=&quot;6.7777777777778&quot;&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I learned about this technique from &lt;a href=&quot;https://www.youtube.com/watch?v=QIUVSD3yqqE&quot;&gt;Bisqwit's NES emulator&lt;/a&gt;. If you are interested in emulation, or the NES, I highly recommend his videos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The rest of the C++ version uses the code we already wrote! The full source is here: &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/src/lc3-alt.cpp&quot;&gt;unix&lt;/a&gt;, &lt;a href=&quot;https://justinmeiners.github.io/lc3-vm/src/lc3-alt-win.cpp&quot;&gt;windows&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot; readability=&quot;7.6503109882516&quot;&gt;
&lt;h4&gt;16. Related Projects&lt;/h4&gt;
&lt;p&gt;Many programmers have reached out to share their own VMs created with this tutorial. These projects may be helpful for learners who are familiar with programming languages other than C. Feel free to fork this &lt;a href=&quot;https://github.com/justinmeiners/lc3-vm&quot;&gt;repo&lt;/a&gt; and contribute your own.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/andyjung-dev/LC3-VM-Extended&quot;&gt;andyjung-dev&lt;/a&gt; extends the tutorial implementation with a few features.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rpendleton/lc3sim-c&quot;&gt;rpendleton&lt;/a&gt; uses assembly implementation of TRAP codes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/viking/lc3-vm&quot;&gt;viking&lt;/a&gt; well commented and adds tests.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Common Lisp&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Crystal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F#&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/dmjio/LC3&quot;&gt;dmjio&lt;/a&gt; first Haskell implementation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cleverca22/LC3&quot;&gt;cleverca22&lt;/a&gt; alternative Haskell implementation.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Bl41r/lc-3-virtual-machine&quot;&gt;Bl41r&lt;/a&gt; first Python implementation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ianklatzco/lc3&quot;&gt;ianklatzco&lt;/a&gt; Python implementation. includes a disassembler.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/paul-nameless/lc3-vm&quot;&gt;paulnameless&lt;/a&gt; alternative Python implementation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mhashim6/LC-3&quot;&gt;mhashim6&lt;/a&gt; modular Python implementation.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Racket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>Sat, 15 Aug 2020 05:10:41 +0000</pubDate>
<dc:creator>ChankeyPathak</dc:creator>
<dc:format>text/html</dc:format>
<dc:identifier>https://justinmeiners.github.io/lc3-vm/</dc:identifier>
</item>
<item>
<title>Dear Google Cloud: Your Deprecation Policy Is Killing You</title>
<link>https://medium.com/@steve.yegge/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc</link>
<guid isPermaLink="true" >https://medium.com/@steve.yegge/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc</guid>
<description>&lt;div&gt;

&lt;div class=&quot;fe&quot;&gt;
&lt;div class=&quot;n da ff fg fh&quot;&gt;
&lt;div class=&quot;o n&quot;&gt;
&lt;div&gt;
&lt;div class=&quot;df fi fj&quot;&gt;

&lt;img alt=&quot;Steve Yegge&quot; class=&quot;r fp fj fi&quot; src=&quot;https://miro.medium.com/fit/c/96/96/1*OrBdZ2GUUicWcT6x8KSYZg.png&quot; width=&quot;48&quot; height=&quot;48&quot;/&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p id=&quot;a428&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;God dammit, I didn’t want to blog again. I have so much stuff to do. Blogging takes time and energy and creativity that I could be putting to good use: my novels, my &lt;a href=&quot;https://www.youtube.com/watch?v=VK244wAQ3Qo&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;music&lt;/a&gt;, my game, and so on. But you get me riled enough, and I have to blog.&lt;/p&gt;
&lt;p id=&quot;983a&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Let’s get this over with, then.&lt;/p&gt;
&lt;p id=&quot;b6e0&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I’ll begin with a small but pretty neat story from my early days at Google. For the record, I know I’ve said some perhaps unkind things about Google lately, because it’s frustrating when your corporate alma mater makes incompetent business decisions on the regular. But Google’s internal infrastructure is really quite extraordinary, and you could argue that there is still none better today. The people who built Google were far better engineers than I will &lt;em class=&quot;ii&quot;&gt;ever&lt;/em&gt; be, as this anecdote should serve to illustrate.&lt;/p&gt;
&lt;p id=&quot;2586&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;First a wee bit of background: Google has a storage technology called &lt;a href=&quot;https://en.wikipedia.org/wiki/Bigtable&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Bigtable&lt;/a&gt;. Bigtable was a remarkable technical achievement, being one of the first (if not &lt;em class=&quot;ii&quot;&gt;the&lt;/em&gt; first) “infinitely scalable” key-value stores: the beginning of NoSQL, basically. These days Bigtable still holds up well in the rather crowded space of K/V stores, but back in the day (2005) it was breathtakingly cool.&lt;/p&gt;
&lt;p id=&quot;2f06&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;One fun bit of trivia about Bigtable is that they had these internal control-plane entities (as part of the implementation) called tablet servers, which had large indexes, and at some point they became a scaling bottleneck. So the Bigtable engineers scratched their heads over how to make it scale, and realized that they could replace the tablet servers with Bigtables to unblock the scaling. So Bigtable is part of its own implementation. It’s Bigtables all the way down.&lt;/p&gt;
&lt;p id=&quot;0205&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Another cool bit of trivia is that for a time, Bigtables became popular and ubiquitous inside Google and everyone their dog had one. So at one Friday’s TGIF all-hands, Larry Page casually asked in passing, “Why do we have more than one Bigtable? Why isn’t there just one?” Because in theory, one Bigtable should have sufficed for all Google’s storage needs. Of course they never did migrate to just one, for practical software engineering reasons (e.g. blast radius), but the theory was interesting. One database for the whole universe. &lt;em class=&quot;ii&quot;&gt;(Side note: Anyone know if Sable does this at Amazon?)&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;04cd&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Anyway, here’s my story, to get us started on my rant.&lt;/p&gt;
&lt;p id=&quot;fceb&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;One day, after I’d been working at Google for just over 2 years, I got an email from the Bigtable engineering team. It said something along the lines of:&lt;/p&gt;
&lt;p id=&quot;d48c&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Dear Steve,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;0bf7&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Greetings from the Bigtable team. We wanted to let you know that you are running a very, very old Bigtable binary in the [some data center name] data center. That version is no longer supported, and we would like to work with you to help you upgrade to the latest version.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;02a5&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Please let us know if you can schedule some time to work with us on this.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;0770&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Best,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;b3af&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Bigtable Team&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;4a24&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;You get a lot of email at Google, as you can imagine, and when I glanced at this one, this is what I first perceived it to be saying:&lt;/p&gt;
&lt;p id=&quot;03d2&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Dear&lt;/em&gt; &lt;strong class=&quot;hi ij&quot;&gt;&lt;em class=&quot;ii&quot;&gt;RECIPIENT&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;ii&quot;&gt;,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;f81e&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Greetings from Some Team. We wanted to let you know blah blah blah blah blah blah blah. Blah blah blah blah blah blah blah BLAH, and blah blah blah blah immediately.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;ead9&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Please let us know if you can schedule some of your precious time to blah blah blah.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;702a&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Best,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;7355&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Some Team&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;5b9c&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I almost deleted it on the spot, but there was this lingering, nagging feeling that it didn’t &lt;em class=&quot;ii&quot;&gt;quite&lt;/em&gt; feel like a form letter, even though it &lt;em class=&quot;ii&quot;&gt;obviously&lt;/em&gt; wasn’t for me, since I didn’t have a Bigtable.&lt;/p&gt;
&lt;p id=&quot;e46e&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But it was weird.&lt;/p&gt;
&lt;p id=&quot;d293&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;For the rest of the day, as I was alternating between working and deciding which species of gummy shark to try next in the micro-kitchens, of which there were at least three close enough to hit from my seat with a well-aimed biscuit, I thought about that email with a growing sense of mild anxiety.&lt;/p&gt;
&lt;p id=&quot;9431&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;They had used my name specifically. And the email had been sent to my email address and nobody else’s, and not by cc: or bcc:. The tone was very personal and pointed. Maybe it was some sort of mistake?&lt;/p&gt;
&lt;p id=&quot;19bc&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Curiosity finally got the better of me, and I went to look at my Borg console in the data center they’d mentioned in the email.&lt;/p&gt;
&lt;p id=&quot;8645&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And sure enough, I was running a Bigtable there. Whaaaaat? I looked at its contents, and lo! It was from the Bigtable codelab I’d run back in my first week as a Noogler, in June 2005. The codelab had you fire up a Bigtable so you could programmatically write some values to it, and I had apparently never shut it down afterwards. It was still running there, over 2 years later.&lt;/p&gt;
&lt;p id=&quot;9f7b&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;There are several remarkable aspects to this story. One is that running a Bigtable was so inconsequential to Google’s scale that it took 2 years before anyone even noticed it, and even then, only because the version was old. As a point of comparison, I considered using &lt;a href=&quot;https://cloud.google.com/bigtable&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Google Cloud Bigtable&lt;/a&gt; for my online game, but it costs an estimated $16,000/year for an &lt;em class=&quot;ii&quot;&gt;empty&lt;/em&gt; Bigtable on GCP. I’m not saying they’re gouging you, but in my own personal opinion, that feels like a lot of money for an empty fucking database.&lt;/p&gt;
&lt;p id=&quot;b925&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Another remarkable aspect is that &lt;em class=&quot;ii&quot;&gt;it was still running after 2 years&lt;/em&gt;. WTF? Data centers come and go; they experience outages, they undergo routine maintenance, they change all the time. Hardware gets upgraded, network switches swap out, everything is constantly being improved. How the heck were they able to keep my software running for 2 years in the face of all that change? It may feel like a humdrum achievement in 2020, but in 2005–2007 it was pretty impressive.&lt;/p&gt;
&lt;p id=&quot;73e4&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And then there is in my opinion the most remarkable aspect of all, which is that an unrelated engineering team in some other state was reaching out to &lt;em class=&quot;ii&quot;&gt;me&lt;/em&gt;, the owner of some tiny mostly-empty Bigtable instance which had had &lt;em class=&quot;ii&quot;&gt;zero traffic&lt;/em&gt; for the past 2 years, asking if they could help me upgrade.&lt;/p&gt;
&lt;p id=&quot;d0bb&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I thanked them and shut it down and life went on. But I still think about that letter, thirteen years later. Because I sometimes get similar letters from the Google Cloud Platform. They look like this:&lt;/p&gt;
&lt;p id=&quot;c068&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Dear Google Cloud Platform User,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;ec5e&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;We are writing to remind you that we are sunsetting [Important Service you are using] as of August 2020, after which you will not be able to perform any updates or upgrades on your instances. We encourage you to upgrade to the latest version, which is in Beta, has no documentation, no migration path, and which we have kindly deprecated in advance for you&lt;/em&gt;.&lt;/p&gt;
&lt;p id=&quot;9bff&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;We are committed to ensuring that all developers of Google Cloud Platform are minimally disrupted by this change.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;1d71&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Besties Forever,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;b8c9&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Google Cloud Platform&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;191d&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But I barely skim them, because what they are really saying is:&lt;/p&gt;
&lt;p id=&quot;9035&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Dear&lt;/em&gt; &lt;strong class=&quot;hi ij&quot;&gt;&lt;em class=&quot;ii&quot;&gt;RECIPIENT&lt;/em&gt;&lt;/strong&gt;&lt;em class=&quot;ii&quot;&gt;,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;63a8&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Fuck yooooouuuuuuuu. Fuck you, fuck you, Fuck You. Drop whatever you are doing because it’s not important. What is important is OUR time. It’s costing us time and money to support our shit, and we’re tired of it, so we’re not going to support it anymore. So drop your fucking plans and go start digging through our shitty documentation, begging for scraps on forums, and oh by the way, our new shit is COMPLETELY different from the old shit, because well, we fucked that design up pretty bad, heh, but hey, that’s YOUR problem, not our problem.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;6aa7&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;We remain committed as always to ensuring everything you write will be unusable within 1 year.&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;7d39&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Please go fuck yourself,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;589b&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Google Cloud Platform&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;f3b8&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And the thing is, I get these about once a month. It happens so often and so reliably that I have been inexorably pushed &lt;em class=&quot;ii&quot;&gt;away&lt;/em&gt; from GCP, towards cloud agnosticism. I no longer take dependencies on their proprietary service offerings, because it actually winds up being less DevOps work, on average, to support open-source systems running on bare VMs, than to try to keep up with Google’s deprecation treadmill.&lt;/p&gt;
&lt;p id=&quot;77c1&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Before I return to shitting on Google Cloud Platform, because boyo I am nowhere &lt;em class=&quot;ii&quot;&gt;near&lt;/em&gt; finished yet, let’s go visit how software engineering works in some other domains. Google engineers pride themselves on their software engineering discipline, and that’s actually what gets them into trouble. Pride is a trap for the unwary, and it has ensnared many a Google team into thinking that their decisions are always right, and that correctness (by some vague fuzzy definition) is more important than customer focus.&lt;/p&gt;
&lt;p id=&quot;1b8c&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I’m going to pick a few somewhat arbitrary examples from other big software systems, but hopefully you’ll be able to start spotting the pattern everywhere; that pattern being: &lt;strong class=&quot;hi ij&quot;&gt;Backwards compatibility keeps systems alive and relevant for decades&lt;/strong&gt;.&lt;/p&gt;
&lt;p id=&quot;c284&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Backwards compatibility is a design goal of all successful systems that are designed for &lt;em class=&quot;ii&quot;&gt;open&lt;/em&gt; use; that is, implemented as open source, and/or guided by open standards. I feel like I’m stating something that’s so obvious that we should all be awkwardly embarrassed, but no. It’s a political issue, so I need examples.&lt;/p&gt;
&lt;p id=&quot;94db&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;The first system I’ll pick is the oldest: GNU Emacs, which is a sort of hybrid between Windows Notepad, a monolithic-kernel operating system, and the International Space Station. It’s a bit tricky to explain, but in a nutshell, Emacs is a platform written in 1976 (yes, almost half a century ago) for writing software to make you more productive, masquerading as a text editor.&lt;/p&gt;
&lt;p id=&quot;6e9d&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I use Emacs every single day. Yes, I’m also using IntelliJ every day, and that has grown into a powerful tooling platform in its own right. But writing software extensions for IntelliJ is a much more ambitious and complex undertaking than writing extensions for Emacs. And more importantly, stuff lasts &lt;em class=&quot;ii&quot;&gt;forever&lt;/em&gt; on Emacs.&lt;/p&gt;
&lt;p id=&quot;673f&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I’m still using software that I wrote for Emacs back in 1995. And I’m sure there are people who are still using software they wrote for Emacs from the mid-80s, if not earlier. Every once in a while it might require a minor tweak, but it’s really quite rare. I’m not aware of anything I’ve ever written for Emacs (and I’ve written a lot) that was ever forced into re-architecture.&lt;/p&gt;
&lt;p id=&quot;cf77&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Emacs does have a deprecation facility called make-obsolete. Emacs’ terminology for fundamental software engineering concepts (like what is a “window”) are often different from the industry conventions, because Emacs invented them long, long ago. The perils of being before your time: Your names are all wrong. But Emacs does indeed have deprecation, called &lt;em class=&quot;ii&quot;&gt;obsolescence&lt;/em&gt; in their lingo.&lt;/p&gt;
&lt;p id=&quot;2bec&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;However, the Emacs folks seem to have a different working definition. A different underlying philosophy, if you will.&lt;/p&gt;
&lt;p id=&quot;f6c6&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;In the Emacs world (and in many other domains, some of which we’ll explore below), when they make an API obsolete, they are basically saying: “You really shouldn’t use this approach, because even though it works, it suffers from various deficiencies which we enumerate here. But in the end it’s your call.”&lt;/p&gt;
&lt;p id=&quot;cf46&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Whereas in the Google world, deprecation means: “We are breaking our commitments to you.” It really does. That’s what it ultimately means. It means they are going to force you to do some work, possibly a large amount of rework, &lt;em class=&quot;ii&quot;&gt;on a regular basis&lt;/em&gt;, as punishment for doing what they told you to do originally — as punishment for listening to their glossy marketing on their &lt;a href=&quot;https://cloud.google.com/gcp&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;website&lt;/a&gt;: Better software. Faster! You do &lt;em class=&quot;ii&quot;&gt;everything&lt;/em&gt; they tell you to do, and you launch your application or service, and then, bang, a year or two later it breaks down.&lt;/p&gt;
&lt;p id=&quot;9f63&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;This is like selling you a used car that they know is going to break down in under 1000 miles.&lt;/p&gt;
&lt;p id=&quot;4411&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;These are two very, very different philosophical definitions of “deprecation”. Google’s definition reeks of &lt;a href=&quot;https://en.wikipedia.org/wiki/Planned_obsolescence&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;planned obsolescence&lt;/a&gt;. I don’t believe that it’s &lt;em class=&quot;ii&quot;&gt;actually&lt;/em&gt; planned obsolescence in the same sense that, say, Apple perpetrates. But Google definitely plans to break your stuff, in a roundabout way. I know because I worked there as a software engineer for 12+ years. They have loose internal guidelines about how much backwards compatibility to bake into service offerings, but in the end it’s up to each individual team or service. There are no corporate-level or engineering-level guidelines, and the &lt;em class=&quot;ii&quot;&gt;longest&lt;/em&gt; anyone has the courage to recommend, in terms of deprecation cycles, is “try to give your customers 6–12 months to upgrade before you drape them over the barrel.”&lt;/p&gt;
&lt;p id=&quot;de52&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;This is hurting them far more than they realize, and it will continue to hurt them for years to come, because it’s not part of their DNA to care about customers. More on this below.&lt;/p&gt;
&lt;p id=&quot;6928&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;For the moment, I’m going to make the bold assertion that Emacs is successful in large part, perhaps even &lt;em class=&quot;ii&quot;&gt;mostly&lt;/em&gt;, because they take backwards compatibility so seriously. In fact, that’s the thesis of this essay. Successful long-lived open systems owe their success to building decades-long micro-communities around &lt;em class=&quot;ii&quot;&gt;extensions/plugins&lt;/em&gt;, also known as a &lt;em class=&quot;ii&quot;&gt;marketplace&lt;/em&gt;. I’ve ranted about Platforms before, and how important they are, and how Google has never once in their entire corporate history ever really understood what goes into making a successful open Platform, not counting Android or Chrome.&lt;/p&gt;
&lt;p id=&quot;33e4&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Actually I should talk about Android briefly, because you’re probably thinking, hey, what about Android?&lt;/p&gt;
&lt;p id=&quot;c8f6&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;First, &lt;em class=&quot;ii&quot;&gt;Android is not Google&lt;/em&gt;. They have almost nothing to do with each other. Android is a company that was purchased by Google in July 2005, and that company has been allowed to run more or less autonomously, and in fact has remained largely intact through the intervening years. Android is an infamously hairy tech stack, and a just-as-infamously prickly organization. As one Googler put it, “One does not simply walk into Android.”&lt;/p&gt;
&lt;p id=&quot;17a1&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I’ve done my share of ranting about how bad some of Android’s early design decisions have been. Heck, at the time I was doing that ranting, they were busy rolling out shit like Instant Apps, which is now (surprise!) &lt;a href=&quot;https://android-developers.googleblog.com/2019/04/google-play-instant-feature-plugin.html#:~:text=When%20building%20your%20app%2C%20you,bundle%20as%20soon%20as%20possible.&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;deprecated&lt;/a&gt;, and haha on you if you were dumb enough to listen to them when they told you to port all your stuff to Instant Apps.&lt;/p&gt;
&lt;p id=&quot;f23b&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But there’s a difference here, a material difference, which is that the Android folks actually DO understand how important Platforms are, they go &lt;em class=&quot;ii&quot;&gt;well out of their way&lt;/em&gt; to prevent breaking your old Android code. In fact, their efforts to keep backward compatibility are so extreme that even I, during my brief stint in Android-land a few years back, found myself trying to convince them to drop support for some of the oldest devices and APIs. (I was wrong, as I’ve been about many other things past and present. Sorry Android folks! Now that I’ve visited Indonesia, I see why we need them.)&lt;/p&gt;
&lt;p id=&quot;377f&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;The Android folks take backwards compatibility to almost unimaginable extremes, which piles on massive amounts of legacy technical debt in their systems and toolchains. Oh boy, you should see some of the crazy stuff they have to do in their build system, all in the name of compatibility.&lt;/p&gt;
&lt;p id=&quot;bde0&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;For this, I award Android the coveted You’re Not Google award. You really don’t want to be Google. They don’t know how to build platforms that can last, whereas Android &lt;em class=&quot;ii&quot;&gt;does&lt;/em&gt; know how to do it. And so Google is being very wise in one respect: letting the Android folks do things their way.&lt;/p&gt;
&lt;p id=&quot;3ec4&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Instant Apps was a pretty dumb idea, though. You know why? Because it required you to &lt;em class=&quot;ii&quot;&gt;rewrite and re-architect your application!&lt;/em&gt; As if people are just going to up and rewrite 2 million apps. I’m guessing Instant Apps was probably a Googler’s idea.&lt;/p&gt;
&lt;p id=&quot;cef2&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But you see the difference here. Backwards compatibility comes with a steep cost, and Android has chosen to bear the burden of that cost, whereas Google insists that &lt;em class=&quot;ii&quot;&gt;you&lt;/em&gt;, the paying customer, bear that burden.&lt;/p&gt;
&lt;p id=&quot;4d09&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;You can see Android’s commitment to backwards compatibility in their APIs. It’s a sure sign, when there are four or five different coexisting subsystems for doing literally the same thing, that underlying it all is a commitment to backwards compatibility. Which in the Platforms world, is synonymous with commitment to your customers, and to your marketplace.&lt;/p&gt;
&lt;p id=&quot;50ec&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Google’s pride in their software engineering hygiene is what gets them into trouble here. They don’t like it when there are lots of different ways to do the same thing, with older, less-desirable ways sitting alongside newer fancier ways. It increases the learning curve for newcomers to the system, it increases the burden of supporting the legacy APIs, it slows down new feature velocity, and the worst sin of all: it’s ugly. Google is like Lady Ascot in Tim Burton’s Alice in Wonderland:&lt;/p&gt;
&lt;p id=&quot;f219&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;strong class=&quot;hi ij&quot;&gt;Lady Ascot&lt;/strong&gt;: Alice, do you know what I fear most?&lt;/p&gt;
&lt;p id=&quot;8b14&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;strong class=&quot;hi ij&quot;&gt;Alice Kingsley&lt;/strong&gt;: The decline of the aristocracy?&lt;/p&gt;
&lt;p id=&quot;87b2&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;strong class=&quot;hi ij&quot;&gt;Lady Ascot&lt;/strong&gt;: &lt;em class=&quot;ii&quot;&gt;Ugly grandchildren&lt;/em&gt;.&lt;/p&gt;
&lt;p id=&quot;e941&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;To explore the tradeoff of Ugly vs Practical, let’s take a peek at a third successful platform (after Emacs and Android) and see how it fares: Java itself.&lt;/p&gt;
&lt;p id=&quot;0fbb&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Java has &lt;em class=&quot;ii&quot;&gt;tons&lt;/em&gt; of deprecated APIs. Deprecation is super popular with Java programmers, more so than for most programming languages. Java itself, the core language and libraries, deprecates APIs all the time.&lt;/p&gt;
&lt;p id=&quot;f717&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;To take just one of thousands of examples, &lt;a href=&quot;https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/lang/Thread.html#stop()&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;killing threads&lt;/a&gt; is deprecated. It’s been deprecated since Java 1.2, released in December 1998. It’s been 22 years since they deprecated it.&lt;/p&gt;
&lt;p id=&quot;2b55&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;My live production code still kills threads &lt;em class=&quot;ii&quot;&gt;every day&lt;/em&gt;. Is that a good thing? Absolutely! I mean, obviously if I were to rewrite the code today I’d do it differently. But my game code, which has been able to make hundreds of thousands of people happy over the past 2 decades, was written to kill worker threads that take too long, and &lt;em class=&quot;ii&quot;&gt;I’ve never had to change it.&lt;/em&gt; I know my system best, and I have literally 25 years of experience with running it in production, and I can tell you: In my use case, killing these particular worker threads is &lt;em class=&quot;ii&quot;&gt;harmless&lt;/em&gt;. It is not worth it to focus my time and energy on rewriting that code, and praise be unto Larry Ellison (I guess), since Oracle has never made me rewrite it.&lt;/p&gt;
&lt;p id=&quot;dd33&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I guess Oracle understands Platforms too. Go figure.&lt;/p&gt;
&lt;p id=&quot;06d9&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;You can see evidence all through Java’s core APIs of waves of deprecation, like glacier lines in a canyon. There are easily five or six different keyboard focus managers in Java Swing. In fact it’s hard to find a Java API that isn’t deprecated. But they all still work! I think the only time the Java core team will actually &lt;em class=&quot;ii&quot;&gt;remove&lt;/em&gt; an API is if it causes a blatant security problem.&lt;/p&gt;
&lt;p id=&quot;d186&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Here’s the thing, folks: We software developers are all super busy, and we are also faced with competing alternatives in &lt;em class=&quot;ii&quot;&gt;every&lt;/em&gt; software domain. At any given time, programmers in language X are looking at language Y as a possible replacement. Oh, you don’t believe me? What about Swift? Everyone’s migrating *to* Swift, not away from it, right? Oho, how little you know. Businesses are taking a mercenary’s accounting of their dual mobile teams (iOS and Android), and starting to realize that those phony-sounding dog-and-pony-show cross-platform development systems like Flutter and React Native have real teeth, and using them could cut their mobile team sizes in half, or alternately, make them twice as productive. There’s real money at stake here. Yes, there are trade-offs, but on the other hand, mooooooooney.&lt;/p&gt;
&lt;p id=&quot;12dc&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Let’s say hypothetically that Apple was dumb enough to pull a Guido van Rossum, and declare that Swift 6.0 is backwards-incompatible with Swift 5.0, much in the way that Python 3 is incompatible with Python 2.&lt;/p&gt;
&lt;p id=&quot;5064&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I probably told this story ten years ago, but about fifteen years ago I was at O’Reilly’s Foo Camp with Guido, sitting in a tent with Paul Graham and a bunch of other at-the-time mucky-mucks, waiting for Larry Page to fly out in his personal helicopter, and Guido was droning on tonelessly in the sweltering heat about “Python 3000”, which he had named in honor of the number of years it would take everyone to migrate to it. We kept asking him why he was breaking compatibility, and he’d answer, “Unicode”. And we’d ask him, hey, if we have to rewrite our code, then what other benefits are we going to see? And he’d answer, “Yoooooooooooooouuuuuuuniiiiiiicoooooooode”.&lt;/p&gt;
&lt;p id=&quot;a1d3&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;If you install the Google Cloud Platform “gcloud” SDK, you’ll get this notice:&lt;/p&gt;
&lt;p id=&quot;3fdb&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;Dear RECIPIENT,&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;ec71&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;&lt;em class=&quot;ii&quot;&gt;We would like to remind you that support for Python 2 is deprecated, so fuuuuuuck yoooooooooooooooooooouuuuuu&lt;/em&gt;&lt;/p&gt;
&lt;p id=&quot;0c3c&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;…and so on. The Circle of Life.&lt;/p&gt;
&lt;p id=&quot;856f&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But the thing is, every single developer has choices. And if you make them rewrite their code enough times, some of those &lt;em class=&quot;ii&quot;&gt;other&lt;/em&gt; choices are going to start looking mighty appealing. They’re not your hostages, as much as you’d like them to be. They are your guests. Python is still a very popular programming language, to be sure — but &lt;em class=&quot;ii&quot;&gt;golly&lt;/em&gt; did Python 3(000) create a huge mess for themselves, their communities, and the &lt;em class=&quot;ii&quot;&gt;users&lt;/em&gt; of their communities’ software — one that has been a train-wreck in progress for fifteen years and is still kicking.&lt;/p&gt;
&lt;p id=&quot;ed33&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;How much Python software was rewritten in Go (or Ruby, or some other alternative) because of that backwards incompatibility? How much &lt;em class=&quot;ii&quot;&gt;new&lt;/em&gt; software was written in something other than Python, which &lt;em class=&quot;ii&quot;&gt;might&lt;/em&gt; have been written in Python if Guido hadn’t burned everyone’s house down? It’s hard to say, but I can tell you, it hasn’t been &lt;em class=&quot;ii&quot;&gt;good&lt;/em&gt; for Python. It’s a huge mess and everyone is miserable.&lt;/p&gt;
&lt;p id=&quot;4135&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;So let’s say Apple pulls a Guido and breaks compatibility. What do you think will happen? Well, maybe 80–90% of the developers will rewrite their software, if they’re lucky. Which is the same thing as saying, they’re going to lose 10–20% of their user base to some competing language, e.g. Flutter.&lt;/p&gt;
&lt;p id=&quot;a8af&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Do that a few times, and you’ve lost half your user base. And like in sports, momentum in the programming world is &lt;em class=&quot;ii&quot;&gt;everything&lt;/em&gt;. Anyone who shows up on the charts as “lost half their users in the past 5 years” is being flagged as a Big Fat Loser. You don’t want to be trending down in the Platforms world. But that’s exactly where deprecation — the “removing APIs” kind, not the “warning but permitting” kind — will get you, over time: Trending down. Because every time you shake loose some of your developers, you’ve (a) lost them for good, because they are angry at you for breaking your contract, and (b) given them to your competitors.&lt;/p&gt;
&lt;p id=&quot;6886&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Ironically, I played a role in helping Google become the deprecation-happy prima donnas that they are today, when I built Grok, which is a source-code understanding engine that facilitates automation and tooling on source code itself — similar to an IDE, but as a cloud-based service that stores materialized representations of Google’s entire multi-billion-line source graph in a big datastore.&lt;/p&gt;
&lt;p id=&quot;08aa&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Grok provided Googlers with a powerful foundation for doing automated refactorings across the entire code base (literally all of Google). Grok can figure out not just your upstream dependencies (who you depend on), but also your &lt;em class=&quot;ii&quot;&gt;downstream&lt;/em&gt; dependencies (who depends on you), so when you change an API, you know everyone you’re breaking! So you can make a change and know that every consumer of your API is being updated to the replacement version; in fact, often, via a tool they wrote called Rosie, you can automate it entirely.&lt;/p&gt;
&lt;p id=&quot;1652&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;This permits Google’s code base internally to be almost preternaturally “clean”, as they have these automated mice scurrying about the house, &lt;em class=&quot;ii&quot;&gt;There Will Come Soft Rains&lt;/em&gt;-style, cleaning up the dust balls as they rename SomeDespicablyLongFunctionName to SomeDespicablyLongMethodName because someone decided it was an ugly grandchild and it needed to be euthanized.&lt;/p&gt;
&lt;p id=&quot;222b&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And honestly it works pretty well for Google… &lt;em class=&quot;ii&quot;&gt;internally&lt;/em&gt;. I mean, yes, the Go community within Google does get some good-natured laughs at the expense of the Google Java community over the latter’s habit of gratuitous continuous refactoring. If you keep twiddling with something N times, then it implies that not only did you fuck it up N-1 times, but after a while it’s pretty clear you’ve probably fucked it up on the Nth try as well. But by and large, they stay on top of it, and stuff stays “clean”.&lt;/p&gt;
&lt;p id=&quot;4ee1&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;The problem begins when they take that attitude and try to impose it on their Cloud customers and other API users.&lt;/p&gt;
&lt;p id=&quot;e703&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I’ve walked you a bit through Emacs, Android, and Java; let’s look at one last successful long-lived platform: The Web itself. Boy, HTTP sure has gone through a lot of iterations since 1995 when we were all using blink tags and under-construction signs in our handwritten HTML pages.&lt;/p&gt;
&lt;p id=&quot;0e11&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But it still works! And those pages still work! That’s right, folks, browsers are some of the world champions at backwards compatibility. Chrome is another example of a rare Google Platform that has their heads screwed on straight, and, you guessed it, Chrome acts effectively like a separate company from the rest of Google.&lt;/p&gt;
&lt;p id=&quot;7203&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I’ll also give a shout-out to our friends in the Operating Systems business: Windows, Linux, NOT APPLE FUCK YOU APPLE, FreeBSD, and so on, for doing such a great job of backwards compatibility on their successful platforms. (Apple gets like a C-minus at best, since they break shit all the time for no good reason, but somehow the community papers over it on each release, and so far, containers haven’t completely obsoleted OS X… yet.)&lt;/p&gt;
&lt;p id=&quot;02d5&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But wait, you say. Aren’t you comparing apples to oranges, with standalone single-machine software systems like Emacs/JDK/Android/Chrome to multi-machine systems and APIs like Clouds?&lt;/p&gt;
&lt;p id=&quot;c6fd&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Well, I tweeted this yesterday, but as a Larry Wall “sucks/rules”-style yardstick, I searched for “deprecated” on Google and Amazon’s developer sites, respectively, and even though AWS has &lt;em class=&quot;ii&quot;&gt;hundreds&lt;/em&gt; more service offerings than GCP, Google’s developer docs mention deprecation around 7x as often.&lt;/p&gt;
&lt;p id=&quot;e94d&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;At this point, if anyone at Google is reading this, they’re probably ready to pull out charts, Donald Trump interview style, showing me how they’re actually doing really well, and that I can’t do unfair comparisons like “deprecation mentions as a function of number of service offerings”.&lt;/p&gt;
&lt;p id=&quot;6f3d&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But after all these years, Google Cloud is still #3 (I still haven’t written my “&lt;strong class=&quot;hi ij&quot;&gt;How to Aim For #2 and Miss&lt;/strong&gt;” blog post about this), and according to some internal sources, there’s some concern that they may sink to #4 soon.&lt;/p&gt;
&lt;p id=&quot;8ada&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I don’t have a slam-dunk silver-bullet argument for you here, to “prove” my thesis. All I have are the colorful examples I’ve shared, which I’ve accumulated over 30 years as a developer. I’ve alluded to the deeply philosophical nature of this problem; in a sense, it’s politicized within the software communities. Some folks believe that platform &lt;em class=&quot;ii&quot;&gt;developers&lt;/em&gt; should shoulder the costs of compatibility, and others believe that platform &lt;em class=&quot;ii&quot;&gt;users&lt;/em&gt; (developers themselves) should bear the costs. It’s really that simple. And isn’t politics always about who has to shoulder costs for shared problems?&lt;/p&gt;
&lt;p id=&quot;5e62&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;So it’s political. And there will be angry responses to this rant.&lt;/p&gt;
&lt;p id=&quot;475e&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;As a &lt;em class=&quot;ii&quot;&gt;user&lt;/em&gt; of Google Cloud Platform, and also (at Grab) of AWS for 2 years, I can tell you that there’s a &lt;em class=&quot;ii&quot;&gt;world&lt;/em&gt; of difference between the philosophies of Amazon and Google when it comes to priorities. I’m not actively developing on AWS, so I don’t have as much of a sense for how often they sunset APIs that they have previously dangled alluringly before unwitting developers. But I have a suspicion it’s nowhere &lt;em class=&quot;ii&quot;&gt;near&lt;/em&gt; as often as happens at Google, and I believe wholeheartedly that this source of constant friction, and frustration, in GCP, is one of the biggest factors holding it back.&lt;/p&gt;
&lt;p id=&quot;981e&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;I know I haven’t gone into a lot of specific details about GCP’s deprecations. I can tell you that virtually everything I’ve used, from networking (legacy to VPC) to storage (Cloud SQL v1 to v2) to Firebase (now Firestore with a totally different API) to App Engine (don’t even get me started) to Cloud Endpoints to… I dunno, &lt;em class=&quot;ii&quot;&gt;everything&lt;/em&gt;, has forced me to rewrite it all after at most 2–3 years, and they &lt;em class=&quot;ii&quot;&gt;never&lt;/em&gt; automate it for you, and often there is &lt;a href=&quot;https://stackoverflow.com/questions/47716433/migrate-from-legacy-network-in-gce&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;no documented migration path&lt;/a&gt; at all. It’s just crickets.&lt;/p&gt;
&lt;p id=&quot;dff5&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And every time, I look over at AWS, and I ask myself what the fuck I’m still doing on GCP. They clearly don’t want customers. They want &lt;em class=&quot;ii&quot;&gt;shoppers&lt;/em&gt;. Do you see the difference? Let me show you.&lt;/p&gt;
&lt;p id=&quot;1e76&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Google Cloud has a &lt;a href=&quot;https://cloud.google.com/marketplace&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;Marketplace&lt;/a&gt; in which people can offer their software solutions, and in order to avoid the empty-restaurant effect, they had to populate it with some offerings, so they contracted with a company called Bitnami to create a bunch of “click to deploy” solutions, or perhaps I should write “solutions”, because they don’t solve a fucking thing. They’re just there as checkboxes, as marketing filler, and Google never gave a shit whether any of them worked from Day One. I know the PMs who were driving it and I can assure you, those men do not give a shit.&lt;/p&gt;
&lt;p id=&quot;e7a5&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Take &lt;a href=&quot;https://console.cloud.google.com/marketplace/details/click-to-deploy-images/percona&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;click-to-deploy Percona&lt;/a&gt;, for instance. I was getting fed up with Google Cloud SQL’s shenanigans, and started looking into setting up my own Percona cluster as an alternative. And for once, Google was going to have done something right, and they were going to save me some time and effort with the click of a button!&lt;/p&gt;
&lt;p id=&quot;87a3&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Go ahead, I dare you. Follow the link and click the button. Choose “yes” to get all the default parameters and deploy the cluster to your Google Cloud project. Haha, joke’s on you; it doesn’t work. None of that shit works. It’s never tested, starts bit-rotting the minute they roll it out, and it wouldn’t surprise me if over half the click-to-deploy “solutions” (now we understand the air quotes) don’t work &lt;em class=&quot;ii&quot;&gt;at all.&lt;/em&gt; It’s a completely embarrassing dark alley that you don’t want to wander down.&lt;/p&gt;
&lt;p id=&quot;2f76&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;But Google is straight-up &lt;em class=&quot;ii&quot;&gt;encouraging&lt;/em&gt; you to use it. They want you to &lt;em class=&quot;ii&quot;&gt;buy&lt;/em&gt; it. It’s transactional for them. They don’t want to &lt;em class=&quot;ii&quot;&gt;support&lt;/em&gt; anything. It’s not part of Google’s DNA. Yes, the engineers support each other, as evidenced by my Bigtable anecdote. But for their customer-facing products and services, they have &lt;em class=&quot;ii&quot;&gt;always&lt;/em&gt; been ruthless in &lt;a href=&quot;https://killedbygoogle.com/&quot; class=&quot;bh gu ie if ig ih&quot; target=&quot;_blank&quot; rel=&quot;noopener nofollow&quot;&gt;shutting down any offering&lt;/a&gt; that doesn’t meet their money bar, even if it has millions of users.&lt;/p&gt;
&lt;p id=&quot;6d12&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And this presents a real problem for GCP, because that DNA is behind all their Cloud offerings. They aren’t committed to supporting anything; it’s well-known that they refuse to host (as a managed service) any third-party software until &lt;em class=&quot;ii&quot;&gt;after&lt;/em&gt; AWS has already done the same thing and built a successful business around it, at which point their customers hold them at gunpoint. But that’s the bar, to get Google to support something.&lt;/p&gt;
&lt;p id=&quot;9e2f&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;This lack of a support culture, combined with a “let’s break it in the name of making it prettier” deprecation treadmill, is alienating their developers.&lt;/p&gt;
&lt;p id=&quot;fff6&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And that’s not a good thing if you want to build a long-lived platform.&lt;/p&gt;
&lt;p id=&quot;a964&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Google, wake the fuck up. It’s 2020. You are still losing. It’s time to take a hard look in the mirror and answer for yourselves whether you really want to be in the Cloud business.&lt;/p&gt;
&lt;p id=&quot;d4be&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;If you do, then &lt;strong class=&quot;hi ij&quot;&gt;stop breaking shit&lt;/strong&gt;. You guys are rich. We developers are not. So when it comes to shouldering the burden of compatibility, &lt;em class=&quot;ii&quot;&gt;you need to pay for it.&lt;/em&gt; Not us.&lt;/p&gt;
&lt;p id=&quot;733a&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Because there are at least three other really good Clouds out there. They are beckoning.&lt;/p&gt;
&lt;p id=&quot;86a6&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;And now I’ll get back to trying to fix all my broken stuff. Sigh.&lt;/p&gt;
&lt;p id=&quot;4b72&quot; class=&quot;hg hh bo hi b hj hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ef de&quot;&gt;Tune in next time!&lt;/p&gt;
</description>
<pubDate>Sat, 15 Aug 2020 02:44:18 +0000</pubDate>
<dc:creator>bigiain</dc:creator>
<og:type>article</og:type>
<og:title>Dear Google Cloud: Your Deprecation Policy is Killing You</og:title>
<og:description>God dammit, I didn’t want to blog again. I have so much stuff to do. Blogging takes time and energy and creativity that I could be putting…</og:description>
<og:url>https://medium.com/@steve.yegge/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc</og:url>
<dc:language>en</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://medium.com/@steve.yegge/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc</dc:identifier>
</item>
</channel>
</rss>